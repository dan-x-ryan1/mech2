

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed May 16 20:58:59 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1,inline
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1,inline
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1,inline
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1,group=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1,inline
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	text146,global,reloc=2,class=CODE,delta=1
   168                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   169                           	psect	text147,global,reloc=2,class=CODE,delta=1
   170                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   171                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   172  0000                     
   173                           ; Version 1.44
   174                           ; Generated 14/09/2017 GMT
   175                           ; 
   176                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   177                           ; All rights reserved.
   178                           ; 
   179                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   180                           ; 
   181                           ; Redistribution and use in source and binary forms, with or without modification, are
   182                           ; permitted provided that the following conditions are met:
   183                           ; 
   184                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   185                           ;        conditions and the following disclaimer.
   186                           ; 
   187                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   188                           ;        of conditions and the following disclaimer in the documentation and/or other
   189                           ;        materials provided with the distribution.
   190                           ; 
   191                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   192                           ;        software without specific prior written permission.
   193                           ; 
   194                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   195                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   196                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   197                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   198                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   199                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   200                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   201                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   202                           ; 
   203                           ; 
   204                           ; Code-generator required, PIC18F67J50 Definitions
   205                           ; 
   206                           ; SFR Addresses
   207  0000                     
   208                           	psect	idataCOMRAM
   209  0154FC                     __pidataCOMRAM:
   210                           	opt stack 0
   211                           
   212                           ;initializer for _gCursor
   213  0154FC  0006               	dw	6
   214  0154FE  0006               	dw	6
   215                           
   216                           ;initializer for _numReadings
   217  015500  000A               	dw	10
   218                           
   219                           ;initializer for _top
   220  015502  FFFF               	dw	65535
   221                           
   222                           ;initializer for _Bus_State
   223  015504  01                 	db	1
   224                           
   225                           ;initializer for _A
   226  015505  41                 	db	65
   227                           
   228                           ;initializer for _a
   229  015506  61                 	db	97
   230                           
   231                           ;initializer for _zero
   232  015507  30                 	db	48
   233                           
   234                           ;initializer for _l
   235  015508  80                 	db	128
   236                           
   237                           ;initializer for _w
   238  015509  80                 	db	128
   239                           
   240                           	psect	idataBANK0
   241  0155A2                     __pidataBANK0:
   242                           	opt stack 0
   243                           
   244                           ;initializer for _change
   245  0155A2  01                 	db	1
   246                           
   247                           	psect	idataBANK1
   248  015438                     __pidataBANK1:
   249                           	opt stack 0
   250                           
   251                           ;initializer for Console_Render@F6956
   252  015438  0006               	dw	6
   253  01543A  0006               	dw	6
   254                           
   255                           ;initializer for _gLineSize
   256  01543C  0080               	dw	128
   257  01543E  0007               	dw	7
   258                           
   259                           ;initializer for _gCharSize
   260  015440  0005               	dw	5
   261  015442  0007               	dw	7
   262                           
   263                           ;initializer for _countOff
   264  015444  00F8               	dw	248
   265                           
   266                           ;initializer for _countOn
   267  015446  007C               	dw	124
   268                           
   269                           ;initializer for _Low_Sensor
   270  015448  2710               	dw	10000
   271                           
   272                           ;initializer for _gForecolour
   273  01544A  FFFF               	dw	65535
   274                           
   275                           	psect	mediumconst
   276  00FBB6                     __pmediumconst:
   277                           	opt stack 0
   278  00FBB6  00                 	db	0
   279  00FBB7                     _InitList:
   280                           	opt stack 0
   281  00FBB7  1100               	dw	4352
   282  00FBB9  0080               	dw	128
   283  00FBBB  012C               	dw	300
   284  00FBBD  B100               	dw	45312
   285  00FBBF  0002               	dw	2
   286  00FBC1  0035               	dw	53
   287  00FBC3  0036               	dw	54
   288  00FBC5  B200               	dw	45568
   289  00FBC7  0002               	dw	2
   290  00FBC9  0035               	dw	53
   291  00FBCB  0036               	dw	54
   292  00FBCD  B300               	dw	45824
   293  00FBCF  0002               	dw	2
   294  00FBD1  0035               	dw	53
   295  00FBD3  0036               	dw	54
   296  00FBD5  0002               	dw	2
   297  00FBD7  0035               	dw	53
   298  00FBD9  0036               	dw	54
   299  00FBDB  B400               	dw	46080
   300  00FBDD  0000               	dw	0
   301  00FBDF  C000               	dw	49152
   302  00FBE1  00A2               	dw	162
   303  00FBE3  0002               	dw	2
   304  00FBE5  0084               	dw	132
   305  00FBE7  C100               	dw	49408
   306  00FBE9  00C5               	dw	197
   307  00FBEB  C200               	dw	49664
   308  00FBED  000D               	dw	13
   309  00FBEF  0000               	dw	0
   310  00FBF1  C300               	dw	49920
   311  00FBF3  008D               	dw	141
   312  00FBF5  002A               	dw	42
   313  00FBF7  C400               	dw	50176
   314  00FBF9  008D               	dw	141
   315  00FBFB  00EE               	dw	238
   316  00FBFD  C500               	dw	50432
   317  00FBFF  000A               	dw	10
   318  00FC01  3600               	dw	13824
   319  00FC03  00C8               	dw	200
   320  00FC05  E000               	dw	57344
   321  00FC07  0012               	dw	18
   322  00FC09  001C               	dw	28
   323  00FC0B  0010               	dw	16
   324  00FC0D  0018               	dw	24
   325  00FC0F  0033               	dw	51
   326  00FC11  002C               	dw	44
   327  00FC13  0025               	dw	37
   328  00FC15  0028               	dw	40
   329  00FC17  0028               	dw	40
   330  00FC19  0027               	dw	39
   331  00FC1B  002F               	dw	47
   332  00FC1D  003C               	dw	60
   333  00FC1F  0000               	dw	0
   334  00FC21  0003               	dw	3
   335  00FC23  0003               	dw	3
   336  00FC25  0010               	dw	16
   337  00FC27  0080               	dw	128
   338  00FC29  0078               	dw	120
   339  00FC2B  E100               	dw	57600
   340  00FC2D  0012               	dw	18
   341  00FC2F  001C               	dw	28
   342  00FC31  0010               	dw	16
   343  00FC33  0018               	dw	24
   344  00FC35  002D               	dw	45
   345  00FC37  0028               	dw	40
   346  00FC39  0023               	dw	35
   347  00FC3B  0028               	dw	40
   348  00FC3D  0028               	dw	40
   349  00FC3F  0026               	dw	38
   350  00FC41  002F               	dw	47
   351  00FC43  003B               	dw	59
   352  00FC45  0000               	dw	0
   353  00FC47  0003               	dw	3
   354  00FC49  0003               	dw	3
   355  00FC4B  0010               	dw	16
   356  00FC4D  3A00               	dw	14848
   357  00FC4F  0005               	dw	5
   358  00FC51  2A00               	dw	10752
   359  00FC53  0000               	dw	0
   360  00FC55  0002               	dw	2
   361  00FC57  0000               	dw	0
   362  00FC59  0081               	dw	129
   363  00FC5B  2B00               	dw	11008
   364  00FC5D  0000               	dw	0
   365  00FC5F  0003               	dw	3
   366  00FC61  0000               	dw	0
   367  00FC63  00A2               	dw	162
   368  00FC65  2900               	dw	10496
   369  00FC67  2C00               	dw	11264
   370  00FC69                     __end_of_InitList:
   371                           	opt stack 0
   372  00FC69                     Timer0_Init@PRESCALE:
   373                           	opt stack 0
   374  00FC69  0002               	dw	2
   375  00FC6B  0004               	dw	4
   376  00FC6D  0008               	dw	8
   377  00FC6F  0010               	dw	16
   378  00FC71  0020               	dw	32
   379  00FC73  0040               	dw	64
   380  00FC75  0080               	dw	128
   381  00FC77  0100               	dw	256
   382  00FC79                     __end_ofTimer0_Init@PRESCALE:
   383                           	opt stack 0
   384  00FC79                     PortProperty_Valid@F6830:
   385                           	opt stack 0
   386  00FC79  00                 	db	0
   387  00FC7A  01                 	db	1
   388  00FC7B  02                 	db	2
   389  00FC7C  00                 	db	0
   390  00FC7D  01                 	db	1
   391  00FC7E  00                 	db	0
   392  00FC7F  01                 	db	1
   393  00FC80  00                 	db	0
   394  00FC81  02                 	db	2
   395  00FC82  02                 	db	2
   396  00FC83  00                 	db	0
   397  00FC84  00                 	db	0
   398  00FC85  03                 	db	3
   399  00FC86  03                 	db	3
   400  00FC87  03                 	db	3
   401  00FC88  00                 	db	0
   402  00FC89                     __end_ofPortProperty_Valid@F6830:
   403                           	opt stack 0
   404  00FC89                     _dpowers:
   405                           	opt stack 0
   406  00FC89  0001               	dw	1
   407  00FC8B  000A               	dw	10
   408  00FC8D  0064               	dw	100
   409  00FC8F  03E8               	dw	1000
   410  00FC91  2710               	dw	10000
   411  00FC93                     __end_of_dpowers:
   412                           	opt stack 0
   413  00FC93                     _MASKS:
   414                           	opt stack 0
   415  00FC93  00                 	db	0
   416  00FC94  01                 	db	1
   417  00FC95  03                 	db	3
   418  00FC96  07                 	db	7
   419  00FC97  0F                 	db	15
   420  00FC98  1F                 	db	31
   421  00FC99  3F                 	db	63
   422  00FC9A  7F                 	db	127
   423  00FC9B  FF                 	db	255
   424  00FC9C                     __end_of_MASKS:
   425                           	opt stack 0
   426  00FC9C                     HMI_SetButton@F7213:
   427                           	opt stack 0
   428  00FC9C  00                 	db	0
   429  00FC9D  02                 	db	2
   430  00FC9E  01                 	db	1
   431  00FC9F  03                 	db	3
   432  00FCA0                     __end_ofHMI_SetButton@F7213:
   433                           	opt stack 0
   434  00FCA0                     Timer2_Init@PRESCALE:
   435                           	opt stack 0
   436  00FCA0  01                 	db	1
   437  00FCA1  04                 	db	4
   438  00FCA2  10                 	db	16
   439  00FCA3                     __end_ofTimer2_Init@PRESCALE:
   440                           	opt stack 0
   441  00FCA3                     _Font5x7:
   442                           	opt stack 0
   443  00FCA3  00                 	db	0
   444  00FCA4  00                 	db	0
   445  00FCA5  00                 	db	0
   446  00FCA6  00                 	db	0
   447  00FCA7  00                 	db	0
   448  00FCA8  00                 	db	0
   449  00FCA9  00                 	db	0
   450  00FCAA  5F                 	db	95
   451  00FCAB  00                 	db	0
   452  00FCAC  00                 	db	0
   453  00FCAD  00                 	db	0
   454  00FCAE  07                 	db	7
   455  00FCAF  00                 	db	0
   456  00FCB0  07                 	db	7
   457  00FCB1  00                 	db	0
   458  00FCB2  14                 	db	20
   459  00FCB3  7F                 	db	127
   460  00FCB4  14                 	db	20
   461  00FCB5  7F                 	db	127
   462  00FCB6  14                 	db	20
   463  00FCB7  24                 	db	36
   464  00FCB8  2A                 	db	42
   465  00FCB9  7F                 	db	127
   466  00FCBA  2A                 	db	42
   467  00FCBB  12                 	db	18
   468  00FCBC  23                 	db	35
   469  00FCBD  13                 	db	19
   470  00FCBE  08                 	db	8
   471  00FCBF  64                 	db	100
   472  00FCC0  62                 	db	98
   473  00FCC1  36                 	db	54
   474  00FCC2  49                 	db	73
   475  00FCC3  55                 	db	85
   476  00FCC4  22                 	db	34
   477  00FCC5  50                 	db	80
   478  00FCC6  00                 	db	0
   479  00FCC7  05                 	db	5
   480  00FCC8  03                 	db	3
   481  00FCC9  00                 	db	0
   482  00FCCA  00                 	db	0
   483  00FCCB  00                 	db	0
   484  00FCCC  1C                 	db	28
   485  00FCCD  22                 	db	34
   486  00FCCE  41                 	db	65
   487  00FCCF  00                 	db	0
   488  00FCD0  00                 	db	0
   489  00FCD1  41                 	db	65
   490  00FCD2  22                 	db	34
   491  00FCD3  1C                 	db	28
   492  00FCD4  00                 	db	0
   493  00FCD5  08                 	db	8
   494  00FCD6  2A                 	db	42
   495  00FCD7  1C                 	db	28
   496  00FCD8  2A                 	db	42
   497  00FCD9  08                 	db	8
   498  00FCDA  08                 	db	8
   499  00FCDB  08                 	db	8
   500  00FCDC  3E                 	db	62
   501  00FCDD  08                 	db	8
   502  00FCDE  08                 	db	8
   503  00FCDF  00                 	db	0
   504  00FCE0  50                 	db	80
   505  00FCE1  30                 	db	48
   506  00FCE2  00                 	db	0
   507  00FCE3  00                 	db	0
   508  00FCE4  08                 	db	8
   509  00FCE5  08                 	db	8
   510  00FCE6  08                 	db	8
   511  00FCE7  08                 	db	8
   512  00FCE8  08                 	db	8
   513  00FCE9  00                 	db	0
   514  00FCEA  60                 	db	96
   515  00FCEB  60                 	db	96
   516  00FCEC  00                 	db	0
   517  00FCED  00                 	db	0
   518  00FCEE  20                 	db	32
   519  00FCEF  10                 	db	16
   520  00FCF0  08                 	db	8
   521  00FCF1  04                 	db	4
   522  00FCF2  02                 	db	2
   523  00FCF3  3E                 	db	62
   524  00FCF4  51                 	db	81
   525  00FCF5  49                 	db	73
   526  00FCF6  45                 	db	69
   527  00FCF7  3E                 	db	62
   528  00FCF8  00                 	db	0
   529  00FCF9  42                 	db	66
   530  00FCFA  7F                 	db	127
   531  00FCFB  40                 	db	64
   532  00FCFC  00                 	db	0
   533  00FCFD  42                 	db	66
   534  00FCFE  61                 	db	97
   535  00FCFF  51                 	db	81
   536  00FD00  49                 	db	73
   537  00FD01  46                 	db	70
   538  00FD02  21                 	db	33
   539  00FD03  41                 	db	65
   540  00FD04  45                 	db	69
   541  00FD05  4B                 	db	75
   542  00FD06  31                 	db	49
   543  00FD07  18                 	db	24
   544  00FD08  14                 	db	20
   545  00FD09  12                 	db	18
   546  00FD0A  7F                 	db	127
   547  00FD0B  10                 	db	16
   548  00FD0C  27                 	db	39
   549  00FD0D  45                 	db	69
   550  00FD0E  45                 	db	69
   551  00FD0F  45                 	db	69
   552  00FD10  39                 	db	57
   553  00FD11  3C                 	db	60
   554  00FD12  4A                 	db	74
   555  00FD13  49                 	db	73
   556  00FD14  49                 	db	73
   557  00FD15  30                 	db	48
   558  00FD16  01                 	db	1
   559  00FD17  71                 	db	113
   560  00FD18  09                 	db	9
   561  00FD19  05                 	db	5
   562  00FD1A  03                 	db	3
   563  00FD1B  36                 	db	54
   564  00FD1C  49                 	db	73
   565  00FD1D  49                 	db	73
   566  00FD1E  49                 	db	73
   567  00FD1F  36                 	db	54
   568  00FD20  06                 	db	6
   569  00FD21  49                 	db	73
   570  00FD22  49                 	db	73
   571  00FD23  29                 	db	41
   572  00FD24  1E                 	db	30
   573  00FD25  00                 	db	0
   574  00FD26  36                 	db	54
   575  00FD27  36                 	db	54
   576  00FD28  00                 	db	0
   577  00FD29  00                 	db	0
   578  00FD2A  00                 	db	0
   579  00FD2B  56                 	db	86
   580  00FD2C  36                 	db	54
   581  00FD2D  00                 	db	0
   582  00FD2E  00                 	db	0
   583  00FD2F  00                 	db	0
   584  00FD30  08                 	db	8
   585  00FD31  14                 	db	20
   586  00FD32  22                 	db	34
   587  00FD33  41                 	db	65
   588  00FD34  14                 	db	20
   589  00FD35  14                 	db	20
   590  00FD36  14                 	db	20
   591  00FD37  14                 	db	20
   592  00FD38  14                 	db	20
   593  00FD39  41                 	db	65
   594  00FD3A  22                 	db	34
   595  00FD3B  14                 	db	20
   596  00FD3C  08                 	db	8
   597  00FD3D  00                 	db	0
   598  00FD3E  02                 	db	2
   599  00FD3F  01                 	db	1
   600  00FD40  51                 	db	81
   601  00FD41  09                 	db	9
   602  00FD42  06                 	db	6
   603  00FD43  32                 	db	50
   604  00FD44  49                 	db	73
   605  00FD45  79                 	db	121
   606  00FD46  41                 	db	65
   607  00FD47  3E                 	db	62
   608  00FD48  7E                 	db	126
   609  00FD49  11                 	db	17
   610  00FD4A  11                 	db	17
   611  00FD4B  11                 	db	17
   612  00FD4C  7E                 	db	126
   613  00FD4D  7F                 	db	127
   614  00FD4E  49                 	db	73
   615  00FD4F  49                 	db	73
   616  00FD50  49                 	db	73
   617  00FD51  36                 	db	54
   618  00FD52  3E                 	db	62
   619  00FD53  41                 	db	65
   620  00FD54  41                 	db	65
   621  00FD55  41                 	db	65
   622  00FD56  22                 	db	34
   623  00FD57  7F                 	db	127
   624  00FD58  41                 	db	65
   625  00FD59  41                 	db	65
   626  00FD5A  22                 	db	34
   627  00FD5B  1C                 	db	28
   628  00FD5C  7F                 	db	127
   629  00FD5D  49                 	db	73
   630  00FD5E  49                 	db	73
   631  00FD5F  49                 	db	73
   632  00FD60  41                 	db	65
   633  00FD61  7F                 	db	127
   634  00FD62  09                 	db	9
   635  00FD63  09                 	db	9
   636  00FD64  01                 	db	1
   637  00FD65  01                 	db	1
   638  00FD66  3E                 	db	62
   639  00FD67  41                 	db	65
   640  00FD68  41                 	db	65
   641  00FD69  51                 	db	81
   642  00FD6A  32                 	db	50
   643  00FD6B  7F                 	db	127
   644  00FD6C  08                 	db	8
   645  00FD6D  08                 	db	8
   646  00FD6E  08                 	db	8
   647  00FD6F  7F                 	db	127
   648  00FD70  00                 	db	0
   649  00FD71  41                 	db	65
   650  00FD72  7F                 	db	127
   651  00FD73  41                 	db	65
   652  00FD74  00                 	db	0
   653  00FD75  20                 	db	32
   654  00FD76  40                 	db	64
   655  00FD77  41                 	db	65
   656  00FD78  3F                 	db	63
   657  00FD79  01                 	db	1
   658  00FD7A  7F                 	db	127
   659  00FD7B  08                 	db	8
   660  00FD7C  14                 	db	20
   661  00FD7D  22                 	db	34
   662  00FD7E  41                 	db	65
   663  00FD7F  7F                 	db	127
   664  00FD80  40                 	db	64
   665  00FD81  40                 	db	64
   666  00FD82  40                 	db	64
   667  00FD83  40                 	db	64
   668  00FD84  7F                 	db	127
   669  00FD85  02                 	db	2
   670  00FD86  04                 	db	4
   671  00FD87  02                 	db	2
   672  00FD88  7F                 	db	127
   673  00FD89  7F                 	db	127
   674  00FD8A  04                 	db	4
   675  00FD8B  08                 	db	8
   676  00FD8C  10                 	db	16
   677  00FD8D  7F                 	db	127
   678  00FD8E  3E                 	db	62
   679  00FD8F  41                 	db	65
   680  00FD90  41                 	db	65
   681  00FD91  41                 	db	65
   682  00FD92  3E                 	db	62
   683  00FD93  7F                 	db	127
   684  00FD94  09                 	db	9
   685  00FD95  09                 	db	9
   686  00FD96  09                 	db	9
   687  00FD97  06                 	db	6
   688  00FD98  3E                 	db	62
   689  00FD99  41                 	db	65
   690  00FD9A  51                 	db	81
   691  00FD9B  21                 	db	33
   692  00FD9C  5E                 	db	94
   693  00FD9D  7F                 	db	127
   694  00FD9E  09                 	db	9
   695  00FD9F  19                 	db	25
   696  00FDA0  29                 	db	41
   697  00FDA1  46                 	db	70
   698  00FDA2  46                 	db	70
   699  00FDA3  49                 	db	73
   700  00FDA4  49                 	db	73
   701  00FDA5  49                 	db	73
   702  00FDA6  31                 	db	49
   703  00FDA7  01                 	db	1
   704  00FDA8  01                 	db	1
   705  00FDA9  7F                 	db	127
   706  00FDAA  01                 	db	1
   707  00FDAB  01                 	db	1
   708  00FDAC  3F                 	db	63
   709  00FDAD  40                 	db	64
   710  00FDAE  40                 	db	64
   711  00FDAF  40                 	db	64
   712  00FDB0  3F                 	db	63
   713  00FDB1  1F                 	db	31
   714  00FDB2  20                 	db	32
   715  00FDB3  40                 	db	64
   716  00FDB4  20                 	db	32
   717  00FDB5  1F                 	db	31
   718  00FDB6  7F                 	db	127
   719  00FDB7  20                 	db	32
   720  00FDB8  18                 	db	24
   721  00FDB9  20                 	db	32
   722  00FDBA  7F                 	db	127
   723  00FDBB  63                 	db	99
   724  00FDBC  14                 	db	20
   725  00FDBD  08                 	db	8
   726  00FDBE  14                 	db	20
   727  00FDBF  63                 	db	99
   728  00FDC0  03                 	db	3
   729  00FDC1  04                 	db	4
   730  00FDC2  78                 	db	120
   731  00FDC3  04                 	db	4
   732  00FDC4  03                 	db	3
   733  00FDC5  61                 	db	97
   734  00FDC6  51                 	db	81
   735  00FDC7  49                 	db	73
   736  00FDC8  45                 	db	69
   737  00FDC9  43                 	db	67
   738  00FDCA  00                 	db	0
   739  00FDCB  00                 	db	0
   740  00FDCC  7F                 	db	127
   741  00FDCD  41                 	db	65
   742  00FDCE  41                 	db	65
   743  00FDCF  02                 	db	2
   744  00FDD0  04                 	db	4
   745  00FDD1  08                 	db	8
   746  00FDD2  10                 	db	16
   747  00FDD3  20                 	db	32
   748  00FDD4  41                 	db	65
   749  00FDD5  41                 	db	65
   750  00FDD6  7F                 	db	127
   751  00FDD7  00                 	db	0
   752  00FDD8  00                 	db	0
   753  00FDD9  04                 	db	4
   754  00FDDA  02                 	db	2
   755  00FDDB  01                 	db	1
   756  00FDDC  02                 	db	2
   757  00FDDD  04                 	db	4
   758  00FDDE  40                 	db	64
   759  00FDDF  40                 	db	64
   760  00FDE0  40                 	db	64
   761  00FDE1  40                 	db	64
   762  00FDE2  40                 	db	64
   763  00FDE3  00                 	db	0
   764  00FDE4  01                 	db	1
   765  00FDE5  02                 	db	2
   766  00FDE6  04                 	db	4
   767  00FDE7  00                 	db	0
   768  00FDE8  20                 	db	32
   769  00FDE9  54                 	db	84
   770  00FDEA  54                 	db	84
   771  00FDEB  54                 	db	84
   772  00FDEC  78                 	db	120
   773  00FDED  7F                 	db	127
   774  00FDEE  48                 	db	72
   775  00FDEF  44                 	db	68
   776  00FDF0  44                 	db	68
   777  00FDF1  38                 	db	56
   778  00FDF2  38                 	db	56
   779  00FDF3  44                 	db	68
   780  00FDF4  44                 	db	68
   781  00FDF5  44                 	db	68
   782  00FDF6  20                 	db	32
   783  00FDF7  38                 	db	56
   784  00FDF8  44                 	db	68
   785  00FDF9  44                 	db	68
   786  00FDFA  48                 	db	72
   787  00FDFB  7F                 	db	127
   788  00FDFC  38                 	db	56
   789  00FDFD  54                 	db	84
   790  00FDFE  54                 	db	84
   791  00FDFF  54                 	db	84
   792  00FE00  18                 	db	24
   793  00FE01  08                 	db	8
   794  00FE02  7E                 	db	126
   795  00FE03  09                 	db	9
   796  00FE04  01                 	db	1
   797  00FE05  02                 	db	2
   798  00FE06  08                 	db	8
   799  00FE07  14                 	db	20
   800  00FE08  54                 	db	84
   801  00FE09  54                 	db	84
   802  00FE0A  3C                 	db	60
   803  00FE0B  7F                 	db	127
   804  00FE0C  08                 	db	8
   805  00FE0D  04                 	db	4
   806  00FE0E  04                 	db	4
   807  00FE0F  78                 	db	120
   808  00FE10  00                 	db	0
   809  00FE11  44                 	db	68
   810  00FE12  7D                 	db	125
   811  00FE13  40                 	db	64
   812  00FE14  00                 	db	0
   813  00FE15  20                 	db	32
   814  00FE16  40                 	db	64
   815  00FE17  44                 	db	68
   816  00FE18  3D                 	db	61
   817  00FE19  00                 	db	0
   818  00FE1A  00                 	db	0
   819  00FE1B  7F                 	db	127
   820  00FE1C  10                 	db	16
   821  00FE1D  28                 	db	40
   822  00FE1E  44                 	db	68
   823  00FE1F  00                 	db	0
   824  00FE20  41                 	db	65
   825  00FE21  7F                 	db	127
   826  00FE22  40                 	db	64
   827  00FE23  00                 	db	0
   828  00FE24  7C                 	db	124
   829  00FE25  04                 	db	4
   830  00FE26  18                 	db	24
   831  00FE27  04                 	db	4
   832  00FE28  78                 	db	120
   833  00FE29  7C                 	db	124
   834  00FE2A  08                 	db	8
   835  00FE2B  04                 	db	4
   836  00FE2C  04                 	db	4
   837  00FE2D  78                 	db	120
   838  00FE2E  38                 	db	56
   839  00FE2F  44                 	db	68
   840  00FE30  44                 	db	68
   841  00FE31  44                 	db	68
   842  00FE32  38                 	db	56
   843  00FE33  7C                 	db	124
   844  00FE34  14                 	db	20
   845  00FE35  14                 	db	20
   846  00FE36  14                 	db	20
   847  00FE37  08                 	db	8
   848  00FE38  08                 	db	8
   849  00FE39  14                 	db	20
   850  00FE3A  14                 	db	20
   851  00FE3B  18                 	db	24
   852  00FE3C  7C                 	db	124
   853  00FE3D  7C                 	db	124
   854  00FE3E  08                 	db	8
   855  00FE3F  04                 	db	4
   856  00FE40  04                 	db	4
   857  00FE41  08                 	db	8
   858  00FE42  48                 	db	72
   859  00FE43  54                 	db	84
   860  00FE44  54                 	db	84
   861  00FE45  54                 	db	84
   862  00FE46  20                 	db	32
   863  00FE47  04                 	db	4
   864  00FE48  3F                 	db	63
   865  00FE49  44                 	db	68
   866  00FE4A  40                 	db	64
   867  00FE4B  20                 	db	32
   868  00FE4C  3C                 	db	60
   869  00FE4D  40                 	db	64
   870  00FE4E  40                 	db	64
   871  00FE4F  20                 	db	32
   872  00FE50  7C                 	db	124
   873  00FE51  1C                 	db	28
   874  00FE52  20                 	db	32
   875  00FE53  40                 	db	64
   876  00FE54  20                 	db	32
   877  00FE55  1C                 	db	28
   878  00FE56  3C                 	db	60
   879  00FE57  40                 	db	64
   880  00FE58  30                 	db	48
   881  00FE59  40                 	db	64
   882  00FE5A  3C                 	db	60
   883  00FE5B  44                 	db	68
   884  00FE5C  28                 	db	40
   885  00FE5D  10                 	db	16
   886  00FE5E  28                 	db	40
   887  00FE5F  44                 	db	68
   888  00FE60  0C                 	db	12
   889  00FE61  50                 	db	80
   890  00FE62  50                 	db	80
   891  00FE63  50                 	db	80
   892  00FE64  3C                 	db	60
   893  00FE65  44                 	db	68
   894  00FE66  64                 	db	100
   895  00FE67  54                 	db	84
   896  00FE68  4C                 	db	76
   897  00FE69  44                 	db	68
   898  00FE6A  00                 	db	0
   899  00FE6B  08                 	db	8
   900  00FE6C  36                 	db	54
   901  00FE6D  41                 	db	65
   902  00FE6E  00                 	db	0
   903  00FE6F  00                 	db	0
   904  00FE70  00                 	db	0
   905  00FE71  7F                 	db	127
   906  00FE72  00                 	db	0
   907  00FE73  00                 	db	0
   908  00FE74  00                 	db	0
   909  00FE75  41                 	db	65
   910  00FE76  36                 	db	54
   911  00FE77  08                 	db	8
   912  00FE78  00                 	db	0
   913  00FE79  08                 	db	8
   914  00FE7A  08                 	db	8
   915  00FE7B  2A                 	db	42
   916  00FE7C  1C                 	db	28
   917  00FE7D  08                 	db	8
   918  00FE7E  08                 	db	8
   919  00FE7F  1C                 	db	28
   920  00FE80  2A                 	db	42
   921  00FE81  08                 	db	8
   922  00FE82  08                 	db	8
   923  00FE83                     __end_of_Font5x7:
   924                           	opt stack 0
   925  00FE83                     exp@coeff:
   926                           	opt stack 0
   927  00FE83  0000               	dw	0
   928  00FE85  3F80               	dw	16256
   929  00FE87  7218               	dw	29208
   930  00FE89  3F31               	dw	16177
   931  00FE8B  FDF0               	dw	65008
   932  00FE8D  3E75               	dw	15989
   933  00FE8F  5847               	dw	22599
   934  00FE91  3D63               	dw	15715
   935  00FE93  9558               	dw	38232
   936  00FE95  3C1D               	dw	15389
   937  00FE97  C482               	dw	50306
   938  00FE99  3AAE               	dw	15022
   939  00FE9B  78A8               	dw	30888
   940  00FE9D  3921               	dw	14625
   941  00FE9F  93EF               	dw	37871
   942  00FEA1  3780               	dw	14208
   943  00FEA3  92A0               	dw	37536
   944  00FEA5  35A7               	dw	13735
   945  00FEA7  5646               	dw	22086
   946  00FEA9  3415               	dw	13333
   947  00FEAB                     __end_ofexp@coeff:
   948                           	opt stack 0
   949  00FEAB                     log@coeff:
   950                           	opt stack 0
   951  00FEAB  0000               	dw	0
   952  00FEAD  0000               	dw	0
   953  00FEAF  FFC4               	dw	65476
   954  00FEB1  3F7F               	dw	16255
   955  00FEB3  EF80               	dw	61312
   956  00FEB5  BEFF               	dw	48895
   957  00FEB7  E190               	dw	57744
   958  00FEB9  3EA9               	dw	16041
   959  00FEBB  82EC               	dw	33516
   960  00FEBD  BE76               	dw	48758
   961  00FEBF  AD82               	dw	44418
   962  00FEC1  3E2B               	dw	15915
   963  00FEC3  3C0E               	dw	15374
   964  00FEC5  BDC3               	dw	48579
   965  00FEC7  D187               	dw	53639
   966  00FEC9  3D13               	dw	15635
   967  00FECB  7841               	dw	30785
   968  00FECD  BBD3               	dw	48083
   969  00FECF                     __end_oflog@coeff:
   970                           	opt stack 0
   971  00FECF                     _PortG_Property:
   972                           	opt stack 0
   973  00FECF  FC00               	dw	64512
   974  00FED1                     __end_of_PortG_Property:
   975                           	opt stack 0
   976  00FED1                     _PortF_Property:
   977                           	opt stack 0
   978  00FED1  0FFF               	dw	4095
   979  00FED3                     __end_of_PortF_Property:
   980                           	opt stack 0
   981  00FED3                     _PortE_Property:
   982                           	opt stack 0
   983  00FED3  0000               	dw	0
   984  00FED5                     __end_of_PortE_Property:
   985                           	opt stack 0
   986  00FED5                     _PortD_Property:
   987                           	opt stack 0
   988  00FED5  FFFF               	dw	65535
   989  00FED7                     __end_of_PortD_Property:
   990                           	opt stack 0
   991  00FED7                     _PortC_Property:
   992                           	opt stack 0
   993  00FED7  FFF0               	dw	65520
   994  00FED9                     __end_of_PortC_Property:
   995                           	opt stack 0
   996  00FED9                     _PortB_Property:
   997                           	opt stack 0
   998  00FED9  FF00               	dw	65280
   999  00FEDB                     __end_of_PortB_Property:
  1000                           	opt stack 0
  1001  00FEDB                     _PortA_Property:
  1002                           	opt stack 0
  1003  00FEDB  00FF               	dw	255
  1004  00FEDD                     __end_of_PortA_Property:
  1005                           	opt stack 0
  1006  0000                     _ADRES	set	4035
  1007  0000                     _TMR0	set	4054
  1008  0000                     _TXREG1	set	4014
  1009  0000                     _ADCON0	set	4034
  1010  0000                     _ADCON1	set	4033
  1011  0000                     _RCREG1	set	4015
  1012  0000                     _SPBRG1	set	4016
  1013  0000                     _TXSTA1bits	set	4013
  1014  0000                     _BAUDCON1bits	set	3966
  1015  0000                     _RCSTA1	set	4012
  1016  0000                     _TXSTA1	set	4013
  1017  0000                     _TRISCbits	set	3988
  1018  0000                     _PR2	set	4043
  1019  0000                     _T2CONbits	set	4042
  1020  0000                     _T0CONbits	set	4053
  1021  0000                     _RCONbits	set	4048
  1022  0000                     _OSCTUNEbits	set	3995
  1023  0000                     _PIR3	set	4004
  1024  0000                     _PIR2	set	4001
  1025  0000                     _PIR1	set	3998
  1026  0000                     _INTCONbits	set	4082
  1027  0000                     _SSP2CON2bits	set	3947
  1028  0000                     _SSP1CON2bits	set	4037
  1029  0000                     _SSP1ADD	set	4040
  1030  0000                     _ANCON0	set	4033
  1031  0000                     _ADRESL	set	4035
  1032  0000                     _ADRESH	set	4036
  1033  0000                     _ADCON1bits	set	4033
  1034  0000                     _ADCON0bits	set	4034
  1035  0000                     _SSP2CON1bits	set	3948
  1036  0000                     _SSP1CON1bits	set	4038
  1037  0000                     _SSP2STATbits	set	3949
  1038  0000                     _SSP1STATbits	set	4039
  1039  0000                     _PIE3bits	set	4003
  1040  0000                     _PIE1bits	set	3997
  1041  0000                     _PIR3bits	set	4004
  1042  0000                     _PIR1bits	set	3998
  1043  0000                     _IPR3bits	set	4005
  1044  0000                     _IPR1bits	set	3999
  1045  0000                     _PORTFbits	set	3973
  1046  0000                     _SSP2CON2	set	3947
  1047  0000                     _SSP1CON2	set	4037
  1048  0000                     _SSP2BUF	set	3951
  1049  0000                     _SSP2CON1	set	3948
  1050  0000                     _SSP2STAT	set	3949
  1051  0000                     _SSP1BUF	set	4041
  1052  0000                     _SSP1CON1	set	4038
  1053  0000                     _SSP1STAT	set	4039
  1054  0000                     _LATG	set	3983
  1055  0000                     _LATF	set	3982
  1056  0000                     _LATE	set	3981
  1057  0000                     _LATD	set	3980
  1058  0000                     _LATC	set	3979
  1059  0000                     _LATB	set	3978
  1060  0000                     _LATA	set	3977
  1061  0000                     _TRISG	set	3992
  1062  0000                     _TRISF	set	3991
  1063  0000                     _TRISE	set	3990
  1064  0000                     _TRISD	set	3989
  1065  0000                     _TRISC	set	3988
  1066  0000                     _TRISB	set	3987
  1067  0000                     _TRISA	set	3986
  1068  0000                     _PORTG	set	3974
  1069  0000                     _PORTF	set	3973
  1070  0000                     _PORTE	set	3972
  1071  0000                     _PORTD	set	3971
  1072  0000                     _PORTC	set	3970
  1073  0000                     _PORTB	set	3969
  1074  0000                     _PORTA	set	3968
  1075  0000                     _GODONE	set	32273
  1076  0000                     _ADON	set	32272
  1077  0000                     _RA3	set	31747
  1078  0000                     _RA2	set	31746
  1079  0000                     _RD7	set	31775
  1080  0000                     _RD5	set	31773
  1081  0000                     _TRISD7	set	31919
  1082  0000                     _TRISD5	set	31917
  1083  0000                     _TRISA3	set	31891
  1084  0000                     _TRISA2	set	31890
  1085  00FEDD  43                 	db	67	;'C'
  1086  00FEDE  6F                 	db	111	;'o'
  1087  00FEDF  75                 	db	117	;'u'
  1088  00FEE0  6C                 	db	108	;'l'
  1089  00FEE1  64                 	db	100	;'d'
  1090  00FEE2  20                 	db	32
  1091  00FEE3  6E                 	db	110	;'n'
  1092  00FEE4  6F                 	db	111	;'o'
  1093  00FEE5  74                 	db	116	;'t'
  1094  00FEE6  20                 	db	32
  1095  00FEE7  72                 	db	114	;'r'
  1096  00FEE8  65                 	db	101	;'e'
  1097  00FEE9  74                 	db	116	;'t'
  1098  00FEEA  72                 	db	114	;'r'
  1099  00FEEB  69                 	db	105	;'i'
  1100  00FEEC  65                 	db	101	;'e'
  1101  00FEED  76                 	db	118	;'v'
  1102  00FEEE  65                 	db	101	;'e'
  1103  00FEEF  20                 	db	32
  1104  00FEF0  64                 	db	100	;'d'
  1105  00FEF1  61                 	db	97	;'a'
  1106  00FEF2  74                 	db	116	;'t'
  1107  00FEF3  61                 	db	97	;'a'
  1108  00FEF4  2C                 	db	44
  1109  00FEF5  20                 	db	32
  1110  00FEF6  53                 	db	83	;'S'
  1111  00FEF7  74                 	db	116	;'t'
  1112  00FEF8  61                 	db	97	;'a'
  1113  00FEF9  63                 	db	99	;'c'
  1114  00FEFA  6B                 	db	107	;'k'
  1115  00FEFB  20                 	db	32
  1116  00FEFC  69                 	db	105	;'i'
  1117  00FEFD  73                 	db	115	;'s'
  1118  00FEFE  20                 	db	32
  1119  00FEFF  65                 	db	101	;'e'
  1120  00FF00  6D                 	db	109	;'m'
  1121  00FF01  70                 	db	112	;'p'
  1122  00FF02  74                 	db	116	;'t'
  1123  00FF03  79                 	db	121	;'y'
  1124  00FF04  2E                 	db	46
  1125  00FF05  0A                 	db	10
  1126  00FF06  00                 	db	0
  1127  00FF07  43                 	db	67	;'C'
  1128  00FF08  6F                 	db	111	;'o'
  1129  00FF09  75                 	db	117	;'u'
  1130  00FF0A  6C                 	db	108	;'l'
  1131  00FF0B  64                 	db	100	;'d'
  1132  00FF0C  20                 	db	32
  1133  00FF0D  6E                 	db	110	;'n'
  1134  00FF0E  6F                 	db	111	;'o'
  1135  00FF0F  74                 	db	116	;'t'
  1136  00FF10  20                 	db	32
  1137  00FF11  69                 	db	105	;'i'
  1138  00FF12  6E                 	db	110	;'n'
  1139  00FF13  73                 	db	115	;'s'
  1140  00FF14  65                 	db	101	;'e'
  1141  00FF15  72                 	db	114	;'r'
  1142  00FF16  74                 	db	116	;'t'
  1143  00FF17  20                 	db	32
  1144  00FF18  64                 	db	100	;'d'
  1145  00FF19  61                 	db	97	;'a'
  1146  00FF1A  74                 	db	116	;'t'
  1147  00FF1B  61                 	db	97	;'a'
  1148  00FF1C  2C                 	db	44
  1149  00FF1D  20                 	db	32
  1150  00FF1E  53                 	db	83	;'S'
  1151  00FF1F  74                 	db	116	;'t'
  1152  00FF20  61                 	db	97	;'a'
  1153  00FF21  63                 	db	99	;'c'
  1154  00FF22  6B                 	db	107	;'k'
  1155  00FF23  20                 	db	32
  1156  00FF24  69                 	db	105	;'i'
  1157  00FF25  73                 	db	115	;'s'
  1158  00FF26  20                 	db	32
  1159  00FF27  66                 	db	102	;'f'
  1160  00FF28  75                 	db	117	;'u'
  1161  00FF29  6C                 	db	108	;'l'
  1162  00FF2A  6C                 	db	108	;'l'
  1163  00FF2B  2E                 	db	46
  1164  00FF2C  0A                 	db	10
  1165  00FF2D  00                 	db	0
  1166  00FF2E                     STR_8:
  1167  00FF2E  0A                 	db	10
  1168  00FF2F  54                 	db	84	;'T'
  1169  00FF30  68                 	db	104	;'h'
  1170  00FF31  65                 	db	101	;'e'
  1171  00FF32  20                 	db	32
  1172  00FF33  43                 	db	67	;'C'
  1173  00FF34  6C                 	db	108	;'l'
  1174  00FF35  6F                 	db	111	;'o'
  1175  00FF36  73                 	db	115	;'s'
  1176  00FF37  65                 	db	101	;'e'
  1177  00FF38  73                 	db	115	;'s'
  1178  00FF39  20                 	db	32
  1179  00FF3A  6F                 	db	111	;'o'
  1180  00FF3B  62                 	db	98	;'b'
  1181  00FF3C  6A                 	db	106	;'j'
  1182  00FF3D  65                 	db	101	;'e'
  1183  00FF3E  63                 	db	99	;'c'
  1184  00FF3F  74                 	db	116	;'t'
  1185  00FF40  20                 	db	32
  1186  00FF41  28                 	db	40
  1187  00FF42  6D                 	db	109	;'m'
  1188  00FF43  6D                 	db	109	;'m'
  1189  00FF44  29                 	db	41
  1190  00FF45  3A                 	db	58	;':'
  1191  00FF46  20                 	db	32
  1192  00FF47  25                 	db	37
  1193  00FF48  64                 	db	100	;'d'
  1194  00FF49  00                 	db	0
  1195  00FF4A  0A                 	db	10
  1196  00FF4B  53                 	db	83	;'S'
  1197  00FF4C  74                 	db	116	;'t'
  1198  00FF4D  65                 	db	101	;'e'
  1199  00FF4E  70                 	db	112	;'p'
  1200  00FF4F  73                 	db	115	;'s'
  1201  00FF50  20                 	db	32
  1202  00FF51  54                 	db	84	;'T'
  1203  00FF52  72                 	db	114	;'r'
  1204  00FF53  61                 	db	97	;'a'
  1205  00FF54  76                 	db	118	;'v'
  1206  00FF55  65                 	db	101	;'e'
  1207  00FF56  6C                 	db	108	;'l'
  1208  00FF57  6C                 	db	108	;'l'
  1209  00FF58  65                 	db	101	;'e'
  1210  00FF59  64                 	db	100	;'d'
  1211  00FF5A  3A                 	db	58	;':'
  1212  00FF5B  20                 	db	32
  1213  00FF5C  25                 	db	37
  1214  00FF5D  64                 	db	100	;'d'
  1215  00FF5E  20                 	db	32
  1216  00FF5F  0A                 	db	10
  1217  00FF60  0A                 	db	10
  1218  00FF61  00                 	db	0
  1219  00FF62  0A                 	db	10
  1220  00FF63  53                 	db	83	;'S'
  1221  00FF64  74                 	db	116	;'t'
  1222  00FF65  65                 	db	101	;'e'
  1223  00FF66  70                 	db	112	;'p'
  1224  00FF67  73                 	db	115	;'s'
  1225  00FF68  20                 	db	32
  1226  00FF69  54                 	db	84	;'T'
  1227  00FF6A  72                 	db	114	;'r'
  1228  00FF6B  61                 	db	97	;'a'
  1229  00FF6C  76                 	db	118	;'v'
  1230  00FF6D  65                 	db	101	;'e'
  1231  00FF6E  6C                 	db	108	;'l'
  1232  00FF6F  6C                 	db	108	;'l'
  1233  00FF70  65                 	db	101	;'e'
  1234  00FF71  64                 	db	100	;'d'
  1235  00FF72  3A                 	db	58	;':'
  1236  00FF73  20                 	db	32
  1237  00FF74  25                 	db	37
  1238  00FF75  64                 	db	100	;'d'
  1239  00FF76  00                 	db	0
  1240  00FF77  53                 	db	83	;'S'
  1241  00FF78  74                 	db	116	;'t'
  1242  00FF79  65                 	db	101	;'e'
  1243  00FF7A  70                 	db	112	;'p'
  1244  00FF7B  70                 	db	112	;'p'
  1245  00FF7C  65                 	db	101	;'e'
  1246  00FF7D  64                 	db	100	;'d'
  1247  00FF7E  20                 	db	32
  1248  00FF7F  33                 	db	51	;'3'
  1249  00FF80  36                 	db	54	;'6'
  1250  00FF81  30                 	db	48	;'0'
  1251  00FF82  20                 	db	32
  1252  00FF83  64                 	db	100	;'d'
  1253  00FF84  65                 	db	101	;'e'
  1254  00FF85  67                 	db	103	;'g'
  1255  00FF86  72                 	db	114	;'r'
  1256  00FF87  65                 	db	101	;'e'
  1257  00FF88  65                 	db	101	;'e'
  1258  00FF89  73                 	db	115	;'s'
  1259  00FF8A  00                 	db	0
  1260  00FF8B  53                 	db	83	;'S'
  1261  00FF8C  65                 	db	101	;'e'
  1262  00FF8D  6E                 	db	110	;'n'
  1263  00FF8E  73                 	db	115	;'s'
  1264  00FF8F  6F                 	db	111	;'o'
  1265  00FF90  72                 	db	114	;'r'
  1266  00FF91  20                 	db	32
  1267  00FF92  4D                 	db	77	;'M'
  1268  00FF93  6F                 	db	111	;'o'
  1269  00FF94  76                 	db	118	;'v'
  1270  00FF95  69                 	db	105	;'i'
  1271  00FF96  6E                 	db	110	;'n'
  1272  00FF97  67                 	db	103	;'g'
  1273  00FF98  21                 	db	33
  1274  00FF99  20                 	db	32
  1275  00FF9A  20                 	db	32
  1276  00FF9B  20                 	db	32
  1277  00FF9C  0A                 	db	10
  1278  00FF9D  00                 	db	0
  1279  00FF9E  0A                 	db	10
  1280  00FF9F  47                 	db	71	;'G'
  1281  00FFA0  6F                 	db	111	;'o'
  1282  00FFA1  69                 	db	105	;'i'
  1283  00FFA2  6E                 	db	110	;'n'
  1284  00FFA3  67                 	db	103	;'g'
  1285  00FFA4  20                 	db	32
  1286  00FFA5  62                 	db	98	;'b'
  1287  00FFA6  61                 	db	97	;'a'
  1288  00FFA7  63                 	db	99	;'c'
  1289  00FFA8  6B                 	db	107	;'k'
  1290  00FFA9  20                 	db	32
  1291  00FFAA  74                 	db	116	;'t'
  1292  00FFAB  6F                 	db	111	;'o'
  1293  00FFAC  3A                 	db	58	;':'
  1294  00FFAD  20                 	db	32
  1295  00FFAE  25                 	db	37
  1296  00FFAF  64                 	db	100	;'d'
  1297  00FFB0  00                 	db	0
  1298  00FFB1  0A                 	db	10
  1299  00FFB2  20                 	db	32
  1300  00FFB3  46                 	db	70	;'F'
  1301  00FFB4  6F                 	db	111	;'o'
  1302  00FFB5  75                 	db	117	;'u'
  1303  00FFB6  6E                 	db	110	;'n'
  1304  00FFB7  64                 	db	100	;'d'
  1305  00FFB8  20                 	db	32
  1306  00FFB9  46                 	db	70	;'F'
  1307  00FFBA  6C                 	db	108	;'l'
  1308  00FFBB  61                 	db	97	;'a'
  1309  00FFBC  67                 	db	103	;'g'
  1310  00FFBD  3A                 	db	58	;':'
  1311  00FFBE  20                 	db	32
  1312  00FFBF  25                 	db	37
  1313  00FFC0  64                 	db	100	;'d'
  1314  00FFC1  00                 	db	0
  1315  00FFC2                     STR_13:
  1316  00FFC2  52                 	db	82	;'R'
  1317  00FFC3  6F                 	db	111	;'o'
  1318  00FFC4  62                 	db	98	;'b'
  1319  00FFC5  6F                 	db	111	;'o'
  1320  00FFC6  74                 	db	116	;'t'
  1321  00FFC7  20                 	db	32
  1322  00FFC8  52                 	db	82	;'R'
  1323  00FFC9  65                 	db	101	;'e'
  1324  00FFCA  61                 	db	97	;'a'
  1325  00FFCB  64                 	db	100	;'d'
  1326  00FFCC  79                 	db	121	;'y'
  1327  00FFCD  21                 	db	33
  1328  00FFCE  20                 	db	32
  1329  00FFCF  0A                 	db	10
  1330  00FFD0  0A                 	db	10
  1331  00FFD1  00                 	db	0
  1332  00FFD2  0A                 	db	10
  1333  00FFD3  41                 	db	65	;'A'
  1334  00FFD4  44                 	db	68	;'D'
  1335  00FFD5  43                 	db	67	;'C'
  1336  00FFD6  3A                 	db	58	;':'
  1337  00FFD7  20                 	db	32
  1338  00FFD8  25                 	db	37
  1339  00FFD9  64                 	db	100	;'d'
  1340  00FFDA  20                 	db	32
  1341  00FFDB  0A                 	db	10
  1342  00FFDC  0A                 	db	10
  1343  00FFDD  00                 	db	0
  1344  00FFDE  57                 	db	87	;'W'
  1345  00FFDF  41                 	db	65	;'A'
  1346  00FFE0  4C                 	db	76	;'L'
  1347  00FFE1  4C                 	db	76	;'L'
  1348  00FFE2  20                 	db	32
  1349  00FFE3  46                 	db	70	;'F'
  1350  00FFE4  4F                 	db	79	;'O'
  1351  00FFE5  55                 	db	85	;'U'
  1352  00FFE6  4E                 	db	78	;'N'
  1353  00FFE7  44                 	db	68	;'D'
  1354  00FFE8  00                 	db	0
  1355  00FFE9  0A                 	db	10
  1356  00FFEA  53                 	db	83	;'S'
  1357  00FFEB  74                 	db	116	;'t'
  1358  00FFEC  65                 	db	101	;'e'
  1359  00FFED  70                 	db	112	;'p'
  1360  00FFEE  73                 	db	115	;'s'
  1361  00FFEF  20                 	db	32
  1362  00FFF0  25                 	db	37
  1363  00FFF1  64                 	db	100	;'d'
  1364  00FFF2  00                 	db	0
  1365  00FFF3  25                 	db	37
  1366  00FFF4  64                 	db	100	;'d'
  1367  00FFF5  20                 	db	32
  1368  00FFF6  09                 	db	9
  1369  00FFF7  00                 	db	0
  1370  00FFF8                     STR_19:
  1371  00FFF8  25                 	db	37
  1372  00FFF9  64                 	db	100	;'d'
  1373  00FFFA  09                 	db	9
  1374  00FFFB  00                 	db	0
  1375  00FFFC                     STR_1:
  1376  00FFFC  25                 	db	37
  1377  00FFFD  63                 	db	99	;'c'
  1378  00FFFE  00                 	db	0
  1379  0000                     
  1380                           ; #config settings
  1381  00FFFF  00                 	db	0	; dummy byte at the end
  1382  0000                     
  1383                           	psect	cinit
  1384  013AB8                     __pcinit:
  1385                           	opt stack 0
  1386  013AB8                     start_initialization:
  1387                           	opt stack 0
  1388  013AB8                     __initialization:
  1389                           	opt stack 0
  1390                           
  1391                           ; Initialize objects allocated to BANK1 (20 bytes)
  1392                           ; load TBLPTR registers with __pidataBANK1
  1393  013AB8  0E38               	movlw	low __pidataBANK1
  1394  013ABA  6EF6               	movwf	tblptrl,c
  1395  013ABC  0E54               	movlw	high __pidataBANK1
  1396  013ABE  6EF7               	movwf	tblptrh,c
  1397  013AC0  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1398  013AC2  6EF8               	movwf	tblptru,c
  1399  013AC4  EE01  F0E5         	lfsr	0,__pdataBANK1
  1400  013AC8  EE10 F014          	lfsr	1,20
  1401  013ACC                     copy_data0:
  1402  013ACC  0009               	tblrd		*+
  1403  013ACE  CFF5 FFEE          	movff	tablat,postinc0
  1404  013AD2  50E5               	movf	postdec1,w,c
  1405  013AD4  50E1               	movf	fsr1l,w,c
  1406  013AD6  E1FA               	bnz	copy_data0
  1407                           
  1408                           ; Initialize objects allocated to BANK0 (1 bytes)
  1409                           ; load TBLPTR registers with __pidataBANK0
  1410  013AD8  0EA2               	movlw	low __pidataBANK0
  1411  013ADA  6EF6               	movwf	tblptrl,c
  1412  013ADC  0E55               	movlw	high __pidataBANK0
  1413  013ADE  6EF7               	movwf	tblptrh,c
  1414  013AE0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1415  013AE2  6EF8               	movwf	tblptru,c
  1416  013AE4  0009               	tblrd		*+	;fetch initializer
  1417  013AE6  CFF5 F0F5          	movff	tablat,__pdataBANK0
  1418                           
  1419                           ; Initialize objects allocated to COMRAM (14 bytes)
  1420                           ; load TBLPTR registers with __pidataCOMRAM
  1421  013AEA  0EFC               	movlw	low __pidataCOMRAM
  1422  013AEC  6EF6               	movwf	tblptrl,c
  1423  013AEE  0E54               	movlw	high __pidataCOMRAM
  1424  013AF0  6EF7               	movwf	tblptrh,c
  1425  013AF2  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1426  013AF4  6EF8               	movwf	tblptru,c
  1427  013AF6  EE00  F043         	lfsr	0,__pdataCOMRAM
  1428  013AFA  EE10 F00E          	lfsr	1,14
  1429  013AFE                     copy_data1:
  1430  013AFE  0009               	tblrd		*+
  1431  013B00  CFF5 FFEE          	movff	tablat,postinc0
  1432  013B04  50E5               	movf	postdec1,w,c
  1433  013B06  50E1               	movf	fsr1l,w,c
  1434  013B08  E1FA               	bnz	copy_data1
  1435                           
  1436                           ; Clear objects allocated to BIGRAM (300 bytes)
  1437  013B0A  EE03  F018         	lfsr	0,__pbssBIGRAM
  1438  013B0E  EE11 F02C          	lfsr	1,300
  1439  013B12                     clear_0:
  1440  013B12  6AEE               	clrf	postinc0,c
  1441  013B14  50E5               	movf	postdec1,w,c
  1442  013B16  50E1               	movf	fsr1l,w,c
  1443  013B18  E1FC               	bnz	clear_0
  1444  013B1A  50E2               	movf	fsr1h,w,c
  1445  013B1C  E1FA               	bnz	clear_0
  1446                           
  1447                           ; Clear objects allocated to BANK2 (251 bytes)
  1448  013B1E  EE02  F000         	lfsr	0,__pbssBANK2
  1449  013B22  0EFB               	movlw	251
  1450  013B24                     clear_1:
  1451  013B24  6AEE               	clrf	postinc0,c
  1452  013B26  06E8               	decf	wreg,f,c
  1453  013B28  E1FD               	bnz	clear_1
  1454                           
  1455                           ; Clear objects allocated to BANK1 (229 bytes)
  1456  013B2A  EE01  F000         	lfsr	0,__pbssBANK1
  1457  013B2E  0EE5               	movlw	229
  1458  013B30                     clear_2:
  1459  013B30  6AEE               	clrf	postinc0,c
  1460  013B32  06E8               	decf	wreg,f,c
  1461  013B34  E1FD               	bnz	clear_2
  1462                           
  1463                           ; Clear objects allocated to BANK0 (22 bytes)
  1464  013B36  EE00  F0DF         	lfsr	0,__pbssBANK0
  1465  013B3A  0E16               	movlw	22
  1466  013B3C                     clear_3:
  1467  013B3C  6AEE               	clrf	postinc0,c
  1468  013B3E  06E8               	decf	wreg,f,c
  1469  013B40  E1FD               	bnz	clear_3
  1470                           
  1471                           ; Clear objects allocated to COMRAM (26 bytes)
  1472  013B42  EE00  F029         	lfsr	0,__pbssCOMRAM
  1473  013B46  0E1A               	movlw	26
  1474  013B48                     clear_4:
  1475  013B48  6AEE               	clrf	postinc0,c
  1476  013B4A  06E8               	decf	wreg,f,c
  1477  013B4C  E1FD               	bnz	clear_4
  1478  013B4E                     end_of_initialization:
  1479                           	opt stack 0
  1480  013B4E                     __end_of__initialization:
  1481                           	opt stack 0
  1482  013B4E  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1483  013B50  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1484  013B52  0100               	movlb	0
  1485  013B54  EF39  F090         	goto	_main	;jump to C main() function
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           postinc0	equ	0xFEE
  1491                           wreg	equ	0xFE8
  1492                           postdec1	equ	0xFE5
  1493                           fsr1h	equ	0xFE2
  1494                           fsr1l	equ	0xFE1
  1495                           
  1496                           	psect	bssCOMRAM
  1497  000029                     __pbssCOMRAM:
  1498                           	opt stack 0
  1499  000029                     _total:
  1500                           	opt stack 0
  1501  000029                     	ds	2
  1502  00002B                     _Motor_Count:
  1503                           	opt stack 0
  1504  00002B                     	ds	2
  1505  00002D                     _Found_Flag:
  1506                           	opt stack 0
  1507  00002D                     	ds	2
  1508  00002F                     _val:
  1509                           	opt stack 0
  1510  00002F                     	ds	2
  1511  000031                     _COUNTER:
  1512                           	opt stack 0
  1513  000031                     	ds	2
  1514  000033                     HMI_GRender@a:
  1515                           	opt stack 0
  1516  000033                     	ds	2
  1517  000035                     Timer0_Init@PRE:
  1518                           	opt stack 0
  1519  000035                     	ds	1
  1520  000036                     _INDEX:
  1521                           	opt stack 0
  1522  000036                     	ds	1
  1523  000037                     rand@screw:
  1524                           	opt stack 0
  1525  000037                     	ds	1
  1526  000038                     _ADC_Initialised:
  1527                           	opt stack 0
  1528  000038                     	ds	1
  1529  000039                     OutSeg@a:
  1530                           	opt stack 0
  1531  000039                     	ds	1
  1532  00003A                     OutSeg@segset:
  1533                           	opt stack 0
  1534  00003A                     	ds	1
  1535  00003B                     OutSeg@cur:
  1536                           	opt stack 0
  1537  00003B                     	ds	1
  1538  00003C                     _I2C1T:
  1539                           	opt stack 0
  1540  00003C                     	ds	7
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           postdec1	equ	0xFE5
  1548                           fsr1h	equ	0xFE2
  1549                           fsr1l	equ	0xFE1
  1550                           
  1551                           	psect	dataCOMRAM
  1552  000043                     __pdataCOMRAM:
  1553                           	opt stack 0
  1554  000043                     _gCursor:
  1555                           	opt stack 0
  1556  000043                     	ds	4
  1557  000047                     _numReadings:
  1558                           	opt stack 0
  1559  000047                     	ds	2
  1560  000049                     _top:
  1561                           	opt stack 0
  1562  000049                     	ds	2
  1563  00004B                     _Bus_State:
  1564                           	opt stack 0
  1565  00004B                     	ds	1
  1566  00004C                     	ds	1
  1567  00004D                     	ds	1
  1568  00004E                     	ds	1
  1569  00004F                     _l:
  1570                           	opt stack 0
  1571  00004F                     	ds	1
  1572  000050                     _w:
  1573                           	opt stack 0
  1574  000050                     	ds	1
  1575                           tblptru	equ	0xFF8
  1576                           tblptrh	equ	0xFF7
  1577                           tblptrl	equ	0xFF6
  1578                           tablat	equ	0xFF5
  1579                           postinc0	equ	0xFEE
  1580                           wreg	equ	0xFE8
  1581                           postdec1	equ	0xFE5
  1582                           fsr1h	equ	0xFE2
  1583                           fsr1l	equ	0xFE1
  1584                           
  1585                           	psect	bssBANK0
  1586  0000DF                     __pbssBANK0:
  1587                           	opt stack 0
  1588  0000DF                     _lQueue:
  1589                           	opt stack 0
  1590  0000DF                     	ds	3
  1591  0000E2                     _average:
  1592                           	opt stack 0
  1593  0000E2                     	ds	2
  1594  0000E4                     _readIndex:
  1595                           	opt stack 0
  1596  0000E4                     	ds	2
  1597  0000E6                     _pShiftVal:
  1598                           	opt stack 0
  1599  0000E6                     	ds	2
  1600  0000E8                     _lMotor:
  1601                           	opt stack 0
  1602  0000E8                     	ds	2
  1603  0000EA                     _lCurrent:
  1604                           	opt stack 0
  1605  0000EA                     	ds	2
  1606  0000EC                     _gBackcolour:
  1607                           	opt stack 0
  1608  0000EC                     	ds	2
  1609  0000EE                     Event_TestButton@j:
  1610                           	opt stack 0
  1611  0000EE                     	ds	1
  1612  0000EF                     _i:
  1613                           	opt stack 0
  1614  0000EF                     	ds	1
  1615  0000F0                     Timer2_Init@PRE:
  1616                           	opt stack 0
  1617  0000F0                     	ds	1
  1618  0000F1                     Timer2_Init@INDEX:
  1619                           	opt stack 0
  1620  0000F1                     	ds	1
  1621  0000F2                     _lBufferY:
  1622                           	opt stack 0
  1623  0000F2                     	ds	1
  1624  0000F3                     _lBufferX:
  1625                           	opt stack 0
  1626  0000F3                     	ds	1
  1627  0000F4                     _clearall:
  1628                           	opt stack 0
  1629  0000F4                     	ds	1
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1h	equ	0xFE2
  1638                           fsr1l	equ	0xFE1
  1639                           
  1640                           	psect	dataBANK0
  1641  0000F5                     __pdataBANK0:
  1642                           	opt stack 0
  1643  0000F5                     _change:
  1644                           	opt stack 0
  1645  0000F5                     	ds	1
  1646                           tblptru	equ	0xFF8
  1647                           tblptrh	equ	0xFF7
  1648                           tblptrl	equ	0xFF6
  1649                           tablat	equ	0xFF5
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           postdec1	equ	0xFE5
  1653                           fsr1h	equ	0xFE2
  1654                           fsr1l	equ	0xFE1
  1655                           
  1656                           	psect	bssBANK1
  1657  000100                     __pbssBANK1:
  1658                           	opt stack 0
  1659  000100                     Timer2_Init@DIV:
  1660                           	opt stack 0
  1661  000100                     	ds	4
  1662  000104                     Timer0_Init@DIV:
  1663                           	opt stack 0
  1664  000104                     	ds	4
  1665  000108                     _gISR:
  1666                           	opt stack 0
  1667  000108                     	ds	3
  1668  00010B                     _lStepFunction:
  1669                           	opt stack 0
  1670  00010B                     	ds	3
  1671  00010E                     _I2C2_More:
  1672                           	opt stack 0
  1673  00010E                     	ds	3
  1674  000111                     _I2C1_More:
  1675                           	opt stack 0
  1676  000111                     	ds	3
  1677  000114                     _I2C2_Done:
  1678                           	opt stack 0
  1679  000114                     	ds	3
  1680  000117                     _I2C1_Done:
  1681                           	opt stack 0
  1682  000117                     	ds	3
  1683  00011A                     _errno:
  1684                           	opt stack 0
  1685  00011A                     	ds	2
  1686  00011C                     _test:
  1687                           	opt stack 0
  1688  00011C                     	ds	2
  1689  00011E                     _timercount:
  1690                           	opt stack 0
  1691  00011E                     	ds	2
  1692  000120                     _Sensor_Observe_Fin:
  1693                           	opt stack 0
  1694  000120                     	ds	2
  1695  000122                     _CW_Count:
  1696                           	opt stack 0
  1697  000122                     	ds	2
  1698  000124                     _CCW_Count:
  1699                           	opt stack 0
  1700  000124                     	ds	2
  1701  000126                     _count:
  1702                           	opt stack 0
  1703  000126                     	ds	2
  1704  000128                     _Close_Pos:
  1705                           	opt stack 0
  1706  000128                     	ds	2
  1707  00012A                     _ADC_Reading:
  1708                           	opt stack 0
  1709  00012A                     	ds	2
  1710  00012C                     _BumpState:
  1711                           	opt stack 0
  1712  00012C                     	ds	2
  1713  00012E                     _mod:
  1714                           	opt stack 0
  1715  00012E                     	ds	2
  1716  000130                     _Square_Dist:
  1717                           	opt stack 0
  1718  000130                     	ds	2
  1719  000132                     _T_VAR:
  1720                           	opt stack 0
  1721  000132                     	ds	2
  1722  000134                     _x:
  1723                           	opt stack 0
  1724  000134                     	ds	2
  1725  000136                     _thisReading:
  1726                           	opt stack 0
  1727  000136                     	ds	2
  1728  000138                     _Steps:
  1729                           	opt stack 0
  1730  000138                     	ds	2
  1731  00013A                     _mode:
  1732                           	opt stack 0
  1733  00013A                     	ds	2
  1734  00013C                     _Current_Dist2:
  1735                           	opt stack 0
  1736  00013C                     	ds	2
  1737  00013E                     _Current_Dist1:
  1738                           	opt stack 0
  1739  00013E                     	ds	2
  1740  000140                     _Current_Dist:
  1741                           	opt stack 0
  1742  000140                     	ds	2
  1743  000142                     SPI_Send9@dat:
  1744                           	opt stack 0
  1745  000142                     	ds	2
  1746  000144                     _Cliff_Left:
  1747                           	opt stack 0
  1748  000144                     	ds	1
  1749  000145                     _Cliff_Right:
  1750                           	opt stack 0
  1751  000145                     	ds	1
  1752  000146                     _Cliff_FLeft:
  1753                           	opt stack 0
  1754  000146                     	ds	1
  1755  000147                     _Cliff_FRight:
  1756                           	opt stack 0
  1757  000147                     	ds	1
  1758  000148                     _BumpSensor:
  1759                           	opt stack 0
  1760  000148                     	ds	1
  1761  000149                     _u:
  1762                           	opt stack 0
  1763  000149                     	ds	1
  1764  00014A                     _j:
  1765                           	opt stack 0
  1766  00014A                     	ds	1
  1767  00014B                     _HMIBoard:
  1768                           	opt stack 0
  1769  00014B                     	ds	58
  1770  000185                     _SPI2:
  1771                           	opt stack 0
  1772  000185                     	ds	11
  1773  000190                     _PortE:
  1774                           	opt stack 0
  1775  000190                     	ds	10
  1776  00019A                     _PortD:
  1777                           	opt stack 0
  1778  00019A                     	ds	10
  1779  0001A4                     _PortB:
  1780                           	opt stack 0
  1781  0001A4                     	ds	10
  1782  0001AE                     _PortC:
  1783                           	opt stack 0
  1784  0001AE                     	ds	10
  1785  0001B8                     _PortF:
  1786                           	opt stack 0
  1787  0001B8                     	ds	10
  1788  0001C2                     _I2C2T:
  1789                           	opt stack 0
  1790  0001C2                     	ds	7
  1791  0001C9                     _ADC_AN3:
  1792                           	opt stack 0
  1793  0001C9                     	ds	5
  1794  0001CE                     _ADC_AN2:
  1795                           	opt stack 0
  1796  0001CE                     	ds	5
  1797  0001D3                     _ADC_AN1:
  1798                           	opt stack 0
  1799  0001D3                     	ds	5
  1800  0001D8                     _ADC_AN0:
  1801                           	opt stack 0
  1802  0001D8                     	ds	5
  1803  0001DD                     LCD_DrawRectangle@p4:
  1804                           	opt stack 0
  1805  0001DD                     	ds	4
  1806  0001E1                     LCD_DrawRectangle@p2:
  1807                           	opt stack 0
  1808  0001E1                     	ds	4
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           postinc0	equ	0xFEE
  1814                           wreg	equ	0xFE8
  1815                           postdec1	equ	0xFE5
  1816                           fsr1h	equ	0xFE2
  1817                           fsr1l	equ	0xFE1
  1818                           
  1819                           	psect	dataBANK1
  1820  0001E5                     __pdataBANK1:
  1821                           	opt stack 0
  1822  0001E5                     Console_Render@F6956:
  1823                           	opt stack 0
  1824  0001E5                     	ds	4
  1825  0001E9                     _gLineSize:
  1826                           	opt stack 0
  1827  0001E9                     	ds	4
  1828  0001ED                     _gCharSize:
  1829                           	opt stack 0
  1830  0001ED                     	ds	4
  1831  0001F1                     _countOff:
  1832                           	opt stack 0
  1833  0001F1                     	ds	2
  1834  0001F3                     _countOn:
  1835                           	opt stack 0
  1836  0001F3                     	ds	2
  1837  0001F5                     _Low_Sensor:
  1838                           	opt stack 0
  1839  0001F5                     	ds	2
  1840  0001F7                     _gForecolour:
  1841                           	opt stack 0
  1842  0001F7                     	ds	2
  1843                           tblptru	equ	0xFF8
  1844                           tblptrh	equ	0xFF7
  1845                           tblptrl	equ	0xFF6
  1846                           tablat	equ	0xFF5
  1847                           postinc0	equ	0xFEE
  1848                           wreg	equ	0xFE8
  1849                           postdec1	equ	0xFE5
  1850                           fsr1h	equ	0xFE2
  1851                           fsr1l	equ	0xFE1
  1852                           
  1853                           	psect	bssBANK2
  1854  000200                     __pbssBANK2:
  1855                           	opt stack 0
  1856  000200                     Init_Pos_Array@F7084:
  1857                           	opt stack 0
  1858  000200                     	ds	40
  1859  000228                     _stack:
  1860                           	opt stack 0
  1861  000228                     	ds	40
  1862  000250                     _lCBuffer:
  1863                           	opt stack 0
  1864  000250                     	ds	30
  1865  00026E                     _readings:
  1866                           	opt stack 0
  1867  00026E                     	ds	20
  1868  000282                     Console_MakeField@Fill:
  1869                           	opt stack 0
  1870  000282                     	ds	70
  1871  0002C8                     _SPI1:
  1872                           	opt stack 0
  1873  0002C8                     	ds	11
  1874  0002D3                     _DIPSwitch:
  1875                           	opt stack 0
  1876  0002D3                     	ds	10
  1877  0002DD                     _TestButton:
  1878                           	opt stack 0
  1879  0002DD                     	ds	10
  1880  0002E7                     _PortG:
  1881                           	opt stack 0
  1882  0002E7                     	ds	10
  1883  0002F1                     _PortA:
  1884                           	opt stack 0
  1885  0002F1                     	ds	10
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           postdec1	equ	0xFE5
  1893                           fsr1h	equ	0xFE2
  1894                           fsr1l	equ	0xFE1
  1895                           
  1896                           	psect	bssBIGRAM
  1897  000318                     __pbssBIGRAM:
  1898                           	opt stack 0
  1899  000318                     _lBuffer:
  1900                           	opt stack 0
  1901  000318                     	ds	300
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1h	equ	0xFE2
  1910                           fsr1l	equ	0xFE1
  1911                           
  1912                           	psect	cstackBANK3
  1913  000300                     __pcstackBANK3:
  1914                           	opt stack 0
  1915  000300                     _ADCAverage$15789:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x0
  1919  000300                     	ds	4
  1920  000304                     _ADCAverage$15790:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0x4
  1924  000304                     	ds	4
  1925  000308                     _ADCAverage$15791:
  1926                           	opt stack 0
  1927                           
  1928                           ; 4 bytes @ 0x8
  1929  000308                     	ds	4
  1930  00030C                     _ADCAverage$15792:
  1931                           	opt stack 0
  1932                           
  1933                           ; 4 bytes @ 0xC
  1934  00030C                     	ds	4
  1935  000310                     _ADCAverage$15793:
  1936                           	opt stack 0
  1937                           
  1938                           ; 4 bytes @ 0x10
  1939  000310                     	ds	4
  1940  000314                     _ADCAverage$15794:
  1941                           	opt stack 0
  1942                           
  1943                           ; 4 bytes @ 0x14
  1944  000314                     	ds	4
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           postdec1	equ	0xFE5
  1952                           fsr1h	equ	0xFE2
  1953                           fsr1l	equ	0xFE1
  1954                           
  1955                           	psect	cstackBANK0
  1956  000060                     __pcstackBANK0:
  1957                           	opt stack 0
  1958  000060                     ??_Console_ClearCursor:
  1959  000060                     ??_InitADC:
  1960  000060                     ??_Console_Init:
  1961  000060                     ??_Console_NewLine:
  1962  000060                     ??_Console_FormFeed:
  1963  000060                     ??_HMI_SetButton:
  1964  000060                     ?_GetPortProperties:
  1965                           	opt stack 0
  1966  000060                     ?_GetPortPORT:
  1967                           	opt stack 0
  1968  000060                     ?_GetPortTRIS:
  1969                           	opt stack 0
  1970  000060                     ?_FunctReadADC:
  1971                           	opt stack 0
  1972  000060                     ?___wmul:
  1973                           	opt stack 0
  1974  000060                     ?___awdiv:
  1975                           	opt stack 0
  1976  000060                     ?___lwdiv:
  1977                           	opt stack 0
  1978  000060                     ?___fldiv:
  1979                           	opt stack 0
  1980  000060                     ?_frexp:
  1981                           	opt stack 0
  1982  000060                     ?___lldiv:
  1983                           	opt stack 0
  1984  000060                     ?___xxtofl:
  1985                           	opt stack 0
  1986  000060                     Mode_Set@pMode:
  1987                           	opt stack 0
  1988  000060                     ToSegment@pCHR:
  1989                           	opt stack 0
  1990  000060                     HMI_SetBar@pValue:
  1991                           	opt stack 0
  1992  000060                     eusartSend@sendChar:
  1993                           	opt stack 0
  1994  000060                     Port_GetPin@pInput:
  1995                           	opt stack 0
  1996  000060                     Port_GetQuad@pInput:
  1997                           	opt stack 0
  1998  000060                     SPI_DisableISR@pInput:
  1999                           	opt stack 0
  2000  000060                     SPI_DCS@pInput:
  2001                           	opt stack 0
  2002  000060                     SPI_Send@pInput:
  2003                           	opt stack 0
  2004  000060                     Byte_SetBit@pInput:
  2005                           	opt stack 0
  2006  000060                     Byte_GetBit@pInput:
  2007                           	opt stack 0
  2008  000060                     Byte_SetZone@pInput:
  2009                           	opt stack 0
  2010  000060                     Byte_GetZone@pInput:
  2011                           	opt stack 0
  2012  000060                     Byte_SetByte@pInput:
  2013                           	opt stack 0
  2014  000060                     delay_ms@ms:
  2015                           	opt stack 0
  2016  000060                     delay_us@us:
  2017                           	opt stack 0
  2018  000060                     reverse@input:
  2019                           	opt stack 0
  2020  000060                     FunctReadADC@channel:
  2021                           	opt stack 0
  2022  000060                     ___wmul@multiplier:
  2023                           	opt stack 0
  2024  000060                     ___awdiv@dividend:
  2025                           	opt stack 0
  2026  000060                     ___lwdiv@dividend:
  2027                           	opt stack 0
  2028  000060                     MXK_Queue@pCallback:
  2029                           	opt stack 0
  2030  000060                     ___flge@ff1:
  2031                           	opt stack 0
  2032  000060                     ___lldiv@dividend:
  2033                           	opt stack 0
  2034  000060                     ___fldiv@b:
  2035                           	opt stack 0
  2036  000060                     ___xxtofl@val:
  2037                           	opt stack 0
  2038  000060                     frexp@value:
  2039                           	opt stack 0
  2040                           
  2041                           ; 4 bytes @ 0x0
  2042  000060                     	ds	1
  2043  000061                     HMI_SetSegments@pString:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x1
  2047  000061                     	ds	1
  2048  000062                     GetPortProperties@pInput:
  2049                           	opt stack 0
  2050  000062                     GetPortPORT@pInput:
  2051                           	opt stack 0
  2052  000062                     GetPortTRIS@pInput:
  2053                           	opt stack 0
  2054  000062                     Port_GetPin@pPin:
  2055                           	opt stack 0
  2056  000062                     Port_GetQuad@pQuad:
  2057                           	opt stack 0
  2058  000062                     SPI_Send@pData:
  2059                           	opt stack 0
  2060  000062                     Byte_SetBit@pBit:
  2061                           	opt stack 0
  2062  000062                     Byte_GetBit@pBit:
  2063                           	opt stack 0
  2064  000062                     Byte_SetZone@pMax:
  2065                           	opt stack 0
  2066  000062                     Byte_GetZone@pMax:
  2067                           	opt stack 0
  2068  000062                     Byte_SetByte@pValue:
  2069                           	opt stack 0
  2070  000062                     Console_Init@x:
  2071                           	opt stack 0
  2072  000062                     Console_FormFeed@x:
  2073                           	opt stack 0
  2074  000062                     reverse@length:
  2075                           	opt stack 0
  2076  000062                     ___wmul@multiplicand:
  2077                           	opt stack 0
  2078  000062                     ___awdiv@divisor:
  2079                           	opt stack 0
  2080  000062                     ___lwdiv@divisor:
  2081                           	opt stack 0
  2082  000062                     delay_ms@u:
  2083                           	opt stack 0
  2084  000062                     delay_us@u:
  2085                           	opt stack 0
  2086  000062                     HMI_SetButton@reindex:
  2087                           	opt stack 0
  2088                           
  2089                           ; 4 bytes @ 0x2
  2090  000062                     	ds	1
  2091  000063                     ??_Port_GetPin:
  2092  000063                     ??_Port_GetQuad:
  2093  000063                     ??_Byte_GetBit:
  2094  000063                     LCD_Write@mode:
  2095                           	opt stack 0
  2096  000063                     Byte_SetBit@pValue:
  2097                           	opt stack 0
  2098  000063                     Byte_SetZone@pChunk:
  2099                           	opt stack 0
  2100  000063                     Byte_GetZone@pChunk:
  2101                           	opt stack 0
  2102  000063                     Console_Init@y:
  2103                           	opt stack 0
  2104  000063                     Console_FormFeed@y:
  2105                           	opt stack 0
  2106  000063                     OutSeg@pSegment:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x3
  2110  000063                     	ds	1
  2111  000064                     ??_Byte_SetBit:
  2112  000064                     ??_Console_IncrementCursor:
  2113  000064                     ??_OutSeg:
  2114  000064                     ??___xxtofl:
  2115  000064                     LCD_Write@value:
  2116                           	opt stack 0
  2117  000064                     Byte_GetBit@Output:
  2118                           	opt stack 0
  2119  000064                     Byte_SetZone@pChunkSize:
  2120                           	opt stack 0
  2121  000064                     Byte_GetZone@pChunkSize:
  2122                           	opt stack 0
  2123  000064                     reverse@tempVar:
  2124                           	opt stack 0
  2125  000064                     ___awdiv@counter:
  2126                           	opt stack 0
  2127  000064                     ___lwdiv@counter:
  2128                           	opt stack 0
  2129  000064                     HMI_SetSegments@in:
  2130                           	opt stack 0
  2131  000064                     ___wmul@product:
  2132                           	opt stack 0
  2133  000064                     frexp@eptr:
  2134                           	opt stack 0
  2135  000064                     ___flge@ff2:
  2136                           	opt stack 0
  2137  000064                     ___lldiv@divisor:
  2138                           	opt stack 0
  2139  000064                     ___fldiv@a:
  2140                           	opt stack 0
  2141                           
  2142                           ; 4 bytes @ 0x4
  2143  000064                     	ds	1
  2144  000065                     ??_Byte_GetZone:
  2145  000065                     ?_Console_MakeField:
  2146                           	opt stack 0
  2147  000065                     Set_Addr_Window@ys:
  2148                           	opt stack 0
  2149  000065                     Set_Rotation@m:
  2150                           	opt stack 0
  2151  000065                     Port_GetPin@Output:
  2152                           	opt stack 0
  2153  000065                     Port_GetQuad@Output:
  2154                           	opt stack 0
  2155  000065                     Byte_SetZone@pValue:
  2156                           	opt stack 0
  2157  000065                     ___awdiv@sign:
  2158                           	opt stack 0
  2159  000065                     LCD_Word_Write@value:
  2160                           	opt stack 0
  2161  000065                     reverse@iterator:
  2162                           	opt stack 0
  2163  000065                     ___lwdiv@quotient:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x5
  2167  000065                     	ds	1
  2168  000066                     ??_frexp:
  2169  000066                     ??_Byte_SetZone:
  2170  000066                     Set_Addr_Window@xe:
  2171                           	opt stack 0
  2172  000066                     Set_Rotation@rotation:
  2173                           	opt stack 0
  2174  000066                     Byte_GetZone@MASK:
  2175                           	opt stack 0
  2176  000066                     OutSeg@pInput:
  2177                           	opt stack 0
  2178  000066                     HMI_SetButton@pValue:
  2179                           	opt stack 0
  2180  000066                     MXK_BlockSwitchTo@CUR:
  2181                           	opt stack 0
  2182  000066                     MXK_SwitchTo@CUR:
  2183                           	opt stack 0
  2184  000066                     ___awdiv@quotient:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x6
  2188  000066                     	ds	1
  2189  000067                     ??_Console_MakeField:
  2190  000067                     ?___lwmod:
  2191                           	opt stack 0
  2192  000067                     Set_Addr_Window@ye:
  2193                           	opt stack 0
  2194  000067                     Byte_GetZone@Offset:
  2195                           	opt stack 0
  2196  000067                     OutSeg@out:
  2197                           	opt stack 0
  2198  000067                     HMI_SetButton@v:
  2199                           	opt stack 0
  2200  000067                     MXK_BlockSwitchTo@pModule:
  2201                           	opt stack 0
  2202  000067                     MXK_SwitchTo@pModule:
  2203                           	opt stack 0
  2204  000067                     ___lwmod@dividend:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x7
  2208  000067                     	ds	1
  2209  000068                     ??___fldiv:
  2210  000068                     ??_Console_Tab:
  2211  000068                     ??___flge:
  2212  000068                     Set_Addr_Window@xs:
  2213                           	opt stack 0
  2214  000068                     Byte_GetZone@Output:
  2215                           	opt stack 0
  2216  000068                     ___xxtofl@sign:
  2217                           	opt stack 0
  2218  000068                     HMI_Render@a:
  2219                           	opt stack 0
  2220  000068                     ___lldiv@quotient:
  2221                           	opt stack 0
  2222                           
  2223                           ; 4 bytes @ 0x8
  2224  000068                     	ds	1
  2225  000069                     Byte_SetZone@Offset:
  2226                           	opt stack 0
  2227  000069                     ___xxtofl@exp:
  2228                           	opt stack 0
  2229  000069                     LCD_Fill@pColour:
  2230                           	opt stack 0
  2231  000069                     LCD_FillRectangle@pColour:
  2232                           	opt stack 0
  2233  000069                     Byte_GetPair@pInput:
  2234                           	opt stack 0
  2235  000069                     Console_MakeField@Index:
  2236                           	opt stack 0
  2237  000069                     ___lwmod@divisor:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0x9
  2241  000069                     	ds	1
  2242  00006A                     Byte_SetZone@MASK:
  2243                           	opt stack 0
  2244  00006A                     ___xxtofl@arg:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0xA
  2248  00006A                     	ds	1
  2249  00006B                     LCD_Fill@i:
  2250                           	opt stack 0
  2251  00006B                     Byte_GetPair@pPair:
  2252                           	opt stack 0
  2253  00006B                     Console_MakeField@pInput:
  2254                           	opt stack 0
  2255  00006B                     ___lwmod@counter:
  2256                           	opt stack 0
  2257  00006B                     Byte_SetPair@pInput:
  2258                           	opt stack 0
  2259  00006B                     Byte_SetQuad@pInput:
  2260                           	opt stack 0
  2261  00006B                     LCD_FillRectangle@pPoint:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0xB
  2265  00006B                     	ds	1
  2266  00006C                     LCD_Fill@j:
  2267                           	opt stack 0
  2268  00006C                     ___lldiv@counter:
  2269                           	opt stack 0
  2270  00006C                     ___fldiv@sign:
  2271                           	opt stack 0
  2272  00006C                     Word_GetPair@pInput:
  2273                           	opt stack 0
  2274  00006C                     itos@input:
  2275                           	opt stack 0
  2276  00006C                     Console_MakeField@Column:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0xC
  2280  00006C                     	ds	1
  2281  00006D                     Byte_SetPair@pPair:
  2282                           	opt stack 0
  2283  00006D                     Byte_SetQuad@pQuad:
  2284                           	opt stack 0
  2285  00006D                     Console_Tab@t:
  2286                           	opt stack 0
  2287  00006D                     Timer2_Init@pFrequency:
  2288                           	opt stack 0
  2289  00006D                     ___fldiv@rem:
  2290                           	opt stack 0
  2291                           
  2292                           ; 4 bytes @ 0xD
  2293  00006D                     	ds	1
  2294  00006E                     ?___flmul:
  2295                           	opt stack 0
  2296  00006E                     Byte_SetPair@pValue:
  2297                           	opt stack 0
  2298  00006E                     Byte_SetQuad@pValue:
  2299                           	opt stack 0
  2300  00006E                     Word_GetPair@pPair:
  2301                           	opt stack 0
  2302  00006E                     Console_Tab@i:
  2303                           	opt stack 0
  2304  00006E                     itos@destination:
  2305                           	opt stack 0
  2306  00006E                     _Console_MakeField$10974:
  2307                           	opt stack 0
  2308  00006E                     ___flmul@b:
  2309                           	opt stack 0
  2310                           
  2311                           ; 4 bytes @ 0xE
  2312  00006E                     	ds	1
  2313  00006F                     Console_Tab@c:
  2314                           	opt stack 0
  2315  00006F                     Port_SetPin@pInput:
  2316                           	opt stack 0
  2317  00006F                     Port_Set@pInput:
  2318                           	opt stack 0
  2319  00006F                     SPI_MinSpeed@pInput:
  2320                           	opt stack 0
  2321  00006F                     SPI_MaxSpeed@pInput:
  2322                           	opt stack 0
  2323  00006F                     Word_SetPair@pInput:
  2324                           	opt stack 0
  2325  00006F                     PortProperty_Valid@pInput:
  2326                           	opt stack 0
  2327  00006F                     LCD_FillRectangle@pSize:
  2328                           	opt stack 0
  2329                           
  2330                           ; 4 bytes @ 0xF
  2331  00006F                     	ds	1
  2332  000070                     ??_Console_PrintChar:
  2333  000070                     Console_MakeField@x:
  2334                           	opt stack 0
  2335  000070                     itos@Data:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x10
  2339  000070                     	ds	1
  2340  000071                     ??_Timer2_Init:
  2341  000071                     Port_SetPin@pPin:
  2342                           	opt stack 0
  2343  000071                     Port_Set@pValue:
  2344                           	opt stack 0
  2345  000071                     Word_SetPair@pPair:
  2346                           	opt stack 0
  2347  000071                     PortProperty_Valid@pPinDrive:
  2348                           	opt stack 0
  2349  000071                     Console_MakeField@y:
  2350                           	opt stack 0
  2351  000071                     ___fldiv@new_exp:
  2352                           	opt stack 0
  2353                           
  2354                           ; 2 bytes @ 0x11
  2355  000071                     	ds	1
  2356  000072                     ??_Port_Set:
  2357  000072                     Port_SetPin@pValue:
  2358                           	opt stack 0
  2359  000072                     Word_SetPair@pValue:
  2360                           	opt stack 0
  2361  000072                     PortProperty_Valid@pPin:
  2362                           	opt stack 0
  2363  000072                     LCD_DrawField@pField:
  2364                           	opt stack 0
  2365  000072                     itos@Length:
  2366                           	opt stack 0
  2367  000072                     Timer2_Init@RDIV:
  2368                           	opt stack 0
  2369  000072                     ___flmul@a:
  2370                           	opt stack 0
  2371                           
  2372                           ; 4 bytes @ 0x12
  2373  000072                     	ds	1
  2374  000073                     ??_PortProperty_Valid:
  2375  000073                     ??_LCD_FillRectangle:
  2376  000073                     Port_SetPin@Type:
  2377                           	opt stack 0
  2378  000073                     Console_PrintChar@pInput:
  2379                           	opt stack 0
  2380  000073                     ___fldiv@grs:
  2381                           	opt stack 0
  2382                           
  2383                           ; 4 bytes @ 0x13
  2384  000073                     	ds	1
  2385  000074                     LED_Set@pValue:
  2386                           	opt stack 0
  2387  000074                     putch@c:
  2388                           	opt stack 0
  2389  000074                     Port_TogglePin@pInput:
  2390                           	opt stack 0
  2391  000074                     itos@Out:
  2392                           	opt stack 0
  2393  000074                     LCD_DrawField@pPoint:
  2394                           	opt stack 0
  2395                           
  2396                           ; 4 bytes @ 0x14
  2397  000074                     	ds	1
  2398  000075                     ?_printf:
  2399                           	opt stack 0
  2400  000075                     LCD_FillRectangle@i:
  2401                           	opt stack 0
  2402  000075                     LED_Set@pLED:
  2403                           	opt stack 0
  2404  000075                     printf@f:
  2405                           	opt stack 0
  2406  000075                     PortProperty_Valid@Errors:
  2407                           	opt stack 0
  2408                           
  2409                           ; 16 bytes @ 0x15
  2410  000075                     	ds	1
  2411  000076                     ??___flmul:
  2412  000076                     LCD_FillRectangle@j:
  2413                           	opt stack 0
  2414  000076                     Port_TogglePin@pPin:
  2415                           	opt stack 0
  2416  000076                     HMI_SetNumber@pInput:
  2417                           	opt stack 0
  2418  000076                     Timer2_Init@pCPUClock:
  2419                           	opt stack 0
  2420                           
  2421                           ; 4 bytes @ 0x16
  2422  000076                     	ds	1
  2423  000077                     Port_TogglePin@Value:
  2424                           	opt stack 0
  2425  000077                     ___fldiv@bexp:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x17
  2429  000077                     	ds	1
  2430  000078                     LED_Toggle@pLED:
  2431                           	opt stack 0
  2432  000078                     ___fldiv@aexp:
  2433                           	opt stack 0
  2434  000078                     LCD_DrawField@pSize:
  2435                           	opt stack 0
  2436                           
  2437                           ; 4 bytes @ 0x18
  2438  000078                     	ds	1
  2439  000079                     ??_printf:
  2440  000079                     Event_DIPSwitch@pState:
  2441                           	opt stack 0
  2442  000079                     Event_TestButton@pState:
  2443                           	opt stack 0
  2444                           
  2445                           ; 1 bytes @ 0x19
  2446  000079                     	ds	1
  2447  00007A                     Event_DIPSwitch@Bar:
  2448                           	opt stack 0
  2449  00007A                     printf@flag:
  2450                           	opt stack 0
  2451  00007A                     ___flmul@sign:
  2452                           	opt stack 0
  2453  00007A                     Timer2_Init@DIVIDE:
  2454                           	opt stack 0
  2455                           
  2456                           ; 4 bytes @ 0x1A
  2457  00007A                     	ds	1
  2458  00007B                     printf@prec:
  2459                           	opt stack 0
  2460  00007B                     ___flmul@aexp:
  2461                           	opt stack 0
  2462  00007B                     Button_Poll@pButton:
  2463                           	opt stack 0
  2464                           
  2465                           ; 2 bytes @ 0x1B
  2466  00007B                     	ds	1
  2467  00007C                     ??_LCD_DrawField:
  2468  00007C                     printf@ap:
  2469                           	opt stack 0
  2470  00007C                     ___flmul@grs:
  2471                           	opt stack 0
  2472                           
  2473                           ; 4 bytes @ 0x1C
  2474  00007C                     	ds	1
  2475  00007D                     Button_Poll@pIncrement:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x1D
  2479  00007D                     	ds	1
  2480  00007E                     ??_Button_Poll:
  2481  00007E                     LCD_DrawField@count:
  2482                           	opt stack 0
  2483  00007E                     printf@val:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x1E
  2487  00007E                     	ds	2
  2488  000080                     LCD_DrawField@xmax:
  2489                           	opt stack 0
  2490  000080                     printf@c:
  2491                           	opt stack 0
  2492  000080                     ___flmul@bexp:
  2493                           	opt stack 0
  2494                           
  2495                           ; 1 bytes @ 0x20
  2496  000080                     	ds	1
  2497  000081                     LCD_DrawField@ymax:
  2498                           	opt stack 0
  2499  000081                     ___flmul@prod:
  2500                           	opt stack 0
  2501                           
  2502                           ; 4 bytes @ 0x21
  2503  000081                     	ds	1
  2504  000082                     LCD_DrawField@i:
  2505                           	opt stack 0
  2506  000082                     Port_Set@TypeRequired:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x22
  2510  000082                     	ds	1
  2511  000083                     ??_Console_Render:
  2512  000083                     Button_Poll@Pin:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x23
  2516  000083                     	ds	1
  2517  000084                     Port_Set@TypeActual:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x24
  2521  000084                     	ds	1
  2522  000085                     PortProperty_Valid@Pair:
  2523                           	opt stack 0
  2524  000085                     Console_Render@temp:
  2525                           	opt stack 0
  2526  000085                     ___flmul@temp:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x25
  2530  000085                     	ds	1
  2531  000086                     Port_Set@Type:
  2532                           	opt stack 0
  2533  000086                     Port_CheckPairType@pInput:
  2534                           	opt stack 0
  2535  000086                     Port_SetPinType@pInput:
  2536                           	opt stack 0
  2537  000086                     Console_Render@lCursor:
  2538                           	opt stack 0
  2539                           
  2540                           ; 4 bytes @ 0x26
  2541  000086                     	ds	1
  2542  000087                     ?___flneg:
  2543                           	opt stack 0
  2544  000087                     ___flneg@f1:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x27
  2548  000087                     	ds	1
  2549  000088                     Port_CheckPairType@pPair:
  2550                           	opt stack 0
  2551  000088                     Port_SetPinType@pPin:
  2552                           	opt stack 0
  2553                           
  2554                           ; 1 bytes @ 0x28
  2555  000088                     	ds	1
  2556  000089                     Port_CheckPairType@pDrive:
  2557                           	opt stack 0
  2558  000089                     Port_SetPinType@pType:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x29
  2562  000089                     	ds	1
  2563  00008A                     Port_CheckPairType@Pin1:
  2564                           	opt stack 0
  2565  00008A                     Port_SetPinType@Output:
  2566                           	opt stack 0
  2567  00008A                     Console_Render@x:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x2A
  2571  00008A                     	ds	1
  2572  00008B                     ?___fladd:
  2573                           	opt stack 0
  2574  00008B                     Port_CheckPairType@Pin2:
  2575                           	opt stack 0
  2576  00008B                     Console_Render@y:
  2577                           	opt stack 0
  2578  00008B                     Port_SetPinType@Props:
  2579                           	opt stack 0
  2580  00008B                     ___fladd@b:
  2581                           	opt stack 0
  2582                           
  2583                           ; 4 bytes @ 0x2B
  2584  00008B                     	ds	1
  2585  00008C                     ??_Init_Pos_Array:
  2586  00008C                     Port_CheckPairType@Output:
  2587                           	opt stack 0
  2588                           
  2589                           ; 1 bytes @ 0x2C
  2590  00008C                     	ds	1
  2591  00008D                     LED_Init@pLED:
  2592                           	opt stack 0
  2593  00008D                     Port_CheckPairType@Props:
  2594                           	opt stack 0
  2595  00008D                     SPI_Init@pClock:
  2596                           	opt stack 0
  2597                           
  2598                           ; 4 bytes @ 0x2D
  2599  00008D                     	ds	1
  2600  00008E                     Init_Pos_Array@position:
  2601                           	opt stack 0
  2602                           
  2603                           ; 40 bytes @ 0x2E
  2604  00008E                     	ds	1
  2605  00008F                     Port_CheckQuadType@pInput:
  2606                           	opt stack 0
  2607  00008F                     ___fladd@a:
  2608                           	opt stack 0
  2609                           
  2610                           ; 4 bytes @ 0x2F
  2611  00008F                     	ds	2
  2612  000091                     Port_CheckQuadType@pQuad:
  2613                           	opt stack 0
  2614  000091                     SPI_Init@pChannel:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0x31
  2618  000091                     	ds	1
  2619  000092                     Port_CheckQuadType@pDrive:
  2620                           	opt stack 0
  2621  000092                     SPI_Init@pMode:
  2622                           	opt stack 0
  2623                           
  2624                           ; 1 bytes @ 0x32
  2625  000092                     	ds	1
  2626  000093                     ??___fladd:
  2627  000093                     Port_CheckQuadType@Pair1:
  2628                           	opt stack 0
  2629  000093                     SPI_Init@pInput:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x33
  2633  000093                     	ds	1
  2634  000094                     Port_CheckQuadType@Pair2:
  2635                           	opt stack 0
  2636                           
  2637                           ; 1 bytes @ 0x34
  2638  000094                     	ds	1
  2639  000095                     ??_LCD_Init:
  2640  000095                     Port_CheckQuadType@Output:
  2641                           	opt stack 0
  2642                           
  2643                           ; 1 bytes @ 0x35
  2644  000095                     	ds	1
  2645  000096                     Port_CheckPortType@pInput:
  2646                           	opt stack 0
  2647  000096                     Port_SetQuadType@pInput:
  2648                           	opt stack 0
  2649                           
  2650                           ; 2 bytes @ 0x36
  2651  000096                     	ds	1
  2652  000097                     LCD_Init@i:
  2653                           	opt stack 0
  2654                           
  2655                           ; 2 bytes @ 0x37
  2656  000097                     	ds	1
  2657  000098                     Port_CheckPortType@pDrive:
  2658                           	opt stack 0
  2659  000098                     Port_SetQuadType@pQuad:
  2660                           	opt stack 0
  2661                           
  2662                           ; 1 bytes @ 0x38
  2663  000098                     	ds	1
  2664  000099                     Port_CheckPortType@Output:
  2665                           	opt stack 0
  2666  000099                     Port_SetQuadType@pType:
  2667                           	opt stack 0
  2668                           
  2669                           ; 1 bytes @ 0x39
  2670  000099                     	ds	1
  2671  00009A                     Port_SetQuadType@Output:
  2672                           	opt stack 0
  2673  00009A                     Port_SetType@pInput:
  2674                           	opt stack 0
  2675                           
  2676                           ; 2 bytes @ 0x3A
  2677  00009A                     	ds	1
  2678  00009B                     ___fladd@signs:
  2679                           	opt stack 0
  2680  00009B                     Button_Init@pInput:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x3B
  2684  00009B                     	ds	1
  2685  00009C                     Port_SetType@pType:
  2686                           	opt stack 0
  2687  00009C                     ___fladd@aexp:
  2688                           	opt stack 0
  2689                           
  2690                           ; 1 bytes @ 0x3C
  2691  00009C                     	ds	1
  2692  00009D                     ??_Port_SetType:
  2693  00009D                     ___fladd@bexp:
  2694                           	opt stack 0
  2695  00009D                     Button_Init@pThreshold:
  2696                           	opt stack 0
  2697                           
  2698                           ; 2 bytes @ 0x3D
  2699  00009D                     	ds	1
  2700  00009E                     ___fladd@grs:
  2701                           	opt stack 0
  2702                           
  2703                           ; 1 bytes @ 0x3E
  2704  00009E                     	ds	1
  2705  00009F                     ?___flsub:
  2706                           	opt stack 0
  2707  00009F                     ?_eval_poly:
  2708                           	opt stack 0
  2709  00009F                     ?___fltol:
  2710                           	opt stack 0
  2711  00009F                     Port_SetType@Output:
  2712                           	opt stack 0
  2713  00009F                     Button_Init@pInitIO:
  2714                           	opt stack 0
  2715  00009F                     ___fltol@f1:
  2716                           	opt stack 0
  2717  00009F                     ___flsub@b:
  2718                           	opt stack 0
  2719  00009F                     eval_poly@x:
  2720                           	opt stack 0
  2721                           
  2722                           ; 4 bytes @ 0x3F
  2723  00009F                     	ds	1
  2724  0000A0                     Port_Init@pInput:
  2725                           	opt stack 0
  2726                           
  2727                           ; 2 bytes @ 0x40
  2728  0000A0                     	ds	2
  2729  0000A2                     Port_Init@pPort:
  2730                           	opt stack 0
  2731  0000A2                     Button_Init@pGetState:
  2732                           	opt stack 0
  2733                           
  2734                           ; 3 bytes @ 0x42
  2735  0000A2                     	ds	1
  2736  0000A3                     ??_Port_Init:
  2737  0000A3                     ??___fltol:
  2738  0000A3                     eval_poly@d:
  2739                           	opt stack 0
  2740  0000A3                     ___flsub@a:
  2741                           	opt stack 0
  2742                           
  2743                           ; 4 bytes @ 0x43
  2744  0000A3                     	ds	2
  2745  0000A5                     Port_Init@i:
  2746                           	opt stack 0
  2747  0000A5                     eval_poly@n:
  2748                           	opt stack 0
  2749  0000A5                     Button_Init@pFunction:
  2750                           	opt stack 0
  2751                           
  2752                           ; 3 bytes @ 0x45
  2753  0000A5                     	ds	1
  2754  0000A6                     
  2755                           ; 1 bytes @ 0x46
  2756  0000A6                     	ds	1
  2757  0000A7                     ??_eval_poly:
  2758  0000A7                     ___fltol@sign1:
  2759                           	opt stack 0
  2760                           
  2761                           ; 1 bytes @ 0x47
  2762  0000A7                     	ds	1
  2763  0000A8                     ___fltol@exp1:
  2764                           	opt stack 0
  2765  0000A8                     HMI_Init@in:
  2766                           	opt stack 0
  2767                           
  2768                           ; 2 bytes @ 0x48
  2769  0000A8                     	ds	1
  2770  0000A9                     ?_floor:
  2771                           	opt stack 0
  2772  0000A9                     floor@x:
  2773                           	opt stack 0
  2774                           
  2775                           ; 4 bytes @ 0x49
  2776  0000A9                     	ds	2
  2777  0000AB                     eval_poly@res:
  2778                           	opt stack 0
  2779                           
  2780                           ; 4 bytes @ 0x4B
  2781  0000AB                     	ds	2
  2782  0000AD                     floor@i:
  2783                           	opt stack 0
  2784                           
  2785                           ; 4 bytes @ 0x4D
  2786  0000AD                     	ds	2
  2787  0000AF                     ?_log:
  2788                           	opt stack 0
  2789  0000AF                     ?_ldexp:
  2790                           	opt stack 0
  2791  0000AF                     ldexp@value:
  2792                           	opt stack 0
  2793  0000AF                     log@x:
  2794                           	opt stack 0
  2795                           
  2796                           ; 4 bytes @ 0x4F
  2797  0000AF                     	ds	2
  2798  0000B1                     floor@expon:
  2799                           	opt stack 0
  2800                           
  2801                           ; 2 bytes @ 0x51
  2802  0000B1                     	ds	2
  2803  0000B3                     ldexp@newexp:
  2804                           	opt stack 0
  2805  0000B3                     log@exponent:
  2806                           	opt stack 0
  2807                           
  2808                           ; 2 bytes @ 0x53
  2809  0000B3                     	ds	2
  2810  0000B5                     ??_ldexp:
  2811                           
  2812                           ; 1 bytes @ 0x55
  2813  0000B5                     	ds	1
  2814  0000B6                     Init_Pos_Array@i:
  2815                           	opt stack 0
  2816                           
  2817                           ; 2 bytes @ 0x56
  2818  0000B6                     	ds	1
  2819  0000B7                     ?_exp:
  2820                           	opt stack 0
  2821  0000B7                     exp@x:
  2822                           	opt stack 0
  2823                           
  2824                           ; 4 bytes @ 0x57
  2825  0000B7                     	ds	1
  2826  0000B8                     Init_Pos_Array@j:
  2827                           	opt stack 0
  2828                           
  2829                           ; 2 bytes @ 0x58
  2830  0000B8                     	ds	3
  2831  0000BB                     _exp$15797:
  2832                           	opt stack 0
  2833                           
  2834                           ; 4 bytes @ 0x5B
  2835  0000BB                     	ds	4
  2836  0000BF                     exp@exponent:
  2837                           	opt stack 0
  2838                           
  2839                           ; 2 bytes @ 0x5F
  2840  0000BF                     	ds	2
  2841  0000C1                     exp@sign:
  2842                           	opt stack 0
  2843                           
  2844                           ; 1 bytes @ 0x61
  2845  0000C1                     	ds	1
  2846  0000C2                     ?_pow:
  2847                           	opt stack 0
  2848  0000C2                     pow@x:
  2849                           	opt stack 0
  2850                           
  2851                           ; 4 bytes @ 0x62
  2852  0000C2                     	ds	4
  2853  0000C6                     pow@y:
  2854                           	opt stack 0
  2855                           
  2856                           ; 4 bytes @ 0x66
  2857  0000C6                     	ds	4
  2858  0000CA                     _pow$15795:
  2859                           	opt stack 0
  2860                           
  2861                           ; 4 bytes @ 0x6A
  2862  0000CA                     	ds	4
  2863  0000CE                     _pow$15796:
  2864                           	opt stack 0
  2865                           
  2866                           ; 4 bytes @ 0x6E
  2867  0000CE                     	ds	4
  2868  0000D2                     pow@sign:
  2869                           	opt stack 0
  2870                           
  2871                           ; 1 bytes @ 0x72
  2872  0000D2                     	ds	1
  2873  0000D3                     pow@yi:
  2874                           	opt stack 0
  2875                           
  2876                           ; 4 bytes @ 0x73
  2877  0000D3                     	ds	4
  2878  0000D7                     ?_ADCAverage:
  2879                           	opt stack 0
  2880                           
  2881                           ; 2 bytes @ 0x77
  2882  0000D7                     	ds	2
  2883  0000D9                     ??_ADCAverage:
  2884                           
  2885                           ; 1 bytes @ 0x79
  2886  0000D9                     	ds	2
  2887  0000DB                     main@down:
  2888                           	opt stack 0
  2889                           
  2890                           ; 1 bytes @ 0x7B
  2891  0000DB                     	ds	1
  2892  0000DC                     main@right:
  2893                           	opt stack 0
  2894                           
  2895                           ; 1 bytes @ 0x7C
  2896  0000DC                     	ds	1
  2897  0000DD                     main@up:
  2898                           	opt stack 0
  2899                           
  2900                           ; 1 bytes @ 0x7D
  2901  0000DD                     	ds	1
  2902  0000DE                     main@left:
  2903                           	opt stack 0
  2904                           
  2905                           ; 1 bytes @ 0x7E
  2906  0000DE                     	ds	1
  2907                           tblptru	equ	0xFF8
  2908                           tblptrh	equ	0xFF7
  2909                           tblptrl	equ	0xFF6
  2910                           tablat	equ	0xFF5
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postdec1	equ	0xFE5
  2914                           fsr1h	equ	0xFE2
  2915                           fsr1l	equ	0xFE1
  2916                           
  2917                           	psect	cstackCOMRAM
  2918  000001                     __pcstackCOMRAM:
  2919                           	opt stack 0
  2920  000001                     i2Byte_SetBit@pInput:
  2921                           	opt stack 0
  2922  000001                     i2Byte_GetZone@pInput:
  2923                           	opt stack 0
  2924  000001                     i2delay_us@us:
  2925                           	opt stack 0
  2926  000001                     i2MXK_Queue@pCallback:
  2927                           	opt stack 0
  2928                           
  2929                           ; 3 bytes @ 0x0
  2930  000001                     	ds	2
  2931  000003                     i2Byte_SetBit@pBit:
  2932                           	opt stack 0
  2933  000003                     i2Byte_GetZone@pMax:
  2934                           	opt stack 0
  2935  000003                     i2delay_us@u:
  2936                           	opt stack 0
  2937                           
  2938                           ; 4 bytes @ 0x2
  2939  000003                     	ds	1
  2940  000004                     i2Byte_SetBit@pValue:
  2941                           	opt stack 0
  2942  000004                     i2Byte_GetZone@pChunk:
  2943                           	opt stack 0
  2944                           
  2945                           ; 1 bytes @ 0x3
  2946  000004                     	ds	1
  2947  000005                     ??i2_Byte_SetBit:
  2948  000005                     i2Byte_GetZone@pChunkSize:
  2949                           	opt stack 0
  2950                           
  2951                           ; 1 bytes @ 0x4
  2952  000005                     	ds	1
  2953  000006                     ??i2_Byte_GetZone:
  2954                           
  2955                           ; 1 bytes @ 0x5
  2956  000006                     	ds	1
  2957  000007                     i2Byte_GetZone@MASK:
  2958                           	opt stack 0
  2959  000007                     i2MXK_SwitchTo@CUR:
  2960                           	opt stack 0
  2961                           
  2962                           ; 1 bytes @ 0x6
  2963  000007                     	ds	1
  2964  000008                     i2Byte_GetZone@Offset:
  2965                           	opt stack 0
  2966  000008                     i2MXK_SwitchTo@pModule:
  2967                           	opt stack 0
  2968                           
  2969                           ; 1 bytes @ 0x7
  2970  000008                     	ds	1
  2971  000009                     i2Byte_GetZone@Output:
  2972                           	opt stack 0
  2973                           
  2974                           ; 1 bytes @ 0x8
  2975  000009                     	ds	1
  2976  00000A                     i2Byte_GetPair@pInput:
  2977                           	opt stack 0
  2978                           
  2979                           ; 2 bytes @ 0x9
  2980  00000A                     	ds	2
  2981  00000C                     i2Byte_GetPair@pPair:
  2982                           	opt stack 0
  2983                           
  2984                           ; 1 bytes @ 0xB
  2985  00000C                     	ds	1
  2986  00000D                     i2Word_GetPair@pInput:
  2987                           	opt stack 0
  2988                           
  2989                           ; 2 bytes @ 0xC
  2990  00000D                     	ds	2
  2991  00000F                     i2Word_GetPair@pPair:
  2992                           	opt stack 0
  2993                           
  2994                           ; 1 bytes @ 0xE
  2995  00000F                     	ds	1
  2996  000010                     i2Port_SetPin@pInput:
  2997                           	opt stack 0
  2998                           
  2999                           ; 2 bytes @ 0xF
  3000  000010                     	ds	2
  3001  000012                     i2Port_SetPin@pPin:
  3002                           	opt stack 0
  3003                           
  3004                           ; 1 bytes @ 0x11
  3005  000012                     	ds	1
  3006  000013                     i2Port_SetPin@pValue:
  3007                           	opt stack 0
  3008                           
  3009                           ; 1 bytes @ 0x12
  3010  000013                     	ds	1
  3011  000014                     i2Port_SetPin@Type:
  3012                           	opt stack 0
  3013                           
  3014                           ; 1 bytes @ 0x13
  3015  000014                     	ds	1
  3016  000015                     
  3017                           ; 1 bytes @ 0x14
  3018  000015                     	ds	2
  3019  000017                     ??_ISR_Function:
  3020                           
  3021                           ; 1 bytes @ 0x16
  3022  000017                     	ds	18
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           
  3033 ;;
  3034 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3035 ;;
  3036 ;; *************** function _main *****************
  3037 ;; Defined at:
  3038 ;;		line 327 in file "main.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  left            1  126[BANK0 ] unsigned char 
  3043 ;;  up              1  125[BANK0 ] unsigned char 
  3044 ;;  right           1  124[BANK0 ] unsigned char 
  3045 ;;  down            1  123[BANK0 ] unsigned char 
  3046 ;;  square         80    0        struct square[5][4]
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  1    wreg      void 
  3049 ;; Registers used:
  3050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;Total ram usage:        4 bytes
  3061 ;; Hardware stack levels required when called:   17
  3062 ;; This function calls:
  3063 ;;		_ADCAverage
  3064 ;;		_Console_Init
  3065 ;;		_Console_Render
  3066 ;;		_FunctInitButton
  3067 ;;		_HMI_DIPSwitch
  3068 ;;		_HMI_DownSwitch
  3069 ;;		_HMI_Init
  3070 ;;		_HMI_LeftSwitch
  3071 ;;		_HMI_Poll
  3072 ;;		_HMI_Render
  3073 ;;		_HMI_RightSwitch
  3074 ;;		_HMI_SetNumber
  3075 ;;		_HMI_UpSwitch
  3076 ;;		_ISR_Enable
  3077 ;;		_InitADC
  3078 ;;		_InitSerialCommunication
  3079 ;;		_Init_Pos_Array
  3080 ;;		_Init_Timer0
  3081 ;;		_LCD_Init
  3082 ;;		_LED_Init
  3083 ;;		_MXK_BlockSwitchTo
  3084 ;;		_MXK_DIPSwitch
  3085 ;;		_MXK_Dequeue
  3086 ;;		_MXK_Init
  3087 ;;		_MXK_Release
  3088 ;;		_MXK_TestButton
  3089 ;;		_Robot_Init
  3090 ;;		_printf
  3091 ;; This function is called by:
  3092 ;;		Startup code after reset
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text0
  3097  012072                     __ptext0:
  3098                           	opt stack 0
  3099  012072                     _main:
  3100                           	opt stack 14
  3101                           
  3102                           ;main.c: 328: struct square square[4][5];
  3103                           ;main.c: 332: MXK_Init();
  3104                           
  3105                           ;incstack = 0
  3106  012072  EC86  F096         	call	_MXK_Init	;wreg free
  3107                           
  3108                           ;main.c: 333: Init_Timer0();
  3109  012076  ECF8  F0A9         	call	_Init_Timer0	;wreg free
  3110                           
  3111                           ;main.c: 334: InitSerialCommunication();
  3112  01207A  EC8F  F0A9         	call	_InitSerialCommunication	;wreg free
  3113                           
  3114                           ;main.c: 335: Robot_Init();
  3115  01207E  EC6C  F0AA         	call	_Robot_Init	;wreg free
  3116                           
  3117                           ;main.c: 336: ISR_Enable();
  3118  012082  ECB4  F0AA         	call	_ISR_Enable	;wreg free
  3119                           
  3120                           ;main.c: 337: FunctInitButton();
  3121  012086  ECB8  F0A1         	call	_FunctInitButton	;wreg free
  3122                           
  3123                           ;main.c: 338: InitADC();
  3124  01208A  EC40  F0A6         	call	_InitADC	;wreg free
  3125                           
  3126                           ;main.c: 339: LED_Init(eLED2);
  3127  01208E  0E01               	movlw	1
  3128  012090  EC5F  F0A4         	call	_LED_Init
  3129                           
  3130                           ;main.c: 345: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3131  012094  0E01               	movlw	1
  3132  012096  ECC1  F0A7         	call	_MXK_BlockSwitchTo
  3133  01209A  0900               	iorlw	0
  3134  01209C  B4D8               	btfsc	status,2,c
  3135  01209E  D00C               	goto	l2184
  3136                           
  3137                           ;main.c: 346: HMI_Init();
  3138  0120A0  EC07  F091         	call	_HMI_Init	;wreg free
  3139                           
  3140                           ;main.c: 347: LCD_Init();
  3141  0120A4  EC3F  F095         	call	_LCD_Init	;wreg free
  3142                           
  3143                           ;main.c: 348: Console_Init();
  3144  0120A8  ECD1  F0A2         	call	_Console_Init	;wreg free
  3145                           
  3146                           ;main.c: 349: if (MXK_Release())
  3147  0120AC  ECD4  F0A9         	call	_MXK_Release	;wreg free
  3148  0120B0  0900               	iorlw	0
  3149  0120B2  A4D8               	btfss	status,2,c
  3150                           
  3151                           ;main.c: 350: MXK_Dequeue();
  3152  0120B4  EC13  F0A8         	call	_MXK_Dequeue	;wreg free
  3153  0120B8                     l2184:
  3154                           
  3155                           ;main.c: 356: ADCAverage();
  3156                           
  3157                           ;main.c: 351: }
  3158                           ;main.c: 354: for(;;){
  3159  0120B8  EC1A  F085         	call	_ADCAverage	;wreg free
  3160                           
  3161                           ;main.c: 358: HMI_SetNumber(average);
  3162  0120BC  C0E2  F076         	movff	_average,HMI_SetNumber@pInput
  3163  0120C0  C0E3  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3164  0120C4  EC3C  F0A9         	call	_HMI_SetNumber	;wreg free
  3165                           
  3166                           ;main.c: 360: HMI_Render();
  3167  0120C8  ECDD  F0A7         	call	_HMI_Render	;wreg free
  3168                           
  3169                           ;main.c: 362: HMI_Poll();
  3170  0120CC  ECA2  F0A3         	call	_HMI_Poll	;wreg free
  3171                           
  3172                           ;main.c: 366: bool down = HMIBoard.mDown.mGetState();
  3173  0120D0  EE21  F078         	lfsr	2,_HMIBoard+45
  3174  0120D4  D801               	call	u13988
  3175  0120D6  D00A               	goto	u13989
  3176  0120D8                     u13988:
  3177  0120D8  0005               	push	
  3178  0120DA  6EFA               	movwf	pclath,c
  3179  0120DC  50DE               	movf	postinc2,w,c
  3180  0120DE  6EFD               	movwf	tosl,c
  3181  0120E0  50DE               	movf	postinc2,w,c
  3182  0120E2  6EFE               	movwf	tosh,c
  3183  0120E4  50DE               	movf	postinc2,w,c
  3184  0120E6  6EFF               	movwf	tosu,c
  3185  0120E8  50FA               	movf	pclath,w,c
  3186  0120EA  0012               	return		;indir
  3187  0120EC                     u13989:
  3188  0120EC  0100               	movlb	0	; () banked
  3189  0120EE  6FDB               	movwf	main@down& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;main.c: 367: bool right = HMIBoard.mRight.mGetState();
  3193  0120F0  EE21  F05A         	lfsr	2,_HMIBoard+15
  3194  0120F4  D801               	call	u13998
  3195  0120F6  D00A               	goto	u13999
  3196  0120F8                     u13998:
  3197  0120F8  0005               	push	
  3198  0120FA  6EFA               	movwf	pclath,c
  3199  0120FC  50DE               	movf	postinc2,w,c
  3200  0120FE  6EFD               	movwf	tosl,c
  3201  012100  50DE               	movf	postinc2,w,c
  3202  012102  6EFE               	movwf	tosh,c
  3203  012104  50DE               	movf	postinc2,w,c
  3204  012106  6EFF               	movwf	tosu,c
  3205  012108  50FA               	movf	pclath,w,c
  3206  01210A  0012               	return		;indir
  3207  01210C                     u13999:
  3208  01210C  0100               	movlb	0	; () banked
  3209  01210E  6FDC               	movwf	main@right& (0+255),b
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;main.c: 368: bool up = HMIBoard.mUp.mGetState();
  3213  012110  EE21  F06E         	lfsr	2,_HMIBoard+35
  3214  012114  D801               	call	u14008
  3215  012116  D00A               	goto	u14009
  3216  012118                     u14008:
  3217  012118  0005               	push	
  3218  01211A  6EFA               	movwf	pclath,c
  3219  01211C  50DE               	movf	postinc2,w,c
  3220  01211E  6EFD               	movwf	tosl,c
  3221  012120  50DE               	movf	postinc2,w,c
  3222  012122  6EFE               	movwf	tosh,c
  3223  012124  50DE               	movf	postinc2,w,c
  3224  012126  6EFF               	movwf	tosu,c
  3225  012128  50FA               	movf	pclath,w,c
  3226  01212A  0012               	return		;indir
  3227  01212C                     u14009:
  3228  01212C  0100               	movlb	0	; () banked
  3229  01212E  6FDD               	movwf	main@up& (0+255),b
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 369: bool left = HMIBoard.mLeft.mGetState();
  3233  012130  EE21  F064         	lfsr	2,_HMIBoard+25
  3234  012134  D801               	call	u14018
  3235  012136  D00A               	goto	u14019
  3236  012138                     u14018:
  3237  012138  0005               	push	
  3238  01213A  6EFA               	movwf	pclath,c
  3239  01213C  50DE               	movf	postinc2,w,c
  3240  01213E  6EFD               	movwf	tosl,c
  3241  012140  50DE               	movf	postinc2,w,c
  3242  012142  6EFE               	movwf	tosh,c
  3243  012144  50DE               	movf	postinc2,w,c
  3244  012146  6EFF               	movwf	tosu,c
  3245  012148  50FA               	movf	pclath,w,c
  3246  01214A  0012               	return		;indir
  3247  01214C                     u14019:
  3248  01214C  0100               	movlb	0	; () banked
  3249  01214E  6FDE               	movwf	main@left& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;main.c: 370: if (down) {mode=3;}
  3253  012150  51DB               	movf	main@down& (0+255),w,b
  3254  012152  B4D8               	btfsc	status,2,c
  3255  012154  D005               	goto	l2186
  3256                           
  3257                           ; BSR set to: 0
  3258  012156  0E00               	movlw	0
  3259  012158  0101               	movlb	1	; () banked
  3260  01215A  6F3B               	movwf	(_mode+1)& (0+255),b
  3261  01215C  0E03               	movlw	3
  3262  01215E  6F3A               	movwf	_mode& (0+255),b
  3263  012160                     l2186:
  3264                           
  3265                           ;main.c: 371: if (right) {mode =1;}
  3266  012160  0100               	movlb	0	; () banked
  3267  012162  51DC               	movf	main@right& (0+255),w,b
  3268  012164  B4D8               	btfsc	status,2,c
  3269  012166  D005               	goto	l2187
  3270                           
  3271                           ; BSR set to: 0
  3272  012168  0E00               	movlw	0
  3273  01216A  0101               	movlb	1	; () banked
  3274  01216C  6F3B               	movwf	(_mode+1)& (0+255),b
  3275  01216E  0E01               	movlw	1
  3276  012170  6F3A               	movwf	_mode& (0+255),b
  3277  012172                     l2187:
  3278                           
  3279                           ;main.c: 372: if (up) {mode=2;}
  3280  012172  0100               	movlb	0	; () banked
  3281  012174  51DD               	movf	main@up& (0+255),w,b
  3282  012176  B4D8               	btfsc	status,2,c
  3283  012178  D005               	goto	l2188
  3284                           
  3285                           ; BSR set to: 0
  3286  01217A  0E00               	movlw	0
  3287  01217C  0101               	movlb	1	; () banked
  3288  01217E  6F3B               	movwf	(_mode+1)& (0+255),b
  3289  012180  0E02               	movlw	2
  3290  012182  6F3A               	movwf	_mode& (0+255),b
  3291  012184                     l2188:
  3292                           
  3293                           ;main.c: 373: if (left) {mode=4;}
  3294  012184  0100               	movlb	0	; () banked
  3295  012186  51DE               	movf	main@left& (0+255),w,b
  3296  012188  B4D8               	btfsc	status,2,c
  3297  01218A  D005               	goto	l2189
  3298                           
  3299                           ; BSR set to: 0
  3300  01218C  0E00               	movlw	0
  3301  01218E  0101               	movlb	1	; () banked
  3302  012190  6F3B               	movwf	(_mode+1)& (0+255),b
  3303  012192  0E04               	movlw	4
  3304  012194  6F3A               	movwf	_mode& (0+255),b
  3305  012196                     l2189:
  3306                           
  3307                           ;main.c: 378: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3308                           
  3309                           ; BSR set to: 1
  3310  012196  0E01               	movlw	1
  3311  012198  ECC1  F0A7         	call	_MXK_BlockSwitchTo
  3312  01219C  0900               	iorlw	0
  3313  01219E  B4D8               	btfsc	status,2,c
  3314  0121A0  D78B               	goto	l2184
  3315                           
  3316                           ;main.c: 380: if (mode==0){
  3317  0121A2  0101               	movlb	1	; () banked
  3318  0121A4  513A               	movf	_mode& (0+255),w,b
  3319  0121A6  113B               	iorwf	(_mode+1)& (0+255),w,b
  3320  0121A8  A4D8               	btfss	status,2,c
  3321  0121AA  D014               	goto	l2191
  3322                           
  3323                           ; BSR set to: 1
  3324                           ;main.c: 383: printf("%c", (char)35);
  3325  0121AC  0EFC               	movlw	low STR_1
  3326  0121AE  0100               	movlb	0	; () banked
  3327  0121B0  6F75               	movwf	printf@f& (0+255),b
  3328  0121B2  0EFF               	movlw	high STR_1
  3329  0121B4  6F76               	movwf	(printf@f+1)& (0+255),b
  3330  0121B6  0E00               	movlw	0
  3331  0121B8  6F78               	movwf	(?_printf+3)& (0+255),b
  3332  0121BA  0E23               	movlw	35
  3333  0121BC  6F77               	movwf	(?_printf+2)& (0+255),b
  3334  0121BE  EC39  F093         	call	_printf	;wreg free
  3335                           
  3336                           ;main.c: 384: printf("Robot Ready! \n\n");
  3337  0121C2  0EC2               	movlw	low STR_13
  3338  0121C4  0100               	movlb	0	; () banked
  3339  0121C6  6F75               	movwf	printf@f& (0+255),b
  3340  0121C8  0EFF               	movlw	high STR_13
  3341  0121CA  6F76               	movwf	(printf@f+1)& (0+255),b
  3342  0121CC  EC39  F093         	call	_printf	;wreg free
  3343                           
  3344                           ;main.c: 386: Console_Render();
  3345  0121D0  EC8F  F08E         	call	_Console_Render	;wreg free
  3346  0121D4                     l2191:
  3347                           
  3348                           ;main.c: 388: }
  3349                           ;main.c: 389: if (mode == 3){
  3350  0121D4  0E03               	movlw	3
  3351  0121D6  0101               	movlb	1	; () banked
  3352  0121D8  193A               	xorwf	_mode& (0+255),w,b
  3353  0121DA  113B               	iorwf	(_mode+1)& (0+255),w,b
  3354  0121DC  A4D8               	btfss	status,2,c
  3355  0121DE  D00D               	goto	l2192
  3356                           
  3357                           ; BSR set to: 1
  3358                           ;main.c: 391: Init_Pos_Array();
  3359  0121E0  EC3F  F09B         	call	_Init_Pos_Array	;wreg free
  3360                           
  3361                           ;main.c: 392: Console_Render();
  3362  0121E4  EC8F  F08E         	call	_Console_Render	;wreg free
  3363                           
  3364                           ;main.c: 405: Console_Render();
  3365  0121E8  EC8F  F08E         	call	_Console_Render	;wreg free
  3366                           
  3367                           ;main.c: 406: mode=0;
  3368  0121EC  0E00               	movlw	0
  3369  0121EE  0101               	movlb	1	; () banked
  3370  0121F0  6F3B               	movwf	(_mode+1)& (0+255),b
  3371  0121F2  0E00               	movlw	0
  3372  0121F4  6F3A               	movwf	_mode& (0+255),b
  3373                           
  3374                           ; BSR set to: 1
  3375                           ;main.c: 409: Console_Render();
  3376  0121F6  EC8F  F08E         	call	_Console_Render	;wreg free
  3377  0121FA                     l2192:
  3378                           
  3379                           ;main.c: 411: }
  3380                           ;main.c: 413: Console_Render();
  3381  0121FA  EC8F  F08E         	call	_Console_Render	;wreg free
  3382                           
  3383                           ;main.c: 414: if (MXK_Release())
  3384  0121FE  ECD4  F0A9         	call	_MXK_Release	;wreg free
  3385  012202  0900               	iorlw	0
  3386  012204  B4D8               	btfsc	status,2,c
  3387  012206  D758               	goto	l2184
  3388                           
  3389                           ;main.c: 415: MXK_Dequeue();
  3390  012208  EC13  F0A8         	call	_MXK_Dequeue	;wreg free
  3391                           
  3392                           ;main.c: 416: }
  3393                           ;main.c: 417: }
  3394  01220C  D755               	goto	l2184
  3395  01220E                     __end_of_main:
  3396                           	opt stack 0
  3397                           tosu	equ	0xFFF
  3398                           tosh	equ	0xFFE
  3399                           tosl	equ	0xFFD
  3400                           pclath	equ	0xFFA
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1h	equ	0xFE2
  3409                           fsr1l	equ	0xFE1
  3410                           postinc2	equ	0xFDE
  3411                           status	equ	0xFD8
  3412                           
  3413 ;; *************** function _Robot_Init *****************
  3414 ;; Defined at:
  3415 ;;		line 154 in file "main.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;Total ram usage:        0 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    9
  3436 ;; This function calls:
  3437 ;;		_Robot_Stop
  3438 ;;		_eusartSend
  3439 ;; This function is called by:
  3440 ;;		_main
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text1
  3445  0154D8                     __ptext1:
  3446                           	opt stack 0
  3447  0154D8                     _Robot_Init:
  3448                           	opt stack 21
  3449                           
  3450                           ;main.c: 155: eusartSend(128);
  3451                           
  3452                           ;incstack = 0
  3453  0154D8  0E80               	movlw	128
  3454  0154DA  EC85  F0AA         	call	_eusartSend
  3455                           
  3456                           ;main.c: 156: eusartSend(132);
  3457  0154DE  0E84               	movlw	132
  3458  0154E0  EC85  F0AA         	call	_eusartSend
  3459                           
  3460                           ;main.c: 157: Robot_Stop();
  3461  0154E4  EC4F  F0A9         	call	_Robot_Stop	;wreg free
  3462  0154E8  0012               	return		;funcret
  3463  0154EA                     __end_of_Robot_Init:
  3464                           	opt stack 0
  3465                           tosu	equ	0xFFF
  3466                           tosh	equ	0xFFE
  3467                           tosl	equ	0xFFD
  3468                           pclath	equ	0xFFA
  3469                           tblptru	equ	0xFF8
  3470                           tblptrh	equ	0xFF7
  3471                           tblptrl	equ	0xFF6
  3472                           tablat	equ	0xFF5
  3473                           postinc0	equ	0xFEE
  3474                           wreg	equ	0xFE8
  3475                           postdec1	equ	0xFE5
  3476                           fsr1h	equ	0xFE2
  3477                           fsr1l	equ	0xFE1
  3478                           postinc2	equ	0xFDE
  3479                           status	equ	0xFD8
  3480                           
  3481 ;; *************** function _Robot_Stop *****************
  3482 ;; Defined at:
  3483 ;;		line 235 in file "dans.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      void 
  3490 ;; Registers used:
  3491 ;;		wreg, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;Total ram usage:        0 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    8
  3504 ;; This function calls:
  3505 ;;		_eusartSend
  3506 ;; This function is called by:
  3507 ;;		_Robot_Init
  3508 ;;		_Turn
  3509 ;;		_Travel
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text2
  3514  01529E                     __ptext2:
  3515                           	opt stack 0
  3516  01529E                     _Robot_Stop:
  3517                           	opt stack 21
  3518                           
  3519                           ;dans.c: 236: eusartSend(137);
  3520                           
  3521                           ;incstack = 0
  3522  01529E  0E89               	movlw	137
  3523  0152A0  EC85  F0AA         	call	_eusartSend
  3524                           
  3525                           ;dans.c: 237: eusartSend(0);
  3526  0152A4  0E00               	movlw	0
  3527  0152A6  EC85  F0AA         	call	_eusartSend
  3528                           
  3529                           ;dans.c: 238: eusartSend(0);
  3530  0152AA  0E00               	movlw	0
  3531  0152AC  EC85  F0AA         	call	_eusartSend
  3532                           
  3533                           ;dans.c: 239: eusartSend(0);
  3534  0152B0  0E00               	movlw	0
  3535  0152B2  EC85  F0AA         	call	_eusartSend
  3536                           
  3537                           ;dans.c: 240: eusartSend(0);
  3538  0152B6  0E00               	movlw	0
  3539  0152B8  EC85  F0AA         	call	_eusartSend
  3540  0152BC  0012               	return		;funcret
  3541  0152BE                     __end_of_Robot_Stop:
  3542                           	opt stack 0
  3543                           tosu	equ	0xFFF
  3544                           tosh	equ	0xFFE
  3545                           tosl	equ	0xFFD
  3546                           pclath	equ	0xFFA
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           postinc0	equ	0xFEE
  3552                           wreg	equ	0xFE8
  3553                           postdec1	equ	0xFE5
  3554                           fsr1h	equ	0xFE2
  3555                           fsr1l	equ	0xFE1
  3556                           postinc2	equ	0xFDE
  3557                           status	equ	0xFD8
  3558                           
  3559 ;; *************** function _eusartSend *****************
  3560 ;; Defined at:
  3561 ;;		line 57 in file "dans.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  sendChar        1    wreg     unsigned char 
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;  sendChar        1    0[BANK0 ] unsigned char 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3579 ;;Total ram usage:        1 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    7
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_Robot_Init
  3586 ;;		_Robot_Stop
  3587 ;;		_Get_Sensor_State
  3588 ;;		_BangBang
  3589 ;;		_LEDOn
  3590 ;;		_LEDOff
  3591 ;;		_Drive
  3592 ;;		_UpdateDistance
  3593 ;;		_Get_VirtualWall_State
  3594 ;;		_Turn
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text3
  3599  01550A                     __ptext3:
  3600                           	opt stack 0
  3601  01550A                     _eusartSend:
  3602                           	opt stack 22
  3603                           
  3604                           ;incstack = 0
  3605                           ;eusartSend@sendChar stored from wreg
  3606  01550A  0100               	movlb	0	; () banked
  3607  01550C  6F60               	movwf	eusartSend@sendChar& (0+255),b
  3608  01550E                     
  3609                           ;dans.c: 58: while(!TXSTA1bits.TRMT){};
  3610  01550E  A2AD               	btfss	4013,1,c	;volatile
  3611  015510  D7FE               	goto	l14572
  3612                           
  3613                           ;dans.c: 59: TXREG1 = sendChar;
  3614  015512  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
  3615  015516  0012               	return		;funcret
  3616  015518                     __end_of_eusartSend:
  3617                           	opt stack 0
  3618                           tosu	equ	0xFFF
  3619                           tosh	equ	0xFFE
  3620                           tosl	equ	0xFFD
  3621                           pclath	equ	0xFFA
  3622                           tblptru	equ	0xFF8
  3623                           tblptrh	equ	0xFF7
  3624                           tblptrl	equ	0xFF6
  3625                           tablat	equ	0xFF5
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           postdec1	equ	0xFE5
  3629                           fsr1h	equ	0xFE2
  3630                           fsr1l	equ	0xFE1
  3631                           postinc2	equ	0xFDE
  3632                           status	equ	0xFD8
  3633                           
  3634 ;; *************** function _MXK_Init *****************
  3635 ;; Defined at:
  3636 ;;		line 33 in file "Library/MXK.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;		None
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;		None
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;Total ram usage:        0 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:   16
  3657 ;; This function calls:
  3658 ;;		_LED_Init
  3659 ;;		_Port_Init
  3660 ;;		_Port_SetPin
  3661 ;;		_Port_SetPinType
  3662 ;;		_Port_SetQuadType
  3663 ;;		_Port_SetType
  3664 ;;		_delay_ms
  3665 ;; This function is called by:
  3666 ;;		_main
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text4
  3671  012D0C                     __ptext4:
  3672                           	opt stack 0
  3673  012D0C                     _MXK_Init:
  3674                           	opt stack 14
  3675                           
  3676                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  3677                           
  3678                           ;incstack = 0
  3679  012D0C  0E01               	movlw	1
  3680  012D0E  6E4B               	movwf	_Bus_State,c
  3681                           
  3682                           ;MXK.c: 36: lQueue = (Function)0;
  3683  012D10  0E00               	movlw	0
  3684  012D12  0100               	movlb	0	; () banked
  3685  012D14  6FDF               	movwf	_lQueue& (0+255),b	;volatile
  3686  012D16  0E00               	movlw	0
  3687  012D18  6FE0               	movwf	(_lQueue+1)& (0+255),b	;volatile
  3688  012D1A  0E00               	movlw	0
  3689  012D1C  6FE1               	movwf	(_lQueue+2)& (0+255),b	;volatile
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  3693  012D1E  0EF1               	movlw	low _PortA
  3694  012D20  6FA0               	movwf	Port_Init@pInput& (0+255),b
  3695  012D22  0E02               	movlw	high _PortA
  3696  012D24  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  3697  012D26  0E00               	movlw	0
  3698  012D28  6FA2               	movwf	Port_Init@pPort& (0+255),b
  3699  012D2A  ECC5  F091         	call	_Port_Init	;wreg free
  3700                           
  3701                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  3702  012D2E  0EA4               	movlw	low _PortB
  3703  012D30  0100               	movlb	0	; () banked
  3704  012D32  6FA0               	movwf	Port_Init@pInput& (0+255),b
  3705  012D34  0E01               	movlw	high _PortB
  3706  012D36  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  3707  012D38  0E01               	movlw	1
  3708  012D3A  6FA2               	movwf	Port_Init@pPort& (0+255),b
  3709  012D3C  ECC5  F091         	call	_Port_Init	;wreg free
  3710                           
  3711                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  3712  012D40  0EAE               	movlw	low _PortC
  3713  012D42  0100               	movlb	0	; () banked
  3714  012D44  6FA0               	movwf	Port_Init@pInput& (0+255),b
  3715  012D46  0E01               	movlw	high _PortC
  3716  012D48  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  3717  012D4A  0E02               	movlw	2
  3718  012D4C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  3719  012D4E  ECC5  F091         	call	_Port_Init	;wreg free
  3720                           
  3721                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  3722  012D52  0E9A               	movlw	low _PortD
  3723  012D54  0100               	movlb	0	; () banked
  3724  012D56  6FA0               	movwf	Port_Init@pInput& (0+255),b
  3725  012D58  0E01               	movlw	high _PortD
  3726  012D5A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  3727  012D5C  0E03               	movlw	3
  3728  012D5E  6FA2               	movwf	Port_Init@pPort& (0+255),b
  3729  012D60  ECC5  F091         	call	_Port_Init	;wreg free
  3730                           
  3731                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  3732  012D64  0E90               	movlw	low _PortE
  3733  012D66  0100               	movlb	0	; () banked
  3734  012D68  6FA0               	movwf	Port_Init@pInput& (0+255),b
  3735  012D6A  0E01               	movlw	high _PortE
  3736  012D6C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  3737  012D6E  0E04               	movlw	4
  3738  012D70  6FA2               	movwf	Port_Init@pPort& (0+255),b
  3739  012D72  ECC5  F091         	call	_Port_Init	;wreg free
  3740                           
  3741                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  3742  012D76  0EB8               	movlw	low _PortF
  3743  012D78  0100               	movlb	0	; () banked
  3744  012D7A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  3745  012D7C  0E01               	movlw	high _PortF
  3746  012D7E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  3747  012D80  0E05               	movlw	5
  3748  012D82  6FA2               	movwf	Port_Init@pPort& (0+255),b
  3749  012D84  ECC5  F091         	call	_Port_Init	;wreg free
  3750                           
  3751                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  3752  012D88  0EE7               	movlw	low _PortG
  3753  012D8A  0100               	movlb	0	; () banked
  3754  012D8C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  3755  012D8E  0E02               	movlw	high _PortG
  3756  012D90  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  3757  012D92  0E06               	movlw	6
  3758  012D94  6FA2               	movwf	Port_Init@pPort& (0+255),b
  3759  012D96  ECC5  F091         	call	_Port_Init	;wreg free
  3760                           
  3761                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  3762  012D9A  0EB8               	movlw	low _PortF
  3763  012D9C  0100               	movlb	0	; () banked
  3764  012D9E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  3765  012DA0  0E01               	movlw	high _PortF
  3766  012DA2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3767  012DA4  0E05               	movlw	5
  3768  012DA6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  3769  012DA8  0E00               	movlw	0
  3770  012DAA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  3771  012DAC  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  3772                           
  3773                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  3774  012DB0  0EA4               	movlw	low _PortB
  3775  012DB2  0100               	movlb	0	; () banked
  3776  012DB4  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  3777  012DB6  0E01               	movlw	high _PortB
  3778  012DB8  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  3779  012DBA  0E00               	movlw	0
  3780  012DBC  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  3781  012DBE  0E00               	movlw	0
  3782  012DC0  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  3783  012DC2  ECB4  F08B         	call	_Port_SetQuadType	;wreg free
  3784                           
  3785                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  3786  012DC6  0EB8               	movlw	low _PortF
  3787  012DC8  0100               	movlb	0	; () banked
  3788  012DCA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  3789  012DCC  0E01               	movlw	high _PortF
  3790  012DCE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  3791  012DD0  0E06               	movlw	6
  3792  012DD2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  3793  012DD4  0E03               	movlw	3
  3794  012DD6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  3795  012DD8  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  3796                           
  3797                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  3798  012DDC  0EE7               	movlw	low _PortG
  3799  012DDE  0100               	movlb	0	; () banked
  3800  012DE0  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  3801  012DE2  0E02               	movlw	high _PortG
  3802  012DE4  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  3803  012DE6  0E03               	movlw	3
  3804  012DE8  6F9C               	movwf	Port_SetType@pType& (0+255),b
  3805  012DEA  ECA8  F08D         	call	_Port_SetType	;wreg free
  3806                           
  3807                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  3808  012DEE  0EE7               	movlw	low _PortG
  3809  012DF0  0100               	movlb	0	; () banked
  3810  012DF2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  3811  012DF4  0E02               	movlw	high _PortG
  3812  012DF6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3813  012DF8  0E04               	movlw	4
  3814  012DFA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  3815  012DFC  0E00               	movlw	0
  3816  012DFE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  3817  012E00  EC02  F09C         	call	_Port_SetPin	;wreg free
  3818                           
  3819                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  3820  012E04  0EB8               	movlw	low _PortF
  3821  012E06  0100               	movlb	0	; () banked
  3822  012E08  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  3823  012E0A  0E01               	movlw	high _PortF
  3824  012E0C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  3825  012E0E  0E06               	movlw	6
  3826  012E10  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  3827  012E12  0E01               	movlw	1
  3828  012E14  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  3829  012E16  EC02  F09C         	call	_Port_SetPin	;wreg free
  3830                           
  3831                           ;MXK.c: 55: LED_Init(eLED1);
  3832  012E1A  0E00               	movlw	0
  3833  012E1C  EC5F  F0A4         	call	_LED_Init
  3834                           
  3835                           ;MXK.c: 56: LED_Init(eLED2);
  3836  012E20  0E01               	movlw	1
  3837  012E22  EC5F  F0A4         	call	_LED_Init
  3838                           
  3839                           ;MXK.c: 58: PIR1 = 0;
  3840  012E26  0E00               	movlw	0
  3841  012E28  6E9E               	movwf	3998,c	;volatile
  3842                           
  3843                           ;MXK.c: 59: PIR2 = 0;
  3844  012E2A  0E00               	movlw	0
  3845  012E2C  6EA1               	movwf	4001,c	;volatile
  3846                           
  3847                           ;MXK.c: 60: PIR3 = 0;
  3848  012E2E  0E00               	movlw	0
  3849  012E30  6EA4               	movwf	4004,c	;volatile
  3850                           
  3851                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  3852  012E32  8E9B               	bsf	3995,7,c	;volatile
  3853                           
  3854                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  3855  012E34  8C9B               	bsf	3995,6,c	;volatile
  3856                           
  3857                           ;MXK.c: 66: delay_ms(100);
  3858  012E36  0E00               	movlw	0
  3859  012E38  0100               	movlb	0	; () banked
  3860  012E3A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3861  012E3C  0E64               	movlw	100
  3862  012E3E  6F60               	movwf	delay_ms@ms& (0+255),b
  3863  012E40  EC31  F0A4         	call	_delay_ms	;wreg free
  3864                           
  3865                           ;MXK.c: 68: RCONbits.IPEN = 1;
  3866  012E44  8ED0               	bsf	4048,7,c	;volatile
  3867  012E46  0012               	return		;funcret
  3868  012E48                     __end_of_MXK_Init:
  3869                           	opt stack 0
  3870                           tosu	equ	0xFFF
  3871                           tosh	equ	0xFFE
  3872                           tosl	equ	0xFFD
  3873                           pclath	equ	0xFFA
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           postdec1	equ	0xFE5
  3881                           fsr1h	equ	0xFE2
  3882                           fsr1l	equ	0xFE1
  3883                           postinc2	equ	0xFDE
  3884                           status	equ	0xFD8
  3885                           
  3886 ;; *************** function _Port_Init *****************
  3887 ;; Defined at:
  3888 ;;		line 150 in file "Library/Port.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  3891 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  3892 ;;		 -> PortD(10), PortC(10), PortF(10), 
  3893 ;;  pPort           1   66[BANK0 ] enum E6786
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  i               1   69[BANK0 ] unsigned char 
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3905 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3907 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3908 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;Total ram usage:        6 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:   15
  3912 ;; This function calls:
  3913 ;;		_GetPortPORT
  3914 ;;		_GetPortProperties
  3915 ;;		_GetPortTRIS
  3916 ;;		_Port_Set
  3917 ;;		_Port_SetPinType
  3918 ;;		_Port_SetType
  3919 ;;		_Word_GetPair
  3920 ;; This function is called by:
  3921 ;;		_MXK_Init
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text5
  3926  01238A                     __ptext5:
  3927                           	opt stack 0
  3928  01238A                     _Port_Init:
  3929                           	opt stack 14
  3930                           
  3931                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  3932                           
  3933                           ;incstack = 0
  3934  01238A  0100               	movlb	0	; () banked
  3935  01238C  51A2               	movf	Port_Init@pPort& (0+255),w,b
  3936  01238E  ECB4  F09F         	call	_GetPortProperties
  3937  012392  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  3938  012396  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  3939  01239A  0100               	movlb	0	; () banked
  3940  01239C  C060  FFDE         	movff	?_GetPortProperties,postinc2
  3941  0123A0  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  3942                           
  3943                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  3944  0123A4  51A2               	movf	Port_Init@pPort& (0+255),w,b
  3945  0123A6  ECF8  F09F         	call	_GetPortPORT
  3946  0123AA  0100               	movlb	0	; () banked
  3947  0123AC  EE20 F006          	lfsr	2,6
  3948  0123B0  51A0               	movf	Port_Init@pInput& (0+255),w,b
  3949  0123B2  26D9               	addwf	fsr2l,f,c
  3950  0123B4  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3951  0123B6  22DA               	addwfc	fsr2h,f,c
  3952  0123B8  C060  FFDE         	movff	?_GetPortPORT,postinc2
  3953  0123BC  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  3954                           
  3955                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  3956  0123C0  51A2               	movf	Port_Init@pPort& (0+255),w,b
  3957  0123C2  ECF8  F09F         	call	_GetPortPORT
  3958  0123C6  0100               	movlb	0	; () banked
  3959  0123C8  EE20 F004          	lfsr	2,4
  3960  0123CC  51A0               	movf	Port_Init@pInput& (0+255),w,b
  3961  0123CE  26D9               	addwf	fsr2l,f,c
  3962  0123D0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3963  0123D2  22DA               	addwfc	fsr2h,f,c
  3964  0123D4  C060  FFDE         	movff	?_GetPortPORT,postinc2
  3965  0123D8  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  3966                           
  3967                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  3968  0123DC  51A2               	movf	Port_Init@pPort& (0+255),w,b
  3969  0123DE  EC70  F09F         	call	_GetPortTRIS
  3970  0123E2  0100               	movlb	0	; () banked
  3971  0123E4  EE20 F002          	lfsr	2,2
  3972  0123E8  51A0               	movf	Port_Init@pInput& (0+255),w,b
  3973  0123EA  26D9               	addwf	fsr2l,f,c
  3974  0123EC  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3975  0123EE  22DA               	addwfc	fsr2h,f,c
  3976  0123F0  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  3977  0123F4  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  3981  0123F8  EE20 F004          	lfsr	2,4
  3982  0123FC  51A0               	movf	Port_Init@pInput& (0+255),w,b
  3983  0123FE  26D9               	addwf	fsr2l,f,c
  3984  012400  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3985  012402  22DA               	addwfc	fsr2h,f,c
  3986  012404  CFDE F0A3          	movff	postinc2,??_Port_Init
  3987  012408  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  3988  01240C  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  3989  012410  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  3990  012414  0E00               	movlw	0
  3991  012416  6EDF               	movwf	indf2,c
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  3995  012418  EE20 F002          	lfsr	2,2
  3996  01241C  51A0               	movf	Port_Init@pInput& (0+255),w,b
  3997  01241E  26D9               	addwf	fsr2l,f,c
  3998  012420  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  3999  012422  22DA               	addwfc	fsr2h,f,c
  4000  012424  CFDE F0A3          	movff	postinc2,??_Port_Init
  4001  012428  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  4002  01242C  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  4003  012430  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  4004  012434  0EFF               	movlw	255
  4005  012436  6EDF               	movwf	indf2,c
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  4009  012438  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  4010  01243C  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  4011  012440  0E00               	movlw	0
  4012  012442  6F9C               	movwf	Port_SetType@pType& (0+255),b
  4013  012444  ECA8  F08D         	call	_Port_SetType	;wreg free
  4014                           
  4015                           ;Port.c: 166: UINT8 i;
  4016                           ;Port.c: 167: for (i=0; i<8; i++)
  4017  012448  0E00               	movlw	0
  4018  01244A  0100               	movlb	0	; () banked
  4019  01244C  6FA5               	movwf	Port_Init@i& (0+255),b
  4020  01244E                     l14786:
  4021                           
  4022                           ; BSR set to: 0
  4023  01244E  0E07               	movlw	7
  4024  012450  65A5               	cpfsgt	Port_Init@i& (0+255),b
  4025  012452  D031               	goto	l403
  4026  012454  D04B               	goto	u12030
  4027  012456                     
  4028                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  4029                           
  4030                           ; BSR set to: 0
  4031  012456  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4032  01245A  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4033  01245E  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  4034  012462  0E03               	movlw	3
  4035  012464  0100               	movlb	0	; () banked
  4036  012466  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  4037  012468  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  4038                           
  4039                           ;Port.c: 173: break;
  4040  01246C  D03C               	goto	l405
  4041  01246E                     
  4042                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  4043  01246E  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4044  012472  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4045  012476  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  4046  01247A  0E02               	movlw	2
  4047  01247C  0100               	movlb	0	; () banked
  4048  01247E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  4049  012480  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  4050                           
  4051                           ;Port.c: 176: break;
  4052  012484  D030               	goto	l405
  4053  012486                     
  4054                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  4055  012486  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4056  01248A  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4057  01248E  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  4058  012492  0E01               	movlw	1
  4059  012494  0100               	movlb	0	; () banked
  4060  012496  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  4061  012498  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  4062                           
  4063                           ;Port.c: 179: break;
  4064  01249C  D024               	goto	l405
  4065  01249E                     
  4066                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  4067  01249E  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  4068  0124A2  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  4069  0124A6  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  4070  0124AA  0E00               	movlw	0
  4071  0124AC  0100               	movlb	0	; () banked
  4072  0124AE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  4073  0124B0  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  4074                           
  4075                           ;Port.c: 183: }
  4076                           
  4077                           ;Port.c: 182: break;
  4078  0124B4  D018               	goto	l405
  4079  0124B6                     l403:
  4080  0124B6  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  4081  0124BA  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  4082  0124BE  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  4083  0124C2  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  4084  0124C6  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  4085  0124CA  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4086                           
  4087                           ; Switch size 1, requested type "space"
  4088                           ; Number of cases is 4, Range of values is 0 to 3
  4089                           ; switch strategies available:
  4090                           ; Name         Instructions Cycles
  4091                           ; simple_byte           13     7 (average)
  4092                           ;	Chosen strategy is simple_byte
  4093  0124CE  0A00               	xorlw	0	; case 0
  4094  0124D0  B4D8               	btfsc	status,2,c
  4095  0124D2  D7C1               	goto	l404
  4096  0124D4  0A01               	xorlw	1	; case 1
  4097  0124D6  B4D8               	btfsc	status,2,c
  4098  0124D8  D7D6               	goto	l407
  4099  0124DA  0A03               	xorlw	3	; case 2
  4100  0124DC  B4D8               	btfsc	status,2,c
  4101  0124DE  D7C7               	goto	l406
  4102  0124E0  0A01               	xorlw	1	; case 3
  4103  0124E2  B4D8               	btfsc	status,2,c
  4104  0124E4  D7DC               	goto	l408
  4105  0124E6                     l405:
  4106  0124E6  0100               	movlb	0	; () banked
  4107  0124E8  2BA5               	incf	Port_Init@i& (0+255),f,b
  4108  0124EA  D7B1               	goto	l14786
  4109  0124EC                     u12030:
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;Port.c: 184: }
  4113                           ;Port.c: 185: Port_Set(pInput, 0x00);
  4114                           
  4115                           ; BSR set to: 0
  4116  0124EC  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  4117  0124F0  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  4118  0124F4  0E00               	movlw	0
  4119  0124F6  6F71               	movwf	Port_Set@pValue& (0+255),b
  4120  0124F8  ECE3  F087         	call	_Port_Set	;wreg free
  4121  0124FC  0012               	return		;funcret
  4122  0124FE                     __end_of_Port_Init:
  4123                           	opt stack 0
  4124                           tosu	equ	0xFFF
  4125                           tosh	equ	0xFFE
  4126                           tosl	equ	0xFFD
  4127                           pclath	equ	0xFFA
  4128                           tblptru	equ	0xFF8
  4129                           tblptrh	equ	0xFF7
  4130                           tblptrl	equ	0xFF6
  4131                           tablat	equ	0xFF5
  4132                           postinc0	equ	0xFEE
  4133                           wreg	equ	0xFE8
  4134                           postdec1	equ	0xFE5
  4135                           fsr1h	equ	0xFE2
  4136                           fsr1l	equ	0xFE1
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function _Port_SetType *****************
  4145 ;; Defined at:
  4146 ;;		line 513 in file "Library/Port.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  4149 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4150 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4151 ;;  pType           1   60[BANK0 ] enum E6795
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  Output          1   63[BANK0 ] enum E6475
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  1    wreg      enum E6475
  4156 ;; Registers used:
  4157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4163 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;Total ram usage:        6 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:   14
  4170 ;; This function calls:
  4171 ;;		_Port_CheckPortType
  4172 ;;		_Word_SetPair
  4173 ;; This function is called by:
  4174 ;;		_Port_Init
  4175 ;;		_MXK_Init
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text6
  4180  011B50                     __ptext6:
  4181                           	opt stack 0
  4182  011B50                     _Port_SetType:
  4183                           	opt stack 15
  4184                           
  4185                           ;Port.c: 515: ePinError Output = ePinErrorState;
  4186                           
  4187                           ;incstack = 0
  4188  011B50  0E05               	movlw	5
  4189  011B52  0100               	movlb	0	; () banked
  4190  011B54  6F9F               	movwf	Port_SetType@Output& (0+255),b
  4191                           
  4192                           ;Port.c: 517: switch (pType)
  4193  011B56  D06E               	goto	l509
  4194  011B58                     
  4195                           ; BSR set to: 0
  4196                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  4197                           
  4198                           ; BSR set to: 0
  4199  011B58  EE20 F002          	lfsr	2,2
  4200  011B5C  519A               	movf	Port_SetType@pInput& (0+255),w,b
  4201  011B5E  26D9               	addwf	fsr2l,f,c
  4202  011B60  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4203  011B62  22DA               	addwfc	fsr2h,f,c
  4204  011B64  CFDE F09D          	movff	postinc2,??_Port_SetType
  4205  011B68  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  4206  011B6C  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  4207  011B70  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  4208  011B74  0EFF               	movlw	255
  4209  011B76  D05C               	goto	L3
  4210  011B78                     
  4211                           ; BSR set to: 0
  4212                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  4213                           
  4214                           ; BSR set to: 0
  4215  011B78  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4216  011B7C  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4217  011B80  0E01               	movlw	1
  4218  011B82  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4219  011B84  ECCD  F0A6         	call	_Port_CheckPortType	;wreg free
  4220  011B88  0100               	movlb	0	; () banked
  4221  011B8A  6F9F               	movwf	Port_SetType@Output& (0+255),b
  4222  011B8C  519F               	movf	Port_SetType@Output& (0+255),w,b
  4223  011B8E  A4D8               	btfss	status,2,c
  4224  011B90  0012               	return	
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;Port.c: 527: {
  4228                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  4229  011B92  EE20 F002          	lfsr	2,2
  4230  011B96  519A               	movf	Port_SetType@pInput& (0+255),w,b
  4231  011B98  26D9               	addwf	fsr2l,f,c
  4232  011B9A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4233  011B9C  22DA               	addwfc	fsr2h,f,c
  4234  011B9E  CFDE F09D          	movff	postinc2,??_Port_SetType
  4235  011BA2  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  4236  011BA6  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  4237  011BAA  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  4238  011BAE  0E00               	movlw	0
  4239  011BB0  6EDF               	movwf	indf2,c
  4240                           
  4241                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  4242  011BB2  EE20 F004          	lfsr	2,4
  4243  011BB6  D02F               	goto	L17
  4244  011BB8                     
  4245                           ; BSR set to: 0
  4246                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  4247                           
  4248                           ; BSR set to: 0
  4249  011BB8  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4250  011BBC  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4251  011BC0  0E02               	movlw	2
  4252  011BC2  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4253  011BC4  ECCD  F0A6         	call	_Port_CheckPortType	;wreg free
  4254  011BC8  0100               	movlb	0	; () banked
  4255  011BCA  6F9F               	movwf	Port_SetType@Output& (0+255),b
  4256  011BCC  519F               	movf	Port_SetType@Output& (0+255),w,b
  4257  011BCE  A4D8               	btfss	status,2,c
  4258  011BD0  0012               	return	
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;Port.c: 538: {
  4262                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  4263  011BD2  EE20 F002          	lfsr	2,2
  4264  011BD6  519A               	movf	Port_SetType@pInput& (0+255),w,b
  4265  011BD8  26D9               	addwf	fsr2l,f,c
  4266  011BDA  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4267  011BDC  22DA               	addwfc	fsr2h,f,c
  4268  011BDE  CFDE F09D          	movff	postinc2,??_Port_SetType
  4269  011BE2  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  4270  011BE6  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  4271  011BEA  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  4272  011BEE  0EFF               	movlw	255
  4273  011BF0  6EDF               	movwf	indf2,c
  4274                           
  4275                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  4276  011BF2  EE20 F004          	lfsr	2,4
  4277  011BF6  D7B2               	goto	L4
  4278  011BF8                     
  4279                           ; BSR set to: 0
  4280                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  4281                           
  4282                           ; BSR set to: 0
  4283  011BF8  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  4284  011BFC  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  4285  011C00  0E00               	movlw	0
  4286  011C02  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  4287  011C04  ECCD  F0A6         	call	_Port_CheckPortType	;wreg free
  4288  011C08  0100               	movlb	0	; () banked
  4289  011C0A  6F9F               	movwf	Port_SetType@Output& (0+255),b
  4290  011C0C  519F               	movf	Port_SetType@Output& (0+255),w,b
  4291  011C0E  A4D8               	btfss	status,2,c
  4292  011C10  0012               	return	
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;Port.c: 549: {
  4296                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  4297  011C12  EE20 F002          	lfsr	2,2
  4298  011C16                     L17:
  4299  011C16  519A               	movf	Port_SetType@pInput& (0+255),w,b
  4300  011C18  26D9               	addwf	fsr2l,f,c
  4301  011C1A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  4302  011C1C  22DA               	addwfc	fsr2h,f,c
  4303  011C1E  CFDE F09D          	movff	postinc2,??_Port_SetType
  4304  011C22  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  4305  011C26  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  4306  011C2A  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  4307  011C2E  0E00               	movlw	0
  4308  011C30                     L3:
  4309  011C30  6EDF               	movwf	indf2,c
  4310                           
  4311                           ;Port.c: 552: }
  4312  011C32  D00D               	goto	l511
  4313  011C34                     l509:
  4314                           
  4315                           ; BSR set to: 0
  4316                           
  4317                           ; BSR set to: 0
  4318  011C34  519C               	movf	Port_SetType@pType& (0+255),w,b
  4319                           
  4320                           ; Switch size 1, requested type "space"
  4321                           ; Number of cases is 4, Range of values is 0 to 3
  4322                           ; switch strategies available:
  4323                           ; Name         Instructions Cycles
  4324                           ; simple_byte           13     7 (average)
  4325                           ;	Chosen strategy is simple_byte
  4326  011C36  0A00               	xorlw	0	; case 0
  4327  011C38  B4D8               	btfsc	status,2,c
  4328  011C3A  D78E               	goto	l510
  4329  011C3C  0A01               	xorlw	1	; case 1
  4330  011C3E  B4D8               	btfsc	status,2,c
  4331  011C40  D79B               	goto	l512
  4332  011C42  0A03               	xorlw	3	; case 2
  4333  011C44  B4D8               	btfsc	status,2,c
  4334  011C46  D7B8               	goto	l516
  4335  011C48  0A01               	xorlw	1	; case 3
  4336  011C4A  B4D8               	btfsc	status,2,c
  4337  011C4C  D7D5               	goto	l519
  4338  011C4E                     l511:
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  4342                           
  4343                           ; BSR set to: 0
  4344  011C4E  0E08               	movlw	8
  4345  011C50  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4346  011C52  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4347  011C54  0E00               	movlw	0
  4348  011C56  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4349  011C58  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4350  011C5A  0E00               	movlw	0
  4351  011C5C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4352  011C5E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4353  011C62  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4354                           
  4355                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  4356  011C66  0E08               	movlw	8
  4357  011C68  0100               	movlb	0	; () banked
  4358  011C6A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4359  011C6C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4360  011C6E  0E00               	movlw	0
  4361  011C70  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4362  011C72  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4363  011C74  0E01               	movlw	1
  4364  011C76  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4365  011C78  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4366  011C7C  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4367                           
  4368                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  4369  011C80  0E08               	movlw	8
  4370  011C82  0100               	movlb	0	; () banked
  4371  011C84  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4372  011C86  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4373  011C88  0E00               	movlw	0
  4374  011C8A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4375  011C8C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4376  011C8E  0E02               	movlw	2
  4377  011C90  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4378  011C92  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4379  011C96  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4380                           
  4381                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  4382  011C9A  0E08               	movlw	8
  4383  011C9C  0100               	movlb	0	; () banked
  4384  011C9E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4385  011CA0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4386  011CA2  0E00               	movlw	0
  4387  011CA4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4388  011CA6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4389  011CA8  0E03               	movlw	3
  4390  011CAA  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4391  011CAC  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4392  011CB0  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4393                           
  4394                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  4395  011CB4  0E08               	movlw	8
  4396  011CB6  0100               	movlb	0	; () banked
  4397  011CB8  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4398  011CBA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4399  011CBC  0E00               	movlw	0
  4400  011CBE  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4401  011CC0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4402  011CC2  0E04               	movlw	4
  4403  011CC4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4404  011CC6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4405  011CCA  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4406                           
  4407                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  4408  011CCE  0E08               	movlw	8
  4409  011CD0  0100               	movlb	0	; () banked
  4410  011CD2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4411  011CD4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4412  011CD6  0E00               	movlw	0
  4413  011CD8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4414  011CDA  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4415  011CDC  0E05               	movlw	5
  4416  011CDE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4417  011CE0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4418  011CE4  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4419                           
  4420                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  4421  011CE8  0E08               	movlw	8
  4422  011CEA  0100               	movlb	0	; () banked
  4423  011CEC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4424  011CEE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4425  011CF0  0E00               	movlw	0
  4426  011CF2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4427  011CF4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4428  011CF6  0E06               	movlw	6
  4429  011CF8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4430  011CFA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4431  011CFE  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4432                           
  4433                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  4434  011D02  0E08               	movlw	8
  4435  011D04  0100               	movlb	0	; () banked
  4436  011D06  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  4437  011D08  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  4438  011D0A  0E00               	movlw	0
  4439  011D0C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  4440  011D0E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  4441  011D10  0E07               	movlw	7
  4442  011D12  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  4443  011D14  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  4444  011D18  ECA4  F0A7         	call	_Word_SetPair	;wreg free
  4445  011D1C  0012               	return	
  4446  011D1E                     __end_of_Port_SetType:
  4447                           	opt stack 0
  4448                           tosu	equ	0xFFF
  4449                           tosh	equ	0xFFE
  4450                           tosl	equ	0xFFD
  4451                           pclath	equ	0xFFA
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           postinc0	equ	0xFEE
  4457                           wreg	equ	0xFE8
  4458                           postdec1	equ	0xFE5
  4459                           fsr1h	equ	0xFE2
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function _Port_CheckPortType *****************
  4469 ;; Defined at:
  4470 ;;		line 138 in file "Library/Port.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  4473 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4474 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4475 ;;  pDrive          1   56[BANK0 ] enum E6469
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  Output          1   57[BANK0 ] enum E6475
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  1    wreg      enum E6475
  4480 ;; Registers used:
  4481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4482 ;; Tracked objects:
  4483 ;;		On entry : 0/0
  4484 ;;		On exit  : 0/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4487 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;Total ram usage:        4 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:   13
  4494 ;; This function calls:
  4495 ;;		_Port_CheckQuadType
  4496 ;; This function is called by:
  4497 ;;		_Port_SetType
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text7
  4502  014D9A                     __ptext7:
  4503                           	opt stack 0
  4504  014D9A                     _Port_CheckPortType:
  4505                           	opt stack 15
  4506                           
  4507                           ;Port.c: 140: ePinError Output = ePinErrorState;
  4508                           
  4509                           ;incstack = 0
  4510  014D9A  0E05               	movlw	5
  4511  014D9C  0100               	movlb	0	; () banked
  4512  014D9E  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  4516  014DA0  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  4517  014DA4  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  4518  014DA8  0E00               	movlw	0
  4519  014DAA  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  4520  014DAC  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  4521  014DB0  ECAA  F0A5         	call	_Port_CheckQuadType	;wreg free
  4522  014DB4  0100               	movlb	0	; () banked
  4523  014DB6  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  4524  014DB8  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  4525  014DBA  A4D8               	btfss	status,2,c
  4526  014DBC  D00C               	goto	l397
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  4530  014DBE  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  4531  014DC2  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  4532  014DC6  0E01               	movlw	1
  4533  014DC8  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  4534  014DCA  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  4535  014DCE  ECAA  F0A5         	call	_Port_CheckQuadType	;wreg free
  4536  014DD2  0100               	movlb	0	; () banked
  4537  014DD4  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  4538  014DD6                     l397:
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;Port.c: 146: return Output;
  4542                           
  4543                           ; BSR set to: 0
  4544  014DD6  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  4545  014DD8  0012               	return	
  4546  014DDA                     __end_of_Port_CheckPortType:
  4547                           	opt stack 0
  4548                           tosu	equ	0xFFF
  4549                           tosh	equ	0xFFE
  4550                           tosl	equ	0xFFD
  4551                           pclath	equ	0xFFA
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           postinc0	equ	0xFEE
  4557                           wreg	equ	0xFE8
  4558                           postdec1	equ	0xFE5
  4559                           fsr1h	equ	0xFE2
  4560                           fsr1l	equ	0xFE1
  4561                           indf2	equ	0xFDF
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           fsr2h	equ	0xFDA
  4565                           fsr2l	equ	0xFD9
  4566                           status	equ	0xFD8
  4567                           
  4568 ;; *************** function _Port_Set *****************
  4569 ;; Defined at:
  4570 ;;		line 570 in file "Library/Port.c"
  4571 ;; Parameters:    Size  Location     Type
  4572 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  4573 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  4574 ;;		 -> PortD(10), PortC(10), PortF(10), 
  4575 ;;  pValue          1   17[BANK0 ] unsigned char 
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  4578 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  4579 ;;  Type            1   38[BANK0 ] enum E6795
  4580 ;; Return value:  Size  Location     Type
  4581 ;;                  1    wreg      void 
  4582 ;; Registers used:
  4583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4584 ;; Tracked objects:
  4585 ;;		On entry : 0/0
  4586 ;;		On exit  : 0/0
  4587 ;;		Unchanged: 0/0
  4588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4589 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;Total ram usage:       24 bytes
  4594 ;; Hardware stack levels used:    1
  4595 ;; Hardware stack levels required when called:   10
  4596 ;; This function calls:
  4597 ;;		_Byte_SetByte
  4598 ;;		_Word_GetPair
  4599 ;; This function is called by:
  4600 ;;		_Port_Init
  4601 ;;		_Port_Toggle
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text8
  4606  010FC6                     __ptext8:
  4607                           	opt stack 0
  4608  010FC6                     _Port_Set:
  4609                           	opt stack 18
  4610                           
  4611                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;incstack = 0
  4615  010FC6  0E08               	movlw	8
  4616  010FC8  0100               	movlb	0	; () banked
  4617  010FCA  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4618  010FCC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4619  010FCE  0E00               	movlw	0
  4620  010FD0  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4621  010FD2  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4622  010FD4  0E00               	movlw	0
  4623  010FD6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4624  010FD8  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4625  010FDC  0100               	movlb	0	; () banked
  4626  010FDE  6F86               	movwf	Port_Set@Type& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  4630  010FE0  5186               	movf	Port_Set@Type& (0+255),w,b
  4631  010FE2  6F72               	movwf	??_Port_Set& (0+255),b
  4632  010FE4  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4633  010FE6  0E0E               	movlw	14
  4634  010FE8                     u11535:
  4635  010FE8  90D8               	bcf	status,0,c
  4636  010FEA  3772               	rlcf	??_Port_Set& (0+255),f,b
  4637  010FEC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4638  010FEE  2EE8               	decfsz	wreg,f,c
  4639  010FF0  D7FB               	goto	u11535
  4640  010FF2  5186               	movf	Port_Set@Type& (0+255),w,b
  4641  010FF4  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  4642  010FF6  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  4643  010FF8  0E0C               	movlw	12
  4644  010FFA                     u11545:
  4645  010FFA  90D8               	bcf	status,0,c
  4646  010FFC  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  4647  010FFE  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  4648  011000  2EE8               	decfsz	wreg,f,c
  4649  011002  D7FB               	goto	u11545
  4650  011004  5186               	movf	Port_Set@Type& (0+255),w,b
  4651  011006  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  4652  011008  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  4653  01100A  0E0A               	movlw	10
  4654  01100C                     u11555:
  4655  01100C  90D8               	bcf	status,0,c
  4656  01100E  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  4657  011010  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  4658  011012  2EE8               	decfsz	wreg,f,c
  4659  011014  D7FB               	goto	u11555
  4660  011016  5186               	movf	Port_Set@Type& (0+255),w,b
  4661  011018  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  4662  01101A  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  4663  01101C  5186               	movf	Port_Set@Type& (0+255),w,b
  4664  01101E  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  4665  011020  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  4666  011022  0E06               	movlw	6
  4667  011024                     u11565:
  4668  011024  90D8               	bcf	status,0,c
  4669  011026  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  4670  011028  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  4671  01102A  2EE8               	decfsz	wreg,f,c
  4672  01102C  D7FB               	goto	u11565
  4673  01102E  5186               	movf	Port_Set@Type& (0+255),w,b
  4674  011030  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  4675  011032  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  4676  011034  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  4677  011036  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  4678  011038  0EF0               	movlw	240
  4679  01103A  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  4680  01103C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  4681  01103E  0B0F               	andlw	15
  4682  011040  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  4683  011042  0EF0               	movlw	240
  4684  011044  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  4685  011046  5186               	movf	Port_Set@Type& (0+255),w,b
  4686  011048  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  4687  01104A  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  4688  01104C  90D8               	bcf	status,0,c
  4689  01104E  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4690  011050  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4691  011052  90D8               	bcf	status,0,c
  4692  011054  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  4693  011056  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  4694  011058  5186               	movf	Port_Set@Type& (0+255),w,b
  4695  01105A  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  4696  01105C  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  4697  01105E  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  4698  011060  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4699  011062  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  4700  011064  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4701  011066  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  4702  011068  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4703  01106A  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  4704  01106C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4705  01106E  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  4706  011070  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4707  011072  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  4708  011074  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4709  011076  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  4710  011078  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4711  01107A  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  4712  01107C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4713  01107E  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  4714  011080  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4715  011082  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  4716  011084  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4717  011086  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  4718  011088  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  4719  01108A  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  4720  01108C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  4721  01108E  5172               	movf	??_Port_Set& (0+255),w,b
  4722  011090  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  4723  011092  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  4724  011094  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4725  011096  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  4726  011098  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;Port.c: 574: UINT16 TypeActual = Type;
  4730  01109A  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  4731  01109E  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  4735  0110A0  0E08               	movlw	8
  4736  0110A2  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4737  0110A4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4738  0110A6  0E00               	movlw	0
  4739  0110A8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4740  0110AA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4741  0110AC  0E01               	movlw	1
  4742  0110AE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4743  0110B0  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4744  0110B4  0100               	movlb	0	; () banked
  4745  0110B6  6F72               	movwf	??_Port_Set& (0+255),b
  4746  0110B8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4747  0110BA  90D8               	bcf	status,0,c
  4748  0110BC  3772               	rlcf	??_Port_Set& (0+255),f,b
  4749  0110BE  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4750  0110C0  90D8               	bcf	status,0,c
  4751  0110C2  3772               	rlcf	??_Port_Set& (0+255),f,b
  4752  0110C4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4753  0110C6  5172               	movf	??_Port_Set& (0+255),w,b
  4754  0110C8  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4755  0110CA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4756  0110CC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  4760  0110CE  0E08               	movlw	8
  4761  0110D0  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4762  0110D2  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4763  0110D4  0E00               	movlw	0
  4764  0110D6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4765  0110D8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4766  0110DA  0E02               	movlw	2
  4767  0110DC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4768  0110DE  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4769  0110E2  0100               	movlb	0	; () banked
  4770  0110E4  6F72               	movwf	??_Port_Set& (0+255),b
  4771  0110E6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4772  0110E8  3B72               	swapf	??_Port_Set& (0+255),f,b
  4773  0110EA  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  4774  0110EC  0EF0               	movlw	240
  4775  0110EE  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  4776  0110F0  5172               	movf	??_Port_Set& (0+255),w,b
  4777  0110F2  0B0F               	andlw	15
  4778  0110F4  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  4779  0110F6  0EF0               	movlw	240
  4780  0110F8  1772               	andwf	??_Port_Set& (0+255),f,b
  4781  0110FA  5172               	movf	??_Port_Set& (0+255),w,b
  4782  0110FC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4783  0110FE  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4784  011100  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  4788  011102  0E08               	movlw	8
  4789  011104  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4790  011106  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4791  011108  0E00               	movlw	0
  4792  01110A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4793  01110C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4794  01110E  0E03               	movlw	3
  4795  011110  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4796  011112  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4797  011116  0100               	movlb	0	; () banked
  4798  011118  6F72               	movwf	??_Port_Set& (0+255),b
  4799  01111A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4800  01111C  0E06               	movlw	6
  4801  01111E                     u11575:
  4802  01111E  90D8               	bcf	status,0,c
  4803  011120  3772               	rlcf	??_Port_Set& (0+255),f,b
  4804  011122  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4805  011124  2EE8               	decfsz	wreg,f,c
  4806  011126  D7FB               	goto	u11575
  4807  011128  5172               	movf	??_Port_Set& (0+255),w,b
  4808  01112A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4809  01112C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4810  01112E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  4814  011130  0E08               	movlw	8
  4815  011132  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4816  011134  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4817  011136  0E00               	movlw	0
  4818  011138  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4819  01113A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4820  01113C  0E04               	movlw	4
  4821  01113E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4822  011140  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4823  011144  0100               	movlb	0	; () banked
  4824  011146  6F72               	movwf	??_Port_Set& (0+255),b
  4825  011148  5172               	movf	??_Port_Set& (0+255),w,b
  4826  01114A  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  4827  01114C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4828  01114E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4829  011150  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4830  011152  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  4831  011154  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  4835  011156  0E08               	movlw	8
  4836  011158  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4837  01115A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4838  01115C  0E00               	movlw	0
  4839  01115E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4840  011160  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4841  011162  0E05               	movlw	5
  4842  011164  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4843  011166  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4844  01116A  0100               	movlb	0	; () banked
  4845  01116C  6F72               	movwf	??_Port_Set& (0+255),b
  4846  01116E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4847  011170  0E0A               	movlw	10
  4848  011172                     u11585:
  4849  011172  90D8               	bcf	status,0,c
  4850  011174  3772               	rlcf	??_Port_Set& (0+255),f,b
  4851  011176  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4852  011178  2EE8               	decfsz	wreg,f,c
  4853  01117A  D7FB               	goto	u11585
  4854  01117C  5172               	movf	??_Port_Set& (0+255),w,b
  4855  01117E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4856  011180  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4857  011182  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  4861  011184  0E08               	movlw	8
  4862  011186  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4863  011188  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4864  01118A  0E00               	movlw	0
  4865  01118C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4866  01118E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4867  011190  0E06               	movlw	6
  4868  011192  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4869  011194  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4870  011198  0100               	movlb	0	; () banked
  4871  01119A  6F72               	movwf	??_Port_Set& (0+255),b
  4872  01119C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4873  01119E  0E0C               	movlw	12
  4874  0111A0                     u11595:
  4875  0111A0  90D8               	bcf	status,0,c
  4876  0111A2  3772               	rlcf	??_Port_Set& (0+255),f,b
  4877  0111A4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4878  0111A6  2EE8               	decfsz	wreg,f,c
  4879  0111A8  D7FB               	goto	u11595
  4880  0111AA  5172               	movf	??_Port_Set& (0+255),w,b
  4881  0111AC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4882  0111AE  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4883  0111B0  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  4887  0111B2  0E08               	movlw	8
  4888  0111B4  256F               	addwf	Port_Set@pInput& (0+255),w,b
  4889  0111B6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  4890  0111B8  0E00               	movlw	0
  4891  0111BA  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  4892  0111BC  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  4893  0111BE  0E07               	movlw	7
  4894  0111C0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  4895  0111C2  EC47  F0A8         	call	_Word_GetPair	;wreg free
  4896  0111C6  0100               	movlb	0	; () banked
  4897  0111C8  6F72               	movwf	??_Port_Set& (0+255),b
  4898  0111CA  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  4899  0111CC  0E0E               	movlw	14
  4900  0111CE                     u11605:
  4901  0111CE  90D8               	bcf	status,0,c
  4902  0111D0  3772               	rlcf	??_Port_Set& (0+255),f,b
  4903  0111D2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  4904  0111D4  2EE8               	decfsz	wreg,f,c
  4905  0111D6  D7FB               	goto	u11605
  4906  0111D8  5172               	movf	??_Port_Set& (0+255),w,b
  4907  0111DA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  4908  0111DC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  4909  0111DE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  4910                           
  4911                           ;Port.c: 584: if (TypeRequired == TypeActual)
  4912  0111E0  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  4913  0111E2  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  4914  0111E4  E144               	bnz	l528
  4915  0111E6  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  4916  0111E8  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  4917  0111EA  A4D8               	btfss	status,2,c
  4918  0111EC  0012               	return	
  4919  0111EE  D030               	goto	l526
  4920  0111F0                     
  4921                           ; BSR set to: 0
  4922                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  4923                           
  4924                           ; BSR set to: 0
  4925  0111F0  EE20 F002          	lfsr	2,2
  4926  0111F4  516F               	movf	Port_Set@pInput& (0+255),w,b
  4927  0111F6  26D9               	addwf	fsr2l,f,c
  4928  0111F8  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4929  0111FA  22DA               	addwfc	fsr2h,f,c
  4930  0111FC  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  4931  011200  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  4932  011204  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4933  011208  EC8C  F0AA         	call	_Byte_SetByte	;wreg free
  4934                           
  4935                           ;Port.c: 594: break;
  4936  01120C  0012               	return	
  4937  01120E                     
  4938                           ;Port.c: 597: pValue = ~pValue;
  4939  01120E  0100               	movlb	0	; () banked
  4940  011210  1F71               	comf	Port_Set@pValue& (0+255),f,b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  4944  011212  EE20 F002          	lfsr	2,2
  4945  011216  516F               	movf	Port_Set@pInput& (0+255),w,b
  4946  011218  26D9               	addwf	fsr2l,f,c
  4947  01121A  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4948  01121C  22DA               	addwfc	fsr2h,f,c
  4949  01121E  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  4950  011222  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  4951  011226  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4952  01122A  EC8C  F0AA         	call	_Byte_SetByte	;wreg free
  4953                           
  4954                           ;Port.c: 599: break;
  4955  01122E  0012               	return	
  4956  011230                     
  4957                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  4958  011230  0100               	movlb	0	; () banked
  4959  011232  EE20 F004          	lfsr	2,4
  4960  011236  516F               	movf	Port_Set@pInput& (0+255),w,b
  4961  011238  26D9               	addwf	fsr2l,f,c
  4962  01123A  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  4963  01123C  22DA               	addwfc	fsr2h,f,c
  4964  01123E  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  4965  011242  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  4966  011246  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  4967  01124A  EC8C  F0AA         	call	_Byte_SetByte	;wreg free
  4968                           
  4969                           ;Port.c: 606: }
  4970                           
  4971                           ;Port.c: 605: break;
  4972                           
  4973                           ;Port.c: 604: default:
  4974                           
  4975                           ;Port.c: 603: break;
  4976  01124E  0012               	return	
  4977  011250                     l526:
  4978  011250  0100               	movlb	0	; () banked
  4979  011252  5186               	movf	Port_Set@Type& (0+255),w,b
  4980                           
  4981                           ; Switch size 1, requested type "space"
  4982                           ; Number of cases is 4, Range of values is 0 to 3
  4983                           ; switch strategies available:
  4984                           ; Name         Instructions Cycles
  4985                           ; simple_byte           13     7 (average)
  4986                           ;	Chosen strategy is simple_byte
  4987  011254  0A00               	xorlw	0	; case 0
  4988  011256  B4D8               	btfsc	status,2,c
  4989  011258  0012               	return	
  4990  01125A  0A01               	xorlw	1	; case 1
  4991  01125C  B4D8               	btfsc	status,2,c
  4992  01125E  D7C8               	goto	l529
  4993  011260  0A03               	xorlw	3	; case 2
  4994  011262  B4D8               	btfsc	status,2,c
  4995  011264  D7D4               	goto	l531
  4996  011266  0A01               	xorlw	1	; case 3
  4997  011268  A4D8               	btfss	status,2,c
  4998                           
  4999                           ; BSR set to: 0
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;Port.c: 607: }
  5003  01126A  0012               	return	
  5004  01126C  D7E1               	goto	l532
  5005  01126E                     l528:
  5006  01126E  0012               	return		;funcret
  5007  011270                     __end_of_Port_Set:
  5008                           	opt stack 0
  5009                           tosu	equ	0xFFF
  5010                           tosh	equ	0xFFE
  5011                           tosl	equ	0xFFD
  5012                           pclath	equ	0xFFA
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           postdec1	equ	0xFE5
  5020                           fsr1h	equ	0xFE2
  5021                           fsr1l	equ	0xFE1
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function _Byte_SetByte *****************
  5030 ;; Defined at:
  5031 ;;		line 110 in file "Library/Types.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  5034 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  5035 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  5036 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  5037 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  5038 ;;		 -> NULL(0), 
  5039 ;;  pValue          1    2[BANK0 ] unsigned char 
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;		None
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      void 
  5044 ;; Registers used:
  5045 ;;		fsr2l, fsr2h
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5051 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;Total ram usage:        3 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    7
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_Port_Set
  5062 ;;		_I2C_Init
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text9
  5067  015518                     __ptext9:
  5068                           	opt stack 0
  5069  015518                     _Byte_SetByte:
  5070                           	opt stack 20
  5071                           
  5072                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  5073                           
  5074                           ;incstack = 0
  5075  015518  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  5076  01551C  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  5077  015520  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  5078  015524  0012               	return		;funcret
  5079  015526                     __end_of_Byte_SetByte:
  5080                           	opt stack 0
  5081                           tosu	equ	0xFFF
  5082                           tosh	equ	0xFFE
  5083                           tosl	equ	0xFFD
  5084                           pclath	equ	0xFFA
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           postinc0	equ	0xFEE
  5090                           wreg	equ	0xFE8
  5091                           postdec1	equ	0xFE5
  5092                           fsr1h	equ	0xFE2
  5093                           fsr1l	equ	0xFE1
  5094                           indf2	equ	0xFDF
  5095                           postinc2	equ	0xFDE
  5096                           postdec2	equ	0xFDD
  5097                           fsr2h	equ	0xFDA
  5098                           fsr2l	equ	0xFD9
  5099                           status	equ	0xFD8
  5100                           
  5101 ;; *************** function _GetPortTRIS *****************
  5102 ;; Defined at:
  5103 ;;		line 67 in file "Library/Port.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  pInput          1    wreg     enum E6786
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  pInput          1    2[BANK0 ] enum E6786
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  2    0[BANK0 ] PTR struct Byte
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5117 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;Total ram usage:        3 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    7
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_Port_Init
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text10
  5132  013EE0                     __ptext10:
  5133                           	opt stack 0
  5134  013EE0                     _GetPortTRIS:
  5135                           	opt stack 21
  5136                           
  5137                           ;incstack = 0
  5138                           ;GetPortTRIS@pInput stored from wreg
  5139  013EE0  0100               	movlb	0	; () banked
  5140  013EE2  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  5141                           
  5142                           ;Port.c: 69: switch (pInput)
  5143  013EE4  D029               	goto	l363
  5144  013EE6                     
  5145                           ;Port.c: 72: return (BytePtr)&TRISA;
  5146  013EE6  0E92               	movlw	146
  5147  013EE8  0100               	movlb	0	; () banked
  5148  013EEA  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5149  013EEC  0E0F               	movlw	15
  5150  013EEE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5151                           
  5152                           ; BSR set to: 0
  5153  013EF0  0012               	return	
  5154  013EF2                     
  5155                           ; BSR set to: 0
  5156                           ;Port.c: 74: return (BytePtr)&TRISB;
  5157                           
  5158                           ; BSR set to: 0
  5159  013EF2  0E93               	movlw	147
  5160  013EF4  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5161  013EF6  0E0F               	movlw	15
  5162  013EF8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5163                           
  5164                           ; BSR set to: 0
  5165  013EFA  0012               	return	
  5166  013EFC                     
  5167                           ; BSR set to: 0
  5168                           ;Port.c: 76: return (BytePtr)&TRISC;
  5169                           
  5170                           ; BSR set to: 0
  5171  013EFC  0E94               	movlw	148
  5172  013EFE  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5173  013F00  0E0F               	movlw	15
  5174  013F02  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5175                           
  5176                           ; BSR set to: 0
  5177  013F04  0012               	return	
  5178  013F06                     
  5179                           ; BSR set to: 0
  5180                           ;Port.c: 78: return (BytePtr)&TRISD;
  5181                           
  5182                           ; BSR set to: 0
  5183  013F06  0E95               	movlw	149
  5184  013F08  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5185  013F0A  0E0F               	movlw	15
  5186  013F0C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5187                           
  5188                           ; BSR set to: 0
  5189  013F0E  0012               	return	
  5190  013F10                     
  5191                           ; BSR set to: 0
  5192                           ;Port.c: 80: return (BytePtr)&TRISE;
  5193                           
  5194                           ; BSR set to: 0
  5195  013F10  0E96               	movlw	150
  5196  013F12  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5197  013F14  0E0F               	movlw	15
  5198  013F16  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5199                           
  5200                           ; BSR set to: 0
  5201  013F18  0012               	return	
  5202  013F1A                     
  5203                           ; BSR set to: 0
  5204                           ;Port.c: 82: return (BytePtr)&TRISF;
  5205                           
  5206                           ; BSR set to: 0
  5207  013F1A  0E97               	movlw	151
  5208  013F1C  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5209  013F1E  0E0F               	movlw	15
  5210  013F20  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5211                           
  5212                           ; BSR set to: 0
  5213  013F22  0012               	return	
  5214  013F24                     
  5215                           ; BSR set to: 0
  5216                           ;Port.c: 84: return (BytePtr)&TRISG;
  5217                           
  5218                           ; BSR set to: 0
  5219  013F24  0E98               	movlw	152
  5220  013F26  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5221  013F28  0E0F               	movlw	15
  5222  013F2A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5223                           
  5224                           ; BSR set to: 0
  5225  013F2C  0012               	return	
  5226  013F2E                     
  5227                           ; BSR set to: 0
  5228                           ;Port.c: 86: return (void*)0;
  5229                           
  5230                           ; BSR set to: 0
  5231  013F2E  0E00               	movlw	0
  5232  013F30  6F60               	movwf	?_GetPortTRIS& (0+255),b
  5233  013F32  0E00               	movlw	0
  5234  013F34  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;Port.c: 87: }
  5238                           
  5239                           ; BSR set to: 0
  5240  013F36  0012               	return	
  5241  013F38                     l363:
  5242                           
  5243                           ; BSR set to: 0
  5244  013F38  0100               	movlb	0	; () banked
  5245  013F3A  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  5246                           
  5247                           ; Switch size 1, requested type "space"
  5248                           ; Number of cases is 7, Range of values is 0 to 6
  5249                           ; switch strategies available:
  5250                           ; Name         Instructions Cycles
  5251                           ; simple_byte           22    12 (average)
  5252                           ;	Chosen strategy is simple_byte
  5253  013F3C  0A00               	xorlw	0	; case 0
  5254  013F3E  B4D8               	btfsc	status,2,c
  5255  013F40  D7D2               	goto	l364
  5256  013F42  0A01               	xorlw	1	; case 1
  5257  013F44  B4D8               	btfsc	status,2,c
  5258  013F46  D7D5               	goto	l366
  5259  013F48  0A03               	xorlw	3	; case 2
  5260  013F4A  B4D8               	btfsc	status,2,c
  5261  013F4C  D7D7               	goto	l367
  5262  013F4E  0A01               	xorlw	1	; case 3
  5263  013F50  B4D8               	btfsc	status,2,c
  5264  013F52  D7D9               	goto	l368
  5265  013F54  0A07               	xorlw	7	; case 4
  5266  013F56  B4D8               	btfsc	status,2,c
  5267  013F58  D7DB               	goto	l369
  5268  013F5A  0A01               	xorlw	1	; case 5
  5269  013F5C  B4D8               	btfsc	status,2,c
  5270  013F5E  D7DD               	goto	l370
  5271  013F60  0A03               	xorlw	3	; case 6
  5272  013F62  B4D8               	btfsc	status,2,c
  5273  013F64  D7DF               	goto	l371
  5274  013F66  D7E3               	goto	l372
  5275  013F68                     __end_of_GetPortTRIS:
  5276                           	opt stack 0
  5277                           tosu	equ	0xFFF
  5278                           tosh	equ	0xFFE
  5279                           tosl	equ	0xFFD
  5280                           pclath	equ	0xFFA
  5281                           tblptru	equ	0xFF8
  5282                           tblptrh	equ	0xFF7
  5283                           tblptrl	equ	0xFF6
  5284                           tablat	equ	0xFF5
  5285                           postinc0	equ	0xFEE
  5286                           wreg	equ	0xFE8
  5287                           postdec1	equ	0xFE5
  5288                           fsr1h	equ	0xFE2
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function _GetPortProperties *****************
  5298 ;; Defined at:
  5299 ;;		line 21 in file "Library/Port.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  pInput          1    wreg     enum E6786
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  pInput          1    2[BANK0 ] enum E6786
  5304 ;; Return value:  Size  Location     Type
  5305 ;;                  2    0[BANK0 ] PTR struct PortProperty
  5306 ;; Registers used:
  5307 ;;		wreg, status,2, status,0
  5308 ;; Tracked objects:
  5309 ;;		On entry : 0/0
  5310 ;;		On exit  : 0/0
  5311 ;;		Unchanged: 0/0
  5312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5313 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;Total ram usage:        3 bytes
  5318 ;; Hardware stack levels used:    1
  5319 ;; Hardware stack levels required when called:    7
  5320 ;; This function calls:
  5321 ;;		Nothing
  5322 ;; This function is called by:
  5323 ;;		_Port_Init
  5324 ;; This function uses a non-reentrant model
  5325 ;;
  5326                           
  5327                           	psect	text11
  5328  013F68                     __ptext11:
  5329                           	opt stack 0
  5330  013F68                     _GetPortProperties:
  5331                           	opt stack 21
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;incstack = 0
  5335                           ;GetPortProperties@pInput stored from wreg
  5336  013F68  0100               	movlb	0	; () banked
  5337  013F6A  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  5338                           
  5339                           ;Port.c: 23: switch (pInput)
  5340  013F6C  D029               	goto	l337
  5341  013F6E                     
  5342                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  5343  013F6E  0EDB               	movlw	low _PortA_Property
  5344  013F70  0100               	movlb	0	; () banked
  5345  013F72  6F60               	movwf	?_GetPortProperties& (0+255),b
  5346  013F74  0EFE               	movlw	high _PortA_Property
  5347  013F76  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5348                           
  5349                           ; BSR set to: 0
  5350  013F78  0012               	return	
  5351  013F7A                     
  5352                           ; BSR set to: 0
  5353                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  5354                           
  5355                           ; BSR set to: 0
  5356  013F7A  0ED9               	movlw	low _PortB_Property
  5357  013F7C  6F60               	movwf	?_GetPortProperties& (0+255),b
  5358  013F7E  0EFE               	movlw	high _PortB_Property
  5359  013F80  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5360                           
  5361                           ; BSR set to: 0
  5362  013F82  0012               	return	
  5363  013F84                     
  5364                           ; BSR set to: 0
  5365                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  5366                           
  5367                           ; BSR set to: 0
  5368  013F84  0ED7               	movlw	low _PortC_Property
  5369  013F86  6F60               	movwf	?_GetPortProperties& (0+255),b
  5370  013F88  0EFE               	movlw	high _PortC_Property
  5371  013F8A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5372                           
  5373                           ; BSR set to: 0
  5374  013F8C  0012               	return	
  5375  013F8E                     
  5376                           ; BSR set to: 0
  5377                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  5378                           
  5379                           ; BSR set to: 0
  5380  013F8E  0ED5               	movlw	low _PortD_Property
  5381  013F90  6F60               	movwf	?_GetPortProperties& (0+255),b
  5382  013F92  0EFE               	movlw	high _PortD_Property
  5383  013F94  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5384                           
  5385                           ; BSR set to: 0
  5386  013F96  0012               	return	
  5387  013F98                     
  5388                           ; BSR set to: 0
  5389                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  5390                           
  5391                           ; BSR set to: 0
  5392  013F98  0ED3               	movlw	low _PortE_Property
  5393  013F9A  6F60               	movwf	?_GetPortProperties& (0+255),b
  5394  013F9C  0EFE               	movlw	high _PortE_Property
  5395  013F9E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5396                           
  5397                           ; BSR set to: 0
  5398  013FA0  0012               	return	
  5399  013FA2                     
  5400                           ; BSR set to: 0
  5401                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  5402                           
  5403                           ; BSR set to: 0
  5404  013FA2  0ED1               	movlw	low _PortF_Property
  5405  013FA4  6F60               	movwf	?_GetPortProperties& (0+255),b
  5406  013FA6  0EFE               	movlw	high _PortF_Property
  5407  013FA8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5408                           
  5409                           ; BSR set to: 0
  5410  013FAA  0012               	return	
  5411  013FAC                     
  5412                           ; BSR set to: 0
  5413                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  5414                           
  5415                           ; BSR set to: 0
  5416  013FAC  0ECF               	movlw	low _PortG_Property
  5417  013FAE  6F60               	movwf	?_GetPortProperties& (0+255),b
  5418  013FB0  0EFE               	movlw	high _PortG_Property
  5419  013FB2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5420                           
  5421                           ; BSR set to: 0
  5422  013FB4  0012               	return	
  5423  013FB6                     
  5424                           ; BSR set to: 0
  5425                           ;Port.c: 40: return (void*)0;
  5426                           
  5427                           ; BSR set to: 0
  5428  013FB6  0E00               	movlw	0
  5429  013FB8  6F60               	movwf	?_GetPortProperties& (0+255),b
  5430  013FBA  0E00               	movlw	0
  5431  013FBC  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;Port.c: 41: }
  5435                           
  5436                           ; BSR set to: 0
  5437  013FBE  0012               	return	
  5438  013FC0                     l337:
  5439                           
  5440                           ; BSR set to: 0
  5441  013FC0  0100               	movlb	0	; () banked
  5442  013FC2  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  5443                           
  5444                           ; Switch size 1, requested type "space"
  5445                           ; Number of cases is 7, Range of values is 0 to 6
  5446                           ; switch strategies available:
  5447                           ; Name         Instructions Cycles
  5448                           ; simple_byte           22    12 (average)
  5449                           ;	Chosen strategy is simple_byte
  5450  013FC4  0A00               	xorlw	0	; case 0
  5451  013FC6  B4D8               	btfsc	status,2,c
  5452  013FC8  D7D2               	goto	l338
  5453  013FCA  0A01               	xorlw	1	; case 1
  5454  013FCC  B4D8               	btfsc	status,2,c
  5455  013FCE  D7D5               	goto	l340
  5456  013FD0  0A03               	xorlw	3	; case 2
  5457  013FD2  B4D8               	btfsc	status,2,c
  5458  013FD4  D7D7               	goto	l341
  5459  013FD6  0A01               	xorlw	1	; case 3
  5460  013FD8  B4D8               	btfsc	status,2,c
  5461  013FDA  D7D9               	goto	l342
  5462  013FDC  0A07               	xorlw	7	; case 4
  5463  013FDE  B4D8               	btfsc	status,2,c
  5464  013FE0  D7DB               	goto	l343
  5465  013FE2  0A01               	xorlw	1	; case 5
  5466  013FE4  B4D8               	btfsc	status,2,c
  5467  013FE6  D7DD               	goto	l344
  5468  013FE8  0A03               	xorlw	3	; case 6
  5469  013FEA  B4D8               	btfsc	status,2,c
  5470  013FEC  D7DF               	goto	l345
  5471  013FEE  D7E3               	goto	l346
  5472  013FF0                     __end_of_GetPortProperties:
  5473                           	opt stack 0
  5474                           tosu	equ	0xFFF
  5475                           tosh	equ	0xFFE
  5476                           tosl	equ	0xFFD
  5477                           pclath	equ	0xFFA
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           postinc0	equ	0xFEE
  5483                           wreg	equ	0xFE8
  5484                           postdec1	equ	0xFE5
  5485                           fsr1h	equ	0xFE2
  5486                           fsr1l	equ	0xFE1
  5487                           indf2	equ	0xFDF
  5488                           postinc2	equ	0xFDE
  5489                           postdec2	equ	0xFDD
  5490                           fsr2h	equ	0xFDA
  5491                           fsr2l	equ	0xFD9
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function _GetPortPORT *****************
  5495 ;; Defined at:
  5496 ;;		line 44 in file "Library/Port.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  pInput          1    wreg     enum E6786
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  pInput          1    2[BANK0 ] enum E6786
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  2    0[BANK0 ] PTR struct Byte
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5510 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;Total ram usage:        3 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    7
  5517 ;; This function calls:
  5518 ;;		Nothing
  5519 ;; This function is called by:
  5520 ;;		_Port_Init
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text12
  5525  013FF0                     __ptext12:
  5526                           	opt stack 0
  5527  013FF0                     _GetPortPORT:
  5528                           	opt stack 21
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;incstack = 0
  5532                           ;GetPortPORT@pInput stored from wreg
  5533  013FF0  0100               	movlb	0	; () banked
  5534  013FF2  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  5535                           
  5536                           ;Port.c: 46: switch (pInput)
  5537  013FF4  D029               	goto	l350
  5538  013FF6                     
  5539                           ;Port.c: 49: return (BytePtr)&PORTA;
  5540  013FF6  0E80               	movlw	128
  5541  013FF8  0100               	movlb	0	; () banked
  5542  013FFA  6F60               	movwf	?_GetPortPORT& (0+255),b
  5543  013FFC  0E0F               	movlw	15
  5544  013FFE  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5545                           
  5546                           ; BSR set to: 0
  5547  014000  0012               	return	
  5548  014002                     
  5549                           ; BSR set to: 0
  5550                           ;Port.c: 51: return (BytePtr)&PORTB;
  5551                           
  5552                           ; BSR set to: 0
  5553  014002  0E81               	movlw	129
  5554  014004  6F60               	movwf	?_GetPortPORT& (0+255),b
  5555  014006  0E0F               	movlw	15
  5556  014008  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5557                           
  5558                           ; BSR set to: 0
  5559  01400A  0012               	return	
  5560  01400C                     
  5561                           ; BSR set to: 0
  5562                           ;Port.c: 53: return (BytePtr)&PORTC;
  5563                           
  5564                           ; BSR set to: 0
  5565  01400C  0E82               	movlw	130
  5566  01400E  6F60               	movwf	?_GetPortPORT& (0+255),b
  5567  014010  0E0F               	movlw	15
  5568  014012  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5569                           
  5570                           ; BSR set to: 0
  5571  014014  0012               	return	
  5572  014016                     
  5573                           ; BSR set to: 0
  5574                           ;Port.c: 55: return (BytePtr)&PORTD;
  5575                           
  5576                           ; BSR set to: 0
  5577  014016  0E83               	movlw	131
  5578  014018  6F60               	movwf	?_GetPortPORT& (0+255),b
  5579  01401A  0E0F               	movlw	15
  5580  01401C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5581                           
  5582                           ; BSR set to: 0
  5583  01401E  0012               	return	
  5584  014020                     
  5585                           ; BSR set to: 0
  5586                           ;Port.c: 57: return (BytePtr)&PORTE;
  5587                           
  5588                           ; BSR set to: 0
  5589  014020  0E84               	movlw	132
  5590  014022  6F60               	movwf	?_GetPortPORT& (0+255),b
  5591  014024  0E0F               	movlw	15
  5592  014026  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5593                           
  5594                           ; BSR set to: 0
  5595  014028  0012               	return	
  5596  01402A                     
  5597                           ; BSR set to: 0
  5598                           ;Port.c: 59: return (BytePtr)&PORTF;
  5599                           
  5600                           ; BSR set to: 0
  5601  01402A  0E85               	movlw	133
  5602  01402C  6F60               	movwf	?_GetPortPORT& (0+255),b
  5603  01402E  0E0F               	movlw	15
  5604  014030  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5605                           
  5606                           ; BSR set to: 0
  5607  014032  0012               	return	
  5608  014034                     
  5609                           ; BSR set to: 0
  5610                           ;Port.c: 61: return (BytePtr)&PORTG;
  5611                           
  5612                           ; BSR set to: 0
  5613  014034  0E86               	movlw	134
  5614  014036  6F60               	movwf	?_GetPortPORT& (0+255),b
  5615  014038  0E0F               	movlw	15
  5616  01403A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5617                           
  5618                           ; BSR set to: 0
  5619  01403C  0012               	return	
  5620  01403E                     
  5621                           ; BSR set to: 0
  5622                           ;Port.c: 63: return (void*)0;
  5623                           
  5624                           ; BSR set to: 0
  5625  01403E  0E00               	movlw	0
  5626  014040  6F60               	movwf	?_GetPortPORT& (0+255),b
  5627  014042  0E00               	movlw	0
  5628  014044  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;Port.c: 64: }
  5632                           
  5633                           ; BSR set to: 0
  5634  014046  0012               	return	
  5635  014048                     l350:
  5636                           
  5637                           ; BSR set to: 0
  5638  014048  0100               	movlb	0	; () banked
  5639  01404A  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  5640                           
  5641                           ; Switch size 1, requested type "space"
  5642                           ; Number of cases is 7, Range of values is 0 to 6
  5643                           ; switch strategies available:
  5644                           ; Name         Instructions Cycles
  5645                           ; simple_byte           22    12 (average)
  5646                           ;	Chosen strategy is simple_byte
  5647  01404C  0A00               	xorlw	0	; case 0
  5648  01404E  B4D8               	btfsc	status,2,c
  5649  014050  D7D2               	goto	l351
  5650  014052  0A01               	xorlw	1	; case 1
  5651  014054  B4D8               	btfsc	status,2,c
  5652  014056  D7D5               	goto	l353
  5653  014058  0A03               	xorlw	3	; case 2
  5654  01405A  B4D8               	btfsc	status,2,c
  5655  01405C  D7D7               	goto	l354
  5656  01405E  0A01               	xorlw	1	; case 3
  5657  014060  B4D8               	btfsc	status,2,c
  5658  014062  D7D9               	goto	l355
  5659  014064  0A07               	xorlw	7	; case 4
  5660  014066  B4D8               	btfsc	status,2,c
  5661  014068  D7DB               	goto	l356
  5662  01406A  0A01               	xorlw	1	; case 5
  5663  01406C  B4D8               	btfsc	status,2,c
  5664  01406E  D7DD               	goto	l357
  5665  014070  0A03               	xorlw	3	; case 6
  5666  014072  B4D8               	btfsc	status,2,c
  5667  014074  D7DF               	goto	l358
  5668  014076  D7E3               	goto	l359
  5669  014078                     __end_of_GetPortPORT:
  5670                           	opt stack 0
  5671                           tosu	equ	0xFFF
  5672                           tosh	equ	0xFFE
  5673                           tosl	equ	0xFFD
  5674                           pclath	equ	0xFFA
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           postinc0	equ	0xFEE
  5680                           wreg	equ	0xFE8
  5681                           postdec1	equ	0xFE5
  5682                           fsr1h	equ	0xFE2
  5683                           fsr1l	equ	0xFE1
  5684                           indf2	equ	0xFDF
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           fsr2h	equ	0xFDA
  5688                           fsr2l	equ	0xFD9
  5689                           status	equ	0xFD8
  5690                           
  5691 ;; *************** function _LED_Init *****************
  5692 ;; Defined at:
  5693 ;;		line 15 in file "Library/LED.c"
  5694 ;; Parameters:    Size  Location     Type
  5695 ;;  pLED            1    wreg     enum E6739
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  pLED            1   45[BANK0 ] enum E6739
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;Total ram usage:        1 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:   12
  5714 ;; This function calls:
  5715 ;;		_LED_Set
  5716 ;;		_Port_SetPinType
  5717 ;; This function is called by:
  5718 ;;		_MXK_Init
  5719 ;;		_main
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text13
  5724  0148BE                     __ptext13:
  5725                           	opt stack 0
  5726  0148BE                     _LED_Init:
  5727                           	opt stack 17
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;incstack = 0
  5731                           ;LED_Init@pLED stored from wreg
  5732  0148BE  0100               	movlb	0	; () banked
  5733  0148C0  6F8D               	movwf	LED_Init@pLED& (0+255),b
  5734                           
  5735                           ;LED.c: 17: switch (pLED)
  5736  0148C2  D018               	goto	l220
  5737  0148C4                     
  5738                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  5739  0148C4  0EAE               	movlw	low _PortC
  5740  0148C6  0100               	movlb	0	; () banked
  5741  0148C8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5742  0148CA  0E01               	movlw	high _PortC
  5743  0148CC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5744  0148CE  0E00               	movlw	0
  5745  0148D0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5746  0148D2  0E03               	movlw	3
  5747  0148D4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5748  0148D6  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  5749                           
  5750                           ;LED.c: 21: break;
  5751  0148DA  D014               	goto	l222
  5752  0148DC                     
  5753                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  5754  0148DC  0EAE               	movlw	low _PortC
  5755  0148DE  0100               	movlb	0	; () banked
  5756  0148E0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5757  0148E2  0E01               	movlw	high _PortC
  5758  0148E4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5759  0148E6  0E01               	movlw	1
  5760  0148E8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5761  0148EA  0E03               	movlw	3
  5762  0148EC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5763  0148EE  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  5764                           
  5765                           ;LED.c: 25: }
  5766                           
  5767                           ;LED.c: 24: break;
  5768  0148F2  D008               	goto	l222
  5769  0148F4                     l220:
  5770  0148F4  0100               	movlb	0	; () banked
  5771  0148F6  518D               	movf	LED_Init@pLED& (0+255),w,b
  5772                           
  5773                           ; Switch size 1, requested type "space"
  5774                           ; Number of cases is 2, Range of values is 0 to 1
  5775                           ; switch strategies available:
  5776                           ; Name         Instructions Cycles
  5777                           ; simple_byte            7     4 (average)
  5778                           ;	Chosen strategy is simple_byte
  5779  0148F8  0A00               	xorlw	0	; case 0
  5780  0148FA  B4D8               	btfsc	status,2,c
  5781  0148FC  D7E3               	goto	l221
  5782  0148FE  0A01               	xorlw	1	; case 1
  5783  014900  B4D8               	btfsc	status,2,c
  5784  014902  D7EC               	goto	l223
  5785  014904                     l222:
  5786                           
  5787                           ;LED.c: 26: LED_Set(pLED, 0);
  5788                           
  5789                           ; BSR set to: 0
  5790  014904  0E00               	movlw	0
  5791  014906  0100               	movlb	0	; () banked
  5792  014908  6F74               	movwf	LED_Set@pValue& (0+255),b
  5793  01490A  518D               	movf	LED_Init@pLED& (0+255),w,b
  5794  01490C  ECF8  F0A5         	call	_LED_Set
  5795  014910  0012               	return		;funcret
  5796  014912                     __end_of_LED_Init:
  5797                           	opt stack 0
  5798                           tosu	equ	0xFFF
  5799                           tosh	equ	0xFFE
  5800                           tosl	equ	0xFFD
  5801                           pclath	equ	0xFFA
  5802                           tblptru	equ	0xFF8
  5803                           tblptrh	equ	0xFF7
  5804                           tblptrl	equ	0xFF6
  5805                           tablat	equ	0xFF5
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           postdec1	equ	0xFE5
  5809                           fsr1h	equ	0xFE2
  5810                           fsr1l	equ	0xFE1
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           fsr2h	equ	0xFDA
  5815                           fsr2l	equ	0xFD9
  5816                           status	equ	0xFD8
  5817                           
  5818 ;; *************** function _LED_Set *****************
  5819 ;; Defined at:
  5820 ;;		line 33 in file "Library/LED.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  pLED            1    wreg     enum E6739
  5823 ;;  pValue          1   20[BANK0 ] unsigned char 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;  pLED            1   21[BANK0 ] enum E6739
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  1    wreg      void 
  5828 ;; Registers used:
  5829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5835 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;Total ram usage:        2 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:   11
  5842 ;; This function calls:
  5843 ;;		_Port_SetPin
  5844 ;; This function is called by:
  5845 ;;		_LED_Init
  5846 ;;		_SYSTEM_Initialize
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text14
  5851  014BF0                     __ptext14:
  5852                           	opt stack 0
  5853  014BF0                     _LED_Set:
  5854                           	opt stack 17
  5855                           
  5856                           ;incstack = 0
  5857                           ;LED_Set@pLED stored from wreg
  5858  014BF0  0100               	movlb	0	; () banked
  5859  014BF2  6F75               	movwf	LED_Set@pLED& (0+255),b
  5860                           
  5861                           ;LED.c: 35: switch (pLED)
  5862  014BF4  D018               	goto	l227
  5863  014BF6                     
  5864                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  5865  014BF6  0EAE               	movlw	low _PortC
  5866  014BF8  0100               	movlb	0	; () banked
  5867  014BFA  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5868  014BFC  0E01               	movlw	high _PortC
  5869  014BFE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5870  014C00  0E00               	movlw	0
  5871  014C02  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5872  014C04  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  5873  014C08  EC02  F09C         	call	_Port_SetPin	;wreg free
  5874                           
  5875                           ;LED.c: 39: break;
  5876  014C0C  0012               	return	
  5877  014C0E                     
  5878                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  5879  014C0E  0EAE               	movlw	low _PortC
  5880  014C10  0100               	movlb	0	; () banked
  5881  014C12  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5882  014C14  0E01               	movlw	high _PortC
  5883  014C16  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5884  014C18  0E01               	movlw	1
  5885  014C1A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5886  014C1C  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  5887  014C20  EC02  F09C         	call	_Port_SetPin	;wreg free
  5888                           
  5889                           ;LED.c: 43: }
  5890                           
  5891                           ;LED.c: 42: break;
  5892  014C24  0012               	return	
  5893  014C26                     l227:
  5894  014C26  0100               	movlb	0	; () banked
  5895  014C28  5175               	movf	LED_Set@pLED& (0+255),w,b
  5896                           
  5897                           ; Switch size 1, requested type "space"
  5898                           ; Number of cases is 2, Range of values is 0 to 1
  5899                           ; switch strategies available:
  5900                           ; Name         Instructions Cycles
  5901                           ; simple_byte            7     4 (average)
  5902                           ;	Chosen strategy is simple_byte
  5903  014C2A  0A00               	xorlw	0	; case 0
  5904  014C2C  B4D8               	btfsc	status,2,c
  5905  014C2E  D7E3               	goto	l228
  5906  014C30  0A01               	xorlw	1	; case 1
  5907  014C32  A4D8               	btfss	status,2,c
  5908  014C34  0012               	return	
  5909  014C36  D7EB               	goto	l230
  5910  014C38                     __end_of_LED_Set:
  5911                           	opt stack 0
  5912                           tosu	equ	0xFFF
  5913                           tosh	equ	0xFFE
  5914                           tosl	equ	0xFFD
  5915                           pclath	equ	0xFFA
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           postinc0	equ	0xFEE
  5921                           wreg	equ	0xFE8
  5922                           postdec1	equ	0xFE5
  5923                           fsr1h	equ	0xFE2
  5924                           fsr1l	equ	0xFE1
  5925                           indf2	equ	0xFDF
  5926                           postinc2	equ	0xFDE
  5927                           postdec2	equ	0xFDD
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function _MXK_Dequeue *****************
  5933 ;; Defined at:
  5934 ;;		line 153 in file "Library/MXK.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;		None
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      void 
  5941 ;; Registers used:
  5942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;Total ram usage:        0 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:   12
  5955 ;; This function calls:
  5956 ;;		Absolute function
  5957 ;;		_Motor_Step
  5958 ;; This function is called by:
  5959 ;;		_main
  5960 ;; This function uses a non-reentrant model
  5961 ;;
  5962                           
  5963                           	psect	text15
  5964  015026                     __ptext15:
  5965                           	opt stack 0
  5966  015026                     _MXK_Dequeue:
  5967                           	opt stack 18
  5968                           
  5969                           ;MXK.c: 155: if (lQueue)
  5970                           
  5971                           ;incstack = 0
  5972  015026  0100               	movlb	0	; () banked
  5973  015028  51DF               	movf	_lQueue& (0+255),w,b	;volatile
  5974  01502A  11E0               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  5975  01502C  11E1               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  5976  01502E  B4D8               	btfsc	status,2,c
  5977  015030  D00C               	goto	u13939
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;MXK.c: 156: lQueue();
  5981  015032  D801               	call	u13938
  5982  015034  D00A               	goto	u13939
  5983  015036                     u13938:
  5984  015036  0005               	push	
  5985  015038  6EFA               	movwf	pclath,c
  5986  01503A  51DF               	movf	_lQueue& (0+255),w,b	;volatile
  5987  01503C  6EFD               	movwf	tosl,c
  5988  01503E  51E0               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  5989  015040  6EFE               	movwf	tosh,c
  5990  015042  51E1               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  5991  015044  6EFF               	movwf	tosu,c
  5992  015046  50FA               	movf	pclath,w,c
  5993  015048  0012               	return		;indir
  5994  01504A                     u13939:
  5995                           
  5996                           ;MXK.c: 157: lQueue = 0;
  5997  01504A  0E00               	movlw	0
  5998  01504C  0100               	movlb	0	; () banked
  5999  01504E  6FDF               	movwf	_lQueue& (0+255),b	;volatile
  6000  015050  0E00               	movlw	0
  6001  015052  6FE0               	movwf	(_lQueue+1)& (0+255),b	;volatile
  6002  015054  0E00               	movlw	0
  6003  015056  6FE1               	movwf	(_lQueue+2)& (0+255),b	;volatile
  6004                           
  6005                           ; BSR set to: 0
  6006  015058  0012               	return		;funcret
  6007  01505A                     __end_of_MXK_Dequeue:
  6008                           	opt stack 0
  6009                           tosu	equ	0xFFF
  6010                           tosh	equ	0xFFE
  6011                           tosl	equ	0xFFD
  6012                           pclath	equ	0xFFA
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           postinc0	equ	0xFEE
  6018                           wreg	equ	0xFE8
  6019                           postdec1	equ	0xFE5
  6020                           fsr1h	equ	0xFE2
  6021                           fsr1l	equ	0xFE1
  6022                           indf2	equ	0xFDF
  6023                           postinc2	equ	0xFDE
  6024                           postdec2	equ	0xFDD
  6025                           fsr2h	equ	0xFDA
  6026                           fsr2l	equ	0xFD9
  6027                           status	equ	0xFD8
  6028                           
  6029 ;; *************** function _Motor_Step *****************
  6030 ;; Defined at:
  6031 ;;		line 75 in file "Library/Motor.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;		None
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  1    wreg      void 
  6038 ;; Registers used:
  6039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:        2 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:   11
  6052 ;; This function calls:
  6053 ;;		_MXK_Queue
  6054 ;;		_MXK_Release
  6055 ;;		_MXK_SwitchTo
  6056 ;;		_Port_SetPin
  6057 ;;		_Timer0_Restart
  6058 ;;		_Timer0_Stop
  6059 ;; This function is called by:
  6060 ;;		_Motor_Init
  6061 ;;		_Timer0_ISR
  6062 ;;		_MXK_Dequeue
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text16
  6067  0131AE                     __ptext16:
  6068                           	opt stack 0
  6069  0131AE                     _Motor_Step:
  6070                           	opt stack 0
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;Skip over the trampoline to the duplicate function for level 2
  6074  0131AE  B251               	btfsc	btemp,1,c
  6075  0131B0  EFDE  F099         	goto	i2_Motor_Step
  6076  0131B4                     _Motor_Step$intlevel0:
  6077                           	opt stack 18
  6078                           
  6079                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  6080                           
  6081                           ;incstack = 0
  6082  0131B4  0100               	movlb	0	; () banked
  6083  0131B6  EE20 F004          	lfsr	2,4
  6084  0131BA  51E8               	movf	_lMotor& (0+255),w,b
  6085  0131BC  26D9               	addwf	fsr2l,f,c
  6086  0131BE  51E9               	movf	(_lMotor+1)& (0+255),w,b
  6087  0131C0  22DA               	addwfc	fsr2h,f,c
  6088  0131C2  50DF               	movf	indf2,w,c
  6089  0131C4  EC6A  F0A7         	call	_MXK_SwitchTo
  6090  0131C8  0900               	iorlw	0
  6091  0131CA  B4D8               	btfsc	status,2,c
  6092  0131CC  D06E               	goto	l1627
  6093                           
  6094                           ;Motor.c: 78: {
  6095                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  6096  0131CE  C0E8  FFD9         	movff	_lMotor,fsr2l
  6097  0131D2  C0E9  FFDA         	movff	_lMotor+1,fsr2h
  6098  0131D6  50DE               	movf	postinc2,w,c
  6099  0131D8  10DE               	iorwf	postinc2,w,c
  6100  0131DA  B4D8               	btfsc	status,2,c
  6101  0131DC  D061               	goto	l1628
  6102                           
  6103                           ;Motor.c: 80: {
  6104                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  6105  0131DE  C0E8  FFD9         	movff	_lMotor,fsr2l
  6106  0131E2  C0E9  FFDA         	movff	_lMotor+1,fsr2h
  6107  0131E6  0E01               	movlw	1
  6108  0131E8  BEDB               	btfsc	plusw2,7,c
  6109  0131EA  D023               	goto	l1629
  6110  0131EC  0E01               	movlw	1
  6111  0131EE  50DB               	movf	plusw2,w,c
  6112  0131F0  E103               	bnz	u12160
  6113  0131F2  04DE               	decf	postinc2,w,c
  6114  0131F4  A0D8               	btfss	status,0,c
  6115  0131F6  D01D               	goto	l1629
  6116  0131F8                     u12160:
  6117                           
  6118                           ;Motor.c: 83: {
  6119                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  6120  0131F8  C0E8  FFD9         	movff	_lMotor,fsr2l
  6121  0131FC  C0E9  FFDA         	movff	_lMotor+1,fsr2h
  6122  013200  28DE               	incf	postinc2,w,c
  6123  013202  E104               	bnz	u12170
  6124  013204  0E7F               	movlw	127
  6125  013206  18DE               	xorwf	postinc2,w,c
  6126  013208  B4D8               	btfsc	status,2,c
  6127  01320A  D007               	goto	l1630
  6128  01320C                     u12170:
  6129                           
  6130                           ;Motor.c: 85: lMotor->mDelta --;
  6131  01320C  C0E8  FFD9         	movff	_lMotor,fsr2l
  6132  013210  C0E9  FFDA         	movff	_lMotor+1,fsr2h
  6133  013214  06DE               	decf	postinc2,f,c
  6134  013216  0E00               	movlw	0
  6135  013218  5ADD               	subwfb	postdec2,f,c
  6136  01321A                     l1630:
  6137                           
  6138                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  6139  01321A  0E90               	movlw	low _PortE
  6140  01321C  0100               	movlb	0	; () banked
  6141  01321E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  6142  013220  0E01               	movlw	high _PortE
  6143  013222  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6144  013224  0E00               	movlw	0
  6145  013226  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  6146  013228  0E01               	movlw	1
  6147  01322A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  6148  01322C  EC02  F09C         	call	_Port_SetPin	;wreg free
  6149                           
  6150                           ;Motor.c: 88: }
  6151  013230  D01C               	goto	l1631
  6152  013232                     l1629:
  6153                           
  6154                           ;Motor.c: 89: else
  6155                           ;Motor.c: 90: {
  6156                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  6157  013232  C0E8  FFD9         	movff	_lMotor,fsr2l
  6158  013236  C0E9  FFDA         	movff	_lMotor+1,fsr2h
  6159  01323A  04DE               	decf	postinc2,w,c
  6160  01323C  E104               	bnz	u12180
  6161  01323E  0E80               	movlw	128
  6162  013240  18DE               	xorwf	postinc2,w,c
  6163  013242  B4D8               	btfsc	status,2,c
  6164  013244  D007               	goto	l1632
  6165  013246                     u12180:
  6166                           
  6167                           ;Motor.c: 92: lMotor->mDelta ++;
  6168  013246  C0E8  FFD9         	movff	_lMotor,fsr2l
  6169  01324A  C0E9  FFDA         	movff	_lMotor+1,fsr2h
  6170  01324E  2ADE               	incf	postinc2,f,c
  6171  013250  0E00               	movlw	0
  6172  013252  22DD               	addwfc	postdec2,f,c
  6173  013254                     l1632:
  6174                           
  6175                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  6176  013254  0E90               	movlw	low _PortE
  6177  013256  0100               	movlb	0	; () banked
  6178  013258  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  6179  01325A  0E01               	movlw	high _PortE
  6180  01325C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6181  01325E  0E00               	movlw	0
  6182  013260  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  6183  013262  0E00               	movlw	0
  6184  013264  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  6185  013266  EC02  F09C         	call	_Port_SetPin	;wreg free
  6186  01326A                     l1631:
  6187                           
  6188                           ;Motor.c: 95: }
  6189                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  6190  01326A  0E90               	movlw	low _PortE
  6191  01326C  0100               	movlb	0	; () banked
  6192  01326E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  6193  013270  0E01               	movlw	high _PortE
  6194  013272  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6195  013274  0E01               	movlw	1
  6196  013276  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  6197  013278  0E01               	movlw	1
  6198  01327A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  6199  01327C  EC02  F09C         	call	_Port_SetPin	;wreg free
  6200                           
  6201                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  6202  013280  0E90               	movlw	low _PortE
  6203  013282  0100               	movlb	0	; () banked
  6204  013284  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  6205  013286  0E01               	movlw	high _PortE
  6206  013288  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  6207  01328A  0E01               	movlw	1
  6208  01328C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  6209  01328E  0E00               	movlw	0
  6210  013290  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  6211  013292  EC02  F09C         	call	_Port_SetPin	;wreg free
  6212                           
  6213                           ;Motor.c: 101: MXK_Release();
  6214  013296  ECD4  F0A9         	call	_MXK_Release	;wreg free
  6215                           
  6216                           ;Motor.c: 102: Timer0_Restart();
  6217  01329A  ECA8  F0AA         	call	_Timer0_Restart	;wreg free
  6218                           
  6219                           ;Motor.c: 103: return;
  6220  01329E  0012               	return	
  6221  0132A0                     l1628:
  6222                           
  6223                           ;Motor.c: 104: }
  6224                           ;Motor.c: 105: MXK_Release();
  6225  0132A0  ECD4  F0A9         	call	_MXK_Release	;wreg free
  6226                           
  6227                           ;Motor.c: 106: Timer0_Stop();
  6228  0132A4  ECC2  F0AA         	call	_Timer0_Stop	;wreg free
  6229                           
  6230                           ;Motor.c: 107: return;
  6231  0132A8  0012               	return	
  6232  0132AA                     l1627:
  6233                           
  6234                           ;Motor.c: 108: }
  6235                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  6236  0132AA  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
  6237  0132AE  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  6238  0132B2  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  6239  0132B6  EC93  F0AA         	call	_MXK_Queue	;wreg free
  6240  0132BA  0012               	return		;funcret
  6241  0132BC                     __end_of_Motor_Step:
  6242                           	opt stack 0
  6243                           tosu	equ	0xFFF
  6244                           tosh	equ	0xFFE
  6245                           tosl	equ	0xFFD
  6246                           pclath	equ	0xFFA
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           postinc0	equ	0xFEE
  6252                           wreg	equ	0xFE8
  6253                           postdec1	equ	0xFE5
  6254                           fsr1h	equ	0xFE2
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           plusw2	equ	0xFDB
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function _Timer0_Stop *****************
  6265 ;; Defined at:
  6266 ;;		line 89 in file "Library/Timer0.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;		None
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;		None
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		None
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;Total ram usage:        0 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    7
  6287 ;; This function calls:
  6288 ;;		Nothing
  6289 ;; This function is called by:
  6290 ;;		_Motor_Step
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text17
  6295  015584                     __ptext17:
  6296                           	opt stack 0
  6297  015584                     _Timer0_Stop:
  6298                           	opt stack 21
  6299                           
  6300                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  6301                           
  6302                           ;incstack = 0
  6303  015584  9AF2               	bcf	intcon,5,c	;volatile
  6304                           
  6305                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  6306  015586  94F2               	bcf	intcon,2,c	;volatile
  6307  015588  0012               	return		;funcret
  6308  01558A                     __end_of_Timer0_Stop:
  6309                           	opt stack 0
  6310                           tosu	equ	0xFFF
  6311                           tosh	equ	0xFFE
  6312                           tosl	equ	0xFFD
  6313                           pclath	equ	0xFFA
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           intcon	equ	0xFF2
  6319                           postinc0	equ	0xFEE
  6320                           wreg	equ	0xFE8
  6321                           postdec1	equ	0xFE5
  6322                           fsr1h	equ	0xFE2
  6323                           fsr1l	equ	0xFE1
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           plusw2	equ	0xFDB
  6328                           fsr2h	equ	0xFDA
  6329                           fsr2l	equ	0xFD9
  6330                           status	equ	0xFD8
  6331                           
  6332 ;; *************** function _Timer0_Restart *****************
  6333 ;; Defined at:
  6334 ;;		line 83 in file "Library/Timer0.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		None
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;Total ram usage:        0 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    7
  6355 ;; This function calls:
  6356 ;;		Nothing
  6357 ;; This function is called by:
  6358 ;;		_Motor_Step
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text18
  6363  015550                     __ptext18:
  6364                           	opt stack 0
  6365  015550                     _Timer0_Restart:
  6366                           	opt stack 21
  6367                           
  6368                           ;Timer0.c: 85: TMR0 = COUNTER;
  6369                           
  6370                           ;incstack = 0
  6371  015550  C031  FFD6         	movff	_COUNTER,4054	;volatile
  6372  015554  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
  6373                           
  6374                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  6375  015558  8AF2               	bsf	intcon,5,c	;volatile
  6376  01555A  0012               	return		;funcret
  6377  01555C                     __end_of_Timer0_Restart:
  6378                           	opt stack 0
  6379                           tosu	equ	0xFFF
  6380                           tosh	equ	0xFFE
  6381                           tosl	equ	0xFFD
  6382                           pclath	equ	0xFFA
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           intcon	equ	0xFF2
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           postdec1	equ	0xFE5
  6391                           fsr1h	equ	0xFE2
  6392                           fsr1l	equ	0xFE1
  6393                           indf2	equ	0xFDF
  6394                           postinc2	equ	0xFDE
  6395                           postdec2	equ	0xFDD
  6396                           plusw2	equ	0xFDB
  6397                           fsr2h	equ	0xFDA
  6398                           fsr2l	equ	0xFD9
  6399                           status	equ	0xFD8
  6400                           
  6401 ;; *************** function _MXK_SwitchTo *****************
  6402 ;; Defined at:
  6403 ;;		line 105 in file "Library/MXK.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  pModule         1    wreg     enum E6927
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;  pModule         1    7[BANK0 ] enum E6927
  6408 ;;  CUR             1    6[BANK0 ] unsigned char 
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  1    wreg      unsigned char 
  6411 ;; Registers used:
  6412 ;;		wreg, status,2, status,0, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;Total ram usage:        2 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    8
  6425 ;; This function calls:
  6426 ;;		_delay_us
  6427 ;; This function is called by:
  6428 ;;		_Motor_Step
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           	psect	text19
  6433  014ED4                     __ptext19:
  6434                           	opt stack 0
  6435  014ED4                     _MXK_SwitchTo:
  6436                           	opt stack 20
  6437                           
  6438                           ;incstack = 0
  6439                           ;MXK_SwitchTo@pModule stored from wreg
  6440  014ED4  0100               	movlb	0	; () banked
  6441  014ED6  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
  6442                           
  6443                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  6444  014ED8  5086               	movf	3974,w,c	;volatile
  6445  014EDA  0B0F               	andlw	15
  6446  014EDC  0100               	movlb	0	; () banked
  6447  014EDE  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  6451  014EE0  504B               	movf	_Bus_State,w,c
  6452  014EE2  A4D8               	btfss	status,2,c
  6453  014EE4  D002               	goto	l1730
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;MXK.c: 110: return 0;
  6457  014EE6  0E00               	movlw	0
  6458                           
  6459                           ; BSR set to: 0
  6460  014EE8  0012               	return	
  6461  014EEA                     l1730:
  6462                           
  6463                           ; BSR set to: 0
  6464                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  6465                           
  6466                           ; BSR set to: 0
  6467  014EEA  0E00               	movlw	0
  6468  014EEC  6E4B               	movwf	_Bus_State,c
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;MXK.c: 114: if (CUR != pModule)
  6472  014EEE  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  6473  014EF0  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  6474  014EF2  B4D8               	btfsc	status,2,c
  6475  014EF4  D00A               	goto	l1732
  6476                           
  6477                           ; BSR set to: 0
  6478                           ;MXK.c: 115: {
  6479                           ;MXK.c: 116: PORTG &= ~(0xF);
  6480  014EF6  0EF0               	movlw	240
  6481  014EF8  1686               	andwf	3974,f,c	;volatile
  6482                           
  6483                           ;MXK.c: 117: PORTG |= pModule;
  6484  014EFA  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  6485  014EFC  1286               	iorwf	3974,f,c	;volatile
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;MXK.c: 120: delay_us(10);
  6489  014EFE  0E00               	movlw	0
  6490  014F00  6F61               	movwf	(delay_us@us+1)& (0+255),b
  6491  014F02  0E0A               	movlw	10
  6492  014F04  6F60               	movwf	delay_us@us& (0+255),b
  6493  014F06  EC88  F0A6         	call	_delay_us	;wreg free
  6494  014F0A                     l1732:
  6495                           
  6496                           ;MXK.c: 121: }
  6497                           ;MXK.c: 122: return 1;
  6498  014F0A  0E01               	movlw	1
  6499  014F0C  0012               	return	
  6500  014F0E                     __end_of_MXK_SwitchTo:
  6501                           	opt stack 0
  6502                           tosu	equ	0xFFF
  6503                           tosh	equ	0xFFE
  6504                           tosl	equ	0xFFD
  6505                           pclath	equ	0xFFA
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           intcon	equ	0xFF2
  6511                           postinc0	equ	0xFEE
  6512                           wreg	equ	0xFE8
  6513                           postdec1	equ	0xFE5
  6514                           fsr1h	equ	0xFE2
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           plusw2	equ	0xFDB
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _MXK_Release *****************
  6525 ;; Defined at:
  6526 ;;		line 130 in file "Library/MXK.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      unsigned char 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    7
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		_Motor_Step
  6551 ;;		_main
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text20
  6556  0153A8                     __ptext20:
  6557                           	opt stack 0
  6558  0153A8                     _MXK_Release:
  6559                           	opt stack 23
  6560                           
  6561                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  6562                           
  6563                           ;incstack = 0
  6564  0153A8  0E01               	movlw	1
  6565  0153AA  6E4B               	movwf	_Bus_State,c
  6566                           
  6567                           ;MXK.c: 134: if (lQueue != 0)
  6568  0153AC  0100               	movlb	0	; () banked
  6569  0153AE  51DF               	movf	_lQueue& (0+255),w,b	;volatile
  6570  0153B0  11E0               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  6571  0153B2  11E1               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  6572  0153B4  B4D8               	btfsc	status,2,c
  6573  0153B6  D002               	goto	l1735
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;MXK.c: 135: return 1;
  6577  0153B8  0E01               	movlw	1
  6578                           
  6579                           ; BSR set to: 0
  6580  0153BA  0012               	return	
  6581  0153BC                     l1735:
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;MXK.c: 137: return 0;
  6585                           
  6586                           ; BSR set to: 0
  6587  0153BC  0E00               	movlw	0
  6588  0153BE  0012               	return	
  6589  0153C0                     __end_of_MXK_Release:
  6590                           	opt stack 0
  6591                           tosu	equ	0xFFF
  6592                           tosh	equ	0xFFE
  6593                           tosl	equ	0xFFD
  6594                           pclath	equ	0xFFA
  6595                           tblptru	equ	0xFF8
  6596                           tblptrh	equ	0xFF7
  6597                           tblptrl	equ	0xFF6
  6598                           tablat	equ	0xFF5
  6599                           intcon	equ	0xFF2
  6600                           postinc0	equ	0xFEE
  6601                           wreg	equ	0xFE8
  6602                           postdec1	equ	0xFE5
  6603                           fsr1h	equ	0xFE2
  6604                           fsr1l	equ	0xFE1
  6605                           indf2	equ	0xFDF
  6606                           postinc2	equ	0xFDE
  6607                           postdec2	equ	0xFDD
  6608                           plusw2	equ	0xFDB
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function _MXK_Queue *****************
  6614 ;; Defined at:
  6615 ;;		line 144 in file "Library/MXK.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  6618 ;;		 -> Absolute function(1), Motor_Step(1), 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6630 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;Total ram usage:        3 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    7
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		_Motor_Step
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text21
  6645  015526                     __ptext21:
  6646                           	opt stack 0
  6647  015526                     _MXK_Queue:
  6648                           	opt stack 21
  6649                           
  6650                           ;MXK.c: 146: lQueue = pCallback;
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;incstack = 0
  6654  015526  C060  F0DF         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  6655  01552A  C061  F0E0         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  6656  01552E  C062  F0E1         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  6657  015532  0012               	return		;funcret
  6658  015534                     __end_of_MXK_Queue:
  6659                           	opt stack 0
  6660                           tosu	equ	0xFFF
  6661                           tosh	equ	0xFFE
  6662                           tosl	equ	0xFFD
  6663                           pclath	equ	0xFFA
  6664                           tblptru	equ	0xFF8
  6665                           tblptrh	equ	0xFF7
  6666                           tblptrl	equ	0xFF6
  6667                           tablat	equ	0xFF5
  6668                           intcon	equ	0xFF2
  6669                           postinc0	equ	0xFEE
  6670                           wreg	equ	0xFE8
  6671                           postdec1	equ	0xFE5
  6672                           fsr1h	equ	0xFE2
  6673                           fsr1l	equ	0xFE1
  6674                           indf2	equ	0xFDF
  6675                           postinc2	equ	0xFDE
  6676                           postdec2	equ	0xFDD
  6677                           plusw2	equ	0xFDB
  6678                           fsr2h	equ	0xFDA
  6679                           fsr2l	equ	0xFD9
  6680                           status	equ	0xFD8
  6681                           
  6682 ;; *************** function _MXK_BlockSwitchTo *****************
  6683 ;; Defined at:
  6684 ;;		line 82 in file "Library/MXK.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  pModule         1    wreg     enum E6927
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  pModule         1    7[BANK0 ] enum E6927
  6689 ;;  CUR             1    6[BANK0 ] unsigned char 
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  1    wreg      unsigned char 
  6692 ;; Registers used:
  6693 ;;		wreg, status,2, status,0, cstack
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;Total ram usage:        2 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    8
  6706 ;; This function calls:
  6707 ;;		_delay_us
  6708 ;; This function is called by:
  6709 ;;		_main
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text22
  6714  014F82                     __ptext22:
  6715                           	opt stack 0
  6716  014F82                     _MXK_BlockSwitchTo:
  6717                           	opt stack 22
  6718                           
  6719                           ;incstack = 0
  6720                           ;MXK_BlockSwitchTo@pModule stored from wreg
  6721  014F82  0100               	movlb	0	; () banked
  6722  014F84  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  6723                           
  6724                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  6725  014F86  5086               	movf	3974,w,c	;volatile
  6726  014F88  0B0F               	andlw	15
  6727  014F8A  0100               	movlb	0	; () banked
  6728  014F8C  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  6729  014F8E                     
  6730                           ; BSR set to: 0
  6731                           
  6732                           ; BSR set to: 0
  6733  014F8E  504B               	movf	_Bus_State,w,c
  6734  014F90  B4D8               	btfsc	status,2,c
  6735  014F92  D7FD               	goto	l1724
  6736                           
  6737                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  6738  014F94  0E00               	movlw	0
  6739  014F96  6E4B               	movwf	_Bus_State,c
  6740                           
  6741                           ;MXK.c: 90: if (CUR != pModule)
  6742  014F98  0100               	movlb	0	; () banked
  6743  014F9A  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  6744  014F9C  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  6745  014F9E  B4D8               	btfsc	status,2,c
  6746  014FA0  D00A               	goto	l1726
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;MXK.c: 91: {
  6750                           ;MXK.c: 92: PORTG &= ~(0xF);
  6751  014FA2  0EF0               	movlw	240
  6752  014FA4  1686               	andwf	3974,f,c	;volatile
  6753                           
  6754                           ;MXK.c: 93: PORTG |= pModule;
  6755  014FA6  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  6756  014FA8  1286               	iorwf	3974,f,c	;volatile
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;MXK.c: 96: delay_us(10);
  6760  014FAA  0E00               	movlw	0
  6761  014FAC  6F61               	movwf	(delay_us@us+1)& (0+255),b
  6762  014FAE  0E0A               	movlw	10
  6763  014FB0  6F60               	movwf	delay_us@us& (0+255),b
  6764  014FB2  EC88  F0A6         	call	_delay_us	;wreg free
  6765  014FB6                     l1726:
  6766                           
  6767                           ;MXK.c: 97: }
  6768                           ;MXK.c: 98: return 1;
  6769  014FB6  0E01               	movlw	1
  6770  014FB8  0012               	return	
  6771  014FBA                     __end_of_MXK_BlockSwitchTo:
  6772                           	opt stack 0
  6773                           tosu	equ	0xFFF
  6774                           tosh	equ	0xFFE
  6775                           tosl	equ	0xFFD
  6776                           pclath	equ	0xFFA
  6777                           tblptru	equ	0xFF8
  6778                           tblptrh	equ	0xFF7
  6779                           tblptrl	equ	0xFF6
  6780                           tablat	equ	0xFF5
  6781                           intcon	equ	0xFF2
  6782                           postinc0	equ	0xFEE
  6783                           wreg	equ	0xFE8
  6784                           postdec1	equ	0xFE5
  6785                           fsr1h	equ	0xFE2
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           postdec2	equ	0xFDD
  6790                           plusw2	equ	0xFDB
  6791                           fsr2h	equ	0xFDA
  6792                           fsr2l	equ	0xFD9
  6793                           status	equ	0xFD8
  6794                           
  6795 ;; *************** function _delay_us *****************
  6796 ;; Defined at:
  6797 ;;		line 255 in file "Library/Types.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;  us              2    0[BANK0 ] unsigned short 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  u               4    2[BANK0 ] unsigned long 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2, status,0
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:        6 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    7
  6818 ;; This function calls:
  6819 ;;		Nothing
  6820 ;; This function is called by:
  6821 ;;		_MXK_BlockSwitchTo
  6822 ;;		_MXK_SwitchTo
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text23
  6827  014D10                     __ptext23:
  6828                           	opt stack 0
  6829  014D10                     _delay_us:
  6830                           	opt stack 20
  6831                           
  6832                           ;Types.c: 256: unsigned long u;
  6833                           ;Types.c: 257: while (us--) {
  6834                           
  6835                           ;incstack = 0
  6836  014D10  D018               	goto	u11050
  6837  014D12                     l13810:
  6838                           
  6839                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  6840  014D12  0E00               	movlw	0
  6841  014D14  0100               	movlb	0	; () banked
  6842  014D16  6F62               	movwf	delay_us@u& (0+255),b
  6843  014D18  0E00               	movlw	0
  6844  014D1A  6F63               	movwf	(delay_us@u+1)& (0+255),b
  6845  014D1C  0E00               	movlw	0
  6846  014D1E  6F64               	movwf	(delay_us@u+2)& (0+255),b
  6847  014D20  0E00               	movlw	0
  6848  014D22  6F65               	movwf	(delay_us@u+3)& (0+255),b
  6849  014D24                     l13812:
  6850                           
  6851                           ; BSR set to: 0
  6852  014D24  5162               	movf	delay_us@u& (0+255),w,b
  6853  014D26  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
  6854  014D28  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
  6855  014D2A  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
  6856  014D2C  A4D8               	btfss	status,2,c
  6857  014D2E  D009               	goto	u11050
  6858                           
  6859                           ; BSR set to: 0
  6860                           
  6861                           ; BSR set to: 0
  6862  014D30  F000               	nop		; ;# 
  6863  014D32  0E01               	movlw	1
  6864  014D34  0100               	movlb	0	; () banked
  6865  014D36  2762               	addwf	delay_us@u& (0+255),f,b
  6866  014D38  0E00               	movlw	0
  6867  014D3A  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
  6868  014D3C  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
  6869  014D3E  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
  6870  014D40  D7F1               	goto	l13812
  6871  014D42                     u11050:
  6872                           
  6873                           ; BSR set to: 0
  6874                           
  6875                           ; BSR set to: 0
  6876  014D42  0100               	movlb	0	; () banked
  6877  014D44  0760               	decf	delay_us@us& (0+255),f,b
  6878  014D46  A0D8               	btfss	status,0,c
  6879  014D48  0761               	decf	(delay_us@us+1)& (0+255),f,b
  6880  014D4A  2960               	incf	delay_us@us& (0+255),w,b
  6881  014D4C  E1E2               	bnz	l13810
  6882  014D4E  2961               	incf	(delay_us@us+1)& (0+255),w,b
  6883  014D50  B4D8               	btfsc	status,2,c
  6884  014D52  0012               	return	
  6885  014D54  D7DE               	goto	l832
  6886  014D56                     __end_of_delay_us:
  6887                           	opt stack 0
  6888                           tosu	equ	0xFFF
  6889                           tosh	equ	0xFFE
  6890                           tosl	equ	0xFFD
  6891                           pclath	equ	0xFFA
  6892                           tblptru	equ	0xFF8
  6893                           tblptrh	equ	0xFF7
  6894                           tblptrl	equ	0xFF6
  6895                           tablat	equ	0xFF5
  6896                           intcon	equ	0xFF2
  6897                           postinc0	equ	0xFEE
  6898                           wreg	equ	0xFE8
  6899                           postdec1	equ	0xFE5
  6900                           fsr1h	equ	0xFE2
  6901                           fsr1l	equ	0xFE1
  6902                           indf2	equ	0xFDF
  6903                           postinc2	equ	0xFDE
  6904                           postdec2	equ	0xFDD
  6905                           plusw2	equ	0xFDB
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910 ;; *************** function _LCD_Init *****************
  6911 ;; Defined at:
  6912 ;;		line 172 in file "Library/LCD.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;		None
  6915 ;; Auto vars:     Size  Location     Type
  6916 ;;  i               2   55[BANK0 ] unsigned short 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  1    wreg      void 
  6919 ;; Registers used:
  6920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;Total ram usage:        4 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:   15
  6933 ;; This function calls:
  6934 ;;		_Configure_GPIOs
  6935 ;;		_LCD_Fill
  6936 ;;		_LCD_Write
  6937 ;;		_Set_Rotation
  6938 ;;		_delay_ms
  6939 ;; This function is called by:
  6940 ;;		_main
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text24
  6945  012A7E                     __ptext24:
  6946                           	opt stack 0
  6947  012A7E                     _LCD_Init:
  6948                           	opt stack 15
  6949                           
  6950                           ;LCD.c: 174: UINT16 i;
  6951                           ;LCD.c: 175: Configure_GPIOs();
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;incstack = 0
  6955  012A7E  EC02  F0A4         	call	_Configure_GPIOs	;wreg free
  6956                           
  6957                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  6958  012A82  0E00               	movlw	0
  6959  012A84  0100               	movlb	0	; () banked
  6960  012A86  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
  6961  012A88  0E00               	movlw	0
  6962  012A8A  6F97               	movwf	LCD_Init@i& (0+255),b
  6963                           
  6964                           ; BSR set to: 0
  6965  012A8C  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  6966  012A8E  E17D               	bnz	u12390
  6967  012A90  0E59               	movlw	89
  6968  012A92  5D97               	subwf	LCD_Init@i& (0+255),w,b
  6969  012A94  B0D8               	btfsc	status,0,c
  6970  012A96  D079               	goto	u12390
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;LCD.c: 178: {
  6974                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  6975                           
  6976                           ; BSR set to: 0
  6977                           
  6978                           ; BSR set to: 0
  6979  012A98  90D8               	bcf	status,0,c
  6980  012A9A  3597               	rlcf	LCD_Init@i& (0+255),w,b
  6981  012A9C  6EF6               	movwf	tblptrl,c
  6982  012A9E  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  6983  012AA0  6EF7               	movwf	tblptrh,c
  6984  012AA2  0EB7               	movlw	low _InitList
  6985  012AA4  26F6               	addwf	tblptrl,f,c
  6986  012AA6  0EFB               	movlw	high _InitList
  6987  012AA8  22F7               	addwfc	tblptrh,f,c
  6988  012AAA                     	if	1	;There are 3 active tblptr bytes
  6989  012AAA  6AF8               	clrf	tblptru,c
  6990  012AAC  0E00               	movlw	low (__mediumconst shr (0+16))
  6991  012AAE  22F8               	addwfc	tblptru,f,c
  6992  012AB0                     	endif
  6993  012AB0  0009               	tblrd		*+
  6994  012AB2  0E80               	movlw	128
  6995  012AB4  18F5               	xorwf	tablat,w,c
  6996  012AB6  0009               	tblrd		*+
  6997  012AB8  10F5               	iorwf	tablat,w,c
  6998  012ABA  A4D8               	btfss	status,2,c
  6999  012ABC  D01D               	goto	l87
  7000                           
  7001                           ; BSR set to: 0
  7002  012ABE  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  7003  012AC0  E11B               	bnz	l15056
  7004  012AC2  0E58               	movlw	88
  7005  012AC4  5D97               	subwf	LCD_Init@i& (0+255),w,b
  7006  012AC6  B0D8               	btfsc	status,0,c
  7007  012AC8  D017               	goto	l87
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;LCD.c: 180: delay_ms(InitList[++i]);
  7011  012ACA  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  7012  012ACC  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  7013  012ACE  90D8               	bcf	status,0,c
  7014  012AD0  3597               	rlcf	LCD_Init@i& (0+255),w,b
  7015  012AD2  6EF6               	movwf	tblptrl,c
  7016  012AD4  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7017  012AD6  6EF7               	movwf	tblptrh,c
  7018  012AD8  0EB7               	movlw	low _InitList
  7019  012ADA  26F6               	addwf	tblptrl,f,c
  7020  012ADC  0EFB               	movlw	high _InitList
  7021  012ADE  22F7               	addwfc	tblptrh,f,c
  7022  012AE0                     	if	1	;There are 3 active tblptr bytes
  7023  012AE0  6AF8               	clrf	tblptru,c
  7024  012AE2  0E00               	movlw	low (__mediumconst shr (0+16))
  7025  012AE4  22F8               	addwfc	tblptru,f,c
  7026  012AE6                     	endif
  7027  012AE6  0009               	tblrd		*+
  7028  012AE8  CFF5 F060          	movff	tablat,delay_ms@ms
  7029  012AEC  000A               	tblrd		*-
  7030  012AEE  CFF5 F061          	movff	tablat,delay_ms@ms+1
  7031  012AF2  EC31  F0A4         	call	_delay_ms	;wreg free
  7032  012AF6  D043               	goto	l90
  7033  012AF8                     l87:
  7034  012AF8                     l15056:
  7035                           
  7036                           ;LCD.c: 181: else
  7037                           ;LCD.c: 182: {
  7038                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  7039  012AF8  90D8               	bcf	status,0,c
  7040  012AFA  0100               	movlb	0	; () banked
  7041  012AFC  3597               	rlcf	LCD_Init@i& (0+255),w,b
  7042  012AFE  6EF6               	movwf	tblptrl,c
  7043  012B00  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7044  012B02  6EF7               	movwf	tblptrh,c
  7045  012B04  0EB7               	movlw	low _InitList
  7046  012B06  26F6               	addwf	tblptrl,f,c
  7047  012B08  0EFB               	movlw	high _InitList
  7048  012B0A  22F7               	addwfc	tblptrh,f,c
  7049  012B0C                     	if	1	;There are 3 active tblptr bytes
  7050  012B0C  6AF8               	clrf	tblptru,c
  7051  012B0E  0E00               	movlw	low (__mediumconst shr (0+16))
  7052  012B10  22F8               	addwfc	tblptru,f,c
  7053  012B12                     	endif
  7054  012B12  0009               	tblrd		*+
  7055  012B14  0E00               	movlw	0
  7056  012B16  5EF5               	subwf	tablat,f,c
  7057  012B18  0009               	tblrd		*+
  7058  012B1A  0E01               	movlw	1
  7059  012B1C  5AF5               	subwfb	tablat,f,c
  7060  012B1E  A0D8               	btfss	status,0,c
  7061  012B20  D01B               	goto	l89
  7062                           
  7063                           ; BSR set to: 0
  7064  012B22  0E00               	movlw	0
  7065  012B24  6F63               	movwf	LCD_Write@mode& (0+255),b
  7066  012B26  90D8               	bcf	status,0,c
  7067  012B28  3597               	rlcf	LCD_Init@i& (0+255),w,b
  7068  012B2A  6EF6               	movwf	tblptrl,c
  7069  012B2C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7070  012B2E  6EF7               	movwf	tblptrh,c
  7071  012B30  0EB7               	movlw	low _InitList
  7072  012B32  26F6               	addwf	tblptrl,f,c
  7073  012B34  0EFB               	movlw	high _InitList
  7074  012B36  22F7               	addwfc	tblptrh,f,c
  7075  012B38                     	if	1	;There are 3 active tblptr bytes
  7076  012B38  6AF8               	clrf	tblptru,c
  7077  012B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  7078  012B3C  22F8               	addwfc	tblptru,f,c
  7079  012B3E                     	endif
  7080  012B3E  0009               	tblrd		*+
  7081  012B40  CFF5 F095          	movff	tablat,??_LCD_Init
  7082  012B44  0009               	tblrd		*+
  7083  012B46  CFF5 F096          	movff	tablat,??_LCD_Init+1
  7084  012B4A  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
  7085  012B4E  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
  7086  012B50  5195               	movf	??_LCD_Init& (0+255),w,b
  7087  012B52  EC5F  F0A9         	call	_LCD_Write
  7088  012B56  D013               	goto	l90
  7089  012B58                     l89:
  7090                           
  7091                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  7092  012B58  0E01               	movlw	1
  7093  012B5A  0100               	movlb	0	; () banked
  7094  012B5C  6F63               	movwf	LCD_Write@mode& (0+255),b
  7095  012B5E  90D8               	bcf	status,0,c
  7096  012B60  3597               	rlcf	LCD_Init@i& (0+255),w,b
  7097  012B62  6EF6               	movwf	tblptrl,c
  7098  012B64  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  7099  012B66  6EF7               	movwf	tblptrh,c
  7100  012B68  0EB7               	movlw	low _InitList
  7101  012B6A  26F6               	addwf	tblptrl,f,c
  7102  012B6C  0EFB               	movlw	high _InitList
  7103  012B6E  22F7               	addwfc	tblptrh,f,c
  7104  012B70                     	if	1	;There are 3 active tblptr bytes
  7105  012B70  6AF8               	clrf	tblptru,c
  7106  012B72  0E00               	movlw	low (__mediumconst shr (0+16))
  7107  012B74  22F8               	addwfc	tblptru,f,c
  7108  012B76                     	endif
  7109  012B76  0008               	tblrd		*
  7110  012B78  50F5               	movf	tablat,w,c
  7111  012B7A  EC5F  F0A9         	call	_LCD_Write
  7112  012B7E                     l90:
  7113  012B7E  0100               	movlb	0	; () banked
  7114  012B80  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  7115  012B82  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  7116                           
  7117                           ; BSR set to: 0
  7118  012B84  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  7119  012B86  E101               	bnz	l15066
  7120  012B88  D783               	goto	L5
  7121  012B8A                     u12390:
  7122  012B8A                     l15066:
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;LCD.c: 185: }
  7126                           ;LCD.c: 186: }
  7127                           ;LCD.c: 187: delay_ms(100);
  7128  012B8A  0E00               	movlw	0
  7129  012B8C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7130  012B8E  0E64               	movlw	100
  7131  012B90  6F60               	movwf	delay_ms@ms& (0+255),b
  7132  012B92  EC31  F0A4         	call	_delay_ms	;wreg free
  7133                           
  7134                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  7135  012B96  0E00               	movlw	0
  7136  012B98  0100               	movlb	0	; () banked
  7137  012B9A  6F63               	movwf	LCD_Write@mode& (0+255),b
  7138  012B9C  0E29               	movlw	41
  7139  012B9E  EC5F  F0A9         	call	_LCD_Write
  7140                           
  7141                           ;LCD.c: 189: Set_Rotation(1);
  7142  012BA2  0E01               	movlw	1
  7143  012BA4  ECE0  F09E         	call	_Set_Rotation
  7144                           
  7145                           ;LCD.c: 191: delay_ms(100);
  7146  012BA8  0E00               	movlw	0
  7147  012BAA  0100               	movlb	0	; () banked
  7148  012BAC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7149  012BAE  0E64               	movlw	100
  7150  012BB0  6F60               	movwf	delay_ms@ms& (0+255),b
  7151  012BB2  EC31  F0A4         	call	_delay_ms	;wreg free
  7152                           
  7153                           ;LCD.c: 192: LCD_Fill(0x0000);
  7154  012BB6  0E00               	movlw	0
  7155  012BB8  0100               	movlb	0	; () banked
  7156  012BBA  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  7157  012BBC  0E00               	movlw	0
  7158  012BBE  6F69               	movwf	LCD_Fill@pColour& (0+255),b
  7159  012BC0  EC1C  F0A6         	call	_LCD_Fill	;wreg free
  7160  012BC4  0012               	return		;funcret
  7161  012BC6                     __end_of_LCD_Init:
  7162                           	opt stack 0
  7163                           tosu	equ	0xFFF
  7164                           tosh	equ	0xFFE
  7165                           tosl	equ	0xFFD
  7166                           pclath	equ	0xFFA
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           intcon	equ	0xFF2
  7172                           postinc0	equ	0xFEE
  7173                           wreg	equ	0xFE8
  7174                           postdec1	equ	0xFE5
  7175                           fsr1h	equ	0xFE2
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           plusw2	equ	0xFDB
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _Set_Rotation *****************
  7186 ;; Defined at:
  7187 ;;		line 248 in file "Library/LCD.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  m               1    wreg     unsigned char 
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;  m               1    5[BANK0 ] unsigned char 
  7192 ;;  rotation        1    6[BANK0 ] unsigned char 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7203 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;Total ram usage:        2 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    9
  7209 ;; This function calls:
  7210 ;;		_LCD_Write
  7211 ;; This function is called by:
  7212 ;;		_LCD_Init
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text25
  7217  013DC0                     __ptext25:
  7218                           	opt stack 0
  7219  013DC0                     _Set_Rotation:
  7220                           	opt stack 20
  7221                           
  7222                           ;incstack = 0
  7223                           ;Set_Rotation@m stored from wreg
  7224  013DC0  0100               	movlb	0	; () banked
  7225  013DC2  6F65               	movwf	Set_Rotation@m& (0+255),b
  7226                           
  7227                           ;LCD.c: 250: UINT8 rotation = 0x00;
  7228  013DC4  0E00               	movlw	0
  7229  013DC6  0100               	movlb	0	; () banked
  7230  013DC8  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  7234  013DCA  0E00               	movlw	0
  7235  013DCC  6F63               	movwf	LCD_Write@mode& (0+255),b
  7236  013DCE  0E36               	movlw	54
  7237  013DD0  EC5F  F0A9         	call	_LCD_Write
  7238                           
  7239                           ;LCD.c: 253: rotation = (m % 4);
  7240  013DD4  0100               	movlb	0	; () banked
  7241  013DD6  5165               	movf	Set_Rotation@m& (0+255),w,b
  7242  013DD8  0B03               	andlw	3
  7243  013DDA  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  7244                           
  7245                           ;LCD.c: 255: switch(rotation)
  7246  013DDC  D02B               	goto	l117
  7247  013DDE                     
  7248                           ; BSR set to: 0
  7249                           ;LCD.c: 258: {
  7250                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  7251                           
  7252                           ; BSR set to: 0
  7253  013DDE  0E01               	movlw	1
  7254  013DE0  6F63               	movwf	LCD_Write@mode& (0+255),b
  7255  013DE2  0EC8               	movlw	200
  7256  013DE4  EC5F  F0A9         	call	_LCD_Write
  7257                           
  7258                           ;LCD.c: 260: w = 128;
  7259  013DE8  0E80               	movlw	128
  7260  013DEA  6E50               	movwf	_w,c
  7261                           
  7262                           ;LCD.c: 261: l = 128;
  7263  013DEC  0E80               	movlw	128
  7264  013DEE  6E4F               	movwf	_l,c
  7265                           
  7266                           ;LCD.c: 262: break;
  7267  013DF0  0012               	return	
  7268  013DF2                     
  7269                           ;LCD.c: 265: {
  7270                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  7271  013DF2  0E01               	movlw	1
  7272  013DF4  0100               	movlb	0	; () banked
  7273  013DF6  6F63               	movwf	LCD_Write@mode& (0+255),b
  7274  013DF8  0EA8               	movlw	168
  7275  013DFA  EC5F  F0A9         	call	_LCD_Write
  7276                           
  7277                           ;LCD.c: 267: w = 128;
  7278  013DFE  0E80               	movlw	128
  7279  013E00  6E50               	movwf	_w,c
  7280                           
  7281                           ;LCD.c: 268: l = 128;
  7282  013E02  0E80               	movlw	128
  7283  013E04  6E4F               	movwf	_l,c
  7284                           
  7285                           ;LCD.c: 269: break;
  7286  013E06  0012               	return	
  7287  013E08                     
  7288                           ;LCD.c: 272: {
  7289                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  7290  013E08  0E01               	movlw	1
  7291  013E0A  0100               	movlb	0	; () banked
  7292  013E0C  6F63               	movwf	LCD_Write@mode& (0+255),b
  7293  013E0E  0E08               	movlw	8
  7294  013E10  EC5F  F0A9         	call	_LCD_Write
  7295                           
  7296                           ;LCD.c: 274: w = 128;
  7297  013E14  0E80               	movlw	128
  7298  013E16  6E50               	movwf	_w,c
  7299                           
  7300                           ;LCD.c: 275: l = 128;
  7301  013E18  0E80               	movlw	128
  7302  013E1A  6E4F               	movwf	_l,c
  7303                           
  7304                           ;LCD.c: 276: break;
  7305  013E1C  0012               	return	
  7306  013E1E                     
  7307                           ;LCD.c: 279: {
  7308                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  7309  013E1E  0E01               	movlw	1
  7310  013E20  0100               	movlb	0	; () banked
  7311  013E22  6F63               	movwf	LCD_Write@mode& (0+255),b
  7312  013E24  0E68               	movlw	104
  7313  013E26  EC5F  F0A9         	call	_LCD_Write
  7314                           
  7315                           ;LCD.c: 281: w = 128;
  7316  013E2A  0E80               	movlw	128
  7317  013E2C  6E50               	movwf	_w,c
  7318                           
  7319                           ;LCD.c: 282: l = 128;
  7320  013E2E  0E80               	movlw	128
  7321  013E30  6E4F               	movwf	_l,c
  7322                           
  7323                           ;LCD.c: 284: }
  7324                           ;LCD.c: 285: }
  7325                           
  7326                           ;LCD.c: 283: break;
  7327  013E32  0012               	return	
  7328  013E34                     l117:
  7329  013E34  0100               	movlb	0	; () banked
  7330  013E36  5166               	movf	Set_Rotation@rotation& (0+255),w,b
  7331                           
  7332                           ; Switch size 1, requested type "space"
  7333                           ; Number of cases is 4, Range of values is 0 to 3
  7334                           ; switch strategies available:
  7335                           ; Name         Instructions Cycles
  7336                           ; simple_byte           13     7 (average)
  7337                           ;	Chosen strategy is simple_byte
  7338  013E38  0A00               	xorlw	0	; case 0
  7339  013E3A  B4D8               	btfsc	status,2,c
  7340  013E3C  D7D0               	goto	l118
  7341  013E3E  0A01               	xorlw	1	; case 1
  7342  013E40  B4D8               	btfsc	status,2,c
  7343  013E42  D7D7               	goto	l120
  7344  013E44  0A03               	xorlw	3	; case 2
  7345  013E46  B4D8               	btfsc	status,2,c
  7346  013E48  D7DF               	goto	l121
  7347  013E4A  0A01               	xorlw	1	; case 3
  7348  013E4C  A4D8               	btfss	status,2,c
  7349  013E4E  0012               	return	
  7350  013E50  D7E6               	goto	l122
  7351  013E52                     __end_of_Set_Rotation:
  7352                           	opt stack 0
  7353                           tosu	equ	0xFFF
  7354                           tosh	equ	0xFFE
  7355                           tosl	equ	0xFFD
  7356                           pclath	equ	0xFFA
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           intcon	equ	0xFF2
  7362                           postinc0	equ	0xFEE
  7363                           wreg	equ	0xFE8
  7364                           postdec1	equ	0xFE5
  7365                           fsr1h	equ	0xFE2
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           plusw2	equ	0xFDB
  7371                           fsr2h	equ	0xFDA
  7372                           fsr2l	equ	0xFD9
  7373                           status	equ	0xFD8
  7374                           
  7375 ;; *************** function _LCD_Fill *****************
  7376 ;; Defined at:
  7377 ;;		line 287 in file "Library/LCD.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;  pColour         2    9[BANK0 ] unsigned short 
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;  j               1   12[BANK0 ] unsigned char 
  7382 ;;  i               1   11[BANK0 ] unsigned char 
  7383 ;; Return value:  Size  Location     Type
  7384 ;;                  1    wreg      void 
  7385 ;; Registers used:
  7386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7387 ;; Tracked objects:
  7388 ;;		On entry : 0/0
  7389 ;;		On exit  : 0/0
  7390 ;;		Unchanged: 0/0
  7391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7392 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;Total ram usage:        4 bytes
  7397 ;; Hardware stack levels used:    1
  7398 ;; Hardware stack levels required when called:   10
  7399 ;; This function calls:
  7400 ;;		_LCD_Word_Write
  7401 ;;		_Set_Addr_Window
  7402 ;; This function is called by:
  7403 ;;		_LCD_Init
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text26
  7408  014C38                     __ptext26:
  7409                           	opt stack 0
  7410  014C38                     _LCD_Fill:
  7411                           	opt stack 19
  7412                           
  7413                           ;LCD.c: 296: UINT8 i = 0x00;
  7414                           
  7415                           ;incstack = 0
  7416  014C38  0E00               	movlw	0
  7417  014C3A  0100               	movlb	0	; () banked
  7418  014C3C  6F6B               	movwf	LCD_Fill@i& (0+255),b
  7419                           
  7420                           ;LCD.c: 297: UINT8 j = 0x00;
  7421  014C3E  0E00               	movlw	0
  7422  014C40  6F6C               	movwf	LCD_Fill@j& (0+255),b
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  7426  014C42  0E00               	movlw	0
  7427  014C44  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
  7428  014C46  0450               	decf	_w,w,c
  7429  014C48  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  7430  014C4A  044F               	decf	_l,w,c
  7431  014C4C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  7432  014C4E  0E00               	movlw	0
  7433  014C50  EC49  F09E         	call	_Set_Addr_Window
  7434                           
  7435                           ;LCD.c: 299: for (j = l; j > 0; j--)
  7436  014C54  C04F  F06C         	movff	_l,LCD_Fill@j
  7437  014C58  0100               	movlb	0	; () banked
  7438  014C5A  516C               	movf	LCD_Fill@j& (0+255),w,b
  7439  014C5C  B4D8               	btfsc	status,2,c
  7440  014C5E  0012               	return	
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;LCD.c: 300: for (i = w; i > 0; i--)
  7444                           
  7445                           ; BSR set to: 0
  7446  014C60  C050  F06B         	movff	_w,LCD_Fill@i
  7447  014C64                     l14748:
  7448                           
  7449                           ; BSR set to: 0
  7450  014C64  516B               	movf	LCD_Fill@i& (0+255),w,b
  7451  014C66  B4D8               	btfsc	status,2,c
  7452  014C68  D009               	goto	u12000
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;LCD.c: 301: LCD_Word_Write(pColour);
  7456                           
  7457                           ; BSR set to: 0
  7458                           
  7459                           ; BSR set to: 0
  7460  014C6A  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  7461  014C6E  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  7462  014C72  ECBA  F0A9         	call	_LCD_Word_Write	;wreg free
  7463  014C76  0100               	movlb	0	; () banked
  7464  014C78  076B               	decf	LCD_Fill@i& (0+255),f,b
  7465  014C7A  D7F4               	goto	l14748
  7466  014C7C                     u12000:
  7467                           
  7468                           ; BSR set to: 0
  7469                           
  7470                           ; BSR set to: 0
  7471  014C7C  076C               	decf	LCD_Fill@j& (0+255),f,b
  7472  014C7E  D7ED               	goto	L6
  7473  014C80                     __end_of_LCD_Fill:
  7474                           	opt stack 0
  7475                           tosu	equ	0xFFF
  7476                           tosh	equ	0xFFE
  7477                           tosl	equ	0xFFD
  7478                           pclath	equ	0xFFA
  7479                           tblptru	equ	0xFF8
  7480                           tblptrh	equ	0xFF7
  7481                           tblptrl	equ	0xFF6
  7482                           tablat	equ	0xFF5
  7483                           intcon	equ	0xFF2
  7484                           postinc0	equ	0xFEE
  7485                           wreg	equ	0xFE8
  7486                           postdec1	equ	0xFE5
  7487                           fsr1h	equ	0xFE2
  7488                           fsr1l	equ	0xFE1
  7489                           indf2	equ	0xFDF
  7490                           postinc2	equ	0xFDE
  7491                           postdec2	equ	0xFDD
  7492                           plusw2	equ	0xFDB
  7493                           fsr2h	equ	0xFDA
  7494                           fsr2l	equ	0xFD9
  7495                           status	equ	0xFD8
  7496                           
  7497 ;; *************** function _Configure_GPIOs *****************
  7498 ;; Defined at:
  7499 ;;		line 46 in file "Library/LCD.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;		None
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      void 
  7506 ;; Registers used:
  7507 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;Total ram usage:        0 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:   14
  7520 ;; This function calls:
  7521 ;;		_LCD_Reset
  7522 ;;		_Port_SetPinType
  7523 ;;		_SPI_Init
  7524 ;;		_SPI_MaxSpeed
  7525 ;; This function is called by:
  7526 ;;		_LCD_Init
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text27
  7531  014804                     __ptext27:
  7532                           	opt stack 0
  7533  014804                     _Configure_GPIOs:
  7534                           	opt stack 15
  7535                           
  7536                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;incstack = 0
  7540  014804  0EB8               	movlw	low _PortF
  7541  014806  0100               	movlb	0	; () banked
  7542  014808  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7543  01480A  0E01               	movlw	high _PortF
  7544  01480C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7545  01480E  0E07               	movlw	7
  7546  014810  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7547  014812  0E03               	movlw	3
  7548  014814  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7549  014816  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  7550                           
  7551                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  7552  01481A  0EB8               	movlw	low _PortF
  7553  01481C  0100               	movlb	0	; () banked
  7554  01481E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7555  014820  0E01               	movlw	high _PortF
  7556  014822  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7557  014824  0E06               	movlw	6
  7558  014826  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7559  014828  0E03               	movlw	3
  7560  01482A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7561  01482C  EC6A  F08F         	call	_Port_SetPinType	;wreg free
  7562                           
  7563                           ;LCD.c: 55: LCD_Reset();
  7564  014830  EC5A  F0A5         	call	_LCD_Reset	;wreg free
  7565                           
  7566                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  7567  014834  0EC0               	movlw	192
  7568  014836  0100               	movlb	0	; () banked
  7569  014838  6F8D               	movwf	SPI_Init@pClock& (0+255),b
  7570  01483A  0EC6               	movlw	198
  7571  01483C  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
  7572  01483E  0E2D               	movlw	45
  7573  014840  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
  7574  014842  0E00               	movlw	0
  7575  014844  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
  7576  014846  0E01               	movlw	1
  7577  014848  6F91               	movwf	SPI_Init@pChannel& (0+255),b
  7578  01484A  0E01               	movlw	1
  7579  01484C  6F92               	movwf	SPI_Init@pMode& (0+255),b
  7580  01484E  EC00  F080         	call	_SPI_Init	;wreg free
  7581                           
  7582                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  7583  014852  0E85               	movlw	low _SPI2
  7584  014854  0100               	movlb	0	; () banked
  7585  014856  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  7586  014858  0E01               	movlw	high _SPI2
  7587  01485A  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  7588  01485C  EC06  F0A3         	call	_SPI_MaxSpeed	;wreg free
  7589  014860  0012               	return		;funcret
  7590  014862                     __end_of_Configure_GPIOs:
  7591                           	opt stack 0
  7592                           tosu	equ	0xFFF
  7593                           tosh	equ	0xFFE
  7594                           tosl	equ	0xFFD
  7595                           pclath	equ	0xFFA
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           intcon	equ	0xFF2
  7601                           postinc0	equ	0xFEE
  7602                           wreg	equ	0xFE8
  7603                           postdec1	equ	0xFE5
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           plusw2	equ	0xFDB
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _SPI_MaxSpeed *****************
  7615 ;; Defined at:
  7616 ;;		line 201 in file "Library/SPI.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  7619 ;;		 -> SPI2(11), 
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;		None
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  1    wreg      void 
  7624 ;; Registers used:
  7625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7626 ;; Tracked objects:
  7627 ;;		On entry : 0/0
  7628 ;;		On exit  : 0/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;Total ram usage:        2 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    9
  7638 ;; This function calls:
  7639 ;;		_Byte_SetBit
  7640 ;;		_Byte_SetQuad
  7641 ;; This function is called by:
  7642 ;;		_Configure_GPIOs
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text28
  7647  01460C                     __ptext28:
  7648                           	opt stack 0
  7649  01460C                     _SPI_MaxSpeed:
  7650                           	opt stack 19
  7651                           
  7652                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  7653                           
  7654                           ;incstack = 0
  7655  01460C  0100               	movlb	0	; () banked
  7656  01460E  EE20 F006          	lfsr	2,6
  7657  014612  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7658  014614  26D9               	addwf	fsr2l,f,c
  7659  014616  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7660  014618  22DA               	addwfc	fsr2h,f,c
  7661  01461A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  7662  01461E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  7663  014622  0E05               	movlw	5
  7664  014624  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  7665  014626  0E00               	movlw	0
  7666  014628  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  7667  01462A  EC31  F0A5         	call	_Byte_SetBit	;wreg free
  7668                           
  7669                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  7670  01462E  0100               	movlb	0	; () banked
  7671  014630  EE20 F006          	lfsr	2,6
  7672  014634  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7673  014636  26D9               	addwf	fsr2l,f,c
  7674  014638  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7675  01463A  22DA               	addwfc	fsr2h,f,c
  7676  01463C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
  7677  014640  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
  7678  014644  0E00               	movlw	0
  7679  014646  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
  7680  014648  0E00               	movlw	0
  7681  01464A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
  7682  01464C  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
  7683                           
  7684                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  7685  014650  0100               	movlb	0	; () banked
  7686  014652  EE20 F006          	lfsr	2,6
  7687  014656  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  7688  014658  26D9               	addwf	fsr2l,f,c
  7689  01465A  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  7690  01465C  22DA               	addwfc	fsr2h,f,c
  7691  01465E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  7692  014662  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  7693  014666  0E05               	movlw	5
  7694  014668  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  7695  01466A  0E01               	movlw	1
  7696  01466C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  7697  01466E  EC31  F0A5         	call	_Byte_SetBit	;wreg free
  7698  014672  0012               	return		;funcret
  7699  014674                     __end_of_SPI_MaxSpeed:
  7700                           	opt stack 0
  7701                           tosu	equ	0xFFF
  7702                           tosh	equ	0xFFE
  7703                           tosl	equ	0xFFD
  7704                           pclath	equ	0xFFA
  7705                           tblptru	equ	0xFF8
  7706                           tblptrh	equ	0xFF7
  7707                           tblptrl	equ	0xFF6
  7708                           tablat	equ	0xFF5
  7709                           intcon	equ	0xFF2
  7710                           postinc0	equ	0xFEE
  7711                           wreg	equ	0xFE8
  7712                           postdec1	equ	0xFE5
  7713                           fsr1h	equ	0xFE2
  7714                           fsr1l	equ	0xFE1
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           plusw2	equ	0xFDB
  7719                           fsr2h	equ	0xFDA
  7720                           fsr2l	equ	0xFD9
  7721                           status	equ	0xFD8
  7722                           
  7723 ;; *************** function _LCD_Reset *****************
  7724 ;; Defined at:
  7725 ;;		line 95 in file "Library/LCD.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7743 ;;Total ram usage:        0 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:   13
  7746 ;; This function calls:
  7747 ;;		_LED_Toggle
  7748 ;;		_Reset_High
  7749 ;;		_Reset_Low
  7750 ;;		_delay_ms
  7751 ;; This function is called by:
  7752 ;;		_Configure_GPIOs
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text29
  7757  014AB4                     __ptext29:
  7758                           	opt stack 0
  7759  014AB4                     _LCD_Reset:
  7760                           	opt stack 15
  7761                           
  7762                           ;LCD.c: 97: Reset_High();
  7763                           
  7764                           ;incstack = 0
  7765  014AB4  ECEC  F0A9         	call	_Reset_High	;wreg free
  7766                           
  7767                           ;LCD.c: 98: LED_Toggle(eLED2);
  7768  014AB8  0E01               	movlw	1
  7769  014ABA  ECED  F0A6         	call	_LED_Toggle
  7770                           
  7771                           ;LCD.c: 99: delay_ms(0x80);
  7772  014ABE  0E00               	movlw	0
  7773  014AC0  0100               	movlb	0	; () banked
  7774  014AC2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7775  014AC4  0E80               	movlw	128
  7776  014AC6  6F60               	movwf	delay_ms@ms& (0+255),b
  7777  014AC8  EC31  F0A4         	call	_delay_ms	;wreg free
  7778                           
  7779                           ;LCD.c: 100: LED_Toggle(eLED2);
  7780  014ACC  0E01               	movlw	1
  7781  014ACE  ECED  F0A6         	call	_LED_Toggle
  7782                           
  7783                           ;LCD.c: 101: Reset_Low();
  7784  014AD2  ECE0  F0A9         	call	_Reset_Low	;wreg free
  7785                           
  7786                           ;LCD.c: 102: delay_ms(0x80);
  7787  014AD6  0E00               	movlw	0
  7788  014AD8  0100               	movlb	0	; () banked
  7789  014ADA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7790  014ADC  0E80               	movlw	128
  7791  014ADE  6F60               	movwf	delay_ms@ms& (0+255),b
  7792  014AE0  EC31  F0A4         	call	_delay_ms	;wreg free
  7793                           
  7794                           ;LCD.c: 103: LED_Toggle(eLED2);
  7795  014AE4  0E01               	movlw	1
  7796  014AE6  ECED  F0A6         	call	_LED_Toggle
  7797                           
  7798                           ;LCD.c: 104: Reset_High();
  7799  014AEA  ECEC  F0A9         	call	_Reset_High	;wreg free
  7800                           
  7801                           ;LCD.c: 105: delay_ms(0x80);
  7802  014AEE  0E00               	movlw	0
  7803  014AF0  0100               	movlb	0	; () banked
  7804  014AF2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7805  014AF4  0E80               	movlw	128
  7806  014AF6  6F60               	movwf	delay_ms@ms& (0+255),b
  7807  014AF8  EC31  F0A4         	call	_delay_ms	;wreg free
  7808                           
  7809                           ;LCD.c: 106: LED_Toggle(eLED2);
  7810  014AFC  0E01               	movlw	1
  7811  014AFE  ECED  F0A6         	call	_LED_Toggle
  7812  014B02  0012               	return		;funcret
  7813  014B04                     __end_of_LCD_Reset:
  7814                           	opt stack 0
  7815                           tosu	equ	0xFFF
  7816                           tosh	equ	0xFFE
  7817                           tosl	equ	0xFFD
  7818                           pclath	equ	0xFFA
  7819                           tblptru	equ	0xFF8
  7820                           tblptrh	equ	0xFF7
  7821                           tblptrl	equ	0xFF6
  7822                           tablat	equ	0xFF5
  7823                           intcon	equ	0xFF2
  7824                           postinc0	equ	0xFEE
  7825                           wreg	equ	0xFE8
  7826                           postdec1	equ	0xFE5
  7827                           fsr1h	equ	0xFE2
  7828                           fsr1l	equ	0xFE1
  7829                           indf2	equ	0xFDF
  7830                           postinc2	equ	0xFDE
  7831                           postdec2	equ	0xFDD
  7832                           plusw2	equ	0xFDB
  7833                           fsr2h	equ	0xFDA
  7834                           fsr2l	equ	0xFD9
  7835                           status	equ	0xFD8
  7836                           
  7837 ;; *************** function _delay_ms *****************
  7838 ;; Defined at:
  7839 ;;		line 240 in file "Library/Types.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;  ms              2    0[BANK0 ] unsigned short 
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;  u               4    2[BANK0 ] volatile unsigned long 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      void 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7853 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;Total ram usage:        6 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    7
  7860 ;; This function calls:
  7861 ;;		Nothing
  7862 ;; This function is called by:
  7863 ;;		_LCD_Reset
  7864 ;;		_LCD_Init
  7865 ;;		_MXK_Init
  7866 ;;		_Travel
  7867 ;;		_SteppingCCW
  7868 ;;		_SteppingCW
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           	psect	text30
  7873  014862                     __ptext30:
  7874                           	opt stack 0
  7875  014862                     _delay_ms:
  7876                           	opt stack 22
  7877                           
  7878                           ;Types.c: 242: volatile unsigned long u;
  7879                           ;Types.c: 243: while (ms--)
  7880                           
  7881                           ;incstack = 0
  7882  014862  D01B               	goto	u10920
  7883  014864                     l13670:
  7884                           
  7885                           ;Types.c: 244: {
  7886                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
  7887  014864  0E00               	movlw	0
  7888  014866  0100               	movlb	0	; () banked
  7889  014868  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
  7890  01486A  0E00               	movlw	0
  7891  01486C  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  7892  01486E  0E00               	movlw	0
  7893  014870  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  7894  014872  0E00               	movlw	0
  7895  014874  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  7896  014876                     l13672:
  7897                           
  7898                           ; BSR set to: 0
  7899  014876  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
  7900  014878  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
  7901  01487A  E10F               	bnz	l13678
  7902  01487C  0EB0               	movlw	176
  7903  01487E  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
  7904  014880  0E04               	movlw	4
  7905  014882  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
  7906  014884  B0D8               	btfsc	status,0,c
  7907  014886  D009               	goto	u10920
  7908                           
  7909                           ; BSR set to: 0
  7910                           
  7911                           ; BSR set to: 0
  7912  014888  F000               	nop		; ;# 
  7913  01488A  0E01               	movlw	1
  7914  01488C  0100               	movlb	0	; () banked
  7915  01488E  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
  7916  014890  0E00               	movlw	0
  7917  014892  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
  7918  014894  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
  7919  014896  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
  7920  014898  D7EE               	goto	l13672
  7921  01489A                     u10920:
  7922  01489A                     l13678:
  7923  01489A  0100               	movlb	0	; () banked
  7924  01489C  0760               	decf	delay_ms@ms& (0+255),f,b
  7925  01489E  A0D8               	btfss	status,0,c
  7926  0148A0  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
  7927  0148A2  2960               	incf	delay_ms@ms& (0+255),w,b
  7928  0148A4  E1DF               	bnz	l13670
  7929  0148A6  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
  7930  0148A8  A4D8               	btfss	status,2,c
  7931  0148AA  D7DC               	goto	l824
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;Types.c: 251: }
  7935                           ;Types.c: 252: }
  7936                           ;Types.c: 253: u = 0x8008;
  7937                           
  7938                           ; BSR set to: 0
  7939  0148AC  0E08               	movlw	8
  7940  0148AE  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
  7941  0148B0  0E80               	movlw	128
  7942  0148B2  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  7943  0148B4  0E00               	movlw	0
  7944  0148B6  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  7945  0148B8  0E00               	movlw	0
  7946  0148BA  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  7947                           
  7948                           ; BSR set to: 0
  7949  0148BC  0012               	return		;funcret
  7950  0148BE                     __end_of_delay_ms:
  7951                           	opt stack 0
  7952                           tosu	equ	0xFFF
  7953                           tosh	equ	0xFFE
  7954                           tosl	equ	0xFFD
  7955                           pclath	equ	0xFFA
  7956                           tblptru	equ	0xFF8
  7957                           tblptrh	equ	0xFF7
  7958                           tblptrl	equ	0xFF6
  7959                           tablat	equ	0xFF5
  7960                           intcon	equ	0xFF2
  7961                           postinc0	equ	0xFEE
  7962                           wreg	equ	0xFE8
  7963                           postdec1	equ	0xFE5
  7964                           fsr1h	equ	0xFE2
  7965                           fsr1l	equ	0xFE1
  7966                           indf2	equ	0xFDF
  7967                           postinc2	equ	0xFDE
  7968                           postdec2	equ	0xFDD
  7969                           plusw2	equ	0xFDB
  7970                           fsr2h	equ	0xFDA
  7971                           fsr2l	equ	0xFD9
  7972                           status	equ	0xFD8
  7973                           
  7974 ;; *************** function _Reset_Low *****************
  7975 ;; Defined at:
  7976 ;;		line 32 in file "Library/LCD.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;		None
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;		None
  7981 ;; Return value:  Size  Location     Type
  7982 ;;                  1    wreg      void 
  7983 ;; Registers used:
  7984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7985 ;; Tracked objects:
  7986 ;;		On entry : 0/0
  7987 ;;		On exit  : 0/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;Total ram usage:        0 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:   11
  7997 ;; This function calls:
  7998 ;;		_Port_SetPin
  7999 ;; This function is called by:
  8000 ;;		_LCD_Reset
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text31
  8005  0153C0                     __ptext31:
  8006                           	opt stack 0
  8007  0153C0                     _Reset_Low:
  8008                           	opt stack 16
  8009                           
  8010                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;incstack = 0
  8014  0153C0  0EB8               	movlw	low _PortF
  8015  0153C2  0100               	movlb	0	; () banked
  8016  0153C4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  8017  0153C6  0E01               	movlw	high _PortF
  8018  0153C8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8019  0153CA  0E06               	movlw	6
  8020  0153CC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8021  0153CE  0E01               	movlw	1
  8022  0153D0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8023  0153D2  EC02  F09C         	call	_Port_SetPin	;wreg free
  8024  0153D6  0012               	return		;funcret
  8025  0153D8                     __end_of_Reset_Low:
  8026                           	opt stack 0
  8027                           tosu	equ	0xFFF
  8028                           tosh	equ	0xFFE
  8029                           tosl	equ	0xFFD
  8030                           pclath	equ	0xFFA
  8031                           tblptru	equ	0xFF8
  8032                           tblptrh	equ	0xFF7
  8033                           tblptrl	equ	0xFF6
  8034                           tablat	equ	0xFF5
  8035                           intcon	equ	0xFF2
  8036                           postinc0	equ	0xFEE
  8037                           wreg	equ	0xFE8
  8038                           postdec1	equ	0xFE5
  8039                           fsr1h	equ	0xFE2
  8040                           fsr1l	equ	0xFE1
  8041                           indf2	equ	0xFDF
  8042                           postinc2	equ	0xFDE
  8043                           postdec2	equ	0xFDD
  8044                           plusw2	equ	0xFDB
  8045                           fsr2h	equ	0xFDA
  8046                           fsr2l	equ	0xFD9
  8047                           status	equ	0xFD8
  8048                           
  8049 ;; *************** function _Reset_High *****************
  8050 ;; Defined at:
  8051 ;;		line 36 in file "Library/LCD.c"
  8052 ;; Parameters:    Size  Location     Type
  8053 ;;		None
  8054 ;; Auto vars:     Size  Location     Type
  8055 ;;		None
  8056 ;; Return value:  Size  Location     Type
  8057 ;;                  1    wreg      void 
  8058 ;; Registers used:
  8059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8060 ;; Tracked objects:
  8061 ;;		On entry : 0/0
  8062 ;;		On exit  : 0/0
  8063 ;;		Unchanged: 0/0
  8064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8069 ;;Total ram usage:        0 bytes
  8070 ;; Hardware stack levels used:    1
  8071 ;; Hardware stack levels required when called:   11
  8072 ;; This function calls:
  8073 ;;		_Port_SetPin
  8074 ;; This function is called by:
  8075 ;;		_LCD_Reset
  8076 ;; This function uses a non-reentrant model
  8077 ;;
  8078                           
  8079                           	psect	text32
  8080  0153D8                     __ptext32:
  8081                           	opt stack 0
  8082  0153D8                     _Reset_High:
  8083                           	opt stack 16
  8084                           
  8085                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  8086                           
  8087                           ;incstack = 0
  8088  0153D8  0EB8               	movlw	low _PortF
  8089  0153DA  0100               	movlb	0	; () banked
  8090  0153DC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  8091  0153DE  0E01               	movlw	high _PortF
  8092  0153E0  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8093  0153E2  0E06               	movlw	6
  8094  0153E4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8095  0153E6  0E00               	movlw	0
  8096  0153E8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8097  0153EA  EC02  F09C         	call	_Port_SetPin	;wreg free
  8098  0153EE  0012               	return		;funcret
  8099  0153F0                     __end_of_Reset_High:
  8100                           	opt stack 0
  8101                           tosu	equ	0xFFF
  8102                           tosh	equ	0xFFE
  8103                           tosl	equ	0xFFD
  8104                           pclath	equ	0xFFA
  8105                           tblptru	equ	0xFF8
  8106                           tblptrh	equ	0xFF7
  8107                           tblptrl	equ	0xFF6
  8108                           tablat	equ	0xFF5
  8109                           intcon	equ	0xFF2
  8110                           postinc0	equ	0xFEE
  8111                           wreg	equ	0xFE8
  8112                           postdec1	equ	0xFE5
  8113                           fsr1h	equ	0xFE2
  8114                           fsr1l	equ	0xFE1
  8115                           indf2	equ	0xFDF
  8116                           postinc2	equ	0xFDE
  8117                           postdec2	equ	0xFDD
  8118                           plusw2	equ	0xFDB
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function _Init_Timer0 *****************
  8124 ;; Defined at:
  8125 ;;		line 68 in file "main.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;		None
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;		None
  8130 ;; Return value:  Size  Location     Type
  8131 ;;                  2  2108[None  ] int 
  8132 ;; Registers used:
  8133 ;;		None
  8134 ;; Tracked objects:
  8135 ;;		On entry : 0/0
  8136 ;;		On exit  : 0/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;Total ram usage:        0 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:    7
  8146 ;; This function calls:
  8147 ;;		Nothing
  8148 ;; This function is called by:
  8149 ;;		_main
  8150 ;; This function uses a non-reentrant model
  8151 ;;
  8152                           
  8153                           	psect	text33
  8154  0153F0                     __ptext33:
  8155                           	opt stack 0
  8156  0153F0                     _Init_Timer0:
  8157                           	opt stack 23
  8158                           
  8159                           ;main.c: 70: T0CONbits.TMR0ON = 1;
  8160                           
  8161                           ;incstack = 0
  8162  0153F0  8ED5               	bsf	4053,7,c	;volatile
  8163                           
  8164                           ;main.c: 71: T0CONbits.T08BIT = 1;
  8165  0153F2  8CD5               	bsf	4053,6,c	;volatile
  8166                           
  8167                           ;main.c: 72: T0CONbits.T0CS=0;
  8168  0153F4  9AD5               	bcf	4053,5,c	;volatile
  8169                           
  8170                           ;main.c: 73: T0CONbits.T0SE=0;
  8171  0153F6  98D5               	bcf	4053,4,c	;volatile
  8172                           
  8173                           ;main.c: 74: T0CONbits.PSA=0;
  8174  0153F8  96D5               	bcf	4053,3,c	;volatile
  8175                           
  8176                           ;main.c: 75: T0CONbits.T0PS2=1;
  8177  0153FA  84D5               	bsf	4053,2,c	;volatile
  8178                           
  8179                           ;main.c: 76: T0CONbits.T0PS1=1;
  8180  0153FC  82D5               	bsf	4053,1,c	;volatile
  8181                           
  8182                           ;main.c: 77: T0CONbits.T0PS0=1;
  8183  0153FE  80D5               	bsf	4053,0,c	;volatile
  8184                           
  8185                           ;main.c: 79: INTCONbits.TMR0IE = 1;
  8186  015400  8AF2               	bsf	intcon,5,c	;volatile
  8187                           
  8188                           ;main.c: 80: INTCONbits.PEIE = 1;
  8189  015402  8CF2               	bsf	intcon,6,c	;volatile
  8190                           
  8191                           ;main.c: 81: INTCONbits.GIE = 1;
  8192  015404  8EF2               	bsf	intcon,7,c	;volatile
  8193  015406  0012               	return		;funcret
  8194  015408                     __end_of_Init_Timer0:
  8195                           	opt stack 0
  8196                           tosu	equ	0xFFF
  8197                           tosh	equ	0xFFE
  8198                           tosl	equ	0xFFD
  8199                           pclath	equ	0xFFA
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           intcon	equ	0xFF2
  8205                           postinc0	equ	0xFEE
  8206                           wreg	equ	0xFE8
  8207                           postdec1	equ	0xFE5
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           plusw2	equ	0xFDB
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function _Init_Pos_Array *****************
  8219 ;; Defined at:
  8220 ;;		line 190 in file "dans.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;		None
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;  j               2   88[BANK0 ] int 
  8225 ;;  i               2   86[BANK0 ] int 
  8226 ;;  position       40   46[BANK0 ] short [5][4]
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      void 
  8229 ;; Registers used:
  8230 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;Total ram usage:       46 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:   13
  8243 ;; This function calls:
  8244 ;;		_Console_Render
  8245 ;;		___wmul
  8246 ;;		_printf
  8247 ;; This function is called by:
  8248 ;;		_main
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           	psect	text34
  8253  01367E                     __ptext34:
  8254                           	opt stack 0
  8255  01367E                     _Init_Pos_Array:
  8256                           	opt stack 17
  8257                           
  8258                           ;dans.c: 191: short position[4][5] =
  8259                           ;dans.c: 192: {{0,0,0,0,0},
  8260                           ;dans.c: 193: {0,0,0,0,0},
  8261                           ;dans.c: 194: {0,0,0,0,0},
  8262                           ;dans.c: 195: {0,0,0,0,0}
  8263                           ;dans.c: 196: };
  8264                           
  8265                           ;incstack = 0
  8266  01367E  EE22  F000         	lfsr	2,Init_Pos_Array@F7084
  8267  013682  EE10  F08E         	lfsr	1,Init_Pos_Array@position
  8268  013686  0E27               	movlw	39
  8269  013688                     u12761:
  8270  013688  CFDB FFE3          	movff	plusw2,plusw1
  8271  01368C  06E8               	decf	wreg,f,c
  8272  01368E  E2FC               	bc	u12761
  8273                           
  8274                           ;dans.c: 198: for (int i = 0; i < 4; i++){
  8275  013690  0E00               	movlw	0
  8276  013692  0100               	movlb	0	; () banked
  8277  013694  6FB7               	movwf	(Init_Pos_Array@i+1)& (0+255),b
  8278  013696  0E00               	movlw	0
  8279  013698  6FB6               	movwf	Init_Pos_Array@i& (0+255),b
  8280  01369A                     l15480:
  8281                           
  8282                           ; BSR set to: 0
  8283  01369A  BFB7               	btfsc	(Init_Pos_Array@i+1)& (0+255),7,b
  8284  01369C  D006               	goto	l2334
  8285  01369E  51B7               	movf	(Init_Pos_Array@i+1)& (0+255),w,b
  8286  0136A0  E151               	bnz	l2338
  8287  0136A2  0E04               	movlw	4
  8288  0136A4  5DB6               	subwf	Init_Pos_Array@i& (0+255),w,b
  8289  0136A6  B0D8               	btfsc	status,0,c
  8290  0136A8  0012               	return	
  8291  0136AA                     l2334:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;dans.c: 199: for (int j = 0; j < 5; j++)
  8295                           
  8296                           ; BSR set to: 0
  8297  0136AA  0E00               	movlw	0
  8298  0136AC  6FB9               	movwf	(Init_Pos_Array@j+1)& (0+255),b
  8299  0136AE  0E00               	movlw	0
  8300  0136B0  6FB8               	movwf	Init_Pos_Array@j& (0+255),b
  8301  0136B2                     l15486:
  8302                           
  8303                           ; BSR set to: 0
  8304  0136B2  BFB9               	btfsc	(Init_Pos_Array@j+1)& (0+255),7,b
  8305  0136B4  D006               	goto	l2336
  8306  0136B6  51B9               	movf	(Init_Pos_Array@j+1)& (0+255),w,b
  8307  0136B8  E13B               	bnz	l15496
  8308  0136BA  0E05               	movlw	5
  8309  0136BC  5DB8               	subwf	Init_Pos_Array@j& (0+255),w,b
  8310  0136BE  B0D8               	btfsc	status,0,c
  8311  0136C0  D037               	goto	u12790
  8312  0136C2                     l2336:
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;dans.c: 200: {
  8316                           ;dans.c: 201: printf("%c",(char)35);
  8317                           
  8318                           ; BSR set to: 0
  8319  0136C2  0EFC               	movlw	low STR_1
  8320  0136C4  6F75               	movwf	printf@f& (0+255),b
  8321  0136C6  0EFF               	movlw	high STR_1
  8322  0136C8  6F76               	movwf	(printf@f+1)& (0+255),b
  8323  0136CA  0E00               	movlw	0
  8324  0136CC  6F78               	movwf	(?_printf+3)& (0+255),b
  8325  0136CE  0E23               	movlw	35
  8326  0136D0  6F77               	movwf	(?_printf+2)& (0+255),b
  8327  0136D2  EC39  F093         	call	_printf	;wreg free
  8328                           
  8329                           ;dans.c: 202: printf("%d\t", position[i][j]);
  8330  0136D6  0EF8               	movlw	low STR_19
  8331  0136D8  0100               	movlb	0	; () banked
  8332  0136DA  6F75               	movwf	printf@f& (0+255),b
  8333  0136DC  0EFF               	movlw	high STR_19
  8334  0136DE  6F76               	movwf	(printf@f+1)& (0+255),b
  8335  0136E0  C0B6  F060         	movff	Init_Pos_Array@i,___wmul@multiplier
  8336  0136E4  C0B7  F061         	movff	Init_Pos_Array@i+1,___wmul@multiplier+1
  8337  0136E8  0E00               	movlw	0
  8338  0136EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8339  0136EC  0E0A               	movlw	10
  8340  0136EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8341  0136F0  ECED  F0A8         	call	___wmul	;wreg free
  8342  0136F4  0E8E               	movlw	low Init_Pos_Array@position
  8343  0136F6  0100               	movlb	0	; () banked
  8344  0136F8  6F8C               	movwf	??_Init_Pos_Array& (0+255),b
  8345  0136FA  0E00               	movlw	high Init_Pos_Array@position
  8346  0136FC  6F8D               	movwf	(??_Init_Pos_Array+1)& (0+255),b
  8347  0136FE  5160               	movf	?___wmul& (0+255),w,b
  8348  013700  278C               	addwf	??_Init_Pos_Array& (0+255),f,b
  8349  013702  5161               	movf	(?___wmul+1)& (0+255),w,b
  8350  013704  238D               	addwfc	(??_Init_Pos_Array+1)& (0+255),f,b
  8351  013706  90D8               	bcf	status,0,c
  8352  013708  35B8               	rlcf	Init_Pos_Array@j& (0+255),w,b
  8353  01370A  6ED9               	movwf	fsr2l,c
  8354  01370C  35B9               	rlcf	(Init_Pos_Array@j+1)& (0+255),w,b
  8355  01370E  6EDA               	movwf	fsr2h,c
  8356  013710  518C               	movf	??_Init_Pos_Array& (0+255),w,b
  8357  013712  26D9               	addwf	fsr2l,f,c
  8358  013714  518D               	movf	(??_Init_Pos_Array+1)& (0+255),w,b
  8359  013716  22DA               	addwfc	fsr2h,f,c
  8360  013718  CFDE F077          	movff	postinc2,?_printf+2
  8361  01371C  CFDD F078          	movff	postdec2,?_printf+3
  8362  013720  EC39  F093         	call	_printf	;wreg free
  8363                           
  8364                           ;dans.c: 203: Console_Render();
  8365  013724  EC8F  F08E         	call	_Console_Render	;wreg free
  8366  013728  0100               	movlb	0	; () banked
  8367  01372A  4BB8               	infsnz	Init_Pos_Array@j& (0+255),f,b
  8368  01372C  2BB9               	incf	(Init_Pos_Array@j+1)& (0+255),f,b
  8369  01372E  D7C1               	goto	l15486
  8370  013730                     u12790:
  8371  013730                     l15496:
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;dans.c: 204: }
  8375                           ;dans.c: 205: printf("\n");
  8376  013730  0ED0               	movlw	low (STR_13+14)
  8377  013732  6F75               	movwf	printf@f& (0+255),b
  8378  013734  0EFF               	movlw	high (STR_13+14)
  8379  013736  6F76               	movwf	(printf@f+1)& (0+255),b
  8380  013738  EC39  F093         	call	_printf	;wreg free
  8381  01373C  0100               	movlb	0	; () banked
  8382  01373E  4BB6               	infsnz	Init_Pos_Array@i& (0+255),f,b
  8383  013740  2BB7               	incf	(Init_Pos_Array@i+1)& (0+255),f,b
  8384  013742  D7AB               	goto	l15480
  8385  013744                     l2338:
  8386                           
  8387                           ; BSR set to: 0
  8388  013744  0012               	return		;funcret
  8389  013746                     __end_of_Init_Pos_Array:
  8390                           	opt stack 0
  8391                           tosu	equ	0xFFF
  8392                           tosh	equ	0xFFE
  8393                           tosl	equ	0xFFD
  8394                           pclath	equ	0xFFA
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           intcon	equ	0xFF2
  8400                           postinc0	equ	0xFEE
  8401                           wreg	equ	0xFE8
  8402                           postdec1	equ	0xFE5
  8403                           plusw1	equ	0xFE3
  8404                           fsr1h	equ	0xFE2
  8405                           fsr1l	equ	0xFE1
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           plusw2	equ	0xFDB
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function _printf *****************
  8415 ;; Defined at:
  8416 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  8419 ;;		 -> STR_27(10), STR_26(3), STR_25(24), STR_24(3), 
  8420 ;;		 -> STR_23(11), STR_22(3), STR_21(3), STR_20(2), 
  8421 ;;		 -> STR_19(4), STR_18(3), STR_17(2), STR_16(5), 
  8422 ;;		 -> STR_15(39), STR_14(42), STR_13(16), STR_12(3), 
  8423 ;;		 -> STR_11(21), STR_10(3), STR_9(19), STR_8(28), 
  8424 ;;		 -> STR_7(20), STR_6(3), STR_5(17), STR_4(12), 
  8425 ;;		 -> STR_3(3), STR_2(19), STR_1(3), 
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  tmpval          4    0        struct .
  8428 ;;  cp              3    0        PTR const unsigned char 
  8429 ;;  val             2   30[BANK0 ] unsigned int 
  8430 ;;  ap              2   28[BANK0 ] PTR void [1]
  8431 ;;		 -> ?_printf(2), 
  8432 ;;  len             2    0        unsigned int 
  8433 ;;  c               1   32[BANK0 ] char 
  8434 ;;  prec            1   27[BANK0 ] char 
  8435 ;;  flag            1   26[BANK0 ] unsigned char 
  8436 ;; Return value:  Size  Location     Type
  8437 ;;                  2   21[BANK0 ] int 
  8438 ;; Registers used:
  8439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8440 ;; Tracked objects:
  8441 ;;		On entry : 0/0
  8442 ;;		On exit  : 0/0
  8443 ;;		Unchanged: 0/0
  8444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8445 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8449 ;;Total ram usage:       12 bytes
  8450 ;; Hardware stack levels used:    1
  8451 ;; Hardware stack levels required when called:   12
  8452 ;; This function calls:
  8453 ;;		___lwdiv
  8454 ;;		___lwmod
  8455 ;;		_putch
  8456 ;; This function is called by:
  8457 ;;		_main
  8458 ;;		_Init_Pos_Array
  8459 ;;		_Sensor_Observe
  8460 ;;		_Closest_Object
  8461 ;;		_pop
  8462 ;;		_push
  8463 ;;		_giveID
  8464 ;;		_Travel
  8465 ;;		_Find_Flag
  8466 ;;		_Move_ADC_To
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           	psect	text35
  8471  012672                     __ptext35:
  8472                           	opt stack 0
  8473  012672                     _printf:
  8474                           	opt stack 18
  8475                           
  8476                           ;doprnt.c: 466: va_list ap;
  8477                           ;doprnt.c: 499: signed char c;
  8478                           ;doprnt.c: 506: signed char prec;
  8479                           ;doprnt.c: 508: unsigned char flag;
  8480                           ;doprnt.c: 523: union {
  8481                           ;doprnt.c: 524: unsigned long vd;
  8482                           ;doprnt.c: 525: double integ;
  8483                           ;doprnt.c: 526: } tmpval;
  8484                           ;doprnt.c: 528: unsigned int val;
  8485                           ;doprnt.c: 529: unsigned len;
  8486                           ;doprnt.c: 530: const char * cp;
  8487                           ;doprnt.c: 533: *ap = __va_start();
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;incstack = 0
  8491  012672  0E77               	movlw	low (?_printf+2)
  8492  012674  0100               	movlb	0	; () banked
  8493  012676  6F7C               	movwf	printf@ap& (0+255),b
  8494  012678  0E00               	movlw	high (?_printf+2)
  8495  01267A  6F7D               	movwf	(printf@ap+1)& (0+255),b
  8496                           
  8497                           ;doprnt.c: 536: while(c = *f++) {
  8498  01267C  D09E               	goto	u12250
  8499  01267E                     
  8500                           ; BSR set to: 0
  8501                           ;doprnt.c: 538: if(c != '%')
  8502                           
  8503                           ; BSR set to: 0
  8504  01267E  0E25               	movlw	37
  8505  012680  1980               	xorwf	printf@c& (0+255),w,b
  8506  012682  B4D8               	btfsc	status,2,c
  8507  012684  D004               	goto	l2407
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;doprnt.c: 540: {
  8511                           ;doprnt.c: 541: (putch(c) );
  8512  012686  5180               	movf	printf@c& (0+255),w,b
  8513  012688  EC9A  F0AA         	call	_putch
  8514                           
  8515                           ;doprnt.c: 542: continue;
  8516  01268C  D096               	goto	u12250
  8517  01268E                     l2407:
  8518                           
  8519                           ;doprnt.c: 543: }
  8520                           ;doprnt.c: 548: flag = 0;
  8521  01268E  0E00               	movlw	0
  8522  012690  0100               	movlb	0	; () banked
  8523  012692  6F7A               	movwf	printf@flag& (0+255),b
  8524                           
  8525                           ;doprnt.c: 635: switch(c = *f++) {
  8526  012694  D00E               	goto	l2408
  8527  012696                     
  8528                           ; BSR set to: 0
  8529                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8530                           
  8531                           ; BSR set to: 0
  8532  012696  C07C  FFD9         	movff	printf@ap,fsr2l
  8533  01269A  C07D  FFDA         	movff	printf@ap+1,fsr2h
  8534  01269E  50DF               	movf	indf2,w,c
  8535  0126A0  6F80               	movwf	printf@c& (0+255),b
  8536                           
  8537                           ; BSR set to: 0
  8538  0126A2  0E02               	movlw	2
  8539  0126A4  277C               	addwf	printf@ap& (0+255),f,b
  8540  0126A6  0E00               	movlw	0
  8541  0126A8  237D               	addwfc	(printf@ap+1)& (0+255),f,b
  8542  0126AA                     
  8543                           ; BSR set to: 0
  8544                           ;doprnt.c: 809: (putch(c) );
  8545                           
  8546                           ; BSR set to: 0
  8547  0126AA  5180               	movf	printf@c& (0+255),w,b
  8548  0126AC  EC9A  F0AA         	call	_putch
  8549                           
  8550                           ;doprnt.c: 810: continue;
  8551  0126B0  D084               	goto	u12250
  8552  0126B2                     l2408:
  8553  0126B2  C075  FFF6         	movff	printf@f,tblptrl
  8554  0126B6  C076  FFF7         	movff	printf@f+1,tblptrh
  8555  0126BA  0100               	movlb	0	; () banked
  8556  0126BC  4B75               	infsnz	printf@f& (0+255),f,b
  8557  0126BE  2B76               	incf	(printf@f+1)& (0+255),f,b
  8558  0126C0                     	if	0	;tblptru may be non-zero
  8559  0126C0                     	endif
  8560  0126C0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8561  0126C0  0E00               	movlw	low (__mediumconst shr (0+16))
  8562  0126C2  6EF8               	movwf	tblptru,c
  8563  0126C4                     	endif
  8564  0126C4  0008               	tblrd		*
  8565  0126C6  CFF5 F080          	movff	tablat,printf@c
  8566  0126CA  5180               	movf	printf@c& (0+255),w,b
  8567                           
  8568                           ; Switch size 1, requested type "space"
  8569                           ; Number of cases is 4, Range of values is 0 to 105
  8570                           ; switch strategies available:
  8571                           ; Name         Instructions Cycles
  8572                           ; simple_byte           13     7 (average)
  8573                           ;	Chosen strategy is simple_byte
  8574  0126CC  0A00               	xorlw	0	; case 0
  8575  0126CE  B4D8               	btfsc	status,2,c
  8576  0126D0  0012               	return	
  8577  0126D2  0A63               	xorlw	99	; case 99
  8578  0126D4  B4D8               	btfsc	status,2,c
  8579  0126D6  D7DF               	goto	l2414
  8580  0126D8  0A07               	xorlw	7	; case 100
  8581  0126DA  B4D8               	btfsc	status,2,c
  8582  0126DC  D003               	goto	l2413
  8583  0126DE  0A0D               	xorlw	13	; case 105
  8584  0126E0  A4D8               	btfss	status,2,c
  8585  0126E2  D7E3               	goto	l2415
  8586  0126E4                     l2413:
  8587                           
  8588                           ;doprnt.c: 1253: {
  8589                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8590                           
  8591                           ; BSR set to: 0
  8592  0126E4  C07C  FFD9         	movff	printf@ap,fsr2l
  8593  0126E8  C07D  FFDA         	movff	printf@ap+1,fsr2h
  8594  0126EC  CFDE F07E          	movff	postinc2,printf@val
  8595  0126F0  CFDD F07F          	movff	postdec2,printf@val+1
  8596  0126F4  0E02               	movlw	2
  8597  0126F6  0100               	movlb	0	; () banked
  8598  0126F8  277C               	addwf	printf@ap& (0+255),f,b
  8599  0126FA  0E00               	movlw	0
  8600  0126FC  237D               	addwfc	(printf@ap+1)& (0+255),f,b
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;doprnt.c: 1261: if((int)val < 0) {
  8604  0126FE  AF7F               	btfss	(printf@val+1)& (0+255),7,b
  8605  012700  D006               	goto	l2416
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;doprnt.c: 1262: flag |= 0x03;
  8609  012702  0E03               	movlw	3
  8610  012704  137A               	iorwf	printf@flag& (0+255),f,b
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;doprnt.c: 1263: val = -val;
  8614  012706  6D7E               	negf	printf@val& (0+255),b
  8615  012708  1F7F               	comf	(printf@val+1)& (0+255),f,b
  8616  01270A  B0D8               	btfsc	status,0,c
  8617  01270C  2B7F               	incf	(printf@val+1)& (0+255),f,b
  8618  01270E                     l2416:
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;doprnt.c: 1264: }
  8622                           ;doprnt.c: 1266: }
  8623                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8624                           
  8625                           ; BSR set to: 0
  8626  01270E  0E01               	movlw	1
  8627  012710  6F80               	movwf	printf@c& (0+255),b
  8628  012712                     l14942:
  8629                           
  8630                           ; BSR set to: 0
  8631  012712  0E05               	movlw	5
  8632  012714  1980               	xorwf	printf@c& (0+255),w,b
  8633  012716  B4D8               	btfsc	status,2,c
  8634  012718  D015               	goto	u12230
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;doprnt.c: 1306: if(val < dpowers[c])
  8638                           
  8639                           ; BSR set to: 0
  8640                           
  8641                           ; BSR set to: 0
  8642  01271A  5180               	movf	printf@c& (0+255),w,b
  8643  01271C  0D02               	mullw	2
  8644  01271E  0E89               	movlw	low _dpowers
  8645  012720  24F3               	addwf	prodl,w,c
  8646  012722  6EF6               	movwf	tblptrl,c
  8647  012724  0EFC               	movlw	high _dpowers
  8648  012726  20F4               	addwfc	prodh,w,c
  8649  012728  6EF7               	movwf	tblptrh,c
  8650  01272A                     	if	1	;There are 3 active tblptr bytes
  8651  01272A  6AF8               	clrf	tblptru,c
  8652  01272C  0E00               	movlw	low (__mediumconst shr (0+16))
  8653  01272E  22F8               	addwfc	tblptru,f,c
  8654  012730                     	endif
  8655  012730  0009               	tblrd		*+
  8656  012732  50F5               	movf	tablat,w,c
  8657  012734  5D7E               	subwf	printf@val& (0+255),w,b
  8658  012736  0009               	tblrd		*+
  8659  012738  50F5               	movf	tablat,w,c
  8660  01273A  597F               	subwfb	(printf@val+1)& (0+255),w,b
  8661  01273C  A0D8               	btfss	status,0,c
  8662  01273E  D002               	goto	u12230
  8663                           
  8664                           ; BSR set to: 0
  8665                           
  8666                           ; BSR set to: 0
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;doprnt.c: 1307: break;
  8670  012740  2B80               	incf	printf@c& (0+255),f,b
  8671  012742  D7E7               	goto	l14942
  8672  012744                     u12230:
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;doprnt.c: 1422: {
  8676                           ;doprnt.c: 1438: if(flag & 0x03)
  8677                           
  8678                           ; BSR set to: 0
  8679  012744  C07A  F079         	movff	printf@flag,??_printf
  8680  012748  0E03               	movlw	3
  8681  01274A  1779               	andwf	??_printf& (0+255),f,b
  8682  01274C  B4D8               	btfsc	status,2,c
  8683  01274E  D003               	goto	l2420
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;doprnt.c: 1439: (putch('-') );
  8687  012750  0E2D               	movlw	45
  8688  012752  EC9A  F0AA         	call	_putch
  8689  012756                     l2420:
  8690                           
  8691                           ;doprnt.c: 1469: }
  8692                           ;doprnt.c: 1472: prec = c;
  8693  012756  C080  F07B         	movff	printf@c,printf@prec
  8694                           
  8695                           ;doprnt.c: 1474: while(prec--) {
  8696  01275A  D02A               	goto	l2421
  8697  01275C                     
  8698                           ;doprnt.c: 1478: {
  8699                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8700  01275C  0100               	movlb	0	; () banked
  8701  01275E  517B               	movf	printf@prec& (0+255),w,b
  8702  012760  0D02               	mullw	2
  8703  012762  0E89               	movlw	low _dpowers
  8704  012764  24F3               	addwf	prodl,w,c
  8705  012766  6EF6               	movwf	tblptrl,c
  8706  012768  0EFC               	movlw	high _dpowers
  8707  01276A  20F4               	addwfc	prodh,w,c
  8708  01276C  6EF7               	movwf	tblptrh,c
  8709  01276E                     	if	1	;There are 3 active tblptr bytes
  8710  01276E  6AF8               	clrf	tblptru,c
  8711  012770  0E00               	movlw	low (__mediumconst shr (0+16))
  8712  012772  22F8               	addwfc	tblptru,f,c
  8713  012774                     	endif
  8714  012774  0009               	tblrd		*+
  8715  012776  CFF5 F062          	movff	tablat,___lwdiv@divisor
  8716  01277A  000A               	tblrd		*-
  8717  01277C  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  8718  012780  C07E  F060         	movff	printf@val,___lwdiv@dividend
  8719  012784  C07F  F061         	movff	printf@val+1,___lwdiv@dividend+1
  8720  012788  EC07  F0A5         	call	___lwdiv	;wreg free
  8721  01278C  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  8722  012790  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  8723  012794  0E00               	movlw	0
  8724  012796  0100               	movlb	0	; () banked
  8725  012798  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  8726  01279A  0E0A               	movlw	10
  8727  01279C  6F69               	movwf	___lwmod@divisor& (0+255),b
  8728  01279E  ECAB  F0A6         	call	___lwmod	;wreg free
  8729  0127A2  0100               	movlb	0	; () banked
  8730  0127A4  5167               	movf	?___lwmod& (0+255),w,b
  8731  0127A6  0F30               	addlw	48
  8732  0127A8  6F80               	movwf	printf@c& (0+255),b
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;doprnt.c: 1523: }
  8736                           ;doprnt.c: 1524: (putch(c) );
  8737  0127AA  5180               	movf	printf@c& (0+255),w,b
  8738  0127AC  EC9A  F0AA         	call	_putch
  8739  0127B0                     l2421:
  8740  0127B0  0100               	movlb	0	; () banked
  8741  0127B2  077B               	decf	printf@prec& (0+255),f,b
  8742  0127B4  297B               	incf	printf@prec& (0+255),w,b
  8743  0127B6  A4D8               	btfss	status,2,c
  8744  0127B8  D7D1               	goto	l2422
  8745  0127BA                     u12250:
  8746                           
  8747                           ; BSR set to: 0
  8748                           
  8749                           ; BSR set to: 0
  8750  0127BA  C075  FFF6         	movff	printf@f,tblptrl
  8751  0127BE  C076  FFF7         	movff	printf@f+1,tblptrh
  8752  0127C2  0100               	movlb	0	; () banked
  8753  0127C4  4B75               	infsnz	printf@f& (0+255),f,b
  8754  0127C6  2B76               	incf	(printf@f+1)& (0+255),f,b
  8755  0127C8                     	if	0	;tblptru may be non-zero
  8756  0127C8                     	endif
  8757  0127C8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8758  0127C8  0E00               	movlw	low (__mediumconst shr (0+16))
  8759  0127CA  6EF8               	movwf	tblptru,c
  8760  0127CC                     	endif
  8761  0127CC  0008               	tblrd		*
  8762  0127CE  CFF5 F080          	movff	tablat,printf@c
  8763  0127D2  5180               	movf	printf@c& (0+255),w,b
  8764  0127D4  B4D8               	btfsc	status,2,c
  8765  0127D6  0012               	return	
  8766  0127D8  D752               	goto	l2406
  8767  0127DA                     __end_of_printf:
  8768                           	opt stack 0
  8769                           tosu	equ	0xFFF
  8770                           tosh	equ	0xFFE
  8771                           tosl	equ	0xFFD
  8772                           pclath	equ	0xFFA
  8773                           tblptru	equ	0xFF8
  8774                           tblptrh	equ	0xFF7
  8775                           tblptrl	equ	0xFF6
  8776                           tablat	equ	0xFF5
  8777                           prodh	equ	0xFF4
  8778                           prodl	equ	0xFF3
  8779                           intcon	equ	0xFF2
  8780                           postinc0	equ	0xFEE
  8781                           wreg	equ	0xFE8
  8782                           postdec1	equ	0xFE5
  8783                           plusw1	equ	0xFE3
  8784                           fsr1h	equ	0xFE2
  8785                           fsr1l	equ	0xFE1
  8786                           indf2	equ	0xFDF
  8787                           postinc2	equ	0xFDE
  8788                           postdec2	equ	0xFDD
  8789                           plusw2	equ	0xFDB
  8790                           fsr2h	equ	0xFDA
  8791                           fsr2l	equ	0xFD9
  8792                           status	equ	0xFD8
  8793                           
  8794 ;; *************** function _putch *****************
  8795 ;; Defined at:
  8796 ;;		line 454 in file "Library/Console.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;  c               1    wreg     unsigned char 
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;  c               1   20[BANK0 ] unsigned char 
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      void 
  8803 ;; Registers used:
  8804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;Total ram usage:        1 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:   11
  8817 ;; This function calls:
  8818 ;;		_Console_PrintChar
  8819 ;; This function is called by:
  8820 ;;		_printf
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           	psect	text36
  8825  015534                     __ptext36:
  8826                           	opt stack 0
  8827  015534                     _putch:
  8828                           	opt stack 18
  8829                           
  8830                           ; BSR set to: 0
  8831                           ;incstack = 0
  8832                           ;putch@c stored from wreg
  8833  015534  0100               	movlb	0	; () banked
  8834  015536  6F74               	movwf	putch@c& (0+255),b
  8835                           
  8836                           ;Console.c: 456: Console_PrintChar(c);
  8837  015538  0100               	movlb	0	; () banked
  8838  01553A  5174               	movf	putch@c& (0+255),w,b
  8839  01553C  EC97  F094         	call	_Console_PrintChar
  8840  015540  0012               	return		;funcret
  8841  015542                     __end_of_putch:
  8842                           	opt stack 0
  8843                           tosu	equ	0xFFF
  8844                           tosh	equ	0xFFE
  8845                           tosl	equ	0xFFD
  8846                           pclath	equ	0xFFA
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           postinc0	equ	0xFEE
  8855                           wreg	equ	0xFE8
  8856                           postdec1	equ	0xFE5
  8857                           plusw1	equ	0xFE3
  8858                           fsr1h	equ	0xFE2
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           plusw2	equ	0xFDB
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function _Console_PrintChar *****************
  8869 ;; Defined at:
  8870 ;;		line 322 in file "Library/Console.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  pInput          1    wreg     unsigned char 
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;  pInput          1   19[BANK0 ] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      void 
  8877 ;; Registers used:
  8878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:        4 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:   10
  8891 ;; This function calls:
  8892 ;;		_Console_Backspace
  8893 ;;		_Console_FormFeed
  8894 ;;		_Console_IncrementCursor
  8895 ;;		_Console_NewLine
  8896 ;;		_Console_ResetCursor
  8897 ;;		_Console_Tab
  8898 ;; This function is called by:
  8899 ;;		_putch
  8900 ;;		_Console_PrintString
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text37
  8905  01292E                     __ptext37:
  8906                           	opt stack 0
  8907  01292E                     _Console_PrintChar:
  8908                           	opt stack 18
  8909                           
  8910                           ;incstack = 0
  8911                           ;Console_PrintChar@pInput stored from wreg
  8912  01292E  0100               	movlb	0	; () banked
  8913  012930  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  8914                           
  8915                           ;Console.c: 324: switch(pInput)
  8916  012932  D08A               	goto	l1036
  8917  012934                     
  8918                           ;Console.c: 327: case '\n':
  8919                           ;Console.c: 328: Console_NewLine();
  8920  012934  EC00  F0A1         	call	_Console_NewLine	;wreg free
  8921                           
  8922                           ;Console.c: 329: return;
  8923  012938  0012               	return	
  8924  01293A                     
  8925                           ;Console.c: 331: Console_Backspace();
  8926  01293A  EC82  F0A5         	call	_Console_Backspace	;wreg free
  8927                           
  8928                           ;Console.c: 332: return;
  8929  01293E  0012               	return	
  8930  012940                     
  8931                           ;Console.c: 334: Console_FormFeed();
  8932  012940  EC65  F0A2         	call	_Console_FormFeed	;wreg free
  8933                           
  8934                           ;Console.c: 335: return;
  8935  012944  0012               	return	
  8936  012946                     
  8937                           ;Console.c: 337: Console_Tab();
  8938  012946  EC96  F09E         	call	_Console_Tab	;wreg free
  8939                           
  8940                           ;Console.c: 338: return;
  8941  01294A  0012               	return	
  8942  01294C                     
  8943                           ;Console.c: 340: Console_IncrementCursor();
  8944  01294C  EC89  F0A4         	call	_Console_IncrementCursor	;wreg free
  8945                           
  8946                           ;Console.c: 341: return;
  8947  012950  0012               	return	
  8948  012952                     
  8949                           ;Console.c: 343: Console_ResetCursor();
  8950  012952  EC9E  F0A9         	call	_Console_ResetCursor	;wreg free
  8951                           
  8952                           ;Console.c: 344: return;
  8953  012956  0012               	return	
  8954  012958                     
  8955                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  8956                           
  8957                           ;Console.c: 349: default:
  8958  012958  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  8959  01295C  0E7F               	movlw	127
  8960  01295E  0100               	movlb	0	; () banked
  8961  012960  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  8962  012962  51F2               	movf	_lBufferY& (0+255),w,b
  8963  012964  0D14               	mullw	20
  8964  012966  0E18               	movlw	low _lBuffer
  8965  012968  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8966  01296A  0E03               	movlw	high _lBuffer
  8967  01296C  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  8968  01296E  50F3               	movf	prodl,w,c
  8969  012970  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  8970  012972  50F4               	movf	prodh,w,c
  8971  012974  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  8972  012976  51F3               	movf	_lBufferX& (0+255),w,b
  8973  012978  0D01               	mullw	1
  8974  01297A  50F3               	movf	prodl,w,c
  8975  01297C  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  8976  01297E  6ED9               	movwf	fsr2l,c
  8977  012980  50F4               	movf	prodh,w,c
  8978  012982  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  8979  012984  6EDA               	movwf	fsr2h,c
  8980  012986  50DF               	movf	indf2,w,c
  8981  012988  0B7F               	andlw	127
  8982  01298A  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  8983  01298C  B4D8               	btfsc	status,2,c
  8984  01298E  D023               	goto	l1047
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;Console.c: 351: {
  8988                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  8989  012990  0E01               	movlw	1
  8990  012992  6FF5               	movwf	_change& (0+255),b
  8991                           
  8992                           ; BSR set to: 0
  8993  012994  51F2               	movf	_lBufferY& (0+255),w,b
  8994  012996  0D14               	mullw	20
  8995  012998  0E18               	movlw	low _lBuffer
  8996  01299A  6F70               	movwf	??_Console_PrintChar& (0+255),b
  8997  01299C  0E03               	movlw	high _lBuffer
  8998  01299E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  8999  0129A0  50F3               	movf	prodl,w,c
  9000  0129A2  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  9001  0129A4  50F4               	movf	prodh,w,c
  9002  0129A6  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  9003  0129A8  51F3               	movf	_lBufferX& (0+255),w,b
  9004  0129AA  0D01               	mullw	1
  9005  0129AC  50F3               	movf	prodl,w,c
  9006  0129AE  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  9007  0129B0  6ED9               	movwf	fsr2l,c
  9008  0129B2  50F4               	movf	prodh,w,c
  9009  0129B4  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  9010  0129B6  6EDA               	movwf	fsr2h,c
  9011  0129B8  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  9012  0129BA  0980               	iorlw	128
  9013  0129BC  6EDF               	movwf	indf2,c
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  9017  0129BE  51F2               	movf	_lBufferY& (0+255),w,b
  9018  0129C0  0D02               	mullw	2
  9019  0129C2  0E50               	movlw	low _lCBuffer
  9020  0129C4  24F3               	addwf	prodl,w,c
  9021  0129C6  6ED9               	movwf	fsr2l,c
  9022  0129C8  0E02               	movlw	high _lCBuffer
  9023  0129CA  20F4               	addwfc	prodh,w,c
  9024  0129CC  6EDA               	movwf	fsr2h,c
  9025  0129CE  C1F7  FFDE         	movff	_gForecolour,postinc2
  9026  0129D2  C1F8  FFDD         	movff	_gForecolour+1,postdec2
  9027  0129D6                     l1047:
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;Console.c: 354: }
  9031                           ;Console.c: 368: if(Console_IncrementCursor())
  9032                           
  9033                           ; BSR set to: 0
  9034  0129D6  EC89  F0A4         	call	_Console_IncrementCursor	;wreg free
  9035  0129DA  0900               	iorlw	0
  9036  0129DC  B4D8               	btfsc	status,2,c
  9037  0129DE  0012               	return	
  9038                           
  9039                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  9040  0129E0  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  9041  0129E4  0E7F               	movlw	127
  9042  0129E6  0100               	movlb	0	; () banked
  9043  0129E8  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  9044  0129EA  51F2               	movf	_lBufferY& (0+255),w,b
  9045  0129EC  0D14               	mullw	20
  9046  0129EE  0E18               	movlw	low _lBuffer
  9047  0129F0  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  9048  0129F2  0E03               	movlw	high _lBuffer
  9049  0129F4  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  9050  0129F6  50F3               	movf	prodl,w,c
  9051  0129F8  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  9052  0129FA  50F4               	movf	prodh,w,c
  9053  0129FC  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  9054  0129FE  51F3               	movf	_lBufferX& (0+255),w,b
  9055  012A00  0D01               	mullw	1
  9056  012A02  50F3               	movf	prodl,w,c
  9057  012A04  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  9058  012A06  6ED9               	movwf	fsr2l,c
  9059  012A08  50F4               	movf	prodh,w,c
  9060  012A0A  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  9061  012A0C  6EDA               	movwf	fsr2h,c
  9062  012A0E  50DF               	movf	indf2,w,c
  9063  012A10  0B7F               	andlw	127
  9064  012A12  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  9065  012A14  B4D8               	btfsc	status,2,c
  9066  012A16  0012               	return	
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  9070  012A18  0E01               	movlw	1
  9071  012A1A  6FF5               	movwf	_change& (0+255),b
  9072                           
  9073                           ; BSR set to: 0
  9074  012A1C  51F2               	movf	_lBufferY& (0+255),w,b
  9075  012A1E  0D14               	mullw	20
  9076  012A20  0E18               	movlw	low _lBuffer
  9077  012A22  6F70               	movwf	??_Console_PrintChar& (0+255),b
  9078  012A24  0E03               	movlw	high _lBuffer
  9079  012A26  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  9080  012A28  50F3               	movf	prodl,w,c
  9081  012A2A  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  9082  012A2C  50F4               	movf	prodh,w,c
  9083  012A2E  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  9084  012A30  51F3               	movf	_lBufferX& (0+255),w,b
  9085  012A32  0D01               	mullw	1
  9086  012A34  50F3               	movf	prodl,w,c
  9087  012A36  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  9088  012A38  6ED9               	movwf	fsr2l,c
  9089  012A3A  50F4               	movf	prodh,w,c
  9090  012A3C  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  9091  012A3E  6EDA               	movwf	fsr2h,c
  9092  012A40  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  9093  012A42  0980               	iorlw	128
  9094  012A44  6EDF               	movwf	indf2,c
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;Console.c: 372: };
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;Console.c: 371: return;
  9101                           
  9102                           ; BSR set to: 0
  9103                           
  9104                           ; BSR set to: 0
  9105  012A46  0012               	return	
  9106  012A48                     l1036:
  9107                           
  9108                           ; BSR set to: 0
  9109  012A48  0100               	movlb	0	; () banked
  9110  012A4A  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  9111                           
  9112                           ; Switch size 1, requested type "space"
  9113                           ; Number of cases is 8, Range of values is 7 to 35
  9114                           ; switch strategies available:
  9115                           ; Name         Instructions Cycles
  9116                           ; simple_byte           25    13 (average)
  9117                           ;	Chosen strategy is simple_byte
  9118  012A4C  0A07               	xorlw	7	; case 7
  9119  012A4E  B4D8               	btfsc	status,2,c
  9120  012A50  D77D               	goto	l1043
  9121  012A52  0A0F               	xorlw	15	; case 8
  9122  012A54  B4D8               	btfsc	status,2,c
  9123  012A56  D771               	goto	l1040
  9124  012A58  0A01               	xorlw	1	; case 9
  9125  012A5A  B4D8               	btfsc	status,2,c
  9126  012A5C  D774               	goto	l1042
  9127  012A5E  0A03               	xorlw	3	; case 10
  9128  012A60  B4D8               	btfsc	status,2,c
  9129  012A62  D768               	goto	l1037
  9130  012A64  0A06               	xorlw	6	; case 12
  9131  012A66  B4D8               	btfsc	status,2,c
  9132  012A68  D76B               	goto	l1041
  9133  012A6A  0A01               	xorlw	1	; case 13
  9134  012A6C  B4D8               	btfsc	status,2,c
  9135  012A6E  D762               	goto	l1037
  9136  012A70  0A2D               	xorlw	45	; case 32
  9137  012A72  B4D8               	btfsc	status,2,c
  9138  012A74  D771               	goto	l1045
  9139  012A76  0A03               	xorlw	3	; case 35
  9140  012A78  B4D8               	btfsc	status,2,c
  9141  012A7A  D76B               	goto	l1044
  9142  012A7C  D76D               	goto	l1045
  9143  012A7E                     __end_of_Console_PrintChar:
  9144                           	opt stack 0
  9145                           tosu	equ	0xFFF
  9146                           tosh	equ	0xFFE
  9147                           tosl	equ	0xFFD
  9148                           pclath	equ	0xFFA
  9149                           tblptru	equ	0xFF8
  9150                           tblptrh	equ	0xFF7
  9151                           tblptrl	equ	0xFF6
  9152                           tablat	equ	0xFF5
  9153                           prodh	equ	0xFF4
  9154                           prodl	equ	0xFF3
  9155                           intcon	equ	0xFF2
  9156                           postinc0	equ	0xFEE
  9157                           wreg	equ	0xFE8
  9158                           postdec1	equ	0xFE5
  9159                           plusw1	equ	0xFE3
  9160                           fsr1h	equ	0xFE2
  9161                           fsr1l	equ	0xFE1
  9162                           indf2	equ	0xFDF
  9163                           postinc2	equ	0xFDE
  9164                           postdec2	equ	0xFDD
  9165                           plusw2	equ	0xFDB
  9166                           fsr2h	equ	0xFDA
  9167                           fsr2l	equ	0xFD9
  9168                           status	equ	0xFD8
  9169                           
  9170 ;; *************** function _Console_Tab *****************
  9171 ;; Defined at:
  9172 ;;		line 260 in file "Library/Console.c"
  9173 ;; Parameters:    Size  Location     Type
  9174 ;;		None
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  c               1   15[BANK0 ] unsigned char 
  9177 ;;  i               1   14[BANK0 ] unsigned char 
  9178 ;;  t               1   13[BANK0 ] unsigned char 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  1    wreg      void 
  9181 ;; Registers used:
  9182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/0
  9185 ;;		On exit  : 0/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9189 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9190 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9191 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9192 ;;Total ram usage:        8 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:    9
  9195 ;; This function calls:
  9196 ;;		_Console_ClearCursor
  9197 ;;		_Console_IncrementCursor
  9198 ;;		___awdiv
  9199 ;; This function is called by:
  9200 ;;		_Console_PrintChar
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           	psect	text38
  9205  013D2C                     __ptext38:
  9206                           	opt stack 0
  9207  013D2C                     _Console_Tab:
  9208                           	opt stack 18
  9209                           
  9210                           ;Console.c: 262: UINT8 i = 0;
  9211                           
  9212                           ;incstack = 0
  9213  013D2C  0E00               	movlw	0
  9214  013D2E  0100               	movlb	0	; () banked
  9215  013D30  6F6E               	movwf	Console_Tab@i& (0+255),b
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  9219  013D32  0EFA               	movlw	250
  9220  013D34  2443               	addwf	_gCursor,w,c
  9221  013D36  6F60               	movwf	___awdiv@dividend& (0+255),b
  9222  013D38  0EFF               	movlw	255
  9223  013D3A  2044               	addwfc	_gCursor+1,w,c
  9224  013D3C  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  9225  013D3E  0E00               	movlw	0
  9226  013D40  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  9227  013D42  0E06               	movlw	6
  9228  013D44  6F62               	movwf	___awdiv@divisor& (0+255),b
  9229  013D46  EC3C  F0A0         	call	___awdiv	;wreg free
  9230  013D4A  0100               	movlb	0	; () banked
  9231  013D4C  5160               	movf	?___awdiv& (0+255),w,b
  9232  013D4E  6F6F               	movwf	Console_Tab@c& (0+255),b
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;Console.c: 264: UINT8 t = c/4;
  9236  013D50  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  9237  013D54  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  9238  013D56  0E00               	movlw	0
  9239  013D58  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  9240  013D5A  0E04               	movlw	4
  9241  013D5C  6F62               	movwf	___awdiv@divisor& (0+255),b
  9242  013D5E  EC3C  F0A0         	call	___awdiv	;wreg free
  9243  013D62  0100               	movlb	0	; () banked
  9244  013D64  5160               	movf	?___awdiv& (0+255),w,b
  9245  013D66  6F6D               	movwf	Console_Tab@t& (0+255),b
  9246                           
  9247                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  9248  013D68  0E00               	movlw	0
  9249  013D6A  6F6E               	movwf	Console_Tab@i& (0+255),b
  9250  013D6C  D006               	goto	l1009
  9251  013D6E                     
  9252                           ; BSR set to: 0
  9253                           ;Console.c: 266: {
  9254                           ;Console.c: 267: Console_ClearCursor();
  9255                           
  9256                           ; BSR set to: 0
  9257  013D6E  EC60  F0A8         	call	_Console_ClearCursor	;wreg free
  9258                           
  9259                           ;Console.c: 268: Console_IncrementCursor();
  9260  013D72  EC89  F0A4         	call	_Console_IncrementCursor	;wreg free
  9261  013D76  0100               	movlb	0	; () banked
  9262  013D78  2B6E               	incf	Console_Tab@i& (0+255),f,b
  9263  013D7A                     l1009:
  9264                           
  9265                           ; BSR set to: 0
  9266                           
  9267                           ; BSR set to: 0
  9268  013D7A  516D               	movf	Console_Tab@t& (0+255),w,b
  9269  013D7C  0D04               	mullw	4
  9270  013D7E  1EF3               	comf	prodl,f,c
  9271  013D80  1EF4               	comf	prodh,f,c
  9272  013D82  4AF3               	infsnz	prodl,f,c
  9273  013D84  2AF4               	incf	prodh,f,c
  9274  013D86  516F               	movf	Console_Tab@c& (0+255),w,b
  9275  013D88  6F68               	movwf	??_Console_Tab& (0+255),b
  9276  013D8A  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  9277  013D8C  50F3               	movf	prodl,w,c
  9278  013D8E  2768               	addwf	??_Console_Tab& (0+255),f,b
  9279  013D90  50F4               	movf	prodh,w,c
  9280  013D92  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  9281  013D94  1F68               	comf	??_Console_Tab& (0+255),f,b
  9282  013D96  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  9283  013D98  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  9284  013D9A  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  9285  013D9C  0E04               	movlw	4
  9286  013D9E  2768               	addwf	??_Console_Tab& (0+255),f,b
  9287  013DA0  0E00               	movlw	0
  9288  013DA2  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  9289  013DA4  516E               	movf	Console_Tab@i& (0+255),w,b
  9290  013DA6  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  9291  013DA8  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  9292  013DAA  5168               	movf	??_Console_Tab& (0+255),w,b
  9293  013DAC  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  9294  013DAE  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  9295  013DB0  0A80               	xorlw	128
  9296  013DB2  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  9297  013DB4  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  9298  013DB6  0A80               	xorlw	128
  9299  013DB8  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  9300  013DBA  B0D8               	btfsc	status,0,c
  9301  013DBC  0012               	return	
  9302  013DBE  D7D7               	goto	l1010
  9303  013DC0                     __end_of_Console_Tab:
  9304                           	opt stack 0
  9305                           tosu	equ	0xFFF
  9306                           tosh	equ	0xFFE
  9307                           tosl	equ	0xFFD
  9308                           pclath	equ	0xFFA
  9309                           tblptru	equ	0xFF8
  9310                           tblptrh	equ	0xFF7
  9311                           tblptrl	equ	0xFF6
  9312                           tablat	equ	0xFF5
  9313                           prodh	equ	0xFF4
  9314                           prodl	equ	0xFF3
  9315                           intcon	equ	0xFF2
  9316                           postinc0	equ	0xFEE
  9317                           wreg	equ	0xFE8
  9318                           postdec1	equ	0xFE5
  9319                           plusw1	equ	0xFE3
  9320                           fsr1h	equ	0xFE2
  9321                           fsr1l	equ	0xFE1
  9322                           indf2	equ	0xFDF
  9323                           postinc2	equ	0xFDE
  9324                           postdec2	equ	0xFDD
  9325                           plusw2	equ	0xFDB
  9326                           fsr2h	equ	0xFDA
  9327                           fsr2l	equ	0xFD9
  9328                           status	equ	0xFD8
  9329                           
  9330 ;; *************** function _Console_IncrementCursor *****************
  9331 ;; Defined at:
  9332 ;;		line 243 in file "Library/Console.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;		None
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  1    wreg      unsigned char 
  9339 ;; Registers used:
  9340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9350 ;;Total ram usage:        2 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    8
  9353 ;; This function calls:
  9354 ;;		_Console_FormFeed
  9355 ;;		_Console_NewLine
  9356 ;; This function is called by:
  9357 ;;		_Console_Tab
  9358 ;;		_Console_PrintChar
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text39
  9363  014912                     __ptext39:
  9364                           	opt stack 0
  9365  014912                     _Console_IncrementCursor:
  9366                           	opt stack 18
  9367                           
  9368                           ;Console.c: 246: lBufferX += 1;
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;incstack = 0
  9372  014912  0100               	movlb	0	; () banked
  9373  014914  2BF3               	incf	_lBufferX& (0+255),f,b
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;Console.c: 248: gCursor.x += 6;
  9377  014916  0E06               	movlw	6
  9378  014918  2643               	addwf	_gCursor,f,c
  9379  01491A  0E00               	movlw	0
  9380  01491C  2244               	addwfc	_gCursor+1,f,c
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  9384  01491E  0E06               	movlw	6
  9385  014920  2443               	addwf	_gCursor,w,c
  9386  014922  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  9387  014924  0E00               	movlw	0
  9388  014926  2044               	addwfc	_gCursor+1,w,c
  9389  014928  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9390  01492A  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9391  01492C  D007               	goto	l1004
  9392  01492E  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9393  014930  E103               	bnz	u9770
  9394  014932  0E80               	movlw	128
  9395  014934  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9396  014936  B0D8               	btfsc	status,0,c
  9397  014938                     u9770:
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;Console.c: 250: Console_NewLine();
  9401  014938  EC00  F0A1         	call	_Console_NewLine	;wreg free
  9402  01493C                     l1004:
  9403                           
  9404                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  9405  01493C  0E08               	movlw	8
  9406  01493E  2445               	addwf	_gCursor+2,w,c
  9407  014940  0100               	movlb	0	; () banked
  9408  014942  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  9409  014944  0E00               	movlw	0
  9410  014946  2046               	addwfc	_gCursor+3,w,c
  9411  014948  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  9412  01494A  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  9413  01494C  D00A               	goto	l1005
  9414  01494E  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  9415  014950  E104               	bnz	u9780
  9416  014952  0E80               	movlw	128
  9417  014954  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  9418  014956  A0D8               	btfss	status,0,c
  9419  014958  D004               	goto	l1005
  9420  01495A                     u9780:
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;Console.c: 252: {
  9424                           ;Console.c: 253: Console_FormFeed();
  9425  01495A  EC65  F0A2         	call	_Console_FormFeed	;wreg free
  9426                           
  9427                           ;Console.c: 254: return 1;
  9428  01495E  0E01               	movlw	1
  9429  014960  0012               	return	
  9430  014962                     l1005:
  9431                           
  9432                           ;Console.c: 255: }
  9433                           ;Console.c: 257: return 0;
  9434  014962  0E00               	movlw	0
  9435  014964  0012               	return	
  9436  014966                     __end_of_Console_IncrementCursor:
  9437                           	opt stack 0
  9438                           tosu	equ	0xFFF
  9439                           tosh	equ	0xFFE
  9440                           tosl	equ	0xFFD
  9441                           pclath	equ	0xFFA
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           intcon	equ	0xFF2
  9449                           postinc0	equ	0xFEE
  9450                           wreg	equ	0xFE8
  9451                           postdec1	equ	0xFE5
  9452                           plusw1	equ	0xFE3
  9453                           fsr1h	equ	0xFE2
  9454                           fsr1l	equ	0xFE1
  9455                           indf2	equ	0xFDF
  9456                           postinc2	equ	0xFDE
  9457                           postdec2	equ	0xFDD
  9458                           plusw2	equ	0xFDB
  9459                           fsr2h	equ	0xFDA
  9460                           fsr2l	equ	0xFD9
  9461                           status	equ	0xFD8
  9462                           
  9463 ;; *************** function _Console_NewLine *****************
  9464 ;; Defined at:
  9465 ;;		line 175 in file "Library/Console.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;		None
  9470 ;; Return value:  Size  Location     Type
  9471 ;;                  1    wreg      void 
  9472 ;; Registers used:
  9473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9481 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9482 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9483 ;;Total ram usage:        2 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    7
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_Console_IncrementCursor
  9490 ;;		_Console_PrintChar
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           	psect	text40
  9495  014200                     __ptext40:
  9496                           	opt stack 0
  9497  014200                     _Console_NewLine:
  9498                           	opt stack 18
  9499                           
  9500                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  9501                           
  9502                           ;incstack = 0
  9503  014200  D02D               	goto	l983
  9504  014202                     
  9505                           ;Console.c: 179: {
  9506                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  9507  014202  0100               	movlb	0	; () banked
  9508  014204  51F2               	movf	_lBufferY& (0+255),w,b
  9509  014206  0D14               	mullw	20
  9510  014208  0E18               	movlw	low _lBuffer
  9511  01420A  6F60               	movwf	??_Console_NewLine& (0+255),b
  9512  01420C  0E03               	movlw	high _lBuffer
  9513  01420E  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  9514  014210  50F3               	movf	prodl,w,c
  9515  014212  2760               	addwf	??_Console_NewLine& (0+255),f,b
  9516  014214  50F4               	movf	prodh,w,c
  9517  014216  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9518  014218  51F3               	movf	_lBufferX& (0+255),w,b
  9519  01421A  0D01               	mullw	1
  9520  01421C  50F3               	movf	prodl,w,c
  9521  01421E  2560               	addwf	??_Console_NewLine& (0+255),w,b
  9522  014220  6ED9               	movwf	fsr2l,c
  9523  014222  50F4               	movf	prodh,w,c
  9524  014224  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9525  014226  6EDA               	movwf	fsr2h,c
  9526  014228  50DF               	movf	indf2,w,c
  9527  01422A  B4D8               	btfsc	status,2,c
  9528  01422C  D016               	goto	l985
  9529                           
  9530                           ; BSR set to: 0
  9531                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  9532  01422E  0E01               	movlw	1
  9533  014230  6FF5               	movwf	_change& (0+255),b
  9534                           
  9535                           ; BSR set to: 0
  9536  014232  51F2               	movf	_lBufferY& (0+255),w,b
  9537  014234  0D14               	mullw	20
  9538  014236  0E18               	movlw	low _lBuffer
  9539  014238  6F60               	movwf	??_Console_NewLine& (0+255),b
  9540  01423A  0E03               	movlw	high _lBuffer
  9541  01423C  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  9542  01423E  50F3               	movf	prodl,w,c
  9543  014240  2760               	addwf	??_Console_NewLine& (0+255),f,b
  9544  014242  50F4               	movf	prodh,w,c
  9545  014244  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  9546  014246  51F3               	movf	_lBufferX& (0+255),w,b
  9547  014248  0D01               	mullw	1
  9548  01424A  50F3               	movf	prodl,w,c
  9549  01424C  2560               	addwf	??_Console_NewLine& (0+255),w,b
  9550  01424E  6ED9               	movwf	fsr2l,c
  9551  014250  50F4               	movf	prodh,w,c
  9552  014252  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  9553  014254  6EDA               	movwf	fsr2h,c
  9554  014256  0E80               	movlw	128
  9555  014258  6EDF               	movwf	indf2,c
  9556  01425A                     l985:
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;Console.c: 182: lBufferX ++;
  9560                           
  9561                           ; BSR set to: 0
  9562  01425A  2BF3               	incf	_lBufferX& (0+255),f,b
  9563  01425C                     l983:
  9564                           
  9565                           ; BSR set to: 0
  9566  01425C  0E13               	movlw	19
  9567  01425E  0100               	movlb	0	; () banked
  9568  014260  65F3               	cpfsgt	_lBufferX& (0+255),b
  9569  014262  D7CF               	goto	l984
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;Console.c: 183: }
  9573                           ;Console.c: 185: lBufferX = 0;
  9574                           
  9575                           ; BSR set to: 0
  9576  014264  0E00               	movlw	0
  9577  014266  6FF3               	movwf	_lBufferX& (0+255),b
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;Console.c: 186: lBufferY ++;
  9581  014268  2BF2               	incf	_lBufferY& (0+255),f,b
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;Console.c: 188: gCursor.y += 8;
  9585  01426A  0E08               	movlw	8
  9586  01426C  2645               	addwf	_gCursor+2,f,c
  9587  01426E  0E00               	movlw	0
  9588  014270  2246               	addwfc	_gCursor+3,f,c
  9589                           
  9590                           ; BSR set to: 0
  9591                           ;Console.c: 189: gCursor.x = 6;
  9592  014272  0E00               	movlw	0
  9593  014274  6E44               	movwf	_gCursor+1,c
  9594  014276  0E06               	movlw	6
  9595  014278  6E43               	movwf	_gCursor,c
  9596                           
  9597                           ; BSR set to: 0
  9598  01427A  0012               	return		;funcret
  9599  01427C                     __end_of_Console_NewLine:
  9600                           	opt stack 0
  9601                           tosu	equ	0xFFF
  9602                           tosh	equ	0xFFE
  9603                           tosl	equ	0xFFD
  9604                           pclath	equ	0xFFA
  9605                           tblptru	equ	0xFF8
  9606                           tblptrh	equ	0xFF7
  9607                           tblptrl	equ	0xFF6
  9608                           tablat	equ	0xFF5
  9609                           prodh	equ	0xFF4
  9610                           prodl	equ	0xFF3
  9611                           intcon	equ	0xFF2
  9612                           postinc0	equ	0xFEE
  9613                           wreg	equ	0xFE8
  9614                           postdec1	equ	0xFE5
  9615                           plusw1	equ	0xFE3
  9616                           fsr1h	equ	0xFE2
  9617                           fsr1l	equ	0xFE1
  9618                           indf2	equ	0xFDF
  9619                           postinc2	equ	0xFDE
  9620                           postdec2	equ	0xFDD
  9621                           plusw2	equ	0xFDB
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function _Console_FormFeed *****************
  9627 ;; Defined at:
  9628 ;;		line 192 in file "Library/Console.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;		None
  9631 ;; Auto vars:     Size  Location     Type
  9632 ;;  y               1    3[BANK0 ] unsigned char 
  9633 ;;  x               1    2[BANK0 ] unsigned char 
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      void 
  9636 ;; Registers used:
  9637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9644 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9645 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;Total ram usage:        4 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:    7
  9650 ;; This function calls:
  9651 ;;		Nothing
  9652 ;; This function is called by:
  9653 ;;		_Console_IncrementCursor
  9654 ;;		_Console_PrintChar
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           	psect	text41
  9659  0144CA                     __ptext41:
  9660                           	opt stack 0
  9661  0144CA                     _Console_FormFeed:
  9662                           	opt stack 18
  9663                           
  9664                           ;Console.c: 195: lBufferX = 0;
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;incstack = 0
  9668  0144CA  0E00               	movlw	0
  9669  0144CC  0100               	movlb	0	; () banked
  9670  0144CE  6FF3               	movwf	_lBufferX& (0+255),b
  9671                           
  9672                           ;Console.c: 196: lBufferY = 0;
  9673  0144D0  0E00               	movlw	0
  9674  0144D2  6FF2               	movwf	_lBufferY& (0+255),b
  9675                           
  9676                           ;Console.c: 197: UINT8 x, y;
  9677                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  9678  0144D4  0E00               	movlw	0
  9679  0144D6  6F63               	movwf	Console_FormFeed@y& (0+255),b
  9680  0144D8                     l12546:
  9681                           
  9682                           ; BSR set to: 0
  9683  0144D8  0E0E               	movlw	14
  9684  0144DA  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  9685  0144DC  D001               	goto	l990
  9686  0144DE  D020               	goto	u9700
  9687  0144E0                     l990:
  9688                           
  9689                           ; BSR set to: 0
  9690                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9691                           
  9692                           ; BSR set to: 0
  9693  0144E0  0E00               	movlw	0
  9694  0144E2  6F62               	movwf	Console_FormFeed@x& (0+255),b
  9695  0144E4                     l12552:
  9696                           
  9697                           ; BSR set to: 0
  9698  0144E4  0E13               	movlw	19
  9699  0144E6  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  9700  0144E8  D001               	goto	l992
  9701  0144EA  D018               	goto	u9690
  9702  0144EC                     l992:
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  9706                           
  9707                           ; BSR set to: 0
  9708  0144EC  0E01               	movlw	1
  9709  0144EE  6FF5               	movwf	_change& (0+255),b
  9710                           
  9711                           ; BSR set to: 0
  9712  0144F0  5163               	movf	Console_FormFeed@y& (0+255),w,b
  9713  0144F2  0D14               	mullw	20
  9714  0144F4  0E18               	movlw	low _lBuffer
  9715  0144F6  6F60               	movwf	??_Console_FormFeed& (0+255),b
  9716  0144F8  0E03               	movlw	high _lBuffer
  9717  0144FA  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  9718  0144FC  50F3               	movf	prodl,w,c
  9719  0144FE  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  9720  014500  50F4               	movf	prodh,w,c
  9721  014502  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  9722  014504  5162               	movf	Console_FormFeed@x& (0+255),w,b
  9723  014506  0D01               	mullw	1
  9724  014508  50F3               	movf	prodl,w,c
  9725  01450A  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  9726  01450C  6ED9               	movwf	fsr2l,c
  9727  01450E  50F4               	movf	prodh,w,c
  9728  014510  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  9729  014512  6EDA               	movwf	fsr2h,c
  9730  014514  0E80               	movlw	128
  9731  014516  6EDF               	movwf	indf2,c
  9732                           
  9733                           ; BSR set to: 0
  9734  014518  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  9735  01451A  D7E4               	goto	l12552
  9736  01451C                     u9690:
  9737                           
  9738                           ; BSR set to: 0
  9739                           
  9740                           ; BSR set to: 0
  9741  01451C  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  9742  01451E  D7DC               	goto	l12546
  9743  014520                     u9700:
  9744                           
  9745                           ; BSR set to: 0
  9746                           ;Console.c: 204: clearall = 1;
  9747                           
  9748                           ; BSR set to: 0
  9749  014520  0E01               	movlw	1
  9750  014522  6FF4               	movwf	_clearall& (0+255),b
  9751                           
  9752                           ;Console.c: 205: gCursor.x = 6;
  9753  014524  0E00               	movlw	0
  9754  014526  6E44               	movwf	_gCursor+1,c
  9755  014528  0E06               	movlw	6
  9756  01452A  6E43               	movwf	_gCursor,c
  9757                           
  9758                           ;Console.c: 206: gCursor.y = 6;
  9759  01452C  0E00               	movlw	0
  9760  01452E  6E46               	movwf	_gCursor+3,c
  9761  014530  0E06               	movlw	6
  9762  014532  6E45               	movwf	_gCursor+2,c
  9763                           
  9764                           ; BSR set to: 0
  9765  014534  0012               	return		;funcret
  9766  014536                     __end_of_Console_FormFeed:
  9767                           	opt stack 0
  9768                           tosu	equ	0xFFF
  9769                           tosh	equ	0xFFE
  9770                           tosl	equ	0xFFD
  9771                           pclath	equ	0xFFA
  9772                           tblptru	equ	0xFF8
  9773                           tblptrh	equ	0xFF7
  9774                           tblptrl	equ	0xFF6
  9775                           tablat	equ	0xFF5
  9776                           prodh	equ	0xFF4
  9777                           prodl	equ	0xFF3
  9778                           intcon	equ	0xFF2
  9779                           postinc0	equ	0xFEE
  9780                           wreg	equ	0xFE8
  9781                           postdec1	equ	0xFE5
  9782                           plusw1	equ	0xFE3
  9783                           fsr1h	equ	0xFE2
  9784                           fsr1l	equ	0xFE1
  9785                           indf2	equ	0xFDF
  9786                           postinc2	equ	0xFDE
  9787                           postdec2	equ	0xFDD
  9788                           plusw2	equ	0xFDB
  9789                           fsr2h	equ	0xFDA
  9790                           fsr2l	equ	0xFD9
  9791                           status	equ	0xFD8
  9792                           
  9793 ;; *************** function _Console_ResetCursor *****************
  9794 ;; Defined at:
  9795 ;;		line 297 in file "Library/Console.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;		None
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;		None
  9800 ;; Return value:  Size  Location     Type
  9801 ;;                  1    wreg      void 
  9802 ;; Registers used:
  9803 ;;		wreg, status,2
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;Total ram usage:        0 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; Hardware stack levels required when called:    7
  9816 ;; This function calls:
  9817 ;;		Nothing
  9818 ;; This function is called by:
  9819 ;;		_Console_PrintChar
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           	psect	text42
  9824  01533C                     __ptext42:
  9825                           	opt stack 0
  9826  01533C                     _Console_ResetCursor:
  9827                           	opt stack 20
  9828                           
  9829                           ;Console.c: 299: gCursor.x = 6;
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;incstack = 0
  9833  01533C  0E00               	movlw	0
  9834  01533E  6E44               	movwf	_gCursor+1,c
  9835  015340  0E06               	movlw	6
  9836  015342  6E43               	movwf	_gCursor,c
  9837                           
  9838                           ;Console.c: 300: gCursor.y = 6;
  9839  015344  0E00               	movlw	0
  9840  015346  6E46               	movwf	_gCursor+3,c
  9841  015348  0E06               	movlw	6
  9842  01534A  6E45               	movwf	_gCursor+2,c
  9843                           
  9844                           ;Console.c: 303: lBufferX = 0;
  9845  01534C  0E00               	movlw	0
  9846  01534E  0100               	movlb	0	; () banked
  9847  015350  6FF3               	movwf	_lBufferX& (0+255),b
  9848                           
  9849                           ;Console.c: 304: lBufferY = 0;
  9850  015352  0E00               	movlw	0
  9851  015354  6FF2               	movwf	_lBufferY& (0+255),b
  9852                           
  9853                           ; BSR set to: 0
  9854  015356  0012               	return		;funcret
  9855  015358                     __end_of_Console_ResetCursor:
  9856                           	opt stack 0
  9857                           tosu	equ	0xFFF
  9858                           tosh	equ	0xFFE
  9859                           tosl	equ	0xFFD
  9860                           pclath	equ	0xFFA
  9861                           tblptru	equ	0xFF8
  9862                           tblptrh	equ	0xFF7
  9863                           tblptrl	equ	0xFF6
  9864                           tablat	equ	0xFF5
  9865                           prodh	equ	0xFF4
  9866                           prodl	equ	0xFF3
  9867                           intcon	equ	0xFF2
  9868                           postinc0	equ	0xFEE
  9869                           wreg	equ	0xFE8
  9870                           postdec1	equ	0xFE5
  9871                           plusw1	equ	0xFE3
  9872                           fsr1h	equ	0xFE2
  9873                           fsr1l	equ	0xFE1
  9874                           indf2	equ	0xFDF
  9875                           postinc2	equ	0xFDE
  9876                           postdec2	equ	0xFDD
  9877                           plusw2	equ	0xFDB
  9878                           fsr2h	equ	0xFDA
  9879                           fsr2l	equ	0xFD9
  9880                           status	equ	0xFD8
  9881                           
  9882 ;; *************** function _Console_Backspace *****************
  9883 ;; Defined at:
  9884 ;;		line 209 in file "Library/Console.c"
  9885 ;; Parameters:    Size  Location     Type
  9886 ;;		None
  9887 ;; Auto vars:     Size  Location     Type
  9888 ;;		None
  9889 ;; Return value:  Size  Location     Type
  9890 ;;                  1    wreg      void 
  9891 ;; Registers used:
  9892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9893 ;; Tracked objects:
  9894 ;;		On entry : 0/0
  9895 ;;		On exit  : 0/0
  9896 ;;		Unchanged: 0/0
  9897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9902 ;;Total ram usage:        0 bytes
  9903 ;; Hardware stack levels used:    1
  9904 ;; Hardware stack levels required when called:    8
  9905 ;; This function calls:
  9906 ;;		_Console_ClearCursor
  9907 ;; This function is called by:
  9908 ;;		_Console_PrintChar
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text43
  9913  014B04                     __ptext43:
  9914                           	opt stack 0
  9915  014B04                     _Console_Backspace:
  9916                           	opt stack 19
  9917                           
  9918                           ;Console.c: 211: if (lBufferX > 0)
  9919                           
  9920                           ; BSR set to: 0
  9921                           ;incstack = 0
  9922  014B04  0100               	movlb	0	; () banked
  9923  014B06  51F3               	movf	_lBufferX& (0+255),w,b
  9924  014B08  B4D8               	btfsc	status,2,c
  9925  014B0A  D006               	goto	l997
  9926                           
  9927                           ; BSR set to: 0
  9928                           ;Console.c: 212: {
  9929                           ;Console.c: 213: gCursor.x -= 6;
  9930  014B0C  0EFA               	movlw	250
  9931  014B0E  2643               	addwf	_gCursor,f,c
  9932  014B10  0EFF               	movlw	255
  9933  014B12  2244               	addwfc	_gCursor+1,f,c
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;Console.c: 216: lBufferX --;
  9937  014B14  07F3               	decf	_lBufferX& (0+255),f,b
  9938                           
  9939                           ;Console.c: 218: }
  9940  014B16  D01B               	goto	l1000
  9941  014B18                     l997:
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;Console.c: 219: else if (lBufferY > 0)
  9945                           
  9946                           ; BSR set to: 0
  9947  014B18  51F2               	movf	_lBufferY& (0+255),w,b
  9948  014B1A  B4D8               	btfsc	status,2,c
  9949  014B1C  D00C               	goto	l999
  9950                           
  9951                           ; BSR set to: 0
  9952                           ;Console.c: 220: {
  9953                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  9954  014B1E  0E00               	movlw	0
  9955  014B20  6E44               	movwf	_gCursor+1,c
  9956  014B22  0E72               	movlw	114
  9957  014B24  6E43               	movwf	_gCursor,c
  9958                           
  9959                           ; BSR set to: 0
  9960                           ;Console.c: 222: gCursor.y -= 8;
  9961  014B26  0EF8               	movlw	248
  9962  014B28  2645               	addwf	_gCursor+2,f,c
  9963  014B2A  0EFF               	movlw	255
  9964  014B2C  2246               	addwfc	_gCursor+3,f,c
  9965                           
  9966                           ; BSR set to: 0
  9967                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  9968  014B2E  0E13               	movlw	19
  9969  014B30  6FF3               	movwf	_lBufferX& (0+255),b
  9970                           
  9971                           ; BSR set to: 0
  9972                           ;Console.c: 226: lBufferY --;
  9973  014B32  07F2               	decf	_lBufferY& (0+255),f,b
  9974                           
  9975                           ;Console.c: 228: }
  9976  014B34  D00C               	goto	l1000
  9977  014B36                     l999:
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;Console.c: 229: else
  9981                           ;Console.c: 230: {
  9982                           ;Console.c: 231: gCursor.x = 6;
  9983                           
  9984                           ; BSR set to: 0
  9985  014B36  0E00               	movlw	0
  9986  014B38  6E44               	movwf	_gCursor+1,c
  9987  014B3A  0E06               	movlw	6
  9988  014B3C  6E43               	movwf	_gCursor,c
  9989                           
  9990                           ;Console.c: 232: gCursor.y = 6;
  9991  014B3E  0E00               	movlw	0
  9992  014B40  6E46               	movwf	_gCursor+3,c
  9993  014B42  0E06               	movlw	6
  9994  014B44  6E45               	movwf	_gCursor+2,c
  9995                           
  9996                           ;Console.c: 235: lBufferX = 0;
  9997  014B46  0E00               	movlw	0
  9998  014B48  6FF3               	movwf	_lBufferX& (0+255),b
  9999                           
 10000                           ;Console.c: 236: lBufferY = 0;
 10001  014B4A  0E00               	movlw	0
 10002  014B4C  6FF2               	movwf	_lBufferY& (0+255),b
 10003  014B4E                     l1000:
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;Console.c: 238: }
 10007                           ;Console.c: 240: Console_ClearCursor();
 10008                           
 10009                           ; BSR set to: 0
 10010                           
 10011                           ; BSR set to: 0
 10012  014B4E  EC60  F0A8         	call	_Console_ClearCursor	;wreg free
 10013  014B52  0012               	return		;funcret
 10014  014B54                     __end_of_Console_Backspace:
 10015                           	opt stack 0
 10016                           tosu	equ	0xFFF
 10017                           tosh	equ	0xFFE
 10018                           tosl	equ	0xFFD
 10019                           pclath	equ	0xFFA
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           postinc0	equ	0xFEE
 10028                           wreg	equ	0xFE8
 10029                           postdec1	equ	0xFE5
 10030                           plusw1	equ	0xFE3
 10031                           fsr1h	equ	0xFE2
 10032                           fsr1l	equ	0xFE1
 10033                           indf2	equ	0xFDF
 10034                           postinc2	equ	0xFDE
 10035                           postdec2	equ	0xFDD
 10036                           plusw2	equ	0xFDB
 10037                           fsr2h	equ	0xFDA
 10038                           fsr2l	equ	0xFD9
 10039                           status	equ	0xFD8
 10040                           
 10041 ;; *************** function _Console_ClearCursor *****************
 10042 ;; Defined at:
 10043 ;;		line 308 in file "Library/Console.c"
 10044 ;; Parameters:    Size  Location     Type
 10045 ;;		None
 10046 ;; Auto vars:     Size  Location     Type
 10047 ;;		None
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  1    wreg      void 
 10050 ;; Registers used:
 10051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;Total ram usage:        2 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    7
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_Console_Backspace
 10068 ;;		_Console_Tab
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072                           	psect	text44
 10073  0150C0                     __ptext44:
 10074                           	opt stack 0
 10075  0150C0                     _Console_ClearCursor:
 10076                           	opt stack 19
 10077                           
 10078                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 10079                           
 10080                           ;incstack = 0
 10081  0150C0  0E01               	movlw	1
 10082  0150C2  0100               	movlb	0	; () banked
 10083  0150C4  6FF5               	movwf	_change& (0+255),b
 10084                           
 10085                           ; BSR set to: 0
 10086  0150C6  51F2               	movf	_lBufferY& (0+255),w,b
 10087  0150C8  0D14               	mullw	20
 10088  0150CA  0E18               	movlw	low _lBuffer
 10089  0150CC  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 10090  0150CE  0E03               	movlw	high _lBuffer
 10091  0150D0  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 10092  0150D2  50F3               	movf	prodl,w,c
 10093  0150D4  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 10094  0150D6  50F4               	movf	prodh,w,c
 10095  0150D8  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 10096  0150DA  51F3               	movf	_lBufferX& (0+255),w,b
 10097  0150DC  0D01               	mullw	1
 10098  0150DE  50F3               	movf	prodl,w,c
 10099  0150E0  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 10100  0150E2  6ED9               	movwf	fsr2l,c
 10101  0150E4  50F4               	movf	prodh,w,c
 10102  0150E6  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 10103  0150E8  6EDA               	movwf	fsr2h,c
 10104  0150EA  0E80               	movlw	128
 10105  0150EC  6EDF               	movwf	indf2,c
 10106                           
 10107                           ; BSR set to: 0
 10108  0150EE  0012               	return		;funcret
 10109  0150F0                     __end_of_Console_ClearCursor:
 10110                           	opt stack 0
 10111                           tosu	equ	0xFFF
 10112                           tosh	equ	0xFFE
 10113                           tosl	equ	0xFFD
 10114                           pclath	equ	0xFFA
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           postinc0	equ	0xFEE
 10123                           wreg	equ	0xFE8
 10124                           postdec1	equ	0xFE5
 10125                           plusw1	equ	0xFE3
 10126                           fsr1h	equ	0xFE2
 10127                           fsr1l	equ	0xFE1
 10128                           indf2	equ	0xFDF
 10129                           postinc2	equ	0xFDE
 10130                           postdec2	equ	0xFDD
 10131                           plusw2	equ	0xFDB
 10132                           fsr2h	equ	0xFDA
 10133                           fsr2l	equ	0xFD9
 10134                           status	equ	0xFD8
 10135                           
 10136 ;; *************** function _Console_Render *****************
 10137 ;; Defined at:
 10138 ;;		line 377 in file "Library/Console.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;		None
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;  lCursor         4   38[BANK0 ] struct Point
 10143 ;;  y               1   43[BANK0 ] unsigned char 
 10144 ;;  x               1   42[BANK0 ] unsigned char 
 10145 ;;  temp            1   37[BANK0 ] unsigned char 
 10146 ;;  Temp            2    0        unsigned short 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  1    wreg      void 
 10149 ;; Registers used:
 10150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;Total ram usage:        9 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:   11
 10163 ;; This function calls:
 10164 ;;		_Console_MakeField
 10165 ;;		_LCD_DrawField
 10166 ;;		_LCD_FillRectangle
 10167 ;; This function is called by:
 10168 ;;		_main
 10169 ;;		_Init_Pos_Array
 10170 ;;		_Sensor_Observe
 10171 ;;		_Closest_Object
 10172 ;;		_giveID
 10173 ;;		_Travel
 10174 ;;		_Find_Flag
 10175 ;;		_Move_ADC_To
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           	psect	text45
 10180  011D1E                     __ptext45:
 10181                           	opt stack 0
 10182  011D1E                     _Console_Render:
 10183                           	opt stack 18
 10184                           
 10185                           ;Console.c: 379: Colour Temp;
 10186                           ;Console.c: 380: if (change)
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;incstack = 0
 10190  011D1E  0100               	movlb	0	; () banked
 10191  011D20  51F5               	movf	_change& (0+255),w,b
 10192  011D22  B4D8               	btfsc	status,2,c
 10193  011D24  0012               	return	
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;Console.c: 381: {
 10197                           ;Console.c: 382: UINT8 x, y, temp;
 10198                           ;Console.c: 383: Point lCursor = {6,6};
 10199  011D26  C1E5  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 10200  011D2A  C1E6  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10201  011D2E  C1E7  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10202  011D32  C1E8  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;Console.c: 385: if (clearall)
 10206  011D36  51F4               	movf	_clearall& (0+255),w,b
 10207  011D38  B4D8               	btfsc	status,2,c
 10208  011D3A  D004               	goto	l1056
 10209                           
 10210                           ; BSR set to: 0
 10211                           ;Console.c: 386: {
 10212                           ;Console.c: 389: temp = lBufferY;
 10213  011D3C  C0F2  F085         	movff	_lBufferY,Console_Render@temp
 10214                           
 10215                           ; BSR set to: 0
 10216                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10217  011D40  0E0F               	movlw	15
 10218  011D42  6FF2               	movwf	_lBufferY& (0+255),b
 10219  011D44                     l1056:
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;Console.c: 391: }
 10223                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10224  011D44  0E00               	movlw	0
 10225  011D46  6F8B               	movwf	Console_Render@y& (0+255),b
 10226  011D48  D0B9               	goto	l1057
 10227  011D4A                     
 10228                           ; BSR set to: 0
 10229                           ;Console.c: 394: {
 10230                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10231                           
 10232                           ; BSR set to: 0
 10233  011D4A  518B               	movf	Console_Render@y& (0+255),w,b
 10234  011D4C  0D02               	mullw	2
 10235  011D4E  0E50               	movlw	low _lCBuffer
 10236  011D50  24F3               	addwf	prodl,w,c
 10237  011D52  6ED9               	movwf	fsr2l,c
 10238  011D54  0E02               	movlw	high _lCBuffer
 10239  011D56  20F4               	addwfc	prodh,w,c
 10240  011D58  6EDA               	movwf	fsr2h,c
 10241  011D5A  CFDE F1F7          	movff	postinc2,_gForecolour
 10242  011D5E  CFDD F1F8          	movff	postdec2,_gForecolour+1
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10246  011D62  0E00               	movlw	0
 10247  011D64  6F8A               	movwf	Console_Render@x& (0+255),b
 10248  011D66                     l14828:
 10249                           
 10250                           ; BSR set to: 0
 10251  011D66  0E13               	movlw	19
 10252  011D68  658A               	cpfsgt	Console_Render@x& (0+255),b
 10253  011D6A  D001               	goto	l1059
 10254  011D6C  D09E               	goto	u12090
 10255  011D6E                     l1059:
 10256                           
 10257                           ; BSR set to: 0
 10258                           ;Console.c: 397: {
 10259                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10260                           
 10261                           ; BSR set to: 0
 10262  011D6E  518B               	movf	Console_Render@y& (0+255),w,b
 10263  011D70  0D14               	mullw	20
 10264  011D72  0E18               	movlw	low _lBuffer
 10265  011D74  6F83               	movwf	??_Console_Render& (0+255),b
 10266  011D76  0E03               	movlw	high _lBuffer
 10267  011D78  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 10268  011D7A  50F3               	movf	prodl,w,c
 10269  011D7C  2783               	addwf	??_Console_Render& (0+255),f,b
 10270  011D7E  50F4               	movf	prodh,w,c
 10271  011D80  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10272  011D82  518A               	movf	Console_Render@x& (0+255),w,b
 10273  011D84  0D01               	mullw	1
 10274  011D86  50F3               	movf	prodl,w,c
 10275  011D88  2583               	addwf	??_Console_Render& (0+255),w,b
 10276  011D8A  6ED9               	movwf	fsr2l,c
 10277  011D8C  50F4               	movf	prodh,w,c
 10278  011D8E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10279  011D90  6EDA               	movwf	fsr2h,c
 10280  011D92  AEDF               	btfss	indf2,7,c
 10281  011D94  D083               	goto	l1063
 10282                           
 10283                           ; BSR set to: 0
 10284                           ;Console.c: 399: {
 10285                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10286  011D96  518B               	movf	Console_Render@y& (0+255),w,b
 10287  011D98  0D14               	mullw	20
 10288  011D9A  0E18               	movlw	low _lBuffer
 10289  011D9C  6F83               	movwf	??_Console_Render& (0+255),b
 10290  011D9E  0E03               	movlw	high _lBuffer
 10291  011DA0  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 10292  011DA2  50F3               	movf	prodl,w,c
 10293  011DA4  2783               	addwf	??_Console_Render& (0+255),f,b
 10294  011DA6  50F4               	movf	prodh,w,c
 10295  011DA8  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10296  011DAA  518A               	movf	Console_Render@x& (0+255),w,b
 10297  011DAC  0D01               	mullw	1
 10298  011DAE  50F3               	movf	prodl,w,c
 10299  011DB0  2583               	addwf	??_Console_Render& (0+255),w,b
 10300  011DB2  6ED9               	movwf	fsr2l,c
 10301  011DB4  50F4               	movf	prodh,w,c
 10302  011DB6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10303  011DB8  6EDA               	movwf	fsr2h,c
 10304  011DBA  0E7F               	movlw	127
 10305  011DBC  16DF               	andwf	indf2,f,c
 10306                           
 10307                           ;Console.c: 401: if (lBuffer[y][x])
 10308  011DBE  518B               	movf	Console_Render@y& (0+255),w,b
 10309  011DC0  0D14               	mullw	20
 10310  011DC2  0E18               	movlw	low _lBuffer
 10311  011DC4  6F83               	movwf	??_Console_Render& (0+255),b
 10312  011DC6  0E03               	movlw	high _lBuffer
 10313  011DC8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 10314  011DCA  50F3               	movf	prodl,w,c
 10315  011DCC  2783               	addwf	??_Console_Render& (0+255),f,b
 10316  011DCE  50F4               	movf	prodh,w,c
 10317  011DD0  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10318  011DD2  518A               	movf	Console_Render@x& (0+255),w,b
 10319  011DD4  0D01               	mullw	1
 10320  011DD6  50F3               	movf	prodl,w,c
 10321  011DD8  2583               	addwf	??_Console_Render& (0+255),w,b
 10322  011DDA  6ED9               	movwf	fsr2l,c
 10323  011DDC  50F4               	movf	prodh,w,c
 10324  011DDE  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10325  011DE0  6EDA               	movwf	fsr2h,c
 10326  011DE2  50DF               	movf	indf2,w,c
 10327  011DE4  B4D8               	btfsc	status,2,c
 10328  011DE6  D043               	goto	l1062
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;Console.c: 402: {
 10332                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10333  011DE8  C0EC  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10334  011DEC  C0ED  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10335  011DF0  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10336  011DF4  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10337  011DF8  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10338  011DFC  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10339  011E00  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 10340  011E04  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10341  011E08  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10342  011E0C  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10343  011E10  ECB3  F0A4         	call	_LCD_FillRectangle	;wreg free
 10344                           
 10345                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10346  011E14  0100               	movlb	0	; () banked
 10347  011E16  518B               	movf	Console_Render@y& (0+255),w,b
 10348  011E18  0D14               	mullw	20
 10349  011E1A  0E18               	movlw	low _lBuffer
 10350  011E1C  6F83               	movwf	??_Console_Render& (0+255),b
 10351  011E1E  0E03               	movlw	high _lBuffer
 10352  011E20  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 10353  011E22  50F3               	movf	prodl,w,c
 10354  011E24  2783               	addwf	??_Console_Render& (0+255),f,b
 10355  011E26  50F4               	movf	prodh,w,c
 10356  011E28  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10357  011E2A  518A               	movf	Console_Render@x& (0+255),w,b
 10358  011E2C  0D01               	mullw	1
 10359  011E2E  50F3               	movf	prodl,w,c
 10360  011E30  2583               	addwf	??_Console_Render& (0+255),w,b
 10361  011E32  6ED9               	movwf	fsr2l,c
 10362  011E34  50F4               	movf	prodh,w,c
 10363  011E36  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10364  011E38  6EDA               	movwf	fsr2h,c
 10365  011E3A  50DF               	movf	indf2,w,c
 10366  011E3C  EC09  F09D         	call	_Console_MakeField
 10367  011E40  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 10368  011E44  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10369  011E48  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10370  011E4C  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10371  011E50  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10372  011E54  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10373  011E58  C1ED  F078         	movff	_gCharSize,LCD_DrawField@pSize
 10374  011E5C  C1EE  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10375  011E60  C1EF  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10376  011E64  C1F0  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10377  011E68  ECC1  F0A0         	call	_LCD_DrawField	;wreg free
 10378                           
 10379                           ;Console.c: 405: }
 10380  011E6C  D017               	goto	l1063
 10381  011E6E                     l1062:
 10382                           
 10383                           ;Console.c: 406: else
 10384                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10385  011E6E  0E00               	movlw	0
 10386  011E70  0100               	movlb	0	; () banked
 10387  011E72  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10388  011E74  0E00               	movlw	0
 10389  011E76  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10390  011E78  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10391  011E7C  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10392  011E80  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10393  011E84  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10394  011E88  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 10395  011E8C  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10396  011E90  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10397  011E94  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10398  011E98  ECB3  F0A4         	call	_LCD_FillRectangle	;wreg free
 10399  011E9C                     l1063:
 10400                           
 10401                           ;Console.c: 408: }
 10402                           ;Console.c: 409: lCursor.x += (5 + 1);
 10403  011E9C  0E06               	movlw	6
 10404  011E9E  0100               	movlb	0	; () banked
 10405  011EA0  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 10406  011EA2  0E00               	movlw	0
 10407  011EA4  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10408                           
 10409                           ; BSR set to: 0
 10410  011EA6  2B8A               	incf	Console_Render@x& (0+255),f,b
 10411  011EA8  D75E               	goto	l14828
 10412  011EAA                     u12090:
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;Console.c: 410: }
 10416                           ;Console.c: 411: lCursor.y += (7 + 1);
 10417                           
 10418                           ; BSR set to: 0
 10419  011EAA  0E08               	movlw	8
 10420  011EAC  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10421  011EAE  0E00               	movlw	0
 10422  011EB0  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;Console.c: 412: lCursor.x = 6;
 10426  011EB2  0E00               	movlw	0
 10427  011EB4  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10428  011EB6  0E06               	movlw	6
 10429  011EB8  6F86               	movwf	Console_Render@lCursor& (0+255),b
 10430                           
 10431                           ; BSR set to: 0
 10432  011EBA  2B8B               	incf	Console_Render@y& (0+255),f,b
 10433  011EBC                     l1057:
 10434                           
 10435                           ; BSR set to: 0
 10436                           
 10437                           ; BSR set to: 0
 10438  011EBC  518B               	movf	Console_Render@y& (0+255),w,b
 10439  011EBE  5DF2               	subwf	_lBufferY& (0+255),w,b
 10440  011EC0  B0D8               	btfsc	status,0,c
 10441  011EC2  D743               	goto	l1058
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;Console.c: 413: }
 10445                           ;Console.c: 415: if (clearall)
 10446                           
 10447                           ; BSR set to: 0
 10448  011EC4  51F4               	movf	_clearall& (0+255),w,b
 10449  011EC6  B4D8               	btfsc	status,2,c
 10450  011EC8  0012               	return	
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;Console.c: 416: {
 10454                           ;Console.c: 417: clearall = 0;
 10455  011ECA  0E00               	movlw	0
 10456  011ECC  6FF4               	movwf	_clearall& (0+255),b
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;Console.c: 418: lBufferY = temp;
 10460  011ECE  C085  F0F2         	movff	Console_Render@temp,_lBufferY
 10461                           
 10462                           ; BSR set to: 0
 10463  011ED2  0012               	return	
 10464  011ED4                     __end_of_Console_Render:
 10465                           	opt stack 0
 10466                           tosu	equ	0xFFF
 10467                           tosh	equ	0xFFE
 10468                           tosl	equ	0xFFD
 10469                           pclath	equ	0xFFA
 10470                           tblptru	equ	0xFF8
 10471                           tblptrh	equ	0xFF7
 10472                           tblptrl	equ	0xFF6
 10473                           tablat	equ	0xFF5
 10474                           prodh	equ	0xFF4
 10475                           prodl	equ	0xFF3
 10476                           intcon	equ	0xFF2
 10477                           postinc0	equ	0xFEE
 10478                           wreg	equ	0xFE8
 10479                           postdec1	equ	0xFE5
 10480                           plusw1	equ	0xFE3
 10481                           fsr1h	equ	0xFE2
 10482                           fsr1l	equ	0xFE1
 10483                           indf2	equ	0xFDF
 10484                           postinc2	equ	0xFDE
 10485                           postdec2	equ	0xFDD
 10486                           plusw2	equ	0xFDB
 10487                           fsr2h	equ	0xFDA
 10488                           fsr2l	equ	0xFD9
 10489                           status	equ	0xFD8
 10490                           
 10491 ;; *************** function _LCD_FillRectangle *****************
 10492 ;; Defined at:
 10493 ;;		line 318 in file "Library/LCD.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;  pColour         2    9[BANK0 ] unsigned short 
 10496 ;;  pPoint          4   11[BANK0 ] struct Point
 10497 ;;  pSize           4   15[BANK0 ] struct Point
 10498 ;; Auto vars:     Size  Location     Type
 10499 ;;  j               1   22[BANK0 ] unsigned char 
 10500 ;;  i               1   21[BANK0 ] unsigned char 
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10510 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;Total ram usage:       14 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:   10
 10517 ;; This function calls:
 10518 ;;		_LCD_Word_Write
 10519 ;;		_Set_Addr_Window
 10520 ;; This function is called by:
 10521 ;;		_Console_Render
 10522 ;;		_Console_ClearLine
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text46
 10527  014966                     __ptext46:
 10528                           	opt stack 0
 10529  014966                     _LCD_FillRectangle:
 10530                           	opt stack 18
 10531                           
 10532                           ;LCD.c: 320: UINT8 i = 0x00;
 10533                           
 10534                           ; BSR set to: 0
 10535                           ;incstack = 0
 10536  014966  0E00               	movlw	0
 10537  014968  0100               	movlb	0	; () banked
 10538  01496A  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 10539                           
 10540                           ;LCD.c: 321: UINT8 j = 0x00;
 10541  01496C  0E00               	movlw	0
 10542  01496E  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10546  014970  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10547  014974  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10548  014976  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10549  014978  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 10550  01497A  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 10551  01497C  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 10552  01497E  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10553  014980  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10554  014982  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10555  014984  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10556  014986  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 10557  014988  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10558  01498A  EC49  F09E         	call	_Set_Addr_Window
 10559                           
 10560                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10561  01498E  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10562  014992  0100               	movlb	0	; () banked
 10563  014994  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 10564  014996  B4D8               	btfsc	status,2,c
 10565  014998  0012               	return	
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10569                           
 10570                           ; BSR set to: 0
 10571  01499A  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10572  01499E                     l14206:
 10573                           
 10574                           ; BSR set to: 0
 10575  01499E  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 10576  0149A0  B4D8               	btfsc	status,2,c
 10577  0149A2  D009               	goto	u11470
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10581                           
 10582                           ; BSR set to: 0
 10583                           
 10584                           ; BSR set to: 0
 10585  0149A4  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10586  0149A8  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10587  0149AC  ECBA  F0A9         	call	_LCD_Word_Write	;wreg free
 10588  0149B0  0100               	movlb	0	; () banked
 10589  0149B2  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 10590  0149B4  D7F4               	goto	l14206
 10591  0149B6                     u11470:
 10592                           
 10593                           ; BSR set to: 0
 10594                           
 10595                           ; BSR set to: 0
 10596  0149B6  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 10597  0149B8  D7ED               	goto	L7
 10598  0149BA                     __end_of_LCD_FillRectangle:
 10599                           	opt stack 0
 10600                           tosu	equ	0xFFF
 10601                           tosh	equ	0xFFE
 10602                           tosl	equ	0xFFD
 10603                           pclath	equ	0xFFA
 10604                           tblptru	equ	0xFF8
 10605                           tblptrh	equ	0xFF7
 10606                           tblptrl	equ	0xFF6
 10607                           tablat	equ	0xFF5
 10608                           prodh	equ	0xFF4
 10609                           prodl	equ	0xFF3
 10610                           intcon	equ	0xFF2
 10611                           postinc0	equ	0xFEE
 10612                           wreg	equ	0xFE8
 10613                           postdec1	equ	0xFE5
 10614                           plusw1	equ	0xFE3
 10615                           fsr1h	equ	0xFE2
 10616                           fsr1l	equ	0xFE1
 10617                           indf2	equ	0xFDF
 10618                           postinc2	equ	0xFDE
 10619                           postdec2	equ	0xFDD
 10620                           plusw2	equ	0xFDB
 10621                           fsr2h	equ	0xFDA
 10622                           fsr2l	equ	0xFD9
 10623                           status	equ	0xFD8
 10624                           
 10625 ;; *************** function _LCD_DrawField *****************
 10626 ;; Defined at:
 10627 ;;		line 393 in file "Library/LCD.c"
 10628 ;; Parameters:    Size  Location     Type
 10629 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10630 ;;		 -> Console_MakeField@Fill(70), 
 10631 ;;  pPoint          4   20[BANK0 ] struct Point
 10632 ;;  pSize           4   24[BANK0 ] struct Point
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;  count           2   30[BANK0 ] unsigned short 
 10635 ;;  i               1   34[BANK0 ] unsigned char 
 10636 ;;  ymax            1   33[BANK0 ] unsigned char 
 10637 ;;  xmax            1   32[BANK0 ] unsigned char 
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  1    wreg      void 
 10640 ;; Registers used:
 10641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10647 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;Total ram usage:       17 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:   10
 10654 ;; This function calls:
 10655 ;;		_LCD_Word_Write
 10656 ;;		_Set_Addr_Window
 10657 ;;		___wmul
 10658 ;; This function is called by:
 10659 ;;		_Console_Render
 10660 ;; This function uses a non-reentrant model
 10661 ;;
 10662                           
 10663                           	psect	text47
 10664  014182                     __ptext47:
 10665                           	opt stack 0
 10666  014182                     _LCD_DrawField:
 10667                           	opt stack 18
 10668                           
 10669                           ;LCD.c: 396: UINT8 i = 0x00;
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;incstack = 0
 10673  014182  0E00               	movlw	0
 10674  014184  0100               	movlb	0	; () banked
 10675  014186  6F82               	movwf	LCD_DrawField@i& (0+255),b
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10679  014188  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10680  01418A  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10681  01418C  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10685  01418E  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10686  014190  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10687  014192  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10691  014194  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10692  014198  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10693  01419C  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10694  0141A0  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10695  0141A4  ECED  F0A8         	call	___wmul	;wreg free
 10696  0141A8  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 10697  0141AC  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 10698                           
 10699                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10700  0141B0  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10701  0141B4  0100               	movlb	0	; () banked
 10702  0141B6  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 10703  0141B8  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 10704  0141BA  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 10705  0141BC  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 10706  0141BE  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10707  0141C0  EC49  F09E         	call	_Set_Addr_Window
 10708                           
 10709                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10710  0141C4  0E00               	movlw	0
 10711  0141C6  0100               	movlb	0	; () banked
 10712  0141C8  6F82               	movwf	LCD_DrawField@i& (0+255),b
 10713  0141CA  D010               	goto	l183
 10714  0141CC                     
 10715                           ; BSR set to: 0
 10716                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10717                           
 10718                           ; BSR set to: 0
 10719  0141CC  5182               	movf	LCD_DrawField@i& (0+255),w,b
 10720  0141CE  0D02               	mullw	2
 10721  0141D0  50F3               	movf	prodl,w,c
 10722  0141D2  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 10723  0141D4  6ED9               	movwf	fsr2l,c
 10724  0141D6  50F4               	movf	prodh,w,c
 10725  0141D8  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10726  0141DA  6EDA               	movwf	fsr2h,c
 10727  0141DC  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 10728  0141E0  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 10729  0141E4  ECBA  F0A9         	call	_LCD_Word_Write	;wreg free
 10730  0141E8  0100               	movlb	0	; () banked
 10731  0141EA  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 10732  0141EC                     l183:
 10733                           
 10734                           ; BSR set to: 0
 10735                           
 10736                           ; BSR set to: 0
 10737  0141EC  5182               	movf	LCD_DrawField@i& (0+255),w,b
 10738  0141EE  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 10739  0141F0  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10740  0141F2  517E               	movf	LCD_DrawField@count& (0+255),w,b
 10741  0141F4  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 10742  0141F6  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10743  0141F8  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10744  0141FA  B0D8               	btfsc	status,0,c
 10745  0141FC  0012               	return	
 10746  0141FE  D7E6               	goto	l184
 10747  014200                     __end_of_LCD_DrawField:
 10748                           	opt stack 0
 10749                           tosu	equ	0xFFF
 10750                           tosh	equ	0xFFE
 10751                           tosl	equ	0xFFD
 10752                           pclath	equ	0xFFA
 10753                           tblptru	equ	0xFF8
 10754                           tblptrh	equ	0xFF7
 10755                           tblptrl	equ	0xFF6
 10756                           tablat	equ	0xFF5
 10757                           prodh	equ	0xFF4
 10758                           prodl	equ	0xFF3
 10759                           intcon	equ	0xFF2
 10760                           postinc0	equ	0xFEE
 10761                           wreg	equ	0xFE8
 10762                           postdec1	equ	0xFE5
 10763                           plusw1	equ	0xFE3
 10764                           fsr1h	equ	0xFE2
 10765                           fsr1l	equ	0xFE1
 10766                           indf2	equ	0xFDF
 10767                           postinc2	equ	0xFDE
 10768                           postdec2	equ	0xFDD
 10769                           plusw2	equ	0xFDB
 10770                           fsr2h	equ	0xFDA
 10771                           fsr2l	equ	0xFD9
 10772                           status	equ	0xFD8
 10773                           
 10774 ;; *************** function ___wmul *****************
 10775 ;; Defined at:
 10776 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10779 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;  product         2    4[BANK0 ] unsigned int 
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  2    0[BANK0 ] unsigned int 
 10784 ;; Registers used:
 10785 ;;		wreg, status,2, status,0, prodl, prodh
 10786 ;; Tracked objects:
 10787 ;;		On entry : 0/0
 10788 ;;		On exit  : 0/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10791 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;Total ram usage:        6 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    7
 10798 ;; This function calls:
 10799 ;;		Nothing
 10800 ;; This function is called by:
 10801 ;;		_LCD_DrawField
 10802 ;;		_Init_Pos_Array
 10803 ;; This function uses a non-reentrant model
 10804 ;;
 10805                           
 10806                           	psect	text48
 10807  0151DA                     __ptext48:
 10808                           	opt stack 0
 10809  0151DA                     ___wmul:
 10810                           	opt stack 22
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;incstack = 0
 10814  0151DA  0100               	movlb	0	; () banked
 10815  0151DC  5160               	movf	___wmul@multiplier& (0+255),w,b
 10816  0151DE  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10817  0151E0  CFF3 F064          	movff	prodl,___wmul@product
 10818  0151E4  CFF4 F065          	movff	prodh,___wmul@product+1
 10819  0151E8  5160               	movf	___wmul@multiplier& (0+255),w,b
 10820  0151EA  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10821  0151EC  50F3               	movf	prodl,w,c
 10822  0151EE  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10823  0151F0  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10824  0151F2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10825  0151F4  50F3               	movf	prodl,w,c
 10826  0151F6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10827                           
 10828                           ; BSR set to: 0
 10829  0151F8  C064  F060         	movff	___wmul@product,?___wmul
 10830  0151FC  C065  F061         	movff	___wmul@product+1,?___wmul+1
 10831  015200  0012               	return	
 10832  015202                     __end_of___wmul:
 10833                           	opt stack 0
 10834                           tosu	equ	0xFFF
 10835                           tosh	equ	0xFFE
 10836                           tosl	equ	0xFFD
 10837                           pclath	equ	0xFFA
 10838                           tblptru	equ	0xFF8
 10839                           tblptrh	equ	0xFF7
 10840                           tblptrl	equ	0xFF6
 10841                           tablat	equ	0xFF5
 10842                           prodh	equ	0xFF4
 10843                           prodl	equ	0xFF3
 10844                           intcon	equ	0xFF2
 10845                           postinc0	equ	0xFEE
 10846                           wreg	equ	0xFE8
 10847                           postdec1	equ	0xFE5
 10848                           plusw1	equ	0xFE3
 10849                           fsr1h	equ	0xFE2
 10850                           fsr1l	equ	0xFE1
 10851                           indf2	equ	0xFDF
 10852                           postinc2	equ	0xFDE
 10853                           postdec2	equ	0xFDD
 10854                           plusw2	equ	0xFDB
 10855                           fsr2h	equ	0xFDA
 10856                           fsr2l	equ	0xFD9
 10857                           status	equ	0xFD8
 10858                           
 10859 ;; *************** function _Set_Addr_Window *****************
 10860 ;; Defined at:
 10861 ;;		line 214 in file "Library/LCD.c"
 10862 ;; Parameters:    Size  Location     Type
 10863 ;;  xs              1    wreg     unsigned char 
 10864 ;;  ys              1    5[BANK0 ] unsigned char 
 10865 ;;  xe              1    6[BANK0 ] unsigned char 
 10866 ;;  ye              1    7[BANK0 ] unsigned char 
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;  xs              1    8[BANK0 ] unsigned char 
 10869 ;; Return value:  Size  Location     Type
 10870 ;;                  1    wreg      void 
 10871 ;; Registers used:
 10872 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10873 ;; Tracked objects:
 10874 ;;		On entry : 0/0
 10875 ;;		On exit  : 0/0
 10876 ;;		Unchanged: 0/0
 10877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10878 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10879 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10881 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10882 ;;Total ram usage:        4 bytes
 10883 ;; Hardware stack levels used:    1
 10884 ;; Hardware stack levels required when called:    9
 10885 ;; This function calls:
 10886 ;;		_LCD_Write
 10887 ;; This function is called by:
 10888 ;;		_LCD_Fill
 10889 ;;		_LCD_FillRectangle
 10890 ;;		_LCD_DrawField
 10891 ;;		_RAM_Address_Set
 10892 ;;		_LCD_DrawPixel
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           	psect	text49
 10897  013C92                     __ptext49:
 10898                           	opt stack 0
 10899  013C92                     _Set_Addr_Window:
 10900                           	opt stack 19
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;incstack = 0
 10904                           ;Set_Addr_Window@xs stored from wreg
 10905  013C92  0100               	movlb	0	; () banked
 10906  013C94  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 10907                           
 10908                           ;LCD.c: 216: ys+=2;
 10909  013C96  0E02               	movlw	2
 10910  013C98  0100               	movlb	0	; () banked
 10911  013C9A  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 10912                           
 10913                           ;LCD.c: 217: ye+=2;
 10914  013C9C  0E02               	movlw	2
 10915  013C9E  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 10916                           
 10917                           ;LCD.c: 218: xs+=3;
 10918  013CA0  0E03               	movlw	3
 10919  013CA2  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 10920                           
 10921                           ;LCD.c: 219: xe+=3;
 10922  013CA4  0E03               	movlw	3
 10923  013CA6  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 10927  013CA8  0E00               	movlw	0
 10928  013CAA  6F63               	movwf	LCD_Write@mode& (0+255),b
 10929  013CAC  0E2A               	movlw	42
 10930  013CAE  EC5F  F0A9         	call	_LCD_Write
 10931                           
 10932                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 10933  013CB2  0E01               	movlw	1
 10934  013CB4  0100               	movlb	0	; () banked
 10935  013CB6  6F63               	movwf	LCD_Write@mode& (0+255),b
 10936  013CB8  0E00               	movlw	0
 10937  013CBA  EC5F  F0A9         	call	_LCD_Write
 10938                           
 10939                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 10940  013CBE  0E01               	movlw	1
 10941  013CC0  0100               	movlb	0	; () banked
 10942  013CC2  6F63               	movwf	LCD_Write@mode& (0+255),b
 10943  013CC4  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 10944  013CC6  EC5F  F0A9         	call	_LCD_Write
 10945                           
 10946                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 10947  013CCA  0E01               	movlw	1
 10948  013CCC  0100               	movlb	0	; () banked
 10949  013CCE  6F63               	movwf	LCD_Write@mode& (0+255),b
 10950  013CD0  0E00               	movlw	0
 10951  013CD2  EC5F  F0A9         	call	_LCD_Write
 10952                           
 10953                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 10954  013CD6  0E01               	movlw	1
 10955  013CD8  0100               	movlb	0	; () banked
 10956  013CDA  6F63               	movwf	LCD_Write@mode& (0+255),b
 10957  013CDC  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 10958  013CDE  EC5F  F0A9         	call	_LCD_Write
 10959                           
 10960                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 10961  013CE2  0E00               	movlw	0
 10962  013CE4  0100               	movlb	0	; () banked
 10963  013CE6  6F63               	movwf	LCD_Write@mode& (0+255),b
 10964  013CE8  0E2B               	movlw	43
 10965  013CEA  EC5F  F0A9         	call	_LCD_Write
 10966                           
 10967                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 10968  013CEE  0E01               	movlw	1
 10969  013CF0  0100               	movlb	0	; () banked
 10970  013CF2  6F63               	movwf	LCD_Write@mode& (0+255),b
 10971  013CF4  0E00               	movlw	0
 10972  013CF6  EC5F  F0A9         	call	_LCD_Write
 10973                           
 10974                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 10975  013CFA  0E01               	movlw	1
 10976  013CFC  0100               	movlb	0	; () banked
 10977  013CFE  6F63               	movwf	LCD_Write@mode& (0+255),b
 10978  013D00  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 10979  013D02  EC5F  F0A9         	call	_LCD_Write
 10980                           
 10981                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 10982  013D06  0E01               	movlw	1
 10983  013D08  0100               	movlb	0	; () banked
 10984  013D0A  6F63               	movwf	LCD_Write@mode& (0+255),b
 10985  013D0C  0E00               	movlw	0
 10986  013D0E  EC5F  F0A9         	call	_LCD_Write
 10987                           
 10988                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 10989  013D12  0E01               	movlw	1
 10990  013D14  0100               	movlb	0	; () banked
 10991  013D16  6F63               	movwf	LCD_Write@mode& (0+255),b
 10992  013D18  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 10993  013D1A  EC5F  F0A9         	call	_LCD_Write
 10994                           
 10995                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 10996  013D1E  0E00               	movlw	0
 10997  013D20  0100               	movlb	0	; () banked
 10998  013D22  6F63               	movwf	LCD_Write@mode& (0+255),b
 10999  013D24  0E2C               	movlw	44
 11000  013D26  EC5F  F0A9         	call	_LCD_Write
 11001  013D2A  0012               	return		;funcret
 11002  013D2C                     __end_of_Set_Addr_Window:
 11003                           	opt stack 0
 11004                           tosu	equ	0xFFF
 11005                           tosh	equ	0xFFE
 11006                           tosl	equ	0xFFD
 11007                           pclath	equ	0xFFA
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           postinc0	equ	0xFEE
 11016                           wreg	equ	0xFE8
 11017                           postdec1	equ	0xFE5
 11018                           plusw1	equ	0xFE3
 11019                           fsr1h	equ	0xFE2
 11020                           fsr1l	equ	0xFE1
 11021                           indf2	equ	0xFDF
 11022                           postinc2	equ	0xFDE
 11023                           postdec2	equ	0xFDD
 11024                           plusw2	equ	0xFDB
 11025                           fsr2h	equ	0xFDA
 11026                           fsr2l	equ	0xFD9
 11027                           status	equ	0xFD8
 11028                           
 11029 ;; *************** function _LCD_Word_Write *****************
 11030 ;; Defined at:
 11031 ;;		line 198 in file "Library/LCD.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;  value           2    5[BANK0 ] unsigned short 
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;		None
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      void 
 11038 ;; Registers used:
 11039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11045 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11049 ;;Total ram usage:        2 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    9
 11052 ;; This function calls:
 11053 ;;		_LCD_Write
 11054 ;; This function is called by:
 11055 ;;		_LCD_Fill
 11056 ;;		_LCD_FillRectangle
 11057 ;;		_LCD_DrawField
 11058 ;;		_LCD_DrawPixel
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           	psect	text50
 11063  015374                     __ptext50:
 11064                           	opt stack 0
 11065  015374                     _LCD_Word_Write:
 11066                           	opt stack 19
 11067                           
 11068                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 11069                           
 11070                           ;incstack = 0
 11071  015374  0E01               	movlw	1
 11072  015376  0100               	movlb	0	; () banked
 11073  015378  6F63               	movwf	LCD_Write@mode& (0+255),b
 11074  01537A  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 11075  01537C  EC5F  F0A9         	call	_LCD_Write
 11076                           
 11077                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 11078  015380  0E01               	movlw	1
 11079  015382  0100               	movlb	0	; () banked
 11080  015384  6F63               	movwf	LCD_Write@mode& (0+255),b
 11081  015386  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 11082  015388  EC5F  F0A9         	call	_LCD_Write
 11083  01538C  0012               	return		;funcret
 11084  01538E                     __end_of_LCD_Word_Write:
 11085                           	opt stack 0
 11086                           tosu	equ	0xFFF
 11087                           tosh	equ	0xFFE
 11088                           tosl	equ	0xFFD
 11089                           pclath	equ	0xFFA
 11090                           tblptru	equ	0xFF8
 11091                           tblptrh	equ	0xFF7
 11092                           tblptrl	equ	0xFF6
 11093                           tablat	equ	0xFF5
 11094                           prodh	equ	0xFF4
 11095                           prodl	equ	0xFF3
 11096                           intcon	equ	0xFF2
 11097                           postinc0	equ	0xFEE
 11098                           wreg	equ	0xFE8
 11099                           postdec1	equ	0xFE5
 11100                           plusw1	equ	0xFE3
 11101                           fsr1h	equ	0xFE2
 11102                           fsr1l	equ	0xFE1
 11103                           indf2	equ	0xFDF
 11104                           postinc2	equ	0xFDE
 11105                           postdec2	equ	0xFDD
 11106                           plusw2	equ	0xFDB
 11107                           fsr2h	equ	0xFDA
 11108                           fsr2l	equ	0xFD9
 11109                           status	equ	0xFD8
 11110                           
 11111 ;; *************** function _LCD_Write *****************
 11112 ;; Defined at:
 11113 ;;		line 67 in file "Library/LCD.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;  value           1    wreg     unsigned char 
 11116 ;;  mode            1    3[BANK0 ] enum E6761
 11117 ;; Auto vars:     Size  Location     Type
 11118 ;;  value           1    4[BANK0 ] unsigned char 
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      void 
 11121 ;; Registers used:
 11122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11128 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11132 ;;Total ram usage:        2 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    8
 11135 ;; This function calls:
 11136 ;;		_Mode_Set
 11137 ;;		_SPI_Send
 11138 ;; This function is called by:
 11139 ;;		_LCD_Init
 11140 ;;		_LCD_Word_Write
 11141 ;;		_Set_Addr_Window
 11142 ;;		_Set_Rotation
 11143 ;;		_LCD_WriteCMD
 11144 ;;		_LCD_WriteData
 11145 ;;		_LCD_Data_Write
 11146 ;;		_LCD_Data_Write_4k
 11147 ;;		_Invert_Display
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           	psect	text51
 11152  0152BE                     __ptext51:
 11153                           	opt stack 0
 11154  0152BE                     _LCD_Write:
 11155                           	opt stack 20
 11156                           
 11157                           ;incstack = 0
 11158                           ;LCD_Write@value stored from wreg
 11159  0152BE  0100               	movlb	0	; () banked
 11160  0152C0  6F64               	movwf	LCD_Write@value& (0+255),b
 11161                           
 11162                           ;LCD.c: 89: Mode_Set(mode);
 11163  0152C2  0100               	movlb	0	; () banked
 11164  0152C4  5163               	movf	LCD_Write@mode& (0+255),w,b
 11165  0152C6  EC75  F0AA         	call	_Mode_Set
 11166                           
 11167                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 11168  0152CA  0E85               	movlw	low _SPI2
 11169  0152CC  0100               	movlb	0	; () banked
 11170  0152CE  6F60               	movwf	SPI_Send@pInput& (0+255),b
 11171  0152D0  0E01               	movlw	high _SPI2
 11172  0152D2  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 11173  0152D4  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 11174  0152D8  EC9B  F0A2         	call	_SPI_Send	;wreg free
 11175  0152DC  0012               	return		;funcret
 11176  0152DE                     __end_of_LCD_Write:
 11177                           	opt stack 0
 11178                           tosu	equ	0xFFF
 11179                           tosh	equ	0xFFE
 11180                           tosl	equ	0xFFD
 11181                           pclath	equ	0xFFA
 11182                           tblptru	equ	0xFF8
 11183                           tblptrh	equ	0xFF7
 11184                           tblptrl	equ	0xFF6
 11185                           tablat	equ	0xFF5
 11186                           prodh	equ	0xFF4
 11187                           prodl	equ	0xFF3
 11188                           intcon	equ	0xFF2
 11189                           postinc0	equ	0xFEE
 11190                           wreg	equ	0xFE8
 11191                           postdec1	equ	0xFE5
 11192                           plusw1	equ	0xFE3
 11193                           fsr1h	equ	0xFE2
 11194                           fsr1l	equ	0xFE1
 11195                           indf2	equ	0xFDF
 11196                           postinc2	equ	0xFDE
 11197                           postdec2	equ	0xFDD
 11198                           plusw2	equ	0xFDB
 11199                           fsr2h	equ	0xFDA
 11200                           fsr2l	equ	0xFD9
 11201                           status	equ	0xFD8
 11202                           
 11203 ;; *************** function _Mode_Set *****************
 11204 ;; Defined at:
 11205 ;;		line 40 in file "Library/LCD.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;  pMode           1    wreg     enum E6761
 11208 ;; Auto vars:     Size  Location     Type
 11209 ;;  pMode           1    0[BANK0 ] enum E6761
 11210 ;; Return value:  Size  Location     Type
 11211 ;;                  1    wreg      void 
 11212 ;; Registers used:
 11213 ;;		wreg
 11214 ;; Tracked objects:
 11215 ;;		On entry : 0/0
 11216 ;;		On exit  : 0/0
 11217 ;;		Unchanged: 0/0
 11218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;Total ram usage:        1 bytes
 11224 ;; Hardware stack levels used:    1
 11225 ;; Hardware stack levels required when called:    7
 11226 ;; This function calls:
 11227 ;;		Nothing
 11228 ;; This function is called by:
 11229 ;;		_LCD_Write
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233                           	psect	text52
 11234  0154EA                     __ptext52:
 11235                           	opt stack 0
 11236  0154EA                     _Mode_Set:
 11237                           	opt stack 20
 11238                           
 11239                           ;incstack = 0
 11240                           ;Mode_Set@pMode stored from wreg
 11241  0154EA  0100               	movlb	0	; () banked
 11242  0154EC  6F60               	movwf	Mode_Set@pMode& (0+255),b
 11243                           
 11244                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 11245  0154EE  0100               	movlb	0	; () banked
 11246  0154F0  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 11247  0154F2  D002               	bra	u9715
 11248  0154F4  9E85               	bcf	3973,7,c	;volatile
 11249  0154F6  D001               	bra	u9716
 11250  0154F8                     u9715:
 11251  0154F8  8E85               	bsf	3973,7,c	;volatile
 11252  0154FA                     u9716:
 11253  0154FA  0012               	return		;funcret
 11254  0154FC                     __end_of_Mode_Set:
 11255                           	opt stack 0
 11256                           tosu	equ	0xFFF
 11257                           tosh	equ	0xFFE
 11258                           tosl	equ	0xFFD
 11259                           pclath	equ	0xFFA
 11260                           tblptru	equ	0xFF8
 11261                           tblptrh	equ	0xFF7
 11262                           tblptrl	equ	0xFF6
 11263                           tablat	equ	0xFF5
 11264                           prodh	equ	0xFF4
 11265                           prodl	equ	0xFF3
 11266                           intcon	equ	0xFF2
 11267                           postinc0	equ	0xFEE
 11268                           wreg	equ	0xFE8
 11269                           postdec1	equ	0xFE5
 11270                           plusw1	equ	0xFE3
 11271                           fsr1h	equ	0xFE2
 11272                           fsr1l	equ	0xFE1
 11273                           indf2	equ	0xFDF
 11274                           postinc2	equ	0xFDE
 11275                           postdec2	equ	0xFDD
 11276                           plusw2	equ	0xFDB
 11277                           fsr2h	equ	0xFDA
 11278                           fsr2l	equ	0xFD9
 11279                           status	equ	0xFD8
 11280                           
 11281 ;; *************** function _Console_MakeField *****************
 11282 ;; Defined at:
 11283 ;;		line 435 in file "Library/Console.c"
 11284 ;; Parameters:    Size  Location     Type
 11285 ;;  pInput          1    wreg     unsigned char 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  pInput          1   11[BANK0 ] unsigned char 
 11288 ;;  y               1   17[BANK0 ] unsigned char 
 11289 ;;  x               1   16[BANK0 ] unsigned char 
 11290 ;;  Column          2   12[BANK0 ] PTR struct Byte
 11291 ;;		 -> Font5x7(480), 
 11292 ;;  Index           2    9[BANK0 ] unsigned short 
 11293 ;; Return value:  Size  Location     Type
 11294 ;;                  2    5[BANK0 ] PTR unsigned short 
 11295 ;; Registers used:
 11296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11297 ;; Tracked objects:
 11298 ;;		On entry : 0/0
 11299 ;;		On exit  : 0/0
 11300 ;;		Unchanged: 0/0
 11301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11303 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;Total ram usage:       13 bytes
 11307 ;; Hardware stack levels used:    1
 11308 ;; Hardware stack levels required when called:    8
 11309 ;; This function calls:
 11310 ;;		_Byte_GetBit
 11311 ;; This function is called by:
 11312 ;;		_Console_Render
 11313 ;; This function uses a non-reentrant model
 11314 ;;
 11315                           
 11316                           	psect	text53
 11317  013A12                     __ptext53:
 11318                           	opt stack 0
 11319  013A12                     _Console_MakeField:
 11320                           	opt stack 20
 11321                           
 11322                           ;incstack = 0
 11323                           ;Console_MakeField@pInput stored from wreg
 11324  013A12  0100               	movlb	0	; () banked
 11325  013A14  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 11326                           
 11327                           ;Console.c: 437: static Colour Fill[7][5];
 11328                           ;Console.c: 438: pInput -= 32;
 11329  013A16  0E20               	movlw	32
 11330  013A18  0100               	movlb	0	; () banked
 11331  013A1A  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 11335  013A1C  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 11336  013A1E  0D05               	mullw	5
 11337  013A20  CFF3 F069          	movff	prodl,Console_MakeField@Index
 11338  013A24  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 11342  013A28  0EA3               	movlw	low _Font5x7
 11343  013A2A  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 11344  013A2C  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 11345  013A2E  0EFC               	movlw	high _Font5x7
 11346  013A30  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 11347  013A32  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 11351  013A34  0E00               	movlw	0
 11352  013A36  6F70               	movwf	Console_MakeField@x& (0+255),b
 11353  013A38                     l14428:
 11354                           
 11355                           ; BSR set to: 0
 11356  013A38  0E04               	movlw	4
 11357  013A3A  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 11358  013A3C  D001               	goto	l1077
 11359  013A3E  D037               	goto	u11660
 11360  013A40                     l1077:
 11361                           
 11362                           ; BSR set to: 0
 11363                           ;Console.c: 444: {
 11364                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 11365                           
 11366                           ; BSR set to: 0
 11367  013A40  0E00               	movlw	0
 11368  013A42  6F71               	movwf	Console_MakeField@y& (0+255),b
 11369  013A44                     l14434:
 11370                           
 11371                           ; BSR set to: 0
 11372  013A44  0E06               	movlw	6
 11373  013A46  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 11374  013A48  D001               	goto	l1079
 11375  013A4A  D02D               	goto	u11650
 11376  013A4C                     l1079:
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 11380                           
 11381                           ; BSR set to: 0
 11382  013A4C  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 11383  013A50  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 11384  013A54  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 11385  013A58  ECD7  F0A8         	call	_Byte_GetBit	;wreg free
 11386  013A5C  0900               	iorlw	0
 11387  013A5E  A4D8               	btfss	status,2,c
 11388  013A60  D005               	goto	l1082
 11389  013A62  C0EC  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 11390  013A66  C0ED  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 11391  013A6A  D004               	goto	l1084
 11392  013A6C                     l1082:
 11393  013A6C  C1F7  F06E         	movff	_gForecolour,_Console_MakeField$10974
 11394  013A70  C1F8  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 11395  013A74                     l1084:
 11396  013A74  0100               	movlb	0	; () banked
 11397  013A76  5171               	movf	Console_MakeField@y& (0+255),w,b
 11398  013A78  0D0A               	mullw	10
 11399  013A7A  0E82               	movlw	low Console_MakeField@Fill
 11400  013A7C  6F67               	movwf	??_Console_MakeField& (0+255),b
 11401  013A7E  0E02               	movlw	high Console_MakeField@Fill
 11402  013A80  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 11403  013A82  50F3               	movf	prodl,w,c
 11404  013A84  2767               	addwf	??_Console_MakeField& (0+255),f,b
 11405  013A86  50F4               	movf	prodh,w,c
 11406  013A88  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 11407  013A8A  5170               	movf	Console_MakeField@x& (0+255),w,b
 11408  013A8C  0D02               	mullw	2
 11409  013A8E  50F3               	movf	prodl,w,c
 11410  013A90  2567               	addwf	??_Console_MakeField& (0+255),w,b
 11411  013A92  6ED9               	movwf	fsr2l,c
 11412  013A94  50F4               	movf	prodh,w,c
 11413  013A96  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 11414  013A98  6EDA               	movwf	fsr2h,c
 11415  013A9A  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 11416  013A9E  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 11417                           
 11418                           ; BSR set to: 0
 11419  013AA2  2B71               	incf	Console_MakeField@y& (0+255),f,b
 11420  013AA4  D7CF               	goto	l14434
 11421  013AA6                     u11650:
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;Console.c: 447: Column += 1;
 11425                           
 11426                           ; BSR set to: 0
 11427  013AA6  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 11428  013AA8  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 11429  013AAA  2B70               	incf	Console_MakeField@x& (0+255),f,b
 11430  013AAC  D7C5               	goto	l14428
 11431  013AAE                     u11660:
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;Console.c: 448: }
 11435                           ;Console.c: 449: return (ColourPtr)Fill;
 11436                           
 11437                           ; BSR set to: 0
 11438  013AAE  0E82               	movlw	low Console_MakeField@Fill
 11439  013AB0  6F65               	movwf	?_Console_MakeField& (0+255),b
 11440  013AB2  0E02               	movlw	high Console_MakeField@Fill
 11441  013AB4  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 11442  013AB6  0012               	return	
 11443  013AB8                     __end_of_Console_MakeField:
 11444                           	opt stack 0
 11445                           tosu	equ	0xFFF
 11446                           tosh	equ	0xFFE
 11447                           tosl	equ	0xFFD
 11448                           pclath	equ	0xFFA
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           intcon	equ	0xFF2
 11456                           postinc0	equ	0xFEE
 11457                           wreg	equ	0xFE8
 11458                           postdec1	equ	0xFE5
 11459                           plusw1	equ	0xFE3
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           plusw2	equ	0xFDB
 11466                           fsr2h	equ	0xFDA
 11467                           fsr2l	equ	0xFD9
 11468                           status	equ	0xFD8
 11469                           
 11470 ;; *************** function _Byte_GetBit *****************
 11471 ;; Defined at:
 11472 ;;		line 38 in file "Library/Types.c"
 11473 ;; Parameters:    Size  Location     Type
 11474 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11475 ;;		 -> Font5x7(480), 
 11476 ;;  pBit            1    2[BANK0 ] unsigned char 
 11477 ;; Auto vars:     Size  Location     Type
 11478 ;;  Output          1    4[BANK0 ] unsigned char 
 11479 ;; Return value:  Size  Location     Type
 11480 ;;                  1    wreg      unsigned char 
 11481 ;; Registers used:
 11482 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11488 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;Total ram usage:        5 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; Hardware stack levels required when called:    7
 11495 ;; This function calls:
 11496 ;;		Nothing
 11497 ;; This function is called by:
 11498 ;;		_Console_MakeField
 11499 ;;		_Word_GetBit
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           	psect	text54
 11504  0151AE                     __ptext54:
 11505                           	opt stack 0
 11506  0151AE                     _Byte_GetBit:
 11507                           	opt stack 20
 11508                           
 11509                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11510                           
 11511                           ; BSR set to: 0
 11512                           ;incstack = 0
 11513  0151AE  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11514  0151B2  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11515  0151B6                     	if	0	;tblptru may be non-zero
 11516  0151B6                     	endif
 11517  0151B6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11518  0151B6  0E00               	movlw	low (__mediumconst shr (0+16))
 11519  0151B8  6EF8               	movwf	tblptru,c
 11520  0151BA                     	endif
 11521  0151BA  0008               	tblrd		*
 11522  0151BC  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 11523                           
 11524                           ;Types.c: 42: Output >>= pBit;
 11525  0151C0  0100               	movlb	0	; () banked
 11526  0151C2  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 11527  0151C4  6F63               	movwf	??_Byte_GetBit& (0+255),b
 11528  0151C6  D002               	goto	u11030
 11529  0151C8                     u11035:
 11530  0151C8  90D8               	bcf	status,0,c
 11531  0151CA  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11532  0151CC                     u11030:
 11533  0151CC  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 11534  0151CE  D7FC               	goto	u11035
 11535                           
 11536                           ;Types.c: 43: Output &= 1;
 11537  0151D0  0E01               	movlw	1
 11538  0151D2  0100               	movlb	0	; () banked
 11539  0151D4  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;Types.c: 44: return Output;
 11543  0151D6  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 11544  0151D8  0012               	return	
 11545  0151DA                     __end_of_Byte_GetBit:
 11546                           	opt stack 0
 11547                           tosu	equ	0xFFF
 11548                           tosh	equ	0xFFE
 11549                           tosl	equ	0xFFD
 11550                           pclath	equ	0xFFA
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           postinc0	equ	0xFEE
 11559                           wreg	equ	0xFE8
 11560                           postdec1	equ	0xFE5
 11561                           plusw1	equ	0xFE3
 11562                           fsr1h	equ	0xFE2
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           plusw2	equ	0xFDB
 11568                           fsr2h	equ	0xFDA
 11569                           fsr2l	equ	0xFD9
 11570                           status	equ	0xFD8
 11571                           
 11572 ;; *************** function _InitSerialCommunication *****************
 11573 ;; Defined at:
 11574 ;;		line 91 in file "main.c"
 11575 ;; Parameters:    Size  Location     Type
 11576 ;;		None
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;		None
 11579 ;; Return value:  Size  Location     Type
 11580 ;;                  1    wreg      void 
 11581 ;; Registers used:
 11582 ;;		wreg, status,2
 11583 ;; Tracked objects:
 11584 ;;		On entry : 0/0
 11585 ;;		On exit  : 0/0
 11586 ;;		Unchanged: 0/0
 11587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;Total ram usage:        0 bytes
 11593 ;; Hardware stack levels used:    1
 11594 ;; Hardware stack levels required when called:    7
 11595 ;; This function calls:
 11596 ;;		Nothing
 11597 ;; This function is called by:
 11598 ;;		_main
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	text55
 11603  01531E                     __ptext55:
 11604                           	opt stack 0
 11605  01531E                     _InitSerialCommunication:
 11606                           	opt stack 23
 11607                           
 11608                           ;main.c: 93: TRISCbits.TRISC6 = 0;
 11609                           
 11610                           ; BSR set to: 0
 11611                           ;incstack = 0
 11612  01531E  9C94               	bcf	3988,6,c	;volatile
 11613                           
 11614                           ;main.c: 94: TRISCbits.TRISC7 = 1;
 11615  015320  8E94               	bsf	3988,7,c	;volatile
 11616                           
 11617                           ;main.c: 96: TXSTA1 = 0b00100100;
 11618  015322  0E24               	movlw	36
 11619  015324  6EAD               	movwf	4013,c	;volatile
 11620                           
 11621                           ;main.c: 97: RCSTA1 = 0b10010000;
 11622  015326  0E90               	movlw	144
 11623  015328  6EAC               	movwf	4012,c	;volatile
 11624                           
 11625                           ;main.c: 99: BAUDCON1bits.DTRXP = 0;
 11626  01532A  9A7E               	bcf	3966,5,c	;volatile
 11627                           
 11628                           ;main.c: 100: BAUDCON1bits.SCKP = 0;
 11629  01532C  987E               	bcf	3966,4,c	;volatile
 11630                           
 11631                           ;main.c: 101: BAUDCON1bits.WUE = 0;
 11632  01532E  927E               	bcf	3966,1,c	;volatile
 11633                           
 11634                           ;main.c: 102: BAUDCON1bits.ABDEN = 0;
 11635  015330  907E               	bcf	3966,0,c	;volatile
 11636                           
 11637                           ;main.c: 105: TXSTA1bits.BRGH = 1;
 11638  015332  84AD               	bsf	4013,2,c	;volatile
 11639                           
 11640                           ;main.c: 106: BAUDCON1bits.BRG16 = 0;
 11641  015334  967E               	bcf	3966,3,c	;volatile
 11642                           
 11643                           ;main.c: 107: SPBRG1 = 51;
 11644  015336  0E33               	movlw	51
 11645  015338  6EB0               	movwf	4016,c	;volatile
 11646  01533A  0012               	return		;funcret
 11647  01533C                     __end_of_InitSerialCommunication:
 11648                           	opt stack 0
 11649                           tosu	equ	0xFFF
 11650                           tosh	equ	0xFFE
 11651                           tosl	equ	0xFFD
 11652                           pclath	equ	0xFFA
 11653                           tblptru	equ	0xFF8
 11654                           tblptrh	equ	0xFF7
 11655                           tblptrl	equ	0xFF6
 11656                           tablat	equ	0xFF5
 11657                           prodh	equ	0xFF4
 11658                           prodl	equ	0xFF3
 11659                           intcon	equ	0xFF2
 11660                           postinc0	equ	0xFEE
 11661                           wreg	equ	0xFE8
 11662                           postdec1	equ	0xFE5
 11663                           plusw1	equ	0xFE3
 11664                           fsr1h	equ	0xFE2
 11665                           fsr1l	equ	0xFE1
 11666                           indf2	equ	0xFDF
 11667                           postinc2	equ	0xFDE
 11668                           postdec2	equ	0xFDD
 11669                           plusw2	equ	0xFDB
 11670                           fsr2h	equ	0xFDA
 11671                           fsr2l	equ	0xFD9
 11672                           status	equ	0xFD8
 11673                           
 11674 ;; *************** function _InitADC *****************
 11675 ;; Defined at:
 11676 ;;		line 8 in file "dans.c"
 11677 ;; Parameters:    Size  Location     Type
 11678 ;;		None
 11679 ;; Auto vars:     Size  Location     Type
 11680 ;;		None
 11681 ;; Return value:  Size  Location     Type
 11682 ;;                  1    wreg      void 
 11683 ;; Registers used:
 11684 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11685 ;; Tracked objects:
 11686 ;;		On entry : 0/0
 11687 ;;		On exit  : 0/0
 11688 ;;		Unchanged: 0/0
 11689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11693 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11694 ;;Total ram usage:        1 bytes
 11695 ;; Hardware stack levels used:    1
 11696 ;; Hardware stack levels required when called:    7
 11697 ;; This function calls:
 11698 ;;		Nothing
 11699 ;; This function is called by:
 11700 ;;		_main
 11701 ;; This function uses a non-reentrant model
 11702 ;;
 11703                           
 11704                           	psect	text56
 11705  014C80                     __ptext56:
 11706                           	opt stack 0
 11707  014C80                     _InitADC:
 11708                           	opt stack 23
 11709                           
 11710                           ;dans.c: 10: ADCON1 = 0b10101101;
 11711                           
 11712                           ;incstack = 0
 11713  014C80  0EAD               	movlw	173
 11714  014C82  6EC1               	movwf	4033,c	;volatile
 11715                           
 11716                           ;dans.c: 11: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 11717  014C84  0E00               	movlw	0
 11718  014C86  0101               	movlb	1	; () banked
 11719  014C88  6F37               	movwf	(_thisReading+1)& (0+255),b
 11720  014C8A  0E00               	movlw	0
 11721  014C8C  6F36               	movwf	_thisReading& (0+255),b
 11722  014C8E  D010               	goto	l2270
 11723  014C90                     
 11724                           ;dans.c: 12: readings[thisReading] = 0;
 11725                           
 11726                           ; BSR set to: 1
 11727  014C90  90D8               	bcf	status,0,c
 11728  014C92  0101               	movlb	1	; () banked
 11729  014C94  3536               	rlcf	_thisReading& (0+255),w,b
 11730  014C96  6ED9               	movwf	fsr2l,c
 11731  014C98  3537               	rlcf	(_thisReading+1)& (0+255),w,b
 11732  014C9A  6EDA               	movwf	fsr2h,c
 11733  014C9C  0E6E               	movlw	low _readings
 11734  014C9E  26D9               	addwf	fsr2l,f,c
 11735  014CA0  0E02               	movlw	high _readings
 11736  014CA2  22DA               	addwfc	fsr2h,f,c
 11737  014CA4  0E00               	movlw	0
 11738  014CA6  6EDE               	movwf	postinc2,c
 11739  014CA8  0E00               	movlw	0
 11740  014CAA  6EDD               	movwf	postdec2,c
 11741                           
 11742                           ; BSR set to: 1
 11743  014CAC  4B36               	infsnz	_thisReading& (0+255),f,b
 11744  014CAE  2B37               	incf	(_thisReading+1)& (0+255),f,b
 11745  014CB0                     l2270:
 11746                           
 11747                           ; BSR set to: 1
 11748                           
 11749                           ; BSR set to: 1
 11750  014CB0  5047               	movf	_numReadings,w,c
 11751  014CB2  5D36               	subwf	_thisReading& (0+255),w,b
 11752  014CB4  5137               	movf	(_thisReading+1)& (0+255),w,b
 11753  014CB6  0A80               	xorlw	128
 11754  014CB8  0100               	movlb	0	; () banked
 11755  014CBA  6F60               	movwf	??_InitADC& (0+255),b
 11756  014CBC  5048               	movf	_numReadings+1,w,c
 11757  014CBE  0A80               	xorlw	128
 11758  014CC0  5960               	subwfb	??_InitADC& (0+255),w,b
 11759  014CC2  B0D8               	btfsc	status,0,c
 11760  014CC4  0012               	return	
 11761  014CC6  D7E4               	goto	l2271
 11762  014CC8                     __end_of_InitADC:
 11763                           	opt stack 0
 11764                           tosu	equ	0xFFF
 11765                           tosh	equ	0xFFE
 11766                           tosl	equ	0xFFD
 11767                           pclath	equ	0xFFA
 11768                           tblptru	equ	0xFF8
 11769                           tblptrh	equ	0xFF7
 11770                           tblptrl	equ	0xFF6
 11771                           tablat	equ	0xFF5
 11772                           prodh	equ	0xFF4
 11773                           prodl	equ	0xFF3
 11774                           intcon	equ	0xFF2
 11775                           postinc0	equ	0xFEE
 11776                           wreg	equ	0xFE8
 11777                           postdec1	equ	0xFE5
 11778                           plusw1	equ	0xFE3
 11779                           fsr1h	equ	0xFE2
 11780                           fsr1l	equ	0xFE1
 11781                           indf2	equ	0xFDF
 11782                           postinc2	equ	0xFDE
 11783                           postdec2	equ	0xFDD
 11784                           plusw2	equ	0xFDB
 11785                           fsr2h	equ	0xFDA
 11786                           fsr2l	equ	0xFD9
 11787                           status	equ	0xFD8
 11788                           
 11789 ;; *************** function _ISR_Enable *****************
 11790 ;; Defined at:
 11791 ;;		line 27 in file "Library/ISR.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;		None
 11794 ;; Auto vars:     Size  Location     Type
 11795 ;;		None
 11796 ;; Return value:  Size  Location     Type
 11797 ;;                  1    wreg      void 
 11798 ;; Registers used:
 11799 ;;		None
 11800 ;; Tracked objects:
 11801 ;;		On entry : 0/0
 11802 ;;		On exit  : 0/0
 11803 ;;		Unchanged: 0/0
 11804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11809 ;;Total ram usage:        0 bytes
 11810 ;; Hardware stack levels used:    1
 11811 ;; Hardware stack levels required when called:    7
 11812 ;; This function calls:
 11813 ;;		Nothing
 11814 ;; This function is called by:
 11815 ;;		_main
 11816 ;; This function uses a non-reentrant model
 11817 ;;
 11818                           
 11819                           	psect	text57
 11820  015568                     __ptext57:
 11821                           	opt stack 0
 11822  015568                     _ISR_Enable:
 11823                           	opt stack 23
 11824                           
 11825                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 11826                           
 11827                           ; BSR set to: 0
 11828                           ;incstack = 0
 11829  015568  8CF2               	bsf	intcon,6,c	;volatile
 11830                           
 11831                           ;ISR.c: 30: INTCONbits.GIE = 1;
 11832  01556A  8EF2               	bsf	intcon,7,c	;volatile
 11833                           
 11834                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 11835  01556C  88F2               	bsf	intcon,4,c	;volatile
 11836                           
 11837                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 11838  01556E  92F2               	bcf	intcon,1,c	;volatile
 11839  015570  0012               	return		;funcret
 11840  015572                     __end_of_ISR_Enable:
 11841                           	opt stack 0
 11842                           tosu	equ	0xFFF
 11843                           tosh	equ	0xFFE
 11844                           tosl	equ	0xFFD
 11845                           pclath	equ	0xFFA
 11846                           tblptru	equ	0xFF8
 11847                           tblptrh	equ	0xFF7
 11848                           tblptrl	equ	0xFF6
 11849                           tablat	equ	0xFF5
 11850                           prodh	equ	0xFF4
 11851                           prodl	equ	0xFF3
 11852                           intcon	equ	0xFF2
 11853                           postinc0	equ	0xFEE
 11854                           wreg	equ	0xFE8
 11855                           postdec1	equ	0xFE5
 11856                           plusw1	equ	0xFE3
 11857                           fsr1h	equ	0xFE2
 11858                           fsr1l	equ	0xFE1
 11859                           indf2	equ	0xFDF
 11860                           postinc2	equ	0xFDE
 11861                           postdec2	equ	0xFDD
 11862                           plusw2	equ	0xFDB
 11863                           fsr2h	equ	0xFDA
 11864                           fsr2l	equ	0xFD9
 11865                           status	equ	0xFD8
 11866                           
 11867 ;; *************** function _HMI_Poll *****************
 11868 ;; Defined at:
 11869 ;;		line 252 in file "HMI.c"
 11870 ;; Parameters:    Size  Location     Type
 11871 ;;		None
 11872 ;; Auto vars:     Size  Location     Type
 11873 ;;		None
 11874 ;; Return value:  Size  Location     Type
 11875 ;;                  1    wreg      void 
 11876 ;; Registers used:
 11877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 11878 ;; Tracked objects:
 11879 ;;		On entry : 0/0
 11880 ;;		On exit  : 0/0
 11881 ;;		Unchanged: 0/0
 11882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11887 ;;Total ram usage:        0 bytes
 11888 ;; Hardware stack levels used:    1
 11889 ;; Hardware stack levels required when called:   15
 11890 ;; This function calls:
 11891 ;;		_Button_Poll
 11892 ;; This function is called by:
 11893 ;;		_main
 11894 ;; This function uses a non-reentrant model
 11895 ;;
 11896                           
 11897                           	psect	text58
 11898  014744                     __ptext58:
 11899                           	opt stack 0
 11900  014744                     _HMI_Poll:
 11901                           	opt stack 15
 11902                           
 11903                           ;HMI.c: 254: TRISE = 0xFC;
 11904                           
 11905                           ;incstack = 0
 11906  014744  0EFC               	movlw	252
 11907  014746  6E96               	movwf	3990,c	;volatile
 11908                           
 11909                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 11910  014748  0E7B               	movlw	low (_HMIBoard+48)
 11911  01474A  0100               	movlb	0	; () banked
 11912  01474C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 11913  01474E  0E01               	movlw	high (_HMIBoard+48)
 11914  014750  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 11915  014752  0E01               	movlw	1
 11916  014754  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 11917  014756  EC24  F097         	call	_Button_Poll	;wreg free
 11918                           
 11919                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 11920  01475A  0E5D               	movlw	low (_HMIBoard+18)
 11921  01475C  0100               	movlb	0	; () banked
 11922  01475E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 11923  014760  0E01               	movlw	high (_HMIBoard+18)
 11924  014762  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 11925  014764  0E01               	movlw	1
 11926  014766  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 11927  014768  EC24  F097         	call	_Button_Poll	;wreg free
 11928                           
 11929                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 11930  01476C  0E53               	movlw	low (_HMIBoard+8)
 11931  01476E  0100               	movlb	0	; () banked
 11932  014770  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 11933  014772  0E01               	movlw	high (_HMIBoard+8)
 11934  014774  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 11935  014776  0E01               	movlw	1
 11936  014778  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 11937  01477A  EC24  F097         	call	_Button_Poll	;wreg free
 11938                           
 11939                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 11940  01477E  0E67               	movlw	low (_HMIBoard+28)
 11941  014780  0100               	movlb	0	; () banked
 11942  014782  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 11943  014784  0E01               	movlw	high (_HMIBoard+28)
 11944  014786  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 11945  014788  0E01               	movlw	1
 11946  01478A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 11947  01478C  EC24  F097         	call	_Button_Poll	;wreg free
 11948                           
 11949                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 11950  014790  0E71               	movlw	low (_HMIBoard+38)
 11951  014792  0100               	movlb	0	; () banked
 11952  014794  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 11953  014796  0E01               	movlw	high (_HMIBoard+38)
 11954  014798  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 11955  01479A  0E01               	movlw	1
 11956  01479C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 11957  01479E  EC24  F097         	call	_Button_Poll	;wreg free
 11958  0147A2  0012               	return		;funcret
 11959  0147A4                     __end_of_HMI_Poll:
 11960                           	opt stack 0
 11961                           tosu	equ	0xFFF
 11962                           tosh	equ	0xFFE
 11963                           tosl	equ	0xFFD
 11964                           pclath	equ	0xFFA
 11965                           tblptru	equ	0xFF8
 11966                           tblptrh	equ	0xFF7
 11967                           tblptrl	equ	0xFF6
 11968                           tablat	equ	0xFF5
 11969                           prodh	equ	0xFF4
 11970                           prodl	equ	0xFF3
 11971                           intcon	equ	0xFF2
 11972                           postinc0	equ	0xFEE
 11973                           wreg	equ	0xFE8
 11974                           postdec1	equ	0xFE5
 11975                           plusw1	equ	0xFE3
 11976                           fsr1h	equ	0xFE2
 11977                           fsr1l	equ	0xFE1
 11978                           indf2	equ	0xFDF
 11979                           postinc2	equ	0xFDE
 11980                           postdec2	equ	0xFDD
 11981                           plusw2	equ	0xFDB
 11982                           fsr2h	equ	0xFDA
 11983                           fsr2l	equ	0xFD9
 11984                           status	equ	0xFD8
 11985                           
 11986 ;; *************** function _Button_Poll *****************
 11987 ;; Defined at:
 11988 ;;		line 57 in file "Library/Button.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 11991 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 11992 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;  Pin             1   35[BANK0 ] unsigned char 
 11995 ;; Return value:  Size  Location     Type
 11996 ;;                  1    wreg      unsigned char 
 11997 ;; Registers used:
 11998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 11999 ;; Tracked objects:
 12000 ;;		On entry : 0/0
 12001 ;;		On exit  : 0/0
 12002 ;;		Unchanged: 0/0
 12003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12004 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12006 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12007 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12008 ;;Total ram usage:        9 bytes
 12009 ;; Hardware stack levels used:    1
 12010 ;; Hardware stack levels required when called:   14
 12011 ;; This function calls:
 12012 ;;		_Event_DIPSwitch
 12013 ;;		_Event_NULL
 12014 ;;		_Event_TestButton
 12015 ;;		_HMI_DIPSwitch
 12016 ;;		_HMI_DownSwitch
 12017 ;;		_HMI_LeftSwitch
 12018 ;;		_HMI_RightSwitch
 12019 ;;		_HMI_UpSwitch
 12020 ;;		_MXK_DIPSwitch
 12021 ;;		_MXK_TestButton
 12022 ;; This function is called by:
 12023 ;;		_HMI_Poll
 12024 ;;		_MXK_Poll
 12025 ;; This function uses a non-reentrant model
 12026 ;;
 12027                           
 12028                           	psect	text59
 12029  012E48                     __ptext59:
 12030                           	opt stack 0
 12031  012E48                     _Button_Poll:
 12032                           	opt stack 15
 12033                           
 12034                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 12035                           
 12036                           ;incstack = 0
 12037  012E48  0100               	movlb	0	; () banked
 12038  012E4A  EE20 F007          	lfsr	2,7
 12039  012E4E  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12040  012E50  26D9               	addwf	fsr2l,f,c
 12041  012E52  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12042  012E54  22DA               	addwfc	fsr2h,f,c
 12043  012E56  D801               	call	u11928
 12044  012E58  D00A               	goto	u11929
 12045  012E5A                     u11928:
 12046  012E5A  0005               	push	
 12047  012E5C  6EFA               	movwf	pclath,c
 12048  012E5E  50DE               	movf	postinc2,w,c
 12049  012E60  6EFD               	movwf	tosl,c
 12050  012E62  50DE               	movf	postinc2,w,c
 12051  012E64  6EFE               	movwf	tosh,c
 12052  012E66  50DE               	movf	postinc2,w,c
 12053  012E68  6EFF               	movwf	tosu,c
 12054  012E6A  50FA               	movf	pclath,w,c
 12055  012E6C  0012               	return		;indir
 12056  012E6E                     u11929:
 12057  012E6E  0100               	movlb	0	; () banked
 12058  012E70  6F83               	movwf	Button_Poll@Pin& (0+255),b
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;Button.c: 61: if (pButton->mState == Pin)
 12062  012E72  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 12063  012E76  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12064  012E7A  5183               	movf	Button_Poll@Pin& (0+255),w,b
 12065  012E7C  18DE               	xorwf	postinc2,w,c
 12066  012E7E  A4D8               	btfss	status,2,c
 12067  012E80  D01C               	goto	l11
 12068                           
 12069                           ; BSR set to: 0
 12070                           ;Button.c: 62: {
 12071                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 12072  012E82  EE20 F001          	lfsr	2,1
 12073  012E86  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12074  012E88  26D9               	addwf	fsr2l,f,c
 12075  012E8A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12076  012E8C  22DA               	addwfc	fsr2h,f,c
 12077  012E8E  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12078  012E90  5CDE               	subwf	postinc2,w,c
 12079  012E92  B0D8               	btfsc	status,0,c
 12080  012E94  D009               	goto	l12
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;Button.c: 66: pButton->mCount = 0;
 12084  012E96  EE20 F001          	lfsr	2,1
 12085  012E9A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12086  012E9C  26D9               	addwf	fsr2l,f,c
 12087  012E9E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12088  012EA0  22DA               	addwfc	fsr2h,f,c
 12089  012EA2  0E00               	movlw	0
 12090  012EA4  6EDF               	movwf	indf2,c
 12091  012EA6  0012               	return	
 12092  012EA8                     l12:
 12093                           
 12094                           ; BSR set to: 0
 12095                           ;Button.c: 67: else
 12096                           ;Button.c: 68: pButton->mCount -= pIncrement;
 12097                           
 12098                           ; BSR set to: 0
 12099  012EA8  EE20 F001          	lfsr	2,1
 12100  012EAC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12101  012EAE  26D9               	addwf	fsr2l,f,c
 12102  012EB0  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12103  012EB2  22DA               	addwfc	fsr2h,f,c
 12104  012EB4  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12105  012EB6  5EDF               	subwf	indf2,f,c
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;Button.c: 69: }
 12109  012EB8  0012               	return	
 12110  012EBA                     l11:
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 12114                           
 12115                           ; BSR set to: 0
 12116  012EBA  EE20 F001          	lfsr	2,1
 12117  012EBE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12118  012EC0  26D9               	addwf	fsr2l,f,c
 12119  012EC2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12120  012EC4  22DA               	addwfc	fsr2h,f,c
 12121  012EC6  50DF               	movf	indf2,w,c
 12122  012EC8  6F7E               	movwf	??_Button_Poll& (0+255),b
 12123  012ECA  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 12124  012ECC  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12125  012ECE  277E               	addwf	??_Button_Poll& (0+255),f,b
 12126  012ED0  0E00               	movlw	0
 12127  012ED2  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 12128  012ED4  EE20 F001          	lfsr	2,1
 12129  012ED8  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12130  012EDA  26D9               	addwf	fsr2l,f,c
 12131  012EDC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12132  012EDE  22DA               	addwfc	fsr2h,f,c
 12133  012EE0  50DF               	movf	indf2,w,c
 12134  012EE2  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 12135  012EE4  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 12136  012EE6  517E               	movf	??_Button_Poll& (0+255),w,b
 12137  012EE8  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12138  012EEA  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 12139  012EEC  0A80               	xorlw	128
 12140  012EEE  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 12141  012EF0  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 12142  012EF2  0A80               	xorlw	128
 12143  012EF4  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 12144  012EF6  B0D8               	btfsc	status,0,c
 12145  012EF8  0012               	return	
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;Button.c: 73: {
 12149                           ;Button.c: 75: pButton->mCount += pIncrement;
 12150  012EFA  EE20 F001          	lfsr	2,1
 12151  012EFE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12152  012F00  26D9               	addwf	fsr2l,f,c
 12153  012F02  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12154  012F04  22DA               	addwfc	fsr2h,f,c
 12155  012F06  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 12156  012F08  26DF               	addwf	indf2,f,c
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 12160  012F0A  EE20 F002          	lfsr	2,2
 12161  012F0E  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12162  012F10  26D9               	addwf	fsr2l,f,c
 12163  012F12  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12164  012F14  22DA               	addwfc	fsr2h,f,c
 12165  012F16  EE10 F001          	lfsr	1,1
 12166  012F1A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12167  012F1C  26E1               	addwf	fsr1l,f,c
 12168  012F1E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12169  012F20  22E2               	addwfc	fsr1h,f,c
 12170  012F22  50E7               	movf	indf1,w,c
 12171  012F24  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 12172  012F26  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 12173  012F28  50DE               	movf	postinc2,w,c
 12174  012F2A  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12175  012F2C  50DE               	movf	postinc2,w,c
 12176  012F2E  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 12177  012F30  A0D8               	btfss	status,0,c
 12178  012F32  0012               	return	
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;Button.c: 77: {
 12182                           ;Button.c: 79: pButton->mState = Pin;
 12183  012F34  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 12184  012F38  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12185  012F3C  C083  FFDF         	movff	Button_Poll@Pin,indf2
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;Button.c: 80: pButton->mCount = 0;
 12189  012F40  EE20 F001          	lfsr	2,1
 12190  012F44  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12191  012F46  26D9               	addwf	fsr2l,f,c
 12192  012F48  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12193  012F4A  22DA               	addwfc	fsr2h,f,c
 12194  012F4C  0E00               	movlw	0
 12195  012F4E  6EDF               	movwf	indf2,c
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;Button.c: 83: pButton->mFunction(Pin);
 12199  012F50  EE20 F004          	lfsr	2,4
 12200  012F54  517B               	movf	Button_Poll@pButton& (0+255),w,b
 12201  012F56  26D9               	addwf	fsr2l,f,c
 12202  012F58  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12203  012F5A  22DA               	addwfc	fsr2h,f,c
 12204  012F5C  D801               	call	u11978
 12205  012F5E  0012               	return	
 12206  012F60                     u11978:
 12207  012F60  0005               	push	
 12208  012F62  6EFA               	movwf	pclath,c
 12209  012F64  50DE               	movf	postinc2,w,c
 12210  012F66  6EFD               	movwf	tosl,c
 12211  012F68  50DE               	movf	postinc2,w,c
 12212  012F6A  6EFE               	movwf	tosh,c
 12213  012F6C  50DE               	movf	postinc2,w,c
 12214  012F6E  6EFF               	movwf	tosu,c
 12215  012F70  50FA               	movf	pclath,w,c
 12216  012F72  5183               	movf	Button_Poll@Pin& (0+255),w,b
 12217  012F74  0012               	return		;indir
 12218  012F76                     __end_of_Button_Poll:
 12219                           	opt stack 0
 12220                           tosu	equ	0xFFF
 12221                           tosh	equ	0xFFE
 12222                           tosl	equ	0xFFD
 12223                           pclath	equ	0xFFA
 12224                           tblptru	equ	0xFF8
 12225                           tblptrh	equ	0xFF7
 12226                           tblptrl	equ	0xFF6
 12227                           tablat	equ	0xFF5
 12228                           prodh	equ	0xFF4
 12229                           prodl	equ	0xFF3
 12230                           intcon	equ	0xFF2
 12231                           postinc0	equ	0xFEE
 12232                           wreg	equ	0xFE8
 12233                           indf1	equ	0xFE7
 12234                           postdec1	equ	0xFE5
 12235                           plusw1	equ	0xFE3
 12236                           fsr1h	equ	0xFE2
 12237                           fsr1l	equ	0xFE1
 12238                           indf2	equ	0xFDF
 12239                           postinc2	equ	0xFDE
 12240                           postdec2	equ	0xFDD
 12241                           plusw2	equ	0xFDB
 12242                           fsr2h	equ	0xFDA
 12243                           fsr2l	equ	0xFD9
 12244                           status	equ	0xFD8
 12245                           
 12246 ;; *************** function _MXK_DIPSwitch *****************
 12247 ;; Defined at:
 12248 ;;		line 24 in file "Library/MXK.c"
 12249 ;; Parameters:    Size  Location     Type
 12250 ;;		None
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;		None
 12253 ;; Return value:  Size  Location     Type
 12254 ;;                  1    wreg      unsigned char 
 12255 ;; Registers used:
 12256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12257 ;; Tracked objects:
 12258 ;;		On entry : 0/0
 12259 ;;		On exit  : 0/0
 12260 ;;		Unchanged: 0/0
 12261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12266 ;;Total ram usage:        0 bytes
 12267 ;; Hardware stack levels used:    1
 12268 ;; Hardware stack levels required when called:    8
 12269 ;; This function calls:
 12270 ;;		_Port_GetQuad
 12271 ;; This function is called by:
 12272 ;;		_FunctInitButton
 12273 ;;		_Button_Poll
 12274 ;;		_main
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           	psect	text60
 12279  01544C                     __ptext60:
 12280                           	opt stack 0
 12281  01544C                     _MXK_DIPSwitch:
 12282                           	opt stack 22
 12283                           
 12284                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 12285                           
 12286                           ;incstack = 0
 12287  01544C  0E9A               	movlw	low _PortD
 12288  01544E  0100               	movlb	0	; () banked
 12289  015450  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 12290  015452  0E01               	movlw	high _PortD
 12291  015454  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12292  015456  0E00               	movlw	0
 12293  015458  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 12294  01545A  EC2D  F0A7         	call	_Port_GetQuad
 12295  01545E  0012               	return	
 12296  015460                     __end_of_MXK_DIPSwitch:
 12297                           	opt stack 0
 12298                           tosu	equ	0xFFF
 12299                           tosh	equ	0xFFE
 12300                           tosl	equ	0xFFD
 12301                           pclath	equ	0xFFA
 12302                           tblptru	equ	0xFF8
 12303                           tblptrh	equ	0xFF7
 12304                           tblptrl	equ	0xFF6
 12305                           tablat	equ	0xFF5
 12306                           prodh	equ	0xFF4
 12307                           prodl	equ	0xFF3
 12308                           intcon	equ	0xFF2
 12309                           postinc0	equ	0xFEE
 12310                           wreg	equ	0xFE8
 12311                           indf1	equ	0xFE7
 12312                           postdec1	equ	0xFE5
 12313                           plusw1	equ	0xFE3
 12314                           fsr1h	equ	0xFE2
 12315                           fsr1l	equ	0xFE1
 12316                           indf2	equ	0xFDF
 12317                           postinc2	equ	0xFDE
 12318                           postdec2	equ	0xFDD
 12319                           plusw2	equ	0xFDB
 12320                           fsr2h	equ	0xFDA
 12321                           fsr2l	equ	0xFD9
 12322                           status	equ	0xFD8
 12323                           
 12324 ;; *************** function _HMI_DIPSwitch *****************
 12325 ;; Defined at:
 12326 ;;		line 47 in file "HMI.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;		None
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;		None
 12331 ;; Return value:  Size  Location     Type
 12332 ;;                  1    wreg      unsigned char 
 12333 ;; Registers used:
 12334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;Total ram usage:        0 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    8
 12347 ;; This function calls:
 12348 ;;		_Port_GetQuad
 12349 ;; This function is called by:
 12350 ;;		_HMI_Init
 12351 ;;		_Button_Poll
 12352 ;;		_main
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           	psect	text61
 12357  015460                     __ptext61:
 12358                           	opt stack 0
 12359  015460                     _HMI_DIPSwitch:
 12360                           	opt stack 20
 12361                           
 12362                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 12363                           
 12364                           ;incstack = 0
 12365  015460  0E90               	movlw	low _PortE
 12366  015462  0100               	movlb	0	; () banked
 12367  015464  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 12368  015466  0E01               	movlw	high _PortE
 12369  015468  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12370  01546A  0E00               	movlw	0
 12371  01546C  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 12372  01546E  EC2D  F0A7         	call	_Port_GetQuad	;wreg free
 12373  015472  0012               	return	
 12374  015474                     __end_of_HMI_DIPSwitch:
 12375                           	opt stack 0
 12376                           tosu	equ	0xFFF
 12377                           tosh	equ	0xFFE
 12378                           tosl	equ	0xFFD
 12379                           pclath	equ	0xFFA
 12380                           tblptru	equ	0xFF8
 12381                           tblptrh	equ	0xFF7
 12382                           tblptrl	equ	0xFF6
 12383                           tablat	equ	0xFF5
 12384                           prodh	equ	0xFF4
 12385                           prodl	equ	0xFF3
 12386                           intcon	equ	0xFF2
 12387                           postinc0	equ	0xFEE
 12388                           wreg	equ	0xFE8
 12389                           indf1	equ	0xFE7
 12390                           postdec1	equ	0xFE5
 12391                           plusw1	equ	0xFE3
 12392                           fsr1h	equ	0xFE2
 12393                           fsr1l	equ	0xFE1
 12394                           indf2	equ	0xFDF
 12395                           postinc2	equ	0xFDE
 12396                           postdec2	equ	0xFDD
 12397                           plusw2	equ	0xFDB
 12398                           fsr2h	equ	0xFDA
 12399                           fsr2l	equ	0xFD9
 12400                           status	equ	0xFD8
 12401                           
 12402 ;; *************** function _HMI_DownSwitch *****************
 12403 ;; Defined at:
 12404 ;;		line 42 in file "HMI.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;		None
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      unsigned char 
 12411 ;; Registers used:
 12412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;Total ram usage:        0 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    8
 12425 ;; This function calls:
 12426 ;;		_Port_GetPin
 12427 ;; This function is called by:
 12428 ;;		_HMI_Init
 12429 ;;		_Button_Poll
 12430 ;;		_main
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           	psect	text62
 12435  015474                     __ptext62:
 12436                           	opt stack 0
 12437  015474                     _HMI_DownSwitch:
 12438                           	opt stack 20
 12439                           
 12440                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 12441                           
 12442                           ;incstack = 0
 12443  015474  0E90               	movlw	low _PortE
 12444  015476  0100               	movlb	0	; () banked
 12445  015478  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12446  01547A  0E01               	movlw	high _PortE
 12447  01547C  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12448  01547E  0E06               	movlw	6
 12449  015480  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12450  015482  EC87  F0A7         	call	_Port_GetPin	;wreg free
 12451  015486  0012               	return	
 12452  015488                     __end_of_HMI_DownSwitch:
 12453                           	opt stack 0
 12454                           tosu	equ	0xFFF
 12455                           tosh	equ	0xFFE
 12456                           tosl	equ	0xFFD
 12457                           pclath	equ	0xFFA
 12458                           tblptru	equ	0xFF8
 12459                           tblptrh	equ	0xFF7
 12460                           tblptrl	equ	0xFF6
 12461                           tablat	equ	0xFF5
 12462                           prodh	equ	0xFF4
 12463                           prodl	equ	0xFF3
 12464                           intcon	equ	0xFF2
 12465                           postinc0	equ	0xFEE
 12466                           wreg	equ	0xFE8
 12467                           indf1	equ	0xFE7
 12468                           postdec1	equ	0xFE5
 12469                           plusw1	equ	0xFE3
 12470                           fsr1h	equ	0xFE2
 12471                           fsr1l	equ	0xFE1
 12472                           indf2	equ	0xFDF
 12473                           postinc2	equ	0xFDE
 12474                           postdec2	equ	0xFDD
 12475                           plusw2	equ	0xFDB
 12476                           fsr2h	equ	0xFDA
 12477                           fsr2l	equ	0xFD9
 12478                           status	equ	0xFD8
 12479                           
 12480 ;; *************** function _HMI_UpSwitch *****************
 12481 ;; Defined at:
 12482 ;;		line 37 in file "HMI.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;		None
 12485 ;; Auto vars:     Size  Location     Type
 12486 ;;		None
 12487 ;; Return value:  Size  Location     Type
 12488 ;;                  1    wreg      unsigned char 
 12489 ;; Registers used:
 12490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12491 ;; Tracked objects:
 12492 ;;		On entry : 0/0
 12493 ;;		On exit  : 0/0
 12494 ;;		Unchanged: 0/0
 12495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12500 ;;Total ram usage:        0 bytes
 12501 ;; Hardware stack levels used:    1
 12502 ;; Hardware stack levels required when called:    8
 12503 ;; This function calls:
 12504 ;;		_Port_GetPin
 12505 ;; This function is called by:
 12506 ;;		_HMI_Init
 12507 ;;		_Button_Poll
 12508 ;;		_main
 12509 ;; This function uses a non-reentrant model
 12510 ;;
 12511                           
 12512                           	psect	text63
 12513  015488                     __ptext63:
 12514                           	opt stack 0
 12515  015488                     _HMI_UpSwitch:
 12516                           	opt stack 22
 12517                           
 12518                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 12519                           
 12520                           ;incstack = 0
 12521  015488  0E90               	movlw	low _PortE
 12522  01548A  0100               	movlb	0	; () banked
 12523  01548C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12524  01548E  0E01               	movlw	high _PortE
 12525  015490  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12526  015492  0E07               	movlw	7
 12527  015494  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12528  015496  EC87  F0A7         	call	_Port_GetPin	;wreg free
 12529  01549A  0012               	return	
 12530  01549C                     __end_of_HMI_UpSwitch:
 12531                           	opt stack 0
 12532                           tosu	equ	0xFFF
 12533                           tosh	equ	0xFFE
 12534                           tosl	equ	0xFFD
 12535                           pclath	equ	0xFFA
 12536                           tblptru	equ	0xFF8
 12537                           tblptrh	equ	0xFF7
 12538                           tblptrl	equ	0xFF6
 12539                           tablat	equ	0xFF5
 12540                           prodh	equ	0xFF4
 12541                           prodl	equ	0xFF3
 12542                           intcon	equ	0xFF2
 12543                           postinc0	equ	0xFEE
 12544                           wreg	equ	0xFE8
 12545                           indf1	equ	0xFE7
 12546                           postdec1	equ	0xFE5
 12547                           plusw1	equ	0xFE3
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           plusw2	equ	0xFDB
 12554                           fsr2h	equ	0xFDA
 12555                           fsr2l	equ	0xFD9
 12556                           status	equ	0xFD8
 12557                           
 12558 ;; *************** function _HMI_RightSwitch *****************
 12559 ;; Defined at:
 12560 ;;		line 32 in file "HMI.c"
 12561 ;; Parameters:    Size  Location     Type
 12562 ;;		None
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;		None
 12565 ;; Return value:  Size  Location     Type
 12566 ;;                  1    wreg      unsigned char 
 12567 ;; Registers used:
 12568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12569 ;; Tracked objects:
 12570 ;;		On entry : 0/0
 12571 ;;		On exit  : 0/0
 12572 ;;		Unchanged: 0/0
 12573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12578 ;;Total ram usage:        0 bytes
 12579 ;; Hardware stack levels used:    1
 12580 ;; Hardware stack levels required when called:    8
 12581 ;; This function calls:
 12582 ;;		_Port_GetPin
 12583 ;; This function is called by:
 12584 ;;		_HMI_Init
 12585 ;;		_Button_Poll
 12586 ;;		_main
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text64
 12591  01549C                     __ptext64:
 12592                           	opt stack 0
 12593  01549C                     _HMI_RightSwitch:
 12594                           	opt stack 22
 12595                           
 12596                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 12597                           
 12598                           ;incstack = 0
 12599  01549C  0E90               	movlw	low _PortE
 12600  01549E  0100               	movlb	0	; () banked
 12601  0154A0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12602  0154A2  0E01               	movlw	high _PortE
 12603  0154A4  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12604  0154A6  0E04               	movlw	4
 12605  0154A8  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12606  0154AA  EC87  F0A7         	call	_Port_GetPin	;wreg free
 12607  0154AE  0012               	return	
 12608  0154B0                     __end_of_HMI_RightSwitch:
 12609                           	opt stack 0
 12610                           tosu	equ	0xFFF
 12611                           tosh	equ	0xFFE
 12612                           tosl	equ	0xFFD
 12613                           pclath	equ	0xFFA
 12614                           tblptru	equ	0xFF8
 12615                           tblptrh	equ	0xFF7
 12616                           tblptrl	equ	0xFF6
 12617                           tablat	equ	0xFF5
 12618                           prodh	equ	0xFF4
 12619                           prodl	equ	0xFF3
 12620                           intcon	equ	0xFF2
 12621                           postinc0	equ	0xFEE
 12622                           wreg	equ	0xFE8
 12623                           indf1	equ	0xFE7
 12624                           postdec1	equ	0xFE5
 12625                           plusw1	equ	0xFE3
 12626                           fsr1h	equ	0xFE2
 12627                           fsr1l	equ	0xFE1
 12628                           indf2	equ	0xFDF
 12629                           postinc2	equ	0xFDE
 12630                           postdec2	equ	0xFDD
 12631                           plusw2	equ	0xFDB
 12632                           fsr2h	equ	0xFDA
 12633                           fsr2l	equ	0xFD9
 12634                           status	equ	0xFD8
 12635                           
 12636 ;; *************** function _HMI_LeftSwitch *****************
 12637 ;; Defined at:
 12638 ;;		line 27 in file "HMI.c"
 12639 ;; Parameters:    Size  Location     Type
 12640 ;;		None
 12641 ;; Auto vars:     Size  Location     Type
 12642 ;;		None
 12643 ;; Return value:  Size  Location     Type
 12644 ;;                  1    wreg      unsigned char 
 12645 ;; Registers used:
 12646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12647 ;; Tracked objects:
 12648 ;;		On entry : 0/0
 12649 ;;		On exit  : 0/0
 12650 ;;		Unchanged: 0/0
 12651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12656 ;;Total ram usage:        0 bytes
 12657 ;; Hardware stack levels used:    1
 12658 ;; Hardware stack levels required when called:    8
 12659 ;; This function calls:
 12660 ;;		_Port_GetPin
 12661 ;; This function is called by:
 12662 ;;		_HMI_Init
 12663 ;;		_Button_Poll
 12664 ;;		_main
 12665 ;; This function uses a non-reentrant model
 12666 ;;
 12667                           
 12668                           	psect	text65
 12669  0154B0                     __ptext65:
 12670                           	opt stack 0
 12671  0154B0                     _HMI_LeftSwitch:
 12672                           	opt stack 20
 12673                           
 12674                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 12675                           
 12676                           ;incstack = 0
 12677  0154B0  0E90               	movlw	low _PortE
 12678  0154B2  0100               	movlb	0	; () banked
 12679  0154B4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12680  0154B6  0E01               	movlw	high _PortE
 12681  0154B8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12682  0154BA  0E05               	movlw	5
 12683  0154BC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12684  0154BE  EC87  F0A7         	call	_Port_GetPin	;wreg free
 12685  0154C2  0012               	return	
 12686  0154C4                     __end_of_HMI_LeftSwitch:
 12687                           	opt stack 0
 12688                           tosu	equ	0xFFF
 12689                           tosh	equ	0xFFE
 12690                           tosl	equ	0xFFD
 12691                           pclath	equ	0xFFA
 12692                           tblptru	equ	0xFF8
 12693                           tblptrh	equ	0xFF7
 12694                           tblptrl	equ	0xFF6
 12695                           tablat	equ	0xFF5
 12696                           prodh	equ	0xFF4
 12697                           prodl	equ	0xFF3
 12698                           intcon	equ	0xFF2
 12699                           postinc0	equ	0xFEE
 12700                           wreg	equ	0xFE8
 12701                           indf1	equ	0xFE7
 12702                           postdec1	equ	0xFE5
 12703                           plusw1	equ	0xFE3
 12704                           fsr1h	equ	0xFE2
 12705                           fsr1l	equ	0xFE1
 12706                           indf2	equ	0xFDF
 12707                           postinc2	equ	0xFDE
 12708                           postdec2	equ	0xFDD
 12709                           plusw2	equ	0xFDB
 12710                           fsr2h	equ	0xFDA
 12711                           fsr2l	equ	0xFD9
 12712                           status	equ	0xFD8
 12713                           
 12714 ;; *************** function _MXK_TestButton *****************
 12715 ;; Defined at:
 12716 ;;		line 14 in file "Library/MXK.c"
 12717 ;; Parameters:    Size  Location     Type
 12718 ;;		None
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;		None
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  1    wreg      unsigned char 
 12723 ;; Registers used:
 12724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12734 ;;Total ram usage:        0 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    8
 12737 ;; This function calls:
 12738 ;;		_Port_GetPin
 12739 ;; This function is called by:
 12740 ;;		_FunctInitButton
 12741 ;;		_Button_Poll
 12742 ;;		_main
 12743 ;; This function uses a non-reentrant model
 12744 ;;
 12745                           
 12746                           	psect	text66
 12747  0154C4                     __ptext66:
 12748                           	opt stack 0
 12749  0154C4                     _MXK_TestButton:
 12750                           	opt stack 22
 12751                           
 12752                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 12753                           
 12754                           ;incstack = 0
 12755  0154C4  0EA4               	movlw	low _PortB
 12756  0154C6  0100               	movlb	0	; () banked
 12757  0154C8  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 12758  0154CA  0E01               	movlw	high _PortB
 12759  0154CC  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 12760  0154CE  0E04               	movlw	4
 12761  0154D0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 12762  0154D2  EC87  F0A7         	call	_Port_GetPin	;wreg free
 12763  0154D6  0012               	return	
 12764  0154D8                     __end_of_MXK_TestButton:
 12765                           	opt stack 0
 12766                           tosu	equ	0xFFF
 12767                           tosh	equ	0xFFE
 12768                           tosl	equ	0xFFD
 12769                           pclath	equ	0xFFA
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           postinc0	equ	0xFEE
 12778                           wreg	equ	0xFE8
 12779                           indf1	equ	0xFE7
 12780                           postdec1	equ	0xFE5
 12781                           plusw1	equ	0xFE3
 12782                           fsr1h	equ	0xFE2
 12783                           fsr1l	equ	0xFE1
 12784                           indf2	equ	0xFDF
 12785                           postinc2	equ	0xFDE
 12786                           postdec2	equ	0xFDD
 12787                           plusw2	equ	0xFDB
 12788                           fsr2h	equ	0xFDA
 12789                           fsr2l	equ	0xFD9
 12790                           status	equ	0xFD8
 12791                           
 12792 ;; *************** function _Port_GetQuad *****************
 12793 ;; Defined at:
 12794 ;;		line 498 in file "Library/Port.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 12797 ;;		 -> PortE(10), PortD(10), 
 12798 ;;  pQuad           1    2[BANK0 ] enum E6776
 12799 ;; Auto vars:     Size  Location     Type
 12800 ;;  Output          1    5[BANK0 ] unsigned char 
 12801 ;; Return value:  Size  Location     Type
 12802 ;;                  1    wreg      unsigned char 
 12803 ;; Registers used:
 12804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12805 ;; Tracked objects:
 12806 ;;		On entry : 0/0
 12807 ;;		On exit  : 0/0
 12808 ;;		Unchanged: 0/0
 12809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12810 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;Total ram usage:        6 bytes
 12815 ;; Hardware stack levels used:    1
 12816 ;; Hardware stack levels required when called:    7
 12817 ;; This function calls:
 12818 ;;		Nothing
 12819 ;; This function is called by:
 12820 ;;		_HMI_DIPSwitch
 12821 ;;		_MXK_DIPSwitch
 12822 ;;		_Port_ToggleQuad
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text67
 12827  014E5A                     __ptext67:
 12828                           	opt stack 0
 12829  014E5A                     _Port_GetQuad:
 12830                           	opt stack 22
 12831                           
 12832                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 12833                           
 12834                           ;incstack = 0
 12835  014E5A  0100               	movlb	0	; () banked
 12836  014E5C  EE20 F006          	lfsr	2,6
 12837  014E60  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 12838  014E62  26D9               	addwf	fsr2l,f,c
 12839  014E64  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 12840  014E66  22DA               	addwfc	fsr2h,f,c
 12841  014E68  CFDE F063          	movff	postinc2,??_Port_GetQuad
 12842  014E6C  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 12843  014E70  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 12844  014E74  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 12845  014E78  50DF               	movf	indf2,w,c
 12846  014E7A  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 12847                           
 12848                           ; BSR set to: 0
 12849                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 12850  014E7C  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 12851  014E7E  0D04               	mullw	4
 12852  014E80  28F3               	incf	prodl,w,c
 12853  014E82  6F63               	movwf	??_Port_GetQuad& (0+255),b
 12854  014E84  D002               	goto	u10980
 12855  014E86                     u10985:
 12856  014E86  90D8               	bcf	status,0,c
 12857  014E88  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 12858  014E8A                     u10980:
 12859  014E8A  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 12860  014E8C  D7FC               	goto	u10985
 12861                           
 12862                           ;Port.c: 502: Output &= 0xF;
 12863  014E8E  0E0F               	movlw	15
 12864  014E90  0100               	movlb	0	; () banked
 12865  014E92  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 12866                           
 12867                           ; BSR set to: 0
 12868                           ;Port.c: 503: return Output;
 12869  014E94  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 12870  014E96  0012               	return	
 12871  014E98                     __end_of_Port_GetQuad:
 12872                           	opt stack 0
 12873                           tosu	equ	0xFFF
 12874                           tosh	equ	0xFFE
 12875                           tosl	equ	0xFFD
 12876                           pclath	equ	0xFFA
 12877                           tblptru	equ	0xFF8
 12878                           tblptrh	equ	0xFF7
 12879                           tblptrl	equ	0xFF6
 12880                           tablat	equ	0xFF5
 12881                           prodh	equ	0xFF4
 12882                           prodl	equ	0xFF3
 12883                           intcon	equ	0xFF2
 12884                           postinc0	equ	0xFEE
 12885                           wreg	equ	0xFE8
 12886                           indf1	equ	0xFE7
 12887                           postdec1	equ	0xFE5
 12888                           plusw1	equ	0xFE3
 12889                           fsr1h	equ	0xFE2
 12890                           fsr1l	equ	0xFE1
 12891                           indf2	equ	0xFDF
 12892                           postinc2	equ	0xFDE
 12893                           postdec2	equ	0xFDD
 12894                           plusw2	equ	0xFDB
 12895                           fsr2h	equ	0xFDA
 12896                           fsr2l	equ	0xFD9
 12897                           status	equ	0xFD8
 12898                           
 12899 ;; *************** function _Event_DIPSwitch *****************
 12900 ;; Defined at:
 12901 ;;		line 22 in file "Events.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;  pState          1    wreg     unsigned char 
 12904 ;; Auto vars:     Size  Location     Type
 12905 ;;  pState          1   25[BANK0 ] unsigned char 
 12906 ;;  Bar             1   26[BANK0 ] unsigned char 
 12907 ;; Return value:  Size  Location     Type
 12908 ;;                  1    wreg      void 
 12909 ;; Registers used:
 12910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12911 ;; Tracked objects:
 12912 ;;		On entry : 0/0
 12913 ;;		On exit  : 0/0
 12914 ;;		Unchanged: 0/0
 12915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12920 ;;Total ram usage:        2 bytes
 12921 ;; Hardware stack levels used:    1
 12922 ;; Hardware stack levels required when called:   13
 12923 ;; This function calls:
 12924 ;;		_HMI_GetBar
 12925 ;;		_HMI_SetBar
 12926 ;;		_LED_Toggle
 12927 ;; This function is called by:
 12928 ;;		_FunctInitButton
 12929 ;;		_Button_Poll
 12930 ;; This function uses a non-reentrant model
 12931 ;;
 12932                           
 12933                           	psect	text68
 12934  015252                     __ptext68:
 12935                           	opt stack 0
 12936  015252                     _Event_DIPSwitch:
 12937                           	opt stack 15
 12938                           
 12939                           ; BSR set to: 0
 12940                           ;incstack = 0
 12941                           ;Event_DIPSwitch@pState stored from wreg
 12942  015252  0100               	movlb	0	; () banked
 12943  015254  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 12944                           
 12945                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 12946  015256  ECC5  F0AA         	call	_HMI_GetBar	;wreg free
 12947  01525A  0100               	movlb	0	; () banked
 12948  01525C  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 12949                           
 12950                           ; BSR set to: 0
 12951                           ;Events.c: 25: Bar &= 0x0F;
 12952  01525E  0E0F               	movlw	15
 12953  015260  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 12954                           
 12955                           ; BSR set to: 0
 12956                           ;Events.c: 26: pState <<= 4;
 12957  015262  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 12958  015264  0EF0               	movlw	240
 12959  015266  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 12963  015268  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 12964  01526A  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 12965  01526C  ECB9  F0AA         	call	_HMI_SetBar
 12966                           
 12967                           ;Events.c: 32: LED_Toggle(eLED1);
 12968  015270  0E00               	movlw	0
 12969  015272  ECED  F0A6         	call	_LED_Toggle
 12970  015276  0012               	return		;funcret
 12971  015278                     __end_of_Event_DIPSwitch:
 12972                           	opt stack 0
 12973                           tosu	equ	0xFFF
 12974                           tosh	equ	0xFFE
 12975                           tosl	equ	0xFFD
 12976                           pclath	equ	0xFFA
 12977                           tblptru	equ	0xFF8
 12978                           tblptrh	equ	0xFF7
 12979                           tblptrl	equ	0xFF6
 12980                           tablat	equ	0xFF5
 12981                           prodh	equ	0xFF4
 12982                           prodl	equ	0xFF3
 12983                           intcon	equ	0xFF2
 12984                           postinc0	equ	0xFEE
 12985                           wreg	equ	0xFE8
 12986                           indf1	equ	0xFE7
 12987                           postdec1	equ	0xFE5
 12988                           plusw1	equ	0xFE3
 12989                           fsr1h	equ	0xFE2
 12990                           fsr1l	equ	0xFE1
 12991                           indf2	equ	0xFDF
 12992                           postinc2	equ	0xFDE
 12993                           postdec2	equ	0xFDD
 12994                           plusw2	equ	0xFDB
 12995                           fsr2h	equ	0xFDA
 12996                           fsr2l	equ	0xFD9
 12997                           status	equ	0xFD8
 12998                           
 12999 ;; *************** function _Event_NULL *****************
 13000 ;; Defined at:
 13001 ;;		line 9 in file "Events.c"
 13002 ;; Parameters:    Size  Location     Type
 13003 ;;  pState          1    wreg     unsigned char 
 13004 ;; Auto vars:     Size  Location     Type
 13005 ;;  pState          1    0[COMRAM] unsigned char 
 13006 ;; Return value:  Size  Location     Type
 13007 ;;                  1    wreg      void 
 13008 ;; Registers used:
 13009 ;;		wreg
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13019 ;;Total ram usage:        0 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    7
 13022 ;; This function calls:
 13023 ;;		Nothing
 13024 ;; This function is called by:
 13025 ;;		_HMI_Init
 13026 ;;		_Button_Poll
 13027 ;; This function uses a non-reentrant model
 13028 ;;
 13029                           
 13030                           	psect	text69
 13031  001404                     __ptext69:
 13032                           	opt stack 0
 13033  001404                     _Event_NULL:
 13034                           	opt stack 21
 13035                           
 13036                           ;incstack = 0
 13037  001404  0012               	return		;funcret
 13038  001406                     __end_of_Event_NULL:
 13039                           	opt stack 0
 13040                           tosu	equ	0xFFF
 13041                           tosh	equ	0xFFE
 13042                           tosl	equ	0xFFD
 13043                           pclath	equ	0xFFA
 13044                           tblptru	equ	0xFF8
 13045                           tblptrh	equ	0xFF7
 13046                           tblptrl	equ	0xFF6
 13047                           tablat	equ	0xFF5
 13048                           prodh	equ	0xFF4
 13049                           prodl	equ	0xFF3
 13050                           intcon	equ	0xFF2
 13051                           postinc0	equ	0xFEE
 13052                           wreg	equ	0xFE8
 13053                           indf1	equ	0xFE7
 13054                           postdec1	equ	0xFE5
 13055                           plusw1	equ	0xFE3
 13056                           fsr1h	equ	0xFE2
 13057                           fsr1l	equ	0xFE1
 13058                           indf2	equ	0xFDF
 13059                           postinc2	equ	0xFDE
 13060                           postdec2	equ	0xFDD
 13061                           plusw2	equ	0xFDB
 13062                           fsr2h	equ	0xFDA
 13063                           fsr2l	equ	0xFD9
 13064                           status	equ	0xFD8
 13065                           
 13066 ;; *************** function _Event_TestButton *****************
 13067 ;; Defined at:
 13068 ;;		line 52 in file "Events.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;  pState          1    wreg     unsigned char 
 13071 ;; Auto vars:     Size  Location     Type
 13072 ;;  pState          1   25[BANK0 ] unsigned char 
 13073 ;; Return value:  Size  Location     Type
 13074 ;;                  1    wreg      void 
 13075 ;; Registers used:
 13076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13077 ;; Tracked objects:
 13078 ;;		On entry : 0/0
 13079 ;;		On exit  : 0/0
 13080 ;;		Unchanged: 0/0
 13081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13085 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13086 ;;Total ram usage:        1 bytes
 13087 ;; Hardware stack levels used:    1
 13088 ;; Hardware stack levels required when called:   13
 13089 ;; This function calls:
 13090 ;;		_HMI_SetButton
 13091 ;;		_HMI_SetNumber
 13092 ;;		_LED_Toggle
 13093 ;; This function is called by:
 13094 ;;		_FunctInitButton
 13095 ;;		_Button_Poll
 13096 ;; This function uses a non-reentrant model
 13097 ;;
 13098                           
 13099                           	psect	text70
 13100  01505A                     __ptext70:
 13101                           	opt stack 0
 13102  01505A                     _Event_TestButton:
 13103                           	opt stack 15
 13104                           
 13105                           ;incstack = 0
 13106                           ;Event_TestButton@pState stored from wreg
 13107  01505A  0100               	movlb	0	; () banked
 13108  01505C  6F79               	movwf	Event_TestButton@pState& (0+255),b
 13109                           
 13110                           ;Events.c: 56: static UINT8 j = 0;
 13111                           ;Events.c: 60: if (pState == 0)
 13112  01505E  0100               	movlb	0	; () banked
 13113  015060  5179               	movf	Event_TestButton@pState& (0+255),w,b
 13114  015062  A4D8               	btfss	status,2,c
 13115  015064  D010               	goto	l1873
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;Events.c: 61: {
 13119                           ;Events.c: 62: j++;
 13120  015066  2BEE               	incf	Event_TestButton@j& (0+255),f,b
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;Events.c: 63: val += j;
 13124  015068  51EE               	movf	Event_TestButton@j& (0+255),w,b
 13125  01506A  262F               	addwf	_val,f,c
 13126  01506C  0E00               	movlw	0
 13127  01506E  2230               	addwfc	_val+1,f,c
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;Events.c: 64: HMI_SetNumber( val );
 13131  015070  C02F  F076         	movff	_val,HMI_SetNumber@pInput
 13132  015074  C030  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 13133  015078  EC3C  F0A9         	call	_HMI_SetNumber	;wreg free
 13134                           
 13135                           ;Events.c: 67: HMI_SetButton( j & 3 );
 13136  01507C  0100               	movlb	0	; () banked
 13137  01507E  51EE               	movf	Event_TestButton@j& (0+255),w,b
 13138  015080  0B03               	andlw	3
 13139  015082  EC3E  F0A1         	call	_HMI_SetButton
 13140  015086                     l1873:
 13141                           
 13142                           ;Events.c: 68: }
 13143                           ;Events.c: 72: LED_Toggle(eLED1);
 13144  015086  0E00               	movlw	0
 13145  015088  ECED  F0A6         	call	_LED_Toggle
 13146  01508C  0012               	return		;funcret
 13147  01508E                     __end_of_Event_TestButton:
 13148                           	opt stack 0
 13149                           tosu	equ	0xFFF
 13150                           tosh	equ	0xFFE
 13151                           tosl	equ	0xFFD
 13152                           pclath	equ	0xFFA
 13153                           tblptru	equ	0xFF8
 13154                           tblptrh	equ	0xFF7
 13155                           tblptrl	equ	0xFF6
 13156                           tablat	equ	0xFF5
 13157                           prodh	equ	0xFF4
 13158                           prodl	equ	0xFF3
 13159                           intcon	equ	0xFF2
 13160                           postinc0	equ	0xFEE
 13161                           wreg	equ	0xFE8
 13162                           indf1	equ	0xFE7
 13163                           postdec1	equ	0xFE5
 13164                           plusw1	equ	0xFE3
 13165                           fsr1h	equ	0xFE2
 13166                           fsr1l	equ	0xFE1
 13167                           indf2	equ	0xFDF
 13168                           postinc2	equ	0xFDE
 13169                           postdec2	equ	0xFDD
 13170                           plusw2	equ	0xFDB
 13171                           fsr2h	equ	0xFDA
 13172                           fsr2l	equ	0xFD9
 13173                           status	equ	0xFD8
 13174                           
 13175 ;; *************** function _HMI_SetButton *****************
 13176 ;; Defined at:
 13177 ;;		line 186 in file "HMI.c"
 13178 ;; Parameters:    Size  Location     Type
 13179 ;;  pValue          1    wreg     unsigned char 
 13180 ;; Auto vars:     Size  Location     Type
 13181 ;;  pValue          1    6[BANK0 ] unsigned char 
 13182 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 13183 ;;  v               1    7[BANK0 ] unsigned char 
 13184 ;; Return value:  Size  Location     Type
 13185 ;;                  1    wreg      void 
 13186 ;; Registers used:
 13187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13194 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13195 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13196 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13197 ;;Total ram usage:        8 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; Hardware stack levels required when called:    7
 13200 ;; This function calls:
 13201 ;;		Nothing
 13202 ;; This function is called by:
 13203 ;;		_Event_TestButton
 13204 ;; This function uses a non-reentrant model
 13205 ;;
 13206                           
 13207                           	psect	text71
 13208  01427C                     __ptext71:
 13209                           	opt stack 0
 13210  01427C                     _HMI_SetButton:
 13211                           	opt stack 20
 13212                           
 13213                           ;incstack = 0
 13214                           ;HMI_SetButton@pValue stored from wreg
 13215  01427C  0100               	movlb	0	; () banked
 13216  01427E  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 13217                           
 13218                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 13219  014280  0E9C               	movlw	low HMI_SetButton@F7213
 13220  014282  6EF6               	movwf	tblptrl,c
 13221  014284                     	if	1	;There is more than 1 active tblptr byte
 13222  014284  0EFC               	movlw	high HMI_SetButton@F7213
 13223  014286  6EF7               	movwf	tblptrh,c
 13224  014288                     	endif
 13225  014288                     	if	1	;There are 3 active tblptr bytes
 13226  014288  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 13227  01428A  6EF8               	movwf	tblptru,c
 13228  01428C                     	endif
 13229  01428C  0009               	tblrd		*+
 13230  01428E  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 13231  014292  0009               	tblrd		*+
 13232  014294  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 13233  014298  0009               	tblrd		*+
 13234  01429A  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 13235  01429E  000A               	tblrd		*-
 13236  0142A0  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 13237                           
 13238                           ;HMI.c: 189: UINT8 v = 0b00010001;
 13239  0142A4  0E11               	movlw	17
 13240  0142A6  0100               	movlb	0	; () banked
 13241  0142A8  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13242                           
 13243                           ; BSR set to: 0
 13244                           ;HMI.c: 190: pValue &= 3;
 13245  0142AA  0E03               	movlw	3
 13246  0142AC  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 13247                           
 13248                           ; BSR set to: 0
 13249                           ;HMI.c: 191: v = v << reindex[pValue];
 13250  0142AE  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 13251  0142B0  0D01               	mullw	1
 13252  0142B2  0E62               	movlw	low HMI_SetButton@reindex
 13253  0142B4  24F3               	addwf	prodl,w,c
 13254  0142B6  6ED9               	movwf	fsr2l,c
 13255  0142B8  0E00               	movlw	high HMI_SetButton@reindex
 13256  0142BA  20F4               	addwfc	prodh,w,c
 13257  0142BC  6EDA               	movwf	fsr2h,c
 13258  0142BE  50DF               	movf	indf2,w,c
 13259  0142C0  6F60               	movwf	??_HMI_SetButton& (0+255),b
 13260  0142C2  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 13261  0142C6  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 13262  0142C8  D002               	goto	u11104
 13263  0142CA                     u11105:
 13264  0142CA  90D8               	bcf	status,0,c
 13265  0142CC  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 13266  0142CE                     u11104:
 13267  0142CE  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 13268  0142D0  D7FC               	goto	u11105
 13269  0142D2  0100               	movlb	0	; () banked
 13270  0142D4  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 13271  0142D6  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;HMI.c: 192: v = v >> 4;
 13275  0142D8  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 13276  0142DA  0B0F               	andlw	15
 13277  0142DC  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13278                           
 13279                           ; BSR set to: 0
 13280                           ;HMI.c: 193: v = v & 0x0F;
 13281  0142DE  5167               	movf	HMI_SetButton@v& (0+255),w,b
 13282  0142E0  0B0F               	andlw	15
 13283  0142E2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;HMI.c: 194: HMIBoard.pButton = v;
 13287  0142E4  0101               	movlb	1	; () banked
 13288  0142E6  5151               	movf	(_HMIBoard+6)& (0+255),w,b
 13289  0142E8  0100               	movlb	0	; () banked
 13290  0142EA  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 13291  0142EC  0BF0               	andlw	-16
 13292  0142EE  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 13293  0142F0  0101               	movlb	1	; () banked
 13294  0142F2  6F51               	movwf	(_HMIBoard+6)& (0+255),b
 13295                           
 13296                           ; BSR set to: 1
 13297  0142F4  0012               	return		;funcret
 13298  0142F6                     __end_of_HMI_SetButton:
 13299                           	opt stack 0
 13300                           tosu	equ	0xFFF
 13301                           tosh	equ	0xFFE
 13302                           tosl	equ	0xFFD
 13303                           pclath	equ	0xFFA
 13304                           tblptru	equ	0xFF8
 13305                           tblptrh	equ	0xFF7
 13306                           tblptrl	equ	0xFF6
 13307                           tablat	equ	0xFF5
 13308                           prodh	equ	0xFF4
 13309                           prodl	equ	0xFF3
 13310                           intcon	equ	0xFF2
 13311                           postinc0	equ	0xFEE
 13312                           wreg	equ	0xFE8
 13313                           indf1	equ	0xFE7
 13314                           postdec1	equ	0xFE5
 13315                           plusw1	equ	0xFE3
 13316                           fsr1h	equ	0xFE2
 13317                           fsr1l	equ	0xFE1
 13318                           indf2	equ	0xFDF
 13319                           postinc2	equ	0xFDE
 13320                           postdec2	equ	0xFDD
 13321                           plusw2	equ	0xFDB
 13322                           fsr2h	equ	0xFDA
 13323                           fsr2l	equ	0xFD9
 13324                           status	equ	0xFD8
 13325                           
 13326 ;; *************** function _LED_Toggle *****************
 13327 ;; Defined at:
 13328 ;;		line 50 in file "Library/LED.c"
 13329 ;; Parameters:    Size  Location     Type
 13330 ;;  pLED            1    wreg     enum E6739
 13331 ;; Auto vars:     Size  Location     Type
 13332 ;;  pLED            1   24[BANK0 ] enum E6739
 13333 ;; Return value:  Size  Location     Type
 13334 ;;                  1    wreg      void 
 13335 ;; Registers used:
 13336 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13337 ;; Tracked objects:
 13338 ;;		On entry : 0/0
 13339 ;;		On exit  : 0/0
 13340 ;;		Unchanged: 0/0
 13341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13345 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13346 ;;Total ram usage:        1 bytes
 13347 ;; Hardware stack levels used:    1
 13348 ;; Hardware stack levels required when called:   12
 13349 ;; This function calls:
 13350 ;;		_Port_TogglePin
 13351 ;; This function is called by:
 13352 ;;		_LCD_Reset
 13353 ;;		_Event_DIPSwitch
 13354 ;;		_Event_TestButton
 13355 ;;		_Event_ADCSequenceComplete
 13356 ;;		_Event_HMI_DIPSwitch
 13357 ;;		_Event_HMI_LeftButton
 13358 ;;		_Event_HMI_RightButton
 13359 ;;		_Event_HMI_UpButton
 13360 ;;		_Event_HMI_DownButton
 13361 ;; This function uses a non-reentrant model
 13362 ;;
 13363                           
 13364                           	psect	text72
 13365  014DDA                     __ptext72:
 13366                           	opt stack 0
 13367  014DDA                     _LED_Toggle:
 13368                           	opt stack 15
 13369                           
 13370                           ; BSR set to: 1
 13371                           ;incstack = 0
 13372                           ;LED_Toggle@pLED stored from wreg
 13373  014DDA  0100               	movlb	0	; () banked
 13374  014DDC  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 13375                           
 13376                           ;LED.c: 52: switch (pLED)
 13377  014DDE  D014               	goto	l234
 13378  014DE0                     
 13379                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 13380  014DE0  0EAE               	movlw	low _PortC
 13381  014DE2  0100               	movlb	0	; () banked
 13382  014DE4  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 13383  014DE6  0E01               	movlw	high _PortC
 13384  014DE8  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13385  014DEA  0E00               	movlw	0
 13386  014DEC  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 13387  014DEE  ECC0  F0A8         	call	_Port_TogglePin	;wreg free
 13388                           
 13389                           ;LED.c: 56: break;
 13390  014DF2  0012               	return	
 13391  014DF4                     
 13392                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 13393  014DF4  0EAE               	movlw	low _PortC
 13394  014DF6  0100               	movlb	0	; () banked
 13395  014DF8  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 13396  014DFA  0E01               	movlw	high _PortC
 13397  014DFC  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13398  014DFE  0E01               	movlw	1
 13399  014E00  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 13400  014E02  ECC0  F0A8         	call	_Port_TogglePin	;wreg free
 13401                           
 13402                           ;LED.c: 60: }
 13403                           
 13404                           ;LED.c: 59: break;
 13405  014E06  0012               	return	
 13406  014E08                     l234:
 13407  014E08  0100               	movlb	0	; () banked
 13408  014E0A  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 13409                           
 13410                           ; Switch size 1, requested type "space"
 13411                           ; Number of cases is 2, Range of values is 0 to 1
 13412                           ; switch strategies available:
 13413                           ; Name         Instructions Cycles
 13414                           ; simple_byte            7     4 (average)
 13415                           ;	Chosen strategy is simple_byte
 13416  014E0C  0A00               	xorlw	0	; case 0
 13417  014E0E  B4D8               	btfsc	status,2,c
 13418  014E10  D7E7               	goto	l235
 13419  014E12  0A01               	xorlw	1	; case 1
 13420  014E14  A4D8               	btfss	status,2,c
 13421  014E16  0012               	return	
 13422  014E18  D7ED               	goto	l237
 13423  014E1A                     __end_of_LED_Toggle:
 13424                           	opt stack 0
 13425                           tosu	equ	0xFFF
 13426                           tosh	equ	0xFFE
 13427                           tosl	equ	0xFFD
 13428                           pclath	equ	0xFFA
 13429                           tblptru	equ	0xFF8
 13430                           tblptrh	equ	0xFF7
 13431                           tblptrl	equ	0xFF6
 13432                           tablat	equ	0xFF5
 13433                           prodh	equ	0xFF4
 13434                           prodl	equ	0xFF3
 13435                           intcon	equ	0xFF2
 13436                           postinc0	equ	0xFEE
 13437                           wreg	equ	0xFE8
 13438                           indf1	equ	0xFE7
 13439                           postdec1	equ	0xFE5
 13440                           plusw1	equ	0xFE3
 13441                           fsr1h	equ	0xFE2
 13442                           fsr1l	equ	0xFE1
 13443                           indf2	equ	0xFDF
 13444                           postinc2	equ	0xFDE
 13445                           postdec2	equ	0xFDD
 13446                           plusw2	equ	0xFDB
 13447                           fsr2h	equ	0xFDA
 13448                           fsr2l	equ	0xFD9
 13449                           status	equ	0xFD8
 13450                           
 13451 ;; *************** function _Port_TogglePin *****************
 13452 ;; Defined at:
 13453 ;;		line 278 in file "Library/Port.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 13456 ;;		 -> PortC(10), 
 13457 ;;  pPin            1   22[BANK0 ] enum E6750
 13458 ;; Auto vars:     Size  Location     Type
 13459 ;;  Value           1   23[BANK0 ] unsigned char 
 13460 ;; Return value:  Size  Location     Type
 13461 ;;                  1    wreg      void 
 13462 ;; Registers used:
 13463 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13469 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13472 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13473 ;;Total ram usage:        4 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:   11
 13476 ;; This function calls:
 13477 ;;		_Port_GetPin
 13478 ;;		_Port_SetPin
 13479 ;; This function is called by:
 13480 ;;		_LED_Toggle
 13481 ;; This function uses a non-reentrant model
 13482 ;;
 13483                           
 13484                           	psect	text73
 13485  015180                     __ptext73:
 13486                           	opt stack 0
 13487  015180                     _Port_TogglePin:
 13488                           	opt stack 15
 13489                           
 13490                           ;Port.c: 280: UINT8 Value;
 13491                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 13492                           
 13493                           ;incstack = 0
 13494  015180  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 13495  015184  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 13496  015188  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 13497  01518C  EC87  F0A7         	call	_Port_GetPin	;wreg free
 13498  015190  0100               	movlb	0	; () banked
 13499  015192  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;Port.c: 282: Value ^= 0x01;
 13503  015194  0E01               	movlw	1
 13504  015196  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 13505                           
 13506                           ; BSR set to: 0
 13507                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 13508  015198  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 13509  01519C  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 13510  0151A0  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 13511  0151A4  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 13512  0151A8  EC02  F09C         	call	_Port_SetPin	;wreg free
 13513  0151AC  0012               	return		;funcret
 13514  0151AE                     __end_of_Port_TogglePin:
 13515                           	opt stack 0
 13516                           tosu	equ	0xFFF
 13517                           tosh	equ	0xFFE
 13518                           tosl	equ	0xFFD
 13519                           pclath	equ	0xFFA
 13520                           tblptru	equ	0xFF8
 13521                           tblptrh	equ	0xFF7
 13522                           tblptrl	equ	0xFF6
 13523                           tablat	equ	0xFF5
 13524                           prodh	equ	0xFF4
 13525                           prodl	equ	0xFF3
 13526                           intcon	equ	0xFF2
 13527                           postinc0	equ	0xFEE
 13528                           wreg	equ	0xFE8
 13529                           indf1	equ	0xFE7
 13530                           postdec1	equ	0xFE5
 13531                           plusw1	equ	0xFE3
 13532                           fsr1h	equ	0xFE2
 13533                           fsr1l	equ	0xFE1
 13534                           indf2	equ	0xFDF
 13535                           postinc2	equ	0xFDE
 13536                           postdec2	equ	0xFDD
 13537                           plusw2	equ	0xFDB
 13538                           fsr2h	equ	0xFDA
 13539                           fsr2l	equ	0xFD9
 13540                           status	equ	0xFD8
 13541                           
 13542 ;; *************** function _Port_SetPin *****************
 13543 ;; Defined at:
 13544 ;;		line 247 in file "Library/Port.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13547 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 13548 ;;  pPin            1   17[BANK0 ] enum E6750
 13549 ;;  pValue          1   18[BANK0 ] unsigned char 
 13550 ;; Auto vars:     Size  Location     Type
 13551 ;;  Type            1   19[BANK0 ] enum E6795
 13552 ;; Return value:  Size  Location     Type
 13553 ;;                  1    wreg      void 
 13554 ;; Registers used:
 13555 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13556 ;; Tracked objects:
 13557 ;;		On entry : 0/0
 13558 ;;		On exit  : 0/0
 13559 ;;		Unchanged: 0/0
 13560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13561 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13564 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13565 ;;Total ram usage:        5 bytes
 13566 ;; Hardware stack levels used:    1
 13567 ;; Hardware stack levels required when called:   10
 13568 ;; This function calls:
 13569 ;;		_Byte_SetBit
 13570 ;;		_Word_GetPair
 13571 ;; This function is called by:
 13572 ;;		_Reset_Low
 13573 ;;		_Reset_High
 13574 ;;		_LED_Set
 13575 ;;		_Port_TogglePin
 13576 ;;		_Motor_Step
 13577 ;;		_MXK_Init
 13578 ;;		_Motor_Init
 13579 ;; This function uses a non-reentrant model
 13580 ;;
 13581                           
 13582                           	psect	text74
 13583  013804                     __ptext74:
 13584                           	opt stack 0
 13585  013804                     _Port_SetPin:
 13586                           	opt stack 19
 13587                           
 13588                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 13589                           
 13590                           ;incstack = 0
 13591  013804  0E08               	movlw	8
 13592  013806  0100               	movlb	0	; () banked
 13593  013808  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 13594  01380A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 13595  01380C  0E00               	movlw	0
 13596  01380E  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 13597  013810  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13598  013812  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 13599  013816  EC47  F0A8         	call	_Word_GetPair	;wreg free
 13600  01381A  0100               	movlb	0	; () banked
 13601  01381C  6F73               	movwf	Port_SetPin@Type& (0+255),b
 13602                           
 13603                           ;Port.c: 250: switch (Type)
 13604  01381E  D03D               	goto	l427
 13605  013820                     
 13606                           ; BSR set to: 0
 13607                           ;Port.c: 256: pValue &= 1;
 13608                           
 13609                           ; BSR set to: 0
 13610  013820  0E01               	movlw	1
 13611  013822  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 13615  013824  EE20 F002          	lfsr	2,2
 13616  013828  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 13617  01382A  26D9               	addwf	fsr2l,f,c
 13618  01382C  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13619  01382E  22DA               	addwfc	fsr2h,f,c
 13620  013830  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13621  013834  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13622  013838  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13623  01383C  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13624  013840  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 13625                           
 13626                           ;Port.c: 258: break;
 13627  013844  0012               	return	
 13628  013846                     
 13629                           ;Port.c: 261: pValue &= 1;
 13630  013846  0E01               	movlw	1
 13631  013848  0100               	movlb	0	; () banked
 13632  01384A  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 13633                           
 13634                           ;Port.c: 262: pValue ^= 1;
 13635  01384C  0E01               	movlw	1
 13636  01384E  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 13640  013850  EE20 F002          	lfsr	2,2
 13641  013854  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 13642  013856  26D9               	addwf	fsr2l,f,c
 13643  013858  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13644  01385A  22DA               	addwfc	fsr2h,f,c
 13645  01385C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13646  013860  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13647  013864  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13648  013868  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13649  01386C  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 13650                           
 13651                           ;Port.c: 264: break;
 13652  013870  0012               	return	
 13653  013872                     
 13654                           ;Port.c: 266: pValue &= 1;
 13655  013872  0E01               	movlw	1
 13656  013874  0100               	movlb	0	; () banked
 13657  013876  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 13661  013878  EE20 F004          	lfsr	2,4
 13662  01387C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 13663  01387E  26D9               	addwf	fsr2l,f,c
 13664  013880  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13665  013882  22DA               	addwfc	fsr2h,f,c
 13666  013884  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13667  013888  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13668  01388C  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13669  013890  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13670  013894  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 13671                           
 13672                           ;Port.c: 269: }
 13673                           
 13674                           ;Port.c: 268: break;
 13675  013898  0012               	return	
 13676  01389A                     l427:
 13677  01389A  0100               	movlb	0	; () banked
 13678  01389C  5173               	movf	Port_SetPin@Type& (0+255),w,b
 13679                           
 13680                           ; Switch size 1, requested type "space"
 13681                           ; Number of cases is 4, Range of values is 0 to 3
 13682                           ; switch strategies available:
 13683                           ; Name         Instructions Cycles
 13684                           ; simple_byte           13     7 (average)
 13685                           ;	Chosen strategy is simple_byte
 13686  01389E  0A00               	xorlw	0	; case 0
 13687  0138A0  B4D8               	btfsc	status,2,c
 13688  0138A2  0012               	return	
 13689  0138A4  0A01               	xorlw	1	; case 1
 13690  0138A6  B4D8               	btfsc	status,2,c
 13691  0138A8  D7BB               	goto	l430
 13692  0138AA  0A03               	xorlw	3	; case 2
 13693  0138AC  B4D8               	btfsc	status,2,c
 13694  0138AE  D7CB               	goto	l432
 13695  0138B0  0A01               	xorlw	1	; case 3
 13696  0138B2  A4D8               	btfss	status,2,c
 13697  0138B4  0012               	return	
 13698  0138B6  D7DD               	goto	l433
 13699  0138B8                     __end_of_Port_SetPin:
 13700                           	opt stack 0
 13701                           tosu	equ	0xFFF
 13702                           tosh	equ	0xFFE
 13703                           tosl	equ	0xFFD
 13704                           pclath	equ	0xFFA
 13705                           tblptru	equ	0xFF8
 13706                           tblptrh	equ	0xFF7
 13707                           tblptrl	equ	0xFF6
 13708                           tablat	equ	0xFF5
 13709                           prodh	equ	0xFF4
 13710                           prodl	equ	0xFF3
 13711                           intcon	equ	0xFF2
 13712                           postinc0	equ	0xFEE
 13713                           wreg	equ	0xFE8
 13714                           indf1	equ	0xFE7
 13715                           postdec1	equ	0xFE5
 13716                           plusw1	equ	0xFE3
 13717                           fsr1h	equ	0xFE2
 13718                           fsr1l	equ	0xFE1
 13719                           indf2	equ	0xFDF
 13720                           postinc2	equ	0xFDE
 13721                           postdec2	equ	0xFDD
 13722                           plusw2	equ	0xFDB
 13723                           fsr2h	equ	0xFDA
 13724                           fsr2l	equ	0xFD9
 13725                           status	equ	0xFD8
 13726                           
 13727 ;; *************** function _Port_GetPin *****************
 13728 ;; Defined at:
 13729 ;;		line 271 in file "Library/Port.c"
 13730 ;; Parameters:    Size  Location     Type
 13731 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13732 ;;		 -> PortB(10), PortE(10), PortC(10), 
 13733 ;;  pPin            1    2[BANK0 ] enum E6750
 13734 ;; Auto vars:     Size  Location     Type
 13735 ;;  Output          1    5[BANK0 ] unsigned char 
 13736 ;; Return value:  Size  Location     Type
 13737 ;;                  1    wreg      unsigned char 
 13738 ;; Registers used:
 13739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13740 ;; Tracked objects:
 13741 ;;		On entry : 0/0
 13742 ;;		On exit  : 0/0
 13743 ;;		Unchanged: 0/0
 13744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13745 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13748 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13749 ;;Total ram usage:        6 bytes
 13750 ;; Hardware stack levels used:    1
 13751 ;; Hardware stack levels required when called:    7
 13752 ;; This function calls:
 13753 ;;		Nothing
 13754 ;; This function is called by:
 13755 ;;		_Port_TogglePin
 13756 ;;		_HMI_LeftSwitch
 13757 ;;		_HMI_RightSwitch
 13758 ;;		_HMI_UpSwitch
 13759 ;;		_HMI_DownSwitch
 13760 ;;		_MXK_TestButton
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           	psect	text75
 13765  014F0E                     __ptext75:
 13766                           	opt stack 0
 13767  014F0E                     _Port_GetPin:
 13768                           	opt stack 22
 13769                           
 13770                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 13771                           
 13772                           ;incstack = 0
 13773  014F0E  0100               	movlb	0	; () banked
 13774  014F10  EE20 F006          	lfsr	2,6
 13775  014F14  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 13776  014F16  26D9               	addwf	fsr2l,f,c
 13777  014F18  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 13778  014F1A  22DA               	addwfc	fsr2h,f,c
 13779  014F1C  CFDE F063          	movff	postinc2,??_Port_GetPin
 13780  014F20  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 13781  014F24  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 13782  014F28  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 13783  014F2C  50DF               	movf	indf2,w,c
 13784  014F2E  6F65               	movwf	Port_GetPin@Output& (0+255),b
 13785                           
 13786                           ; BSR set to: 0
 13787                           ;Port.c: 274: Output >>= (UINT8)pPin;
 13788  014F30  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 13789  014F32  6F63               	movwf	??_Port_GetPin& (0+255),b
 13790  014F34  D002               	goto	u9750
 13791  014F36                     u9755:
 13792  014F36  90D8               	bcf	status,0,c
 13793  014F38  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 13794  014F3A                     u9750:
 13795  014F3A  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 13796  014F3C  D7FC               	goto	u9755
 13797                           
 13798                           ;Port.c: 275: Output &= 1;
 13799  014F3E  0E01               	movlw	1
 13800  014F40  0100               	movlb	0	; () banked
 13801  014F42  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 13802                           
 13803                           ; BSR set to: 0
 13804                           ;Port.c: 276: return Output;
 13805  014F44  5165               	movf	Port_GetPin@Output& (0+255),w,b
 13806  014F46  0012               	return	
 13807  014F48                     __end_of_Port_GetPin:
 13808                           	opt stack 0
 13809                           tosu	equ	0xFFF
 13810                           tosh	equ	0xFFE
 13811                           tosl	equ	0xFFD
 13812                           pclath	equ	0xFFA
 13813                           tblptru	equ	0xFF8
 13814                           tblptrh	equ	0xFF7
 13815                           tblptrl	equ	0xFF6
 13816                           tablat	equ	0xFF5
 13817                           prodh	equ	0xFF4
 13818                           prodl	equ	0xFF3
 13819                           intcon	equ	0xFF2
 13820                           postinc0	equ	0xFEE
 13821                           wreg	equ	0xFE8
 13822                           indf1	equ	0xFE7
 13823                           postdec1	equ	0xFE5
 13824                           plusw1	equ	0xFE3
 13825                           fsr1h	equ	0xFE2
 13826                           fsr1l	equ	0xFE1
 13827                           indf2	equ	0xFDF
 13828                           postinc2	equ	0xFDE
 13829                           postdec2	equ	0xFDD
 13830                           plusw2	equ	0xFDB
 13831                           fsr2h	equ	0xFDA
 13832                           fsr2l	equ	0xFD9
 13833                           status	equ	0xFD8
 13834                           
 13835 ;; *************** function _HMI_SetBar *****************
 13836 ;; Defined at:
 13837 ;;		line 205 in file "HMI.c"
 13838 ;; Parameters:    Size  Location     Type
 13839 ;;  pValue          1    wreg     unsigned char 
 13840 ;; Auto vars:     Size  Location     Type
 13841 ;;  pValue          1    0[BANK0 ] unsigned char 
 13842 ;; Return value:  Size  Location     Type
 13843 ;;                  1    wreg      void 
 13844 ;; Registers used:
 13845 ;;		wreg
 13846 ;; Tracked objects:
 13847 ;;		On entry : 0/0
 13848 ;;		On exit  : 0/0
 13849 ;;		Unchanged: 0/0
 13850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13855 ;;Total ram usage:        1 bytes
 13856 ;; Hardware stack levels used:    1
 13857 ;; Hardware stack levels required when called:    7
 13858 ;; This function calls:
 13859 ;;		Nothing
 13860 ;; This function is called by:
 13861 ;;		_Event_DIPSwitch
 13862 ;;		_Event_HMI_DIPSwitch
 13863 ;;		_Event_HMI_LeftButton
 13864 ;;		_Event_HMI_RightButton
 13865 ;; This function uses a non-reentrant model
 13866 ;;
 13867                           
 13868                           	psect	text76
 13869  015572                     __ptext76:
 13870                           	opt stack 0
 13871  015572                     _HMI_SetBar:
 13872                           	opt stack 20
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;incstack = 0
 13876                           ;HMI_SetBar@pValue stored from wreg
 13877  015572  0100               	movlb	0	; () banked
 13878  015574  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 13879                           
 13880                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 13881  015576  C060  F152         	movff	HMI_SetBar@pValue,_HMIBoard+7
 13882  01557A  0012               	return		;funcret
 13883  01557C                     __end_of_HMI_SetBar:
 13884                           	opt stack 0
 13885                           tosu	equ	0xFFF
 13886                           tosh	equ	0xFFE
 13887                           tosl	equ	0xFFD
 13888                           pclath	equ	0xFFA
 13889                           tblptru	equ	0xFF8
 13890                           tblptrh	equ	0xFF7
 13891                           tblptrl	equ	0xFF6
 13892                           tablat	equ	0xFF5
 13893                           prodh	equ	0xFF4
 13894                           prodl	equ	0xFF3
 13895                           intcon	equ	0xFF2
 13896                           postinc0	equ	0xFEE
 13897                           wreg	equ	0xFE8
 13898                           indf1	equ	0xFE7
 13899                           postdec1	equ	0xFE5
 13900                           plusw1	equ	0xFE3
 13901                           fsr1h	equ	0xFE2
 13902                           fsr1l	equ	0xFE1
 13903                           indf2	equ	0xFDF
 13904                           postinc2	equ	0xFDE
 13905                           postdec2	equ	0xFDD
 13906                           plusw2	equ	0xFDB
 13907                           fsr2h	equ	0xFDA
 13908                           fsr2l	equ	0xFD9
 13909                           status	equ	0xFD8
 13910                           
 13911 ;; *************** function _HMI_GetBar *****************
 13912 ;; Defined at:
 13913 ;;		line 209 in file "HMI.c"
 13914 ;; Parameters:    Size  Location     Type
 13915 ;;		None
 13916 ;; Auto vars:     Size  Location     Type
 13917 ;;		None
 13918 ;; Return value:  Size  Location     Type
 13919 ;;                  1    wreg      unsigned char 
 13920 ;; Registers used:
 13921 ;;		wreg, status,2
 13922 ;; Tracked objects:
 13923 ;;		On entry : 0/0
 13924 ;;		On exit  : 0/0
 13925 ;;		Unchanged: 0/0
 13926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;Total ram usage:        0 bytes
 13932 ;; Hardware stack levels used:    1
 13933 ;; Hardware stack levels required when called:    7
 13934 ;; This function calls:
 13935 ;;		Nothing
 13936 ;; This function is called by:
 13937 ;;		_Event_DIPSwitch
 13938 ;;		_Event_HMI_DIPSwitch
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           	psect	text77
 13943  01558A                     __ptext77:
 13944                           	opt stack 0
 13945  01558A                     _HMI_GetBar:
 13946                           	opt stack 20
 13947                           
 13948                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 13949                           
 13950                           ;incstack = 0
 13951  01558A  0101               	movlb	1	; () banked
 13952  01558C  5152               	movf	(_HMIBoard+7)& (0+255),w,b
 13953  01558E  0012               	return	
 13954  015590                     __end_of_HMI_GetBar:
 13955                           	opt stack 0
 13956                           tosu	equ	0xFFF
 13957                           tosh	equ	0xFFE
 13958                           tosl	equ	0xFFD
 13959                           pclath	equ	0xFFA
 13960                           tblptru	equ	0xFF8
 13961                           tblptrh	equ	0xFF7
 13962                           tblptrl	equ	0xFF6
 13963                           tablat	equ	0xFF5
 13964                           prodh	equ	0xFF4
 13965                           prodl	equ	0xFF3
 13966                           intcon	equ	0xFF2
 13967                           postinc0	equ	0xFEE
 13968                           wreg	equ	0xFE8
 13969                           indf1	equ	0xFE7
 13970                           postdec1	equ	0xFE5
 13971                           plusw1	equ	0xFE3
 13972                           fsr1h	equ	0xFE2
 13973                           fsr1l	equ	0xFE1
 13974                           indf2	equ	0xFDF
 13975                           postinc2	equ	0xFDE
 13976                           postdec2	equ	0xFDD
 13977                           plusw2	equ	0xFDB
 13978                           fsr2h	equ	0xFDA
 13979                           fsr2l	equ	0xFD9
 13980                           status	equ	0xFD8
 13981                           
 13982 ;; *************** function _HMI_Init *****************
 13983 ;; Defined at:
 13984 ;;		line 104 in file "HMI.c"
 13985 ;; Parameters:    Size  Location     Type
 13986 ;;		None
 13987 ;; Auto vars:     Size  Location     Type
 13988 ;;  in              2   72[BANK0 ] unsigned short 
 13989 ;; Return value:  Size  Location     Type
 13990 ;;                  1    wreg      void 
 13991 ;; Registers used:
 13992 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13993 ;; Tracked objects:
 13994 ;;		On entry : 0/0
 13995 ;;		On exit  : 0/0
 13996 ;;		Unchanged: 0/0
 13997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14001 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14002 ;;Total ram usage:        2 bytes
 14003 ;; Hardware stack levels used:    1
 14004 ;; Hardware stack levels required when called:   16
 14005 ;; This function calls:
 14006 ;;		_Button_Init
 14007 ;;		_SPI_Init
 14008 ;;		_SPI_MinSpeed
 14009 ;; This function is called by:
 14010 ;;		_main
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text78
 14015  01220E                     __ptext78:
 14016                           	opt stack 0
 14017  01220E                     _HMI_Init:
 14018                           	opt stack 14
 14019                           
 14020                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 14021                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 14022                           
 14023                           ; BSR set to: 1
 14024                           ;incstack = 0
 14025  01220E  0E7B               	movlw	low (_HMIBoard+48)
 14026  012210  0100               	movlb	0	; () banked
 14027  012212  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14028  012214  0E01               	movlw	high (_HMIBoard+48)
 14029  012216  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14030  012218  0E00               	movlw	0
 14031  01221A  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14032  01221C  0E02               	movlw	2
 14033  01221E  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14034  012220  0E90               	movlw	low _HMI_InitButtons
 14035  012222  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14036  012224  0E55               	movlw	high _HMI_InitButtons
 14037  012226  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14038  012228  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14039  01222A  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14040  01222C  0E60               	movlw	low _HMI_DIPSwitch
 14041  01222E  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14042  012230  0E54               	movlw	high _HMI_DIPSwitch
 14043  012232  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14044  012234  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 14045  012236  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14046  012238  0E04               	movlw	low _Event_NULL
 14047  01223A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14048  01223C  0E14               	movlw	high _Event_NULL
 14049  01223E  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14050  012240  0E00               	movlw	low (_Event_NULL shr (0+16))
 14051  012242  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14052  012244  EC5C  F09C         	call	_Button_Init	;wreg free
 14053                           
 14054                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 14055                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 14056  012248  0E5D               	movlw	low (_HMIBoard+18)
 14057  01224A  0100               	movlb	0	; () banked
 14058  01224C  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14059  01224E  0E01               	movlw	high (_HMIBoard+18)
 14060  012250  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14061  012252  0E00               	movlw	0
 14062  012254  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14063  012256  0E02               	movlw	2
 14064  012258  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14065  01225A  0E90               	movlw	low _HMI_InitButtons
 14066  01225C  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14067  01225E  0E55               	movlw	high _HMI_InitButtons
 14068  012260  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14069  012262  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14070  012264  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14071  012266  0EB0               	movlw	low _HMI_LeftSwitch
 14072  012268  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14073  01226A  0E54               	movlw	high _HMI_LeftSwitch
 14074  01226C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14075  01226E  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 14076  012270  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14077  012272  0E04               	movlw	low _Event_NULL
 14078  012274  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14079  012276  0E14               	movlw	high _Event_NULL
 14080  012278  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14081  01227A  0E00               	movlw	low (_Event_NULL shr (0+16))
 14082  01227C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14083  01227E  EC5C  F09C         	call	_Button_Init	;wreg free
 14084                           
 14085                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 14086                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 14087  012282  0E53               	movlw	low (_HMIBoard+8)
 14088  012284  0100               	movlb	0	; () banked
 14089  012286  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14090  012288  0E01               	movlw	high (_HMIBoard+8)
 14091  01228A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14092  01228C  0E00               	movlw	0
 14093  01228E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14094  012290  0E02               	movlw	2
 14095  012292  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14096  012294  0E90               	movlw	low _HMI_InitButtons
 14097  012296  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14098  012298  0E55               	movlw	high _HMI_InitButtons
 14099  01229A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14100  01229C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14101  01229E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14102  0122A0  0E9C               	movlw	low _HMI_RightSwitch
 14103  0122A2  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14104  0122A4  0E54               	movlw	high _HMI_RightSwitch
 14105  0122A6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14106  0122A8  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 14107  0122AA  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14108  0122AC  0E04               	movlw	low _Event_NULL
 14109  0122AE  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14110  0122B0  0E14               	movlw	high _Event_NULL
 14111  0122B2  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14112  0122B4  0E00               	movlw	low (_Event_NULL shr (0+16))
 14113  0122B6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14114  0122B8  EC5C  F09C         	call	_Button_Init	;wreg free
 14115                           
 14116                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 14117                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 14118  0122BC  0E67               	movlw	low (_HMIBoard+28)
 14119  0122BE  0100               	movlb	0	; () banked
 14120  0122C0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14121  0122C2  0E01               	movlw	high (_HMIBoard+28)
 14122  0122C4  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14123  0122C6  0E00               	movlw	0
 14124  0122C8  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14125  0122CA  0E02               	movlw	2
 14126  0122CC  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14127  0122CE  0E90               	movlw	low _HMI_InitButtons
 14128  0122D0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14129  0122D2  0E55               	movlw	high _HMI_InitButtons
 14130  0122D4  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14131  0122D6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14132  0122D8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14133  0122DA  0E88               	movlw	low _HMI_UpSwitch
 14134  0122DC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14135  0122DE  0E54               	movlw	high _HMI_UpSwitch
 14136  0122E0  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14137  0122E2  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 14138  0122E4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14139  0122E6  0E04               	movlw	low _Event_NULL
 14140  0122E8  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14141  0122EA  0E14               	movlw	high _Event_NULL
 14142  0122EC  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14143  0122EE  0E00               	movlw	low (_Event_NULL shr (0+16))
 14144  0122F0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14145  0122F2  EC5C  F09C         	call	_Button_Init	;wreg free
 14146                           
 14147                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 14148                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 14149  0122F6  0E71               	movlw	low (_HMIBoard+38)
 14150  0122F8  0100               	movlb	0	; () banked
 14151  0122FA  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14152  0122FC  0E01               	movlw	high (_HMIBoard+38)
 14153  0122FE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14154  012300  0E00               	movlw	0
 14155  012302  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14156  012304  0E02               	movlw	2
 14157  012306  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14158  012308  0E90               	movlw	low _HMI_InitButtons
 14159  01230A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14160  01230C  0E55               	movlw	high _HMI_InitButtons
 14161  01230E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14162  012310  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14163  012312  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14164  012314  0E74               	movlw	low _HMI_DownSwitch
 14165  012316  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14166  012318  0E54               	movlw	high _HMI_DownSwitch
 14167  01231A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14168  01231C  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 14169  01231E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14170  012320  0E04               	movlw	low _Event_NULL
 14171  012322  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14172  012324  0E14               	movlw	high _Event_NULL
 14173  012326  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14174  012328  0E00               	movlw	low (_Event_NULL shr (0+16))
 14175  01232A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14176  01232C  EC5C  F09C         	call	_Button_Init	;wreg free
 14177                           
 14178                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 14179  012330  0EA0               	movlw	160
 14180  012332  0100               	movlb	0	; () banked
 14181  012334  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 14182  012336  0E86               	movlw	134
 14183  012338  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 14184  01233A  0E01               	movlw	1
 14185  01233C  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 14186  01233E  0E00               	movlw	0
 14187  012340  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 14188  012342  0E00               	movlw	0
 14189  012344  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 14190  012346  0E02               	movlw	2
 14191  012348  6F92               	movwf	SPI_Init@pMode& (0+255),b
 14192  01234A  EC00  F080         	call	_SPI_Init	;wreg free
 14193                           
 14194                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 14195  01234E  0EC8               	movlw	low _SPI1
 14196  012350  0100               	movlb	0	; () banked
 14197  012352  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 14198  012354  0E02               	movlw	high _SPI1
 14199  012356  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 14200  012358  EC3A  F0A3         	call	_SPI_MinSpeed	;wreg free
 14201                           
 14202                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 14203  01235C  0E00               	movlw	0
 14204  01235E  0100               	movlb	0	; () banked
 14205  012360  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 14206  012362  0E00               	movlw	0
 14207  012364  6FA8               	movwf	HMI_Init@in& (0+255),b
 14208  012366                     l15240:
 14209                           
 14210                           ; BSR set to: 0
 14211  012366  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 14212  012368  E10F               	bnz	l1153
 14213  01236A  0E08               	movlw	8
 14214  01236C  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 14215  01236E  B0D8               	btfsc	status,0,c
 14216  012370  0012               	return	
 14217                           
 14218                           ; BSR set to: 0
 14219                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 14220                           
 14221                           ; BSR set to: 0
 14222                           
 14223                           ; BSR set to: 0
 14224  012372  0E4B               	movlw	low _HMIBoard
 14225  012374  25A8               	addwf	HMI_Init@in& (0+255),w,b
 14226  012376  6ED9               	movwf	fsr2l,c
 14227  012378  0E01               	movlw	high _HMIBoard
 14228  01237A  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 14229  01237C  6EDA               	movwf	fsr2h,c
 14230  01237E  0E00               	movlw	0
 14231  012380  6EDF               	movwf	indf2,c
 14232                           
 14233                           ; BSR set to: 0
 14234  012382  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 14235  012384  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 14236  012386  D7EF               	goto	l15240
 14237  012388                     l1153:
 14238                           
 14239                           ; BSR set to: 0
 14240  012388  0012               	return		;funcret
 14241  01238A                     __end_of_HMI_Init:
 14242                           	opt stack 0
 14243                           tosu	equ	0xFFF
 14244                           tosh	equ	0xFFE
 14245                           tosl	equ	0xFFD
 14246                           pclath	equ	0xFFA
 14247                           tblptru	equ	0xFF8
 14248                           tblptrh	equ	0xFF7
 14249                           tblptrl	equ	0xFF6
 14250                           tablat	equ	0xFF5
 14251                           prodh	equ	0xFF4
 14252                           prodl	equ	0xFF3
 14253                           intcon	equ	0xFF2
 14254                           postinc0	equ	0xFEE
 14255                           wreg	equ	0xFE8
 14256                           indf1	equ	0xFE7
 14257                           postdec1	equ	0xFE5
 14258                           plusw1	equ	0xFE3
 14259                           fsr1h	equ	0xFE2
 14260                           fsr1l	equ	0xFE1
 14261                           indf2	equ	0xFDF
 14262                           postinc2	equ	0xFDE
 14263                           postdec2	equ	0xFDD
 14264                           plusw2	equ	0xFDB
 14265                           fsr2h	equ	0xFDA
 14266                           fsr2l	equ	0xFD9
 14267                           status	equ	0xFD8
 14268                           
 14269 ;; *************** function _SPI_MinSpeed *****************
 14270 ;; Defined at:
 14271 ;;		line 190 in file "Library/SPI.c"
 14272 ;; Parameters:    Size  Location     Type
 14273 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 14274 ;;		 -> SPI1(11), 
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;		None
 14277 ;; Return value:  Size  Location     Type
 14278 ;;                  1    wreg      void 
 14279 ;; Registers used:
 14280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14281 ;; Tracked objects:
 14282 ;;		On entry : 0/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14286 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14290 ;;Total ram usage:        2 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; Hardware stack levels required when called:    9
 14293 ;; This function calls:
 14294 ;;		_Byte_SetBit
 14295 ;;		_Byte_SetQuad
 14296 ;; This function is called by:
 14297 ;;		_HMI_Init
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text79
 14302  014674                     __ptext79:
 14303                           	opt stack 0
 14304  014674                     _SPI_MinSpeed:
 14305                           	opt stack 20
 14306                           
 14307                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14308                           
 14309                           ; BSR set to: 0
 14310                           ;incstack = 0
 14311  014674  0100               	movlb	0	; () banked
 14312  014676  EE20 F006          	lfsr	2,6
 14313  01467A  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14314  01467C  26D9               	addwf	fsr2l,f,c
 14315  01467E  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14316  014680  22DA               	addwfc	fsr2h,f,c
 14317  014682  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14318  014686  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14319  01468A  0E05               	movlw	5
 14320  01468C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14321  01468E  0E00               	movlw	0
 14322  014690  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14323  014692  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14324                           
 14325                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 14326  014696  0100               	movlb	0	; () banked
 14327  014698  EE20 F006          	lfsr	2,6
 14328  01469C  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14329  01469E  26D9               	addwf	fsr2l,f,c
 14330  0146A0  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14331  0146A2  22DA               	addwfc	fsr2h,f,c
 14332  0146A4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 14333  0146A8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 14334  0146AC  0E00               	movlw	0
 14335  0146AE  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14336  0146B0  0E02               	movlw	2
 14337  0146B2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 14338  0146B4  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 14339                           
 14340                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14341  0146B8  0100               	movlb	0	; () banked
 14342  0146BA  EE20 F006          	lfsr	2,6
 14343  0146BE  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14344  0146C0  26D9               	addwf	fsr2l,f,c
 14345  0146C2  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14346  0146C4  22DA               	addwfc	fsr2h,f,c
 14347  0146C6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14348  0146CA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14349  0146CE  0E05               	movlw	5
 14350  0146D0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14351  0146D2  0E01               	movlw	1
 14352  0146D4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14353  0146D6  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14354  0146DA  0012               	return		;funcret
 14355  0146DC                     __end_of_SPI_MinSpeed:
 14356                           	opt stack 0
 14357                           tosu	equ	0xFFF
 14358                           tosh	equ	0xFFE
 14359                           tosl	equ	0xFFD
 14360                           pclath	equ	0xFFA
 14361                           tblptru	equ	0xFF8
 14362                           tblptrh	equ	0xFF7
 14363                           tblptrl	equ	0xFF6
 14364                           tablat	equ	0xFF5
 14365                           prodh	equ	0xFF4
 14366                           prodl	equ	0xFF3
 14367                           intcon	equ	0xFF2
 14368                           postinc0	equ	0xFEE
 14369                           wreg	equ	0xFE8
 14370                           indf1	equ	0xFE7
 14371                           postdec1	equ	0xFE5
 14372                           plusw1	equ	0xFE3
 14373                           fsr1h	equ	0xFE2
 14374                           fsr1l	equ	0xFE1
 14375                           indf2	equ	0xFDF
 14376                           postinc2	equ	0xFDE
 14377                           postdec2	equ	0xFDD
 14378                           plusw2	equ	0xFDB
 14379                           fsr2h	equ	0xFDA
 14380                           fsr2l	equ	0xFD9
 14381                           status	equ	0xFD8
 14382                           
 14383 ;; *************** function _SPI_Init *****************
 14384 ;; Defined at:
 14385 ;;		line 12 in file "Library/SPI.c"
 14386 ;; Parameters:    Size  Location     Type
 14387 ;;  pClock          4   45[BANK0 ] unsigned long 
 14388 ;;  pChannel        1   49[BANK0 ] enum E6744
 14389 ;;  pMode           1   50[BANK0 ] enum E6748
 14390 ;; Auto vars:     Size  Location     Type
 14391 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 14392 ;;		 -> SPI1(11), SPI2(11), 
 14393 ;; Return value:  Size  Location     Type
 14394 ;;                  1    wreg      void 
 14395 ;; Registers used:
 14396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14397 ;; Tracked objects:
 14398 ;;		On entry : 0/0
 14399 ;;		On exit  : 0/0
 14400 ;;		Unchanged: 0/0
 14401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14402 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14405 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14406 ;;Total ram usage:        8 bytes
 14407 ;; Hardware stack levels used:    1
 14408 ;; Hardware stack levels required when called:   12
 14409 ;; This function calls:
 14410 ;;		_Byte_SetBit
 14411 ;;		_Byte_SetQuad
 14412 ;;		_Port_SetPinType
 14413 ;;		_SPI_DCS
 14414 ;;		_SPI_DisableISR
 14415 ;;		_Timer2_Init
 14416 ;; This function is called by:
 14417 ;;		_Configure_GPIOs
 14418 ;;		_HMI_Init
 14419 ;; This function uses a non-reentrant model
 14420 ;;
 14421                           
 14422                           	psect	text80
 14423  010000                     __ptext80:
 14424                           	opt stack 0
 14425  010000                     _SPI_Init:
 14426                           	opt stack 16
 14427                           
 14428                           ;SPI.c: 14: SPIPtr pInput;
 14429                           ;SPI.c: 16: switch (pChannel)
 14430                           
 14431                           ;incstack = 0
 14432  010000  D00A               	goto	l597
 14433  010002                     
 14434                           ;SPI.c: 19: pInput = &SPI1;
 14435  010002  0EC8               	movlw	low _SPI1
 14436  010004  0100               	movlb	0	; () banked
 14437  010006  6F93               	movwf	SPI_Init@pInput& (0+255),b
 14438  010008  0E02               	movlw	high _SPI1
 14439  01000A  D003               	goto	L8
 14440  01000C                     
 14441                           ; BSR set to: 0
 14442                           ;SPI.c: 22: pInput = &SPI2;
 14443                           
 14444                           ; BSR set to: 0
 14445  01000C  0E85               	movlw	low _SPI2
 14446  01000E  6F93               	movwf	SPI_Init@pInput& (0+255),b
 14447  010010  0E01               	movlw	high _SPI2
 14448  010012                     L8:
 14449  010012  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;SPI.c: 24: };
 14453                           
 14454                           ;SPI.c: 23: break;
 14455  010014  D008               	goto	l599
 14456  010016                     l597:
 14457                           
 14458                           ; BSR set to: 0
 14459  010016  0100               	movlb	0	; () banked
 14460  010018  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 14461                           
 14462                           ; Switch size 1, requested type "space"
 14463                           ; Number of cases is 2, Range of values is 0 to 1
 14464                           ; switch strategies available:
 14465                           ; Name         Instructions Cycles
 14466                           ; simple_byte            7     4 (average)
 14467                           ;	Chosen strategy is simple_byte
 14468  01001A  0A00               	xorlw	0	; case 0
 14469  01001C  B4D8               	btfsc	status,2,c
 14470  01001E  D7F1               	goto	l598
 14471  010020  0A01               	xorlw	1	; case 1
 14472  010022  B4D8               	btfsc	status,2,c
 14473  010024  D7F3               	goto	l600
 14474  010026                     l599:
 14475                           
 14476                           ; BSR set to: 0
 14477                           ;SPI.c: 26: pInput->mChannel = pChannel;
 14478                           
 14479                           ; BSR set to: 0
 14480  010026  EE20 F002          	lfsr	2,2
 14481  01002A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14482  01002C  26D9               	addwf	fsr2l,f,c
 14483  01002E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14484  010030  22DA               	addwfc	fsr2h,f,c
 14485  010032  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 14486                           
 14487                           ;SPI.c: 35: switch (pChannel)
 14488  010036  D093               	goto	l601
 14489  010038                     
 14490                           ; BSR set to: 0
 14491                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 14492                           
 14493                           ; BSR set to: 0
 14494  010038  0EAE               	movlw	low _PortC
 14495  01003A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14496  01003C  0E01               	movlw	high _PortC
 14497  01003E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14498  010040  0E02               	movlw	2
 14499  010042  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14500  010044  0E03               	movlw	3
 14501  010046  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14502  010048  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14503                           
 14504                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 14505  01004C  0EAE               	movlw	low _PortC
 14506  01004E  0100               	movlb	0	; () banked
 14507  010050  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14508  010052  0E01               	movlw	high _PortC
 14509  010054  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14510  010056  0E03               	movlw	3
 14511  010058  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14512  01005A  0E03               	movlw	3
 14513  01005C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14514  01005E  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14515                           
 14516                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 14517  010062  0EAE               	movlw	low _PortC
 14518  010064  0100               	movlb	0	; () banked
 14519  010066  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14520  010068  0E01               	movlw	high _PortC
 14521  01006A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14522  01006C  0E05               	movlw	5
 14523  01006E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14524  010070  0E03               	movlw	3
 14525  010072  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14526  010074  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14527                           
 14528                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 14529  010078  0EAE               	movlw	low _PortC
 14530  01007A  0100               	movlb	0	; () banked
 14531  01007C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14532  01007E  0E01               	movlw	high _PortC
 14533  010080  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14534  010082  0E04               	movlw	4
 14535  010084  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14536  010086  0E00               	movlw	0
 14537  010088  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14538  01008A  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14539                           
 14540                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 14541  01008E  0100               	movlb	0	; () banked
 14542  010090  EE20 F003          	lfsr	2,3
 14543  010094  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14544  010096  26D9               	addwf	fsr2l,f,c
 14545  010098  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14546  01009A  22DA               	addwfc	fsr2h,f,c
 14547  01009C  0EC7               	movlw	199
 14548  01009E  6EDE               	movwf	postinc2,c
 14549  0100A0  0E0F               	movlw	15
 14550  0100A2  6EDD               	movwf	postdec2,c
 14551                           
 14552                           ; BSR set to: 0
 14553                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 14554  0100A4  EE20 F006          	lfsr	2,6
 14555  0100A8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14556  0100AA  26D9               	addwf	fsr2l,f,c
 14557  0100AC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14558  0100AE  22DA               	addwfc	fsr2h,f,c
 14559  0100B0  0EC6               	movlw	198
 14560  0100B2  6EDE               	movwf	postinc2,c
 14561  0100B4  0E0F               	movlw	15
 14562  0100B6  6EDD               	movwf	postdec2,c
 14563                           
 14564                           ; BSR set to: 0
 14565                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 14566  0100B8  EE20 F009          	lfsr	2,9
 14567  0100BC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14568  0100BE  26D9               	addwf	fsr2l,f,c
 14569  0100C0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14570  0100C2  22DA               	addwfc	fsr2h,f,c
 14571  0100C4  0EC9               	movlw	201
 14572  0100C6  D047               	goto	L9
 14573  0100C8                     
 14574                           ; BSR set to: 0
 14575                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 14576                           
 14577                           ; BSR set to: 0
 14578  0100C8  0E9A               	movlw	low _PortD
 14579  0100CA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14580  0100CC  0E01               	movlw	high _PortD
 14581  0100CE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14582  0100D0  0E07               	movlw	7
 14583  0100D2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14584  0100D4  0E03               	movlw	3
 14585  0100D6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14586  0100D8  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14587                           
 14588                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 14589  0100DC  0E9A               	movlw	low _PortD
 14590  0100DE  0100               	movlb	0	; () banked
 14591  0100E0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14592  0100E2  0E01               	movlw	high _PortD
 14593  0100E4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14594  0100E6  0E06               	movlw	6
 14595  0100E8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14596  0100EA  0E03               	movlw	3
 14597  0100EC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14598  0100EE  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14599                           
 14600                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 14601  0100F2  0E9A               	movlw	low _PortD
 14602  0100F4  0100               	movlb	0	; () banked
 14603  0100F6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14604  0100F8  0E01               	movlw	high _PortD
 14605  0100FA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14606  0100FC  0E04               	movlw	4
 14607  0100FE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14608  010100  0E03               	movlw	3
 14609  010102  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14610  010104  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14611                           
 14612                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 14613  010108  0E9A               	movlw	low _PortD
 14614  01010A  0100               	movlb	0	; () banked
 14615  01010C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14616  01010E  0E01               	movlw	high _PortD
 14617  010110  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14618  010112  0E05               	movlw	5
 14619  010114  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14620  010116  0E00               	movlw	0
 14621  010118  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14622  01011A  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 14623                           
 14624                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 14625  01011E  0100               	movlb	0	; () banked
 14626  010120  EE20 F003          	lfsr	2,3
 14627  010124  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14628  010126  26D9               	addwf	fsr2l,f,c
 14629  010128  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14630  01012A  22DA               	addwfc	fsr2h,f,c
 14631  01012C  0E6D               	movlw	109
 14632  01012E  6EDE               	movwf	postinc2,c
 14633  010130  0E0F               	movlw	15
 14634  010132  6EDD               	movwf	postdec2,c
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 14638  010134  EE20 F006          	lfsr	2,6
 14639  010138  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14640  01013A  26D9               	addwf	fsr2l,f,c
 14641  01013C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14642  01013E  22DA               	addwfc	fsr2h,f,c
 14643  010140  0E6C               	movlw	108
 14644  010142  6EDE               	movwf	postinc2,c
 14645  010144  0E0F               	movlw	15
 14646  010146  6EDD               	movwf	postdec2,c
 14647                           
 14648                           ; BSR set to: 0
 14649                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 14650  010148  EE20 F009          	lfsr	2,9
 14651  01014C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14652  01014E  26D9               	addwf	fsr2l,f,c
 14653  010150  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14654  010152  22DA               	addwfc	fsr2h,f,c
 14655  010154  0E6F               	movlw	111
 14656  010156                     L9:
 14657  010156  6EDE               	movwf	postinc2,c
 14658  010158  0E0F               	movlw	15
 14659  01015A  6EDD               	movwf	postdec2,c
 14660                           
 14661                           ;SPI.c: 68: break;
 14662  01015C  D008               	goto	l603
 14663  01015E                     l601:
 14664                           
 14665                           ; BSR set to: 0
 14666                           
 14667                           ; BSR set to: 0
 14668  01015E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 14669                           
 14670                           ; Switch size 1, requested type "space"
 14671                           ; Number of cases is 2, Range of values is 0 to 1
 14672                           ; switch strategies available:
 14673                           ; Name         Instructions Cycles
 14674                           ; simple_byte            7     4 (average)
 14675                           ;	Chosen strategy is simple_byte
 14676  010160  0A00               	xorlw	0	; case 0
 14677  010162  B4D8               	btfsc	status,2,c
 14678  010164  D769               	goto	l602
 14679  010166  0A01               	xorlw	1	; case 1
 14680  010168  A4D8               	btfss	status,2,c
 14681  01016A  0012               	return	
 14682  01016C  D7AD               	goto	l604
 14683  01016E                     l603:
 14684                           
 14685                           ; BSR set to: 0
 14686                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14687                           
 14688                           ; BSR set to: 0
 14689  01016E  EE20 F006          	lfsr	2,6
 14690  010172  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14691  010174  26D9               	addwf	fsr2l,f,c
 14692  010176  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14693  010178  22DA               	addwfc	fsr2h,f,c
 14694  01017A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14695  01017E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14696  010182  0E05               	movlw	5
 14697  010184  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14698  010186  0E00               	movlw	0
 14699  010188  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14700  01018A  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14701                           
 14702                           ;SPI.c: 77: switch(pMode)
 14703  01018E  D08C               	goto	l607
 14704  010190                     
 14705                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 14706  010190  0100               	movlb	0	; () banked
 14707  010192  EE20 F006          	lfsr	2,6
 14708  010196  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14709  010198  26D9               	addwf	fsr2l,f,c
 14710  01019A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14711  01019C  22DA               	addwfc	fsr2h,f,c
 14712  01019E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14713  0101A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14714  0101A6  0E04               	movlw	4
 14715  0101A8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14716  0101AA  0E00               	movlw	0
 14717  0101AC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14718  0101AE  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14719                           
 14720                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 14721  0101B2  0100               	movlb	0	; () banked
 14722  0101B4  EE20 F003          	lfsr	2,3
 14723  0101B8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14724  0101BA  26D9               	addwf	fsr2l,f,c
 14725  0101BC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14726  0101BE  22DA               	addwfc	fsr2h,f,c
 14727  0101C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14728  0101C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14729  0101C8  0E06               	movlw	6
 14730  0101CA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14731  0101CC  0E00               	movlw	0
 14732  0101CE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14733  0101D0  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14734                           
 14735                           ;SPI.c: 82: break;
 14736  0101D4  D078               	goto	l609
 14737  0101D6                     
 14738                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 14739  0101D6  0100               	movlb	0	; () banked
 14740  0101D8  EE20 F006          	lfsr	2,6
 14741  0101DC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14742  0101DE  26D9               	addwf	fsr2l,f,c
 14743  0101E0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14744  0101E2  22DA               	addwfc	fsr2h,f,c
 14745  0101E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14746  0101E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14747  0101EC  0E04               	movlw	4
 14748  0101EE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14749  0101F0  0E00               	movlw	0
 14750  0101F2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14751  0101F4  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14752                           
 14753                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 14754  0101F8  0100               	movlb	0	; () banked
 14755  0101FA  EE20 F003          	lfsr	2,3
 14756  0101FE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14757  010200  26D9               	addwf	fsr2l,f,c
 14758  010202  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14759  010204  22DA               	addwfc	fsr2h,f,c
 14760  010206  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14761  01020A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14762  01020E  0E06               	movlw	6
 14763  010210  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14764  010212  0E01               	movlw	1
 14765  010214  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14766  010216  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14767                           
 14768                           ;SPI.c: 86: break;
 14769  01021A  D055               	goto	l609
 14770  01021C                     
 14771                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 14772  01021C  0100               	movlb	0	; () banked
 14773  01021E  EE20 F006          	lfsr	2,6
 14774  010222  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14775  010224  26D9               	addwf	fsr2l,f,c
 14776  010226  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14777  010228  22DA               	addwfc	fsr2h,f,c
 14778  01022A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14779  01022E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14780  010232  0E04               	movlw	4
 14781  010234  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14782  010236  0E01               	movlw	1
 14783  010238  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14784  01023A  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14785                           
 14786                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 14787  01023E  0100               	movlb	0	; () banked
 14788  010240  EE20 F003          	lfsr	2,3
 14789  010244  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14790  010246  26D9               	addwf	fsr2l,f,c
 14791  010248  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14792  01024A  22DA               	addwfc	fsr2h,f,c
 14793  01024C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14794  010250  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14795  010254  0E06               	movlw	6
 14796  010256  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14797  010258  0E00               	movlw	0
 14798  01025A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14799  01025C  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14800                           
 14801                           ;SPI.c: 90: break;
 14802  010260  D032               	goto	l609
 14803  010262                     
 14804                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 14805  010262  0100               	movlb	0	; () banked
 14806  010264  EE20 F006          	lfsr	2,6
 14807  010268  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14808  01026A  26D9               	addwf	fsr2l,f,c
 14809  01026C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14810  01026E  22DA               	addwfc	fsr2h,f,c
 14811  010270  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14812  010274  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14813  010278  0E04               	movlw	4
 14814  01027A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14815  01027C  0E01               	movlw	1
 14816  01027E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14817  010280  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14818                           
 14819                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 14820  010284  0100               	movlb	0	; () banked
 14821  010286  EE20 F003          	lfsr	2,3
 14822  01028A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14823  01028C  26D9               	addwf	fsr2l,f,c
 14824  01028E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14825  010290  22DA               	addwfc	fsr2h,f,c
 14826  010292  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14827  010296  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14828  01029A  0E06               	movlw	6
 14829  01029C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14830  01029E  0E01               	movlw	1
 14831  0102A0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14832  0102A2  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14833                           
 14834                           ;SPI.c: 94: break;
 14835  0102A6  D00F               	goto	l609
 14836  0102A8                     l607:
 14837  0102A8  0100               	movlb	0	; () banked
 14838  0102AA  5192               	movf	SPI_Init@pMode& (0+255),w,b
 14839                           
 14840                           ; Switch size 1, requested type "space"
 14841                           ; Number of cases is 4, Range of values is 0 to 3
 14842                           ; switch strategies available:
 14843                           ; Name         Instructions Cycles
 14844                           ; simple_byte           13     7 (average)
 14845                           ;	Chosen strategy is simple_byte
 14846  0102AC  0A00               	xorlw	0	; case 0
 14847  0102AE  B4D8               	btfsc	status,2,c
 14848  0102B0  D76F               	goto	l608
 14849  0102B2  0A01               	xorlw	1	; case 1
 14850  0102B4  B4D8               	btfsc	status,2,c
 14851  0102B6  D78F               	goto	l610
 14852  0102B8  0A03               	xorlw	3	; case 2
 14853  0102BA  B4D8               	btfsc	status,2,c
 14854  0102BC  D7AF               	goto	l611
 14855  0102BE  0A01               	xorlw	1	; case 3
 14856  0102C0  A4D8               	btfss	status,2,c
 14857  0102C2  0012               	return	
 14858  0102C4  D7CE               	goto	l612
 14859  0102C6                     l609:
 14860                           
 14861                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 14862                           
 14863                           ; BSR set to: 0
 14864  0102C6  0100               	movlb	0	; () banked
 14865  0102C8  EE20 F006          	lfsr	2,6
 14866  0102CC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14867  0102CE  26D9               	addwf	fsr2l,f,c
 14868  0102D0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14869  0102D2  22DA               	addwfc	fsr2h,f,c
 14870  0102D4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14871  0102D8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14872  0102DC  0E07               	movlw	7
 14873  0102DE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14874  0102E0  0E00               	movlw	0
 14875  0102E2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14876  0102E4  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14877                           
 14878                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 14879  0102E8  0100               	movlb	0	; () banked
 14880  0102EA  EE20 F006          	lfsr	2,6
 14881  0102EE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14882  0102F0  26D9               	addwf	fsr2l,f,c
 14883  0102F2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14884  0102F4  22DA               	addwfc	fsr2h,f,c
 14885  0102F6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14886  0102FA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14887  0102FE  0E06               	movlw	6
 14888  010300  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14889  010302  0E00               	movlw	0
 14890  010304  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14891  010306  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14892                           
 14893                           ;SPI.c: 106: Timer2_Init(pClock);
 14894  01030A  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 14895  01030E  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 14896  010312  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 14897  010316  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 14898  01031A  ECE3  F095         	call	_Timer2_Init	;wreg free
 14899                           
 14900                           ;SPI.c: 112: SPI_DisableISR(pInput);
 14901  01031E  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 14902  010322  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 14903  010326  EC01  F0A9         	call	_SPI_DisableISR	;wreg free
 14904                           
 14905                           ;SPI.c: 116: switch (pChannel)
 14906  01032A  D004               	goto	l614
 14907  01032C                     l615:
 14908                           
 14909                           ; BSR set to: 0
 14910  01032C  869F               	bsf	3999,3,c	;volatile
 14911  01032E  D00B               	goto	l616
 14912  010330                     l617:
 14913                           
 14914                           ; BSR set to: 0
 14915  010330  8EA5               	bsf	4005,7,c	;volatile
 14916  010332  D009               	goto	l616
 14917  010334                     l614:
 14918                           
 14919                           ; BSR set to: 0
 14920  010334  0100               	movlb	0	; () banked
 14921  010336  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 14922                           
 14923                           ; Switch size 1, requested type "space"
 14924                           ; Number of cases is 2, Range of values is 0 to 1
 14925                           ; switch strategies available:
 14926                           ; Name         Instructions Cycles
 14927                           ; simple_byte            7     4 (average)
 14928                           ;	Chosen strategy is simple_byte
 14929  010338  0A00               	xorlw	0	; case 0
 14930  01033A  B4D8               	btfsc	status,2,c
 14931  01033C  D7F7               	goto	l615
 14932  01033E  0A01               	xorlw	1	; case 1
 14933  010340  A4D8               	btfss	status,2,c
 14934  010342  0012               	return	
 14935  010344  D7F5               	goto	l617
 14936  010346                     l616:
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;SPI.c: 124: SPI_DCS(pInput);
 14940                           
 14941                           ; BSR set to: 0
 14942  010346  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 14943  01034A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 14944  01034E  EC78  F0A8         	call	_SPI_DCS	;wreg free
 14945                           
 14946                           ;SPI.c: 126: pInput->mBusy = 0;
 14947  010352  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 14948  010356  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 14949  01035A  0E00               	movlw	0
 14950  01035C  6EDF               	movwf	indf2,c
 14951                           
 14952                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 14953  01035E  0100               	movlb	0	; () banked
 14954  010360  EE20 F006          	lfsr	2,6
 14955  010364  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14956  010366  26D9               	addwf	fsr2l,f,c
 14957  010368  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14958  01036A  22DA               	addwfc	fsr2h,f,c
 14959  01036C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 14960  010370  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 14961  010374  0E00               	movlw	0
 14962  010376  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14963  010378  0E03               	movlw	3
 14964  01037A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 14965  01037C  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 14966                           
 14967                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14968  010380  0100               	movlb	0	; () banked
 14969  010382  EE20 F006          	lfsr	2,6
 14970  010386  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14971  010388  26D9               	addwf	fsr2l,f,c
 14972  01038A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14973  01038C  22DA               	addwfc	fsr2h,f,c
 14974  01038E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14975  010392  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14976  010396  0E05               	movlw	5
 14977  010398  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14978  01039A  0E01               	movlw	1
 14979  01039C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14980  01039E  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 14981  0103A2  0012               	return		;funcret
 14982  0103A4                     __end_of_SPI_Init:
 14983                           	opt stack 0
 14984                           tosu	equ	0xFFF
 14985                           tosh	equ	0xFFE
 14986                           tosl	equ	0xFFD
 14987                           pclath	equ	0xFFA
 14988                           tblptru	equ	0xFF8
 14989                           tblptrh	equ	0xFF7
 14990                           tblptrl	equ	0xFF6
 14991                           tablat	equ	0xFF5
 14992                           prodh	equ	0xFF4
 14993                           prodl	equ	0xFF3
 14994                           intcon	equ	0xFF2
 14995                           postinc0	equ	0xFEE
 14996                           wreg	equ	0xFE8
 14997                           indf1	equ	0xFE7
 14998                           postdec1	equ	0xFE5
 14999                           plusw1	equ	0xFE3
 15000                           fsr1h	equ	0xFE2
 15001                           fsr1l	equ	0xFE1
 15002                           indf2	equ	0xFDF
 15003                           postinc2	equ	0xFDE
 15004                           postdec2	equ	0xFDD
 15005                           plusw2	equ	0xFDB
 15006                           fsr2h	equ	0xFDA
 15007                           fsr2l	equ	0xFD9
 15008                           status	equ	0xFD8
 15009                           
 15010 ;; *************** function _Timer2_Init *****************
 15011 ;; Defined at:
 15012 ;;		line 10 in file "Library/Timer2.c"
 15013 ;; Parameters:    Size  Location     Type
 15014 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15015 ;; Auto vars:     Size  Location     Type
 15016 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 15017 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 15018 ;;  RDIV            4   18[BANK0 ] unsigned long 
 15019 ;; Return value:  Size  Location     Type
 15020 ;;                  1    wreg      void 
 15021 ;; Registers used:
 15022 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15023 ;; Tracked objects:
 15024 ;;		On entry : 0/0
 15025 ;;		On exit  : 0/0
 15026 ;;		Unchanged: 0/0
 15027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15028 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15029 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15031 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15032 ;;Total ram usage:       17 bytes
 15033 ;; Hardware stack levels used:    1
 15034 ;; Hardware stack levels required when called:    8
 15035 ;; This function calls:
 15036 ;;		_Timer2_Clear
 15037 ;;		___lldiv
 15038 ;; This function is called by:
 15039 ;;		_SPI_Init
 15040 ;; This function uses a non-reentrant model
 15041 ;;
 15042                           
 15043                           	psect	text81
 15044  012BC6                     __ptext81:
 15045                           	opt stack 0
 15046  012BC6                     _Timer2_Init:
 15047                           	opt stack 19
 15048                           
 15049                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 15050                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 15051                           ;Timer2.c: 14: static UINT8 PRE = 0;
 15052                           ;Timer2.c: 15: static UINT32 DIV = 0;
 15053                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 15054                           
 15055                           ;incstack = 0
 15056  012BC6  0E00               	movlw	0
 15057  012BC8  0100               	movlb	0	; () banked
 15058  012BCA  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 15059  012BCC  0E6C               	movlw	108
 15060  012BCE  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 15061  012BD0  0EDC               	movlw	220
 15062  012BD2  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 15063  012BD4  0E02               	movlw	2
 15064  012BD6  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 15065                           
 15066                           ; BSR set to: 0
 15067                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 15068                           ;Timer2.c: 20: pFrequency *= 2;
 15069  012BD8  90D8               	bcf	status,0,c
 15070  012BDA  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 15071  012BDC  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 15072  012BDE  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 15073  012BE0  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;Timer2.c: 23: pCPUClock /= 4;
 15077  012BE2  0E02               	movlw	2
 15078  012BE4  6F71               	movwf	??_Timer2_Init& (0+255),b
 15079  012BE6                     u10995:
 15080  012BE6  90D8               	bcf	status,0,c
 15081  012BE8  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 15082  012BEA  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 15083  012BEC  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 15084  012BEE  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 15085  012BF0  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 15086  012BF2  D7F9               	goto	u10995
 15087                           
 15088                           ; BSR set to: 0
 15089                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 15090  012BF4  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 15091  012BF8  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 15092  012BFC  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 15093  012C00  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 15094  012C04  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 15095  012C08  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 15096  012C0C  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 15097  012C10  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 15098  012C14  EC7F  F0A0         	call	___lldiv	;wreg free
 15099  012C18  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 15100  012C1C  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 15101  012C20  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 15102  012C24  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 15103                           
 15104                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 15105  012C28  D00E               	goto	l1828
 15106  012C2A                     l13762:
 15107                           
 15108                           ;Timer2.c: 28: {
 15109                           ;Timer2.c: 29: RDIV = 0;
 15110  012C2A  0E00               	movlw	0
 15111  012C2C  0100               	movlb	0	; () banked
 15112  012C2E  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 15113  012C30  0E00               	movlw	0
 15114  012C32  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 15115  012C34  0E00               	movlw	0
 15116  012C36  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 15117  012C38  0E00               	movlw	0
 15118  012C3A  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 15119                           
 15120                           ; BSR set to: 0
 15121                           ;Timer2.c: 30: INDEX ++;
 15122  012C3C  2BF1               	incf	Timer2_Init@INDEX& (0+255),f,b
 15123                           
 15124                           ; BSR set to: 0
 15125                           ;Timer2.c: 31: if (INDEX >= 3)
 15126  012C3E  0E02               	movlw	2
 15127  012C40  65F1               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 15128  012C42  D001               	goto	l1828
 15129  012C44  D023               	goto	u11010
 15130  012C46                     l1828:
 15131                           
 15132                           ; BSR set to: 0
 15133                           
 15134                           ; BSR set to: 0
 15135  012C46  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 15136  012C4A  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 15137  012C4E  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 15138  012C52  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 15139  012C56  0100               	movlb	0	; () banked
 15140  012C58  51F1               	movf	Timer2_Init@INDEX& (0+255),w,b
 15141  012C5A  0D01               	mullw	1
 15142  012C5C  0EA0               	movlw	low Timer2_Init@PRESCALE
 15143  012C5E  24F3               	addwf	prodl,w,c
 15144  012C60  6EF6               	movwf	tblptrl,c
 15145  012C62  0EFC               	movlw	high Timer2_Init@PRESCALE
 15146  012C64  20F4               	addwfc	prodh,w,c
 15147  012C66  6EF7               	movwf	tblptrh,c
 15148  012C68                     	if	1	;There are 3 active tblptr bytes
 15149  012C68  6AF8               	clrf	tblptru,c
 15150  012C6A  0E00               	movlw	low (__mediumconst shr (0+16))
 15151  012C6C  22F8               	addwfc	tblptru,f,c
 15152  012C6E                     	endif
 15153  012C6E  0008               	tblrd		*
 15154  012C70  50F5               	movf	tablat,w,c
 15155  012C72  6F64               	movwf	___lldiv@divisor& (0+255),b
 15156  012C74  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 15157  012C76  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15158  012C78  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15159  012C7A  EC7F  F0A0         	call	___lldiv	;wreg free
 15160  012C7E  0100               	movlb	0	; () banked
 15161  012C80  5163               	movf	(?___lldiv+3)& (0+255),w,b
 15162  012C82  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 15163  012C84  E1D2               	bnz	l13762
 15164  012C86  0561               	decf	(?___lldiv+1)& (0+255),w,b
 15165  012C88  B0D8               	btfsc	status,0,c
 15166  012C8A  D7CF               	goto	l1827
 15167  012C8C                     u11010:
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;Timer2.c: 33: }
 15171                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 15172                           
 15173                           ; BSR set to: 0
 15174  012C8C  50CA               	movf	4042,w,c	;volatile
 15175  012C8E  19F1               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 15176  012C90  0BFC               	andlw	-4
 15177  012C92  19F1               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 15178  012C94  6ECA               	movwf	4042,c	;volatile
 15179                           
 15180                           ; BSR set to: 0
 15181                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 15182  012C96  84CA               	bsf	4042,2,c	;volatile
 15183                           
 15184                           ; BSR set to: 0
 15185                           ;Timer2.c: 44: Timer2_Clear();
 15186  012C98  ECBE  F0AA         	call	_Timer2_Clear	;wreg free
 15187                           
 15188                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 15189  012C9C  0100               	movlb	0	; () banked
 15190  012C9E  51F1               	movf	Timer2_Init@INDEX& (0+255),w,b
 15191  012CA0  0D01               	mullw	1
 15192  012CA2  0EA0               	movlw	low Timer2_Init@PRESCALE
 15193  012CA4  24F3               	addwf	prodl,w,c
 15194  012CA6  6EF6               	movwf	tblptrl,c
 15195  012CA8  0EFC               	movlw	high Timer2_Init@PRESCALE
 15196  012CAA  20F4               	addwfc	prodh,w,c
 15197  012CAC  6EF7               	movwf	tblptrh,c
 15198  012CAE                     	if	1	;There are 3 active tblptr bytes
 15199  012CAE  6AF8               	clrf	tblptru,c
 15200  012CB0  0E00               	movlw	low (__mediumconst shr (0+16))
 15201  012CB2  22F8               	addwfc	tblptru,f,c
 15202  012CB4                     	endif
 15203  012CB4  0008               	tblrd		*
 15204  012CB6  CFF5 F0F0          	movff	tablat,Timer2_Init@PRE
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 15208  012CBA  0EFF               	movlw	255
 15209  012CBC  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 15210  012CBE  0101               	movlb	1	; () banked
 15211  012CC0  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 15212  012CC2  0EFF               	movlw	255
 15213  012CC4  0100               	movlb	0	; () banked
 15214  012CC6  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 15215  012CC8  0101               	movlb	1	; () banked
 15216  012CCA  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 15217  012CCC  0EFF               	movlw	255
 15218  012CCE  0100               	movlb	0	; () banked
 15219  012CD0  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 15220  012CD2  0101               	movlb	1	; () banked
 15221  012CD4  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 15222  012CD6  0EFF               	movlw	255
 15223  012CD8  0100               	movlb	0	; () banked
 15224  012CDA  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 15225  012CDC  0101               	movlb	1	; () banked
 15226  012CDE  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 15227                           
 15228                           ; BSR set to: 1
 15229                           ;Timer2.c: 48: INDEX = DIV/PRE;
 15230  012CE0  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 15231  012CE4  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 15232  012CE8  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 15233  012CEC  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 15234  012CF0  0100               	movlb	0	; () banked
 15235  012CF2  51F0               	movf	Timer2_Init@PRE& (0+255),w,b
 15236  012CF4  6F64               	movwf	___lldiv@divisor& (0+255),b
 15237  012CF6  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 15238  012CF8  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 15239  012CFA  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 15240  012CFC  EC7F  F0A0         	call	___lldiv	;wreg free
 15241  012D00  0100               	movlb	0	; () banked
 15242  012D02  5160               	movf	?___lldiv& (0+255),w,b
 15243  012D04  6FF1               	movwf	Timer2_Init@INDEX& (0+255),b
 15244                           
 15245                           ; BSR set to: 0
 15246                           ;Timer2.c: 49: PR2 = INDEX;
 15247  012D06  C0F1  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 15248                           
 15249                           ; BSR set to: 0
 15250  012D0A  0012               	return		;funcret
 15251  012D0C                     __end_of_Timer2_Init:
 15252                           	opt stack 0
 15253                           tosu	equ	0xFFF
 15254                           tosh	equ	0xFFE
 15255                           tosl	equ	0xFFD
 15256                           pclath	equ	0xFFA
 15257                           tblptru	equ	0xFF8
 15258                           tblptrh	equ	0xFF7
 15259                           tblptrl	equ	0xFF6
 15260                           tablat	equ	0xFF5
 15261                           prodh	equ	0xFF4
 15262                           prodl	equ	0xFF3
 15263                           intcon	equ	0xFF2
 15264                           postinc0	equ	0xFEE
 15265                           wreg	equ	0xFE8
 15266                           indf1	equ	0xFE7
 15267                           postdec1	equ	0xFE5
 15268                           plusw1	equ	0xFE3
 15269                           fsr1h	equ	0xFE2
 15270                           fsr1l	equ	0xFE1
 15271                           indf2	equ	0xFDF
 15272                           postinc2	equ	0xFDE
 15273                           postdec2	equ	0xFDD
 15274                           plusw2	equ	0xFDB
 15275                           fsr2h	equ	0xFDA
 15276                           fsr2l	equ	0xFD9
 15277                           status	equ	0xFD8
 15278                           
 15279 ;; *************** function ___lldiv *****************
 15280 ;; Defined at:
 15281 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 15282 ;; Parameters:    Size  Location     Type
 15283 ;;  dividend        4    0[BANK0 ] unsigned long 
 15284 ;;  divisor         4    4[BANK0 ] unsigned long 
 15285 ;; Auto vars:     Size  Location     Type
 15286 ;;  quotient        4    8[BANK0 ] unsigned long 
 15287 ;;  counter         1   12[BANK0 ] unsigned char 
 15288 ;; Return value:  Size  Location     Type
 15289 ;;                  4    0[BANK0 ] unsigned long 
 15290 ;; Registers used:
 15291 ;;		wreg, status,2, status,0
 15292 ;; Tracked objects:
 15293 ;;		On entry : 0/0
 15294 ;;		On exit  : 0/0
 15295 ;;		Unchanged: 0/0
 15296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15297 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15298 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15300 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15301 ;;Total ram usage:       13 bytes
 15302 ;; Hardware stack levels used:    1
 15303 ;; Hardware stack levels required when called:    7
 15304 ;; This function calls:
 15305 ;;		Nothing
 15306 ;; This function is called by:
 15307 ;;		_Timer2_Init
 15308 ;;		_rand_between
 15309 ;;		_I2C_Init
 15310 ;;		_Timer0_Init
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314                           	psect	text82
 15315  0140FE                     __ptext82:
 15316                           	opt stack 0
 15317  0140FE                     ___lldiv:
 15318                           	opt stack 19
 15319                           
 15320                           ; BSR set to: 0
 15321                           ;incstack = 0
 15322  0140FE  0E00               	movlw	0
 15323  014100  0100               	movlb	0	; () banked
 15324  014102  6F68               	movwf	___lldiv@quotient& (0+255),b
 15325  014104  0E00               	movlw	0
 15326  014106  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 15327  014108  0E00               	movlw	0
 15328  01410A  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 15329  01410C  0E00               	movlw	0
 15330  01410E  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 15331                           
 15332                           ; BSR set to: 0
 15333  014110  5164               	movf	___lldiv@divisor& (0+255),w,b
 15334  014112  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15335  014114  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15336  014116  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15337  014118  B4D8               	btfsc	status,2,c
 15338  01411A  D02A               	goto	l2781
 15339                           
 15340                           ; BSR set to: 0
 15341  01411C  0E01               	movlw	1
 15342  01411E  6F6C               	movwf	___lldiv@counter& (0+255),b
 15343  014120  D006               	goto	l2776
 15344  014122                     
 15345                           ; BSR set to: 0
 15346                           
 15347                           ; BSR set to: 0
 15348  014122  90D8               	bcf	status,0,c
 15349  014124  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 15350  014126  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15351  014128  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15352  01412A  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15353  01412C  2B6C               	incf	___lldiv@counter& (0+255),f,b
 15354  01412E                     l2776:
 15355                           
 15356                           ; BSR set to: 0
 15357                           
 15358                           ; BSR set to: 0
 15359  01412E  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15360  014130  D7F8               	goto	l2777
 15361  014132                     u10740:
 15362                           
 15363                           ; BSR set to: 0
 15364                           
 15365                           ; BSR set to: 0
 15366                           
 15367                           ; BSR set to: 0
 15368  014132  90D8               	bcf	status,0,c
 15369  014134  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 15370  014136  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15371  014138  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15372  01413A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15373                           
 15374                           ; BSR set to: 0
 15375  01413C  5164               	movf	___lldiv@divisor& (0+255),w,b
 15376  01413E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 15377  014140  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15378  014142  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15379  014144  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15380  014146  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15381  014148  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15382  01414A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15383  01414C  A0D8               	btfss	status,0,c
 15384  01414E  D009               	goto	l2780
 15385                           
 15386                           ; BSR set to: 0
 15387  014150  5164               	movf	___lldiv@divisor& (0+255),w,b
 15388  014152  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 15389  014154  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15390  014156  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15391  014158  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15392  01415A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15393  01415C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15394  01415E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15395                           
 15396                           ; BSR set to: 0
 15397  014160  8168               	bsf	___lldiv@quotient& (0+255),0,b
 15398  014162                     l2780:
 15399                           
 15400                           ; BSR set to: 0
 15401                           
 15402                           ; BSR set to: 0
 15403  014162  90D8               	bcf	status,0,c
 15404  014164  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15405  014166  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15406  014168  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15407  01416A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 15408                           
 15409                           ; BSR set to: 0
 15410  01416C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 15411  01416E  D7E1               	goto	u10740
 15412  014170                     l2781:
 15413                           
 15414                           ; BSR set to: 0
 15415                           
 15416                           ; BSR set to: 0
 15417  014170  C068  F060         	movff	___lldiv@quotient,?___lldiv
 15418  014174  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 15419  014178  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 15420  01417C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 15421                           
 15422                           ; BSR set to: 0
 15423  014180  0012               	return		;funcret
 15424  014182                     __end_of___lldiv:
 15425                           	opt stack 0
 15426                           tosu	equ	0xFFF
 15427                           tosh	equ	0xFFE
 15428                           tosl	equ	0xFFD
 15429                           pclath	equ	0xFFA
 15430                           tblptru	equ	0xFF8
 15431                           tblptrh	equ	0xFF7
 15432                           tblptrl	equ	0xFF6
 15433                           tablat	equ	0xFF5
 15434                           prodh	equ	0xFF4
 15435                           prodl	equ	0xFF3
 15436                           intcon	equ	0xFF2
 15437                           postinc0	equ	0xFEE
 15438                           wreg	equ	0xFE8
 15439                           indf1	equ	0xFE7
 15440                           postdec1	equ	0xFE5
 15441                           plusw1	equ	0xFE3
 15442                           fsr1h	equ	0xFE2
 15443                           fsr1l	equ	0xFE1
 15444                           indf2	equ	0xFDF
 15445                           postinc2	equ	0xFDE
 15446                           postdec2	equ	0xFDD
 15447                           plusw2	equ	0xFDB
 15448                           fsr2h	equ	0xFDA
 15449                           fsr2l	equ	0xFD9
 15450                           status	equ	0xFD8
 15451                           
 15452 ;; *************** function _Timer2_Clear *****************
 15453 ;; Defined at:
 15454 ;;		line 3 in file "Library/Timer2.c"
 15455 ;; Parameters:    Size  Location     Type
 15456 ;;		None
 15457 ;; Auto vars:     Size  Location     Type
 15458 ;;		None
 15459 ;; Return value:  Size  Location     Type
 15460 ;;                  1    wreg      void 
 15461 ;; Registers used:
 15462 ;;		None
 15463 ;; Tracked objects:
 15464 ;;		On entry : 0/0
 15465 ;;		On exit  : 0/0
 15466 ;;		Unchanged: 0/0
 15467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15472 ;;Total ram usage:        0 bytes
 15473 ;; Hardware stack levels used:    1
 15474 ;; Hardware stack levels required when called:    7
 15475 ;; This function calls:
 15476 ;;		Nothing
 15477 ;; This function is called by:
 15478 ;;		_Timer2_Init
 15479 ;; This function uses a non-reentrant model
 15480 ;;
 15481                           
 15482                           	psect	text83
 15483  01557C                     __ptext83:
 15484                           	opt stack 0
 15485  01557C                     _Timer2_Clear:
 15486                           	opt stack 19
 15487                           
 15488                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;incstack = 0
 15492  01557C  929E               	bcf	3998,1,c	;volatile
 15493                           
 15494                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 15495  01557E  929D               	bcf	3997,1,c	;volatile
 15496                           
 15497                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 15498  015580  929F               	bcf	3999,1,c	;volatile
 15499  015582  0012               	return		;funcret
 15500  015584                     __end_of_Timer2_Clear:
 15501                           	opt stack 0
 15502                           tosu	equ	0xFFF
 15503                           tosh	equ	0xFFE
 15504                           tosl	equ	0xFFD
 15505                           pclath	equ	0xFFA
 15506                           tblptru	equ	0xFF8
 15507                           tblptrh	equ	0xFF7
 15508                           tblptrl	equ	0xFF6
 15509                           tablat	equ	0xFF5
 15510                           prodh	equ	0xFF4
 15511                           prodl	equ	0xFF3
 15512                           intcon	equ	0xFF2
 15513                           postinc0	equ	0xFEE
 15514                           wreg	equ	0xFE8
 15515                           indf1	equ	0xFE7
 15516                           postdec1	equ	0xFE5
 15517                           plusw1	equ	0xFE3
 15518                           fsr1h	equ	0xFE2
 15519                           fsr1l	equ	0xFE1
 15520                           indf2	equ	0xFDF
 15521                           postinc2	equ	0xFDE
 15522                           postdec2	equ	0xFDD
 15523                           plusw2	equ	0xFDB
 15524                           fsr2h	equ	0xFDA
 15525                           fsr2l	equ	0xFD9
 15526                           status	equ	0xFD8
 15527                           
 15528 ;; *************** function _SPI_DisableISR *****************
 15529 ;; Defined at:
 15530 ;;		line 181 in file "Library/SPI.c"
 15531 ;; Parameters:    Size  Location     Type
 15532 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 15533 ;;		 -> SPI1(11), SPI2(11), 
 15534 ;; Auto vars:     Size  Location     Type
 15535 ;;		None
 15536 ;; Return value:  Size  Location     Type
 15537 ;;                  1    wreg      void 
 15538 ;; Registers used:
 15539 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15540 ;; Tracked objects:
 15541 ;;		On entry : 0/0
 15542 ;;		On exit  : 0/0
 15543 ;;		Unchanged: 0/0
 15544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15545 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15549 ;;Total ram usage:        2 bytes
 15550 ;; Hardware stack levels used:    1
 15551 ;; Hardware stack levels required when called:    7
 15552 ;; This function calls:
 15553 ;;		Nothing
 15554 ;; This function is called by:
 15555 ;;		_SPI_Init
 15556 ;; This function uses a non-reentrant model
 15557 ;;
 15558                           
 15559                           	psect	text84
 15560  015202                     __ptext84:
 15561                           	opt stack 0
 15562  015202                     _SPI_DisableISR:
 15563                           	opt stack 20
 15564                           
 15565                           ;SPI.c: 183: switch (pInput->mChannel)
 15566                           
 15567                           ;incstack = 0
 15568  015202  D004               	goto	l654
 15569  015204                     l655:
 15570                           
 15571                           ; BSR set to: 0
 15572  015204  969D               	bcf	3997,3,c	;volatile
 15573  015206  0012               	return	
 15574  015208                     l657:
 15575                           
 15576                           ; BSR set to: 0
 15577  015208  9EA3               	bcf	4003,7,c	;volatile
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;SPI.c: 188: };
 15581                           
 15582                           ; BSR set to: 0
 15583                           
 15584                           ;SPI.c: 187: default: return;
 15585  01520A  0012               	return	
 15586  01520C                     l654:
 15587                           
 15588                           ; BSR set to: 0
 15589  01520C  0100               	movlb	0	; () banked
 15590  01520E  EE20 F002          	lfsr	2,2
 15591  015212  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 15592  015214  26D9               	addwf	fsr2l,f,c
 15593  015216  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 15594  015218  22DA               	addwfc	fsr2h,f,c
 15595  01521A  50DF               	movf	indf2,w,c
 15596                           
 15597                           ; Switch size 1, requested type "space"
 15598                           ; Number of cases is 2, Range of values is 0 to 1
 15599                           ; switch strategies available:
 15600                           ; Name         Instructions Cycles
 15601                           ; simple_byte            7     4 (average)
 15602                           ;	Chosen strategy is simple_byte
 15603  01521C  0A00               	xorlw	0	; case 0
 15604  01521E  B4D8               	btfsc	status,2,c
 15605  015220  D7F1               	goto	l655
 15606  015222  0A01               	xorlw	1	; case 1
 15607  015224  A4D8               	btfss	status,2,c
 15608  015226  0012               	return	
 15609  015228  D7EF               	goto	l657
 15610  01522A                     __end_of_SPI_DisableISR:
 15611                           	opt stack 0
 15612                           tosu	equ	0xFFF
 15613                           tosh	equ	0xFFE
 15614                           tosl	equ	0xFFD
 15615                           pclath	equ	0xFFA
 15616                           tblptru	equ	0xFF8
 15617                           tblptrh	equ	0xFF7
 15618                           tblptrl	equ	0xFF6
 15619                           tablat	equ	0xFF5
 15620                           prodh	equ	0xFF4
 15621                           prodl	equ	0xFF3
 15622                           intcon	equ	0xFF2
 15623                           postinc0	equ	0xFEE
 15624                           wreg	equ	0xFE8
 15625                           indf1	equ	0xFE7
 15626                           postdec1	equ	0xFE5
 15627                           plusw1	equ	0xFE3
 15628                           fsr1h	equ	0xFE2
 15629                           fsr1l	equ	0xFE1
 15630                           indf2	equ	0xFDF
 15631                           postinc2	equ	0xFDE
 15632                           postdec2	equ	0xFDD
 15633                           plusw2	equ	0xFDB
 15634                           fsr2h	equ	0xFDA
 15635                           fsr2l	equ	0xFD9
 15636                           status	equ	0xFD8
 15637                           
 15638 ;; *************** function _SPI_DCS *****************
 15639 ;; Defined at:
 15640 ;;		line 219 in file "Library/SPI.c"
 15641 ;; Parameters:    Size  Location     Type
 15642 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 15643 ;;		 -> SPI1(11), SPI2(11), 
 15644 ;; Auto vars:     Size  Location     Type
 15645 ;;		None
 15646 ;; Return value:  Size  Location     Type
 15647 ;;                  1    wreg      void 
 15648 ;; Registers used:
 15649 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15650 ;; Tracked objects:
 15651 ;;		On entry : 0/0
 15652 ;;		On exit  : 0/0
 15653 ;;		Unchanged: 0/0
 15654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15655 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15659 ;;Total ram usage:        2 bytes
 15660 ;; Hardware stack levels used:    1
 15661 ;; Hardware stack levels required when called:    7
 15662 ;; This function calls:
 15663 ;;		Nothing
 15664 ;; This function is called by:
 15665 ;;		_SPI_Init
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           	psect	text85
 15670  0150F0                     __ptext85:
 15671                           	opt stack 0
 15672  0150F0                     _SPI_DCS:
 15673                           	opt stack 20
 15674                           
 15675                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;incstack = 0
 15679  0150F0  0100               	movlb	0	; () banked
 15680  0150F2  EE20 F002          	lfsr	2,2
 15681  0150F6  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 15682  0150F8  26D9               	addwf	fsr2l,f,c
 15683  0150FA  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 15684  0150FC  22DA               	addwfc	fsr2h,f,c
 15685  0150FE  50DF               	movf	indf2,w,c
 15686  015100  A4D8               	btfss	status,2,c
 15687  015102  D007               	goto	l673
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 15691  015104  C1B2  FFD9         	movff	_PortC+4,fsr2l
 15692  015108  C1B3  FFDA         	movff	_PortC+5,fsr2h
 15693  01510C  0101               	movlb	1	; () banked
 15694  01510E  84DF               	bsf	indf2,2,c
 15695  015110  0012               	return	
 15696  015112                     l673:
 15697                           
 15698                           ;SPI.c: 223: else
 15699                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 15700                           
 15701                           ; BSR set to: 1
 15702  015112  C19E  FFD9         	movff	_PortD+4,fsr2l
 15703  015116  C19F  FFDA         	movff	_PortD+5,fsr2h
 15704  01511A  0101               	movlb	1	; () banked
 15705  01511C  8EDF               	bsf	indf2,7,c
 15706  01511E  0012               	return	
 15707  015120                     __end_of_SPI_DCS:
 15708                           	opt stack 0
 15709                           tosu	equ	0xFFF
 15710                           tosh	equ	0xFFE
 15711                           tosl	equ	0xFFD
 15712                           pclath	equ	0xFFA
 15713                           tblptru	equ	0xFF8
 15714                           tblptrh	equ	0xFF7
 15715                           tblptrl	equ	0xFF6
 15716                           tablat	equ	0xFF5
 15717                           prodh	equ	0xFF4
 15718                           prodl	equ	0xFF3
 15719                           intcon	equ	0xFF2
 15720                           postinc0	equ	0xFEE
 15721                           wreg	equ	0xFE8
 15722                           indf1	equ	0xFE7
 15723                           postdec1	equ	0xFE5
 15724                           plusw1	equ	0xFE3
 15725                           fsr1h	equ	0xFE2
 15726                           fsr1l	equ	0xFE1
 15727                           indf2	equ	0xFDF
 15728                           postinc2	equ	0xFDE
 15729                           postdec2	equ	0xFDD
 15730                           plusw2	equ	0xFDB
 15731                           fsr2h	equ	0xFDA
 15732                           fsr2l	equ	0xFD9
 15733                           status	equ	0xFD8
 15734                           
 15735 ;; *************** function _FunctInitButton *****************
 15736 ;; Defined at:
 15737 ;;		line 16 in file "Functions.c"
 15738 ;; Parameters:    Size  Location     Type
 15739 ;;		None
 15740 ;; Auto vars:     Size  Location     Type
 15741 ;;		None
 15742 ;; Return value:  Size  Location     Type
 15743 ;;                  1    wreg      void 
 15744 ;; Registers used:
 15745 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15746 ;; Tracked objects:
 15747 ;;		On entry : 0/0
 15748 ;;		On exit  : 0/0
 15749 ;;		Unchanged: 0/0
 15750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15755 ;;Total ram usage:        0 bytes
 15756 ;; Hardware stack levels used:    1
 15757 ;; Hardware stack levels required when called:   16
 15758 ;; This function calls:
 15759 ;;		_Button_Init
 15760 ;; This function is called by:
 15761 ;;		_main
 15762 ;; This function uses a non-reentrant model
 15763 ;;
 15764                           
 15765                           	psect	text86
 15766  014370                     __ptext86:
 15767                           	opt stack 0
 15768  014370                     _FunctInitButton:
 15769                           	opt stack 14
 15770                           
 15771                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 15772                           
 15773                           ; BSR set to: 1
 15774                           ;incstack = 0
 15775  014370  0EDD               	movlw	low _TestButton
 15776  014372  0100               	movlb	0	; () banked
 15777  014374  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15778  014376  0E02               	movlw	high _TestButton
 15779  014378  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15780  01437A  0E00               	movlw	0
 15781  01437C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15782  01437E  0E02               	movlw	2
 15783  014380  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15784  014382  0E20               	movlw	low _MXK_InitTestButton
 15785  014384  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15786  014386  0E54               	movlw	high _MXK_InitTestButton
 15787  014388  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15788  01438A  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 15789  01438C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15790  01438E  0EC4               	movlw	low _MXK_TestButton
 15791  014390  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15792  014392  0E54               	movlw	high _MXK_TestButton
 15793  014394  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15794  014396  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 15795  014398  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15796  01439A  0E5A               	movlw	low _Event_TestButton
 15797  01439C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15798  01439E  0E50               	movlw	high _Event_TestButton
 15799  0143A0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15800  0143A2  0E01               	movlw	low (_Event_TestButton shr (0+16))
 15801  0143A4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15802  0143A6  EC5C  F09C         	call	_Button_Init	;wreg free
 15803                           
 15804                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 15805  0143AA  0ED3               	movlw	low _DIPSwitch
 15806  0143AC  0100               	movlb	0	; () banked
 15807  0143AE  6F9B               	movwf	Button_Init@pInput& (0+255),b
 15808  0143B0  0E02               	movlw	high _DIPSwitch
 15809  0143B2  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 15810  0143B4  0E00               	movlw	0
 15811  0143B6  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15812  0143B8  0E02               	movlw	2
 15813  0143BA  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15814  0143BC  0E08               	movlw	low _MXK_InitDIPSwitch
 15815  0143BE  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 15816  0143C0  0E54               	movlw	high _MXK_InitDIPSwitch
 15817  0143C2  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15818  0143C4  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 15819  0143C6  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15820  0143C8  0E4C               	movlw	low _MXK_DIPSwitch
 15821  0143CA  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 15822  0143CC  0E54               	movlw	high _MXK_DIPSwitch
 15823  0143CE  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15824  0143D0  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 15825  0143D2  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15826  0143D4  0E52               	movlw	low _Event_DIPSwitch
 15827  0143D6  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 15828  0143D8  0E52               	movlw	high _Event_DIPSwitch
 15829  0143DA  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15830  0143DC  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 15831  0143DE  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15832  0143E0  EC5C  F09C         	call	_Button_Init	;wreg free
 15833  0143E4  0012               	return		;funcret
 15834  0143E6                     __end_of_FunctInitButton:
 15835                           	opt stack 0
 15836                           tosu	equ	0xFFF
 15837                           tosh	equ	0xFFE
 15838                           tosl	equ	0xFFD
 15839                           pclath	equ	0xFFA
 15840                           tblptru	equ	0xFF8
 15841                           tblptrh	equ	0xFF7
 15842                           tblptrl	equ	0xFF6
 15843                           tablat	equ	0xFF5
 15844                           prodh	equ	0xFF4
 15845                           prodl	equ	0xFF3
 15846                           intcon	equ	0xFF2
 15847                           postinc0	equ	0xFEE
 15848                           wreg	equ	0xFE8
 15849                           indf1	equ	0xFE7
 15850                           postdec1	equ	0xFE5
 15851                           plusw1	equ	0xFE3
 15852                           fsr1h	equ	0xFE2
 15853                           fsr1l	equ	0xFE1
 15854                           indf2	equ	0xFDF
 15855                           postinc2	equ	0xFDE
 15856                           postdec2	equ	0xFDD
 15857                           plusw2	equ	0xFDB
 15858                           fsr2h	equ	0xFDA
 15859                           fsr2l	equ	0xFD9
 15860                           status	equ	0xFD8
 15861                           
 15862 ;; *************** function _Button_Init *****************
 15863 ;; Defined at:
 15864 ;;		line 18 in file "Library/Button.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 15867 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 15868 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 15869 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 15870 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 15871 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 15872 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 15873 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 15874 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 15875 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 15876 ;; Auto vars:     Size  Location     Type
 15877 ;;		None
 15878 ;; Return value:  Size  Location     Type
 15879 ;;                  1    wreg      void 
 15880 ;; Registers used:
 15881 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15882 ;; Tracked objects:
 15883 ;;		On entry : 0/0
 15884 ;;		On exit  : 0/0
 15885 ;;		Unchanged: 0/0
 15886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15887 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15890 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15891 ;;Total ram usage:       13 bytes
 15892 ;; Hardware stack levels used:    1
 15893 ;; Hardware stack levels required when called:   15
 15894 ;; This function calls:
 15895 ;;		_HMI_InitButtons
 15896 ;;		_MXK_InitDIPSwitch
 15897 ;;		_MXK_InitTestButton
 15898 ;; This function is called by:
 15899 ;;		_HMI_Init
 15900 ;;		_FunctInitButton
 15901 ;; This function uses a non-reentrant model
 15902 ;;
 15903                           
 15904                           	psect	text87
 15905  0138B8                     __ptext87:
 15906                           	opt stack 0
 15907  0138B8                     _Button_Init:
 15908                           	opt stack 14
 15909                           
 15910                           ;Button.c: 21: if(pInput==(void*)0)
 15911                           
 15912                           ;incstack = 0
 15913  0138B8  0100               	movlb	0	; () banked
 15914  0138BA  519B               	movf	Button_Init@pInput& (0+255),w,b
 15915  0138BC  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 15916  0138BE  B4D8               	btfsc	status,2,c
 15917  0138C0  0012               	return	
 15918                           
 15919                           ; BSR set to: 0
 15920                           ;Button.c: 23: if(pInitIO==(void*)0)
 15921                           
 15922                           ; BSR set to: 0
 15923                           
 15924                           ; BSR set to: 0
 15925                           ;Button.c: 22: return;
 15926  0138C2  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 15927  0138C4  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 15928  0138C6  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 15929  0138C8  B4D8               	btfsc	status,2,c
 15930  0138CA  0012               	return	
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;Button.c: 25: if(pGetState==(void*)0)
 15934                           
 15935                           ; BSR set to: 0
 15936                           
 15937                           ; BSR set to: 0
 15938                           ;Button.c: 24: return;
 15939  0138CC  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 15940  0138CE  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 15941  0138D0  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 15942  0138D2  B4D8               	btfsc	status,2,c
 15943  0138D4  0012               	return	
 15944                           
 15945                           ; BSR set to: 0
 15946                           ;Button.c: 27: if(pFunction==(void*)0)
 15947                           
 15948                           ; BSR set to: 0
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;Button.c: 26: return;
 15952  0138D6  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 15953  0138D8  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 15954  0138DA  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 15955  0138DC  B4D8               	btfsc	status,2,c
 15956  0138DE  0012               	return	
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;Button.c: 30: if(pThreshold == 0)
 15960                           
 15961                           ; BSR set to: 0
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;Button.c: 28: return;
 15965  0138E0  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 15966  0138E2  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 15967  0138E4  A4D8               	btfss	status,2,c
 15968  0138E6  D004               	goto	l8
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;Button.c: 31: pThreshold = 1;
 15972  0138E8  0E00               	movlw	0
 15973  0138EA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15974  0138EC  0E01               	movlw	1
 15975  0138EE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 15976  0138F0                     l8:
 15977                           
 15978                           ; BSR set to: 0
 15979                           ;Button.c: 34: pInput->mState = 0;
 15980                           
 15981                           ; BSR set to: 0
 15982  0138F0  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 15983  0138F4  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 15984  0138F8  0E00               	movlw	0
 15985  0138FA  6EDF               	movwf	indf2,c
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;Button.c: 35: pInput->mCount = 0;
 15989  0138FC  EE20 F001          	lfsr	2,1
 15990  013900  519B               	movf	Button_Init@pInput& (0+255),w,b
 15991  013902  26D9               	addwf	fsr2l,f,c
 15992  013904  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15993  013906  22DA               	addwfc	fsr2h,f,c
 15994  013908  0E00               	movlw	0
 15995  01390A  6EDF               	movwf	indf2,c
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 15999  01390C  EE20 F002          	lfsr	2,2
 16000  013910  519B               	movf	Button_Init@pInput& (0+255),w,b
 16001  013912  26D9               	addwf	fsr2l,f,c
 16002  013914  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16003  013916  22DA               	addwfc	fsr2h,f,c
 16004  013918  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 16005  01391C  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 16006                           
 16007                           ; BSR set to: 0
 16008                           ;Button.c: 37: pInput->mFunction = pFunction;
 16009  013920  EE20 F004          	lfsr	2,4
 16010  013924  519B               	movf	Button_Init@pInput& (0+255),w,b
 16011  013926  26D9               	addwf	fsr2l,f,c
 16012  013928  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16013  01392A  22DA               	addwfc	fsr2h,f,c
 16014  01392C  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 16015  013930  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 16016  013934  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 16017                           
 16018                           ; BSR set to: 0
 16019                           ;Button.c: 38: pInput->mGetState = pGetState;
 16020  013938  EE20 F007          	lfsr	2,7
 16021  01393C  519B               	movf	Button_Init@pInput& (0+255),w,b
 16022  01393E  26D9               	addwf	fsr2l,f,c
 16023  013940  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16024  013942  22DA               	addwfc	fsr2h,f,c
 16025  013944  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 16026  013948  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 16027  01394C  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;Button.c: 41: pInitIO();
 16031  013950  D801               	call	u11918
 16032  013952  0012               	return	
 16033  013954                     u11918:
 16034  013954  0005               	push	
 16035  013956  6EFA               	movwf	pclath,c
 16036  013958  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16037  01395A  6EFD               	movwf	tosl,c
 16038  01395C  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 16039  01395E  6EFE               	movwf	tosh,c
 16040  013960  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 16041  013962  6EFF               	movwf	tosu,c
 16042  013964  50FA               	movf	pclath,w,c
 16043  013966  0012               	return		;indir
 16044  013968                     __end_of_Button_Init:
 16045                           	opt stack 0
 16046                           tosu	equ	0xFFF
 16047                           tosh	equ	0xFFE
 16048                           tosl	equ	0xFFD
 16049                           pclath	equ	0xFFA
 16050                           tblptru	equ	0xFF8
 16051                           tblptrh	equ	0xFF7
 16052                           tblptrl	equ	0xFF6
 16053                           tablat	equ	0xFF5
 16054                           prodh	equ	0xFF4
 16055                           prodl	equ	0xFF3
 16056                           intcon	equ	0xFF2
 16057                           postinc0	equ	0xFEE
 16058                           wreg	equ	0xFE8
 16059                           indf1	equ	0xFE7
 16060                           postdec1	equ	0xFE5
 16061                           plusw1	equ	0xFE3
 16062                           fsr1h	equ	0xFE2
 16063                           fsr1l	equ	0xFE1
 16064                           indf2	equ	0xFDF
 16065                           postinc2	equ	0xFDE
 16066                           postdec2	equ	0xFDD
 16067                           plusw2	equ	0xFDB
 16068                           fsr2h	equ	0xFDA
 16069                           fsr2l	equ	0xFD9
 16070                           status	equ	0xFD8
 16071                           
 16072 ;; *************** function _MXK_InitDIPSwitch *****************
 16073 ;; Defined at:
 16074 ;;		line 20 in file "Library/MXK.c"
 16075 ;; Parameters:    Size  Location     Type
 16076 ;;		None
 16077 ;; Auto vars:     Size  Location     Type
 16078 ;;		None
 16079 ;; Return value:  Size  Location     Type
 16080 ;;                  1    wreg      void 
 16081 ;; Registers used:
 16082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16083 ;; Tracked objects:
 16084 ;;		On entry : 0/0
 16085 ;;		On exit  : 0/0
 16086 ;;		Unchanged: 0/0
 16087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16092 ;;Total ram usage:        0 bytes
 16093 ;; Hardware stack levels used:    1
 16094 ;; Hardware stack levels required when called:   14
 16095 ;; This function calls:
 16096 ;;		_Port_SetQuadType
 16097 ;; This function is called by:
 16098 ;;		_FunctInitButton
 16099 ;;		_Button_Init
 16100 ;; This function uses a non-reentrant model
 16101 ;;
 16102                           
 16103                           	psect	text88
 16104  015408                     __ptext88:
 16105                           	opt stack 0
 16106  015408                     _MXK_InitDIPSwitch:
 16107                           	opt stack 14
 16108                           
 16109                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 16110                           
 16111                           ;incstack = 0
 16112  015408  0E9A               	movlw	low _PortD
 16113  01540A  0100               	movlb	0	; () banked
 16114  01540C  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16115  01540E  0E01               	movlw	high _PortD
 16116  015410  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16117  015412  0E00               	movlw	0
 16118  015414  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16119  015416  0E00               	movlw	0
 16120  015418  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16121  01541A  ECB4  F08B         	call	_Port_SetQuadType	;wreg free
 16122  01541E  0012               	return		;funcret
 16123  015420                     __end_of_MXK_InitDIPSwitch:
 16124                           	opt stack 0
 16125                           tosu	equ	0xFFF
 16126                           tosh	equ	0xFFE
 16127                           tosl	equ	0xFFD
 16128                           pclath	equ	0xFFA
 16129                           tblptru	equ	0xFF8
 16130                           tblptrh	equ	0xFF7
 16131                           tblptrl	equ	0xFF6
 16132                           tablat	equ	0xFF5
 16133                           prodh	equ	0xFF4
 16134                           prodl	equ	0xFF3
 16135                           intcon	equ	0xFF2
 16136                           postinc0	equ	0xFEE
 16137                           wreg	equ	0xFE8
 16138                           indf1	equ	0xFE7
 16139                           postdec1	equ	0xFE5
 16140                           plusw1	equ	0xFE3
 16141                           fsr1h	equ	0xFE2
 16142                           fsr1l	equ	0xFE1
 16143                           indf2	equ	0xFDF
 16144                           postinc2	equ	0xFDE
 16145                           postdec2	equ	0xFDD
 16146                           plusw2	equ	0xFDB
 16147                           fsr2h	equ	0xFDA
 16148                           fsr2l	equ	0xFD9
 16149                           status	equ	0xFD8
 16150                           
 16151 ;; *************** function _HMI_InitButtons *****************
 16152 ;; Defined at:
 16153 ;;		line 21 in file "HMI.c"
 16154 ;; Parameters:    Size  Location     Type
 16155 ;;		None
 16156 ;; Auto vars:     Size  Location     Type
 16157 ;;		None
 16158 ;; Return value:  Size  Location     Type
 16159 ;;                  1    wreg      void 
 16160 ;; Registers used:
 16161 ;;		wreg, status,2
 16162 ;; Tracked objects:
 16163 ;;		On entry : 0/0
 16164 ;;		On exit  : 0/0
 16165 ;;		Unchanged: 0/0
 16166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16171 ;;Total ram usage:        0 bytes
 16172 ;; Hardware stack levels used:    1
 16173 ;; Hardware stack levels required when called:    7
 16174 ;; This function calls:
 16175 ;;		Nothing
 16176 ;; This function is called by:
 16177 ;;		_HMI_Init
 16178 ;;		_Button_Init
 16179 ;; This function uses a non-reentrant model
 16180 ;;
 16181                           
 16182                           	psect	text89
 16183  015590                     __ptext89:
 16184                           	opt stack 0
 16185  015590                     _HMI_InitButtons:
 16186                           	opt stack 21
 16187                           
 16188                           ;HMI.c: 23: TRISE = 0xFC;
 16189                           
 16190                           ;incstack = 0
 16191  015590  0EFC               	movlw	252
 16192  015592  6E96               	movwf	3990,c	;volatile
 16193  015594  0012               	return		;funcret
 16194  015596                     __end_of_HMI_InitButtons:
 16195                           	opt stack 0
 16196                           tosu	equ	0xFFF
 16197                           tosh	equ	0xFFE
 16198                           tosl	equ	0xFFD
 16199                           pclath	equ	0xFFA
 16200                           tblptru	equ	0xFF8
 16201                           tblptrh	equ	0xFF7
 16202                           tblptrl	equ	0xFF6
 16203                           tablat	equ	0xFF5
 16204                           prodh	equ	0xFF4
 16205                           prodl	equ	0xFF3
 16206                           intcon	equ	0xFF2
 16207                           postinc0	equ	0xFEE
 16208                           wreg	equ	0xFE8
 16209                           indf1	equ	0xFE7
 16210                           postdec1	equ	0xFE5
 16211                           plusw1	equ	0xFE3
 16212                           fsr1h	equ	0xFE2
 16213                           fsr1l	equ	0xFE1
 16214                           indf2	equ	0xFDF
 16215                           postinc2	equ	0xFDE
 16216                           postdec2	equ	0xFDD
 16217                           plusw2	equ	0xFDB
 16218                           fsr2h	equ	0xFDA
 16219                           fsr2l	equ	0xFD9
 16220                           status	equ	0xFD8
 16221                           
 16222 ;; *************** function _MXK_InitTestButton *****************
 16223 ;; Defined at:
 16224 ;;		line 10 in file "Library/MXK.c"
 16225 ;; Parameters:    Size  Location     Type
 16226 ;;		None
 16227 ;; Auto vars:     Size  Location     Type
 16228 ;;		None
 16229 ;; Return value:  Size  Location     Type
 16230 ;;                  1    wreg      void 
 16231 ;; Registers used:
 16232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16233 ;; Tracked objects:
 16234 ;;		On entry : 0/0
 16235 ;;		On exit  : 0/0
 16236 ;;		Unchanged: 0/0
 16237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16242 ;;Total ram usage:        0 bytes
 16243 ;; Hardware stack levels used:    1
 16244 ;; Hardware stack levels required when called:   12
 16245 ;; This function calls:
 16246 ;;		_Port_SetPinType
 16247 ;; This function is called by:
 16248 ;;		_FunctInitButton
 16249 ;;		_Button_Init
 16250 ;; This function uses a non-reentrant model
 16251 ;;
 16252                           
 16253                           	psect	text90
 16254  015420                     __ptext90:
 16255                           	opt stack 0
 16256  015420                     _MXK_InitTestButton:
 16257                           	opt stack 16
 16258                           
 16259                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 16260                           
 16261                           ;incstack = 0
 16262  015420  0EA4               	movlw	low _PortB
 16263  015422  0100               	movlb	0	; () banked
 16264  015424  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16265  015426  0E01               	movlw	high _PortB
 16266  015428  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16267  01542A  0E04               	movlw	4
 16268  01542C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16269  01542E  0E00               	movlw	0
 16270  015430  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16271  015432  EC6A  F08F         	call	_Port_SetPinType	;wreg free
 16272  015436  0012               	return		;funcret
 16273  015438                     __end_of_MXK_InitTestButton:
 16274                           	opt stack 0
 16275                           tosu	equ	0xFFF
 16276                           tosh	equ	0xFFE
 16277                           tosl	equ	0xFFD
 16278                           pclath	equ	0xFFA
 16279                           tblptru	equ	0xFF8
 16280                           tblptrh	equ	0xFF7
 16281                           tblptrl	equ	0xFF6
 16282                           tablat	equ	0xFF5
 16283                           prodh	equ	0xFF4
 16284                           prodl	equ	0xFF3
 16285                           intcon	equ	0xFF2
 16286                           postinc0	equ	0xFEE
 16287                           wreg	equ	0xFE8
 16288                           indf1	equ	0xFE7
 16289                           postdec1	equ	0xFE5
 16290                           plusw1	equ	0xFE3
 16291                           fsr1h	equ	0xFE2
 16292                           fsr1l	equ	0xFE1
 16293                           indf2	equ	0xFDF
 16294                           postinc2	equ	0xFDE
 16295                           postdec2	equ	0xFDD
 16296                           plusw2	equ	0xFDB
 16297                           fsr2h	equ	0xFDA
 16298                           fsr2l	equ	0xFD9
 16299                           status	equ	0xFD8
 16300                           
 16301 ;; *************** function _Port_SetPinType *****************
 16302 ;; Defined at:
 16303 ;;		line 189 in file "Library/Port.c"
 16304 ;; Parameters:    Size  Location     Type
 16305 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16306 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16307 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16308 ;;  pPin            1   40[BANK0 ] enum E6750
 16309 ;;  pType           1   41[BANK0 ] enum E6795
 16310 ;; Auto vars:     Size  Location     Type
 16311 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 16312 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 16313 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 16314 ;;  Output          1   42[BANK0 ] enum E6475
 16315 ;; Return value:  Size  Location     Type
 16316 ;;                  1    wreg      enum E6475
 16317 ;; Registers used:
 16318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16319 ;; Tracked objects:
 16320 ;;		On entry : 0/0
 16321 ;;		On exit  : 0/0
 16322 ;;		Unchanged: 0/0
 16323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16324 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16325 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16327 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16328 ;;Total ram usage:        7 bytes
 16329 ;; Hardware stack levels used:    1
 16330 ;; Hardware stack levels required when called:   11
 16331 ;; This function calls:
 16332 ;;		_Byte_SetBit
 16333 ;;		_PortProperty_Valid
 16334 ;;		_Word_SetPair
 16335 ;; This function is called by:
 16336 ;;		_Configure_GPIOs
 16337 ;;		_LED_Init
 16338 ;;		_Port_Init
 16339 ;;		_SPI_Init
 16340 ;;		_MXK_InitTestButton
 16341 ;;		_MXK_Init
 16342 ;;		_I2C_Init
 16343 ;;		_Motor_Init
 16344 ;; This function uses a non-reentrant model
 16345 ;;
 16346                           
 16347                           	psect	text91
 16348  011ED4                     __ptext91:
 16349                           	opt stack 0
 16350  011ED4                     _Port_SetPinType:
 16351                           	opt stack 18
 16352                           
 16353                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 16354                           
 16355                           ;incstack = 0
 16356  011ED4  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 16357  011ED8  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 16358  011EDC  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 16359  011EE0  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 16360                           
 16361                           ;Port.c: 192: ePinError Output = ePinErrorState;
 16362  011EE4  0E05               	movlw	5
 16363  011EE6  0100               	movlb	0	; () banked
 16364  011EE8  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16365                           
 16366                           ;Port.c: 193: switch (pType)
 16367  011EEA  D0A7               	goto	l412
 16368  011EEC                     
 16369                           ; BSR set to: 0
 16370                           ;Port.c: 197: {
 16371                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16372                           
 16373                           ; BSR set to: 0
 16374  011EEC  EE20 F002          	lfsr	2,2
 16375  011EF0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16376  011EF2  26D9               	addwf	fsr2l,f,c
 16377  011EF4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16378  011EF6  22DA               	addwfc	fsr2h,f,c
 16379  011EF8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16380  011EFC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16381  011F00  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16382  011F04  0E01               	movlw	1
 16383  011F06  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16384  011F08  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 16385                           
 16386                           ;Port.c: 203: break;
 16387  011F0C  D0A4               	goto	l414
 16388  011F0E                     
 16389                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 16390  011F0E  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16391  011F12  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16392  011F16  0E01               	movlw	1
 16393  011F18  0100               	movlb	0	; () banked
 16394  011F1A  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16395  011F1C  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16396  011F20  EC6E  F0A3         	call	_PortProperty_Valid	;wreg free
 16397  011F24  0100               	movlb	0	; () banked
 16398  011F26  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16399  011F28  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 16400  011F2A  A4D8               	btfss	status,2,c
 16401  011F2C  0012               	return	
 16402                           
 16403                           ; BSR set to: 0
 16404                           ;Port.c: 208: {
 16405                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 16406  011F2E  EE20 F002          	lfsr	2,2
 16407  011F32  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16408  011F34  26D9               	addwf	fsr2l,f,c
 16409  011F36  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16410  011F38  22DA               	addwfc	fsr2h,f,c
 16411  011F3A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16412  011F3E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16413  011F42  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16414  011F46  0E00               	movlw	0
 16415  011F48  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16416  011F4A  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 16417                           
 16418                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 16419  011F4E  0100               	movlb	0	; () banked
 16420  011F50  EE20 F004          	lfsr	2,4
 16421  011F54  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16422  011F56  26D9               	addwf	fsr2l,f,c
 16423  011F58  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16424  011F5A  22DA               	addwfc	fsr2h,f,c
 16425  011F5C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16426  011F60  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16427  011F64  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16428  011F68  0E00               	movlw	0
 16429  011F6A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16430  011F6C  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 16431                           
 16432                           ;Port.c: 214: break;
 16433  011F70  D072               	goto	l414
 16434  011F72                     
 16435                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 16436                           
 16437                           ;Port.c: 218: case eTypeOutputOpenSource:
 16438  011F72  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16439  011F76  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16440  011F7A  0E02               	movlw	2
 16441  011F7C  0100               	movlb	0	; () banked
 16442  011F7E  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16443  011F80  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16444  011F84  EC6E  F0A3         	call	_PortProperty_Valid	;wreg free
 16445  011F88  0100               	movlb	0	; () banked
 16446  011F8A  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16447  011F8C  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 16448  011F8E  A4D8               	btfss	status,2,c
 16449  011F90  0012               	return	
 16450                           
 16451                           ; BSR set to: 0
 16452                           ;Port.c: 220: {
 16453                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16454  011F92  EE20 F002          	lfsr	2,2
 16455  011F96  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16456  011F98  26D9               	addwf	fsr2l,f,c
 16457  011F9A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16458  011F9C  22DA               	addwfc	fsr2h,f,c
 16459  011F9E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16460  011FA2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16461  011FA6  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16462  011FAA  0E01               	movlw	1
 16463  011FAC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16464  011FAE  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 16465                           
 16466                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 16467  011FB2  0100               	movlb	0	; () banked
 16468  011FB4  EE20 F004          	lfsr	2,4
 16469  011FB8  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16470  011FBA  26D9               	addwf	fsr2l,f,c
 16471  011FBC  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16472  011FBE  22DA               	addwfc	fsr2h,f,c
 16473  011FC0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16474  011FC4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16475  011FC8  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16476  011FCC  0E01               	movlw	1
 16477  011FCE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16478  011FD0  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 16479                           
 16480                           ;Port.c: 226: break;
 16481  011FD4  D040               	goto	l414
 16482  011FD6                     
 16483                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 16484                           
 16485                           ;Port.c: 230: case eTypeOutputPushPull:
 16486  011FD6  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16487  011FDA  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16488  011FDE  0E00               	movlw	0
 16489  011FE0  0100               	movlb	0	; () banked
 16490  011FE2  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16491  011FE4  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16492  011FE8  EC6E  F0A3         	call	_PortProperty_Valid	;wreg free
 16493  011FEC  0100               	movlb	0	; () banked
 16494  011FEE  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 16495  011FF0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 16496  011FF2  A4D8               	btfss	status,2,c
 16497  011FF4  0012               	return	
 16498                           
 16499                           ; BSR set to: 0
 16500                           ;Port.c: 232: {
 16501                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 16502  011FF6  EE20 F002          	lfsr	2,2
 16503  011FFA  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16504  011FFC  26D9               	addwf	fsr2l,f,c
 16505  011FFE  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16506  012000  22DA               	addwfc	fsr2h,f,c
 16507  012002  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16508  012006  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16509  01200A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16510  01200E  0E00               	movlw	0
 16511  012010  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16512  012012  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 16513                           
 16514                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 16515  012016  0100               	movlb	0	; () banked
 16516  012018  EE20 F004          	lfsr	2,4
 16517  01201C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 16518  01201E  26D9               	addwf	fsr2l,f,c
 16519  012020  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16520  012022  22DA               	addwfc	fsr2h,f,c
 16521  012024  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16522  012028  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16523  01202C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16524  012030  0E00               	movlw	0
 16525  012032  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16526  012034  EC31  F0A5         	call	_Byte_SetBit	;wreg free
 16527                           
 16528                           ;Port.c: 239: }
 16529                           
 16530                           ;Port.c: 238: break;
 16531  012038  D00E               	goto	l414
 16532  01203A                     l412:
 16533  01203A  0100               	movlb	0	; () banked
 16534  01203C  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 16535                           
 16536                           ; Switch size 1, requested type "space"
 16537                           ; Number of cases is 4, Range of values is 0 to 3
 16538                           ; switch strategies available:
 16539                           ; Name         Instructions Cycles
 16540                           ; simple_byte           13     7 (average)
 16541                           ;	Chosen strategy is simple_byte
 16542  01203E  0A00               	xorlw	0	; case 0
 16543  012040  B4D8               	btfsc	status,2,c
 16544  012042  D754               	goto	l413
 16545  012044  0A01               	xorlw	1	; case 1
 16546  012046  B4D8               	btfsc	status,2,c
 16547  012048  D762               	goto	l415
 16548  01204A  0A03               	xorlw	3	; case 2
 16549  01204C  B4D8               	btfsc	status,2,c
 16550  01204E  D791               	goto	l417
 16551  012050  0A01               	xorlw	1	; case 3
 16552  012052  B4D8               	btfsc	status,2,c
 16553  012054  D7C0               	goto	l421
 16554  012056                     l414:
 16555                           
 16556                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 16557                           
 16558                           ; BSR set to: 0
 16559  012056  0E08               	movlw	8
 16560  012058  0100               	movlb	0	; () banked
 16561  01205A  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 16562  01205C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16563  01205E  0E00               	movlw	0
 16564  012060  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 16565  012062  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16566  012064  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 16567  012068  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 16568  01206C  ECA4  F0A7         	call	_Word_SetPair	;wreg free
 16569  012070  0012               	return	
 16570  012072                     __end_of_Port_SetPinType:
 16571                           	opt stack 0
 16572                           tosu	equ	0xFFF
 16573                           tosh	equ	0xFFE
 16574                           tosl	equ	0xFFD
 16575                           pclath	equ	0xFFA
 16576                           tblptru	equ	0xFF8
 16577                           tblptrh	equ	0xFF7
 16578                           tblptrl	equ	0xFF6
 16579                           tablat	equ	0xFF5
 16580                           prodh	equ	0xFF4
 16581                           prodl	equ	0xFF3
 16582                           intcon	equ	0xFF2
 16583                           postinc0	equ	0xFEE
 16584                           wreg	equ	0xFE8
 16585                           indf1	equ	0xFE7
 16586                           postdec1	equ	0xFE5
 16587                           plusw1	equ	0xFE3
 16588                           fsr1h	equ	0xFE2
 16589                           fsr1l	equ	0xFE1
 16590                           indf2	equ	0xFDF
 16591                           postinc2	equ	0xFDE
 16592                           postdec2	equ	0xFDD
 16593                           plusw2	equ	0xFDB
 16594                           fsr2h	equ	0xFDA
 16595                           fsr2l	equ	0xFD9
 16596                           status	equ	0xFD8
 16597                           
 16598 ;; *************** function _Byte_SetBit *****************
 16599 ;; Defined at:
 16600 ;;		line 32 in file "Library/Types.c"
 16601 ;; Parameters:    Size  Location     Type
 16602 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16603 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 16604 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 16605 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16606 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16607 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16608 ;;		 -> NULL(0), 
 16609 ;;  pBit            1    2[BANK0 ] unsigned char 
 16610 ;;  pValue          1    3[BANK0 ] unsigned char 
 16611 ;; Auto vars:     Size  Location     Type
 16612 ;;		None
 16613 ;; Return value:  Size  Location     Type
 16614 ;;                  1    wreg      void 
 16615 ;; Registers used:
 16616 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16617 ;; Tracked objects:
 16618 ;;		On entry : 0/0
 16619 ;;		On exit  : 0/0
 16620 ;;		Unchanged: 0/0
 16621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16622 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16624 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16626 ;;Total ram usage:        7 bytes
 16627 ;; Hardware stack levels used:    1
 16628 ;; Hardware stack levels required when called:    7
 16629 ;; This function calls:
 16630 ;;		Nothing
 16631 ;; This function is called by:
 16632 ;;		_Port_SetPinType
 16633 ;;		_Port_SetPin
 16634 ;;		_SPI_Init
 16635 ;;		_SPI_MinSpeed
 16636 ;;		_SPI_MaxSpeed
 16637 ;;		_Word_SetBit
 16638 ;;		_I2C_Init
 16639 ;; This function uses a non-reentrant model
 16640 ;;
 16641                           
 16642                           	psect	text92
 16643  014A62                     __ptext92:
 16644                           	opt stack 0
 16645  014A62                     _Byte_SetBit:
 16646                           	opt stack 21
 16647                           
 16648                           ;Types.c: 34: pValue &= 1;
 16649                           
 16650                           ;incstack = 0
 16651  014A62  0E01               	movlw	1
 16652  014A64  0100               	movlb	0	; () banked
 16653  014A66  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 16657  014A68  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16658  014A6C  0E01               	movlw	1
 16659  014A6E  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 16660  014A70  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 16661  014A72  D002               	goto	u9604
 16662  014A74                     u9605:
 16663  014A74  90D8               	bcf	status,0,c
 16664  014A76  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16665  014A78                     u9604:
 16666  014A78  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 16667  014A7A  D7FC               	goto	u9605
 16668  014A7C  0100               	movlb	0	; () banked
 16669  014A7E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16670  014A80  0AFF               	xorlw	255
 16671  014A82  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 16672  014A84  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16673  014A88  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16674  014A8C  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 16675  014A8E  16DF               	andwf	indf2,f,c
 16676                           
 16677                           ; BSR set to: 0
 16678                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 16679  014A90  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16680  014A94  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 16681  014A98  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 16682  014A9A  D002               	goto	u9614
 16683  014A9C                     u9615:
 16684  014A9C  90D8               	bcf	status,0,c
 16685  014A9E  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16686  014AA0                     u9614:
 16687  014AA0  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 16688  014AA2  D7FC               	goto	u9615
 16689  014AA4  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16690  014AA8  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16691  014AAC  0100               	movlb	0	; () banked
 16692  014AAE  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16693  014AB0  12DF               	iorwf	indf2,f,c
 16694                           
 16695                           ; BSR set to: 0
 16696  014AB2  0012               	return		;funcret
 16697  014AB4                     __end_of_Byte_SetBit:
 16698                           	opt stack 0
 16699                           tosu	equ	0xFFF
 16700                           tosh	equ	0xFFE
 16701                           tosl	equ	0xFFD
 16702                           pclath	equ	0xFFA
 16703                           tblptru	equ	0xFF8
 16704                           tblptrh	equ	0xFF7
 16705                           tblptrl	equ	0xFF6
 16706                           tablat	equ	0xFF5
 16707                           prodh	equ	0xFF4
 16708                           prodl	equ	0xFF3
 16709                           intcon	equ	0xFF2
 16710                           postinc0	equ	0xFEE
 16711                           wreg	equ	0xFE8
 16712                           indf1	equ	0xFE7
 16713                           postdec1	equ	0xFE5
 16714                           plusw1	equ	0xFE3
 16715                           fsr1h	equ	0xFE2
 16716                           fsr1l	equ	0xFE1
 16717                           indf2	equ	0xFDF
 16718                           postinc2	equ	0xFDE
 16719                           postdec2	equ	0xFDD
 16720                           plusw2	equ	0xFDB
 16721                           fsr2h	equ	0xFDA
 16722                           fsr2l	equ	0xFD9
 16723                           status	equ	0xFD8
 16724                           
 16725 ;; *************** function _Port_SetQuadType *****************
 16726 ;; Defined at:
 16727 ;;		line 399 in file "Library/Port.c"
 16728 ;; Parameters:    Size  Location     Type
 16729 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16730 ;;		 -> PortB(10), PortD(10), 
 16731 ;;  pQuad           1   56[BANK0 ] enum E6776
 16732 ;;  pType           1   57[BANK0 ] enum E6795
 16733 ;; Auto vars:     Size  Location     Type
 16734 ;;  Output          1   58[BANK0 ] enum E6475
 16735 ;; Return value:  Size  Location     Type
 16736 ;;                  1    wreg      enum E6475
 16737 ;; Registers used:
 16738 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16739 ;; Tracked objects:
 16740 ;;		On entry : 0/0
 16741 ;;		On exit  : 0/0
 16742 ;;		Unchanged: 0/0
 16743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16744 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16747 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16748 ;;Total ram usage:        5 bytes
 16749 ;; Hardware stack levels used:    1
 16750 ;; Hardware stack levels required when called:   13
 16751 ;; This function calls:
 16752 ;;		_Byte_SetQuad
 16753 ;;		_Port_CheckQuadType
 16754 ;;		_Word_SetPair
 16755 ;; This function is called by:
 16756 ;;		_MXK_InitDIPSwitch
 16757 ;;		_MXK_Init
 16758 ;; This function uses a non-reentrant model
 16759 ;;
 16760                           
 16761                           	psect	text93
 16762  011768                     __ptext93:
 16763                           	opt stack 0
 16764  011768                     _Port_SetQuadType:
 16765                           	opt stack 16
 16766                           
 16767                           ;Port.c: 401: ePinError Output = ePinErrorState;
 16768                           
 16769                           ; BSR set to: 0
 16770                           ;incstack = 0
 16771  011768  0E05               	movlw	5
 16772  01176A  0100               	movlb	0	; () banked
 16773  01176C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 16774                           
 16775                           ;Port.c: 403: switch (pType)
 16776  01176E  D0B8               	goto	l476
 16777  011770                     
 16778                           ; BSR set to: 0
 16779                           ;Port.c: 407: {
 16780                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 16781                           
 16782                           ; BSR set to: 0
 16783  011770  EE20 F002          	lfsr	2,2
 16784  011774  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16785  011776  26D9               	addwf	fsr2l,f,c
 16786  011778  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16787  01177A  22DA               	addwfc	fsr2h,f,c
 16788  01177C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16789  011780  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16790  011784  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16791  011788  0E0F               	movlw	15
 16792  01178A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16793  01178C  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16794                           
 16795                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16796  011790  0100               	movlb	0	; () banked
 16797  011792  EE20 F004          	lfsr	2,4
 16798  011796  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16799  011798  26D9               	addwf	fsr2l,f,c
 16800  01179A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16801  01179C  22DA               	addwfc	fsr2h,f,c
 16802  01179E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16803  0117A2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16804  0117A6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16805  0117AA  0E00               	movlw	0
 16806  0117AC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16807  0117AE  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16808                           
 16809                           ;Port.c: 413: }
 16810                           ;Port.c: 415: break;
 16811  0117B2  D0A4               	goto	l478
 16812  0117B4                     
 16813                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16814  0117B4  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16815  0117B8  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16816  0117BC  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16817  0117C0  0E03               	movlw	3
 16818  0117C2  0100               	movlb	0	; () banked
 16819  0117C4  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16820  0117C6  ECAA  F0A5         	call	_Port_CheckQuadType	;wreg free
 16821  0117CA  0100               	movlb	0	; () banked
 16822  0117CC  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 16823  0117CE  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 16824  0117D0  A4D8               	btfss	status,2,c
 16825  0117D2  0012               	return	
 16826                           
 16827                           ; BSR set to: 0
 16828                           ;Port.c: 418: {
 16829                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 16830  0117D4  EE20 F002          	lfsr	2,2
 16831  0117D8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16832  0117DA  26D9               	addwf	fsr2l,f,c
 16833  0117DC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16834  0117DE  22DA               	addwfc	fsr2h,f,c
 16835  0117E0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16836  0117E4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16837  0117E8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16838  0117EC  0E00               	movlw	0
 16839  0117EE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16840  0117F0  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16841                           
 16842                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16843  0117F4  0100               	movlb	0	; () banked
 16844  0117F6  EE20 F004          	lfsr	2,4
 16845  0117FA  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16846  0117FC  26D9               	addwf	fsr2l,f,c
 16847  0117FE  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16848  011800  22DA               	addwfc	fsr2h,f,c
 16849  011802  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16850  011806  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16851  01180A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16852  01180E  0E00               	movlw	0
 16853  011810  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16854  011812  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16855                           
 16856                           ;Port.c: 424: }
 16857  011816  D072               	goto	l478
 16858  011818                     
 16859                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16860  011818  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16861  01181C  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16862  011820  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16863  011824  0E03               	movlw	3
 16864  011826  0100               	movlb	0	; () banked
 16865  011828  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16866  01182A  ECAA  F0A5         	call	_Port_CheckQuadType	;wreg free
 16867  01182E  0100               	movlb	0	; () banked
 16868  011830  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 16869  011832  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 16870  011834  A4D8               	btfss	status,2,c
 16871  011836  0012               	return	
 16872                           
 16873                           ; BSR set to: 0
 16874                           ;Port.c: 429: {
 16875                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 16876  011838  EE20 F002          	lfsr	2,2
 16877  01183C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16878  01183E  26D9               	addwf	fsr2l,f,c
 16879  011840  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16880  011842  22DA               	addwfc	fsr2h,f,c
 16881  011844  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16882  011848  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16883  01184C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16884  011850  0E0F               	movlw	15
 16885  011852  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16886  011854  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16887                           
 16888                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 16889  011858  0100               	movlb	0	; () banked
 16890  01185A  EE20 F004          	lfsr	2,4
 16891  01185E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16892  011860  26D9               	addwf	fsr2l,f,c
 16893  011862  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16894  011864  22DA               	addwfc	fsr2h,f,c
 16895  011866  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16896  01186A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16897  01186E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16898  011872  0E0F               	movlw	15
 16899  011874  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16900  011876  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16901                           
 16902                           ;Port.c: 435: }
 16903  01187A  D040               	goto	l478
 16904  01187C                     
 16905                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16906  01187C  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16907  011880  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16908  011884  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16909  011888  0E03               	movlw	3
 16910  01188A  0100               	movlb	0	; () banked
 16911  01188C  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16912  01188E  ECAA  F0A5         	call	_Port_CheckQuadType	;wreg free
 16913  011892  0100               	movlb	0	; () banked
 16914  011894  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 16915  011896  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 16916  011898  A4D8               	btfss	status,2,c
 16917  01189A  0012               	return	
 16918                           
 16919                           ; BSR set to: 0
 16920                           ;Port.c: 440: {
 16921                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 16922  01189C  EE20 F002          	lfsr	2,2
 16923  0118A0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16924  0118A2  26D9               	addwf	fsr2l,f,c
 16925  0118A4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16926  0118A6  22DA               	addwfc	fsr2h,f,c
 16927  0118A8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16928  0118AC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16929  0118B0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16930  0118B4  0E00               	movlw	0
 16931  0118B6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16932  0118B8  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16933                           
 16934                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16935  0118BC  0100               	movlb	0	; () banked
 16936  0118BE  EE20 F004          	lfsr	2,4
 16937  0118C2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16938  0118C4  26D9               	addwf	fsr2l,f,c
 16939  0118C6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16940  0118C8  22DA               	addwfc	fsr2h,f,c
 16941  0118CA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16942  0118CE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16943  0118D2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16944  0118D6  0E00               	movlw	0
 16945  0118D8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16946  0118DA  EC7F  F0A9         	call	_Byte_SetQuad	;wreg free
 16947                           
 16948                           ;Port.c: 446: }
 16949  0118DE  D00E               	goto	l478
 16950  0118E0                     l476:
 16951  0118E0  0100               	movlb	0	; () banked
 16952  0118E2  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 16953                           
 16954                           ; Switch size 1, requested type "space"
 16955                           ; Number of cases is 4, Range of values is 0 to 3
 16956                           ; switch strategies available:
 16957                           ; Name         Instructions Cycles
 16958                           ; simple_byte           13     7 (average)
 16959                           ;	Chosen strategy is simple_byte
 16960  0118E4  0A00               	xorlw	0	; case 0
 16961  0118E6  B4D8               	btfsc	status,2,c
 16962  0118E8  D743               	goto	l477
 16963  0118EA  0A01               	xorlw	1	; case 1
 16964  0118EC  B4D8               	btfsc	status,2,c
 16965  0118EE  D762               	goto	l479
 16966  0118F0  0A03               	xorlw	3	; case 2
 16967  0118F2  B4D8               	btfsc	status,2,c
 16968  0118F4  D791               	goto	l483
 16969  0118F6  0A01               	xorlw	1	; case 3
 16970  0118F8  B4D8               	btfsc	status,2,c
 16971  0118FA  D7C0               	goto	l486
 16972  0118FC                     l478:
 16973                           
 16974                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 16975                           
 16976                           ; BSR set to: 0
 16977  0118FC  0E08               	movlw	8
 16978  0118FE  0100               	movlb	0	; () banked
 16979  011900  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16980  011902  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16981  011904  0E00               	movlw	0
 16982  011906  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16983  011908  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16984  01190A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16985  01190C  0D04               	mullw	4
 16986  01190E  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 16987  011912  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16988  011916  ECA4  F0A7         	call	_Word_SetPair	;wreg free
 16989                           
 16990                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 16991  01191A  0E08               	movlw	8
 16992  01191C  0100               	movlb	0	; () banked
 16993  01191E  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16994  011920  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16995  011922  0E00               	movlw	0
 16996  011924  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16997  011926  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16998  011928  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16999  01192A  0D04               	mullw	4
 17000  01192C  28F3               	incf	prodl,w,c
 17001  01192E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17002  011930  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17003  011934  ECA4  F0A7         	call	_Word_SetPair	;wreg free
 17004                           
 17005                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 17006  011938  0E08               	movlw	8
 17007  01193A  0100               	movlb	0	; () banked
 17008  01193C  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17009  01193E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17010  011940  0E00               	movlw	0
 17011  011942  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17012  011944  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17013  011946  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17014  011948  0D04               	mullw	4
 17015  01194A  50F3               	movf	prodl,w,c
 17016  01194C  0F02               	addlw	2
 17017  01194E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17018  011950  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17019  011954  ECA4  F0A7         	call	_Word_SetPair	;wreg free
 17020                           
 17021                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 17022  011958  0E08               	movlw	8
 17023  01195A  0100               	movlb	0	; () banked
 17024  01195C  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17025  01195E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17026  011960  0E00               	movlw	0
 17027  011962  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17028  011964  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17029  011966  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17030  011968  0D04               	mullw	4
 17031  01196A  50F3               	movf	prodl,w,c
 17032  01196C  0F03               	addlw	3
 17033  01196E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17034  011970  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17035  011974  ECA4  F0A7         	call	_Word_SetPair	;wreg free
 17036  011978  0012               	return	
 17037  01197A                     __end_of_Port_SetQuadType:
 17038                           	opt stack 0
 17039                           tosu	equ	0xFFF
 17040                           tosh	equ	0xFFE
 17041                           tosl	equ	0xFFD
 17042                           pclath	equ	0xFFA
 17043                           tblptru	equ	0xFF8
 17044                           tblptrh	equ	0xFF7
 17045                           tblptrl	equ	0xFF6
 17046                           tablat	equ	0xFF5
 17047                           prodh	equ	0xFF4
 17048                           prodl	equ	0xFF3
 17049                           intcon	equ	0xFF2
 17050                           postinc0	equ	0xFEE
 17051                           wreg	equ	0xFE8
 17052                           indf1	equ	0xFE7
 17053                           postdec1	equ	0xFE5
 17054                           plusw1	equ	0xFE3
 17055                           fsr1h	equ	0xFE2
 17056                           fsr1l	equ	0xFE1
 17057                           indf2	equ	0xFDF
 17058                           postinc2	equ	0xFDE
 17059                           postdec2	equ	0xFDD
 17060                           plusw2	equ	0xFDB
 17061                           fsr2h	equ	0xFDA
 17062                           fsr2l	equ	0xFD9
 17063                           status	equ	0xFD8
 17064                           
 17065 ;; *************** function _Word_SetPair *****************
 17066 ;; Defined at:
 17067 ;;		line 149 in file "Library/Types.c"
 17068 ;; Parameters:    Size  Location     Type
 17069 ;;  pInput          2   15[BANK0 ] PTR struct Word
 17070 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17071 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17072 ;;  pPair           1   17[BANK0 ] unsigned char 
 17073 ;;  pValue          1   18[BANK0 ] unsigned char 
 17074 ;; Auto vars:     Size  Location     Type
 17075 ;;		None
 17076 ;; Return value:  Size  Location     Type
 17077 ;;                  1    wreg      void 
 17078 ;; Registers used:
 17079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17080 ;; Tracked objects:
 17081 ;;		On entry : 0/0
 17082 ;;		On exit  : 0/0
 17083 ;;		Unchanged: 0/0
 17084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17088 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17089 ;;Total ram usage:        4 bytes
 17090 ;; Hardware stack levels used:    1
 17091 ;; Hardware stack levels required when called:    9
 17092 ;; This function calls:
 17093 ;;		_Byte_SetPair
 17094 ;; This function is called by:
 17095 ;;		_Port_SetPinType
 17096 ;;		_Port_SetQuadType
 17097 ;;		_Port_SetType
 17098 ;;		_Port_SetPairType
 17099 ;;		_PortProperty_Init
 17100 ;; This function uses a non-reentrant model
 17101 ;;
 17102                           
 17103                           	psect	text94
 17104  014F48                     __ptext94:
 17105                           	opt stack 0
 17106  014F48                     _Word_SetPair:
 17107                           	opt stack 19
 17108                           
 17109                           ;Types.c: 151: if (pPair >= 4)
 17110                           
 17111                           ;incstack = 0
 17112  014F48  0E03               	movlw	3
 17113  014F4A  0100               	movlb	0	; () banked
 17114  014F4C  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 17115  014F4E  D00E               	goto	l776
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 17119  014F50  0E01               	movlw	1
 17120  014F52  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 17121  014F54  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 17122  014F56  0E00               	movlw	0
 17123  014F58  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 17124  014F5A  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 17125  014F5C  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 17126  014F5E  0FFC               	addlw	252
 17127  014F60  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 17128  014F62  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17129  014F66  EC6F  F0A9         	call	_Byte_SetPair	;wreg free
 17130  014F6A  0012               	return	
 17131  014F6C                     l776:
 17132                           
 17133                           ;Types.c: 153: else
 17134                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 17135  014F6C  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 17136  014F70  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 17137  014F74  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 17138  014F78  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17139  014F7C  EC6F  F0A9         	call	_Byte_SetPair	;wreg free
 17140  014F80  0012               	return	
 17141  014F82                     __end_of_Word_SetPair:
 17142                           	opt stack 0
 17143                           tosu	equ	0xFFF
 17144                           tosh	equ	0xFFE
 17145                           tosl	equ	0xFFD
 17146                           pclath	equ	0xFFA
 17147                           tblptru	equ	0xFF8
 17148                           tblptrh	equ	0xFF7
 17149                           tblptrl	equ	0xFF6
 17150                           tablat	equ	0xFF5
 17151                           prodh	equ	0xFF4
 17152                           prodl	equ	0xFF3
 17153                           intcon	equ	0xFF2
 17154                           postinc0	equ	0xFEE
 17155                           wreg	equ	0xFE8
 17156                           indf1	equ	0xFE7
 17157                           postdec1	equ	0xFE5
 17158                           plusw1	equ	0xFE3
 17159                           fsr1h	equ	0xFE2
 17160                           fsr1l	equ	0xFE1
 17161                           indf2	equ	0xFDF
 17162                           postinc2	equ	0xFDE
 17163                           postdec2	equ	0xFDD
 17164                           plusw2	equ	0xFDB
 17165                           fsr2h	equ	0xFDA
 17166                           fsr2l	equ	0xFD9
 17167                           status	equ	0xFD8
 17168                           
 17169 ;; *************** function _Byte_SetPair *****************
 17170 ;; Defined at:
 17171 ;;		line 83 in file "Library/Types.c"
 17172 ;; Parameters:    Size  Location     Type
 17173 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17174 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17175 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17176 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 17177 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 17178 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 17179 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 17180 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 17181 ;;		 -> NULL(0), 
 17182 ;;  pPair           1   13[BANK0 ] unsigned char 
 17183 ;;  pValue          1   14[BANK0 ] unsigned char 
 17184 ;; Auto vars:     Size  Location     Type
 17185 ;;		None
 17186 ;; Return value:  Size  Location     Type
 17187 ;;                  1    wreg      void 
 17188 ;; Registers used:
 17189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17190 ;; Tracked objects:
 17191 ;;		On entry : 0/0
 17192 ;;		On exit  : 0/0
 17193 ;;		Unchanged: 0/0
 17194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17195 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17198 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17199 ;;Total ram usage:        4 bytes
 17200 ;; Hardware stack levels used:    1
 17201 ;; Hardware stack levels required when called:    8
 17202 ;; This function calls:
 17203 ;;		_Byte_SetZone
 17204 ;; This function is called by:
 17205 ;;		_Word_SetPair
 17206 ;;		_Port_SetPairType
 17207 ;;		_Port_SetPair
 17208 ;; This function uses a non-reentrant model
 17209 ;;
 17210                           
 17211                           	psect	text95
 17212  0152DE                     __ptext95:
 17213                           	opt stack 0
 17214  0152DE                     _Byte_SetPair:
 17215                           	opt stack 19
 17216                           
 17217                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 17218                           
 17219                           ;incstack = 0
 17220  0152DE  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 17221  0152E2  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 17222  0152E6  0E04               	movlw	4
 17223  0152E8  0100               	movlb	0	; () banked
 17224  0152EA  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 17225  0152EC  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 17226  0152F0  0E02               	movlw	2
 17227  0152F2  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17228  0152F4  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 17229  0152F8  EC29  F09F         	call	_Byte_SetZone	;wreg free
 17230  0152FC  0012               	return		;funcret
 17231  0152FE                     __end_of_Byte_SetPair:
 17232                           	opt stack 0
 17233                           tosu	equ	0xFFF
 17234                           tosh	equ	0xFFE
 17235                           tosl	equ	0xFFD
 17236                           pclath	equ	0xFFA
 17237                           tblptru	equ	0xFF8
 17238                           tblptrh	equ	0xFF7
 17239                           tblptrl	equ	0xFF6
 17240                           tablat	equ	0xFF5
 17241                           prodh	equ	0xFF4
 17242                           prodl	equ	0xFF3
 17243                           intcon	equ	0xFF2
 17244                           postinc0	equ	0xFEE
 17245                           wreg	equ	0xFE8
 17246                           indf1	equ	0xFE7
 17247                           postdec1	equ	0xFE5
 17248                           plusw1	equ	0xFE3
 17249                           fsr1h	equ	0xFE2
 17250                           fsr1l	equ	0xFE1
 17251                           indf2	equ	0xFDF
 17252                           postinc2	equ	0xFDE
 17253                           postdec2	equ	0xFDD
 17254                           plusw2	equ	0xFDB
 17255                           fsr2h	equ	0xFDA
 17256                           fsr2l	equ	0xFD9
 17257                           status	equ	0xFD8
 17258                           
 17259 ;; *************** function _Port_CheckQuadType *****************
 17260 ;; Defined at:
 17261 ;;		line 126 in file "Library/Port.c"
 17262 ;; Parameters:    Size  Location     Type
 17263 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 17264 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17265 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17266 ;;  pQuad           1   49[BANK0 ] enum E6776
 17267 ;;  pDrive          1   50[BANK0 ] enum E6469
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  Output          1   53[BANK0 ] enum E6475
 17270 ;;  Pair2           1   52[BANK0 ] enum E6760
 17271 ;;  Pair1           1   51[BANK0 ] enum E6760
 17272 ;; Return value:  Size  Location     Type
 17273 ;;                  1    wreg      enum E6475
 17274 ;; Registers used:
 17275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17276 ;; Tracked objects:
 17277 ;;		On entry : 0/0
 17278 ;;		On exit  : 0/0
 17279 ;;		Unchanged: 0/0
 17280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17281 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17284 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17285 ;;Total ram usage:        7 bytes
 17286 ;; Hardware stack levels used:    1
 17287 ;; Hardware stack levels required when called:   12
 17288 ;; This function calls:
 17289 ;;		_Port_CheckPairType
 17290 ;; This function is called by:
 17291 ;;		_Port_CheckPortType
 17292 ;;		_Port_SetQuadType
 17293 ;; This function uses a non-reentrant model
 17294 ;;
 17295                           
 17296                           	psect	text96
 17297  014B54                     __ptext96:
 17298                           	opt stack 0
 17299  014B54                     _Port_CheckQuadType:
 17300                           	opt stack 15
 17301                           
 17302                           ;Port.c: 128: ePinError Output = ePinErrorState;
 17303                           
 17304                           ;incstack = 0
 17305  014B54  0E05               	movlw	5
 17306  014B56  0100               	movlb	0	; () banked
 17307  014B58  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 17311  014B5A  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17312  014B5C  0D02               	mullw	2
 17313  014B5E  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 17314                           
 17315                           ; BSR set to: 0
 17316                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 17317  014B62  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17318  014B64  0D02               	mullw	2
 17319  014B66  28F3               	incf	prodl,w,c
 17320  014B68  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 17324  014B6A  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17325  014B6E  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17326  014B72  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 17327  014B76  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17328  014B7A  ECD2  F0A3         	call	_Port_CheckPairType	;wreg free
 17329  014B7E  0100               	movlb	0	; () banked
 17330  014B80  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17331  014B82  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17332  014B84  A4D8               	btfss	status,2,c
 17333  014B86  D00C               	goto	l393
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 17337  014B88  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17338  014B8C  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17339  014B90  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 17340  014B94  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17341  014B98  ECD2  F0A3         	call	_Port_CheckPairType	;wreg free
 17342  014B9C  0100               	movlb	0	; () banked
 17343  014B9E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17344  014BA0                     l393:
 17345                           
 17346                           ; BSR set to: 0
 17347                           ;Port.c: 136: return Output;
 17348                           
 17349                           ; BSR set to: 0
 17350  014BA0  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17351  014BA2  0012               	return	
 17352  014BA4                     __end_of_Port_CheckQuadType:
 17353                           	opt stack 0
 17354                           tosu	equ	0xFFF
 17355                           tosh	equ	0xFFE
 17356                           tosl	equ	0xFFD
 17357                           pclath	equ	0xFFA
 17358                           tblptru	equ	0xFF8
 17359                           tblptrh	equ	0xFF7
 17360                           tblptrl	equ	0xFF6
 17361                           tablat	equ	0xFF5
 17362                           prodh	equ	0xFF4
 17363                           prodl	equ	0xFF3
 17364                           intcon	equ	0xFF2
 17365                           postinc0	equ	0xFEE
 17366                           wreg	equ	0xFE8
 17367                           indf1	equ	0xFE7
 17368                           postdec1	equ	0xFE5
 17369                           plusw1	equ	0xFE3
 17370                           fsr1h	equ	0xFE2
 17371                           fsr1l	equ	0xFE1
 17372                           indf2	equ	0xFDF
 17373                           postinc2	equ	0xFDE
 17374                           postdec2	equ	0xFDD
 17375                           plusw2	equ	0xFDB
 17376                           fsr2h	equ	0xFDA
 17377                           fsr2l	equ	0xFD9
 17378                           status	equ	0xFD8
 17379                           
 17380 ;; *************** function _Port_CheckPairType *****************
 17381 ;; Defined at:
 17382 ;;		line 112 in file "Library/Port.c"
 17383 ;; Parameters:    Size  Location     Type
 17384 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17385 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17386 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17387 ;;  pPair           1   40[BANK0 ] enum E6760
 17388 ;;  pDrive          1   41[BANK0 ] enum E6469
 17389 ;; Auto vars:     Size  Location     Type
 17390 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 17391 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17392 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17393 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17394 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17395 ;;  Output          1   44[BANK0 ] enum E6475
 17396 ;;  Pin2            1   43[BANK0 ] enum E6750
 17397 ;;  Pin1            1   42[BANK0 ] enum E6750
 17398 ;; Return value:  Size  Location     Type
 17399 ;;                  1    wreg      enum E6475
 17400 ;; Registers used:
 17401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17402 ;; Tracked objects:
 17403 ;;		On entry : 0/0
 17404 ;;		On exit  : 0/0
 17405 ;;		Unchanged: 0/0
 17406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17407 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17408 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17410 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17411 ;;Total ram usage:        9 bytes
 17412 ;; Hardware stack levels used:    1
 17413 ;; Hardware stack levels required when called:   11
 17414 ;; This function calls:
 17415 ;;		_PortProperty_Valid
 17416 ;; This function is called by:
 17417 ;;		_Port_CheckQuadType
 17418 ;;		_Port_SetPairType
 17419 ;; This function uses a non-reentrant model
 17420 ;;
 17421                           
 17422                           	psect	text97
 17423  0147A4                     __ptext97:
 17424                           	opt stack 0
 17425  0147A4                     _Port_CheckPairType:
 17426                           	opt stack 15
 17427                           
 17428                           ;Port.c: 114: ePinError Output = ePinErrorState;
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;incstack = 0
 17432  0147A4  0E05               	movlw	5
 17433  0147A6  0100               	movlb	0	; () banked
 17434  0147A8  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 17435                           
 17436                           ; BSR set to: 0
 17437                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 17438  0147AA  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 17439  0147AE  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 17440  0147B2  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 17441  0147B6  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 17445  0147BA  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17446  0147BC  0D02               	mullw	2
 17447  0147BE  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 17451  0147C2  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17452  0147C4  0D02               	mullw	2
 17453  0147C6  28F3               	incf	prodl,w,c
 17454  0147C8  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 17455                           
 17456                           ; BSR set to: 0
 17457                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 17458  0147CA  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17459  0147CE  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17460  0147D2  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17461  0147D6  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 17462  0147DA  EC6E  F0A3         	call	_PortProperty_Valid	;wreg free
 17463  0147DE  0100               	movlb	0	; () banked
 17464  0147E0  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 17465  0147E2  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 17466  0147E4  A4D8               	btfss	status,2,c
 17467  0147E6  D00C               	goto	l389
 17468                           
 17469                           ; BSR set to: 0
 17470                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 17471  0147E8  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17472  0147EC  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17473  0147F0  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17474  0147F4  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 17475  0147F8  EC6E  F0A3         	call	_PortProperty_Valid	;wreg free
 17476  0147FC  0100               	movlb	0	; () banked
 17477  0147FE  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 17478  014800                     l389:
 17479                           
 17480                           ; BSR set to: 0
 17481                           ;Port.c: 124: return Output;
 17482                           
 17483                           ; BSR set to: 0
 17484  014800  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 17485  014802  0012               	return	
 17486  014804                     __end_of_Port_CheckPairType:
 17487                           	opt stack 0
 17488                           tosu	equ	0xFFF
 17489                           tosh	equ	0xFFE
 17490                           tosl	equ	0xFFD
 17491                           pclath	equ	0xFFA
 17492                           tblptru	equ	0xFF8
 17493                           tblptrh	equ	0xFF7
 17494                           tblptrl	equ	0xFF6
 17495                           tablat	equ	0xFF5
 17496                           prodh	equ	0xFF4
 17497                           prodl	equ	0xFF3
 17498                           intcon	equ	0xFF2
 17499                           postinc0	equ	0xFEE
 17500                           wreg	equ	0xFE8
 17501                           indf1	equ	0xFE7
 17502                           postdec1	equ	0xFE5
 17503                           plusw1	equ	0xFE3
 17504                           fsr1h	equ	0xFE2
 17505                           fsr1l	equ	0xFE1
 17506                           indf2	equ	0xFDF
 17507                           postinc2	equ	0xFDE
 17508                           postdec2	equ	0xFDD
 17509                           plusw2	equ	0xFDB
 17510                           fsr2h	equ	0xFDA
 17511                           fsr2l	equ	0xFD9
 17512                           status	equ	0xFD8
 17513                           
 17514 ;; *************** function _PortProperty_Valid *****************
 17515 ;; Defined at:
 17516 ;;		line 220 in file "Library/Types.c"
 17517 ;; Parameters:    Size  Location     Type
 17518 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 17519 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17520 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17521 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17522 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17523 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 17524 ;;  pPin            1   18[BANK0 ] unsigned char 
 17525 ;; Auto vars:     Size  Location     Type
 17526 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 17527 ;;  Pair            1   37[BANK0 ] enum E6469
 17528 ;; Return value:  Size  Location     Type
 17529 ;;                  1    wreg      enum E6475
 17530 ;; Registers used:
 17531 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17532 ;; Tracked objects:
 17533 ;;		On entry : 0/0
 17534 ;;		On exit  : 0/0
 17535 ;;		Unchanged: 0/0
 17536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17537 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17538 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17540 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17541 ;;Total ram usage:       23 bytes
 17542 ;; Hardware stack levels used:    1
 17543 ;; Hardware stack levels required when called:   10
 17544 ;; This function calls:
 17545 ;;		_Word_GetPair
 17546 ;; This function is called by:
 17547 ;;		_Port_CheckPairType
 17548 ;;		_Port_SetPinType
 17549 ;; This function uses a non-reentrant model
 17550 ;;
 17551                           
 17552                           	psect	text98
 17553  0146DC                     __ptext98:
 17554                           	opt stack 0
 17555  0146DC                     _PortProperty_Valid:
 17556                           	opt stack 15
 17557                           
 17558                           ;Types.c: 222: ePinDrive Pair;
 17559                           ;Types.c: 223: const ePinError Errors[4][4] =
 17560                           ;Types.c: 224: {
 17561                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 17562                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 17563                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 17564                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 17565                           ;Types.c: 230: };
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;incstack = 0
 17569  0146DC  0E79               	movlw	low PortProperty_Valid@F6830
 17570  0146DE  6EF6               	movwf	tblptrl,c
 17571  0146E0                     	if	1	;There is more than 1 active tblptr byte
 17572  0146E0  0EFC               	movlw	high PortProperty_Valid@F6830
 17573  0146E2  6EF7               	movwf	tblptrh,c
 17574  0146E4                     	endif
 17575  0146E4                     	if	1	;There are 3 active tblptr bytes
 17576  0146E4  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 17577  0146E6  6EF8               	movwf	tblptru,c
 17578  0146E8                     	endif
 17579  0146E8  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 17580  0146EC  0E0F               	movlw	15
 17581  0146EE                     u9570:
 17582  0146EE  0009               	tblrd		*+
 17583  0146F0  CFF5 FFDE          	movff	tablat,postinc2
 17584  0146F4  06E8               	decf	wreg,f,c
 17585  0146F6  E2FB               	bc	u9570
 17586                           
 17587                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 17588  0146F8  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 17589  0146FC  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 17590  014700  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 17591  014704  EC47  F0A8         	call	_Word_GetPair	;wreg free
 17592  014708  0100               	movlb	0	; () banked
 17593  01470A  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 17597  01470C  0E04               	movlw	4
 17598  01470E  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 17599  014710  D017               	goto	l819
 17600                           
 17601                           ; BSR set to: 0
 17602  014712  0E04               	movlw	4
 17603  014714  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 17604  014716  D014               	goto	l819
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 17608  014718  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 17609  01471A  0D04               	mullw	4
 17610  01471C  0E75               	movlw	low PortProperty_Valid@Errors
 17611  01471E  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 17612  014720  0E00               	movlw	high PortProperty_Valid@Errors
 17613  014722  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 17614  014724  50F3               	movf	prodl,w,c
 17615  014726  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 17616  014728  50F4               	movf	prodh,w,c
 17617  01472A  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 17618  01472C  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 17619  01472E  0D01               	mullw	1
 17620  014730  50F3               	movf	prodl,w,c
 17621  014732  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 17622  014734  6ED9               	movwf	fsr2l,c
 17623  014736  50F4               	movf	prodh,w,c
 17624  014738  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 17625  01473A  6EDA               	movwf	fsr2h,c
 17626  01473C  50DF               	movf	indf2,w,c
 17627                           
 17628                           ; BSR set to: 0
 17629  01473E  0012               	return	
 17630  014740                     l819:
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;Types.c: 237: return ePinErrorState;
 17634                           
 17635                           ; BSR set to: 0
 17636  014740  0E05               	movlw	5
 17637  014742  0012               	return	
 17638  014744                     __end_of_PortProperty_Valid:
 17639                           	opt stack 0
 17640                           tosu	equ	0xFFF
 17641                           tosh	equ	0xFFE
 17642                           tosl	equ	0xFFD
 17643                           pclath	equ	0xFFA
 17644                           tblptru	equ	0xFF8
 17645                           tblptrh	equ	0xFF7
 17646                           tblptrl	equ	0xFF6
 17647                           tablat	equ	0xFF5
 17648                           prodh	equ	0xFF4
 17649                           prodl	equ	0xFF3
 17650                           intcon	equ	0xFF2
 17651                           postinc0	equ	0xFEE
 17652                           wreg	equ	0xFE8
 17653                           indf1	equ	0xFE7
 17654                           postdec1	equ	0xFE5
 17655                           plusw1	equ	0xFE3
 17656                           fsr1h	equ	0xFE2
 17657                           fsr1l	equ	0xFE1
 17658                           indf2	equ	0xFDF
 17659                           postinc2	equ	0xFDE
 17660                           postdec2	equ	0xFDD
 17661                           plusw2	equ	0xFDB
 17662                           fsr2h	equ	0xFDA
 17663                           fsr2l	equ	0xFD9
 17664                           status	equ	0xFD8
 17665                           
 17666 ;; *************** function _Word_GetPair *****************
 17667 ;; Defined at:
 17668 ;;		line 156 in file "Library/Types.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;  pInput          2   12[BANK0 ] PTR struct Word
 17671 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17672 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17673 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17674 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17675 ;;  pPair           1   14[BANK0 ] unsigned char 
 17676 ;; Auto vars:     Size  Location     Type
 17677 ;;		None
 17678 ;; Return value:  Size  Location     Type
 17679 ;;                  1    wreg      unsigned char 
 17680 ;; Registers used:
 17681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17682 ;; Tracked objects:
 17683 ;;		On entry : 0/0
 17684 ;;		On exit  : 0/0
 17685 ;;		Unchanged: 0/0
 17686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17687 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17690 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17691 ;;Total ram usage:        3 bytes
 17692 ;; Hardware stack levels used:    1
 17693 ;; Hardware stack levels required when called:    9
 17694 ;; This function calls:
 17695 ;;		_Byte_GetPair
 17696 ;; This function is called by:
 17697 ;;		_Port_Init
 17698 ;;		_Port_SetPin
 17699 ;;		_Port_Set
 17700 ;;		_PortProperty_Valid
 17701 ;;		_Port_SetPair
 17702 ;;		_Port_SetQuad
 17703 ;; This function uses a non-reentrant model
 17704 ;;
 17705                           
 17706                           	psect	text99
 17707  01508E                     __ptext99:
 17708                           	opt stack 0
 17709  01508E                     _Word_GetPair:
 17710                           	opt stack 15
 17711                           
 17712                           ;Types.c: 158: if (pPair >= 4)
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;incstack = 0
 17716  01508E  0E03               	movlw	3
 17717  015090  0100               	movlb	0	; () banked
 17718  015092  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 17719  015094  D00C               	goto	l781
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 17723  015096  0E01               	movlw	1
 17724  015098  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 17725  01509A  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 17726  01509C  0E00               	movlw	0
 17727  01509E  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 17728  0150A0  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 17729  0150A2  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 17730  0150A4  0FFC               	addlw	252
 17731  0150A6  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 17732  0150A8  ECAC  F0A9         	call	_Byte_GetPair	;wreg free
 17733  0150AC  0012               	return	
 17734  0150AE                     l781:
 17735                           
 17736                           ;Types.c: 160: else
 17737                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 17738  0150AE  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 17739  0150B2  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 17740  0150B6  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 17741  0150BA  ECAC  F0A9         	call	_Byte_GetPair	;wreg free
 17742  0150BE  0012               	return	
 17743  0150C0                     __end_of_Word_GetPair:
 17744                           	opt stack 0
 17745                           tosu	equ	0xFFF
 17746                           tosh	equ	0xFFE
 17747                           tosl	equ	0xFFD
 17748                           pclath	equ	0xFFA
 17749                           tblptru	equ	0xFF8
 17750                           tblptrh	equ	0xFF7
 17751                           tblptrl	equ	0xFF6
 17752                           tablat	equ	0xFF5
 17753                           prodh	equ	0xFF4
 17754                           prodl	equ	0xFF3
 17755                           intcon	equ	0xFF2
 17756                           postinc0	equ	0xFEE
 17757                           wreg	equ	0xFE8
 17758                           indf1	equ	0xFE7
 17759                           postdec1	equ	0xFE5
 17760                           plusw1	equ	0xFE3
 17761                           fsr1h	equ	0xFE2
 17762                           fsr1l	equ	0xFE1
 17763                           indf2	equ	0xFDF
 17764                           postinc2	equ	0xFDE
 17765                           postdec2	equ	0xFDD
 17766                           plusw2	equ	0xFDB
 17767                           fsr2h	equ	0xFDA
 17768                           fsr2l	equ	0xFD9
 17769                           status	equ	0xFD8
 17770                           
 17771 ;; *************** function _Byte_GetPair *****************
 17772 ;; Defined at:
 17773 ;;		line 87 in file "Library/Types.c"
 17774 ;; Parameters:    Size  Location     Type
 17775 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 17776 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 17777 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 17778 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 17779 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 17780 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 17781 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 17782 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 17783 ;;		 -> NULL(0), 
 17784 ;;  pPair           1   11[BANK0 ] unsigned char 
 17785 ;; Auto vars:     Size  Location     Type
 17786 ;;		None
 17787 ;; Return value:  Size  Location     Type
 17788 ;;                  1    wreg      unsigned char 
 17789 ;; Registers used:
 17790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17791 ;; Tracked objects:
 17792 ;;		On entry : 0/0
 17793 ;;		On exit  : 0/0
 17794 ;;		Unchanged: 0/0
 17795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17796 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17799 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17800 ;;Total ram usage:        3 bytes
 17801 ;; Hardware stack levels used:    1
 17802 ;; Hardware stack levels required when called:    8
 17803 ;; This function calls:
 17804 ;;		_Byte_GetZone
 17805 ;; This function is called by:
 17806 ;;		_Word_GetPair
 17807 ;; This function uses a non-reentrant model
 17808 ;;
 17809                           
 17810                           	psect	text100
 17811  015358                     __ptext100:
 17812                           	opt stack 0
 17813  015358                     _Byte_GetPair:
 17814                           	opt stack 15
 17815                           
 17816                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 17817                           
 17818                           ;incstack = 0
 17819  015358  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 17820  01535C  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 17821  015360  0E04               	movlw	4
 17822  015362  0100               	movlb	0	; () banked
 17823  015364  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 17824  015366  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 17825  01536A  0E02               	movlw	2
 17826  01536C  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 17827  01536E  EC7B  F0A1         	call	_Byte_GetZone	;wreg free
 17828  015372  0012               	return	
 17829  015374                     __end_of_Byte_GetPair:
 17830                           	opt stack 0
 17831                           tosu	equ	0xFFF
 17832                           tosh	equ	0xFFE
 17833                           tosl	equ	0xFFD
 17834                           pclath	equ	0xFFA
 17835                           tblptru	equ	0xFF8
 17836                           tblptrh	equ	0xFF7
 17837                           tblptrl	equ	0xFF6
 17838                           tablat	equ	0xFF5
 17839                           prodh	equ	0xFF4
 17840                           prodl	equ	0xFF3
 17841                           intcon	equ	0xFF2
 17842                           postinc0	equ	0xFEE
 17843                           wreg	equ	0xFE8
 17844                           indf1	equ	0xFE7
 17845                           postdec1	equ	0xFE5
 17846                           plusw1	equ	0xFE3
 17847                           fsr1h	equ	0xFE2
 17848                           fsr1l	equ	0xFE1
 17849                           indf2	equ	0xFDF
 17850                           postinc2	equ	0xFDE
 17851                           postdec2	equ	0xFDD
 17852                           plusw2	equ	0xFDB
 17853                           fsr2h	equ	0xFDA
 17854                           fsr2l	equ	0xFD9
 17855                           status	equ	0xFD8
 17856                           
 17857 ;; *************** function _Byte_GetZone *****************
 17858 ;; Defined at:
 17859 ;;		line 64 in file "Library/Types.c"
 17860 ;; Parameters:    Size  Location     Type
 17861 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17862 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 17863 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 17864 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 17865 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 17866 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 17867 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 17868 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 17869 ;;		 -> NULL(0), 
 17870 ;;  pMax            1    2[BANK0 ] unsigned char 
 17871 ;;  pChunk          1    3[BANK0 ] unsigned char 
 17872 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 17873 ;; Auto vars:     Size  Location     Type
 17874 ;;  Output          1    8[BANK0 ] unsigned char 
 17875 ;;  Offset          1    7[BANK0 ] unsigned char 
 17876 ;;  MASK            1    6[BANK0 ] unsigned char 
 17877 ;; Return value:  Size  Location     Type
 17878 ;;                  1    wreg      unsigned char 
 17879 ;; Registers used:
 17880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 17881 ;; Tracked objects:
 17882 ;;		On entry : 0/0
 17883 ;;		On exit  : 0/0
 17884 ;;		Unchanged: 0/0
 17885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17886 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17887 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17889 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17890 ;;Total ram usage:        9 bytes
 17891 ;; Hardware stack levels used:    1
 17892 ;; Hardware stack levels required when called:    7
 17893 ;; This function calls:
 17894 ;;		Nothing
 17895 ;; This function is called by:
 17896 ;;		_Byte_GetPair
 17897 ;;		_Byte_GetTriple
 17898 ;;		_Byte_GetQuad
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           	psect	text101
 17903  0142F6                     __ptext101:
 17904                           	opt stack 0
 17905  0142F6                     _Byte_GetZone:
 17906                           	opt stack 15
 17907                           
 17908                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 17909                           
 17910                           ;incstack = 0
 17911  0142F6  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 17912  0142FA  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 17913  0142FE  0E00               	movlw	low (__mediumconst shr (0+16))
 17914  014300  6EF8               	movwf	tblptru,c
 17915  014302  0E0F               	movlw	(high __ramtop+-1)
 17916  014304  64F7               	cpfsgt	tblptrh,c
 17917  014306  D003               	bra	u9537
 17918  014308  0008               	tblrd		*
 17919  01430A  50F5               	movf	tablat,w,c
 17920  01430C  D005               	bra	u9530
 17921  01430E                     u9537:
 17922  01430E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17923  014312  CFF7 FFEA          	movff	tblptrh,fsr0h
 17924  014316  50EF               	movf	indf0,w,c
 17925  014318                     u9530:
 17926  014318  0100               	movlb	0	; () banked
 17927  01431A  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 17931  01431C  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17932  01431E  0D01               	mullw	1
 17933  014320  0E93               	movlw	low _MASKS
 17934  014322  24F3               	addwf	prodl,w,c
 17935  014324  6EF6               	movwf	tblptrl,c
 17936  014326  0EFC               	movlw	high _MASKS
 17937  014328  20F4               	addwfc	prodh,w,c
 17938  01432A  6EF7               	movwf	tblptrh,c
 17939  01432C                     	if	1	;There are 3 active tblptr bytes
 17940  01432C  6AF8               	clrf	tblptru,c
 17941  01432E  0E00               	movlw	low (__mediumconst shr (0+16))
 17942  014330  22F8               	addwfc	tblptru,f,c
 17943  014332                     	endif
 17944  014332  0008               	tblrd		*
 17945  014334  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;Types.c: 68: UINT8 Offset = 0;
 17949  014338  0E00               	movlw	0
 17950  01433A  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 17951                           
 17952                           ;Types.c: 70: while (pChunk >= pMax)
 17953  01433C  D003               	goto	l732
 17954  01433E                     
 17955                           ; BSR set to: 0
 17956                           ;Types.c: 71: {
 17957                           ;Types.c: 72: pChunk -= pMax;
 17958                           
 17959                           ; BSR set to: 0
 17960  01433E  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 17961  014340  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;Types.c: 73: Offset += 1;
 17965  014342  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 17966  014344                     l732:
 17967                           
 17968                           ; BSR set to: 0
 17969                           
 17970                           ; BSR set to: 0
 17971  014344  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 17972  014346  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 17973  014348  B0D8               	btfsc	status,0,c
 17974  01434A  D7F9               	goto	l733
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;Types.c: 74: }
 17978                           ;Types.c: 75: pChunk *= pChunkSize;
 17979                           
 17980                           ; BSR set to: 0
 17981  01434C  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17982  01434E  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 17983  014350  50F3               	movf	prodl,w,c
 17984  014352  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 17985                           
 17986                           ; BSR set to: 0
 17987                           ;Types.c: 76: pChunk += Offset;
 17988  014354  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 17989  014356  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 17990                           
 17991                           ; BSR set to: 0
 17992                           ;Types.c: 78: Output >>= pChunk;
 17993  014358  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 17994  01435A  6F65               	movwf	??_Byte_GetZone& (0+255),b
 17995  01435C  D002               	goto	u9550
 17996  01435E                     u9555:
 17997  01435E  90D8               	bcf	status,0,c
 17998  014360  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 17999  014362                     u9550:
 18000  014362  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 18001  014364  D7FC               	goto	u9555
 18002                           
 18003                           ;Types.c: 79: Output &= MASK;
 18004  014366  0100               	movlb	0	; () banked
 18005  014368  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 18006  01436A  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 18007                           
 18008                           ; BSR set to: 0
 18009                           ;Types.c: 80: return Output;
 18010  01436C  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 18011  01436E  0012               	return	
 18012  014370                     __end_of_Byte_GetZone:
 18013                           	opt stack 0
 18014                           tosu	equ	0xFFF
 18015                           tosh	equ	0xFFE
 18016                           tosl	equ	0xFFD
 18017                           pclath	equ	0xFFA
 18018                           tblptru	equ	0xFF8
 18019                           tblptrh	equ	0xFF7
 18020                           tblptrl	equ	0xFF6
 18021                           tablat	equ	0xFF5
 18022                           prodh	equ	0xFF4
 18023                           prodl	equ	0xFF3
 18024                           intcon	equ	0xFF2
 18025                           indf0	equ	0xFEF
 18026                           postinc0	equ	0xFEE
 18027                           fsr0h	equ	0xFEA
 18028                           fsr0l	equ	0xFE9
 18029                           wreg	equ	0xFE8
 18030                           indf1	equ	0xFE7
 18031                           postdec1	equ	0xFE5
 18032                           plusw1	equ	0xFE3
 18033                           fsr1h	equ	0xFE2
 18034                           fsr1l	equ	0xFE1
 18035                           indf2	equ	0xFDF
 18036                           postinc2	equ	0xFDE
 18037                           postdec2	equ	0xFDD
 18038                           plusw2	equ	0xFDB
 18039                           fsr2h	equ	0xFDA
 18040                           fsr2l	equ	0xFD9
 18041                           status	equ	0xFD8
 18042                           
 18043 ;; *************** function _Byte_SetQuad *****************
 18044 ;; Defined at:
 18045 ;;		line 101 in file "Library/Types.c"
 18046 ;; Parameters:    Size  Location     Type
 18047 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18048 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 18049 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18050 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18051 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18052 ;;		 -> NULL(0), 
 18053 ;;  pQuad           1   13[BANK0 ] unsigned char 
 18054 ;;  pValue          1   14[BANK0 ] unsigned char 
 18055 ;; Auto vars:     Size  Location     Type
 18056 ;;		None
 18057 ;; Return value:  Size  Location     Type
 18058 ;;                  1    wreg      void 
 18059 ;; Registers used:
 18060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18061 ;; Tracked objects:
 18062 ;;		On entry : 0/0
 18063 ;;		On exit  : 0/0
 18064 ;;		Unchanged: 0/0
 18065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18066 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18069 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18070 ;;Total ram usage:        4 bytes
 18071 ;; Hardware stack levels used:    1
 18072 ;; Hardware stack levels required when called:    8
 18073 ;; This function calls:
 18074 ;;		_Byte_SetZone
 18075 ;; This function is called by:
 18076 ;;		_Port_SetQuadType
 18077 ;;		_SPI_Init
 18078 ;;		_SPI_MinSpeed
 18079 ;;		_SPI_MaxSpeed
 18080 ;;		_Port_SetQuad
 18081 ;;		_Word_SetQuad
 18082 ;;		_I2C_Init
 18083 ;; This function uses a non-reentrant model
 18084 ;;
 18085                           
 18086                           	psect	text102
 18087  0152FE                     __ptext102:
 18088                           	opt stack 0
 18089  0152FE                     _Byte_SetQuad:
 18090                           	opt stack 20
 18091                           
 18092                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 18093                           
 18094                           ; BSR set to: 0
 18095                           ;incstack = 0
 18096  0152FE  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 18097  015302  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 18098  015306  0E02               	movlw	2
 18099  015308  0100               	movlb	0	; () banked
 18100  01530A  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 18101  01530C  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 18102  015310  0E04               	movlw	4
 18103  015312  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18104  015314  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 18105  015318  EC29  F09F         	call	_Byte_SetZone	;wreg free
 18106  01531C  0012               	return		;funcret
 18107  01531E                     __end_of_Byte_SetQuad:
 18108                           	opt stack 0
 18109                           tosu	equ	0xFFF
 18110                           tosh	equ	0xFFE
 18111                           tosl	equ	0xFFD
 18112                           pclath	equ	0xFFA
 18113                           tblptru	equ	0xFF8
 18114                           tblptrh	equ	0xFF7
 18115                           tblptrl	equ	0xFF6
 18116                           tablat	equ	0xFF5
 18117                           prodh	equ	0xFF4
 18118                           prodl	equ	0xFF3
 18119                           intcon	equ	0xFF2
 18120                           indf0	equ	0xFEF
 18121                           postinc0	equ	0xFEE
 18122                           fsr0h	equ	0xFEA
 18123                           fsr0l	equ	0xFE9
 18124                           wreg	equ	0xFE8
 18125                           indf1	equ	0xFE7
 18126                           postdec1	equ	0xFE5
 18127                           plusw1	equ	0xFE3
 18128                           fsr1h	equ	0xFE2
 18129                           fsr1l	equ	0xFE1
 18130                           indf2	equ	0xFDF
 18131                           postinc2	equ	0xFDE
 18132                           postdec2	equ	0xFDD
 18133                           plusw2	equ	0xFDB
 18134                           fsr2h	equ	0xFDA
 18135                           fsr2l	equ	0xFD9
 18136                           status	equ	0xFD8
 18137                           
 18138 ;; *************** function _Byte_SetZone *****************
 18139 ;; Defined at:
 18140 ;;		line 47 in file "Library/Types.c"
 18141 ;; Parameters:    Size  Location     Type
 18142 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18143 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18144 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18145 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 18146 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 18147 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18148 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18149 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18150 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18151 ;;  pMax            1    2[BANK0 ] unsigned char 
 18152 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18153 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18154 ;;  pValue          1    5[BANK0 ] unsigned char 
 18155 ;; Auto vars:     Size  Location     Type
 18156 ;;  MASK            1   10[BANK0 ] unsigned char 
 18157 ;;  Offset          1    9[BANK0 ] unsigned char 
 18158 ;; Return value:  Size  Location     Type
 18159 ;;                  1    wreg      void 
 18160 ;; Registers used:
 18161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18162 ;; Tracked objects:
 18163 ;;		On entry : 0/0
 18164 ;;		On exit  : 0/0
 18165 ;;		Unchanged: 0/0
 18166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18167 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18169 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18170 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18171 ;;Total ram usage:       11 bytes
 18172 ;; Hardware stack levels used:    1
 18173 ;; Hardware stack levels required when called:    7
 18174 ;; This function calls:
 18175 ;;		Nothing
 18176 ;; This function is called by:
 18177 ;;		_Byte_SetPair
 18178 ;;		_Byte_SetQuad
 18179 ;;		_Byte_SetTriple
 18180 ;; This function uses a non-reentrant model
 18181 ;;
 18182                           
 18183                           	psect	text103
 18184  013E52                     __ptext103:
 18185                           	opt stack 0
 18186  013E52                     _Byte_SetZone:
 18187                           	opt stack 19
 18188                           
 18189                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 18190                           
 18191                           ;incstack = 0
 18192  013E52  0100               	movlb	0	; () banked
 18193  013E54  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18194  013E56  0D01               	mullw	1
 18195  013E58  0E93               	movlw	low _MASKS
 18196  013E5A  24F3               	addwf	prodl,w,c
 18197  013E5C  6EF6               	movwf	tblptrl,c
 18198  013E5E  0EFC               	movlw	high _MASKS
 18199  013E60  20F4               	addwfc	prodh,w,c
 18200  013E62  6EF7               	movwf	tblptrh,c
 18201  013E64                     	if	1	;There are 3 active tblptr bytes
 18202  013E64  6AF8               	clrf	tblptru,c
 18203  013E66  0E00               	movlw	low (__mediumconst shr (0+16))
 18204  013E68  22F8               	addwfc	tblptru,f,c
 18205  013E6A                     	endif
 18206  013E6A  0008               	tblrd		*
 18207  013E6C  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 18208                           
 18209                           ; BSR set to: 0
 18210                           ;Types.c: 50: UINT8 Offset = 0;
 18211  013E70  0E00               	movlw	0
 18212  013E72  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 18213                           
 18214                           ;Types.c: 52: while (pChunk >= pMax)
 18215  013E74  D003               	goto	l726
 18216  013E76                     
 18217                           ; BSR set to: 0
 18218                           ;Types.c: 53: {
 18219                           ;Types.c: 54: pChunk -= pMax;
 18220                           
 18221                           ; BSR set to: 0
 18222  013E76  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18223  013E78  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 18224                           
 18225                           ; BSR set to: 0
 18226                           ;Types.c: 55: Offset += 1;
 18227  013E7A  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 18228  013E7C                     l726:
 18229                           
 18230                           ; BSR set to: 0
 18231                           
 18232                           ; BSR set to: 0
 18233  013E7C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18234  013E7E  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 18235  013E80  B0D8               	btfsc	status,0,c
 18236  013E82  D7F9               	goto	l727
 18237                           
 18238                           ; BSR set to: 0
 18239                           ;Types.c: 56: }
 18240                           ;Types.c: 57: pChunk *= pChunkSize;
 18241                           
 18242                           ; BSR set to: 0
 18243  013E84  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18244  013E86  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 18245  013E88  50F3               	movf	prodl,w,c
 18246  013E8A  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 18247                           
 18248                           ; BSR set to: 0
 18249                           ;Types.c: 58: pChunk += Offset;
 18250  013E8C  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 18251  013E8E  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 18252                           
 18253                           ; BSR set to: 0
 18254                           ;Types.c: 60: pValue &= MASK;
 18255  013E90  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 18256  013E92  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 18257                           
 18258                           ; BSR set to: 0
 18259                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 18260  013E94  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18261  013E98  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 18262  013E9C  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18263  013E9E  D002               	goto	u9634
 18264  013EA0                     u9635:
 18265  013EA0  90D8               	bcf	status,0,c
 18266  013EA2  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18267  013EA4                     u9634:
 18268  013EA4  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18269  013EA6  D7FC               	goto	u9635
 18270  013EA8  0100               	movlb	0	; () banked
 18271  013EAA  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18272  013EAC  0AFF               	xorlw	255
 18273  013EAE  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 18274  013EB0  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18275  013EB4  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18276  013EB8  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 18277  013EBA  16DF               	andwf	indf2,f,c
 18278                           
 18279                           ; BSR set to: 0
 18280                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 18281  013EBC  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18282  013EC0  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 18283  013EC4  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18284  013EC6  D002               	goto	u9644
 18285  013EC8                     u9645:
 18286  013EC8  90D8               	bcf	status,0,c
 18287  013ECA  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18288  013ECC                     u9644:
 18289  013ECC  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18290  013ECE  D7FC               	goto	u9645
 18291  013ED0  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18292  013ED4  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18293  013ED8  0100               	movlb	0	; () banked
 18294  013EDA  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18295  013EDC  12DF               	iorwf	indf2,f,c
 18296                           
 18297                           ; BSR set to: 0
 18298  013EDE  0012               	return		;funcret
 18299  013EE0                     __end_of_Byte_SetZone:
 18300                           	opt stack 0
 18301                           tosu	equ	0xFFF
 18302                           tosh	equ	0xFFE
 18303                           tosl	equ	0xFFD
 18304                           pclath	equ	0xFFA
 18305                           tblptru	equ	0xFF8
 18306                           tblptrh	equ	0xFF7
 18307                           tblptrl	equ	0xFF6
 18308                           tablat	equ	0xFF5
 18309                           prodh	equ	0xFF4
 18310                           prodl	equ	0xFF3
 18311                           intcon	equ	0xFF2
 18312                           indf0	equ	0xFEF
 18313                           postinc0	equ	0xFEE
 18314                           fsr0h	equ	0xFEA
 18315                           fsr0l	equ	0xFE9
 18316                           wreg	equ	0xFE8
 18317                           indf1	equ	0xFE7
 18318                           postdec1	equ	0xFE5
 18319                           plusw1	equ	0xFE3
 18320                           fsr1h	equ	0xFE2
 18321                           fsr1l	equ	0xFE1
 18322                           indf2	equ	0xFDF
 18323                           postinc2	equ	0xFDE
 18324                           postdec2	equ	0xFDD
 18325                           plusw2	equ	0xFDB
 18326                           fsr2h	equ	0xFDA
 18327                           fsr2l	equ	0xFD9
 18328                           status	equ	0xFD8
 18329                           
 18330 ;; *************** function _Console_Init *****************
 18331 ;; Defined at:
 18332 ;;		line 157 in file "Library/Console.c"
 18333 ;; Parameters:    Size  Location     Type
 18334 ;;		None
 18335 ;; Auto vars:     Size  Location     Type
 18336 ;;  y               1    3[BANK0 ] unsigned char 
 18337 ;;  x               1    2[BANK0 ] unsigned char 
 18338 ;; Return value:  Size  Location     Type
 18339 ;;                  1    wreg      void 
 18340 ;; Registers used:
 18341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18342 ;; Tracked objects:
 18343 ;;		On entry : 0/0
 18344 ;;		On exit  : 0/0
 18345 ;;		Unchanged: 0/0
 18346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18350 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18351 ;;Total ram usage:        4 bytes
 18352 ;; Hardware stack levels used:    1
 18353 ;; Hardware stack levels required when called:    7
 18354 ;; This function calls:
 18355 ;;		Nothing
 18356 ;; This function is called by:
 18357 ;;		_main
 18358 ;; This function uses a non-reentrant model
 18359 ;;
 18360                           
 18361                           	psect	text104
 18362  0145A2                     __ptext104:
 18363                           	opt stack 0
 18364  0145A2                     _Console_Init:
 18365                           	opt stack 23
 18366                           
 18367                           ;Console.c: 160: lBufferX = 0;
 18368                           
 18369                           ; BSR set to: 0
 18370                           ;incstack = 0
 18371  0145A2  0E00               	movlw	0
 18372  0145A4  0100               	movlb	0	; () banked
 18373  0145A6  6FF3               	movwf	_lBufferX& (0+255),b
 18374                           
 18375                           ;Console.c: 161: lBufferY = 0;
 18376  0145A8  0E00               	movlw	0
 18377  0145AA  6FF2               	movwf	_lBufferY& (0+255),b
 18378                           
 18379                           ;Console.c: 163: UINT8 x, y;
 18380                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 18381  0145AC  0E00               	movlw	0
 18382  0145AE  6F62               	movwf	Console_Init@x& (0+255),b
 18383  0145B0                     l15212:
 18384                           
 18385                           ; BSR set to: 0
 18386  0145B0  0E13               	movlw	19
 18387  0145B2  6562               	cpfsgt	Console_Init@x& (0+255),b
 18388  0145B4  D001               	goto	l976
 18389  0145B6  0012               	return	
 18390  0145B8                     l976:
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;Console.c: 165: {
 18394                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 18395                           
 18396                           ; BSR set to: 0
 18397  0145B8  0E00               	movlw	0
 18398  0145BA  6F63               	movwf	Console_Init@y& (0+255),b
 18399  0145BC                     l15218:
 18400                           
 18401                           ; BSR set to: 0
 18402  0145BC  0E0E               	movlw	14
 18403  0145BE  6563               	cpfsgt	Console_Init@y& (0+255),b
 18404  0145C0  D001               	goto	l978
 18405  0145C2  D022               	goto	u12610
 18406  0145C4                     l978:
 18407                           
 18408                           ; BSR set to: 0
 18409                           ;Console.c: 167: {
 18410                           ;Console.c: 168: lBuffer[y][x] = '\0';
 18411                           
 18412                           ; BSR set to: 0
 18413  0145C4  5163               	movf	Console_Init@y& (0+255),w,b
 18414  0145C6  0D14               	mullw	20
 18415  0145C8  0E18               	movlw	low _lBuffer
 18416  0145CA  6F60               	movwf	??_Console_Init& (0+255),b
 18417  0145CC  0E03               	movlw	high _lBuffer
 18418  0145CE  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 18419  0145D0  50F3               	movf	prodl,w,c
 18420  0145D2  2760               	addwf	??_Console_Init& (0+255),f,b
 18421  0145D4  50F4               	movf	prodh,w,c
 18422  0145D6  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 18423  0145D8  5162               	movf	Console_Init@x& (0+255),w,b
 18424  0145DA  0D01               	mullw	1
 18425  0145DC  50F3               	movf	prodl,w,c
 18426  0145DE  2560               	addwf	??_Console_Init& (0+255),w,b
 18427  0145E0  6ED9               	movwf	fsr2l,c
 18428  0145E2  50F4               	movf	prodh,w,c
 18429  0145E4  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 18430  0145E6  6EDA               	movwf	fsr2h,c
 18431  0145E8  0E00               	movlw	0
 18432  0145EA  6EDF               	movwf	indf2,c
 18433                           
 18434                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 18435  0145EC  5163               	movf	Console_Init@y& (0+255),w,b
 18436  0145EE  0D02               	mullw	2
 18437  0145F0  0E50               	movlw	low _lCBuffer
 18438  0145F2  24F3               	addwf	prodl,w,c
 18439  0145F4  6ED9               	movwf	fsr2l,c
 18440  0145F6  0E02               	movlw	high _lCBuffer
 18441  0145F8  20F4               	addwfc	prodh,w,c
 18442  0145FA  6EDA               	movwf	fsr2h,c
 18443  0145FC  0EFF               	movlw	255
 18444  0145FE  6EDE               	movwf	postinc2,c
 18445  014600  0EFF               	movlw	255
 18446  014602  6EDD               	movwf	postdec2,c
 18447                           
 18448                           ; BSR set to: 0
 18449  014604  2B63               	incf	Console_Init@y& (0+255),f,b
 18450  014606  D7DA               	goto	l15218
 18451  014608                     u12610:
 18452                           
 18453                           ; BSR set to: 0
 18454                           
 18455                           ; BSR set to: 0
 18456  014608  2B62               	incf	Console_Init@x& (0+255),f,b
 18457  01460A  D7D2               	goto	l15212
 18458  01460C                     __end_of_Console_Init:
 18459                           	opt stack 0
 18460                           tosu	equ	0xFFF
 18461                           tosh	equ	0xFFE
 18462                           tosl	equ	0xFFD
 18463                           pclath	equ	0xFFA
 18464                           tblptru	equ	0xFF8
 18465                           tblptrh	equ	0xFF7
 18466                           tblptrl	equ	0xFF6
 18467                           tablat	equ	0xFF5
 18468                           prodh	equ	0xFF4
 18469                           prodl	equ	0xFF3
 18470                           intcon	equ	0xFF2
 18471                           indf0	equ	0xFEF
 18472                           postinc0	equ	0xFEE
 18473                           fsr0h	equ	0xFEA
 18474                           fsr0l	equ	0xFE9
 18475                           wreg	equ	0xFE8
 18476                           indf1	equ	0xFE7
 18477                           postdec1	equ	0xFE5
 18478                           plusw1	equ	0xFE3
 18479                           fsr1h	equ	0xFE2
 18480                           fsr1l	equ	0xFE1
 18481                           indf2	equ	0xFDF
 18482                           postinc2	equ	0xFDE
 18483                           postdec2	equ	0xFDD
 18484                           plusw2	equ	0xFDB
 18485                           fsr2h	equ	0xFDA
 18486                           fsr2l	equ	0xFD9
 18487                           status	equ	0xFD8
 18488                           
 18489 ;; *************** function _ADCAverage *****************
 18490 ;; Defined at:
 18491 ;;		line 28 in file "dans.c"
 18492 ;; Parameters:    Size  Location     Type
 18493 ;;		None
 18494 ;; Auto vars:     Size  Location     Type
 18495 ;;		None
 18496 ;; Return value:  Size  Location     Type
 18497 ;;                  2  119[BANK0 ] int 
 18498 ;; Registers used:
 18499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18500 ;; Tracked objects:
 18501 ;;		On entry : 0/0
 18502 ;;		On exit  : 0/0
 18503 ;;		Unchanged: 0/0
 18504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18505 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18506 ;;      Locals:         0       0       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18508 ;;      Totals:         0       4       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18509 ;;Total ram usage:       28 bytes
 18510 ;; Hardware stack levels used:    1
 18511 ;; Hardware stack levels required when called:   11
 18512 ;; This function calls:
 18513 ;;		_FunctReadADC
 18514 ;;		_HMI_Render
 18515 ;;		_HMI_SetNumber
 18516 ;;		___awdiv
 18517 ;;		___fladd
 18518 ;;		___flmul
 18519 ;;		___flneg
 18520 ;;		___fltol
 18521 ;;		___xxtofl
 18522 ;;		_pow
 18523 ;; This function is called by:
 18524 ;;		_main
 18525 ;;		_Sensor_Observe
 18526 ;;		_Closest_Object
 18527 ;;		_Travel
 18528 ;;		_Find_Flag
 18529 ;; This function uses a non-reentrant model
 18530 ;;
 18531                           
 18532                           	psect	text105
 18533  010A34                     __ptext105:
 18534                           	opt stack 0
 18535  010A34                     _ADCAverage:
 18536                           	opt stack 19
 18537                           
 18538                           ;dans.c: 30: total = total - readings[readIndex];
 18539                           
 18540                           ; BSR set to: 0
 18541                           ;incstack = 0
 18542  010A34  90D8               	bcf	status,0,c
 18543  010A36  0100               	movlb	0	; () banked
 18544  010A38  35E4               	rlcf	_readIndex& (0+255),w,b
 18545  010A3A  6ED9               	movwf	fsr2l,c
 18546  010A3C  35E5               	rlcf	(_readIndex+1)& (0+255),w,b
 18547  010A3E  6EDA               	movwf	fsr2h,c
 18548  010A40  0E6E               	movlw	low _readings
 18549  010A42  26D9               	addwf	fsr2l,f,c
 18550  010A44  0E02               	movlw	high _readings
 18551  010A46  22DA               	addwfc	fsr2h,f,c
 18552  010A48  CFDE F0D9          	movff	postinc2,??_ADCAverage
 18553  010A4C  CFDD F0DA          	movff	postdec2,??_ADCAverage+1
 18554  010A50  1FD9               	comf	??_ADCAverage& (0+255),f,b
 18555  010A52  1FDA               	comf	(??_ADCAverage+1)& (0+255),f,b
 18556  010A54  4BD9               	infsnz	??_ADCAverage& (0+255),f,b
 18557  010A56  2BDA               	incf	(??_ADCAverage+1)& (0+255),f,b
 18558  010A58  5029               	movf	_total,w,c
 18559  010A5A  25D9               	addwf	??_ADCAverage& (0+255),w,b
 18560  010A5C  6E29               	movwf	_total,c
 18561  010A5E  502A               	movf	_total+1,w,c
 18562  010A60  21DA               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 18563  010A62  6E2A               	movwf	_total+1,c
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;dans.c: 32: readings[readIndex] = (FunctReadADC(0));
 18567  010A64  0E00               	movlw	0
 18568  010A66  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 18569  010A68  0E00               	movlw	0
 18570  010A6A  6F60               	movwf	FunctReadADC@channel& (0+255),b
 18571  010A6C  EC4C  F0A7         	call	_FunctReadADC	;wreg free
 18572  010A70  90D8               	bcf	status,0,c
 18573  010A72  0100               	movlb	0	; () banked
 18574  010A74  35E4               	rlcf	_readIndex& (0+255),w,b
 18575  010A76  6ED9               	movwf	fsr2l,c
 18576  010A78  35E5               	rlcf	(_readIndex+1)& (0+255),w,b
 18577  010A7A  6EDA               	movwf	fsr2h,c
 18578  010A7C  0E6E               	movlw	low _readings
 18579  010A7E  26D9               	addwf	fsr2l,f,c
 18580  010A80  0E02               	movlw	high _readings
 18581  010A82  22DA               	addwfc	fsr2h,f,c
 18582  010A84  C060  FFDE         	movff	?_FunctReadADC,postinc2
 18583  010A88  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 18584                           
 18585                           ; BSR set to: 0
 18586                           ;dans.c: 34: total = total + readings[readIndex];
 18587  010A8C  90D8               	bcf	status,0,c
 18588  010A8E  35E4               	rlcf	_readIndex& (0+255),w,b
 18589  010A90  6ED9               	movwf	fsr2l,c
 18590  010A92  35E5               	rlcf	(_readIndex+1)& (0+255),w,b
 18591  010A94  6EDA               	movwf	fsr2h,c
 18592  010A96  0E6E               	movlw	low _readings
 18593  010A98  26D9               	addwf	fsr2l,f,c
 18594  010A9A  0E02               	movlw	high _readings
 18595  010A9C  22DA               	addwfc	fsr2h,f,c
 18596  010A9E  CFDE F0D9          	movff	postinc2,??_ADCAverage
 18597  010AA2  CFDD F0DA          	movff	postdec2,??_ADCAverage+1
 18598  010AA6  5029               	movf	_total,w,c
 18599  010AA8  25D9               	addwf	??_ADCAverage& (0+255),w,b
 18600  010AAA  6E29               	movwf	_total,c
 18601  010AAC  502A               	movf	_total+1,w,c
 18602  010AAE  21DA               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 18603  010AB0  6E2A               	movwf	_total+1,c
 18604                           
 18605                           ; BSR set to: 0
 18606                           ;dans.c: 36: readIndex++;
 18607  010AB2  4BE4               	infsnz	_readIndex& (0+255),f,b
 18608  010AB4  2BE5               	incf	(_readIndex+1)& (0+255),f,b
 18609                           
 18610                           ; BSR set to: 0
 18611                           ;dans.c: 39: if (readIndex >= numReadings) {
 18612  010AB6  5047               	movf	_numReadings,w,c
 18613  010AB8  5DE4               	subwf	_readIndex& (0+255),w,b
 18614  010ABA  51E5               	movf	(_readIndex+1)& (0+255),w,b
 18615  010ABC  0A80               	xorlw	128
 18616  010ABE  6FD9               	movwf	??_ADCAverage& (0+255),b
 18617  010AC0  5048               	movf	_numReadings+1,w,c
 18618  010AC2  0A80               	xorlw	128
 18619  010AC4  59D9               	subwfb	??_ADCAverage& (0+255),w,b
 18620  010AC6  A0D8               	btfss	status,0,c
 18621  010AC8  D004               	goto	l2283
 18622                           
 18623                           ; BSR set to: 0
 18624                           ;dans.c: 41: readIndex = 0;
 18625  010ACA  0E00               	movlw	0
 18626  010ACC  6FE5               	movwf	(_readIndex+1)& (0+255),b
 18627  010ACE  0E00               	movlw	0
 18628  010AD0  6FE4               	movwf	_readIndex& (0+255),b
 18629  010AD2                     l2283:
 18630                           
 18631                           ; BSR set to: 0
 18632                           ;dans.c: 42: }
 18633                           ;dans.c: 45: average = total / numReadings;
 18634                           
 18635                           ; BSR set to: 0
 18636  010AD2  C029  F060         	movff	_total,___awdiv@dividend
 18637  010AD6  C02A  F061         	movff	_total+1,___awdiv@dividend+1
 18638  010ADA  C047  F062         	movff	_numReadings,___awdiv@divisor
 18639  010ADE  C048  F063         	movff	_numReadings+1,___awdiv@divisor+1
 18640  010AE2  EC3C  F0A0         	call	___awdiv	;wreg free
 18641  010AE6  C060  F0E2         	movff	?___awdiv,_average
 18642  010AEA  C061  F0E3         	movff	?___awdiv+1,_average+1
 18643                           
 18644                           ;dans.c: 46: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 18645  010AEE  C0E2  F060         	movff	_average,___xxtofl@val
 18646  010AF2  C0E3  F061         	movff	_average+1,___xxtofl@val+1
 18647  010AF6  0100               	movlb	0	; () banked
 18648  010AF8  0E00               	movlw	0
 18649  010AFA  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 18650  010AFC  0EFF               	movlw	-1
 18651  010AFE  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 18652  010B00  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 18653  010B02  0E01               	movlw	1
 18654  010B04  ECED  F093         	call	___xxtofl
 18655  010B08  C060  F300         	movff	?___xxtofl,_ADCAverage$15789
 18656  010B0C  C061  F301         	movff	?___xxtofl+1,_ADCAverage$15789+1
 18657  010B10  C062  F302         	movff	?___xxtofl+2,_ADCAverage$15789+2
 18658  010B14  C063  F303         	movff	?___xxtofl+3,_ADCAverage$15789+3
 18659                           
 18660                           ;dans.c: 46: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 18661  010B18  0E00               	movlw	0
 18662  010B1A  0100               	movlb	0	; () banked
 18663  010B1C  6FC6               	movwf	pow@y& (0+255),b
 18664  010B1E  0E00               	movlw	0
 18665  010B20  6FC7               	movwf	(pow@y+1)& (0+255),b
 18666  010B22  0E00               	movlw	0
 18667  010B24  6FC8               	movwf	(pow@y+2)& (0+255),b
 18668  010B26  0E40               	movlw	64
 18669  010B28  6FC9               	movwf	(pow@y+3)& (0+255),b
 18670  010B2A  C300  F0C2         	movff	_ADCAverage$15789,pow@x
 18671  010B2E  C301  F0C3         	movff	_ADCAverage$15789+1,pow@x+1
 18672  010B32  C302  F0C4         	movff	_ADCAverage$15789+2,pow@x+2
 18673  010B36  C303  F0C5         	movff	_ADCAverage$15789+3,pow@x+3
 18674  010B3A  ECBD  F08C         	call	_pow	;wreg free
 18675  010B3E  C0C2  F304         	movff	?_pow,_ADCAverage$15790
 18676  010B42  C0C3  F305         	movff	?_pow+1,_ADCAverage$15790+1
 18677  010B46  C0C4  F306         	movff	?_pow+2,_ADCAverage$15790+2
 18678  010B4A  C0C5  F307         	movff	?_pow+3,_ADCAverage$15790+3
 18679                           
 18680                           ;dans.c: 46: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 18681  010B4E  C0E2  F060         	movff	_average,___xxtofl@val
 18682  010B52  C0E3  F061         	movff	_average+1,___xxtofl@val+1
 18683  010B56  0100               	movlb	0	; () banked
 18684  010B58  0E00               	movlw	0
 18685  010B5A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 18686  010B5C  0EFF               	movlw	-1
 18687  010B5E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 18688  010B60  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 18689  010B62  0E01               	movlw	1
 18690  010B64  ECED  F093         	call	___xxtofl
 18691  010B68  C060  F308         	movff	?___xxtofl,_ADCAverage$15791
 18692  010B6C  C061  F309         	movff	?___xxtofl+1,_ADCAverage$15791+1
 18693  010B70  C062  F30A         	movff	?___xxtofl+2,_ADCAverage$15791+2
 18694  010B74  C063  F30B         	movff	?___xxtofl+3,_ADCAverage$15791+3
 18695                           
 18696                           ;dans.c: 46: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 18697  010B78  0E00               	movlw	0
 18698  010B7A  0100               	movlb	0	; () banked
 18699  010B7C  6FC6               	movwf	pow@y& (0+255),b
 18700  010B7E  0E00               	movlw	0
 18701  010B80  6FC7               	movwf	(pow@y+1)& (0+255),b
 18702  010B82  0E40               	movlw	64
 18703  010B84  6FC8               	movwf	(pow@y+2)& (0+255),b
 18704  010B86  0E40               	movlw	64
 18705  010B88  6FC9               	movwf	(pow@y+3)& (0+255),b
 18706  010B8A  C308  F0C2         	movff	_ADCAverage$15791,pow@x
 18707  010B8E  C309  F0C3         	movff	_ADCAverage$15791+1,pow@x+1
 18708  010B92  C30A  F0C4         	movff	_ADCAverage$15791+2,pow@x+2
 18709  010B96  C30B  F0C5         	movff	_ADCAverage$15791+3,pow@x+3
 18710  010B9A  ECBD  F08C         	call	_pow	;wreg free
 18711  010B9E  C0C2  F30C         	movff	?_pow,_ADCAverage$15792
 18712  010BA2  C0C3  F30D         	movff	?_pow+1,_ADCAverage$15792+1
 18713  010BA6  C0C4  F30E         	movff	?_pow+2,_ADCAverage$15792+2
 18714  010BAA  C0C5  F30F         	movff	?_pow+3,_ADCAverage$15792+3
 18715                           
 18716                           ;dans.c: 46: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 18717  010BAE  0EA6               	movlw	166
 18718  010BB0  0100               	movlb	0	; () banked
 18719  010BB2  6F72               	movwf	___flmul@a& (0+255),b
 18720  010BB4  0E9B               	movlw	155
 18721  010BB6  6F73               	movwf	(___flmul@a+1)& (0+255),b
 18722  010BB8  0EC4               	movlw	196
 18723  010BBA  6F74               	movwf	(___flmul@a+2)& (0+255),b
 18724  010BBC  0E3A               	movlw	58
 18725  010BBE  6F75               	movwf	(___flmul@a+3)& (0+255),b
 18726  010BC0  C304  F06E         	movff	_ADCAverage$15790,___flmul@b
 18727  010BC4  C305  F06F         	movff	_ADCAverage$15790+1,___flmul@b+1
 18728  010BC8  C306  F070         	movff	_ADCAverage$15790+2,___flmul@b+2
 18729  010BCC  C307  F071         	movff	_ADCAverage$15790+3,___flmul@b+3
 18730  010BD0  ECD2  F081         	call	___flmul	;wreg free
 18731  010BD4  C06E  F08F         	movff	?___flmul,___fladd@a
 18732  010BD8  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 18733  010BDC  C070  F091         	movff	?___flmul+2,___fladd@a+2
 18734  010BE0  C071  F092         	movff	?___flmul+3,___fladd@a+3
 18735  010BE4  0E87               	movlw	135
 18736  010BE6  0100               	movlb	0	; () banked
 18737  010BE8  6F72               	movwf	___flmul@a& (0+255),b
 18738  010BEA  0E97               	movlw	151
 18739  010BEC  6F73               	movwf	(___flmul@a+1)& (0+255),b
 18740  010BEE  0E71               	movlw	113
 18741  010BF0  6F74               	movwf	(___flmul@a+2)& (0+255),b
 18742  010BF2  0EB5               	movlw	181
 18743  010BF4  6F75               	movwf	(___flmul@a+3)& (0+255),b
 18744  010BF6  C30C  F06E         	movff	_ADCAverage$15792,___flmul@b
 18745  010BFA  C30D  F06F         	movff	_ADCAverage$15792+1,___flmul@b+1
 18746  010BFE  C30E  F070         	movff	_ADCAverage$15792+2,___flmul@b+2
 18747  010C02  C30F  F071         	movff	_ADCAverage$15792+3,___flmul@b+3
 18748  010C06  ECD2  F081         	call	___flmul	;wreg free
 18749  010C0A  C06E  F08B         	movff	?___flmul,___fladd@b
 18750  010C0E  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 18751  010C12  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 18752  010C16  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 18753  010C1A  EC7B  F083         	call	___fladd	;wreg free
 18754  010C1E  C08B  F310         	movff	?___fladd,_ADCAverage$15793
 18755  010C22  C08C  F311         	movff	?___fladd+1,_ADCAverage$15793+1
 18756  010C26  C08D  F312         	movff	?___fladd+2,_ADCAverage$15793+2
 18757  010C2A  C08E  F313         	movff	?___fladd+3,_ADCAverage$15793+3
 18758                           
 18759                           ;dans.c: 46: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 18760  010C2E  0E8C               	movlw	140
 18761  010C30  0100               	movlb	0	; () banked
 18762  010C32  6F72               	movwf	___flmul@a& (0+255),b
 18763  010C34  0EB9               	movlw	185
 18764  010C36  6F73               	movwf	(___flmul@a+1)& (0+255),b
 18765  010C38  0E6B               	movlw	107
 18766  010C3A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 18767  010C3C  0E3F               	movlw	63
 18768  010C3E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 18769  010C40  C0E2  F060         	movff	_average,___xxtofl@val
 18770  010C44  C0E3  F061         	movff	_average+1,___xxtofl@val+1
 18771  010C48  0E00               	movlw	0
 18772  010C4A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 18773  010C4C  0EFF               	movlw	-1
 18774  010C4E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 18775  010C50  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 18776  010C52  0E01               	movlw	1
 18777  010C54  ECED  F093         	call	___xxtofl
 18778  010C58  C060  F06E         	movff	?___xxtofl,___flmul@b
 18779  010C5C  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 18780  010C60  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 18781  010C64  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 18782  010C68  ECD2  F081         	call	___flmul	;wreg free
 18783  010C6C  C06E  F087         	movff	?___flmul,___flneg@f1
 18784  010C70  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 18785  010C74  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 18786  010C78  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 18787  010C7C  EC90  F0A8         	call	___flneg	;wreg free
 18788  010C80  C087  F08F         	movff	?___flneg,___fladd@a
 18789  010C84  C088  F090         	movff	?___flneg+1,___fladd@a+1
 18790  010C88  C089  F091         	movff	?___flneg+2,___fladd@a+2
 18791  010C8C  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 18792  010C90  C310  F08B         	movff	_ADCAverage$15793,___fladd@b
 18793  010C94  C311  F08C         	movff	_ADCAverage$15793+1,___fladd@b+1
 18794  010C98  C312  F08D         	movff	_ADCAverage$15793+2,___fladd@b+2
 18795  010C9C  C313  F08E         	movff	_ADCAverage$15793+3,___fladd@b+3
 18796  010CA0  EC7B  F083         	call	___fladd	;wreg free
 18797  010CA4  C08B  F314         	movff	?___fladd,_ADCAverage$15794
 18798  010CA8  C08C  F315         	movff	?___fladd+1,_ADCAverage$15794+1
 18799  010CAC  C08D  F316         	movff	?___fladd+2,_ADCAverage$15794+2
 18800  010CB0  C08E  F317         	movff	?___fladd+3,_ADCAverage$15794+3
 18801                           
 18802                           ;dans.c: 46: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average+
      +                          227.33;
 18803  010CB4  0E7B               	movlw	123
 18804  010CB6  0100               	movlb	0	; () banked
 18805  010CB8  6F8F               	movwf	___fladd@a& (0+255),b
 18806  010CBA  0E54               	movlw	84
 18807  010CBC  6F90               	movwf	(___fladd@a+1)& (0+255),b
 18808  010CBE  0E63               	movlw	99
 18809  010CC0  6F91               	movwf	(___fladd@a+2)& (0+255),b
 18810  010CC2  0E43               	movlw	67
 18811  010CC4  6F92               	movwf	(___fladd@a+3)& (0+255),b
 18812  010CC6  C314  F08B         	movff	_ADCAverage$15794,___fladd@b
 18813  010CCA  C315  F08C         	movff	_ADCAverage$15794+1,___fladd@b+1
 18814  010CCE  C316  F08D         	movff	_ADCAverage$15794+2,___fladd@b+2
 18815  010CD2  C317  F08E         	movff	_ADCAverage$15794+3,___fladd@b+3
 18816  010CD6  EC7B  F083         	call	___fladd	;wreg free
 18817  010CDA  C08B  F09F         	movff	?___fladd,___fltol@f1
 18818  010CDE  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 18819  010CE2  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 18820  010CE6  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 18821  010CEA  ECD0  F09A         	call	___fltol	;wreg free
 18822  010CEE  C09F  F0E2         	movff	?___fltol,_average
 18823  010CF2  C0A0  F0E3         	movff	?___fltol+1,_average+1
 18824                           
 18825                           ;dans.c: 49: HMI_SetNumber(average);
 18826  010CF6  C0E2  F076         	movff	_average,HMI_SetNumber@pInput
 18827  010CFA  C0E3  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 18828  010CFE  EC3C  F0A9         	call	_HMI_SetNumber	;wreg free
 18829                           
 18830                           ;dans.c: 50: HMI_Render();
 18831  010D02  ECDD  F0A7         	call	_HMI_Render	;wreg free
 18832                           
 18833                           ;dans.c: 51: return average;
 18834  010D06  C0E2  F0D7         	movff	_average,?_ADCAverage
 18835  010D0A  C0E3  F0D8         	movff	_average+1,?_ADCAverage+1
 18836  010D0E  0012               	return	
 18837  010D10                     __end_of_ADCAverage:
 18838                           	opt stack 0
 18839                           tosu	equ	0xFFF
 18840                           tosh	equ	0xFFE
 18841                           tosl	equ	0xFFD
 18842                           pclath	equ	0xFFA
 18843                           tblptru	equ	0xFF8
 18844                           tblptrh	equ	0xFF7
 18845                           tblptrl	equ	0xFF6
 18846                           tablat	equ	0xFF5
 18847                           prodh	equ	0xFF4
 18848                           prodl	equ	0xFF3
 18849                           intcon	equ	0xFF2
 18850                           indf0	equ	0xFEF
 18851                           postinc0	equ	0xFEE
 18852                           fsr0h	equ	0xFEA
 18853                           fsr0l	equ	0xFE9
 18854                           wreg	equ	0xFE8
 18855                           indf1	equ	0xFE7
 18856                           postdec1	equ	0xFE5
 18857                           plusw1	equ	0xFE3
 18858                           fsr1h	equ	0xFE2
 18859                           fsr1l	equ	0xFE1
 18860                           indf2	equ	0xFDF
 18861                           postinc2	equ	0xFDE
 18862                           postdec2	equ	0xFDD
 18863                           plusw2	equ	0xFDB
 18864                           fsr2h	equ	0xFDA
 18865                           fsr2l	equ	0xFD9
 18866                           status	equ	0xFD8
 18867                           
 18868 ;; *************** function _pow *****************
 18869 ;; Defined at:
 18870 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
 18871 ;; Parameters:    Size  Location     Type
 18872 ;;  x               4   98[BANK0 ] int 
 18873 ;;  y               4  102[BANK0 ] int 
 18874 ;; Auto vars:     Size  Location     Type
 18875 ;;  yi              4  115[BANK0 ] unsigned long 
 18876 ;;  sign            1  114[BANK0 ] unsigned char 
 18877 ;; Return value:  Size  Location     Type
 18878 ;;                  4   98[BANK0 ] unsigned char 
 18879 ;; Registers used:
 18880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18881 ;; Tracked objects:
 18882 ;;		On entry : 0/0
 18883 ;;		On exit  : 0/0
 18884 ;;		Unchanged: 0/0
 18885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18886 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18887 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18889 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18890 ;;Total ram usage:       21 bytes
 18891 ;; Hardware stack levels used:    1
 18892 ;; Hardware stack levels required when called:   10
 18893 ;; This function calls:
 18894 ;;		___flge
 18895 ;;		___flmul
 18896 ;;		___flneg
 18897 ;;		___fltol
 18898 ;;		___xxtofl
 18899 ;;		_exp
 18900 ;;		_log
 18901 ;; This function is called by:
 18902 ;;		_ADCAverage
 18903 ;; This function uses a non-reentrant model
 18904 ;;
 18905                           
 18906                           	psect	text106
 18907  01197A                     __ptext106:
 18908                           	opt stack 0
 18909  01197A                     _pow:
 18910                           	opt stack 19
 18911                           
 18912                           ;incstack = 0
 18913  01197A  0E00               	movlw	0
 18914  01197C  0100               	movlb	0	; () banked
 18915  01197E  6FD2               	movwf	pow@sign& (0+255),b
 18916                           
 18917                           ; BSR set to: 0
 18918  011980  51C2               	movf	pow@x& (0+255),w,b
 18919  011982  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 18920  011984  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 18921  011986  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 18922  011988  A4D8               	btfss	status,2,c
 18923  01198A  D024               	goto	l2859
 18924                           
 18925                           ; BSR set to: 0
 18926  01198C  0E00               	movlw	0
 18927  01198E  6F60               	movwf	___flge@ff1& (0+255),b
 18928  011990  0E00               	movlw	0
 18929  011992  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 18930  011994  0E00               	movlw	0
 18931  011996  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 18932  011998  0E00               	movlw	0
 18933  01199A  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 18934  01199C  C0C6  F064         	movff	pow@y,___flge@ff2
 18935  0119A0  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 18936  0119A4  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 18937  0119A8  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 18938  0119AC  ECBB  F097         	call	___flge	;wreg free
 18939  0119B0  0100               	movlb	0	; () banked
 18940  0119B2  A0D8               	btfss	status,0,c
 18941  0119B4  D005               	goto	l2860
 18942                           
 18943                           ; BSR set to: 0
 18944  0119B6  0E00               	movlw	0
 18945  0119B8  0101               	movlb	1	; () banked
 18946  0119BA  6F1B               	movwf	(_errno+1)& (0+255),b
 18947  0119BC  0E21               	movlw	33
 18948  0119BE  6F1A               	movwf	_errno& (0+255),b
 18949  0119C0                     l2860:
 18950  0119C0  0E00               	movlw	0
 18951  0119C2  0100               	movlb	0	; () banked
 18952  0119C4  6FC2               	movwf	?_pow& (0+255),b
 18953  0119C6  0E00               	movlw	0
 18954  0119C8  6FC3               	movwf	(?_pow+1)& (0+255),b
 18955  0119CA  0E00               	movlw	0
 18956  0119CC  6FC4               	movwf	(?_pow+2)& (0+255),b
 18957  0119CE  0E00               	movlw	0
 18958  0119D0  6FC5               	movwf	(?_pow+3)& (0+255),b
 18959                           
 18960                           ; BSR set to: 0
 18961  0119D2  0012               	return	
 18962  0119D4                     l2859:
 18963                           
 18964                           ; BSR set to: 0
 18965                           
 18966                           ; BSR set to: 0
 18967  0119D4  51C6               	movf	pow@y& (0+255),w,b
 18968  0119D6  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 18969  0119D8  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 18970  0119DA  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 18971  0119DC  A4D8               	btfss	status,2,c
 18972  0119DE  D009               	goto	l2862
 18973                           
 18974                           ; BSR set to: 0
 18975  0119E0  0E00               	movlw	0
 18976  0119E2  6FC2               	movwf	?_pow& (0+255),b
 18977  0119E4  0E00               	movlw	0
 18978  0119E6  6FC3               	movwf	(?_pow+1)& (0+255),b
 18979  0119E8  0E80               	movlw	128
 18980  0119EA  6FC4               	movwf	(?_pow+2)& (0+255),b
 18981  0119EC  0E3F               	movlw	63
 18982  0119EE  6FC5               	movwf	(?_pow+3)& (0+255),b
 18983                           
 18984                           ; BSR set to: 0
 18985  0119F0  0012               	return	
 18986  0119F2                     l2862:
 18987                           
 18988                           ; BSR set to: 0
 18989                           
 18990                           ; BSR set to: 0
 18991  0119F2  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 18992  0119F4  D04F               	goto	l2863
 18993                           
 18994                           ; BSR set to: 0
 18995  0119F6  C0C6  F09F         	movff	pow@y,___fltol@f1
 18996  0119FA  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 18997  0119FE  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 18998  011A02  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 18999  011A06  ECD0  F09A         	call	___fltol	;wreg free
 19000  011A0A  C09F  F0D3         	movff	?___fltol,pow@yi
 19001  011A0E  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 19002  011A12  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 19003  011A16  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 19004  011A1A  C0D3  F060         	movff	pow@yi,___xxtofl@val
 19005  011A1E  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 19006  011A22  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 19007  011A26  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 19008  011A2A  0E00               	movlw	0
 19009  011A2C  ECED  F093         	call	___xxtofl
 19010  011A30  0100               	movlb	0	; () banked
 19011  011A32  51C6               	movf	pow@y& (0+255),w,b
 19012  011A34  1960               	xorwf	?___xxtofl& (0+255),w,b
 19013  011A36  E10A               	bnz	u12330
 19014  011A38  51C7               	movf	(pow@y+1)& (0+255),w,b
 19015  011A3A  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 19016  011A3C  E107               	bnz	u12330
 19017  011A3E  51C8               	movf	(pow@y+2)& (0+255),w,b
 19018  011A40  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 19019  011A42  E104               	bnz	u12330
 19020  011A44  51C9               	movf	(pow@y+3)& (0+255),w,b
 19021  011A46  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 19022  011A48  B4D8               	btfsc	status,2,c
 19023  011A4A  D00F               	goto	l2864
 19024  011A4C                     u12330:
 19025                           
 19026                           ; BSR set to: 0
 19027  011A4C  0E00               	movlw	0
 19028  011A4E  0101               	movlb	1	; () banked
 19029  011A50  6F1B               	movwf	(_errno+1)& (0+255),b
 19030  011A52  0E21               	movlw	33
 19031  011A54  6F1A               	movwf	_errno& (0+255),b
 19032  011A56  0E00               	movlw	0
 19033  011A58  0100               	movlb	0	; () banked
 19034  011A5A  6FC2               	movwf	?_pow& (0+255),b
 19035  011A5C  0E00               	movlw	0
 19036  011A5E  6FC3               	movwf	(?_pow+1)& (0+255),b
 19037  011A60  0E00               	movlw	0
 19038  011A62  6FC4               	movwf	(?_pow+2)& (0+255),b
 19039  011A64  0E00               	movlw	0
 19040  011A66  6FC5               	movwf	(?_pow+3)& (0+255),b
 19041                           
 19042                           ; BSR set to: 0
 19043  011A68  0012               	return	
 19044  011A6A                     l2864:
 19045                           
 19046                           ; BSR set to: 0
 19047                           
 19048                           ; BSR set to: 0
 19049  011A6A  51D3               	movf	pow@yi& (0+255),w,b
 19050  011A6C  0B01               	andlw	1
 19051  011A6E  6FD2               	movwf	pow@sign& (0+255),b
 19052                           
 19053                           ; BSR set to: 0
 19054  011A70  C0C2  F087         	movff	pow@x,___flneg@f1
 19055  011A74  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 19056  011A78  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 19057  011A7C  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 19058  011A80  EC90  F0A8         	call	___flneg	;wreg free
 19059  011A84  C087  F0C2         	movff	?___flneg,pow@x
 19060  011A88  C088  F0C3         	movff	?___flneg+1,pow@x+1
 19061  011A8C  C089  F0C4         	movff	?___flneg+2,pow@x+2
 19062  011A90  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 19063  011A94                     l2863:
 19064  011A94  C0C2  F0AF         	movff	pow@x,log@x
 19065  011A98  C0C3  F0B0         	movff	pow@x+1,log@x+1
 19066  011A9C  C0C4  F0B1         	movff	pow@x+2,log@x+2
 19067  011AA0  C0C5  F0B2         	movff	pow@x+3,log@x+3
 19068  011AA4  EC7F  F092         	call	_log	;wreg free
 19069  011AA8  C0AF  F0CA         	movff	?_log,_pow$15795
 19070  011AAC  C0B0  F0CB         	movff	?_log+1,_pow$15795+1
 19071  011AB0  C0B1  F0CC         	movff	?_log+2,_pow$15795+2
 19072  011AB4  C0B2  F0CD         	movff	?_log+3,_pow$15795+3
 19073  011AB8  C0CA  F06E         	movff	_pow$15795,___flmul@b
 19074  011ABC  C0CB  F06F         	movff	_pow$15795+1,___flmul@b+1
 19075  011AC0  C0CC  F070         	movff	_pow$15795+2,___flmul@b+2
 19076  011AC4  C0CD  F071         	movff	_pow$15795+3,___flmul@b+3
 19077  011AC8  C0C6  F072         	movff	pow@y,___flmul@a
 19078  011ACC  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 19079  011AD0  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 19080  011AD4  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 19081  011AD8  ECD2  F081         	call	___flmul	;wreg free
 19082  011ADC  C06E  F0CE         	movff	?___flmul,_pow$15796
 19083  011AE0  C06F  F0CF         	movff	?___flmul+1,_pow$15796+1
 19084  011AE4  C070  F0D0         	movff	?___flmul+2,_pow$15796+2
 19085  011AE8  C071  F0D1         	movff	?___flmul+3,_pow$15796+3
 19086  011AEC  C0CE  F0B7         	movff	_pow$15796,exp@x
 19087  011AF0  C0CF  F0B8         	movff	_pow$15796+1,exp@x+1
 19088  011AF4  C0D0  F0B9         	movff	_pow$15796+2,exp@x+2
 19089  011AF8  C0D1  F0BA         	movff	_pow$15796+3,exp@x+3
 19090  011AFC  EC7A  F08A         	call	_exp	;wreg free
 19091  011B00  C0B7  F0C2         	movff	?_exp,pow@x
 19092  011B04  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 19093  011B08  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 19094  011B0C  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 19095  011B10  0100               	movlb	0	; () banked
 19096  011B12  51D2               	movf	pow@sign& (0+255),w,b
 19097  011B14  B4D8               	btfsc	status,2,c
 19098  011B16  D013               	goto	l2865
 19099                           
 19100                           ; BSR set to: 0
 19101  011B18  C0C2  F087         	movff	pow@x,___flneg@f1
 19102  011B1C  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 19103  011B20  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 19104  011B24  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 19105  011B28  EC90  F0A8         	call	___flneg	;wreg free
 19106  011B2C  C087  F0C2         	movff	?___flneg,?_pow
 19107  011B30  C088  F0C3         	movff	?___flneg+1,?_pow+1
 19108  011B34  C089  F0C4         	movff	?___flneg+2,?_pow+2
 19109  011B38  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 19110  011B3C  0012               	return	
 19111  011B3E                     l2865:
 19112                           
 19113                           ; BSR set to: 0
 19114  011B3E  C0C2  F0C2         	movff	pow@x,?_pow
 19115  011B42  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 19116  011B46  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 19117  011B4A  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 19118  011B4E  0012               	return		;funcret
 19119  011B50                     __end_of_pow:
 19120                           	opt stack 0
 19121                           tosu	equ	0xFFF
 19122                           tosh	equ	0xFFE
 19123                           tosl	equ	0xFFD
 19124                           pclath	equ	0xFFA
 19125                           tblptru	equ	0xFF8
 19126                           tblptrh	equ	0xFF7
 19127                           tblptrl	equ	0xFF6
 19128                           tablat	equ	0xFF5
 19129                           prodh	equ	0xFF4
 19130                           prodl	equ	0xFF3
 19131                           intcon	equ	0xFF2
 19132                           indf0	equ	0xFEF
 19133                           postinc0	equ	0xFEE
 19134                           fsr0h	equ	0xFEA
 19135                           fsr0l	equ	0xFE9
 19136                           wreg	equ	0xFE8
 19137                           indf1	equ	0xFE7
 19138                           postdec1	equ	0xFE5
 19139                           plusw1	equ	0xFE3
 19140                           fsr1h	equ	0xFE2
 19141                           fsr1l	equ	0xFE1
 19142                           indf2	equ	0xFDF
 19143                           postinc2	equ	0xFDE
 19144                           postdec2	equ	0xFDD
 19145                           plusw2	equ	0xFDB
 19146                           fsr2h	equ	0xFDA
 19147                           fsr2l	equ	0xFD9
 19148                           status	equ	0xFD8
 19149                           
 19150 ;; *************** function _log *****************
 19151 ;; Defined at:
 19152 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
 19153 ;; Parameters:    Size  Location     Type
 19154 ;;  x               4   79[BANK0 ] unsigned char 
 19155 ;; Auto vars:     Size  Location     Type
 19156 ;;  exponent        2   83[BANK0 ] int 
 19157 ;; Return value:  Size  Location     Type
 19158 ;;                  4   79[BANK0 ] int 
 19159 ;; Registers used:
 19160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19161 ;; Tracked objects:
 19162 ;;		On entry : 0/0
 19163 ;;		On exit  : 0/0
 19164 ;;		Unchanged: 0/0
 19165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19166 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19169 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19170 ;;Total ram usage:        6 bytes
 19171 ;; Hardware stack levels used:    1
 19172 ;; Hardware stack levels required when called:    9
 19173 ;; This function calls:
 19174 ;;		___fladd
 19175 ;;		___flmul
 19176 ;;		___xxtofl
 19177 ;;		_eval_poly
 19178 ;;		_frexp
 19179 ;; This function is called by:
 19180 ;;		_pow
 19181 ;; This function uses a non-reentrant model
 19182 ;;
 19183                           
 19184                           	psect	text107
 19185  0124FE                     __ptext107:
 19186                           	opt stack 0
 19187  0124FE                     _log:
 19188                           	opt stack 19
 19189                           
 19190                           ;incstack = 0
 19191  0124FE  0100               	movlb	0	; () banked
 19192  012500  AFB2               	btfss	(log@x+3)& (0+255),7,b
 19193  012502  D00F               	goto	l3061
 19194                           
 19195                           ; BSR set to: 0
 19196  012504  0E00               	movlw	0
 19197  012506  0101               	movlb	1	; () banked
 19198  012508  6F1B               	movwf	(_errno+1)& (0+255),b
 19199  01250A  0E21               	movlw	33
 19200  01250C  6F1A               	movwf	_errno& (0+255),b
 19201  01250E  0E00               	movlw	0
 19202  012510  0100               	movlb	0	; () banked
 19203  012512  6FAF               	movwf	?_log& (0+255),b
 19204  012514  0E00               	movlw	0
 19205  012516  6FB0               	movwf	(?_log+1)& (0+255),b
 19206  012518  0E00               	movlw	0
 19207  01251A  6FB1               	movwf	(?_log+2)& (0+255),b
 19208  01251C  0E00               	movlw	0
 19209  01251E  6FB2               	movwf	(?_log+3)& (0+255),b
 19210                           
 19211                           ; BSR set to: 0
 19212  012520  0012               	return	
 19213  012522                     l3061:
 19214                           
 19215                           ; BSR set to: 0
 19216                           
 19217                           ; BSR set to: 0
 19218  012522  51AF               	movf	log@x& (0+255),w,b
 19219  012524  11B0               	iorwf	(log@x+1)& (0+255),w,b
 19220  012526  11B1               	iorwf	(log@x+2)& (0+255),w,b
 19221  012528  11B2               	iorwf	(log@x+3)& (0+255),w,b
 19222  01252A  A4D8               	btfss	status,2,c
 19223  01252C  D00F               	goto	l3063
 19224                           
 19225                           ; BSR set to: 0
 19226  01252E  0E00               	movlw	0
 19227  012530  0101               	movlb	1	; () banked
 19228  012532  6F1B               	movwf	(_errno+1)& (0+255),b
 19229  012534  0E22               	movlw	34
 19230  012536  6F1A               	movwf	_errno& (0+255),b
 19231  012538  0E00               	movlw	0
 19232  01253A  0100               	movlb	0	; () banked
 19233  01253C  6FAF               	movwf	?_log& (0+255),b
 19234  01253E  0E00               	movlw	0
 19235  012540  6FB0               	movwf	(?_log+1)& (0+255),b
 19236  012542  0E00               	movlw	0
 19237  012544  6FB1               	movwf	(?_log+2)& (0+255),b
 19238  012546  0E00               	movlw	0
 19239  012548  6FB2               	movwf	(?_log+3)& (0+255),b
 19240                           
 19241                           ; BSR set to: 0
 19242  01254A  0012               	return	
 19243  01254C                     l3063:
 19244                           
 19245                           ; BSR set to: 0
 19246                           
 19247                           ; BSR set to: 0
 19248  01254C  0E00               	movlw	0
 19249  01254E  6F72               	movwf	___flmul@a& (0+255),b
 19250  012550  0E00               	movlw	0
 19251  012552  6F73               	movwf	(___flmul@a+1)& (0+255),b
 19252  012554  0E00               	movlw	0
 19253  012556  6F74               	movwf	(___flmul@a+2)& (0+255),b
 19254  012558  0E40               	movlw	64
 19255  01255A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 19256  01255C  0EB3               	movlw	low log@exponent
 19257  01255E  6F64               	movwf	frexp@eptr& (0+255),b
 19258  012560  0E00               	movlw	high log@exponent
 19259  012562  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 19260  012564  C0AF  F060         	movff	log@x,frexp@value
 19261  012568  C0B0  F061         	movff	log@x+1,frexp@value+1
 19262  01256C  C0B1  F062         	movff	log@x+2,frexp@value+2
 19263  012570  C0B2  F063         	movff	log@x+3,frexp@value+3
 19264  012574  ECAC  F09D         	call	_frexp	;wreg free
 19265  012578  C060  F06E         	movff	?_frexp,___flmul@b
 19266  01257C  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 19267  012580  C062  F070         	movff	?_frexp+2,___flmul@b+2
 19268  012584  C063  F071         	movff	?_frexp+3,___flmul@b+3
 19269  012588  ECD2  F081         	call	___flmul	;wreg free
 19270  01258C  C06E  F08B         	movff	?___flmul,___fladd@b
 19271  012590  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 19272  012594  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 19273  012598  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 19274  01259C  0E00               	movlw	0
 19275  01259E  0100               	movlb	0	; () banked
 19276  0125A0  6F8F               	movwf	___fladd@a& (0+255),b
 19277  0125A2  0E00               	movlw	0
 19278  0125A4  6F90               	movwf	(___fladd@a+1)& (0+255),b
 19279  0125A6  0E80               	movlw	128
 19280  0125A8  6F91               	movwf	(___fladd@a+2)& (0+255),b
 19281  0125AA  0EBF               	movlw	191
 19282  0125AC  6F92               	movwf	(___fladd@a+3)& (0+255),b
 19283  0125AE  EC7B  F083         	call	___fladd	;wreg free
 19284  0125B2  C08B  F0AF         	movff	?___fladd,log@x
 19285  0125B6  C08C  F0B0         	movff	?___fladd+1,log@x+1
 19286  0125BA  C08D  F0B1         	movff	?___fladd+2,log@x+2
 19287  0125BE  C08E  F0B2         	movff	?___fladd+3,log@x+3
 19288  0125C2  0100               	movlb	0	; () banked
 19289  0125C4  07B3               	decf	log@exponent& (0+255),f,b
 19290  0125C6  A0D8               	btfss	status,0,c
 19291  0125C8  07B4               	decf	(log@exponent+1)& (0+255),f,b
 19292                           
 19293                           ; BSR set to: 0
 19294  0125CA  C0AF  F09F         	movff	log@x,eval_poly@x
 19295  0125CE  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 19296  0125D2  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 19297  0125D6  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 19298  0125DA  0EAB               	movlw	low log@coeff
 19299  0125DC  6FA3               	movwf	eval_poly@d& (0+255),b
 19300  0125DE  0EFE               	movlw	high log@coeff
 19301  0125E0  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 19302  0125E2  0E00               	movlw	0
 19303  0125E4  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 19304  0125E6  0E08               	movlw	8
 19305  0125E8  6FA5               	movwf	eval_poly@n& (0+255),b
 19306  0125EA  EC5E  F099         	call	_eval_poly	;wreg free
 19307  0125EE  C09F  F0AF         	movff	?_eval_poly,log@x
 19308  0125F2  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 19309  0125F6  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 19310  0125FA  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 19311  0125FE  0E18               	movlw	24
 19312  012600  0100               	movlb	0	; () banked
 19313  012602  6F72               	movwf	___flmul@a& (0+255),b
 19314  012604  0E72               	movlw	114
 19315  012606  6F73               	movwf	(___flmul@a+1)& (0+255),b
 19316  012608  0E31               	movlw	49
 19317  01260A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 19318  01260C  0E3F               	movlw	63
 19319  01260E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 19320  012610  C0B3  F060         	movff	log@exponent,___xxtofl@val
 19321  012614  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 19322  012618  0E00               	movlw	0
 19323  01261A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 19324  01261C  0EFF               	movlw	-1
 19325  01261E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 19326  012620  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 19327  012622  0E01               	movlw	1
 19328  012624  ECED  F093         	call	___xxtofl
 19329  012628  C060  F06E         	movff	?___xxtofl,___flmul@b
 19330  01262C  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 19331  012630  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 19332  012634  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 19333  012638  ECD2  F081         	call	___flmul	;wreg free
 19334  01263C  C06E  F08B         	movff	?___flmul,___fladd@b
 19335  012640  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 19336  012644  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 19337  012648  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 19338  01264C  C0AF  F08F         	movff	log@x,___fladd@a
 19339  012650  C0B0  F090         	movff	log@x+1,___fladd@a+1
 19340  012654  C0B1  F091         	movff	log@x+2,___fladd@a+2
 19341  012658  C0B2  F092         	movff	log@x+3,___fladd@a+3
 19342  01265C  EC7B  F083         	call	___fladd	;wreg free
 19343  012660  C08B  F0AF         	movff	?___fladd,?_log
 19344  012664  C08C  F0B0         	movff	?___fladd+1,?_log+1
 19345  012668  C08D  F0B1         	movff	?___fladd+2,?_log+2
 19346  01266C  C08E  F0B2         	movff	?___fladd+3,?_log+3
 19347  012670  0012               	return	
 19348  012672                     __end_of_log:
 19349                           	opt stack 0
 19350                           tosu	equ	0xFFF
 19351                           tosh	equ	0xFFE
 19352                           tosl	equ	0xFFD
 19353                           pclath	equ	0xFFA
 19354                           tblptru	equ	0xFF8
 19355                           tblptrh	equ	0xFF7
 19356                           tblptrl	equ	0xFF6
 19357                           tablat	equ	0xFF5
 19358                           prodh	equ	0xFF4
 19359                           prodl	equ	0xFF3
 19360                           intcon	equ	0xFF2
 19361                           indf0	equ	0xFEF
 19362                           postinc0	equ	0xFEE
 19363                           fsr0h	equ	0xFEA
 19364                           fsr0l	equ	0xFE9
 19365                           wreg	equ	0xFE8
 19366                           indf1	equ	0xFE7
 19367                           postdec1	equ	0xFE5
 19368                           plusw1	equ	0xFE3
 19369                           fsr1h	equ	0xFE2
 19370                           fsr1l	equ	0xFE1
 19371                           indf2	equ	0xFDF
 19372                           postinc2	equ	0xFDE
 19373                           postdec2	equ	0xFDD
 19374                           plusw2	equ	0xFDB
 19375                           fsr2h	equ	0xFDA
 19376                           fsr2l	equ	0xFD9
 19377                           status	equ	0xFD8
 19378                           
 19379 ;; *************** function _exp *****************
 19380 ;; Defined at:
 19381 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
 19382 ;; Parameters:    Size  Location     Type
 19383 ;;  x               4   87[BANK0 ] int 
 19384 ;; Auto vars:     Size  Location     Type
 19385 ;;  exponent        2   95[BANK0 ] int 
 19386 ;;  sign            1   97[BANK0 ] unsigned char 
 19387 ;; Return value:  Size  Location     Type
 19388 ;;                  4   87[BANK0 ] unsigned char 
 19389 ;; Registers used:
 19390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19391 ;; Tracked objects:
 19392 ;;		On entry : 0/0
 19393 ;;		On exit  : 0/0
 19394 ;;		Unchanged: 0/0
 19395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19396 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19397 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19399 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19400 ;;Total ram usage:       11 bytes
 19401 ;; Hardware stack levels used:    1
 19402 ;; Hardware stack levels required when called:    9
 19403 ;; This function calls:
 19404 ;;		___fldiv
 19405 ;;		___flge
 19406 ;;		___flmul
 19407 ;;		___flneg
 19408 ;;		___flsub
 19409 ;;		___fltol
 19410 ;;		___xxtofl
 19411 ;;		_eval_poly
 19412 ;;		_floor
 19413 ;;		_ldexp
 19414 ;; This function is called by:
 19415 ;;		_pow
 19416 ;; This function uses a non-reentrant model
 19417 ;;
 19418                           
 19419                           	psect	text108
 19420  0114F4                     __ptext108:
 19421                           	opt stack 0
 19422  0114F4                     _exp:
 19423                           	opt stack 19
 19424                           
 19425                           ;incstack = 0
 19426  0114F4  0100               	movlb	0	; () banked
 19427  0114F6  51B7               	movf	exp@x& (0+255),w,b
 19428  0114F8  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 19429  0114FA  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 19430  0114FC  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 19431  0114FE  A4D8               	btfss	status,2,c
 19432  011500  D009               	goto	l3019
 19433                           
 19434                           ; BSR set to: 0
 19435  011502  0E00               	movlw	0
 19436  011504  6FB7               	movwf	?_exp& (0+255),b
 19437  011506  0E00               	movlw	0
 19438  011508  6FB8               	movwf	(?_exp+1)& (0+255),b
 19439  01150A  0E80               	movlw	128
 19440  01150C  6FB9               	movwf	(?_exp+2)& (0+255),b
 19441  01150E  0E3F               	movlw	63
 19442  011510  6FBA               	movwf	(?_exp+3)& (0+255),b
 19443                           
 19444                           ; BSR set to: 0
 19445  011512  0012               	return	
 19446  011514                     l3019:
 19447                           
 19448                           ; BSR set to: 0
 19449                           
 19450                           ; BSR set to: 0
 19451  011514  0E18               	movlw	24
 19452  011516  6F60               	movwf	___flge@ff1& (0+255),b
 19453  011518  0E72               	movlw	114
 19454  01151A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 19455  01151C  0E31               	movlw	49
 19456  01151E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 19457  011520  0E44               	movlw	68
 19458  011522  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 19459  011524  C0B7  F064         	movff	exp@x,___flge@ff2
 19460  011528  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 19461  01152C  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 19462  011530  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 19463  011534  ECBB  F097         	call	___flge	;wreg free
 19464  011538  0100               	movlb	0	; () banked
 19465  01153A  B0D8               	btfsc	status,0,c
 19466  01153C  D00F               	goto	l3021
 19467                           
 19468                           ; BSR set to: 0
 19469  01153E  0E00               	movlw	0
 19470  011540  0101               	movlb	1	; () banked
 19471  011542  6F1B               	movwf	(_errno+1)& (0+255),b
 19472  011544  0E22               	movlw	34
 19473  011546  6F1A               	movwf	_errno& (0+255),b
 19474  011548  0EFF               	movlw	255
 19475  01154A  0100               	movlb	0	; () banked
 19476  01154C  6FB7               	movwf	?_exp& (0+255),b
 19477  01154E  0EFF               	movlw	255
 19478  011550  6FB8               	movwf	(?_exp+1)& (0+255),b
 19479  011552  0E7F               	movlw	127
 19480  011554  6FB9               	movwf	(?_exp+2)& (0+255),b
 19481  011556  0E7F               	movlw	127
 19482  011558  6FBA               	movwf	(?_exp+3)& (0+255),b
 19483                           
 19484                           ; BSR set to: 0
 19485  01155A  0012               	return	
 19486  01155C                     l3021:
 19487                           
 19488                           ; BSR set to: 0
 19489                           
 19490                           ; BSR set to: 0
 19491  01155C  C0B7  F060         	movff	exp@x,___flge@ff1
 19492  011560  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 19493  011564  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 19494  011568  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 19495  01156C  0E87               	movlw	135
 19496  01156E  6F64               	movwf	___flge@ff2& (0+255),b
 19497  011570  0E48               	movlw	72
 19498  011572  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 19499  011574  0E3A               	movlw	58
 19500  011576  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 19501  011578  0EC4               	movlw	196
 19502  01157A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 19503  01157C  ECBB  F097         	call	___flge	;wreg free
 19504  011580  0100               	movlb	0	; () banked
 19505  011582  B0D8               	btfsc	status,0,c
 19506  011584  D00F               	goto	l3022
 19507                           
 19508                           ; BSR set to: 0
 19509  011586  0E00               	movlw	0
 19510  011588  0101               	movlb	1	; () banked
 19511  01158A  6F1B               	movwf	(_errno+1)& (0+255),b
 19512  01158C  0E22               	movlw	34
 19513  01158E  6F1A               	movwf	_errno& (0+255),b
 19514  011590  0E00               	movlw	0
 19515  011592  0100               	movlb	0	; () banked
 19516  011594  6FB7               	movwf	?_exp& (0+255),b
 19517  011596  0E00               	movlw	0
 19518  011598  6FB8               	movwf	(?_exp+1)& (0+255),b
 19519  01159A  0E00               	movlw	0
 19520  01159C  6FB9               	movwf	(?_exp+2)& (0+255),b
 19521  01159E  0E00               	movlw	0
 19522  0115A0  6FBA               	movwf	(?_exp+3)& (0+255),b
 19523                           
 19524                           ; BSR set to: 0
 19525  0115A2  0012               	return	
 19526  0115A4                     l3022:
 19527                           
 19528                           ; BSR set to: 0
 19529                           
 19530                           ; BSR set to: 0
 19531  0115A4  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 19532  0115A6  D002               	goto	u11810
 19533  0115A8  0E01               	movlw	1
 19534  0115AA  D001               	goto	u11820
 19535  0115AC                     u11810:
 19536  0115AC  0E00               	movlw	0
 19537  0115AE                     u11820:
 19538  0115AE  6FC1               	movwf	exp@sign& (0+255),b
 19539                           
 19540                           ; BSR set to: 0
 19541  0115B0  51C1               	movf	exp@sign& (0+255),w,b
 19542  0115B2  B4D8               	btfsc	status,2,c
 19543  0115B4  D012               	goto	l3023
 19544                           
 19545                           ; BSR set to: 0
 19546  0115B6  C0B7  F087         	movff	exp@x,___flneg@f1
 19547  0115BA  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 19548  0115BE  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 19549  0115C2  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 19550  0115C6  EC90  F0A8         	call	___flneg	;wreg free
 19551  0115CA  C087  F0B7         	movff	?___flneg,exp@x
 19552  0115CE  C088  F0B8         	movff	?___flneg+1,exp@x+1
 19553  0115D2  C089  F0B9         	movff	?___flneg+2,exp@x+2
 19554  0115D6  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 19555  0115DA                     l3023:
 19556  0115DA  C0B7  F06E         	movff	exp@x,___flmul@b
 19557  0115DE  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 19558  0115E2  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 19559  0115E6  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 19560  0115EA  0E3B               	movlw	59
 19561  0115EC  0100               	movlb	0	; () banked
 19562  0115EE  6F72               	movwf	___flmul@a& (0+255),b
 19563  0115F0  0EAA               	movlw	170
 19564  0115F2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 19565  0115F4  0EB8               	movlw	184
 19566  0115F6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 19567  0115F8  0E3F               	movlw	63
 19568  0115FA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 19569  0115FC  ECD2  F081         	call	___flmul	;wreg free
 19570  011600  C06E  F0B7         	movff	?___flmul,exp@x
 19571  011604  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 19572  011608  C070  F0B9         	movff	?___flmul+2,exp@x+2
 19573  01160C  C071  F0BA         	movff	?___flmul+3,exp@x+3
 19574  011610  C0B7  F0A9         	movff	exp@x,floor@x
 19575  011614  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 19576  011618  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 19577  01161C  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 19578  011620  EC4C  F098         	call	_floor	;wreg free
 19579  011624  C0A9  F0BB         	movff	?_floor,_exp$15797
 19580  011628  C0AA  F0BC         	movff	?_floor+1,_exp$15797+1
 19581  01162C  C0AB  F0BD         	movff	?_floor+2,_exp$15797+2
 19582  011630  C0AC  F0BE         	movff	?_floor+3,_exp$15797+3
 19583  011634  C0BB  F09F         	movff	_exp$15797,___fltol@f1
 19584  011638  C0BC  F0A0         	movff	_exp$15797+1,___fltol@f1+1
 19585  01163C  C0BD  F0A1         	movff	_exp$15797+2,___fltol@f1+2
 19586  011640  C0BE  F0A2         	movff	_exp$15797+3,___fltol@f1+3
 19587  011644  ECD0  F09A         	call	___fltol	;wreg free
 19588  011648  C09F  F0BF         	movff	?___fltol,exp@exponent
 19589  01164C  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 19590  011650  C0B7  F09F         	movff	exp@x,___flsub@b
 19591  011654  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 19592  011658  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 19593  01165C  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 19594  011660  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 19595  011664  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 19596  011668  0100               	movlb	0	; () banked
 19597  01166A  0E00               	movlw	0
 19598  01166C  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 19599  01166E  0EFF               	movlw	-1
 19600  011670  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 19601  011672  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 19602  011674  0E01               	movlw	1
 19603  011676  ECED  F093         	call	___xxtofl
 19604  01167A  C060  F0A3         	movff	?___xxtofl,___flsub@a
 19605  01167E  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 19606  011682  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 19607  011686  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 19608  01168A  EC64  F0A6         	call	___flsub	;wreg free
 19609  01168E  C09F  F0B7         	movff	?___flsub,exp@x
 19610  011692  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 19611  011696  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 19612  01169A  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 19613  01169E  C0B7  F09F         	movff	exp@x,eval_poly@x
 19614  0116A2  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 19615  0116A6  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 19616  0116AA  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 19617  0116AE  0E83               	movlw	low exp@coeff
 19618  0116B0  0100               	movlb	0	; () banked
 19619  0116B2  6FA3               	movwf	eval_poly@d& (0+255),b
 19620  0116B4  0EFE               	movlw	high exp@coeff
 19621  0116B6  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 19622  0116B8  0E00               	movlw	0
 19623  0116BA  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 19624  0116BC  0E09               	movlw	9
 19625  0116BE  6FA5               	movwf	eval_poly@n& (0+255),b
 19626  0116C0  EC5E  F099         	call	_eval_poly	;wreg free
 19627  0116C4  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 19628  0116C8  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 19629  0116CC  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 19630  0116D0  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 19631  0116D4  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 19632  0116D8  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 19633  0116DC  EC5E  F09A         	call	_ldexp	;wreg free
 19634  0116E0  C0AF  F0B7         	movff	?_ldexp,exp@x
 19635  0116E4  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 19636  0116E8  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 19637  0116EC  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 19638  0116F0  0100               	movlb	0	; () banked
 19639  0116F2  51C1               	movf	exp@sign& (0+255),w,b
 19640  0116F4  B4D8               	btfsc	status,2,c
 19641  0116F6  D02F               	goto	l3024
 19642                           
 19643                           ; BSR set to: 0
 19644  0116F8  29B7               	incf	exp@x& (0+255),w,b
 19645  0116FA  E112               	bnz	l14640
 19646  0116FC  29B8               	incf	(exp@x+1)& (0+255),w,b
 19647  0116FE  E110               	bnz	l14640
 19648  011700  0E7F               	movlw	127
 19649  011702  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 19650  011704  E10D               	bnz	l14640
 19651  011706  0E7F               	movlw	127
 19652  011708  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 19653  01170A  A4D8               	btfss	status,2,c
 19654  01170C  D009               	goto	l3025
 19655                           
 19656                           ; BSR set to: 0
 19657  01170E  0E00               	movlw	0
 19658  011710  6FB7               	movwf	?_exp& (0+255),b
 19659  011712  0E00               	movlw	0
 19660  011714  6FB8               	movwf	(?_exp+1)& (0+255),b
 19661  011716  0E00               	movlw	0
 19662  011718  6FB9               	movwf	(?_exp+2)& (0+255),b
 19663  01171A  0E00               	movlw	0
 19664  01171C  6FBA               	movwf	(?_exp+3)& (0+255),b
 19665                           
 19666                           ; BSR set to: 0
 19667  01171E  0012               	return	
 19668  011720                     l3025:
 19669  011720                     l14640:
 19670                           
 19671                           ; BSR set to: 0
 19672  011720  0E00               	movlw	0
 19673  011722  6F60               	movwf	___fldiv@b& (0+255),b
 19674  011724  0E00               	movlw	0
 19675  011726  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 19676  011728  0E80               	movlw	128
 19677  01172A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 19678  01172C  0E3F               	movlw	63
 19679  01172E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 19680  011730  C0B7  F064         	movff	exp@x,___fldiv@a
 19681  011734  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 19682  011738  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 19683  01173C  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 19684  011740  EC88  F086         	call	___fldiv	;wreg free
 19685  011744  C060  F0B7         	movff	?___fldiv,?_exp
 19686  011748  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 19687  01174C  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 19688  011750  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 19689  011754  0012               	return	
 19690  011756                     l3024:
 19691                           
 19692                           ; BSR set to: 0
 19693  011756  C0B7  F0B7         	movff	exp@x,?_exp
 19694  01175A  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 19695  01175E  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 19696  011762  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 19697  011766  0012               	return		;funcret
 19698  011768                     __end_of_exp:
 19699                           	opt stack 0
 19700                           tosu	equ	0xFFF
 19701                           tosh	equ	0xFFE
 19702                           tosl	equ	0xFFD
 19703                           pclath	equ	0xFFA
 19704                           tblptru	equ	0xFF8
 19705                           tblptrh	equ	0xFF7
 19706                           tblptrl	equ	0xFF6
 19707                           tablat	equ	0xFF5
 19708                           prodh	equ	0xFF4
 19709                           prodl	equ	0xFF3
 19710                           intcon	equ	0xFF2
 19711                           indf0	equ	0xFEF
 19712                           postinc0	equ	0xFEE
 19713                           fsr0h	equ	0xFEA
 19714                           fsr0l	equ	0xFE9
 19715                           wreg	equ	0xFE8
 19716                           indf1	equ	0xFE7
 19717                           postdec1	equ	0xFE5
 19718                           plusw1	equ	0xFE3
 19719                           fsr1h	equ	0xFE2
 19720                           fsr1l	equ	0xFE1
 19721                           indf2	equ	0xFDF
 19722                           postinc2	equ	0xFDE
 19723                           postdec2	equ	0xFDD
 19724                           plusw2	equ	0xFDB
 19725                           fsr2h	equ	0xFDA
 19726                           fsr2l	equ	0xFD9
 19727                           status	equ	0xFD8
 19728                           
 19729 ;; *************** function _ldexp *****************
 19730 ;; Defined at:
 19731 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 19732 ;; Parameters:    Size  Location     Type
 19733 ;;  value           4   79[BANK0 ] unsigned char 
 19734 ;;  newexp          2   83[BANK0 ] int 
 19735 ;; Auto vars:     Size  Location     Type
 19736 ;;		None
 19737 ;; Return value:  Size  Location     Type
 19738 ;;                  4   79[BANK0 ] int 
 19739 ;; Registers used:
 19740 ;;		wreg, status,2, status,0
 19741 ;; Tracked objects:
 19742 ;;		On entry : 0/0
 19743 ;;		On exit  : 0/0
 19744 ;;		Unchanged: 0/0
 19745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19746 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19749 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;Total ram usage:        8 bytes
 19751 ;; Hardware stack levels used:    1
 19752 ;; Hardware stack levels required when called:    7
 19753 ;; This function calls:
 19754 ;;		Nothing
 19755 ;; This function is called by:
 19756 ;;		_exp
 19757 ;; This function uses a non-reentrant model
 19758 ;;
 19759                           
 19760                           	psect	text109
 19761  0134BC                     __ptext109:
 19762                           	opt stack 0
 19763  0134BC                     _ldexp:
 19764                           	opt stack 20
 19765                           
 19766                           ;incstack = 0
 19767  0134BC  0100               	movlb	0	; () banked
 19768  0134BE  51AF               	movf	ldexp@value& (0+255),w,b
 19769  0134C0  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 19770  0134C2  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 19771  0134C4  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 19772  0134C6  A4D8               	btfss	status,2,c
 19773  0134C8  D009               	goto	l3043
 19774                           
 19775                           ; BSR set to: 0
 19776  0134CA  0E00               	movlw	0
 19777  0134CC  6FAF               	movwf	?_ldexp& (0+255),b
 19778  0134CE  0E00               	movlw	0
 19779  0134D0  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 19780  0134D2  0E00               	movlw	0
 19781  0134D4  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 19782  0134D6  0E00               	movlw	0
 19783  0134D8  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 19784                           
 19785                           ; BSR set to: 0
 19786  0134DA  0012               	return	
 19787  0134DC                     l3043:
 19788                           
 19789                           ; BSR set to: 0
 19790                           
 19791                           ; BSR set to: 0
 19792  0134DC  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 19793  0134DE  0B7F               	andlw	127
 19794  0134E0  6FB5               	movwf	??_ldexp& (0+255),b
 19795  0134E2  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 19796  0134E4  90D8               	bcf	status,0,c
 19797  0134E6  37B5               	rlcf	??_ldexp& (0+255),f,b
 19798  0134E8  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 19799  0134EA  51B5               	movf	??_ldexp& (0+255),w,b
 19800  0134EC  27B3               	addwf	ldexp@newexp& (0+255),f,b
 19801  0134EE  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 19802  0134F0  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 19803  0134F2  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 19804  0134F4  D003               	goto	u11410
 19805  0134F6  6BB5               	clrf	??_ldexp& (0+255),b
 19806  0134F8  2BB5               	incf	??_ldexp& (0+255),f,b
 19807  0134FA  D002               	goto	u11418
 19808  0134FC                     u11410:
 19809  0134FC  0100               	movlb	0	; () banked
 19810  0134FE  6BB5               	clrf	??_ldexp& (0+255),b
 19811  013500                     u11418:
 19812  013500  51B5               	movf	??_ldexp& (0+255),w,b
 19813  013502  27B3               	addwf	ldexp@newexp& (0+255),f,b
 19814  013504  0E00               	movlw	0
 19815  013506  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 19816  013508  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 19817  01350A  D00F               	goto	l3045
 19818                           
 19819                           ; BSR set to: 0
 19820  01350C  0E00               	movlw	0
 19821  01350E  0101               	movlb	1	; () banked
 19822  013510  6F1B               	movwf	(_errno+1)& (0+255),b
 19823  013512  0E22               	movlw	34
 19824  013514  6F1A               	movwf	_errno& (0+255),b
 19825  013516  0E00               	movlw	0
 19826  013518  0100               	movlb	0	; () banked
 19827  01351A  6FAF               	movwf	?_ldexp& (0+255),b
 19828  01351C  0E00               	movlw	0
 19829  01351E  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 19830  013520  0E00               	movlw	0
 19831  013522  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 19832  013524  0E00               	movlw	0
 19833  013526                     L10:
 19834  013526  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 19835                           
 19836                           ; BSR set to: 0
 19837  013528  0012               	return	
 19838  01352A                     l3045:
 19839                           
 19840                           ; BSR set to: 0
 19841                           
 19842                           ; BSR set to: 0
 19843  01352A  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 19844  01352C  D01B               	goto	l3047
 19845  01352E  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 19846  013530  A0D8               	btfss	status,0,c
 19847  013532  D018               	goto	l3047
 19848                           
 19849                           ; BSR set to: 0
 19850  013534  0E00               	movlw	0
 19851  013536  0101               	movlb	1	; () banked
 19852  013538  6F1B               	movwf	(_errno+1)& (0+255),b
 19853  01353A  0E22               	movlw	34
 19854  01353C  6F1A               	movwf	_errno& (0+255),b
 19855                           
 19856                           ; BSR set to: 1
 19857  01353E  0100               	movlb	0	; () banked
 19858  013540  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 19859  013542  D008               	goto	l3048
 19860                           
 19861                           ; BSR set to: 0
 19862  013544  0EFF               	movlw	255
 19863  013546  6FAF               	movwf	?_ldexp& (0+255),b
 19864  013548  0EFF               	movlw	255
 19865  01354A  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 19866  01354C  0E7F               	movlw	127
 19867  01354E  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 19868  013550  0EFF               	movlw	255
 19869  013552  D7E9               	goto	L10
 19870  013554                     l3048:
 19871                           
 19872                           ; BSR set to: 0
 19873                           
 19874                           ; BSR set to: 0
 19875  013554  0EFF               	movlw	255
 19876  013556  6FAF               	movwf	?_ldexp& (0+255),b
 19877  013558  0EFF               	movlw	255
 19878  01355A  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 19879  01355C  0E7F               	movlw	127
 19880  01355E  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 19881  013560  0E7F               	movlw	127
 19882  013562  D7E1               	goto	L10
 19883  013564                     l3047:
 19884                           
 19885                           ; BSR set to: 0
 19886                           
 19887                           ; BSR set to: 0
 19888  013564  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 19889  013566  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 19890  013568  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 19891  01356A  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 19892  01356C  6FB5               	movwf	??_ldexp& (0+255),b
 19893  01356E  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 19894  013570  19B5               	xorwf	??_ldexp& (0+255),w,b
 19895  013572  0B80               	andlw	-128
 19896  013574  19B5               	xorwf	??_ldexp& (0+255),w,b
 19897  013576  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 19898  013578  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 19899  01357C  0E01               	movlw	1
 19900  01357E  17B5               	andwf	??_ldexp& (0+255),f,b
 19901  013580  33B5               	rrcf	??_ldexp& (0+255),f,b
 19902  013582  33B5               	rrcf	??_ldexp& (0+255),f,b
 19903  013584  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 19904  013586  19B5               	xorwf	??_ldexp& (0+255),w,b
 19905  013588  0B7F               	andlw	-129
 19906  01358A  19B5               	xorwf	??_ldexp& (0+255),w,b
 19907  01358C  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 19908                           
 19909                           ; BSR set to: 0
 19910                           
 19911                           ; BSR set to: 0
 19912                           
 19913                           ; BSR set to: 0
 19914  01358E  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 19915  013592  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 19916  013596  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 19917  01359A  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 19918  01359E  0012               	return	
 19919  0135A0                     __end_of_ldexp:
 19920                           	opt stack 0
 19921                           tosu	equ	0xFFF
 19922                           tosh	equ	0xFFE
 19923                           tosl	equ	0xFFD
 19924                           pclath	equ	0xFFA
 19925                           tblptru	equ	0xFF8
 19926                           tblptrh	equ	0xFF7
 19927                           tblptrl	equ	0xFF6
 19928                           tablat	equ	0xFF5
 19929                           prodh	equ	0xFF4
 19930                           prodl	equ	0xFF3
 19931                           intcon	equ	0xFF2
 19932                           indf0	equ	0xFEF
 19933                           postinc0	equ	0xFEE
 19934                           fsr0h	equ	0xFEA
 19935                           fsr0l	equ	0xFE9
 19936                           wreg	equ	0xFE8
 19937                           indf1	equ	0xFE7
 19938                           postdec1	equ	0xFE5
 19939                           plusw1	equ	0xFE3
 19940                           fsr1h	equ	0xFE2
 19941                           fsr1l	equ	0xFE1
 19942                           indf2	equ	0xFDF
 19943                           postinc2	equ	0xFDE
 19944                           postdec2	equ	0xFDD
 19945                           plusw2	equ	0xFDB
 19946                           fsr2h	equ	0xFDA
 19947                           fsr2l	equ	0xFD9
 19948                           status	equ	0xFD8
 19949                           
 19950 ;; *************** function _floor *****************
 19951 ;; Defined at:
 19952 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
 19953 ;; Parameters:    Size  Location     Type
 19954 ;;  x               4   73[BANK0 ] int 
 19955 ;; Auto vars:     Size  Location     Type
 19956 ;;  i               4   77[BANK0 ] int 
 19957 ;;  expon           2   81[BANK0 ] int 
 19958 ;; Return value:  Size  Location     Type
 19959 ;;                  4   73[BANK0 ] int 
 19960 ;; Registers used:
 19961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19962 ;; Tracked objects:
 19963 ;;		On entry : 0/0
 19964 ;;		On exit  : 0/0
 19965 ;;		Unchanged: 0/0
 19966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19968 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19970 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19971 ;;Total ram usage:       10 bytes
 19972 ;; Hardware stack levels used:    1
 19973 ;; Hardware stack levels required when called:    8
 19974 ;; This function calls:
 19975 ;;		___fladd
 19976 ;;		___flge
 19977 ;;		___fltol
 19978 ;;		___xxtofl
 19979 ;;		_frexp
 19980 ;; This function is called by:
 19981 ;;		_exp
 19982 ;; This function uses a non-reentrant model
 19983 ;;
 19984                           
 19985                           	psect	text110
 19986  013098                     __ptext110:
 19987                           	opt stack 0
 19988  013098                     _floor:
 19989                           	opt stack 19
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;incstack = 0
 19993  013098  C0A9  F060         	movff	floor@x,frexp@value
 19994  01309C  C0AA  F061         	movff	floor@x+1,frexp@value+1
 19995  0130A0  C0AB  F062         	movff	floor@x+2,frexp@value+2
 19996  0130A4  C0AC  F063         	movff	floor@x+3,frexp@value+3
 19997  0130A8  0EB1               	movlw	low floor@expon
 19998  0130AA  0100               	movlb	0	; () banked
 19999  0130AC  6F64               	movwf	frexp@eptr& (0+255),b
 20000  0130AE  0E00               	movlw	high floor@expon
 20001  0130B0  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 20002  0130B2  ECAC  F09D         	call	_frexp	;wreg free
 20003  0130B6  0100               	movlb	0	; () banked
 20004  0130B8  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 20005  0130BA  D014               	goto	l3030
 20006                           
 20007                           ; BSR set to: 0
 20008  0130BC  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 20009  0130BE  D009               	goto	l3031
 20010                           
 20011                           ; BSR set to: 0
 20012  0130C0  0E00               	movlw	0
 20013  0130C2  6FA9               	movwf	?_floor& (0+255),b
 20014  0130C4  0E00               	movlw	0
 20015  0130C6  6FAA               	movwf	(?_floor+1)& (0+255),b
 20016  0130C8  0E80               	movlw	128
 20017  0130CA  6FAB               	movwf	(?_floor+2)& (0+255),b
 20018  0130CC  0EBF               	movlw	191
 20019  0130CE  6FAC               	movwf	(?_floor+3)& (0+255),b
 20020                           
 20021                           ; BSR set to: 0
 20022  0130D0  0012               	return	
 20023  0130D2                     l3031:
 20024                           
 20025                           ; BSR set to: 0
 20026                           
 20027                           ; BSR set to: 0
 20028  0130D2  0E00               	movlw	0
 20029  0130D4  6FA9               	movwf	?_floor& (0+255),b
 20030  0130D6  0E00               	movlw	0
 20031  0130D8  6FAA               	movwf	(?_floor+1)& (0+255),b
 20032  0130DA  0E00               	movlw	0
 20033  0130DC  6FAB               	movwf	(?_floor+2)& (0+255),b
 20034  0130DE  0E00               	movlw	0
 20035  0130E0  6FAC               	movwf	(?_floor+3)& (0+255),b
 20036                           
 20037                           ; BSR set to: 0
 20038  0130E2  0012               	return	
 20039  0130E4                     l3030:
 20040                           
 20041                           ; BSR set to: 0
 20042                           
 20043                           ; BSR set to: 0
 20044  0130E4  51B2               	movf	(floor@expon+1)& (0+255),w,b
 20045  0130E6  E104               	bnz	u11370
 20046  0130E8  0E1D               	movlw	29
 20047  0130EA  5DB1               	subwf	floor@expon& (0+255),w,b
 20048  0130EC  A0D8               	btfss	status,0,c
 20049  0130EE  D009               	goto	l3033
 20050  0130F0                     u11370:
 20051                           
 20052                           ; BSR set to: 0
 20053  0130F0  C0A9  F0A9         	movff	floor@x,?_floor
 20054  0130F4  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 20055  0130F8  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 20056  0130FC  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 20057  013100  0012               	return	
 20058  013102                     l3033:
 20059                           
 20060                           ; BSR set to: 0
 20061                           
 20062                           ; BSR set to: 0
 20063  013102  C0A9  F09F         	movff	floor@x,___fltol@f1
 20064  013106  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 20065  01310A  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 20066  01310E  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 20067  013112  ECD0  F09A         	call	___fltol	;wreg free
 20068  013116  C09F  F060         	movff	?___fltol,___xxtofl@val
 20069  01311A  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 20070  01311E  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 20071  013122  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 20072  013126  0E01               	movlw	1
 20073  013128  ECED  F093         	call	___xxtofl
 20074  01312C  C060  F0AD         	movff	?___xxtofl,floor@i
 20075  013130  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 20076  013134  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 20077  013138  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 20078  01313C  C0A9  F060         	movff	floor@x,___flge@ff1
 20079  013140  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 20080  013144  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 20081  013148  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 20082  01314C  C0AD  F064         	movff	floor@i,___flge@ff2
 20083  013150  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 20084  013154  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 20085  013158  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 20086  01315C  ECBB  F097         	call	___flge	;wreg free
 20087  013160  0100               	movlb	0	; () banked
 20088  013162  B0D8               	btfsc	status,0,c
 20089  013164  D01B               	goto	l3034
 20090                           
 20091                           ; BSR set to: 0
 20092  013166  C0AD  F08B         	movff	floor@i,___fladd@b
 20093  01316A  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 20094  01316E  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 20095  013172  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 20096  013176  0E00               	movlw	0
 20097  013178  6F8F               	movwf	___fladd@a& (0+255),b
 20098  01317A  0E00               	movlw	0
 20099  01317C  6F90               	movwf	(___fladd@a+1)& (0+255),b
 20100  01317E  0E80               	movlw	128
 20101  013180  6F91               	movwf	(___fladd@a+2)& (0+255),b
 20102  013182  0EBF               	movlw	191
 20103  013184  6F92               	movwf	(___fladd@a+3)& (0+255),b
 20104  013186  EC7B  F083         	call	___fladd	;wreg free
 20105  01318A  C08B  F0A9         	movff	?___fladd,?_floor
 20106  01318E  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 20107  013192  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 20108  013196  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 20109  01319A  0012               	return	
 20110  01319C                     l3034:
 20111                           
 20112                           ; BSR set to: 0
 20113  01319C  C0AD  F0A9         	movff	floor@i,?_floor
 20114  0131A0  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 20115  0131A4  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 20116  0131A8  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 20117  0131AC  0012               	return		;funcret
 20118  0131AE                     __end_of_floor:
 20119                           	opt stack 0
 20120                           tosu	equ	0xFFF
 20121                           tosh	equ	0xFFE
 20122                           tosl	equ	0xFFD
 20123                           pclath	equ	0xFFA
 20124                           tblptru	equ	0xFF8
 20125                           tblptrh	equ	0xFF7
 20126                           tblptrl	equ	0xFF6
 20127                           tablat	equ	0xFF5
 20128                           prodh	equ	0xFF4
 20129                           prodl	equ	0xFF3
 20130                           intcon	equ	0xFF2
 20131                           indf0	equ	0xFEF
 20132                           postinc0	equ	0xFEE
 20133                           fsr0h	equ	0xFEA
 20134                           fsr0l	equ	0xFE9
 20135                           wreg	equ	0xFE8
 20136                           indf1	equ	0xFE7
 20137                           postdec1	equ	0xFE5
 20138                           plusw1	equ	0xFE3
 20139                           fsr1h	equ	0xFE2
 20140                           fsr1l	equ	0xFE1
 20141                           indf2	equ	0xFDF
 20142                           postinc2	equ	0xFDE
 20143                           postdec2	equ	0xFDD
 20144                           plusw2	equ	0xFDB
 20145                           fsr2h	equ	0xFDA
 20146                           fsr2l	equ	0xFD9
 20147                           status	equ	0xFD8
 20148                           
 20149 ;; *************** function _frexp *****************
 20150 ;; Defined at:
 20151 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 20152 ;; Parameters:    Size  Location     Type
 20153 ;;  value           4    0[BANK0 ] int 
 20154 ;;  eptr            2    4[BANK0 ] PTR int 
 20155 ;;		 -> log@exponent(2), floor@expon(2), 
 20156 ;; Auto vars:     Size  Location     Type
 20157 ;;		None
 20158 ;; Return value:  Size  Location     Type
 20159 ;;                  4    0[BANK0 ] PTR int 
 20160 ;; Registers used:
 20161 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20162 ;; Tracked objects:
 20163 ;;		On entry : 0/0
 20164 ;;		On exit  : 0/0
 20165 ;;		Unchanged: 0/0
 20166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20167 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20169 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20170 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20171 ;;Total ram usage:        8 bytes
 20172 ;; Hardware stack levels used:    1
 20173 ;; Hardware stack levels required when called:    7
 20174 ;; This function calls:
 20175 ;;		Nothing
 20176 ;; This function is called by:
 20177 ;;		_floor
 20178 ;;		_log
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text111
 20183  013B58                     __ptext111:
 20184                           	opt stack 0
 20185  013B58                     _frexp:
 20186                           	opt stack 20
 20187                           
 20188                           ;incstack = 0
 20189  013B58  0100               	movlb	0	; () banked
 20190  013B5A  5160               	movf	frexp@value& (0+255),w,b
 20191  013B5C  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 20192  013B5E  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 20193  013B60  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 20194  013B62  A4D8               	btfss	status,2,c
 20195  013B64  D011               	goto	l3039
 20196                           
 20197                           ; BSR set to: 0
 20198  013B66  C064  FFD9         	movff	frexp@eptr,fsr2l
 20199  013B6A  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 20200  013B6E  0E00               	movlw	0
 20201  013B70  6EDE               	movwf	postinc2,c
 20202  013B72  0E00               	movlw	0
 20203  013B74  6EDD               	movwf	postdec2,c
 20204                           
 20205                           ; BSR set to: 0
 20206  013B76  0E00               	movlw	0
 20207  013B78  6F60               	movwf	?_frexp& (0+255),b
 20208  013B7A  0E00               	movlw	0
 20209  013B7C  6F61               	movwf	(?_frexp+1)& (0+255),b
 20210  013B7E  0E00               	movlw	0
 20211  013B80  6F62               	movwf	(?_frexp+2)& (0+255),b
 20212  013B82  0E00               	movlw	0
 20213  013B84  6F63               	movwf	(?_frexp+3)& (0+255),b
 20214                           
 20215                           ; BSR set to: 0
 20216  013B86  0012               	return	
 20217  013B88                     l3039:
 20218                           
 20219                           ; BSR set to: 0
 20220                           
 20221                           ; BSR set to: 0
 20222  013B88  5163               	movf	(frexp@value+3)& (0+255),w,b
 20223  013B8A  0B7F               	andlw	127
 20224  013B8C  6F66               	movwf	??_frexp& (0+255),b
 20225  013B8E  6B67               	clrf	(??_frexp+1)& (0+255),b
 20226  013B90  90D8               	bcf	status,0,c
 20227  013B92  3766               	rlcf	??_frexp& (0+255),f,b
 20228  013B94  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 20229  013B96  C064  FFD9         	movff	frexp@eptr,fsr2l
 20230  013B9A  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 20231  013B9E  C066  FFDE         	movff	??_frexp,postinc2
 20232  013BA2  C067  FFDD         	movff	??_frexp+1,postdec2
 20233  013BA6  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 20234  013BA8  D003               	goto	u10870
 20235  013BAA  6B66               	clrf	??_frexp& (0+255),b
 20236  013BAC  2B66               	incf	??_frexp& (0+255),f,b
 20237  013BAE  D002               	goto	u10878
 20238  013BB0                     u10870:
 20239  013BB0  0100               	movlb	0	; () banked
 20240  013BB2  6B66               	clrf	??_frexp& (0+255),b
 20241  013BB4                     u10878:
 20242  013BB4  5166               	movf	??_frexp& (0+255),w,b
 20243  013BB6  C064  FFD9         	movff	frexp@eptr,fsr2l
 20244  013BBA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 20245  013BBE  12DE               	iorwf	postinc2,f,c
 20246  013BC0  0E00               	movlw	0
 20247  013BC2  12DD               	iorwf	postdec2,f,c
 20248                           
 20249                           ; BSR set to: 0
 20250  013BC4  C064  FFD9         	movff	frexp@eptr,fsr2l
 20251  013BC8  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 20252  013BCC  0E82               	movlw	130
 20253  013BCE  26DE               	addwf	postinc2,f,c
 20254  013BD0  0EFF               	movlw	255
 20255  013BD2  22DD               	addwfc	postdec2,f,c
 20256                           
 20257                           ; BSR set to: 0
 20258  013BD4  8163               	bsf	(frexp@value+3)& (0+255),0,b
 20259  013BD6  8363               	bsf	(frexp@value+3)& (0+255),1,b
 20260  013BD8  8563               	bsf	(frexp@value+3)& (0+255),2,b
 20261  013BDA  8763               	bsf	(frexp@value+3)& (0+255),3,b
 20262  013BDC  8963               	bsf	(frexp@value+3)& (0+255),4,b
 20263  013BDE  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 20264  013BE0  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 20265                           
 20266                           ; BSR set to: 0
 20267  013BE2  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 20268                           
 20269                           ; BSR set to: 0
 20270  013BE4  C060  F060         	movff	frexp@value,?_frexp
 20271  013BE8  C061  F061         	movff	frexp@value+1,?_frexp+1
 20272  013BEC  C062  F062         	movff	frexp@value+2,?_frexp+2
 20273  013BF0  C063  F063         	movff	frexp@value+3,?_frexp+3
 20274  013BF4  0012               	return	
 20275  013BF6                     __end_of_frexp:
 20276                           	opt stack 0
 20277                           tosu	equ	0xFFF
 20278                           tosh	equ	0xFFE
 20279                           tosl	equ	0xFFD
 20280                           pclath	equ	0xFFA
 20281                           tblptru	equ	0xFF8
 20282                           tblptrh	equ	0xFF7
 20283                           tblptrl	equ	0xFF6
 20284                           tablat	equ	0xFF5
 20285                           prodh	equ	0xFF4
 20286                           prodl	equ	0xFF3
 20287                           intcon	equ	0xFF2
 20288                           indf0	equ	0xFEF
 20289                           postinc0	equ	0xFEE
 20290                           fsr0h	equ	0xFEA
 20291                           fsr0l	equ	0xFE9
 20292                           wreg	equ	0xFE8
 20293                           indf1	equ	0xFE7
 20294                           postdec1	equ	0xFE5
 20295                           plusw1	equ	0xFE3
 20296                           fsr1h	equ	0xFE2
 20297                           fsr1l	equ	0xFE1
 20298                           indf2	equ	0xFDF
 20299                           postinc2	equ	0xFDE
 20300                           postdec2	equ	0xFDD
 20301                           plusw2	equ	0xFDB
 20302                           fsr2h	equ	0xFDA
 20303                           fsr2l	equ	0xFD9
 20304                           status	equ	0xFD8
 20305                           
 20306 ;; *************** function ___xxtofl *****************
 20307 ;; Defined at:
 20308 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
 20309 ;; Parameters:    Size  Location     Type
 20310 ;;  sign            1    wreg     unsigned char 
 20311 ;;  val             4    0[BANK0 ] long 
 20312 ;; Auto vars:     Size  Location     Type
 20313 ;;  sign            1    8[BANK0 ] unsigned char 
 20314 ;;  arg             4   10[BANK0 ] unsigned long 
 20315 ;;  exp             1    9[BANK0 ] unsigned char 
 20316 ;; Return value:  Size  Location     Type
 20317 ;;                  4    0[BANK0 ] unsigned char 
 20318 ;; Registers used:
 20319 ;;		wreg, status,2, status,0
 20320 ;; Tracked objects:
 20321 ;;		On entry : 0/0
 20322 ;;		On exit  : 0/0
 20323 ;;		Unchanged: 0/0
 20324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20325 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20326 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20327 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20328 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20329 ;;Total ram usage:       14 bytes
 20330 ;; Hardware stack levels used:    1
 20331 ;; Hardware stack levels required when called:    7
 20332 ;; This function calls:
 20333 ;;		Nothing
 20334 ;; This function is called by:
 20335 ;;		_ADCAverage
 20336 ;;		_pow
 20337 ;;		_exp
 20338 ;;		_floor
 20339 ;;		_log
 20340 ;;		_ADC_Voltage
 20341 ;;		_Move_ADC_To
 20342 ;; This function uses a non-reentrant model
 20343 ;;
 20344                           
 20345                           	psect	text112
 20346  0127DA                     __ptext112:
 20347                           	opt stack 0
 20348  0127DA                     ___xxtofl:
 20349                           	opt stack 20
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;incstack = 0
 20353                           ;___xxtofl@sign stored from wreg
 20354  0127DA  0100               	movlb	0	; () banked
 20355  0127DC  6F68               	movwf	___xxtofl@sign& (0+255),b
 20356  0127DE  0100               	movlb	0	; () banked
 20357  0127E0  5168               	movf	___xxtofl@sign& (0+255),w,b
 20358  0127E2  A4D8               	btfss	status,2,c
 20359                           
 20360                           ; BSR set to: 0
 20361  0127E4  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 20362  0127E6  D01A               	goto	l2988
 20363                           
 20364                           ; BSR set to: 0
 20365  0127E8  C060  F064         	movff	___xxtofl@val,??___xxtofl
 20366  0127EC  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 20367  0127F0  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 20368  0127F4  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 20369  0127F8  1F64               	comf	??___xxtofl& (0+255),f,b
 20370  0127FA  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 20371  0127FC  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 20372  0127FE  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 20373  012800  2B64               	incf	??___xxtofl& (0+255),f,b
 20374  012802  0E00               	movlw	0
 20375  012804  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 20376  012806  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 20377  012808  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 20378  01280A  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 20379  01280E  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 20380  012812  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 20381  012816  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 20382  01281A  D008               	goto	l2989
 20383  01281C                     l2988:
 20384                           
 20385                           ; BSR set to: 0
 20386  01281C  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 20387  012820  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 20388  012824  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 20389  012828  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 20390  01282C                     l2989:
 20391                           
 20392                           ; BSR set to: 0
 20393                           
 20394                           ; BSR set to: 0
 20395  01282C  5160               	movf	___xxtofl@val& (0+255),w,b
 20396  01282E  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 20397  012830  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 20398  012832  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 20399  012834  A4D8               	btfss	status,2,c
 20400  012836  D009               	goto	l2990
 20401                           
 20402                           ; BSR set to: 0
 20403  012838  0E00               	movlw	0
 20404  01283A  6F60               	movwf	?___xxtofl& (0+255),b
 20405  01283C  0E00               	movlw	0
 20406  01283E  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 20407  012840  0E00               	movlw	0
 20408  012842  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 20409  012844  0E00               	movlw	0
 20410  012846  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 20411                           
 20412                           ; BSR set to: 0
 20413  012848  0012               	return	
 20414  01284A                     l2990:
 20415                           
 20416                           ; BSR set to: 0
 20417                           
 20418                           ; BSR set to: 0
 20419  01284A  0E96               	movlw	150
 20420  01284C  6F69               	movwf	___xxtofl@exp& (0+255),b
 20421  01284E  D006               	goto	l2992
 20422  012850                     
 20423                           ; BSR set to: 0
 20424                           
 20425                           ; BSR set to: 0
 20426  012850  2B69               	incf	___xxtofl@exp& (0+255),f,b
 20427  012852  90D8               	bcf	status,0,c
 20428  012854  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 20429  012856  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 20430  012858  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 20431  01285A  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 20432  01285C                     l2992:
 20433                           
 20434                           ; BSR set to: 0
 20435                           
 20436                           ; BSR set to: 0
 20437  01285C  0E00               	movlw	0
 20438  01285E  156A               	andwf	___xxtofl@arg& (0+255),w,b
 20439  012860  6F64               	movwf	??___xxtofl& (0+255),b
 20440  012862  0E00               	movlw	0
 20441  012864  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 20442  012866  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 20443  012868  0E00               	movlw	0
 20444  01286A  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 20445  01286C  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 20446  01286E  0EFE               	movlw	254
 20447  012870  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 20448  012872  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 20449  012874  5164               	movf	??___xxtofl& (0+255),w,b
 20450  012876  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 20451  012878  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 20452  01287A  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 20453  01287C  B4D8               	btfsc	status,2,c
 20454  01287E  D00D               	goto	l2995
 20455  012880  D7E7               	goto	l2993
 20456  012882                     
 20457                           ; BSR set to: 0
 20458                           
 20459                           ; BSR set to: 0
 20460  012882  2B69               	incf	___xxtofl@exp& (0+255),f,b
 20461                           
 20462                           ; BSR set to: 0
 20463  012884  0E01               	movlw	1
 20464  012886  276A               	addwf	___xxtofl@arg& (0+255),f,b
 20465  012888  0E00               	movlw	0
 20466  01288A  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 20467  01288C  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 20468  01288E  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 20469                           
 20470                           ; BSR set to: 0
 20471  012890  90D8               	bcf	status,0,c
 20472  012892  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 20473  012894  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 20474  012896  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 20475  012898  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 20476  01289A                     l2995:
 20477                           
 20478                           ; BSR set to: 0
 20479  01289A  0E00               	movlw	0
 20480  01289C  156A               	andwf	___xxtofl@arg& (0+255),w,b
 20481  01289E  6F64               	movwf	??___xxtofl& (0+255),b
 20482  0128A0  0E00               	movlw	0
 20483  0128A2  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 20484  0128A4  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 20485  0128A6  0E00               	movlw	0
 20486  0128A8  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 20487  0128AA  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 20488  0128AC  0EFF               	movlw	255
 20489  0128AE  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 20490  0128B0  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 20491  0128B2  5164               	movf	??___xxtofl& (0+255),w,b
 20492  0128B4  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 20493  0128B6  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 20494  0128B8  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 20495  0128BA  B4D8               	btfsc	status,2,c
 20496  0128BC  D007               	goto	l2998
 20497  0128BE  D7E1               	goto	l2996
 20498  0128C0                     
 20499                           ; BSR set to: 0
 20500                           
 20501                           ; BSR set to: 0
 20502  0128C0  0769               	decf	___xxtofl@exp& (0+255),f,b
 20503  0128C2  90D8               	bcf	status,0,c
 20504  0128C4  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 20505  0128C6  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 20506  0128C8  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 20507  0128CA  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 20508  0128CC                     l2998:
 20509                           
 20510                           ; BSR set to: 0
 20511                           
 20512                           ; BSR set to: 0
 20513  0128CC  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 20514  0128CE  D003               	goto	u10820
 20515                           
 20516                           ; BSR set to: 0
 20517  0128D0  0E02               	movlw	2
 20518  0128D2  6169               	cpfslt	___xxtofl@exp& (0+255),b
 20519  0128D4  D7F5               	goto	l2999
 20520  0128D6                     u10820:
 20521                           
 20522                           ; BSR set to: 0
 20523                           
 20524                           ; BSR set to: 0
 20525  0128D6  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 20526  0128D8  D008               	goto	l3003
 20527                           
 20528                           ; BSR set to: 0
 20529  0128DA  0EFF               	movlw	255
 20530  0128DC  176A               	andwf	___xxtofl@arg& (0+255),f,b
 20531  0128DE  0EFF               	movlw	255
 20532  0128E0  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 20533  0128E2  0E7F               	movlw	127
 20534  0128E4  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 20535  0128E6  0EFF               	movlw	255
 20536  0128E8  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 20537  0128EA                     l3003:
 20538                           
 20539                           ; BSR set to: 0
 20540  0128EA  90D8               	bcf	status,0,c
 20541  0128EC  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 20542  0128EE  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 20543  0128F2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 20544  0128F4  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 20545  0128F6  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 20546  0128F8  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 20547  0128FC  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 20548  0128FE  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 20549  012900  6B64               	clrf	??___xxtofl& (0+255),b
 20550  012902  5164               	movf	??___xxtofl& (0+255),w,b
 20551  012904  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 20552  012906  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 20553  012908  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 20554  01290A  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 20555  01290C  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 20556  01290E  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 20557  012910  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 20558                           
 20559                           ; BSR set to: 0
 20560  012912  5168               	movf	___xxtofl@sign& (0+255),w,b
 20561  012914  A4D8               	btfss	status,2,c
 20562                           
 20563                           ; BSR set to: 0
 20564  012916  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 20565  012918  D001               	goto	l3004
 20566                           
 20567                           ; BSR set to: 0
 20568  01291A  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 20569  01291C                     l3004:
 20570                           
 20571                           ; BSR set to: 0
 20572                           
 20573                           ; BSR set to: 0
 20574  01291C  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 20575  012920  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 20576  012924  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 20577  012928  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 20578  01292C  0012               	return	
 20579  01292E                     __end_of___xxtofl:
 20580                           	opt stack 0
 20581                           tosu	equ	0xFFF
 20582                           tosh	equ	0xFFE
 20583                           tosl	equ	0xFFD
 20584                           pclath	equ	0xFFA
 20585                           tblptru	equ	0xFF8
 20586                           tblptrh	equ	0xFF7
 20587                           tblptrl	equ	0xFF6
 20588                           tablat	equ	0xFF5
 20589                           prodh	equ	0xFF4
 20590                           prodl	equ	0xFF3
 20591                           intcon	equ	0xFF2
 20592                           indf0	equ	0xFEF
 20593                           postinc0	equ	0xFEE
 20594                           fsr0h	equ	0xFEA
 20595                           fsr0l	equ	0xFE9
 20596                           wreg	equ	0xFE8
 20597                           indf1	equ	0xFE7
 20598                           postdec1	equ	0xFE5
 20599                           plusw1	equ	0xFE3
 20600                           fsr1h	equ	0xFE2
 20601                           fsr1l	equ	0xFE1
 20602                           indf2	equ	0xFDF
 20603                           postinc2	equ	0xFDE
 20604                           postdec2	equ	0xFDD
 20605                           plusw2	equ	0xFDB
 20606                           fsr2h	equ	0xFDA
 20607                           fsr2l	equ	0xFD9
 20608                           status	equ	0xFD8
 20609                           
 20610 ;; *************** function ___fltol *****************
 20611 ;; Defined at:
 20612 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
 20613 ;; Parameters:    Size  Location     Type
 20614 ;;  f1              4   63[BANK0 ] unsigned char 
 20615 ;; Auto vars:     Size  Location     Type
 20616 ;;  exp1            1   72[BANK0 ] unsigned char 
 20617 ;;  sign1           1   71[BANK0 ] unsigned char 
 20618 ;; Return value:  Size  Location     Type
 20619 ;;                  4   63[BANK0 ] long 
 20620 ;; Registers used:
 20621 ;;		wreg, status,2, status,0
 20622 ;; Tracked objects:
 20623 ;;		On entry : 0/0
 20624 ;;		On exit  : 0/0
 20625 ;;		Unchanged: 0/0
 20626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20627 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20628 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20629 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20630 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20631 ;;Total ram usage:       10 bytes
 20632 ;; Hardware stack levels used:    1
 20633 ;; Hardware stack levels required when called:    7
 20634 ;; This function calls:
 20635 ;;		Nothing
 20636 ;; This function is called by:
 20637 ;;		_ADCAverage
 20638 ;;		_pow
 20639 ;;		_exp
 20640 ;;		_floor
 20641 ;;		_Move_ADC_To
 20642 ;; This function uses a non-reentrant model
 20643 ;;
 20644                           
 20645                           	psect	text113
 20646  0135A0                     __ptext113:
 20647                           	opt stack 0
 20648  0135A0                     ___fltol:
 20649                           	opt stack 19
 20650                           
 20651                           ; BSR set to: 0
 20652                           ;incstack = 0
 20653  0135A0  0100               	movlb	0	; () banked
 20654  0135A2  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 20655  0135A4  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 20656  0135A6  6FA8               	movwf	___fltol@exp1& (0+255),b
 20657  0135A8  51A8               	movf	___fltol@exp1& (0+255),w,b
 20658  0135AA  A4D8               	btfss	status,2,c
 20659  0135AC  D009               	goto	l2655
 20660                           
 20661                           ; BSR set to: 0
 20662  0135AE  0E00               	movlw	0
 20663  0135B0  6F9F               	movwf	?___fltol& (0+255),b
 20664  0135B2  0E00               	movlw	0
 20665  0135B4  6FA0               	movwf	(?___fltol+1)& (0+255),b
 20666  0135B6  0E00               	movlw	0
 20667  0135B8  6FA1               	movwf	(?___fltol+2)& (0+255),b
 20668  0135BA  0E00               	movlw	0
 20669  0135BC  6FA2               	movwf	(?___fltol+3)& (0+255),b
 20670                           
 20671                           ; BSR set to: 0
 20672  0135BE  0012               	return	
 20673  0135C0                     l2655:
 20674                           
 20675                           ; BSR set to: 0
 20676                           
 20677                           ; BSR set to: 0
 20678  0135C0  C09F  F0A3         	movff	___fltol@f1,??___fltol
 20679  0135C4  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 20680  0135C8  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 20681  0135CC  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 20682  0135D0  0E20               	movlw	32
 20683  0135D2  D005               	goto	u10670
 20684  0135D4                     u10675:
 20685  0135D4  90D8               	bcf	status,0,c
 20686  0135D6  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 20687  0135D8  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 20688  0135DA  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 20689  0135DC  33A3               	rrcf	??___fltol& (0+255),f,b
 20690  0135DE                     u10670:
 20691  0135DE  2EE8               	decfsz	wreg,f,c
 20692  0135E0  D7F9               	goto	u10675
 20693  0135E2  51A3               	movf	??___fltol& (0+255),w,b
 20694  0135E4  6FA7               	movwf	___fltol@sign1& (0+255),b
 20695                           
 20696                           ; BSR set to: 0
 20697  0135E6  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 20698                           
 20699                           ; BSR set to: 0
 20700  0135E8  0EFF               	movlw	255
 20701  0135EA  179F               	andwf	___fltol@f1& (0+255),f,b
 20702  0135EC  0EFF               	movlw	255
 20703  0135EE  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 20704  0135F0  0EFF               	movlw	255
 20705  0135F2  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 20706  0135F4  0E00               	movlw	0
 20707  0135F6  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 20708                           
 20709                           ; BSR set to: 0
 20710  0135F8  0E96               	movlw	150
 20711  0135FA  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 20712                           
 20713                           ; BSR set to: 0
 20714  0135FC  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 20715  0135FE  D016               	goto	l2657
 20716                           
 20717                           ; BSR set to: 0
 20718  013600  51A8               	movf	___fltol@exp1& (0+255),w,b
 20719  013602  0A80               	xorlw	128
 20720  013604  0F97               	addlw	151
 20721  013606  B0D8               	btfsc	status,0,c
 20722  013608  D009               	goto	l2658
 20723                           
 20724                           ; BSR set to: 0
 20725  01360A  0E00               	movlw	0
 20726  01360C  6F9F               	movwf	?___fltol& (0+255),b
 20727  01360E  0E00               	movlw	0
 20728  013610  6FA0               	movwf	(?___fltol+1)& (0+255),b
 20729  013612  0E00               	movlw	0
 20730  013614  6FA1               	movwf	(?___fltol+2)& (0+255),b
 20731  013616  0E00               	movlw	0
 20732  013618  6FA2               	movwf	(?___fltol+3)& (0+255),b
 20733                           
 20734                           ; BSR set to: 0
 20735  01361A  0012               	return	
 20736  01361C                     l2658:
 20737                           
 20738                           ; BSR set to: 0
 20739                           
 20740                           ; BSR set to: 0
 20741                           
 20742                           ; BSR set to: 0
 20743  01361C  90D8               	bcf	status,0,c
 20744  01361E  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 20745  013620  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 20746  013622  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 20747  013624  339F               	rrcf	___fltol@f1& (0+255),f,b
 20748                           
 20749                           ; BSR set to: 0
 20750  013626  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 20751  013628  D7F9               	goto	l2658
 20752                           
 20753                           ; BSR set to: 0
 20754  01362A  D015               	goto	u10710
 20755  01362C                     l2657:
 20756                           
 20757                           ; BSR set to: 0
 20758                           
 20759                           ; BSR set to: 0
 20760  01362C  0E1F               	movlw	31
 20761  01362E  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 20762  013630  D00F               	goto	l2663
 20763                           
 20764                           ; BSR set to: 0
 20765  013632  0E00               	movlw	0
 20766  013634  6F9F               	movwf	?___fltol& (0+255),b
 20767  013636  0E00               	movlw	0
 20768  013638  6FA0               	movwf	(?___fltol+1)& (0+255),b
 20769  01363A  0E00               	movlw	0
 20770  01363C  6FA1               	movwf	(?___fltol+2)& (0+255),b
 20771  01363E  0E00               	movlw	0
 20772  013640  6FA2               	movwf	(?___fltol+3)& (0+255),b
 20773                           
 20774                           ; BSR set to: 0
 20775  013642  0012               	return	
 20776  013644                     
 20777                           ; BSR set to: 0
 20778                           
 20779                           ; BSR set to: 0
 20780  013644  90D8               	bcf	status,0,c
 20781  013646  379F               	rlcf	___fltol@f1& (0+255),f,b
 20782  013648  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 20783  01364A  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 20784  01364C  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 20785  01364E  07A8               	decf	___fltol@exp1& (0+255),f,b
 20786  013650                     l2663:
 20787                           
 20788                           ; BSR set to: 0
 20789                           
 20790                           ; BSR set to: 0
 20791  013650  51A8               	movf	___fltol@exp1& (0+255),w,b
 20792  013652  A4D8               	btfss	status,2,c
 20793  013654  D7F7               	goto	l2664
 20794  013656                     u10710:
 20795                           
 20796                           ; BSR set to: 0
 20797                           
 20798                           ; BSR set to: 0
 20799                           
 20800                           ; BSR set to: 0
 20801  013656  51A7               	movf	___fltol@sign1& (0+255),w,b
 20802  013658  B4D8               	btfsc	status,2,c
 20803  01365A  D008               	goto	l2666
 20804                           
 20805                           ; BSR set to: 0
 20806  01365C  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 20807  01365E  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 20808  013660  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 20809  013662  6D9F               	negf	___fltol@f1& (0+255),b
 20810  013664  0E00               	movlw	0
 20811  013666  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 20812  013668  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 20813  01366A  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 20814  01366C                     l2666:
 20815                           
 20816                           ; BSR set to: 0
 20817                           
 20818                           ; BSR set to: 0
 20819  01366C  C09F  F09F         	movff	___fltol@f1,?___fltol
 20820  013670  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 20821  013674  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 20822  013678  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 20823  01367C  0012               	return	
 20824  01367E                     __end_of___fltol:
 20825                           	opt stack 0
 20826                           tosu	equ	0xFFF
 20827                           tosh	equ	0xFFE
 20828                           tosl	equ	0xFFD
 20829                           pclath	equ	0xFFA
 20830                           tblptru	equ	0xFF8
 20831                           tblptrh	equ	0xFF7
 20832                           tblptrl	equ	0xFF6
 20833                           tablat	equ	0xFF5
 20834                           prodh	equ	0xFF4
 20835                           prodl	equ	0xFF3
 20836                           intcon	equ	0xFF2
 20837                           indf0	equ	0xFEF
 20838                           postinc0	equ	0xFEE
 20839                           fsr0h	equ	0xFEA
 20840                           fsr0l	equ	0xFE9
 20841                           wreg	equ	0xFE8
 20842                           indf1	equ	0xFE7
 20843                           postdec1	equ	0xFE5
 20844                           plusw1	equ	0xFE3
 20845                           fsr1h	equ	0xFE2
 20846                           fsr1l	equ	0xFE1
 20847                           indf2	equ	0xFDF
 20848                           postinc2	equ	0xFDE
 20849                           postdec2	equ	0xFDD
 20850                           plusw2	equ	0xFDB
 20851                           fsr2h	equ	0xFDA
 20852                           fsr2l	equ	0xFD9
 20853                           status	equ	0xFD8
 20854                           
 20855 ;; *************** function ___flge *****************
 20856 ;; Defined at:
 20857 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
 20858 ;; Parameters:    Size  Location     Type
 20859 ;;  ff1             4    0[BANK0 ] long 
 20860 ;;  ff2             4    4[BANK0 ] long 
 20861 ;; Auto vars:     Size  Location     Type
 20862 ;;		None
 20863 ;; Return value:  Size  Location     Type
 20864 ;;		None               void
 20865 ;; Registers used:
 20866 ;;		wreg, status,2, status,0
 20867 ;; Tracked objects:
 20868 ;;		On entry : 0/0
 20869 ;;		On exit  : 0/0
 20870 ;;		Unchanged: 0/0
 20871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20872 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20874 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20875 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20876 ;;Total ram usage:       12 bytes
 20877 ;; Hardware stack levels used:    1
 20878 ;; Hardware stack levels required when called:    7
 20879 ;; This function calls:
 20880 ;;		Nothing
 20881 ;; This function is called by:
 20882 ;;		_pow
 20883 ;;		_exp
 20884 ;;		_floor
 20885 ;; This function uses a non-reentrant model
 20886 ;;
 20887                           
 20888                           	psect	text114
 20889  012F76                     __ptext114:
 20890                           	opt stack 0
 20891  012F76                     ___flge:
 20892                           	opt stack 19
 20893                           
 20894                           ; BSR set to: 0
 20895                           ;incstack = 0
 20896  012F76  0E00               	movlw	0
 20897  012F78  0100               	movlb	0	; () banked
 20898  012F7A  1560               	andwf	___flge@ff1& (0+255),w,b
 20899  012F7C  6F68               	movwf	??___flge& (0+255),b
 20900  012F7E  0E00               	movlw	0
 20901  012F80  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 20902  012F82  6F69               	movwf	(??___flge+1)& (0+255),b
 20903  012F84  0E80               	movlw	128
 20904  012F86  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 20905  012F88  6F6A               	movwf	(??___flge+2)& (0+255),b
 20906  012F8A  0E7F               	movlw	127
 20907  012F8C  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 20908  012F8E  6F6B               	movwf	(??___flge+3)& (0+255),b
 20909  012F90  5168               	movf	??___flge& (0+255),w,b
 20910  012F92  1169               	iorwf	(??___flge+1)& (0+255),w,b
 20911  012F94  116A               	iorwf	(??___flge+2)& (0+255),w,b
 20912  012F96  116B               	iorwf	(??___flge+3)& (0+255),w,b
 20913  012F98  A4D8               	btfss	status,2,c
 20914  012F9A  D008               	goto	l2625
 20915                           
 20916                           ; BSR set to: 0
 20917  012F9C  0E00               	movlw	0
 20918  012F9E  6F60               	movwf	___flge@ff1& (0+255),b
 20919  012FA0  0E00               	movlw	0
 20920  012FA2  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 20921  012FA4  0E00               	movlw	0
 20922  012FA6  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 20923  012FA8  0E00               	movlw	0
 20924  012FAA  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 20925  012FAC                     l2625:
 20926                           
 20927                           ; BSR set to: 0
 20928                           
 20929                           ; BSR set to: 0
 20930  012FAC  0E00               	movlw	0
 20931  012FAE  1564               	andwf	___flge@ff2& (0+255),w,b
 20932  012FB0  6F68               	movwf	??___flge& (0+255),b
 20933  012FB2  0E00               	movlw	0
 20934  012FB4  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 20935  012FB6  6F69               	movwf	(??___flge+1)& (0+255),b
 20936  012FB8  0E80               	movlw	128
 20937  012FBA  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 20938  012FBC  6F6A               	movwf	(??___flge+2)& (0+255),b
 20939  012FBE  0E7F               	movlw	127
 20940  012FC0  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 20941  012FC2  6F6B               	movwf	(??___flge+3)& (0+255),b
 20942  012FC4  5168               	movf	??___flge& (0+255),w,b
 20943  012FC6  1169               	iorwf	(??___flge+1)& (0+255),w,b
 20944  012FC8  116A               	iorwf	(??___flge+2)& (0+255),w,b
 20945  012FCA  116B               	iorwf	(??___flge+3)& (0+255),w,b
 20946  012FCC  A4D8               	btfss	status,2,c
 20947  012FCE  D008               	goto	l2626
 20948                           
 20949                           ; BSR set to: 0
 20950  012FD0  0E00               	movlw	0
 20951  012FD2  6F64               	movwf	___flge@ff2& (0+255),b
 20952  012FD4  0E00               	movlw	0
 20953  012FD6  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 20954  012FD8  0E00               	movlw	0
 20955  012FDA  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 20956  012FDC  0E00               	movlw	0
 20957  012FDE  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 20958  012FE0                     l2626:
 20959                           
 20960                           ; BSR set to: 0
 20961                           
 20962                           ; BSR set to: 0
 20963  012FE0  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 20964  012FE2  D01D               	goto	l2627
 20965                           
 20966                           ; BSR set to: 0
 20967  012FE4  C060  F068         	movff	___flge@ff1,??___flge
 20968  012FE8  C061  F069         	movff	___flge@ff1+1,??___flge+1
 20969  012FEC  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 20970  012FF0  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 20971  012FF4  1F68               	comf	??___flge& (0+255),f,b
 20972  012FF6  1F69               	comf	(??___flge+1)& (0+255),f,b
 20973  012FF8  1F6A               	comf	(??___flge+2)& (0+255),f,b
 20974  012FFA  1F6B               	comf	(??___flge+3)& (0+255),f,b
 20975  012FFC  2B68               	incf	??___flge& (0+255),f,b
 20976  012FFE  0E00               	movlw	0
 20977  013000  2369               	addwfc	(??___flge+1)& (0+255),f,b
 20978  013002  236A               	addwfc	(??___flge+2)& (0+255),f,b
 20979  013004  236B               	addwfc	(??___flge+3)& (0+255),f,b
 20980  013006  0E00               	movlw	0
 20981  013008  2568               	addwf	??___flge& (0+255),w,b
 20982  01300A  6F60               	movwf	___flge@ff1& (0+255),b
 20983  01300C  0E00               	movlw	0
 20984  01300E  2169               	addwfc	(??___flge+1)& (0+255),w,b
 20985  013010  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 20986  013012  0E00               	movlw	0
 20987  013014  216A               	addwfc	(??___flge+2)& (0+255),w,b
 20988  013016  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 20989  013018  0E80               	movlw	128
 20990  01301A  216B               	addwfc	(??___flge+3)& (0+255),w,b
 20991  01301C  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 20992  01301E                     l2627:
 20993                           
 20994                           ; BSR set to: 0
 20995                           
 20996                           ; BSR set to: 0
 20997  01301E  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 20998  013020  D01D               	goto	l2628
 20999                           
 21000                           ; BSR set to: 0
 21001  013022  C064  F068         	movff	___flge@ff2,??___flge
 21002  013026  C065  F069         	movff	___flge@ff2+1,??___flge+1
 21003  01302A  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 21004  01302E  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 21005  013032  1F68               	comf	??___flge& (0+255),f,b
 21006  013034  1F69               	comf	(??___flge+1)& (0+255),f,b
 21007  013036  1F6A               	comf	(??___flge+2)& (0+255),f,b
 21008  013038  1F6B               	comf	(??___flge+3)& (0+255),f,b
 21009  01303A  2B68               	incf	??___flge& (0+255),f,b
 21010  01303C  0E00               	movlw	0
 21011  01303E  2369               	addwfc	(??___flge+1)& (0+255),f,b
 21012  013040  236A               	addwfc	(??___flge+2)& (0+255),f,b
 21013  013042  236B               	addwfc	(??___flge+3)& (0+255),f,b
 21014  013044  0E00               	movlw	0
 21015  013046  2568               	addwf	??___flge& (0+255),w,b
 21016  013048  6F64               	movwf	___flge@ff2& (0+255),b
 21017  01304A  0E00               	movlw	0
 21018  01304C  2169               	addwfc	(??___flge+1)& (0+255),w,b
 21019  01304E  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 21020  013050  0E00               	movlw	0
 21021  013052  216A               	addwfc	(??___flge+2)& (0+255),w,b
 21022  013054  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 21023  013056  0E80               	movlw	128
 21024  013058  216B               	addwfc	(??___flge+3)& (0+255),w,b
 21025  01305A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 21026  01305C                     l2628:
 21027                           
 21028                           ; BSR set to: 0
 21029  01305C  0E00               	movlw	0
 21030  01305E  1B60               	xorwf	___flge@ff1& (0+255),f,b
 21031  013060  0E00               	movlw	0
 21032  013062  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 21033  013064  0E00               	movlw	0
 21034  013066  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 21035  013068  0E80               	movlw	128
 21036  01306A  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 21037  01306C  0E00               	movlw	0
 21038  01306E  1B64               	xorwf	___flge@ff2& (0+255),f,b
 21039  013070  0E00               	movlw	0
 21040  013072  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 21041  013074  0E00               	movlw	0
 21042  013076  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 21043  013078  0E80               	movlw	128
 21044  01307A  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 21045  01307C  5164               	movf	___flge@ff2& (0+255),w,b
 21046  01307E  5D60               	subwf	___flge@ff1& (0+255),w,b
 21047  013080  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 21048  013082  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 21049  013084  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 21050  013086  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 21051  013088  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 21052  01308A  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 21053  01308C  B0D8               	btfsc	status,0,c
 21054  01308E  D002               	goto	l12438
 21055                           
 21056                           ; BSR set to: 0
 21057  013090  90D8               	bcf	status,0,c
 21058  013092  0012               	return	
 21059  013094                     l12438:
 21060                           
 21061                           ; BSR set to: 0
 21062                           
 21063                           ; BSR set to: 0
 21064  013094  80D8               	bsf	status,0,c
 21065                           
 21066                           ; BSR set to: 0
 21067  013096  0012               	return	
 21068  013098                     __end_of___flge:
 21069                           	opt stack 0
 21070                           tosu	equ	0xFFF
 21071                           tosh	equ	0xFFE
 21072                           tosl	equ	0xFFD
 21073                           pclath	equ	0xFFA
 21074                           tblptru	equ	0xFF8
 21075                           tblptrh	equ	0xFF7
 21076                           tblptrl	equ	0xFF6
 21077                           tablat	equ	0xFF5
 21078                           prodh	equ	0xFF4
 21079                           prodl	equ	0xFF3
 21080                           intcon	equ	0xFF2
 21081                           indf0	equ	0xFEF
 21082                           postinc0	equ	0xFEE
 21083                           fsr0h	equ	0xFEA
 21084                           fsr0l	equ	0xFE9
 21085                           wreg	equ	0xFE8
 21086                           indf1	equ	0xFE7
 21087                           postdec1	equ	0xFE5
 21088                           plusw1	equ	0xFE3
 21089                           fsr1h	equ	0xFE2
 21090                           fsr1l	equ	0xFE1
 21091                           indf2	equ	0xFDF
 21092                           postinc2	equ	0xFDE
 21093                           postdec2	equ	0xFDD
 21094                           plusw2	equ	0xFDB
 21095                           fsr2h	equ	0xFDA
 21096                           fsr2l	equ	0xFD9
 21097                           status	equ	0xFD8
 21098                           
 21099 ;; *************** function _eval_poly *****************
 21100 ;; Defined at:
 21101 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
 21102 ;; Parameters:    Size  Location     Type
 21103 ;;  x               4   63[BANK0 ] long 
 21104 ;;  d               2   67[BANK0 ] PTR const 
 21105 ;;		 -> log@coeff(36), exp@coeff(40), 
 21106 ;;  n               2   69[BANK0 ] int 
 21107 ;; Auto vars:     Size  Location     Type
 21108 ;;  res             4   75[BANK0 ] int 
 21109 ;; Return value:  Size  Location     Type
 21110 ;;                  4   63[BANK0 ] int 
 21111 ;; Registers used:
 21112 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21113 ;; Tracked objects:
 21114 ;;		On entry : 0/0
 21115 ;;		On exit  : 0/0
 21116 ;;		Unchanged: 0/0
 21117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21118 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21119 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21120 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21121 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21122 ;;Total ram usage:       16 bytes
 21123 ;; Hardware stack levels used:    1
 21124 ;; Hardware stack levels required when called:    8
 21125 ;; This function calls:
 21126 ;;		___fladd
 21127 ;;		___flmul
 21128 ;; This function is called by:
 21129 ;;		_exp
 21130 ;;		_log
 21131 ;; This function uses a non-reentrant model
 21132 ;;
 21133                           
 21134                           	psect	text115
 21135  0132BC                     __ptext115:
 21136                           	opt stack 0
 21137  0132BC                     _eval_poly:
 21138                           	opt stack 19
 21139                           
 21140                           ; BSR set to: 0
 21141                           ;incstack = 0
 21142  0132BC  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 21143  0132C0  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 21144  0132C4  0100               	movlb	0	; () banked
 21145  0132C6  90D8               	bcf	status,0,c
 21146  0132C8  37A7               	rlcf	??_eval_poly& (0+255),f,b
 21147  0132CA  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21148  0132CC  90D8               	bcf	status,0,c
 21149  0132CE  37A7               	rlcf	??_eval_poly& (0+255),f,b
 21150  0132D0  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21151  0132D2  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 21152  0132D6  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 21153  0132DA  51A7               	movf	??_eval_poly& (0+255),w,b
 21154  0132DC  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 21155  0132DE  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 21156  0132E0  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 21157  0132E2  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 21158  0132E6  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 21159  0132EA                     	if	0	;tblptru may be non-zero
 21160  0132EA                     	endif
 21161  0132EA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21162  0132EA  0E00               	movlw	low (__mediumconst shr (0+16))
 21163  0132EC  6EF8               	movwf	tblptru,c
 21164  0132EE                     	endif
 21165  0132EE  0009               	tblrd		*+
 21166  0132F0  CFF5 F0AB          	movff	tablat,eval_poly@res
 21167  0132F4  0009               	tblrd		*+
 21168  0132F6  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 21169  0132FA  0009               	tblrd		*+
 21170  0132FC  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 21171  013300  000A               	tblrd		*-
 21172  013302  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 21173  013306  D04C               	goto	l3069
 21174  013308                     
 21175                           ; BSR set to: 0
 21176                           
 21177                           ; BSR set to: 0
 21178  013308  C0AB  F072         	movff	eval_poly@res,___flmul@a
 21179  01330C  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 21180  013310  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 21181  013314  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 21182  013318  C09F  F06E         	movff	eval_poly@x,___flmul@b
 21183  01331C  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 21184  013320  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 21185  013324  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 21186  013328  ECD2  F081         	call	___flmul	;wreg free
 21187  01332C  C06E  F08B         	movff	?___flmul,___fladd@b
 21188  013330  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 21189  013334  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 21190  013338  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 21191  01333C  0100               	movlb	0	; () banked
 21192  01333E  07A5               	decf	eval_poly@n& (0+255),f,b
 21193  013340  A0D8               	btfss	status,0,c
 21194  013342  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 21195  013344  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 21196  013348  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 21197  01334C  90D8               	bcf	status,0,c
 21198  01334E  37A7               	rlcf	??_eval_poly& (0+255),f,b
 21199  013350  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21200  013352  90D8               	bcf	status,0,c
 21201  013354  37A7               	rlcf	??_eval_poly& (0+255),f,b
 21202  013356  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21203  013358  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 21204  01335C  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 21205  013360  51A7               	movf	??_eval_poly& (0+255),w,b
 21206  013362  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 21207  013364  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 21208  013366  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 21209  013368  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 21210  01336C  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 21211  013370                     	if	0	;tblptru may be non-zero
 21212  013370                     	endif
 21213  013370                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21214  013370  0E00               	movlw	low (__mediumconst shr (0+16))
 21215  013372  6EF8               	movwf	tblptru,c
 21216  013374                     	endif
 21217  013374  0009               	tblrd		*+
 21218  013376  CFF5 F08F          	movff	tablat,___fladd@a
 21219  01337A  0009               	tblrd		*+
 21220  01337C  CFF5 F090          	movff	tablat,___fladd@a+1
 21221  013380  0009               	tblrd		*+
 21222  013382  CFF5 F091          	movff	tablat,___fladd@a+2
 21223  013386  000A               	tblrd		*-
 21224  013388  CFF5 F092          	movff	tablat,___fladd@a+3
 21225  01338C  EC7B  F083         	call	___fladd	;wreg free
 21226  013390  C08B  F0AB         	movff	?___fladd,eval_poly@res
 21227  013394  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 21228  013398  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 21229  01339C  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 21230  0133A0                     l3069:
 21231  0133A0  0100               	movlb	0	; () banked
 21232  0133A2  51A5               	movf	eval_poly@n& (0+255),w,b
 21233  0133A4  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 21234  0133A6  A4D8               	btfss	status,2,c
 21235  0133A8  D7AF               	goto	l3070
 21236                           
 21237                           ; BSR set to: 0
 21238  0133AA  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 21239  0133AE  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 21240  0133B2  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 21241  0133B6  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 21242                           
 21243                           ; BSR set to: 0
 21244  0133BA  0012               	return		;funcret
 21245  0133BC                     __end_of_eval_poly:
 21246                           	opt stack 0
 21247                           tosu	equ	0xFFF
 21248                           tosh	equ	0xFFE
 21249                           tosl	equ	0xFFD
 21250                           pclath	equ	0xFFA
 21251                           tblptru	equ	0xFF8
 21252                           tblptrh	equ	0xFF7
 21253                           tblptrl	equ	0xFF6
 21254                           tablat	equ	0xFF5
 21255                           prodh	equ	0xFF4
 21256                           prodl	equ	0xFF3
 21257                           intcon	equ	0xFF2
 21258                           indf0	equ	0xFEF
 21259                           postinc0	equ	0xFEE
 21260                           fsr0h	equ	0xFEA
 21261                           fsr0l	equ	0xFE9
 21262                           wreg	equ	0xFE8
 21263                           indf1	equ	0xFE7
 21264                           postdec1	equ	0xFE5
 21265                           plusw1	equ	0xFE3
 21266                           fsr1h	equ	0xFE2
 21267                           fsr1l	equ	0xFE1
 21268                           indf2	equ	0xFDF
 21269                           postinc2	equ	0xFDE
 21270                           postdec2	equ	0xFDD
 21271                           plusw2	equ	0xFDB
 21272                           fsr2h	equ	0xFDA
 21273                           fsr2l	equ	0xFD9
 21274                           status	equ	0xFD8
 21275                           
 21276 ;; *************** function ___flmul *****************
 21277 ;; Defined at:
 21278 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
 21279 ;; Parameters:    Size  Location     Type
 21280 ;;  b               4   14[BANK0 ] int 
 21281 ;;  a               4   18[BANK0 ] int 
 21282 ;; Auto vars:     Size  Location     Type
 21283 ;;  prod            4   33[BANK0 ] struct .
 21284 ;;  grs             4   28[BANK0 ] unsigned long 
 21285 ;;  temp            2   37[BANK0 ] struct .
 21286 ;;  bexp            1   32[BANK0 ] unsigned char 
 21287 ;;  aexp            1   27[BANK0 ] unsigned char 
 21288 ;;  sign            1   26[BANK0 ] unsigned char 
 21289 ;; Return value:  Size  Location     Type
 21290 ;;                  4   14[BANK0 ] unsigned char 
 21291 ;; Registers used:
 21292 ;;		wreg, status,2, status,0, prodl, prodh
 21293 ;; Tracked objects:
 21294 ;;		On entry : 0/0
 21295 ;;		On exit  : 0/0
 21296 ;;		Unchanged: 0/0
 21297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21298 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21299 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21300 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21301 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21302 ;;Total ram usage:       25 bytes
 21303 ;; Hardware stack levels used:    1
 21304 ;; Hardware stack levels required when called:    7
 21305 ;; This function calls:
 21306 ;;		Nothing
 21307 ;; This function is called by:
 21308 ;;		_ADCAverage
 21309 ;;		_pow
 21310 ;;		_exp
 21311 ;;		_log
 21312 ;;		_eval_poly
 21313 ;;		_ADC_Voltage
 21314 ;;		_Move_ADC_To
 21315 ;; This function uses a non-reentrant model
 21316 ;;
 21317                           
 21318                           	psect	text116
 21319  0103A4                     __ptext116:
 21320                           	opt stack 0
 21321  0103A4                     ___flmul:
 21322                           	opt stack 19
 21323                           
 21324                           ; BSR set to: 0
 21325                           ;incstack = 0
 21326  0103A4  0100               	movlb	0	; () banked
 21327  0103A6  5171               	movf	(___flmul@b+3)& (0+255),w,b
 21328  0103A8  0B80               	andlw	128
 21329  0103AA  6F7A               	movwf	___flmul@sign& (0+255),b
 21330  0103AC  5171               	movf	(___flmul@b+3)& (0+255),w,b
 21331  0103AE  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 21332  0103B0  6F80               	movwf	___flmul@bexp& (0+255),b
 21333                           
 21334                           ; BSR set to: 0
 21335  0103B2  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 21336                           
 21337                           ; BSR set to: 0
 21338  0103B4  8180               	bsf	___flmul@bexp& (0+255),0,b
 21339                           
 21340                           ; BSR set to: 0
 21341                           
 21342                           ; BSR set to: 0
 21343  0103B6  5180               	movf	___flmul@bexp& (0+255),w,b
 21344  0103B8  B4D8               	btfsc	status,2,c
 21345  0103BA  D00D               	goto	l2960
 21346                           
 21347                           ; BSR set to: 0
 21348  0103BC  2980               	incf	___flmul@bexp& (0+255),w,b
 21349  0103BE  A4D8               	btfss	status,2,c
 21350  0103C0  D008               	goto	l2961
 21351                           
 21352                           ; BSR set to: 0
 21353  0103C2  0E00               	movlw	0
 21354  0103C4  6F6E               	movwf	___flmul@b& (0+255),b
 21355  0103C6  0E00               	movlw	0
 21356  0103C8  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 21357  0103CA  0E00               	movlw	0
 21358  0103CC  6F70               	movwf	(___flmul@b+2)& (0+255),b
 21359  0103CE  0E00               	movlw	0
 21360  0103D0  6F71               	movwf	(___flmul@b+3)& (0+255),b
 21361  0103D2                     l2961:
 21362                           
 21363                           ; BSR set to: 0
 21364                           
 21365                           ; BSR set to: 0
 21366  0103D2  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 21367  0103D4  D008               	goto	l2962
 21368  0103D6                     l2960:
 21369                           
 21370                           ; BSR set to: 0
 21371                           
 21372                           ; BSR set to: 0
 21373  0103D6  0E00               	movlw	0
 21374  0103D8  6F6E               	movwf	___flmul@b& (0+255),b
 21375  0103DA  0E00               	movlw	0
 21376  0103DC  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 21377  0103DE  0E00               	movlw	0
 21378  0103E0  6F70               	movwf	(___flmul@b+2)& (0+255),b
 21379  0103E2  0E00               	movlw	0
 21380  0103E4  6F71               	movwf	(___flmul@b+3)& (0+255),b
 21381  0103E6                     l2962:
 21382                           
 21383                           ; BSR set to: 0
 21384                           
 21385                           ; BSR set to: 0
 21386  0103E6  5175               	movf	(___flmul@a+3)& (0+255),w,b
 21387  0103E8  0B80               	andlw	128
 21388  0103EA  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 21389                           
 21390                           ; BSR set to: 0
 21391  0103EC  5175               	movf	(___flmul@a+3)& (0+255),w,b
 21392  0103EE  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 21393  0103F0  6F7B               	movwf	___flmul@aexp& (0+255),b
 21394                           
 21395                           ; BSR set to: 0
 21396  0103F2  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 21397                           
 21398                           ; BSR set to: 0
 21399  0103F4  817B               	bsf	___flmul@aexp& (0+255),0,b
 21400                           
 21401                           ; BSR set to: 0
 21402                           
 21403                           ; BSR set to: 0
 21404  0103F6  517B               	movf	___flmul@aexp& (0+255),w,b
 21405  0103F8  B4D8               	btfsc	status,2,c
 21406  0103FA  D00D               	goto	l2964
 21407                           
 21408                           ; BSR set to: 0
 21409  0103FC  297B               	incf	___flmul@aexp& (0+255),w,b
 21410  0103FE  A4D8               	btfss	status,2,c
 21411  010400  D008               	goto	l2965
 21412                           
 21413                           ; BSR set to: 0
 21414  010402  0E00               	movlw	0
 21415  010404  6F72               	movwf	___flmul@a& (0+255),b
 21416  010406  0E00               	movlw	0
 21417  010408  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21418  01040A  0E00               	movlw	0
 21419  01040C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21420  01040E  0E00               	movlw	0
 21421  010410  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21422  010412                     l2965:
 21423                           
 21424                           ; BSR set to: 0
 21425                           
 21426                           ; BSR set to: 0
 21427  010412  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 21428  010414  D008               	goto	l2966
 21429  010416                     l2964:
 21430                           
 21431                           ; BSR set to: 0
 21432                           
 21433                           ; BSR set to: 0
 21434  010416  0E00               	movlw	0
 21435  010418  6F72               	movwf	___flmul@a& (0+255),b
 21436  01041A  0E00               	movlw	0
 21437  01041C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21438  01041E  0E00               	movlw	0
 21439  010420  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21440  010422  0E00               	movlw	0
 21441  010424  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21442  010426                     l2966:
 21443                           
 21444                           ; BSR set to: 0
 21445  010426  517B               	movf	___flmul@aexp& (0+255),w,b
 21446  010428  B4D8               	btfsc	status,2,c
 21447  01042A  D003               	goto	u10490
 21448                           
 21449                           ; BSR set to: 0
 21450  01042C  5180               	movf	___flmul@bexp& (0+255),w,b
 21451  01042E  A4D8               	btfss	status,2,c
 21452  010430  D009               	goto	l2967
 21453  010432                     u10490:
 21454                           
 21455                           ; BSR set to: 0
 21456                           
 21457                           ; BSR set to: 0
 21458  010432  0E00               	movlw	0
 21459  010434  6F6E               	movwf	?___flmul& (0+255),b
 21460  010436  0E00               	movlw	0
 21461  010438  6F6F               	movwf	(?___flmul+1)& (0+255),b
 21462  01043A  0E00               	movlw	0
 21463  01043C  6F70               	movwf	(?___flmul+2)& (0+255),b
 21464  01043E  0E00               	movlw	0
 21465  010440  6F71               	movwf	(?___flmul+3)& (0+255),b
 21466                           
 21467                           ; BSR set to: 0
 21468  010442  0012               	return	
 21469  010444                     l2967:
 21470                           
 21471                           ; BSR set to: 0
 21472                           
 21473                           ; BSR set to: 0
 21474  010444  5174               	movf	(___flmul@a+2)& (0+255),w,b
 21475  010446  036E               	mulwf	___flmul@b& (0+255),b
 21476  010448  CFF3 F085          	movff	prodl,___flmul@temp
 21477  01044C  CFF4 F086          	movff	prodh,___flmul@temp+1
 21478                           
 21479                           ; BSR set to: 0
 21480  010450  5185               	movf	___flmul@temp& (0+255),w,b
 21481  010452  6F7C               	movwf	___flmul@grs& (0+255),b
 21482  010454  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 21483  010456  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 21484  010458  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 21485                           
 21486                           ; BSR set to: 0
 21487  01045A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21488  01045C  6F81               	movwf	___flmul@prod& (0+255),b
 21489  01045E  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 21490  010460  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 21491  010462  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 21492  010464  5173               	movf	(___flmul@a+1)& (0+255),w,b
 21493  010466  036F               	mulwf	(___flmul@b+1)& (0+255),b
 21494  010468  CFF3 F085          	movff	prodl,___flmul@temp
 21495  01046C  CFF4 F086          	movff	prodh,___flmul@temp+1
 21496                           
 21497                           ; BSR set to: 0
 21498  010470  5185               	movf	___flmul@temp& (0+255),w,b
 21499  010472  277C               	addwf	___flmul@grs& (0+255),f,b
 21500  010474  0E00               	movlw	0
 21501  010476  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 21502  010478  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 21503  01047A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 21504                           
 21505                           ; BSR set to: 0
 21506  01047C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21507  01047E  2781               	addwf	___flmul@prod& (0+255),f,b
 21508  010480  0E00               	movlw	0
 21509  010482  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 21510  010484  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 21511  010486  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 21512  010488  5172               	movf	___flmul@a& (0+255),w,b
 21513  01048A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 21514  01048C  CFF3 F085          	movff	prodl,___flmul@temp
 21515  010490  CFF4 F086          	movff	prodh,___flmul@temp+1
 21516                           
 21517                           ; BSR set to: 0
 21518  010494  5185               	movf	___flmul@temp& (0+255),w,b
 21519  010496  277C               	addwf	___flmul@grs& (0+255),f,b
 21520  010498  0E00               	movlw	0
 21521  01049A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 21522  01049C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 21523  01049E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 21524                           
 21525                           ; BSR set to: 0
 21526  0104A0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21527  0104A2  2781               	addwf	___flmul@prod& (0+255),f,b
 21528  0104A4  0E00               	movlw	0
 21529  0104A6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 21530  0104A8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 21531  0104AA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 21532                           
 21533                           ; BSR set to: 0
 21534  0104AC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 21535  0104B0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 21536  0104B4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 21537  0104B8  6B7C               	clrf	___flmul@grs& (0+255),b
 21538                           
 21539                           ; BSR set to: 0
 21540  0104BA  5172               	movf	___flmul@a& (0+255),w,b
 21541  0104BC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 21542  0104BE  CFF3 F085          	movff	prodl,___flmul@temp
 21543  0104C2  CFF4 F086          	movff	prodh,___flmul@temp+1
 21544                           
 21545                           ; BSR set to: 0
 21546  0104C6  5185               	movf	___flmul@temp& (0+255),w,b
 21547  0104C8  277C               	addwf	___flmul@grs& (0+255),f,b
 21548  0104CA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21549  0104CC  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 21550  0104CE  0E00               	movlw	0
 21551  0104D0  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 21552  0104D2  0E00               	movlw	0
 21553  0104D4  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 21554                           
 21555                           ; BSR set to: 0
 21556  0104D6  5173               	movf	(___flmul@a+1)& (0+255),w,b
 21557  0104D8  036E               	mulwf	___flmul@b& (0+255),b
 21558  0104DA  CFF3 F085          	movff	prodl,___flmul@temp
 21559  0104DE  CFF4 F086          	movff	prodh,___flmul@temp+1
 21560                           
 21561                           ; BSR set to: 0
 21562  0104E2  5185               	movf	___flmul@temp& (0+255),w,b
 21563  0104E4  277C               	addwf	___flmul@grs& (0+255),f,b
 21564  0104E6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21565  0104E8  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 21566  0104EA  0E00               	movlw	0
 21567  0104EC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 21568  0104EE  0E00               	movlw	0
 21569  0104F0  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 21570                           
 21571                           ; BSR set to: 0
 21572  0104F2  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 21573  0104F6  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 21574  0104FA  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 21575  0104FE  6B7C               	clrf	___flmul@grs& (0+255),b
 21576  010500  5172               	movf	___flmul@a& (0+255),w,b
 21577  010502  036E               	mulwf	___flmul@b& (0+255),b
 21578  010504  CFF3 F085          	movff	prodl,___flmul@temp
 21579  010508  CFF4 F086          	movff	prodh,___flmul@temp+1
 21580                           
 21581                           ; BSR set to: 0
 21582  01050C  5185               	movf	___flmul@temp& (0+255),w,b
 21583  01050E  277C               	addwf	___flmul@grs& (0+255),f,b
 21584  010510  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21585  010512  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 21586  010514  0E00               	movlw	0
 21587  010516  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 21588  010518  0E00               	movlw	0
 21589  01051A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 21590                           
 21591                           ; BSR set to: 0
 21592  01051C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 21593  01051E  036F               	mulwf	(___flmul@b+1)& (0+255),b
 21594  010520  CFF3 F085          	movff	prodl,___flmul@temp
 21595  010524  CFF4 F086          	movff	prodh,___flmul@temp+1
 21596  010528  5185               	movf	___flmul@temp& (0+255),w,b
 21597  01052A  2781               	addwf	___flmul@prod& (0+255),f,b
 21598  01052C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21599  01052E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 21600  010530  0E00               	movlw	0
 21601  010532  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 21602  010534  0E00               	movlw	0
 21603  010536  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 21604                           
 21605                           ; BSR set to: 0
 21606  010538  5173               	movf	(___flmul@a+1)& (0+255),w,b
 21607  01053A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 21608  01053C  CFF3 F085          	movff	prodl,___flmul@temp
 21609  010540  CFF4 F086          	movff	prodh,___flmul@temp+1
 21610                           
 21611                           ; BSR set to: 0
 21612  010544  5185               	movf	___flmul@temp& (0+255),w,b
 21613  010546  2781               	addwf	___flmul@prod& (0+255),f,b
 21614  010548  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21615  01054A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 21616  01054C  0E00               	movlw	0
 21617  01054E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 21618  010550  0E00               	movlw	0
 21619  010552  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 21620  010554  5174               	movf	(___flmul@a+2)& (0+255),w,b
 21621  010556  0370               	mulwf	(___flmul@b+2)& (0+255),b
 21622  010558  CFF3 F085          	movff	prodl,___flmul@temp
 21623  01055C  CFF4 F086          	movff	prodh,___flmul@temp+1
 21624                           
 21625                           ; BSR set to: 0
 21626  010560  5185               	movf	___flmul@temp& (0+255),w,b
 21627  010562  6F76               	movwf	??___flmul& (0+255),b
 21628  010564  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21629  010566  6F77               	movwf	(??___flmul+1)& (0+255),b
 21630  010568  6B78               	clrf	(??___flmul+2)& (0+255),b
 21631  01056A  6B79               	clrf	(??___flmul+3)& (0+255),b
 21632  01056C  C078  F079         	movff	??___flmul+2,??___flmul+3
 21633  010570  C077  F078         	movff	??___flmul+1,??___flmul+2
 21634  010574  C076  F077         	movff	??___flmul,??___flmul+1
 21635  010578  6B76               	clrf	??___flmul& (0+255),b
 21636  01057A  5176               	movf	??___flmul& (0+255),w,b
 21637  01057C  2781               	addwf	___flmul@prod& (0+255),f,b
 21638  01057E  5177               	movf	(??___flmul+1)& (0+255),w,b
 21639  010580  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 21640  010582  5178               	movf	(??___flmul+2)& (0+255),w,b
 21641  010584  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 21642  010586  5179               	movf	(??___flmul+3)& (0+255),w,b
 21643  010588  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 21644                           
 21645                           ; BSR set to: 0
 21646  01058A  C07C  F076         	movff	___flmul@grs,??___flmul
 21647  01058E  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 21648  010592  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 21649  010596  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 21650  01059A  0E19               	movlw	25
 21651  01059C  D005               	goto	u10500
 21652  01059E                     u10505:
 21653  01059E  90D8               	bcf	status,0,c
 21654  0105A0  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 21655  0105A2  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 21656  0105A4  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 21657  0105A6  3376               	rrcf	??___flmul& (0+255),f,b
 21658  0105A8                     u10500:
 21659  0105A8  2EE8               	decfsz	wreg,f,c
 21660  0105AA  D7F9               	goto	u10505
 21661  0105AC  5176               	movf	??___flmul& (0+255),w,b
 21662  0105AE  2781               	addwf	___flmul@prod& (0+255),f,b
 21663  0105B0  5177               	movf	(??___flmul+1)& (0+255),w,b
 21664  0105B2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 21665  0105B4  5178               	movf	(??___flmul+2)& (0+255),w,b
 21666  0105B6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 21667  0105B8  5179               	movf	(??___flmul+3)& (0+255),w,b
 21668  0105BA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 21669                           
 21670                           ; BSR set to: 0
 21671  0105BC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 21672  0105C0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 21673  0105C4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 21674  0105C8  6B7C               	clrf	___flmul@grs& (0+255),b
 21675                           
 21676                           ; BSR set to: 0
 21677  0105CA  517B               	movf	___flmul@aexp& (0+255),w,b
 21678  0105CC  C080  F076         	movff	___flmul@bexp,??___flmul
 21679  0105D0  6B77               	clrf	(??___flmul+1)& (0+255),b
 21680  0105D2  2776               	addwf	??___flmul& (0+255),f,b
 21681  0105D4  0E00               	movlw	0
 21682  0105D6  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 21683  0105D8  0E82               	movlw	130
 21684  0105DA  2576               	addwf	??___flmul& (0+255),w,b
 21685  0105DC  6F85               	movwf	___flmul@temp& (0+255),b
 21686  0105DE  0EFF               	movlw	255
 21687  0105E0  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 21688  0105E2  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 21689  0105E4  D00F               	goto	l2971
 21690  0105E6                     
 21691                           ; BSR set to: 0
 21692                           
 21693                           ; BSR set to: 0
 21694  0105E6  90D8               	bcf	status,0,c
 21695  0105E8  3781               	rlcf	___flmul@prod& (0+255),f,b
 21696  0105EA  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 21697  0105EC  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 21698  0105EE  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 21699                           
 21700                           ; BSR set to: 0
 21701  0105F0  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 21702                           
 21703                           ; BSR set to: 0
 21704  0105F2  8181               	bsf	___flmul@prod& (0+255),0,b
 21705                           
 21706                           ; BSR set to: 0
 21707  0105F4  90D8               	bcf	status,0,c
 21708  0105F6  377C               	rlcf	___flmul@grs& (0+255),f,b
 21709  0105F8  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 21710  0105FA  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 21711  0105FC  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 21712  0105FE  0785               	decf	___flmul@temp& (0+255),f,b
 21713  010600  A0D8               	btfss	status,0,c
 21714  010602  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 21715  010604                     l2971:
 21716                           
 21717                           ; BSR set to: 0
 21718                           
 21719                           ; BSR set to: 0
 21720  010604  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 21721  010606  D7EF               	goto	l2972
 21722                           
 21723                           ; BSR set to: 0
 21724                           
 21725                           ; BSR set to: 0
 21726  010608  0E00               	movlw	0
 21727  01060A  6F7B               	movwf	___flmul@aexp& (0+255),b
 21728                           
 21729                           ; BSR set to: 0
 21730  01060C  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 21731  01060E  D016               	goto	l2978
 21732                           
 21733                           ; BSR set to: 0
 21734  010610  0EFF               	movlw	255
 21735  010612  157C               	andwf	___flmul@grs& (0+255),w,b
 21736  010614  6F76               	movwf	??___flmul& (0+255),b
 21737  010616  0EFF               	movlw	255
 21738  010618  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 21739  01061A  6F77               	movwf	(??___flmul+1)& (0+255),b
 21740  01061C  0EFF               	movlw	255
 21741  01061E  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 21742  010620  6F78               	movwf	(??___flmul+2)& (0+255),b
 21743  010622  0E7F               	movlw	127
 21744  010624  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 21745  010626  6F79               	movwf	(??___flmul+3)& (0+255),b
 21746  010628  5176               	movf	??___flmul& (0+255),w,b
 21747  01062A  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 21748  01062C  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 21749  01062E  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 21750  010630  A4D8               	btfss	status,2,c
 21751  010632  D002               	goto	u10550
 21752                           
 21753                           ; BSR set to: 0
 21754                           
 21755                           ; BSR set to: 0
 21756  010634  A181               	btfss	___flmul@prod& (0+255),0,b
 21757  010636  D002               	goto	l2978
 21758  010638                     u10550:
 21759                           
 21760                           ; BSR set to: 0
 21761  010638  0E01               	movlw	1
 21762  01063A  6F7B               	movwf	___flmul@aexp& (0+255),b
 21763  01063C                     l2978:
 21764                           
 21765                           ; BSR set to: 0
 21766                           
 21767                           ; BSR set to: 0
 21768                           
 21769                           ; BSR set to: 0
 21770  01063C  517B               	movf	___flmul@aexp& (0+255),w,b
 21771  01063E  B4D8               	btfsc	status,2,c
 21772  010640  D01F               	goto	l2980
 21773                           
 21774                           ; BSR set to: 0
 21775  010642  0E01               	movlw	1
 21776  010644  2781               	addwf	___flmul@prod& (0+255),f,b
 21777  010646  0E00               	movlw	0
 21778  010648  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 21779  01064A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 21780  01064C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 21781                           
 21782                           ; BSR set to: 0
 21783  01064E  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 21784  010650  D017               	goto	l2980
 21785                           
 21786                           ; BSR set to: 0
 21787  010652  C081  F076         	movff	___flmul@prod,??___flmul
 21788  010656  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 21789  01065A  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 21790  01065E  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 21791  010662  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 21792  010664  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 21793  010666  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 21794  010668  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 21795  01066A  3376               	rrcf	??___flmul& (0+255),f,b
 21796  01066C  C076  F081         	movff	??___flmul,___flmul@prod
 21797  010670  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 21798  010674  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 21799  010678  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 21800                           
 21801                           ; BSR set to: 0
 21802  01067C  4B85               	infsnz	___flmul@temp& (0+255),f,b
 21803  01067E  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 21804  010680                     l2980:
 21805                           
 21806                           ; BSR set to: 0
 21807                           
 21808                           ; BSR set to: 0
 21809                           
 21810                           ; BSR set to: 0
 21811  010680  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 21812  010682  D00D               	goto	l2981
 21813  010684  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21814  010686  E103               	bnz	u10580
 21815  010688  2985               	incf	___flmul@temp& (0+255),w,b
 21816  01068A  A0D8               	btfss	status,0,c
 21817  01068C  D008               	goto	l2981
 21818  01068E                     u10580:
 21819                           
 21820                           ; BSR set to: 0
 21821  01068E  0E00               	movlw	0
 21822  010690  6F81               	movwf	___flmul@prod& (0+255),b
 21823  010692  0E00               	movlw	0
 21824  010694  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 21825  010696  0E80               	movlw	128
 21826  010698  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 21827  01069A  0E7F               	movlw	127
 21828  01069C  D020               	goto	L11
 21829  01069E                     l2981:
 21830                           
 21831                           ; BSR set to: 0
 21832                           
 21833                           ; BSR set to: 0
 21834  01069E  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 21835  0106A0  D005               	goto	u10590
 21836  0106A2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 21837  0106A4  E10E               	bnz	l2983
 21838  0106A6  0585               	decf	___flmul@temp& (0+255),w,b
 21839  0106A8  B0D8               	btfsc	status,0,c
 21840  0106AA  D00B               	goto	l2983
 21841  0106AC                     u10590:
 21842                           
 21843                           ; BSR set to: 0
 21844  0106AC  0E00               	movlw	0
 21845  0106AE  6F81               	movwf	___flmul@prod& (0+255),b
 21846  0106B0  0E00               	movlw	0
 21847  0106B2  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 21848  0106B4  0E00               	movlw	0
 21849  0106B6  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 21850  0106B8  0E00               	movlw	0
 21851  0106BA  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 21852  0106BC  0E00               	movlw	0
 21853  0106BE  6F7A               	movwf	___flmul@sign& (0+255),b
 21854  0106C0  D00F               	goto	l2984
 21855  0106C2                     l2983:
 21856                           
 21857                           ; BSR set to: 0
 21858  0106C2  C085  F080         	movff	___flmul@temp,___flmul@bexp
 21859                           
 21860                           ; BSR set to: 0
 21861  0106C6  0EFF               	movlw	255
 21862  0106C8  1781               	andwf	___flmul@prod& (0+255),f,b
 21863  0106CA  0EFF               	movlw	255
 21864  0106CC  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 21865  0106CE  0E7F               	movlw	127
 21866  0106D0  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 21867  0106D2  0E00               	movlw	0
 21868  0106D4  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 21869                           
 21870                           ; BSR set to: 0
 21871  0106D6  B180               	btfsc	___flmul@bexp& (0+255),0,b
 21872                           
 21873                           ; BSR set to: 0
 21874  0106D8  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 21875                           
 21876                           ; BSR set to: 0
 21877                           
 21878                           ; BSR set to: 0
 21879  0106DA  90D8               	bcf	status,0,c
 21880  0106DC  3180               	rrcf	___flmul@bexp& (0+255),w,b
 21881  0106DE                     L11:
 21882  0106DE  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 21883  0106E0                     l2984:
 21884                           
 21885                           ; BSR set to: 0
 21886                           
 21887                           ; BSR set to: 0
 21888                           
 21889                           ; BSR set to: 0
 21890  0106E0  517A               	movf	___flmul@sign& (0+255),w,b
 21891  0106E2  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 21892                           
 21893                           ; BSR set to: 0
 21894  0106E4  C081  F06E         	movff	___flmul@prod,?___flmul
 21895  0106E8  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 21896  0106EC  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 21897  0106F0  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 21898  0106F4  0012               	return	
 21899  0106F6                     __end_of___flmul:
 21900                           	opt stack 0
 21901                           tosu	equ	0xFFF
 21902                           tosh	equ	0xFFE
 21903                           tosl	equ	0xFFD
 21904                           pclath	equ	0xFFA
 21905                           tblptru	equ	0xFF8
 21906                           tblptrh	equ	0xFF7
 21907                           tblptrl	equ	0xFF6
 21908                           tablat	equ	0xFF5
 21909                           prodh	equ	0xFF4
 21910                           prodl	equ	0xFF3
 21911                           intcon	equ	0xFF2
 21912                           indf0	equ	0xFEF
 21913                           postinc0	equ	0xFEE
 21914                           fsr0h	equ	0xFEA
 21915                           fsr0l	equ	0xFE9
 21916                           wreg	equ	0xFE8
 21917                           indf1	equ	0xFE7
 21918                           postdec1	equ	0xFE5
 21919                           plusw1	equ	0xFE3
 21920                           fsr1h	equ	0xFE2
 21921                           fsr1l	equ	0xFE1
 21922                           indf2	equ	0xFDF
 21923                           postinc2	equ	0xFDE
 21924                           postdec2	equ	0xFDD
 21925                           plusw2	equ	0xFDB
 21926                           fsr2h	equ	0xFDA
 21927                           fsr2l	equ	0xFD9
 21928                           status	equ	0xFD8
 21929                           
 21930 ;; *************** function ___flsub *****************
 21931 ;; Defined at:
 21932 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 21933 ;; Parameters:    Size  Location     Type
 21934 ;;  b               4   63[BANK0 ] unsigned char 
 21935 ;;  a               4   67[BANK0 ] unsigned char 
 21936 ;; Auto vars:     Size  Location     Type
 21937 ;;		None
 21938 ;; Return value:  Size  Location     Type
 21939 ;;                  4   63[BANK0 ] unsigned char 
 21940 ;; Registers used:
 21941 ;;		wreg, status,2, status,0, cstack
 21942 ;; Tracked objects:
 21943 ;;		On entry : 0/0
 21944 ;;		On exit  : 0/0
 21945 ;;		Unchanged: 0/0
 21946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21947 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21950 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21951 ;;Total ram usage:        8 bytes
 21952 ;; Hardware stack levels used:    1
 21953 ;; Hardware stack levels required when called:    8
 21954 ;; This function calls:
 21955 ;;		___fladd
 21956 ;; This function is called by:
 21957 ;;		_exp
 21958 ;; This function uses a non-reentrant model
 21959 ;;
 21960                           
 21961                           	psect	text117
 21962  014CC8                     __ptext117:
 21963                           	opt stack 0
 21964  014CC8                     ___flsub:
 21965                           	opt stack 19
 21966                           
 21967                           ; BSR set to: 0
 21968                           ;incstack = 0
 21969  014CC8  0E00               	movlw	0
 21970  014CCA  0100               	movlb	0	; () banked
 21971  014CCC  1BA3               	xorwf	___flsub@a& (0+255),f,b
 21972  014CCE  0E00               	movlw	0
 21973  014CD0  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 21974  014CD2  0E00               	movlw	0
 21975  014CD4  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 21976  014CD6  0E80               	movlw	128
 21977  014CD8  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 21978                           
 21979                           ; BSR set to: 0
 21980  014CDA  C09F  F08B         	movff	___flsub@b,___fladd@b
 21981  014CDE  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 21982  014CE2  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 21983  014CE6  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 21984  014CEA  C0A3  F08F         	movff	___flsub@a,___fladd@a
 21985  014CEE  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 21986  014CF2  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 21987  014CF6  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 21988  014CFA  EC7B  F083         	call	___fladd	;wreg free
 21989  014CFE  C08B  F09F         	movff	?___fladd,?___flsub
 21990  014D02  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 21991  014D06  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 21992  014D0A  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 21993  014D0E  0012               	return	
 21994  014D10                     __end_of___flsub:
 21995                           	opt stack 0
 21996                           tosu	equ	0xFFF
 21997                           tosh	equ	0xFFE
 21998                           tosl	equ	0xFFD
 21999                           pclath	equ	0xFFA
 22000                           tblptru	equ	0xFF8
 22001                           tblptrh	equ	0xFF7
 22002                           tblptrl	equ	0xFF6
 22003                           tablat	equ	0xFF5
 22004                           prodh	equ	0xFF4
 22005                           prodl	equ	0xFF3
 22006                           intcon	equ	0xFF2
 22007                           indf0	equ	0xFEF
 22008                           postinc0	equ	0xFEE
 22009                           fsr0h	equ	0xFEA
 22010                           fsr0l	equ	0xFE9
 22011                           wreg	equ	0xFE8
 22012                           indf1	equ	0xFE7
 22013                           postdec1	equ	0xFE5
 22014                           plusw1	equ	0xFE3
 22015                           fsr1h	equ	0xFE2
 22016                           fsr1l	equ	0xFE1
 22017                           indf2	equ	0xFDF
 22018                           postinc2	equ	0xFDE
 22019                           postdec2	equ	0xFDD
 22020                           plusw2	equ	0xFDB
 22021                           fsr2h	equ	0xFDA
 22022                           fsr2l	equ	0xFD9
 22023                           status	equ	0xFD8
 22024                           
 22025 ;; *************** function ___fladd *****************
 22026 ;; Defined at:
 22027 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 22028 ;; Parameters:    Size  Location     Type
 22029 ;;  b               4   43[BANK0 ] unsigned char 
 22030 ;;  a               4   47[BANK0 ] unsigned char 
 22031 ;; Auto vars:     Size  Location     Type
 22032 ;;  grs             1   62[BANK0 ] unsigned char 
 22033 ;;  bexp            1   61[BANK0 ] unsigned char 
 22034 ;;  aexp            1   60[BANK0 ] unsigned char 
 22035 ;;  signs           1   59[BANK0 ] unsigned char 
 22036 ;; Return value:  Size  Location     Type
 22037 ;;                  4   43[BANK0 ] unsigned char 
 22038 ;; Registers used:
 22039 ;;		wreg, status,2, status,0
 22040 ;; Tracked objects:
 22041 ;;		On entry : 0/0
 22042 ;;		On exit  : 0/0
 22043 ;;		Unchanged: 0/0
 22044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22045 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22046 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22047 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22048 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22049 ;;Total ram usage:       20 bytes
 22050 ;; Hardware stack levels used:    1
 22051 ;; Hardware stack levels required when called:    7
 22052 ;; This function calls:
 22053 ;;		Nothing
 22054 ;; This function is called by:
 22055 ;;		_ADCAverage
 22056 ;;		___flsub
 22057 ;;		_floor
 22058 ;;		_log
 22059 ;;		_eval_poly
 22060 ;;		_Move_ADC_To
 22061 ;; This function uses a non-reentrant model
 22062 ;;
 22063                           
 22064                           	psect	text118
 22065  0106F6                     __ptext118:
 22066                           	opt stack 0
 22067  0106F6                     ___fladd:
 22068                           	opt stack 19
 22069                           
 22070                           ;incstack = 0
 22071  0106F6  0100               	movlb	0	; () banked
 22072  0106F8  518E               	movf	(___fladd@b+3)& (0+255),w,b
 22073  0106FA  0B80               	andlw	128
 22074  0106FC  6F9B               	movwf	___fladd@signs& (0+255),b
 22075  0106FE  518E               	movf	(___fladd@b+3)& (0+255),w,b
 22076  010700  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 22077  010702  6F9D               	movwf	___fladd@bexp& (0+255),b
 22078                           
 22079                           ; BSR set to: 0
 22080  010704  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 22081                           
 22082                           ; BSR set to: 0
 22083  010706  819D               	bsf	___fladd@bexp& (0+255),0,b
 22084                           
 22085                           ; BSR set to: 0
 22086                           
 22087                           ; BSR set to: 0
 22088  010708  519D               	movf	___fladd@bexp& (0+255),w,b
 22089  01070A  B4D8               	btfsc	status,2,c
 22090  01070C  D00D               	goto	l2869
 22091                           
 22092                           ; BSR set to: 0
 22093  01070E  299D               	incf	___fladd@bexp& (0+255),w,b
 22094  010710  A4D8               	btfss	status,2,c
 22095  010712  D008               	goto	l2870
 22096                           
 22097                           ; BSR set to: 0
 22098  010714  0E00               	movlw	0
 22099  010716  6F8B               	movwf	___fladd@b& (0+255),b
 22100  010718  0E00               	movlw	0
 22101  01071A  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 22102  01071C  0E00               	movlw	0
 22103  01071E  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 22104  010720  0E00               	movlw	0
 22105  010722  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 22106  010724                     l2870:
 22107                           
 22108                           ; BSR set to: 0
 22109                           
 22110                           ; BSR set to: 0
 22111  010724  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 22112  010726  D006               	goto	L12
 22113  010728                     l2869:
 22114                           
 22115                           ; BSR set to: 0
 22116                           
 22117                           ; BSR set to: 0
 22118  010728  0E00               	movlw	0
 22119  01072A  6F8B               	movwf	___fladd@b& (0+255),b
 22120  01072C  0E00               	movlw	0
 22121  01072E  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 22122  010730  0E00               	movlw	0
 22123  010732  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 22124  010734                     L12:
 22125  010734  0E00               	movlw	0
 22126  010736  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 22127                           
 22128                           ; BSR set to: 0
 22129                           
 22130                           ; BSR set to: 0
 22131  010738  5192               	movf	(___fladd@a+3)& (0+255),w,b
 22132  01073A  0B80               	andlw	128
 22133  01073C  6F9C               	movwf	___fladd@aexp& (0+255),b
 22134                           
 22135                           ; BSR set to: 0
 22136  01073E  519B               	movf	___fladd@signs& (0+255),w,b
 22137  010740  199C               	xorwf	___fladd@aexp& (0+255),w,b
 22138  010742  A4D8               	btfss	status,2,c
 22139                           
 22140                           ; BSR set to: 0
 22141  010744  8D9B               	bsf	___fladd@signs& (0+255),6,b
 22142                           
 22143                           ; BSR set to: 0
 22144                           
 22145                           ; BSR set to: 0
 22146  010746  5192               	movf	(___fladd@a+3)& (0+255),w,b
 22147  010748  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 22148  01074A  6F9C               	movwf	___fladd@aexp& (0+255),b
 22149                           
 22150                           ; BSR set to: 0
 22151  01074C  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 22152                           
 22153                           ; BSR set to: 0
 22154  01074E  819C               	bsf	___fladd@aexp& (0+255),0,b
 22155                           
 22156                           ; BSR set to: 0
 22157                           
 22158                           ; BSR set to: 0
 22159  010750  519C               	movf	___fladd@aexp& (0+255),w,b
 22160  010752  B4D8               	btfsc	status,2,c
 22161  010754  D00D               	goto	l2874
 22162                           
 22163                           ; BSR set to: 0
 22164  010756  299C               	incf	___fladd@aexp& (0+255),w,b
 22165  010758  A4D8               	btfss	status,2,c
 22166  01075A  D008               	goto	l2875
 22167                           
 22168                           ; BSR set to: 0
 22169  01075C  0E00               	movlw	0
 22170  01075E  6F8F               	movwf	___fladd@a& (0+255),b
 22171  010760  0E00               	movlw	0
 22172  010762  6F90               	movwf	(___fladd@a+1)& (0+255),b
 22173  010764  0E00               	movlw	0
 22174  010766  6F91               	movwf	(___fladd@a+2)& (0+255),b
 22175  010768  0E00               	movlw	0
 22176  01076A  6F92               	movwf	(___fladd@a+3)& (0+255),b
 22177  01076C                     l2875:
 22178                           
 22179                           ; BSR set to: 0
 22180                           
 22181                           ; BSR set to: 0
 22182  01076C  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 22183  01076E  D006               	goto	L13
 22184  010770                     l2874:
 22185                           
 22186                           ; BSR set to: 0
 22187                           
 22188                           ; BSR set to: 0
 22189  010770  0E00               	movlw	0
 22190  010772  6F8F               	movwf	___fladd@a& (0+255),b
 22191  010774  0E00               	movlw	0
 22192  010776  6F90               	movwf	(___fladd@a+1)& (0+255),b
 22193  010778  0E00               	movlw	0
 22194  01077A  6F91               	movwf	(___fladd@a+2)& (0+255),b
 22195  01077C                     L13:
 22196  01077C  0E00               	movlw	0
 22197  01077E  6F92               	movwf	(___fladd@a+3)& (0+255),b
 22198                           
 22199                           ; BSR set to: 0
 22200                           
 22201                           ; BSR set to: 0
 22202  010780  519D               	movf	___fladd@bexp& (0+255),w,b
 22203  010782  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 22204  010784  B0D8               	btfsc	status,0,c
 22205  010786  D022               	goto	l2877
 22206                           
 22207                           ; BSR set to: 0
 22208  010788  AD9B               	btfss	___fladd@signs& (0+255),6,b
 22209  01078A  D002               	goto	l2878
 22210                           
 22211                           ; BSR set to: 0
 22212  01078C  0E80               	movlw	128
 22213  01078E  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 22214  010790                     l2878:
 22215                           
 22216                           ; BSR set to: 0
 22217                           
 22218                           ; BSR set to: 0
 22219  010790  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 22220                           
 22221                           ; BSR set to: 0
 22222  010794  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 22223                           
 22224                           ; BSR set to: 0
 22225  010798  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 22226                           
 22227                           ; BSR set to: 0
 22228  01079C  C08B  F09E         	movff	___fladd@b,___fladd@grs
 22229                           
 22230                           ; BSR set to: 0
 22231  0107A0  C08F  F08B         	movff	___fladd@a,___fladd@b
 22232                           
 22233                           ; BSR set to: 0
 22234  0107A4  C09E  F08F         	movff	___fladd@grs,___fladd@a
 22235                           
 22236                           ; BSR set to: 0
 22237  0107A8  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 22238                           
 22239                           ; BSR set to: 0
 22240  0107AC  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 22241                           
 22242                           ; BSR set to: 0
 22243  0107B0  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 22244                           
 22245                           ; BSR set to: 0
 22246  0107B4  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 22247                           
 22248                           ; BSR set to: 0
 22249  0107B8  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 22250                           
 22251                           ; BSR set to: 0
 22252  0107BC  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 22253                           
 22254                           ; BSR set to: 0
 22255  0107C0  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 22256                           
 22257                           ; BSR set to: 0
 22258  0107C4  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 22259                           
 22260                           ; BSR set to: 0
 22261  0107C8  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 22262  0107CC                     l2877:
 22263                           
 22264                           ; BSR set to: 0
 22265                           
 22266                           ; BSR set to: 0
 22267  0107CC  0E00               	movlw	0
 22268  0107CE  6F9E               	movwf	___fladd@grs& (0+255),b
 22269                           
 22270                           ; BSR set to: 0
 22271  0107D0  519D               	movf	___fladd@bexp& (0+255),w,b
 22272  0107D2  6F93               	movwf	??___fladd& (0+255),b
 22273  0107D4  6B94               	clrf	(??___fladd+1)& (0+255),b
 22274  0107D6  1F93               	comf	??___fladd& (0+255),f,b
 22275  0107D8  1F94               	comf	(??___fladd+1)& (0+255),f,b
 22276  0107DA  4B93               	infsnz	??___fladd& (0+255),f,b
 22277  0107DC  2B94               	incf	(??___fladd+1)& (0+255),f,b
 22278  0107DE  519C               	movf	___fladd@aexp& (0+255),w,b
 22279  0107E0  6F95               	movwf	(??___fladd+2)& (0+255),b
 22280  0107E2  6B96               	clrf	(??___fladd+3)& (0+255),b
 22281  0107E4  5193               	movf	??___fladd& (0+255),w,b
 22282  0107E6  2795               	addwf	(??___fladd+2)& (0+255),f,b
 22283  0107E8  5194               	movf	(??___fladd+1)& (0+255),w,b
 22284  0107EA  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 22285  0107EC  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 22286  0107EE  D02C               	goto	l2881
 22287  0107F0  5196               	movf	(??___fladd+3)& (0+255),w,b
 22288  0107F2  E104               	bnz	u10120
 22289  0107F4  0E1A               	movlw	26
 22290  0107F6  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 22291  0107F8  A0D8               	btfss	status,0,c
 22292  0107FA  D026               	goto	l2881
 22293  0107FC                     u10120:
 22294                           
 22295                           ; BSR set to: 0
 22296  0107FC  518B               	movf	___fladd@b& (0+255),w,b
 22297  0107FE  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 22298  010800  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 22299  010802  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 22300  010804  B4D8               	btfsc	status,2,c
 22301  010806  D002               	goto	u10130
 22302  010808  0E01               	movlw	1
 22303  01080A  D001               	goto	u10140
 22304  01080C                     u10130:
 22305  01080C  0E00               	movlw	0
 22306  01080E                     u10140:
 22307  01080E  6F9E               	movwf	___fladd@grs& (0+255),b
 22308                           
 22309                           ; BSR set to: 0
 22310  010810  0E00               	movlw	0
 22311  010812  6F8B               	movwf	___fladd@b& (0+255),b
 22312  010814  0E00               	movlw	0
 22313  010816  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 22314  010818  0E00               	movlw	0
 22315  01081A  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 22316  01081C  0E00               	movlw	0
 22317  01081E  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 22318                           
 22319                           ; BSR set to: 0
 22320  010820  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 22321  010824  D015               	goto	u10170
 22322  010826                     l2882:
 22323                           
 22324                           ; BSR set to: 0
 22325  010826  A19E               	btfss	___fladd@grs& (0+255),0,b
 22326  010828  D005               	goto	l2883
 22327                           
 22328                           ; BSR set to: 0
 22329  01082A  90D8               	bcf	status,0,c
 22330  01082C  319E               	rrcf	___fladd@grs& (0+255),w,b
 22331  01082E  0901               	iorlw	1
 22332  010830  6F9E               	movwf	___fladd@grs& (0+255),b
 22333  010832  D002               	goto	l2884
 22334  010834                     l2883:
 22335                           
 22336                           ; BSR set to: 0
 22337                           
 22338                           ; BSR set to: 0
 22339  010834  90D8               	bcf	status,0,c
 22340  010836  339E               	rrcf	___fladd@grs& (0+255),f,b
 22341  010838                     l2884:
 22342                           
 22343                           ; BSR set to: 0
 22344                           
 22345                           ; BSR set to: 0
 22346  010838  B18B               	btfsc	___fladd@b& (0+255),0,b
 22347                           
 22348                           ; BSR set to: 0
 22349  01083A  8F9E               	bsf	___fladd@grs& (0+255),7,b
 22350                           
 22351                           ; BSR set to: 0
 22352                           
 22353                           ; BSR set to: 0
 22354  01083C  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 22355  01083E  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 22356  010840  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 22357  010842  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 22358  010844  338B               	rrcf	___fladd@b& (0+255),f,b
 22359                           
 22360                           ; BSR set to: 0
 22361  010846  2B9D               	incf	___fladd@bexp& (0+255),f,b
 22362  010848                     l2881:
 22363                           
 22364                           ; BSR set to: 0
 22365  010848  519C               	movf	___fladd@aexp& (0+255),w,b
 22366  01084A  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 22367  01084C  A0D8               	btfss	status,0,c
 22368  01084E  D7EB               	goto	l2882
 22369  010850                     u10170:
 22370                           
 22371                           ; BSR set to: 0
 22372                           
 22373                           ; BSR set to: 0
 22374  010850  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 22375  010852  D029               	goto	l2887
 22376                           
 22377                           ; BSR set to: 0
 22378  010854  519D               	movf	___fladd@bexp& (0+255),w,b
 22379  010856  A4D8               	btfss	status,2,c
 22380  010858  D009               	goto	l2888
 22381                           
 22382                           ; BSR set to: 0
 22383  01085A  0E00               	movlw	0
 22384  01085C  6F8B               	movwf	?___fladd& (0+255),b
 22385  01085E  0E00               	movlw	0
 22386  010860  6F8C               	movwf	(?___fladd+1)& (0+255),b
 22387  010862  0E00               	movlw	0
 22388  010864  6F8D               	movwf	(?___fladd+2)& (0+255),b
 22389  010866  0E00               	movlw	0
 22390  010868  6F8E               	movwf	(?___fladd+3)& (0+255),b
 22391                           
 22392                           ; BSR set to: 0
 22393  01086A  0012               	return	
 22394  01086C                     l2888:
 22395                           
 22396                           ; BSR set to: 0
 22397                           
 22398                           ; BSR set to: 0
 22399  01086C  518F               	movf	___fladd@a& (0+255),w,b
 22400  01086E  278B               	addwf	___fladd@b& (0+255),f,b
 22401  010870  5190               	movf	(___fladd@a+1)& (0+255),w,b
 22402  010872  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 22403  010874  5191               	movf	(___fladd@a+2)& (0+255),w,b
 22404  010876  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 22405  010878  5192               	movf	(___fladd@a+3)& (0+255),w,b
 22406  01087A  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 22407                           
 22408                           ; BSR set to: 0
 22409  01087C  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 22410  01087E  D083               	goto	u10300
 22411                           
 22412                           ; BSR set to: 0
 22413  010880  A19E               	btfss	___fladd@grs& (0+255),0,b
 22414  010882  D006               	goto	l2891
 22415                           
 22416                           ; BSR set to: 0
 22417  010884  90D8               	bcf	status,0,c
 22418  010886  339E               	rrcf	___fladd@grs& (0+255),f,b
 22419  010888  519E               	movf	___fladd@grs& (0+255),w,b
 22420  01088A  0901               	iorlw	1
 22421  01088C  6F9E               	movwf	___fladd@grs& (0+255),b
 22422  01088E  D002               	goto	l2892
 22423  010890                     l2891:
 22424                           
 22425                           ; BSR set to: 0
 22426                           
 22427                           ; BSR set to: 0
 22428  010890  90D8               	bcf	status,0,c
 22429  010892  339E               	rrcf	___fladd@grs& (0+255),f,b
 22430  010894                     l2892:
 22431                           
 22432                           ; BSR set to: 0
 22433                           
 22434                           ; BSR set to: 0
 22435  010894  B18B               	btfsc	___fladd@b& (0+255),0,b
 22436                           
 22437                           ; BSR set to: 0
 22438  010896  8F9E               	bsf	___fladd@grs& (0+255),7,b
 22439                           
 22440                           ; BSR set to: 0
 22441                           
 22442                           ; BSR set to: 0
 22443  010898  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 22444  01089A  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 22445  01089C  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 22446  01089E  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 22447  0108A0  338B               	rrcf	___fladd@b& (0+255),f,b
 22448                           
 22449                           ; BSR set to: 0
 22450  0108A2  2B9D               	incf	___fladd@bexp& (0+255),f,b
 22451                           
 22452                           ; BSR set to: 0
 22453  0108A4  D070               	goto	u10300
 22454  0108A6                     l2887:
 22455                           
 22456                           ; BSR set to: 0
 22457                           
 22458                           ; BSR set to: 0
 22459  0108A6  518F               	movf	___fladd@a& (0+255),w,b
 22460  0108A8  5D8B               	subwf	___fladd@b& (0+255),w,b
 22461  0108AA  5190               	movf	(___fladd@a+1)& (0+255),w,b
 22462  0108AC  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 22463  0108AE  5191               	movf	(___fladd@a+2)& (0+255),w,b
 22464  0108B0  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 22465  0108B2  518E               	movf	(___fladd@b+3)& (0+255),w,b
 22466  0108B4  0A80               	xorlw	128
 22467  0108B6  6F93               	movwf	??___fladd& (0+255),b
 22468  0108B8  5192               	movf	(___fladd@a+3)& (0+255),w,b
 22469  0108BA  0A80               	xorlw	128
 22470  0108BC  5993               	subwfb	??___fladd& (0+255),w,b
 22471  0108BE  B0D8               	btfsc	status,0,c
 22472  0108C0  D036               	goto	l2895
 22473                           
 22474                           ; BSR set to: 0
 22475  0108C2  C08B  F093         	movff	___fladd@b,??___fladd
 22476  0108C6  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 22477  0108CA  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 22478  0108CE  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 22479  0108D2  1F93               	comf	??___fladd& (0+255),f,b
 22480  0108D4  1F94               	comf	(??___fladd+1)& (0+255),f,b
 22481  0108D6  1F95               	comf	(??___fladd+2)& (0+255),f,b
 22482  0108D8  1F96               	comf	(??___fladd+3)& (0+255),f,b
 22483  0108DA  2B93               	incf	??___fladd& (0+255),f,b
 22484  0108DC  0E00               	movlw	0
 22485  0108DE  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 22486  0108E0  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 22487  0108E2  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 22488  0108E4  518F               	movf	___fladd@a& (0+255),w,b
 22489  0108E6  2593               	addwf	??___fladd& (0+255),w,b
 22490  0108E8  6F97               	movwf	(??___fladd+4)& (0+255),b
 22491  0108EA  5190               	movf	(___fladd@a+1)& (0+255),w,b
 22492  0108EC  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 22493  0108EE  6F98               	movwf	(??___fladd+5)& (0+255),b
 22494  0108F0  5191               	movf	(___fladd@a+2)& (0+255),w,b
 22495  0108F2  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 22496  0108F4  6F99               	movwf	(??___fladd+6)& (0+255),b
 22497  0108F6  5192               	movf	(___fladd@a+3)& (0+255),w,b
 22498  0108F8  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 22499  0108FA  6F9A               	movwf	(??___fladd+7)& (0+255),b
 22500  0108FC  0EFF               	movlw	255
 22501  0108FE  2597               	addwf	(??___fladd+4)& (0+255),w,b
 22502  010900  6F8B               	movwf	___fladd@b& (0+255),b
 22503  010902  0EFF               	movlw	255
 22504  010904  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 22505  010906  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 22506  010908  0EFF               	movlw	255
 22507  01090A  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 22508  01090C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 22509  01090E  0EFF               	movlw	255
 22510  010910  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 22511  010912  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 22512  010914  0E80               	movlw	128
 22513  010916  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 22514                           
 22515                           ; BSR set to: 0
 22516  010918  6D9E               	negf	___fladd@grs& (0+255),b
 22517                           
 22518                           ; BSR set to: 0
 22519  01091A  519E               	movf	___fladd@grs& (0+255),w,b
 22520  01091C  A4D8               	btfss	status,2,c
 22521  01091E  D00F               	goto	l2897
 22522                           
 22523                           ; BSR set to: 0
 22524  010920  0E01               	movlw	1
 22525  010922  278B               	addwf	___fladd@b& (0+255),f,b
 22526  010924  0E00               	movlw	0
 22527  010926  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 22528  010928  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 22529  01092A  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 22530                           
 22531                           ; BSR set to: 0
 22532  01092C  D008               	goto	l2897
 22533  01092E                     l2895:
 22534                           
 22535                           ; BSR set to: 0
 22536                           
 22537                           ; BSR set to: 0
 22538  01092E  518F               	movf	___fladd@a& (0+255),w,b
 22539  010930  5F8B               	subwf	___fladd@b& (0+255),f,b
 22540  010932  5190               	movf	(___fladd@a+1)& (0+255),w,b
 22541  010934  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 22542  010936  5191               	movf	(___fladd@a+2)& (0+255),w,b
 22543  010938  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 22544  01093A  5192               	movf	(___fladd@a+3)& (0+255),w,b
 22545  01093C  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 22546  01093E                     l2897:
 22547                           
 22548                           ; BSR set to: 0
 22549  01093E  518B               	movf	___fladd@b& (0+255),w,b
 22550  010940  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 22551  010942  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 22552  010944  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 22553  010946  A4D8               	btfss	status,2,c
 22554  010948  D01C               	goto	l2904
 22555                           
 22556                           ; BSR set to: 0
 22557  01094A  519E               	movf	___fladd@grs& (0+255),w,b
 22558  01094C  A4D8               	btfss	status,2,c
 22559  01094E  D019               	goto	l2904
 22560                           
 22561                           ; BSR set to: 0
 22562  010950  0E00               	movlw	0
 22563  010952  6F8B               	movwf	?___fladd& (0+255),b
 22564  010954  0E00               	movlw	0
 22565  010956  6F8C               	movwf	(?___fladd+1)& (0+255),b
 22566  010958  0E00               	movlw	0
 22567  01095A  6F8D               	movwf	(?___fladd+2)& (0+255),b
 22568  01095C  0E00               	movlw	0
 22569  01095E  6F8E               	movwf	(?___fladd+3)& (0+255),b
 22570                           
 22571                           ; BSR set to: 0
 22572  010960  0012               	return	
 22573  010962                     
 22574                           ; BSR set to: 0
 22575                           
 22576                           ; BSR set to: 0
 22577  010962  90D8               	bcf	status,0,c
 22578  010964  378B               	rlcf	___fladd@b& (0+255),f,b
 22579  010966  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 22580  010968  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 22581  01096A  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 22582                           
 22583                           ; BSR set to: 0
 22584  01096C  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 22585                           
 22586                           ; BSR set to: 0
 22587  01096E  818B               	bsf	___fladd@b& (0+255),0,b
 22588                           
 22589                           ; BSR set to: 0
 22590                           
 22591                           ; BSR set to: 0
 22592  010970  A19E               	btfss	___fladd@grs& (0+255),0,b
 22593  010972  D002               	goto	l2902
 22594                           
 22595                           ; BSR set to: 0
 22596  010974  80D8               	bsf	status,0,c
 22597  010976  D001               	goto	L14
 22598  010978                     l2902:
 22599                           
 22600                           ; BSR set to: 0
 22601                           
 22602                           ; BSR set to: 0
 22603  010978  90D8               	bcf	status,0,c
 22604  01097A                     L14:
 22605  01097A  379E               	rlcf	___fladd@grs& (0+255),f,b
 22606                           
 22607                           ; BSR set to: 0
 22608                           
 22609                           ; BSR set to: 0
 22610  01097C  519D               	movf	___fladd@bexp& (0+255),w,b
 22611  01097E  A4D8               	btfss	status,2,c
 22612                           
 22613                           ; BSR set to: 0
 22614  010980  079D               	decf	___fladd@bexp& (0+255),f,b
 22615  010982                     l2904:
 22616                           
 22617                           ; BSR set to: 0
 22618                           
 22619                           ; BSR set to: 0
 22620                           
 22621                           ; BSR set to: 0
 22622  010982  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 22623  010984  D7EE               	goto	l2900
 22624  010986                     u10300:
 22625                           
 22626                           ; BSR set to: 0
 22627                           
 22628                           ; BSR set to: 0
 22629                           
 22630                           ; BSR set to: 0
 22631  010986  0E00               	movlw	0
 22632  010988  6F9C               	movwf	___fladd@aexp& (0+255),b
 22633                           
 22634                           ; BSR set to: 0
 22635  01098A  AF9E               	btfss	___fladd@grs& (0+255),7,b
 22636  01098C  D00A               	goto	l2909
 22637                           
 22638                           ; BSR set to: 0
 22639  01098E  C09E  F093         	movff	___fladd@grs,??___fladd
 22640  010992  0E7F               	movlw	127
 22641  010994  1793               	andwf	??___fladd& (0+255),f,b
 22642  010996  A4D8               	btfss	status,2,c
 22643  010998  D002               	goto	u10330
 22644                           
 22645                           ; BSR set to: 0
 22646                           
 22647                           ; BSR set to: 0
 22648  01099A  A18B               	btfss	___fladd@b& (0+255),0,b
 22649  01099C  D002               	goto	l2909
 22650  01099E                     u10330:
 22651                           
 22652                           ; BSR set to: 0
 22653  01099E  0E01               	movlw	1
 22654  0109A0  6F9C               	movwf	___fladd@aexp& (0+255),b
 22655  0109A2                     l2909:
 22656                           
 22657                           ; BSR set to: 0
 22658                           
 22659                           ; BSR set to: 0
 22660                           
 22661                           ; BSR set to: 0
 22662  0109A2  519C               	movf	___fladd@aexp& (0+255),w,b
 22663  0109A4  B4D8               	btfsc	status,2,c
 22664  0109A6  D020               	goto	l2912
 22665                           
 22666                           ; BSR set to: 0
 22667  0109A8  0E01               	movlw	1
 22668  0109AA  278B               	addwf	___fladd@b& (0+255),f,b
 22669  0109AC  0E00               	movlw	0
 22670  0109AE  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 22671  0109B0  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 22672  0109B2  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 22673                           
 22674                           ; BSR set to: 0
 22675  0109B4  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 22676  0109B6  D018               	goto	l2912
 22677                           
 22678                           ; BSR set to: 0
 22679  0109B8  C08B  F093         	movff	___fladd@b,??___fladd
 22680  0109BC  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 22681  0109C0  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 22682  0109C4  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 22683  0109C8  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 22684  0109CA  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 22685  0109CC  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 22686  0109CE  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 22687  0109D0  3393               	rrcf	??___fladd& (0+255),f,b
 22688  0109D2  C093  F08B         	movff	??___fladd,___fladd@b
 22689  0109D6  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 22690  0109DA  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 22691  0109DE  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 22692  0109E2  299D               	incf	___fladd@bexp& (0+255),w,b
 22693  0109E4  A4D8               	btfss	status,2,c
 22694                           
 22695                           ; BSR set to: 0
 22696  0109E6  2B9D               	incf	___fladd@bexp& (0+255),f,b
 22697  0109E8                     l2912:
 22698                           
 22699                           ; BSR set to: 0
 22700                           
 22701                           ; BSR set to: 0
 22702                           
 22703                           ; BSR set to: 0
 22704                           
 22705                           ; BSR set to: 0
 22706  0109E8  299D               	incf	___fladd@bexp& (0+255),w,b
 22707  0109EA  B4D8               	btfsc	status,2,c
 22708  0109EC  D003               	goto	u10380
 22709                           
 22710                           ; BSR set to: 0
 22711  0109EE  519D               	movf	___fladd@bexp& (0+255),w,b
 22712  0109F0  A4D8               	btfss	status,2,c
 22713  0109F2  D00D               	goto	l2916
 22714  0109F4                     u10380:
 22715                           
 22716                           ; BSR set to: 0
 22717                           
 22718                           ; BSR set to: 0
 22719  0109F4  0E00               	movlw	0
 22720  0109F6  6F8B               	movwf	___fladd@b& (0+255),b
 22721  0109F8  0E00               	movlw	0
 22722  0109FA  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 22723  0109FC  0E00               	movlw	0
 22724  0109FE  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 22725  010A00  0E00               	movlw	0
 22726  010A02  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 22727  010A04  519D               	movf	___fladd@bexp& (0+255),w,b
 22728  010A06  A4D8               	btfss	status,2,c
 22729  010A08  D002               	goto	l2916
 22730                           
 22731                           ; BSR set to: 0
 22732  010A0A  0E00               	movlw	0
 22733  010A0C  6F9B               	movwf	___fladd@signs& (0+255),b
 22734  010A0E                     l2916:
 22735                           
 22736                           ; BSR set to: 0
 22737                           
 22738                           ; BSR set to: 0
 22739                           
 22740                           ; BSR set to: 0
 22741  010A0E  A19D               	btfss	___fladd@bexp& (0+255),0,b
 22742  010A10  D002               	goto	l2917
 22743                           
 22744                           ; BSR set to: 0
 22745  010A12  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 22746  010A14  D001               	goto	l2918
 22747  010A16                     l2917:
 22748                           
 22749                           ; BSR set to: 0
 22750                           
 22751                           ; BSR set to: 0
 22752  010A16  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 22753  010A18                     l2918:
 22754                           
 22755                           ; BSR set to: 0
 22756                           
 22757                           ; BSR set to: 0
 22758  010A18  90D8               	bcf	status,0,c
 22759  010A1A  319D               	rrcf	___fladd@bexp& (0+255),w,b
 22760  010A1C  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 22761                           
 22762                           ; BSR set to: 0
 22763  010A1E  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 22764                           
 22765                           ; BSR set to: 0
 22766  010A20  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 22767                           
 22768                           ; BSR set to: 0
 22769                           
 22770                           ; BSR set to: 0
 22771  010A22  C08B  F08B         	movff	___fladd@b,?___fladd
 22772  010A26  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 22773  010A2A  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 22774  010A2E  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 22775  010A32  0012               	return	
 22776  010A34                     __end_of___fladd:
 22777                           	opt stack 0
 22778                           tosu	equ	0xFFF
 22779                           tosh	equ	0xFFE
 22780                           tosl	equ	0xFFD
 22781                           pclath	equ	0xFFA
 22782                           tblptru	equ	0xFF8
 22783                           tblptrh	equ	0xFF7
 22784                           tblptrl	equ	0xFF6
 22785                           tablat	equ	0xFF5
 22786                           prodh	equ	0xFF4
 22787                           prodl	equ	0xFF3
 22788                           intcon	equ	0xFF2
 22789                           indf0	equ	0xFEF
 22790                           postinc0	equ	0xFEE
 22791                           fsr0h	equ	0xFEA
 22792                           fsr0l	equ	0xFE9
 22793                           wreg	equ	0xFE8
 22794                           indf1	equ	0xFE7
 22795                           postdec1	equ	0xFE5
 22796                           plusw1	equ	0xFE3
 22797                           fsr1h	equ	0xFE2
 22798                           fsr1l	equ	0xFE1
 22799                           indf2	equ	0xFDF
 22800                           postinc2	equ	0xFDE
 22801                           postdec2	equ	0xFDD
 22802                           plusw2	equ	0xFDB
 22803                           fsr2h	equ	0xFDA
 22804                           fsr2l	equ	0xFD9
 22805                           status	equ	0xFD8
 22806                           
 22807 ;; *************** function ___flneg *****************
 22808 ;; Defined at:
 22809 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
 22810 ;; Parameters:    Size  Location     Type
 22811 ;;  f1              4   39[BANK0 ] unsigned char 
 22812 ;; Auto vars:     Size  Location     Type
 22813 ;;		None
 22814 ;; Return value:  Size  Location     Type
 22815 ;;                  4   39[BANK0 ] unsigned char 
 22816 ;; Registers used:
 22817 ;;		wreg, status,2, status,0
 22818 ;; Tracked objects:
 22819 ;;		On entry : 0/0
 22820 ;;		On exit  : 0/0
 22821 ;;		Unchanged: 0/0
 22822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22823 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22826 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22827 ;;Total ram usage:        4 bytes
 22828 ;; Hardware stack levels used:    1
 22829 ;; Hardware stack levels required when called:    7
 22830 ;; This function calls:
 22831 ;;		Nothing
 22832 ;; This function is called by:
 22833 ;;		_ADCAverage
 22834 ;;		_pow
 22835 ;;		_exp
 22836 ;; This function uses a non-reentrant model
 22837 ;;
 22838                           
 22839                           	psect	text119
 22840  015120                     __ptext119:
 22841                           	opt stack 0
 22842  015120                     ___flneg:
 22843                           	opt stack 20
 22844                           
 22845                           ; BSR set to: 0
 22846                           ;incstack = 0
 22847  015120  0100               	movlb	0	; () banked
 22848  015122  5187               	movf	___flneg@f1& (0+255),w,b
 22849  015124  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 22850  015126  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 22851  015128  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 22852  01512A  B4D8               	btfsc	status,2,c
 22853  01512C  D008               	goto	l2632
 22854                           
 22855                           ; BSR set to: 0
 22856  01512E  0E00               	movlw	0
 22857  015130  1B87               	xorwf	___flneg@f1& (0+255),f,b
 22858  015132  0E00               	movlw	0
 22859  015134  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 22860  015136  0E00               	movlw	0
 22861  015138  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 22862  01513A  0E80               	movlw	128
 22863  01513C  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 22864  01513E                     l2632:
 22865                           
 22866                           ; BSR set to: 0
 22867                           
 22868                           ; BSR set to: 0
 22869  01513E  C087  F087         	movff	___flneg@f1,?___flneg
 22870  015142  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 22871  015146  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 22872  01514A  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 22873  01514E  0012               	return	
 22874  015150                     __end_of___flneg:
 22875                           	opt stack 0
 22876                           tosu	equ	0xFFF
 22877                           tosh	equ	0xFFE
 22878                           tosl	equ	0xFFD
 22879                           pclath	equ	0xFFA
 22880                           tblptru	equ	0xFF8
 22881                           tblptrh	equ	0xFF7
 22882                           tblptrl	equ	0xFF6
 22883                           tablat	equ	0xFF5
 22884                           prodh	equ	0xFF4
 22885                           prodl	equ	0xFF3
 22886                           intcon	equ	0xFF2
 22887                           indf0	equ	0xFEF
 22888                           postinc0	equ	0xFEE
 22889                           fsr0h	equ	0xFEA
 22890                           fsr0l	equ	0xFE9
 22891                           wreg	equ	0xFE8
 22892                           indf1	equ	0xFE7
 22893                           postdec1	equ	0xFE5
 22894                           plusw1	equ	0xFE3
 22895                           fsr1h	equ	0xFE2
 22896                           fsr1l	equ	0xFE1
 22897                           indf2	equ	0xFDF
 22898                           postinc2	equ	0xFDE
 22899                           postdec2	equ	0xFDD
 22900                           plusw2	equ	0xFDB
 22901                           fsr2h	equ	0xFDA
 22902                           fsr2l	equ	0xFD9
 22903                           status	equ	0xFD8
 22904                           
 22905 ;; *************** function ___fldiv *****************
 22906 ;; Defined at:
 22907 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcdiv.c"
 22908 ;; Parameters:    Size  Location     Type
 22909 ;;  b               4    0[BANK0 ] unsigned char 
 22910 ;;  a               4    4[BANK0 ] unsigned char 
 22911 ;; Auto vars:     Size  Location     Type
 22912 ;;  grs             4   19[BANK0 ] unsigned long 
 22913 ;;  rem             4   13[BANK0 ] unsigned long 
 22914 ;;  new_exp         2   17[BANK0 ] int 
 22915 ;;  aexp            1   24[BANK0 ] unsigned char 
 22916 ;;  bexp            1   23[BANK0 ] unsigned char 
 22917 ;;  sign            1   12[BANK0 ] unsigned char 
 22918 ;; Return value:  Size  Location     Type
 22919 ;;                  4    0[BANK0 ] unsigned char 
 22920 ;; Registers used:
 22921 ;;		wreg, status,2, status,0
 22922 ;; Tracked objects:
 22923 ;;		On entry : 0/0
 22924 ;;		On exit  : 0/0
 22925 ;;		Unchanged: 0/0
 22926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22927 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22928 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22929 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22930 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22931 ;;Total ram usage:       25 bytes
 22932 ;; Hardware stack levels used:    1
 22933 ;; Hardware stack levels required when called:    7
 22934 ;; This function calls:
 22935 ;;		Nothing
 22936 ;; This function is called by:
 22937 ;;		_exp
 22938 ;;		_ADC_Voltage
 22939 ;; This function uses a non-reentrant model
 22940 ;;
 22941                           
 22942                           	psect	text120
 22943  010D10                     __ptext120:
 22944                           	opt stack 0
 22945  010D10                     ___fldiv:
 22946                           	opt stack 20
 22947                           
 22948                           ; BSR set to: 0
 22949                           ;incstack = 0
 22950  010D10  0100               	movlb	0	; () banked
 22951  010D12  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 22952  010D14  0B80               	andlw	128
 22953  010D16  6F6C               	movwf	___fldiv@sign& (0+255),b
 22954  010D18  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 22955  010D1A  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 22956  010D1C  6F77               	movwf	___fldiv@bexp& (0+255),b
 22957                           
 22958                           ; BSR set to: 0
 22959  010D1E  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 22960                           
 22961                           ; BSR set to: 0
 22962  010D20  8177               	bsf	___fldiv@bexp& (0+255),0,b
 22963                           
 22964                           ; BSR set to: 0
 22965                           
 22966                           ; BSR set to: 0
 22967  010D22  5177               	movf	___fldiv@bexp& (0+255),w,b
 22968  010D24  B4D8               	btfsc	status,2,c
 22969  010D26  D00D               	goto	l2926
 22970                           
 22971                           ; BSR set to: 0
 22972  010D28  2977               	incf	___fldiv@bexp& (0+255),w,b
 22973  010D2A  A4D8               	btfss	status,2,c
 22974  010D2C  D008               	goto	l2927
 22975                           
 22976                           ; BSR set to: 0
 22977  010D2E  0E00               	movlw	0
 22978  010D30  6F60               	movwf	___fldiv@b& (0+255),b
 22979  010D32  0E00               	movlw	0
 22980  010D34  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 22981  010D36  0E00               	movlw	0
 22982  010D38  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 22983  010D3A  0E00               	movlw	0
 22984  010D3C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22985  010D3E                     l2927:
 22986                           
 22987                           ; BSR set to: 0
 22988                           
 22989                           ; BSR set to: 0
 22990  010D3E  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 22991  010D40  D006               	goto	L15
 22992  010D42                     l2926:
 22993                           
 22994                           ; BSR set to: 0
 22995                           
 22996                           ; BSR set to: 0
 22997  010D42  0E00               	movlw	0
 22998  010D44  6F60               	movwf	___fldiv@b& (0+255),b
 22999  010D46  0E00               	movlw	0
 23000  010D48  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 23001  010D4A  0E00               	movlw	0
 23002  010D4C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 23003  010D4E                     L15:
 23004  010D4E  0E00               	movlw	0
 23005  010D50  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 23006                           
 23007                           ; BSR set to: 0
 23008                           
 23009                           ; BSR set to: 0
 23010  010D52  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 23011  010D54  0B80               	andlw	128
 23012  010D56  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 23013                           
 23014                           ; BSR set to: 0
 23015  010D58  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 23016  010D5A  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 23017  010D5C  6F78               	movwf	___fldiv@aexp& (0+255),b
 23018                           
 23019                           ; BSR set to: 0
 23020  010D5E  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 23021                           
 23022                           ; BSR set to: 0
 23023  010D60  8178               	bsf	___fldiv@aexp& (0+255),0,b
 23024                           
 23025                           ; BSR set to: 0
 23026                           
 23027                           ; BSR set to: 0
 23028  010D62  5178               	movf	___fldiv@aexp& (0+255),w,b
 23029  010D64  B4D8               	btfsc	status,2,c
 23030  010D66  D00D               	goto	l2930
 23031                           
 23032                           ; BSR set to: 0
 23033  010D68  2978               	incf	___fldiv@aexp& (0+255),w,b
 23034  010D6A  A4D8               	btfss	status,2,c
 23035  010D6C  D008               	goto	l2931
 23036                           
 23037                           ; BSR set to: 0
 23038  010D6E  0E00               	movlw	0
 23039  010D70  6F64               	movwf	___fldiv@a& (0+255),b
 23040  010D72  0E00               	movlw	0
 23041  010D74  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 23042  010D76  0E00               	movlw	0
 23043  010D78  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 23044  010D7A  0E00               	movlw	0
 23045  010D7C  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 23046  010D7E                     l2931:
 23047                           
 23048                           ; BSR set to: 0
 23049                           
 23050                           ; BSR set to: 0
 23051  010D7E  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 23052  010D80  D006               	goto	L16
 23053  010D82                     l2930:
 23054                           
 23055                           ; BSR set to: 0
 23056                           
 23057                           ; BSR set to: 0
 23058  010D82  0E00               	movlw	0
 23059  010D84  6F64               	movwf	___fldiv@a& (0+255),b
 23060  010D86  0E00               	movlw	0
 23061  010D88  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 23062  010D8A  0E00               	movlw	0
 23063  010D8C  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 23064  010D8E                     L16:
 23065  010D8E  0E00               	movlw	0
 23066  010D90  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 23067                           
 23068                           ; BSR set to: 0
 23069                           
 23070                           ; BSR set to: 0
 23071  010D92  5164               	movf	___fldiv@a& (0+255),w,b
 23072  010D94  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 23073  010D96  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 23074  010D98  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 23075  010D9A  A4D8               	btfss	status,2,c
 23076  010D9C  D015               	goto	l2933
 23077                           
 23078                           ; BSR set to: 0
 23079  010D9E  0E00               	movlw	0
 23080  010DA0  6F60               	movwf	___fldiv@b& (0+255),b
 23081  010DA2  0E00               	movlw	0
 23082  010DA4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 23083  010DA6  0E00               	movlw	0
 23084  010DA8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 23085  010DAA  0E00               	movlw	0
 23086  010DAC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 23087                           
 23088                           ; BSR set to: 0
 23089  010DAE  0E80               	movlw	128
 23090  010DB0  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 23091  010DB2  0E7F               	movlw	127
 23092  010DB4  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 23093                           
 23094                           ; BSR set to: 0
 23095  010DB6  C060  F060         	movff	___fldiv@b,?___fldiv
 23096  010DBA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 23097  010DBE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 23098  010DC2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 23099                           
 23100                           ; BSR set to: 0
 23101  010DC6  0012               	return	
 23102  010DC8                     l2933:
 23103                           
 23104                           ; BSR set to: 0
 23105                           
 23106                           ; BSR set to: 0
 23107  010DC8  5177               	movf	___fldiv@bexp& (0+255),w,b
 23108  010DCA  A4D8               	btfss	status,2,c
 23109  010DCC  D011               	goto	l2935
 23110                           
 23111                           ; BSR set to: 0
 23112  010DCE  0E00               	movlw	0
 23113  010DD0  6F60               	movwf	___fldiv@b& (0+255),b
 23114  010DD2  0E00               	movlw	0
 23115  010DD4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 23116  010DD6  0E00               	movlw	0
 23117  010DD8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 23118  010DDA  0E00               	movlw	0
 23119  010DDC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 23120                           
 23121                           ; BSR set to: 0
 23122  010DDE  C060  F060         	movff	___fldiv@b,?___fldiv
 23123  010DE2  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 23124  010DE6  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 23125  010DEA  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 23126                           
 23127                           ; BSR set to: 0
 23128  010DEE  0012               	return	
 23129  010DF0                     l2935:
 23130                           
 23131                           ; BSR set to: 0
 23132                           
 23133                           ; BSR set to: 0
 23134  010DF0  5178               	movf	___fldiv@aexp& (0+255),w,b
 23135  010DF2  6F68               	movwf	??___fldiv& (0+255),b
 23136  010DF4  6B69               	clrf	(??___fldiv+1)& (0+255),b
 23137  010DF6  1F68               	comf	??___fldiv& (0+255),f,b
 23138  010DF8  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 23139  010DFA  4B68               	infsnz	??___fldiv& (0+255),f,b
 23140  010DFC  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 23141  010DFE  5177               	movf	___fldiv@bexp& (0+255),w,b
 23142  010E00  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 23143  010E02  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 23144  010E04  5168               	movf	??___fldiv& (0+255),w,b
 23145  010E06  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 23146  010E08  5169               	movf	(??___fldiv+1)& (0+255),w,b
 23147  010E0A  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 23148  010E0C  0E7F               	movlw	127
 23149  010E0E  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 23150  010E10  6F71               	movwf	___fldiv@new_exp& (0+255),b
 23151  010E12  0E00               	movlw	0
 23152  010E14  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 23153  010E16  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 23154                           
 23155                           ; BSR set to: 0
 23156  010E18  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 23157  010E1C  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 23158  010E20  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 23159  010E24  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 23160                           
 23161                           ; BSR set to: 0
 23162  010E28  0E00               	movlw	0
 23163  010E2A  6F60               	movwf	___fldiv@b& (0+255),b
 23164  010E2C  0E00               	movlw	0
 23165  010E2E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 23166  010E30  0E00               	movlw	0
 23167  010E32  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 23168  010E34  0E00               	movlw	0
 23169  010E36  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 23170                           
 23171                           ; BSR set to: 0
 23172  010E38  0E00               	movlw	0
 23173  010E3A  6F73               	movwf	___fldiv@grs& (0+255),b
 23174  010E3C  0E00               	movlw	0
 23175  010E3E  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 23176  010E40  0E00               	movlw	0
 23177  010E42  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 23178  010E44  0E00               	movlw	0
 23179  010E46  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 23180                           
 23181                           ; BSR set to: 0
 23182  010E48  0E00               	movlw	0
 23183  010E4A  6F78               	movwf	___fldiv@aexp& (0+255),b
 23184  010E4C  D028               	goto	l2936
 23185  010E4E                     
 23186                           ; BSR set to: 0
 23187                           
 23188                           ; BSR set to: 0
 23189  010E4E  5178               	movf	___fldiv@aexp& (0+255),w,b
 23190  010E50  B4D8               	btfsc	status,2,c
 23191  010E52  D011               	goto	l2938
 23192                           
 23193                           ; BSR set to: 0
 23194  010E54  90D8               	bcf	status,0,c
 23195  010E56  376D               	rlcf	___fldiv@rem& (0+255),f,b
 23196  010E58  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 23197  010E5A  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 23198  010E5C  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 23199  010E5E  90D8               	bcf	status,0,c
 23200  010E60  3760               	rlcf	___fldiv@b& (0+255),f,b
 23201  010E62  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 23202  010E64  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 23203  010E66  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 23204                           
 23205                           ; BSR set to: 0
 23206  010E68  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 23207                           
 23208                           ; BSR set to: 0
 23209  010E6A  8160               	bsf	___fldiv@b& (0+255),0,b
 23210                           
 23211                           ; BSR set to: 0
 23212  010E6C  90D8               	bcf	status,0,c
 23213  010E6E  3773               	rlcf	___fldiv@grs& (0+255),f,b
 23214  010E70  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 23215  010E72  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 23216  010E74  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 23217  010E76                     l2938:
 23218                           
 23219                           ; BSR set to: 0
 23220                           
 23221                           ; BSR set to: 0
 23222  010E76  5164               	movf	___fldiv@a& (0+255),w,b
 23223  010E78  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 23224  010E7A  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 23225  010E7C  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 23226  010E7E  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 23227  010E80  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 23228  010E82  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 23229  010E84  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 23230  010E86  A0D8               	btfss	status,0,c
 23231  010E88  D009               	goto	l2940
 23232                           
 23233                           ; BSR set to: 0
 23234  010E8A  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 23235                           
 23236                           ; BSR set to: 0
 23237  010E8C  5164               	movf	___fldiv@a& (0+255),w,b
 23238  010E8E  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 23239  010E90  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 23240  010E92  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 23241  010E94  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 23242  010E96  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 23243  010E98  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 23244  010E9A  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 23245  010E9C                     l2940:
 23246                           
 23247                           ; BSR set to: 0
 23248                           
 23249                           ; BSR set to: 0
 23250  010E9C  2B78               	incf	___fldiv@aexp& (0+255),f,b
 23251  010E9E                     l2936:
 23252                           
 23253                           ; BSR set to: 0
 23254  010E9E  0E19               	movlw	25
 23255  010EA0  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 23256  010EA2  D7D5               	goto	l2937
 23257                           
 23258                           ; BSR set to: 0
 23259                           
 23260                           ; BSR set to: 0
 23261  010EA4  516D               	movf	___fldiv@rem& (0+255),w,b
 23262  010EA6  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 23263  010EA8  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 23264  010EAA  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 23265  010EAC  B4D8               	btfsc	status,2,c
 23266  010EAE  D011               	goto	l2943
 23267                           
 23268                           ; BSR set to: 0
 23269  010EB0  8173               	bsf	___fldiv@grs& (0+255),0,b
 23270                           
 23271                           ; BSR set to: 0
 23272  010EB2  D00F               	goto	l2943
 23273  010EB4                     
 23274                           ; BSR set to: 0
 23275                           
 23276                           ; BSR set to: 0
 23277  010EB4  90D8               	bcf	status,0,c
 23278  010EB6  3760               	rlcf	___fldiv@b& (0+255),f,b
 23279  010EB8  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 23280  010EBA  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 23281  010EBC  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 23282                           
 23283                           ; BSR set to: 0
 23284  010EBE  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 23285                           
 23286                           ; BSR set to: 0
 23287  010EC0  8160               	bsf	___fldiv@b& (0+255),0,b
 23288                           
 23289                           ; BSR set to: 0
 23290  010EC2  90D8               	bcf	status,0,c
 23291  010EC4  3773               	rlcf	___fldiv@grs& (0+255),f,b
 23292  010EC6  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 23293  010EC8  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 23294  010ECA  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 23295  010ECC  0771               	decf	___fldiv@new_exp& (0+255),f,b
 23296  010ECE  A0D8               	btfss	status,0,c
 23297  010ED0  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 23298  010ED2                     l2943:
 23299                           
 23300                           ; BSR set to: 0
 23301                           
 23302                           ; BSR set to: 0
 23303  010ED2  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 23304  010ED4  D7EF               	goto	l2944
 23305                           
 23306                           ; BSR set to: 0
 23307                           
 23308                           ; BSR set to: 0
 23309  010ED6  0E00               	movlw	0
 23310  010ED8  6F78               	movwf	___fldiv@aexp& (0+255),b
 23311                           
 23312                           ; BSR set to: 0
 23313  010EDA  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 23314  010EDC  D016               	goto	l2950
 23315                           
 23316                           ; BSR set to: 0
 23317  010EDE  0EFF               	movlw	255
 23318  010EE0  1573               	andwf	___fldiv@grs& (0+255),w,b
 23319  010EE2  6F68               	movwf	??___fldiv& (0+255),b
 23320  010EE4  0EFF               	movlw	255
 23321  010EE6  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 23322  010EE8  6F69               	movwf	(??___fldiv+1)& (0+255),b
 23323  010EEA  0EFF               	movlw	255
 23324  010EEC  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 23325  010EEE  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 23326  010EF0  0E7F               	movlw	127
 23327  010EF2  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 23328  010EF4  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 23329  010EF6  5168               	movf	??___fldiv& (0+255),w,b
 23330  010EF8  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 23331  010EFA  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 23332  010EFC  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 23333  010EFE  A4D8               	btfss	status,2,c
 23334  010F00  D002               	goto	u11280
 23335                           
 23336                           ; BSR set to: 0
 23337                           
 23338                           ; BSR set to: 0
 23339  010F02  A160               	btfss	___fldiv@b& (0+255),0,b
 23340  010F04  D002               	goto	l2950
 23341  010F06                     u11280:
 23342                           
 23343                           ; BSR set to: 0
 23344  010F06  0E01               	movlw	1
 23345  010F08  6F78               	movwf	___fldiv@aexp& (0+255),b
 23346  010F0A                     l2950:
 23347                           
 23348                           ; BSR set to: 0
 23349                           
 23350                           ; BSR set to: 0
 23351                           
 23352                           ; BSR set to: 0
 23353  010F0A  5178               	movf	___fldiv@aexp& (0+255),w,b
 23354  010F0C  B4D8               	btfsc	status,2,c
 23355  010F0E  D01F               	goto	l2952
 23356                           
 23357                           ; BSR set to: 0
 23358  010F10  0E01               	movlw	1
 23359  010F12  2760               	addwf	___fldiv@b& (0+255),f,b
 23360  010F14  0E00               	movlw	0
 23361  010F16  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 23362  010F18  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 23363  010F1A  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 23364                           
 23365                           ; BSR set to: 0
 23366  010F1C  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 23367  010F1E  D017               	goto	l2952
 23368                           
 23369                           ; BSR set to: 0
 23370  010F20  C060  F068         	movff	___fldiv@b,??___fldiv
 23371  010F24  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 23372  010F28  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 23373  010F2C  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 23374  010F30  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 23375  010F32  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 23376  010F34  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 23377  010F36  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 23378  010F38  3368               	rrcf	??___fldiv& (0+255),f,b
 23379  010F3A  C068  F060         	movff	??___fldiv,___fldiv@b
 23380  010F3E  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 23381  010F42  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 23382  010F46  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 23383                           
 23384                           ; BSR set to: 0
 23385  010F4A  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 23386  010F4C  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 23387  010F4E                     l2952:
 23388                           
 23389                           ; BSR set to: 0
 23390                           
 23391                           ; BSR set to: 0
 23392                           
 23393                           ; BSR set to: 0
 23394  010F4E  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 23395  010F50  D010               	goto	l2953
 23396  010F52  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 23397  010F54  E103               	bnz	u11310
 23398  010F56  2971               	incf	___fldiv@new_exp& (0+255),w,b
 23399  010F58  A0D8               	btfss	status,0,c
 23400  010F5A  D00B               	goto	l2953
 23401  010F5C                     u11310:
 23402                           
 23403                           ; BSR set to: 0
 23404  010F5C  0E00               	movlw	0
 23405  010F5E  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 23406  010F60  6971               	setf	___fldiv@new_exp& (0+255),b
 23407  010F62  0E00               	movlw	0
 23408  010F64  6F60               	movwf	___fldiv@b& (0+255),b
 23409  010F66  0E00               	movlw	0
 23410  010F68  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 23411  010F6A  0E00               	movlw	0
 23412  010F6C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 23413  010F6E  0E00               	movlw	0
 23414  010F70  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 23415  010F72                     l2953:
 23416                           
 23417                           ; BSR set to: 0
 23418                           
 23419                           ; BSR set to: 0
 23420  010F72  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 23421  010F74  D005               	goto	u11320
 23422  010F76  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 23423  010F78  E111               	bnz	l14016
 23424  010F7A  0571               	decf	___fldiv@new_exp& (0+255),w,b
 23425  010F7C  B0D8               	btfsc	status,0,c
 23426  010F7E  D00E               	goto	l2954
 23427  010F80                     u11320:
 23428                           
 23429                           ; BSR set to: 0
 23430  010F80  0E00               	movlw	0
 23431  010F82  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 23432  010F84  0E00               	movlw	0
 23433  010F86  6F71               	movwf	___fldiv@new_exp& (0+255),b
 23434  010F88  0E00               	movlw	0
 23435  010F8A  6F60               	movwf	___fldiv@b& (0+255),b
 23436  010F8C  0E00               	movlw	0
 23437  010F8E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 23438  010F90  0E00               	movlw	0
 23439  010F92  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 23440  010F94  0E00               	movlw	0
 23441  010F96  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 23442  010F98  0E00               	movlw	0
 23443  010F9A  6F6C               	movwf	___fldiv@sign& (0+255),b
 23444  010F9C                     l2954:
 23445  010F9C                     l14016:
 23446                           
 23447                           ; BSR set to: 0
 23448  010F9C  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 23449                           
 23450                           ; BSR set to: 0
 23451  010FA0  A177               	btfss	___fldiv@bexp& (0+255),0,b
 23452  010FA2  D002               	goto	l2955
 23453                           
 23454                           ; BSR set to: 0
 23455  010FA4  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 23456  010FA6  D001               	goto	l2956
 23457  010FA8                     l2955:
 23458                           
 23459                           ; BSR set to: 0
 23460                           
 23461                           ; BSR set to: 0
 23462  010FA8  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 23463  010FAA                     l2956:
 23464                           
 23465                           ; BSR set to: 0
 23466                           
 23467                           ; BSR set to: 0
 23468  010FAA  90D8               	bcf	status,0,c
 23469  010FAC  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 23470  010FAE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 23471                           
 23472                           ; BSR set to: 0
 23473  010FB0  516C               	movf	___fldiv@sign& (0+255),w,b
 23474  010FB2  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 23475                           
 23476                           ; BSR set to: 0
 23477  010FB4  C060  F060         	movff	___fldiv@b,?___fldiv
 23478  010FB8  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 23479  010FBC  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 23480  010FC0  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 23481  010FC4  0012               	return	
 23482  010FC6                     __end_of___fldiv:
 23483                           	opt stack 0
 23484                           tosu	equ	0xFFF
 23485                           tosh	equ	0xFFE
 23486                           tosl	equ	0xFFD
 23487                           pclath	equ	0xFFA
 23488                           tblptru	equ	0xFF8
 23489                           tblptrh	equ	0xFF7
 23490                           tblptrl	equ	0xFF6
 23491                           tablat	equ	0xFF5
 23492                           prodh	equ	0xFF4
 23493                           prodl	equ	0xFF3
 23494                           intcon	equ	0xFF2
 23495                           indf0	equ	0xFEF
 23496                           postinc0	equ	0xFEE
 23497                           fsr0h	equ	0xFEA
 23498                           fsr0l	equ	0xFE9
 23499                           wreg	equ	0xFE8
 23500                           indf1	equ	0xFE7
 23501                           postdec1	equ	0xFE5
 23502                           plusw1	equ	0xFE3
 23503                           fsr1h	equ	0xFE2
 23504                           fsr1l	equ	0xFE1
 23505                           indf2	equ	0xFDF
 23506                           postinc2	equ	0xFDE
 23507                           postdec2	equ	0xFDD
 23508                           plusw2	equ	0xFDB
 23509                           fsr2h	equ	0xFDA
 23510                           fsr2l	equ	0xFD9
 23511                           status	equ	0xFD8
 23512                           
 23513 ;; *************** function ___awdiv *****************
 23514 ;; Defined at:
 23515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 23516 ;; Parameters:    Size  Location     Type
 23517 ;;  dividend        2    0[BANK0 ] int 
 23518 ;;  divisor         2    2[BANK0 ] int 
 23519 ;; Auto vars:     Size  Location     Type
 23520 ;;  quotient        2    6[BANK0 ] int 
 23521 ;;  sign            1    5[BANK0 ] unsigned char 
 23522 ;;  counter         1    4[BANK0 ] unsigned char 
 23523 ;; Return value:  Size  Location     Type
 23524 ;;                  2    0[BANK0 ] int 
 23525 ;; Registers used:
 23526 ;;		wreg, status,2, status,0
 23527 ;; Tracked objects:
 23528 ;;		On entry : 0/0
 23529 ;;		On exit  : 0/0
 23530 ;;		Unchanged: 0/0
 23531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23532 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23535 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23536 ;;Total ram usage:        8 bytes
 23537 ;; Hardware stack levels used:    1
 23538 ;; Hardware stack levels required when called:    7
 23539 ;; This function calls:
 23540 ;;		Nothing
 23541 ;; This function is called by:
 23542 ;;		_Console_Tab
 23543 ;;		_ADCAverage
 23544 ;; This function uses a non-reentrant model
 23545 ;;
 23546                           
 23547                           	psect	text121
 23548  014078                     __ptext121:
 23549                           	opt stack 0
 23550  014078                     ___awdiv:
 23551                           	opt stack 19
 23552                           
 23553                           ; BSR set to: 0
 23554                           ;incstack = 0
 23555  014078  0E00               	movlw	0
 23556  01407A  0100               	movlb	0	; () banked
 23557  01407C  6F65               	movwf	___awdiv@sign& (0+255),b
 23558                           
 23559                           ; BSR set to: 0
 23560  01407E  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 23561  014080  D006               	goto	l2593
 23562                           
 23563                           ; BSR set to: 0
 23564  014082  6D62               	negf	___awdiv@divisor& (0+255),b
 23565  014084  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 23566  014086  B0D8               	btfsc	status,0,c
 23567  014088  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 23568                           
 23569                           ; BSR set to: 0
 23570  01408A  0E01               	movlw	1
 23571  01408C  6F65               	movwf	___awdiv@sign& (0+255),b
 23572  01408E                     l2593:
 23573                           
 23574                           ; BSR set to: 0
 23575                           
 23576                           ; BSR set to: 0
 23577  01408E  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 23578  014090  D006               	goto	l2594
 23579                           
 23580                           ; BSR set to: 0
 23581  014092  6D60               	negf	___awdiv@dividend& (0+255),b
 23582  014094  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 23583  014096  B0D8               	btfsc	status,0,c
 23584  014098  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 23585                           
 23586                           ; BSR set to: 0
 23587  01409A  0E01               	movlw	1
 23588  01409C  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 23589  01409E                     l2594:
 23590                           
 23591                           ; BSR set to: 0
 23592                           
 23593                           ; BSR set to: 0
 23594  01409E  0E00               	movlw	0
 23595  0140A0  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 23596  0140A2  0E00               	movlw	0
 23597  0140A4  6F66               	movwf	___awdiv@quotient& (0+255),b
 23598                           
 23599                           ; BSR set to: 0
 23600  0140A6  5162               	movf	___awdiv@divisor& (0+255),w,b
 23601  0140A8  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 23602  0140AA  B4D8               	btfsc	status,2,c
 23603  0140AC  D01C               	goto	l2601
 23604                           
 23605                           ; BSR set to: 0
 23606  0140AE  0E01               	movlw	1
 23607  0140B0  6F64               	movwf	___awdiv@counter& (0+255),b
 23608  0140B2  D004               	goto	l2596
 23609  0140B4                     
 23610                           ; BSR set to: 0
 23611                           
 23612                           ; BSR set to: 0
 23613  0140B4  90D8               	bcf	status,0,c
 23614  0140B6  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 23615  0140B8  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 23616  0140BA  2B64               	incf	___awdiv@counter& (0+255),f,b
 23617  0140BC                     l2596:
 23618                           
 23619                           ; BSR set to: 0
 23620                           
 23621                           ; BSR set to: 0
 23622  0140BC  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 23623  0140BE  D7FA               	goto	l2597
 23624  0140C0                     u9820:
 23625                           
 23626                           ; BSR set to: 0
 23627                           
 23628                           ; BSR set to: 0
 23629                           
 23630                           ; BSR set to: 0
 23631  0140C0  90D8               	bcf	status,0,c
 23632  0140C2  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 23633  0140C4  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 23634                           
 23635                           ; BSR set to: 0
 23636  0140C6  5162               	movf	___awdiv@divisor& (0+255),w,b
 23637  0140C8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 23638  0140CA  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 23639  0140CC  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 23640  0140CE  A0D8               	btfss	status,0,c
 23641  0140D0  D005               	goto	l2600
 23642                           
 23643                           ; BSR set to: 0
 23644  0140D2  5162               	movf	___awdiv@divisor& (0+255),w,b
 23645  0140D4  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 23646  0140D6  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 23647  0140D8  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 23648                           
 23649                           ; BSR set to: 0
 23650  0140DA  8166               	bsf	___awdiv@quotient& (0+255),0,b
 23651  0140DC                     l2600:
 23652                           
 23653                           ; BSR set to: 0
 23654                           
 23655                           ; BSR set to: 0
 23656  0140DC  90D8               	bcf	status,0,c
 23657  0140DE  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 23658  0140E0  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 23659                           
 23660                           ; BSR set to: 0
 23661  0140E2  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 23662  0140E4  D7ED               	goto	u9820
 23663  0140E6                     l2601:
 23664                           
 23665                           ; BSR set to: 0
 23666                           
 23667                           ; BSR set to: 0
 23668                           
 23669                           ; BSR set to: 0
 23670  0140E6  5165               	movf	___awdiv@sign& (0+255),w,b
 23671  0140E8  B4D8               	btfsc	status,2,c
 23672  0140EA  D004               	goto	l2602
 23673                           
 23674                           ; BSR set to: 0
 23675  0140EC  6D66               	negf	___awdiv@quotient& (0+255),b
 23676  0140EE  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 23677  0140F0  B0D8               	btfsc	status,0,c
 23678  0140F2  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 23679  0140F4                     l2602:
 23680                           
 23681                           ; BSR set to: 0
 23682                           
 23683                           ; BSR set to: 0
 23684  0140F4  C066  F060         	movff	___awdiv@quotient,?___awdiv
 23685  0140F8  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 23686  0140FC  0012               	return	
 23687  0140FE                     __end_of___awdiv:
 23688                           	opt stack 0
 23689                           tosu	equ	0xFFF
 23690                           tosh	equ	0xFFE
 23691                           tosl	equ	0xFFD
 23692                           pclath	equ	0xFFA
 23693                           tblptru	equ	0xFF8
 23694                           tblptrh	equ	0xFF7
 23695                           tblptrl	equ	0xFF6
 23696                           tablat	equ	0xFF5
 23697                           prodh	equ	0xFF4
 23698                           prodl	equ	0xFF3
 23699                           intcon	equ	0xFF2
 23700                           indf0	equ	0xFEF
 23701                           postinc0	equ	0xFEE
 23702                           fsr0h	equ	0xFEA
 23703                           fsr0l	equ	0xFE9
 23704                           wreg	equ	0xFE8
 23705                           indf1	equ	0xFE7
 23706                           postdec1	equ	0xFE5
 23707                           plusw1	equ	0xFE3
 23708                           fsr1h	equ	0xFE2
 23709                           fsr1l	equ	0xFE1
 23710                           indf2	equ	0xFDF
 23711                           postinc2	equ	0xFDE
 23712                           postdec2	equ	0xFDD
 23713                           plusw2	equ	0xFDB
 23714                           fsr2h	equ	0xFDA
 23715                           fsr2l	equ	0xFD9
 23716                           status	equ	0xFD8
 23717                           
 23718 ;; *************** function _HMI_SetNumber *****************
 23719 ;; Defined at:
 23720 ;;		line 221 in file "HMI.c"
 23721 ;; Parameters:    Size  Location     Type
 23722 ;;  pInput          2   22[BANK0 ] int 
 23723 ;; Auto vars:     Size  Location     Type
 23724 ;;		None
 23725 ;; Return value:  Size  Location     Type
 23726 ;;                  1    wreg      void 
 23727 ;; Registers used:
 23728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 23729 ;; Tracked objects:
 23730 ;;		On entry : 0/0
 23731 ;;		On exit  : 0/0
 23732 ;;		Unchanged: 0/0
 23733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23734 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23738 ;;Total ram usage:        2 bytes
 23739 ;; Hardware stack levels used:    1
 23740 ;; Hardware stack levels required when called:    9
 23741 ;; This function calls:
 23742 ;;		_HMI_SetSegments
 23743 ;;		_itos
 23744 ;; This function is called by:
 23745 ;;		_Event_TestButton
 23746 ;;		_main
 23747 ;;		_ADCAverage
 23748 ;;		_Event_HMI_UpButton
 23749 ;;		_Event_HMI_DownButton
 23750 ;; This function uses a non-reentrant model
 23751 ;;
 23752                           
 23753                           	psect	text122
 23754  015278                     __ptext122:
 23755                           	opt stack 0
 23756  015278                     _HMI_SetNumber:
 23757                           	opt stack 21
 23758                           
 23759                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 23760                           
 23761                           ; BSR set to: 0
 23762                           ;incstack = 0
 23763  015278  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 23764  01527C  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 23765  015280  0E4B               	movlw	low _HMIBoard
 23766  015282  0100               	movlb	0	; () banked
 23767  015284  6F6E               	movwf	itos@destination& (0+255),b
 23768  015286  0E01               	movlw	high _HMIBoard
 23769  015288  6F6F               	movwf	(itos@destination+1)& (0+255),b
 23770  01528A  ECA3  F09B         	call	_itos	;wreg free
 23771                           
 23772                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 23773  01528E  0E4B               	movlw	low _HMIBoard
 23774  015290  0100               	movlb	0	; () banked
 23775  015292  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 23776  015294  0E01               	movlw	high _HMIBoard
 23777  015296  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 23778  015298  ECFB  F09D         	call	_HMI_SetSegments	;wreg free
 23779  01529C  0012               	return		;funcret
 23780  01529E                     __end_of_HMI_SetNumber:
 23781                           	opt stack 0
 23782                           tosu	equ	0xFFF
 23783                           tosh	equ	0xFFE
 23784                           tosl	equ	0xFFD
 23785                           pclath	equ	0xFFA
 23786                           tblptru	equ	0xFF8
 23787                           tblptrh	equ	0xFF7
 23788                           tblptrl	equ	0xFF6
 23789                           tablat	equ	0xFF5
 23790                           prodh	equ	0xFF4
 23791                           prodl	equ	0xFF3
 23792                           intcon	equ	0xFF2
 23793                           indf0	equ	0xFEF
 23794                           postinc0	equ	0xFEE
 23795                           fsr0h	equ	0xFEA
 23796                           fsr0l	equ	0xFE9
 23797                           wreg	equ	0xFE8
 23798                           indf1	equ	0xFE7
 23799                           postdec1	equ	0xFE5
 23800                           plusw1	equ	0xFE3
 23801                           fsr1h	equ	0xFE2
 23802                           fsr1l	equ	0xFE1
 23803                           indf2	equ	0xFDF
 23804                           postinc2	equ	0xFDE
 23805                           postdec2	equ	0xFDD
 23806                           plusw2	equ	0xFDB
 23807                           fsr2h	equ	0xFDA
 23808                           fsr2l	equ	0xFD9
 23809                           status	equ	0xFD8
 23810                           
 23811 ;; *************** function _itos *****************
 23812 ;; Defined at:
 23813 ;;		line 369 in file "Library/Types.c"
 23814 ;; Parameters:    Size  Location     Type
 23815 ;;  input           2   12[BANK0 ] unsigned short 
 23816 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 23817 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 23818 ;; Auto vars:     Size  Location     Type
 23819 ;;  Out             2   20[BANK0 ] unsigned short 
 23820 ;;  Length          2   18[BANK0 ] unsigned short 
 23821 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 23822 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 23823 ;; Return value:  Size  Location     Type
 23824 ;;                  1    wreg      void 
 23825 ;; Registers used:
 23826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 23827 ;; Tracked objects:
 23828 ;;		On entry : 0/0
 23829 ;;		On exit  : 0/0
 23830 ;;		Unchanged: 0/0
 23831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23833 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23835 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23836 ;;Total ram usage:       10 bytes
 23837 ;; Hardware stack levels used:    1
 23838 ;; Hardware stack levels required when called:    8
 23839 ;; This function calls:
 23840 ;;		___lwdiv
 23841 ;;		___lwmod
 23842 ;;		_reverse
 23843 ;; This function is called by:
 23844 ;;		_HMI_SetNumber
 23845 ;; This function uses a non-reentrant model
 23846 ;;
 23847                           
 23848                           	psect	text123
 23849  013746                     __ptext123:
 23850                           	opt stack 0
 23851  013746                     _itos:
 23852                           	opt stack 21
 23853                           
 23854                           ;Types.c: 371: UINT16 Out = input;
 23855                           
 23856                           ;incstack = 0
 23857  013746  C06C  F074         	movff	itos@input,itos@Out
 23858  01374A  C06D  F075         	movff	itos@input+1,itos@Out+1
 23859                           
 23860                           ;Types.c: 372: UINT16 Length = 0;
 23861  01374E  0E00               	movlw	0
 23862  013750  0100               	movlb	0	; () banked
 23863  013752  6F73               	movwf	(itos@Length+1)& (0+255),b
 23864  013754  0E00               	movlw	0
 23865  013756  6F72               	movwf	itos@Length& (0+255),b
 23866                           
 23867                           ; BSR set to: 0
 23868                           ;Types.c: 373: char *Data = destination;
 23869  013758  C06E  F070         	movff	itos@destination,itos@Data
 23870  01375C  C06F  F071         	movff	itos@destination+1,itos@Data+1
 23871                           
 23872                           ; BSR set to: 0
 23873                           ;Types.c: 374: if(Out == 0)
 23874  013760  5174               	movf	itos@Out& (0+255),w,b
 23875  013762  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 23876  013764  A4D8               	btfss	status,2,c
 23877  013766  D030               	goto	l929
 23878                           
 23879                           ; BSR set to: 0
 23880                           ;Types.c: 375: {
 23881                           ;Types.c: 376: Data[0] = (UINT16)'0';
 23882  013768  C070  FFD9         	movff	itos@Data,fsr2l
 23883  01376C  C071  FFDA         	movff	itos@Data+1,fsr2h
 23884  013770  0E30               	movlw	48
 23885  013772  6EDF               	movwf	indf2,c
 23886                           
 23887                           ; BSR set to: 0
 23888                           ;Types.c: 377: Length = 1;
 23889  013774  0E00               	movlw	0
 23890  013776  6F73               	movwf	(itos@Length+1)& (0+255),b
 23891  013778  0E01               	movlw	1
 23892  01377A  6F72               	movwf	itos@Length& (0+255),b
 23893                           
 23894                           ;Types.c: 378: }
 23895  01377C  D039               	goto	l928
 23896  01377E                     
 23897                           ; BSR set to: 0
 23898                           ;Types.c: 382: {
 23899                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 23900                           
 23901                           ; BSR set to: 0
 23902  01377E  C074  F067         	movff	itos@Out,___lwmod@dividend
 23903  013782  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 23904  013786  0E00               	movlw	0
 23905  013788  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 23906  01378A  0E0A               	movlw	10
 23907  01378C  6F69               	movwf	___lwmod@divisor& (0+255),b
 23908  01378E  ECAB  F0A6         	call	___lwmod	;wreg free
 23909  013792  0100               	movlb	0	; () banked
 23910  013794  5167               	movf	?___lwmod& (0+255),w,b
 23911  013796  0F30               	addlw	48
 23912  013798  C070  FFD9         	movff	itos@Data,fsr2l
 23913  01379C  C071  FFDA         	movff	itos@Data+1,fsr2h
 23914  0137A0  6EDF               	movwf	indf2,c
 23915                           
 23916                           ; BSR set to: 0
 23917                           ;Types.c: 384: Out /= 10;
 23918  0137A2  C074  F060         	movff	itos@Out,___lwdiv@dividend
 23919  0137A6  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 23920  0137AA  0E00               	movlw	0
 23921  0137AC  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 23922  0137AE  0E0A               	movlw	10
 23923  0137B0  6F62               	movwf	___lwdiv@divisor& (0+255),b
 23924  0137B2  EC07  F0A5         	call	___lwdiv	;wreg free
 23925  0137B6  C060  F074         	movff	?___lwdiv,itos@Out
 23926  0137BA  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 23927                           
 23928                           ;Types.c: 385: Length ++;
 23929  0137BE  0100               	movlb	0	; () banked
 23930  0137C0  4B72               	infsnz	itos@Length& (0+255),f,b
 23931  0137C2  2B73               	incf	(itos@Length+1)& (0+255),f,b
 23932                           
 23933                           ; BSR set to: 0
 23934                           ;Types.c: 386: Data++;
 23935  0137C4  4B70               	infsnz	itos@Data& (0+255),f,b
 23936  0137C6  2B71               	incf	(itos@Data+1)& (0+255),f,b
 23937  0137C8                     l929:
 23938                           
 23939                           ; BSR set to: 0
 23940                           
 23941                           ; BSR set to: 0
 23942  0137C8  5174               	movf	itos@Out& (0+255),w,b
 23943  0137CA  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 23944  0137CC  B4D8               	btfsc	status,2,c
 23945  0137CE  D006               	goto	u9950
 23946                           
 23947                           ; BSR set to: 0
 23948  0137D0  5173               	movf	(itos@Length+1)& (0+255),w,b
 23949  0137D2  E104               	bnz	l13076
 23950  0137D4  0E06               	movlw	6
 23951  0137D6  5D72               	subwf	itos@Length& (0+255),w,b
 23952  0137D8  A0D8               	btfss	status,0,c
 23953  0137DA  D7D1               	goto	l930
 23954  0137DC                     u9950:
 23955  0137DC                     l13076:
 23956                           
 23957                           ; BSR set to: 0
 23958                           ;Types.c: 387: }
 23959                           ;Types.c: 388: reverse(destination, Length);
 23960  0137DC  C06E  F060         	movff	itos@destination,reverse@input
 23961  0137E0  C06F  F061         	movff	itos@destination+1,reverse@input+1
 23962  0137E4  C072  F062         	movff	itos@Length,reverse@length
 23963  0137E8  C073  F063         	movff	itos@Length+1,reverse@length+1
 23964  0137EC  ECDD  F0A4         	call	_reverse	;wreg free
 23965  0137F0                     l928:
 23966                           
 23967                           ;Types.c: 389: }
 23968                           ;Types.c: 390: destination[Length] = '\0';
 23969  0137F0  0100               	movlb	0	; () banked
 23970  0137F2  5172               	movf	itos@Length& (0+255),w,b
 23971  0137F4  256E               	addwf	itos@destination& (0+255),w,b
 23972  0137F6  6ED9               	movwf	fsr2l,c
 23973  0137F8  5173               	movf	(itos@Length+1)& (0+255),w,b
 23974  0137FA  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 23975  0137FC  6EDA               	movwf	fsr2h,c
 23976  0137FE  0E00               	movlw	0
 23977  013800  6EDF               	movwf	indf2,c
 23978                           
 23979                           ; BSR set to: 0
 23980  013802  0012               	return		;funcret
 23981  013804                     __end_of_itos:
 23982                           	opt stack 0
 23983                           tosu	equ	0xFFF
 23984                           tosh	equ	0xFFE
 23985                           tosl	equ	0xFFD
 23986                           pclath	equ	0xFFA
 23987                           tblptru	equ	0xFF8
 23988                           tblptrh	equ	0xFF7
 23989                           tblptrl	equ	0xFF6
 23990                           tablat	equ	0xFF5
 23991                           prodh	equ	0xFF4
 23992                           prodl	equ	0xFF3
 23993                           intcon	equ	0xFF2
 23994                           indf0	equ	0xFEF
 23995                           postinc0	equ	0xFEE
 23996                           fsr0h	equ	0xFEA
 23997                           fsr0l	equ	0xFE9
 23998                           wreg	equ	0xFE8
 23999                           indf1	equ	0xFE7
 24000                           postdec1	equ	0xFE5
 24001                           plusw1	equ	0xFE3
 24002                           fsr1h	equ	0xFE2
 24003                           fsr1l	equ	0xFE1
 24004                           indf2	equ	0xFDF
 24005                           postinc2	equ	0xFDE
 24006                           postdec2	equ	0xFDD
 24007                           plusw2	equ	0xFDB
 24008                           fsr2h	equ	0xFDA
 24009                           fsr2l	equ	0xFD9
 24010                           status	equ	0xFD8
 24011                           
 24012 ;; *************** function _reverse *****************
 24013 ;; Defined at:
 24014 ;;		line 357 in file "Library/Types.c"
 24015 ;; Parameters:    Size  Location     Type
 24016 ;;  input           2    0[BANK0 ] PTR unsigned char 
 24017 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 24018 ;;  length          2    2[BANK0 ] unsigned short 
 24019 ;; Auto vars:     Size  Location     Type
 24020 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 24021 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 24022 ;;  tempVar         1    4[BANK0 ] unsigned char 
 24023 ;; Return value:  Size  Location     Type
 24024 ;;                  1    wreg      void 
 24025 ;; Registers used:
 24026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 24027 ;; Tracked objects:
 24028 ;;		On entry : 0/0
 24029 ;;		On exit  : 0/0
 24030 ;;		Unchanged: 0/0
 24031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24032 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24033 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24035 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24036 ;;Total ram usage:        7 bytes
 24037 ;; Hardware stack levels used:    1
 24038 ;; Hardware stack levels required when called:    7
 24039 ;; This function calls:
 24040 ;;		Nothing
 24041 ;; This function is called by:
 24042 ;;		_itos
 24043 ;; This function uses a non-reentrant model
 24044 ;;
 24045                           
 24046                           	psect	text124
 24047  0149BA                     __ptext124:
 24048                           	opt stack 0
 24049  0149BA                     _reverse:
 24050                           	opt stack 21
 24051                           
 24052                           ;Types.c: 359: char tempVar,
 24053                           ;Types.c: 360: *iterator = input + length;
 24054                           
 24055                           ; BSR set to: 0
 24056                           ;incstack = 0
 24057  0149BA  0100               	movlb	0	; () banked
 24058  0149BC  5162               	movf	reverse@length& (0+255),w,b
 24059  0149BE  2560               	addwf	reverse@input& (0+255),w,b
 24060  0149C0  6F65               	movwf	reverse@iterator& (0+255),b
 24061  0149C2  5163               	movf	(reverse@length+1)& (0+255),w,b
 24062  0149C4  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 24063  0149C6  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 24064                           
 24065                           ;Types.c: 362: while ( --iterator > input )
 24066  0149C8  D018               	goto	l921
 24067  0149CA                     
 24068                           ; BSR set to: 0
 24069                           ;Types.c: 363: {
 24070                           ;Types.c: 364: tempVar = *input;
 24071                           
 24072                           ; BSR set to: 0
 24073  0149CA  C060  FFD9         	movff	reverse@input,fsr2l
 24074  0149CE  C061  FFDA         	movff	reverse@input+1,fsr2h
 24075  0149D2  50DF               	movf	indf2,w,c
 24076  0149D4  6F64               	movwf	reverse@tempVar& (0+255),b
 24077                           
 24078                           ; BSR set to: 0
 24079                           ;Types.c: 365: *input++=*iterator;
 24080  0149D6  C065  FFD9         	movff	reverse@iterator,fsr2l
 24081  0149DA  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 24082  0149DE  C060  FFE1         	movff	reverse@input,fsr1l
 24083  0149E2  C061  FFE2         	movff	reverse@input+1,fsr1h
 24084  0149E6  CFDF FFE7          	movff	indf2,indf1
 24085                           
 24086                           ; BSR set to: 0
 24087  0149EA  4B60               	infsnz	reverse@input& (0+255),f,b
 24088  0149EC  2B61               	incf	(reverse@input+1)& (0+255),f,b
 24089                           
 24090                           ; BSR set to: 0
 24091                           ;Types.c: 366: *iterator=tempVar;
 24092  0149EE  C065  FFD9         	movff	reverse@iterator,fsr2l
 24093  0149F2  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 24094  0149F6  C064  FFDF         	movff	reverse@tempVar,indf2
 24095  0149FA                     l921:
 24096                           
 24097                           ; BSR set to: 0
 24098                           
 24099                           ; BSR set to: 0
 24100  0149FA  0765               	decf	reverse@iterator& (0+255),f,b
 24101  0149FC  A0D8               	btfss	status,0,c
 24102  0149FE  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 24103  014A00  5165               	movf	reverse@iterator& (0+255),w,b
 24104  014A02  5D60               	subwf	reverse@input& (0+255),w,b
 24105  014A04  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 24106  014A06  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 24107  014A08  B0D8               	btfsc	status,0,c
 24108  014A0A  0012               	return	
 24109  014A0C  D7DE               	goto	l922
 24110  014A0E                     __end_of_reverse:
 24111                           	opt stack 0
 24112                           tosu	equ	0xFFF
 24113                           tosh	equ	0xFFE
 24114                           tosl	equ	0xFFD
 24115                           pclath	equ	0xFFA
 24116                           tblptru	equ	0xFF8
 24117                           tblptrh	equ	0xFF7
 24118                           tblptrl	equ	0xFF6
 24119                           tablat	equ	0xFF5
 24120                           prodh	equ	0xFF4
 24121                           prodl	equ	0xFF3
 24122                           intcon	equ	0xFF2
 24123                           indf0	equ	0xFEF
 24124                           postinc0	equ	0xFEE
 24125                           fsr0h	equ	0xFEA
 24126                           fsr0l	equ	0xFE9
 24127                           wreg	equ	0xFE8
 24128                           indf1	equ	0xFE7
 24129                           postdec1	equ	0xFE5
 24130                           plusw1	equ	0xFE3
 24131                           fsr1h	equ	0xFE2
 24132                           fsr1l	equ	0xFE1
 24133                           indf2	equ	0xFDF
 24134                           postinc2	equ	0xFDE
 24135                           postdec2	equ	0xFDD
 24136                           plusw2	equ	0xFDB
 24137                           fsr2h	equ	0xFDA
 24138                           fsr2l	equ	0xFD9
 24139                           status	equ	0xFD8
 24140                           
 24141 ;; *************** function ___lwmod *****************
 24142 ;; Defined at:
 24143 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 24144 ;; Parameters:    Size  Location     Type
 24145 ;;  dividend        2    7[BANK0 ] unsigned int 
 24146 ;;  divisor         2    9[BANK0 ] unsigned int 
 24147 ;; Auto vars:     Size  Location     Type
 24148 ;;  counter         1   11[BANK0 ] unsigned char 
 24149 ;; Return value:  Size  Location     Type
 24150 ;;                  2    7[BANK0 ] unsigned int 
 24151 ;; Registers used:
 24152 ;;		wreg, status,2, status,0
 24153 ;; Tracked objects:
 24154 ;;		On entry : 0/0
 24155 ;;		On exit  : 0/0
 24156 ;;		Unchanged: 0/0
 24157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24158 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24161 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24162 ;;Total ram usage:        5 bytes
 24163 ;; Hardware stack levels used:    1
 24164 ;; Hardware stack levels required when called:    7
 24165 ;; This function calls:
 24166 ;;		Nothing
 24167 ;; This function is called by:
 24168 ;;		_itos
 24169 ;;		_printf
 24170 ;; This function uses a non-reentrant model
 24171 ;;
 24172                           
 24173                           	psect	text125
 24174  014D56                     __ptext125:
 24175                           	opt stack 0
 24176  014D56                     ___lwmod:
 24177                           	opt stack 22
 24178                           
 24179                           ; BSR set to: 0
 24180                           ;incstack = 0
 24181  014D56  0100               	movlb	0	; () banked
 24182  014D58  5169               	movf	___lwmod@divisor& (0+255),w,b
 24183  014D5A  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 24184  014D5C  B4D8               	btfsc	status,2,c
 24185  014D5E  D018               	goto	l2844
 24186                           
 24187                           ; BSR set to: 0
 24188  014D60  0E01               	movlw	1
 24189  014D62  6F6B               	movwf	___lwmod@counter& (0+255),b
 24190  014D64  D004               	goto	l2839
 24191  014D66                     
 24192                           ; BSR set to: 0
 24193                           
 24194                           ; BSR set to: 0
 24195  014D66  90D8               	bcf	status,0,c
 24196  014D68  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 24197  014D6A  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24198  014D6C  2B6B               	incf	___lwmod@counter& (0+255),f,b
 24199  014D6E                     l2839:
 24200                           
 24201                           ; BSR set to: 0
 24202                           
 24203                           ; BSR set to: 0
 24204  014D6E  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24205  014D70  D7FA               	goto	l2840
 24206  014D72                     u9890:
 24207                           
 24208                           ; BSR set to: 0
 24209                           
 24210                           ; BSR set to: 0
 24211                           
 24212                           ; BSR set to: 0
 24213  014D72  5169               	movf	___lwmod@divisor& (0+255),w,b
 24214  014D74  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 24215  014D76  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24216  014D78  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24217  014D7A  A0D8               	btfss	status,0,c
 24218  014D7C  D004               	goto	l2843
 24219                           
 24220                           ; BSR set to: 0
 24221  014D7E  5169               	movf	___lwmod@divisor& (0+255),w,b
 24222  014D80  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 24223  014D82  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24224  014D84  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24225  014D86                     l2843:
 24226                           
 24227                           ; BSR set to: 0
 24228                           
 24229                           ; BSR set to: 0
 24230  014D86  90D8               	bcf	status,0,c
 24231  014D88  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24232  014D8A  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 24233                           
 24234                           ; BSR set to: 0
 24235  014D8C  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 24236  014D8E  D7F1               	goto	u9890
 24237  014D90                     l2844:
 24238                           
 24239                           ; BSR set to: 0
 24240                           
 24241                           ; BSR set to: 0
 24242  014D90  C067  F067         	movff	___lwmod@dividend,?___lwmod
 24243  014D94  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 24244                           
 24245                           ; BSR set to: 0
 24246  014D98  0012               	return		;funcret
 24247  014D9A                     __end_of___lwmod:
 24248                           	opt stack 0
 24249                           tosu	equ	0xFFF
 24250                           tosh	equ	0xFFE
 24251                           tosl	equ	0xFFD
 24252                           pclath	equ	0xFFA
 24253                           tblptru	equ	0xFF8
 24254                           tblptrh	equ	0xFF7
 24255                           tblptrl	equ	0xFF6
 24256                           tablat	equ	0xFF5
 24257                           prodh	equ	0xFF4
 24258                           prodl	equ	0xFF3
 24259                           intcon	equ	0xFF2
 24260                           indf0	equ	0xFEF
 24261                           postinc0	equ	0xFEE
 24262                           fsr0h	equ	0xFEA
 24263                           fsr0l	equ	0xFE9
 24264                           wreg	equ	0xFE8
 24265                           indf1	equ	0xFE7
 24266                           postdec1	equ	0xFE5
 24267                           plusw1	equ	0xFE3
 24268                           fsr1h	equ	0xFE2
 24269                           fsr1l	equ	0xFE1
 24270                           indf2	equ	0xFDF
 24271                           postinc2	equ	0xFDE
 24272                           postdec2	equ	0xFDD
 24273                           plusw2	equ	0xFDB
 24274                           fsr2h	equ	0xFDA
 24275                           fsr2l	equ	0xFD9
 24276                           status	equ	0xFD8
 24277                           
 24278 ;; *************** function ___lwdiv *****************
 24279 ;; Defined at:
 24280 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 24281 ;; Parameters:    Size  Location     Type
 24282 ;;  dividend        2    0[BANK0 ] unsigned int 
 24283 ;;  divisor         2    2[BANK0 ] unsigned int 
 24284 ;; Auto vars:     Size  Location     Type
 24285 ;;  quotient        2    5[BANK0 ] unsigned int 
 24286 ;;  counter         1    4[BANK0 ] unsigned char 
 24287 ;; Return value:  Size  Location     Type
 24288 ;;                  2    0[BANK0 ] unsigned int 
 24289 ;; Registers used:
 24290 ;;		wreg, status,2, status,0
 24291 ;; Tracked objects:
 24292 ;;		On entry : 0/0
 24293 ;;		On exit  : 0/0
 24294 ;;		Unchanged: 0/0
 24295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24296 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24297 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24299 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24300 ;;Total ram usage:        7 bytes
 24301 ;; Hardware stack levels used:    1
 24302 ;; Hardware stack levels required when called:    7
 24303 ;; This function calls:
 24304 ;;		Nothing
 24305 ;; This function is called by:
 24306 ;;		_itos
 24307 ;;		_printf
 24308 ;; This function uses a non-reentrant model
 24309 ;;
 24310                           
 24311                           	psect	text126
 24312  014A0E                     __ptext126:
 24313                           	opt stack 0
 24314  014A0E                     ___lwdiv:
 24315                           	opt stack 22
 24316                           
 24317                           ; BSR set to: 0
 24318                           ;incstack = 0
 24319  014A0E  0E00               	movlw	0
 24320  014A10  0100               	movlb	0	; () banked
 24321  014A12  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 24322  014A14  0E00               	movlw	0
 24323  014A16  6F65               	movwf	___lwdiv@quotient& (0+255),b
 24324                           
 24325                           ; BSR set to: 0
 24326  014A18  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24327  014A1A  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 24328  014A1C  B4D8               	btfsc	status,2,c
 24329  014A1E  D01C               	goto	l2834
 24330                           
 24331                           ; BSR set to: 0
 24332  014A20  0E01               	movlw	1
 24333  014A22  6F64               	movwf	___lwdiv@counter& (0+255),b
 24334  014A24  D004               	goto	l2829
 24335  014A26                     
 24336                           ; BSR set to: 0
 24337                           
 24338                           ; BSR set to: 0
 24339  014A26  90D8               	bcf	status,0,c
 24340  014A28  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24341  014A2A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24342  014A2C  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24343  014A2E                     l2829:
 24344                           
 24345                           ; BSR set to: 0
 24346                           
 24347                           ; BSR set to: 0
 24348  014A2E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24349  014A30  D7FA               	goto	l2830
 24350  014A32                     u9860:
 24351                           
 24352                           ; BSR set to: 0
 24353                           
 24354                           ; BSR set to: 0
 24355                           
 24356                           ; BSR set to: 0
 24357  014A32  90D8               	bcf	status,0,c
 24358  014A34  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24359  014A36  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24360                           
 24361                           ; BSR set to: 0
 24362  014A38  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24363  014A3A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24364  014A3C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24365  014A3E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24366  014A40  A0D8               	btfss	status,0,c
 24367  014A42  D005               	goto	l2833
 24368                           
 24369                           ; BSR set to: 0
 24370  014A44  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24371  014A46  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24372  014A48  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24373  014A4A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24374                           
 24375                           ; BSR set to: 0
 24376  014A4C  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24377  014A4E                     l2833:
 24378                           
 24379                           ; BSR set to: 0
 24380                           
 24381                           ; BSR set to: 0
 24382  014A4E  90D8               	bcf	status,0,c
 24383  014A50  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24384  014A52  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24385                           
 24386                           ; BSR set to: 0
 24387  014A54  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24388  014A56  D7ED               	goto	u9860
 24389  014A58                     l2834:
 24390                           
 24391                           ; BSR set to: 0
 24392                           
 24393                           ; BSR set to: 0
 24394  014A58  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24395  014A5C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24396                           
 24397                           ; BSR set to: 0
 24398  014A60  0012               	return		;funcret
 24399  014A62                     __end_of___lwdiv:
 24400                           	opt stack 0
 24401                           tosu	equ	0xFFF
 24402                           tosh	equ	0xFFE
 24403                           tosl	equ	0xFFD
 24404                           pclath	equ	0xFFA
 24405                           tblptru	equ	0xFF8
 24406                           tblptrh	equ	0xFF7
 24407                           tblptrl	equ	0xFF6
 24408                           tablat	equ	0xFF5
 24409                           prodh	equ	0xFF4
 24410                           prodl	equ	0xFF3
 24411                           intcon	equ	0xFF2
 24412                           indf0	equ	0xFEF
 24413                           postinc0	equ	0xFEE
 24414                           fsr0h	equ	0xFEA
 24415                           fsr0l	equ	0xFE9
 24416                           wreg	equ	0xFE8
 24417                           indf1	equ	0xFE7
 24418                           postdec1	equ	0xFE5
 24419                           plusw1	equ	0xFE3
 24420                           fsr1h	equ	0xFE2
 24421                           fsr1l	equ	0xFE1
 24422                           indf2	equ	0xFDF
 24423                           postinc2	equ	0xFDE
 24424                           postdec2	equ	0xFDD
 24425                           plusw2	equ	0xFDB
 24426                           fsr2h	equ	0xFDA
 24427                           fsr2l	equ	0xFD9
 24428                           status	equ	0xFD8
 24429                           
 24430 ;; *************** function _HMI_SetSegments *****************
 24431 ;; Defined at:
 24432 ;;		line 226 in file "HMI.c"
 24433 ;; Parameters:    Size  Location     Type
 24434 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 24435 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 24436 ;; Auto vars:     Size  Location     Type
 24437 ;;  in              2    4[BANK0 ] unsigned short 
 24438 ;; Return value:  Size  Location     Type
 24439 ;;                  1    wreg      void 
 24440 ;; Registers used:
 24441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 24442 ;; Tracked objects:
 24443 ;;		On entry : 0/0
 24444 ;;		On exit  : 0/0
 24445 ;;		Unchanged: 0/0
 24446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24450 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24451 ;;Total ram usage:        5 bytes
 24452 ;; Hardware stack levels used:    1
 24453 ;; Hardware stack levels required when called:    8
 24454 ;; This function calls:
 24455 ;;		_ToSegment
 24456 ;; This function is called by:
 24457 ;;		_HMI_SetNumber
 24458 ;; This function uses a non-reentrant model
 24459 ;;
 24460                           
 24461                           	psect	text127
 24462  013BF6                     __ptext127:
 24463                           	opt stack 0
 24464  013BF6                     _HMI_SetSegments:
 24465                           	opt stack 21
 24466                           
 24467                           ;HMI.c: 228: UINT16 in=0;
 24468                           
 24469                           ; BSR set to: 0
 24470                           ;incstack = 0
 24471  013BF6  0E00               	movlw	0
 24472  013BF8  0100               	movlb	0	; () banked
 24473  013BFA  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 24474  013BFC  0E00               	movlw	0
 24475  013BFE  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 24476                           
 24477                           ;HMI.c: 229: while(*pString)
 24478  013C00  D02E               	goto	l1202
 24479  013C02                     
 24480                           ; BSR set to: 0
 24481                           ;HMI.c: 230: {
 24482                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 24483                           
 24484                           ; BSR set to: 0
 24485  013C02  0E4B               	movlw	low _HMIBoard
 24486  013C04  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 24487  013C06  6ED9               	movwf	fsr2l,c
 24488  013C08  0E01               	movlw	high _HMIBoard
 24489  013C0A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 24490  013C0C  6EDA               	movwf	fsr2h,c
 24491  013C0E  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 24492  013C12  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 24493  013C16  50E7               	movf	indf1,w,c
 24494  013C18  EC38  F089         	call	_ToSegment
 24495  013C1C  6EDF               	movwf	indf2,c
 24496                           
 24497                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 24498  013C1E  0E4B               	movlw	low _HMIBoard
 24499  013C20  0100               	movlb	0	; () banked
 24500  013C22  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 24501  013C24  6ED9               	movwf	fsr2l,c
 24502  013C26  0E01               	movlw	high _HMIBoard
 24503  013C28  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 24504  013C2A  6EDA               	movwf	fsr2h,c
 24505  013C2C  0E80               	movlw	128
 24506  013C2E  18DE               	xorwf	postinc2,w,c
 24507  013C30  A4D8               	btfss	status,2,c
 24508  013C32  D00B               	goto	l1201
 24509                           
 24510                           ; BSR set to: 0
 24511                           ;HMI.c: 234: {
 24512                           ;HMI.c: 235: in--;
 24513  013C34  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 24514  013C36  A0D8               	btfss	status,0,c
 24515  013C38  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 24516                           
 24517                           ; BSR set to: 0
 24518                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 24519  013C3A  0E4B               	movlw	low _HMIBoard
 24520  013C3C  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 24521  013C3E  6ED9               	movwf	fsr2l,c
 24522  013C40  0E01               	movlw	high _HMIBoard
 24523  013C42  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 24524  013C44  6EDA               	movwf	fsr2h,c
 24525  013C46  0E00               	movlw	0
 24526  013C48  8EDB               	bsf	plusw2,7,c
 24527  013C4A                     l1201:
 24528                           
 24529                           ; BSR set to: 0
 24530                           ;HMI.c: 237: }
 24531                           ;HMI.c: 239: pString++;
 24532                           
 24533                           ; BSR set to: 0
 24534  013C4A  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 24535  013C4C  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 24536                           
 24537                           ; BSR set to: 0
 24538                           ;HMI.c: 240: in++;
 24539  013C4E  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 24540  013C50  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 24541                           
 24542                           ; BSR set to: 0
 24543                           ;HMI.c: 241: if (in>=6)
 24544  013C52  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 24545  013C54  E116               	bnz	l13138
 24546  013C56  0E06               	movlw	6
 24547  013C58  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 24548  013C5A  B0D8               	btfsc	status,0,c
 24549  013C5C  D012               	goto	l1204
 24550  013C5E                     l1202:
 24551                           
 24552                           ; BSR set to: 0
 24553                           
 24554                           ; BSR set to: 0
 24555                           
 24556                           ; BSR set to: 0
 24557  013C5E  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 24558  013C62  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 24559  013C66  50DF               	movf	indf2,w,c
 24560  013C68  B4D8               	btfsc	status,2,c
 24561  013C6A  D00B               	goto	l1204
 24562  013C6C  D7CA               	goto	l1200
 24563  013C6E                     
 24564                           ; BSR set to: 0
 24565                           ;HMI.c: 245: {
 24566                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 24567                           
 24568                           ; BSR set to: 0
 24569  013C6E  0E4B               	movlw	low _HMIBoard
 24570  013C70  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 24571  013C72  6ED9               	movwf	fsr2l,c
 24572  013C74  0E01               	movlw	high _HMIBoard
 24573  013C76  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 24574  013C78  6EDA               	movwf	fsr2h,c
 24575  013C7A  0E00               	movlw	0
 24576  013C7C  6EDF               	movwf	indf2,c
 24577                           
 24578                           ; BSR set to: 0
 24579                           ;HMI.c: 247: in++;
 24580  013C7E  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 24581  013C80  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 24582  013C82                     l1204:
 24583  013C82                     l13138:
 24584                           
 24585                           ; BSR set to: 0
 24586  013C82  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 24587  013C84  E105               	bnz	l1207
 24588  013C86  0E06               	movlw	6
 24589  013C88  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 24590  013C8A  B0D8               	btfsc	status,0,c
 24591  013C8C  0012               	return	
 24592  013C8E  D7EF               	goto	l1205
 24593  013C90                     l1207:
 24594                           
 24595                           ; BSR set to: 0
 24596  013C90  0012               	return		;funcret
 24597  013C92                     __end_of_HMI_SetSegments:
 24598                           	opt stack 0
 24599                           tosu	equ	0xFFF
 24600                           tosh	equ	0xFFE
 24601                           tosl	equ	0xFFD
 24602                           pclath	equ	0xFFA
 24603                           tblptru	equ	0xFF8
 24604                           tblptrh	equ	0xFF7
 24605                           tblptrl	equ	0xFF6
 24606                           tablat	equ	0xFF5
 24607                           prodh	equ	0xFF4
 24608                           prodl	equ	0xFF3
 24609                           intcon	equ	0xFF2
 24610                           indf0	equ	0xFEF
 24611                           postinc0	equ	0xFEE
 24612                           fsr0h	equ	0xFEA
 24613                           fsr0l	equ	0xFE9
 24614                           wreg	equ	0xFE8
 24615                           indf1	equ	0xFE7
 24616                           postdec1	equ	0xFE5
 24617                           plusw1	equ	0xFE3
 24618                           fsr1h	equ	0xFE2
 24619                           fsr1l	equ	0xFE1
 24620                           indf2	equ	0xFDF
 24621                           postinc2	equ	0xFDE
 24622                           postdec2	equ	0xFDD
 24623                           plusw2	equ	0xFDB
 24624                           fsr2h	equ	0xFDA
 24625                           fsr2l	equ	0xFD9
 24626                           status	equ	0xFD8
 24627                           
 24628 ;; *************** function _ToSegment *****************
 24629 ;; Defined at:
 24630 ;;		line 284 in file "Library/Types.c"
 24631 ;; Parameters:    Size  Location     Type
 24632 ;;  pCHR            1    wreg     unsigned char 
 24633 ;; Auto vars:     Size  Location     Type
 24634 ;;  pCHR            1    0[BANK0 ] unsigned char 
 24635 ;; Return value:  Size  Location     Type
 24636 ;;                  1    wreg      unsigned char 
 24637 ;; Registers used:
 24638 ;;		wreg, status,2, status,0
 24639 ;; Tracked objects:
 24640 ;;		On entry : 0/0
 24641 ;;		On exit  : 0/0
 24642 ;;		Unchanged: 0/0
 24643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24648 ;;Total ram usage:        1 bytes
 24649 ;; Hardware stack levels used:    1
 24650 ;; Hardware stack levels required when called:    7
 24651 ;; This function calls:
 24652 ;;		Nothing
 24653 ;; This function is called by:
 24654 ;;		_HMI_SetSegments
 24655 ;; This function uses a non-reentrant model
 24656 ;;
 24657                           
 24658                           	psect	text128
 24659  011270                     __ptext128:
 24660                           	opt stack 0
 24661  011270                     _ToSegment:
 24662                           	opt stack 21
 24663                           
 24664                           ; BSR set to: 0
 24665                           ;incstack = 0
 24666                           ;ToSegment@pCHR stored from wreg
 24667  011270  0100               	movlb	0	; () banked
 24668  011272  6F60               	movwf	ToSegment@pCHR& (0+255),b
 24669                           
 24670                           ;Types.c: 286: switch(pCHR)
 24671  011274  D07E               	goto	l853
 24672  011276  0E3F               	movlw	63
 24673  011278  0012               	return	
 24674  01127A  0E06               	movlw	6
 24675  01127C  0012               	return	
 24676  01127E  0E5B               	movlw	91
 24677  011280  0012               	return	
 24678  011282  0E4F               	movlw	79
 24679  011284  0012               	return	
 24680  011286  0E66               	movlw	102
 24681  011288  0012               	return	
 24682  01128A  0E6D               	movlw	109
 24683  01128C  0012               	return	
 24684  01128E  0E7D               	movlw	125
 24685  011290  0012               	return	
 24686  011292  0E07               	movlw	7
 24687  011294  0012               	return	
 24688  011296  0E7F               	movlw	127
 24689  011298  0012               	return	
 24690  01129A  0E6F               	movlw	111
 24691  01129C  0012               	return	
 24692  01129E  0E5F               	movlw	95
 24693  0112A0  0012               	return	
 24694  0112A2  0E7C               	movlw	124
 24695  0112A4  0012               	return	
 24696  0112A6  0E58               	movlw	88
 24697  0112A8  0012               	return	
 24698  0112AA  0E5E               	movlw	94
 24699  0112AC  0012               	return	
 24700  0112AE  0E7B               	movlw	123
 24701  0112B0  0012               	return	
 24702  0112B2  0E71               	movlw	113
 24703  0112B4  0012               	return	
 24704  0112B6  0E6F               	movlw	111
 24705  0112B8  0012               	return	
 24706  0112BA  0E74               	movlw	116
 24707  0112BC  0012               	return	
 24708  0112BE  0E04               	movlw	4
 24709  0112C0  0012               	return	
 24710  0112C2  0E0E               	movlw	14
 24711  0112C4  0012               	return	
 24712  0112C6  0E7A               	movlw	122
 24713  0112C8  0012               	return	
 24714  0112CA  0E06               	movlw	6
 24715  0112CC  0012               	return	
 24716  0112CE  0E14               	movlw	20
 24717  0112D0  0012               	return	
 24718  0112D2  0E54               	movlw	84
 24719  0112D4  0012               	return	
 24720  0112D6  0E5C               	movlw	92
 24721  0112D8  0012               	return	
 24722  0112DA  0E73               	movlw	115
 24723  0112DC  0012               	return	
 24724  0112DE  0E67               	movlw	103
 24725  0112E0  0012               	return	
 24726  0112E2  0E50               	movlw	80
 24727  0112E4  0012               	return	
 24728  0112E6  0E6D               	movlw	109
 24729  0112E8  0012               	return	
 24730  0112EA  0E78               	movlw	120
 24731  0112EC  0012               	return	
 24732  0112EE  0E1C               	movlw	28
 24733  0112F0  0012               	return	
 24734  0112F2  0E62               	movlw	98
 24735  0112F4  0012               	return	
 24736  0112F6  0E2A               	movlw	42
 24737  0112F8  0012               	return	
 24738  0112FA  0E64               	movlw	100
 24739  0112FC  0012               	return	
 24740  0112FE  0E6E               	movlw	110
 24741  011300  0012               	return	
 24742  011302  0E5B               	movlw	91
 24743  011304  0012               	return	
 24744  011306  0E77               	movlw	119
 24745  011308  0012               	return	
 24746  01130A  0E7F               	movlw	127
 24747  01130C  0012               	return	
 24748  01130E  0E39               	movlw	57
 24749  011310  0012               	return	
 24750  011312  0E3F               	movlw	63
 24751  011314  0012               	return	
 24752  011316  0E79               	movlw	121
 24753  011318  0012               	return	
 24754  01131A  0E71               	movlw	113
 24755  01131C  0012               	return	
 24756  01131E  0E3D               	movlw	61
 24757  011320  0012               	return	
 24758  011322  0E76               	movlw	118
 24759  011324  0012               	return	
 24760  011326  0E06               	movlw	6
 24761  011328  0012               	return	
 24762  01132A  0E1E               	movlw	30
 24763  01132C  0012               	return	
 24764  01132E  0E57               	movlw	87
 24765  011330  0012               	return	
 24766  011332  0E38               	movlw	56
 24767  011334  0012               	return	
 24768  011336  0E76               	movlw	118
 24769  011338  0012               	return	
 24770  01133A  0E76               	movlw	118
 24771  01133C  0012               	return	
 24772  01133E  0E3F               	movlw	63
 24773  011340  0012               	return	
 24774  011342  0E73               	movlw	115
 24775  011344  0012               	return	
 24776  011346  0E3F               	movlw	63
 24777  011348  0012               	return	
 24778  01134A  0E77               	movlw	119
 24779  01134C  0012               	return	
 24780  01134E  0E6D               	movlw	109
 24781  011350  0012               	return	
 24782  011352  0E31               	movlw	49
 24783  011354  0012               	return	
 24784  011356  0E3E               	movlw	62
 24785  011358  0012               	return	
 24786  01135A  0E3E               	movlw	62
 24787  01135C  0012               	return	
 24788  01135E  0E7E               	movlw	126
 24789  011360  0012               	return	
 24790  011362  0E76               	movlw	118
 24791  011364  0012               	return	
 24792  011366  0E66               	movlw	102
 24793  011368  0012               	return	
 24794  01136A  0E5B               	movlw	91
 24795  01136C  0012               	return	
 24796  01136E  0E80               	movlw	128
 24797  011370  0012               	return	
 24798  011372                     l853:
 24799  011372  0100               	movlb	0	; () banked
 24800  011374  5160               	movf	ToSegment@pCHR& (0+255),w,b
 24801                           
 24802                           ; Switch size 1, requested type "space"
 24803                           ; Number of cases is 63, Range of values is 46 to 122
 24804                           ; switch strategies available:
 24805                           ; Name         Instructions Cycles
 24806                           ; simple_byte          190    96 (average)
 24807                           ;	Chosen strategy is simple_byte
 24808  011376  0A2E               	xorlw	46	; case 46
 24809  011378  B4D8               	btfsc	status,2,c
 24810  01137A  D7F9               	goto	l917
 24811  01137C  0A1E               	xorlw	30	; case 48
 24812  01137E  B4D8               	btfsc	status,2,c
 24813  011380  D77A               	goto	l854
 24814  011382  0A01               	xorlw	1	; case 49
 24815  011384  B4D8               	btfsc	status,2,c
 24816  011386  D779               	goto	l856
 24817  011388  0A03               	xorlw	3	; case 50
 24818  01138A  B4D8               	btfsc	status,2,c
 24819  01138C  D778               	goto	l857
 24820  01138E  0A01               	xorlw	1	; case 51
 24821  011390  B4D8               	btfsc	status,2,c
 24822  011392  D777               	goto	l858
 24823  011394  0A07               	xorlw	7	; case 52
 24824  011396  B4D8               	btfsc	status,2,c
 24825  011398  D776               	goto	l859
 24826  01139A  0A01               	xorlw	1	; case 53
 24827  01139C  B4D8               	btfsc	status,2,c
 24828  01139E  D775               	goto	l860
 24829  0113A0  0A03               	xorlw	3	; case 54
 24830  0113A2  B4D8               	btfsc	status,2,c
 24831  0113A4  D774               	goto	l861
 24832  0113A6  0A01               	xorlw	1	; case 55
 24833  0113A8  B4D8               	btfsc	status,2,c
 24834  0113AA  D773               	goto	l862
 24835  0113AC  0A0F               	xorlw	15	; case 56
 24836  0113AE  B4D8               	btfsc	status,2,c
 24837  0113B0  D772               	goto	l863
 24838  0113B2  0A01               	xorlw	1	; case 57
 24839  0113B4  B4D8               	btfsc	status,2,c
 24840  0113B6  D771               	goto	l864
 24841  0113B8  0A78               	xorlw	120	; case 65
 24842  0113BA  B4D8               	btfsc	status,2,c
 24843  0113BC  D7A4               	goto	l891
 24844  0113BE  0A03               	xorlw	3	; case 66
 24845  0113C0  B4D8               	btfsc	status,2,c
 24846  0113C2  D7A3               	goto	l892
 24847  0113C4  0A01               	xorlw	1	; case 67
 24848  0113C6  B4D8               	btfsc	status,2,c
 24849  0113C8  D7A2               	goto	l893
 24850  0113CA  0A07               	xorlw	7	; case 68
 24851  0113CC  B4D8               	btfsc	status,2,c
 24852  0113CE  D7A1               	goto	l894
 24853  0113D0  0A01               	xorlw	1	; case 69
 24854  0113D2  B4D8               	btfsc	status,2,c
 24855  0113D4  D7A0               	goto	l895
 24856  0113D6  0A03               	xorlw	3	; case 70
 24857  0113D8  B4D8               	btfsc	status,2,c
 24858  0113DA  D79F               	goto	l896
 24859  0113DC  0A01               	xorlw	1	; case 71
 24860  0113DE  B4D8               	btfsc	status,2,c
 24861  0113E0  D79E               	goto	l897
 24862  0113E2  0A0F               	xorlw	15	; case 72
 24863  0113E4  B4D8               	btfsc	status,2,c
 24864  0113E6  D79D               	goto	l898
 24865  0113E8  0A01               	xorlw	1	; case 73
 24866  0113EA  B4D8               	btfsc	status,2,c
 24867  0113EC  D79C               	goto	l899
 24868  0113EE  0A03               	xorlw	3	; case 74
 24869  0113F0  B4D8               	btfsc	status,2,c
 24870  0113F2  D79B               	goto	l900
 24871  0113F4  0A01               	xorlw	1	; case 75
 24872  0113F6  B4D8               	btfsc	status,2,c
 24873  0113F8  D79A               	goto	l901
 24874  0113FA  0A07               	xorlw	7	; case 76
 24875  0113FC  B4D8               	btfsc	status,2,c
 24876  0113FE  D799               	goto	l902
 24877  011400  0A01               	xorlw	1	; case 77
 24878  011402  B4D8               	btfsc	status,2,c
 24879  011404  D798               	goto	l903
 24880  011406  0A03               	xorlw	3	; case 78
 24881  011408  B4D8               	btfsc	status,2,c
 24882  01140A  D797               	goto	l904
 24883  01140C  0A01               	xorlw	1	; case 79
 24884  01140E  B4D8               	btfsc	status,2,c
 24885  011410  D796               	goto	l905
 24886  011412  0A1F               	xorlw	31	; case 80
 24887  011414  B4D8               	btfsc	status,2,c
 24888  011416  D795               	goto	l906
 24889  011418  0A01               	xorlw	1	; case 81
 24890  01141A  B4D8               	btfsc	status,2,c
 24891  01141C  D794               	goto	l907
 24892  01141E  0A03               	xorlw	3	; case 82
 24893  011420  B4D8               	btfsc	status,2,c
 24894  011422  D793               	goto	l908
 24895  011424  0A01               	xorlw	1	; case 83
 24896  011426  B4D8               	btfsc	status,2,c
 24897  011428  D792               	goto	l909
 24898  01142A  0A07               	xorlw	7	; case 84
 24899  01142C  B4D8               	btfsc	status,2,c
 24900  01142E  D791               	goto	l910
 24901  011430  0A01               	xorlw	1	; case 85
 24902  011432  B4D8               	btfsc	status,2,c
 24903  011434  D790               	goto	l911
 24904  011436  0A03               	xorlw	3	; case 86
 24905  011438  B4D8               	btfsc	status,2,c
 24906  01143A  D78F               	goto	l912
 24907  01143C  0A01               	xorlw	1	; case 87
 24908  01143E  B4D8               	btfsc	status,2,c
 24909  011440  D78E               	goto	l913
 24910  011442  0A0F               	xorlw	15	; case 88
 24911  011444  B4D8               	btfsc	status,2,c
 24912  011446  D78D               	goto	l914
 24913  011448  0A01               	xorlw	1	; case 89
 24914  01144A  B4D8               	btfsc	status,2,c
 24915  01144C  D78C               	goto	l915
 24916  01144E  0A03               	xorlw	3	; case 90
 24917  011450  B4D8               	btfsc	status,2,c
 24918  011452  D78B               	goto	l916
 24919  011454  0A3B               	xorlw	59	; case 97
 24920  011456  B4D8               	btfsc	status,2,c
 24921  011458  D722               	goto	l865
 24922  01145A  0A03               	xorlw	3	; case 98
 24923  01145C  B4D8               	btfsc	status,2,c
 24924  01145E  D721               	goto	l866
 24925  011460  0A01               	xorlw	1	; case 99
 24926  011462  B4D8               	btfsc	status,2,c
 24927  011464  D720               	goto	l867
 24928  011466  0A07               	xorlw	7	; case 100
 24929  011468  B4D8               	btfsc	status,2,c
 24930  01146A  D71F               	goto	l868
 24931  01146C  0A01               	xorlw	1	; case 101
 24932  01146E  B4D8               	btfsc	status,2,c
 24933  011470  D71E               	goto	l869
 24934  011472  0A03               	xorlw	3	; case 102
 24935  011474  B4D8               	btfsc	status,2,c
 24936  011476  D71D               	goto	l870
 24937  011478  0A01               	xorlw	1	; case 103
 24938  01147A  B4D8               	btfsc	status,2,c
 24939  01147C  D71C               	goto	l871
 24940  01147E  0A0F               	xorlw	15	; case 104
 24941  011480  B4D8               	btfsc	status,2,c
 24942  011482  D71B               	goto	l872
 24943  011484  0A01               	xorlw	1	; case 105
 24944  011486  B4D8               	btfsc	status,2,c
 24945  011488  D71A               	goto	l873
 24946  01148A  0A03               	xorlw	3	; case 106
 24947  01148C  B4D8               	btfsc	status,2,c
 24948  01148E  D719               	goto	l874
 24949  011490  0A01               	xorlw	1	; case 107
 24950  011492  B4D8               	btfsc	status,2,c
 24951  011494  D718               	goto	l875
 24952  011496  0A07               	xorlw	7	; case 108
 24953  011498  B4D8               	btfsc	status,2,c
 24954  01149A  D717               	goto	l876
 24955  01149C  0A01               	xorlw	1	; case 109
 24956  01149E  B4D8               	btfsc	status,2,c
 24957  0114A0  D716               	goto	l877
 24958  0114A2  0A03               	xorlw	3	; case 110
 24959  0114A4  B4D8               	btfsc	status,2,c
 24960  0114A6  D715               	goto	l878
 24961  0114A8  0A01               	xorlw	1	; case 111
 24962  0114AA  B4D8               	btfsc	status,2,c
 24963  0114AC  D714               	goto	l879
 24964  0114AE  0A1F               	xorlw	31	; case 112
 24965  0114B0  B4D8               	btfsc	status,2,c
 24966  0114B2  D713               	goto	l880
 24967  0114B4  0A01               	xorlw	1	; case 113
 24968  0114B6  B4D8               	btfsc	status,2,c
 24969  0114B8  D712               	goto	l881
 24970  0114BA  0A03               	xorlw	3	; case 114
 24971  0114BC  B4D8               	btfsc	status,2,c
 24972  0114BE  D711               	goto	l882
 24973  0114C0  0A01               	xorlw	1	; case 115
 24974  0114C2  B4D8               	btfsc	status,2,c
 24975  0114C4  D710               	goto	l883
 24976  0114C6  0A07               	xorlw	7	; case 116
 24977  0114C8  B4D8               	btfsc	status,2,c
 24978  0114CA  D70F               	goto	l884
 24979  0114CC  0A01               	xorlw	1	; case 117
 24980  0114CE  B4D8               	btfsc	status,2,c
 24981  0114D0  D70E               	goto	l885
 24982  0114D2  0A03               	xorlw	3	; case 118
 24983  0114D4  B4D8               	btfsc	status,2,c
 24984  0114D6  D70D               	goto	l886
 24985  0114D8  0A01               	xorlw	1	; case 119
 24986  0114DA  B4D8               	btfsc	status,2,c
 24987  0114DC  D70C               	goto	l887
 24988  0114DE  0A0F               	xorlw	15	; case 120
 24989  0114E0  B4D8               	btfsc	status,2,c
 24990  0114E2  D70B               	goto	l888
 24991  0114E4  0A01               	xorlw	1	; case 121
 24992  0114E6  B4D8               	btfsc	status,2,c
 24993  0114E8  D70A               	goto	l889
 24994  0114EA  0A03               	xorlw	3	; case 122
 24995  0114EC  B4D8               	btfsc	status,2,c
 24996  0114EE  D709               	goto	l890
 24997                           
 24998                           ;Types.c: 354: return 0;
 24999                           
 25000                           ; BSR set to: 0
 25001  0114F0  0E00               	movlw	0
 25002  0114F2  0012               	return	
 25003  0114F4                     __end_of_ToSegment:
 25004                           	opt stack 0
 25005                           tosu	equ	0xFFF
 25006                           tosh	equ	0xFFE
 25007                           tosl	equ	0xFFD
 25008                           pclath	equ	0xFFA
 25009                           tblptru	equ	0xFF8
 25010                           tblptrh	equ	0xFF7
 25011                           tblptrl	equ	0xFF6
 25012                           tablat	equ	0xFF5
 25013                           prodh	equ	0xFF4
 25014                           prodl	equ	0xFF3
 25015                           intcon	equ	0xFF2
 25016                           indf0	equ	0xFEF
 25017                           postinc0	equ	0xFEE
 25018                           fsr0h	equ	0xFEA
 25019                           fsr0l	equ	0xFE9
 25020                           wreg	equ	0xFE8
 25021                           indf1	equ	0xFE7
 25022                           postdec1	equ	0xFE5
 25023                           plusw1	equ	0xFE3
 25024                           fsr1h	equ	0xFE2
 25025                           fsr1l	equ	0xFE1
 25026                           indf2	equ	0xFDF
 25027                           postinc2	equ	0xFDE
 25028                           postdec2	equ	0xFDD
 25029                           plusw2	equ	0xFDB
 25030                           fsr2h	equ	0xFDA
 25031                           fsr2l	equ	0xFD9
 25032                           status	equ	0xFD8
 25033                           
 25034 ;; *************** function _HMI_Render *****************
 25035 ;; Defined at:
 25036 ;;		line 138 in file "HMI.c"
 25037 ;; Parameters:    Size  Location     Type
 25038 ;;		None
 25039 ;; Auto vars:     Size  Location     Type
 25040 ;;  a               2    8[BANK0 ] unsigned short 
 25041 ;; Return value:  Size  Location     Type
 25042 ;;                  1    wreg      void 
 25043 ;; Registers used:
 25044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25045 ;; Tracked objects:
 25046 ;;		On entry : 0/0
 25047 ;;		On exit  : 0/0
 25048 ;;		Unchanged: 0/0
 25049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25054 ;;Total ram usage:        2 bytes
 25055 ;; Hardware stack levels used:    1
 25056 ;; Hardware stack levels required when called:    9
 25057 ;; This function calls:
 25058 ;;		_OutSeg
 25059 ;; This function is called by:
 25060 ;;		_main
 25061 ;;		_ADCAverage
 25062 ;; This function uses a non-reentrant model
 25063 ;;
 25064                           
 25065                           	psect	text129
 25066  014FBA                     __ptext129:
 25067                           	opt stack 0
 25068  014FBA                     _HMI_Render:
 25069                           	opt stack 21
 25070                           
 25071                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 25072                           
 25073                           ;incstack = 0
 25074  014FBA  0E00               	movlw	0
 25075  014FBC  0100               	movlb	0	; () banked
 25076  014FBE  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 25077  014FC0  0E00               	movlw	0
 25078  014FC2  6F68               	movwf	HMI_Render@a& (0+255),b
 25079  014FC4                     l14864:
 25080                           
 25081                           ; BSR set to: 0
 25082  014FC4  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 25083  014FC6  E113               	bnz	l1158
 25084  014FC8  0E08               	movlw	8
 25085  014FCA  5D68               	subwf	HMI_Render@a& (0+255),w,b
 25086  014FCC  B0D8               	btfsc	status,0,c
 25087  014FCE  0012               	return	
 25088                           
 25089                           ; BSR set to: 0
 25090                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 25091                           
 25092                           ; BSR set to: 0
 25093                           
 25094                           ; BSR set to: 0
 25095  014FD0  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 25096  014FD4  0E4B               	movlw	low _HMIBoard
 25097  014FD6  2568               	addwf	HMI_Render@a& (0+255),w,b
 25098  014FD8  6ED9               	movwf	fsr2l,c
 25099  014FDA  0E01               	movlw	high _HMIBoard
 25100  014FDC  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 25101  014FDE  6EDA               	movwf	fsr2h,c
 25102  014FE0  50DF               	movf	indf2,w,c
 25103  014FE2  EC2E  F0A2         	call	_OutSeg
 25104  014FE6  0100               	movlb	0	; () banked
 25105  014FE8  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 25106  014FEA  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 25107  014FEC  D7EB               	goto	l14864
 25108  014FEE                     l1158:
 25109                           
 25110                           ; BSR set to: 0
 25111  014FEE  0012               	return		;funcret
 25112  014FF0                     __end_of_HMI_Render:
 25113                           	opt stack 0
 25114                           tosu	equ	0xFFF
 25115                           tosh	equ	0xFFE
 25116                           tosl	equ	0xFFD
 25117                           pclath	equ	0xFFA
 25118                           tblptru	equ	0xFF8
 25119                           tblptrh	equ	0xFF7
 25120                           tblptrl	equ	0xFF6
 25121                           tablat	equ	0xFF5
 25122                           prodh	equ	0xFF4
 25123                           prodl	equ	0xFF3
 25124                           intcon	equ	0xFF2
 25125                           indf0	equ	0xFEF
 25126                           postinc0	equ	0xFEE
 25127                           fsr0h	equ	0xFEA
 25128                           fsr0l	equ	0xFE9
 25129                           wreg	equ	0xFE8
 25130                           indf1	equ	0xFE7
 25131                           postdec1	equ	0xFE5
 25132                           plusw1	equ	0xFE3
 25133                           fsr1h	equ	0xFE2
 25134                           fsr1l	equ	0xFE1
 25135                           indf2	equ	0xFDF
 25136                           postinc2	equ	0xFDE
 25137                           postdec2	equ	0xFDD
 25138                           plusw2	equ	0xFDB
 25139                           fsr2h	equ	0xFDA
 25140                           fsr2l	equ	0xFD9
 25141                           status	equ	0xFD8
 25142                           
 25143 ;; *************** function _OutSeg *****************
 25144 ;; Defined at:
 25145 ;;		line 54 in file "HMI.c"
 25146 ;; Parameters:    Size  Location     Type
 25147 ;;  pInput          1    wreg     unsigned char 
 25148 ;;  pSegment        1    3[BANK0 ] unsigned char 
 25149 ;; Auto vars:     Size  Location     Type
 25150 ;;  pInput          1    6[BANK0 ] unsigned char 
 25151 ;;  out             1    7[BANK0 ] volatile unsigned char 
 25152 ;; Return value:  Size  Location     Type
 25153 ;;                  1    wreg      void 
 25154 ;; Registers used:
 25155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25156 ;; Tracked objects:
 25157 ;;		On entry : 0/0
 25158 ;;		On exit  : 0/0
 25159 ;;		Unchanged: 0/0
 25160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25161 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25164 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25165 ;;Total ram usage:        5 bytes
 25166 ;; Hardware stack levels used:    1
 25167 ;; Hardware stack levels required when called:    8
 25168 ;; This function calls:
 25169 ;;		_SPI_Send
 25170 ;; This function is called by:
 25171 ;;		_HMI_Render
 25172 ;;		_HMI_GRender
 25173 ;; This function uses a non-reentrant model
 25174 ;;
 25175                           
 25176                           	psect	text130
 25177  01445C                     __ptext130:
 25178                           	opt stack 0
 25179  01445C                     _OutSeg:
 25180                           	opt stack 21
 25181                           
 25182                           ; BSR set to: 0
 25183                           ;incstack = 0
 25184                           ;OutSeg@pInput stored from wreg
 25185  01445C  0100               	movlb	0	; () banked
 25186  01445E  6F66               	movwf	OutSeg@pInput& (0+255),b
 25187                           
 25188                           ;HMI.c: 58: static UINT8 cur;
 25189                           ;HMI.c: 59: volatile UINT8 out;
 25190                           ;HMI.c: 60: static UINT8 segset;
 25191                           ;HMI.c: 61: static UINT8 a;
 25192                           ;HMI.c: 83: if (pSegment <= 8)
 25193  014460  0E09               	movlw	9
 25194  014462  0100               	movlb	0	; () banked
 25195  014464  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 25196  014466  0012               	return	
 25197                           
 25198                           ; BSR set to: 0
 25199                           ;HMI.c: 84: {
 25200                           ;HMI.c: 85: cur = pInput;
 25201  014468  C066  F03B         	movff	OutSeg@pInput,OutSeg@cur
 25202                           
 25203                           ; BSR set to: 0
 25204                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 25205  01446C  0E00               	movlw	0
 25206  01446E  6E39               	movwf	OutSeg@a,c
 25207  014470                     l14486:
 25208                           
 25209                           ; BSR set to: 0
 25210  014470  0E07               	movlw	7
 25211  014472  6439               	cpfsgt	OutSeg@a,c
 25212  014474  D001               	goto	l1146
 25213  014476  D01F               	goto	u11700
 25214  014478                     l1146:
 25215                           
 25216                           ;HMI.c: 87: {
 25217                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 25218                           
 25219                           ; BSR set to: 0
 25220  014478  C03B  F064         	movff	OutSeg@cur,??_OutSeg
 25221  01447C  0E01               	movlw	1
 25222  01447E  0100               	movlb	0	; () banked
 25223  014480  1764               	andwf	??_OutSeg& (0+255),f,b
 25224  014482  0E06               	movlw	6
 25225  014484  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 25226  014486                     u11695:
 25227  014486  90D8               	bcf	status,0,c
 25228  014488  3764               	rlcf	??_OutSeg& (0+255),f,b
 25229  01448A  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 25230  01448C  D7FC               	goto	u11695
 25231  01448E  5164               	movf	??_OutSeg& (0+255),w,b
 25232  014490  6E3A               	movwf	OutSeg@segset,c
 25233                           
 25234                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 25235  014492  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 25236  014494  42E8               	rrncf	wreg,f,c
 25237  014496  0BF8               	andlw	248
 25238  014498  1039               	iorwf	OutSeg@a,w,c
 25239  01449A  103A               	iorwf	OutSeg@segset,w,c
 25240  01449C  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 25241                           
 25242                           ;HMI.c: 90: cur >>= 1;
 25243  01449E  90D8               	bcf	status,0,c
 25244  0144A0  323B               	rrcf	OutSeg@cur,f,c
 25245                           
 25246                           ; BSR set to: 0
 25247                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 25248  0144A2  0EC8               	movlw	low _SPI1
 25249  0144A4  6F60               	movwf	SPI_Send@pInput& (0+255),b
 25250  0144A6  0E02               	movlw	high _SPI1
 25251  0144A8  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 25252  0144AA  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 25253  0144AE  EC9B  F0A2         	call	_SPI_Send	;wreg free
 25254  0144B2  2A39               	incf	OutSeg@a,f,c
 25255  0144B4  D7DD               	goto	l14486
 25256  0144B6                     u11700:
 25257                           
 25258                           ;HMI.c: 96: }
 25259                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 25260  0144B6  0EC8               	movlw	low _SPI1
 25261  0144B8  0100               	movlb	0	; () banked
 25262  0144BA  6F60               	movwf	SPI_Send@pInput& (0+255),b
 25263  0144BC  0E02               	movlw	high _SPI1
 25264  0144BE  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 25265  0144C0  0E00               	movlw	0
 25266  0144C2  6F62               	movwf	SPI_Send@pData& (0+255),b
 25267  0144C4  EC9B  F0A2         	call	_SPI_Send	;wreg free
 25268  0144C8  0012               	return	
 25269  0144CA                     __end_of_OutSeg:
 25270                           	opt stack 0
 25271                           tosu	equ	0xFFF
 25272                           tosh	equ	0xFFE
 25273                           tosl	equ	0xFFD
 25274                           pclath	equ	0xFFA
 25275                           tblptru	equ	0xFF8
 25276                           tblptrh	equ	0xFF7
 25277                           tblptrl	equ	0xFF6
 25278                           tablat	equ	0xFF5
 25279                           prodh	equ	0xFF4
 25280                           prodl	equ	0xFF3
 25281                           intcon	equ	0xFF2
 25282                           indf0	equ	0xFEF
 25283                           postinc0	equ	0xFEE
 25284                           fsr0h	equ	0xFEA
 25285                           fsr0l	equ	0xFE9
 25286                           wreg	equ	0xFE8
 25287                           indf1	equ	0xFE7
 25288                           postdec1	equ	0xFE5
 25289                           plusw1	equ	0xFE3
 25290                           fsr1h	equ	0xFE2
 25291                           fsr1l	equ	0xFE1
 25292                           indf2	equ	0xFDF
 25293                           postinc2	equ	0xFDE
 25294                           postdec2	equ	0xFDD
 25295                           plusw2	equ	0xFDB
 25296                           fsr2h	equ	0xFDA
 25297                           fsr2l	equ	0xFD9
 25298                           status	equ	0xFD8
 25299                           
 25300 ;; *************** function _SPI_Send *****************
 25301 ;; Defined at:
 25302 ;;		line 226 in file "Library/SPI.c"
 25303 ;; Parameters:    Size  Location     Type
 25304 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 25305 ;;		 -> SPI1(11), SPI2(11), 
 25306 ;;  pData           1    2[BANK0 ] unsigned char 
 25307 ;; Auto vars:     Size  Location     Type
 25308 ;;		None
 25309 ;; Return value:  Size  Location     Type
 25310 ;;                  1    wreg      unsigned char 
 25311 ;; Registers used:
 25312 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25313 ;; Tracked objects:
 25314 ;;		On entry : 0/0
 25315 ;;		On exit  : 0/0
 25316 ;;		Unchanged: 0/0
 25317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25318 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25322 ;;Total ram usage:        3 bytes
 25323 ;; Hardware stack levels used:    1
 25324 ;; Hardware stack levels required when called:    7
 25325 ;; This function calls:
 25326 ;;		Nothing
 25327 ;; This function is called by:
 25328 ;;		_LCD_Write
 25329 ;;		_OutSeg
 25330 ;; This function uses a non-reentrant model
 25331 ;;
 25332                           
 25333                           	psect	text131
 25334  014536                     __ptext131:
 25335                           	opt stack 0
 25336  014536                     _SPI_Send:
 25337                           	opt stack 20
 25338                           
 25339                           ;SPI.c: 253: switch (pInput->mChannel)
 25340                           
 25341                           ;incstack = 0
 25342  014536  D026               	goto	l678
 25343  014538                     
 25344                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 25345  014538  C1B2  FFD9         	movff	_PortC+4,fsr2l
 25346  01453C  C1B3  FFDA         	movff	_PortC+5,fsr2h
 25347  014540  0101               	movlb	1	; () banked
 25348  014542  94DF               	bcf	indf2,2,c
 25349                           
 25350                           ; BSR set to: 1
 25351                           ;SPI.c: 257: SSP1BUF = pData;
 25352  014544  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 25353  014548                     
 25354                           ; BSR set to: 1
 25355  014548  A0C7               	btfss	4039,0,c	;volatile
 25356  01454A  D7FE               	goto	l681
 25357                           
 25358                           ;SPI.c: 259: pData = SSP1BUF;
 25359  01454C  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 25360                           
 25361                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 25362  014550  C1B2  FFD9         	movff	_PortC+4,fsr2l
 25363  014554  C1B3  FFDA         	movff	_PortC+5,fsr2h
 25364  014558  0101               	movlb	1	; () banked
 25365  01455A  84DF               	bsf	indf2,2,c
 25366                           
 25367                           ; BSR set to: 1
 25368                           ;SPI.c: 261: return pData;
 25369                           ;	Return value of _SPI_Send is never used
 25370  01455C  0012               	return	
 25371  01455E                     
 25372                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 25373                           
 25374                           ; BSR set to: 1
 25375  01455E  C19E  FFD9         	movff	_PortD+4,fsr2l
 25376  014562  C19F  FFDA         	movff	_PortD+5,fsr2h
 25377  014566  0101               	movlb	1	; () banked
 25378  014568  9EDF               	bcf	indf2,7,c
 25379                           
 25380                           ; BSR set to: 1
 25381                           ;SPI.c: 264: SSP2BUF = pData;
 25382  01456A  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 25383  01456E                     
 25384                           ; BSR set to: 1
 25385  01456E  A06D               	btfss	3949,0,c	;volatile
 25386  014570  D7FE               	goto	l686
 25387                           
 25388                           ;SPI.c: 266: pData = SSP2BUF;
 25389  014572  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 25390                           
 25391                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 25392  014576  C19E  FFD9         	movff	_PortD+4,fsr2l
 25393  01457A  C19F  FFDA         	movff	_PortD+5,fsr2h
 25394  01457E  0101               	movlb	1	; () banked
 25395  014580  8EDF               	bsf	indf2,7,c
 25396                           
 25397                           ; BSR set to: 1
 25398                           ;SPI.c: 269: };
 25399                           
 25400                           ; BSR set to: 1
 25401                           ;SPI.c: 268: return pData;
 25402                           ;	Return value of _SPI_Send is never used
 25403  014582  0012               	return	
 25404  014584                     l678:
 25405                           
 25406                           ; BSR set to: 1
 25407  014584  0100               	movlb	0	; () banked
 25408  014586  EE20 F002          	lfsr	2,2
 25409  01458A  5160               	movf	SPI_Send@pInput& (0+255),w,b
 25410  01458C  26D9               	addwf	fsr2l,f,c
 25411  01458E  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 25412  014590  22DA               	addwfc	fsr2h,f,c
 25413  014592  50DF               	movf	indf2,w,c
 25414                           
 25415                           ; Switch size 1, requested type "space"
 25416                           ; Number of cases is 2, Range of values is 0 to 1
 25417                           ; switch strategies available:
 25418                           ; Name         Instructions Cycles
 25419                           ; simple_byte            7     4 (average)
 25420                           ;	Chosen strategy is simple_byte
 25421  014594  0A00               	xorlw	0	; case 0
 25422  014596  B4D8               	btfsc	status,2,c
 25423  014598  D7CF               	goto	l679
 25424  01459A  0A01               	xorlw	1	; case 1
 25425  01459C  A4D8               	btfss	status,2,c
 25426  01459E  0012               	return	
 25427  0145A0  D7DE               	goto	l684
 25428  0145A2                     __end_of_SPI_Send:
 25429                           	opt stack 0
 25430                           tosu	equ	0xFFF
 25431                           tosh	equ	0xFFE
 25432                           tosl	equ	0xFFD
 25433                           pclath	equ	0xFFA
 25434                           tblptru	equ	0xFF8
 25435                           tblptrh	equ	0xFF7
 25436                           tblptrl	equ	0xFF6
 25437                           tablat	equ	0xFF5
 25438                           prodh	equ	0xFF4
 25439                           prodl	equ	0xFF3
 25440                           intcon	equ	0xFF2
 25441                           indf0	equ	0xFEF
 25442                           postinc0	equ	0xFEE
 25443                           fsr0h	equ	0xFEA
 25444                           fsr0l	equ	0xFE9
 25445                           wreg	equ	0xFE8
 25446                           indf1	equ	0xFE7
 25447                           postdec1	equ	0xFE5
 25448                           plusw1	equ	0xFE3
 25449                           fsr1h	equ	0xFE2
 25450                           fsr1l	equ	0xFE1
 25451                           indf2	equ	0xFDF
 25452                           postinc2	equ	0xFDE
 25453                           postdec2	equ	0xFDD
 25454                           plusw2	equ	0xFDB
 25455                           fsr2h	equ	0xFDA
 25456                           fsr2l	equ	0xFD9
 25457                           status	equ	0xFD8
 25458                           
 25459 ;; *************** function _FunctReadADC *****************
 25460 ;; Defined at:
 25461 ;;		line 16 in file "dans.c"
 25462 ;; Parameters:    Size  Location     Type
 25463 ;;  channel         2    0[BANK0 ] int 
 25464 ;; Auto vars:     Size  Location     Type
 25465 ;;		None
 25466 ;; Return value:  Size  Location     Type
 25467 ;;                  2    0[BANK0 ] int 
 25468 ;; Registers used:
 25469 ;;		wreg, status,2, status,0
 25470 ;; Tracked objects:
 25471 ;;		On entry : 0/0
 25472 ;;		On exit  : 0/0
 25473 ;;		Unchanged: 0/0
 25474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25475 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25479 ;;Total ram usage:        2 bytes
 25480 ;; Hardware stack levels used:    1
 25481 ;; Hardware stack levels required when called:    7
 25482 ;; This function calls:
 25483 ;;		Nothing
 25484 ;; This function is called by:
 25485 ;;		_ADCAverage
 25486 ;; This function uses a non-reentrant model
 25487 ;;
 25488                           
 25489                           	psect	text132
 25490  014E98                     __ptext132:
 25491                           	opt stack 0
 25492  014E98                     _FunctReadADC:
 25493                           	opt stack 22
 25494                           
 25495                           ;dans.c: 18: if(channel>4) return 0;
 25496                           
 25497                           ;incstack = 0
 25498  014E98  0100               	movlb	0	; () banked
 25499  014E9A  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 25500  014E9C  D00B               	goto	l2276
 25501  014E9E  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 25502  014EA0  E104               	bnz	u12270
 25503  014EA2  0E05               	movlw	5
 25504  014EA4  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 25505  014EA6  A0D8               	btfss	status,0,c
 25506  014EA8  D005               	goto	l2276
 25507  014EAA                     u12270:
 25508                           
 25509                           ; BSR set to: 0
 25510  014EAA  0E00               	movlw	0
 25511  014EAC  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 25512  014EAE  0E00               	movlw	0
 25513  014EB0  6F60               	movwf	?_FunctReadADC& (0+255),b
 25514                           
 25515                           ; BSR set to: 0
 25516  014EB2  0012               	return	
 25517  014EB4                     l2276:
 25518                           
 25519                           ; BSR set to: 0
 25520                           ;dans.c: 19: ADCON0=0x00;
 25521                           
 25522                           ; BSR set to: 0
 25523  014EB4  0E00               	movlw	0
 25524  014EB6  6EC2               	movwf	4034,c	;volatile
 25525                           
 25526                           ; BSR set to: 0
 25527                           ;dans.c: 20: ADCON0=(channel<<2);
 25528  014EB8  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 25529  014EBA  46E8               	rlncf	wreg,f,c
 25530  014EBC  0BFC               	andlw	252
 25531  014EBE  6EC2               	movwf	4034,c	;volatile
 25532                           
 25533                           ; BSR set to: 0
 25534                           ;dans.c: 21: ADON=1;
 25535  014EC0  80C2               	bsf	4034,0,c	;volatile
 25536                           
 25537                           ; BSR set to: 0
 25538                           ;dans.c: 22: GODONE=1;
 25539  014EC2  82C2               	bsf	4034,1,c	;volatile
 25540  014EC4                     
 25541                           ; BSR set to: 0
 25542  014EC4  B2C2               	btfsc	4034,1,c	;volatile
 25543  014EC6  D7FE               	goto	l2279
 25544                           
 25545                           ;dans.c: 24: ADON=0;
 25546  014EC8  90C2               	bcf	4034,0,c	;volatile
 25547                           
 25548                           ;dans.c: 25: return ADRES;
 25549  014ECA  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 25550  014ECE  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 25551  014ED2  0012               	return		;funcret
 25552  014ED4                     __end_of_FunctReadADC:
 25553                           	opt stack 0
 25554                           tosu	equ	0xFFF
 25555                           tosh	equ	0xFFE
 25556                           tosl	equ	0xFFD
 25557                           pclath	equ	0xFFA
 25558                           tblptru	equ	0xFF8
 25559                           tblptrh	equ	0xFF7
 25560                           tblptrl	equ	0xFF6
 25561                           tablat	equ	0xFF5
 25562                           prodh	equ	0xFF4
 25563                           prodl	equ	0xFF3
 25564                           intcon	equ	0xFF2
 25565                           indf0	equ	0xFEF
 25566                           postinc0	equ	0xFEE
 25567                           fsr0h	equ	0xFEA
 25568                           fsr0l	equ	0xFE9
 25569                           wreg	equ	0xFE8
 25570                           indf1	equ	0xFE7
 25571                           postdec1	equ	0xFE5
 25572                           plusw1	equ	0xFE3
 25573                           fsr1h	equ	0xFE2
 25574                           fsr1l	equ	0xFE1
 25575                           indf2	equ	0xFDF
 25576                           postinc2	equ	0xFDE
 25577                           postdec2	equ	0xFDD
 25578                           plusw2	equ	0xFDB
 25579                           fsr2h	equ	0xFDA
 25580                           fsr2l	equ	0xFD9
 25581                           status	equ	0xFD8
 25582                           
 25583 ;; *************** function _ISR_Function *****************
 25584 ;; Defined at:
 25585 ;;		line 38 in file "Library/ISR.c"
 25586 ;; Parameters:    Size  Location     Type
 25587 ;;		None
 25588 ;; Auto vars:     Size  Location     Type
 25589 ;;		None
 25590 ;; Return value:  Size  Location     Type
 25591 ;;                  1    wreg      void 
 25592 ;; Registers used:
 25593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25594 ;; Tracked objects:
 25595 ;;		On entry : 0/0
 25596 ;;		On exit  : 0/0
 25597 ;;		Unchanged: 0/0
 25598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25601 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25602 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25603 ;;Total ram usage:       18 bytes
 25604 ;; Hardware stack levels used:    1
 25605 ;; Hardware stack levels required when called:    6
 25606 ;; This function calls:
 25607 ;;		_Timer0_ISR
 25608 ;; This function is called by:
 25609 ;;		Interrupt level 2
 25610 ;; This function uses a non-reentrant model
 25611 ;;
 25612                           
 25613                           	psect	intcode
 25614  001408                     __pintcode:
 25615                           	opt stack 0
 25616  001408                     _ISR_Function:
 25617                           	opt stack 14
 25618                           
 25619                           ;incstack = 0
 25620  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 25621  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 25622  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 25623  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 25624  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 25625  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 25626  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 25627  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 25628  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 25629  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 25630  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 25631  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 25632  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 25633  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 25634  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 25635  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 25636  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 25637  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 25638  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 25639                           
 25640                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 25641  001452  92F2               	bcf	intcon,1,c	;volatile
 25642                           
 25643                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 25644  001454  B4F2               	btfsc	intcon,2,c	;volatile
 25645  001456  AAF2               	btfss	intcon,5,c	;volatile
 25646  001458  D002               	goto	i2l1590
 25647                           
 25648                           ;ISR.c: 68: Timer0_ISR();
 25649  00145A  EC15  F0A9         	call	_Timer0_ISR	;wreg free
 25650  00145E                     i2l1590:
 25651  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 25652  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 25653  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 25654  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 25655  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 25656  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 25657  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 25658  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 25659  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 25660  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 25661  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 25662  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 25663  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 25664  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 25665  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 25666  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 25667  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 25668  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 25669  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 25670  0014A8  0011               	retfie		f
 25671  0014AA                     __end_of_ISR_Function:
 25672                           	opt stack 0
 25673                           tosu	equ	0xFFF
 25674                           tosh	equ	0xFFE
 25675                           tosl	equ	0xFFD
 25676                           pclatu	equ	0xFFB
 25677                           pclath	equ	0xFFA
 25678                           tblptru	equ	0xFF8
 25679                           tblptrh	equ	0xFF7
 25680                           tblptrl	equ	0xFF6
 25681                           tablat	equ	0xFF5
 25682                           prodh	equ	0xFF4
 25683                           prodl	equ	0xFF3
 25684                           intcon	equ	0xFF2
 25685                           indf0	equ	0xFEF
 25686                           postinc0	equ	0xFEE
 25687                           fsr0h	equ	0xFEA
 25688                           fsr0l	equ	0xFE9
 25689                           wreg	equ	0xFE8
 25690                           indf1	equ	0xFE7
 25691                           postdec1	equ	0xFE5
 25692                           plusw1	equ	0xFE3
 25693                           fsr1h	equ	0xFE2
 25694                           fsr1l	equ	0xFE1
 25695                           indf2	equ	0xFDF
 25696                           postinc2	equ	0xFDE
 25697                           postdec2	equ	0xFDD
 25698                           plusw2	equ	0xFDB
 25699                           fsr2h	equ	0xFDA
 25700                           fsr2l	equ	0xFD9
 25701                           status	equ	0xFD8
 25702                           
 25703 ;; *************** function _Timer0_ISR *****************
 25704 ;; Defined at:
 25705 ;;		line 94 in file "Library/Timer0.c"
 25706 ;; Parameters:    Size  Location     Type
 25707 ;;		None
 25708 ;; Auto vars:     Size  Location     Type
 25709 ;;		None
 25710 ;; Return value:  Size  Location     Type
 25711 ;;                  1    wreg      void 
 25712 ;; Registers used:
 25713 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25714 ;; Tracked objects:
 25715 ;;		On entry : 0/0
 25716 ;;		On exit  : 0/0
 25717 ;;		Unchanged: 0/0
 25718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25723 ;;Total ram usage:        0 bytes
 25724 ;; Hardware stack levels used:    1
 25725 ;; Hardware stack levels required when called:    5
 25726 ;; This function calls:
 25727 ;;		Absolute function
 25728 ;;		i2_Motor_Step
 25729 ;;		i2_Timer0_Stop
 25730 ;; This function is called by:
 25731 ;;		_ISR_Function
 25732 ;; This function uses a non-reentrant model
 25733 ;;
 25734                           
 25735                           	psect	text134
 25736  01522A                     __ptext134:
 25737                           	opt stack 0
 25738  01522A                     _Timer0_ISR:
 25739                           	opt stack 14
 25740                           
 25741                           ;Timer0.c: 96: Timer0_Stop();
 25742                           
 25743                           ;incstack = 0
 25744  01522A  ECCB  F0AA         	call	i2_Timer0_Stop	;wreg free
 25745                           
 25746                           ;Timer0.c: 99: if (gISR != 0)
 25747  01522E  0101               	movlb	1	; () banked
 25748  015230  5108               	movf	_gISR& (0+255),w,b
 25749  015232  1109               	iorwf	(_gISR+1)& (0+255),w,b
 25750  015234  110A               	iorwf	(_gISR+2)& (0+255),w,b
 25751  015236  B4D8               	btfsc	status,2,c
 25752  015238  0012               	return	
 25753                           
 25754                           ; BSR set to: 1
 25755                           ;Timer0.c: 100: gISR();
 25756  01523A  D801               	call	i2u1391_48
 25757  01523C  0012               	return	
 25758  01523E                     i2u1391_48:
 25759  01523E  0005               	push	
 25760  015240  6EFA               	movwf	pclath,c
 25761  015242  5108               	movf	_gISR& (0+255),w,b
 25762  015244  6EFD               	movwf	tosl,c
 25763  015246  5109               	movf	(_gISR+1)& (0+255),w,b
 25764  015248  6EFE               	movwf	tosh,c
 25765  01524A  510A               	movf	(_gISR+2)& (0+255),w,b
 25766  01524C  6EFF               	movwf	tosu,c
 25767  01524E  50FA               	movf	pclath,w,c
 25768  015250  0012               	return		;indir
 25769  015252                     __end_of_Timer0_ISR:
 25770                           	opt stack 0
 25771                           tosu	equ	0xFFF
 25772                           tosh	equ	0xFFE
 25773                           tosl	equ	0xFFD
 25774                           pclatu	equ	0xFFB
 25775                           pclath	equ	0xFFA
 25776                           tblptru	equ	0xFF8
 25777                           tblptrh	equ	0xFF7
 25778                           tblptrl	equ	0xFF6
 25779                           tablat	equ	0xFF5
 25780                           prodh	equ	0xFF4
 25781                           prodl	equ	0xFF3
 25782                           intcon	equ	0xFF2
 25783                           indf0	equ	0xFEF
 25784                           postinc0	equ	0xFEE
 25785                           fsr0h	equ	0xFEA
 25786                           fsr0l	equ	0xFE9
 25787                           wreg	equ	0xFE8
 25788                           indf1	equ	0xFE7
 25789                           postdec1	equ	0xFE5
 25790                           plusw1	equ	0xFE3
 25791                           fsr1h	equ	0xFE2
 25792                           fsr1l	equ	0xFE1
 25793                           indf2	equ	0xFDF
 25794                           postinc2	equ	0xFDE
 25795                           postdec2	equ	0xFDD
 25796                           plusw2	equ	0xFDB
 25797                           fsr2h	equ	0xFDA
 25798                           fsr2l	equ	0xFD9
 25799                           status	equ	0xFD8
 25800                           
 25801 ;; *************** function i2_Motor_Step *****************
 25802 ;; Defined at:
 25803 ;;		line 75 in file "Library/Motor.c"
 25804 ;; Parameters:    Size  Location     Type
 25805 ;;		None
 25806 ;; Auto vars:     Size  Location     Type
 25807 ;;		None
 25808 ;; Return value:  Size  Location     Type
 25809 ;;                  1    wreg      void 
 25810 ;; Registers used:
 25811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25812 ;; Tracked objects:
 25813 ;;		On entry : 0/0
 25814 ;;		On exit  : 0/0
 25815 ;;		Unchanged: 0/0
 25816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25821 ;;Total ram usage:        2 bytes
 25822 ;; Hardware stack levels used:    1
 25823 ;; Hardware stack levels required when called:    4
 25824 ;; This function calls:
 25825 ;;		i2_MXK_Queue
 25826 ;;		i2_MXK_Release
 25827 ;;		i2_MXK_SwitchTo
 25828 ;;		i2_Port_SetPin
 25829 ;;		i2_Timer0_Restart
 25830 ;;		i2_Timer0_Stop
 25831 ;; This function is called by:
 25832 ;; This function uses a non-reentrant model
 25833 ;;
 25834                           
 25835                           	psect	text135
 25836  0133BC                     __ptext135:
 25837                           	opt stack 0
 25838  0133BC                     i2_Motor_Step:
 25839                           	opt stack 14
 25840                           
 25841                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 25842                           
 25843                           ;incstack = 0
 25844  0133BC  0100               	movlb	0	; () banked
 25845  0133BE  EE20 F004          	lfsr	2,4
 25846  0133C2  51E8               	movf	_lMotor& (0+255),w,b
 25847  0133C4  26D9               	addwf	fsr2l,f,c
 25848  0133C6  51E9               	movf	(_lMotor+1)& (0+255),w,b
 25849  0133C8  22DA               	addwfc	fsr2h,f,c
 25850  0133CA  50DF               	movf	indf2,w,c
 25851  0133CC  ECF8  F0A7         	call	i2_MXK_SwitchTo
 25852  0133D0  0900               	iorlw	0
 25853  0133D2  B4D8               	btfsc	status,2,c
 25854  0133D4  D06A               	goto	i2l1627
 25855                           
 25856                           ;Motor.c: 78: {
 25857                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 25858  0133D6  C0E8  FFD9         	movff	_lMotor,fsr2l
 25859  0133DA  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 25860  0133DE  50DE               	movf	postinc2,w,c
 25861  0133E0  10DE               	iorwf	postinc2,w,c
 25862  0133E2  B4D8               	btfsc	status,2,c
 25863  0133E4  D05D               	goto	i2l1628
 25864                           
 25865                           ;Motor.c: 80: {
 25866                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 25867  0133E6  C0E8  FFD9         	movff	_lMotor,fsr2l
 25868  0133EA  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 25869  0133EE  0E01               	movlw	1
 25870  0133F0  BEDB               	btfsc	plusw2,7,c
 25871  0133F2  D022               	goto	i2l1629
 25872  0133F4  0E01               	movlw	1
 25873  0133F6  50DB               	movf	plusw2,w,c
 25874  0133F8  E103               	bnz	i2u787_40
 25875  0133FA  04DE               	decf	postinc2,w,c
 25876  0133FC  A0D8               	btfss	status,0,c
 25877  0133FE  D01C               	goto	i2l1629
 25878  013400                     i2u787_40:
 25879                           
 25880                           ;Motor.c: 83: {
 25881                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 25882  013400  C0E8  FFD9         	movff	_lMotor,fsr2l
 25883  013404  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 25884  013408  28DE               	incf	postinc2,w,c
 25885  01340A  E104               	bnz	i2u788_40
 25886  01340C  0E7F               	movlw	127
 25887  01340E  18DE               	xorwf	postinc2,w,c
 25888  013410  B4D8               	btfsc	status,2,c
 25889  013412  D007               	goto	i2l1630
 25890  013414                     i2u788_40:
 25891                           
 25892                           ;Motor.c: 85: lMotor->mDelta --;
 25893  013414  C0E8  FFD9         	movff	_lMotor,fsr2l
 25894  013418  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 25895  01341C  06DE               	decf	postinc2,f,c
 25896  01341E  0E00               	movlw	0
 25897  013420  5ADD               	subwfb	postdec2,f,c
 25898  013422                     i2l1630:
 25899                           
 25900                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 25901  013422  0E90               	movlw	low _PortE
 25902  013424  6E10               	movwf	i2Port_SetPin@pInput,c
 25903  013426  0E01               	movlw	high _PortE
 25904  013428  6E11               	movwf	i2Port_SetPin@pInput+1,c
 25905  01342A  0E00               	movlw	0
 25906  01342C  6E12               	movwf	i2Port_SetPin@pPin,c
 25907  01342E  0E01               	movlw	1
 25908  013430  6E13               	movwf	i2Port_SetPin@pValue,c
 25909  013432  ECB4  F09C         	call	i2_Port_SetPin	;wreg free
 25910                           
 25911                           ;Motor.c: 88: }
 25912  013436  D01B               	goto	i2l1631
 25913  013438                     i2l1629:
 25914                           
 25915                           ;Motor.c: 89: else
 25916                           ;Motor.c: 90: {
 25917                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 25918  013438  C0E8  FFD9         	movff	_lMotor,fsr2l
 25919  01343C  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 25920  013440  04DE               	decf	postinc2,w,c
 25921  013442  E104               	bnz	i2u789_40
 25922  013444  0E80               	movlw	128
 25923  013446  18DE               	xorwf	postinc2,w,c
 25924  013448  B4D8               	btfsc	status,2,c
 25925  01344A  D007               	goto	i2l1632
 25926  01344C                     i2u789_40:
 25927                           
 25928                           ;Motor.c: 92: lMotor->mDelta ++;
 25929  01344C  C0E8  FFD9         	movff	_lMotor,fsr2l
 25930  013450  C0E9  FFDA         	movff	_lMotor+1,fsr2h
 25931  013454  2ADE               	incf	postinc2,f,c
 25932  013456  0E00               	movlw	0
 25933  013458  22DD               	addwfc	postdec2,f,c
 25934  01345A                     i2l1632:
 25935                           
 25936                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 25937  01345A  0E90               	movlw	low _PortE
 25938  01345C  6E10               	movwf	i2Port_SetPin@pInput,c
 25939  01345E  0E01               	movlw	high _PortE
 25940  013460  6E11               	movwf	i2Port_SetPin@pInput+1,c
 25941  013462  0E00               	movlw	0
 25942  013464  6E12               	movwf	i2Port_SetPin@pPin,c
 25943  013466  0E00               	movlw	0
 25944  013468  6E13               	movwf	i2Port_SetPin@pValue,c
 25945  01346A  ECB4  F09C         	call	i2_Port_SetPin	;wreg free
 25946  01346E                     i2l1631:
 25947                           
 25948                           ;Motor.c: 95: }
 25949                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 25950  01346E  0E90               	movlw	low _PortE
 25951  013470  6E10               	movwf	i2Port_SetPin@pInput,c
 25952  013472  0E01               	movlw	high _PortE
 25953  013474  6E11               	movwf	i2Port_SetPin@pInput+1,c
 25954  013476  0E01               	movlw	1
 25955  013478  6E12               	movwf	i2Port_SetPin@pPin,c
 25956  01347A  0E01               	movlw	1
 25957  01347C  6E13               	movwf	i2Port_SetPin@pValue,c
 25958  01347E  ECB4  F09C         	call	i2_Port_SetPin	;wreg free
 25959                           
 25960                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 25961  013482  0E90               	movlw	low _PortE
 25962  013484  6E10               	movwf	i2Port_SetPin@pInput,c
 25963  013486  0E01               	movlw	high _PortE
 25964  013488  6E11               	movwf	i2Port_SetPin@pInput+1,c
 25965  01348A  0E01               	movlw	1
 25966  01348C  6E12               	movwf	i2Port_SetPin@pPin,c
 25967  01348E  0E00               	movlw	0
 25968  013490  6E13               	movwf	i2Port_SetPin@pValue,c
 25969  013492  ECB4  F09C         	call	i2_Port_SetPin	;wreg free
 25970                           
 25971                           ;Motor.c: 101: MXK_Release();
 25972  013496  ECCE  F0AA         	call	i2_MXK_Release	;wreg free
 25973                           
 25974                           ;Motor.c: 102: Timer0_Restart();
 25975  01349A  ECAE  F0AA         	call	i2_Timer0_Restart	;wreg free
 25976                           
 25977                           ;Motor.c: 103: return;
 25978  01349E  0012               	return	
 25979  0134A0                     i2l1628:
 25980                           
 25981                           ;Motor.c: 104: }
 25982                           ;Motor.c: 105: MXK_Release();
 25983  0134A0  ECCE  F0AA         	call	i2_MXK_Release	;wreg free
 25984                           
 25985                           ;Motor.c: 106: Timer0_Stop();
 25986  0134A4  ECCB  F0AA         	call	i2_Timer0_Stop	;wreg free
 25987                           
 25988                           ;Motor.c: 107: return;
 25989  0134A8  0012               	return	
 25990  0134AA                     i2l1627:
 25991                           
 25992                           ;Motor.c: 108: }
 25993                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 25994  0134AA  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 25995  0134AE  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 25996  0134B2  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 25997  0134B6  ECA1  F0AA         	call	i2_MXK_Queue	;wreg free
 25998  0134BA  0012               	return		;funcret
 25999  0134BC                     __end_ofi2_Motor_Step:
 26000                           	opt stack 0
 26001                           tosu	equ	0xFFF
 26002                           tosh	equ	0xFFE
 26003                           tosl	equ	0xFFD
 26004                           pclatu	equ	0xFFB
 26005                           pclath	equ	0xFFA
 26006                           tblptru	equ	0xFF8
 26007                           tblptrh	equ	0xFF7
 26008                           tblptrl	equ	0xFF6
 26009                           tablat	equ	0xFF5
 26010                           prodh	equ	0xFF4
 26011                           prodl	equ	0xFF3
 26012                           intcon	equ	0xFF2
 26013                           indf0	equ	0xFEF
 26014                           postinc0	equ	0xFEE
 26015                           fsr0h	equ	0xFEA
 26016                           fsr0l	equ	0xFE9
 26017                           wreg	equ	0xFE8
 26018                           indf1	equ	0xFE7
 26019                           postdec1	equ	0xFE5
 26020                           plusw1	equ	0xFE3
 26021                           fsr1h	equ	0xFE2
 26022                           fsr1l	equ	0xFE1
 26023                           indf2	equ	0xFDF
 26024                           postinc2	equ	0xFDE
 26025                           postdec2	equ	0xFDD
 26026                           plusw2	equ	0xFDB
 26027                           fsr2h	equ	0xFDA
 26028                           fsr2l	equ	0xFD9
 26029                           status	equ	0xFD8
 26030                           
 26031 ;; *************** function i2_Timer0_Stop *****************
 26032 ;; Defined at:
 26033 ;;		line 89 in file "Library/Timer0.c"
 26034 ;; Parameters:    Size  Location     Type
 26035 ;;		None
 26036 ;; Auto vars:     Size  Location     Type
 26037 ;;		None
 26038 ;; Return value:  Size  Location     Type
 26039 ;;                  1    wreg      void 
 26040 ;; Registers used:
 26041 ;;		None
 26042 ;; Tracked objects:
 26043 ;;		On entry : 0/0
 26044 ;;		On exit  : 0/0
 26045 ;;		Unchanged: 0/0
 26046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26051 ;;Total ram usage:        0 bytes
 26052 ;; Hardware stack levels used:    1
 26053 ;; This function calls:
 26054 ;;		Nothing
 26055 ;; This function is called by:
 26056 ;;		_Timer0_ISR
 26057 ;;		i2_Motor_Step
 26058 ;; This function uses a non-reentrant model
 26059 ;;
 26060                           
 26061                           	psect	text136
 26062  015596                     __ptext136:
 26063                           	opt stack 0
 26064  015596                     i2_Timer0_Stop:
 26065                           	opt stack 18
 26066                           
 26067                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 26068                           
 26069                           ;incstack = 0
 26070  015596  9AF2               	bcf	intcon,5,c	;volatile
 26071                           
 26072                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 26073  015598  94F2               	bcf	intcon,2,c	;volatile
 26074  01559A  0012               	return		;funcret
 26075  01559C                     __end_ofi2_Timer0_Stop:
 26076                           	opt stack 0
 26077                           tosu	equ	0xFFF
 26078                           tosh	equ	0xFFE
 26079                           tosl	equ	0xFFD
 26080                           pclatu	equ	0xFFB
 26081                           pclath	equ	0xFFA
 26082                           tblptru	equ	0xFF8
 26083                           tblptrh	equ	0xFF7
 26084                           tblptrl	equ	0xFF6
 26085                           tablat	equ	0xFF5
 26086                           prodh	equ	0xFF4
 26087                           prodl	equ	0xFF3
 26088                           intcon	equ	0xFF2
 26089                           indf0	equ	0xFEF
 26090                           postinc0	equ	0xFEE
 26091                           fsr0h	equ	0xFEA
 26092                           fsr0l	equ	0xFE9
 26093                           wreg	equ	0xFE8
 26094                           indf1	equ	0xFE7
 26095                           postdec1	equ	0xFE5
 26096                           plusw1	equ	0xFE3
 26097                           fsr1h	equ	0xFE2
 26098                           fsr1l	equ	0xFE1
 26099                           indf2	equ	0xFDF
 26100                           postinc2	equ	0xFDE
 26101                           postdec2	equ	0xFDD
 26102                           plusw2	equ	0xFDB
 26103                           fsr2h	equ	0xFDA
 26104                           fsr2l	equ	0xFD9
 26105                           status	equ	0xFD8
 26106                           
 26107 ;; *************** function i2_Timer0_Restart *****************
 26108 ;; Defined at:
 26109 ;;		line 83 in file "Library/Timer0.c"
 26110 ;; Parameters:    Size  Location     Type
 26111 ;;		None
 26112 ;; Auto vars:     Size  Location     Type
 26113 ;;		None
 26114 ;; Return value:  Size  Location     Type
 26115 ;;                  1    wreg      void 
 26116 ;; Registers used:
 26117 ;;		None
 26118 ;; Tracked objects:
 26119 ;;		On entry : 0/0
 26120 ;;		On exit  : 0/0
 26121 ;;		Unchanged: 0/0
 26122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26127 ;;Total ram usage:        0 bytes
 26128 ;; Hardware stack levels used:    1
 26129 ;; This function calls:
 26130 ;;		Nothing
 26131 ;; This function is called by:
 26132 ;;		i2_Motor_Step
 26133 ;; This function uses a non-reentrant model
 26134 ;;
 26135                           
 26136                           	psect	text137
 26137  01555C                     __ptext137:
 26138                           	opt stack 0
 26139  01555C                     i2_Timer0_Restart:
 26140                           	opt stack 17
 26141                           
 26142                           ;Timer0.c: 85: TMR0 = COUNTER;
 26143                           
 26144                           ;incstack = 0
 26145  01555C  C031  FFD6         	movff	_COUNTER,4054	;volatile
 26146  015560  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 26147                           
 26148                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 26149  015564  8AF2               	bsf	intcon,5,c	;volatile
 26150  015566  0012               	return		;funcret
 26151  015568                     __end_ofi2_Timer0_Restart:
 26152                           	opt stack 0
 26153                           tosu	equ	0xFFF
 26154                           tosh	equ	0xFFE
 26155                           tosl	equ	0xFFD
 26156                           pclatu	equ	0xFFB
 26157                           pclath	equ	0xFFA
 26158                           tblptru	equ	0xFF8
 26159                           tblptrh	equ	0xFF7
 26160                           tblptrl	equ	0xFF6
 26161                           tablat	equ	0xFF5
 26162                           prodh	equ	0xFF4
 26163                           prodl	equ	0xFF3
 26164                           intcon	equ	0xFF2
 26165                           indf0	equ	0xFEF
 26166                           postinc0	equ	0xFEE
 26167                           fsr0h	equ	0xFEA
 26168                           fsr0l	equ	0xFE9
 26169                           wreg	equ	0xFE8
 26170                           indf1	equ	0xFE7
 26171                           postdec1	equ	0xFE5
 26172                           plusw1	equ	0xFE3
 26173                           fsr1h	equ	0xFE2
 26174                           fsr1l	equ	0xFE1
 26175                           indf2	equ	0xFDF
 26176                           postinc2	equ	0xFDE
 26177                           postdec2	equ	0xFDD
 26178                           plusw2	equ	0xFDB
 26179                           fsr2h	equ	0xFDA
 26180                           fsr2l	equ	0xFD9
 26181                           status	equ	0xFD8
 26182                           
 26183 ;; *************** function i2_Port_SetPin *****************
 26184 ;; Defined at:
 26185 ;;		line 247 in file "Library/Port.c"
 26186 ;; Parameters:    Size  Location     Type
 26187 ;;  pInput          2   15[COMRAM] const PTR struct Port
 26188 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 26189 ;;  pPin            1   17[COMRAM] enum E6750
 26190 ;;  pValue          1   18[COMRAM] unsigned char 
 26191 ;; Auto vars:     Size  Location     Type
 26192 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 26193 ;; Return value:  Size  Location     Type
 26194 ;;                  1    wreg      void 
 26195 ;; Registers used:
 26196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26197 ;; Tracked objects:
 26198 ;;		On entry : 0/0
 26199 ;;		On exit  : 0/0
 26200 ;;		Unchanged: 0/0
 26201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26202 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26205 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26206 ;;Total ram usage:        5 bytes
 26207 ;; Hardware stack levels used:    1
 26208 ;; Hardware stack levels required when called:    3
 26209 ;; This function calls:
 26210 ;;		i2_Byte_SetBit
 26211 ;;		i2_Word_GetPair
 26212 ;; This function is called by:
 26213 ;;		i2_Motor_Step
 26214 ;; This function uses a non-reentrant model
 26215 ;;
 26216                           
 26217                           	psect	text138
 26218  013968                     __ptext138:
 26219                           	opt stack 0
 26220  013968                     i2_Port_SetPin:
 26221                           	opt stack 14
 26222                           
 26223                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 26224                           
 26225                           ;incstack = 0
 26226  013968  0E08               	movlw	8
 26227  01396A  2410               	addwf	i2Port_SetPin@pInput,w,c
 26228  01396C  6E0D               	movwf	i2Word_GetPair@pInput,c
 26229  01396E  0E00               	movlw	0
 26230  013970  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 26231  013972  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 26232  013974  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 26233  013978  ECA8  F0A8         	call	i2_Word_GetPair	;wreg free
 26234  01397C  6E14               	movwf	i2Port_SetPin@Type,c
 26235                           
 26236                           ;Port.c: 250: switch (Type)
 26237  01397E  D03B               	goto	i2l427
 26238  013980                     
 26239                           ;Port.c: 256: pValue &= 1;
 26240  013980  0E01               	movlw	1
 26241  013982  1613               	andwf	i2Port_SetPin@pValue,f,c
 26242                           
 26243                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 26244  013984  EE20 F002          	lfsr	2,2
 26245  013988  5010               	movf	i2Port_SetPin@pInput,w,c
 26246  01398A  26D9               	addwf	fsr2l,f,c
 26247  01398C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 26248  01398E  22DA               	addwfc	fsr2h,f,c
 26249  013990  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 26250  013994  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 26251  013998  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 26252  01399C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 26253  0139A0  ECD2  F0A5         	call	i2_Byte_SetBit	;wreg free
 26254                           
 26255                           ;Port.c: 258: break;
 26256  0139A4  0012               	return	
 26257  0139A6                     
 26258                           ;Port.c: 261: pValue &= 1;
 26259  0139A6  0E01               	movlw	1
 26260  0139A8  1613               	andwf	i2Port_SetPin@pValue,f,c
 26261                           
 26262                           ;Port.c: 262: pValue ^= 1;
 26263  0139AA  0E01               	movlw	1
 26264  0139AC  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 26265                           
 26266                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 26267  0139AE  EE20 F002          	lfsr	2,2
 26268  0139B2  5010               	movf	i2Port_SetPin@pInput,w,c
 26269  0139B4  26D9               	addwf	fsr2l,f,c
 26270  0139B6  5011               	movf	i2Port_SetPin@pInput+1,w,c
 26271  0139B8  22DA               	addwfc	fsr2h,f,c
 26272  0139BA  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 26273  0139BE  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 26274  0139C2  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 26275  0139C6  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 26276  0139CA  ECD2  F0A5         	call	i2_Byte_SetBit	;wreg free
 26277                           
 26278                           ;Port.c: 264: break;
 26279  0139CE  0012               	return	
 26280  0139D0                     
 26281                           ;Port.c: 266: pValue &= 1;
 26282  0139D0  0E01               	movlw	1
 26283  0139D2  1613               	andwf	i2Port_SetPin@pValue,f,c
 26284                           
 26285                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 26286  0139D4  EE20 F004          	lfsr	2,4
 26287  0139D8  5010               	movf	i2Port_SetPin@pInput,w,c
 26288  0139DA  26D9               	addwf	fsr2l,f,c
 26289  0139DC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 26290  0139DE  22DA               	addwfc	fsr2h,f,c
 26291  0139E0  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 26292  0139E4  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 26293  0139E8  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 26294  0139EC  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 26295  0139F0  ECD2  F0A5         	call	i2_Byte_SetBit	;wreg free
 26296                           
 26297                           ;Port.c: 269: }
 26298                           
 26299                           ;Port.c: 268: break;
 26300  0139F4  0012               	return	
 26301  0139F6                     i2l427:
 26302  0139F6  5014               	movf	i2Port_SetPin@Type,w,c
 26303                           
 26304                           ; Switch size 1, requested type "space"
 26305                           ; Number of cases is 4, Range of values is 0 to 3
 26306                           ; switch strategies available:
 26307                           ; Name         Instructions Cycles
 26308                           ; simple_byte           13     7 (average)
 26309                           ;	Chosen strategy is simple_byte
 26310  0139F8  0A00               	xorlw	0	; case 0
 26311  0139FA  B4D8               	btfsc	status,2,c
 26312  0139FC  0012               	return	
 26313  0139FE  0A01               	xorlw	1	; case 1
 26314  013A00  B4D8               	btfsc	status,2,c
 26315  013A02  D7BE               	goto	i2l430
 26316  013A04  0A03               	xorlw	3	; case 2
 26317  013A06  B4D8               	btfsc	status,2,c
 26318  013A08  D7CE               	goto	i2l432
 26319  013A0A  0A01               	xorlw	1	; case 3
 26320  013A0C  A4D8               	btfss	status,2,c
 26321  013A0E  0012               	return	
 26322  013A10  D7DF               	goto	i2l433
 26323  013A12                     __end_ofi2_Port_SetPin:
 26324                           	opt stack 0
 26325                           tosu	equ	0xFFF
 26326                           tosh	equ	0xFFE
 26327                           tosl	equ	0xFFD
 26328                           pclatu	equ	0xFFB
 26329                           pclath	equ	0xFFA
 26330                           tblptru	equ	0xFF8
 26331                           tblptrh	equ	0xFF7
 26332                           tblptrl	equ	0xFF6
 26333                           tablat	equ	0xFF5
 26334                           prodh	equ	0xFF4
 26335                           prodl	equ	0xFF3
 26336                           intcon	equ	0xFF2
 26337                           indf0	equ	0xFEF
 26338                           postinc0	equ	0xFEE
 26339                           fsr0h	equ	0xFEA
 26340                           fsr0l	equ	0xFE9
 26341                           wreg	equ	0xFE8
 26342                           indf1	equ	0xFE7
 26343                           postdec1	equ	0xFE5
 26344                           plusw1	equ	0xFE3
 26345                           fsr1h	equ	0xFE2
 26346                           fsr1l	equ	0xFE1
 26347                           indf2	equ	0xFDF
 26348                           postinc2	equ	0xFDE
 26349                           postdec2	equ	0xFDD
 26350                           plusw2	equ	0xFDB
 26351                           fsr2h	equ	0xFDA
 26352                           fsr2l	equ	0xFD9
 26353                           status	equ	0xFD8
 26354                           
 26355 ;; *************** function i2_Word_GetPair *****************
 26356 ;; Defined at:
 26357 ;;		line 156 in file "Library/Types.c"
 26358 ;; Parameters:    Size  Location     Type
 26359 ;;  pInput          2   12[COMRAM] PTR struct Word
 26360 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 26361 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 26362 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 26363 ;;		 -> PortC(10), PortF(10), NULL(0), 
 26364 ;;  pPair           1   14[COMRAM] unsigned char 
 26365 ;; Auto vars:     Size  Location     Type
 26366 ;;		None
 26367 ;; Return value:  Size  Location     Type
 26368 ;;                  1    wreg      unsigned char 
 26369 ;; Registers used:
 26370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26371 ;; Tracked objects:
 26372 ;;		On entry : 0/0
 26373 ;;		On exit  : 0/0
 26374 ;;		Unchanged: 0/0
 26375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26376 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26379 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26380 ;;Total ram usage:        3 bytes
 26381 ;; Hardware stack levels used:    1
 26382 ;; Hardware stack levels required when called:    2
 26383 ;; This function calls:
 26384 ;;		i2_Byte_GetPair
 26385 ;; This function is called by:
 26386 ;;		i2_Port_SetPin
 26387 ;; This function uses a non-reentrant model
 26388 ;;
 26389                           
 26390                           	psect	text139
 26391  015150                     __ptext139:
 26392                           	opt stack 0
 26393  015150                     i2_Word_GetPair:
 26394                           	opt stack 14
 26395                           
 26396                           ;Types.c: 158: if (pPair >= 4)
 26397                           
 26398                           ;incstack = 0
 26399  015150  0E03               	movlw	3
 26400  015152  640F               	cpfsgt	i2Word_GetPair@pPair,c
 26401  015154  D00C               	goto	i2l781
 26402                           
 26403                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 26404  015156  0E01               	movlw	1
 26405  015158  240D               	addwf	i2Word_GetPair@pInput,w,c
 26406  01515A  6E0A               	movwf	i2Byte_GetPair@pInput,c
 26407  01515C  0E00               	movlw	0
 26408  01515E  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 26409  015160  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 26410  015162  500F               	movf	i2Word_GetPair@pPair,w,c
 26411  015164  0FFC               	addlw	252
 26412  015166  6E0C               	movwf	i2Byte_GetPair@pPair,c
 26413  015168  ECC7  F0A9         	call	i2_Byte_GetPair	;wreg free
 26414  01516C  0012               	return	
 26415  01516E                     i2l781:
 26416                           
 26417                           ;Types.c: 160: else
 26418                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 26419  01516E  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 26420  015172  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 26421  015176  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 26422  01517A  ECC7  F0A9         	call	i2_Byte_GetPair	;wreg free
 26423  01517E  0012               	return	
 26424  015180                     __end_ofi2_Word_GetPair:
 26425                           	opt stack 0
 26426                           tosu	equ	0xFFF
 26427                           tosh	equ	0xFFE
 26428                           tosl	equ	0xFFD
 26429                           pclatu	equ	0xFFB
 26430                           pclath	equ	0xFFA
 26431                           tblptru	equ	0xFF8
 26432                           tblptrh	equ	0xFF7
 26433                           tblptrl	equ	0xFF6
 26434                           tablat	equ	0xFF5
 26435                           prodh	equ	0xFF4
 26436                           prodl	equ	0xFF3
 26437                           intcon	equ	0xFF2
 26438                           indf0	equ	0xFEF
 26439                           postinc0	equ	0xFEE
 26440                           fsr0h	equ	0xFEA
 26441                           fsr0l	equ	0xFE9
 26442                           wreg	equ	0xFE8
 26443                           indf1	equ	0xFE7
 26444                           postdec1	equ	0xFE5
 26445                           plusw1	equ	0xFE3
 26446                           fsr1h	equ	0xFE2
 26447                           fsr1l	equ	0xFE1
 26448                           indf2	equ	0xFDF
 26449                           postinc2	equ	0xFDE
 26450                           postdec2	equ	0xFDD
 26451                           plusw2	equ	0xFDB
 26452                           fsr2h	equ	0xFDA
 26453                           fsr2l	equ	0xFD9
 26454                           status	equ	0xFD8
 26455                           
 26456 ;; *************** function i2_Byte_GetPair *****************
 26457 ;; Defined at:
 26458 ;;		line 87 in file "Library/Types.c"
 26459 ;; Parameters:    Size  Location     Type
 26460 ;;  pInput          2    9[COMRAM] PTR struct Byte
 26461 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26462 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26463 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26464 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26465 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26466 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26467 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26468 ;;		 -> NULL(0), 
 26469 ;;  pPair           1   11[COMRAM] unsigned char 
 26470 ;; Auto vars:     Size  Location     Type
 26471 ;;		None
 26472 ;; Return value:  Size  Location     Type
 26473 ;;                  1    wreg      unsigned char 
 26474 ;; Registers used:
 26475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26476 ;; Tracked objects:
 26477 ;;		On entry : 0/0
 26478 ;;		On exit  : 0/0
 26479 ;;		Unchanged: 0/0
 26480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26481 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26484 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26485 ;;Total ram usage:        3 bytes
 26486 ;; Hardware stack levels used:    1
 26487 ;; Hardware stack levels required when called:    1
 26488 ;; This function calls:
 26489 ;;		i2_Byte_GetZone
 26490 ;; This function is called by:
 26491 ;;		i2_Word_GetPair
 26492 ;; This function uses a non-reentrant model
 26493 ;;
 26494                           
 26495                           	psect	text140
 26496  01538E                     __ptext140:
 26497                           	opt stack 0
 26498  01538E                     i2_Byte_GetPair:
 26499                           	opt stack 14
 26500                           
 26501                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 26502                           
 26503                           ;incstack = 0
 26504  01538E  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 26505  015392  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 26506  015396  0E04               	movlw	4
 26507  015398  6E03               	movwf	i2Byte_GetZone@pMax,c
 26508  01539A  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 26509  01539E  0E02               	movlw	2
 26510  0153A0  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 26511  0153A2  ECF3  F0A1         	call	i2_Byte_GetZone	;wreg free
 26512  0153A6  0012               	return	
 26513  0153A8                     __end_ofi2_Byte_GetPair:
 26514                           	opt stack 0
 26515                           tosu	equ	0xFFF
 26516                           tosh	equ	0xFFE
 26517                           tosl	equ	0xFFD
 26518                           pclatu	equ	0xFFB
 26519                           pclath	equ	0xFFA
 26520                           tblptru	equ	0xFF8
 26521                           tblptrh	equ	0xFF7
 26522                           tblptrl	equ	0xFF6
 26523                           tablat	equ	0xFF5
 26524                           prodh	equ	0xFF4
 26525                           prodl	equ	0xFF3
 26526                           intcon	equ	0xFF2
 26527                           indf0	equ	0xFEF
 26528                           postinc0	equ	0xFEE
 26529                           fsr0h	equ	0xFEA
 26530                           fsr0l	equ	0xFE9
 26531                           wreg	equ	0xFE8
 26532                           indf1	equ	0xFE7
 26533                           postdec1	equ	0xFE5
 26534                           plusw1	equ	0xFE3
 26535                           fsr1h	equ	0xFE2
 26536                           fsr1l	equ	0xFE1
 26537                           indf2	equ	0xFDF
 26538                           postinc2	equ	0xFDE
 26539                           postdec2	equ	0xFDD
 26540                           plusw2	equ	0xFDB
 26541                           fsr2h	equ	0xFDA
 26542                           fsr2l	equ	0xFD9
 26543                           status	equ	0xFD8
 26544                           
 26545 ;; *************** function i2_Byte_GetZone *****************
 26546 ;; Defined at:
 26547 ;;		line 64 in file "Library/Types.c"
 26548 ;; Parameters:    Size  Location     Type
 26549 ;;  pInput          2    0[COMRAM] PTR struct Byte
 26550 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 26551 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 26552 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 26553 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 26554 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 26555 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 26556 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 26557 ;;		 -> NULL(0), 
 26558 ;;  pMax            1    2[COMRAM] unsigned char 
 26559 ;;  pChunk          1    3[COMRAM] unsigned char 
 26560 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 26561 ;; Auto vars:     Size  Location     Type
 26562 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 26563 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 26564 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 26565 ;; Return value:  Size  Location     Type
 26566 ;;                  1    wreg      unsigned char 
 26567 ;; Registers used:
 26568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 26569 ;; Tracked objects:
 26570 ;;		On entry : 0/0
 26571 ;;		On exit  : 0/0
 26572 ;;		Unchanged: 0/0
 26573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26574 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26575 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26576 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26577 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26578 ;;Total ram usage:        9 bytes
 26579 ;; Hardware stack levels used:    1
 26580 ;; This function calls:
 26581 ;;		Nothing
 26582 ;; This function is called by:
 26583 ;;		i2_Byte_GetPair
 26584 ;; This function uses a non-reentrant model
 26585 ;;
 26586                           
 26587                           	psect	text141
 26588  0143E6                     __ptext141:
 26589                           	opt stack 0
 26590  0143E6                     i2_Byte_GetZone:
 26591                           	opt stack 14
 26592                           
 26593                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 26594                           
 26595                           ;incstack = 0
 26596  0143E6  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 26597  0143EA  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 26598  0143EE  0E00               	movlw	low (__mediumconst shr (0+16))
 26599  0143F0  6EF8               	movwf	tblptru,c
 26600  0143F2  0E0F               	movlw	(high __ramtop+-1)
 26601  0143F4  64F7               	cpfsgt	tblptrh,c
 26602  0143F6  D003               	bra	i2u519_47
 26603  0143F8  0008               	tblrd		*
 26604  0143FA  50F5               	movf	tablat,w,c
 26605  0143FC  D005               	bra	i2u519_40
 26606  0143FE                     i2u519_47:
 26607  0143FE  CFF6 FFE9          	movff	tblptrl,fsr0l
 26608  014402  CFF7 FFEA          	movff	tblptrh,fsr0h
 26609  014406  50EF               	movf	indf0,w,c
 26610  014408                     i2u519_40:
 26611  014408  6E09               	movwf	i2Byte_GetZone@Output,c
 26612                           
 26613                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 26614  01440A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 26615  01440C  0D01               	mullw	1
 26616  01440E  0E93               	movlw	low _MASKS
 26617  014410  24F3               	addwf	prodl,w,c
 26618  014412  6EF6               	movwf	tblptrl,c
 26619  014414  0EFC               	movlw	high _MASKS
 26620  014416  20F4               	addwfc	prodh,w,c
 26621  014418  6EF7               	movwf	tblptrh,c
 26622  01441A                     	if	1	;There are 3 active tblptr bytes
 26623  01441A  6AF8               	clrf	tblptru,c
 26624  01441C  0E00               	movlw	low (__mediumconst shr (0+16))
 26625  01441E  22F8               	addwfc	tblptru,f,c
 26626  014420                     	endif
 26627  014420  0008               	tblrd		*
 26628  014422  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 26629                           
 26630                           ;Types.c: 68: UINT8 Offset = 0;
 26631  014426  0E00               	movlw	0
 26632  014428  6E08               	movwf	i2Byte_GetZone@Offset,c
 26633                           
 26634                           ;Types.c: 70: while (pChunk >= pMax)
 26635  01442A  D003               	goto	i2l732
 26636  01442C                     
 26637                           ;Types.c: 71: {
 26638                           ;Types.c: 72: pChunk -= pMax;
 26639  01442C  5003               	movf	i2Byte_GetZone@pMax,w,c
 26640  01442E  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 26641                           
 26642                           ;Types.c: 73: Offset += 1;
 26643  014430  2A08               	incf	i2Byte_GetZone@Offset,f,c
 26644  014432                     i2l732:
 26645  014432  5003               	movf	i2Byte_GetZone@pMax,w,c
 26646  014434  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 26647  014436  B0D8               	btfsc	status,0,c
 26648  014438  D7F9               	goto	i2l733
 26649                           
 26650                           ;Types.c: 74: }
 26651                           ;Types.c: 75: pChunk *= pChunkSize;
 26652  01443A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 26653  01443C  0204               	mulwf	i2Byte_GetZone@pChunk,c
 26654  01443E  50F3               	movf	prodl,w,c
 26655  014440  6E04               	movwf	i2Byte_GetZone@pChunk,c
 26656                           
 26657                           ;Types.c: 76: pChunk += Offset;
 26658  014442  5008               	movf	i2Byte_GetZone@Offset,w,c
 26659  014444  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 26660                           
 26661                           ;Types.c: 78: Output >>= pChunk;
 26662  014446  2804               	incf	i2Byte_GetZone@pChunk,w,c
 26663  014448  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 26664  01444A  D002               	goto	i2u521_40
 26665  01444C                     i2u521_45:
 26666  01444C  90D8               	bcf	status,0,c
 26667  01444E  3209               	rrcf	i2Byte_GetZone@Output,f,c
 26668  014450                     i2u521_40:
 26669  014450  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 26670  014452  D7FC               	goto	i2u521_45
 26671                           
 26672                           ;Types.c: 79: Output &= MASK;
 26673  014454  5007               	movf	i2Byte_GetZone@MASK,w,c
 26674  014456  1609               	andwf	i2Byte_GetZone@Output,f,c
 26675                           
 26676                           ;Types.c: 80: return Output;
 26677  014458  5009               	movf	i2Byte_GetZone@Output,w,c
 26678  01445A  0012               	return	
 26679  01445C                     __end_ofi2_Byte_GetZone:
 26680                           	opt stack 0
 26681                           tosu	equ	0xFFF
 26682                           tosh	equ	0xFFE
 26683                           tosl	equ	0xFFD
 26684                           pclatu	equ	0xFFB
 26685                           pclath	equ	0xFFA
 26686                           tblptru	equ	0xFF8
 26687                           tblptrh	equ	0xFF7
 26688                           tblptrl	equ	0xFF6
 26689                           tablat	equ	0xFF5
 26690                           prodh	equ	0xFF4
 26691                           prodl	equ	0xFF3
 26692                           intcon	equ	0xFF2
 26693                           indf0	equ	0xFEF
 26694                           postinc0	equ	0xFEE
 26695                           fsr0h	equ	0xFEA
 26696                           fsr0l	equ	0xFE9
 26697                           wreg	equ	0xFE8
 26698                           indf1	equ	0xFE7
 26699                           postdec1	equ	0xFE5
 26700                           plusw1	equ	0xFE3
 26701                           fsr1h	equ	0xFE2
 26702                           fsr1l	equ	0xFE1
 26703                           indf2	equ	0xFDF
 26704                           postinc2	equ	0xFDE
 26705                           postdec2	equ	0xFDD
 26706                           plusw2	equ	0xFDB
 26707                           fsr2h	equ	0xFDA
 26708                           fsr2l	equ	0xFD9
 26709                           status	equ	0xFD8
 26710                           
 26711 ;; *************** function i2_Byte_SetBit *****************
 26712 ;; Defined at:
 26713 ;;		line 32 in file "Library/Types.c"
 26714 ;; Parameters:    Size  Location     Type
 26715 ;;  pInput          2    0[COMRAM] PTR struct Byte
 26716 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 26717 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 26718 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 26719 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 26720 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 26721 ;;		 -> NULL(0), 
 26722 ;;  pBit            1    2[COMRAM] unsigned char 
 26723 ;;  pValue          1    3[COMRAM] unsigned char 
 26724 ;; Auto vars:     Size  Location     Type
 26725 ;;		None
 26726 ;; Return value:  Size  Location     Type
 26727 ;;                  1    wreg      void 
 26728 ;; Registers used:
 26729 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26730 ;; Tracked objects:
 26731 ;;		On entry : 0/0
 26732 ;;		On exit  : 0/0
 26733 ;;		Unchanged: 0/0
 26734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26735 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26737 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26738 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26739 ;;Total ram usage:        7 bytes
 26740 ;; Hardware stack levels used:    1
 26741 ;; This function calls:
 26742 ;;		Nothing
 26743 ;; This function is called by:
 26744 ;;		i2_Port_SetPin
 26745 ;; This function uses a non-reentrant model
 26746 ;;
 26747                           
 26748                           	psect	text142
 26749  014BA4                     __ptext142:
 26750                           	opt stack 0
 26751  014BA4                     i2_Byte_SetBit:
 26752                           	opt stack 16
 26753                           
 26754                           ;Types.c: 34: pValue &= 1;
 26755                           
 26756                           ;incstack = 0
 26757  014BA4  0E01               	movlw	1
 26758  014BA6  1604               	andwf	i2Byte_SetBit@pValue,f,c
 26759                           
 26760                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 26761  014BA8  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 26762  014BAC  0E01               	movlw	1
 26763  014BAE  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 26764  014BB0  2A05               	incf	??i2_Byte_SetBit,f,c
 26765  014BB2  D002               	goto	i2u676_44
 26766  014BB4                     i2u676_45:
 26767  014BB4  90D8               	bcf	status,0,c
 26768  014BB6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 26769  014BB8                     i2u676_44:
 26770  014BB8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 26771  014BBA  D7FC               	goto	i2u676_45
 26772  014BBC  5006               	movf	??i2_Byte_SetBit+1,w,c
 26773  014BBE  0AFF               	xorlw	255
 26774  014BC0  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 26775  014BC2  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 26776  014BC6  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 26777  014BCA  5007               	movf	??i2_Byte_SetBit+2,w,c
 26778  014BCC  16DF               	andwf	indf2,f,c
 26779                           
 26780                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 26781  014BCE  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 26782  014BD2  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 26783  014BD6  2A05               	incf	??i2_Byte_SetBit,f,c
 26784  014BD8  D002               	goto	i2u677_44
 26785  014BDA                     i2u677_45:
 26786  014BDA  90D8               	bcf	status,0,c
 26787  014BDC  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 26788  014BDE                     i2u677_44:
 26789  014BDE  2E05               	decfsz	??i2_Byte_SetBit,f,c
 26790  014BE0  D7FC               	goto	i2u677_45
 26791  014BE2  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 26792  014BE6  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 26793  014BEA  5006               	movf	??i2_Byte_SetBit+1,w,c
 26794  014BEC  12DF               	iorwf	indf2,f,c
 26795  014BEE  0012               	return		;funcret
 26796  014BF0                     __end_ofi2_Byte_SetBit:
 26797                           	opt stack 0
 26798                           tosu	equ	0xFFF
 26799                           tosh	equ	0xFFE
 26800                           tosl	equ	0xFFD
 26801                           pclatu	equ	0xFFB
 26802                           pclath	equ	0xFFA
 26803                           tblptru	equ	0xFF8
 26804                           tblptrh	equ	0xFF7
 26805                           tblptrl	equ	0xFF6
 26806                           tablat	equ	0xFF5
 26807                           prodh	equ	0xFF4
 26808                           prodl	equ	0xFF3
 26809                           intcon	equ	0xFF2
 26810                           indf0	equ	0xFEF
 26811                           postinc0	equ	0xFEE
 26812                           fsr0h	equ	0xFEA
 26813                           fsr0l	equ	0xFE9
 26814                           wreg	equ	0xFE8
 26815                           indf1	equ	0xFE7
 26816                           postdec1	equ	0xFE5
 26817                           plusw1	equ	0xFE3
 26818                           fsr1h	equ	0xFE2
 26819                           fsr1l	equ	0xFE1
 26820                           indf2	equ	0xFDF
 26821                           postinc2	equ	0xFDE
 26822                           postdec2	equ	0xFDD
 26823                           plusw2	equ	0xFDB
 26824                           fsr2h	equ	0xFDA
 26825                           fsr2l	equ	0xFD9
 26826                           status	equ	0xFD8
 26827                           
 26828 ;; *************** function i2_MXK_SwitchTo *****************
 26829 ;; Defined at:
 26830 ;;		line 105 in file "Library/MXK.c"
 26831 ;; Parameters:    Size  Location     Type
 26832 ;;  pModule         1    wreg     enum E6927
 26833 ;; Auto vars:     Size  Location     Type
 26834 ;;  pModule         1    7[COMRAM] enum E6927
 26835 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 26836 ;; Return value:  Size  Location     Type
 26837 ;;                  1    wreg      unsigned char 
 26838 ;; Registers used:
 26839 ;;		wreg, status,2, status,0, cstack
 26840 ;; Tracked objects:
 26841 ;;		On entry : 0/0
 26842 ;;		On exit  : 0/0
 26843 ;;		Unchanged: 0/0
 26844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26846 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26849 ;;Total ram usage:        2 bytes
 26850 ;; Hardware stack levels used:    1
 26851 ;; Hardware stack levels required when called:    1
 26852 ;; This function calls:
 26853 ;;		i2_delay_us
 26854 ;; This function is called by:
 26855 ;;		i2_Motor_Step
 26856 ;; This function uses a non-reentrant model
 26857 ;;
 26858                           
 26859                           	psect	text143
 26860  014FF0                     __ptext143:
 26861                           	opt stack 0
 26862  014FF0                     i2_MXK_SwitchTo:
 26863                           	opt stack 16
 26864                           
 26865                           ;incstack = 0
 26866                           ;i2MXK_SwitchTo@pModule stored from wreg
 26867  014FF0  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 26868                           
 26869                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 26870  014FF2  5086               	movf	3974,w,c	;volatile
 26871  014FF4  0B0F               	andlw	15
 26872  014FF6  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 26873                           
 26874                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 26875  014FF8  504B               	movf	_Bus_State,w,c
 26876  014FFA  A4D8               	btfss	status,2,c
 26877  014FFC  D002               	goto	i2l1730
 26878                           
 26879                           ;MXK.c: 110: return 0;
 26880  014FFE  0E00               	movlw	0
 26881  015000  0012               	return	
 26882  015002                     i2l1730:
 26883                           
 26884                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 26885  015002  0E00               	movlw	0
 26886  015004  6E4B               	movwf	_Bus_State,c
 26887                           
 26888                           ;MXK.c: 114: if (CUR != pModule)
 26889  015006  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 26890  015008  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 26891  01500A  B4D8               	btfsc	status,2,c
 26892  01500C  D00A               	goto	i2l1732
 26893                           
 26894                           ;MXK.c: 115: {
 26895                           ;MXK.c: 116: PORTG &= ~(0xF);
 26896  01500E  0EF0               	movlw	240
 26897  015010  1686               	andwf	3974,f,c	;volatile
 26898                           
 26899                           ;MXK.c: 117: PORTG |= pModule;
 26900  015012  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 26901  015014  1286               	iorwf	3974,f,c	;volatile
 26902                           
 26903                           ;MXK.c: 120: delay_us(10);
 26904  015016  0E00               	movlw	0
 26905  015018  6E02               	movwf	i2delay_us@us+1,c
 26906  01501A  0E0A               	movlw	10
 26907  01501C  6E01               	movwf	i2delay_us@us,c
 26908  01501E  EC0D  F0A7         	call	i2_delay_us	;wreg free
 26909  015022                     i2l1732:
 26910                           
 26911                           ;MXK.c: 121: }
 26912                           ;MXK.c: 122: return 1;
 26913  015022  0E01               	movlw	1
 26914  015024  0012               	return	
 26915  015026                     __end_ofi2_MXK_SwitchTo:
 26916                           	opt stack 0
 26917                           tosu	equ	0xFFF
 26918                           tosh	equ	0xFFE
 26919                           tosl	equ	0xFFD
 26920                           pclatu	equ	0xFFB
 26921                           pclath	equ	0xFFA
 26922                           tblptru	equ	0xFF8
 26923                           tblptrh	equ	0xFF7
 26924                           tblptrl	equ	0xFF6
 26925                           tablat	equ	0xFF5
 26926                           prodh	equ	0xFF4
 26927                           prodl	equ	0xFF3
 26928                           intcon	equ	0xFF2
 26929                           indf0	equ	0xFEF
 26930                           postinc0	equ	0xFEE
 26931                           fsr0h	equ	0xFEA
 26932                           fsr0l	equ	0xFE9
 26933                           wreg	equ	0xFE8
 26934                           indf1	equ	0xFE7
 26935                           postdec1	equ	0xFE5
 26936                           plusw1	equ	0xFE3
 26937                           fsr1h	equ	0xFE2
 26938                           fsr1l	equ	0xFE1
 26939                           indf2	equ	0xFDF
 26940                           postinc2	equ	0xFDE
 26941                           postdec2	equ	0xFDD
 26942                           plusw2	equ	0xFDB
 26943                           fsr2h	equ	0xFDA
 26944                           fsr2l	equ	0xFD9
 26945                           status	equ	0xFD8
 26946                           
 26947 ;; *************** function i2_delay_us *****************
 26948 ;; Defined at:
 26949 ;;		line 255 in file "Library/Types.c"
 26950 ;; Parameters:    Size  Location     Type
 26951 ;;  us              2    0[COMRAM] unsigned short 
 26952 ;; Auto vars:     Size  Location     Type
 26953 ;;  delay_us        4    2[COMRAM] unsigned long 
 26954 ;; Return value:  Size  Location     Type
 26955 ;;                  1    wreg      void 
 26956 ;; Registers used:
 26957 ;;		wreg, status,2, status,0
 26958 ;; Tracked objects:
 26959 ;;		On entry : 0/0
 26960 ;;		On exit  : 0/0
 26961 ;;		Unchanged: 0/0
 26962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26964 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26966 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26967 ;;Total ram usage:        6 bytes
 26968 ;; Hardware stack levels used:    1
 26969 ;; This function calls:
 26970 ;;		Nothing
 26971 ;; This function is called by:
 26972 ;;		i2_MXK_SwitchTo
 26973 ;; This function uses a non-reentrant model
 26974 ;;
 26975                           
 26976                           	psect	text144
 26977  014E1A                     __ptext144:
 26978                           	opt stack 0
 26979  014E1A                     i2_delay_us:
 26980                           	opt stack 16
 26981                           
 26982                           ;Types.c: 256: unsigned long u;
 26983                           ;Types.c: 257: while (us--) {
 26984                           
 26985                           ;incstack = 0
 26986  014E1A  D016               	goto	i2u680_40
 26987  014E1C                     i2l9622:
 26988                           
 26989                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 26990  014E1C  0E00               	movlw	0
 26991  014E1E  6E03               	movwf	i2delay_us@u,c
 26992  014E20  0E00               	movlw	0
 26993  014E22  6E04               	movwf	i2delay_us@u+1,c
 26994  014E24  0E00               	movlw	0
 26995  014E26  6E05               	movwf	i2delay_us@u+2,c
 26996  014E28  0E00               	movlw	0
 26997  014E2A  6E06               	movwf	i2delay_us@u+3,c
 26998  014E2C                     i2l9624:
 26999  014E2C  5003               	movf	i2delay_us@u,w,c
 27000  014E2E  1004               	iorwf	i2delay_us@u+1,w,c
 27001  014E30  1005               	iorwf	i2delay_us@u+2,w,c
 27002  014E32  1006               	iorwf	i2delay_us@u+3,w,c
 27003  014E34  A4D8               	btfss	status,2,c
 27004  014E36  D008               	goto	i2u680_40
 27005  014E38  F000               	nop		; ;# 
 27006  014E3A  0E01               	movlw	1
 27007  014E3C  2603               	addwf	i2delay_us@u,f,c
 27008  014E3E  0E00               	movlw	0
 27009  014E40  2204               	addwfc	i2delay_us@u+1,f,c
 27010  014E42  2205               	addwfc	i2delay_us@u+2,f,c
 27011  014E44  2206               	addwfc	i2delay_us@u+3,f,c
 27012  014E46  D7F2               	goto	i2l9624
 27013  014E48                     i2u680_40:
 27014  014E48  0601               	decf	i2delay_us@us,f,c
 27015  014E4A  A0D8               	btfss	status,0,c
 27016  014E4C  0602               	decf	i2delay_us@us+1,f,c
 27017  014E4E  2801               	incf	i2delay_us@us,w,c
 27018  014E50  E1E5               	bnz	i2l9622
 27019  014E52  2802               	incf	i2delay_us@us+1,w,c
 27020  014E54  B4D8               	btfsc	status,2,c
 27021  014E56  0012               	return	
 27022  014E58  D7E1               	goto	i2l832
 27023  014E5A                     __end_ofi2_delay_us:
 27024                           	opt stack 0
 27025                           tosu	equ	0xFFF
 27026                           tosh	equ	0xFFE
 27027                           tosl	equ	0xFFD
 27028                           pclatu	equ	0xFFB
 27029                           pclath	equ	0xFFA
 27030                           tblptru	equ	0xFF8
 27031                           tblptrh	equ	0xFF7
 27032                           tblptrl	equ	0xFF6
 27033                           tablat	equ	0xFF5
 27034                           prodh	equ	0xFF4
 27035                           prodl	equ	0xFF3
 27036                           intcon	equ	0xFF2
 27037                           indf0	equ	0xFEF
 27038                           postinc0	equ	0xFEE
 27039                           fsr0h	equ	0xFEA
 27040                           fsr0l	equ	0xFE9
 27041                           wreg	equ	0xFE8
 27042                           indf1	equ	0xFE7
 27043                           postdec1	equ	0xFE5
 27044                           plusw1	equ	0xFE3
 27045                           fsr1h	equ	0xFE2
 27046                           fsr1l	equ	0xFE1
 27047                           indf2	equ	0xFDF
 27048                           postinc2	equ	0xFDE
 27049                           postdec2	equ	0xFDD
 27050                           plusw2	equ	0xFDB
 27051                           fsr2h	equ	0xFDA
 27052                           fsr2l	equ	0xFD9
 27053                           status	equ	0xFD8
 27054                           
 27055 ;; *************** function i2_MXK_Release *****************
 27056 ;; Defined at:
 27057 ;;		line 130 in file "Library/MXK.c"
 27058 ;; Parameters:    Size  Location     Type
 27059 ;;		None
 27060 ;; Auto vars:     Size  Location     Type
 27061 ;;		None
 27062 ;; Return value:  Size  Location     Type
 27063 ;;                  1    wreg      unsigned char 
 27064 ;; Registers used:
 27065 ;;		wreg, status,2, status,0
 27066 ;; Tracked objects:
 27067 ;;		On entry : 0/0
 27068 ;;		On exit  : 0/0
 27069 ;;		Unchanged: 0/0
 27070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27075 ;;Total ram usage:        0 bytes
 27076 ;; Hardware stack levels used:    1
 27077 ;; This function calls:
 27078 ;;		Nothing
 27079 ;; This function is called by:
 27080 ;;		i2_Motor_Step
 27081 ;; This function uses a non-reentrant model
 27082 ;;
 27083                           
 27084                           	psect	text145
 27085  01559C                     __ptext145:
 27086                           	opt stack 0
 27087  01559C                     i2_MXK_Release:
 27088                           	opt stack 17
 27089                           
 27090                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 27091                           
 27092                           ;incstack = 0
 27093  01559C  0E01               	movlw	1
 27094  01559E  6E4B               	movwf	_Bus_State,c
 27095                           
 27096                           ;MXK.c: 135: return 1;
 27097                           ;	Return value of i2_MXK_Release is never used
 27098  0155A0  0012               	return	
 27099  0155A2                     __end_ofi2_MXK_Release:
 27100                           	opt stack 0
 27101                           tosu	equ	0xFFF
 27102                           tosh	equ	0xFFE
 27103                           tosl	equ	0xFFD
 27104                           pclatu	equ	0xFFB
 27105                           pclath	equ	0xFFA
 27106                           tblptru	equ	0xFF8
 27107                           tblptrh	equ	0xFF7
 27108                           tblptrl	equ	0xFF6
 27109                           tablat	equ	0xFF5
 27110                           prodh	equ	0xFF4
 27111                           prodl	equ	0xFF3
 27112                           intcon	equ	0xFF2
 27113                           indf0	equ	0xFEF
 27114                           postinc0	equ	0xFEE
 27115                           fsr0h	equ	0xFEA
 27116                           fsr0l	equ	0xFE9
 27117                           wreg	equ	0xFE8
 27118                           indf1	equ	0xFE7
 27119                           postdec1	equ	0xFE5
 27120                           plusw1	equ	0xFE3
 27121                           fsr1h	equ	0xFE2
 27122                           fsr1l	equ	0xFE1
 27123                           indf2	equ	0xFDF
 27124                           postinc2	equ	0xFDE
 27125                           postdec2	equ	0xFDD
 27126                           plusw2	equ	0xFDB
 27127                           fsr2h	equ	0xFDA
 27128                           fsr2l	equ	0xFD9
 27129                           status	equ	0xFD8
 27130                           
 27131 ;; *************** function i2_MXK_Queue *****************
 27132 ;; Defined at:
 27133 ;;		line 144 in file "Library/MXK.c"
 27134 ;; Parameters:    Size  Location     Type
 27135 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 27136 ;;		 -> Absolute function(1), Motor_Step(1), 
 27137 ;; Auto vars:     Size  Location     Type
 27138 ;;		None
 27139 ;; Return value:  Size  Location     Type
 27140 ;;                  1    wreg      void 
 27141 ;; Registers used:
 27142 ;;		wreg, status,2, status,0
 27143 ;; Tracked objects:
 27144 ;;		On entry : 0/0
 27145 ;;		On exit  : 0/0
 27146 ;;		Unchanged: 0/0
 27147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27148 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27151 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27152 ;;Total ram usage:        3 bytes
 27153 ;; Hardware stack levels used:    1
 27154 ;; This function calls:
 27155 ;;		Nothing
 27156 ;; This function is called by:
 27157 ;;		i2_Motor_Step
 27158 ;; This function uses a non-reentrant model
 27159 ;;
 27160                           
 27161                           	psect	text146
 27162  015542                     __ptext146:
 27163                           	opt stack 0
 27164  015542                     i2_MXK_Queue:
 27165                           	opt stack 17
 27166                           
 27167                           ;MXK.c: 146: lQueue = pCallback;
 27168                           
 27169                           ;incstack = 0
 27170  015542  C001  F0DF         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 27171  015546  C002  F0E0         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 27172  01554A  C003  F0E1         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 27173  01554E  0012               	return		;funcret
 27174  015550                     __end_ofi2_MXK_Queue:
 27175                           	opt stack 0
 27176                           tosu	equ	0xFFF
 27177                           tosh	equ	0xFFE
 27178                           tosl	equ	0xFFD
 27179                           pclatu	equ	0xFFB
 27180                           pclath	equ	0xFFA
 27181                           tblptru	equ	0xFF8
 27182                           tblptrh	equ	0xFF7
 27183                           tblptrl	equ	0xFF6
 27184                           tablat	equ	0xFF5
 27185                           prodh	equ	0xFF4
 27186                           prodl	equ	0xFF3
 27187                           intcon	equ	0xFF2
 27188                           indf0	equ	0xFEF
 27189                           postinc0	equ	0xFEE
 27190                           fsr0h	equ	0xFEA
 27191                           fsr0l	equ	0xFE9
 27192                           wreg	equ	0xFE8
 27193                           indf1	equ	0xFE7
 27194                           postdec1	equ	0xFE5
 27195                           plusw1	equ	0xFE3
 27196                           fsr1h	equ	0xFE2
 27197                           fsr1l	equ	0xFE1
 27198                           indf2	equ	0xFDF
 27199                           postinc2	equ	0xFDE
 27200                           postdec2	equ	0xFDD
 27201                           plusw2	equ	0xFDB
 27202                           fsr2h	equ	0xFDA
 27203                           fsr2l	equ	0xFD9
 27204                           status	equ	0xFD8
 27205                           tosu	equ	0xFFF
 27206                           tosh	equ	0xFFE
 27207                           tosl	equ	0xFFD
 27208                           pclatu	equ	0xFFB
 27209                           pclath	equ	0xFFA
 27210                           tblptru	equ	0xFF8
 27211                           tblptrh	equ	0xFF7
 27212                           tblptrl	equ	0xFF6
 27213                           tablat	equ	0xFF5
 27214                           prodh	equ	0xFF4
 27215                           prodl	equ	0xFF3
 27216                           intcon	equ	0xFF2
 27217                           indf0	equ	0xFEF
 27218                           postinc0	equ	0xFEE
 27219                           fsr0h	equ	0xFEA
 27220                           fsr0l	equ	0xFE9
 27221                           wreg	equ	0xFE8
 27222                           indf1	equ	0xFE7
 27223                           postdec1	equ	0xFE5
 27224                           plusw1	equ	0xFE3
 27225                           fsr1h	equ	0xFE2
 27226                           fsr1l	equ	0xFE1
 27227                           indf2	equ	0xFDF
 27228                           postinc2	equ	0xFDE
 27229                           postdec2	equ	0xFDD
 27230                           plusw2	equ	0xFDB
 27231                           fsr2h	equ	0xFDA
 27232                           fsr2l	equ	0xFD9
 27233                           status	equ	0xFD8
 27234                           
 27235                           	psect	text147
 27236  000000                     __ptext147:
 27237                           	opt stack 0
 27238                           tosu	equ	0xFFF
 27239                           tosh	equ	0xFFE
 27240                           tosl	equ	0xFFD
 27241                           pclatu	equ	0xFFB
 27242                           pclath	equ	0xFFA
 27243                           tblptru	equ	0xFF8
 27244                           tblptrh	equ	0xFF7
 27245                           tblptrl	equ	0xFF6
 27246                           tablat	equ	0xFF5
 27247                           prodh	equ	0xFF4
 27248                           prodl	equ	0xFF3
 27249                           intcon	equ	0xFF2
 27250                           indf0	equ	0xFEF
 27251                           postinc0	equ	0xFEE
 27252                           fsr0h	equ	0xFEA
 27253                           fsr0l	equ	0xFE9
 27254                           wreg	equ	0xFE8
 27255                           indf1	equ	0xFE7
 27256                           postdec1	equ	0xFE5
 27257                           plusw1	equ	0xFE3
 27258                           fsr1h	equ	0xFE2
 27259                           fsr1l	equ	0xFE1
 27260                           indf2	equ	0xFDF
 27261                           postinc2	equ	0xFDE
 27262                           postdec2	equ	0xFDD
 27263                           plusw2	equ	0xFDB
 27264                           fsr2h	equ	0xFDA
 27265                           fsr2l	equ	0xFD9
 27266                           status	equ	0xFD8
 27267                           
 27268                           	psect	rparam
 27269  0000                     tosu	equ	0xFFF
 27270                           tosh	equ	0xFFE
 27271                           tosl	equ	0xFFD
 27272                           pclatu	equ	0xFFB
 27273                           pclath	equ	0xFFA
 27274                           tblptru	equ	0xFF8
 27275                           tblptrh	equ	0xFF7
 27276                           tblptrl	equ	0xFF6
 27277                           tablat	equ	0xFF5
 27278                           prodh	equ	0xFF4
 27279                           prodl	equ	0xFF3
 27280                           intcon	equ	0xFF2
 27281                           indf0	equ	0xFEF
 27282                           postinc0	equ	0xFEE
 27283                           fsr0h	equ	0xFEA
 27284                           fsr0l	equ	0xFE9
 27285                           wreg	equ	0xFE8
 27286                           indf1	equ	0xFE7
 27287                           postdec1	equ	0xFE5
 27288                           plusw1	equ	0xFE3
 27289                           fsr1h	equ	0xFE2
 27290                           fsr1l	equ	0xFE1
 27291                           indf2	equ	0xFDF
 27292                           postinc2	equ	0xFDE
 27293                           postdec2	equ	0xFDD
 27294                           plusw2	equ	0xFDB
 27295                           fsr2h	equ	0xFDA
 27296                           fsr2l	equ	0xFD9
 27297                           status	equ	0xFD8
 27298                           
 27299                           	psect	temp
 27300  000051                     btemp:
 27301                           	opt stack 0
 27302  000051                     	ds	1
 27303  0000                     int$flags	set	btemp
 27304  0000                     wtemp6	set	btemp+1
 27305                           tosu	equ	0xFFF
 27306                           tosh	equ	0xFFE
 27307                           tosl	equ	0xFFD
 27308                           pclatu	equ	0xFFB
 27309                           pclath	equ	0xFFA
 27310                           tblptru	equ	0xFF8
 27311                           tblptrh	equ	0xFF7
 27312                           tblptrl	equ	0xFF6
 27313                           tablat	equ	0xFF5
 27314                           prodh	equ	0xFF4
 27315                           prodl	equ	0xFF3
 27316                           intcon	equ	0xFF2
 27317                           indf0	equ	0xFEF
 27318                           postinc0	equ	0xFEE
 27319                           fsr0h	equ	0xFEA
 27320                           fsr0l	equ	0xFE9
 27321                           wreg	equ	0xFE8
 27322                           indf1	equ	0xFE7
 27323                           postdec1	equ	0xFE5
 27324                           plusw1	equ	0xFE3
 27325                           fsr1h	equ	0xFE2
 27326                           fsr1l	equ	0xFE1
 27327                           indf2	equ	0xFDF
 27328                           postinc2	equ	0xFDE
 27329                           postdec2	equ	0xFDD
 27330                           plusw2	equ	0xFDB
 27331                           fsr2h	equ	0xFDA
 27332                           fsr2l	equ	0xFD9
 27333                           status	equ	0xFD8


Data Sizes:
    Strings     290
    Constant    806
    Data        35
    BSS         828
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    127     150
    BANK1           256      0     249
    BANK2           256      0     251
    BANK3           256     24      24
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_27(CODE[10]), STR_26(CODE[3]), STR_25(CODE[24]), STR_24(CODE[3]), 
		 -> STR_23(CODE[11]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[2]), 
		 -> STR_19(CODE[4]), STR_18(CODE[3]), STR_17(CODE[2]), STR_16(CODE[5]), 
		 -> STR_15(CODE[39]), STR_14(CODE[42]), STR_13(CODE[16]), STR_12(CODE[3]), 
		 -> STR_11(CODE[21]), STR_10(CODE[3]), STR_9(CODE[19]), STR_8(CODE[28]), 
		 -> STR_7(CODE[20]), STR_6(CODE[3]), STR_5(CODE[17]), STR_4(CODE[12]), 
		 -> STR_3(CODE[3]), STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_ADCAverage
    _Robot_Init->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _Init_Pos_Array->_Console_Render
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_ADCAverage

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                84    84      0 1397904
                                            123 BANK0      4     4      0
                         _ADCAverage
                       _Console_Init
                     _Console_Render
                    _FunctInitButton
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                     _Init_Pos_Array
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                         _Robot_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      62
                         _Robot_Stop
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363528
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  293252
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  263029
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95653
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    2534
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pos_Array                                      46    46      0   45406
                                             44 BANK0     46    46      0
                     _Console_Render
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    8700
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADCAverage                                          28    26      2  108759
                                            119 BANK0      4     2      2
                                              0 BANK3     24    24      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8   85828
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   27880
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   45966
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4   11815
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    1844
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4    1097
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           16     8      8   12869
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    5761
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    6575
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    5942
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (2) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Pos_Array *
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul (ARG)
       _putch (ARG)
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _eusartSend
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul (ARG)
     _putch (ARG)
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     18      18      11        9.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FB       9       98.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F9       7       97.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7F      96       5       93.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F2      12        0.0%
DATA                 0      0     41E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed May 16 20:58:59 2018

                   i2_Timer0_Stop 5596                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 0038                      i2_Motor_Step 33BC  
                               _A 004C                                 l8 38F0  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 004D                                 _i 00EF  
                               _j 014A                                 _l 004F  
                               _u 0149                                 _w 0050  
                               _x 0134                      ___fldiv@sign 006C  
                              l11 2EBA                                l12 2EA8  
                              l90 2B7E                                l87 2AF8  
             __size_of_ADCAverage 02DC                                l89 2B58  
                    ___awdiv@sign 0065               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 5460                LCD_DrawField@pSize 0078  
              LCD_DrawField@count 007E                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 555C                               l120 3DF2  
                             l121 3E08                               l122 3E1E  
                             l220 48F4                               l117 3E34  
                             l221 48C4                               l118 3DDE  
                             l230 4C0E                               l222 4904  
                             l223 48DC                       ?_LED_Toggle 0001  
                             l234 4E08                               l235 4DE0  
                             l227 4C26                               l403 24B6  
                             l412 203A                               l228 4BF6  
                             l340 3F7A                               l404 2456  
                             l421 1FD6                               l413 1EEC  
                             l237 4DF4                               l341 3F84  
                             l405 24E6                     ??_Console_Tab 0068  
                             l414 2056                               l430 3820  
                             l350 4048                               l342 3F8E  
                             l510 1B58                               l406 246E  
                             l415 1F0E                               l183 41EC  
                             l351 3FF6                               l343 3F98  
                             l511 1C4E                               l407 2486  
                             l600 000C                               l432 3846  
                             l184 41CC                               l344 3FA2  
                             l512 1B78                               l408 249E  
                             l417 1F72                               l601 015E  
                             l433 3872                               l353 4002  
                             l337 3FC0                               l345 3FAC  
                             l610 01D6                               l602 0038  
                             l354 400C                               l346 3FB6  
                             l338 3F6E                               l370 3F1A  
                             l611 021C                               l603 016E  
                             l427 389A                               l355 4016  
                             l363 3F38                               l371 3F24  
                             l531 120E                       ?_HMI_GetBar 0001  
                             l612 0262                               l604 00C8  
                             l356 4020                               l372 3F2E  
                             l364 3EE6                               l532 1230  
                             l516 1BB8                               l357 402A  
                             l509 1C34                               l614 0334  
                             l358 4034                               l366 3EF2  
                             l526 1250                               l615 032C  
                             l607 02A8                               l359 403E  
                             l367 3EFC                               l519 1BF8  
                             l616 0346                               l608 0190  
                             l368 3F06                               l528 126E  
                             l393 4BA0                               l617 0330  
                             l609 02C6                               l369 3F10  
                             l529 11F0                               l483 1818  
                             l900 132A                               l732 4344  
                             l476 18E0                               l901 132E  
                             l733 433E                               l389 4800  
                             l477 1770                               l397 4DD6  
                             l910 1352                               l902 1332  
                             l726 3E7C                               l478 18FC  
                             l486 187C                               l654 520C  
                             l911 1356                               l903 1336  
                             l727 3E76                               l479 17B4  
                             l655 5204                               l912 135A  
                             l904 133A                               l824 4864  
                             l832 4D12                               l681 4548  
                             l913 135E                               l905 133E  
                             l921 49FA                               l673 5112  
                             l657 5208                               l914 1362  
                             l906 1342                               l922 49CA  
                             l930 377E                               l915 1366  
                             l907 1346                               l819 4740  
                             l684 455E                               l916 136A  
                             l908 134A                               l860 128A  
                             l853 1372                               l917 136E  
                             l909 134E                               l861 128E  
                             l781 50AE                               l597 0016  
                             l678 4584                               l686 456E  
                             l870 12B2                               l862 1292  
                             l854 1276                               l598 0002  
                             l679 4538                               l871 12B6  
                             l863 1296                               l599 0026  
                             l880 12DA                               l872 12BA  
                             l864 129A                               l856 127A  
                             l928 37F0                               l776 4F6C  
                             l881 12DE                               l873 12BE  
                             l865 129E                               l857 127E  
                             l929 37C8                               l890 1302  
                             l882 12E2                               l874 12C2  
                             l866 12A2                               l858 1282  
                             l891 1306                               l883 12E6  
                             l875 12C6                               l867 12A6  
                             l859 1286                               l892 130A  
                             l884 12EA                               l876 12CA  
                             l868 12AA                               l893 130E  
                             l885 12EE                               l877 12CE  
                             l869 12AE                               l894 1312  
                             l886 12F2                               l878 12D2  
                             l990 44E0                               l895 1316  
                             l887 12F6                               l879 12D6  
                             l983 425C                               l896 131A  
                             l888 12FA                               l976 45B8  
                             l992 44EC                               l984 4202  
                             l897 131E                               l889 12FE  
                             l985 425A                               l898 1322  
                             l978 45C4                               l899 1326  
                             l997 4B18                               l999 4B36  
                             _RA2 007C02                               _RA3 007C03  
                             _RD5 007C1D                               _RD7 007C1F  
                             _PR2 000FCB                               _exp 14F4  
                             _log 24FE                               _mod 012E  
                             _val 002F                               _pow 197A  
                             _top 0049                       ?_HMI_SetBar 0001  
              ??_Event_TestButton 0079                      _Word_GetPair 508E  
                             prod 000FF3                       ?_HMI_Render 0001  
             MXK_SwitchTo@pModule 0067                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 0070  
              Console_MakeField@y 0071                        _TXSTA1bits 000FAD  
                    Console_Tab@c 006F                      Console_Tab@i 006E  
             LCD_DrawField@pField 0072                      Console_Tab@t 006D  
                    ___flmul@aexp 007B                      ___flmul@bexp 0080  
                      i2_delay_us 4E1A              Port_Set@TypeRequired 0082  
                    ___flmul@sign 007A                      ___flmul@temp 0085  
                    ___flmul@prod 0081                 Console_FormFeed@x 0062  
               Console_FormFeed@y 0063               LCD_DrawField@pPoint 0074  
                  ?_LCD_DrawField 0072             Port_SetPinType@Output 008A  
                 Port_SetPin@Type 0073                   Port_SetPin@pPin 0071  
                   ?_Byte_GetPair 0069                   __end_of_LED_Set 4C38  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 3968  
                    ___fltol@exp1 00A8                      _Word_SetPair 4F48  
                            l1000 4B4E                              l1010 3D6E  
                            l1004 493C                     ?_Byte_GetZone 0060  
                            l1005 4962                              l1200 3C02  
                            l1040 293A                              l1201 3C4A  
                            l1009 3D7A                              l1041 2940  
                            l1202 3C5E                              l1042 2946  
                            l1043 294C                              l1204 3C82  
                            l1036 2A48                              l1044 2952  
                            l1205 3C6E                              l1045 2958  
                            l1037 2934                              l1062 1E6E  
                            l1207 3C90                              l1063 1E9C  
                            l1047 29D6                              l1056 1D44  
                            l1153 2388                              l1057 1EBC  
                            l1146 4478                              l1082 3A6C  
                            l1058 1D4A                              l3003 28EA  
                            l1059 1D6E                              l3004 291C  
                            l1084 3A74                              l3021 155C  
                            l1077 3A40                              l1158 4FEE  
                            l3030 30E4                              l3022 15A4  
                            l3031 30D2                              l3023 15DA  
                            l1079 3A4C                              l3024 1756  
                            l3033 3102                              l3025 1720  
                            l3034 319C                              l3043 34DC  
                            l3019 1514                              l2420 2756  
                            l3045 352A                              l3061 2522  
                            l2421 27B0                              l2413 26E4  
                            l3070 3308                              l2270 4CB0  
                            l2422 275C                              l2414 2696  
                            l2406 267E                              l2334 36AA  
                            l1630 321A                              l3039 3B88  
                            l3047 3564                              l3063 254C  
                            l2271 4C90                              l2415 26AA  
                            l2407 268E                              l1631 326A  
                            l2191 21D4                              l2600 40DC  
                            l3048 3554                              l2416 270E  
                            l2408 26B2                              l2336 36C2  
                            l1632 3254                              l2192 21FA  
                            l2184 20B8                              l2601 40E6  
                            l2602 40F4                              l2338 3744  
                            l1730 4EEA                              l2186 2160  
                            l2283 0AD2                              l1627 32AA  
                            l2187 2172                              l2276 4EB4  
                            l1724 4F8E                              l1732 4F0A  
                            l1628 32A0                              l2188 2184  
                            l3069 33A0                              l1629 3232  
                            l2189 2196                              l1726 4FB6  
                            l2279 4EC4                              l1735 53BC  
                            l2632 513E                              l2625 2FAC  
                            l2626 2FE0                              l2627 301E  
                            l1827 2C2A                              l2900 0962  
                            l2628 305C                              l1828 2C46  
                            l2830 4A26                              l2902 0978  
                            l2663 3650                              l2655 35C0  
                            l2840 4D66                              l2912 09E8  
                            l2904 0982                              l2664 3644  
                            l2833 4A4E                              l2593 408E  
                            l2657 362C                              l1873 5086  
                            l2834 4A58                              l2594 409E  
                            l2930 0D82                              l2666 366C  
                            l2658 361C                              l2843 4D86  
                            l2931 0D7E                              l2844 4D90  
                            l2596 40BC                              l2940 0E9C  
                            l2916 0A0E                              l2860 19C0  
                            l2780 4162                              l2829 4A2E  
                            l2597 40B4                              l2933 0DC8  
                            l2917 0A16                              l2909 09A2  
                            l2781 4170                              l2950 0F0A  
                            l2926 0D42                              l2918 0A18  
                            l2870 0724                              l2862 19F2  
                            l2839 4D6E                              l2943 0ED2  
                            l2935 0DF0                              l2927 0D3E  
                            l2863 1A94                              l2952 0F4E  
                            l2944 0EB4                              l2936 0E9E  
                            l2960 03D6                              l2864 1A6A  
                            l2776 412E                              l2953 0F72  
                            l2937 0E4E                              l2881 0848  
                            l2961 03D2                              l2865 1B3E  
                            l2777 4122                              l2954 0F9C  
                            l2938 0E76                              l2882 0826  
                            l2874 0770                              l2962 03E6  
                            l2955 0FA8                              l2891 0890  
                            l2883 0834                              l2875 076C  
                            l2971 0604                              l2859 19D4  
                            l2956 0FAA                              l2892 0894  
                            l2884 0838                              l2980 0680  
                            l2972 05E6                              l2964 0416  
                            l2877 07CC                              l2869 0728  
                            l2981 069E                              l2965 0412  
                            l2878 0790                              l2966 0426  
                            l2990 284A                              l2895 092E  
                            l2887 08A6                              l2983 06C2  
                            l2967 0444                              l2888 086C  
                            l2984 06E0                              l2992 285C  
                            l2897 093E                              l2993 2850  
                            l2978 063C                              l2995 289A  
                            l2996 2882                              l2988 281C  
                            ?_exp 00B7                              l2989 282C  
                            ?_log 00AF                              l2998 28CC  
                            l2999 28C0                    ??_Console_Init 0060  
                            _ADON 007E10             Port_SetPinType@pInput 0086  
                            ?_pow 00C2                              STR_1 FFFC  
                            STR_2 FF8B                              STR_4 FFD2  
                            STR_5 FFB1                              STR_7 FF77  
                            STR_8 FF2E                              STR_9 FF9E  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 0018                              _LATG 000F8F  
             __end_of_GetPortPORT 4078                              _PIR1 000F9E  
                            _PIR2 000FA1                              _PIR3 000FA4  
             __end_of_GetPortTRIS 3F68                              u9530 4318  
                            u9604 4A78                              u9700 4520  
                            u9605 4A74                              u9550 4362  
                            u9614 4AA0                              u9615 4A9C  
                            u9537 430E                              u9634 3EA4  
                            u9570 46EE                              u9635 3EA0  
                            u9555 435E                              u9715 54F8  
                            _SPI1 02C8                              u9820 40C0  
                            u9644 3ECC                              u9716 54FA  
                            _SPI2 0185                              u9645 3EC8  
                            u9750 4F3A                              u9690 451C  
                            u9770 4938                              u9755 4F36  
                            u9860 4A32                              u9780 495A  
                            u9950 37DC                              _TMR0 000FD6  
                            u9890 4D72                              _gISR 0108  
              Event_DIPSwitch@Bar 007A                     ??_Byte_GetBit 0063  
              SPI_MaxSpeed@pInput 006F                     ?_Byte_SetByte 0060  
                   ?_Byte_SetPair 006B                   __end_of_SPI_DCS 5120  
                            _main 2072                              _mode 013A  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 3746                              _test 011C  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     ?_Byte_SetZone 0060  
                            btemp 0051                              _zero 004E  
                            exp@x 00B7                              log@x 00AF  
                   ??_Byte_SetBit 0064                              pow@x 00C2  
                            pow@y 00C6                __size_of_LCD_Reset 0050  
                            prodh 000FF4                              prodl 000FF3  
                            start 14AA                __size_of_LCD_Write 0020  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
                 ?_SPI_DisableISR 0060               HMI_SetButton@pValue 0066  
                      _Cliff_Left 0144                     Console_Init@x 0062  
                   Console_Init@y 0063                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FE83                   __end_of_InitADC 4CC8  
            Set_Rotation@rotation 0066                     ??_Init_Timer0 0060  
          __size_of_HMI_SetButton 007A            __size_of_HMI_SetNumber 0026  
                     ?_ISR_Enable 0001                             ??_exp 00BB  
                           ??_log 00B3                             ??_pow 00CA  
    __size_of_Console_ClearCursor 0030                  __end_of_LCD_Fill 4C80  
                __end_of_LCD_Init 2BC6                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 4912  
                    _BAUDCON1bits 000F7E                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 238A                             l14016 0F9C  
                           l13138 3C82                             l13076 37DC  
                           l12438 3094                             l14206 499E  
                           l12552 44E4                             l12546 44D8  
                           l15212 45B0                             l15240 2366  
                           l15056 2AF8                             l15218 45BC  
                           l14434 3A44                             l15066 2B8A  
                           l13810 4D12                             l14428 3A38  
                           l13812 4D24                             l13670 4864  
                           l14640 1720                             l13672 4876  
                           l13762 2C2A                             l14572 550E  
                           l14486 4470                  __end_of_HMI_Poll 47A4  
                           l13678 489A                             l15480 369A  
                           l14828 1D66                             l14748 4C64  
                           l14942 2712                             l15486 36B2  
                           l14864 4FC4                             l15496 3730  
                           l14786 244E                             _I2C1T 003C  
                           _I2C2T 01C2                     ___fltol@sign1 00A7  
                 __end_of___fladd 0A34                             ?_main 0001  
                 __end_of___fldiv 0FC6                   __end_of___awdiv 40FE  
                 __end_of___flneg 5150                             _ADRES 000FC3  
                           ?_itos 006C                             STR_11 FF62  
                           STR_20 FFD0                             STR_12 FFFC  
                           STR_13 FFC2                             STR_14 FEDD  
                           STR_23 FFDE                             STR_15 FF07  
                           STR_16 FFF3                             STR_25 FF4A  
                           STR_18 FFFC                             STR_19 FFF8  
                           STR_27 FFE9                   __end_of___flmul 06F6  
                 __end_of___flsub 4D10                   __end_of___fltol 367E  
                 _Event_DIPSwitch 5252                   __end_of___lldiv 4182  
                           u10120 07FC                             u10130 080C  
                           u11010 2C8C                             u10300 0986  
                           u10140 080E                             u11030 51CC  
                           u11104 42CE                             u12000 4C7C  
                           u11105 42CA                             u10330 099E  
                           u10170 0850                             u11050 4D42  
                           u11035 51C8                             u10500 05A8  
                           u11310 0F5C                             u12030 24EC  
                           u11320 0F80                             u10505 059E  
                           u11410 34FC                             u10380 09F4  
         __size_of_HMI_LeftSwitch 0014                   ___awdiv@divisor 0062  
                           u10550 0638                             u10710 3656  
                           u12230 2744                             u11280 0F06  
                           u12160 31F8                             u10490 0432  
                           u11370 30F0                             u11418 3500  
                           u12330 1A4C                             u12090 1EAA  
                           u12250 27BA                             u12170 320C  
                           u11700 44B6                             u10580 068E  
                           u10820 28D6                             u10740 4132  
                           u12180 3246                             u11605 11CE  
                           u12270 4EAA                             u10590 06AC  
                           u10670 35DE                             u11470 49B6  
                           u11535 0FE8                             u10920 489A  
                           u14008 2118                             u11545 0FFA  
                           u14009 212C                             u11810 15AC  
                           u12610 4608                             u11650 3AA6  
                           u14018 2138                             u10675 35D4  
                           u11555 100C                             u14019 214C  
                           u11820 15AE                             u11660 3AAE  
                           u11565 1024                             u10870 3BB0  
                           u12390 2B8A                             u11575 111E  
                           u11585 1172                             u11595 11A0  
                           u10980 4E8A                             u10878 3BB4  
                           u11918 3954                             u11695 4486  
                           u11928 2E5A                             u10985 4E86  
                           u11929 2E6E                             u12761 3688  
                           u10995 2BE6                             u12790 3730  
                           u11978 2F60                             u13938 5036  
                           u13939 504A                             _INDEX 0036  
                           u13988 20D8                             u13989 20EC  
                           u13998 20F8                             u13999 210C  
                 __end_of___lwdiv 4A62                             _MASKS FC93  
                 __end_of___lwmod 4D9A                             i2l430 3980  
                           i2l432 39A6                             i2l433 39D0  
                           i2l427 39F6                             i2l732 4432  
                           i2l733 442C                             i2l832 4E1C  
                           i2l781 516E                   ___awdiv@counter 0064  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0014  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                             _T_VAR 0132  
                ??i2_Byte_GetPair 000D                     ?_FunctReadADC 0060  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 0076  
                  __CFG_FCMEN$OFF 000000                             _PortA 02F1  
                           _PortB 01A4                             _PortC 01AE  
                           _PortD 019A                             _PortE 0190  
                           _PortF 01B8                             _PortG 02E7  
         __end_of_Port_SetPinType 2072                             _Steps 0138  
                 _ADC_Initialised 0038                    ??_Byte_GetPair 006C  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 0075  
                 __end_of_dpowers FC93                    ??_Byte_GetZone 0065  
                           _count 0126                             _floor 3098  
                           _ldexp 34BC                    Button_Poll@Pin 0083  
                           _frexp 3B58                             _errno 011A  
        __size_of_Set_Addr_Window 009A               __end_of_Console_Tab 3DC0  
                __end_of_MXK_Init 2E48                             _stack 0228  
            i2Byte_GetPair@pInput 000A                             _putch 5534  
                           _total 0029                  __end_of_SPI_Init 03A4  
                __end_of_SPI_Send 45A2                        _BumpSensor 0148  
           __end_ofi2_MXK_Release 55A2                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 4A0E  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 0063  
                  ??_Byte_SetPair 006F                             pow@yi 00D3  
                  ??_Byte_SetQuad 006F                             plusw1 000FE3  
                           plusw2 000FDB                    ??_Byte_SetZone 0066  
                           status 000FD8                             wtemp6 0052  
                 _Configure_GPIOs 4804              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 5374  
                     _Cliff_FLeft 0146               __size_of_LED_Toggle 0040  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
                     exp@exponent 00BF                        _Event_NULL 1404  
     __size_of_Port_CheckPairType 0060                       ldexp@newexp 00B3  
                     _Cliff_Right 0145               __size_of_HMI_SetBar 000A  
                 __initialization 3AB8               __size_of_HMI_Render 0036  
                      _Found_Flag 002D                       log@exponent 00B3  
             __end_of_Byte_GetBit 51DA                     _Current_Dist1 013E  
                   _Current_Dist2 013C                      __end_of_main 220E  
                    __end_of_itos 3804              HMI_SetButton@reindex 0062  
                    SPI_Send9@dat 0142               __end_of_Byte_SetBit 4AB4  
                __end_of_InitList FC69       __size_of_Port_CheckQuadType 0050  
                __end_of_Mode_Set 54FC       __size_of_Port_CheckPortType 0040  
                     HMI_Render@a 0068                            ??_main 00DB  
                          ??_itos 0070               __end_of_Init_Timer0 5408  
        __size_of_FunctInitButton 0076           _Console_MakeField$10974 006E  
                   __activetblptr 000003                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 4B04                 Port_SetPin@pValue 0072  
                       ??_LED_Set 0075                 _MXK_InitDIPSwitch 5408  
                  ??_FunctReadADC 0062                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 52DE                       _GetPortPORT 3FF0  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 3EE0  
                 ??_LCD_DrawField 007C        __end_of_PortProperty_Valid 4744  
                __end_of_Port_Set 1270                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0054               __end_of_Button_Init 3968  
             __end_of_Button_Poll 2F76                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 427C                            _ADCON0 000FC2  
                          _ADCON1 000FC1                      ??_ADCAverage 00D9  
                       ??_SPI_DCS 0062                            ?_floor 00A9  
                          ?_ldexp 00AF                            ?_frexp 0060  
                      _Low_Sensor 01F5                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 5278  
          Port_SetQuadType@Output 009A                            _ANCON0 000FC1  
                ___awdiv@dividend 0060                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
                  _Init_Pos_Array 367E                            _GODONE 007E11  
                _Console_FormFeed 44CA            Port_SetQuadType@pInput 0096  
                          i2l1630 3422                            i2l1631 346E  
                          i2l1632 345A                            i2l1730 5002  
                          i2l1627 34AA                            i2l1732 5022  
                          i2l1628 34A0                            i2l1629 3438  
                          i2l1590 145E                    __CFG_WDTEN$OFF 000000  
             __size_of_ISR_Enable 000A                            i2l9622 4E1C  
                          i2l9624 4E2C                            _RCREG1 000FAF  
                          _RCSTA1 000FAC            __end_of_LCD_Word_Write 538E  
                  _Timer0_Restart 5550                            _SPBRG1 000FB0  
             ??_MXK_InitDIPSwitch 009B                            _TRISA2 007C92  
                          _TRISA3 007C93                            _TRISD5 007CAD  
                          _TRISD7 007CAF                            _TXREG1 000FAE  
                __end_of___xxtofl 292E                         ??_InitADC 0060  
                  i2_MXK_SwitchTo 4FF0                            _TXSTA1 000FAD  
                 Byte_GetBit@pBit 0062                        _Reset_High 53D8  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077                  __end_of_delay_ms 48BE  
                    LED_Init@pLED 008D                  __end_of_delay_us 4D56  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
                      _Timer0_ISR 522A          __size_of_Console_NewLine 007C  
               Timer2_Init@DIVIDE 007A                    __CFG_XINST$OFF 000000  
                          _OutSeg 445C          __size_of_HMI_InitButtons 0006  
                          ___flge 2F76                        _Motor_Step 31AE  
         __end_of_Event_DIPSwitch 5278                         ??___fladd 0093  
                          ___wmul 51DA                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 0064  
                       ??___flneg 008B                    __CFG_STVREN$ON 000000  
                      _Robot_Init 54D8                            _change 00F5  
                       ??___flmul 0076                            _lMotor 00E8  
                       ??___flsub 00A7                         ??___fltol 00A3  
                       ??___lldiv 0068                            _lQueue 00DF  
                      _TestButton 02DD                        _Robot_Stop 529E  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 197A  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0033  
            __end_of_Console_Init 460C                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 0018                            clear_0 3B12  
                          clear_1 3B24                            clear_2 3B30  
                          clear_3 3B3C                            clear_4 3B48  
              __end_of_ADCAverage 0D10                  ___awdiv@quotient 0066  
                      Port_Init@i 00A5                 __end_of_MXK_Queue 5534  
      __end_ofHMI_SetButton@F7213 FCA0                            _printf 2672  
       __end_of_MXK_InitDIPSwitch 5420                            main@up 00DD  
                  HMI_SetButton@v 0067                            floor@i 00AD  
                          floor@x 00A9            HMI_SetSegments@pString 0061  
                     _Console_Tab 3D2C               LCD_Word_Write@value 0065  
                    __pdataCOMRAM 0043                __size_of_Port_Init 0174  
                   ??_Port_GetPin 0063          Port_CheckPortType@Output 0099  
                 ??i2_Port_SetPin 0014                      __mediumconst FBB6  
     __end_ofTimer2_Init@PRESCALE FCA3          Port_CheckPortType@pDrive 0098  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 0096  
                   ??_Port_SetPin 0073                         ??_reverse 0064  
           Console_MakeField@Fill 0282                  ?_Port_SetPinType 0086  
                          putch@c 0074            __end_of_Init_Pos_Array 3746  
                  ?_HMI_SetNumber 0076                    i2_Word_GetPair 5150  
         __end_of_Configure_GPIOs 4862                  ??_MXK_TestButton 0066  
          __end_of_Timer0_Restart 555C                     Set_Rotation@m 0065  
                    ?_MXK_Release 0001                        ___flge@ff1 0060  
                      ___flge@ff2 0064                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 5026                      ___xxtofl@arg 006A  
                __end_ofexp@coeff FEAB                      i2delay_us@us 0001  
                    ___xxtofl@exp 0069                      ___xxtofl@val 0060  
                __end_oflog@coeff FECF                   ?_LCD_Word_Write 0065  
                      __accesstop 0060           __end_of__initialization 3B4E  
                       ?_LCD_Fill 0069                         ?_LCD_Init 0001  
                    _Cliff_FRight 0147                     SPI_Init@pMode 0092  
                      ___flneg@f1 0087                       _Byte_GetBit 51AE  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 5568  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 0068  
                       ?_HMI_Poll 0001                      eval_poly@res 00AB  
                   ___rparam_used 000001                        ___fltol@f1 009F  
                     _Byte_SetBit 4A62                     __end_of_MASKS FC9C  
                  _PortA_Property FEDB                       ?_Event_NULL 0001  
                       LCD_Fill@i 006B                         LCD_Fill@j 006C  
                       LCD_Init@i 0097                    __pcstackCOMRAM 0001  
                  _PortB_Property FED9               __size_ofi2_delay_us 0040  
                    __pidataBANK0 55A2                      __pidataBANK1 5438  
                     _Init_Timer0 53F0               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 5374                   Console_Render@x 008A  
                 Console_Render@y 008B               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FC69  
            __end_of_Byte_GetZone 4370                     __end_of_floor 31AE  
                   __end_of_ldexp 35A0                     __end_of_frexp 3BF6  
             FunctReadADC@channel 0060                    _PortC_Property FED7  
                   __end_of_putch 5542                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 2D0C               __end_of_Timer0_Stop 558A  
                       ?_SPI_Init 008D                         ?_SPI_Send 0060  
                     _Button_Init 38B8                 Port_SetType@pType 009C  
                     _Button_Poll 2E48              __end_of_Byte_SetByte 5526  
            __end_of_Byte_SetPair 52FE                    _HMI_LeftSwitch 54B0  
                  _PortD_Property FED5              __end_of_Byte_SetQuad 531E  
                    ??_LED_Toggle 0078                      ??_HMI_GetBar 0060  
            __end_of_Byte_SetZone 3EE0                    _HMI_DownSwitch 5474  
                   SPI_Send@pData 0062             __end_of_MXK_DIPSwitch 5460  
                    ??_HMI_SetBar 0060                      ??_HMI_Render 0068  
                  _PortE_Property FED3          __size_of_HMI_SetSegments 009C  
          __end_ofi2_Word_GetPair 5180                    _PortF_Property FED1  
                 ?_Init_Pos_Array 0001           Port_CheckQuadType@Pair1 0093  
         Port_CheckQuadType@Pair2 0094          MXK_BlockSwitchTo@pModule 0067  
                         ??_floor 00AD                           ??_ldexp 00B5  
                         ??_frexp 0066                 ??_FunctInitButton 00A8  
               _Console_Backspace 4B04                   ?_Timer0_Restart 0001  
                         ??_putch 0074          __size_of_HMI_RightSwitch 0014  
             _Console_ClearCursor 50C0                 __end_of_ToSegment 14F4  
                  _PortG_Property FECF                        __pbssBANK0 00DF  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 4F48           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                __size_of_eval_poly 0100  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 53D8  
       __size_of_Event_TestButton 0034           __size_of_Port_TogglePin 002E  
                      ??_LCD_Fill 006B                        ??_LCD_Init 0095  
             __end_of_Port_SetPin 38B8            __end_of_PortA_Property FEDD  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 0060  
                      ??_LED_Init 008D                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
                      ??_HMI_Init 00A8                        ??_HMI_Poll 0084  
                   ?_Timer2_Clear 0001           Port_CheckPairType@Props 008D  
          __end_of_PortB_Property FEDB                 __end_of_Port_Init 24FE  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 0088  
              __end_of_LED_Toggle 4E1A                __end_of_HMI_GetBar 5590  
        LCD_FillRectangle@pColour 0069              __end_of_FunctReadADC 4ED4  
             ??_Console_Backspace 0062                 Set_Addr_Window@xe 0066  
               Set_Addr_Window@ye 0067                 Set_Addr_Window@xs 0068  
               Set_Addr_Window@ys 0065                           ?_OutSeg 0063  
              Byte_SetPair@pInput 006B                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 006E                           ?___flge 0060  
              __end_of_HMI_SetBar 557C            __end_of_PortC_Property FED9  
              Word_GetPair@pInput 006C                __end_of_HMI_Render 4FF0  
                  ??_Set_Rotation 0065                         ?_Port_Set 006F  
                         ?___wmul 0060                       ?_Robot_Init 0001  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 0065  
                    ??_ISR_Enable 0060                       ?_Robot_Stop 0001  
    __size_of_Console_ResetCursor 001C              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 54C4            __end_of_PortD_Property FED7  
                         _ADC_AN0 01D8                           _ADC_AN1 01D3  
                         _ADC_AN2 01CE                           _ADC_AN3 01C9  
                      ??_MXK_Init 00A6                 Port_GetPin@pInput 0060  
               _Console_MakeField 3A12                 ??_Console_NewLine 0060  
          __end_of_HMI_DownSwitch 5488                        ??_SPI_Init 0093  
          Event_TestButton@pState 0079                        ??_SPI_Send 0063  
                         ?_printf 0075                 ??_HMI_InitButtons 0060  
      __size_of_MXK_InitDIPSwitch 0018            __end_of_PortE_Property FED5  
             Console_Render@F6956 01E5                ?_Console_MakeField 0065  
                         _COUNTER 0031                   ??_HMI_SetButton 0060  
            __end_of_HMI_UpSwitch 549C                           _LED_Set 4BF0  
         _Console_IncrementCursor 4912                         ?___xxtofl 0060  
          __end_of_PortF_Property FED3                       _gBackcolour 00EC  
                 ??_HMI_SetNumber 0078                         _I2C1_Done 0117  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0114  
                       _I2C1_More 0111                         _I2C2_More 010E  
                       ?_delay_ms 0060         __end_of_Console_Backspace 4B54  
                       ?_delay_us 0060               __size_of_Event_NULL 0002  
      __end_of_MXK_InitTestButton 5438                           _SSP1ADD 000FC8  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
          __end_of_PortG_Property FED1               ??_Console_MakeField 0067  
                         _SPI_DCS 50F0              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001          ?_InitSerialCommunication 0001  
              eusartSend@sendChar 0060              i2Byte_GetZone@Offset 0008  
              __end_of_ISR_Enable 5572                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                 Event_TestButton@j 00EE  
                      ??_Mode_Set 0060                    ??_Timer2_Clear 0060  
                         _Font5x7 FCA3              i2Byte_GetZone@pChunk 0004  
                         _InitADC 4C80              i2Byte_GetZone@pInput 0001  
            SPI_DisableISR@pInput 0060                     ?_Port_GetQuad 0060  
                 Byte_SetBit@pBit 0062              Port_TogglePin@pInput 0074  
           __end_ofi2_Byte_SetBit 4BF0                           __Hparam 0000  
               Port_GetQuad@pQuad 0062                       _Timer2_Init 2BC6  
                         __Lparam 0000                       _Timer0_Stop 5584  
           __size_of_Console_Init 006A                           OutSeg@a 0039  
 __end_ofPortProperty_Valid@F6830 FC89                     LCD_Write@mode 0063  
                 __size_of_OutSeg 006E                       _Motor_Count 002B  
                      ??_Port_Set 0072                   __size_of___flge 0122  
       __end_of_Console_MakeField 3AB8                 _Console_PrintChar 292E  
                         ___fladd 06F6                     ?_Port_SetType 009A  
                         _gCursor 0043                           ___fldiv 0D10  
                         ___awdiv 4078                           ___flneg 5120  
           ??_Console_ClearCursor 0060                           ___flmul 03A4  
                         ___flsub 4CC8                           ___fltol 35A0  
                         _lBuffer 0318                           ___lldiv 40FE  
                 __size_of___wmul 0028                           ___lwdiv 4A0E  
                         ___lwmod 4D56                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 4536                ?_Console_PrintChar 0001  
                         __pcinit 3AB8                 __end_of_eval_poly 33BC  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                       _CCW_Count 0124                           __ptext0 2072  
                         __ptext1 54D8                           __ptext2 529E  
                         __ptext3 550A                           __ptext4 2D0C  
                         __ptext5 238A                           __ptext6 1B50  
                         __ptext7 4D9A                           __ptext8 0FC6  
                         __ptext9 5518                        _eusartSend 550A  
                 __size_of_printf 0168                           _average 00E2  
                       _T0CONbits 000FD5                 i2MXK_SwitchTo@CUR 0007  
                         _countOn 01F3                           _dpowers FC89  
                       _T2CONbits 000FCA            Init_Pos_Array@position 008E  
                   LED_Set@pValue 0074                      __size_of_exp 0274  
                    __size_of_log 0174               __size_of_Reset_High 0018  
           Event_DIPSwitch@pState 0079                      __size_of_pow 01D6  
                      ??___xxtofl 0064                      ?_GetPortPORT 0060  
                    ?_GetPortTRIS 0060               ??_Console_PrintChar 0070  
                     _Port_GetPin 4F0E                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 01E1               LCD_DrawRectangle@p4 01DD  
                    ??i2_delay_us 0003                        ??_delay_ms 0062  
                      ??_delay_us 0062                           _reverse 49BA  
                       _DIPSwitch 02D3               __size_of_Timer0_ISR 0028  
                     _Port_SetPin 3804                    LCD_DrawField@i 0082  
                       _LCD_Reset 4AB4               __size_of_Motor_Step 010E  
                       _LCD_Write 52BE              __size_of_MXK_Dequeue 0034  
                      delay_ms@ms 0060              end_of_initialization 3B4E  
             __size_of_Robot_Init 0012                           exp@sign 00C1  
                      delay_us@us 0060               __size_of_Robot_Stop 0020  
               ??_HMI_SetSegments 0063           Console_PrintChar@pInput 0073  
                    _Console_Init 45A2              __size_of_MXK_Release 0018  
      __end_of_Port_CheckPairType 4804                           itos@Out 0074  
                  ??_Port_GetQuad 0063                _PortProperty_Valid 46DC  
              Byte_SetQuad@pInput 006B                SPI_MinSpeed@pInput 006F  
                       i2u1391_48 523E                Byte_SetQuad@pValue 006E  
           __size_of_Byte_GetPair 001C                   ___lldiv@divisor 0064  
           __size_of_Byte_GetZone 007A                 ??_HMI_RightSwitch 0066  
                         pow@sign 00D2                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 2A7E                    ??_Port_SetType 009D  
      __end_of_Port_CheckQuadType 4BA4                           printf@c 0080  
                         printf@f 0075                    Port_Init@pPort 00A2  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0020  
          Console_MakeField@Index 0069                  _ADCAverage$15790 0304  
                _ADCAverage$15791 0308                  _ADCAverage$15792 030C  
                _ADCAverage$15793 0310                  _ADCAverage$15794 0314  
                _ADCAverage$15789 0300                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 006F  
           __size_of_Byte_SetQuad 0020        __end_of_Port_CheckPortType 4DDA  
           __size_of_Byte_SetZone 008E                __end_ofi2_delay_us 4E5A  
              Button_Init@pInitIO 009F                 ?_Port_SetQuadType 0096  
                     _gForecolour 01F7         ??_Console_IncrementCursor 0064  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
                      _timercount 011E                ??_Port_SetQuadType 009A  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 0066  
                     ___fladd@grs 009E             Console_Render@lCursor 0086  
 __end_of_InitSerialCommunication 533C                         _MXK_Queue 5526  
                __CFG_CPUDIV$OSC1 000000                     ___xxtofl@sign 0068  
                Byte_GetZone@pMax 0062        __size_of_Console_Backspace 0050  
                       _TRISCbits 000F94                       _Square_Dist 0130  
                 _Set_Addr_Window 3C92                    SPI_Init@pClock 008D  
                ??_LCD_Word_Write 0067                       ___fldiv@grs 0073  
                     ___fldiv@rem 006D             __end_of_LCD_DrawField 4200  
                  Port_Set@pInput 006F                    SPI_Init@pInput 0093  
            ??_PortProperty_Valid 0073                    Port_Set@pValue 0071  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 3E52  
                      ?_LCD_Write 0063                      _Byte_GetPair 5358  
              HMI_SetButton@F7213 FC9C                      _Byte_GetZone 42F6  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 0080  
               LCD_DrawField@ymax 0081                    _Port_TogglePin 5180  
                _Event_TestButton 505A                       ___flmul@grs 007C  
           __size_of_FunctReadADC 003C              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 5518                      _Byte_SetPair 52DE  
                    _Byte_SetQuad 52FE           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 3E52              Port_SetPinType@pType 0089  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 0060  
                   ?_SPI_MaxSpeed 006F                 __size_of_LCD_Fill 0048  
                    ??_Event_NULL 0060                 __size_of_LCD_Init 0148  
               __size_of_LED_Init 0054                     ?_SPI_MinSpeed 006F  
           __end_ofi2_Timer0_Stop 559C                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 017C                 __size_of_HMI_Poll 0060  
                   ?i2_Motor_Step 0001                      ?_Init_Timer0 0001  
      __size_of_Console_MakeField 00A6                    __end_of_OutSeg 44CA  
                  __end_of___flge 3098             __size_of_HMI_UpSwitch 0014  
                       _Close_Pos 0128                    __end_of___wmul 5202  
           __end_of_HMI_DIPSwitch 5474                     __pidataCOMRAM 54FC  
                    ?_Button_Init 009B                   _FunctInitButton 4370  
                    ?_Button_Poll 007B                       ?_eusartSend 0001  
                       _Bus_State 004B               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA                  ??_Init_Pos_Array 008C  
               __size_of_MXK_Init 013C                         _BumpState 012C  
                      floor@expon 00B1              __end_of_Timer2_Clear 5584  
                  __end_of_printf 27DA                 __size_of_SPI_Init 03A4  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 006C  
                ??_Timer0_Restart 0060                Port_SetType@Output 009F  
             start_initialization 3AB8                        ?_MXK_Queue 0060  
                      eval_poly@d 00A3                        eval_poly@n 00A5  
                      eval_poly@x 009F                        ldexp@value 00AF  
                    _FunctReadADC 4E98          PortProperty_Valid@Errors 0075  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 4966  
              Port_SetType@pInput 009A                      _Current_Dist 0140  
                     __end_of_exp 1768                       __end_of_log 2672  
                     _ADC_Reading 012A                       __end_of_pow 1B50  
                      HMI_Init@in 00A8               HMI_SetNumber@pInput 0076  
           __end_ofi2_Port_SetPin 3A12                __end_of_Event_NULL 1406  
          __end_of_Port_TogglePin 51AE                     ?_Word_SetPair 006F  
               Byte_SetBit@pInput 0060                    ??_MXK_SwitchTo 0066  
               Byte_SetBit@pValue 0063                ?_LCD_FillRectangle 0069  
             _Console_ResetCursor 533C       PortProperty_Valid@pPinDrive 0071  
            MXK_BlockSwitchTo@CUR 0066          PortProperty_Valid@pInput 006F  
                   i2_MXK_Release 559C                        frexp@value 0060  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 019E  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1270               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Console_NewLine 4200  
                  ??_SPI_MinSpeed 0071                      _HMI_UpSwitch 5488  
                       _Reset_Low 53C0                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 5590                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 0150                         _gCharSize 01ED  
                Timer2_Init@INDEX 00F1                         OutSeg@cur 003B  
                  ??i2_Motor_Step 0015                          ??_OutSeg 0064  
                       OutSeg@out 0067           __size_of_Console_Render 01B6  
                    ??_Motor_Step 0074                          ??___flge 0068  
              Byte_SetZone@Offset 0069                      ??_Robot_Init 0061  
                        ??___wmul 0064                      ??_Robot_Stop 0061  
            ?_Console_ResetCursor 0001                         _Port_Init 238A  
                     __pdataBANK0 00F5                       __pdataBANK1 01E5  
               __size_of_Port_Set 02AA                Byte_SetZone@pChunk 0063  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 0060  
              Byte_SetZone@pValue 0065                     Mode_Set@pMode 0060  
                        ??_printf 0079           __end_of_Set_Addr_Window 3D2C  
        Port_CheckQuadType@Output 0095                         _gLineSize 01E9  
        Port_CheckQuadType@pDrive 0092                         ___fladd@a 008F  
                       ___fladd@b 008B                    ??_Word_GetPair 006F  
        Port_CheckQuadType@pInput 008F              __end_of_Port_GetQuad 4E98  
                       ___fldiv@a 0064                         ___fldiv@b 0060  
       __end_of_LCD_FillRectangle 49BA                       __pbssBIGRAM 0318  
                        ?_LED_Set 0074                         ___flmul@a 0072  
                       ___flmul@b 006E                       __pbssCOMRAM 0029  
                       ___flsub@a 00A3                         ___flsub@b 009F  
              __end_of_Reset_High 53F0                     __pcstackBANK0 0060  
                   __pcstackBANK3 0300                        itos@Length 0072  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 0154  
              __end_of_Timer0_ISR 5252              __size_of_GetPortPORT 0088  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 0088  
            __end_of_Port_SetType 1D1E                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 005C                 __size_of_delay_us 0046  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Step 32BC  
           Timer2_Init@pFrequency 006D                    ?i2_MXK_Release 0001  
              __end_of_Robot_Init 54EA                __end_of_Robot_Stop 52BE  
                       _exp$15797 00BB               Init_Pos_Array@F7084 0200  
                        ?_InitADC 0001          Port_CheckPairType@Output 008C  
             __size_of_eusartSend 000E                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 0089          Port_CheckPairType@pInput 0086  
                  reverse@tempVar 0064                _MXK_InitTestButton 5420  
                      ?_Reset_Low 0001            __size_of_MXK_DIPSwitch 0014  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 010B           __size_of_MXK_TestButton 0014  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 43E6  
                ??_HMI_DownSwitch 0066  __size_of_InitSerialCommunication 001E  
                       __pintcode 1408                     __pmediumconst FBB6  
           ??_Console_ResetCursor 0060                          ?___fladd 008B  
                        ?___fldiv 0060                          ?___awdiv 0060  
                       __ptext100 5358                         __ptext101 42F6  
                       __ptext110 3098                         __ptext102 52FE  
                        ?___flneg 0087                         __ptext111 3B58  
                       __ptext103 3E52                         __ptext120 0D10  
                       __ptext112 27DA                         __ptext104 45A2  
                       __ptext121 4078                         __ptext113 35A0  
                       __ptext105 0A34                         __ptext130 445C  
                       __ptext122 5278                         __ptext114 2F76  
                       __ptext106 197A                         __ptext131 4536  
                       __ptext123 3746                         __ptext115 32BC  
                       __ptext107 24FE                         __ptext140 538E  
                       __ptext132 4E98                         __ptext124 49BA  
                       __ptext116 03A4                         __ptext108 14F4  
                       __ptext141 43E6                         __ptext125 4D56  
                       __ptext117 4CC8                         __ptext109 34BC  
                       __ptext142 4BA4                         __ptext134 522A  
                       __ptext126 4A0E                         __ptext118 06F6  
                       __ptext143 4FF0                         __ptext135 33BC  
                       __ptext127 3BF6                         __ptext119 5120  
                       __ptext144 4E1A                         __ptext136 5596  
                       __ptext128 1270                         __ptext145 559C  
                       __ptext137 555C                         __ptext129 4FBA  
                       __ptext146 5542                         __ptext138 3968  
                       __ptext147 0000                         __ptext139 5150  
                       _pShiftVal 00E6                          ?___flmul 006E  
                        ?___flsub 009F                          ?___fltol 009F  
                        ?___lldiv 0060                        ?_Port_Init 00A0  
                        ?___lwdiv 0060                          ?___lwmod 0067  
             ?_MXK_InitTestButton 0001                 ?_Console_FormFeed 0001  
               _GetPortProperties 3F68                         _pow$15795 00CA  
                       _pow$15796 00CE       __end_ofTimer0_Init@PRESCALE FC79  
              ??_Console_FormFeed 0060                   _HMI_SetSegments 3BF6  
              ?_GetPortProperties 0060                  Event_NULL@pState 0001  
        __size_of_Event_DIPSwitch 0026             __size_of_Set_Rotation 0092  
                   ??i2_MXK_Queue 0004                         _eval_poly 32BC  
                     ??_MXK_Queue 0063                      ?_Port_GetPin 0060  
           __end_of_HMI_SetButton 42F6              __size_of_Console_Tab 0094  
                        ?_reverse 0060                      ?_Port_SetPin 006F  
                       _readIndex 00E4             __end_of_HMI_SetNumber 529E  
                ___lwdiv@quotient 0065                   _HMI_RightSwitch 549C  
                  __size_of_floor 0116                    __size_of_ldexp 00E4  
                  __size_of_frexp 009E               ??_GetPortProperties 0062  
         __end_of_Console_NewLine 427C              ??_MXK_InitTestButton 008D  
              Byte_GetPair@pInput 0069                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 5596                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 538E  
                        _LCD_Fill 4C38                          _LCD_Init 2A7E  
                  ___wmul@product 0064                          _HMIBoard 014B  
                  i2_Byte_GetZone 43E6                          _LED_Init 48BE  
                       delay_ms@u 0062                Button_Poll@pButton 007B  
                       delay_us@u 0062                          _HMI_Init 220E  
                        _HMI_Poll 4744                MXK_Queue@pCallback 0060  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 50F0          __size_of_Configure_GPIOs 005E  
            __size_of_Byte_GetBit 002C                 Byte_SetQuad@pQuad 006D  
                        i2u521_40 4450                          _PIR1bits 000F9E  
                        i2u521_45 444C                          _PIR3bits 000FA4  
                        i2u519_40 4408                          i2u519_47 43FE  
                        _CW_Count 0122                          i2u680_40 4E48  
                        i2u676_44 4BB8                          i2u676_45 4BB4  
                        i2u677_44 4BDE                          i2u677_45 4BDA  
            __size_of_Byte_SetBit 0052                          i2u787_40 3400  
                        i2u788_40 3414                          i2u789_40 344C  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
              _Sensor_Observe_Fin 0120                  __CFG_WDTPS$32768 000000  
                HMI_SetBar@pValue 0060                 Button_Init@pInput 009B  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 008A                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 3FF0                          _SSP2STAT 000F6D  
                    _Set_Rotation 3DC0             __size_of_Timer2_Clear 0008  
            __end_of_MXK_SwitchTo 4F0E                _Port_CheckPairType 47A4  
                        _MXK_Init 2D0C              __size_of_Init_Timer0 0018  
                 MXK_SwitchTo@CUR 0066                          _SPI_Init 0000  
        __end_of_Event_TestButton 508E                          _SPI_Send 4536  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 0065                 ___wmul@multiplier 0060  
               Byte_GetBit@Output 0064                        printf@flag 007A  
            Timer2_Init@pCPUClock 0076        __size_of_LCD_FillRectangle 0054  
            __size_of_Button_Init 00B0              __end_of_SPI_MaxSpeed 4674  
                      printf@prec 007B                 Byte_GetBit@pInput 0060  
             Port_SetPinType@pPin 0088              __size_of_Button_Poll 012E  
                      ?_eval_poly 009F                _Port_CheckQuadType 4B54  
                   _MXK_DIPSwitch 544C               ?_Port_CheckPairType 0086  
                       main@right 00DC              __end_of_SPI_MinSpeed 46DC  
                   ??_MXK_Dequeue 0076                  __size_of_LED_Set 0048  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 4D9A  
           Button_Poll@pIncrement 007D           PortProperty_Valid@F6830 FC79  
            __end_ofi2_Motor_Step 34BC                   ??i2_MXK_Release 0001  
                      _ADCAverage 0A34                         copy_data0 3ACC  
                       copy_data1 3AFE                     ??_MXK_Release 0060  
          __end_ofi2_Byte_GetPair 53A8         __size_of_Port_SetQuadType 0212  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 445C               __end_ofi2_MXK_Queue 5550  
             ?_Port_CheckPortType 0096                   itos@destination 006E  
                        _InitList FBB7              _Motor_Step$intlevel0 31B4  
                        _Mode_Set 54EA                Port_GetQuad@Output 0065  
                     ??_ToSegment 0060                      _ISR_Function 1408  
                       frexp@eptr 0064                   Init_Pos_Array@i 00B6  
                 Init_Pos_Array@j 00B8                Port_GetQuad@pInput 0060  
                    _Timer2_Clear 557C                  __size_of_InitADC 0048  
            __end_of_Word_GetPair 50C0                          _lCBuffer 0250  
            ??_Port_CheckPairType 008A                       ??_Reset_Low 0074  
                        __Hrparam 0000                      OutSeg@pInput 0066  
                  _Console_Render 1D1E                          __Lrparam 0000  
                 Timer2_Init@RDIV 0072                  ?_FunctInitButton 0001  
                  LCD_Write@value 0064                          _Port_Set 0FC6  
                    OutSeg@segset 003A                         rand@screw 0037  
            __end_of_Word_SetPair 4F82                       ??_Port_Init 00A3  
         __end_of_HMI_SetSegments 3C92              ??_Port_CheckQuadType 0093  
                __size_of___fladd 033E                  __size_of___fldiv 02B6  
           __size_of_Port_GetQuad 003E                  __size_of___awdiv 0086  
                __size_of___flneg 0030                  __size_of___flmul 0352  
                __size_of___flsub 0048                  __size_of___fltol 00DE  
                __size_of___lldiv 0084                 _MXK_BlockSwitchTo 4F82  
                __size_of___lwdiv 0054              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0044                          _lBufferX 00F3  
                        _lBufferY 00F2               Timer2_Init@PRESCALE FCA0  
                    ??_eusartSend 0060                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00EA           __end_of_HMI_RightSwitch 54B0  
          Byte_GetZone@pChunkSize 0064                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 0064             __size_of_Port_SetType 01CE  
                   reverse@length 0062                         itos@input 006C  
           i2MXK_SwitchTo@pModule 0008                          ___xxtofl 27DA  
                        _delay_ms 4862                          _delay_us 4D10  
                        _clearall 00F4                   ___lwdiv@divisor 0062  
                 ___lwdiv@counter 0064                   Port_GetPin@pPin 0062  
                        __ptext10 3EE0                          __ptext11 3F68  
                        __ptext20 53A8                          __ptext12 3FF0  
                        __ptext21 5526                          __ptext13 48BE  
                        __ptext30 4862                          __ptext22 4F82  
                        __ptext14 4BF0                          __ptext31 53C0  
                        __ptext23 4D10                          __ptext15 5026  
                        __ptext40 4200                          __ptext32 53D8  
                        __ptext24 2A7E                          __ptext16 31AE  
                        __ptext41 44CA                          __ptext33 53F0  
                        __ptext25 3DC0                          __ptext17 5584  
                        __ptext50 5374                          __ptext42 533C  
                        __ptext34 367E                          __ptext26 4C38  
                        __ptext18 5550                          __ptext51 52BE  
                        __ptext43 4B04                          __ptext35 2672  
                        __ptext27 4804                          __ptext19 4ED4  
                        __ptext60 544C                          __ptext52 54EA  
                        __ptext44 50C0                          __ptext36 5534  
                        __ptext28 460C                          __ptext61 5460  
                        __ptext53 3A12                          __ptext45 1D1E  
                        __ptext37 292E                          __ptext29 4AB4  
                        __ptext70 505A                          __ptext62 5474  
                        __ptext54 51AE                          __ptext46 4966  
                        __ptext38 3D2C                          __ptext71 427C  
                        __ptext63 5488                          __ptext55 531E  
                        __ptext47 4182                          __ptext39 4912  
             ??_MXK_BlockSwitchTo 0066                          __ptext80 0000  
                        __ptext72 4DDA                          __ptext64 549C  
                        __ptext56 4C80                          __ptext48 51DA  
                        __ptext81 2BC6                          __ptext73 5180  
                        __ptext65 54B0                          __ptext57 5568  
                        __ptext49 3C92                          __ptext90 5420  
                        __ptext82 40FE                          __ptext74 3804  
                        __ptext66 54C4                          __ptext58 4744  
                        __ptext91 1ED4                          __ptext83 557C  
                        __ptext75 4F0E                          __ptext67 4E5A  
                        __ptext59 2E48                          __ptext92 4A62  
                        __ptext84 5202                          __ptext76 5572  
                        __ptext68 5252                          __ptext93 1768  
                        __ptext85 50F0                          __ptext77 558A  
                        __ptext69 1404                          __ptext94 4F48  
                        __ptext86 4370                          __ptext78 220E  
                        __ptext95 52DE                          __ptext87 38B8  
                        __ptext79 4674                          __ptext96 4B54  
                        __ptext88 5408                          __ptext97 47A4  
                        __ptext89 5590                          __ptext98 46DC  
                        __ptext99 508E                      _SSP1CON1bits 000FC6  
                __size_of_reverse 0054                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 0068                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 0079                   ?i2_Byte_GetZone 0001  
                        _countOff 01F1                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001               __end_of_MXK_Dequeue 505A  
               HMI_SetSegments@in 0064             Button_Init@pThreshold 009D  
                   __size_of_main 019C                     __size_of_itos 00BE  
               Byte_GetPair@pPair 006B                          _readings 026E  
          __end_of_Console_Render 1ED4               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                __end_of_eusartSend 5518  
                    _Port_GetQuad 4E5A               __end_of_MXK_Release 53C0  
                  _MXK_TestButton 54C4           _InitSerialCommunication 531E  
                   i2_Byte_SetBit 4BA4               i2Word_GetPair@pPair 000F  
       __end_of_MXK_BlockSwitchTo 4FBA          ?_Console_IncrementCursor 0001  
            __size_of_Timer2_Init 0146                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 1B50  
                    Port_Set@Type 0086        __size_of_GetPortProperties 0088  
          __size_of_LCD_DrawField 007E                 ??_Configure_GPIOs 0095  
                       printf@val 007E                      _SSP1STATbits 000FC7  
                        main@left 00DE                          main@down 00DB  
                  Timer0_Init@DIV 0104                    Timer0_Init@PRE 0035  
                    _SSP2STATbits 000F6D                          exp@coeff FE83  
                      _LED_Toggle 4DDA                          log@coeff FEAB  
                      _HMI_GetBar 558A              Button_Init@pGetState 00A2  
          PortProperty_Valid@Pair 0085                  ??_Port_TogglePin 0077  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 0072                       ??_eval_poly 00A7  
                      _HMI_SetBar 5572                        _HMI_Render 4FBA  
                Byte_SetZone@MASK 006A                       i2_MXK_Queue 5542  
                  Timer2_Init@DIV 0100                    Timer2_Init@PRE 00F0  
                Byte_SetZone@pMax 0062            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 003A                       ?_ADCAverage 00D7  
            Button_Init@pFunction 00A5                          itos@Data 0070  
              LCD_FillRectangle@i 0075                LCD_FillRectangle@j 0076  
            __size_of_Port_SetPin 00B4                          intlevel2 0000  
                    reverse@input 0060                       _numReadings 0047  
          __size_of_HMI_DIPSwitch 0014                  ___lwmod@dividend 0067  
                ___lldiv@dividend 0060            __end_of_MXK_TestButton 54D8  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001A  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 003A  
                  _SPI_DisableISR 5202                   Port_Init@pInput 00A0  
                        printf@ap 007C                       _thisReading 0136  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 5568  
                ?_HMI_SetSegments 0061           Console_MakeField@Column 006C  
           __size_of_SPI_MaxSpeed 0068                     SPI_DCS@pInput 0060  
           __size_of_SPI_MinSpeed 0068                   ??_MXK_DIPSwitch 0066  
           __size_ofi2_Motor_Step 0100           Console_MakeField@pInput 006B  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 0068  
                   ??_GetPortPORT 0062                   ___lwmod@divisor 0069  
                   ??_GetPortTRIS 0062                Word_SetPair@pInput 006F  
                 ___lwmod@counter 006B                Word_SetPair@pValue 0072  
                     _MXK_Dequeue 5026                    LED_Toggle@pLED 0078  
                   ___fladd@signs 009B                     _LCD_DrawField 4182  
                _Port_SetQuadType 1768                       _MXK_Release 53A8  
       __size_of_Console_FormFeed 006C                      _MXK_SwitchTo 4ED4  
           __size_of_Word_GetPair 0032                Byte_GetZone@Offset 0067  
                   ?_Console_Init 0001                 Word_SetPair@pPair 0071  
         __size_of_Init_Pos_Array 00C8                   _Port_SetPinType 1ED4  
                    ___fladd@aexp 009C                      ___fladd@bexp 009D  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 0068  
       ??_InitSerialCommunication 0060                Byte_GetZone@pChunk 0063  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 5358  
              Byte_GetZone@pInput 0060           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 4966             __size_of_Word_SetPair 003A  
          __end_of_SPI_DisableISR 522A                      _SPI_MaxSpeed 460C  
                    _SPI_MinSpeed 4674                Port_Set@TypeActual 0084  
