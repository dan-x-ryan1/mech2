

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon May 21 18:51:36 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,inline
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1,inline
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1,group=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1,group=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	text146,global,reloc=2,class=CODE,delta=1
   168                           	psect	text147,global,reloc=2,class=CODE,delta=1
   169                           	psect	text148,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text149,global,reloc=2,class=CODE,delta=1,group=1
   171                           	psect	text150,global,reloc=2,class=CODE,delta=1
   172                           	psect	text151,global,reloc=2,class=CODE,delta=1
   173                           	psect	text152,global,reloc=2,class=CODE,delta=1
   174                           	psect	text153,global,reloc=2,class=CODE,delta=1
   175                           	psect	text154,global,reloc=2,class=CODE,delta=1
   176                           	psect	text155,global,reloc=2,class=CODE,delta=1
   177                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   178                           	psect	text157,global,reloc=2,class=CODE,delta=1
   179                           	psect	text158,global,reloc=2,class=CODE,delta=1
   180                           	psect	text159,global,reloc=2,class=CODE,delta=1
   181                           	psect	text160,global,reloc=2,class=CODE,delta=1
   182                           	psect	text161,global,reloc=2,class=CODE,delta=1
   183                           	psect	text162,global,reloc=2,class=CODE,delta=1
   184                           	psect	text163,global,reloc=2,class=CODE,delta=1
   185                           	psect	text164,global,reloc=2,class=CODE,delta=1,inline
   186                           	psect	text165,global,reloc=2,class=CODE,delta=1
   187                           	psect	text166,global,reloc=2,class=CODE,delta=1
   188                           	psect	text167,global,reloc=2,class=CODE,delta=1
   189                           	psect	text168,global,reloc=2,class=CODE,delta=1
   190                           	psect	text169,global,reloc=2,class=CODE,delta=1
   191                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   192                           	psect	text170,global,reloc=2,class=CODE,delta=1
   193                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   194                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   195  0000                     
   196                           ; Version 1.44
   197                           ; Generated 14/09/2017 GMT
   198                           ; 
   199                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   200                           ; All rights reserved.
   201                           ; 
   202                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   203                           ; 
   204                           ; Redistribution and use in source and binary forms, with or without modification, are
   205                           ; permitted provided that the following conditions are met:
   206                           ; 
   207                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   208                           ;        conditions and the following disclaimer.
   209                           ; 
   210                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   211                           ;        of conditions and the following disclaimer in the documentation and/or other
   212                           ;        materials provided with the distribution.
   213                           ; 
   214                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   215                           ;        software without specific prior written permission.
   216                           ; 
   217                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   218                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   219                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   220                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   221                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   222                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   223                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   224                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   225                           ; 
   226                           ; 
   227                           ; Code-generator required, PIC18F67J50 Definitions
   228                           ; 
   229                           ; SFR Addresses
   230  0000                     
   231                           	psect	idataCOMRAM
   232  018CB0                     __pidataCOMRAM:
   233                           	opt stack 0
   234                           
   235                           ;initializer for _gCursor
   236  018CB0  0006               	dw	6
   237  018CB2  0006               	dw	6
   238                           
   239                           ;initializer for _Bus_State
   240  018CB4  01                 	db	1
   241                           
   242                           ;initializer for _change
   243  018CB5  01                 	db	1
   244                           
   245                           ;initializer for _zero
   246  018CB6  30                 	db	48
   247                           
   248                           ;initializer for _l
   249  018CB7  80                 	db	128
   250                           
   251                           ;initializer for _w
   252  018CB8  80                 	db	128
   253                           
   254                           	psect	idataBANK1
   255  018940                     __pidataBANK1:
   256                           	opt stack 0
   257                           
   258                           ;initializer for Console_Render@F6956
   259  018940  0006               	dw	6
   260  018942  0006               	dw	6
   261                           
   262                           ;initializer for _gLineSize
   263  018944  0080               	dw	128
   264  018946  0007               	dw	7
   265                           
   266                           ;initializer for _gCharSize
   267  018948  0005               	dw	5
   268  01894A  0007               	dw	7
   269                           
   270                           ;initializer for _countOff
   271  01894C  00F8               	dw	248
   272                           
   273                           ;initializer for _countOn
   274  01894E  007C               	dw	124
   275                           
   276                           ;initializer for _Low_Sensor
   277  018950  2710               	dw	10000
   278                           
   279                           ;initializer for _Desired_Level
   280  018952  003C               	dw	60
   281                           
   282                           ;initializer for _Spd
   283  018954  00C8               	dw	200
   284                           
   285                           ;initializer for _numReadings
   286  018956  000A               	dw	10
   287                           
   288                           ;initializer for _top
   289  018958  FFFF               	dw	65535
   290                           
   291                           ;initializer for _Current_Direction
   292  01895A  0003               	dw	3
   293                           
   294                           ;initializer for _gForecolour
   295  01895C  FFFF               	dw	65535
   296                           
   297                           ;initializer for _A
   298  01895E  41                 	db	65
   299                           
   300                           ;initializer for _a
   301  01895F  61                 	db	97
   302                           
   303                           	psect	mediumconst
   304  00FB54                     __pmediumconst:
   305                           	opt stack 0
   306  00FB54  00                 	db	0
   307  00FB55                     _InitList:
   308                           	opt stack 0
   309  00FB55  1100               	dw	4352
   310  00FB57  0080               	dw	128
   311  00FB59  012C               	dw	300
   312  00FB5B  B100               	dw	45312
   313  00FB5D  0002               	dw	2
   314  00FB5F  0035               	dw	53
   315  00FB61  0036               	dw	54
   316  00FB63  B200               	dw	45568
   317  00FB65  0002               	dw	2
   318  00FB67  0035               	dw	53
   319  00FB69  0036               	dw	54
   320  00FB6B  B300               	dw	45824
   321  00FB6D  0002               	dw	2
   322  00FB6F  0035               	dw	53
   323  00FB71  0036               	dw	54
   324  00FB73  0002               	dw	2
   325  00FB75  0035               	dw	53
   326  00FB77  0036               	dw	54
   327  00FB79  B400               	dw	46080
   328  00FB7B  0000               	dw	0
   329  00FB7D  C000               	dw	49152
   330  00FB7F  00A2               	dw	162
   331  00FB81  0002               	dw	2
   332  00FB83  0084               	dw	132
   333  00FB85  C100               	dw	49408
   334  00FB87  00C5               	dw	197
   335  00FB89  C200               	dw	49664
   336  00FB8B  000D               	dw	13
   337  00FB8D  0000               	dw	0
   338  00FB8F  C300               	dw	49920
   339  00FB91  008D               	dw	141
   340  00FB93  002A               	dw	42
   341  00FB95  C400               	dw	50176
   342  00FB97  008D               	dw	141
   343  00FB99  00EE               	dw	238
   344  00FB9B  C500               	dw	50432
   345  00FB9D  000A               	dw	10
   346  00FB9F  3600               	dw	13824
   347  00FBA1  00C8               	dw	200
   348  00FBA3  E000               	dw	57344
   349  00FBA5  0012               	dw	18
   350  00FBA7  001C               	dw	28
   351  00FBA9  0010               	dw	16
   352  00FBAB  0018               	dw	24
   353  00FBAD  0033               	dw	51
   354  00FBAF  002C               	dw	44
   355  00FBB1  0025               	dw	37
   356  00FBB3  0028               	dw	40
   357  00FBB5  0028               	dw	40
   358  00FBB7  0027               	dw	39
   359  00FBB9  002F               	dw	47
   360  00FBBB  003C               	dw	60
   361  00FBBD  0000               	dw	0
   362  00FBBF  0003               	dw	3
   363  00FBC1  0003               	dw	3
   364  00FBC3  0010               	dw	16
   365  00FBC5  0080               	dw	128
   366  00FBC7  0078               	dw	120
   367  00FBC9  E100               	dw	57600
   368  00FBCB  0012               	dw	18
   369  00FBCD  001C               	dw	28
   370  00FBCF  0010               	dw	16
   371  00FBD1  0018               	dw	24
   372  00FBD3  002D               	dw	45
   373  00FBD5  0028               	dw	40
   374  00FBD7  0023               	dw	35
   375  00FBD9  0028               	dw	40
   376  00FBDB  0028               	dw	40
   377  00FBDD  0026               	dw	38
   378  00FBDF  002F               	dw	47
   379  00FBE1  003B               	dw	59
   380  00FBE3  0000               	dw	0
   381  00FBE5  0003               	dw	3
   382  00FBE7  0003               	dw	3
   383  00FBE9  0010               	dw	16
   384  00FBEB  3A00               	dw	14848
   385  00FBED  0005               	dw	5
   386  00FBEF  2A00               	dw	10752
   387  00FBF1  0000               	dw	0
   388  00FBF3  0002               	dw	2
   389  00FBF5  0000               	dw	0
   390  00FBF7  0081               	dw	129
   391  00FBF9  2B00               	dw	11008
   392  00FBFB  0000               	dw	0
   393  00FBFD  0003               	dw	3
   394  00FBFF  0000               	dw	0
   395  00FC01  00A2               	dw	162
   396  00FC03  2900               	dw	10496
   397  00FC05  2C00               	dw	11264
   398  00FC07                     __end_of_InitList:
   399                           	opt stack 0
   400  00FC07                     Timer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FC07  0002               	dw	2
   403  00FC09  0004               	dw	4
   404  00FC0B  0008               	dw	8
   405  00FC0D  0010               	dw	16
   406  00FC0F  0020               	dw	32
   407  00FC11  0040               	dw	64
   408  00FC13  0080               	dw	128
   409  00FC15  0100               	dw	256
   410  00FC17                     __end_ofTimer0_Init@PRESCALE:
   411                           	opt stack 0
   412  00FC17                     PortProperty_Valid@F6830:
   413                           	opt stack 0
   414  00FC17  00                 	db	0
   415  00FC18  01                 	db	1
   416  00FC19  02                 	db	2
   417  00FC1A  00                 	db	0
   418  00FC1B  01                 	db	1
   419  00FC1C  00                 	db	0
   420  00FC1D  01                 	db	1
   421  00FC1E  00                 	db	0
   422  00FC1F  02                 	db	2
   423  00FC20  02                 	db	2
   424  00FC21  00                 	db	0
   425  00FC22  00                 	db	0
   426  00FC23  03                 	db	3
   427  00FC24  03                 	db	3
   428  00FC25  03                 	db	3
   429  00FC26  00                 	db	0
   430  00FC27                     __end_ofPortProperty_Valid@F6830:
   431                           	opt stack 0
   432  00FC27                     _dpowers:
   433                           	opt stack 0
   434  00FC27  0001               	dw	1
   435  00FC29  000A               	dw	10
   436  00FC2B  0064               	dw	100
   437  00FC2D  03E8               	dw	1000
   438  00FC2F  2710               	dw	10000
   439  00FC31                     __end_of_dpowers:
   440                           	opt stack 0
   441  00FC31                     _MASKS:
   442                           	opt stack 0
   443  00FC31  00                 	db	0
   444  00FC32  01                 	db	1
   445  00FC33  03                 	db	3
   446  00FC34  07                 	db	7
   447  00FC35  0F                 	db	15
   448  00FC36  1F                 	db	31
   449  00FC37  3F                 	db	63
   450  00FC38  7F                 	db	127
   451  00FC39  FF                 	db	255
   452  00FC3A                     __end_of_MASKS:
   453                           	opt stack 0
   454  00FC3A                     HMI_SetButton@F7213:
   455                           	opt stack 0
   456  00FC3A  00                 	db	0
   457  00FC3B  02                 	db	2
   458  00FC3C  01                 	db	1
   459  00FC3D  03                 	db	3
   460  00FC3E                     __end_ofHMI_SetButton@F7213:
   461                           	opt stack 0
   462  00FC3E                     Timer2_Init@PRESCALE:
   463                           	opt stack 0
   464  00FC3E  01                 	db	1
   465  00FC3F  04                 	db	4
   466  00FC40  10                 	db	16
   467  00FC41                     __end_ofTimer2_Init@PRESCALE:
   468                           	opt stack 0
   469  00FC41                     _Font5x7:
   470                           	opt stack 0
   471  00FC41  00                 	db	0
   472  00FC42  00                 	db	0
   473  00FC43  00                 	db	0
   474  00FC44  00                 	db	0
   475  00FC45  00                 	db	0
   476  00FC46  00                 	db	0
   477  00FC47  00                 	db	0
   478  00FC48  5F                 	db	95
   479  00FC49  00                 	db	0
   480  00FC4A  00                 	db	0
   481  00FC4B  00                 	db	0
   482  00FC4C  07                 	db	7
   483  00FC4D  00                 	db	0
   484  00FC4E  07                 	db	7
   485  00FC4F  00                 	db	0
   486  00FC50  14                 	db	20
   487  00FC51  7F                 	db	127
   488  00FC52  14                 	db	20
   489  00FC53  7F                 	db	127
   490  00FC54  14                 	db	20
   491  00FC55  24                 	db	36
   492  00FC56  2A                 	db	42
   493  00FC57  7F                 	db	127
   494  00FC58  2A                 	db	42
   495  00FC59  12                 	db	18
   496  00FC5A  23                 	db	35
   497  00FC5B  13                 	db	19
   498  00FC5C  08                 	db	8
   499  00FC5D  64                 	db	100
   500  00FC5E  62                 	db	98
   501  00FC5F  36                 	db	54
   502  00FC60  49                 	db	73
   503  00FC61  55                 	db	85
   504  00FC62  22                 	db	34
   505  00FC63  50                 	db	80
   506  00FC64  00                 	db	0
   507  00FC65  05                 	db	5
   508  00FC66  03                 	db	3
   509  00FC67  00                 	db	0
   510  00FC68  00                 	db	0
   511  00FC69  00                 	db	0
   512  00FC6A  1C                 	db	28
   513  00FC6B  22                 	db	34
   514  00FC6C  41                 	db	65
   515  00FC6D  00                 	db	0
   516  00FC6E  00                 	db	0
   517  00FC6F  41                 	db	65
   518  00FC70  22                 	db	34
   519  00FC71  1C                 	db	28
   520  00FC72  00                 	db	0
   521  00FC73  08                 	db	8
   522  00FC74  2A                 	db	42
   523  00FC75  1C                 	db	28
   524  00FC76  2A                 	db	42
   525  00FC77  08                 	db	8
   526  00FC78  08                 	db	8
   527  00FC79  08                 	db	8
   528  00FC7A  3E                 	db	62
   529  00FC7B  08                 	db	8
   530  00FC7C  08                 	db	8
   531  00FC7D  00                 	db	0
   532  00FC7E  50                 	db	80
   533  00FC7F  30                 	db	48
   534  00FC80  00                 	db	0
   535  00FC81  00                 	db	0
   536  00FC82  08                 	db	8
   537  00FC83  08                 	db	8
   538  00FC84  08                 	db	8
   539  00FC85  08                 	db	8
   540  00FC86  08                 	db	8
   541  00FC87  00                 	db	0
   542  00FC88  60                 	db	96
   543  00FC89  60                 	db	96
   544  00FC8A  00                 	db	0
   545  00FC8B  00                 	db	0
   546  00FC8C  20                 	db	32
   547  00FC8D  10                 	db	16
   548  00FC8E  08                 	db	8
   549  00FC8F  04                 	db	4
   550  00FC90  02                 	db	2
   551  00FC91  3E                 	db	62
   552  00FC92  51                 	db	81
   553  00FC93  49                 	db	73
   554  00FC94  45                 	db	69
   555  00FC95  3E                 	db	62
   556  00FC96  00                 	db	0
   557  00FC97  42                 	db	66
   558  00FC98  7F                 	db	127
   559  00FC99  40                 	db	64
   560  00FC9A  00                 	db	0
   561  00FC9B  42                 	db	66
   562  00FC9C  61                 	db	97
   563  00FC9D  51                 	db	81
   564  00FC9E  49                 	db	73
   565  00FC9F  46                 	db	70
   566  00FCA0  21                 	db	33
   567  00FCA1  41                 	db	65
   568  00FCA2  45                 	db	69
   569  00FCA3  4B                 	db	75
   570  00FCA4  31                 	db	49
   571  00FCA5  18                 	db	24
   572  00FCA6  14                 	db	20
   573  00FCA7  12                 	db	18
   574  00FCA8  7F                 	db	127
   575  00FCA9  10                 	db	16
   576  00FCAA  27                 	db	39
   577  00FCAB  45                 	db	69
   578  00FCAC  45                 	db	69
   579  00FCAD  45                 	db	69
   580  00FCAE  39                 	db	57
   581  00FCAF  3C                 	db	60
   582  00FCB0  4A                 	db	74
   583  00FCB1  49                 	db	73
   584  00FCB2  49                 	db	73
   585  00FCB3  30                 	db	48
   586  00FCB4  01                 	db	1
   587  00FCB5  71                 	db	113
   588  00FCB6  09                 	db	9
   589  00FCB7  05                 	db	5
   590  00FCB8  03                 	db	3
   591  00FCB9  36                 	db	54
   592  00FCBA  49                 	db	73
   593  00FCBB  49                 	db	73
   594  00FCBC  49                 	db	73
   595  00FCBD  36                 	db	54
   596  00FCBE  06                 	db	6
   597  00FCBF  49                 	db	73
   598  00FCC0  49                 	db	73
   599  00FCC1  29                 	db	41
   600  00FCC2  1E                 	db	30
   601  00FCC3  00                 	db	0
   602  00FCC4  36                 	db	54
   603  00FCC5  36                 	db	54
   604  00FCC6  00                 	db	0
   605  00FCC7  00                 	db	0
   606  00FCC8  00                 	db	0
   607  00FCC9  56                 	db	86
   608  00FCCA  36                 	db	54
   609  00FCCB  00                 	db	0
   610  00FCCC  00                 	db	0
   611  00FCCD  00                 	db	0
   612  00FCCE  08                 	db	8
   613  00FCCF  14                 	db	20
   614  00FCD0  22                 	db	34
   615  00FCD1  41                 	db	65
   616  00FCD2  14                 	db	20
   617  00FCD3  14                 	db	20
   618  00FCD4  14                 	db	20
   619  00FCD5  14                 	db	20
   620  00FCD6  14                 	db	20
   621  00FCD7  41                 	db	65
   622  00FCD8  22                 	db	34
   623  00FCD9  14                 	db	20
   624  00FCDA  08                 	db	8
   625  00FCDB  00                 	db	0
   626  00FCDC  02                 	db	2
   627  00FCDD  01                 	db	1
   628  00FCDE  51                 	db	81
   629  00FCDF  09                 	db	9
   630  00FCE0  06                 	db	6
   631  00FCE1  32                 	db	50
   632  00FCE2  49                 	db	73
   633  00FCE3  79                 	db	121
   634  00FCE4  41                 	db	65
   635  00FCE5  3E                 	db	62
   636  00FCE6  7E                 	db	126
   637  00FCE7  11                 	db	17
   638  00FCE8  11                 	db	17
   639  00FCE9  11                 	db	17
   640  00FCEA  7E                 	db	126
   641  00FCEB  7F                 	db	127
   642  00FCEC  49                 	db	73
   643  00FCED  49                 	db	73
   644  00FCEE  49                 	db	73
   645  00FCEF  36                 	db	54
   646  00FCF0  3E                 	db	62
   647  00FCF1  41                 	db	65
   648  00FCF2  41                 	db	65
   649  00FCF3  41                 	db	65
   650  00FCF4  22                 	db	34
   651  00FCF5  7F                 	db	127
   652  00FCF6  41                 	db	65
   653  00FCF7  41                 	db	65
   654  00FCF8  22                 	db	34
   655  00FCF9  1C                 	db	28
   656  00FCFA  7F                 	db	127
   657  00FCFB  49                 	db	73
   658  00FCFC  49                 	db	73
   659  00FCFD  49                 	db	73
   660  00FCFE  41                 	db	65
   661  00FCFF  7F                 	db	127
   662  00FD00  09                 	db	9
   663  00FD01  09                 	db	9
   664  00FD02  01                 	db	1
   665  00FD03  01                 	db	1
   666  00FD04  3E                 	db	62
   667  00FD05  41                 	db	65
   668  00FD06  41                 	db	65
   669  00FD07  51                 	db	81
   670  00FD08  32                 	db	50
   671  00FD09  7F                 	db	127
   672  00FD0A  08                 	db	8
   673  00FD0B  08                 	db	8
   674  00FD0C  08                 	db	8
   675  00FD0D  7F                 	db	127
   676  00FD0E  00                 	db	0
   677  00FD0F  41                 	db	65
   678  00FD10  7F                 	db	127
   679  00FD11  41                 	db	65
   680  00FD12  00                 	db	0
   681  00FD13  20                 	db	32
   682  00FD14  40                 	db	64
   683  00FD15  41                 	db	65
   684  00FD16  3F                 	db	63
   685  00FD17  01                 	db	1
   686  00FD18  7F                 	db	127
   687  00FD19  08                 	db	8
   688  00FD1A  14                 	db	20
   689  00FD1B  22                 	db	34
   690  00FD1C  41                 	db	65
   691  00FD1D  7F                 	db	127
   692  00FD1E  40                 	db	64
   693  00FD1F  40                 	db	64
   694  00FD20  40                 	db	64
   695  00FD21  40                 	db	64
   696  00FD22  7F                 	db	127
   697  00FD23  02                 	db	2
   698  00FD24  04                 	db	4
   699  00FD25  02                 	db	2
   700  00FD26  7F                 	db	127
   701  00FD27  7F                 	db	127
   702  00FD28  04                 	db	4
   703  00FD29  08                 	db	8
   704  00FD2A  10                 	db	16
   705  00FD2B  7F                 	db	127
   706  00FD2C  3E                 	db	62
   707  00FD2D  41                 	db	65
   708  00FD2E  41                 	db	65
   709  00FD2F  41                 	db	65
   710  00FD30  3E                 	db	62
   711  00FD31  7F                 	db	127
   712  00FD32  09                 	db	9
   713  00FD33  09                 	db	9
   714  00FD34  09                 	db	9
   715  00FD35  06                 	db	6
   716  00FD36  3E                 	db	62
   717  00FD37  41                 	db	65
   718  00FD38  51                 	db	81
   719  00FD39  21                 	db	33
   720  00FD3A  5E                 	db	94
   721  00FD3B  7F                 	db	127
   722  00FD3C  09                 	db	9
   723  00FD3D  19                 	db	25
   724  00FD3E  29                 	db	41
   725  00FD3F  46                 	db	70
   726  00FD40  46                 	db	70
   727  00FD41  49                 	db	73
   728  00FD42  49                 	db	73
   729  00FD43  49                 	db	73
   730  00FD44  31                 	db	49
   731  00FD45  01                 	db	1
   732  00FD46  01                 	db	1
   733  00FD47  7F                 	db	127
   734  00FD48  01                 	db	1
   735  00FD49  01                 	db	1
   736  00FD4A  3F                 	db	63
   737  00FD4B  40                 	db	64
   738  00FD4C  40                 	db	64
   739  00FD4D  40                 	db	64
   740  00FD4E  3F                 	db	63
   741  00FD4F  1F                 	db	31
   742  00FD50  20                 	db	32
   743  00FD51  40                 	db	64
   744  00FD52  20                 	db	32
   745  00FD53  1F                 	db	31
   746  00FD54  7F                 	db	127
   747  00FD55  20                 	db	32
   748  00FD56  18                 	db	24
   749  00FD57  20                 	db	32
   750  00FD58  7F                 	db	127
   751  00FD59  63                 	db	99
   752  00FD5A  14                 	db	20
   753  00FD5B  08                 	db	8
   754  00FD5C  14                 	db	20
   755  00FD5D  63                 	db	99
   756  00FD5E  03                 	db	3
   757  00FD5F  04                 	db	4
   758  00FD60  78                 	db	120
   759  00FD61  04                 	db	4
   760  00FD62  03                 	db	3
   761  00FD63  61                 	db	97
   762  00FD64  51                 	db	81
   763  00FD65  49                 	db	73
   764  00FD66  45                 	db	69
   765  00FD67  43                 	db	67
   766  00FD68  00                 	db	0
   767  00FD69  00                 	db	0
   768  00FD6A  7F                 	db	127
   769  00FD6B  41                 	db	65
   770  00FD6C  41                 	db	65
   771  00FD6D  02                 	db	2
   772  00FD6E  04                 	db	4
   773  00FD6F  08                 	db	8
   774  00FD70  10                 	db	16
   775  00FD71  20                 	db	32
   776  00FD72  41                 	db	65
   777  00FD73  41                 	db	65
   778  00FD74  7F                 	db	127
   779  00FD75  00                 	db	0
   780  00FD76  00                 	db	0
   781  00FD77  04                 	db	4
   782  00FD78  02                 	db	2
   783  00FD79  01                 	db	1
   784  00FD7A  02                 	db	2
   785  00FD7B  04                 	db	4
   786  00FD7C  40                 	db	64
   787  00FD7D  40                 	db	64
   788  00FD7E  40                 	db	64
   789  00FD7F  40                 	db	64
   790  00FD80  40                 	db	64
   791  00FD81  00                 	db	0
   792  00FD82  01                 	db	1
   793  00FD83  02                 	db	2
   794  00FD84  04                 	db	4
   795  00FD85  00                 	db	0
   796  00FD86  20                 	db	32
   797  00FD87  54                 	db	84
   798  00FD88  54                 	db	84
   799  00FD89  54                 	db	84
   800  00FD8A  78                 	db	120
   801  00FD8B  7F                 	db	127
   802  00FD8C  48                 	db	72
   803  00FD8D  44                 	db	68
   804  00FD8E  44                 	db	68
   805  00FD8F  38                 	db	56
   806  00FD90  38                 	db	56
   807  00FD91  44                 	db	68
   808  00FD92  44                 	db	68
   809  00FD93  44                 	db	68
   810  00FD94  20                 	db	32
   811  00FD95  38                 	db	56
   812  00FD96  44                 	db	68
   813  00FD97  44                 	db	68
   814  00FD98  48                 	db	72
   815  00FD99  7F                 	db	127
   816  00FD9A  38                 	db	56
   817  00FD9B  54                 	db	84
   818  00FD9C  54                 	db	84
   819  00FD9D  54                 	db	84
   820  00FD9E  18                 	db	24
   821  00FD9F  08                 	db	8
   822  00FDA0  7E                 	db	126
   823  00FDA1  09                 	db	9
   824  00FDA2  01                 	db	1
   825  00FDA3  02                 	db	2
   826  00FDA4  08                 	db	8
   827  00FDA5  14                 	db	20
   828  00FDA6  54                 	db	84
   829  00FDA7  54                 	db	84
   830  00FDA8  3C                 	db	60
   831  00FDA9  7F                 	db	127
   832  00FDAA  08                 	db	8
   833  00FDAB  04                 	db	4
   834  00FDAC  04                 	db	4
   835  00FDAD  78                 	db	120
   836  00FDAE  00                 	db	0
   837  00FDAF  44                 	db	68
   838  00FDB0  7D                 	db	125
   839  00FDB1  40                 	db	64
   840  00FDB2  00                 	db	0
   841  00FDB3  20                 	db	32
   842  00FDB4  40                 	db	64
   843  00FDB5  44                 	db	68
   844  00FDB6  3D                 	db	61
   845  00FDB7  00                 	db	0
   846  00FDB8  00                 	db	0
   847  00FDB9  7F                 	db	127
   848  00FDBA  10                 	db	16
   849  00FDBB  28                 	db	40
   850  00FDBC  44                 	db	68
   851  00FDBD  00                 	db	0
   852  00FDBE  41                 	db	65
   853  00FDBF  7F                 	db	127
   854  00FDC0  40                 	db	64
   855  00FDC1  00                 	db	0
   856  00FDC2  7C                 	db	124
   857  00FDC3  04                 	db	4
   858  00FDC4  18                 	db	24
   859  00FDC5  04                 	db	4
   860  00FDC6  78                 	db	120
   861  00FDC7  7C                 	db	124
   862  00FDC8  08                 	db	8
   863  00FDC9  04                 	db	4
   864  00FDCA  04                 	db	4
   865  00FDCB  78                 	db	120
   866  00FDCC  38                 	db	56
   867  00FDCD  44                 	db	68
   868  00FDCE  44                 	db	68
   869  00FDCF  44                 	db	68
   870  00FDD0  38                 	db	56
   871  00FDD1  7C                 	db	124
   872  00FDD2  14                 	db	20
   873  00FDD3  14                 	db	20
   874  00FDD4  14                 	db	20
   875  00FDD5  08                 	db	8
   876  00FDD6  08                 	db	8
   877  00FDD7  14                 	db	20
   878  00FDD8  14                 	db	20
   879  00FDD9  18                 	db	24
   880  00FDDA  7C                 	db	124
   881  00FDDB  7C                 	db	124
   882  00FDDC  08                 	db	8
   883  00FDDD  04                 	db	4
   884  00FDDE  04                 	db	4
   885  00FDDF  08                 	db	8
   886  00FDE0  48                 	db	72
   887  00FDE1  54                 	db	84
   888  00FDE2  54                 	db	84
   889  00FDE3  54                 	db	84
   890  00FDE4  20                 	db	32
   891  00FDE5  04                 	db	4
   892  00FDE6  3F                 	db	63
   893  00FDE7  44                 	db	68
   894  00FDE8  40                 	db	64
   895  00FDE9  20                 	db	32
   896  00FDEA  3C                 	db	60
   897  00FDEB  40                 	db	64
   898  00FDEC  40                 	db	64
   899  00FDED  20                 	db	32
   900  00FDEE  7C                 	db	124
   901  00FDEF  1C                 	db	28
   902  00FDF0  20                 	db	32
   903  00FDF1  40                 	db	64
   904  00FDF2  20                 	db	32
   905  00FDF3  1C                 	db	28
   906  00FDF4  3C                 	db	60
   907  00FDF5  40                 	db	64
   908  00FDF6  30                 	db	48
   909  00FDF7  40                 	db	64
   910  00FDF8  3C                 	db	60
   911  00FDF9  44                 	db	68
   912  00FDFA  28                 	db	40
   913  00FDFB  10                 	db	16
   914  00FDFC  28                 	db	40
   915  00FDFD  44                 	db	68
   916  00FDFE  0C                 	db	12
   917  00FDFF  50                 	db	80
   918  00FE00  50                 	db	80
   919  00FE01  50                 	db	80
   920  00FE02  3C                 	db	60
   921  00FE03  44                 	db	68
   922  00FE04  64                 	db	100
   923  00FE05  54                 	db	84
   924  00FE06  4C                 	db	76
   925  00FE07  44                 	db	68
   926  00FE08  00                 	db	0
   927  00FE09  08                 	db	8
   928  00FE0A  36                 	db	54
   929  00FE0B  41                 	db	65
   930  00FE0C  00                 	db	0
   931  00FE0D  00                 	db	0
   932  00FE0E  00                 	db	0
   933  00FE0F  7F                 	db	127
   934  00FE10  00                 	db	0
   935  00FE11  00                 	db	0
   936  00FE12  00                 	db	0
   937  00FE13  41                 	db	65
   938  00FE14  36                 	db	54
   939  00FE15  08                 	db	8
   940  00FE16  00                 	db	0
   941  00FE17  08                 	db	8
   942  00FE18  08                 	db	8
   943  00FE19  2A                 	db	42
   944  00FE1A  1C                 	db	28
   945  00FE1B  08                 	db	8
   946  00FE1C  08                 	db	8
   947  00FE1D  1C                 	db	28
   948  00FE1E  2A                 	db	42
   949  00FE1F  08                 	db	8
   950  00FE20  08                 	db	8
   951  00FE21                     __end_of_Font5x7:
   952                           	opt stack 0
   953  00FE21                     exp@coeff:
   954                           	opt stack 0
   955  00FE21  0000               	dw	0
   956  00FE23  3F80               	dw	16256
   957  00FE25  7218               	dw	29208
   958  00FE27  3F31               	dw	16177
   959  00FE29  FDF0               	dw	65008
   960  00FE2B  3E75               	dw	15989
   961  00FE2D  5847               	dw	22599
   962  00FE2F  3D63               	dw	15715
   963  00FE31  9558               	dw	38232
   964  00FE33  3C1D               	dw	15389
   965  00FE35  C482               	dw	50306
   966  00FE37  3AAE               	dw	15022
   967  00FE39  78A8               	dw	30888
   968  00FE3B  3921               	dw	14625
   969  00FE3D  93EF               	dw	37871
   970  00FE3F  3780               	dw	14208
   971  00FE41  92A0               	dw	37536
   972  00FE43  35A7               	dw	13735
   973  00FE45  5646               	dw	22086
   974  00FE47  3415               	dw	13333
   975  00FE49                     __end_ofexp@coeff:
   976                           	opt stack 0
   977  00FE49                     log@coeff:
   978                           	opt stack 0
   979  00FE49  0000               	dw	0
   980  00FE4B  0000               	dw	0
   981  00FE4D  FFC4               	dw	65476
   982  00FE4F  3F7F               	dw	16255
   983  00FE51  EF80               	dw	61312
   984  00FE53  BEFF               	dw	48895
   985  00FE55  E190               	dw	57744
   986  00FE57  3EA9               	dw	16041
   987  00FE59  82EC               	dw	33516
   988  00FE5B  BE76               	dw	48758
   989  00FE5D  AD82               	dw	44418
   990  00FE5F  3E2B               	dw	15915
   991  00FE61  3C0E               	dw	15374
   992  00FE63  BDC3               	dw	48579
   993  00FE65  D187               	dw	53639
   994  00FE67  3D13               	dw	15635
   995  00FE69  7841               	dw	30785
   996  00FE6B  BBD3               	dw	48083
   997  00FE6D                     __end_oflog@coeff:
   998                           	opt stack 0
   999  00FE6D                     _PortG_Property:
  1000                           	opt stack 0
  1001  00FE6D  FC00               	dw	64512
  1002  00FE6F                     __end_of_PortG_Property:
  1003                           	opt stack 0
  1004  00FE6F                     _PortF_Property:
  1005                           	opt stack 0
  1006  00FE6F  0FFF               	dw	4095
  1007  00FE71                     __end_of_PortF_Property:
  1008                           	opt stack 0
  1009  00FE71                     _PortE_Property:
  1010                           	opt stack 0
  1011  00FE71  0000               	dw	0
  1012  00FE73                     __end_of_PortE_Property:
  1013                           	opt stack 0
  1014  00FE73                     _PortD_Property:
  1015                           	opt stack 0
  1016  00FE73  FFFF               	dw	65535
  1017  00FE75                     __end_of_PortD_Property:
  1018                           	opt stack 0
  1019  00FE75                     _PortC_Property:
  1020                           	opt stack 0
  1021  00FE75  FFF0               	dw	65520
  1022  00FE77                     __end_of_PortC_Property:
  1023                           	opt stack 0
  1024  00FE77                     _PortB_Property:
  1025                           	opt stack 0
  1026  00FE77  FF00               	dw	65280
  1027  00FE79                     __end_of_PortB_Property:
  1028                           	opt stack 0
  1029  00FE79                     _PortA_Property:
  1030                           	opt stack 0
  1031  00FE79  00FF               	dw	255
  1032  00FE7B                     __end_of_PortA_Property:
  1033                           	opt stack 0
  1034  0000                     _ADRES	set	4035
  1035  0000                     _TMR0	set	4054
  1036  0000                     _TXREG1	set	4014
  1037  0000                     _ADCON0	set	4034
  1038  0000                     _ADCON1	set	4033
  1039  0000                     _RCREG1	set	4015
  1040  0000                     _SPBRG1	set	4016
  1041  0000                     _TXSTA1bits	set	4013
  1042  0000                     _BAUDCON1bits	set	3966
  1043  0000                     _RCSTA1	set	4012
  1044  0000                     _TXSTA1	set	4013
  1045  0000                     _TRISCbits	set	3988
  1046  0000                     _PR2	set	4043
  1047  0000                     _T2CONbits	set	4042
  1048  0000                     _T0CONbits	set	4053
  1049  0000                     _RCONbits	set	4048
  1050  0000                     _OSCTUNEbits	set	3995
  1051  0000                     _PIR3	set	4004
  1052  0000                     _PIR2	set	4001
  1053  0000                     _PIR1	set	3998
  1054  0000                     _INTCONbits	set	4082
  1055  0000                     _SSP2CON2bits	set	3947
  1056  0000                     _SSP1CON2bits	set	4037
  1057  0000                     _SSP1ADD	set	4040
  1058  0000                     _ANCON0	set	4033
  1059  0000                     _ADRESL	set	4035
  1060  0000                     _ADRESH	set	4036
  1061  0000                     _ADCON1bits	set	4033
  1062  0000                     _ADCON0bits	set	4034
  1063  0000                     _SSP2CON1bits	set	3948
  1064  0000                     _SSP1CON1bits	set	4038
  1065  0000                     _SSP2STATbits	set	3949
  1066  0000                     _SSP1STATbits	set	4039
  1067  0000                     _PIE3bits	set	4003
  1068  0000                     _PIE1bits	set	3997
  1069  0000                     _PIR3bits	set	4004
  1070  0000                     _PIR1bits	set	3998
  1071  0000                     _IPR3bits	set	4005
  1072  0000                     _IPR1bits	set	3999
  1073  0000                     _PORTFbits	set	3973
  1074  0000                     _SSP2CON2	set	3947
  1075  0000                     _SSP1CON2	set	4037
  1076  0000                     _SSP2BUF	set	3951
  1077  0000                     _SSP2CON1	set	3948
  1078  0000                     _SSP2STAT	set	3949
  1079  0000                     _SSP1BUF	set	4041
  1080  0000                     _SSP1CON1	set	4038
  1081  0000                     _SSP1STAT	set	4039
  1082  0000                     _LATG	set	3983
  1083  0000                     _LATF	set	3982
  1084  0000                     _LATE	set	3981
  1085  0000                     _LATD	set	3980
  1086  0000                     _LATC	set	3979
  1087  0000                     _LATB	set	3978
  1088  0000                     _LATA	set	3977
  1089  0000                     _TRISG	set	3992
  1090  0000                     _TRISF	set	3991
  1091  0000                     _TRISE	set	3990
  1092  0000                     _TRISD	set	3989
  1093  0000                     _TRISC	set	3988
  1094  0000                     _TRISB	set	3987
  1095  0000                     _TRISA	set	3986
  1096  0000                     _PORTG	set	3974
  1097  0000                     _PORTF	set	3973
  1098  0000                     _PORTE	set	3972
  1099  0000                     _PORTD	set	3971
  1100  0000                     _PORTC	set	3970
  1101  0000                     _PORTB	set	3969
  1102  0000                     _PORTA	set	3968
  1103  0000                     _GODONE	set	32273
  1104  0000                     _ADON	set	32272
  1105  0000                     _RA3	set	31747
  1106  0000                     _RA2	set	31746
  1107  0000                     _RD7	set	31775
  1108  0000                     _RD5	set	31773
  1109  0000                     _TRISD7	set	31919
  1110  0000                     _TRISD5	set	31917
  1111  0000                     _TRISA3	set	31891
  1112  0000                     _TRISA2	set	31890
  1113  00FE7B                     STR_21:
  1114  00FE7B  43                 	db	67	;'C'
  1115  00FE7C  6F                 	db	111	;'o'
  1116  00FE7D  75                 	db	117	;'u'
  1117  00FE7E  6C                 	db	108	;'l'
  1118  00FE7F  64                 	db	100	;'d'
  1119  00FE80  20                 	db	32
  1120  00FE81  6E                 	db	110	;'n'
  1121  00FE82  6F                 	db	111	;'o'
  1122  00FE83  74                 	db	116	;'t'
  1123  00FE84  20                 	db	32
  1124  00FE85  72                 	db	114	;'r'
  1125  00FE86  65                 	db	101	;'e'
  1126  00FE87  74                 	db	116	;'t'
  1127  00FE88  72                 	db	114	;'r'
  1128  00FE89  69                 	db	105	;'i'
  1129  00FE8A  65                 	db	101	;'e'
  1130  00FE8B  76                 	db	118	;'v'
  1131  00FE8C  65                 	db	101	;'e'
  1132  00FE8D  20                 	db	32
  1133  00FE8E  64                 	db	100	;'d'
  1134  00FE8F  61                 	db	97	;'a'
  1135  00FE90  74                 	db	116	;'t'
  1136  00FE91  61                 	db	97	;'a'
  1137  00FE92  2C                 	db	44
  1138  00FE93  20                 	db	32
  1139  00FE94  53                 	db	83	;'S'
  1140  00FE95  74                 	db	116	;'t'
  1141  00FE96  61                 	db	97	;'a'
  1142  00FE97  63                 	db	99	;'c'
  1143  00FE98  6B                 	db	107	;'k'
  1144  00FE99  20                 	db	32
  1145  00FE9A  69                 	db	105	;'i'
  1146  00FE9B  73                 	db	115	;'s'
  1147  00FE9C  20                 	db	32
  1148  00FE9D  65                 	db	101	;'e'
  1149  00FE9E  6D                 	db	109	;'m'
  1150  00FE9F  70                 	db	112	;'p'
  1151  00FEA0  74                 	db	116	;'t'
  1152  00FEA1  79                 	db	121	;'y'
  1153  00FEA2  2E                 	db	46
  1154  00FEA3  0A                 	db	10
  1155  00FEA4  00                 	db	0
  1156  00FEA5                     STR_22:
  1157  00FEA5  43                 	db	67	;'C'
  1158  00FEA6  6F                 	db	111	;'o'
  1159  00FEA7  75                 	db	117	;'u'
  1160  00FEA8  6C                 	db	108	;'l'
  1161  00FEA9  64                 	db	100	;'d'
  1162  00FEAA  20                 	db	32
  1163  00FEAB  6E                 	db	110	;'n'
  1164  00FEAC  6F                 	db	111	;'o'
  1165  00FEAD  74                 	db	116	;'t'
  1166  00FEAE  20                 	db	32
  1167  00FEAF  69                 	db	105	;'i'
  1168  00FEB0  6E                 	db	110	;'n'
  1169  00FEB1  73                 	db	115	;'s'
  1170  00FEB2  65                 	db	101	;'e'
  1171  00FEB3  72                 	db	114	;'r'
  1172  00FEB4  74                 	db	116	;'t'
  1173  00FEB5  20                 	db	32
  1174  00FEB6  64                 	db	100	;'d'
  1175  00FEB7  61                 	db	97	;'a'
  1176  00FEB8  74                 	db	116	;'t'
  1177  00FEB9  61                 	db	97	;'a'
  1178  00FEBA  2C                 	db	44
  1179  00FEBB  20                 	db	32
  1180  00FEBC  53                 	db	83	;'S'
  1181  00FEBD  74                 	db	116	;'t'
  1182  00FEBE  61                 	db	97	;'a'
  1183  00FEBF  63                 	db	99	;'c'
  1184  00FEC0  6B                 	db	107	;'k'
  1185  00FEC1  20                 	db	32
  1186  00FEC2  69                 	db	105	;'i'
  1187  00FEC3  73                 	db	115	;'s'
  1188  00FEC4  20                 	db	32
  1189  00FEC5  66                 	db	102	;'f'
  1190  00FEC6  75                 	db	117	;'u'
  1191  00FEC7  6C                 	db	108	;'l'
  1192  00FEC8  6C                 	db	108	;'l'
  1193  00FEC9  2E                 	db	46
  1194  00FECA  0A                 	db	10
  1195  00FECB  00                 	db	0
  1196  00FECC                     STR_8:
  1197  00FECC  0A                 	db	10
  1198  00FECD  54                 	db	84	;'T'
  1199  00FECE  68                 	db	104	;'h'
  1200  00FECF  65                 	db	101	;'e'
  1201  00FED0  20                 	db	32
  1202  00FED1  43                 	db	67	;'C'
  1203  00FED2  6C                 	db	108	;'l'
  1204  00FED3  6F                 	db	111	;'o'
  1205  00FED4  73                 	db	115	;'s'
  1206  00FED5  65                 	db	101	;'e'
  1207  00FED6  73                 	db	115	;'s'
  1208  00FED7  20                 	db	32
  1209  00FED8  6F                 	db	111	;'o'
  1210  00FED9  62                 	db	98	;'b'
  1211  00FEDA  6A                 	db	106	;'j'
  1212  00FEDB  65                 	db	101	;'e'
  1213  00FEDC  63                 	db	99	;'c'
  1214  00FEDD  74                 	db	116	;'t'
  1215  00FEDE  20                 	db	32
  1216  00FEDF  28                 	db	40
  1217  00FEE0  6D                 	db	109	;'m'
  1218  00FEE1  6D                 	db	109	;'m'
  1219  00FEE2  29                 	db	41
  1220  00FEE3  3A                 	db	58	;':'
  1221  00FEE4  20                 	db	32
  1222  00FEE5  25                 	db	37
  1223  00FEE6  64                 	db	100	;'d'
  1224  00FEE7  00                 	db	0
  1225  00FEE8  0A                 	db	10
  1226  00FEE9  53                 	db	83	;'S'
  1227  00FEEA  74                 	db	116	;'t'
  1228  00FEEB  65                 	db	101	;'e'
  1229  00FEEC  70                 	db	112	;'p'
  1230  00FEED  73                 	db	115	;'s'
  1231  00FEEE  20                 	db	32
  1232  00FEEF  54                 	db	84	;'T'
  1233  00FEF0  72                 	db	114	;'r'
  1234  00FEF1  61                 	db	97	;'a'
  1235  00FEF2  76                 	db	118	;'v'
  1236  00FEF3  65                 	db	101	;'e'
  1237  00FEF4  6C                 	db	108	;'l'
  1238  00FEF5  6C                 	db	108	;'l'
  1239  00FEF6  65                 	db	101	;'e'
  1240  00FEF7  64                 	db	100	;'d'
  1241  00FEF8  3A                 	db	58	;':'
  1242  00FEF9  20                 	db	32
  1243  00FEFA  25                 	db	37
  1244  00FEFB  64                 	db	100	;'d'
  1245  00FEFC  20                 	db	32
  1246  00FEFD  0A                 	db	10
  1247  00FEFE  0A                 	db	10
  1248  00FEFF  00                 	db	0
  1249  00FF00                     STR_11:
  1250  00FF00  0A                 	db	10
  1251  00FF01  53                 	db	83	;'S'
  1252  00FF02  74                 	db	116	;'t'
  1253  00FF03  65                 	db	101	;'e'
  1254  00FF04  70                 	db	112	;'p'
  1255  00FF05  73                 	db	115	;'s'
  1256  00FF06  20                 	db	32
  1257  00FF07  54                 	db	84	;'T'
  1258  00FF08  72                 	db	114	;'r'
  1259  00FF09  61                 	db	97	;'a'
  1260  00FF0A  76                 	db	118	;'v'
  1261  00FF0B  65                 	db	101	;'e'
  1262  00FF0C  6C                 	db	108	;'l'
  1263  00FF0D  6C                 	db	108	;'l'
  1264  00FF0E  65                 	db	101	;'e'
  1265  00FF0F  64                 	db	100	;'d'
  1266  00FF10  3A                 	db	58	;':'
  1267  00FF11  20                 	db	32
  1268  00FF12  25                 	db	37
  1269  00FF13  64                 	db	100	;'d'
  1270  00FF14  00                 	db	0
  1271  00FF15                     STR_7:
  1272  00FF15  53                 	db	83	;'S'
  1273  00FF16  74                 	db	116	;'t'
  1274  00FF17  65                 	db	101	;'e'
  1275  00FF18  70                 	db	112	;'p'
  1276  00FF19  70                 	db	112	;'p'
  1277  00FF1A  65                 	db	101	;'e'
  1278  00FF1B  64                 	db	100	;'d'
  1279  00FF1C  20                 	db	32
  1280  00FF1D  33                 	db	51	;'3'
  1281  00FF1E  36                 	db	54	;'6'
  1282  00FF1F  30                 	db	48	;'0'
  1283  00FF20  20                 	db	32
  1284  00FF21  64                 	db	100	;'d'
  1285  00FF22  65                 	db	101	;'e'
  1286  00FF23  67                 	db	103	;'g'
  1287  00FF24  72                 	db	114	;'r'
  1288  00FF25  65                 	db	101	;'e'
  1289  00FF26  65                 	db	101	;'e'
  1290  00FF27  73                 	db	115	;'s'
  1291  00FF28  00                 	db	0
  1292  00FF29                     STR_2:
  1293  00FF29  53                 	db	83	;'S'
  1294  00FF2A  65                 	db	101	;'e'
  1295  00FF2B  6E                 	db	110	;'n'
  1296  00FF2C  73                 	db	115	;'s'
  1297  00FF2D  6F                 	db	111	;'o'
  1298  00FF2E  72                 	db	114	;'r'
  1299  00FF2F  20                 	db	32
  1300  00FF30  4D                 	db	77	;'M'
  1301  00FF31  6F                 	db	111	;'o'
  1302  00FF32  76                 	db	118	;'v'
  1303  00FF33  69                 	db	105	;'i'
  1304  00FF34  6E                 	db	110	;'n'
  1305  00FF35  67                 	db	103	;'g'
  1306  00FF36  21                 	db	33
  1307  00FF37  20                 	db	32
  1308  00FF38  20                 	db	32
  1309  00FF39  20                 	db	32
  1310  00FF3A  0A                 	db	10
  1311  00FF3B  00                 	db	0
  1312  00FF3C                     STR_9:
  1313  00FF3C  0A                 	db	10
  1314  00FF3D  47                 	db	71	;'G'
  1315  00FF3E  6F                 	db	111	;'o'
  1316  00FF3F  69                 	db	105	;'i'
  1317  00FF40  6E                 	db	110	;'n'
  1318  00FF41  67                 	db	103	;'g'
  1319  00FF42  20                 	db	32
  1320  00FF43  62                 	db	98	;'b'
  1321  00FF44  61                 	db	97	;'a'
  1322  00FF45  63                 	db	99	;'c'
  1323  00FF46  6B                 	db	107	;'k'
  1324  00FF47  20                 	db	32
  1325  00FF48  74                 	db	116	;'t'
  1326  00FF49  6F                 	db	111	;'o'
  1327  00FF4A  3A                 	db	58	;':'
  1328  00FF4B  20                 	db	32
  1329  00FF4C  25                 	db	37
  1330  00FF4D  64                 	db	100	;'d'
  1331  00FF4E  00                 	db	0
  1332  00FF4F                     STR_5:
  1333  00FF4F  0A                 	db	10
  1334  00FF50  20                 	db	32
  1335  00FF51  46                 	db	70	;'F'
  1336  00FF52  6F                 	db	111	;'o'
  1337  00FF53  75                 	db	117	;'u'
  1338  00FF54  6E                 	db	110	;'n'
  1339  00FF55  64                 	db	100	;'d'
  1340  00FF56  20                 	db	32
  1341  00FF57  46                 	db	70	;'F'
  1342  00FF58  6C                 	db	108	;'l'
  1343  00FF59  61                 	db	97	;'a'
  1344  00FF5A  67                 	db	103	;'g'
  1345  00FF5B  3A                 	db	58	;':'
  1346  00FF5C  20                 	db	32
  1347  00FF5D  25                 	db	37
  1348  00FF5E  64                 	db	100	;'d'
  1349  00FF5F  00                 	db	0
  1350  00FF60                     STR_26:
  1351  00FF60  72                 	db	114	;'r'
  1352  00FF61  65                 	db	101	;'e'
  1353  00FF62  76                 	db	118	;'v'
  1354  00FF63  3A                 	db	58	;':'
  1355  00FF64  25                 	db	37
  1356  00FF65  64                 	db	100	;'d'
  1357  00FF66  20                 	db	32
  1358  00FF67  54                 	db	84	;'T'
  1359  00FF68  61                 	db	97	;'a'
  1360  00FF69  72                 	db	114	;'r'
  1361  00FF6A  3A                 	db	58	;':'
  1362  00FF6B  20                 	db	32
  1363  00FF6C  25                 	db	37
  1364  00FF6D  64                 	db	100	;'d'
  1365  00FF6E  0A                 	db	10
  1366  00FF6F  00                 	db	0
  1367  00FF70                     STR_13:
  1368  00FF70  52                 	db	82	;'R'
  1369  00FF71  6F                 	db	111	;'o'
  1370  00FF72  62                 	db	98	;'b'
  1371  00FF73  6F                 	db	111	;'o'
  1372  00FF74  74                 	db	116	;'t'
  1373  00FF75  20                 	db	32
  1374  00FF76  52                 	db	82	;'R'
  1375  00FF77  65                 	db	101	;'e'
  1376  00FF78  61                 	db	97	;'a'
  1377  00FF79  64                 	db	100	;'d'
  1378  00FF7A  79                 	db	121	;'y'
  1379  00FF7B  21                 	db	33
  1380  00FF7C  20                 	db	32
  1381  00FF7D  0A                 	db	10
  1382  00FF7E  0A                 	db	10
  1383  00FF7F  00                 	db	0
  1384  00FF80                     STR_24:
  1385  00FF80  57                 	db	87	;'W'
  1386  00FF81  41                 	db	65	;'A'
  1387  00FF82  4C                 	db	76	;'L'
  1388  00FF83  4C                 	db	76	;'L'
  1389  00FF84  20                 	db	32
  1390  00FF85  46                 	db	70	;'F'
  1391  00FF86  4F                 	db	79	;'O'
  1392  00FF87  55                 	db	85	;'U'
  1393  00FF88  4E                 	db	78	;'N'
  1394  00FF89  44                 	db	68	;'D'
  1395  00FF8A  0A                 	db	10
  1396  00FF8B  00                 	db	0
  1397  00FF8C                     STR_32:
  1398  00FF8C  58                 	db	88	;'X'
  1399  00FF8D  3D                 	db	61	;'='
  1400  00FF8E  25                 	db	37
  1401  00FF8F  64                 	db	100	;'d'
  1402  00FF90  2C                 	db	44
  1403  00FF91  20                 	db	32
  1404  00FF92  59                 	db	89	;'Y'
  1405  00FF93  3D                 	db	61	;'='
  1406  00FF94  25                 	db	37
  1407  00FF95  64                 	db	100	;'d'
  1408  00FF96  0A                 	db	10
  1409  00FF97  00                 	db	0
  1410  00FF98                     STR_34:
  1411  00FF98  6E                 	db	110	;'n'
  1412  00FF99  6F                 	db	111	;'o'
  1413  00FF9A  20                 	db	32
  1414  00FF9B  6F                 	db	111	;'o'
  1415  00FF9C  70                 	db	112	;'p'
  1416  00FF9D  74                 	db	116	;'t'
  1417  00FF9E  69                 	db	105	;'i'
  1418  00FF9F  6F                 	db	111	;'o'
  1419  00FFA0  6E                 	db	110	;'n'
  1420  00FFA1  73                 	db	115	;'s'
  1421  00FFA2  0A                 	db	10
  1422  00FFA3  00                 	db	0
  1423  00FFA4                     STR_23:
  1424  00FFA4  0A                 	db	10
  1425  00FFA5  4E                 	db	78	;'N'
  1426  00FFA6  4F                 	db	79	;'O'
  1427  00FFA7  54                 	db	84	;'T'
  1428  00FFA8  48                 	db	72	;'H'
  1429  00FFA9  49                 	db	73	;'I'
  1430  00FFAA  4E                 	db	78	;'N'
  1431  00FFAB  47                 	db	71	;'G'
  1432  00FFAC  21                 	db	33
  1433  00FFAD  21                 	db	33
  1434  00FFAE  21                 	db	33
  1435  00FFAF  00                 	db	0
  1436  00FFB0                     STR_4:
  1437  00FFB0  0A                 	db	10
  1438  00FFB1  41                 	db	65	;'A'
  1439  00FFB2  44                 	db	68	;'D'
  1440  00FFB3  43                 	db	67	;'C'
  1441  00FFB4  3A                 	db	58	;':'
  1442  00FFB5  20                 	db	32
  1443  00FFB6  25                 	db	37
  1444  00FFB7  64                 	db	100	;'d'
  1445  00FFB8  20                 	db	32
  1446  00FFB9  0A                 	db	10
  1447  00FFBA  0A                 	db	10
  1448  00FFBB  00                 	db	0
  1449  00FFBC                     STR_19:
  1450  00FFBC  47                 	db	71	;'G'
  1451  00FFBD  6F                 	db	111	;'o'
  1452  00FFBE  69                 	db	105	;'i'
  1453  00FFBF  6E                 	db	110	;'n'
  1454  00FFC0  67                 	db	103	;'g'
  1455  00FFC1  20                 	db	32
  1456  00FFC2  48                 	db	72	;'H'
  1457  00FFC3  6F                 	db	111	;'o'
  1458  00FFC4  6D                 	db	109	;'m'
  1459  00FFC5  65                 	db	101	;'e'
  1460  00FFC6  00                 	db	0
  1461  00FFC7                     STR_30:
  1462  00FFC7  0A                 	db	10
  1463  00FFC8  53                 	db	83	;'S'
  1464  00FFC9  74                 	db	116	;'t'
  1465  00FFCA  65                 	db	101	;'e'
  1466  00FFCB  70                 	db	112	;'p'
  1467  00FFCC  73                 	db	115	;'s'
  1468  00FFCD  20                 	db	32
  1469  00FFCE  25                 	db	37
  1470  00FFCF  64                 	db	100	;'d'
  1471  00FFD0  00                 	db	0
  1472  00FFD1                     STR_15:
  1473  00FFD1  0A                 	db	10
  1474  00FFD2  20                 	db	32
  1475  00FFD3  20                 	db	32
  1476  00FFD4  20                 	db	32
  1477  00FFD5  20                 	db	32
  1478  00FFD6  20                 	db	32
  1479  00FFD7  20                 	db	32
  1480  00FFD8  20                 	db	32
  1481  00FFD9  0A                 	db	10
  1482  00FFDA  00                 	db	0
  1483  00FFDB                     STR_31:
  1484  00FFDB  0A                 	db	10
  1485  00FFDC  46                 	db	70	;'F'
  1486  00FFDD  6C                 	db	108	;'l'
  1487  00FFDE  61                 	db	97	;'a'
  1488  00FFDF  67                 	db	103	;'g'
  1489  00FFE0  20                 	db	32
  1490  00FFE1  25                 	db	37
  1491  00FFE2  64                 	db	100	;'d'
  1492  00FFE3  00                 	db	0
  1493  00FFE4                     STR_20:
  1494  00FFE4  48                 	db	72	;'H'
  1495  00FFE5  4F                 	db	79	;'O'
  1496  00FFE6  4D                 	db	77	;'M'
  1497  00FFE7  45                 	db	69	;'E'
  1498  00FFE8  21                 	db	33
  1499  00FFE9  21                 	db	33
  1500  00FFEA  21                 	db	33
  1501  00FFEB  40                 	db	64	;'@'
  1502  00FFEC  00                 	db	0
  1503  00FFED                     STR_16:
  1504  00FFED  76                 	db	118	;'v'
  1505  00FFEE  63                 	db	99	;'c'
  1506  00FFEF  3A                 	db	58	;':'
  1507  00FFF0  20                 	db	32
  1508  00FFF1  25                 	db	37
  1509  00FFF2  64                 	db	100	;'d'
  1510  00FFF3  0A                 	db	10
  1511  00FFF4  00                 	db	0
  1512  00FFF5                     STR_33:
  1513  00FFF5  26                 	db	38
  1514  00FFF6  26                 	db	38
  1515  00FFF7  26                 	db	38
  1516  00FFF8  26                 	db	38
  1517  00FFF9  26                 	db	38
  1518  00FFFA  0A                 	db	10
  1519  00FFFB  00                 	db	0
  1520  00FFFC                     STR_1:
  1521  00FFFC  25                 	db	37
  1522  00FFFD  63                 	db	99	;'c'
  1523  00FFFE  00                 	db	0
  1524  0000                     
  1525                           ; #config settings
  1526  00FFFF  00                 	db	0	; dummy byte at the end
  1527  0000                     
  1528                           	psect	cinit
  1529  016FD2                     __pcinit:
  1530                           	opt stack 0
  1531  016FD2                     start_initialization:
  1532                           	opt stack 0
  1533  016FD2                     __initialization:
  1534                           	opt stack 0
  1535                           
  1536                           ; Initialize objects allocated to BANK1 (32 bytes)
  1537                           ; load TBLPTR registers with __pidataBANK1
  1538  016FD2  0E40               	movlw	low __pidataBANK1
  1539  016FD4  6EF6               	movwf	tblptrl,c
  1540  016FD6  0E89               	movlw	high __pidataBANK1
  1541  016FD8  6EF7               	movwf	tblptrh,c
  1542  016FDA  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1543  016FDC  6EF8               	movwf	tblptru,c
  1544  016FDE  EE01  F0C8         	lfsr	0,__pdataBANK1
  1545  016FE2  EE10 F020          	lfsr	1,32
  1546  016FE6                     copy_data0:
  1547  016FE6  0009               	tblrd		*+
  1548  016FE8  CFF5 FFEE          	movff	tablat,postinc0
  1549  016FEC  50E5               	movf	postdec1,w,c
  1550  016FEE  50E1               	movf	fsr1l,w,c
  1551  016FF0  E1FA               	bnz	copy_data0
  1552                           
  1553                           ; Initialize objects allocated to COMRAM (9 bytes)
  1554                           ; load TBLPTR registers with __pidataCOMRAM
  1555  016FF2  0EB0               	movlw	low __pidataCOMRAM
  1556  016FF4  6EF6               	movwf	tblptrl,c
  1557  016FF6  0E8C               	movlw	high __pidataCOMRAM
  1558  016FF8  6EF7               	movwf	tblptrh,c
  1559  016FFA  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1560  016FFC  6EF8               	movwf	tblptru,c
  1561  016FFE  EE00  F048         	lfsr	0,__pdataCOMRAM
  1562  017002  EE10 F009          	lfsr	1,9
  1563  017006                     copy_data1:
  1564  017006  0009               	tblrd		*+
  1565  017008  CFF5 FFEE          	movff	tablat,postinc0
  1566  01700C  50E5               	movf	postdec1,w,c
  1567  01700E  50E1               	movf	fsr1l,w,c
  1568  017010  E1FA               	bnz	copy_data1
  1569                           
  1570                           ; Clear objects allocated to BIGRAM (300 bytes)
  1571  017012  EE04  F046         	lfsr	0,__pbssBIGRAM
  1572  017016  EE11 F02C          	lfsr	1,300
  1573  01701A                     clear_0:
  1574  01701A  6AEE               	clrf	postinc0,c
  1575  01701C  50E5               	movf	postdec1,w,c
  1576  01701E  50E1               	movf	fsr1l,w,c
  1577  017020  E1FC               	bnz	clear_0
  1578  017022  50E2               	movf	fsr1h,w,c
  1579  017024  E1FA               	bnz	clear_0
  1580                           
  1581                           ; Clear objects allocated to BANK4 (70 bytes)
  1582  017026  EE04  F000         	lfsr	0,__pbssBANK4
  1583  01702A  0E46               	movlw	70
  1584  01702C                     clear_1:
  1585  01702C  6AEE               	clrf	postinc0,c
  1586  01702E  06E8               	decf	wreg,f,c
  1587  017030  E1FD               	bnz	clear_1
  1588                           
  1589                           ; Clear objects allocated to BANK3 (200 bytes)
  1590  017032  EE03  F000         	lfsr	0,__pbssBANK3
  1591  017036  0EC8               	movlw	200
  1592  017038                     clear_2:
  1593  017038  6AEE               	clrf	postinc0,c
  1594  01703A  06E8               	decf	wreg,f,c
  1595  01703C  E1FD               	bnz	clear_2
  1596                           
  1597                           ; Clear objects allocated to BANK2 (199 bytes)
  1598  01703E  EE02  F000         	lfsr	0,__pbssBANK2
  1599  017042  0EC7               	movlw	199
  1600  017044                     clear_3:
  1601  017044  6AEE               	clrf	postinc0,c
  1602  017046  06E8               	decf	wreg,f,c
  1603  017048  E1FD               	bnz	clear_3
  1604                           
  1605                           ; Clear objects allocated to BANK1 (200 bytes)
  1606  01704A  EE01  F000         	lfsr	0,__pbssBANK1
  1607  01704E  0EC8               	movlw	200
  1608  017050                     clear_4:
  1609  017050  6AEE               	clrf	postinc0,c
  1610  017052  06E8               	decf	wreg,f,c
  1611  017054  E1FD               	bnz	clear_4
  1612                           
  1613                           ; Clear objects allocated to COMRAM (31 bytes)
  1614  017056  EE00  F029         	lfsr	0,__pbssCOMRAM
  1615  01705A  0E1F               	movlw	31
  1616  01705C                     clear_5:
  1617  01705C  6AEE               	clrf	postinc0,c
  1618  01705E  06E8               	decf	wreg,f,c
  1619  017060  E1FD               	bnz	clear_5
  1620  017062                     end_of_initialization:
  1621                           	opt stack 0
  1622  017062                     __end_of__initialization:
  1623                           	opt stack 0
  1624  017062  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1625  017064  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1626  017066  0100               	movlb	0
  1627  017068  EF15  F099         	goto	_main	;jump to C main() function
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           postinc0	equ	0xFEE
  1633                           wreg	equ	0xFE8
  1634                           postdec1	equ	0xFE5
  1635                           fsr1h	equ	0xFE2
  1636                           fsr1l	equ	0xFE1
  1637                           
  1638                           	psect	bssCOMRAM
  1639  000029                     __pbssCOMRAM:
  1640                           	opt stack 0
  1641  000029                     _lQueue:
  1642                           	opt stack 0
  1643  000029                     	ds	3
  1644  00002C                     _flag:
  1645                           	opt stack 0
  1646  00002C                     	ds	2
  1647  00002E                     _average:
  1648                           	opt stack 0
  1649  00002E                     	ds	2
  1650  000030                     _readIndex:
  1651                           	opt stack 0
  1652  000030                     	ds	2
  1653  000032                     _Found_Flag:
  1654                           	opt stack 0
  1655  000032                     	ds	2
  1656  000034                     _pShiftVal:
  1657                           	opt stack 0
  1658  000034                     	ds	2
  1659  000036                     _COUNTER:
  1660                           	opt stack 0
  1661  000036                     	ds	2
  1662  000038                     _lMotor:
  1663                           	opt stack 0
  1664  000038                     	ds	2
  1665  00003A                     _lCurrent:
  1666                           	opt stack 0
  1667  00003A                     	ds	2
  1668  00003C                     Event_TestButton@j:
  1669                           	opt stack 0
  1670  00003C                     	ds	1
  1671  00003D                     Timer2_Init@PRE:
  1672                           	opt stack 0
  1673  00003D                     	ds	1
  1674  00003E                     Timer2_Init@INDEX:
  1675                           	opt stack 0
  1676  00003E                     	ds	1
  1677  00003F                     Timer0_Init@PRE:
  1678                           	opt stack 0
  1679  00003F                     	ds	1
  1680  000040                     _INDEX:
  1681                           	opt stack 0
  1682  000040                     	ds	1
  1683  000041                     rand@screw:
  1684                           	opt stack 0
  1685  000041                     	ds	1
  1686  000042                     OutSeg@a:
  1687                           	opt stack 0
  1688  000042                     	ds	1
  1689  000043                     OutSeg@segset:
  1690                           	opt stack 0
  1691  000043                     	ds	1
  1692  000044                     OutSeg@cur:
  1693                           	opt stack 0
  1694  000044                     	ds	1
  1695  000045                     _lBufferY:
  1696                           	opt stack 0
  1697  000045                     	ds	1
  1698  000046                     _lBufferX:
  1699                           	opt stack 0
  1700  000046                     	ds	1
  1701  000047                     _clearall:
  1702                           	opt stack 0
  1703  000047                     	ds	1
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           postinc0	equ	0xFEE
  1709                           wreg	equ	0xFE8
  1710                           postdec1	equ	0xFE5
  1711                           fsr1h	equ	0xFE2
  1712                           fsr1l	equ	0xFE1
  1713                           
  1714                           	psect	dataCOMRAM
  1715  000048                     __pdataCOMRAM:
  1716                           	opt stack 0
  1717  000048                     _gCursor:
  1718                           	opt stack 0
  1719  000048                     	ds	4
  1720  00004C                     _Bus_State:
  1721                           	opt stack 0
  1722  00004C                     	ds	1
  1723  00004D                     _change:
  1724                           	opt stack 0
  1725  00004D                     	ds	1
  1726  00004E                     	ds	1
  1727  00004F                     _l:
  1728                           	opt stack 0
  1729  00004F                     	ds	1
  1730  000050                     _w:
  1731                           	opt stack 0
  1732  000050                     	ds	1
  1733                           tblptru	equ	0xFF8
  1734                           tblptrh	equ	0xFF7
  1735                           tblptrl	equ	0xFF6
  1736                           tablat	equ	0xFF5
  1737                           postinc0	equ	0xFEE
  1738                           wreg	equ	0xFE8
  1739                           postdec1	equ	0xFE5
  1740                           fsr1h	equ	0xFE2
  1741                           fsr1l	equ	0xFE1
  1742                           
  1743                           	psect	bssBANK1
  1744  000100                     __pbssBANK1:
  1745                           	opt stack 0
  1746  000100                     Timer2_Init@DIV:
  1747                           	opt stack 0
  1748  000100                     	ds	4
  1749  000104                     Timer0_Init@DIV:
  1750                           	opt stack 0
  1751  000104                     	ds	4
  1752  000108                     _gISR:
  1753                           	opt stack 0
  1754  000108                     	ds	3
  1755  00010B                     _lStepFunction:
  1756                           	opt stack 0
  1757  00010B                     	ds	3
  1758  00010E                     _I2C2_More:
  1759                           	opt stack 0
  1760  00010E                     	ds	3
  1761  000111                     _I2C1_More:
  1762                           	opt stack 0
  1763  000111                     	ds	3
  1764  000114                     _I2C2_Done:
  1765                           	opt stack 0
  1766  000114                     	ds	3
  1767  000117                     _I2C1_Done:
  1768                           	opt stack 0
  1769  000117                     	ds	3
  1770  00011A                     _errno:
  1771                           	opt stack 0
  1772  00011A                     	ds	2
  1773  00011C                     _test:
  1774                           	opt stack 0
  1775  00011C                     	ds	2
  1776  00011E                     _timercount:
  1777                           	opt stack 0
  1778  00011E                     	ds	2
  1779  000120                     _Sensor_Observe_Fin:
  1780                           	opt stack 0
  1781  000120                     	ds	2
  1782  000122                     _CW_Count:
  1783                           	opt stack 0
  1784  000122                     	ds	2
  1785  000124                     _CCW_Count:
  1786                           	opt stack 0
  1787  000124                     	ds	2
  1788  000126                     _count:
  1789                           	opt stack 0
  1790  000126                     	ds	2
  1791  000128                     _Close_Pos:
  1792                           	opt stack 0
  1793  000128                     	ds	2
  1794  00012A                     _ADC_Reading:
  1795                           	opt stack 0
  1796  00012A                     	ds	2
  1797  00012C                     _BumpState:
  1798                           	opt stack 0
  1799  00012C                     	ds	2
  1800  00012E                     _mod:
  1801                           	opt stack 0
  1802  00012E                     	ds	2
  1803  000130                     _Square_Dist:
  1804                           	opt stack 0
  1805  000130                     	ds	2
  1806  000132                     _T_VAR:
  1807                           	opt stack 0
  1808  000132                     	ds	2
  1809  000134                     _VictimCount:
  1810                           	opt stack 0
  1811  000134                     	ds	2
  1812  000136                     _Previous_Angle:
  1813                           	opt stack 0
  1814  000136                     	ds	2
  1815  000138                     _k:
  1816                           	opt stack 0
  1817  000138                     	ds	2
  1818  00013A                     _Y_Pos:
  1819                           	opt stack 0
  1820  00013A                     	ds	2
  1821  00013C                     _X_Pos:
  1822                           	opt stack 0
  1823  00013C                     	ds	2
  1824  00013E                     _x:
  1825                           	opt stack 0
  1826  00013E                     	ds	2
  1827  000140                     _total:
  1828                           	opt stack 0
  1829  000140                     	ds	2
  1830  000142                     _thisReading:
  1831                           	opt stack 0
  1832  000142                     	ds	2
  1833  000144                     _Steps:
  1834                           	opt stack 0
  1835  000144                     	ds	2
  1836  000146                     _Motor_Count:
  1837                           	opt stack 0
  1838  000146                     	ds	2
  1839  000148                     _mode:
  1840                           	opt stack 0
  1841  000148                     	ds	2
  1842  00014A                     _Current_Dist2:
  1843                           	opt stack 0
  1844  00014A                     	ds	2
  1845  00014C                     _Current_Dist1:
  1846                           	opt stack 0
  1847  00014C                     	ds	2
  1848  00014E                     _Current_Dist:
  1849                           	opt stack 0
  1850  00014E                     	ds	2
  1851  000150                     _val:
  1852                           	opt stack 0
  1853  000150                     	ds	2
  1854  000152                     HMI_GRender@a:
  1855                           	opt stack 0
  1856  000152                     	ds	2
  1857  000154                     _gBackcolour:
  1858                           	opt stack 0
  1859  000154                     	ds	2
  1860  000156                     SPI_Send9@dat:
  1861                           	opt stack 0
  1862  000156                     	ds	2
  1863  000158                     _Cliff_Left:
  1864                           	opt stack 0
  1865  000158                     	ds	1
  1866  000159                     _Cliff_Right:
  1867                           	opt stack 0
  1868  000159                     	ds	1
  1869  00015A                     _Cliff_FLeft:
  1870                           	opt stack 0
  1871  00015A                     	ds	1
  1872  00015B                     _Cliff_FRight:
  1873                           	opt stack 0
  1874  00015B                     	ds	1
  1875  00015C                     _BumpSensor:
  1876                           	opt stack 0
  1877  00015C                     	ds	1
  1878  00015D                     _u:
  1879                           	opt stack 0
  1880  00015D                     	ds	1
  1881  00015E                     _j:
  1882                           	opt stack 0
  1883  00015E                     	ds	1
  1884  00015F                     _i:
  1885                           	opt stack 0
  1886  00015F                     	ds	1
  1887  000160                     _ADC_Initialised:
  1888                           	opt stack 0
  1889  000160                     	ds	1
  1890  000161                     _SPI2:
  1891                           	opt stack 0
  1892  000161                     	ds	11
  1893  00016C                     _PortE:
  1894                           	opt stack 0
  1895  00016C                     	ds	10
  1896  000176                     _PortD:
  1897                           	opt stack 0
  1898  000176                     	ds	10
  1899  000180                     _PortB:
  1900                           	opt stack 0
  1901  000180                     	ds	10
  1902  00018A                     _PortC:
  1903                           	opt stack 0
  1904  00018A                     	ds	10
  1905  000194                     _PortF:
  1906                           	opt stack 0
  1907  000194                     	ds	10
  1908  00019E                     _I2C2T:
  1909                           	opt stack 0
  1910  00019E                     	ds	7
  1911  0001A5                     _I2C1T:
  1912                           	opt stack 0
  1913  0001A5                     	ds	7
  1914  0001AC                     _ADC_AN3:
  1915                           	opt stack 0
  1916  0001AC                     	ds	5
  1917  0001B1                     _ADC_AN2:
  1918                           	opt stack 0
  1919  0001B1                     	ds	5
  1920  0001B6                     _ADC_AN1:
  1921                           	opt stack 0
  1922  0001B6                     	ds	5
  1923  0001BB                     _ADC_AN0:
  1924                           	opt stack 0
  1925  0001BB                     	ds	5
  1926  0001C0                     LCD_DrawRectangle@p4:
  1927                           	opt stack 0
  1928  0001C0                     	ds	4
  1929  0001C4                     LCD_DrawRectangle@p2:
  1930                           	opt stack 0
  1931  0001C4                     	ds	4
  1932                           tblptru	equ	0xFF8
  1933                           tblptrh	equ	0xFF7
  1934                           tblptrl	equ	0xFF6
  1935                           tablat	equ	0xFF5
  1936                           postinc0	equ	0xFEE
  1937                           wreg	equ	0xFE8
  1938                           postdec1	equ	0xFE5
  1939                           fsr1h	equ	0xFE2
  1940                           fsr1l	equ	0xFE1
  1941                           
  1942                           	psect	dataBANK1
  1943  0001C8                     __pdataBANK1:
  1944                           	opt stack 0
  1945  0001C8                     Console_Render@F6956:
  1946                           	opt stack 0
  1947  0001C8                     	ds	4
  1948  0001CC                     _gLineSize:
  1949                           	opt stack 0
  1950  0001CC                     	ds	4
  1951  0001D0                     _gCharSize:
  1952                           	opt stack 0
  1953  0001D0                     	ds	4
  1954  0001D4                     _countOff:
  1955                           	opt stack 0
  1956  0001D4                     	ds	2
  1957  0001D6                     _countOn:
  1958                           	opt stack 0
  1959  0001D6                     	ds	2
  1960  0001D8                     _Low_Sensor:
  1961                           	opt stack 0
  1962  0001D8                     	ds	2
  1963  0001DA                     _Desired_Level:
  1964                           	opt stack 0
  1965  0001DA                     	ds	2
  1966  0001DC                     _Spd:
  1967                           	opt stack 0
  1968  0001DC                     	ds	2
  1969  0001DE                     _numReadings:
  1970                           	opt stack 0
  1971  0001DE                     	ds	2
  1972  0001E0                     _top:
  1973                           	opt stack 0
  1974  0001E0                     	ds	2
  1975  0001E2                     _Current_Direction:
  1976                           	opt stack 0
  1977  0001E2                     	ds	2
  1978  0001E4                     _gForecolour:
  1979                           	opt stack 0
  1980  0001E4                     	ds	2
  1981  0001E6                     	ds	1
  1982  0001E7                     	ds	1
  1983                           tblptru	equ	0xFF8
  1984                           tblptrh	equ	0xFF7
  1985                           tblptrl	equ	0xFF6
  1986                           tablat	equ	0xFF5
  1987                           postinc0	equ	0xFEE
  1988                           wreg	equ	0xFE8
  1989                           postdec1	equ	0xFE5
  1990                           fsr1h	equ	0xFE2
  1991                           fsr1l	equ	0xFE1
  1992                           
  1993                           	psect	bssBANK2
  1994  000200                     __pbssBANK2:
  1995                           	opt stack 0
  1996  000200                     _stack:
  1997                           	opt stack 0
  1998  000200                     	ds	40
  1999  000228                     _lCBuffer:
  2000                           	opt stack 0
  2001  000228                     	ds	30
  2002  000246                     _readings:
  2003                           	opt stack 0
  2004  000246                     	ds	20
  2005  00025A                     _HMIBoard:
  2006                           	opt stack 0
  2007  00025A                     	ds	58
  2008  000294                     _SPI1:
  2009                           	opt stack 0
  2010  000294                     	ds	11
  2011  00029F                     _DIPSwitch:
  2012                           	opt stack 0
  2013  00029F                     	ds	10
  2014  0002A9                     _TestButton:
  2015                           	opt stack 0
  2016  0002A9                     	ds	10
  2017  0002B3                     _PortG:
  2018                           	opt stack 0
  2019  0002B3                     	ds	10
  2020  0002BD                     _PortA:
  2021                           	opt stack 0
  2022  0002BD                     	ds	10
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           postinc0	equ	0xFEE
  2028                           wreg	equ	0xFE8
  2029                           postdec1	equ	0xFE5
  2030                           fsr1h	equ	0xFE2
  2031                           fsr1l	equ	0xFE1
  2032                           
  2033                           	psect	bssBANK3
  2034  000300                     __pbssBANK3:
  2035                           	opt stack 0
  2036  000300                     _maze:
  2037                           	opt stack 0
  2038  000300                     	ds	200
  2039                           tblptru	equ	0xFF8
  2040                           tblptrh	equ	0xFF7
  2041                           tblptrl	equ	0xFF6
  2042                           tablat	equ	0xFF5
  2043                           postinc0	equ	0xFEE
  2044                           wreg	equ	0xFE8
  2045                           postdec1	equ	0xFE5
  2046                           fsr1h	equ	0xFE2
  2047                           fsr1l	equ	0xFE1
  2048                           
  2049                           	psect	bssBANK4
  2050  000400                     __pbssBANK4:
  2051                           	opt stack 0
  2052  000400                     Console_MakeField@Fill:
  2053                           	opt stack 0
  2054  000400                     	ds	70
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           
  2065                           	psect	bssBIGRAM
  2066  000446                     __pbssBIGRAM:
  2067                           	opt stack 0
  2068  000446                     _lBuffer:
  2069                           	opt stack 0
  2070  000446                     	ds	300
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1h	equ	0xFE2
  2079                           fsr1l	equ	0xFE1
  2080                           
  2081                           	psect	cstackBANK2
  2082  0002C7                     __pcstackBANK2:
  2083                           	opt stack 0
  2084  0002C7                     ??_Navigate_Maze:
  2085                           
  2086                           ; 1 bytes @ 0x0
  2087  0002C7                     	ds	4
  2088  0002CB                     ??_main:
  2089                           
  2090                           ; 1 bytes @ 0x4
  2091  0002CB                     	ds	4
  2092  0002CF                     main@down:
  2093                           	opt stack 0
  2094                           
  2095                           ; 1 bytes @ 0x8
  2096  0002CF                     	ds	1
  2097  0002D0                     main@right:
  2098                           	opt stack 0
  2099                           
  2100                           ; 1 bytes @ 0x9
  2101  0002D0                     	ds	1
  2102  0002D1                     main@left:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0xA
  2106  0002D1                     	ds	1
  2107  0002D2                     main@up:
  2108                           	opt stack 0
  2109                           
  2110                           ; 1 bytes @ 0xB
  2111  0002D2                     	ds	1
  2112                           tblptru	equ	0xFF8
  2113                           tblptrh	equ	0xFF7
  2114                           tblptrl	equ	0xFF6
  2115                           tablat	equ	0xFF5
  2116                           postinc0	equ	0xFEE
  2117                           wreg	equ	0xFE8
  2118                           postdec1	equ	0xFE5
  2119                           fsr1h	equ	0xFE2
  2120                           fsr1l	equ	0xFE1
  2121                           
  2122                           	psect	cstackBANK1
  2123  0001E8                     __pcstackBANK1:
  2124                           	opt stack 0
  2125  0001E8                     Travel@Dir:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x0
  2129  0001E8                     	ds	2
  2130  0001EA                     Travel@spd1:
  2131                           	opt stack 0
  2132                           
  2133                           ; 2 bytes @ 0x2
  2134  0001EA                     	ds	2
  2135  0001EC                     Travel@spd2:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x4
  2139  0001EC                     	ds	2
  2140  0001EE                     Travel@rev_Dist:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x6
  2144  0001EE                     	ds	2
  2145  0001F0                     Travel@Prev_Angle:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x8
  2149  0001F0                     	ds	1
  2150  0001F1                     Travel@Dist_Travelled:
  2151                           	opt stack 0
  2152                           
  2153                           ; 2 bytes @ 0x9
  2154  0001F1                     	ds	2
  2155  0001F3                     Travel@Req_Dir:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0xB
  2159  0001F3                     	ds	2
  2160  0001F5                     Travel@error:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0xD
  2164  0001F5                     	ds	2
  2165  0001F7                     Go_Backward@direction:
  2166                           	opt stack 0
  2167                           
  2168                           ; 2 bytes @ 0xF
  2169  0001F7                     	ds	2
  2170  0001F9                     Go_Backward@spd:
  2171                           	opt stack 0
  2172                           
  2173                           ; 2 bytes @ 0x11
  2174  0001F9                     	ds	2
  2175  0001FB                     ??_Go_Backward:
  2176                           
  2177                           ; 1 bytes @ 0x13
  2178  0001FB                     	ds	2
  2179  0001FD                     Navigate_Maze@Direction:
  2180                           	opt stack 0
  2181                           
  2182                           ; 2 bytes @ 0x15
  2183  0001FD                     	ds	2
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           postinc0	equ	0xFEE
  2189                           wreg	equ	0xFE8
  2190                           postdec1	equ	0xFE5
  2191                           fsr1h	equ	0xFE2
  2192                           fsr1l	equ	0xFE1
  2193                           
  2194                           	psect	cstackBANK0
  2195  000060                     __pcstackBANK0:
  2196                           	opt stack 0
  2197  000060                     ??_Console_ClearCursor:
  2198  000060                     ??_InitADC:
  2199  000060                     ??_Console_Init:
  2200  000060                     ??_Console_NewLine:
  2201  000060                     ??_Console_FormFeed:
  2202  000060                     ??_HMI_SetButton:
  2203  000060                     ?_GetPortProperties:
  2204                           	opt stack 0
  2205  000060                     ?_GetPortPORT:
  2206                           	opt stack 0
  2207  000060                     ?_GetPortTRIS:
  2208                           	opt stack 0
  2209  000060                     ?_FunctReadADC:
  2210                           	opt stack 0
  2211  000060                     ?___wmul:
  2212                           	opt stack 0
  2213  000060                     ?___awdiv:
  2214                           	opt stack 0
  2215  000060                     ?___lwdiv:
  2216                           	opt stack 0
  2217  000060                     ?___fldiv:
  2218                           	opt stack 0
  2219  000060                     ?_frexp:
  2220                           	opt stack 0
  2221  000060                     ?___lldiv:
  2222                           	opt stack 0
  2223  000060                     ?___xxtofl:
  2224                           	opt stack 0
  2225  000060                     Mode_Set@pMode:
  2226                           	opt stack 0
  2227  000060                     ToSegment@pCHR:
  2228                           	opt stack 0
  2229  000060                     HMI_SetBar@pValue:
  2230                           	opt stack 0
  2231  000060                     eusartSend@sendChar:
  2232                           	opt stack 0
  2233  000060                     Port_GetPin@pInput:
  2234                           	opt stack 0
  2235  000060                     Port_GetQuad@pInput:
  2236                           	opt stack 0
  2237  000060                     SPI_DisableISR@pInput:
  2238                           	opt stack 0
  2239  000060                     SPI_DCS@pInput:
  2240                           	opt stack 0
  2241  000060                     SPI_Send@pInput:
  2242                           	opt stack 0
  2243  000060                     Byte_SetBit@pInput:
  2244                           	opt stack 0
  2245  000060                     Byte_GetBit@pInput:
  2246                           	opt stack 0
  2247  000060                     Byte_SetZone@pInput:
  2248                           	opt stack 0
  2249  000060                     Byte_GetZone@pInput:
  2250                           	opt stack 0
  2251  000060                     Byte_SetByte@pInput:
  2252                           	opt stack 0
  2253  000060                     delay_ms@ms:
  2254                           	opt stack 0
  2255  000060                     delay_us@us:
  2256                           	opt stack 0
  2257  000060                     reverse@input:
  2258                           	opt stack 0
  2259  000060                     FunctReadADC@channel:
  2260                           	opt stack 0
  2261  000060                     ___wmul@multiplier:
  2262                           	opt stack 0
  2263  000060                     ___awdiv@dividend:
  2264                           	opt stack 0
  2265  000060                     ___lwdiv@dividend:
  2266                           	opt stack 0
  2267  000060                     MXK_Queue@pCallback:
  2268                           	opt stack 0
  2269  000060                     ___flge@ff1:
  2270                           	opt stack 0
  2271  000060                     ___lldiv@dividend:
  2272                           	opt stack 0
  2273  000060                     ___fldiv@b:
  2274                           	opt stack 0
  2275  000060                     ___xxtofl@val:
  2276                           	opt stack 0
  2277  000060                     frexp@value:
  2278                           	opt stack 0
  2279                           
  2280                           ; 4 bytes @ 0x0
  2281  000060                     	ds	1
  2282  000061                     ?_UpdateDistance:
  2283                           	opt stack 0
  2284  000061                     ?_Get_VirtualWall_State:
  2285                           	opt stack 0
  2286  000061                     HMI_SetSegments@pString:
  2287                           	opt stack 0
  2288  000061                     Drive@SpeedL:
  2289                           	opt stack 0
  2290  000061                     Turn@Angle:
  2291                           	opt stack 0
  2292                           
  2293                           ; 2 bytes @ 0x1
  2294  000061                     	ds	1
  2295  000062                     GetPortProperties@pInput:
  2296                           	opt stack 0
  2297  000062                     GetPortPORT@pInput:
  2298                           	opt stack 0
  2299  000062                     GetPortTRIS@pInput:
  2300                           	opt stack 0
  2301  000062                     Port_GetPin@pPin:
  2302                           	opt stack 0
  2303  000062                     Port_GetQuad@pQuad:
  2304                           	opt stack 0
  2305  000062                     SPI_Send@pData:
  2306                           	opt stack 0
  2307  000062                     Byte_SetBit@pBit:
  2308                           	opt stack 0
  2309  000062                     Byte_GetBit@pBit:
  2310                           	opt stack 0
  2311  000062                     Byte_SetZone@pMax:
  2312                           	opt stack 0
  2313  000062                     Byte_GetZone@pMax:
  2314                           	opt stack 0
  2315  000062                     Byte_SetByte@pValue:
  2316                           	opt stack 0
  2317  000062                     Console_Init@x:
  2318                           	opt stack 0
  2319  000062                     Console_FormFeed@x:
  2320                           	opt stack 0
  2321  000062                     reverse@length:
  2322                           	opt stack 0
  2323  000062                     ___wmul@multiplicand:
  2324                           	opt stack 0
  2325  000062                     ___awdiv@divisor:
  2326                           	opt stack 0
  2327  000062                     ___lwdiv@divisor:
  2328                           	opt stack 0
  2329  000062                     delay_ms@u:
  2330                           	opt stack 0
  2331  000062                     delay_us@u:
  2332                           	opt stack 0
  2333  000062                     HMI_SetButton@reindex:
  2334                           	opt stack 0
  2335                           
  2336                           ; 4 bytes @ 0x2
  2337  000062                     	ds	1
  2338  000063                     ??_UpdateDistance:
  2339  000063                     ??_Port_GetPin:
  2340  000063                     ??_Port_GetQuad:
  2341  000063                     ??_Byte_GetBit:
  2342  000063                     ??_Get_VirtualWall_State:
  2343  000063                     LCD_Write@mode:
  2344                           	opt stack 0
  2345  000063                     Byte_SetBit@pValue:
  2346                           	opt stack 0
  2347  000063                     Byte_SetZone@pChunk:
  2348                           	opt stack 0
  2349  000063                     Byte_GetZone@pChunk:
  2350                           	opt stack 0
  2351  000063                     Console_Init@y:
  2352                           	opt stack 0
  2353  000063                     Console_FormFeed@y:
  2354                           	opt stack 0
  2355  000063                     OutSeg@pSegment:
  2356                           	opt stack 0
  2357  000063                     Drive@SpeedR:
  2358                           	opt stack 0
  2359  000063                     Turn@Speed:
  2360                           	opt stack 0
  2361                           
  2362                           ; 2 bytes @ 0x3
  2363  000063                     	ds	1
  2364  000064                     ??_Byte_SetBit:
  2365  000064                     ??_Console_IncrementCursor:
  2366  000064                     ??_OutSeg:
  2367  000064                     ??___xxtofl:
  2368  000064                     LCD_Write@value:
  2369                           	opt stack 0
  2370  000064                     Byte_GetBit@Output:
  2371                           	opt stack 0
  2372  000064                     Byte_SetZone@pChunkSize:
  2373                           	opt stack 0
  2374  000064                     Byte_GetZone@pChunkSize:
  2375                           	opt stack 0
  2376  000064                     reverse@tempVar:
  2377                           	opt stack 0
  2378  000064                     ___awdiv@counter:
  2379                           	opt stack 0
  2380  000064                     ___lwdiv@counter:
  2381                           	opt stack 0
  2382  000064                     HMI_SetSegments@in:
  2383                           	opt stack 0
  2384  000064                     Get_VirtualWall_State@Vitual_Wall_Sensor:
  2385                           	opt stack 0
  2386  000064                     ___wmul@product:
  2387                           	opt stack 0
  2388  000064                     frexp@eptr:
  2389                           	opt stack 0
  2390  000064                     ___flge@ff2:
  2391                           	opt stack 0
  2392  000064                     ___lldiv@divisor:
  2393                           	opt stack 0
  2394  000064                     ___fldiv@a:
  2395                           	opt stack 0
  2396                           
  2397                           ; 4 bytes @ 0x4
  2398  000064                     	ds	1
  2399  000065                     ??_Byte_GetZone:
  2400  000065                     ?_Console_MakeField:
  2401                           	opt stack 0
  2402  000065                     Set_Addr_Window@ys:
  2403                           	opt stack 0
  2404  000065                     Set_Rotation@m:
  2405                           	opt stack 0
  2406  000065                     Port_GetPin@Output:
  2407                           	opt stack 0
  2408  000065                     Port_GetQuad@Output:
  2409                           	opt stack 0
  2410  000065                     Byte_SetZone@pValue:
  2411                           	opt stack 0
  2412  000065                     ___awdiv@sign:
  2413                           	opt stack 0
  2414  000065                     LCD_Word_Write@value:
  2415                           	opt stack 0
  2416  000065                     reverse@iterator:
  2417                           	opt stack 0
  2418  000065                     Turn@Dir:
  2419                           	opt stack 0
  2420  000065                     ___lwdiv@quotient:
  2421                           	opt stack 0
  2422                           
  2423                           ; 2 bytes @ 0x5
  2424  000065                     	ds	1
  2425  000066                     ??_Create_Maze:
  2426  000066                     ??_frexp:
  2427  000066                     ??_Byte_SetZone:
  2428  000066                     Set_Addr_Window@xe:
  2429                           	opt stack 0
  2430  000066                     Set_Rotation@rotation:
  2431                           	opt stack 0
  2432  000066                     Byte_GetZone@MASK:
  2433                           	opt stack 0
  2434  000066                     OutSeg@pInput:
  2435                           	opt stack 0
  2436  000066                     HMI_SetButton@pValue:
  2437                           	opt stack 0
  2438  000066                     MXK_BlockSwitchTo@CUR:
  2439                           	opt stack 0
  2440  000066                     MXK_SwitchTo@CUR:
  2441                           	opt stack 0
  2442  000066                     ___awdiv@quotient:
  2443                           	opt stack 0
  2444                           
  2445                           ; 2 bytes @ 0x6
  2446  000066                     	ds	1
  2447  000067                     ??_Console_MakeField:
  2448  000067                     ?___lwmod:
  2449                           	opt stack 0
  2450  000067                     Set_Addr_Window@ye:
  2451                           	opt stack 0
  2452  000067                     Byte_GetZone@Offset:
  2453                           	opt stack 0
  2454  000067                     OutSeg@out:
  2455                           	opt stack 0
  2456  000067                     HMI_SetButton@v:
  2457                           	opt stack 0
  2458  000067                     MXK_BlockSwitchTo@pModule:
  2459                           	opt stack 0
  2460  000067                     MXK_SwitchTo@pModule:
  2461                           	opt stack 0
  2462  000067                     Turn@C_Angle:
  2463                           	opt stack 0
  2464  000067                     ___lwmod@dividend:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0x7
  2468  000067                     	ds	1
  2469  000068                     ??___fldiv:
  2470  000068                     ??_Console_Tab:
  2471  000068                     ??___flge:
  2472  000068                     Set_Addr_Window@xs:
  2473                           	opt stack 0
  2474  000068                     Byte_GetZone@Output:
  2475                           	opt stack 0
  2476  000068                     ___xxtofl@sign:
  2477                           	opt stack 0
  2478  000068                     HMI_Render@a:
  2479                           	opt stack 0
  2480  000068                     Create_Maze@count:
  2481                           	opt stack 0
  2482  000068                     ___lldiv@quotient:
  2483                           	opt stack 0
  2484                           
  2485                           ; 4 bytes @ 0x8
  2486  000068                     	ds	1
  2487  000069                     Byte_SetZone@Offset:
  2488                           	opt stack 0
  2489  000069                     ___xxtofl@exp:
  2490                           	opt stack 0
  2491  000069                     LCD_Fill@pColour:
  2492                           	opt stack 0
  2493  000069                     LCD_FillRectangle@pColour:
  2494                           	opt stack 0
  2495  000069                     Byte_GetPair@pInput:
  2496                           	opt stack 0
  2497  000069                     Console_MakeField@Index:
  2498                           	opt stack 0
  2499  000069                     Turn@Rad:
  2500                           	opt stack 0
  2501  000069                     ___lwmod@divisor:
  2502                           	opt stack 0
  2503                           
  2504                           ; 2 bytes @ 0x9
  2505  000069                     	ds	1
  2506  00006A                     Byte_SetZone@MASK:
  2507                           	opt stack 0
  2508  00006A                     Create_Maze@p:
  2509                           	opt stack 0
  2510  00006A                     ___xxtofl@arg:
  2511                           	opt stack 0
  2512                           
  2513                           ; 4 bytes @ 0xA
  2514  00006A                     	ds	1
  2515  00006B                     LCD_Fill@i:
  2516                           	opt stack 0
  2517  00006B                     Byte_GetPair@pPair:
  2518                           	opt stack 0
  2519  00006B                     Console_MakeField@pInput:
  2520                           	opt stack 0
  2521  00006B                     ___lwmod@counter:
  2522                           	opt stack 0
  2523  00006B                     Byte_SetPair@pInput:
  2524                           	opt stack 0
  2525  00006B                     Byte_SetQuad@pInput:
  2526                           	opt stack 0
  2527  00006B                     LCD_FillRectangle@pPoint:
  2528                           	opt stack 0
  2529                           
  2530                           ; 4 bytes @ 0xB
  2531  00006B                     	ds	1
  2532  00006C                     LCD_Fill@j:
  2533                           	opt stack 0
  2534  00006C                     ___lldiv@counter:
  2535                           	opt stack 0
  2536  00006C                     ___fldiv@sign:
  2537                           	opt stack 0
  2538  00006C                     Word_GetPair@pInput:
  2539                           	opt stack 0
  2540  00006C                     itos@input:
  2541                           	opt stack 0
  2542  00006C                     Console_MakeField@Column:
  2543                           	opt stack 0
  2544  00006C                     Create_Maze@x:
  2545                           	opt stack 0
  2546                           
  2547                           ; 2 bytes @ 0xC
  2548  00006C                     	ds	1
  2549  00006D                     Byte_SetPair@pPair:
  2550                           	opt stack 0
  2551  00006D                     Byte_SetQuad@pQuad:
  2552                           	opt stack 0
  2553  00006D                     Console_Tab@t:
  2554                           	opt stack 0
  2555  00006D                     Timer2_Init@pFrequency:
  2556                           	opt stack 0
  2557  00006D                     ___fldiv@rem:
  2558                           	opt stack 0
  2559                           
  2560                           ; 4 bytes @ 0xD
  2561  00006D                     	ds	1
  2562  00006E                     ?___flmul:
  2563                           	opt stack 0
  2564  00006E                     Byte_SetPair@pValue:
  2565                           	opt stack 0
  2566  00006E                     Byte_SetQuad@pValue:
  2567                           	opt stack 0
  2568  00006E                     Word_GetPair@pPair:
  2569                           	opt stack 0
  2570  00006E                     Console_Tab@i:
  2571                           	opt stack 0
  2572  00006E                     itos@destination:
  2573                           	opt stack 0
  2574  00006E                     _Console_MakeField$10974:
  2575                           	opt stack 0
  2576  00006E                     Create_Maze@y:
  2577                           	opt stack 0
  2578  00006E                     ___flmul@b:
  2579                           	opt stack 0
  2580                           
  2581                           ; 4 bytes @ 0xE
  2582  00006E                     	ds	1
  2583  00006F                     Console_Tab@c:
  2584                           	opt stack 0
  2585  00006F                     Port_SetPin@pInput:
  2586                           	opt stack 0
  2587  00006F                     Port_Set@pInput:
  2588                           	opt stack 0
  2589  00006F                     SPI_MinSpeed@pInput:
  2590                           	opt stack 0
  2591  00006F                     SPI_MaxSpeed@pInput:
  2592                           	opt stack 0
  2593  00006F                     Word_SetPair@pInput:
  2594                           	opt stack 0
  2595  00006F                     PortProperty_Valid@pInput:
  2596                           	opt stack 0
  2597  00006F                     LCD_FillRectangle@pSize:
  2598                           	opt stack 0
  2599                           
  2600                           ; 4 bytes @ 0xF
  2601  00006F                     	ds	1
  2602  000070                     ??_Console_PrintChar:
  2603  000070                     Console_MakeField@x:
  2604                           	opt stack 0
  2605  000070                     itos@Data:
  2606                           	opt stack 0
  2607                           
  2608                           ; 2 bytes @ 0x10
  2609  000070                     	ds	1
  2610  000071                     ??_Timer2_Init:
  2611  000071                     Port_SetPin@pPin:
  2612                           	opt stack 0
  2613  000071                     Port_Set@pValue:
  2614                           	opt stack 0
  2615  000071                     Word_SetPair@pPair:
  2616                           	opt stack 0
  2617  000071                     PortProperty_Valid@pPinDrive:
  2618                           	opt stack 0
  2619  000071                     Console_MakeField@y:
  2620                           	opt stack 0
  2621  000071                     ___fldiv@new_exp:
  2622                           	opt stack 0
  2623                           
  2624                           ; 2 bytes @ 0x11
  2625  000071                     	ds	1
  2626  000072                     ??_Port_Set:
  2627  000072                     Port_SetPin@pValue:
  2628                           	opt stack 0
  2629  000072                     Word_SetPair@pValue:
  2630                           	opt stack 0
  2631  000072                     PortProperty_Valid@pPin:
  2632                           	opt stack 0
  2633  000072                     LCD_DrawField@pField:
  2634                           	opt stack 0
  2635  000072                     itos@Length:
  2636                           	opt stack 0
  2637  000072                     Timer2_Init@RDIV:
  2638                           	opt stack 0
  2639  000072                     ___flmul@a:
  2640                           	opt stack 0
  2641                           
  2642                           ; 4 bytes @ 0x12
  2643  000072                     	ds	1
  2644  000073                     ??_PortProperty_Valid:
  2645  000073                     ??_LCD_FillRectangle:
  2646  000073                     Port_SetPin@Type:
  2647                           	opt stack 0
  2648  000073                     Console_PrintChar@pInput:
  2649                           	opt stack 0
  2650  000073                     ___fldiv@grs:
  2651                           	opt stack 0
  2652                           
  2653                           ; 4 bytes @ 0x13
  2654  000073                     	ds	1
  2655  000074                     LED_Set@pValue:
  2656                           	opt stack 0
  2657  000074                     putch@c:
  2658                           	opt stack 0
  2659  000074                     Port_TogglePin@pInput:
  2660                           	opt stack 0
  2661  000074                     itos@Out:
  2662                           	opt stack 0
  2663  000074                     LCD_DrawField@pPoint:
  2664                           	opt stack 0
  2665                           
  2666                           ; 4 bytes @ 0x14
  2667  000074                     	ds	1
  2668  000075                     ?_printf:
  2669                           	opt stack 0
  2670  000075                     LCD_FillRectangle@i:
  2671                           	opt stack 0
  2672  000075                     LED_Set@pLED:
  2673                           	opt stack 0
  2674  000075                     printf@f:
  2675                           	opt stack 0
  2676  000075                     PortProperty_Valid@Errors:
  2677                           	opt stack 0
  2678                           
  2679                           ; 16 bytes @ 0x15
  2680  000075                     	ds	1
  2681  000076                     ??___flmul:
  2682  000076                     LCD_FillRectangle@j:
  2683                           	opt stack 0
  2684  000076                     Port_TogglePin@pPin:
  2685                           	opt stack 0
  2686  000076                     HMI_SetNumber@pInput:
  2687                           	opt stack 0
  2688  000076                     Timer2_Init@pCPUClock:
  2689                           	opt stack 0
  2690                           
  2691                           ; 4 bytes @ 0x16
  2692  000076                     	ds	1
  2693  000077                     Port_TogglePin@Value:
  2694                           	opt stack 0
  2695  000077                     ___fldiv@bexp:
  2696                           	opt stack 0
  2697                           
  2698                           ; 1 bytes @ 0x17
  2699  000077                     	ds	1
  2700  000078                     LED_Toggle@pLED:
  2701                           	opt stack 0
  2702  000078                     ___fldiv@aexp:
  2703                           	opt stack 0
  2704  000078                     LCD_DrawField@pSize:
  2705                           	opt stack 0
  2706                           
  2707                           ; 4 bytes @ 0x18
  2708  000078                     	ds	1
  2709  000079                     Event_DIPSwitch@pState:
  2710                           	opt stack 0
  2711  000079                     Event_TestButton@pState:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x19
  2715  000079                     	ds	1
  2716  00007A                     Event_DIPSwitch@Bar:
  2717                           	opt stack 0
  2718  00007A                     ___flmul@sign:
  2719                           	opt stack 0
  2720  00007A                     Timer2_Init@DIVIDE:
  2721                           	opt stack 0
  2722                           
  2723                           ; 4 bytes @ 0x1A
  2724  00007A                     	ds	1
  2725  00007B                     ??_printf:
  2726  00007B                     ___flmul@aexp:
  2727                           	opt stack 0
  2728  00007B                     Button_Poll@pButton:
  2729                           	opt stack 0
  2730                           
  2731                           ; 2 bytes @ 0x1B
  2732  00007B                     	ds	1
  2733  00007C                     ??_LCD_DrawField:
  2734  00007C                     printf@flag:
  2735                           	opt stack 0
  2736  00007C                     ___flmul@grs:
  2737                           	opt stack 0
  2738                           
  2739                           ; 4 bytes @ 0x1C
  2740  00007C                     	ds	1
  2741  00007D                     Button_Poll@pIncrement:
  2742                           	opt stack 0
  2743  00007D                     printf@prec:
  2744                           	opt stack 0
  2745                           
  2746                           ; 1 bytes @ 0x1D
  2747  00007D                     	ds	1
  2748  00007E                     ??_Button_Poll:
  2749  00007E                     LCD_DrawField@count:
  2750                           	opt stack 0
  2751  00007E                     printf@ap:
  2752                           	opt stack 0
  2753                           
  2754                           ; 2 bytes @ 0x1E
  2755  00007E                     	ds	2
  2756  000080                     LCD_DrawField@xmax:
  2757                           	opt stack 0
  2758  000080                     ___flmul@bexp:
  2759                           	opt stack 0
  2760  000080                     printf@val:
  2761                           	opt stack 0
  2762                           
  2763                           ; 2 bytes @ 0x20
  2764  000080                     	ds	1
  2765  000081                     LCD_DrawField@ymax:
  2766                           	opt stack 0
  2767  000081                     ___flmul@prod:
  2768                           	opt stack 0
  2769                           
  2770                           ; 4 bytes @ 0x21
  2771  000081                     	ds	1
  2772  000082                     LCD_DrawField@i:
  2773                           	opt stack 0
  2774  000082                     printf@c:
  2775                           	opt stack 0
  2776  000082                     Port_Set@TypeRequired:
  2777                           	opt stack 0
  2778                           
  2779                           ; 2 bytes @ 0x22
  2780  000082                     	ds	1
  2781  000083                     ??_Console_Render:
  2782  000083                     ?_pop:
  2783                           	opt stack 0
  2784  000083                     Button_Poll@Pin:
  2785                           	opt stack 0
  2786  000083                     push@data:
  2787                           	opt stack 0
  2788                           
  2789                           ; 2 bytes @ 0x23
  2790  000083                     	ds	1
  2791  000084                     Port_Set@TypeActual:
  2792                           	opt stack 0
  2793                           
  2794                           ; 2 bytes @ 0x24
  2795  000084                     	ds	1
  2796  000085                     PortProperty_Valid@Pair:
  2797                           	opt stack 0
  2798  000085                     Console_Render@temp:
  2799                           	opt stack 0
  2800  000085                     pop@data:
  2801                           	opt stack 0
  2802  000085                     ___flmul@temp:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x25
  2806  000085                     	ds	1
  2807  000086                     Port_Set@Type:
  2808                           	opt stack 0
  2809  000086                     Port_CheckPairType@pInput:
  2810                           	opt stack 0
  2811  000086                     Port_SetPinType@pInput:
  2812                           	opt stack 0
  2813  000086                     Console_Render@lCursor:
  2814                           	opt stack 0
  2815                           
  2816                           ; 4 bytes @ 0x26
  2817  000086                     	ds	1
  2818  000087                     ?___flneg:
  2819                           	opt stack 0
  2820  000087                     ___flneg@f1:
  2821                           	opt stack 0
  2822                           
  2823                           ; 4 bytes @ 0x27
  2824  000087                     	ds	1
  2825  000088                     Port_CheckPairType@pPair:
  2826                           	opt stack 0
  2827  000088                     Port_SetPinType@pPin:
  2828                           	opt stack 0
  2829                           
  2830                           ; 1 bytes @ 0x28
  2831  000088                     	ds	1
  2832  000089                     Port_CheckPairType@pDrive:
  2833                           	opt stack 0
  2834  000089                     Port_SetPinType@pType:
  2835                           	opt stack 0
  2836                           
  2837                           ; 1 bytes @ 0x29
  2838  000089                     	ds	1
  2839  00008A                     Port_CheckPairType@Pin1:
  2840                           	opt stack 0
  2841  00008A                     Port_SetPinType@Output:
  2842                           	opt stack 0
  2843  00008A                     Console_Render@x:
  2844                           	opt stack 0
  2845                           
  2846                           ; 1 bytes @ 0x2A
  2847  00008A                     	ds	1
  2848  00008B                     ?___fladd:
  2849                           	opt stack 0
  2850  00008B                     Port_CheckPairType@Pin2:
  2851                           	opt stack 0
  2852  00008B                     Console_Render@y:
  2853                           	opt stack 0
  2854  00008B                     Port_SetPinType@Props:
  2855                           	opt stack 0
  2856  00008B                     ___fladd@b:
  2857                           	opt stack 0
  2858                           
  2859                           ; 4 bytes @ 0x2B
  2860  00008B                     	ds	1
  2861  00008C                     ?_Detect_Victim:
  2862                           	opt stack 0
  2863  00008C                     Port_CheckPairType@Output:
  2864                           	opt stack 0
  2865                           
  2866                           ; 1 bytes @ 0x2C
  2867  00008C                     	ds	1
  2868  00008D                     LED_Init@pLED:
  2869                           	opt stack 0
  2870  00008D                     Port_CheckPairType@Props:
  2871                           	opt stack 0
  2872  00008D                     SPI_Init@pClock:
  2873                           	opt stack 0
  2874                           
  2875                           ; 4 bytes @ 0x2D
  2876  00008D                     	ds	1
  2877  00008E                     ??_Detect_Victim:
  2878                           
  2879                           ; 1 bytes @ 0x2E
  2880  00008E                     	ds	1
  2881  00008F                     Port_CheckQuadType@pInput:
  2882                           	opt stack 0
  2883  00008F                     Detect_Victim@Home_Base_State:
  2884                           	opt stack 0
  2885  00008F                     ___fladd@a:
  2886                           	opt stack 0
  2887                           
  2888                           ; 4 bytes @ 0x2F
  2889  00008F                     	ds	2
  2890  000091                     Port_CheckQuadType@pQuad:
  2891                           	opt stack 0
  2892  000091                     SPI_Init@pChannel:
  2893                           	opt stack 0
  2894                           
  2895                           ; 1 bytes @ 0x31
  2896  000091                     	ds	1
  2897  000092                     Port_CheckQuadType@pDrive:
  2898                           	opt stack 0
  2899  000092                     SPI_Init@pMode:
  2900                           	opt stack 0
  2901                           
  2902                           ; 1 bytes @ 0x32
  2903  000092                     	ds	1
  2904  000093                     ??___fladd:
  2905  000093                     Port_CheckQuadType@Pair1:
  2906                           	opt stack 0
  2907  000093                     SPI_Init@pInput:
  2908                           	opt stack 0
  2909                           
  2910                           ; 2 bytes @ 0x33
  2911  000093                     	ds	1
  2912  000094                     Port_CheckQuadType@Pair2:
  2913                           	opt stack 0
  2914                           
  2915                           ; 1 bytes @ 0x34
  2916  000094                     	ds	1
  2917  000095                     ??_LCD_Init:
  2918  000095                     Port_CheckQuadType@Output:
  2919                           	opt stack 0
  2920                           
  2921                           ; 1 bytes @ 0x35
  2922  000095                     	ds	1
  2923  000096                     Port_CheckPortType@pInput:
  2924                           	opt stack 0
  2925  000096                     Port_SetQuadType@pInput:
  2926                           	opt stack 0
  2927                           
  2928                           ; 2 bytes @ 0x36
  2929  000096                     	ds	1
  2930  000097                     LCD_Init@i:
  2931                           	opt stack 0
  2932                           
  2933                           ; 2 bytes @ 0x37
  2934  000097                     	ds	1
  2935  000098                     Port_CheckPortType@pDrive:
  2936                           	opt stack 0
  2937  000098                     Port_SetQuadType@pQuad:
  2938                           	opt stack 0
  2939                           
  2940                           ; 1 bytes @ 0x38
  2941  000098                     	ds	1
  2942  000099                     Port_CheckPortType@Output:
  2943                           	opt stack 0
  2944  000099                     Port_SetQuadType@pType:
  2945                           	opt stack 0
  2946                           
  2947                           ; 1 bytes @ 0x39
  2948  000099                     	ds	1
  2949  00009A                     Port_SetQuadType@Output:
  2950                           	opt stack 0
  2951  00009A                     Port_SetType@pInput:
  2952                           	opt stack 0
  2953                           
  2954                           ; 2 bytes @ 0x3A
  2955  00009A                     	ds	1
  2956  00009B                     ___fladd@signs:
  2957                           	opt stack 0
  2958  00009B                     Button_Init@pInput:
  2959                           	opt stack 0
  2960                           
  2961                           ; 2 bytes @ 0x3B
  2962  00009B                     	ds	1
  2963  00009C                     Port_SetType@pType:
  2964                           	opt stack 0
  2965  00009C                     ___fladd@aexp:
  2966                           	opt stack 0
  2967                           
  2968                           ; 1 bytes @ 0x3C
  2969  00009C                     	ds	1
  2970  00009D                     ??_Port_SetType:
  2971  00009D                     ___fladd@bexp:
  2972                           	opt stack 0
  2973  00009D                     Button_Init@pThreshold:
  2974                           	opt stack 0
  2975                           
  2976                           ; 2 bytes @ 0x3D
  2977  00009D                     	ds	1
  2978  00009E                     ___fladd@grs:
  2979                           	opt stack 0
  2980                           
  2981                           ; 1 bytes @ 0x3E
  2982  00009E                     	ds	1
  2983  00009F                     ?___flsub:
  2984                           	opt stack 0
  2985  00009F                     ?_eval_poly:
  2986                           	opt stack 0
  2987  00009F                     ?___fltol:
  2988                           	opt stack 0
  2989  00009F                     Port_SetType@Output:
  2990                           	opt stack 0
  2991  00009F                     Button_Init@pInitIO:
  2992                           	opt stack 0
  2993  00009F                     ___fltol@f1:
  2994                           	opt stack 0
  2995  00009F                     ___flsub@b:
  2996                           	opt stack 0
  2997  00009F                     eval_poly@x:
  2998                           	opt stack 0
  2999                           
  3000                           ; 4 bytes @ 0x3F
  3001  00009F                     	ds	1
  3002  0000A0                     Port_Init@pInput:
  3003                           	opt stack 0
  3004                           
  3005                           ; 2 bytes @ 0x40
  3006  0000A0                     	ds	2
  3007  0000A2                     Port_Init@pPort:
  3008                           	opt stack 0
  3009  0000A2                     Button_Init@pGetState:
  3010                           	opt stack 0
  3011                           
  3012                           ; 3 bytes @ 0x42
  3013  0000A2                     	ds	1
  3014  0000A3                     ??_Port_Init:
  3015  0000A3                     ??___fltol:
  3016  0000A3                     eval_poly@d:
  3017                           	opt stack 0
  3018  0000A3                     ___flsub@a:
  3019                           	opt stack 0
  3020                           
  3021                           ; 4 bytes @ 0x43
  3022  0000A3                     	ds	2
  3023  0000A5                     Port_Init@i:
  3024                           	opt stack 0
  3025  0000A5                     eval_poly@n:
  3026                           	opt stack 0
  3027  0000A5                     Button_Init@pFunction:
  3028                           	opt stack 0
  3029                           
  3030                           ; 3 bytes @ 0x45
  3031  0000A5                     	ds	1
  3032  0000A6                     
  3033                           ; 1 bytes @ 0x46
  3034  0000A6                     	ds	1
  3035  0000A7                     ??_eval_poly:
  3036  0000A7                     ___fltol@sign1:
  3037                           	opt stack 0
  3038                           
  3039                           ; 1 bytes @ 0x47
  3040  0000A7                     	ds	1
  3041  0000A8                     ___fltol@exp1:
  3042                           	opt stack 0
  3043  0000A8                     HMI_Init@in:
  3044                           	opt stack 0
  3045                           
  3046                           ; 2 bytes @ 0x48
  3047  0000A8                     	ds	1
  3048  0000A9                     ?_floor:
  3049                           	opt stack 0
  3050  0000A9                     Move_ADC_To@Angle:
  3051                           	opt stack 0
  3052  0000A9                     floor@x:
  3053                           	opt stack 0
  3054                           
  3055                           ; 4 bytes @ 0x49
  3056  0000A9                     	ds	2
  3057  0000AB                     eval_poly@res:
  3058                           	opt stack 0
  3059                           
  3060                           ; 4 bytes @ 0x4B
  3061  0000AB                     	ds	2
  3062  0000AD                     floor@i:
  3063                           	opt stack 0
  3064                           
  3065                           ; 4 bytes @ 0x4D
  3066  0000AD                     	ds	2
  3067  0000AF                     ?_log:
  3068                           	opt stack 0
  3069  0000AF                     ?_ldexp:
  3070                           	opt stack 0
  3071  0000AF                     ldexp@value:
  3072                           	opt stack 0
  3073  0000AF                     log@x:
  3074                           	opt stack 0
  3075                           
  3076                           ; 4 bytes @ 0x4F
  3077  0000AF                     	ds	2
  3078  0000B1                     floor@expon:
  3079                           	opt stack 0
  3080                           
  3081                           ; 2 bytes @ 0x51
  3082  0000B1                     	ds	2
  3083  0000B3                     ldexp@newexp:
  3084                           	opt stack 0
  3085  0000B3                     log@exponent:
  3086                           	opt stack 0
  3087                           
  3088                           ; 2 bytes @ 0x53
  3089  0000B3                     	ds	2
  3090  0000B5                     ??_ldexp:
  3091                           
  3092                           ; 1 bytes @ 0x55
  3093  0000B5                     	ds	2
  3094  0000B7                     ?_exp:
  3095                           	opt stack 0
  3096  0000B7                     exp@x:
  3097                           	opt stack 0
  3098                           
  3099                           ; 4 bytes @ 0x57
  3100  0000B7                     	ds	4
  3101  0000BB                     _exp$15840:
  3102                           	opt stack 0
  3103                           
  3104                           ; 4 bytes @ 0x5B
  3105  0000BB                     	ds	4
  3106  0000BF                     exp@exponent:
  3107                           	opt stack 0
  3108                           
  3109                           ; 2 bytes @ 0x5F
  3110  0000BF                     	ds	2
  3111  0000C1                     exp@sign:
  3112                           	opt stack 0
  3113                           
  3114                           ; 1 bytes @ 0x61
  3115  0000C1                     	ds	1
  3116  0000C2                     ?_pow:
  3117                           	opt stack 0
  3118  0000C2                     pow@x:
  3119                           	opt stack 0
  3120                           
  3121                           ; 4 bytes @ 0x62
  3122  0000C2                     	ds	4
  3123  0000C6                     pow@y:
  3124                           	opt stack 0
  3125                           
  3126                           ; 4 bytes @ 0x66
  3127  0000C6                     	ds	4
  3128  0000CA                     _pow$15838:
  3129                           	opt stack 0
  3130                           
  3131                           ; 4 bytes @ 0x6A
  3132  0000CA                     	ds	4
  3133  0000CE                     _pow$15839:
  3134                           	opt stack 0
  3135                           
  3136                           ; 4 bytes @ 0x6E
  3137  0000CE                     	ds	4
  3138  0000D2                     pow@sign:
  3139                           	opt stack 0
  3140                           
  3141                           ; 1 bytes @ 0x72
  3142  0000D2                     	ds	1
  3143  0000D3                     pow@yi:
  3144                           	opt stack 0
  3145                           
  3146                           ; 4 bytes @ 0x73
  3147  0000D3                     	ds	4
  3148  0000D7                     ??_ADCAverage:
  3149                           
  3150                           ; 1 bytes @ 0x77
  3151  0000D7                     	ds	2
  3152  0000D9                     _ADCAverage$15832:
  3153                           	opt stack 0
  3154                           
  3155                           ; 4 bytes @ 0x79
  3156  0000D9                     	ds	4
  3157  0000DD                     _ADCAverage$15833:
  3158                           	opt stack 0
  3159                           
  3160                           ; 4 bytes @ 0x7D
  3161  0000DD                     	ds	4
  3162  0000E1                     _ADCAverage$15834:
  3163                           	opt stack 0
  3164                           
  3165                           ; 4 bytes @ 0x81
  3166  0000E1                     	ds	4
  3167  0000E5                     _ADCAverage$15835:
  3168                           	opt stack 0
  3169                           
  3170                           ; 4 bytes @ 0x85
  3171  0000E5                     	ds	4
  3172  0000E9                     _ADCAverage$15836:
  3173                           	opt stack 0
  3174                           
  3175                           ; 4 bytes @ 0x89
  3176  0000E9                     	ds	4
  3177  0000ED                     _ADCAverage$15837:
  3178                           	opt stack 0
  3179                           
  3180                           ; 4 bytes @ 0x8D
  3181  0000ED                     	ds	4
  3182  0000F1                     ??_Sensor_Observe:
  3183  0000F1                     Travel@direction:
  3184                           	opt stack 0
  3185                           
  3186                           ; 2 bytes @ 0x91
  3187  0000F1                     	ds	2
  3188  0000F3                     Sensor_Observe@High_Sensor:
  3189                           	opt stack 0
  3190  0000F3                     Travel@Dist:
  3191                           	opt stack 0
  3192                           
  3193                           ; 2 bytes @ 0x93
  3194  0000F3                     	ds	2
  3195  0000F5                     Sensor_Observe@Low_Sensor:
  3196                           	opt stack 0
  3197  0000F5                     Travel@Test_ADC:
  3198                           	opt stack 0
  3199                           
  3200                           ; 2 bytes @ 0x95
  3201  0000F5                     	ds	2
  3202  0000F7                     Travel@Spd:
  3203                           	opt stack 0
  3204                           
  3205                           ; 2 bytes @ 0x97
  3206  0000F7                     	ds	2
  3207  0000F9                     Travel@Wall:
  3208                           	opt stack 0
  3209                           
  3210                           ; 2 bytes @ 0x99
  3211  0000F9                     	ds	2
  3212  0000FB                     ??_Travel:
  3213                           
  3214                           ; 1 bytes @ 0x9B
  3215  0000FB                     	ds	4
  3216  0000FF                     tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           postinc0	equ	0xFEE
  3221                           wreg	equ	0xFE8
  3222                           postdec1	equ	0xFE5
  3223                           fsr1h	equ	0xFE2
  3224                           fsr1l	equ	0xFE1
  3225                           
  3226                           ; 1 bytes @ 0x9F
  3227                           
  3228                           	psect	cstackCOMRAM
  3229  000001                     __pcstackCOMRAM:
  3230                           	opt stack 0
  3231  000001                     i2Byte_SetBit@pInput:
  3232                           	opt stack 0
  3233  000001                     i2Byte_GetZone@pInput:
  3234                           	opt stack 0
  3235  000001                     i2delay_us@us:
  3236                           	opt stack 0
  3237  000001                     i2MXK_Queue@pCallback:
  3238                           	opt stack 0
  3239                           
  3240                           ; 3 bytes @ 0x0
  3241  000001                     	ds	2
  3242  000003                     i2Byte_SetBit@pBit:
  3243                           	opt stack 0
  3244  000003                     i2Byte_GetZone@pMax:
  3245                           	opt stack 0
  3246  000003                     i2delay_us@u:
  3247                           	opt stack 0
  3248                           
  3249                           ; 4 bytes @ 0x2
  3250  000003                     	ds	1
  3251  000004                     i2Byte_SetBit@pValue:
  3252                           	opt stack 0
  3253  000004                     i2Byte_GetZone@pChunk:
  3254                           	opt stack 0
  3255                           
  3256                           ; 1 bytes @ 0x3
  3257  000004                     	ds	1
  3258  000005                     ??i2_Byte_SetBit:
  3259  000005                     i2Byte_GetZone@pChunkSize:
  3260                           	opt stack 0
  3261                           
  3262                           ; 1 bytes @ 0x4
  3263  000005                     	ds	1
  3264  000006                     ??i2_Byte_GetZone:
  3265                           
  3266                           ; 1 bytes @ 0x5
  3267  000006                     	ds	1
  3268  000007                     i2Byte_GetZone@MASK:
  3269                           	opt stack 0
  3270  000007                     i2MXK_SwitchTo@CUR:
  3271                           	opt stack 0
  3272                           
  3273                           ; 1 bytes @ 0x6
  3274  000007                     	ds	1
  3275  000008                     i2Byte_GetZone@Offset:
  3276                           	opt stack 0
  3277  000008                     i2MXK_SwitchTo@pModule:
  3278                           	opt stack 0
  3279                           
  3280                           ; 1 bytes @ 0x7
  3281  000008                     	ds	1
  3282  000009                     i2Byte_GetZone@Output:
  3283                           	opt stack 0
  3284                           
  3285                           ; 1 bytes @ 0x8
  3286  000009                     	ds	1
  3287  00000A                     i2Byte_GetPair@pInput:
  3288                           	opt stack 0
  3289                           
  3290                           ; 2 bytes @ 0x9
  3291  00000A                     	ds	2
  3292  00000C                     i2Byte_GetPair@pPair:
  3293                           	opt stack 0
  3294                           
  3295                           ; 1 bytes @ 0xB
  3296  00000C                     	ds	1
  3297  00000D                     i2Word_GetPair@pInput:
  3298                           	opt stack 0
  3299                           
  3300                           ; 2 bytes @ 0xC
  3301  00000D                     	ds	2
  3302  00000F                     i2Word_GetPair@pPair:
  3303                           	opt stack 0
  3304                           
  3305                           ; 1 bytes @ 0xE
  3306  00000F                     	ds	1
  3307  000010                     i2Port_SetPin@pInput:
  3308                           	opt stack 0
  3309                           
  3310                           ; 2 bytes @ 0xF
  3311  000010                     	ds	2
  3312  000012                     i2Port_SetPin@pPin:
  3313                           	opt stack 0
  3314                           
  3315                           ; 1 bytes @ 0x11
  3316  000012                     	ds	1
  3317  000013                     i2Port_SetPin@pValue:
  3318                           	opt stack 0
  3319                           
  3320                           ; 1 bytes @ 0x12
  3321  000013                     	ds	1
  3322  000014                     i2Port_SetPin@Type:
  3323                           	opt stack 0
  3324                           
  3325                           ; 1 bytes @ 0x13
  3326  000014                     	ds	1
  3327  000015                     
  3328                           ; 1 bytes @ 0x14
  3329  000015                     	ds	2
  3330  000017                     ??_ISR_Function:
  3331                           
  3332                           ; 1 bytes @ 0x16
  3333  000017                     	ds	18
  3334                           tblptru	equ	0xFF8
  3335                           tblptrh	equ	0xFF7
  3336                           tblptrl	equ	0xFF6
  3337                           tablat	equ	0xFF5
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           postdec1	equ	0xFE5
  3341                           fsr1h	equ	0xFE2
  3342                           fsr1l	equ	0xFE1
  3343                           
  3344 ;;
  3345 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3346 ;;
  3347 ;; *************** function _main *****************
  3348 ;; Defined at:
  3349 ;;		line 327 in file "main.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;  up              1   11[BANK2 ] unsigned char 
  3354 ;;  left            1   10[BANK2 ] unsigned char 
  3355 ;;  right           1    9[BANK2 ] unsigned char 
  3356 ;;  down            1    8[BANK2 ] unsigned char 
  3357 ;; Return value:  Size  Location     Type
  3358 ;;                  1    wreg      void 
  3359 ;; Registers used:
  3360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3361 ;; Tracked objects:
  3362 ;;		On entry : 0/0
  3363 ;;		On exit  : 0/0
  3364 ;;		Unchanged: 0/0
  3365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;Total ram usage:        8 bytes
  3371 ;; Hardware stack levels required when called:   17
  3372 ;; This function calls:
  3373 ;;		_ADCAverage
  3374 ;;		_Closest_Object
  3375 ;;		_Console_Init
  3376 ;;		_Console_Render
  3377 ;;		_Create_Maze
  3378 ;;		_Detect_Victim
  3379 ;;		_FunctInitButton
  3380 ;;		_Go_Home
  3381 ;;		_HMI_DIPSwitch
  3382 ;;		_HMI_DownSwitch
  3383 ;;		_HMI_Init
  3384 ;;		_HMI_LeftSwitch
  3385 ;;		_HMI_Poll
  3386 ;;		_HMI_Render
  3387 ;;		_HMI_RightSwitch
  3388 ;;		_HMI_SetNumber
  3389 ;;		_HMI_UpSwitch
  3390 ;;		_ISR_Enable
  3391 ;;		_InitADC
  3392 ;;		_InitSerialCommunication
  3393 ;;		_Init_Timer0
  3394 ;;		_LCD_Init
  3395 ;;		_LED_Init
  3396 ;;		_MXK_BlockSwitchTo
  3397 ;;		_MXK_DIPSwitch
  3398 ;;		_MXK_Dequeue
  3399 ;;		_MXK_Init
  3400 ;;		_MXK_Release
  3401 ;;		_MXK_TestButton
  3402 ;;		_Navigate_Maze
  3403 ;;		_Robot_Init
  3404 ;;		_Sensor_Observe
  3405 ;;		_Travel
  3406 ;;		___wmul
  3407 ;;		_delay_ms
  3408 ;;		_printf
  3409 ;; This function is called by:
  3410 ;;		Startup code after reset
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           	psect	text0
  3415  01322A                     __ptext0:
  3416                           	opt stack 0
  3417  01322A                     _main:
  3418                           	opt stack 14
  3419                           
  3420                           ;main.c: 332: MXK_Init();
  3421                           
  3422                           ;incstack = 0
  3423  01322A  EC18  F0B0         	call	_MXK_Init	;wreg free
  3424                           
  3425                           ;main.c: 333: Init_Timer0();
  3426  01322E  EC5A  F0C5         	call	_Init_Timer0	;wreg free
  3427                           
  3428                           ;main.c: 334: InitSerialCommunication();
  3429  013232  ECF0  F0C4         	call	_InitSerialCommunication	;wreg free
  3430                           
  3431                           ;main.c: 335: Robot_Init();
  3432  013236  EC7E  F0C5         	call	_Robot_Init	;wreg free
  3433                           
  3434                           ;main.c: 336: ISR_Enable();
  3435  01323A  EC4E  F0C6         	call	_ISR_Enable	;wreg free
  3436                           
  3437                           ;main.c: 337: FunctInitButton();
  3438  01323E  ECDF  F0BB         	call	_FunctInitButton	;wreg free
  3439                           
  3440                           ;main.c: 338: InitADC();
  3441  013242  EC5A  F0C0         	call	_InitADC	;wreg free
  3442                           
  3443                           ;main.c: 339: LED_Init(eLED2);
  3444  013246  0E01               	movlw	1
  3445  013248  ECE8  F0BE         	call	_LED_Init
  3446                           
  3447                           ;main.c: 340: Create_Maze();
  3448  01324C  EC00  F080         	call	_Create_Maze	;wreg free
  3449                           
  3450                           ;main.c: 348: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3451  013250  0E01               	movlw	1
  3452  013252  EC02  F0C3         	call	_MXK_BlockSwitchTo
  3453  013256  0900               	iorlw	0
  3454  013258  B4D8               	btfsc	status,2,c
  3455  01325A  D00C               	goto	l2216
  3456                           
  3457                           ;main.c: 349: HMI_Init();
  3458  01325C  EC4C  F0A9         	call	_HMI_Init	;wreg free
  3459                           
  3460                           ;main.c: 350: LCD_Init();
  3461  013260  EC31  F0AE         	call	_LCD_Init	;wreg free
  3462                           
  3463                           ;main.c: 351: Console_Init();
  3464  013264  ECF8  F0BC         	call	_Console_Init	;wreg free
  3465                           
  3466                           ;main.c: 352: if (MXK_Release())
  3467  013268  EC89  F0C5         	call	_MXK_Release	;wreg free
  3468  01326C  0900               	iorlw	0
  3469  01326E  A4D8               	btfss	status,2,c
  3470                           
  3471                           ;main.c: 353: MXK_Dequeue();
  3472  013270  EC87  F0C3         	call	_MXK_Dequeue	;wreg free
  3473  013274                     l2216:
  3474                           
  3475                           ;main.c: 359: ADCAverage();
  3476                           
  3477                           ;main.c: 354: }
  3478                           ;main.c: 357: for(;;){
  3479  013274  EC23  F09E         	call	_ADCAverage	;wreg free
  3480                           
  3481                           ;main.c: 361: HMI_SetNumber(average);
  3482  013278  C02E  F076         	movff	_average,HMI_SetNumber@pInput
  3483  01327C  C02F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3484  013280  EC7B  F0C4         	call	_HMI_SetNumber	;wreg free
  3485                           
  3486                           ;main.c: 363: HMI_Render();
  3487  013284  EC1E  F0C3         	call	_HMI_Render	;wreg free
  3488                           
  3489                           ;main.c: 365: HMI_Poll();
  3490  013288  ECFC  F0BD         	call	_HMI_Poll	;wreg free
  3491                           
  3492                           ;main.c: 369: bool down = HMIBoard.mDown.mGetState();
  3493  01328C  EE22  F087         	lfsr	2,_HMIBoard+45
  3494  013290  D801               	call	u15658
  3495  013292  D00A               	goto	u15659
  3496  013294                     u15658:
  3497  013294  0005               	push	
  3498  013296  6EFA               	movwf	pclath,c
  3499  013298  50DE               	movf	postinc2,w,c
  3500  01329A  6EFD               	movwf	tosl,c
  3501  01329C  50DE               	movf	postinc2,w,c
  3502  01329E  6EFE               	movwf	tosh,c
  3503  0132A0  50DE               	movf	postinc2,w,c
  3504  0132A2  6EFF               	movwf	tosu,c
  3505  0132A4  50FA               	movf	pclath,w,c
  3506  0132A6  0012               	return		;indir
  3507  0132A8                     u15659:
  3508  0132A8  0102               	movlb	2	; () banked
  3509  0132AA  6FCF               	movwf	main@down& (0+255),b
  3510                           
  3511                           ; BSR set to: 2
  3512                           ;main.c: 370: bool right = HMIBoard.mRight.mGetState();
  3513  0132AC  EE22  F069         	lfsr	2,_HMIBoard+15
  3514  0132B0  D801               	call	u15668
  3515  0132B2  D00A               	goto	u15669
  3516  0132B4                     u15668:
  3517  0132B4  0005               	push	
  3518  0132B6  6EFA               	movwf	pclath,c
  3519  0132B8  50DE               	movf	postinc2,w,c
  3520  0132BA  6EFD               	movwf	tosl,c
  3521  0132BC  50DE               	movf	postinc2,w,c
  3522  0132BE  6EFE               	movwf	tosh,c
  3523  0132C0  50DE               	movf	postinc2,w,c
  3524  0132C2  6EFF               	movwf	tosu,c
  3525  0132C4  50FA               	movf	pclath,w,c
  3526  0132C6  0012               	return		;indir
  3527  0132C8                     u15669:
  3528  0132C8  0102               	movlb	2	; () banked
  3529  0132CA  6FD0               	movwf	main@right& (0+255),b
  3530                           
  3531                           ; BSR set to: 2
  3532                           ;main.c: 371: bool up = HMIBoard.mUp.mGetState();
  3533  0132CC  EE22  F07D         	lfsr	2,_HMIBoard+35
  3534  0132D0  D801               	call	u15678
  3535  0132D2  D00A               	goto	u15679
  3536  0132D4                     u15678:
  3537  0132D4  0005               	push	
  3538  0132D6  6EFA               	movwf	pclath,c
  3539  0132D8  50DE               	movf	postinc2,w,c
  3540  0132DA  6EFD               	movwf	tosl,c
  3541  0132DC  50DE               	movf	postinc2,w,c
  3542  0132DE  6EFE               	movwf	tosh,c
  3543  0132E0  50DE               	movf	postinc2,w,c
  3544  0132E2  6EFF               	movwf	tosu,c
  3545  0132E4  50FA               	movf	pclath,w,c
  3546  0132E6  0012               	return		;indir
  3547  0132E8                     u15679:
  3548  0132E8  0102               	movlb	2	; () banked
  3549  0132EA  6FD2               	movwf	main@up& (0+255),b
  3550                           
  3551                           ; BSR set to: 2
  3552                           ;main.c: 372: bool left = HMIBoard.mLeft.mGetState();
  3553  0132EC  EE22  F073         	lfsr	2,_HMIBoard+25
  3554  0132F0  D801               	call	u15688
  3555  0132F2  D00A               	goto	u15689
  3556  0132F4                     u15688:
  3557  0132F4  0005               	push	
  3558  0132F6  6EFA               	movwf	pclath,c
  3559  0132F8  50DE               	movf	postinc2,w,c
  3560  0132FA  6EFD               	movwf	tosl,c
  3561  0132FC  50DE               	movf	postinc2,w,c
  3562  0132FE  6EFE               	movwf	tosh,c
  3563  013300  50DE               	movf	postinc2,w,c
  3564  013302  6EFF               	movwf	tosu,c
  3565  013304  50FA               	movf	pclath,w,c
  3566  013306  0012               	return		;indir
  3567  013308                     u15689:
  3568  013308  0102               	movlb	2	; () banked
  3569  01330A  6FD1               	movwf	main@left& (0+255),b
  3570                           
  3571                           ; BSR set to: 2
  3572                           ;main.c: 373: if (down) {mode=3;}
  3573  01330C  51CF               	movf	main@down& (0+255),w,b
  3574  01330E  B4D8               	btfsc	status,2,c
  3575  013310  D005               	goto	l2218
  3576                           
  3577                           ; BSR set to: 2
  3578  013312  0E00               	movlw	0
  3579  013314  0101               	movlb	1	; () banked
  3580  013316  6F49               	movwf	(_mode+1)& (0+255),b
  3581  013318  0E03               	movlw	3
  3582  01331A  6F48               	movwf	_mode& (0+255),b
  3583  01331C                     l2218:
  3584                           
  3585                           ;main.c: 374: if (right) {mode =1;}
  3586  01331C  0102               	movlb	2	; () banked
  3587  01331E  51D0               	movf	main@right& (0+255),w,b
  3588  013320  B4D8               	btfsc	status,2,c
  3589  013322  D005               	goto	l2219
  3590                           
  3591                           ; BSR set to: 2
  3592  013324  0E00               	movlw	0
  3593  013326  0101               	movlb	1	; () banked
  3594  013328  6F49               	movwf	(_mode+1)& (0+255),b
  3595  01332A  0E01               	movlw	1
  3596  01332C  6F48               	movwf	_mode& (0+255),b
  3597  01332E                     l2219:
  3598                           
  3599                           ;main.c: 375: if (up) {mode=2;}
  3600  01332E  0102               	movlb	2	; () banked
  3601  013330  51D2               	movf	main@up& (0+255),w,b
  3602  013332  B4D8               	btfsc	status,2,c
  3603  013334  D005               	goto	l2220
  3604                           
  3605                           ; BSR set to: 2
  3606  013336  0E00               	movlw	0
  3607  013338  0101               	movlb	1	; () banked
  3608  01333A  6F49               	movwf	(_mode+1)& (0+255),b
  3609  01333C  0E02               	movlw	2
  3610  01333E  6F48               	movwf	_mode& (0+255),b
  3611  013340                     l2220:
  3612                           
  3613                           ;main.c: 376: if (left) {mode=4;}
  3614  013340  0102               	movlb	2	; () banked
  3615  013342  51D1               	movf	main@left& (0+255),w,b
  3616  013344  B4D8               	btfsc	status,2,c
  3617  013346  D005               	goto	l2221
  3618                           
  3619                           ; BSR set to: 2
  3620  013348  0E00               	movlw	0
  3621  01334A  0101               	movlb	1	; () banked
  3622  01334C  6F49               	movwf	(_mode+1)& (0+255),b
  3623  01334E  0E04               	movlw	4
  3624  013350  6F48               	movwf	_mode& (0+255),b
  3625  013352                     l2221:
  3626                           
  3627                           ;main.c: 381: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3628                           
  3629                           ; BSR set to: 1
  3630  013352  0E01               	movlw	1
  3631  013354  EC02  F0C3         	call	_MXK_BlockSwitchTo
  3632  013358  0900               	iorlw	0
  3633  01335A  B4D8               	btfsc	status,2,c
  3634  01335C  D78B               	goto	l2216
  3635                           
  3636                           ;main.c: 383: if (mode==0){
  3637  01335E  0101               	movlb	1	; () banked
  3638  013360  5148               	movf	_mode& (0+255),w,b
  3639  013362  1149               	iorwf	(_mode+1)& (0+255),w,b
  3640  013364  A4D8               	btfss	status,2,c
  3641  013366  D014               	goto	l2223
  3642                           
  3643                           ; BSR set to: 1
  3644                           ;main.c: 386: printf("%c", (char)35);
  3645  013368  0EFC               	movlw	low STR_1
  3646  01336A  0100               	movlb	0	; () banked
  3647  01336C  6F75               	movwf	printf@f& (0+255),b
  3648  01336E  0EFF               	movlw	high STR_1
  3649  013370  6F76               	movwf	(printf@f+1)& (0+255),b
  3650  013372  0E00               	movlw	0
  3651  013374  6F78               	movwf	(?_printf+3)& (0+255),b
  3652  013376  0E23               	movlw	35
  3653  013378  6F77               	movwf	(?_printf+2)& (0+255),b
  3654  01337A  EC7E  F0AB         	call	_printf	;wreg free
  3655                           
  3656                           ;main.c: 387: printf("Robot Ready! \n\n");
  3657  01337E  0E70               	movlw	low STR_13
  3658  013380  0100               	movlb	0	; () banked
  3659  013382  6F75               	movwf	printf@f& (0+255),b
  3660  013384  0EFF               	movlw	high STR_13
  3661  013386  6F76               	movwf	(printf@f+1)& (0+255),b
  3662  013388  EC7E  F0AB         	call	_printf	;wreg free
  3663                           
  3664                           ;main.c: 389: Console_Render();
  3665  01338C  ECA2  F0A7         	call	_Console_Render	;wreg free
  3666  013390                     l2223:
  3667                           
  3668                           ;main.c: 391: }
  3669                           ;main.c: 392: if (mode == 3){
  3670  013390  0E03               	movlw	3
  3671  013392  0101               	movlb	1	; () banked
  3672  013394  1948               	xorwf	_mode& (0+255),w,b
  3673  013396  1149               	iorwf	(_mode+1)& (0+255),w,b
  3674  013398  B4D8               	btfsc	status,2,c
  3675  01339A  D0B0               	goto	l2228
  3676  01339C  D0E3               	goto	l2235
  3677  01339E                     
  3678                           ; BSR set to: 1
  3679                           ;main.c: 419: printf("%c", (char)35);
  3680                           
  3681                           ; BSR set to: 1
  3682  01339E  0EFC               	movlw	low STR_1
  3683  0133A0  0100               	movlb	0	; () banked
  3684  0133A2  6F75               	movwf	printf@f& (0+255),b
  3685  0133A4  0EFF               	movlw	high STR_1
  3686  0133A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3687  0133A8  0E00               	movlw	0
  3688  0133AA  6F78               	movwf	(?_printf+3)& (0+255),b
  3689  0133AC  0E23               	movlw	35
  3690  0133AE  6F77               	movwf	(?_printf+2)& (0+255),b
  3691  0133B0  EC7E  F0AB         	call	_printf	;wreg free
  3692                           
  3693                           ;main.c: 420: printf("\n       \n");
  3694  0133B4  0ED1               	movlw	low STR_15
  3695  0133B6  0100               	movlb	0	; () banked
  3696  0133B8  6F75               	movwf	printf@f& (0+255),b
  3697  0133BA  0EFF               	movlw	high STR_15
  3698  0133BC  6F76               	movwf	(printf@f+1)& (0+255),b
  3699  0133BE  EC7E  F0AB         	call	_printf	;wreg free
  3700                           
  3701                           ;main.c: 421: printf("vc: %d\n", VictimCount);
  3702  0133C2  0EED               	movlw	low STR_16
  3703  0133C4  0100               	movlb	0	; () banked
  3704  0133C6  6F75               	movwf	printf@f& (0+255),b
  3705  0133C8  0EFF               	movlw	high STR_16
  3706  0133CA  6F76               	movwf	(printf@f+1)& (0+255),b
  3707  0133CC  C134  F077         	movff	_VictimCount,?_printf+2
  3708  0133D0  C135  F078         	movff	_VictimCount+1,?_printf+3
  3709  0133D4  EC7E  F0AB         	call	_printf	;wreg free
  3710                           
  3711                           ;main.c: 422: Navigate_Maze();
  3712  0133D8  ECAA  F094         	call	_Navigate_Maze	;wreg free
  3713                           
  3714                           ;main.c: 425: if(Detect_Victim() == 1 && maze[X_Pos][Y_Pos].victim == 0){
  3715  0133DC  EC8B  F0BE         	call	_Detect_Victim	;wreg free
  3716  0133E0  0100               	movlb	0	; () banked
  3717  0133E2  058C               	decf	?_Detect_Victim& (0+255),w,b
  3718  0133E4  118D               	iorwf	(?_Detect_Victim+1)& (0+255),w,b
  3719  0133E6  A4D8               	btfss	status,2,c
  3720  0133E8  D06C               	goto	l2227
  3721                           
  3722                           ; BSR set to: 0
  3723  0133EA  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  3724  0133EE  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  3725  0133F2  0E00               	movlw	0
  3726  0133F4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3727  0133F6  0E32               	movlw	50
  3728  0133F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3729  0133FA  EC40  F0C4         	call	___wmul	;wreg free
  3730  0133FE  0E00               	movlw	low _maze
  3731  013400  0102               	movlb	2	; () banked
  3732  013402  6FCB               	movwf	??_main& (0+255),b
  3733  013404  0E03               	movlw	high _maze
  3734  013406  6FCC               	movwf	(??_main+1)& (0+255),b
  3735  013408  0100               	movlb	0	; () banked
  3736  01340A  5160               	movf	?___wmul& (0+255),w,b
  3737  01340C  0102               	movlb	2	; () banked
  3738  01340E  27CB               	addwf	??_main& (0+255),f,b
  3739  013410  0100               	movlb	0	; () banked
  3740  013412  5161               	movf	(?___wmul+1)& (0+255),w,b
  3741  013414  0102               	movlb	2	; () banked
  3742  013416  23CC               	addwfc	(??_main+1)& (0+255),f,b
  3743  013418  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  3744  01341C  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  3745  013420  0E00               	movlw	0
  3746  013422  0100               	movlb	0	; () banked
  3747  013424  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3748  013426  0E0A               	movlw	10
  3749  013428  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3750  01342A  EC40  F0C4         	call	___wmul	;wreg free
  3751  01342E  0100               	movlb	0	; () banked
  3752  013430  5160               	movf	?___wmul& (0+255),w,b
  3753  013432  0102               	movlb	2	; () banked
  3754  013434  27CB               	addwf	??_main& (0+255),f,b
  3755  013436  0100               	movlb	0	; () banked
  3756  013438  5161               	movf	(?___wmul+1)& (0+255),w,b
  3757  01343A  0102               	movlb	2	; () banked
  3758  01343C  23CC               	addwfc	(??_main+1)& (0+255),f,b
  3759  01343E  0E02               	movlw	2
  3760  013440  25CB               	addwf	??_main& (0+255),w,b
  3761  013442  6ED9               	movwf	fsr2l,c
  3762  013444  0E00               	movlw	0
  3763  013446  21CC               	addwfc	(??_main+1)& (0+255),w,b
  3764  013448  6EDA               	movwf	fsr2h,c
  3765  01344A  50DE               	movf	postinc2,w,c
  3766  01344C  10DE               	iorwf	postinc2,w,c
  3767  01344E  A4D8               	btfss	status,2,c
  3768  013450  D038               	goto	l2227
  3769                           
  3770                           ; BSR set to: 2
  3771                           ;main.c: 426: maze[X_Pos][Y_Pos].victim = 1;
  3772  013452  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  3773  013456  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  3774  01345A  0E00               	movlw	0
  3775  01345C  0100               	movlb	0	; () banked
  3776  01345E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3777  013460  0E32               	movlw	50
  3778  013462  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3779  013464  EC40  F0C4         	call	___wmul	;wreg free
  3780  013468  0E00               	movlw	low _maze
  3781  01346A  0102               	movlb	2	; () banked
  3782  01346C  6FCB               	movwf	??_main& (0+255),b
  3783  01346E  0E03               	movlw	high _maze
  3784  013470  6FCC               	movwf	(??_main+1)& (0+255),b
  3785  013472  0100               	movlb	0	; () banked
  3786  013474  5160               	movf	?___wmul& (0+255),w,b
  3787  013476  0102               	movlb	2	; () banked
  3788  013478  27CB               	addwf	??_main& (0+255),f,b
  3789  01347A  0100               	movlb	0	; () banked
  3790  01347C  5161               	movf	(?___wmul+1)& (0+255),w,b
  3791  01347E  0102               	movlb	2	; () banked
  3792  013480  23CC               	addwfc	(??_main+1)& (0+255),f,b
  3793  013482  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  3794  013486  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  3795  01348A  0E00               	movlw	0
  3796  01348C  0100               	movlb	0	; () banked
  3797  01348E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3798  013490  0E0A               	movlw	10
  3799  013492  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3800  013494  EC40  F0C4         	call	___wmul	;wreg free
  3801  013498  0100               	movlb	0	; () banked
  3802  01349A  5160               	movf	?___wmul& (0+255),w,b
  3803  01349C  0102               	movlb	2	; () banked
  3804  01349E  27CB               	addwf	??_main& (0+255),f,b
  3805  0134A0  0100               	movlb	0	; () banked
  3806  0134A2  5161               	movf	(?___wmul+1)& (0+255),w,b
  3807  0134A4  0102               	movlb	2	; () banked
  3808  0134A6  23CC               	addwfc	(??_main+1)& (0+255),f,b
  3809  0134A8  0E02               	movlw	2
  3810  0134AA  25CB               	addwf	??_main& (0+255),w,b
  3811  0134AC  6ED9               	movwf	fsr2l,c
  3812  0134AE  0E00               	movlw	0
  3813  0134B0  21CC               	addwfc	(??_main+1)& (0+255),w,b
  3814  0134B2  6EDA               	movwf	fsr2h,c
  3815  0134B4  0E01               	movlw	1
  3816  0134B6  6EDE               	movwf	postinc2,c
  3817  0134B8  0E00               	movlw	0
  3818  0134BA  6EDD               	movwf	postdec2,c
  3819                           
  3820                           ; BSR set to: 2
  3821                           ;main.c: 427: VictimCount++;
  3822  0134BC  0101               	movlb	1	; () banked
  3823  0134BE  4B34               	infsnz	_VictimCount& (0+255),f,b
  3824  0134C0  2B35               	incf	(_VictimCount+1)& (0+255),f,b
  3825  0134C2                     l2227:
  3826                           
  3827                           ;main.c: 429: }
  3828                           ;main.c: 430: Console_Render();
  3829                           
  3830                           ; BSR set to: 1
  3831  0134C2  ECA2  F0A7         	call	_Console_Render	;wreg free
  3832                           
  3833                           ;main.c: 431: delay_ms(350);
  3834  0134C6  0E01               	movlw	1
  3835  0134C8  0100               	movlb	0	; () banked
  3836  0134CA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3837  0134CC  0E5E               	movlw	94
  3838  0134CE  6F60               	movwf	delay_ms@ms& (0+255),b
  3839  0134D0  ECBA  F0BE         	call	_delay_ms	;wreg free
  3840                           
  3841                           ;main.c: 432: HMI_Poll();
  3842  0134D4  ECFC  F0BD         	call	_HMI_Poll	;wreg free
  3843                           
  3844                           ;main.c: 433: if(HMIBoard.mLeft.mGetState()){
  3845  0134D8  EE22  F073         	lfsr	2,_HMIBoard+25
  3846  0134DC  D801               	call	u15788
  3847  0134DE  D00A               	goto	u15789
  3848  0134E0                     u15788:
  3849  0134E0  0005               	push	
  3850  0134E2  6EFA               	movwf	pclath,c
  3851  0134E4  50DE               	movf	postinc2,w,c
  3852  0134E6  6EFD               	movwf	tosl,c
  3853  0134E8  50DE               	movf	postinc2,w,c
  3854  0134EA  6EFE               	movwf	tosh,c
  3855  0134EC  50DE               	movf	postinc2,w,c
  3856  0134EE  6EFF               	movwf	tosu,c
  3857  0134F0  50FA               	movf	pclath,w,c
  3858  0134F2  0012               	return		;indir
  3859  0134F4                     u15789:
  3860  0134F4  0900               	iorlw	0
  3861  0134F6  A4D8               	btfss	status,2,c
  3862                           
  3863                           ;main.c: 434: Go_Home();
  3864  0134F8  ECFF  F0C4         	call	_Go_Home	;wreg free
  3865  0134FC                     l2228:
  3866  0134FC  0101               	movlb	1	; () banked
  3867  0134FE  BF35               	btfsc	(_VictimCount+1)& (0+255),7,b
  3868  013500  D74E               	goto	l2226
  3869  013502  5135               	movf	(_VictimCount+1)& (0+255),w,b
  3870  013504  E122               	bnz	l18021
  3871  013506  0E02               	movlw	2
  3872  013508  5D34               	subwf	_VictimCount& (0+255),w,b
  3873  01350A  B0D8               	btfsc	status,0,c
  3874  01350C  D01E               	goto	l2230
  3875  01350E  D747               	goto	l2226
  3876  013510                     
  3877                           ; BSR set to: 1
  3878                           ;main.c: 438: printf("%c", (char)35);
  3879                           
  3880                           ; BSR set to: 1
  3881  013510  0EFC               	movlw	low STR_1
  3882  013512  0100               	movlb	0	; () banked
  3883  013514  6F75               	movwf	printf@f& (0+255),b
  3884  013516  0EFF               	movlw	high STR_1
  3885  013518  6F76               	movwf	(printf@f+1)& (0+255),b
  3886  01351A  0E00               	movlw	0
  3887  01351C  6F78               	movwf	(?_printf+3)& (0+255),b
  3888  01351E  0E23               	movlw	35
  3889  013520  6F77               	movwf	(?_printf+2)& (0+255),b
  3890  013522  EC7E  F0AB         	call	_printf	;wreg free
  3891                           
  3892                           ;main.c: 439: printf("\n       \n");
  3893  013526  0ED1               	movlw	low STR_15
  3894  013528  0100               	movlb	0	; () banked
  3895  01352A  6F75               	movwf	printf@f& (0+255),b
  3896  01352C  0EFF               	movlw	high STR_15
  3897  01352E  6F76               	movwf	(printf@f+1)& (0+255),b
  3898  013530  EC7E  F0AB         	call	_printf	;wreg free
  3899                           
  3900                           ;main.c: 440: printf("Going Home");
  3901  013534  0EBC               	movlw	low STR_19
  3902  013536  0100               	movlb	0	; () banked
  3903  013538  6F75               	movwf	printf@f& (0+255),b
  3904  01353A  0EFF               	movlw	high STR_19
  3905  01353C  6F76               	movwf	(printf@f+1)& (0+255),b
  3906  01353E  EC7E  F0AB         	call	_printf	;wreg free
  3907                           
  3908                           ;main.c: 441: Console_Render();
  3909  013542  ECA2  F0A7         	call	_Console_Render	;wreg free
  3910                           
  3911                           ;main.c: 442: Go_Home();
  3912  013546  ECFF  F0C4         	call	_Go_Home	;wreg free
  3913  01354A                     l2230:
  3914  01354A                     l18021:
  3915  01354A  0101               	movlb	1	; () banked
  3916  01354C  AFE1               	btfss	(_top+1)& (0+255),7,b
  3917  01354E  D7E0               	goto	l2231
  3918                           
  3919                           ; BSR set to: 1
  3920                           ;main.c: 444: }
  3921                           ;main.c: 445: printf("HOME!!!@");
  3922                           
  3923                           ; BSR set to: 1
  3924  013550  0EE4               	movlw	low STR_20
  3925  013552  0100               	movlb	0	; () banked
  3926  013554  6F75               	movwf	printf@f& (0+255),b
  3927  013556  0EFF               	movlw	high STR_20
  3928  013558  6F76               	movwf	(printf@f+1)& (0+255),b
  3929  01355A  EC7E  F0AB         	call	_printf	;wreg free
  3930                           
  3931                           ;main.c: 446: Console_Render();
  3932  01355E  ECA2  F0A7         	call	_Console_Render	;wreg free
  3933  013562                     l2233:
  3934  013562  D7FF               	goto	l2233
  3935  013564                     l2235:
  3936                           
  3937                           ;main.c: 449: }
  3938                           ;main.c: 450: if (up){
  3939  013564  0102               	movlb	2	; () banked
  3940  013566  51D2               	movf	main@up& (0+255),w,b
  3941  013568  B4D8               	btfsc	status,2,c
  3942  01356A  D01B               	goto	l2236
  3943                           
  3944                           ; BSR set to: 2
  3945                           ;main.c: 451: Sensor_Observe();
  3946  01356C  EC78  F0AF         	call	_Sensor_Observe	;wreg free
  3947                           
  3948                           ;main.c: 452: Closest_Object();
  3949  013570  EC4F  F0B6         	call	_Closest_Object	;wreg free
  3950                           
  3951                           ;main.c: 453: Travel(3,970,0,200,0);
  3952  013574  0E00               	movlw	0
  3953  013576  0100               	movlb	0	; () banked
  3954  013578  6FF2               	movwf	(Travel@direction+1)& (0+255),b
  3955  01357A  0E03               	movlw	3
  3956  01357C  6FF1               	movwf	Travel@direction& (0+255),b
  3957  01357E  0E03               	movlw	3
  3958  013580  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
  3959  013582  0ECA               	movlw	202
  3960  013584  6FF3               	movwf	Travel@Dist& (0+255),b
  3961  013586  0E00               	movlw	0
  3962  013588  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
  3963  01358A  0E00               	movlw	0
  3964  01358C  6FF5               	movwf	Travel@Test_ADC& (0+255),b
  3965  01358E  0E00               	movlw	0
  3966  013590  6FF8               	movwf	(Travel@Spd+1)& (0+255),b
  3967  013592  0EC8               	movlw	200
  3968  013594  6FF7               	movwf	Travel@Spd& (0+255),b
  3969  013596  0E00               	movlw	0
  3970  013598  6FFA               	movwf	(Travel@Wall+1)& (0+255),b
  3971  01359A  0E00               	movlw	0
  3972  01359C  6FF9               	movwf	Travel@Wall& (0+255),b
  3973  01359E  EC76  F091         	call	_Travel	;wreg free
  3974  0135A2                     l2236:
  3975                           
  3976                           ;main.c: 454: }
  3977                           ;main.c: 456: Console_Render();
  3978  0135A2  ECA2  F0A7         	call	_Console_Render	;wreg free
  3979                           
  3980                           ;main.c: 457: if (MXK_Release())
  3981  0135A6  EC89  F0C5         	call	_MXK_Release	;wreg free
  3982  0135AA  0900               	iorlw	0
  3983  0135AC  B4D8               	btfsc	status,2,c
  3984  0135AE  D662               	goto	l2216
  3985                           
  3986                           ;main.c: 458: MXK_Dequeue();
  3987  0135B0  EC87  F0C3         	call	_MXK_Dequeue	;wreg free
  3988                           
  3989                           ;main.c: 459: }
  3990                           ;main.c: 460: }
  3991  0135B4  D65F               	goto	l2216
  3992  0135B6                     __end_of_main:
  3993                           	opt stack 0
  3994                           tosu	equ	0xFFF
  3995                           tosh	equ	0xFFE
  3996                           tosl	equ	0xFFD
  3997                           pclath	equ	0xFFA
  3998                           tblptru	equ	0xFF8
  3999                           tblptrh	equ	0xFF7
  4000                           tblptrl	equ	0xFF6
  4001                           tablat	equ	0xFF5
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1h	equ	0xFE2
  4006                           fsr1l	equ	0xFE1
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function _Sensor_Observe *****************
  4014 ;; Defined at:
  4015 ;;		line 239 in file "main.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;		None
  4018 ;; Auto vars:     Size  Location     Type
  4019 ;;  Low_Sensor      2  149[BANK0 ] int 
  4020 ;;  High_Sensor     2  147[BANK0 ] int 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;Total ram usage:        6 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:   13
  4037 ;; This function calls:
  4038 ;;		_ADCAverage
  4039 ;;		_Console_Render
  4040 ;;		_SteppingCW
  4041 ;;		_printf
  4042 ;; This function is called by:
  4043 ;;		_main
  4044 ;;		_Find_Flag
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text1
  4049  015EF0                     __ptext1:
  4050                           	opt stack 0
  4051  015EF0                     _Sensor_Observe:
  4052                           	opt stack 17
  4053                           
  4054                           ;main.c: 240: int High_Sensor = 0;
  4055                           
  4056                           ;incstack = 0
  4057  015EF0  0E00               	movlw	0
  4058  015EF2  0100               	movlb	0	; () banked
  4059  015EF4  6FF4               	movwf	(Sensor_Observe@High_Sensor+1)& (0+255),b
  4060  015EF6  0E00               	movlw	0
  4061  015EF8  6FF3               	movwf	Sensor_Observe@High_Sensor& (0+255),b
  4062                           
  4063                           ;main.c: 241: int Low_Sensor = 10000;
  4064  015EFA  0E27               	movlw	39
  4065  015EFC  6FF6               	movwf	(Sensor_Observe@Low_Sensor+1)& (0+255),b
  4066  015EFE  0E10               	movlw	16
  4067  015F00  6FF5               	movwf	Sensor_Observe@Low_Sensor& (0+255),b
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;main.c: 243: printf("%c", (char)35);
  4071  015F02  0EFC               	movlw	low STR_1
  4072  015F04  6F75               	movwf	printf@f& (0+255),b
  4073  015F06  0EFF               	movlw	high STR_1
  4074  015F08  6F76               	movwf	(printf@f+1)& (0+255),b
  4075  015F0A  0E00               	movlw	0
  4076  015F0C  6F78               	movwf	(?_printf+3)& (0+255),b
  4077  015F0E  0E23               	movlw	35
  4078  015F10  6F77               	movwf	(?_printf+2)& (0+255),b
  4079  015F12  EC7E  F0AB         	call	_printf	;wreg free
  4080                           
  4081                           ;main.c: 245: printf("Sensor Moving!   \n");
  4082  015F16  0E29               	movlw	low STR_2
  4083  015F18  0100               	movlb	0	; () banked
  4084  015F1A  6F75               	movwf	printf@f& (0+255),b
  4085  015F1C  0EFF               	movlw	high STR_2
  4086  015F1E  6F76               	movwf	(printf@f+1)& (0+255),b
  4087  015F20  EC7E  F0AB         	call	_printf	;wreg free
  4088                           
  4089                           ;main.c: 247: Console_Render();
  4090  015F24  ECA2  F0A7         	call	_Console_Render	;wreg free
  4091                           
  4092                           ;main.c: 249: while (Motor_Count <= 512) {
  4093  015F28  D051               	goto	l2195
  4094  015F2A                     
  4095                           ;main.c: 250: printf("%c",(char)35);
  4096  015F2A  0EFC               	movlw	low STR_1
  4097  015F2C  0100               	movlb	0	; () banked
  4098  015F2E  6F75               	movwf	printf@f& (0+255),b
  4099  015F30  0EFF               	movlw	high STR_1
  4100  015F32  6F76               	movwf	(printf@f+1)& (0+255),b
  4101  015F34  0E00               	movlw	0
  4102  015F36  6F78               	movwf	(?_printf+3)& (0+255),b
  4103  015F38  0E23               	movlw	35
  4104  015F3A  6F77               	movwf	(?_printf+2)& (0+255),b
  4105  015F3C  EC7E  F0AB         	call	_printf	;wreg free
  4106                           
  4107                           ;main.c: 251: Motor_Count++;
  4108  015F40  0101               	movlb	1	; () banked
  4109  015F42  4B46               	infsnz	_Motor_Count& (0+255),f,b
  4110  015F44  2B47               	incf	(_Motor_Count+1)& (0+255),f,b
  4111                           
  4112                           ; BSR set to: 1
  4113                           ;main.c: 252: ADCAverage();
  4114  015F46  EC23  F09E         	call	_ADCAverage	;wreg free
  4115                           
  4116                           ;main.c: 253: printf("\nADC: %d \n\n", average);
  4117  015F4A  0EB0               	movlw	low STR_4
  4118  015F4C  0100               	movlb	0	; () banked
  4119  015F4E  6F75               	movwf	printf@f& (0+255),b
  4120  015F50  0EFF               	movlw	high STR_4
  4121  015F52  6F76               	movwf	(printf@f+1)& (0+255),b
  4122  015F54  C02E  F077         	movff	_average,?_printf+2
  4123  015F58  C02F  F078         	movff	_average+1,?_printf+3
  4124  015F5C  EC7E  F0AB         	call	_printf	;wreg free
  4125                           
  4126                           ;main.c: 254: Console_Render();
  4127  015F60  ECA2  F0A7         	call	_Console_Render	;wreg free
  4128                           
  4129                           ;main.c: 255: if (Low_Sensor > average) {
  4130  015F64  0100               	movlb	0	; () banked
  4131  015F66  51F5               	movf	Sensor_Observe@Low_Sensor& (0+255),w,b
  4132  015F68  5C2E               	subwf	_average,w,c
  4133  015F6A  502F               	movf	_average+1,w,c
  4134  015F6C  0A80               	xorlw	128
  4135  015F6E  6FF1               	movwf	??_Sensor_Observe& (0+255),b
  4136  015F70  51F6               	movf	(Sensor_Observe@Low_Sensor+1)& (0+255),w,b
  4137  015F72  0A80               	xorlw	128
  4138  015F74  59F1               	subwfb	??_Sensor_Observe& (0+255),w,b
  4139  015F76  B0D8               	btfsc	status,0,c
  4140  015F78  D009               	goto	l2197
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;main.c: 256: Low_Sensor = average;
  4144  015F7A  C02E  F0F5         	movff	_average,Sensor_Observe@Low_Sensor
  4145  015F7E  C02F  F0F6         	movff	_average+1,Sensor_Observe@Low_Sensor+1
  4146                           
  4147                           ;main.c: 257: Close_Pos = Motor_Count;
  4148  015F82  C146  F128         	movff	_Motor_Count,_Close_Pos
  4149  015F86  C147  F129         	movff	_Motor_Count+1,_Close_Pos+1
  4150                           
  4151                           ;main.c: 258: }
  4152  015F8A  D01E               	goto	l2199
  4153  015F8C                     l2197:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;main.c: 259: else if (average > High_Sensor){
  4157                           
  4158                           ; BSR set to: 0
  4159  015F8C  502E               	movf	_average,w,c
  4160  015F8E  5DF3               	subwf	Sensor_Observe@High_Sensor& (0+255),w,b
  4161  015F90  51F4               	movf	(Sensor_Observe@High_Sensor+1)& (0+255),w,b
  4162  015F92  0A80               	xorlw	128
  4163  015F94  6FF1               	movwf	??_Sensor_Observe& (0+255),b
  4164  015F96  502F               	movf	_average+1,w,c
  4165  015F98  0A80               	xorlw	128
  4166  015F9A  59F1               	subwfb	??_Sensor_Observe& (0+255),w,b
  4167  015F9C  B0D8               	btfsc	status,0,c
  4168  015F9E  D014               	goto	l2199
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;main.c: 260: High_Sensor = average;
  4172  015FA0  C02E  F0F3         	movff	_average,Sensor_Observe@High_Sensor
  4173  015FA4  C02F  F0F4         	movff	_average+1,Sensor_Observe@High_Sensor+1
  4174                           
  4175                           ;main.c: 261: Found_Flag = Motor_Count;
  4176  015FA8  C146  F032         	movff	_Motor_Count,_Found_Flag
  4177  015FAC  C147  F033         	movff	_Motor_Count+1,_Found_Flag+1
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;main.c: 262: printf ("\n Found Flag: %d", Found_Flag);
  4181  015FB0  0E4F               	movlw	low STR_5
  4182  015FB2  6F75               	movwf	printf@f& (0+255),b
  4183  015FB4  0EFF               	movlw	high STR_5
  4184  015FB6  6F76               	movwf	(printf@f+1)& (0+255),b
  4185  015FB8  C032  F077         	movff	_Found_Flag,?_printf+2
  4186  015FBC  C033  F078         	movff	_Found_Flag+1,?_printf+3
  4187  015FC0  EC7E  F0AB         	call	_printf	;wreg free
  4188                           
  4189                           ;main.c: 263: Console_Render();
  4190  015FC4  ECA2  F0A7         	call	_Console_Render	;wreg free
  4191  015FC8                     l2199:
  4192                           
  4193                           ;main.c: 264: }
  4194                           ;main.c: 265: SteppingCW();
  4195  015FC8  ECCC  F0C0         	call	_SteppingCW	;wreg free
  4196  015FCC                     l2195:
  4197  015FCC  0101               	movlb	1	; () banked
  4198  015FCE  BF47               	btfsc	(_Motor_Count+1)& (0+255),7,b
  4199  015FD0  D7AC               	goto	l2196
  4200  015FD2  0546               	decf	_Motor_Count& (0+255),w,b
  4201  015FD4  0E02               	movlw	2
  4202  015FD6  5947               	subwfb	(_Motor_Count+1)& (0+255),w,b
  4203  015FD8  A0D8               	btfss	status,0,c
  4204  015FDA  D7A7               	goto	l2196
  4205                           
  4206                           ; BSR set to: 1
  4207                           ;main.c: 266: }
  4208                           ;main.c: 267: RD5 = 0;
  4209  015FDC  9A83               	bcf	3971,5,c	;volatile
  4210                           
  4211                           ;main.c: 268: RD7 = 0;
  4212  015FDE  9E83               	bcf	3971,7,c	;volatile
  4213                           
  4214                           ;main.c: 269: RA2 = 0;
  4215  015FE0  9480               	bcf	3968,2,c	;volatile
  4216                           
  4217                           ;main.c: 270: RA3 = 0;
  4218  015FE2  9680               	bcf	3968,3,c	;volatile
  4219                           
  4220                           ; BSR set to: 1
  4221                           ;main.c: 271: Sensor_Observe_Fin = 1;
  4222  015FE4  0E00               	movlw	0
  4223  015FE6  6F21               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  4224  015FE8  0E01               	movlw	1
  4225  015FEA  6F20               	movwf	_Sensor_Observe_Fin& (0+255),b
  4226                           
  4227                           ; BSR set to: 1
  4228                           ;main.c: 274: CCW_Count = 512 - Close_Pos;
  4229  015FEC  C128  F0F1         	movff	_Close_Pos,??_Sensor_Observe
  4230  015FF0  C129  F0F2         	movff	_Close_Pos+1,??_Sensor_Observe+1
  4231  015FF4  0100               	movlb	0	; () banked
  4232  015FF6  1FF1               	comf	??_Sensor_Observe& (0+255),f,b
  4233  015FF8  1FF2               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  4234  015FFA  4BF1               	infsnz	??_Sensor_Observe& (0+255),f,b
  4235  015FFC  2BF2               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  4236  015FFE  0E00               	movlw	0
  4237  016000  25F1               	addwf	??_Sensor_Observe& (0+255),w,b
  4238  016002  0101               	movlb	1	; () banked
  4239  016004  6F24               	movwf	_CCW_Count& (0+255),b
  4240  016006  0E02               	movlw	2
  4241  016008  0100               	movlb	0	; () banked
  4242  01600A  21F2               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  4243  01600C  0101               	movlb	1	; () banked
  4244  01600E  6F25               	movwf	(_CCW_Count+1)& (0+255),b
  4245                           
  4246                           ; BSR set to: 1
  4247                           ;main.c: 275: Found_Flag = 512 - Found_Flag;
  4248  016010  C032  F0F1         	movff	_Found_Flag,??_Sensor_Observe
  4249  016014  C033  F0F2         	movff	_Found_Flag+1,??_Sensor_Observe+1
  4250  016018  0100               	movlb	0	; () banked
  4251  01601A  1FF1               	comf	??_Sensor_Observe& (0+255),f,b
  4252  01601C  1FF2               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  4253  01601E  4BF1               	infsnz	??_Sensor_Observe& (0+255),f,b
  4254  016020  2BF2               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  4255  016022  0E00               	movlw	0
  4256  016024  25F1               	addwf	??_Sensor_Observe& (0+255),w,b
  4257  016026  6E32               	movwf	_Found_Flag,c
  4258  016028  0E02               	movlw	2
  4259  01602A  21F2               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  4260  01602C  6E33               	movwf	_Found_Flag+1,c
  4261  01602E  0012               	return	
  4262  016030                     __end_of_Sensor_Observe:
  4263                           	opt stack 0
  4264                           tosu	equ	0xFFF
  4265                           tosh	equ	0xFFE
  4266                           tosl	equ	0xFFD
  4267                           pclath	equ	0xFFA
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           postdec1	equ	0xFE5
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           fsr2h	equ	0xFDA
  4280                           fsr2l	equ	0xFD9
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _Robot_Init *****************
  4284 ;; Defined at:
  4285 ;;		line 152 in file "main.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;                  1    wreg      void 
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, status,0, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;Total ram usage:        0 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    9
  4306 ;; This function calls:
  4307 ;;		_Robot_Stop
  4308 ;;		_UpdateDistance
  4309 ;;		_eusartSend
  4310 ;; This function is called by:
  4311 ;;		_main
  4312 ;; This function uses a non-reentrant model
  4313 ;;
  4314                           
  4315                           	psect	text2
  4316  018AFC                     __ptext2:
  4317                           	opt stack 0
  4318  018AFC                     _Robot_Init:
  4319                           	opt stack 21
  4320                           
  4321                           ;main.c: 153: eusartSend(128);
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;incstack = 0
  4325  018AFC  0E80               	movlw	128
  4326  018AFE  EC2D  F0C6         	call	_eusartSend
  4327                           
  4328                           ;main.c: 154: eusartSend(132);
  4329  018B02  0E84               	movlw	132
  4330  018B04  EC2D  F0C6         	call	_eusartSend
  4331                           
  4332                           ;main.c: 155: Robot_Stop();
  4333  018B08  ECB0  F0C4         	call	_Robot_Stop	;wreg free
  4334                           
  4335                           ;main.c: 156: UpdateDistance();
  4336  018B0C  ECC9  F0BD         	call	_UpdateDistance	;wreg free
  4337  018B10  0012               	return		;funcret
  4338  018B12                     __end_of_Robot_Init:
  4339                           	opt stack 0
  4340                           tosu	equ	0xFFF
  4341                           tosh	equ	0xFFE
  4342                           tosl	equ	0xFFD
  4343                           pclath	equ	0xFFA
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           postinc0	equ	0xFEE
  4349                           wreg	equ	0xFE8
  4350                           postdec1	equ	0xFE5
  4351                           fsr1h	equ	0xFE2
  4352                           fsr1l	equ	0xFE1
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           fsr2h	equ	0xFDA
  4356                           fsr2l	equ	0xFD9
  4357                           status	equ	0xFD8
  4358                           
  4359 ;; *************** function _Navigate_Maze *****************
  4360 ;; Defined at:
  4361 ;;		line 595 in file "dans.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;  Direction       2   21[BANK1 ] int 
  4366 ;;  Follow          2    0        int 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4377 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4378 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4379 ;;      Totals:         0       0       2       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4380 ;;Total ram usage:        6 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:   16
  4383 ;; This function calls:
  4384 ;;		_Console_Render
  4385 ;;		_Go_Backward
  4386 ;;		_Travel
  4387 ;;		___wmul
  4388 ;;		_pop
  4389 ;;		_printf
  4390 ;; This function is called by:
  4391 ;;		_main
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           	psect	text3
  4396  012954                     __ptext3:
  4397                           	opt stack 0
  4398  012954                     _Navigate_Maze:
  4399                           	opt stack 14
  4400                           
  4401                           ;dans.c: 596: int Direction;
  4402                           ;dans.c: 597: int Follow;
  4403                           ;dans.c: 598: printf("X=%d, Y=%d\n", X_Pos, Y_Pos);
  4404                           
  4405                           ;incstack = 0
  4406  012954  0E8C               	movlw	low STR_32
  4407  012956  0100               	movlb	0	; () banked
  4408  012958  6F75               	movwf	printf@f& (0+255),b
  4409  01295A  0EFF               	movlw	high STR_32
  4410  01295C  6F76               	movwf	(printf@f+1)& (0+255),b
  4411  01295E  C13C  F077         	movff	_X_Pos,?_printf+2
  4412  012962  C13D  F078         	movff	_X_Pos+1,?_printf+3
  4413  012966  C13A  F079         	movff	_Y_Pos,?_printf+4
  4414  01296A  C13B  F07A         	movff	_Y_Pos+1,?_printf+5
  4415  01296E  EC7E  F0AB         	call	_printf	;wreg free
  4416                           
  4417                           ;dans.c: 599: Console_Render();
  4418  012972  ECA2  F0A7         	call	_Console_Render	;wreg free
  4419                           
  4420                           ;dans.c: 600: if(maze[X_Pos][Y_Pos].Options > 0){
  4421  012976  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4422  01297A  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4423  01297E  0E00               	movlw	0
  4424  012980  0100               	movlb	0	; () banked
  4425  012982  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4426  012984  0E32               	movlw	50
  4427  012986  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4428  012988  EC40  F0C4         	call	___wmul	;wreg free
  4429  01298C  0E00               	movlw	low _maze
  4430  01298E  0102               	movlb	2	; () banked
  4431  012990  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4432  012992  0E03               	movlw	high _maze
  4433  012994  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4434  012996  0100               	movlb	0	; () banked
  4435  012998  5160               	movf	?___wmul& (0+255),w,b
  4436  01299A  0102               	movlb	2	; () banked
  4437  01299C  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4438  01299E  0100               	movlb	0	; () banked
  4439  0129A0  5161               	movf	(?___wmul+1)& (0+255),w,b
  4440  0129A2  0102               	movlb	2	; () banked
  4441  0129A4  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4442  0129A6  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4443  0129AA  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4444  0129AE  0E00               	movlw	0
  4445  0129B0  0100               	movlb	0	; () banked
  4446  0129B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4447  0129B4  0E0A               	movlw	10
  4448  0129B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4449  0129B8  EC40  F0C4         	call	___wmul	;wreg free
  4450  0129BC  0100               	movlb	0	; () banked
  4451  0129BE  5160               	movf	?___wmul& (0+255),w,b
  4452  0129C0  0102               	movlb	2	; () banked
  4453  0129C2  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4454  0129C4  0100               	movlb	0	; () banked
  4455  0129C6  5161               	movf	(?___wmul+1)& (0+255),w,b
  4456  0129C8  0102               	movlb	2	; () banked
  4457  0129CA  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4458  0129CC  0E08               	movlw	8
  4459  0129CE  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4460  0129D0  6ED9               	movwf	fsr2l,c
  4461  0129D2  0E00               	movlw	0
  4462  0129D4  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4463  0129D6  6EDA               	movwf	fsr2h,c
  4464  0129D8  0E01               	movlw	1
  4465  0129DA  BEDB               	btfsc	plusw2,7,c
  4466  0129DC  D23D               	goto	l2503
  4467  0129DE  0E01               	movlw	1
  4468  0129E0  50DB               	movf	plusw2,w,c
  4469  0129E2  E103               	bnz	u14310
  4470  0129E4  04DE               	decf	postinc2,w,c
  4471  0129E6  A0D8               	btfss	status,0,c
  4472  0129E8  D237               	goto	l2503
  4473  0129EA                     u14310:
  4474                           
  4475                           ; BSR set to: 2
  4476                           ;dans.c: 602: if(maze[X_Pos][Y_Pos].walls[1] == 0 && maze[X_Pos][Y_Pos+1].Options > 0){
  4477  0129EA  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4478  0129EE  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4479  0129F2  0E00               	movlw	0
  4480  0129F4  0100               	movlb	0	; () banked
  4481  0129F6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4482  0129F8  0E32               	movlw	50
  4483  0129FA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4484  0129FC  EC40  F0C4         	call	___wmul	;wreg free
  4485  012A00  0E00               	movlw	low _maze
  4486  012A02  0102               	movlb	2	; () banked
  4487  012A04  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4488  012A06  0E03               	movlw	high _maze
  4489  012A08  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4490  012A0A  0100               	movlb	0	; () banked
  4491  012A0C  5160               	movf	?___wmul& (0+255),w,b
  4492  012A0E  0102               	movlb	2	; () banked
  4493  012A10  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4494  012A12  0100               	movlb	0	; () banked
  4495  012A14  5161               	movf	(?___wmul+1)& (0+255),w,b
  4496  012A16  0102               	movlb	2	; () banked
  4497  012A18  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4498  012A1A  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4499  012A1E  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4500  012A22  0E00               	movlw	0
  4501  012A24  0100               	movlb	0	; () banked
  4502  012A26  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4503  012A28  0E0A               	movlw	10
  4504  012A2A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4505  012A2C  EC40  F0C4         	call	___wmul	;wreg free
  4506  012A30  0100               	movlb	0	; () banked
  4507  012A32  5160               	movf	?___wmul& (0+255),w,b
  4508  012A34  0102               	movlb	2	; () banked
  4509  012A36  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4510  012A38  0100               	movlb	0	; () banked
  4511  012A3A  5161               	movf	(?___wmul+1)& (0+255),w,b
  4512  012A3C  0102               	movlb	2	; () banked
  4513  012A3E  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4514  012A40  0E05               	movlw	5
  4515  012A42  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4516  012A44  6ED9               	movwf	fsr2l,c
  4517  012A46  0E00               	movlw	0
  4518  012A48  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4519  012A4A  6EDA               	movwf	fsr2h,c
  4520  012A4C  50DF               	movf	indf2,w,c
  4521  012A4E  A4D8               	btfss	status,2,c
  4522  012A50  D044               	goto	l2504
  4523                           
  4524                           ; BSR set to: 2
  4525  012A52  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4526  012A56  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4527  012A5A  0E00               	movlw	0
  4528  012A5C  0100               	movlb	0	; () banked
  4529  012A5E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4530  012A60  0E32               	movlw	50
  4531  012A62  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4532  012A64  EC40  F0C4         	call	___wmul	;wreg free
  4533  012A68  0E00               	movlw	low _maze
  4534  012A6A  0102               	movlb	2	; () banked
  4535  012A6C  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4536  012A6E  0E03               	movlw	high _maze
  4537  012A70  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4538  012A72  0100               	movlb	0	; () banked
  4539  012A74  5160               	movf	?___wmul& (0+255),w,b
  4540  012A76  0102               	movlb	2	; () banked
  4541  012A78  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4542  012A7A  0100               	movlb	0	; () banked
  4543  012A7C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4544  012A7E  0102               	movlb	2	; () banked
  4545  012A80  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4546  012A82  0E01               	movlw	1
  4547  012A84  0101               	movlb	1	; () banked
  4548  012A86  253A               	addwf	_Y_Pos& (0+255),w,b
  4549  012A88  0100               	movlb	0	; () banked
  4550  012A8A  6F60               	movwf	___wmul@multiplier& (0+255),b
  4551  012A8C  0E00               	movlw	0
  4552  012A8E  0101               	movlb	1	; () banked
  4553  012A90  213B               	addwfc	(_Y_Pos+1)& (0+255),w,b
  4554  012A92  0100               	movlb	0	; () banked
  4555  012A94  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4556  012A96  0E00               	movlw	0
  4557  012A98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4558  012A9A  0E0A               	movlw	10
  4559  012A9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4560  012A9E  EC40  F0C4         	call	___wmul	;wreg free
  4561  012AA2  0100               	movlb	0	; () banked
  4562  012AA4  5160               	movf	?___wmul& (0+255),w,b
  4563  012AA6  0102               	movlb	2	; () banked
  4564  012AA8  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4565  012AAA  0100               	movlb	0	; () banked
  4566  012AAC  5161               	movf	(?___wmul+1)& (0+255),w,b
  4567  012AAE  0102               	movlb	2	; () banked
  4568  012AB0  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4569  012AB2  0E08               	movlw	8
  4570  012AB4  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4571  012AB6  6ED9               	movwf	fsr2l,c
  4572  012AB8  0E00               	movlw	0
  4573  012ABA  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4574  012ABC  6EDA               	movwf	fsr2h,c
  4575  012ABE  0E01               	movlw	1
  4576  012AC0  BEDB               	btfsc	plusw2,7,c
  4577  012AC2  D00B               	goto	l2504
  4578  012AC4  0E01               	movlw	1
  4579  012AC6  50DB               	movf	plusw2,w,c
  4580  012AC8  E103               	bnz	u14330
  4581  012ACA  04DE               	decf	postinc2,w,c
  4582  012ACC  A0D8               	btfss	status,0,c
  4583  012ACE  D005               	goto	l2504
  4584  012AD0                     u14330:
  4585                           
  4586                           ; BSR set to: 2
  4587                           ;dans.c: 603: Direction = 1;
  4588  012AD0  0E00               	movlw	0
  4589  012AD2  0101               	movlb	1	; () banked
  4590  012AD4  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4591  012AD6  0E01               	movlw	1
  4592  012AD8  D167               	goto	L3
  4593  012ADA                     l2504:
  4594                           
  4595                           ;dans.c: 605: else if(maze[X_Pos][Y_Pos].walls[2] == 0 && maze[X_Pos+1][Y_Pos].Options >
      +                           0){
  4596                           
  4597                           ; BSR set to: 1
  4598  012ADA  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4599  012ADE  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4600  012AE2  0E00               	movlw	0
  4601  012AE4  0100               	movlb	0	; () banked
  4602  012AE6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4603  012AE8  0E32               	movlw	50
  4604  012AEA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4605  012AEC  EC40  F0C4         	call	___wmul	;wreg free
  4606  012AF0  0E00               	movlw	low _maze
  4607  012AF2  0102               	movlb	2	; () banked
  4608  012AF4  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4609  012AF6  0E03               	movlw	high _maze
  4610  012AF8  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4611  012AFA  0100               	movlb	0	; () banked
  4612  012AFC  5160               	movf	?___wmul& (0+255),w,b
  4613  012AFE  0102               	movlb	2	; () banked
  4614  012B00  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4615  012B02  0100               	movlb	0	; () banked
  4616  012B04  5161               	movf	(?___wmul+1)& (0+255),w,b
  4617  012B06  0102               	movlb	2	; () banked
  4618  012B08  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4619  012B0A  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4620  012B0E  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4621  012B12  0E00               	movlw	0
  4622  012B14  0100               	movlb	0	; () banked
  4623  012B16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4624  012B18  0E0A               	movlw	10
  4625  012B1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4626  012B1C  EC40  F0C4         	call	___wmul	;wreg free
  4627  012B20  0100               	movlb	0	; () banked
  4628  012B22  5160               	movf	?___wmul& (0+255),w,b
  4629  012B24  0102               	movlb	2	; () banked
  4630  012B26  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4631  012B28  0100               	movlb	0	; () banked
  4632  012B2A  5161               	movf	(?___wmul+1)& (0+255),w,b
  4633  012B2C  0102               	movlb	2	; () banked
  4634  012B2E  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4635  012B30  0E06               	movlw	6
  4636  012B32  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4637  012B34  6ED9               	movwf	fsr2l,c
  4638  012B36  0E00               	movlw	0
  4639  012B38  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4640  012B3A  6EDA               	movwf	fsr2h,c
  4641  012B3C  50DF               	movf	indf2,w,c
  4642  012B3E  A4D8               	btfss	status,2,c
  4643  012B40  D044               	goto	l2506
  4644                           
  4645                           ; BSR set to: 2
  4646  012B42  0E01               	movlw	1
  4647  012B44  0101               	movlb	1	; () banked
  4648  012B46  253C               	addwf	_X_Pos& (0+255),w,b
  4649  012B48  0100               	movlb	0	; () banked
  4650  012B4A  6F60               	movwf	___wmul@multiplier& (0+255),b
  4651  012B4C  0E00               	movlw	0
  4652  012B4E  0101               	movlb	1	; () banked
  4653  012B50  213D               	addwfc	(_X_Pos+1)& (0+255),w,b
  4654  012B52  0100               	movlb	0	; () banked
  4655  012B54  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4656  012B56  0E00               	movlw	0
  4657  012B58  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4658  012B5A  0E32               	movlw	50
  4659  012B5C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4660  012B5E  EC40  F0C4         	call	___wmul	;wreg free
  4661  012B62  0E00               	movlw	low _maze
  4662  012B64  0102               	movlb	2	; () banked
  4663  012B66  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4664  012B68  0E03               	movlw	high _maze
  4665  012B6A  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4666  012B6C  0100               	movlb	0	; () banked
  4667  012B6E  5160               	movf	?___wmul& (0+255),w,b
  4668  012B70  0102               	movlb	2	; () banked
  4669  012B72  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4670  012B74  0100               	movlb	0	; () banked
  4671  012B76  5161               	movf	(?___wmul+1)& (0+255),w,b
  4672  012B78  0102               	movlb	2	; () banked
  4673  012B7A  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4674  012B7C  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4675  012B80  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4676  012B84  0E00               	movlw	0
  4677  012B86  0100               	movlb	0	; () banked
  4678  012B88  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4679  012B8A  0E0A               	movlw	10
  4680  012B8C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4681  012B8E  EC40  F0C4         	call	___wmul	;wreg free
  4682  012B92  0100               	movlb	0	; () banked
  4683  012B94  5160               	movf	?___wmul& (0+255),w,b
  4684  012B96  0102               	movlb	2	; () banked
  4685  012B98  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4686  012B9A  0100               	movlb	0	; () banked
  4687  012B9C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4688  012B9E  0102               	movlb	2	; () banked
  4689  012BA0  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4690  012BA2  0E08               	movlw	8
  4691  012BA4  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4692  012BA6  6ED9               	movwf	fsr2l,c
  4693  012BA8  0E00               	movlw	0
  4694  012BAA  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4695  012BAC  6EDA               	movwf	fsr2h,c
  4696  012BAE  0E01               	movlw	1
  4697  012BB0  BEDB               	btfsc	plusw2,7,c
  4698  012BB2  D00B               	goto	l2506
  4699  012BB4  0E01               	movlw	1
  4700  012BB6  50DB               	movf	plusw2,w,c
  4701  012BB8  E103               	bnz	u14350
  4702  012BBA  04DE               	decf	postinc2,w,c
  4703  012BBC  A0D8               	btfss	status,0,c
  4704  012BBE  D005               	goto	l2506
  4705  012BC0                     u14350:
  4706                           
  4707                           ; BSR set to: 2
  4708                           ;dans.c: 606: Direction = 2;
  4709  012BC0  0E00               	movlw	0
  4710  012BC2  0101               	movlb	1	; () banked
  4711  012BC4  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4712  012BC6  0E02               	movlw	2
  4713  012BC8  D0EF               	goto	L3
  4714  012BCA                     l2506:
  4715                           
  4716                           ;dans.c: 608: else if(maze[X_Pos][Y_Pos].walls[3] == 0 && maze[X_Pos][Y_Pos-1].Options >
      +                           0){
  4717                           
  4718                           ; BSR set to: 1
  4719  012BCA  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4720  012BCE  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4721  012BD2  0E00               	movlw	0
  4722  012BD4  0100               	movlb	0	; () banked
  4723  012BD6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4724  012BD8  0E32               	movlw	50
  4725  012BDA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4726  012BDC  EC40  F0C4         	call	___wmul	;wreg free
  4727  012BE0  0E00               	movlw	low _maze
  4728  012BE2  0102               	movlb	2	; () banked
  4729  012BE4  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4730  012BE6  0E03               	movlw	high _maze
  4731  012BE8  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4732  012BEA  0100               	movlb	0	; () banked
  4733  012BEC  5160               	movf	?___wmul& (0+255),w,b
  4734  012BEE  0102               	movlb	2	; () banked
  4735  012BF0  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4736  012BF2  0100               	movlb	0	; () banked
  4737  012BF4  5161               	movf	(?___wmul+1)& (0+255),w,b
  4738  012BF6  0102               	movlb	2	; () banked
  4739  012BF8  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4740  012BFA  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4741  012BFE  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4742  012C02  0E00               	movlw	0
  4743  012C04  0100               	movlb	0	; () banked
  4744  012C06  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4745  012C08  0E0A               	movlw	10
  4746  012C0A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4747  012C0C  EC40  F0C4         	call	___wmul	;wreg free
  4748  012C10  0100               	movlb	0	; () banked
  4749  012C12  5160               	movf	?___wmul& (0+255),w,b
  4750  012C14  0102               	movlb	2	; () banked
  4751  012C16  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4752  012C18  0100               	movlb	0	; () banked
  4753  012C1A  5161               	movf	(?___wmul+1)& (0+255),w,b
  4754  012C1C  0102               	movlb	2	; () banked
  4755  012C1E  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4756  012C20  0E07               	movlw	7
  4757  012C22  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4758  012C24  6ED9               	movwf	fsr2l,c
  4759  012C26  0E00               	movlw	0
  4760  012C28  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4761  012C2A  6EDA               	movwf	fsr2h,c
  4762  012C2C  50DF               	movf	indf2,w,c
  4763  012C2E  A4D8               	btfss	status,2,c
  4764  012C30  D044               	goto	l2508
  4765                           
  4766                           ; BSR set to: 2
  4767  012C32  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4768  012C36  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4769  012C3A  0E00               	movlw	0
  4770  012C3C  0100               	movlb	0	; () banked
  4771  012C3E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4772  012C40  0E32               	movlw	50
  4773  012C42  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4774  012C44  EC40  F0C4         	call	___wmul	;wreg free
  4775  012C48  0E00               	movlw	low _maze
  4776  012C4A  0102               	movlb	2	; () banked
  4777  012C4C  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4778  012C4E  0E03               	movlw	high _maze
  4779  012C50  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4780  012C52  0100               	movlb	0	; () banked
  4781  012C54  5160               	movf	?___wmul& (0+255),w,b
  4782  012C56  0102               	movlb	2	; () banked
  4783  012C58  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4784  012C5A  0100               	movlb	0	; () banked
  4785  012C5C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4786  012C5E  0102               	movlb	2	; () banked
  4787  012C60  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4788  012C62  0EFF               	movlw	255
  4789  012C64  0101               	movlb	1	; () banked
  4790  012C66  253A               	addwf	_Y_Pos& (0+255),w,b
  4791  012C68  0100               	movlb	0	; () banked
  4792  012C6A  6F60               	movwf	___wmul@multiplier& (0+255),b
  4793  012C6C  0EFF               	movlw	255
  4794  012C6E  0101               	movlb	1	; () banked
  4795  012C70  213B               	addwfc	(_Y_Pos+1)& (0+255),w,b
  4796  012C72  0100               	movlb	0	; () banked
  4797  012C74  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4798  012C76  0E00               	movlw	0
  4799  012C78  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4800  012C7A  0E0A               	movlw	10
  4801  012C7C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4802  012C7E  EC40  F0C4         	call	___wmul	;wreg free
  4803  012C82  0100               	movlb	0	; () banked
  4804  012C84  5160               	movf	?___wmul& (0+255),w,b
  4805  012C86  0102               	movlb	2	; () banked
  4806  012C88  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4807  012C8A  0100               	movlb	0	; () banked
  4808  012C8C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4809  012C8E  0102               	movlb	2	; () banked
  4810  012C90  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4811  012C92  0E08               	movlw	8
  4812  012C94  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4813  012C96  6ED9               	movwf	fsr2l,c
  4814  012C98  0E00               	movlw	0
  4815  012C9A  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4816  012C9C  6EDA               	movwf	fsr2h,c
  4817  012C9E  0E01               	movlw	1
  4818  012CA0  BEDB               	btfsc	plusw2,7,c
  4819  012CA2  D00B               	goto	l2508
  4820  012CA4  0E01               	movlw	1
  4821  012CA6  50DB               	movf	plusw2,w,c
  4822  012CA8  E103               	bnz	u14370
  4823  012CAA  04DE               	decf	postinc2,w,c
  4824  012CAC  A0D8               	btfss	status,0,c
  4825  012CAE  D005               	goto	l2508
  4826  012CB0                     u14370:
  4827                           
  4828                           ; BSR set to: 2
  4829                           ;dans.c: 609: Direction = 3;
  4830  012CB0  0E00               	movlw	0
  4831  012CB2  0101               	movlb	1	; () banked
  4832  012CB4  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4833  012CB6  0E03               	movlw	3
  4834  012CB8  D077               	goto	L3
  4835  012CBA                     l2508:
  4836                           
  4837                           ;dans.c: 611: else if(maze[X_Pos][Y_Pos].walls[0] == 0 && maze[X_Pos-1][Y_Pos].Options >
      +                           0){
  4838                           
  4839                           ; BSR set to: 1
  4840  012CBA  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4841  012CBE  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4842  012CC2  0E00               	movlw	0
  4843  012CC4  0100               	movlb	0	; () banked
  4844  012CC6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4845  012CC8  0E32               	movlw	50
  4846  012CCA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4847  012CCC  EC40  F0C4         	call	___wmul	;wreg free
  4848  012CD0  0E00               	movlw	low _maze
  4849  012CD2  0102               	movlb	2	; () banked
  4850  012CD4  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4851  012CD6  0E03               	movlw	high _maze
  4852  012CD8  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4853  012CDA  0100               	movlb	0	; () banked
  4854  012CDC  5160               	movf	?___wmul& (0+255),w,b
  4855  012CDE  0102               	movlb	2	; () banked
  4856  012CE0  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4857  012CE2  0100               	movlb	0	; () banked
  4858  012CE4  5161               	movf	(?___wmul+1)& (0+255),w,b
  4859  012CE6  0102               	movlb	2	; () banked
  4860  012CE8  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4861  012CEA  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4862  012CEE  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4863  012CF2  0E00               	movlw	0
  4864  012CF4  0100               	movlb	0	; () banked
  4865  012CF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4866  012CF8  0E0A               	movlw	10
  4867  012CFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4868  012CFC  EC40  F0C4         	call	___wmul	;wreg free
  4869  012D00  0100               	movlb	0	; () banked
  4870  012D02  5160               	movf	?___wmul& (0+255),w,b
  4871  012D04  0102               	movlb	2	; () banked
  4872  012D06  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4873  012D08  0100               	movlb	0	; () banked
  4874  012D0A  5161               	movf	(?___wmul+1)& (0+255),w,b
  4875  012D0C  0102               	movlb	2	; () banked
  4876  012D0E  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4877  012D10  0E04               	movlw	4
  4878  012D12  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4879  012D14  6ED9               	movwf	fsr2l,c
  4880  012D16  0E00               	movlw	0
  4881  012D18  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4882  012D1A  6EDA               	movwf	fsr2h,c
  4883  012D1C  50DF               	movf	indf2,w,c
  4884  012D1E  A4D8               	btfss	status,2,c
  4885  012D20  D045               	goto	l2510
  4886                           
  4887                           ; BSR set to: 2
  4888  012D22  0EFF               	movlw	255
  4889  012D24  0101               	movlb	1	; () banked
  4890  012D26  253C               	addwf	_X_Pos& (0+255),w,b
  4891  012D28  0100               	movlb	0	; () banked
  4892  012D2A  6F60               	movwf	___wmul@multiplier& (0+255),b
  4893  012D2C  0EFF               	movlw	255
  4894  012D2E  0101               	movlb	1	; () banked
  4895  012D30  213D               	addwfc	(_X_Pos+1)& (0+255),w,b
  4896  012D32  0100               	movlb	0	; () banked
  4897  012D34  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
  4898  012D36  0E00               	movlw	0
  4899  012D38  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4900  012D3A  0E32               	movlw	50
  4901  012D3C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4902  012D3E  EC40  F0C4         	call	___wmul	;wreg free
  4903  012D42  0E00               	movlw	low _maze
  4904  012D44  0102               	movlb	2	; () banked
  4905  012D46  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4906  012D48  0E03               	movlw	high _maze
  4907  012D4A  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4908  012D4C  0100               	movlb	0	; () banked
  4909  012D4E  5160               	movf	?___wmul& (0+255),w,b
  4910  012D50  0102               	movlb	2	; () banked
  4911  012D52  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4912  012D54  0100               	movlb	0	; () banked
  4913  012D56  5161               	movf	(?___wmul+1)& (0+255),w,b
  4914  012D58  0102               	movlb	2	; () banked
  4915  012D5A  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4916  012D5C  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  4917  012D60  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  4918  012D64  0E00               	movlw	0
  4919  012D66  0100               	movlb	0	; () banked
  4920  012D68  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4921  012D6A  0E0A               	movlw	10
  4922  012D6C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4923  012D6E  EC40  F0C4         	call	___wmul	;wreg free
  4924  012D72  0100               	movlb	0	; () banked
  4925  012D74  5160               	movf	?___wmul& (0+255),w,b
  4926  012D76  0102               	movlb	2	; () banked
  4927  012D78  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4928  012D7A  0100               	movlb	0	; () banked
  4929  012D7C  5161               	movf	(?___wmul+1)& (0+255),w,b
  4930  012D7E  0102               	movlb	2	; () banked
  4931  012D80  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  4932  012D82  0E08               	movlw	8
  4933  012D84  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  4934  012D86  6ED9               	movwf	fsr2l,c
  4935  012D88  0E00               	movlw	0
  4936  012D8A  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  4937  012D8C  6EDA               	movwf	fsr2h,c
  4938  012D8E  0E01               	movlw	1
  4939  012D90  BEDB               	btfsc	plusw2,7,c
  4940  012D92  D00C               	goto	l2510
  4941  012D94  0E01               	movlw	1
  4942  012D96  50DB               	movf	plusw2,w,c
  4943  012D98  E103               	bnz	u14390
  4944  012D9A  04DE               	decf	postinc2,w,c
  4945  012D9C  A0D8               	btfss	status,0,c
  4946  012D9E  D006               	goto	l2510
  4947  012DA0                     u14390:
  4948                           
  4949                           ; BSR set to: 2
  4950                           ;dans.c: 612: Direction = 0;
  4951  012DA0  0E00               	movlw	0
  4952  012DA2  0101               	movlb	1	; () banked
  4953  012DA4  6FFE               	movwf	(Navigate_Maze@Direction+1)& (0+255),b
  4954  012DA6  0E00               	movlw	0
  4955  012DA8                     L3:
  4956  012DA8  6FFD               	movwf	Navigate_Maze@Direction& (0+255),b
  4957                           
  4958                           ;dans.c: 613: }
  4959  012DAA  D00A               	goto	l2514
  4960  012DAC                     l2510:
  4961                           
  4962                           ;dans.c: 614: else{
  4963                           ;dans.c: 615: printf("&&&&&\n");
  4964                           
  4965                           ; BSR set to: 1
  4966  012DAC  0EF5               	movlw	low STR_33
  4967  012DAE  0100               	movlb	0	; () banked
  4968  012DB0  6F75               	movwf	printf@f& (0+255),b
  4969  012DB2  0EFF               	movlw	high STR_33
  4970  012DB4  6F76               	movwf	(printf@f+1)& (0+255),b
  4971  012DB6  EC7E  F0AB         	call	_printf	;wreg free
  4972                           
  4973                           ;dans.c: 616: Console_Render();
  4974  012DBA  ECA2  F0A7         	call	_Console_Render	;wreg free
  4975  012DBE                     l2512:
  4976  012DBE  D7FF               	goto	l2512
  4977  012DC0                     l2514:
  4978                           
  4979                           ;dans.c: 618: }
  4980                           ;dans.c: 620: maze[X_Pos][Y_Pos].Options -= 1;
  4981  012DC0  C13C  F060         	movff	_X_Pos,___wmul@multiplier
  4982  012DC4  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
  4983  012DC8  0E00               	movlw	0
  4984  012DCA  0100               	movlb	0	; () banked
  4985  012DCC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4986  012DCE  0E32               	movlw	50
  4987  012DD0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4988  012DD2  EC40  F0C4         	call	___wmul	;wreg free
  4989  012DD6  0E00               	movlw	low _maze
  4990  012DD8  0102               	movlb	2	; () banked
  4991  012DDA  6FC7               	movwf	??_Navigate_Maze& (0+255),b
  4992  012DDC  0E03               	movlw	high _maze
  4993  012DDE  6FC8               	movwf	(??_Navigate_Maze+1)& (0+255),b
  4994  012DE0  0100               	movlb	0	; () banked
  4995  012DE2  5160               	movf	?___wmul& (0+255),w,b
  4996  012DE4  0102               	movlb	2	; () banked
  4997  012DE6  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  4998  012DE8  0100               	movlb	0	; () banked
  4999  012DEA  5161               	movf	(?___wmul+1)& (0+255),w,b
  5000  012DEC  0102               	movlb	2	; () banked
  5001  012DEE  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5002  012DF0  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
  5003  012DF4  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
  5004  012DF8  0E00               	movlw	0
  5005  012DFA  0100               	movlb	0	; () banked
  5006  012DFC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5007  012DFE  0E0A               	movlw	10
  5008  012E00  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5009  012E02  EC40  F0C4         	call	___wmul	;wreg free
  5010  012E06  0100               	movlb	0	; () banked
  5011  012E08  5160               	movf	?___wmul& (0+255),w,b
  5012  012E0A  0102               	movlb	2	; () banked
  5013  012E0C  27C7               	addwf	??_Navigate_Maze& (0+255),f,b
  5014  012E0E  0100               	movlb	0	; () banked
  5015  012E10  5161               	movf	(?___wmul+1)& (0+255),w,b
  5016  012E12  0102               	movlb	2	; () banked
  5017  012E14  23C8               	addwfc	(??_Navigate_Maze+1)& (0+255),f,b
  5018  012E16  0E08               	movlw	8
  5019  012E18  25C7               	addwf	??_Navigate_Maze& (0+255),w,b
  5020  012E1A  6ED9               	movwf	fsr2l,c
  5021  012E1C  0E00               	movlw	0
  5022  012E1E  21C8               	addwfc	(??_Navigate_Maze+1)& (0+255),w,b
  5023  012E20  6EDA               	movwf	fsr2h,c
  5024  012E22  06DE               	decf	postinc2,f,c
  5025  012E24  0E00               	movlw	0
  5026  012E26  5ADD               	subwfb	postdec2,f,c
  5027                           
  5028                           ; BSR set to: 2
  5029                           ;dans.c: 621: Travel(Direction, 970, 0, 200, 0);
  5030  012E28  C1FD  F0F1         	movff	Navigate_Maze@Direction,Travel@direction
  5031  012E2C  C1FE  F0F2         	movff	Navigate_Maze@Direction+1,Travel@direction+1
  5032  012E30  0E03               	movlw	3
  5033  012E32  0100               	movlb	0	; () banked
  5034  012E34  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
  5035  012E36  0ECA               	movlw	202
  5036  012E38  6FF3               	movwf	Travel@Dist& (0+255),b
  5037  012E3A  0E00               	movlw	0
  5038  012E3C  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
  5039  012E3E  0E00               	movlw	0
  5040  012E40  6FF5               	movwf	Travel@Test_ADC& (0+255),b
  5041  012E42  0E00               	movlw	0
  5042  012E44  6FF8               	movwf	(Travel@Spd+1)& (0+255),b
  5043  012E46  0EC8               	movlw	200
  5044  012E48  6FF7               	movwf	Travel@Spd& (0+255),b
  5045  012E4A  0E00               	movlw	0
  5046  012E4C  6FFA               	movwf	(Travel@Wall+1)& (0+255),b
  5047  012E4E  0E00               	movlw	0
  5048  012E50  6FF9               	movwf	Travel@Wall& (0+255),b
  5049  012E52  EC76  F091         	call	_Travel	;wreg free
  5050                           
  5051                           ;dans.c: 623: }
  5052  012E56  0012               	return	
  5053  012E58                     l2503:
  5054                           
  5055                           ;dans.c: 624: else {
  5056                           ;dans.c: 625: printf("no options\n");
  5057  012E58  0E98               	movlw	low STR_34
  5058  012E5A  0100               	movlb	0	; () banked
  5059  012E5C  6F75               	movwf	printf@f& (0+255),b
  5060  012E5E  0EFF               	movlw	high STR_34
  5061  012E60  6F76               	movwf	(printf@f+1)& (0+255),b
  5062  012E62  EC7E  F0AB         	call	_printf	;wreg free
  5063                           
  5064                           ;dans.c: 626: Console_Render();
  5065  012E66  ECA2  F0A7         	call	_Console_Render	;wreg free
  5066                           
  5067                           ;dans.c: 627: Go_Backward(pop(), 200);
  5068  012E6A  EC80  F0C0         	call	_pop	;wreg free
  5069  012E6E  C083  F1F7         	movff	?_pop,Go_Backward@direction
  5070  012E72  C084  F1F8         	movff	?_pop+1,Go_Backward@direction+1
  5071  012E76  0E00               	movlw	0
  5072  012E78  0101               	movlb	1	; () banked
  5073  012E7A  6FFA               	movwf	(Go_Backward@spd+1)& (0+255),b
  5074  012E7C  0EC8               	movlw	200
  5075  012E7E  6FF9               	movwf	Go_Backward@spd& (0+255),b
  5076  012E80  EC60  F0B4         	call	_Go_Backward	;wreg free
  5077  012E84  0012               	return	
  5078  012E86                     __end_of_Navigate_Maze:
  5079                           	opt stack 0
  5080                           tosu	equ	0xFFF
  5081                           tosh	equ	0xFFE
  5082                           tosl	equ	0xFFD
  5083                           pclath	equ	0xFFA
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           postinc0	equ	0xFEE
  5089                           wreg	equ	0xFE8
  5090                           postdec1	equ	0xFE5
  5091                           fsr1h	equ	0xFE2
  5092                           fsr1l	equ	0xFE1
  5093                           indf2	equ	0xFDF
  5094                           postinc2	equ	0xFDE
  5095                           postdec2	equ	0xFDD
  5096                           plusw2	equ	0xFDB
  5097                           fsr2h	equ	0xFDA
  5098                           fsr2l	equ	0xFD9
  5099                           status	equ	0xFD8
  5100                           
  5101 ;; *************** function _MXK_Init *****************
  5102 ;; Defined at:
  5103 ;;		line 33 in file "Library/MXK.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;                  1    wreg      void 
  5110 ;; Registers used:
  5111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;Total ram usage:        0 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:   16
  5124 ;; This function calls:
  5125 ;;		_LED_Init
  5126 ;;		_Port_Init
  5127 ;;		_Port_SetPin
  5128 ;;		_Port_SetPinType
  5129 ;;		_Port_SetQuadType
  5130 ;;		_Port_SetType
  5131 ;;		_delay_ms
  5132 ;; This function is called by:
  5133 ;;		_main
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text4
  5138  016030                     __ptext4:
  5139                           	opt stack 0
  5140  016030                     _MXK_Init:
  5141                           	opt stack 14
  5142                           
  5143                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5144                           
  5145                           ;incstack = 0
  5146  016030  0E01               	movlw	1
  5147  016032  6E4C               	movwf	_Bus_State,c
  5148                           
  5149                           ;MXK.c: 36: lQueue = (Function)0;
  5150  016034  0E00               	movlw	0
  5151  016036  6E29               	movwf	_lQueue,c	;volatile
  5152  016038  0E00               	movlw	0
  5153  01603A  6E2A               	movwf	_lQueue+1,c	;volatile
  5154  01603C  0E00               	movlw	0
  5155  01603E  6E2B               	movwf	_lQueue+2,c	;volatile
  5156                           
  5157                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5158  016040  0EBD               	movlw	low _PortA
  5159  016042  0100               	movlb	0	; () banked
  5160  016044  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5161  016046  0E02               	movlw	high _PortA
  5162  016048  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5163  01604A  0E00               	movlw	0
  5164  01604C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5165  01604E  EC0A  F0AA         	call	_Port_Init	;wreg free
  5166                           
  5167                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5168  016052  0E80               	movlw	low _PortB
  5169  016054  0100               	movlb	0	; () banked
  5170  016056  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5171  016058  0E01               	movlw	high _PortB
  5172  01605A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5173  01605C  0E01               	movlw	1
  5174  01605E  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5175  016060  EC0A  F0AA         	call	_Port_Init	;wreg free
  5176                           
  5177                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5178  016064  0E8A               	movlw	low _PortC
  5179  016066  0100               	movlb	0	; () banked
  5180  016068  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5181  01606A  0E01               	movlw	high _PortC
  5182  01606C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5183  01606E  0E02               	movlw	2
  5184  016070  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5185  016072  EC0A  F0AA         	call	_Port_Init	;wreg free
  5186                           
  5187                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5188  016076  0E76               	movlw	low _PortD
  5189  016078  0100               	movlb	0	; () banked
  5190  01607A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5191  01607C  0E01               	movlw	high _PortD
  5192  01607E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5193  016080  0E03               	movlw	3
  5194  016082  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5195  016084  EC0A  F0AA         	call	_Port_Init	;wreg free
  5196                           
  5197                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5198  016088  0E6C               	movlw	low _PortE
  5199  01608A  0100               	movlb	0	; () banked
  5200  01608C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5201  01608E  0E01               	movlw	high _PortE
  5202  016090  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5203  016092  0E04               	movlw	4
  5204  016094  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5205  016096  EC0A  F0AA         	call	_Port_Init	;wreg free
  5206                           
  5207                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5208  01609A  0E94               	movlw	low _PortF
  5209  01609C  0100               	movlb	0	; () banked
  5210  01609E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5211  0160A0  0E01               	movlw	high _PortF
  5212  0160A2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5213  0160A4  0E05               	movlw	5
  5214  0160A6  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5215  0160A8  EC0A  F0AA         	call	_Port_Init	;wreg free
  5216                           
  5217                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5218  0160AC  0EB3               	movlw	low _PortG
  5219  0160AE  0100               	movlb	0	; () banked
  5220  0160B0  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5221  0160B2  0E02               	movlw	high _PortG
  5222  0160B4  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5223  0160B6  0E06               	movlw	6
  5224  0160B8  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5225  0160BA  EC0A  F0AA         	call	_Port_Init	;wreg free
  5226                           
  5227                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5228  0160BE  0E94               	movlw	low _PortF
  5229  0160C0  0100               	movlb	0	; () banked
  5230  0160C2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5231  0160C4  0E01               	movlw	high _PortF
  5232  0160C6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5233  0160C8  0E05               	movlw	5
  5234  0160CA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5235  0160CC  0E00               	movlw	0
  5236  0160CE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5237  0160D0  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  5238                           
  5239                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5240  0160D4  0E80               	movlw	low _PortB
  5241  0160D6  0100               	movlb	0	; () banked
  5242  0160D8  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  5243  0160DA  0E01               	movlw	high _PortB
  5244  0160DC  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5245  0160DE  0E00               	movlw	0
  5246  0160E0  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5247  0160E2  0E00               	movlw	0
  5248  0160E4  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  5249  0160E6  ECC7  F0A4         	call	_Port_SetQuadType	;wreg free
  5250                           
  5251                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5252  0160EA  0E94               	movlw	low _PortF
  5253  0160EC  0100               	movlb	0	; () banked
  5254  0160EE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5255  0160F0  0E01               	movlw	high _PortF
  5256  0160F2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5257  0160F4  0E06               	movlw	6
  5258  0160F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5259  0160F8  0E03               	movlw	3
  5260  0160FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5261  0160FC  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  5262                           
  5263                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5264  016100  0EB3               	movlw	low _PortG
  5265  016102  0100               	movlb	0	; () banked
  5266  016104  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  5267  016106  0E02               	movlw	high _PortG
  5268  016108  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5269  01610A  0E03               	movlw	3
  5270  01610C  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5271  01610E  ECBB  F0A6         	call	_Port_SetType	;wreg free
  5272                           
  5273                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5274  016112  0EB3               	movlw	low _PortG
  5275  016114  0100               	movlb	0	; () banked
  5276  016116  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5277  016118  0E02               	movlw	high _PortG
  5278  01611A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5279  01611C  0E04               	movlw	4
  5280  01611E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5281  016120  0E00               	movlw	0
  5282  016122  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5283  016124  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  5284                           
  5285                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5286  016128  0E94               	movlw	low _PortF
  5287  01612A  0100               	movlb	0	; () banked
  5288  01612C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5289  01612E  0E01               	movlw	high _PortF
  5290  016130  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5291  016132  0E06               	movlw	6
  5292  016134  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5293  016136  0E01               	movlw	1
  5294  016138  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5295  01613A  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  5296                           
  5297                           ;MXK.c: 55: LED_Init(eLED1);
  5298  01613E  0E00               	movlw	0
  5299  016140  ECE8  F0BE         	call	_LED_Init
  5300                           
  5301                           ;MXK.c: 56: LED_Init(eLED2);
  5302  016144  0E01               	movlw	1
  5303  016146  ECE8  F0BE         	call	_LED_Init
  5304                           
  5305                           ;MXK.c: 58: PIR1 = 0;
  5306  01614A  0E00               	movlw	0
  5307  01614C  6E9E               	movwf	3998,c	;volatile
  5308                           
  5309                           ;MXK.c: 59: PIR2 = 0;
  5310  01614E  0E00               	movlw	0
  5311  016150  6EA1               	movwf	4001,c	;volatile
  5312                           
  5313                           ;MXK.c: 60: PIR3 = 0;
  5314  016152  0E00               	movlw	0
  5315  016154  6EA4               	movwf	4004,c	;volatile
  5316                           
  5317                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5318  016156  8E9B               	bsf	3995,7,c	;volatile
  5319                           
  5320                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5321  016158  8C9B               	bsf	3995,6,c	;volatile
  5322                           
  5323                           ;MXK.c: 66: delay_ms(100);
  5324  01615A  0E00               	movlw	0
  5325  01615C  0100               	movlb	0	; () banked
  5326  01615E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  5327  016160  0E64               	movlw	100
  5328  016162  6F60               	movwf	delay_ms@ms& (0+255),b
  5329  016164  ECBA  F0BE         	call	_delay_ms	;wreg free
  5330                           
  5331                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5332  016168  8ED0               	bsf	4048,7,c	;volatile
  5333  01616A  0012               	return		;funcret
  5334  01616C                     __end_of_MXK_Init:
  5335                           	opt stack 0
  5336                           tosu	equ	0xFFF
  5337                           tosh	equ	0xFFE
  5338                           tosl	equ	0xFFD
  5339                           pclath	equ	0xFFA
  5340                           tblptru	equ	0xFF8
  5341                           tblptrh	equ	0xFF7
  5342                           tblptrl	equ	0xFF6
  5343                           tablat	equ	0xFF5
  5344                           postinc0	equ	0xFEE
  5345                           wreg	equ	0xFE8
  5346                           postdec1	equ	0xFE5
  5347                           fsr1h	equ	0xFE2
  5348                           fsr1l	equ	0xFE1
  5349                           indf2	equ	0xFDF
  5350                           postinc2	equ	0xFDE
  5351                           postdec2	equ	0xFDD
  5352                           plusw2	equ	0xFDB
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _Port_Init *****************
  5358 ;; Defined at:
  5359 ;;		line 150 in file "Library/Port.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  5362 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5363 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5364 ;;  pPort           1   66[BANK0 ] enum E6786
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;  i               1   69[BANK0 ] unsigned char 
  5367 ;; Return value:  Size  Location     Type
  5368 ;;                  1    wreg      void 
  5369 ;; Registers used:
  5370 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5371 ;; Tracked objects:
  5372 ;;		On entry : 0/0
  5373 ;;		On exit  : 0/0
  5374 ;;		Unchanged: 0/0
  5375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5376 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;Total ram usage:        6 bytes
  5381 ;; Hardware stack levels used:    1
  5382 ;; Hardware stack levels required when called:   15
  5383 ;; This function calls:
  5384 ;;		_GetPortPORT
  5385 ;;		_GetPortProperties
  5386 ;;		_GetPortTRIS
  5387 ;;		_Port_Set
  5388 ;;		_Port_SetPinType
  5389 ;;		_Port_SetType
  5390 ;;		_Word_GetPair
  5391 ;; This function is called by:
  5392 ;;		_MXK_Init
  5393 ;; This function uses a non-reentrant model
  5394 ;;
  5395                           
  5396                           	psect	text5
  5397  015414                     __ptext5:
  5398                           	opt stack 0
  5399  015414                     _Port_Init:
  5400                           	opt stack 14
  5401                           
  5402                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5403                           
  5404                           ;incstack = 0
  5405  015414  0100               	movlb	0	; () banked
  5406  015416  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5407  015418  ECA1  F0B9         	call	_GetPortProperties
  5408  01541C  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5409  015420  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5410  015424  0100               	movlb	0	; () banked
  5411  015426  C060  FFDE         	movff	?_GetPortProperties,postinc2
  5412  01542A  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  5413                           
  5414                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5415  01542E  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5416  015430  ECE5  F0B9         	call	_GetPortPORT
  5417  015434  0100               	movlb	0	; () banked
  5418  015436  EE20 F006          	lfsr	2,6
  5419  01543A  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5420  01543C  26D9               	addwf	fsr2l,f,c
  5421  01543E  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5422  015440  22DA               	addwfc	fsr2h,f,c
  5423  015442  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5424  015446  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5425                           
  5426                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5427  01544A  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5428  01544C  ECE5  F0B9         	call	_GetPortPORT
  5429  015450  0100               	movlb	0	; () banked
  5430  015452  EE20 F004          	lfsr	2,4
  5431  015456  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5432  015458  26D9               	addwf	fsr2l,f,c
  5433  01545A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5434  01545C  22DA               	addwfc	fsr2h,f,c
  5435  01545E  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5436  015462  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5437                           
  5438                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5439  015466  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5440  015468  EC5D  F0B9         	call	_GetPortTRIS
  5441  01546C  0100               	movlb	0	; () banked
  5442  01546E  EE20 F002          	lfsr	2,2
  5443  015472  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5444  015474  26D9               	addwf	fsr2l,f,c
  5445  015476  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5446  015478  22DA               	addwfc	fsr2h,f,c
  5447  01547A  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  5448  01547E  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5452  015482  EE20 F004          	lfsr	2,4
  5453  015486  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5454  015488  26D9               	addwf	fsr2l,f,c
  5455  01548A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5456  01548C  22DA               	addwfc	fsr2h,f,c
  5457  01548E  CFDE F0A3          	movff	postinc2,??_Port_Init
  5458  015492  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5459  015496  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5460  01549A  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5461  01549E  0E00               	movlw	0
  5462  0154A0  6EDF               	movwf	indf2,c
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5466  0154A2  EE20 F002          	lfsr	2,2
  5467  0154A6  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5468  0154A8  26D9               	addwf	fsr2l,f,c
  5469  0154AA  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5470  0154AC  22DA               	addwfc	fsr2h,f,c
  5471  0154AE  CFDE F0A3          	movff	postinc2,??_Port_Init
  5472  0154B2  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5473  0154B6  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5474  0154BA  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5475  0154BE  0EFF               	movlw	255
  5476  0154C0  6EDF               	movwf	indf2,c
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5480  0154C2  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  5481  0154C6  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5482  0154CA  0E00               	movlw	0
  5483  0154CC  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5484  0154CE  ECBB  F0A6         	call	_Port_SetType	;wreg free
  5485                           
  5486                           ;Port.c: 166: UINT8 i;
  5487                           ;Port.c: 167: for (i=0; i<8; i++)
  5488  0154D2  0E00               	movlw	0
  5489  0154D4  0100               	movlb	0	; () banked
  5490  0154D6  6FA5               	movwf	Port_Init@i& (0+255),b
  5491  0154D8                     l16311:
  5492                           
  5493                           ; BSR set to: 0
  5494  0154D8  0E07               	movlw	7
  5495  0154DA  65A5               	cpfsgt	Port_Init@i& (0+255),b
  5496  0154DC  D031               	goto	l403
  5497  0154DE  D04B               	goto	u13730
  5498  0154E0                     
  5499                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5500                           
  5501                           ; BSR set to: 0
  5502  0154E0  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5503  0154E4  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5504  0154E8  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5505  0154EC  0E03               	movlw	3
  5506  0154EE  0100               	movlb	0	; () banked
  5507  0154F0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5508  0154F2  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  5509                           
  5510                           ;Port.c: 173: break;
  5511  0154F6  D03C               	goto	l405
  5512  0154F8                     
  5513                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5514  0154F8  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5515  0154FC  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5516  015500  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5517  015504  0E02               	movlw	2
  5518  015506  0100               	movlb	0	; () banked
  5519  015508  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5520  01550A  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  5521                           
  5522                           ;Port.c: 176: break;
  5523  01550E  D030               	goto	l405
  5524  015510                     
  5525                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5526  015510  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5527  015514  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5528  015518  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5529  01551C  0E01               	movlw	1
  5530  01551E  0100               	movlb	0	; () banked
  5531  015520  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5532  015522  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  5533                           
  5534                           ;Port.c: 179: break;
  5535  015526  D024               	goto	l405
  5536  015528                     
  5537                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5538  015528  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5539  01552C  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5540  015530  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5541  015534  0E00               	movlw	0
  5542  015536  0100               	movlb	0	; () banked
  5543  015538  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5544  01553A  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  5545                           
  5546                           ;Port.c: 183: }
  5547                           
  5548                           ;Port.c: 182: break;
  5549  01553E  D018               	goto	l405
  5550  015540                     l403:
  5551  015540  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5552  015544  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5553  015548  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  5554  01554C  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  5555  015550  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  5556  015554  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  5557                           
  5558                           ; Switch size 1, requested type "space"
  5559                           ; Number of cases is 4, Range of values is 0 to 3
  5560                           ; switch strategies available:
  5561                           ; Name         Instructions Cycles
  5562                           ; simple_byte           13     7 (average)
  5563                           ;	Chosen strategy is simple_byte
  5564  015558  0A00               	xorlw	0	; case 0
  5565  01555A  B4D8               	btfsc	status,2,c
  5566  01555C  D7C1               	goto	l404
  5567  01555E  0A01               	xorlw	1	; case 1
  5568  015560  B4D8               	btfsc	status,2,c
  5569  015562  D7D6               	goto	l407
  5570  015564  0A03               	xorlw	3	; case 2
  5571  015566  B4D8               	btfsc	status,2,c
  5572  015568  D7C7               	goto	l406
  5573  01556A  0A01               	xorlw	1	; case 3
  5574  01556C  B4D8               	btfsc	status,2,c
  5575  01556E  D7DC               	goto	l408
  5576  015570                     l405:
  5577  015570  0100               	movlb	0	; () banked
  5578  015572  2BA5               	incf	Port_Init@i& (0+255),f,b
  5579  015574  D7B1               	goto	l16311
  5580  015576                     u13730:
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;Port.c: 184: }
  5584                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5585                           
  5586                           ; BSR set to: 0
  5587  015576  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  5588  01557A  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5589  01557E  0E00               	movlw	0
  5590  015580  6F71               	movwf	Port_Set@pValue& (0+255),b
  5591  015582  ECF6  F0A0         	call	_Port_Set	;wreg free
  5592  015586  0012               	return		;funcret
  5593  015588                     __end_of_Port_Init:
  5594                           	opt stack 0
  5595                           tosu	equ	0xFFF
  5596                           tosh	equ	0xFFE
  5597                           tosl	equ	0xFFD
  5598                           pclath	equ	0xFFA
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           postdec1	equ	0xFE5
  5606                           fsr1h	equ	0xFE2
  5607                           fsr1l	equ	0xFE1
  5608                           indf2	equ	0xFDF
  5609                           postinc2	equ	0xFDE
  5610                           postdec2	equ	0xFDD
  5611                           plusw2	equ	0xFDB
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _Port_SetType *****************
  5617 ;; Defined at:
  5618 ;;		line 513 in file "Library/Port.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5621 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5622 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5623 ;;  pType           1   60[BANK0 ] enum E6795
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  Output          1   63[BANK0 ] enum E6475
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      enum E6475
  5628 ;; Registers used:
  5629 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5635 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;Total ram usage:        6 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:   14
  5642 ;; This function calls:
  5643 ;;		_Port_CheckPortType
  5644 ;;		_Word_SetPair
  5645 ;; This function is called by:
  5646 ;;		_Port_Init
  5647 ;;		_MXK_Init
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           	psect	text6
  5652  014D76                     __ptext6:
  5653                           	opt stack 0
  5654  014D76                     _Port_SetType:
  5655                           	opt stack 15
  5656                           
  5657                           ;Port.c: 515: ePinError Output = ePinErrorState;
  5658                           
  5659                           ;incstack = 0
  5660  014D76  0E05               	movlw	5
  5661  014D78  0100               	movlb	0	; () banked
  5662  014D7A  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5663                           
  5664                           ;Port.c: 517: switch (pType)
  5665  014D7C  D06E               	goto	l509
  5666  014D7E                     
  5667                           ; BSR set to: 0
  5668                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  5669                           
  5670                           ; BSR set to: 0
  5671  014D7E  EE20 F002          	lfsr	2,2
  5672  014D82  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5673  014D84  26D9               	addwf	fsr2l,f,c
  5674  014D86  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5675  014D88  22DA               	addwfc	fsr2h,f,c
  5676  014D8A  CFDE F09D          	movff	postinc2,??_Port_SetType
  5677  014D8E  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5678  014D92  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5679  014D96  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5680  014D9A  0EFF               	movlw	255
  5681  014D9C  D05C               	goto	L6
  5682  014D9E                     
  5683                           ; BSR set to: 0
  5684                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  5685                           
  5686                           ; BSR set to: 0
  5687  014D9E  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5688  014DA2  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5689  014DA6  0E01               	movlw	1
  5690  014DA8  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5691  014DAA  EC0E  F0C2         	call	_Port_CheckPortType	;wreg free
  5692  014DAE  0100               	movlb	0	; () banked
  5693  014DB0  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5694  014DB2  519F               	movf	Port_SetType@Output& (0+255),w,b
  5695  014DB4  A4D8               	btfss	status,2,c
  5696  014DB6  0012               	return	
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;Port.c: 527: {
  5700                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  5701  014DB8  EE20 F002          	lfsr	2,2
  5702  014DBC  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5703  014DBE  26D9               	addwf	fsr2l,f,c
  5704  014DC0  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5705  014DC2  22DA               	addwfc	fsr2h,f,c
  5706  014DC4  CFDE F09D          	movff	postinc2,??_Port_SetType
  5707  014DC8  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5708  014DCC  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5709  014DD0  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5710  014DD4  0E00               	movlw	0
  5711  014DD6  6EDF               	movwf	indf2,c
  5712                           
  5713                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  5714  014DD8  EE20 F004          	lfsr	2,4
  5715  014DDC  D02F               	goto	L25
  5716  014DDE                     
  5717                           ; BSR set to: 0
  5718                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  5719                           
  5720                           ; BSR set to: 0
  5721  014DDE  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5722  014DE2  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5723  014DE6  0E02               	movlw	2
  5724  014DE8  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5725  014DEA  EC0E  F0C2         	call	_Port_CheckPortType	;wreg free
  5726  014DEE  0100               	movlb	0	; () banked
  5727  014DF0  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5728  014DF2  519F               	movf	Port_SetType@Output& (0+255),w,b
  5729  014DF4  A4D8               	btfss	status,2,c
  5730  014DF6  0012               	return	
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;Port.c: 538: {
  5734                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  5735  014DF8  EE20 F002          	lfsr	2,2
  5736  014DFC  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5737  014DFE  26D9               	addwf	fsr2l,f,c
  5738  014E00  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5739  014E02  22DA               	addwfc	fsr2h,f,c
  5740  014E04  CFDE F09D          	movff	postinc2,??_Port_SetType
  5741  014E08  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5742  014E0C  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5743  014E10  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5744  014E14  0EFF               	movlw	255
  5745  014E16  6EDF               	movwf	indf2,c
  5746                           
  5747                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  5748  014E18  EE20 F004          	lfsr	2,4
  5749  014E1C  D7B2               	goto	L7
  5750  014E1E                     
  5751                           ; BSR set to: 0
  5752                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  5753                           
  5754                           ; BSR set to: 0
  5755  014E1E  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5756  014E22  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5757  014E26  0E00               	movlw	0
  5758  014E28  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5759  014E2A  EC0E  F0C2         	call	_Port_CheckPortType	;wreg free
  5760  014E2E  0100               	movlb	0	; () banked
  5761  014E30  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5762  014E32  519F               	movf	Port_SetType@Output& (0+255),w,b
  5763  014E34  A4D8               	btfss	status,2,c
  5764  014E36  0012               	return	
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;Port.c: 549: {
  5768                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  5769  014E38  EE20 F002          	lfsr	2,2
  5770  014E3C                     L25:
  5771  014E3C  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5772  014E3E  26D9               	addwf	fsr2l,f,c
  5773  014E40  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5774  014E42  22DA               	addwfc	fsr2h,f,c
  5775  014E44  CFDE F09D          	movff	postinc2,??_Port_SetType
  5776  014E48  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5777  014E4C  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5778  014E50  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5779  014E54  0E00               	movlw	0
  5780  014E56                     L6:
  5781  014E56  6EDF               	movwf	indf2,c
  5782                           
  5783                           ;Port.c: 552: }
  5784  014E58  D00D               	goto	l511
  5785  014E5A                     l509:
  5786                           
  5787                           ; BSR set to: 0
  5788                           
  5789                           ; BSR set to: 0
  5790  014E5A  519C               	movf	Port_SetType@pType& (0+255),w,b
  5791                           
  5792                           ; Switch size 1, requested type "space"
  5793                           ; Number of cases is 4, Range of values is 0 to 3
  5794                           ; switch strategies available:
  5795                           ; Name         Instructions Cycles
  5796                           ; simple_byte           13     7 (average)
  5797                           ;	Chosen strategy is simple_byte
  5798  014E5C  0A00               	xorlw	0	; case 0
  5799  014E5E  B4D8               	btfsc	status,2,c
  5800  014E60  D78E               	goto	l510
  5801  014E62  0A01               	xorlw	1	; case 1
  5802  014E64  B4D8               	btfsc	status,2,c
  5803  014E66  D79B               	goto	l512
  5804  014E68  0A03               	xorlw	3	; case 2
  5805  014E6A  B4D8               	btfsc	status,2,c
  5806  014E6C  D7B8               	goto	l516
  5807  014E6E  0A01               	xorlw	1	; case 3
  5808  014E70  B4D8               	btfsc	status,2,c
  5809  014E72  D7D5               	goto	l519
  5810  014E74                     l511:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  5814                           
  5815                           ; BSR set to: 0
  5816  014E74  0E08               	movlw	8
  5817  014E76  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5818  014E78  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5819  014E7A  0E00               	movlw	0
  5820  014E7C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5821  014E7E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5822  014E80  0E00               	movlw	0
  5823  014E82  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5824  014E84  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5825  014E88  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5826                           
  5827                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  5828  014E8C  0E08               	movlw	8
  5829  014E8E  0100               	movlb	0	; () banked
  5830  014E90  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5831  014E92  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5832  014E94  0E00               	movlw	0
  5833  014E96  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5834  014E98  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5835  014E9A  0E01               	movlw	1
  5836  014E9C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5837  014E9E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5838  014EA2  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5839                           
  5840                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  5841  014EA6  0E08               	movlw	8
  5842  014EA8  0100               	movlb	0	; () banked
  5843  014EAA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5844  014EAC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5845  014EAE  0E00               	movlw	0
  5846  014EB0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5847  014EB2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5848  014EB4  0E02               	movlw	2
  5849  014EB6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5850  014EB8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5851  014EBC  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5852                           
  5853                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  5854  014EC0  0E08               	movlw	8
  5855  014EC2  0100               	movlb	0	; () banked
  5856  014EC4  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5857  014EC6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5858  014EC8  0E00               	movlw	0
  5859  014ECA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5860  014ECC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5861  014ECE  0E03               	movlw	3
  5862  014ED0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5863  014ED2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5864  014ED6  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5865                           
  5866                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  5867  014EDA  0E08               	movlw	8
  5868  014EDC  0100               	movlb	0	; () banked
  5869  014EDE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5870  014EE0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5871  014EE2  0E00               	movlw	0
  5872  014EE4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5873  014EE6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5874  014EE8  0E04               	movlw	4
  5875  014EEA  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5876  014EEC  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5877  014EF0  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5878                           
  5879                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  5880  014EF4  0E08               	movlw	8
  5881  014EF6  0100               	movlb	0	; () banked
  5882  014EF8  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5883  014EFA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5884  014EFC  0E00               	movlw	0
  5885  014EFE  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5886  014F00  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5887  014F02  0E05               	movlw	5
  5888  014F04  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5889  014F06  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5890  014F0A  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5891                           
  5892                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  5893  014F0E  0E08               	movlw	8
  5894  014F10  0100               	movlb	0	; () banked
  5895  014F12  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5896  014F14  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5897  014F16  0E00               	movlw	0
  5898  014F18  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5899  014F1A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5900  014F1C  0E06               	movlw	6
  5901  014F1E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5902  014F20  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5903  014F24  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5904                           
  5905                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  5906  014F28  0E08               	movlw	8
  5907  014F2A  0100               	movlb	0	; () banked
  5908  014F2C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  5909  014F2E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  5910  014F30  0E00               	movlw	0
  5911  014F32  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  5912  014F34  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  5913  014F36  0E07               	movlw	7
  5914  014F38  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  5915  014F3A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  5916  014F3E  ECE5  F0C2         	call	_Word_SetPair	;wreg free
  5917  014F42  0012               	return	
  5918  014F44                     __end_of_Port_SetType:
  5919                           	opt stack 0
  5920                           tosu	equ	0xFFF
  5921                           tosh	equ	0xFFE
  5922                           tosl	equ	0xFFD
  5923                           pclath	equ	0xFFA
  5924                           tblptru	equ	0xFF8
  5925                           tblptrh	equ	0xFF7
  5926                           tblptrl	equ	0xFF6
  5927                           tablat	equ	0xFF5
  5928                           postinc0	equ	0xFEE
  5929                           wreg	equ	0xFE8
  5930                           postdec1	equ	0xFE5
  5931                           fsr1h	equ	0xFE2
  5932                           fsr1l	equ	0xFE1
  5933                           indf2	equ	0xFDF
  5934                           postinc2	equ	0xFDE
  5935                           postdec2	equ	0xFDD
  5936                           plusw2	equ	0xFDB
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function _Port_CheckPortType *****************
  5942 ;; Defined at:
  5943 ;;		line 138 in file "Library/Port.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  5946 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5947 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5948 ;;  pDrive          1   56[BANK0 ] enum E6469
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  Output          1   57[BANK0 ] enum E6475
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      enum E6475
  5953 ;; Registers used:
  5954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5960 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;Total ram usage:        4 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:   13
  5967 ;; This function calls:
  5968 ;;		_Port_CheckQuadType
  5969 ;; This function is called by:
  5970 ;;		_Port_SetType
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text7
  5975  01841C                     __ptext7:
  5976                           	opt stack 0
  5977  01841C                     _Port_CheckPortType:
  5978                           	opt stack 15
  5979                           
  5980                           ;Port.c: 140: ePinError Output = ePinErrorState;
  5981                           
  5982                           ;incstack = 0
  5983  01841C  0E05               	movlw	5
  5984  01841E  0100               	movlb	0	; () banked
  5985  018420  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  5989  018422  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  5990  018426  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  5991  01842A  0E00               	movlw	0
  5992  01842C  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  5993  01842E  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  5994  018432  EC0B  F0C0         	call	_Port_CheckQuadType	;wreg free
  5995  018436  0100               	movlb	0	; () banked
  5996  018438  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  5997  01843A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  5998  01843C  A4D8               	btfss	status,2,c
  5999  01843E  D00C               	goto	l397
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6003  018440  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6004  018444  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6005  018448  0E01               	movlw	1
  6006  01844A  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6007  01844C  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6008  018450  EC0B  F0C0         	call	_Port_CheckQuadType	;wreg free
  6009  018454  0100               	movlb	0	; () banked
  6010  018456  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6011  018458                     l397:
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;Port.c: 146: return Output;
  6015                           
  6016                           ; BSR set to: 0
  6017  018458  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6018  01845A  0012               	return	
  6019  01845C                     __end_of_Port_CheckPortType:
  6020                           	opt stack 0
  6021                           tosu	equ	0xFFF
  6022                           tosh	equ	0xFFE
  6023                           tosl	equ	0xFFD
  6024                           pclath	equ	0xFFA
  6025                           tblptru	equ	0xFF8
  6026                           tblptrh	equ	0xFF7
  6027                           tblptrl	equ	0xFF6
  6028                           tablat	equ	0xFF5
  6029                           postinc0	equ	0xFEE
  6030                           wreg	equ	0xFE8
  6031                           postdec1	equ	0xFE5
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           plusw2	equ	0xFDB
  6038                           fsr2h	equ	0xFDA
  6039                           fsr2l	equ	0xFD9
  6040                           status	equ	0xFD8
  6041                           
  6042 ;; *************** function _Port_Set *****************
  6043 ;; Defined at:
  6044 ;;		line 570 in file "Library/Port.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6047 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6048 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6049 ;;  pValue          1   17[BANK0 ] unsigned char 
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6052 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6053 ;;  Type            1   38[BANK0 ] enum E6795
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6063 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;Total ram usage:       24 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:   10
  6070 ;; This function calls:
  6071 ;;		_Byte_SetByte
  6072 ;;		_Word_GetPair
  6073 ;; This function is called by:
  6074 ;;		_Port_Init
  6075 ;;		_Port_Toggle
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           	psect	text8
  6080  0141EC                     __ptext8:
  6081                           	opt stack 0
  6082  0141EC                     _Port_Set:
  6083                           	opt stack 18
  6084                           
  6085                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;incstack = 0
  6089  0141EC  0E08               	movlw	8
  6090  0141EE  0100               	movlb	0	; () banked
  6091  0141F0  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6092  0141F2  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6093  0141F4  0E00               	movlw	0
  6094  0141F6  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6095  0141F8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6096  0141FA  0E00               	movlw	0
  6097  0141FC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6098  0141FE  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6099  014202  0100               	movlb	0	; () banked
  6100  014204  6F86               	movwf	Port_Set@Type& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6104  014206  5186               	movf	Port_Set@Type& (0+255),w,b
  6105  014208  6F72               	movwf	??_Port_Set& (0+255),b
  6106  01420A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6107  01420C  0E0E               	movlw	14
  6108  01420E                     u13105:
  6109  01420E  90D8               	bcf	status,0,c
  6110  014210  3772               	rlcf	??_Port_Set& (0+255),f,b
  6111  014212  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6112  014214  2EE8               	decfsz	wreg,f,c
  6113  014216  D7FB               	goto	u13105
  6114  014218  5186               	movf	Port_Set@Type& (0+255),w,b
  6115  01421A  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6116  01421C  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  6117  01421E  0E0C               	movlw	12
  6118  014220                     u13115:
  6119  014220  90D8               	bcf	status,0,c
  6120  014222  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6121  014224  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6122  014226  2EE8               	decfsz	wreg,f,c
  6123  014228  D7FB               	goto	u13115
  6124  01422A  5186               	movf	Port_Set@Type& (0+255),w,b
  6125  01422C  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  6126  01422E  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  6127  014230  0E0A               	movlw	10
  6128  014232                     u13125:
  6129  014232  90D8               	bcf	status,0,c
  6130  014234  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6131  014236  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6132  014238  2EE8               	decfsz	wreg,f,c
  6133  01423A  D7FB               	goto	u13125
  6134  01423C  5186               	movf	Port_Set@Type& (0+255),w,b
  6135  01423E  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  6136  014240  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  6137  014242  5186               	movf	Port_Set@Type& (0+255),w,b
  6138  014244  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  6139  014246  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  6140  014248  0E06               	movlw	6
  6141  01424A                     u13135:
  6142  01424A  90D8               	bcf	status,0,c
  6143  01424C  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6144  01424E  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6145  014250  2EE8               	decfsz	wreg,f,c
  6146  014252  D7FB               	goto	u13135
  6147  014254  5186               	movf	Port_Set@Type& (0+255),w,b
  6148  014256  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  6149  014258  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  6150  01425A  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  6151  01425C  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  6152  01425E  0EF0               	movlw	240
  6153  014260  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  6154  014262  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6155  014264  0B0F               	andlw	15
  6156  014266  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6157  014268  0EF0               	movlw	240
  6158  01426A  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  6159  01426C  5186               	movf	Port_Set@Type& (0+255),w,b
  6160  01426E  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  6161  014270  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  6162  014272  90D8               	bcf	status,0,c
  6163  014274  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6164  014276  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6165  014278  90D8               	bcf	status,0,c
  6166  01427A  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6167  01427C  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6168  01427E  5186               	movf	Port_Set@Type& (0+255),w,b
  6169  014280  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  6170  014282  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  6171  014284  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  6172  014286  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6173  014288  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  6174  01428A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6175  01428C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6176  01428E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6177  014290  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  6178  014292  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6179  014294  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  6180  014296  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6181  014298  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  6182  01429A  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6183  01429C  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  6184  01429E  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6185  0142A0  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  6186  0142A2  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6187  0142A4  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  6188  0142A6  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6189  0142A8  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  6190  0142AA  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6191  0142AC  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6192  0142AE  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6193  0142B0  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  6194  0142B2  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6195  0142B4  5172               	movf	??_Port_Set& (0+255),w,b
  6196  0142B6  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6197  0142B8  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  6198  0142BA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6199  0142BC  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6200  0142BE  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;Port.c: 574: UINT16 TypeActual = Type;
  6204  0142C0  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  6205  0142C4  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6209  0142C6  0E08               	movlw	8
  6210  0142C8  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6211  0142CA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6212  0142CC  0E00               	movlw	0
  6213  0142CE  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6214  0142D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6215  0142D2  0E01               	movlw	1
  6216  0142D4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6217  0142D6  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6218  0142DA  0100               	movlb	0	; () banked
  6219  0142DC  6F72               	movwf	??_Port_Set& (0+255),b
  6220  0142DE  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6221  0142E0  90D8               	bcf	status,0,c
  6222  0142E2  3772               	rlcf	??_Port_Set& (0+255),f,b
  6223  0142E4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6224  0142E6  90D8               	bcf	status,0,c
  6225  0142E8  3772               	rlcf	??_Port_Set& (0+255),f,b
  6226  0142EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6227  0142EC  5172               	movf	??_Port_Set& (0+255),w,b
  6228  0142EE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6229  0142F0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6230  0142F2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6234  0142F4  0E08               	movlw	8
  6235  0142F6  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6236  0142F8  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6237  0142FA  0E00               	movlw	0
  6238  0142FC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6239  0142FE  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6240  014300  0E02               	movlw	2
  6241  014302  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6242  014304  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6243  014308  0100               	movlb	0	; () banked
  6244  01430A  6F72               	movwf	??_Port_Set& (0+255),b
  6245  01430C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6246  01430E  3B72               	swapf	??_Port_Set& (0+255),f,b
  6247  014310  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  6248  014312  0EF0               	movlw	240
  6249  014314  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  6250  014316  5172               	movf	??_Port_Set& (0+255),w,b
  6251  014318  0B0F               	andlw	15
  6252  01431A  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6253  01431C  0EF0               	movlw	240
  6254  01431E  1772               	andwf	??_Port_Set& (0+255),f,b
  6255  014320  5172               	movf	??_Port_Set& (0+255),w,b
  6256  014322  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6257  014324  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6258  014326  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6262  014328  0E08               	movlw	8
  6263  01432A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6264  01432C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6265  01432E  0E00               	movlw	0
  6266  014330  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6267  014332  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6268  014334  0E03               	movlw	3
  6269  014336  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6270  014338  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6271  01433C  0100               	movlb	0	; () banked
  6272  01433E  6F72               	movwf	??_Port_Set& (0+255),b
  6273  014340  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6274  014342  0E06               	movlw	6
  6275  014344                     u13145:
  6276  014344  90D8               	bcf	status,0,c
  6277  014346  3772               	rlcf	??_Port_Set& (0+255),f,b
  6278  014348  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6279  01434A  2EE8               	decfsz	wreg,f,c
  6280  01434C  D7FB               	goto	u13145
  6281  01434E  5172               	movf	??_Port_Set& (0+255),w,b
  6282  014350  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6283  014352  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6284  014354  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6288  014356  0E08               	movlw	8
  6289  014358  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6290  01435A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6291  01435C  0E00               	movlw	0
  6292  01435E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6293  014360  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6294  014362  0E04               	movlw	4
  6295  014364  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6296  014366  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6297  01436A  0100               	movlb	0	; () banked
  6298  01436C  6F72               	movwf	??_Port_Set& (0+255),b
  6299  01436E  5172               	movf	??_Port_Set& (0+255),w,b
  6300  014370  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6301  014372  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6302  014374  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6303  014376  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6304  014378  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6305  01437A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6309  01437C  0E08               	movlw	8
  6310  01437E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6311  014380  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6312  014382  0E00               	movlw	0
  6313  014384  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6314  014386  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6315  014388  0E05               	movlw	5
  6316  01438A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6317  01438C  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6318  014390  0100               	movlb	0	; () banked
  6319  014392  6F72               	movwf	??_Port_Set& (0+255),b
  6320  014394  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6321  014396  0E0A               	movlw	10
  6322  014398                     u13155:
  6323  014398  90D8               	bcf	status,0,c
  6324  01439A  3772               	rlcf	??_Port_Set& (0+255),f,b
  6325  01439C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6326  01439E  2EE8               	decfsz	wreg,f,c
  6327  0143A0  D7FB               	goto	u13155
  6328  0143A2  5172               	movf	??_Port_Set& (0+255),w,b
  6329  0143A4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6330  0143A6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6331  0143A8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6335  0143AA  0E08               	movlw	8
  6336  0143AC  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6337  0143AE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6338  0143B0  0E00               	movlw	0
  6339  0143B2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6340  0143B4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6341  0143B6  0E06               	movlw	6
  6342  0143B8  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6343  0143BA  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6344  0143BE  0100               	movlb	0	; () banked
  6345  0143C0  6F72               	movwf	??_Port_Set& (0+255),b
  6346  0143C2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6347  0143C4  0E0C               	movlw	12
  6348  0143C6                     u13165:
  6349  0143C6  90D8               	bcf	status,0,c
  6350  0143C8  3772               	rlcf	??_Port_Set& (0+255),f,b
  6351  0143CA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6352  0143CC  2EE8               	decfsz	wreg,f,c
  6353  0143CE  D7FB               	goto	u13165
  6354  0143D0  5172               	movf	??_Port_Set& (0+255),w,b
  6355  0143D2  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6356  0143D4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6357  0143D6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6361  0143D8  0E08               	movlw	8
  6362  0143DA  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6363  0143DC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6364  0143DE  0E00               	movlw	0
  6365  0143E0  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6366  0143E2  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6367  0143E4  0E07               	movlw	7
  6368  0143E6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6369  0143E8  EC6E  F0C3         	call	_Word_GetPair	;wreg free
  6370  0143EC  0100               	movlb	0	; () banked
  6371  0143EE  6F72               	movwf	??_Port_Set& (0+255),b
  6372  0143F0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6373  0143F2  0E0E               	movlw	14
  6374  0143F4                     u13175:
  6375  0143F4  90D8               	bcf	status,0,c
  6376  0143F6  3772               	rlcf	??_Port_Set& (0+255),f,b
  6377  0143F8  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6378  0143FA  2EE8               	decfsz	wreg,f,c
  6379  0143FC  D7FB               	goto	u13175
  6380  0143FE  5172               	movf	??_Port_Set& (0+255),w,b
  6381  014400  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6382  014402  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6383  014404  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6384                           
  6385                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6386  014406  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  6387  014408  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6388  01440A  E144               	bnz	l528
  6389  01440C  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6390  01440E  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6391  014410  A4D8               	btfss	status,2,c
  6392  014412  0012               	return	
  6393  014414  D030               	goto	l526
  6394  014416                     
  6395                           ; BSR set to: 0
  6396                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6397                           
  6398                           ; BSR set to: 0
  6399  014416  EE20 F002          	lfsr	2,2
  6400  01441A  516F               	movf	Port_Set@pInput& (0+255),w,b
  6401  01441C  26D9               	addwf	fsr2l,f,c
  6402  01441E  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6403  014420  22DA               	addwfc	fsr2h,f,c
  6404  014422  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6405  014426  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6406  01442A  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6407  01442E  EC1F  F0C6         	call	_Byte_SetByte	;wreg free
  6408                           
  6409                           ;Port.c: 594: break;
  6410  014432  0012               	return	
  6411  014434                     
  6412                           ;Port.c: 597: pValue = ~pValue;
  6413  014434  0100               	movlb	0	; () banked
  6414  014436  1F71               	comf	Port_Set@pValue& (0+255),f,b
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6418  014438  EE20 F002          	lfsr	2,2
  6419  01443C  516F               	movf	Port_Set@pInput& (0+255),w,b
  6420  01443E  26D9               	addwf	fsr2l,f,c
  6421  014440  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6422  014442  22DA               	addwfc	fsr2h,f,c
  6423  014444  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6424  014448  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6425  01444C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6426  014450  EC1F  F0C6         	call	_Byte_SetByte	;wreg free
  6427                           
  6428                           ;Port.c: 599: break;
  6429  014454  0012               	return	
  6430  014456                     
  6431                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6432  014456  0100               	movlb	0	; () banked
  6433  014458  EE20 F004          	lfsr	2,4
  6434  01445C  516F               	movf	Port_Set@pInput& (0+255),w,b
  6435  01445E  26D9               	addwf	fsr2l,f,c
  6436  014460  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6437  014462  22DA               	addwfc	fsr2h,f,c
  6438  014464  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6439  014468  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6440  01446C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6441  014470  EC1F  F0C6         	call	_Byte_SetByte	;wreg free
  6442                           
  6443                           ;Port.c: 606: }
  6444                           
  6445                           ;Port.c: 605: break;
  6446                           
  6447                           ;Port.c: 604: default:
  6448                           
  6449                           ;Port.c: 603: break;
  6450  014474  0012               	return	
  6451  014476                     l526:
  6452  014476  0100               	movlb	0	; () banked
  6453  014478  5186               	movf	Port_Set@Type& (0+255),w,b
  6454                           
  6455                           ; Switch size 1, requested type "space"
  6456                           ; Number of cases is 4, Range of values is 0 to 3
  6457                           ; switch strategies available:
  6458                           ; Name         Instructions Cycles
  6459                           ; simple_byte           13     7 (average)
  6460                           ;	Chosen strategy is simple_byte
  6461  01447A  0A00               	xorlw	0	; case 0
  6462  01447C  B4D8               	btfsc	status,2,c
  6463  01447E  0012               	return	
  6464  014480  0A01               	xorlw	1	; case 1
  6465  014482  B4D8               	btfsc	status,2,c
  6466  014484  D7C8               	goto	l529
  6467  014486  0A03               	xorlw	3	; case 2
  6468  014488  B4D8               	btfsc	status,2,c
  6469  01448A  D7D4               	goto	l531
  6470  01448C  0A01               	xorlw	1	; case 3
  6471  01448E  A4D8               	btfss	status,2,c
  6472                           
  6473                           ; BSR set to: 0
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;Port.c: 607: }
  6477  014490  0012               	return	
  6478  014492  D7E1               	goto	l532
  6479  014494                     l528:
  6480  014494  0012               	return		;funcret
  6481  014496                     __end_of_Port_Set:
  6482                           	opt stack 0
  6483                           tosu	equ	0xFFF
  6484                           tosh	equ	0xFFE
  6485                           tosl	equ	0xFFD
  6486                           pclath	equ	0xFFA
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           postinc0	equ	0xFEE
  6492                           wreg	equ	0xFE8
  6493                           postdec1	equ	0xFE5
  6494                           fsr1h	equ	0xFE2
  6495                           fsr1l	equ	0xFE1
  6496                           indf2	equ	0xFDF
  6497                           postinc2	equ	0xFDE
  6498                           postdec2	equ	0xFDD
  6499                           plusw2	equ	0xFDB
  6500                           fsr2h	equ	0xFDA
  6501                           fsr2l	equ	0xFD9
  6502                           status	equ	0xFD8
  6503                           
  6504 ;; *************** function _Byte_SetByte *****************
  6505 ;; Defined at:
  6506 ;;		line 110 in file "Library/Types.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6509 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6510 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6511 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6512 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6513 ;;		 -> NULL(0), 
  6514 ;;  pValue          1    2[BANK0 ] unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;		None
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  1    wreg      void 
  6519 ;; Registers used:
  6520 ;;		fsr2l, fsr2h
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6526 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;Total ram usage:        3 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    7
  6533 ;; This function calls:
  6534 ;;		Nothing
  6535 ;; This function is called by:
  6536 ;;		_Port_Set
  6537 ;;		_I2C_Init
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text9
  6542  018C3E                     __ptext9:
  6543                           	opt stack 0
  6544  018C3E                     _Byte_SetByte:
  6545                           	opt stack 20
  6546                           
  6547                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6548                           
  6549                           ;incstack = 0
  6550  018C3E  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6551  018C42  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6552  018C46  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  6553  018C4A  0012               	return		;funcret
  6554  018C4C                     __end_of_Byte_SetByte:
  6555                           	opt stack 0
  6556                           tosu	equ	0xFFF
  6557                           tosh	equ	0xFFE
  6558                           tosl	equ	0xFFD
  6559                           pclath	equ	0xFFA
  6560                           tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           postinc0	equ	0xFEE
  6565                           wreg	equ	0xFE8
  6566                           postdec1	equ	0xFE5
  6567                           fsr1h	equ	0xFE2
  6568                           fsr1l	equ	0xFE1
  6569                           indf2	equ	0xFDF
  6570                           postinc2	equ	0xFDE
  6571                           postdec2	equ	0xFDD
  6572                           plusw2	equ	0xFDB
  6573                           fsr2h	equ	0xFDA
  6574                           fsr2l	equ	0xFD9
  6575                           status	equ	0xFD8
  6576                           
  6577 ;; *************** function _GetPortTRIS *****************
  6578 ;; Defined at:
  6579 ;;		line 67 in file "Library/Port.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  pInput          1    wreg     enum E6786
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  pInput          1    2[BANK0 ] enum E6786
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  2    0[BANK0 ] PTR struct Byte
  6586 ;; Registers used:
  6587 ;;		wreg, status,2, status,0
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6593 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6596 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6597 ;;Total ram usage:        3 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    7
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		_Port_Init
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           	psect	text10
  6608  0172BA                     __ptext10:
  6609                           	opt stack 0
  6610  0172BA                     _GetPortTRIS:
  6611                           	opt stack 21
  6612                           
  6613                           ;incstack = 0
  6614                           ;GetPortTRIS@pInput stored from wreg
  6615  0172BA  0100               	movlb	0	; () banked
  6616  0172BC  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  6617                           
  6618                           ;Port.c: 69: switch (pInput)
  6619  0172BE  D029               	goto	l363
  6620  0172C0                     
  6621                           ;Port.c: 72: return (BytePtr)&TRISA;
  6622  0172C0  0E92               	movlw	146
  6623  0172C2  0100               	movlb	0	; () banked
  6624  0172C4  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6625  0172C6  0E0F               	movlw	15
  6626  0172C8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6627                           
  6628                           ; BSR set to: 0
  6629  0172CA  0012               	return	
  6630  0172CC                     
  6631                           ; BSR set to: 0
  6632                           ;Port.c: 74: return (BytePtr)&TRISB;
  6633                           
  6634                           ; BSR set to: 0
  6635  0172CC  0E93               	movlw	147
  6636  0172CE  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6637  0172D0  0E0F               	movlw	15
  6638  0172D2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6639                           
  6640                           ; BSR set to: 0
  6641  0172D4  0012               	return	
  6642  0172D6                     
  6643                           ; BSR set to: 0
  6644                           ;Port.c: 76: return (BytePtr)&TRISC;
  6645                           
  6646                           ; BSR set to: 0
  6647  0172D6  0E94               	movlw	148
  6648  0172D8  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6649  0172DA  0E0F               	movlw	15
  6650  0172DC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6651                           
  6652                           ; BSR set to: 0
  6653  0172DE  0012               	return	
  6654  0172E0                     
  6655                           ; BSR set to: 0
  6656                           ;Port.c: 78: return (BytePtr)&TRISD;
  6657                           
  6658                           ; BSR set to: 0
  6659  0172E0  0E95               	movlw	149
  6660  0172E2  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6661  0172E4  0E0F               	movlw	15
  6662  0172E6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6663                           
  6664                           ; BSR set to: 0
  6665  0172E8  0012               	return	
  6666  0172EA                     
  6667                           ; BSR set to: 0
  6668                           ;Port.c: 80: return (BytePtr)&TRISE;
  6669                           
  6670                           ; BSR set to: 0
  6671  0172EA  0E96               	movlw	150
  6672  0172EC  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6673  0172EE  0E0F               	movlw	15
  6674  0172F0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6675                           
  6676                           ; BSR set to: 0
  6677  0172F2  0012               	return	
  6678  0172F4                     
  6679                           ; BSR set to: 0
  6680                           ;Port.c: 82: return (BytePtr)&TRISF;
  6681                           
  6682                           ; BSR set to: 0
  6683  0172F4  0E97               	movlw	151
  6684  0172F6  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6685  0172F8  0E0F               	movlw	15
  6686  0172FA  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6687                           
  6688                           ; BSR set to: 0
  6689  0172FC  0012               	return	
  6690  0172FE                     
  6691                           ; BSR set to: 0
  6692                           ;Port.c: 84: return (BytePtr)&TRISG;
  6693                           
  6694                           ; BSR set to: 0
  6695  0172FE  0E98               	movlw	152
  6696  017300  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6697  017302  0E0F               	movlw	15
  6698  017304  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6699                           
  6700                           ; BSR set to: 0
  6701  017306  0012               	return	
  6702  017308                     
  6703                           ; BSR set to: 0
  6704                           ;Port.c: 86: return (void*)0;
  6705                           
  6706                           ; BSR set to: 0
  6707  017308  0E00               	movlw	0
  6708  01730A  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6709  01730C  0E00               	movlw	0
  6710  01730E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;Port.c: 87: }
  6714                           
  6715                           ; BSR set to: 0
  6716  017310  0012               	return	
  6717  017312                     l363:
  6718                           
  6719                           ; BSR set to: 0
  6720  017312  0100               	movlb	0	; () banked
  6721  017314  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  6722                           
  6723                           ; Switch size 1, requested type "space"
  6724                           ; Number of cases is 7, Range of values is 0 to 6
  6725                           ; switch strategies available:
  6726                           ; Name         Instructions Cycles
  6727                           ; simple_byte           22    12 (average)
  6728                           ;	Chosen strategy is simple_byte
  6729  017316  0A00               	xorlw	0	; case 0
  6730  017318  B4D8               	btfsc	status,2,c
  6731  01731A  D7D2               	goto	l364
  6732  01731C  0A01               	xorlw	1	; case 1
  6733  01731E  B4D8               	btfsc	status,2,c
  6734  017320  D7D5               	goto	l366
  6735  017322  0A03               	xorlw	3	; case 2
  6736  017324  B4D8               	btfsc	status,2,c
  6737  017326  D7D7               	goto	l367
  6738  017328  0A01               	xorlw	1	; case 3
  6739  01732A  B4D8               	btfsc	status,2,c
  6740  01732C  D7D9               	goto	l368
  6741  01732E  0A07               	xorlw	7	; case 4
  6742  017330  B4D8               	btfsc	status,2,c
  6743  017332  D7DB               	goto	l369
  6744  017334  0A01               	xorlw	1	; case 5
  6745  017336  B4D8               	btfsc	status,2,c
  6746  017338  D7DD               	goto	l370
  6747  01733A  0A03               	xorlw	3	; case 6
  6748  01733C  B4D8               	btfsc	status,2,c
  6749  01733E  D7DF               	goto	l371
  6750  017340  D7E3               	goto	l372
  6751  017342                     __end_of_GetPortTRIS:
  6752                           	opt stack 0
  6753                           tosu	equ	0xFFF
  6754                           tosh	equ	0xFFE
  6755                           tosl	equ	0xFFD
  6756                           pclath	equ	0xFFA
  6757                           tblptru	equ	0xFF8
  6758                           tblptrh	equ	0xFF7
  6759                           tblptrl	equ	0xFF6
  6760                           tablat	equ	0xFF5
  6761                           postinc0	equ	0xFEE
  6762                           wreg	equ	0xFE8
  6763                           postdec1	equ	0xFE5
  6764                           fsr1h	equ	0xFE2
  6765                           fsr1l	equ	0xFE1
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           plusw2	equ	0xFDB
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _GetPortProperties *****************
  6775 ;; Defined at:
  6776 ;;		line 21 in file "Library/Port.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;  pInput          1    wreg     enum E6786
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  pInput          1    2[BANK0 ] enum E6786
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  2    0[BANK0 ] PTR struct PortProperty
  6783 ;; Registers used:
  6784 ;;		wreg, status,2, status,0
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6790 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6794 ;;Total ram usage:        3 bytes
  6795 ;; Hardware stack levels used:    1
  6796 ;; Hardware stack levels required when called:    7
  6797 ;; This function calls:
  6798 ;;		Nothing
  6799 ;; This function is called by:
  6800 ;;		_Port_Init
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           	psect	text11
  6805  017342                     __ptext11:
  6806                           	opt stack 0
  6807  017342                     _GetPortProperties:
  6808                           	opt stack 21
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;incstack = 0
  6812                           ;GetPortProperties@pInput stored from wreg
  6813  017342  0100               	movlb	0	; () banked
  6814  017344  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  6815                           
  6816                           ;Port.c: 23: switch (pInput)
  6817  017346  D029               	goto	l337
  6818  017348                     
  6819                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  6820  017348  0E79               	movlw	low _PortA_Property
  6821  01734A  0100               	movlb	0	; () banked
  6822  01734C  6F60               	movwf	?_GetPortProperties& (0+255),b
  6823  01734E  0EFE               	movlw	high _PortA_Property
  6824  017350  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6825                           
  6826                           ; BSR set to: 0
  6827  017352  0012               	return	
  6828  017354                     
  6829                           ; BSR set to: 0
  6830                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  6831                           
  6832                           ; BSR set to: 0
  6833  017354  0E77               	movlw	low _PortB_Property
  6834  017356  6F60               	movwf	?_GetPortProperties& (0+255),b
  6835  017358  0EFE               	movlw	high _PortB_Property
  6836  01735A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839  01735C  0012               	return	
  6840  01735E                     
  6841                           ; BSR set to: 0
  6842                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  6843                           
  6844                           ; BSR set to: 0
  6845  01735E  0E75               	movlw	low _PortC_Property
  6846  017360  6F60               	movwf	?_GetPortProperties& (0+255),b
  6847  017362  0EFE               	movlw	high _PortC_Property
  6848  017364  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6849                           
  6850                           ; BSR set to: 0
  6851  017366  0012               	return	
  6852  017368                     
  6853                           ; BSR set to: 0
  6854                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  6855                           
  6856                           ; BSR set to: 0
  6857  017368  0E73               	movlw	low _PortD_Property
  6858  01736A  6F60               	movwf	?_GetPortProperties& (0+255),b
  6859  01736C  0EFE               	movlw	high _PortD_Property
  6860  01736E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6861                           
  6862                           ; BSR set to: 0
  6863  017370  0012               	return	
  6864  017372                     
  6865                           ; BSR set to: 0
  6866                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  6867                           
  6868                           ; BSR set to: 0
  6869  017372  0E71               	movlw	low _PortE_Property
  6870  017374  6F60               	movwf	?_GetPortProperties& (0+255),b
  6871  017376  0EFE               	movlw	high _PortE_Property
  6872  017378  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6873                           
  6874                           ; BSR set to: 0
  6875  01737A  0012               	return	
  6876  01737C                     
  6877                           ; BSR set to: 0
  6878                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  6879                           
  6880                           ; BSR set to: 0
  6881  01737C  0E6F               	movlw	low _PortF_Property
  6882  01737E  6F60               	movwf	?_GetPortProperties& (0+255),b
  6883  017380  0EFE               	movlw	high _PortF_Property
  6884  017382  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6885                           
  6886                           ; BSR set to: 0
  6887  017384  0012               	return	
  6888  017386                     
  6889                           ; BSR set to: 0
  6890                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  6891                           
  6892                           ; BSR set to: 0
  6893  017386  0E6D               	movlw	low _PortG_Property
  6894  017388  6F60               	movwf	?_GetPortProperties& (0+255),b
  6895  01738A  0EFE               	movlw	high _PortG_Property
  6896  01738C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6897                           
  6898                           ; BSR set to: 0
  6899  01738E  0012               	return	
  6900  017390                     
  6901                           ; BSR set to: 0
  6902                           ;Port.c: 40: return (void*)0;
  6903                           
  6904                           ; BSR set to: 0
  6905  017390  0E00               	movlw	0
  6906  017392  6F60               	movwf	?_GetPortProperties& (0+255),b
  6907  017394  0E00               	movlw	0
  6908  017396  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;Port.c: 41: }
  6912                           
  6913                           ; BSR set to: 0
  6914  017398  0012               	return	
  6915  01739A                     l337:
  6916                           
  6917                           ; BSR set to: 0
  6918  01739A  0100               	movlb	0	; () banked
  6919  01739C  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  6920                           
  6921                           ; Switch size 1, requested type "space"
  6922                           ; Number of cases is 7, Range of values is 0 to 6
  6923                           ; switch strategies available:
  6924                           ; Name         Instructions Cycles
  6925                           ; simple_byte           22    12 (average)
  6926                           ;	Chosen strategy is simple_byte
  6927  01739E  0A00               	xorlw	0	; case 0
  6928  0173A0  B4D8               	btfsc	status,2,c
  6929  0173A2  D7D2               	goto	l338
  6930  0173A4  0A01               	xorlw	1	; case 1
  6931  0173A6  B4D8               	btfsc	status,2,c
  6932  0173A8  D7D5               	goto	l340
  6933  0173AA  0A03               	xorlw	3	; case 2
  6934  0173AC  B4D8               	btfsc	status,2,c
  6935  0173AE  D7D7               	goto	l341
  6936  0173B0  0A01               	xorlw	1	; case 3
  6937  0173B2  B4D8               	btfsc	status,2,c
  6938  0173B4  D7D9               	goto	l342
  6939  0173B6  0A07               	xorlw	7	; case 4
  6940  0173B8  B4D8               	btfsc	status,2,c
  6941  0173BA  D7DB               	goto	l343
  6942  0173BC  0A01               	xorlw	1	; case 5
  6943  0173BE  B4D8               	btfsc	status,2,c
  6944  0173C0  D7DD               	goto	l344
  6945  0173C2  0A03               	xorlw	3	; case 6
  6946  0173C4  B4D8               	btfsc	status,2,c
  6947  0173C6  D7DF               	goto	l345
  6948  0173C8  D7E3               	goto	l346
  6949  0173CA                     __end_of_GetPortProperties:
  6950                           	opt stack 0
  6951                           tosu	equ	0xFFF
  6952                           tosh	equ	0xFFE
  6953                           tosl	equ	0xFFD
  6954                           pclath	equ	0xFFA
  6955                           tblptru	equ	0xFF8
  6956                           tblptrh	equ	0xFF7
  6957                           tblptrl	equ	0xFF6
  6958                           tablat	equ	0xFF5
  6959                           postinc0	equ	0xFEE
  6960                           wreg	equ	0xFE8
  6961                           postdec1	equ	0xFE5
  6962                           fsr1h	equ	0xFE2
  6963                           fsr1l	equ	0xFE1
  6964                           indf2	equ	0xFDF
  6965                           postinc2	equ	0xFDE
  6966                           postdec2	equ	0xFDD
  6967                           plusw2	equ	0xFDB
  6968                           fsr2h	equ	0xFDA
  6969                           fsr2l	equ	0xFD9
  6970                           status	equ	0xFD8
  6971                           
  6972 ;; *************** function _GetPortPORT *****************
  6973 ;; Defined at:
  6974 ;;		line 44 in file "Library/Port.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;  pInput          1    wreg     enum E6786
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;  pInput          1    2[BANK0 ] enum E6786
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  2    0[BANK0 ] PTR struct Byte
  6981 ;; Registers used:
  6982 ;;		wreg, status,2, status,0
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6988 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6991 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;Total ram usage:        3 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    7
  6995 ;; This function calls:
  6996 ;;		Nothing
  6997 ;; This function is called by:
  6998 ;;		_Port_Init
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text12
  7003  0173CA                     __ptext12:
  7004                           	opt stack 0
  7005  0173CA                     _GetPortPORT:
  7006                           	opt stack 21
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;incstack = 0
  7010                           ;GetPortPORT@pInput stored from wreg
  7011  0173CA  0100               	movlb	0	; () banked
  7012  0173CC  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  7013                           
  7014                           ;Port.c: 46: switch (pInput)
  7015  0173CE  D029               	goto	l350
  7016  0173D0                     
  7017                           ;Port.c: 49: return (BytePtr)&PORTA;
  7018  0173D0  0E80               	movlw	128
  7019  0173D2  0100               	movlb	0	; () banked
  7020  0173D4  6F60               	movwf	?_GetPortPORT& (0+255),b
  7021  0173D6  0E0F               	movlw	15
  7022  0173D8  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7023                           
  7024                           ; BSR set to: 0
  7025  0173DA  0012               	return	
  7026  0173DC                     
  7027                           ; BSR set to: 0
  7028                           ;Port.c: 51: return (BytePtr)&PORTB;
  7029                           
  7030                           ; BSR set to: 0
  7031  0173DC  0E81               	movlw	129
  7032  0173DE  6F60               	movwf	?_GetPortPORT& (0+255),b
  7033  0173E0  0E0F               	movlw	15
  7034  0173E2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7035                           
  7036                           ; BSR set to: 0
  7037  0173E4  0012               	return	
  7038  0173E6                     
  7039                           ; BSR set to: 0
  7040                           ;Port.c: 53: return (BytePtr)&PORTC;
  7041                           
  7042                           ; BSR set to: 0
  7043  0173E6  0E82               	movlw	130
  7044  0173E8  6F60               	movwf	?_GetPortPORT& (0+255),b
  7045  0173EA  0E0F               	movlw	15
  7046  0173EC  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7047                           
  7048                           ; BSR set to: 0
  7049  0173EE  0012               	return	
  7050  0173F0                     
  7051                           ; BSR set to: 0
  7052                           ;Port.c: 55: return (BytePtr)&PORTD;
  7053                           
  7054                           ; BSR set to: 0
  7055  0173F0  0E83               	movlw	131
  7056  0173F2  6F60               	movwf	?_GetPortPORT& (0+255),b
  7057  0173F4  0E0F               	movlw	15
  7058  0173F6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7059                           
  7060                           ; BSR set to: 0
  7061  0173F8  0012               	return	
  7062  0173FA                     
  7063                           ; BSR set to: 0
  7064                           ;Port.c: 57: return (BytePtr)&PORTE;
  7065                           
  7066                           ; BSR set to: 0
  7067  0173FA  0E84               	movlw	132
  7068  0173FC  6F60               	movwf	?_GetPortPORT& (0+255),b
  7069  0173FE  0E0F               	movlw	15
  7070  017400  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7071                           
  7072                           ; BSR set to: 0
  7073  017402  0012               	return	
  7074  017404                     
  7075                           ; BSR set to: 0
  7076                           ;Port.c: 59: return (BytePtr)&PORTF;
  7077                           
  7078                           ; BSR set to: 0
  7079  017404  0E85               	movlw	133
  7080  017406  6F60               	movwf	?_GetPortPORT& (0+255),b
  7081  017408  0E0F               	movlw	15
  7082  01740A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7083                           
  7084                           ; BSR set to: 0
  7085  01740C  0012               	return	
  7086  01740E                     
  7087                           ; BSR set to: 0
  7088                           ;Port.c: 61: return (BytePtr)&PORTG;
  7089                           
  7090                           ; BSR set to: 0
  7091  01740E  0E86               	movlw	134
  7092  017410  6F60               	movwf	?_GetPortPORT& (0+255),b
  7093  017412  0E0F               	movlw	15
  7094  017414  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7095                           
  7096                           ; BSR set to: 0
  7097  017416  0012               	return	
  7098  017418                     
  7099                           ; BSR set to: 0
  7100                           ;Port.c: 63: return (void*)0;
  7101                           
  7102                           ; BSR set to: 0
  7103  017418  0E00               	movlw	0
  7104  01741A  6F60               	movwf	?_GetPortPORT& (0+255),b
  7105  01741C  0E00               	movlw	0
  7106  01741E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;Port.c: 64: }
  7110                           
  7111                           ; BSR set to: 0
  7112  017420  0012               	return	
  7113  017422                     l350:
  7114                           
  7115                           ; BSR set to: 0
  7116  017422  0100               	movlb	0	; () banked
  7117  017424  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  7118                           
  7119                           ; Switch size 1, requested type "space"
  7120                           ; Number of cases is 7, Range of values is 0 to 6
  7121                           ; switch strategies available:
  7122                           ; Name         Instructions Cycles
  7123                           ; simple_byte           22    12 (average)
  7124                           ;	Chosen strategy is simple_byte
  7125  017426  0A00               	xorlw	0	; case 0
  7126  017428  B4D8               	btfsc	status,2,c
  7127  01742A  D7D2               	goto	l351
  7128  01742C  0A01               	xorlw	1	; case 1
  7129  01742E  B4D8               	btfsc	status,2,c
  7130  017430  D7D5               	goto	l353
  7131  017432  0A03               	xorlw	3	; case 2
  7132  017434  B4D8               	btfsc	status,2,c
  7133  017436  D7D7               	goto	l354
  7134  017438  0A01               	xorlw	1	; case 3
  7135  01743A  B4D8               	btfsc	status,2,c
  7136  01743C  D7D9               	goto	l355
  7137  01743E  0A07               	xorlw	7	; case 4
  7138  017440  B4D8               	btfsc	status,2,c
  7139  017442  D7DB               	goto	l356
  7140  017444  0A01               	xorlw	1	; case 5
  7141  017446  B4D8               	btfsc	status,2,c
  7142  017448  D7DD               	goto	l357
  7143  01744A  0A03               	xorlw	3	; case 6
  7144  01744C  B4D8               	btfsc	status,2,c
  7145  01744E  D7DF               	goto	l358
  7146  017450  D7E3               	goto	l359
  7147  017452                     __end_of_GetPortPORT:
  7148                           	opt stack 0
  7149                           tosu	equ	0xFFF
  7150                           tosh	equ	0xFFE
  7151                           tosl	equ	0xFFD
  7152                           pclath	equ	0xFFA
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           postinc0	equ	0xFEE
  7158                           wreg	equ	0xFE8
  7159                           postdec1	equ	0xFE5
  7160                           fsr1h	equ	0xFE2
  7161                           fsr1l	equ	0xFE1
  7162                           indf2	equ	0xFDF
  7163                           postinc2	equ	0xFDE
  7164                           postdec2	equ	0xFDD
  7165                           plusw2	equ	0xFDB
  7166                           fsr2h	equ	0xFDA
  7167                           fsr2l	equ	0xFD9
  7168                           status	equ	0xFD8
  7169                           
  7170 ;; *************** function _LED_Init *****************
  7171 ;; Defined at:
  7172 ;;		line 15 in file "Library/LED.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;  pLED            1    wreg     enum E6739
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  pLED            1   45[BANK0 ] enum E6739
  7177 ;; Return value:  Size  Location     Type
  7178 ;;                  1    wreg      void 
  7179 ;; Registers used:
  7180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 0/0
  7183 ;;		On exit  : 0/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;Total ram usage:        1 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:   12
  7193 ;; This function calls:
  7194 ;;		_LED_Set
  7195 ;;		_Port_SetPinType
  7196 ;; This function is called by:
  7197 ;;		_MXK_Init
  7198 ;;		_main
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text13
  7203  017DD0                     __ptext13:
  7204                           	opt stack 0
  7205  017DD0                     _LED_Init:
  7206                           	opt stack 17
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;incstack = 0
  7210                           ;LED_Init@pLED stored from wreg
  7211  017DD0  0100               	movlb	0	; () banked
  7212  017DD2  6F8D               	movwf	LED_Init@pLED& (0+255),b
  7213                           
  7214                           ;LED.c: 17: switch (pLED)
  7215  017DD4  D018               	goto	l220
  7216  017DD6                     
  7217                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7218  017DD6  0E8A               	movlw	low _PortC
  7219  017DD8  0100               	movlb	0	; () banked
  7220  017DDA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7221  017DDC  0E01               	movlw	high _PortC
  7222  017DDE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7223  017DE0  0E00               	movlw	0
  7224  017DE2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7225  017DE4  0E03               	movlw	3
  7226  017DE6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7227  017DE8  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  7228                           
  7229                           ;LED.c: 21: break;
  7230  017DEC  D014               	goto	l222
  7231  017DEE                     
  7232                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7233  017DEE  0E8A               	movlw	low _PortC
  7234  017DF0  0100               	movlb	0	; () banked
  7235  017DF2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7236  017DF4  0E01               	movlw	high _PortC
  7237  017DF6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7238  017DF8  0E01               	movlw	1
  7239  017DFA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7240  017DFC  0E03               	movlw	3
  7241  017DFE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7242  017E00  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  7243                           
  7244                           ;LED.c: 25: }
  7245                           
  7246                           ;LED.c: 24: break;
  7247  017E04  D008               	goto	l222
  7248  017E06                     l220:
  7249  017E06  0100               	movlb	0	; () banked
  7250  017E08  518D               	movf	LED_Init@pLED& (0+255),w,b
  7251                           
  7252                           ; Switch size 1, requested type "space"
  7253                           ; Number of cases is 2, Range of values is 0 to 1
  7254                           ; switch strategies available:
  7255                           ; Name         Instructions Cycles
  7256                           ; simple_byte            7     4 (average)
  7257                           ;	Chosen strategy is simple_byte
  7258  017E0A  0A00               	xorlw	0	; case 0
  7259  017E0C  B4D8               	btfsc	status,2,c
  7260  017E0E  D7E3               	goto	l221
  7261  017E10  0A01               	xorlw	1	; case 1
  7262  017E12  B4D8               	btfsc	status,2,c
  7263  017E14  D7EC               	goto	l223
  7264  017E16                     l222:
  7265                           
  7266                           ;LED.c: 26: LED_Set(pLED, 0);
  7267                           
  7268                           ; BSR set to: 0
  7269  017E16  0E00               	movlw	0
  7270  017E18  0100               	movlb	0	; () banked
  7271  017E1A  6F74               	movwf	LED_Set@pValue& (0+255),b
  7272  017E1C  518D               	movf	LED_Init@pLED& (0+255),w,b
  7273  017E1E  EC3B  F0C1         	call	_LED_Set
  7274  017E22  0012               	return		;funcret
  7275  017E24                     __end_of_LED_Init:
  7276                           	opt stack 0
  7277                           tosu	equ	0xFFF
  7278                           tosh	equ	0xFFE
  7279                           tosl	equ	0xFFD
  7280                           pclath	equ	0xFFA
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           postinc0	equ	0xFEE
  7286                           wreg	equ	0xFE8
  7287                           postdec1	equ	0xFE5
  7288                           fsr1h	equ	0xFE2
  7289                           fsr1l	equ	0xFE1
  7290                           indf2	equ	0xFDF
  7291                           postinc2	equ	0xFDE
  7292                           postdec2	equ	0xFDD
  7293                           plusw2	equ	0xFDB
  7294                           fsr2h	equ	0xFDA
  7295                           fsr2l	equ	0xFD9
  7296                           status	equ	0xFD8
  7297                           
  7298 ;; *************** function _LED_Set *****************
  7299 ;; Defined at:
  7300 ;;		line 33 in file "Library/LED.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;  pLED            1    wreg     enum E6739
  7303 ;;  pValue          1   20[BANK0 ] unsigned char 
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  pLED            1   21[BANK0 ] enum E6739
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  1    wreg      void 
  7308 ;; Registers used:
  7309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7315 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;Total ram usage:        2 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:   11
  7322 ;; This function calls:
  7323 ;;		_Port_SetPin
  7324 ;; This function is called by:
  7325 ;;		_LED_Init
  7326 ;;		_SYSTEM_Initialize
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           	psect	text14
  7331  018276                     __ptext14:
  7332                           	opt stack 0
  7333  018276                     _LED_Set:
  7334                           	opt stack 17
  7335                           
  7336                           ;incstack = 0
  7337                           ;LED_Set@pLED stored from wreg
  7338  018276  0100               	movlb	0	; () banked
  7339  018278  6F75               	movwf	LED_Set@pLED& (0+255),b
  7340                           
  7341                           ;LED.c: 35: switch (pLED)
  7342  01827A  D018               	goto	l227
  7343  01827C                     
  7344                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7345  01827C  0E8A               	movlw	low _PortC
  7346  01827E  0100               	movlb	0	; () banked
  7347  018280  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7348  018282  0E01               	movlw	high _PortC
  7349  018284  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7350  018286  0E00               	movlw	0
  7351  018288  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7352  01828A  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7353  01828E  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  7354                           
  7355                           ;LED.c: 39: break;
  7356  018292  0012               	return	
  7357  018294                     
  7358                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7359  018294  0E8A               	movlw	low _PortC
  7360  018296  0100               	movlb	0	; () banked
  7361  018298  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7362  01829A  0E01               	movlw	high _PortC
  7363  01829C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7364  01829E  0E01               	movlw	1
  7365  0182A0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7366  0182A2  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7367  0182A6  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  7368                           
  7369                           ;LED.c: 43: }
  7370                           
  7371                           ;LED.c: 42: break;
  7372  0182AA  0012               	return	
  7373  0182AC                     l227:
  7374  0182AC  0100               	movlb	0	; () banked
  7375  0182AE  5175               	movf	LED_Set@pLED& (0+255),w,b
  7376                           
  7377                           ; Switch size 1, requested type "space"
  7378                           ; Number of cases is 2, Range of values is 0 to 1
  7379                           ; switch strategies available:
  7380                           ; Name         Instructions Cycles
  7381                           ; simple_byte            7     4 (average)
  7382                           ;	Chosen strategy is simple_byte
  7383  0182B0  0A00               	xorlw	0	; case 0
  7384  0182B2  B4D8               	btfsc	status,2,c
  7385  0182B4  D7E3               	goto	l228
  7386  0182B6  0A01               	xorlw	1	; case 1
  7387  0182B8  A4D8               	btfss	status,2,c
  7388  0182BA  0012               	return	
  7389  0182BC  D7EB               	goto	l230
  7390  0182BE                     __end_of_LED_Set:
  7391                           	opt stack 0
  7392                           tosu	equ	0xFFF
  7393                           tosh	equ	0xFFE
  7394                           tosl	equ	0xFFD
  7395                           pclath	equ	0xFFA
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           postinc0	equ	0xFEE
  7401                           wreg	equ	0xFE8
  7402                           postdec1	equ	0xFE5
  7403                           fsr1h	equ	0xFE2
  7404                           fsr1l	equ	0xFE1
  7405                           indf2	equ	0xFDF
  7406                           postinc2	equ	0xFDE
  7407                           postdec2	equ	0xFDD
  7408                           plusw2	equ	0xFDB
  7409                           fsr2h	equ	0xFDA
  7410                           fsr2l	equ	0xFD9
  7411                           status	equ	0xFD8
  7412                           
  7413 ;; *************** function _MXK_Dequeue *****************
  7414 ;; Defined at:
  7415 ;;		line 153 in file "Library/MXK.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;		None
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;		None
  7420 ;; Return value:  Size  Location     Type
  7421 ;;                  1    wreg      void 
  7422 ;; Registers used:
  7423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7424 ;; Tracked objects:
  7425 ;;		On entry : 0/0
  7426 ;;		On exit  : 0/0
  7427 ;;		Unchanged: 0/0
  7428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;Total ram usage:        0 bytes
  7434 ;; Hardware stack levels used:    1
  7435 ;; Hardware stack levels required when called:   12
  7436 ;; This function calls:
  7437 ;;		Absolute function
  7438 ;;		_Motor_Step
  7439 ;; This function is called by:
  7440 ;;		_main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text15
  7445  01870E                     __ptext15:
  7446                           	opt stack 0
  7447  01870E                     _MXK_Dequeue:
  7448                           	opt stack 18
  7449                           
  7450                           ;MXK.c: 155: if (lQueue)
  7451                           
  7452                           ;incstack = 0
  7453  01870E  5029               	movf	_lQueue,w,c	;volatile
  7454  018710  102A               	iorwf	_lQueue+1,w,c	;volatile
  7455  018712  102B               	iorwf	_lQueue+2,w,c	;volatile
  7456  018714  B4D8               	btfsc	status,2,c
  7457  018716  D00C               	goto	u15609
  7458                           
  7459                           ;MXK.c: 156: lQueue();
  7460  018718  D801               	call	u15608
  7461  01871A  D00A               	goto	u15609
  7462  01871C                     u15608:
  7463  01871C  0005               	push	
  7464  01871E  6EFA               	movwf	pclath,c
  7465  018720  5029               	movf	_lQueue,w,c	;volatile
  7466  018722  6EFD               	movwf	tosl,c
  7467  018724  502A               	movf	_lQueue+1,w,c	;volatile
  7468  018726  6EFE               	movwf	tosh,c
  7469  018728  502B               	movf	_lQueue+2,w,c	;volatile
  7470  01872A  6EFF               	movwf	tosu,c
  7471  01872C  50FA               	movf	pclath,w,c
  7472  01872E  0012               	return		;indir
  7473  018730                     u15609:
  7474                           
  7475                           ;MXK.c: 157: lQueue = 0;
  7476  018730  0E00               	movlw	0
  7477  018732  6E29               	movwf	_lQueue,c	;volatile
  7478  018734  0E00               	movlw	0
  7479  018736  6E2A               	movwf	_lQueue+1,c	;volatile
  7480  018738  0E00               	movlw	0
  7481  01873A  6E2B               	movwf	_lQueue+2,c	;volatile
  7482  01873C  0012               	return		;funcret
  7483  01873E                     __end_of_MXK_Dequeue:
  7484                           	opt stack 0
  7485                           tosu	equ	0xFFF
  7486                           tosh	equ	0xFFE
  7487                           tosl	equ	0xFFD
  7488                           pclath	equ	0xFFA
  7489                           tblptru	equ	0xFF8
  7490                           tblptrh	equ	0xFF7
  7491                           tblptrl	equ	0xFF6
  7492                           tablat	equ	0xFF5
  7493                           postinc0	equ	0xFEE
  7494                           wreg	equ	0xFE8
  7495                           postdec1	equ	0xFE5
  7496                           fsr1h	equ	0xFE2
  7497                           fsr1l	equ	0xFE1
  7498                           indf2	equ	0xFDF
  7499                           postinc2	equ	0xFDE
  7500                           postdec2	equ	0xFDD
  7501                           plusw2	equ	0xFDB
  7502                           fsr2h	equ	0xFDA
  7503                           fsr2l	equ	0xFD9
  7504                           status	equ	0xFD8
  7505                           
  7506 ;; *************** function _Motor_Step *****************
  7507 ;; Defined at:
  7508 ;;		line 75 in file "Library/Motor.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;		None
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;Total ram usage:        2 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:   11
  7529 ;; This function calls:
  7530 ;;		_MXK_Queue
  7531 ;;		_MXK_Release
  7532 ;;		_MXK_SwitchTo
  7533 ;;		_Port_SetPin
  7534 ;;		_Timer0_Restart
  7535 ;;		_Timer0_Stop
  7536 ;; This function is called by:
  7537 ;;		_Motor_Init
  7538 ;;		_Timer0_ISR
  7539 ;;		_MXK_Dequeue
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text16
  7544  0164D2                     __ptext16:
  7545                           	opt stack 0
  7546  0164D2                     _Motor_Step:
  7547                           	opt stack 0
  7548                           
  7549                           ;Skip over the trampoline to the duplicate function for level 2
  7550  0164D2  B251               	btfsc	btemp,1,c
  7551  0164D4  EF6F  F0B3         	goto	i2_Motor_Step
  7552  0164D8                     _Motor_Step$intlevel0:
  7553                           	opt stack 18
  7554                           
  7555                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7556                           
  7557                           ;incstack = 0
  7558  0164D8  EE20 F004          	lfsr	2,4
  7559  0164DC  5038               	movf	_lMotor,w,c
  7560  0164DE  26D9               	addwf	fsr2l,f,c
  7561  0164E0  5039               	movf	_lMotor+1,w,c
  7562  0164E2  22DA               	addwfc	fsr2h,f,c
  7563  0164E4  50DF               	movf	indf2,w,c
  7564  0164E6  ECAB  F0C2         	call	_MXK_SwitchTo
  7565  0164EA  0900               	iorlw	0
  7566  0164EC  B4D8               	btfsc	status,2,c
  7567  0164EE  D06E               	goto	l1627
  7568                           
  7569                           ;Motor.c: 78: {
  7570                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7571  0164F0  C038  FFD9         	movff	_lMotor,fsr2l
  7572  0164F4  C039  FFDA         	movff	_lMotor+1,fsr2h
  7573  0164F8  50DE               	movf	postinc2,w,c
  7574  0164FA  10DE               	iorwf	postinc2,w,c
  7575  0164FC  B4D8               	btfsc	status,2,c
  7576  0164FE  D061               	goto	l1628
  7577                           
  7578                           ;Motor.c: 80: {
  7579                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7580  016500  C038  FFD9         	movff	_lMotor,fsr2l
  7581  016504  C039  FFDA         	movff	_lMotor+1,fsr2h
  7582  016508  0E01               	movlw	1
  7583  01650A  BEDB               	btfsc	plusw2,7,c
  7584  01650C  D023               	goto	l1629
  7585  01650E  0E01               	movlw	1
  7586  016510  50DB               	movf	plusw2,w,c
  7587  016512  E103               	bnz	u13760
  7588  016514  04DE               	decf	postinc2,w,c
  7589  016516  A0D8               	btfss	status,0,c
  7590  016518  D01D               	goto	l1629
  7591  01651A                     u13760:
  7592                           
  7593                           ;Motor.c: 83: {
  7594                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7595  01651A  C038  FFD9         	movff	_lMotor,fsr2l
  7596  01651E  C039  FFDA         	movff	_lMotor+1,fsr2h
  7597  016522  28DE               	incf	postinc2,w,c
  7598  016524  E104               	bnz	u13770
  7599  016526  0E7F               	movlw	127
  7600  016528  18DE               	xorwf	postinc2,w,c
  7601  01652A  B4D8               	btfsc	status,2,c
  7602  01652C  D007               	goto	l1630
  7603  01652E                     u13770:
  7604                           
  7605                           ;Motor.c: 85: lMotor->mDelta --;
  7606  01652E  C038  FFD9         	movff	_lMotor,fsr2l
  7607  016532  C039  FFDA         	movff	_lMotor+1,fsr2h
  7608  016536  06DE               	decf	postinc2,f,c
  7609  016538  0E00               	movlw	0
  7610  01653A  5ADD               	subwfb	postdec2,f,c
  7611  01653C                     l1630:
  7612                           
  7613                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7614  01653C  0E6C               	movlw	low _PortE
  7615  01653E  0100               	movlb	0	; () banked
  7616  016540  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7617  016542  0E01               	movlw	high _PortE
  7618  016544  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7619  016546  0E00               	movlw	0
  7620  016548  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7621  01654A  0E01               	movlw	1
  7622  01654C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7623  01654E  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  7624                           
  7625                           ;Motor.c: 88: }
  7626  016552  D01C               	goto	l1631
  7627  016554                     l1629:
  7628                           
  7629                           ;Motor.c: 89: else
  7630                           ;Motor.c: 90: {
  7631                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7632  016554  C038  FFD9         	movff	_lMotor,fsr2l
  7633  016558  C039  FFDA         	movff	_lMotor+1,fsr2h
  7634  01655C  04DE               	decf	postinc2,w,c
  7635  01655E  E104               	bnz	u13780
  7636  016560  0E80               	movlw	128
  7637  016562  18DE               	xorwf	postinc2,w,c
  7638  016564  B4D8               	btfsc	status,2,c
  7639  016566  D007               	goto	l1632
  7640  016568                     u13780:
  7641                           
  7642                           ;Motor.c: 92: lMotor->mDelta ++;
  7643  016568  C038  FFD9         	movff	_lMotor,fsr2l
  7644  01656C  C039  FFDA         	movff	_lMotor+1,fsr2h
  7645  016570  2ADE               	incf	postinc2,f,c
  7646  016572  0E00               	movlw	0
  7647  016574  22DD               	addwfc	postdec2,f,c
  7648  016576                     l1632:
  7649                           
  7650                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7651  016576  0E6C               	movlw	low _PortE
  7652  016578  0100               	movlb	0	; () banked
  7653  01657A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7654  01657C  0E01               	movlw	high _PortE
  7655  01657E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7656  016580  0E00               	movlw	0
  7657  016582  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7658  016584  0E00               	movlw	0
  7659  016586  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7660  016588  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  7661  01658C                     l1631:
  7662                           
  7663                           ;Motor.c: 95: }
  7664                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7665  01658C  0E6C               	movlw	low _PortE
  7666  01658E  0100               	movlb	0	; () banked
  7667  016590  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7668  016592  0E01               	movlw	high _PortE
  7669  016594  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7670  016596  0E01               	movlw	1
  7671  016598  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7672  01659A  0E01               	movlw	1
  7673  01659C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7674  01659E  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  7675                           
  7676                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  7677  0165A2  0E6C               	movlw	low _PortE
  7678  0165A4  0100               	movlb	0	; () banked
  7679  0165A6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7680  0165A8  0E01               	movlw	high _PortE
  7681  0165AA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7682  0165AC  0E01               	movlw	1
  7683  0165AE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7684  0165B0  0E00               	movlw	0
  7685  0165B2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7686  0165B4  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  7687                           
  7688                           ;Motor.c: 101: MXK_Release();
  7689  0165B8  EC89  F0C5         	call	_MXK_Release	;wreg free
  7690                           
  7691                           ;Motor.c: 102: Timer0_Restart();
  7692  0165BC  EC42  F0C6         	call	_Timer0_Restart	;wreg free
  7693                           
  7694                           ;Motor.c: 103: return;
  7695  0165C0  0012               	return	
  7696  0165C2                     l1628:
  7697                           
  7698                           ;Motor.c: 104: }
  7699                           ;Motor.c: 105: MXK_Release();
  7700  0165C2  EC89  F0C5         	call	_MXK_Release	;wreg free
  7701                           
  7702                           ;Motor.c: 106: Timer0_Stop();
  7703  0165C6  EC65  F0C6         	call	_Timer0_Stop	;wreg free
  7704                           
  7705                           ;Motor.c: 107: return;
  7706  0165CA  0012               	return	
  7707  0165CC                     l1627:
  7708                           
  7709                           ;Motor.c: 108: }
  7710                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  7711  0165CC  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
  7712  0165D0  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  7713  0165D4  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  7714  0165D8  EC26  F0C6         	call	_MXK_Queue	;wreg free
  7715  0165DC  0012               	return		;funcret
  7716  0165DE                     __end_of_Motor_Step:
  7717                           	opt stack 0
  7718                           tosu	equ	0xFFF
  7719                           tosh	equ	0xFFE
  7720                           tosl	equ	0xFFD
  7721                           pclath	equ	0xFFA
  7722                           tblptru	equ	0xFF8
  7723                           tblptrh	equ	0xFF7
  7724                           tblptrl	equ	0xFF6
  7725                           tablat	equ	0xFF5
  7726                           postinc0	equ	0xFEE
  7727                           wreg	equ	0xFE8
  7728                           postdec1	equ	0xFE5
  7729                           fsr1h	equ	0xFE2
  7730                           fsr1l	equ	0xFE1
  7731                           indf2	equ	0xFDF
  7732                           postinc2	equ	0xFDE
  7733                           postdec2	equ	0xFDD
  7734                           plusw2	equ	0xFDB
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function _Timer0_Stop *****************
  7740 ;; Defined at:
  7741 ;;		line 89 in file "Library/Timer0.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;		None
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		None
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;Total ram usage:        0 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    7
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_Motor_Step
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text17
  7770  018CCA                     __ptext17:
  7771                           	opt stack 0
  7772  018CCA                     _Timer0_Stop:
  7773                           	opt stack 21
  7774                           
  7775                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  7776                           
  7777                           ;incstack = 0
  7778  018CCA  9AF2               	bcf	intcon,5,c	;volatile
  7779                           
  7780                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  7781  018CCC  94F2               	bcf	intcon,2,c	;volatile
  7782  018CCE  0012               	return		;funcret
  7783  018CD0                     __end_of_Timer0_Stop:
  7784                           	opt stack 0
  7785                           tosu	equ	0xFFF
  7786                           tosh	equ	0xFFE
  7787                           tosl	equ	0xFFD
  7788                           pclath	equ	0xFFA
  7789                           tblptru	equ	0xFF8
  7790                           tblptrh	equ	0xFF7
  7791                           tblptrl	equ	0xFF6
  7792                           tablat	equ	0xFF5
  7793                           intcon	equ	0xFF2
  7794                           postinc0	equ	0xFEE
  7795                           wreg	equ	0xFE8
  7796                           postdec1	equ	0xFE5
  7797                           fsr1h	equ	0xFE2
  7798                           fsr1l	equ	0xFE1
  7799                           indf2	equ	0xFDF
  7800                           postinc2	equ	0xFDE
  7801                           postdec2	equ	0xFDD
  7802                           plusw2	equ	0xFDB
  7803                           fsr2h	equ	0xFDA
  7804                           fsr2l	equ	0xFD9
  7805                           status	equ	0xFD8
  7806                           
  7807 ;; *************** function _Timer0_Restart *****************
  7808 ;; Defined at:
  7809 ;;		line 83 in file "Library/Timer0.c"
  7810 ;; Parameters:    Size  Location     Type
  7811 ;;		None
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;		None
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      void 
  7816 ;; Registers used:
  7817 ;;		None
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7827 ;;Total ram usage:        0 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    7
  7830 ;; This function calls:
  7831 ;;		Nothing
  7832 ;; This function is called by:
  7833 ;;		_Motor_Step
  7834 ;; This function uses a non-reentrant model
  7835 ;;
  7836                           
  7837                           	psect	text18
  7838  018C84                     __ptext18:
  7839                           	opt stack 0
  7840  018C84                     _Timer0_Restart:
  7841                           	opt stack 21
  7842                           
  7843                           ;Timer0.c: 85: TMR0 = COUNTER;
  7844                           
  7845                           ;incstack = 0
  7846  018C84  C036  FFD6         	movff	_COUNTER,4054	;volatile
  7847  018C88  C037  FFD7         	movff	_COUNTER+1,4055	;volatile
  7848                           
  7849                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  7850  018C8C  8AF2               	bsf	intcon,5,c	;volatile
  7851  018C8E  0012               	return		;funcret
  7852  018C90                     __end_of_Timer0_Restart:
  7853                           	opt stack 0
  7854                           tosu	equ	0xFFF
  7855                           tosh	equ	0xFFE
  7856                           tosl	equ	0xFFD
  7857                           pclath	equ	0xFFA
  7858                           tblptru	equ	0xFF8
  7859                           tblptrh	equ	0xFF7
  7860                           tblptrl	equ	0xFF6
  7861                           tablat	equ	0xFF5
  7862                           intcon	equ	0xFF2
  7863                           postinc0	equ	0xFEE
  7864                           wreg	equ	0xFE8
  7865                           postdec1	equ	0xFE5
  7866                           fsr1h	equ	0xFE2
  7867                           fsr1l	equ	0xFE1
  7868                           indf2	equ	0xFDF
  7869                           postinc2	equ	0xFDE
  7870                           postdec2	equ	0xFDD
  7871                           plusw2	equ	0xFDB
  7872                           fsr2h	equ	0xFDA
  7873                           fsr2l	equ	0xFD9
  7874                           status	equ	0xFD8
  7875                           
  7876 ;; *************** function _MXK_SwitchTo *****************
  7877 ;; Defined at:
  7878 ;;		line 105 in file "Library/MXK.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  pModule         1    wreg     enum E6927
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  pModule         1    7[BANK0 ] enum E6927
  7883 ;;  CUR             1    6[BANK0 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      unsigned char 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;Total ram usage:        2 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    8
  7900 ;; This function calls:
  7901 ;;		_delay_us
  7902 ;; This function is called by:
  7903 ;;		_Motor_Step
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text19
  7908  018556                     __ptext19:
  7909                           	opt stack 0
  7910  018556                     _MXK_SwitchTo:
  7911                           	opt stack 20
  7912                           
  7913                           ;incstack = 0
  7914                           ;MXK_SwitchTo@pModule stored from wreg
  7915  018556  0100               	movlb	0	; () banked
  7916  018558  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
  7917                           
  7918                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  7919  01855A  5086               	movf	3974,w,c	;volatile
  7920  01855C  0B0F               	andlw	15
  7921  01855E  0100               	movlb	0	; () banked
  7922  018560  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  7926  018562  504C               	movf	_Bus_State,w,c
  7927  018564  A4D8               	btfss	status,2,c
  7928  018566  D002               	goto	l1730
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;MXK.c: 110: return 0;
  7932  018568  0E00               	movlw	0
  7933                           
  7934                           ; BSR set to: 0
  7935  01856A  0012               	return	
  7936  01856C                     l1730:
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  7940                           
  7941                           ; BSR set to: 0
  7942  01856C  0E00               	movlw	0
  7943  01856E  6E4C               	movwf	_Bus_State,c
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;MXK.c: 114: if (CUR != pModule)
  7947  018570  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  7948  018572  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  7949  018574  B4D8               	btfsc	status,2,c
  7950  018576  D00A               	goto	l1732
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;MXK.c: 115: {
  7954                           ;MXK.c: 116: PORTG &= ~(0xF);
  7955  018578  0EF0               	movlw	240
  7956  01857A  1686               	andwf	3974,f,c	;volatile
  7957                           
  7958                           ;MXK.c: 117: PORTG |= pModule;
  7959  01857C  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  7960  01857E  1286               	iorwf	3974,f,c	;volatile
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;MXK.c: 120: delay_us(10);
  7964  018580  0E00               	movlw	0
  7965  018582  6F61               	movwf	(delay_us@us+1)& (0+255),b
  7966  018584  0E0A               	movlw	10
  7967  018586  6F60               	movwf	delay_us@us& (0+255),b
  7968  018588  ECA7  F0C1         	call	_delay_us	;wreg free
  7969  01858C                     l1732:
  7970                           
  7971                           ;MXK.c: 121: }
  7972                           ;MXK.c: 122: return 1;
  7973  01858C  0E01               	movlw	1
  7974  01858E  0012               	return	
  7975  018590                     __end_of_MXK_SwitchTo:
  7976                           	opt stack 0
  7977                           tosu	equ	0xFFF
  7978                           tosh	equ	0xFFE
  7979                           tosl	equ	0xFFD
  7980                           pclath	equ	0xFFA
  7981                           tblptru	equ	0xFF8
  7982                           tblptrh	equ	0xFF7
  7983                           tblptrl	equ	0xFF6
  7984                           tablat	equ	0xFF5
  7985                           intcon	equ	0xFF2
  7986                           postinc0	equ	0xFEE
  7987                           wreg	equ	0xFE8
  7988                           postdec1	equ	0xFE5
  7989                           fsr1h	equ	0xFE2
  7990                           fsr1l	equ	0xFE1
  7991                           indf2	equ	0xFDF
  7992                           postinc2	equ	0xFDE
  7993                           postdec2	equ	0xFDD
  7994                           plusw2	equ	0xFDB
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function _MXK_Release *****************
  8000 ;; Defined at:
  8001 ;;		line 130 in file "Library/MXK.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;		None
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;		None
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      unsigned char 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;Total ram usage:        0 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    7
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_Motor_Step
  8026 ;;		_main
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           	psect	text20
  8031  018B12                     __ptext20:
  8032                           	opt stack 0
  8033  018B12                     _MXK_Release:
  8034                           	opt stack 23
  8035                           
  8036                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8037                           
  8038                           ;incstack = 0
  8039  018B12  0E01               	movlw	1
  8040  018B14  6E4C               	movwf	_Bus_State,c
  8041                           
  8042                           ;MXK.c: 134: if (lQueue != 0)
  8043  018B16  5029               	movf	_lQueue,w,c	;volatile
  8044  018B18  102A               	iorwf	_lQueue+1,w,c	;volatile
  8045  018B1A  102B               	iorwf	_lQueue+2,w,c	;volatile
  8046  018B1C  B4D8               	btfsc	status,2,c
  8047  018B1E  D002               	goto	l1735
  8048                           
  8049                           ;MXK.c: 135: return 1;
  8050  018B20  0E01               	movlw	1
  8051  018B22  0012               	return	
  8052  018B24                     l1735:
  8053                           
  8054                           ;MXK.c: 137: return 0;
  8055  018B24  0E00               	movlw	0
  8056  018B26  0012               	return	
  8057  018B28                     __end_of_MXK_Release:
  8058                           	opt stack 0
  8059                           tosu	equ	0xFFF
  8060                           tosh	equ	0xFFE
  8061                           tosl	equ	0xFFD
  8062                           pclath	equ	0xFFA
  8063                           tblptru	equ	0xFF8
  8064                           tblptrh	equ	0xFF7
  8065                           tblptrl	equ	0xFF6
  8066                           tablat	equ	0xFF5
  8067                           intcon	equ	0xFF2
  8068                           postinc0	equ	0xFEE
  8069                           wreg	equ	0xFE8
  8070                           postdec1	equ	0xFE5
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           plusw2	equ	0xFDB
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function _MXK_Queue *****************
  8082 ;; Defined at:
  8083 ;;		line 144 in file "Library/MXK.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8086 ;;		 -> Absolute function(1), Motor_Step(1), 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;		None
  8089 ;; Return value:  Size  Location     Type
  8090 ;;                  1    wreg      void 
  8091 ;; Registers used:
  8092 ;;		wreg, status,2, status,0
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8098 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;Total ram usage:        3 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; Hardware stack levels required when called:    7
  8105 ;; This function calls:
  8106 ;;		Nothing
  8107 ;; This function is called by:
  8108 ;;		_Motor_Step
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           	psect	text21
  8113  018C4C                     __ptext21:
  8114                           	opt stack 0
  8115  018C4C                     _MXK_Queue:
  8116                           	opt stack 21
  8117                           
  8118                           ;MXK.c: 146: lQueue = pCallback;
  8119                           
  8120                           ;incstack = 0
  8121  018C4C  C060  F029         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8122  018C50  C061  F02A         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8123  018C54  C062  F02B         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8124  018C58  0012               	return		;funcret
  8125  018C5A                     __end_of_MXK_Queue:
  8126                           	opt stack 0
  8127                           tosu	equ	0xFFF
  8128                           tosh	equ	0xFFE
  8129                           tosl	equ	0xFFD
  8130                           pclath	equ	0xFFA
  8131                           tblptru	equ	0xFF8
  8132                           tblptrh	equ	0xFF7
  8133                           tblptrl	equ	0xFF6
  8134                           tablat	equ	0xFF5
  8135                           intcon	equ	0xFF2
  8136                           postinc0	equ	0xFEE
  8137                           wreg	equ	0xFE8
  8138                           postdec1	equ	0xFE5
  8139                           fsr1h	equ	0xFE2
  8140                           fsr1l	equ	0xFE1
  8141                           indf2	equ	0xFDF
  8142                           postinc2	equ	0xFDE
  8143                           postdec2	equ	0xFDD
  8144                           plusw2	equ	0xFDB
  8145                           fsr2h	equ	0xFDA
  8146                           fsr2l	equ	0xFD9
  8147                           status	equ	0xFD8
  8148                           
  8149 ;; *************** function _MXK_BlockSwitchTo *****************
  8150 ;; Defined at:
  8151 ;;		line 82 in file "Library/MXK.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;  pModule         1    wreg     enum E6927
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;  pModule         1    7[BANK0 ] enum E6927
  8156 ;;  CUR             1    6[BANK0 ] unsigned char 
  8157 ;; Return value:  Size  Location     Type
  8158 ;;                  1    wreg      unsigned char 
  8159 ;; Registers used:
  8160 ;;		wreg, status,2, status,0, cstack
  8161 ;; Tracked objects:
  8162 ;;		On entry : 0/0
  8163 ;;		On exit  : 0/0
  8164 ;;		Unchanged: 0/0
  8165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;Total ram usage:        2 bytes
  8171 ;; Hardware stack levels used:    1
  8172 ;; Hardware stack levels required when called:    8
  8173 ;; This function calls:
  8174 ;;		_delay_us
  8175 ;; This function is called by:
  8176 ;;		_main
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           	psect	text22
  8181  018604                     __ptext22:
  8182                           	opt stack 0
  8183  018604                     _MXK_BlockSwitchTo:
  8184                           	opt stack 22
  8185                           
  8186                           ;incstack = 0
  8187                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8188  018604  0100               	movlb	0	; () banked
  8189  018606  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8190                           
  8191                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8192  018608  5086               	movf	3974,w,c	;volatile
  8193  01860A  0B0F               	andlw	15
  8194  01860C  0100               	movlb	0	; () banked
  8195  01860E  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8196  018610                     
  8197                           ; BSR set to: 0
  8198                           
  8199                           ; BSR set to: 0
  8200  018610  504C               	movf	_Bus_State,w,c
  8201  018612  B4D8               	btfsc	status,2,c
  8202  018614  D7FD               	goto	l1724
  8203                           
  8204                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8205  018616  0E00               	movlw	0
  8206  018618  6E4C               	movwf	_Bus_State,c
  8207                           
  8208                           ;MXK.c: 90: if (CUR != pModule)
  8209  01861A  0100               	movlb	0	; () banked
  8210  01861C  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8211  01861E  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8212  018620  B4D8               	btfsc	status,2,c
  8213  018622  D00A               	goto	l1726
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;MXK.c: 91: {
  8217                           ;MXK.c: 92: PORTG &= ~(0xF);
  8218  018624  0EF0               	movlw	240
  8219  018626  1686               	andwf	3974,f,c	;volatile
  8220                           
  8221                           ;MXK.c: 93: PORTG |= pModule;
  8222  018628  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8223  01862A  1286               	iorwf	3974,f,c	;volatile
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;MXK.c: 96: delay_us(10);
  8227  01862C  0E00               	movlw	0
  8228  01862E  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8229  018630  0E0A               	movlw	10
  8230  018632  6F60               	movwf	delay_us@us& (0+255),b
  8231  018634  ECA7  F0C1         	call	_delay_us	;wreg free
  8232  018638                     l1726:
  8233                           
  8234                           ;MXK.c: 97: }
  8235                           ;MXK.c: 98: return 1;
  8236  018638  0E01               	movlw	1
  8237  01863A  0012               	return	
  8238  01863C                     __end_of_MXK_BlockSwitchTo:
  8239                           	opt stack 0
  8240                           tosu	equ	0xFFF
  8241                           tosh	equ	0xFFE
  8242                           tosl	equ	0xFFD
  8243                           pclath	equ	0xFFA
  8244                           tblptru	equ	0xFF8
  8245                           tblptrh	equ	0xFF7
  8246                           tblptrl	equ	0xFF6
  8247                           tablat	equ	0xFF5
  8248                           intcon	equ	0xFF2
  8249                           postinc0	equ	0xFEE
  8250                           wreg	equ	0xFE8
  8251                           postdec1	equ	0xFE5
  8252                           fsr1h	equ	0xFE2
  8253                           fsr1l	equ	0xFE1
  8254                           indf2	equ	0xFDF
  8255                           postinc2	equ	0xFDE
  8256                           postdec2	equ	0xFDD
  8257                           plusw2	equ	0xFDB
  8258                           fsr2h	equ	0xFDA
  8259                           fsr2l	equ	0xFD9
  8260                           status	equ	0xFD8
  8261                           
  8262 ;; *************** function _delay_us *****************
  8263 ;; Defined at:
  8264 ;;		line 255 in file "Library/Types.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  us              2    0[BANK0 ] unsigned short 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  u               4    2[BANK0 ] unsigned long 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  1    wreg      void 
  8271 ;; Registers used:
  8272 ;;		wreg, status,2, status,0
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8278 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8281 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8282 ;;Total ram usage:        6 bytes
  8283 ;; Hardware stack levels used:    1
  8284 ;; Hardware stack levels required when called:    7
  8285 ;; This function calls:
  8286 ;;		Nothing
  8287 ;; This function is called by:
  8288 ;;		_MXK_BlockSwitchTo
  8289 ;;		_MXK_SwitchTo
  8290 ;; This function uses a non-reentrant model
  8291 ;;
  8292                           
  8293                           	psect	text23
  8294  01834E                     __ptext23:
  8295                           	opt stack 0
  8296  01834E                     _delay_us:
  8297                           	opt stack 20
  8298                           
  8299                           ;Types.c: 256: unsigned long u;
  8300                           ;Types.c: 257: while (us--) {
  8301                           
  8302                           ;incstack = 0
  8303  01834E  D018               	goto	u12950
  8304  018350                     l15453:
  8305                           
  8306                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8307  018350  0E00               	movlw	0
  8308  018352  0100               	movlb	0	; () banked
  8309  018354  6F62               	movwf	delay_us@u& (0+255),b
  8310  018356  0E00               	movlw	0
  8311  018358  6F63               	movwf	(delay_us@u+1)& (0+255),b
  8312  01835A  0E00               	movlw	0
  8313  01835C  6F64               	movwf	(delay_us@u+2)& (0+255),b
  8314  01835E  0E00               	movlw	0
  8315  018360  6F65               	movwf	(delay_us@u+3)& (0+255),b
  8316  018362                     l15455:
  8317                           
  8318                           ; BSR set to: 0
  8319  018362  5162               	movf	delay_us@u& (0+255),w,b
  8320  018364  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
  8321  018366  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
  8322  018368  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
  8323  01836A  A4D8               	btfss	status,2,c
  8324  01836C  D009               	goto	u12950
  8325                           
  8326                           ; BSR set to: 0
  8327                           
  8328                           ; BSR set to: 0
  8329  01836E  F000               	nop		; ;# 
  8330  018370  0E01               	movlw	1
  8331  018372  0100               	movlb	0	; () banked
  8332  018374  2762               	addwf	delay_us@u& (0+255),f,b
  8333  018376  0E00               	movlw	0
  8334  018378  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
  8335  01837A  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
  8336  01837C  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
  8337  01837E  D7F1               	goto	l15455
  8338  018380                     u12950:
  8339                           
  8340                           ; BSR set to: 0
  8341                           
  8342                           ; BSR set to: 0
  8343  018380  0100               	movlb	0	; () banked
  8344  018382  0760               	decf	delay_us@us& (0+255),f,b
  8345  018384  A0D8               	btfss	status,0,c
  8346  018386  0761               	decf	(delay_us@us+1)& (0+255),f,b
  8347  018388  2960               	incf	delay_us@us& (0+255),w,b
  8348  01838A  E1E2               	bnz	l15453
  8349  01838C  2961               	incf	(delay_us@us+1)& (0+255),w,b
  8350  01838E  B4D8               	btfsc	status,2,c
  8351  018390  0012               	return	
  8352  018392  D7DE               	goto	l832
  8353  018394                     __end_of_delay_us:
  8354                           	opt stack 0
  8355                           tosu	equ	0xFFF
  8356                           tosh	equ	0xFFE
  8357                           tosl	equ	0xFFD
  8358                           pclath	equ	0xFFA
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           intcon	equ	0xFF2
  8364                           postinc0	equ	0xFEE
  8365                           wreg	equ	0xFE8
  8366                           postdec1	equ	0xFE5
  8367                           fsr1h	equ	0xFE2
  8368                           fsr1l	equ	0xFE1
  8369                           indf2	equ	0xFDF
  8370                           postinc2	equ	0xFDE
  8371                           postdec2	equ	0xFDD
  8372                           plusw2	equ	0xFDB
  8373                           fsr2h	equ	0xFDA
  8374                           fsr2l	equ	0xFD9
  8375                           status	equ	0xFD8
  8376                           
  8377 ;; *************** function _LCD_Init *****************
  8378 ;; Defined at:
  8379 ;;		line 172 in file "Library/LCD.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;		None
  8382 ;; Auto vars:     Size  Location     Type
  8383 ;;  i               2   55[BANK0 ] unsigned short 
  8384 ;; Return value:  Size  Location     Type
  8385 ;;                  1    wreg      void 
  8386 ;; Registers used:
  8387 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8388 ;; Tracked objects:
  8389 ;;		On entry : 0/0
  8390 ;;		On exit  : 0/0
  8391 ;;		Unchanged: 0/0
  8392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;Total ram usage:        4 bytes
  8398 ;; Hardware stack levels used:    1
  8399 ;; Hardware stack levels required when called:   15
  8400 ;; This function calls:
  8401 ;;		_Configure_GPIOs
  8402 ;;		_LCD_Fill
  8403 ;;		_LCD_Write
  8404 ;;		_Set_Rotation
  8405 ;;		_delay_ms
  8406 ;; This function is called by:
  8407 ;;		_main
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text24
  8412  015C62                     __ptext24:
  8413                           	opt stack 0
  8414  015C62                     _LCD_Init:
  8415                           	opt stack 15
  8416                           
  8417                           ;LCD.c: 174: UINT16 i;
  8418                           ;LCD.c: 175: Configure_GPIOs();
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;incstack = 0
  8422  015C62  EC5C  F0BE         	call	_Configure_GPIOs	;wreg free
  8423                           
  8424                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  8425  015C66  0E00               	movlw	0
  8426  015C68  0100               	movlb	0	; () banked
  8427  015C6A  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
  8428  015C6C  0E00               	movlw	0
  8429  015C6E  6F97               	movwf	LCD_Init@i& (0+255),b
  8430                           
  8431                           ; BSR set to: 0
  8432  015C70  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  8433  015C72  E17D               	bnz	u13880
  8434  015C74  0E59               	movlw	89
  8435  015C76  5D97               	subwf	LCD_Init@i& (0+255),w,b
  8436  015C78  B0D8               	btfsc	status,0,c
  8437  015C7A  D079               	goto	u13880
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;LCD.c: 178: {
  8441                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  8442                           
  8443                           ; BSR set to: 0
  8444                           
  8445                           ; BSR set to: 0
  8446  015C7C  90D8               	bcf	status,0,c
  8447  015C7E  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8448  015C80  6EF6               	movwf	tblptrl,c
  8449  015C82  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8450  015C84  6EF7               	movwf	tblptrh,c
  8451  015C86  0E55               	movlw	low _InitList
  8452  015C88  26F6               	addwf	tblptrl,f,c
  8453  015C8A  0EFB               	movlw	high _InitList
  8454  015C8C  22F7               	addwfc	tblptrh,f,c
  8455  015C8E                     	if	1	;There are 3 active tblptr bytes
  8456  015C8E  6AF8               	clrf	tblptru,c
  8457  015C90  0E00               	movlw	low (__mediumconst shr (0+16))
  8458  015C92  22F8               	addwfc	tblptru,f,c
  8459  015C94                     	endif
  8460  015C94  0009               	tblrd		*+
  8461  015C96  0E80               	movlw	128
  8462  015C98  18F5               	xorwf	tablat,w,c
  8463  015C9A  0009               	tblrd		*+
  8464  015C9C  10F5               	iorwf	tablat,w,c
  8465  015C9E  A4D8               	btfss	status,2,c
  8466  015CA0  D01D               	goto	l87
  8467                           
  8468                           ; BSR set to: 0
  8469  015CA2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  8470  015CA4  E11B               	bnz	l16423
  8471  015CA6  0E58               	movlw	88
  8472  015CA8  5D97               	subwf	LCD_Init@i& (0+255),w,b
  8473  015CAA  B0D8               	btfsc	status,0,c
  8474  015CAC  D017               	goto	l87
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;LCD.c: 180: delay_ms(InitList[++i]);
  8478  015CAE  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  8479  015CB0  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  8480  015CB2  90D8               	bcf	status,0,c
  8481  015CB4  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8482  015CB6  6EF6               	movwf	tblptrl,c
  8483  015CB8  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8484  015CBA  6EF7               	movwf	tblptrh,c
  8485  015CBC  0E55               	movlw	low _InitList
  8486  015CBE  26F6               	addwf	tblptrl,f,c
  8487  015CC0  0EFB               	movlw	high _InitList
  8488  015CC2  22F7               	addwfc	tblptrh,f,c
  8489  015CC4                     	if	1	;There are 3 active tblptr bytes
  8490  015CC4  6AF8               	clrf	tblptru,c
  8491  015CC6  0E00               	movlw	low (__mediumconst shr (0+16))
  8492  015CC8  22F8               	addwfc	tblptru,f,c
  8493  015CCA                     	endif
  8494  015CCA  0009               	tblrd		*+
  8495  015CCC  CFF5 F060          	movff	tablat,delay_ms@ms
  8496  015CD0  000A               	tblrd		*-
  8497  015CD2  CFF5 F061          	movff	tablat,delay_ms@ms+1
  8498  015CD6  ECBA  F0BE         	call	_delay_ms	;wreg free
  8499  015CDA  D043               	goto	l90
  8500  015CDC                     l87:
  8501  015CDC                     l16423:
  8502                           
  8503                           ;LCD.c: 181: else
  8504                           ;LCD.c: 182: {
  8505                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  8506  015CDC  90D8               	bcf	status,0,c
  8507  015CDE  0100               	movlb	0	; () banked
  8508  015CE0  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8509  015CE2  6EF6               	movwf	tblptrl,c
  8510  015CE4  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8511  015CE6  6EF7               	movwf	tblptrh,c
  8512  015CE8  0E55               	movlw	low _InitList
  8513  015CEA  26F6               	addwf	tblptrl,f,c
  8514  015CEC  0EFB               	movlw	high _InitList
  8515  015CEE  22F7               	addwfc	tblptrh,f,c
  8516  015CF0                     	if	1	;There are 3 active tblptr bytes
  8517  015CF0  6AF8               	clrf	tblptru,c
  8518  015CF2  0E00               	movlw	low (__mediumconst shr (0+16))
  8519  015CF4  22F8               	addwfc	tblptru,f,c
  8520  015CF6                     	endif
  8521  015CF6  0009               	tblrd		*+
  8522  015CF8  0E00               	movlw	0
  8523  015CFA  5EF5               	subwf	tablat,f,c
  8524  015CFC  0009               	tblrd		*+
  8525  015CFE  0E01               	movlw	1
  8526  015D00  5AF5               	subwfb	tablat,f,c
  8527  015D02  A0D8               	btfss	status,0,c
  8528  015D04  D01B               	goto	l89
  8529                           
  8530                           ; BSR set to: 0
  8531  015D06  0E00               	movlw	0
  8532  015D08  6F63               	movwf	LCD_Write@mode& (0+255),b
  8533  015D0A  90D8               	bcf	status,0,c
  8534  015D0C  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8535  015D0E  6EF6               	movwf	tblptrl,c
  8536  015D10  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8537  015D12  6EF7               	movwf	tblptrh,c
  8538  015D14  0E55               	movlw	low _InitList
  8539  015D16  26F6               	addwf	tblptrl,f,c
  8540  015D18  0EFB               	movlw	high _InitList
  8541  015D1A  22F7               	addwfc	tblptrh,f,c
  8542  015D1C                     	if	1	;There are 3 active tblptr bytes
  8543  015D1C  6AF8               	clrf	tblptru,c
  8544  015D1E  0E00               	movlw	low (__mediumconst shr (0+16))
  8545  015D20  22F8               	addwfc	tblptru,f,c
  8546  015D22                     	endif
  8547  015D22  0009               	tblrd		*+
  8548  015D24  CFF5 F095          	movff	tablat,??_LCD_Init
  8549  015D28  0009               	tblrd		*+
  8550  015D2A  CFF5 F096          	movff	tablat,??_LCD_Init+1
  8551  015D2E  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
  8552  015D32  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
  8553  015D34  5195               	movf	??_LCD_Init& (0+255),w,b
  8554  015D36  ECE0  F0C4         	call	_LCD_Write
  8555  015D3A  D013               	goto	l90
  8556  015D3C                     l89:
  8557                           
  8558                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  8559  015D3C  0E01               	movlw	1
  8560  015D3E  0100               	movlb	0	; () banked
  8561  015D40  6F63               	movwf	LCD_Write@mode& (0+255),b
  8562  015D42  90D8               	bcf	status,0,c
  8563  015D44  3597               	rlcf	LCD_Init@i& (0+255),w,b
  8564  015D46  6EF6               	movwf	tblptrl,c
  8565  015D48  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8566  015D4A  6EF7               	movwf	tblptrh,c
  8567  015D4C  0E55               	movlw	low _InitList
  8568  015D4E  26F6               	addwf	tblptrl,f,c
  8569  015D50  0EFB               	movlw	high _InitList
  8570  015D52  22F7               	addwfc	tblptrh,f,c
  8571  015D54                     	if	1	;There are 3 active tblptr bytes
  8572  015D54  6AF8               	clrf	tblptru,c
  8573  015D56  0E00               	movlw	low (__mediumconst shr (0+16))
  8574  015D58  22F8               	addwfc	tblptru,f,c
  8575  015D5A                     	endif
  8576  015D5A  0008               	tblrd		*
  8577  015D5C  50F5               	movf	tablat,w,c
  8578  015D5E  ECE0  F0C4         	call	_LCD_Write
  8579  015D62                     l90:
  8580  015D62  0100               	movlb	0	; () banked
  8581  015D64  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  8582  015D66  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  8583                           
  8584                           ; BSR set to: 0
  8585  015D68  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  8586  015D6A  E101               	bnz	l16433
  8587  015D6C  D783               	goto	L8
  8588  015D6E                     u13880:
  8589  015D6E                     l16433:
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;LCD.c: 185: }
  8593                           ;LCD.c: 186: }
  8594                           ;LCD.c: 187: delay_ms(100);
  8595  015D6E  0E00               	movlw	0
  8596  015D70  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  8597  015D72  0E64               	movlw	100
  8598  015D74  6F60               	movwf	delay_ms@ms& (0+255),b
  8599  015D76  ECBA  F0BE         	call	_delay_ms	;wreg free
  8600                           
  8601                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  8602  015D7A  0E00               	movlw	0
  8603  015D7C  0100               	movlb	0	; () banked
  8604  015D7E  6F63               	movwf	LCD_Write@mode& (0+255),b
  8605  015D80  0E29               	movlw	41
  8606  015D82  ECE0  F0C4         	call	_LCD_Write
  8607                           
  8608                           ;LCD.c: 189: Set_Rotation(1);
  8609  015D86  0E01               	movlw	1
  8610  015D88  ECCD  F0B8         	call	_Set_Rotation
  8611                           
  8612                           ;LCD.c: 191: delay_ms(100);
  8613  015D8C  0E00               	movlw	0
  8614  015D8E  0100               	movlb	0	; () banked
  8615  015D90  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  8616  015D92  0E64               	movlw	100
  8617  015D94  6F60               	movwf	delay_ms@ms& (0+255),b
  8618  015D96  ECBA  F0BE         	call	_delay_ms	;wreg free
  8619                           
  8620                           ;LCD.c: 192: LCD_Fill(0x0000);
  8621  015D9A  0E00               	movlw	0
  8622  015D9C  0100               	movlb	0	; () banked
  8623  015D9E  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  8624  015DA0  0E00               	movlw	0
  8625  015DA2  6F69               	movwf	LCD_Fill@pColour& (0+255),b
  8626  015DA4  EC5F  F0C1         	call	_LCD_Fill	;wreg free
  8627  015DA8  0012               	return		;funcret
  8628  015DAA                     __end_of_LCD_Init:
  8629                           	opt stack 0
  8630                           tosu	equ	0xFFF
  8631                           tosh	equ	0xFFE
  8632                           tosl	equ	0xFFD
  8633                           pclath	equ	0xFFA
  8634                           tblptru	equ	0xFF8
  8635                           tblptrh	equ	0xFF7
  8636                           tblptrl	equ	0xFF6
  8637                           tablat	equ	0xFF5
  8638                           intcon	equ	0xFF2
  8639                           postinc0	equ	0xFEE
  8640                           wreg	equ	0xFE8
  8641                           postdec1	equ	0xFE5
  8642                           fsr1h	equ	0xFE2
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           plusw2	equ	0xFDB
  8648                           fsr2h	equ	0xFDA
  8649                           fsr2l	equ	0xFD9
  8650                           status	equ	0xFD8
  8651                           
  8652 ;; *************** function _Set_Rotation *****************
  8653 ;; Defined at:
  8654 ;;		line 248 in file "Library/LCD.c"
  8655 ;; Parameters:    Size  Location     Type
  8656 ;;  m               1    wreg     unsigned char 
  8657 ;; Auto vars:     Size  Location     Type
  8658 ;;  m               1    5[BANK0 ] unsigned char 
  8659 ;;  rotation        1    6[BANK0 ] unsigned char 
  8660 ;; Return value:  Size  Location     Type
  8661 ;;                  1    wreg      void 
  8662 ;; Registers used:
  8663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8664 ;; Tracked objects:
  8665 ;;		On entry : 0/0
  8666 ;;		On exit  : 0/0
  8667 ;;		Unchanged: 0/0
  8668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;Total ram usage:        2 bytes
  8674 ;; Hardware stack levels used:    1
  8675 ;; Hardware stack levels required when called:    9
  8676 ;; This function calls:
  8677 ;;		_LCD_Write
  8678 ;; This function is called by:
  8679 ;;		_LCD_Init
  8680 ;; This function uses a non-reentrant model
  8681 ;;
  8682                           
  8683                           	psect	text25
  8684  01719A                     __ptext25:
  8685                           	opt stack 0
  8686  01719A                     _Set_Rotation:
  8687                           	opt stack 20
  8688                           
  8689                           ;incstack = 0
  8690                           ;Set_Rotation@m stored from wreg
  8691  01719A  0100               	movlb	0	; () banked
  8692  01719C  6F65               	movwf	Set_Rotation@m& (0+255),b
  8693                           
  8694                           ;LCD.c: 250: UINT8 rotation = 0x00;
  8695  01719E  0E00               	movlw	0
  8696  0171A0  0100               	movlb	0	; () banked
  8697  0171A2  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  8701  0171A4  0E00               	movlw	0
  8702  0171A6  6F63               	movwf	LCD_Write@mode& (0+255),b
  8703  0171A8  0E36               	movlw	54
  8704  0171AA  ECE0  F0C4         	call	_LCD_Write
  8705                           
  8706                           ;LCD.c: 253: rotation = (m % 4);
  8707  0171AE  0100               	movlb	0	; () banked
  8708  0171B0  5165               	movf	Set_Rotation@m& (0+255),w,b
  8709  0171B2  0B03               	andlw	3
  8710  0171B4  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  8711                           
  8712                           ;LCD.c: 255: switch(rotation)
  8713  0171B6  D02B               	goto	l117
  8714  0171B8                     
  8715                           ; BSR set to: 0
  8716                           ;LCD.c: 258: {
  8717                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  8718                           
  8719                           ; BSR set to: 0
  8720  0171B8  0E01               	movlw	1
  8721  0171BA  6F63               	movwf	LCD_Write@mode& (0+255),b
  8722  0171BC  0EC8               	movlw	200
  8723  0171BE  ECE0  F0C4         	call	_LCD_Write
  8724                           
  8725                           ;LCD.c: 260: w = 128;
  8726  0171C2  0E80               	movlw	128
  8727  0171C4  6E50               	movwf	_w,c
  8728                           
  8729                           ;LCD.c: 261: l = 128;
  8730  0171C6  0E80               	movlw	128
  8731  0171C8  6E4F               	movwf	_l,c
  8732                           
  8733                           ;LCD.c: 262: break;
  8734  0171CA  0012               	return	
  8735  0171CC                     
  8736                           ;LCD.c: 265: {
  8737                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  8738  0171CC  0E01               	movlw	1
  8739  0171CE  0100               	movlb	0	; () banked
  8740  0171D0  6F63               	movwf	LCD_Write@mode& (0+255),b
  8741  0171D2  0EA8               	movlw	168
  8742  0171D4  ECE0  F0C4         	call	_LCD_Write
  8743                           
  8744                           ;LCD.c: 267: w = 128;
  8745  0171D8  0E80               	movlw	128
  8746  0171DA  6E50               	movwf	_w,c
  8747                           
  8748                           ;LCD.c: 268: l = 128;
  8749  0171DC  0E80               	movlw	128
  8750  0171DE  6E4F               	movwf	_l,c
  8751                           
  8752                           ;LCD.c: 269: break;
  8753  0171E0  0012               	return	
  8754  0171E2                     
  8755                           ;LCD.c: 272: {
  8756                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  8757  0171E2  0E01               	movlw	1
  8758  0171E4  0100               	movlb	0	; () banked
  8759  0171E6  6F63               	movwf	LCD_Write@mode& (0+255),b
  8760  0171E8  0E08               	movlw	8
  8761  0171EA  ECE0  F0C4         	call	_LCD_Write
  8762                           
  8763                           ;LCD.c: 274: w = 128;
  8764  0171EE  0E80               	movlw	128
  8765  0171F0  6E50               	movwf	_w,c
  8766                           
  8767                           ;LCD.c: 275: l = 128;
  8768  0171F2  0E80               	movlw	128
  8769  0171F4  6E4F               	movwf	_l,c
  8770                           
  8771                           ;LCD.c: 276: break;
  8772  0171F6  0012               	return	
  8773  0171F8                     
  8774                           ;LCD.c: 279: {
  8775                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  8776  0171F8  0E01               	movlw	1
  8777  0171FA  0100               	movlb	0	; () banked
  8778  0171FC  6F63               	movwf	LCD_Write@mode& (0+255),b
  8779  0171FE  0E68               	movlw	104
  8780  017200  ECE0  F0C4         	call	_LCD_Write
  8781                           
  8782                           ;LCD.c: 281: w = 128;
  8783  017204  0E80               	movlw	128
  8784  017206  6E50               	movwf	_w,c
  8785                           
  8786                           ;LCD.c: 282: l = 128;
  8787  017208  0E80               	movlw	128
  8788  01720A  6E4F               	movwf	_l,c
  8789                           
  8790                           ;LCD.c: 284: }
  8791                           ;LCD.c: 285: }
  8792                           
  8793                           ;LCD.c: 283: break;
  8794  01720C  0012               	return	
  8795  01720E                     l117:
  8796  01720E  0100               	movlb	0	; () banked
  8797  017210  5166               	movf	Set_Rotation@rotation& (0+255),w,b
  8798                           
  8799                           ; Switch size 1, requested type "space"
  8800                           ; Number of cases is 4, Range of values is 0 to 3
  8801                           ; switch strategies available:
  8802                           ; Name         Instructions Cycles
  8803                           ; simple_byte           13     7 (average)
  8804                           ;	Chosen strategy is simple_byte
  8805  017212  0A00               	xorlw	0	; case 0
  8806  017214  B4D8               	btfsc	status,2,c
  8807  017216  D7D0               	goto	l118
  8808  017218  0A01               	xorlw	1	; case 1
  8809  01721A  B4D8               	btfsc	status,2,c
  8810  01721C  D7D7               	goto	l120
  8811  01721E  0A03               	xorlw	3	; case 2
  8812  017220  B4D8               	btfsc	status,2,c
  8813  017222  D7DF               	goto	l121
  8814  017224  0A01               	xorlw	1	; case 3
  8815  017226  A4D8               	btfss	status,2,c
  8816  017228  0012               	return	
  8817  01722A  D7E6               	goto	l122
  8818  01722C                     __end_of_Set_Rotation:
  8819                           	opt stack 0
  8820                           tosu	equ	0xFFF
  8821                           tosh	equ	0xFFE
  8822                           tosl	equ	0xFFD
  8823                           pclath	equ	0xFFA
  8824                           tblptru	equ	0xFF8
  8825                           tblptrh	equ	0xFF7
  8826                           tblptrl	equ	0xFF6
  8827                           tablat	equ	0xFF5
  8828                           intcon	equ	0xFF2
  8829                           postinc0	equ	0xFEE
  8830                           wreg	equ	0xFE8
  8831                           postdec1	equ	0xFE5
  8832                           fsr1h	equ	0xFE2
  8833                           fsr1l	equ	0xFE1
  8834                           indf2	equ	0xFDF
  8835                           postinc2	equ	0xFDE
  8836                           postdec2	equ	0xFDD
  8837                           plusw2	equ	0xFDB
  8838                           fsr2h	equ	0xFDA
  8839                           fsr2l	equ	0xFD9
  8840                           status	equ	0xFD8
  8841                           
  8842 ;; *************** function _LCD_Fill *****************
  8843 ;; Defined at:
  8844 ;;		line 287 in file "Library/LCD.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;  pColour         2    9[BANK0 ] unsigned short 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;  j               1   12[BANK0 ] unsigned char 
  8849 ;;  i               1   11[BANK0 ] unsigned char 
  8850 ;; Return value:  Size  Location     Type
  8851 ;;                  1    wreg      void 
  8852 ;; Registers used:
  8853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8854 ;; Tracked objects:
  8855 ;;		On entry : 0/0
  8856 ;;		On exit  : 0/0
  8857 ;;		Unchanged: 0/0
  8858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8859 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;Total ram usage:        4 bytes
  8864 ;; Hardware stack levels used:    1
  8865 ;; Hardware stack levels required when called:   10
  8866 ;; This function calls:
  8867 ;;		_LCD_Word_Write
  8868 ;;		_Set_Addr_Window
  8869 ;; This function is called by:
  8870 ;;		_LCD_Init
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           	psect	text26
  8875  0182BE                     __ptext26:
  8876                           	opt stack 0
  8877  0182BE                     _LCD_Fill:
  8878                           	opt stack 19
  8879                           
  8880                           ;LCD.c: 296: UINT8 i = 0x00;
  8881                           
  8882                           ;incstack = 0
  8883  0182BE  0E00               	movlw	0
  8884  0182C0  0100               	movlb	0	; () banked
  8885  0182C2  6F6B               	movwf	LCD_Fill@i& (0+255),b
  8886                           
  8887                           ;LCD.c: 297: UINT8 j = 0x00;
  8888  0182C4  0E00               	movlw	0
  8889  0182C6  6F6C               	movwf	LCD_Fill@j& (0+255),b
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  8893  0182C8  0E00               	movlw	0
  8894  0182CA  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
  8895  0182CC  0450               	decf	_w,w,c
  8896  0182CE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  8897  0182D0  044F               	decf	_l,w,c
  8898  0182D2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  8899  0182D4  0E00               	movlw	0
  8900  0182D6  EC36  F0B8         	call	_Set_Addr_Window
  8901                           
  8902                           ;LCD.c: 299: for (j = l; j > 0; j--)
  8903  0182DA  C04F  F06C         	movff	_l,LCD_Fill@j
  8904  0182DE  0100               	movlb	0	; () banked
  8905  0182E0  516C               	movf	LCD_Fill@j& (0+255),w,b
  8906  0182E2  B4D8               	btfsc	status,2,c
  8907  0182E4  0012               	return	
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;LCD.c: 300: for (i = w; i > 0; i--)
  8911                           
  8912                           ; BSR set to: 0
  8913  0182E6  C050  F06B         	movff	_w,LCD_Fill@i
  8914  0182EA                     l16273:
  8915                           
  8916                           ; BSR set to: 0
  8917  0182EA  516B               	movf	LCD_Fill@i& (0+255),w,b
  8918  0182EC  B4D8               	btfsc	status,2,c
  8919  0182EE  D009               	goto	u13700
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;LCD.c: 301: LCD_Word_Write(pColour);
  8923                           
  8924                           ; BSR set to: 0
  8925                           
  8926                           ; BSR set to: 0
  8927  0182F0  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  8928  0182F4  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  8929  0182F8  EC28  F0C5         	call	_LCD_Word_Write	;wreg free
  8930  0182FC  0100               	movlb	0	; () banked
  8931  0182FE  076B               	decf	LCD_Fill@i& (0+255),f,b
  8932  018300  D7F4               	goto	l16273
  8933  018302                     u13700:
  8934                           
  8935                           ; BSR set to: 0
  8936                           
  8937                           ; BSR set to: 0
  8938  018302  076C               	decf	LCD_Fill@j& (0+255),f,b
  8939  018304  D7ED               	goto	L9
  8940  018306                     __end_of_LCD_Fill:
  8941                           	opt stack 0
  8942                           tosu	equ	0xFFF
  8943                           tosh	equ	0xFFE
  8944                           tosl	equ	0xFFD
  8945                           pclath	equ	0xFFA
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           intcon	equ	0xFF2
  8951                           postinc0	equ	0xFEE
  8952                           wreg	equ	0xFE8
  8953                           postdec1	equ	0xFE5
  8954                           fsr1h	equ	0xFE2
  8955                           fsr1l	equ	0xFE1
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           plusw2	equ	0xFDB
  8960                           fsr2h	equ	0xFDA
  8961                           fsr2l	equ	0xFD9
  8962                           status	equ	0xFD8
  8963                           
  8964 ;; *************** function _Configure_GPIOs *****************
  8965 ;; Defined at:
  8966 ;;		line 46 in file "Library/LCD.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;		None
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;		None
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  1    wreg      void 
  8973 ;; Registers used:
  8974 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8984 ;;Total ram usage:        0 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:   14
  8987 ;; This function calls:
  8988 ;;		_LCD_Reset
  8989 ;;		_Port_SetPinType
  8990 ;;		_SPI_Init
  8991 ;;		_SPI_MaxSpeed
  8992 ;; This function is called by:
  8993 ;;		_LCD_Init
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           	psect	text27
  8998  017CB8                     __ptext27:
  8999                           	opt stack 0
  9000  017CB8                     _Configure_GPIOs:
  9001                           	opt stack 15
  9002                           
  9003                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;incstack = 0
  9007  017CB8  0E94               	movlw	low _PortF
  9008  017CBA  0100               	movlb	0	; () banked
  9009  017CBC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9010  017CBE  0E01               	movlw	high _PortF
  9011  017CC0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9012  017CC2  0E07               	movlw	7
  9013  017CC4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9014  017CC6  0E03               	movlw	3
  9015  017CC8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9016  017CCA  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  9017                           
  9018                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9019  017CCE  0E94               	movlw	low _PortF
  9020  017CD0  0100               	movlb	0	; () banked
  9021  017CD2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9022  017CD4  0E01               	movlw	high _PortF
  9023  017CD6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9024  017CD8  0E06               	movlw	6
  9025  017CDA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9026  017CDC  0E03               	movlw	3
  9027  017CDE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9028  017CE0  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
  9029                           
  9030                           ;LCD.c: 55: LCD_Reset();
  9031  017CE4  ECE3  F0BF         	call	_LCD_Reset	;wreg free
  9032                           
  9033                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9034  017CE8  0EC0               	movlw	192
  9035  017CEA  0100               	movlb	0	; () banked
  9036  017CEC  6F8D               	movwf	SPI_Init@pClock& (0+255),b
  9037  017CEE  0EC6               	movlw	198
  9038  017CF0  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9039  017CF2  0E2D               	movlw	45
  9040  017CF4  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9041  017CF6  0E00               	movlw	0
  9042  017CF8  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9043  017CFA  0E01               	movlw	1
  9044  017CFC  6F91               	movwf	SPI_Init@pChannel& (0+255),b
  9045  017CFE  0E01               	movlw	1
  9046  017D00  6F92               	movwf	SPI_Init@pMode& (0+255),b
  9047  017D02  EC43  F097         	call	_SPI_Init	;wreg free
  9048                           
  9049                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9050  017D06  0E61               	movlw	low _SPI2
  9051  017D08  0100               	movlb	0	; () banked
  9052  017D0A  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9053  017D0C  0E01               	movlw	high _SPI2
  9054  017D0E  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9055  017D10  EC2D  F0BD         	call	_SPI_MaxSpeed	;wreg free
  9056  017D14  0012               	return		;funcret
  9057  017D16                     __end_of_Configure_GPIOs:
  9058                           	opt stack 0
  9059                           tosu	equ	0xFFF
  9060                           tosh	equ	0xFFE
  9061                           tosl	equ	0xFFD
  9062                           pclath	equ	0xFFA
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           intcon	equ	0xFF2
  9068                           postinc0	equ	0xFEE
  9069                           wreg	equ	0xFE8
  9070                           postdec1	equ	0xFE5
  9071                           fsr1h	equ	0xFE2
  9072                           fsr1l	equ	0xFE1
  9073                           indf2	equ	0xFDF
  9074                           postinc2	equ	0xFDE
  9075                           postdec2	equ	0xFDD
  9076                           plusw2	equ	0xFDB
  9077                           fsr2h	equ	0xFDA
  9078                           fsr2l	equ	0xFD9
  9079                           status	equ	0xFD8
  9080                           
  9081 ;; *************** function _SPI_MaxSpeed *****************
  9082 ;; Defined at:
  9083 ;;		line 201 in file "Library/SPI.c"
  9084 ;; Parameters:    Size  Location     Type
  9085 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9086 ;;		 -> SPI2(11), 
  9087 ;; Auto vars:     Size  Location     Type
  9088 ;;		None
  9089 ;; Return value:  Size  Location     Type
  9090 ;;                  1    wreg      void 
  9091 ;; Registers used:
  9092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9093 ;; Tracked objects:
  9094 ;;		On entry : 0/0
  9095 ;;		On exit  : 0/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9098 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9101 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9102 ;;Total ram usage:        2 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    9
  9105 ;; This function calls:
  9106 ;;		_Byte_SetBit
  9107 ;;		_Byte_SetQuad
  9108 ;; This function is called by:
  9109 ;;		_Configure_GPIOs
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text28
  9114  017A5A                     __ptext28:
  9115                           	opt stack 0
  9116  017A5A                     _SPI_MaxSpeed:
  9117                           	opt stack 19
  9118                           
  9119                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9120                           
  9121                           ;incstack = 0
  9122  017A5A  0100               	movlb	0	; () banked
  9123  017A5C  EE20 F006          	lfsr	2,6
  9124  017A60  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9125  017A62  26D9               	addwf	fsr2l,f,c
  9126  017A64  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9127  017A66  22DA               	addwfc	fsr2h,f,c
  9128  017A68  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9129  017A6C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9130  017A70  0E05               	movlw	5
  9131  017A72  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9132  017A74  0E00               	movlw	0
  9133  017A76  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9134  017A78  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
  9135                           
  9136                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9137  017A7C  0100               	movlb	0	; () banked
  9138  017A7E  EE20 F006          	lfsr	2,6
  9139  017A82  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9140  017A84  26D9               	addwf	fsr2l,f,c
  9141  017A86  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9142  017A88  22DA               	addwfc	fsr2h,f,c
  9143  017A8A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
  9144  017A8E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
  9145  017A92  0E00               	movlw	0
  9146  017A94  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9147  017A96  0E00               	movlw	0
  9148  017A98  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
  9149  017A9A  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
  9150                           
  9151                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9152  017A9E  0100               	movlb	0	; () banked
  9153  017AA0  EE20 F006          	lfsr	2,6
  9154  017AA4  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9155  017AA6  26D9               	addwf	fsr2l,f,c
  9156  017AA8  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9157  017AAA  22DA               	addwfc	fsr2h,f,c
  9158  017AAC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9159  017AB0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9160  017AB4  0E05               	movlw	5
  9161  017AB6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9162  017AB8  0E01               	movlw	1
  9163  017ABA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9164  017ABC  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
  9165  017AC0  0012               	return		;funcret
  9166  017AC2                     __end_of_SPI_MaxSpeed:
  9167                           	opt stack 0
  9168                           tosu	equ	0xFFF
  9169                           tosh	equ	0xFFE
  9170                           tosl	equ	0xFFD
  9171                           pclath	equ	0xFFA
  9172                           tblptru	equ	0xFF8
  9173                           tblptrh	equ	0xFF7
  9174                           tblptrl	equ	0xFF6
  9175                           tablat	equ	0xFF5
  9176                           intcon	equ	0xFF2
  9177                           postinc0	equ	0xFEE
  9178                           wreg	equ	0xFE8
  9179                           postdec1	equ	0xFE5
  9180                           fsr1h	equ	0xFE2
  9181                           fsr1l	equ	0xFE1
  9182                           indf2	equ	0xFDF
  9183                           postinc2	equ	0xFDE
  9184                           postdec2	equ	0xFDD
  9185                           plusw2	equ	0xFDB
  9186                           fsr2h	equ	0xFDA
  9187                           fsr2l	equ	0xFD9
  9188                           status	equ	0xFD8
  9189                           
  9190 ;; *************** function _LCD_Reset *****************
  9191 ;; Defined at:
  9192 ;;		line 95 in file "Library/LCD.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;		None
  9195 ;; Auto vars:     Size  Location     Type
  9196 ;;		None
  9197 ;; Return value:  Size  Location     Type
  9198 ;;                  1    wreg      void 
  9199 ;; Registers used:
  9200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9201 ;; Tracked objects:
  9202 ;;		On entry : 0/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9210 ;;Total ram usage:        0 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:   13
  9213 ;; This function calls:
  9214 ;;		_LED_Toggle
  9215 ;;		_Reset_High
  9216 ;;		_Reset_Low
  9217 ;;		_delay_ms
  9218 ;; This function is called by:
  9219 ;;		_Configure_GPIOs
  9220 ;; This function uses a non-reentrant model
  9221 ;;
  9222                           
  9223                           	psect	text29
  9224  017FC6                     __ptext29:
  9225                           	opt stack 0
  9226  017FC6                     _LCD_Reset:
  9227                           	opt stack 15
  9228                           
  9229                           ;LCD.c: 97: Reset_High();
  9230                           
  9231                           ;incstack = 0
  9232  017FC6  EC4E  F0C5         	call	_Reset_High	;wreg free
  9233                           
  9234                           ;LCD.c: 98: LED_Toggle(eLED2);
  9235  017FCA  0E01               	movlw	1
  9236  017FCC  EC2E  F0C2         	call	_LED_Toggle
  9237                           
  9238                           ;LCD.c: 99: delay_ms(0x80);
  9239  017FD0  0E00               	movlw	0
  9240  017FD2  0100               	movlb	0	; () banked
  9241  017FD4  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9242  017FD6  0E80               	movlw	128
  9243  017FD8  6F60               	movwf	delay_ms@ms& (0+255),b
  9244  017FDA  ECBA  F0BE         	call	_delay_ms	;wreg free
  9245                           
  9246                           ;LCD.c: 100: LED_Toggle(eLED2);
  9247  017FDE  0E01               	movlw	1
  9248  017FE0  EC2E  F0C2         	call	_LED_Toggle
  9249                           
  9250                           ;LCD.c: 101: Reset_Low();
  9251  017FE4  EC42  F0C5         	call	_Reset_Low	;wreg free
  9252                           
  9253                           ;LCD.c: 102: delay_ms(0x80);
  9254  017FE8  0E00               	movlw	0
  9255  017FEA  0100               	movlb	0	; () banked
  9256  017FEC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9257  017FEE  0E80               	movlw	128
  9258  017FF0  6F60               	movwf	delay_ms@ms& (0+255),b
  9259  017FF2  ECBA  F0BE         	call	_delay_ms	;wreg free
  9260                           
  9261                           ;LCD.c: 103: LED_Toggle(eLED2);
  9262  017FF6  0E01               	movlw	1
  9263  017FF8  EC2E  F0C2         	call	_LED_Toggle
  9264                           
  9265                           ;LCD.c: 104: Reset_High();
  9266  017FFC  EC4E  F0C5         	call	_Reset_High	;wreg free
  9267                           
  9268                           ;LCD.c: 105: delay_ms(0x80);
  9269  018000  0E00               	movlw	0
  9270  018002  0100               	movlb	0	; () banked
  9271  018004  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9272  018006  0E80               	movlw	128
  9273  018008  6F60               	movwf	delay_ms@ms& (0+255),b
  9274  01800A  ECBA  F0BE         	call	_delay_ms	;wreg free
  9275                           
  9276                           ;LCD.c: 106: LED_Toggle(eLED2);
  9277  01800E  0E01               	movlw	1
  9278  018010  EC2E  F0C2         	call	_LED_Toggle
  9279  018014  0012               	return		;funcret
  9280  018016                     __end_of_LCD_Reset:
  9281                           	opt stack 0
  9282                           tosu	equ	0xFFF
  9283                           tosh	equ	0xFFE
  9284                           tosl	equ	0xFFD
  9285                           pclath	equ	0xFFA
  9286                           tblptru	equ	0xFF8
  9287                           tblptrh	equ	0xFF7
  9288                           tblptrl	equ	0xFF6
  9289                           tablat	equ	0xFF5
  9290                           intcon	equ	0xFF2
  9291                           postinc0	equ	0xFEE
  9292                           wreg	equ	0xFE8
  9293                           postdec1	equ	0xFE5
  9294                           fsr1h	equ	0xFE2
  9295                           fsr1l	equ	0xFE1
  9296                           indf2	equ	0xFDF
  9297                           postinc2	equ	0xFDE
  9298                           postdec2	equ	0xFDD
  9299                           plusw2	equ	0xFDB
  9300                           fsr2h	equ	0xFDA
  9301                           fsr2l	equ	0xFD9
  9302                           status	equ	0xFD8
  9303                           
  9304 ;; *************** function _Reset_Low *****************
  9305 ;; Defined at:
  9306 ;;		line 32 in file "Library/LCD.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;		None
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;		None
  9311 ;; Return value:  Size  Location     Type
  9312 ;;                  1    wreg      void 
  9313 ;; Registers used:
  9314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9315 ;; Tracked objects:
  9316 ;;		On entry : 0/0
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9324 ;;Total ram usage:        0 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:   11
  9327 ;; This function calls:
  9328 ;;		_Port_SetPin
  9329 ;; This function is called by:
  9330 ;;		_LCD_Reset
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           	psect	text30
  9335  018A84                     __ptext30:
  9336                           	opt stack 0
  9337  018A84                     _Reset_Low:
  9338                           	opt stack 16
  9339                           
  9340                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9341                           
  9342                           ;incstack = 0
  9343  018A84  0E94               	movlw	low _PortF
  9344  018A86  0100               	movlb	0	; () banked
  9345  018A88  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9346  018A8A  0E01               	movlw	high _PortF
  9347  018A8C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9348  018A8E  0E06               	movlw	6
  9349  018A90  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9350  018A92  0E01               	movlw	1
  9351  018A94  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9352  018A96  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  9353  018A9A  0012               	return		;funcret
  9354  018A9C                     __end_of_Reset_Low:
  9355                           	opt stack 0
  9356                           tosu	equ	0xFFF
  9357                           tosh	equ	0xFFE
  9358                           tosl	equ	0xFFD
  9359                           pclath	equ	0xFFA
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           intcon	equ	0xFF2
  9365                           postinc0	equ	0xFEE
  9366                           wreg	equ	0xFE8
  9367                           postdec1	equ	0xFE5
  9368                           fsr1h	equ	0xFE2
  9369                           fsr1l	equ	0xFE1
  9370                           indf2	equ	0xFDF
  9371                           postinc2	equ	0xFDE
  9372                           postdec2	equ	0xFDD
  9373                           plusw2	equ	0xFDB
  9374                           fsr2h	equ	0xFDA
  9375                           fsr2l	equ	0xFD9
  9376                           status	equ	0xFD8
  9377                           
  9378 ;; *************** function _Reset_High *****************
  9379 ;; Defined at:
  9380 ;;		line 36 in file "Library/LCD.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;		None
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;		None
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  1    wreg      void 
  9387 ;; Registers used:
  9388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:        0 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:   11
  9401 ;; This function calls:
  9402 ;;		_Port_SetPin
  9403 ;; This function is called by:
  9404 ;;		_LCD_Reset
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text31
  9409  018A9C                     __ptext31:
  9410                           	opt stack 0
  9411  018A9C                     _Reset_High:
  9412                           	opt stack 16
  9413                           
  9414                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  9415                           
  9416                           ;incstack = 0
  9417  018A9C  0E94               	movlw	low _PortF
  9418  018A9E  0100               	movlb	0	; () banked
  9419  018AA0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9420  018AA2  0E01               	movlw	high _PortF
  9421  018AA4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9422  018AA6  0E06               	movlw	6
  9423  018AA8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9424  018AAA  0E00               	movlw	0
  9425  018AAC  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9426  018AAE  EC9D  F0B5         	call	_Port_SetPin	;wreg free
  9427  018AB2  0012               	return		;funcret
  9428  018AB4                     __end_of_Reset_High:
  9429                           	opt stack 0
  9430                           tosu	equ	0xFFF
  9431                           tosh	equ	0xFFE
  9432                           tosl	equ	0xFFD
  9433                           pclath	equ	0xFFA
  9434                           tblptru	equ	0xFF8
  9435                           tblptrh	equ	0xFF7
  9436                           tblptrl	equ	0xFF6
  9437                           tablat	equ	0xFF5
  9438                           intcon	equ	0xFF2
  9439                           postinc0	equ	0xFEE
  9440                           wreg	equ	0xFE8
  9441                           postdec1	equ	0xFE5
  9442                           fsr1h	equ	0xFE2
  9443                           fsr1l	equ	0xFE1
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           postdec2	equ	0xFDD
  9447                           plusw2	equ	0xFDB
  9448                           fsr2h	equ	0xFDA
  9449                           fsr2l	equ	0xFD9
  9450                           status	equ	0xFD8
  9451                           
  9452 ;; *************** function _Init_Timer0 *****************
  9453 ;; Defined at:
  9454 ;;		line 66 in file "main.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;		None
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;		None
  9459 ;; Return value:  Size  Location     Type
  9460 ;;                  2  2140[None  ] int 
  9461 ;; Registers used:
  9462 ;;		None
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;Total ram usage:        0 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    7
  9475 ;; This function calls:
  9476 ;;		Nothing
  9477 ;; This function is called by:
  9478 ;;		_main
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text32
  9483  018AB4                     __ptext32:
  9484                           	opt stack 0
  9485  018AB4                     _Init_Timer0:
  9486                           	opt stack 23
  9487                           
  9488                           ;main.c: 68: T0CONbits.TMR0ON = 1;
  9489                           
  9490                           ;incstack = 0
  9491  018AB4  8ED5               	bsf	4053,7,c	;volatile
  9492                           
  9493                           ;main.c: 69: T0CONbits.T08BIT = 1;
  9494  018AB6  8CD5               	bsf	4053,6,c	;volatile
  9495                           
  9496                           ;main.c: 70: T0CONbits.T0CS=0;
  9497  018AB8  9AD5               	bcf	4053,5,c	;volatile
  9498                           
  9499                           ;main.c: 71: T0CONbits.T0SE=0;
  9500  018ABA  98D5               	bcf	4053,4,c	;volatile
  9501                           
  9502                           ;main.c: 72: T0CONbits.PSA=0;
  9503  018ABC  96D5               	bcf	4053,3,c	;volatile
  9504                           
  9505                           ;main.c: 73: T0CONbits.T0PS2=1;
  9506  018ABE  84D5               	bsf	4053,2,c	;volatile
  9507                           
  9508                           ;main.c: 74: T0CONbits.T0PS1=1;
  9509  018AC0  82D5               	bsf	4053,1,c	;volatile
  9510                           
  9511                           ;main.c: 75: T0CONbits.T0PS0=1;
  9512  018AC2  80D5               	bsf	4053,0,c	;volatile
  9513                           
  9514                           ;main.c: 77: INTCONbits.TMR0IE = 1;
  9515  018AC4  8AF2               	bsf	intcon,5,c	;volatile
  9516                           
  9517                           ;main.c: 78: INTCONbits.PEIE = 1;
  9518  018AC6  8CF2               	bsf	intcon,6,c	;volatile
  9519                           
  9520                           ;main.c: 79: INTCONbits.GIE = 1;
  9521  018AC8  8EF2               	bsf	intcon,7,c	;volatile
  9522  018ACA  0012               	return		;funcret
  9523  018ACC                     __end_of_Init_Timer0:
  9524                           	opt stack 0
  9525                           tosu	equ	0xFFF
  9526                           tosh	equ	0xFFE
  9527                           tosl	equ	0xFFD
  9528                           pclath	equ	0xFFA
  9529                           tblptru	equ	0xFF8
  9530                           tblptrh	equ	0xFF7
  9531                           tblptrl	equ	0xFF6
  9532                           tablat	equ	0xFF5
  9533                           intcon	equ	0xFF2
  9534                           postinc0	equ	0xFEE
  9535                           wreg	equ	0xFE8
  9536                           postdec1	equ	0xFE5
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           plusw2	equ	0xFDB
  9543                           fsr2h	equ	0xFDA
  9544                           fsr2l	equ	0xFD9
  9545                           status	equ	0xFD8
  9546                           
  9547 ;; *************** function _InitSerialCommunication *****************
  9548 ;; Defined at:
  9549 ;;		line 89 in file "main.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9567 ;;Total ram usage:        0 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    7
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		_main
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           	psect	text33
  9578  0189E0                     __ptext33:
  9579                           	opt stack 0
  9580  0189E0                     _InitSerialCommunication:
  9581                           	opt stack 23
  9582                           
  9583                           ;main.c: 91: TRISCbits.TRISC6 = 0;
  9584                           
  9585                           ;incstack = 0
  9586  0189E0  9C94               	bcf	3988,6,c	;volatile
  9587                           
  9588                           ;main.c: 92: TRISCbits.TRISC7 = 1;
  9589  0189E2  8E94               	bsf	3988,7,c	;volatile
  9590                           
  9591                           ;main.c: 94: TXSTA1 = 0b00100100;
  9592  0189E4  0E24               	movlw	36
  9593  0189E6  6EAD               	movwf	4013,c	;volatile
  9594                           
  9595                           ;main.c: 95: RCSTA1 = 0b10010000;
  9596  0189E8  0E90               	movlw	144
  9597  0189EA  6EAC               	movwf	4012,c	;volatile
  9598                           
  9599                           ;main.c: 97: BAUDCON1bits.DTRXP = 0;
  9600  0189EC  9A7E               	bcf	3966,5,c	;volatile
  9601                           
  9602                           ;main.c: 98: BAUDCON1bits.SCKP = 0;
  9603  0189EE  987E               	bcf	3966,4,c	;volatile
  9604                           
  9605                           ;main.c: 99: BAUDCON1bits.WUE = 0;
  9606  0189F0  927E               	bcf	3966,1,c	;volatile
  9607                           
  9608                           ;main.c: 100: BAUDCON1bits.ABDEN = 0;
  9609  0189F2  907E               	bcf	3966,0,c	;volatile
  9610                           
  9611                           ;main.c: 103: TXSTA1bits.BRGH = 1;
  9612  0189F4  84AD               	bsf	4013,2,c	;volatile
  9613                           
  9614                           ;main.c: 104: BAUDCON1bits.BRG16 = 0;
  9615  0189F6  967E               	bcf	3966,3,c	;volatile
  9616                           
  9617                           ;main.c: 105: SPBRG1 = 51;
  9618  0189F8  0E33               	movlw	51
  9619  0189FA  6EB0               	movwf	4016,c	;volatile
  9620  0189FC  0012               	return		;funcret
  9621  0189FE                     __end_of_InitSerialCommunication:
  9622                           	opt stack 0
  9623                           tosu	equ	0xFFF
  9624                           tosh	equ	0xFFE
  9625                           tosl	equ	0xFFD
  9626                           pclath	equ	0xFFA
  9627                           tblptru	equ	0xFF8
  9628                           tblptrh	equ	0xFF7
  9629                           tblptrl	equ	0xFF6
  9630                           tablat	equ	0xFF5
  9631                           intcon	equ	0xFF2
  9632                           postinc0	equ	0xFEE
  9633                           wreg	equ	0xFE8
  9634                           postdec1	equ	0xFE5
  9635                           fsr1h	equ	0xFE2
  9636                           fsr1l	equ	0xFE1
  9637                           indf2	equ	0xFDF
  9638                           postinc2	equ	0xFDE
  9639                           postdec2	equ	0xFDD
  9640                           plusw2	equ	0xFDB
  9641                           fsr2h	equ	0xFDA
  9642                           fsr2l	equ	0xFD9
  9643                           status	equ	0xFD8
  9644                           
  9645 ;; *************** function _InitADC *****************
  9646 ;; Defined at:
  9647 ;;		line 178 in file "dans.c"
  9648 ;; Parameters:    Size  Location     Type
  9649 ;;		None
  9650 ;; Auto vars:     Size  Location     Type
  9651 ;;		None
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  1    wreg      void 
  9654 ;; Registers used:
  9655 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;Total ram usage:        1 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    7
  9668 ;; This function calls:
  9669 ;;		Nothing
  9670 ;; This function is called by:
  9671 ;;		_main
  9672 ;; This function uses a non-reentrant model
  9673 ;;
  9674                           
  9675                           	psect	text34
  9676  0180B4                     __ptext34:
  9677                           	opt stack 0
  9678  0180B4                     _InitADC:
  9679                           	opt stack 23
  9680                           
  9681                           ;dans.c: 180: ADCON1 = 0b10101101;
  9682                           
  9683                           ;incstack = 0
  9684  0180B4  0EAD               	movlw	173
  9685  0180B6  6EC1               	movwf	4033,c	;volatile
  9686                           
  9687                           ;dans.c: 181: for (thisReading = 0; thisReading < numReadings; thisReading++) {
  9688  0180B8  0E00               	movlw	0
  9689  0180BA  0101               	movlb	1	; () banked
  9690  0180BC  6F43               	movwf	(_thisReading+1)& (0+255),b
  9691  0180BE  0E00               	movlw	0
  9692  0180C0  6F42               	movwf	_thisReading& (0+255),b
  9693  0180C2  D010               	goto	l2345
  9694  0180C4                     
  9695                           ;dans.c: 182: readings[thisReading] = 0;
  9696                           
  9697                           ; BSR set to: 1
  9698  0180C4  90D8               	bcf	status,0,c
  9699  0180C6  0101               	movlb	1	; () banked
  9700  0180C8  3542               	rlcf	_thisReading& (0+255),w,b
  9701  0180CA  6ED9               	movwf	fsr2l,c
  9702  0180CC  3543               	rlcf	(_thisReading+1)& (0+255),w,b
  9703  0180CE  6EDA               	movwf	fsr2h,c
  9704  0180D0  0E46               	movlw	low _readings
  9705  0180D2  26D9               	addwf	fsr2l,f,c
  9706  0180D4  0E02               	movlw	high _readings
  9707  0180D6  22DA               	addwfc	fsr2h,f,c
  9708  0180D8  0E00               	movlw	0
  9709  0180DA  6EDE               	movwf	postinc2,c
  9710  0180DC  0E00               	movlw	0
  9711  0180DE  6EDD               	movwf	postdec2,c
  9712                           
  9713                           ; BSR set to: 1
  9714  0180E0  4B42               	infsnz	_thisReading& (0+255),f,b
  9715  0180E2  2B43               	incf	(_thisReading+1)& (0+255),f,b
  9716  0180E4                     l2345:
  9717                           
  9718                           ; BSR set to: 1
  9719                           
  9720                           ; BSR set to: 1
  9721  0180E4  51DE               	movf	_numReadings& (0+255),w,b
  9722  0180E6  5D42               	subwf	_thisReading& (0+255),w,b
  9723  0180E8  5143               	movf	(_thisReading+1)& (0+255),w,b
  9724  0180EA  0A80               	xorlw	128
  9725  0180EC  0100               	movlb	0	; () banked
  9726  0180EE  6F60               	movwf	??_InitADC& (0+255),b
  9727  0180F0  0101               	movlb	1	; () banked
  9728  0180F2  51DF               	movf	(_numReadings+1)& (0+255),w,b
  9729  0180F4  0A80               	xorlw	128
  9730  0180F6  0100               	movlb	0	; () banked
  9731  0180F8  5960               	subwfb	??_InitADC& (0+255),w,b
  9732  0180FA  B0D8               	btfsc	status,0,c
  9733  0180FC  0012               	return	
  9734  0180FE  D7E2               	goto	l2346
  9735  018100                     __end_of_InitADC:
  9736                           	opt stack 0
  9737                           tosu	equ	0xFFF
  9738                           tosh	equ	0xFFE
  9739                           tosl	equ	0xFFD
  9740                           pclath	equ	0xFFA
  9741                           tblptru	equ	0xFF8
  9742                           tblptrh	equ	0xFF7
  9743                           tblptrl	equ	0xFF6
  9744                           tablat	equ	0xFF5
  9745                           intcon	equ	0xFF2
  9746                           postinc0	equ	0xFEE
  9747                           wreg	equ	0xFE8
  9748                           postdec1	equ	0xFE5
  9749                           fsr1h	equ	0xFE2
  9750                           fsr1l	equ	0xFE1
  9751                           indf2	equ	0xFDF
  9752                           postinc2	equ	0xFDE
  9753                           postdec2	equ	0xFDD
  9754                           plusw2	equ	0xFDB
  9755                           fsr2h	equ	0xFDA
  9756                           fsr2l	equ	0xFD9
  9757                           status	equ	0xFD8
  9758                           
  9759 ;; *************** function _ISR_Enable *****************
  9760 ;; Defined at:
  9761 ;;		line 27 in file "Library/ISR.c"
  9762 ;; Parameters:    Size  Location     Type
  9763 ;;		None
  9764 ;; Auto vars:     Size  Location     Type
  9765 ;;		None
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  1    wreg      void 
  9768 ;; Registers used:
  9769 ;;		None
  9770 ;; Tracked objects:
  9771 ;;		On entry : 0/0
  9772 ;;		On exit  : 0/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9779 ;;Total ram usage:        0 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    7
  9782 ;; This function calls:
  9783 ;;		Nothing
  9784 ;; This function is called by:
  9785 ;;		_main
  9786 ;; This function uses a non-reentrant model
  9787 ;;
  9788                           
  9789                           	psect	text35
  9790  018C9C                     __ptext35:
  9791                           	opt stack 0
  9792  018C9C                     _ISR_Enable:
  9793                           	opt stack 23
  9794                           
  9795                           ;ISR.c: 29: INTCONbits.PEIE = 1;
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;incstack = 0
  9799  018C9C  8CF2               	bsf	intcon,6,c	;volatile
  9800                           
  9801                           ;ISR.c: 30: INTCONbits.GIE = 1;
  9802  018C9E  8EF2               	bsf	intcon,7,c	;volatile
  9803                           
  9804                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
  9805  018CA0  88F2               	bsf	intcon,4,c	;volatile
  9806                           
  9807                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
  9808  018CA2  92F2               	bcf	intcon,1,c	;volatile
  9809  018CA4  0012               	return		;funcret
  9810  018CA6                     __end_of_ISR_Enable:
  9811                           	opt stack 0
  9812                           tosu	equ	0xFFF
  9813                           tosh	equ	0xFFE
  9814                           tosl	equ	0xFFD
  9815                           pclath	equ	0xFFA
  9816                           tblptru	equ	0xFF8
  9817                           tblptrh	equ	0xFF7
  9818                           tblptrl	equ	0xFF6
  9819                           tablat	equ	0xFF5
  9820                           intcon	equ	0xFF2
  9821                           postinc0	equ	0xFEE
  9822                           wreg	equ	0xFE8
  9823                           postdec1	equ	0xFE5
  9824                           fsr1h	equ	0xFE2
  9825                           fsr1l	equ	0xFE1
  9826                           indf2	equ	0xFDF
  9827                           postinc2	equ	0xFDE
  9828                           postdec2	equ	0xFDD
  9829                           plusw2	equ	0xFDB
  9830                           fsr2h	equ	0xFDA
  9831                           fsr2l	equ	0xFD9
  9832                           status	equ	0xFD8
  9833                           
  9834 ;; *************** function _HMI_Poll *****************
  9835 ;; Defined at:
  9836 ;;		line 252 in file "HMI.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;		None
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;		None
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  1    wreg      void 
  9843 ;; Registers used:
  9844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;Total ram usage:        0 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:   15
  9857 ;; This function calls:
  9858 ;;		_Button_Poll
  9859 ;; This function is called by:
  9860 ;;		_main
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text36
  9865  017BF8                     __ptext36:
  9866                           	opt stack 0
  9867  017BF8                     _HMI_Poll:
  9868                           	opt stack 15
  9869                           
  9870                           ;HMI.c: 254: TRISE = 0xFC;
  9871                           
  9872                           ;incstack = 0
  9873  017BF8  0EFC               	movlw	252
  9874  017BFA  6E96               	movwf	3990,c	;volatile
  9875                           
  9876                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  9877  017BFC  0E8A               	movlw	low (_HMIBoard+48)
  9878  017BFE  0100               	movlb	0	; () banked
  9879  017C00  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9880  017C02  0E02               	movlw	high (_HMIBoard+48)
  9881  017C04  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9882  017C06  0E01               	movlw	1
  9883  017C08  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9884  017C0A  ECB6  F0B0         	call	_Button_Poll	;wreg free
  9885                           
  9886                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  9887  017C0E  0E6C               	movlw	low (_HMIBoard+18)
  9888  017C10  0100               	movlb	0	; () banked
  9889  017C12  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9890  017C14  0E02               	movlw	high (_HMIBoard+18)
  9891  017C16  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9892  017C18  0E01               	movlw	1
  9893  017C1A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9894  017C1C  ECB6  F0B0         	call	_Button_Poll	;wreg free
  9895                           
  9896                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  9897  017C20  0E62               	movlw	low (_HMIBoard+8)
  9898  017C22  0100               	movlb	0	; () banked
  9899  017C24  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9900  017C26  0E02               	movlw	high (_HMIBoard+8)
  9901  017C28  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9902  017C2A  0E01               	movlw	1
  9903  017C2C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9904  017C2E  ECB6  F0B0         	call	_Button_Poll	;wreg free
  9905                           
  9906                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  9907  017C32  0E76               	movlw	low (_HMIBoard+28)
  9908  017C34  0100               	movlb	0	; () banked
  9909  017C36  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9910  017C38  0E02               	movlw	high (_HMIBoard+28)
  9911  017C3A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9912  017C3C  0E01               	movlw	1
  9913  017C3E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9914  017C40  ECB6  F0B0         	call	_Button_Poll	;wreg free
  9915                           
  9916                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  9917  017C44  0E80               	movlw	low (_HMIBoard+38)
  9918  017C46  0100               	movlb	0	; () banked
  9919  017C48  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  9920  017C4A  0E02               	movlw	high (_HMIBoard+38)
  9921  017C4C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  9922  017C4E  0E01               	movlw	1
  9923  017C50  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  9924  017C52  ECB6  F0B0         	call	_Button_Poll	;wreg free
  9925  017C56  0012               	return		;funcret
  9926  017C58                     __end_of_HMI_Poll:
  9927                           	opt stack 0
  9928                           tosu	equ	0xFFF
  9929                           tosh	equ	0xFFE
  9930                           tosl	equ	0xFFD
  9931                           pclath	equ	0xFFA
  9932                           tblptru	equ	0xFF8
  9933                           tblptrh	equ	0xFF7
  9934                           tblptrl	equ	0xFF6
  9935                           tablat	equ	0xFF5
  9936                           intcon	equ	0xFF2
  9937                           postinc0	equ	0xFEE
  9938                           wreg	equ	0xFE8
  9939                           postdec1	equ	0xFE5
  9940                           fsr1h	equ	0xFE2
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           postdec2	equ	0xFDD
  9945                           plusw2	equ	0xFDB
  9946                           fsr2h	equ	0xFDA
  9947                           fsr2l	equ	0xFD9
  9948                           status	equ	0xFD8
  9949                           
  9950 ;; *************** function _Button_Poll *****************
  9951 ;; Defined at:
  9952 ;;		line 57 in file "Library/Button.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  9955 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  9956 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;  Pin             1   35[BANK0 ] unsigned char 
  9959 ;; Return value:  Size  Location     Type
  9960 ;;                  1    wreg      unsigned char 
  9961 ;; Registers used:
  9962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  9963 ;; Tracked objects:
  9964 ;;		On entry : 0/0
  9965 ;;		On exit  : 0/0
  9966 ;;		Unchanged: 0/0
  9967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9968 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;Total ram usage:        9 bytes
  9973 ;; Hardware stack levels used:    1
  9974 ;; Hardware stack levels required when called:   14
  9975 ;; This function calls:
  9976 ;;		_Event_DIPSwitch
  9977 ;;		_Event_NULL
  9978 ;;		_Event_TestButton
  9979 ;;		_HMI_DIPSwitch
  9980 ;;		_HMI_DownSwitch
  9981 ;;		_HMI_LeftSwitch
  9982 ;;		_HMI_RightSwitch
  9983 ;;		_HMI_UpSwitch
  9984 ;;		_MXK_DIPSwitch
  9985 ;;		_MXK_TestButton
  9986 ;; This function is called by:
  9987 ;;		_HMI_Poll
  9988 ;;		_MXK_Poll
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text37
  9993  01616C                     __ptext37:
  9994                           	opt stack 0
  9995  01616C                     _Button_Poll:
  9996                           	opt stack 15
  9997                           
  9998                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  9999                           
 10000                           ;incstack = 0
 10001  01616C  0100               	movlb	0	; () banked
 10002  01616E  EE20 F007          	lfsr	2,7
 10003  016172  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10004  016174  26D9               	addwf	fsr2l,f,c
 10005  016176  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10006  016178  22DA               	addwfc	fsr2h,f,c
 10007  01617A  D801               	call	u13628
 10008  01617C  D00A               	goto	u13629
 10009  01617E                     u13628:
 10010  01617E  0005               	push	
 10011  016180  6EFA               	movwf	pclath,c
 10012  016182  50DE               	movf	postinc2,w,c
 10013  016184  6EFD               	movwf	tosl,c
 10014  016186  50DE               	movf	postinc2,w,c
 10015  016188  6EFE               	movwf	tosh,c
 10016  01618A  50DE               	movf	postinc2,w,c
 10017  01618C  6EFF               	movwf	tosu,c
 10018  01618E  50FA               	movf	pclath,w,c
 10019  016190  0012               	return		;indir
 10020  016192                     u13629:
 10021  016192  0100               	movlb	0	; () banked
 10022  016194  6F83               	movwf	Button_Poll@Pin& (0+255),b
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;Button.c: 61: if (pButton->mState == Pin)
 10026  016196  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10027  01619A  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10028  01619E  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10029  0161A0  18DE               	xorwf	postinc2,w,c
 10030  0161A2  A4D8               	btfss	status,2,c
 10031  0161A4  D01C               	goto	l11
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;Button.c: 62: {
 10035                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10036  0161A6  EE20 F001          	lfsr	2,1
 10037  0161AA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10038  0161AC  26D9               	addwf	fsr2l,f,c
 10039  0161AE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10040  0161B0  22DA               	addwfc	fsr2h,f,c
 10041  0161B2  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10042  0161B4  5CDE               	subwf	postinc2,w,c
 10043  0161B6  B0D8               	btfsc	status,0,c
 10044  0161B8  D009               	goto	l12
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;Button.c: 66: pButton->mCount = 0;
 10048  0161BA  EE20 F001          	lfsr	2,1
 10049  0161BE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10050  0161C0  26D9               	addwf	fsr2l,f,c
 10051  0161C2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10052  0161C4  22DA               	addwfc	fsr2h,f,c
 10053  0161C6  0E00               	movlw	0
 10054  0161C8  6EDF               	movwf	indf2,c
 10055  0161CA  0012               	return	
 10056  0161CC                     l12:
 10057                           
 10058                           ; BSR set to: 0
 10059                           ;Button.c: 67: else
 10060                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10061                           
 10062                           ; BSR set to: 0
 10063  0161CC  EE20 F001          	lfsr	2,1
 10064  0161D0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10065  0161D2  26D9               	addwf	fsr2l,f,c
 10066  0161D4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10067  0161D6  22DA               	addwfc	fsr2h,f,c
 10068  0161D8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10069  0161DA  5EDF               	subwf	indf2,f,c
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;Button.c: 69: }
 10073  0161DC  0012               	return	
 10074  0161DE                     l11:
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10078                           
 10079                           ; BSR set to: 0
 10080  0161DE  EE20 F001          	lfsr	2,1
 10081  0161E2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10082  0161E4  26D9               	addwf	fsr2l,f,c
 10083  0161E6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10084  0161E8  22DA               	addwfc	fsr2h,f,c
 10085  0161EA  50DF               	movf	indf2,w,c
 10086  0161EC  6F7E               	movwf	??_Button_Poll& (0+255),b
 10087  0161EE  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 10088  0161F0  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10089  0161F2  277E               	addwf	??_Button_Poll& (0+255),f,b
 10090  0161F4  0E00               	movlw	0
 10091  0161F6  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10092  0161F8  EE20 F001          	lfsr	2,1
 10093  0161FC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10094  0161FE  26D9               	addwf	fsr2l,f,c
 10095  016200  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10096  016202  22DA               	addwfc	fsr2h,f,c
 10097  016204  50DF               	movf	indf2,w,c
 10098  016206  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10099  016208  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10100  01620A  517E               	movf	??_Button_Poll& (0+255),w,b
 10101  01620C  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10102  01620E  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 10103  016210  0A80               	xorlw	128
 10104  016212  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 10105  016214  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 10106  016216  0A80               	xorlw	128
 10107  016218  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10108  01621A  B0D8               	btfsc	status,0,c
 10109  01621C  0012               	return	
 10110                           
 10111                           ; BSR set to: 0
 10112                           ;Button.c: 73: {
 10113                           ;Button.c: 75: pButton->mCount += pIncrement;
 10114  01621E  EE20 F001          	lfsr	2,1
 10115  016222  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10116  016224  26D9               	addwf	fsr2l,f,c
 10117  016226  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10118  016228  22DA               	addwfc	fsr2h,f,c
 10119  01622A  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10120  01622C  26DF               	addwf	indf2,f,c
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10124  01622E  EE20 F002          	lfsr	2,2
 10125  016232  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10126  016234  26D9               	addwf	fsr2l,f,c
 10127  016236  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10128  016238  22DA               	addwfc	fsr2h,f,c
 10129  01623A  EE10 F001          	lfsr	1,1
 10130  01623E  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10131  016240  26E1               	addwf	fsr1l,f,c
 10132  016242  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10133  016244  22E2               	addwfc	fsr1h,f,c
 10134  016246  50E7               	movf	indf1,w,c
 10135  016248  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10136  01624A  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10137  01624C  50DE               	movf	postinc2,w,c
 10138  01624E  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10139  016250  50DE               	movf	postinc2,w,c
 10140  016252  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10141  016254  A0D8               	btfss	status,0,c
 10142  016256  0012               	return	
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;Button.c: 77: {
 10146                           ;Button.c: 79: pButton->mState = Pin;
 10147  016258  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10148  01625C  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10149  016260  C083  FFDF         	movff	Button_Poll@Pin,indf2
 10150                           
 10151                           ; BSR set to: 0
 10152                           ;Button.c: 80: pButton->mCount = 0;
 10153  016264  EE20 F001          	lfsr	2,1
 10154  016268  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10155  01626A  26D9               	addwf	fsr2l,f,c
 10156  01626C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10157  01626E  22DA               	addwfc	fsr2h,f,c
 10158  016270  0E00               	movlw	0
 10159  016272  6EDF               	movwf	indf2,c
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;Button.c: 83: pButton->mFunction(Pin);
 10163  016274  EE20 F004          	lfsr	2,4
 10164  016278  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10165  01627A  26D9               	addwf	fsr2l,f,c
 10166  01627C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10167  01627E  22DA               	addwfc	fsr2h,f,c
 10168  016280  D801               	call	u13678
 10169  016282  0012               	return	
 10170  016284                     u13678:
 10171  016284  0005               	push	
 10172  016286  6EFA               	movwf	pclath,c
 10173  016288  50DE               	movf	postinc2,w,c
 10174  01628A  6EFD               	movwf	tosl,c
 10175  01628C  50DE               	movf	postinc2,w,c
 10176  01628E  6EFE               	movwf	tosh,c
 10177  016290  50DE               	movf	postinc2,w,c
 10178  016292  6EFF               	movwf	tosu,c
 10179  016294  50FA               	movf	pclath,w,c
 10180  016296  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10181  016298  0012               	return		;indir
 10182  01629A                     __end_of_Button_Poll:
 10183                           	opt stack 0
 10184                           tosu	equ	0xFFF
 10185                           tosh	equ	0xFFE
 10186                           tosl	equ	0xFFD
 10187                           pclath	equ	0xFFA
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           intcon	equ	0xFF2
 10193                           postinc0	equ	0xFEE
 10194                           wreg	equ	0xFE8
 10195                           indf1	equ	0xFE7
 10196                           postdec1	equ	0xFE5
 10197                           fsr1h	equ	0xFE2
 10198                           fsr1l	equ	0xFE1
 10199                           indf2	equ	0xFDF
 10200                           postinc2	equ	0xFDE
 10201                           postdec2	equ	0xFDD
 10202                           plusw2	equ	0xFDB
 10203                           fsr2h	equ	0xFDA
 10204                           fsr2l	equ	0xFD9
 10205                           status	equ	0xFD8
 10206                           
 10207 ;; *************** function _MXK_DIPSwitch *****************
 10208 ;; Defined at:
 10209 ;;		line 24 in file "Library/MXK.c"
 10210 ;; Parameters:    Size  Location     Type
 10211 ;;		None
 10212 ;; Auto vars:     Size  Location     Type
 10213 ;;		None
 10214 ;; Return value:  Size  Location     Type
 10215 ;;                  1    wreg      unsigned char 
 10216 ;; Registers used:
 10217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10218 ;; Tracked objects:
 10219 ;;		On entry : 0/0
 10220 ;;		On exit  : 0/0
 10221 ;;		Unchanged: 0/0
 10222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;Total ram usage:        0 bytes
 10228 ;; Hardware stack levels used:    1
 10229 ;; Hardware stack levels required when called:    8
 10230 ;; This function calls:
 10231 ;;		_Port_GetQuad
 10232 ;; This function is called by:
 10233 ;;		_FunctInitButton
 10234 ;;		_Button_Poll
 10235 ;;		_main
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           	psect	text38
 10240  018B28                     __ptext38:
 10241                           	opt stack 0
 10242  018B28                     _MXK_DIPSwitch:
 10243                           	opt stack 22
 10244                           
 10245                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10246                           
 10247                           ;incstack = 0
 10248  018B28  0E76               	movlw	low _PortD
 10249  018B2A  0100               	movlb	0	; () banked
 10250  018B2C  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10251  018B2E  0E01               	movlw	high _PortD
 10252  018B30  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10253  018B32  0E00               	movlw	0
 10254  018B34  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10255  018B36  EC6E  F0C2         	call	_Port_GetQuad
 10256  018B3A  0012               	return	
 10257  018B3C                     __end_of_MXK_DIPSwitch:
 10258                           	opt stack 0
 10259                           tosu	equ	0xFFF
 10260                           tosh	equ	0xFFE
 10261                           tosl	equ	0xFFD
 10262                           pclath	equ	0xFFA
 10263                           tblptru	equ	0xFF8
 10264                           tblptrh	equ	0xFF7
 10265                           tblptrl	equ	0xFF6
 10266                           tablat	equ	0xFF5
 10267                           intcon	equ	0xFF2
 10268                           postinc0	equ	0xFEE
 10269                           wreg	equ	0xFE8
 10270                           indf1	equ	0xFE7
 10271                           postdec1	equ	0xFE5
 10272                           fsr1h	equ	0xFE2
 10273                           fsr1l	equ	0xFE1
 10274                           indf2	equ	0xFDF
 10275                           postinc2	equ	0xFDE
 10276                           postdec2	equ	0xFDD
 10277                           plusw2	equ	0xFDB
 10278                           fsr2h	equ	0xFDA
 10279                           fsr2l	equ	0xFD9
 10280                           status	equ	0xFD8
 10281                           
 10282 ;; *************** function _HMI_DIPSwitch *****************
 10283 ;; Defined at:
 10284 ;;		line 47 in file "HMI.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;		None
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;		None
 10289 ;; Return value:  Size  Location     Type
 10290 ;;                  1    wreg      unsigned char 
 10291 ;; Registers used:
 10292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 0/0
 10295 ;;		On exit  : 0/0
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10302 ;;Total ram usage:        0 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    8
 10305 ;; This function calls:
 10306 ;;		_Port_GetQuad
 10307 ;; This function is called by:
 10308 ;;		_HMI_Init
 10309 ;;		_Button_Poll
 10310 ;;		_main
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           	psect	text39
 10315  018B3C                     __ptext39:
 10316                           	opt stack 0
 10317  018B3C                     _HMI_DIPSwitch:
 10318                           	opt stack 20
 10319                           
 10320                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 10321                           
 10322                           ;incstack = 0
 10323  018B3C  0E6C               	movlw	low _PortE
 10324  018B3E  0100               	movlb	0	; () banked
 10325  018B40  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10326  018B42  0E01               	movlw	high _PortE
 10327  018B44  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10328  018B46  0E00               	movlw	0
 10329  018B48  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10330  018B4A  EC6E  F0C2         	call	_Port_GetQuad	;wreg free
 10331  018B4E  0012               	return	
 10332  018B50                     __end_of_HMI_DIPSwitch:
 10333                           	opt stack 0
 10334                           tosu	equ	0xFFF
 10335                           tosh	equ	0xFFE
 10336                           tosl	equ	0xFFD
 10337                           pclath	equ	0xFFA
 10338                           tblptru	equ	0xFF8
 10339                           tblptrh	equ	0xFF7
 10340                           tblptrl	equ	0xFF6
 10341                           tablat	equ	0xFF5
 10342                           intcon	equ	0xFF2
 10343                           postinc0	equ	0xFEE
 10344                           wreg	equ	0xFE8
 10345                           indf1	equ	0xFE7
 10346                           postdec1	equ	0xFE5
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           indf2	equ	0xFDF
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           plusw2	equ	0xFDB
 10353                           fsr2h	equ	0xFDA
 10354                           fsr2l	equ	0xFD9
 10355                           status	equ	0xFD8
 10356                           
 10357 ;; *************** function _HMI_DownSwitch *****************
 10358 ;; Defined at:
 10359 ;;		line 42 in file "HMI.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;		None
 10362 ;; Auto vars:     Size  Location     Type
 10363 ;;		None
 10364 ;; Return value:  Size  Location     Type
 10365 ;;                  1    wreg      unsigned char 
 10366 ;; Registers used:
 10367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10368 ;; Tracked objects:
 10369 ;;		On entry : 0/0
 10370 ;;		On exit  : 0/0
 10371 ;;		Unchanged: 0/0
 10372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;Total ram usage:        0 bytes
 10378 ;; Hardware stack levels used:    1
 10379 ;; Hardware stack levels required when called:    8
 10380 ;; This function calls:
 10381 ;;		_Port_GetPin
 10382 ;; This function is called by:
 10383 ;;		_HMI_Init
 10384 ;;		_Button_Poll
 10385 ;;		_main
 10386 ;; This function uses a non-reentrant model
 10387 ;;
 10388                           
 10389                           	psect	text40
 10390  018B50                     __ptext40:
 10391                           	opt stack 0
 10392  018B50                     _HMI_DownSwitch:
 10393                           	opt stack 20
 10394                           
 10395                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 10396                           
 10397                           ;incstack = 0
 10398  018B50  0E6C               	movlw	low _PortE
 10399  018B52  0100               	movlb	0	; () banked
 10400  018B54  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10401  018B56  0E01               	movlw	high _PortE
 10402  018B58  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10403  018B5A  0E06               	movlw	6
 10404  018B5C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10405  018B5E  ECC8  F0C2         	call	_Port_GetPin	;wreg free
 10406  018B62  0012               	return	
 10407  018B64                     __end_of_HMI_DownSwitch:
 10408                           	opt stack 0
 10409                           tosu	equ	0xFFF
 10410                           tosh	equ	0xFFE
 10411                           tosl	equ	0xFFD
 10412                           pclath	equ	0xFFA
 10413                           tblptru	equ	0xFF8
 10414                           tblptrh	equ	0xFF7
 10415                           tblptrl	equ	0xFF6
 10416                           tablat	equ	0xFF5
 10417                           intcon	equ	0xFF2
 10418                           postinc0	equ	0xFEE
 10419                           wreg	equ	0xFE8
 10420                           indf1	equ	0xFE7
 10421                           postdec1	equ	0xFE5
 10422                           fsr1h	equ	0xFE2
 10423                           fsr1l	equ	0xFE1
 10424                           indf2	equ	0xFDF
 10425                           postinc2	equ	0xFDE
 10426                           postdec2	equ	0xFDD
 10427                           plusw2	equ	0xFDB
 10428                           fsr2h	equ	0xFDA
 10429                           fsr2l	equ	0xFD9
 10430                           status	equ	0xFD8
 10431                           
 10432 ;; *************** function _HMI_UpSwitch *****************
 10433 ;; Defined at:
 10434 ;;		line 37 in file "HMI.c"
 10435 ;; Parameters:    Size  Location     Type
 10436 ;;		None
 10437 ;; Auto vars:     Size  Location     Type
 10438 ;;		None
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  1    wreg      unsigned char 
 10441 ;; Registers used:
 10442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10452 ;;Total ram usage:        0 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    8
 10455 ;; This function calls:
 10456 ;;		_Port_GetPin
 10457 ;; This function is called by:
 10458 ;;		_HMI_Init
 10459 ;;		_Button_Poll
 10460 ;;		_main
 10461 ;; This function uses a non-reentrant model
 10462 ;;
 10463                           
 10464                           	psect	text41
 10465  018B64                     __ptext41:
 10466                           	opt stack 0
 10467  018B64                     _HMI_UpSwitch:
 10468                           	opt stack 22
 10469                           
 10470                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 10471                           
 10472                           ;incstack = 0
 10473  018B64  0E6C               	movlw	low _PortE
 10474  018B66  0100               	movlb	0	; () banked
 10475  018B68  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10476  018B6A  0E01               	movlw	high _PortE
 10477  018B6C  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10478  018B6E  0E07               	movlw	7
 10479  018B70  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10480  018B72  ECC8  F0C2         	call	_Port_GetPin	;wreg free
 10481  018B76  0012               	return	
 10482  018B78                     __end_of_HMI_UpSwitch:
 10483                           	opt stack 0
 10484                           tosu	equ	0xFFF
 10485                           tosh	equ	0xFFE
 10486                           tosl	equ	0xFFD
 10487                           pclath	equ	0xFFA
 10488                           tblptru	equ	0xFF8
 10489                           tblptrh	equ	0xFF7
 10490                           tblptrl	equ	0xFF6
 10491                           tablat	equ	0xFF5
 10492                           intcon	equ	0xFF2
 10493                           postinc0	equ	0xFEE
 10494                           wreg	equ	0xFE8
 10495                           indf1	equ	0xFE7
 10496                           postdec1	equ	0xFE5
 10497                           fsr1h	equ	0xFE2
 10498                           fsr1l	equ	0xFE1
 10499                           indf2	equ	0xFDF
 10500                           postinc2	equ	0xFDE
 10501                           postdec2	equ	0xFDD
 10502                           plusw2	equ	0xFDB
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507 ;; *************** function _HMI_RightSwitch *****************
 10508 ;; Defined at:
 10509 ;;		line 32 in file "HMI.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;		None
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;		None
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      unsigned char 
 10516 ;; Registers used:
 10517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;Total ram usage:        0 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    8
 10530 ;; This function calls:
 10531 ;;		_Port_GetPin
 10532 ;; This function is called by:
 10533 ;;		_HMI_Init
 10534 ;;		_Button_Poll
 10535 ;;		_main
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           	psect	text42
 10540  018B78                     __ptext42:
 10541                           	opt stack 0
 10542  018B78                     _HMI_RightSwitch:
 10543                           	opt stack 22
 10544                           
 10545                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 10546                           
 10547                           ;incstack = 0
 10548  018B78  0E6C               	movlw	low _PortE
 10549  018B7A  0100               	movlb	0	; () banked
 10550  018B7C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10551  018B7E  0E01               	movlw	high _PortE
 10552  018B80  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10553  018B82  0E04               	movlw	4
 10554  018B84  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10555  018B86  ECC8  F0C2         	call	_Port_GetPin	;wreg free
 10556  018B8A  0012               	return	
 10557  018B8C                     __end_of_HMI_RightSwitch:
 10558                           	opt stack 0
 10559                           tosu	equ	0xFFF
 10560                           tosh	equ	0xFFE
 10561                           tosl	equ	0xFFD
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           intcon	equ	0xFF2
 10568                           postinc0	equ	0xFEE
 10569                           wreg	equ	0xFE8
 10570                           indf1	equ	0xFE7
 10571                           postdec1	equ	0xFE5
 10572                           fsr1h	equ	0xFE2
 10573                           fsr1l	equ	0xFE1
 10574                           indf2	equ	0xFDF
 10575                           postinc2	equ	0xFDE
 10576                           postdec2	equ	0xFDD
 10577                           plusw2	equ	0xFDB
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function _HMI_LeftSwitch *****************
 10583 ;; Defined at:
 10584 ;;		line 27 in file "HMI.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;		None
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;		None
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  1    wreg      unsigned char 
 10591 ;; Registers used:
 10592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;Total ram usage:        0 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    8
 10605 ;; This function calls:
 10606 ;;		_Port_GetPin
 10607 ;; This function is called by:
 10608 ;;		_HMI_Init
 10609 ;;		_Button_Poll
 10610 ;;		_main
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           	psect	text43
 10615  018B8C                     __ptext43:
 10616                           	opt stack 0
 10617  018B8C                     _HMI_LeftSwitch:
 10618                           	opt stack 20
 10619                           
 10620                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 10621                           
 10622                           ;incstack = 0
 10623  018B8C  0E6C               	movlw	low _PortE
 10624  018B8E  0100               	movlb	0	; () banked
 10625  018B90  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10626  018B92  0E01               	movlw	high _PortE
 10627  018B94  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10628  018B96  0E05               	movlw	5
 10629  018B98  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10630  018B9A  ECC8  F0C2         	call	_Port_GetPin	;wreg free
 10631  018B9E  0012               	return	
 10632  018BA0                     __end_of_HMI_LeftSwitch:
 10633                           	opt stack 0
 10634                           tosu	equ	0xFFF
 10635                           tosh	equ	0xFFE
 10636                           tosl	equ	0xFFD
 10637                           pclath	equ	0xFFA
 10638                           tblptru	equ	0xFF8
 10639                           tblptrh	equ	0xFF7
 10640                           tblptrl	equ	0xFF6
 10641                           tablat	equ	0xFF5
 10642                           intcon	equ	0xFF2
 10643                           postinc0	equ	0xFEE
 10644                           wreg	equ	0xFE8
 10645                           indf1	equ	0xFE7
 10646                           postdec1	equ	0xFE5
 10647                           fsr1h	equ	0xFE2
 10648                           fsr1l	equ	0xFE1
 10649                           indf2	equ	0xFDF
 10650                           postinc2	equ	0xFDE
 10651                           postdec2	equ	0xFDD
 10652                           plusw2	equ	0xFDB
 10653                           fsr2h	equ	0xFDA
 10654                           fsr2l	equ	0xFD9
 10655                           status	equ	0xFD8
 10656                           
 10657 ;; *************** function _MXK_TestButton *****************
 10658 ;; Defined at:
 10659 ;;		line 14 in file "Library/MXK.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;		None
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;		None
 10664 ;; Return value:  Size  Location     Type
 10665 ;;                  1    wreg      unsigned char 
 10666 ;; Registers used:
 10667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;Total ram usage:        0 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; Hardware stack levels required when called:    8
 10680 ;; This function calls:
 10681 ;;		_Port_GetPin
 10682 ;; This function is called by:
 10683 ;;		_FunctInitButton
 10684 ;;		_Button_Poll
 10685 ;;		_main
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text44
 10690  018BA0                     __ptext44:
 10691                           	opt stack 0
 10692  018BA0                     _MXK_TestButton:
 10693                           	opt stack 22
 10694                           
 10695                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 10696                           
 10697                           ;incstack = 0
 10698  018BA0  0E80               	movlw	low _PortB
 10699  018BA2  0100               	movlb	0	; () banked
 10700  018BA4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10701  018BA6  0E01               	movlw	high _PortB
 10702  018BA8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10703  018BAA  0E04               	movlw	4
 10704  018BAC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10705  018BAE  ECC8  F0C2         	call	_Port_GetPin	;wreg free
 10706  018BB2  0012               	return	
 10707  018BB4                     __end_of_MXK_TestButton:
 10708                           	opt stack 0
 10709                           tosu	equ	0xFFF
 10710                           tosh	equ	0xFFE
 10711                           tosl	equ	0xFFD
 10712                           pclath	equ	0xFFA
 10713                           tblptru	equ	0xFF8
 10714                           tblptrh	equ	0xFF7
 10715                           tblptrl	equ	0xFF6
 10716                           tablat	equ	0xFF5
 10717                           intcon	equ	0xFF2
 10718                           postinc0	equ	0xFEE
 10719                           wreg	equ	0xFE8
 10720                           indf1	equ	0xFE7
 10721                           postdec1	equ	0xFE5
 10722                           fsr1h	equ	0xFE2
 10723                           fsr1l	equ	0xFE1
 10724                           indf2	equ	0xFDF
 10725                           postinc2	equ	0xFDE
 10726                           postdec2	equ	0xFDD
 10727                           plusw2	equ	0xFDB
 10728                           fsr2h	equ	0xFDA
 10729                           fsr2l	equ	0xFD9
 10730                           status	equ	0xFD8
 10731                           
 10732 ;; *************** function _Port_GetQuad *****************
 10733 ;; Defined at:
 10734 ;;		line 498 in file "Library/Port.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 10737 ;;		 -> PortE(10), PortD(10), 
 10738 ;;  pQuad           1    2[BANK0 ] enum E6776
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;  Output          1    5[BANK0 ] unsigned char 
 10741 ;; Return value:  Size  Location     Type
 10742 ;;                  1    wreg      unsigned char 
 10743 ;; Registers used:
 10744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10750 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10753 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10754 ;;Total ram usage:        6 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    7
 10757 ;; This function calls:
 10758 ;;		Nothing
 10759 ;; This function is called by:
 10760 ;;		_HMI_DIPSwitch
 10761 ;;		_MXK_DIPSwitch
 10762 ;;		_Port_ToggleQuad
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           	psect	text45
 10767  0184DC                     __ptext45:
 10768                           	opt stack 0
 10769  0184DC                     _Port_GetQuad:
 10770                           	opt stack 22
 10771                           
 10772                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 10773                           
 10774                           ;incstack = 0
 10775  0184DC  0100               	movlb	0	; () banked
 10776  0184DE  EE20 F006          	lfsr	2,6
 10777  0184E2  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 10778  0184E4  26D9               	addwf	fsr2l,f,c
 10779  0184E6  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 10780  0184E8  22DA               	addwfc	fsr2h,f,c
 10781  0184EA  CFDE F063          	movff	postinc2,??_Port_GetQuad
 10782  0184EE  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 10783  0184F2  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 10784  0184F6  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 10785  0184FA  50DF               	movf	indf2,w,c
 10786  0184FC  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 10790  0184FE  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 10791  018500  0D04               	mullw	4
 10792  018502  28F3               	incf	prodl,w,c
 10793  018504  6F63               	movwf	??_Port_GetQuad& (0+255),b
 10794  018506  D002               	goto	u12890
 10795  018508                     u12895:
 10796  018508  90D8               	bcf	status,0,c
 10797  01850A  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 10798  01850C                     u12890:
 10799  01850C  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 10800  01850E  D7FC               	goto	u12895
 10801                           
 10802                           ;Port.c: 502: Output &= 0xF;
 10803  018510  0E0F               	movlw	15
 10804  018512  0100               	movlb	0	; () banked
 10805  018514  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;Port.c: 503: return Output;
 10809  018516  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 10810  018518  0012               	return	
 10811  01851A                     __end_of_Port_GetQuad:
 10812                           	opt stack 0
 10813                           tosu	equ	0xFFF
 10814                           tosh	equ	0xFFE
 10815                           tosl	equ	0xFFD
 10816                           pclath	equ	0xFFA
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodl	equ	0xFF3
 10822                           intcon	equ	0xFF2
 10823                           postinc0	equ	0xFEE
 10824                           wreg	equ	0xFE8
 10825                           indf1	equ	0xFE7
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           plusw2	equ	0xFDB
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function _Event_DIPSwitch *****************
 10838 ;; Defined at:
 10839 ;;		line 22 in file "Events.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  pState          1    wreg     unsigned char 
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;  pState          1   25[BANK0 ] unsigned char 
 10844 ;;  Bar             1   26[BANK0 ] unsigned char 
 10845 ;; Return value:  Size  Location     Type
 10846 ;;                  1    wreg      void 
 10847 ;; Registers used:
 10848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10849 ;; Tracked objects:
 10850 ;;		On entry : 0/0
 10851 ;;		On exit  : 0/0
 10852 ;;		Unchanged: 0/0
 10853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10858 ;;Total ram usage:        2 bytes
 10859 ;; Hardware stack levels used:    1
 10860 ;; Hardware stack levels required when called:   13
 10861 ;; This function calls:
 10862 ;;		_HMI_GetBar
 10863 ;;		_HMI_SetBar
 10864 ;;		_LED_Toggle
 10865 ;; This function is called by:
 10866 ;;		_FunctInitButton
 10867 ;;		_Button_Poll
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           	psect	text46
 10872  0188D0                     __ptext46:
 10873                           	opt stack 0
 10874  0188D0                     _Event_DIPSwitch:
 10875                           	opt stack 15
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;incstack = 0
 10879                           ;Event_DIPSwitch@pState stored from wreg
 10880  0188D0  0100               	movlb	0	; () banked
 10881  0188D2  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 10882                           
 10883                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 10884  0188D4  EC68  F0C6         	call	_HMI_GetBar	;wreg free
 10885  0188D8  0100               	movlb	0	; () banked
 10886  0188DA  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;Events.c: 25: Bar &= 0x0F;
 10890  0188DC  0E0F               	movlw	15
 10891  0188DE  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;Events.c: 26: pState <<= 4;
 10895  0188E0  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 10896  0188E2  0EF0               	movlw	240
 10897  0188E4  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 10901  0188E6  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 10902  0188E8  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 10903  0188EA  EC53  F0C6         	call	_HMI_SetBar
 10904                           
 10905                           ;Events.c: 32: LED_Toggle(eLED1);
 10906  0188EE  0E00               	movlw	0
 10907  0188F0  EC2E  F0C2         	call	_LED_Toggle
 10908  0188F4  0012               	return		;funcret
 10909  0188F6                     __end_of_Event_DIPSwitch:
 10910                           	opt stack 0
 10911                           tosu	equ	0xFFF
 10912                           tosh	equ	0xFFE
 10913                           tosl	equ	0xFFD
 10914                           pclath	equ	0xFFA
 10915                           tblptru	equ	0xFF8
 10916                           tblptrh	equ	0xFF7
 10917                           tblptrl	equ	0xFF6
 10918                           tablat	equ	0xFF5
 10919                           prodl	equ	0xFF3
 10920                           intcon	equ	0xFF2
 10921                           postinc0	equ	0xFEE
 10922                           wreg	equ	0xFE8
 10923                           indf1	equ	0xFE7
 10924                           postdec1	equ	0xFE5
 10925                           fsr1h	equ	0xFE2
 10926                           fsr1l	equ	0xFE1
 10927                           indf2	equ	0xFDF
 10928                           postinc2	equ	0xFDE
 10929                           postdec2	equ	0xFDD
 10930                           plusw2	equ	0xFDB
 10931                           fsr2h	equ	0xFDA
 10932                           fsr2l	equ	0xFD9
 10933                           status	equ	0xFD8
 10934                           
 10935 ;; *************** function _Event_NULL *****************
 10936 ;; Defined at:
 10937 ;;		line 9 in file "Events.c"
 10938 ;; Parameters:    Size  Location     Type
 10939 ;;  pState          1    wreg     unsigned char 
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;  pState          1    0[COMRAM] unsigned char 
 10942 ;; Return value:  Size  Location     Type
 10943 ;;                  1    wreg      void 
 10944 ;; Registers used:
 10945 ;;		wreg
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10955 ;;Total ram usage:        0 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; Hardware stack levels required when called:    7
 10958 ;; This function calls:
 10959 ;;		Nothing
 10960 ;; This function is called by:
 10961 ;;		_HMI_Init
 10962 ;;		_Button_Poll
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           	psect	text47
 10967  001404                     __ptext47:
 10968                           	opt stack 0
 10969  001404                     _Event_NULL:
 10970                           	opt stack 21
 10971                           
 10972                           ;incstack = 0
 10973  001404  0012               	return		;funcret
 10974  001406                     __end_of_Event_NULL:
 10975                           	opt stack 0
 10976                           tosu	equ	0xFFF
 10977                           tosh	equ	0xFFE
 10978                           tosl	equ	0xFFD
 10979                           pclath	equ	0xFFA
 10980                           tblptru	equ	0xFF8
 10981                           tblptrh	equ	0xFF7
 10982                           tblptrl	equ	0xFF6
 10983                           tablat	equ	0xFF5
 10984                           prodl	equ	0xFF3
 10985                           intcon	equ	0xFF2
 10986                           postinc0	equ	0xFEE
 10987                           wreg	equ	0xFE8
 10988                           indf1	equ	0xFE7
 10989                           postdec1	equ	0xFE5
 10990                           fsr1h	equ	0xFE2
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           postdec2	equ	0xFDD
 10995                           plusw2	equ	0xFDB
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function _Event_TestButton *****************
 11001 ;; Defined at:
 11002 ;;		line 52 in file "Events.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;  pState          1    wreg     unsigned char 
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;  pState          1   25[BANK0 ] unsigned char 
 11007 ;; Return value:  Size  Location     Type
 11008 ;;                  1    wreg      void 
 11009 ;; Registers used:
 11010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;Total ram usage:        1 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:   13
 11023 ;; This function calls:
 11024 ;;		_HMI_SetButton
 11025 ;;		_HMI_SetNumber
 11026 ;;		_LED_Toggle
 11027 ;; This function is called by:
 11028 ;;		_FunctInitButton
 11029 ;;		_Button_Poll
 11030 ;; This function uses a non-reentrant model
 11031 ;;
 11032                           
 11033                           	psect	text48
 11034  0186A8                     __ptext48:
 11035                           	opt stack 0
 11036  0186A8                     _Event_TestButton:
 11037                           	opt stack 15
 11038                           
 11039                           ;incstack = 0
 11040                           ;Event_TestButton@pState stored from wreg
 11041  0186A8  0100               	movlb	0	; () banked
 11042  0186AA  6F79               	movwf	Event_TestButton@pState& (0+255),b
 11043                           
 11044                           ;Events.c: 56: static UINT8 j = 0;
 11045                           ;Events.c: 60: if (pState == 0)
 11046  0186AC  0100               	movlb	0	; () banked
 11047  0186AE  5179               	movf	Event_TestButton@pState& (0+255),w,b
 11048  0186B0  A4D8               	btfss	status,2,c
 11049  0186B2  D010               	goto	l1873
 11050                           
 11051                           ; BSR set to: 0
 11052                           ;Events.c: 61: {
 11053                           ;Events.c: 62: j++;
 11054  0186B4  2A3C               	incf	Event_TestButton@j,f,c
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;Events.c: 63: val += j;
 11058  0186B6  503C               	movf	Event_TestButton@j,w,c
 11059  0186B8  0101               	movlb	1	; () banked
 11060  0186BA  2750               	addwf	_val& (0+255),f,b
 11061  0186BC  0E00               	movlw	0
 11062  0186BE  2351               	addwfc	(_val+1)& (0+255),f,b
 11063                           
 11064                           ; BSR set to: 1
 11065                           ;Events.c: 64: HMI_SetNumber( val );
 11066  0186C0  C150  F076         	movff	_val,HMI_SetNumber@pInput
 11067  0186C4  C151  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 11068  0186C8  EC7B  F0C4         	call	_HMI_SetNumber	;wreg free
 11069                           
 11070                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11071  0186CC  503C               	movf	Event_TestButton@j,w,c
 11072  0186CE  0B03               	andlw	3
 11073  0186D0  ECED  F0BA         	call	_HMI_SetButton
 11074  0186D4                     l1873:
 11075                           
 11076                           ;Events.c: 68: }
 11077                           ;Events.c: 72: LED_Toggle(eLED1);
 11078  0186D4  0E00               	movlw	0
 11079  0186D6  EC2E  F0C2         	call	_LED_Toggle
 11080  0186DA  0012               	return		;funcret
 11081  0186DC                     __end_of_Event_TestButton:
 11082                           	opt stack 0
 11083                           tosu	equ	0xFFF
 11084                           tosh	equ	0xFFE
 11085                           tosl	equ	0xFFD
 11086                           pclath	equ	0xFFA
 11087                           tblptru	equ	0xFF8
 11088                           tblptrh	equ	0xFF7
 11089                           tblptrl	equ	0xFF6
 11090                           tablat	equ	0xFF5
 11091                           prodl	equ	0xFF3
 11092                           intcon	equ	0xFF2
 11093                           postinc0	equ	0xFEE
 11094                           wreg	equ	0xFE8
 11095                           indf1	equ	0xFE7
 11096                           postdec1	equ	0xFE5
 11097                           fsr1h	equ	0xFE2
 11098                           fsr1l	equ	0xFE1
 11099                           indf2	equ	0xFDF
 11100                           postinc2	equ	0xFDE
 11101                           postdec2	equ	0xFDD
 11102                           plusw2	equ	0xFDB
 11103                           fsr2h	equ	0xFDA
 11104                           fsr2l	equ	0xFD9
 11105                           status	equ	0xFD8
 11106                           
 11107 ;; *************** function _HMI_SetButton *****************
 11108 ;; Defined at:
 11109 ;;		line 186 in file "HMI.c"
 11110 ;; Parameters:    Size  Location     Type
 11111 ;;  pValue          1    wreg     unsigned char 
 11112 ;; Auto vars:     Size  Location     Type
 11113 ;;  pValue          1    6[BANK0 ] unsigned char 
 11114 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11115 ;;  v               1    7[BANK0 ] unsigned char 
 11116 ;; Return value:  Size  Location     Type
 11117 ;;                  1    wreg      void 
 11118 ;; Registers used:
 11119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11126 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11127 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11128 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11129 ;;Total ram usage:        8 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    7
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		_Event_TestButton
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           	psect	text49
 11140  0175DA                     __ptext49:
 11141                           	opt stack 0
 11142  0175DA                     _HMI_SetButton:
 11143                           	opt stack 20
 11144                           
 11145                           ;incstack = 0
 11146                           ;HMI_SetButton@pValue stored from wreg
 11147  0175DA  0100               	movlb	0	; () banked
 11148  0175DC  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11149                           
 11150                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11151  0175DE  0E3A               	movlw	low HMI_SetButton@F7213
 11152  0175E0  6EF6               	movwf	tblptrl,c
 11153  0175E2                     	if	1	;There is more than 1 active tblptr byte
 11154  0175E2  0EFC               	movlw	high HMI_SetButton@F7213
 11155  0175E4  6EF7               	movwf	tblptrh,c
 11156  0175E6                     	endif
 11157  0175E6                     	if	1	;There are 3 active tblptr bytes
 11158  0175E6  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11159  0175E8  6EF8               	movwf	tblptru,c
 11160  0175EA                     	endif
 11161  0175EA  0009               	tblrd		*+
 11162  0175EC  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11163  0175F0  0009               	tblrd		*+
 11164  0175F2  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11165  0175F6  0009               	tblrd		*+
 11166  0175F8  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11167  0175FC  000A               	tblrd		*-
 11168  0175FE  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11169                           
 11170                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11171  017602  0E11               	movlw	17
 11172  017604  0100               	movlb	0	; () banked
 11173  017606  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;HMI.c: 190: pValue &= 3;
 11177  017608  0E03               	movlw	3
 11178  01760A  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;HMI.c: 191: v = v << reindex[pValue];
 11182  01760C  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11183  01760E  0D01               	mullw	1
 11184  017610  0E62               	movlw	low HMI_SetButton@reindex
 11185  017612  24F3               	addwf	prodl,w,c
 11186  017614  6ED9               	movwf	fsr2l,c
 11187  017616  0E00               	movlw	high HMI_SetButton@reindex
 11188  017618  20F4               	addwfc	prodh,w,c
 11189  01761A  6EDA               	movwf	fsr2h,c
 11190  01761C  50DF               	movf	indf2,w,c
 11191  01761E  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11192  017620  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11193  017624  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11194  017626  D002               	goto	u12974
 11195  017628                     u12975:
 11196  017628  90D8               	bcf	status,0,c
 11197  01762A  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11198  01762C                     u12974:
 11199  01762C  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11200  01762E  D7FC               	goto	u12975
 11201  017630  0100               	movlb	0	; () banked
 11202  017632  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11203  017634  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;HMI.c: 192: v = v >> 4;
 11207  017636  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11208  017638  0B0F               	andlw	15
 11209  01763A  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11210                           
 11211                           ; BSR set to: 0
 11212                           ;HMI.c: 193: v = v & 0x0F;
 11213  01763C  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11214  01763E  0B0F               	andlw	15
 11215  017640  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;HMI.c: 194: HMIBoard.pButton = v;
 11219  017642  0102               	movlb	2	; () banked
 11220  017644  5160               	movf	(_HMIBoard+6)& (0+255),w,b
 11221  017646  0100               	movlb	0	; () banked
 11222  017648  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11223  01764A  0BF0               	andlw	-16
 11224  01764C  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11225  01764E  0102               	movlb	2	; () banked
 11226  017650  6F60               	movwf	(_HMIBoard+6)& (0+255),b
 11227                           
 11228                           ; BSR set to: 2
 11229  017652  0012               	return		;funcret
 11230  017654                     __end_of_HMI_SetButton:
 11231                           	opt stack 0
 11232                           tosu	equ	0xFFF
 11233                           tosh	equ	0xFFE
 11234                           tosl	equ	0xFFD
 11235                           pclath	equ	0xFFA
 11236                           tblptru	equ	0xFF8
 11237                           tblptrh	equ	0xFF7
 11238                           tblptrl	equ	0xFF6
 11239                           tablat	equ	0xFF5
 11240                           prodh	equ	0xFF4
 11241                           prodl	equ	0xFF3
 11242                           intcon	equ	0xFF2
 11243                           postinc0	equ	0xFEE
 11244                           wreg	equ	0xFE8
 11245                           indf1	equ	0xFE7
 11246                           postdec1	equ	0xFE5
 11247                           fsr1h	equ	0xFE2
 11248                           fsr1l	equ	0xFE1
 11249                           indf2	equ	0xFDF
 11250                           postinc2	equ	0xFDE
 11251                           postdec2	equ	0xFDD
 11252                           plusw2	equ	0xFDB
 11253                           fsr2h	equ	0xFDA
 11254                           fsr2l	equ	0xFD9
 11255                           status	equ	0xFD8
 11256                           
 11257 ;; *************** function _LED_Toggle *****************
 11258 ;; Defined at:
 11259 ;;		line 50 in file "Library/LED.c"
 11260 ;; Parameters:    Size  Location     Type
 11261 ;;  pLED            1    wreg     enum E6739
 11262 ;; Auto vars:     Size  Location     Type
 11263 ;;  pLED            1   24[BANK0 ] enum E6739
 11264 ;; Return value:  Size  Location     Type
 11265 ;;                  1    wreg      void 
 11266 ;; Registers used:
 11267 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11268 ;; Tracked objects:
 11269 ;;		On entry : 0/0
 11270 ;;		On exit  : 0/0
 11271 ;;		Unchanged: 0/0
 11272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11276 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11277 ;;Total ram usage:        1 bytes
 11278 ;; Hardware stack levels used:    1
 11279 ;; Hardware stack levels required when called:   12
 11280 ;; This function calls:
 11281 ;;		_Port_TogglePin
 11282 ;; This function is called by:
 11283 ;;		_LCD_Reset
 11284 ;;		_Event_DIPSwitch
 11285 ;;		_Event_TestButton
 11286 ;;		_Event_ADCSequenceComplete
 11287 ;;		_Event_HMI_DIPSwitch
 11288 ;;		_Event_HMI_LeftButton
 11289 ;;		_Event_HMI_RightButton
 11290 ;;		_Event_HMI_UpButton
 11291 ;;		_Event_HMI_DownButton
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           	psect	text50
 11296  01845C                     __ptext50:
 11297                           	opt stack 0
 11298  01845C                     _LED_Toggle:
 11299                           	opt stack 15
 11300                           
 11301                           ; BSR set to: 2
 11302                           ;incstack = 0
 11303                           ;LED_Toggle@pLED stored from wreg
 11304  01845C  0100               	movlb	0	; () banked
 11305  01845E  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 11306                           
 11307                           ;LED.c: 52: switch (pLED)
 11308  018460  D014               	goto	l234
 11309  018462                     
 11310                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 11311  018462  0E8A               	movlw	low _PortC
 11312  018464  0100               	movlb	0	; () banked
 11313  018466  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11314  018468  0E01               	movlw	high _PortC
 11315  01846A  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11316  01846C  0E00               	movlw	0
 11317  01846E  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11318  018470  ECFF  F0C3         	call	_Port_TogglePin	;wreg free
 11319                           
 11320                           ;LED.c: 56: break;
 11321  018474  0012               	return	
 11322  018476                     
 11323                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 11324  018476  0E8A               	movlw	low _PortC
 11325  018478  0100               	movlb	0	; () banked
 11326  01847A  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11327  01847C  0E01               	movlw	high _PortC
 11328  01847E  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11329  018480  0E01               	movlw	1
 11330  018482  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11331  018484  ECFF  F0C3         	call	_Port_TogglePin	;wreg free
 11332                           
 11333                           ;LED.c: 60: }
 11334                           
 11335                           ;LED.c: 59: break;
 11336  018488  0012               	return	
 11337  01848A                     l234:
 11338  01848A  0100               	movlb	0	; () banked
 11339  01848C  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 11340                           
 11341                           ; Switch size 1, requested type "space"
 11342                           ; Number of cases is 2, Range of values is 0 to 1
 11343                           ; switch strategies available:
 11344                           ; Name         Instructions Cycles
 11345                           ; simple_byte            7     4 (average)
 11346                           ;	Chosen strategy is simple_byte
 11347  01848E  0A00               	xorlw	0	; case 0
 11348  018490  B4D8               	btfsc	status,2,c
 11349  018492  D7E7               	goto	l235
 11350  018494  0A01               	xorlw	1	; case 1
 11351  018496  A4D8               	btfss	status,2,c
 11352  018498  0012               	return	
 11353  01849A  D7ED               	goto	l237
 11354  01849C                     __end_of_LED_Toggle:
 11355                           	opt stack 0
 11356                           tosu	equ	0xFFF
 11357                           tosh	equ	0xFFE
 11358                           tosl	equ	0xFFD
 11359                           pclath	equ	0xFFA
 11360                           tblptru	equ	0xFF8
 11361                           tblptrh	equ	0xFF7
 11362                           tblptrl	equ	0xFF6
 11363                           tablat	equ	0xFF5
 11364                           prodh	equ	0xFF4
 11365                           prodl	equ	0xFF3
 11366                           intcon	equ	0xFF2
 11367                           postinc0	equ	0xFEE
 11368                           wreg	equ	0xFE8
 11369                           indf1	equ	0xFE7
 11370                           postdec1	equ	0xFE5
 11371                           fsr1h	equ	0xFE2
 11372                           fsr1l	equ	0xFE1
 11373                           indf2	equ	0xFDF
 11374                           postinc2	equ	0xFDE
 11375                           postdec2	equ	0xFDD
 11376                           plusw2	equ	0xFDB
 11377                           fsr2h	equ	0xFDA
 11378                           fsr2l	equ	0xFD9
 11379                           status	equ	0xFD8
 11380                           
 11381 ;; *************** function _Port_TogglePin *****************
 11382 ;; Defined at:
 11383 ;;		line 278 in file "Library/Port.c"
 11384 ;; Parameters:    Size  Location     Type
 11385 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 11386 ;;		 -> PortC(10), 
 11387 ;;  pPin            1   22[BANK0 ] enum E6750
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  Value           1   23[BANK0 ] unsigned char 
 11390 ;; Return value:  Size  Location     Type
 11391 ;;                  1    wreg      void 
 11392 ;; Registers used:
 11393 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11399 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11402 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11403 ;;Total ram usage:        4 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:   11
 11406 ;; This function calls:
 11407 ;;		_Port_GetPin
 11408 ;;		_Port_SetPin
 11409 ;; This function is called by:
 11410 ;;		_LED_Toggle
 11411 ;; This function uses a non-reentrant model
 11412 ;;
 11413                           
 11414                           	psect	text51
 11415  0187FE                     __ptext51:
 11416                           	opt stack 0
 11417  0187FE                     _Port_TogglePin:
 11418                           	opt stack 15
 11419                           
 11420                           ;Port.c: 280: UINT8 Value;
 11421                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 11422                           
 11423                           ;incstack = 0
 11424  0187FE  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 11425  018802  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 11426  018806  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 11427  01880A  ECC8  F0C2         	call	_Port_GetPin	;wreg free
 11428  01880E  0100               	movlb	0	; () banked
 11429  018810  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;Port.c: 282: Value ^= 0x01;
 11433  018812  0E01               	movlw	1
 11434  018814  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 11438  018816  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 11439  01881A  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 11440  01881E  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 11441  018822  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 11442  018826  EC9D  F0B5         	call	_Port_SetPin	;wreg free
 11443  01882A  0012               	return		;funcret
 11444  01882C                     __end_of_Port_TogglePin:
 11445                           	opt stack 0
 11446                           tosu	equ	0xFFF
 11447                           tosh	equ	0xFFE
 11448                           tosl	equ	0xFFD
 11449                           pclath	equ	0xFFA
 11450                           tblptru	equ	0xFF8
 11451                           tblptrh	equ	0xFF7
 11452                           tblptrl	equ	0xFF6
 11453                           tablat	equ	0xFF5
 11454                           prodh	equ	0xFF4
 11455                           prodl	equ	0xFF3
 11456                           intcon	equ	0xFF2
 11457                           postinc0	equ	0xFEE
 11458                           wreg	equ	0xFE8
 11459                           indf1	equ	0xFE7
 11460                           postdec1	equ	0xFE5
 11461                           fsr1h	equ	0xFE2
 11462                           fsr1l	equ	0xFE1
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           postdec2	equ	0xFDD
 11466                           plusw2	equ	0xFDB
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471 ;; *************** function _Port_SetPin *****************
 11472 ;; Defined at:
 11473 ;;		line 247 in file "Library/Port.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 11476 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 11477 ;;  pPin            1   17[BANK0 ] enum E6750
 11478 ;;  pValue          1   18[BANK0 ] unsigned char 
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;  Type            1   19[BANK0 ] enum E6795
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  1    wreg      void 
 11483 ;; Registers used:
 11484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11490 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;Total ram usage:        5 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; Hardware stack levels required when called:   10
 11497 ;; This function calls:
 11498 ;;		_Byte_SetBit
 11499 ;;		_Word_GetPair
 11500 ;; This function is called by:
 11501 ;;		_Reset_Low
 11502 ;;		_Reset_High
 11503 ;;		_LED_Set
 11504 ;;		_Port_TogglePin
 11505 ;;		_Motor_Step
 11506 ;;		_MXK_Init
 11507 ;;		_Motor_Init
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           	psect	text52
 11512  016B3A                     __ptext52:
 11513                           	opt stack 0
 11514  016B3A                     _Port_SetPin:
 11515                           	opt stack 19
 11516                           
 11517                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 11518                           
 11519                           ;incstack = 0
 11520  016B3A  0E08               	movlw	8
 11521  016B3C  0100               	movlb	0	; () banked
 11522  016B3E  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 11523  016B40  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11524  016B42  0E00               	movlw	0
 11525  016B44  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 11526  016B46  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11527  016B48  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 11528  016B4C  EC6E  F0C3         	call	_Word_GetPair	;wreg free
 11529  016B50  0100               	movlb	0	; () banked
 11530  016B52  6F73               	movwf	Port_SetPin@Type& (0+255),b
 11531                           
 11532                           ;Port.c: 250: switch (Type)
 11533  016B54  D03D               	goto	l427
 11534  016B56                     
 11535                           ; BSR set to: 0
 11536                           ;Port.c: 256: pValue &= 1;
 11537                           
 11538                           ; BSR set to: 0
 11539  016B56  0E01               	movlw	1
 11540  016B58  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 11541                           
 11542                           ; BSR set to: 0
 11543                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 11544  016B5A  EE20 F002          	lfsr	2,2
 11545  016B5E  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 11546  016B60  26D9               	addwf	fsr2l,f,c
 11547  016B62  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 11548  016B64  22DA               	addwfc	fsr2h,f,c
 11549  016B66  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11550  016B6A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11551  016B6E  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 11552  016B72  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 11553  016B76  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 11554                           
 11555                           ;Port.c: 258: break;
 11556  016B7A  0012               	return	
 11557  016B7C                     
 11558                           ;Port.c: 261: pValue &= 1;
 11559  016B7C  0E01               	movlw	1
 11560  016B7E  0100               	movlb	0	; () banked
 11561  016B80  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 11562                           
 11563                           ;Port.c: 262: pValue ^= 1;
 11564  016B82  0E01               	movlw	1
 11565  016B84  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 11569  016B86  EE20 F002          	lfsr	2,2
 11570  016B8A  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 11571  016B8C  26D9               	addwf	fsr2l,f,c
 11572  016B8E  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 11573  016B90  22DA               	addwfc	fsr2h,f,c
 11574  016B92  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11575  016B96  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11576  016B9A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 11577  016B9E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 11578  016BA2  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 11579                           
 11580                           ;Port.c: 264: break;
 11581  016BA6  0012               	return	
 11582  016BA8                     
 11583                           ;Port.c: 266: pValue &= 1;
 11584  016BA8  0E01               	movlw	1
 11585  016BAA  0100               	movlb	0	; () banked
 11586  016BAC  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 11590  016BAE  EE20 F004          	lfsr	2,4
 11591  016BB2  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 11592  016BB4  26D9               	addwf	fsr2l,f,c
 11593  016BB6  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 11594  016BB8  22DA               	addwfc	fsr2h,f,c
 11595  016BBA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11596  016BBE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11597  016BC2  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 11598  016BC6  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 11599  016BCA  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 11600                           
 11601                           ;Port.c: 269: }
 11602                           
 11603                           ;Port.c: 268: break;
 11604  016BCE  0012               	return	
 11605  016BD0                     l427:
 11606  016BD0  0100               	movlb	0	; () banked
 11607  016BD2  5173               	movf	Port_SetPin@Type& (0+255),w,b
 11608                           
 11609                           ; Switch size 1, requested type "space"
 11610                           ; Number of cases is 4, Range of values is 0 to 3
 11611                           ; switch strategies available:
 11612                           ; Name         Instructions Cycles
 11613                           ; simple_byte           13     7 (average)
 11614                           ;	Chosen strategy is simple_byte
 11615  016BD4  0A00               	xorlw	0	; case 0
 11616  016BD6  B4D8               	btfsc	status,2,c
 11617  016BD8  0012               	return	
 11618  016BDA  0A01               	xorlw	1	; case 1
 11619  016BDC  B4D8               	btfsc	status,2,c
 11620  016BDE  D7BB               	goto	l430
 11621  016BE0  0A03               	xorlw	3	; case 2
 11622  016BE2  B4D8               	btfsc	status,2,c
 11623  016BE4  D7CB               	goto	l432
 11624  016BE6  0A01               	xorlw	1	; case 3
 11625  016BE8  A4D8               	btfss	status,2,c
 11626  016BEA  0012               	return	
 11627  016BEC  D7DD               	goto	l433
 11628  016BEE                     __end_of_Port_SetPin:
 11629                           	opt stack 0
 11630                           tosu	equ	0xFFF
 11631                           tosh	equ	0xFFE
 11632                           tosl	equ	0xFFD
 11633                           pclath	equ	0xFFA
 11634                           tblptru	equ	0xFF8
 11635                           tblptrh	equ	0xFF7
 11636                           tblptrl	equ	0xFF6
 11637                           tablat	equ	0xFF5
 11638                           prodh	equ	0xFF4
 11639                           prodl	equ	0xFF3
 11640                           intcon	equ	0xFF2
 11641                           postinc0	equ	0xFEE
 11642                           wreg	equ	0xFE8
 11643                           indf1	equ	0xFE7
 11644                           postdec1	equ	0xFE5
 11645                           fsr1h	equ	0xFE2
 11646                           fsr1l	equ	0xFE1
 11647                           indf2	equ	0xFDF
 11648                           postinc2	equ	0xFDE
 11649                           postdec2	equ	0xFDD
 11650                           plusw2	equ	0xFDB
 11651                           fsr2h	equ	0xFDA
 11652                           fsr2l	equ	0xFD9
 11653                           status	equ	0xFD8
 11654                           
 11655 ;; *************** function _Port_GetPin *****************
 11656 ;; Defined at:
 11657 ;;		line 271 in file "Library/Port.c"
 11658 ;; Parameters:    Size  Location     Type
 11659 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11660 ;;		 -> PortB(10), PortE(10), PortC(10), 
 11661 ;;  pPin            1    2[BANK0 ] enum E6750
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;  Output          1    5[BANK0 ] unsigned char 
 11664 ;; Return value:  Size  Location     Type
 11665 ;;                  1    wreg      unsigned char 
 11666 ;; Registers used:
 11667 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11668 ;; Tracked objects:
 11669 ;;		On entry : 0/0
 11670 ;;		On exit  : 0/0
 11671 ;;		Unchanged: 0/0
 11672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11673 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;Total ram usage:        6 bytes
 11678 ;; Hardware stack levels used:    1
 11679 ;; Hardware stack levels required when called:    7
 11680 ;; This function calls:
 11681 ;;		Nothing
 11682 ;; This function is called by:
 11683 ;;		_Port_TogglePin
 11684 ;;		_HMI_LeftSwitch
 11685 ;;		_HMI_RightSwitch
 11686 ;;		_HMI_UpSwitch
 11687 ;;		_HMI_DownSwitch
 11688 ;;		_MXK_TestButton
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           	psect	text53
 11693  018590                     __ptext53:
 11694                           	opt stack 0
 11695  018590                     _Port_GetPin:
 11696                           	opt stack 22
 11697                           
 11698                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 11699                           
 11700                           ;incstack = 0
 11701  018590  0100               	movlb	0	; () banked
 11702  018592  EE20 F006          	lfsr	2,6
 11703  018596  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 11704  018598  26D9               	addwf	fsr2l,f,c
 11705  01859A  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 11706  01859C  22DA               	addwfc	fsr2h,f,c
 11707  01859E  CFDE F063          	movff	postinc2,??_Port_GetPin
 11708  0185A2  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 11709  0185A6  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 11710  0185AA  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 11711  0185AE  50DF               	movf	indf2,w,c
 11712  0185B0  6F65               	movwf	Port_GetPin@Output& (0+255),b
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;Port.c: 274: Output >>= (UINT8)pPin;
 11716  0185B2  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 11717  0185B4  6F63               	movwf	??_Port_GetPin& (0+255),b
 11718  0185B6  D002               	goto	u12210
 11719  0185B8                     u12215:
 11720  0185B8  90D8               	bcf	status,0,c
 11721  0185BA  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 11722  0185BC                     u12210:
 11723  0185BC  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 11724  0185BE  D7FC               	goto	u12215
 11725                           
 11726                           ;Port.c: 275: Output &= 1;
 11727  0185C0  0E01               	movlw	1
 11728  0185C2  0100               	movlb	0	; () banked
 11729  0185C4  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 11730                           
 11731                           ; BSR set to: 0
 11732                           ;Port.c: 276: return Output;
 11733  0185C6  5165               	movf	Port_GetPin@Output& (0+255),w,b
 11734  0185C8  0012               	return	
 11735  0185CA                     __end_of_Port_GetPin:
 11736                           	opt stack 0
 11737                           tosu	equ	0xFFF
 11738                           tosh	equ	0xFFE
 11739                           tosl	equ	0xFFD
 11740                           pclath	equ	0xFFA
 11741                           tblptru	equ	0xFF8
 11742                           tblptrh	equ	0xFF7
 11743                           tblptrl	equ	0xFF6
 11744                           tablat	equ	0xFF5
 11745                           prodh	equ	0xFF4
 11746                           prodl	equ	0xFF3
 11747                           intcon	equ	0xFF2
 11748                           postinc0	equ	0xFEE
 11749                           wreg	equ	0xFE8
 11750                           indf1	equ	0xFE7
 11751                           postdec1	equ	0xFE5
 11752                           fsr1h	equ	0xFE2
 11753                           fsr1l	equ	0xFE1
 11754                           indf2	equ	0xFDF
 11755                           postinc2	equ	0xFDE
 11756                           postdec2	equ	0xFDD
 11757                           plusw2	equ	0xFDB
 11758                           fsr2h	equ	0xFDA
 11759                           fsr2l	equ	0xFD9
 11760                           status	equ	0xFD8
 11761                           
 11762 ;; *************** function _HMI_SetBar *****************
 11763 ;; Defined at:
 11764 ;;		line 205 in file "HMI.c"
 11765 ;; Parameters:    Size  Location     Type
 11766 ;;  pValue          1    wreg     unsigned char 
 11767 ;; Auto vars:     Size  Location     Type
 11768 ;;  pValue          1    0[BANK0 ] unsigned char 
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  1    wreg      void 
 11771 ;; Registers used:
 11772 ;;		wreg
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;Total ram usage:        1 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; Hardware stack levels required when called:    7
 11785 ;; This function calls:
 11786 ;;		Nothing
 11787 ;; This function is called by:
 11788 ;;		_Event_DIPSwitch
 11789 ;;		_Event_HMI_DIPSwitch
 11790 ;;		_Event_HMI_LeftButton
 11791 ;;		_Event_HMI_RightButton
 11792 ;; This function uses a non-reentrant model
 11793 ;;
 11794                           
 11795                           	psect	text54
 11796  018CA6                     __ptext54:
 11797                           	opt stack 0
 11798  018CA6                     _HMI_SetBar:
 11799                           	opt stack 20
 11800                           
 11801                           ; BSR set to: 0
 11802                           ;incstack = 0
 11803                           ;HMI_SetBar@pValue stored from wreg
 11804  018CA6  0100               	movlb	0	; () banked
 11805  018CA8  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 11806                           
 11807                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 11808  018CAA  C060  F261         	movff	HMI_SetBar@pValue,_HMIBoard+7
 11809  018CAE  0012               	return		;funcret
 11810  018CB0                     __end_of_HMI_SetBar:
 11811                           	opt stack 0
 11812                           tosu	equ	0xFFF
 11813                           tosh	equ	0xFFE
 11814                           tosl	equ	0xFFD
 11815                           pclath	equ	0xFFA
 11816                           tblptru	equ	0xFF8
 11817                           tblptrh	equ	0xFF7
 11818                           tblptrl	equ	0xFF6
 11819                           tablat	equ	0xFF5
 11820                           prodh	equ	0xFF4
 11821                           prodl	equ	0xFF3
 11822                           intcon	equ	0xFF2
 11823                           postinc0	equ	0xFEE
 11824                           wreg	equ	0xFE8
 11825                           indf1	equ	0xFE7
 11826                           postdec1	equ	0xFE5
 11827                           fsr1h	equ	0xFE2
 11828                           fsr1l	equ	0xFE1
 11829                           indf2	equ	0xFDF
 11830                           postinc2	equ	0xFDE
 11831                           postdec2	equ	0xFDD
 11832                           plusw2	equ	0xFDB
 11833                           fsr2h	equ	0xFDA
 11834                           fsr2l	equ	0xFD9
 11835                           status	equ	0xFD8
 11836                           
 11837 ;; *************** function _HMI_GetBar *****************
 11838 ;; Defined at:
 11839 ;;		line 209 in file "HMI.c"
 11840 ;; Parameters:    Size  Location     Type
 11841 ;;		None
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;		None
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1    wreg      unsigned char 
 11846 ;; Registers used:
 11847 ;;		wreg, status,2
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11857 ;;Total ram usage:        0 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; Hardware stack levels required when called:    7
 11860 ;; This function calls:
 11861 ;;		Nothing
 11862 ;; This function is called by:
 11863 ;;		_Event_DIPSwitch
 11864 ;;		_Event_HMI_DIPSwitch
 11865 ;; This function uses a non-reentrant model
 11866 ;;
 11867                           
 11868                           	psect	text55
 11869  018CD0                     __ptext55:
 11870                           	opt stack 0
 11871  018CD0                     _HMI_GetBar:
 11872                           	opt stack 20
 11873                           
 11874                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 11875                           
 11876                           ;incstack = 0
 11877  018CD0  0102               	movlb	2	; () banked
 11878  018CD2  5161               	movf	(_HMIBoard+7)& (0+255),w,b
 11879  018CD4  0012               	return	
 11880  018CD6                     __end_of_HMI_GetBar:
 11881                           	opt stack 0
 11882                           tosu	equ	0xFFF
 11883                           tosh	equ	0xFFE
 11884                           tosl	equ	0xFFD
 11885                           pclath	equ	0xFFA
 11886                           tblptru	equ	0xFF8
 11887                           tblptrh	equ	0xFF7
 11888                           tblptrl	equ	0xFF6
 11889                           tablat	equ	0xFF5
 11890                           prodh	equ	0xFF4
 11891                           prodl	equ	0xFF3
 11892                           intcon	equ	0xFF2
 11893                           postinc0	equ	0xFEE
 11894                           wreg	equ	0xFE8
 11895                           indf1	equ	0xFE7
 11896                           postdec1	equ	0xFE5
 11897                           fsr1h	equ	0xFE2
 11898                           fsr1l	equ	0xFE1
 11899                           indf2	equ	0xFDF
 11900                           postinc2	equ	0xFDE
 11901                           postdec2	equ	0xFDD
 11902                           plusw2	equ	0xFDB
 11903                           fsr2h	equ	0xFDA
 11904                           fsr2l	equ	0xFD9
 11905                           status	equ	0xFD8
 11906                           
 11907 ;; *************** function _HMI_Init *****************
 11908 ;; Defined at:
 11909 ;;		line 104 in file "HMI.c"
 11910 ;; Parameters:    Size  Location     Type
 11911 ;;		None
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  in              2   72[BANK0 ] unsigned short 
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;Total ram usage:        2 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:   16
 11930 ;; This function calls:
 11931 ;;		_Button_Init
 11932 ;;		_SPI_Init
 11933 ;;		_SPI_MinSpeed
 11934 ;; This function is called by:
 11935 ;;		_main
 11936 ;; This function uses a non-reentrant model
 11937 ;;
 11938                           
 11939                           	psect	text56
 11940  015298                     __ptext56:
 11941                           	opt stack 0
 11942  015298                     _HMI_Init:
 11943                           	opt stack 14
 11944                           
 11945                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 11946                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 11947                           
 11948                           ; BSR set to: 2
 11949                           ;incstack = 0
 11950  015298  0E8A               	movlw	low (_HMIBoard+48)
 11951  01529A  0100               	movlb	0	; () banked
 11952  01529C  6F9B               	movwf	Button_Init@pInput& (0+255),b
 11953  01529E  0E02               	movlw	high (_HMIBoard+48)
 11954  0152A0  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 11955  0152A2  0E00               	movlw	0
 11956  0152A4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11957  0152A6  0E02               	movlw	2
 11958  0152A8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 11959  0152AA  0ED6               	movlw	low _HMI_InitButtons
 11960  0152AC  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 11961  0152AE  0E8C               	movlw	high _HMI_InitButtons
 11962  0152B0  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 11963  0152B2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 11964  0152B4  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 11965  0152B6  0E3C               	movlw	low _HMI_DIPSwitch
 11966  0152B8  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 11967  0152BA  0E8B               	movlw	high _HMI_DIPSwitch
 11968  0152BC  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 11969  0152BE  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 11970  0152C0  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 11971  0152C2  0E04               	movlw	low _Event_NULL
 11972  0152C4  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 11973  0152C6  0E14               	movlw	high _Event_NULL
 11974  0152C8  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 11975  0152CA  0E00               	movlw	low (_Event_NULL shr (0+16))
 11976  0152CC  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 11977  0152CE  ECF7  F0B5         	call	_Button_Init	;wreg free
 11978                           
 11979                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 11980                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 11981  0152D2  0E6C               	movlw	low (_HMIBoard+18)
 11982  0152D4  0100               	movlb	0	; () banked
 11983  0152D6  6F9B               	movwf	Button_Init@pInput& (0+255),b
 11984  0152D8  0E02               	movlw	high (_HMIBoard+18)
 11985  0152DA  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 11986  0152DC  0E00               	movlw	0
 11987  0152DE  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 11988  0152E0  0E02               	movlw	2
 11989  0152E2  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 11990  0152E4  0ED6               	movlw	low _HMI_InitButtons
 11991  0152E6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 11992  0152E8  0E8C               	movlw	high _HMI_InitButtons
 11993  0152EA  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 11994  0152EC  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 11995  0152EE  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 11996  0152F0  0E8C               	movlw	low _HMI_LeftSwitch
 11997  0152F2  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 11998  0152F4  0E8B               	movlw	high _HMI_LeftSwitch
 11999  0152F6  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12000  0152F8  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 12001  0152FA  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12002  0152FC  0E04               	movlw	low _Event_NULL
 12003  0152FE  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12004  015300  0E14               	movlw	high _Event_NULL
 12005  015302  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12006  015304  0E00               	movlw	low (_Event_NULL shr (0+16))
 12007  015306  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12008  015308  ECF7  F0B5         	call	_Button_Init	;wreg free
 12009                           
 12010                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 12011                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 12012  01530C  0E62               	movlw	low (_HMIBoard+8)
 12013  01530E  0100               	movlb	0	; () banked
 12014  015310  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12015  015312  0E02               	movlw	high (_HMIBoard+8)
 12016  015314  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12017  015316  0E00               	movlw	0
 12018  015318  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12019  01531A  0E02               	movlw	2
 12020  01531C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12021  01531E  0ED6               	movlw	low _HMI_InitButtons
 12022  015320  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12023  015322  0E8C               	movlw	high _HMI_InitButtons
 12024  015324  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12025  015326  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12026  015328  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12027  01532A  0E78               	movlw	low _HMI_RightSwitch
 12028  01532C  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12029  01532E  0E8B               	movlw	high _HMI_RightSwitch
 12030  015330  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12031  015332  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 12032  015334  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12033  015336  0E04               	movlw	low _Event_NULL
 12034  015338  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12035  01533A  0E14               	movlw	high _Event_NULL
 12036  01533C  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12037  01533E  0E00               	movlw	low (_Event_NULL shr (0+16))
 12038  015340  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12039  015342  ECF7  F0B5         	call	_Button_Init	;wreg free
 12040                           
 12041                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 12042                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 12043  015346  0E76               	movlw	low (_HMIBoard+28)
 12044  015348  0100               	movlb	0	; () banked
 12045  01534A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12046  01534C  0E02               	movlw	high (_HMIBoard+28)
 12047  01534E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12048  015350  0E00               	movlw	0
 12049  015352  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12050  015354  0E02               	movlw	2
 12051  015356  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12052  015358  0ED6               	movlw	low _HMI_InitButtons
 12053  01535A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12054  01535C  0E8C               	movlw	high _HMI_InitButtons
 12055  01535E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12056  015360  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12057  015362  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12058  015364  0E64               	movlw	low _HMI_UpSwitch
 12059  015366  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12060  015368  0E8B               	movlw	high _HMI_UpSwitch
 12061  01536A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12062  01536C  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 12063  01536E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12064  015370  0E04               	movlw	low _Event_NULL
 12065  015372  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12066  015374  0E14               	movlw	high _Event_NULL
 12067  015376  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12068  015378  0E00               	movlw	low (_Event_NULL shr (0+16))
 12069  01537A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12070  01537C  ECF7  F0B5         	call	_Button_Init	;wreg free
 12071                           
 12072                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 12073                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 12074  015380  0E80               	movlw	low (_HMIBoard+38)
 12075  015382  0100               	movlb	0	; () banked
 12076  015384  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12077  015386  0E02               	movlw	high (_HMIBoard+38)
 12078  015388  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12079  01538A  0E00               	movlw	0
 12080  01538C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12081  01538E  0E02               	movlw	2
 12082  015390  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12083  015392  0ED6               	movlw	low _HMI_InitButtons
 12084  015394  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12085  015396  0E8C               	movlw	high _HMI_InitButtons
 12086  015398  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12087  01539A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12088  01539C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12089  01539E  0E50               	movlw	low _HMI_DownSwitch
 12090  0153A0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12091  0153A2  0E8B               	movlw	high _HMI_DownSwitch
 12092  0153A4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12093  0153A6  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 12094  0153A8  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12095  0153AA  0E04               	movlw	low _Event_NULL
 12096  0153AC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12097  0153AE  0E14               	movlw	high _Event_NULL
 12098  0153B0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12099  0153B2  0E00               	movlw	low (_Event_NULL shr (0+16))
 12100  0153B4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12101  0153B6  ECF7  F0B5         	call	_Button_Init	;wreg free
 12102                           
 12103                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 12104  0153BA  0EA0               	movlw	160
 12105  0153BC  0100               	movlb	0	; () banked
 12106  0153BE  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 12107  0153C0  0E86               	movlw	134
 12108  0153C2  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 12109  0153C4  0E01               	movlw	1
 12110  0153C6  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 12111  0153C8  0E00               	movlw	0
 12112  0153CA  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 12113  0153CC  0E00               	movlw	0
 12114  0153CE  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 12115  0153D0  0E02               	movlw	2
 12116  0153D2  6F92               	movwf	SPI_Init@pMode& (0+255),b
 12117  0153D4  EC43  F097         	call	_SPI_Init	;wreg free
 12118                           
 12119                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 12120  0153D8  0E94               	movlw	low _SPI1
 12121  0153DA  0100               	movlb	0	; () banked
 12122  0153DC  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 12123  0153DE  0E02               	movlw	high _SPI1
 12124  0153E0  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 12125  0153E2  EC61  F0BD         	call	_SPI_MinSpeed	;wreg free
 12126                           
 12127                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 12128  0153E6  0E00               	movlw	0
 12129  0153E8  0100               	movlb	0	; () banked
 12130  0153EA  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 12131  0153EC  0E00               	movlw	0
 12132  0153EE  6FA8               	movwf	HMI_Init@in& (0+255),b
 12133  0153F0                     l16607:
 12134                           
 12135                           ; BSR set to: 0
 12136  0153F0  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 12137  0153F2  E10F               	bnz	l1153
 12138  0153F4  0E08               	movlw	8
 12139  0153F6  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 12140  0153F8  B0D8               	btfsc	status,0,c
 12141  0153FA  0012               	return	
 12142                           
 12143                           ; BSR set to: 0
 12144                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 12145                           
 12146                           ; BSR set to: 0
 12147                           
 12148                           ; BSR set to: 0
 12149  0153FC  0E5A               	movlw	low _HMIBoard
 12150  0153FE  25A8               	addwf	HMI_Init@in& (0+255),w,b
 12151  015400  6ED9               	movwf	fsr2l,c
 12152  015402  0E02               	movlw	high _HMIBoard
 12153  015404  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 12154  015406  6EDA               	movwf	fsr2h,c
 12155  015408  0E00               	movlw	0
 12156  01540A  6EDF               	movwf	indf2,c
 12157                           
 12158                           ; BSR set to: 0
 12159  01540C  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 12160  01540E  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 12161  015410  D7EF               	goto	l16607
 12162  015412                     l1153:
 12163                           
 12164                           ; BSR set to: 0
 12165  015412  0012               	return		;funcret
 12166  015414                     __end_of_HMI_Init:
 12167                           	opt stack 0
 12168                           tosu	equ	0xFFF
 12169                           tosh	equ	0xFFE
 12170                           tosl	equ	0xFFD
 12171                           pclath	equ	0xFFA
 12172                           tblptru	equ	0xFF8
 12173                           tblptrh	equ	0xFF7
 12174                           tblptrl	equ	0xFF6
 12175                           tablat	equ	0xFF5
 12176                           prodh	equ	0xFF4
 12177                           prodl	equ	0xFF3
 12178                           intcon	equ	0xFF2
 12179                           postinc0	equ	0xFEE
 12180                           wreg	equ	0xFE8
 12181                           indf1	equ	0xFE7
 12182                           postdec1	equ	0xFE5
 12183                           fsr1h	equ	0xFE2
 12184                           fsr1l	equ	0xFE1
 12185                           indf2	equ	0xFDF
 12186                           postinc2	equ	0xFDE
 12187                           postdec2	equ	0xFDD
 12188                           plusw2	equ	0xFDB
 12189                           fsr2h	equ	0xFDA
 12190                           fsr2l	equ	0xFD9
 12191                           status	equ	0xFD8
 12192                           
 12193 ;; *************** function _SPI_MinSpeed *****************
 12194 ;; Defined at:
 12195 ;;		line 190 in file "Library/SPI.c"
 12196 ;; Parameters:    Size  Location     Type
 12197 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 12198 ;;		 -> SPI1(11), 
 12199 ;; Auto vars:     Size  Location     Type
 12200 ;;		None
 12201 ;; Return value:  Size  Location     Type
 12202 ;;                  1    wreg      void 
 12203 ;; Registers used:
 12204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12205 ;; Tracked objects:
 12206 ;;		On entry : 0/0
 12207 ;;		On exit  : 0/0
 12208 ;;		Unchanged: 0/0
 12209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12214 ;;Total ram usage:        2 bytes
 12215 ;; Hardware stack levels used:    1
 12216 ;; Hardware stack levels required when called:    9
 12217 ;; This function calls:
 12218 ;;		_Byte_SetBit
 12219 ;;		_Byte_SetQuad
 12220 ;; This function is called by:
 12221 ;;		_HMI_Init
 12222 ;; This function uses a non-reentrant model
 12223 ;;
 12224                           
 12225                           	psect	text57
 12226  017AC2                     __ptext57:
 12227                           	opt stack 0
 12228  017AC2                     _SPI_MinSpeed:
 12229                           	opt stack 20
 12230                           
 12231                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;incstack = 0
 12235  017AC2  0100               	movlb	0	; () banked
 12236  017AC4  EE20 F006          	lfsr	2,6
 12237  017AC8  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12238  017ACA  26D9               	addwf	fsr2l,f,c
 12239  017ACC  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12240  017ACE  22DA               	addwfc	fsr2h,f,c
 12241  017AD0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12242  017AD4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12243  017AD8  0E05               	movlw	5
 12244  017ADA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12245  017ADC  0E00               	movlw	0
 12246  017ADE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12247  017AE0  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12248                           
 12249                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 12250  017AE4  0100               	movlb	0	; () banked
 12251  017AE6  EE20 F006          	lfsr	2,6
 12252  017AEA  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12253  017AEC  26D9               	addwf	fsr2l,f,c
 12254  017AEE  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12255  017AF0  22DA               	addwfc	fsr2h,f,c
 12256  017AF2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12257  017AF6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12258  017AFA  0E00               	movlw	0
 12259  017AFC  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12260  017AFE  0E02               	movlw	2
 12261  017B00  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12262  017B02  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 12263                           
 12264                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12265  017B06  0100               	movlb	0	; () banked
 12266  017B08  EE20 F006          	lfsr	2,6
 12267  017B0C  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12268  017B0E  26D9               	addwf	fsr2l,f,c
 12269  017B10  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12270  017B12  22DA               	addwfc	fsr2h,f,c
 12271  017B14  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12272  017B18  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12273  017B1C  0E05               	movlw	5
 12274  017B1E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12275  017B20  0E01               	movlw	1
 12276  017B22  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12277  017B24  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12278  017B28  0012               	return		;funcret
 12279  017B2A                     __end_of_SPI_MinSpeed:
 12280                           	opt stack 0
 12281                           tosu	equ	0xFFF
 12282                           tosh	equ	0xFFE
 12283                           tosl	equ	0xFFD
 12284                           pclath	equ	0xFFA
 12285                           tblptru	equ	0xFF8
 12286                           tblptrh	equ	0xFF7
 12287                           tblptrl	equ	0xFF6
 12288                           tablat	equ	0xFF5
 12289                           prodh	equ	0xFF4
 12290                           prodl	equ	0xFF3
 12291                           intcon	equ	0xFF2
 12292                           postinc0	equ	0xFEE
 12293                           wreg	equ	0xFE8
 12294                           indf1	equ	0xFE7
 12295                           postdec1	equ	0xFE5
 12296                           fsr1h	equ	0xFE2
 12297                           fsr1l	equ	0xFE1
 12298                           indf2	equ	0xFDF
 12299                           postinc2	equ	0xFDE
 12300                           postdec2	equ	0xFDD
 12301                           plusw2	equ	0xFDB
 12302                           fsr2h	equ	0xFDA
 12303                           fsr2l	equ	0xFD9
 12304                           status	equ	0xFD8
 12305                           
 12306 ;; *************** function _SPI_Init *****************
 12307 ;; Defined at:
 12308 ;;		line 12 in file "Library/SPI.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;  pClock          4   45[BANK0 ] unsigned long 
 12311 ;;  pChannel        1   49[BANK0 ] enum E6744
 12312 ;;  pMode           1   50[BANK0 ] enum E6748
 12313 ;; Auto vars:     Size  Location     Type
 12314 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 12315 ;;		 -> SPI1(11), SPI2(11), 
 12316 ;; Return value:  Size  Location     Type
 12317 ;;                  1    wreg      void 
 12318 ;; Registers used:
 12319 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12325 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12328 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;Total ram usage:        8 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; Hardware stack levels required when called:   12
 12332 ;; This function calls:
 12333 ;;		_Byte_SetBit
 12334 ;;		_Byte_SetQuad
 12335 ;;		_Port_SetPinType
 12336 ;;		_SPI_DCS
 12337 ;;		_SPI_DisableISR
 12338 ;;		_Timer2_Init
 12339 ;; This function is called by:
 12340 ;;		_Configure_GPIOs
 12341 ;;		_HMI_Init
 12342 ;; This function uses a non-reentrant model
 12343 ;;
 12344                           
 12345                           	psect	text58
 12346  012E86                     __ptext58:
 12347                           	opt stack 0
 12348  012E86                     _SPI_Init:
 12349                           	opt stack 16
 12350                           
 12351                           ;SPI.c: 14: SPIPtr pInput;
 12352                           ;SPI.c: 16: switch (pChannel)
 12353                           
 12354                           ;incstack = 0
 12355  012E86  D00A               	goto	l597
 12356  012E88                     
 12357                           ;SPI.c: 19: pInput = &SPI1;
 12358  012E88  0E94               	movlw	low _SPI1
 12359  012E8A  0100               	movlb	0	; () banked
 12360  012E8C  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12361  012E8E  0E02               	movlw	high _SPI1
 12362  012E90  D003               	goto	L10
 12363  012E92                     
 12364                           ; BSR set to: 0
 12365                           ;SPI.c: 22: pInput = &SPI2;
 12366                           
 12367                           ; BSR set to: 0
 12368  012E92  0E61               	movlw	low _SPI2
 12369  012E94  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12370  012E96  0E01               	movlw	high _SPI2
 12371  012E98                     L10:
 12372  012E98  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 12373                           
 12374                           ; BSR set to: 0
 12375                           ;SPI.c: 24: };
 12376                           
 12377                           ;SPI.c: 23: break;
 12378  012E9A  D008               	goto	l599
 12379  012E9C                     l597:
 12380                           
 12381                           ; BSR set to: 0
 12382  012E9C  0100               	movlb	0	; () banked
 12383  012E9E  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12384                           
 12385                           ; Switch size 1, requested type "space"
 12386                           ; Number of cases is 2, Range of values is 0 to 1
 12387                           ; switch strategies available:
 12388                           ; Name         Instructions Cycles
 12389                           ; simple_byte            7     4 (average)
 12390                           ;	Chosen strategy is simple_byte
 12391  012EA0  0A00               	xorlw	0	; case 0
 12392  012EA2  B4D8               	btfsc	status,2,c
 12393  012EA4  D7F1               	goto	l598
 12394  012EA6  0A01               	xorlw	1	; case 1
 12395  012EA8  B4D8               	btfsc	status,2,c
 12396  012EAA  D7F3               	goto	l600
 12397  012EAC                     l599:
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;SPI.c: 26: pInput->mChannel = pChannel;
 12401                           
 12402                           ; BSR set to: 0
 12403  012EAC  EE20 F002          	lfsr	2,2
 12404  012EB0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12405  012EB2  26D9               	addwf	fsr2l,f,c
 12406  012EB4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12407  012EB6  22DA               	addwfc	fsr2h,f,c
 12408  012EB8  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 12409                           
 12410                           ;SPI.c: 35: switch (pChannel)
 12411  012EBC  D093               	goto	l601
 12412  012EBE                     
 12413                           ; BSR set to: 0
 12414                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 12415                           
 12416                           ; BSR set to: 0
 12417  012EBE  0E8A               	movlw	low _PortC
 12418  012EC0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12419  012EC2  0E01               	movlw	high _PortC
 12420  012EC4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12421  012EC6  0E02               	movlw	2
 12422  012EC8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12423  012ECA  0E03               	movlw	3
 12424  012ECC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12425  012ECE  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12426                           
 12427                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 12428  012ED2  0E8A               	movlw	low _PortC
 12429  012ED4  0100               	movlb	0	; () banked
 12430  012ED6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12431  012ED8  0E01               	movlw	high _PortC
 12432  012EDA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12433  012EDC  0E03               	movlw	3
 12434  012EDE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12435  012EE0  0E03               	movlw	3
 12436  012EE2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12437  012EE4  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12438                           
 12439                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 12440  012EE8  0E8A               	movlw	low _PortC
 12441  012EEA  0100               	movlb	0	; () banked
 12442  012EEC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12443  012EEE  0E01               	movlw	high _PortC
 12444  012EF0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12445  012EF2  0E05               	movlw	5
 12446  012EF4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12447  012EF6  0E03               	movlw	3
 12448  012EF8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12449  012EFA  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12450                           
 12451                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 12452  012EFE  0E8A               	movlw	low _PortC
 12453  012F00  0100               	movlb	0	; () banked
 12454  012F02  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12455  012F04  0E01               	movlw	high _PortC
 12456  012F06  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12457  012F08  0E04               	movlw	4
 12458  012F0A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12459  012F0C  0E00               	movlw	0
 12460  012F0E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12461  012F10  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12462                           
 12463                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 12464  012F14  0100               	movlb	0	; () banked
 12465  012F16  EE20 F003          	lfsr	2,3
 12466  012F1A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12467  012F1C  26D9               	addwf	fsr2l,f,c
 12468  012F1E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12469  012F20  22DA               	addwfc	fsr2h,f,c
 12470  012F22  0EC7               	movlw	199
 12471  012F24  6EDE               	movwf	postinc2,c
 12472  012F26  0E0F               	movlw	15
 12473  012F28  6EDD               	movwf	postdec2,c
 12474                           
 12475                           ; BSR set to: 0
 12476                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 12477  012F2A  EE20 F006          	lfsr	2,6
 12478  012F2E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12479  012F30  26D9               	addwf	fsr2l,f,c
 12480  012F32  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12481  012F34  22DA               	addwfc	fsr2h,f,c
 12482  012F36  0EC6               	movlw	198
 12483  012F38  6EDE               	movwf	postinc2,c
 12484  012F3A  0E0F               	movlw	15
 12485  012F3C  6EDD               	movwf	postdec2,c
 12486                           
 12487                           ; BSR set to: 0
 12488                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 12489  012F3E  EE20 F009          	lfsr	2,9
 12490  012F42  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12491  012F44  26D9               	addwf	fsr2l,f,c
 12492  012F46  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12493  012F48  22DA               	addwfc	fsr2h,f,c
 12494  012F4A  0EC9               	movlw	201
 12495  012F4C  D047               	goto	L11
 12496  012F4E                     
 12497                           ; BSR set to: 0
 12498                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 12499                           
 12500                           ; BSR set to: 0
 12501  012F4E  0E76               	movlw	low _PortD
 12502  012F50  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12503  012F52  0E01               	movlw	high _PortD
 12504  012F54  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12505  012F56  0E07               	movlw	7
 12506  012F58  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12507  012F5A  0E03               	movlw	3
 12508  012F5C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12509  012F5E  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12510                           
 12511                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 12512  012F62  0E76               	movlw	low _PortD
 12513  012F64  0100               	movlb	0	; () banked
 12514  012F66  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12515  012F68  0E01               	movlw	high _PortD
 12516  012F6A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12517  012F6C  0E06               	movlw	6
 12518  012F6E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12519  012F70  0E03               	movlw	3
 12520  012F72  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12521  012F74  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12522                           
 12523                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 12524  012F78  0E76               	movlw	low _PortD
 12525  012F7A  0100               	movlb	0	; () banked
 12526  012F7C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12527  012F7E  0E01               	movlw	high _PortD
 12528  012F80  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12529  012F82  0E04               	movlw	4
 12530  012F84  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12531  012F86  0E03               	movlw	3
 12532  012F88  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12533  012F8A  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12534                           
 12535                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 12536  012F8E  0E76               	movlw	low _PortD
 12537  012F90  0100               	movlb	0	; () banked
 12538  012F92  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12539  012F94  0E01               	movlw	high _PortD
 12540  012F96  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12541  012F98  0E05               	movlw	5
 12542  012F9A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12543  012F9C  0E00               	movlw	0
 12544  012F9E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12545  012FA0  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 12546                           
 12547                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 12548  012FA4  0100               	movlb	0	; () banked
 12549  012FA6  EE20 F003          	lfsr	2,3
 12550  012FAA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12551  012FAC  26D9               	addwf	fsr2l,f,c
 12552  012FAE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12553  012FB0  22DA               	addwfc	fsr2h,f,c
 12554  012FB2  0E6D               	movlw	109
 12555  012FB4  6EDE               	movwf	postinc2,c
 12556  012FB6  0E0F               	movlw	15
 12557  012FB8  6EDD               	movwf	postdec2,c
 12558                           
 12559                           ; BSR set to: 0
 12560                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 12561  012FBA  EE20 F006          	lfsr	2,6
 12562  012FBE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12563  012FC0  26D9               	addwf	fsr2l,f,c
 12564  012FC2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12565  012FC4  22DA               	addwfc	fsr2h,f,c
 12566  012FC6  0E6C               	movlw	108
 12567  012FC8  6EDE               	movwf	postinc2,c
 12568  012FCA  0E0F               	movlw	15
 12569  012FCC  6EDD               	movwf	postdec2,c
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 12573  012FCE  EE20 F009          	lfsr	2,9
 12574  012FD2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12575  012FD4  26D9               	addwf	fsr2l,f,c
 12576  012FD6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12577  012FD8  22DA               	addwfc	fsr2h,f,c
 12578  012FDA  0E6F               	movlw	111
 12579  012FDC                     L11:
 12580  012FDC  6EDE               	movwf	postinc2,c
 12581  012FDE  0E0F               	movlw	15
 12582  012FE0  6EDD               	movwf	postdec2,c
 12583                           
 12584                           ;SPI.c: 68: break;
 12585  012FE2  D008               	goto	l603
 12586  012FE4                     l601:
 12587                           
 12588                           ; BSR set to: 0
 12589                           
 12590                           ; BSR set to: 0
 12591  012FE4  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12592                           
 12593                           ; Switch size 1, requested type "space"
 12594                           ; Number of cases is 2, Range of values is 0 to 1
 12595                           ; switch strategies available:
 12596                           ; Name         Instructions Cycles
 12597                           ; simple_byte            7     4 (average)
 12598                           ;	Chosen strategy is simple_byte
 12599  012FE6  0A00               	xorlw	0	; case 0
 12600  012FE8  B4D8               	btfsc	status,2,c
 12601  012FEA  D769               	goto	l602
 12602  012FEC  0A01               	xorlw	1	; case 1
 12603  012FEE  A4D8               	btfss	status,2,c
 12604  012FF0  0012               	return	
 12605  012FF2  D7AD               	goto	l604
 12606  012FF4                     l603:
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12610                           
 12611                           ; BSR set to: 0
 12612  012FF4  EE20 F006          	lfsr	2,6
 12613  012FF8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12614  012FFA  26D9               	addwf	fsr2l,f,c
 12615  012FFC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12616  012FFE  22DA               	addwfc	fsr2h,f,c
 12617  013000  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12618  013004  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12619  013008  0E05               	movlw	5
 12620  01300A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12621  01300C  0E00               	movlw	0
 12622  01300E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12623  013010  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12624                           
 12625                           ;SPI.c: 77: switch(pMode)
 12626  013014  D08C               	goto	l607
 12627  013016                     
 12628                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 12629  013016  0100               	movlb	0	; () banked
 12630  013018  EE20 F006          	lfsr	2,6
 12631  01301C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12632  01301E  26D9               	addwf	fsr2l,f,c
 12633  013020  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12634  013022  22DA               	addwfc	fsr2h,f,c
 12635  013024  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12636  013028  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12637  01302C  0E04               	movlw	4
 12638  01302E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12639  013030  0E00               	movlw	0
 12640  013032  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12641  013034  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12642                           
 12643                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 12644  013038  0100               	movlb	0	; () banked
 12645  01303A  EE20 F003          	lfsr	2,3
 12646  01303E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12647  013040  26D9               	addwf	fsr2l,f,c
 12648  013042  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12649  013044  22DA               	addwfc	fsr2h,f,c
 12650  013046  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12651  01304A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12652  01304E  0E06               	movlw	6
 12653  013050  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12654  013052  0E00               	movlw	0
 12655  013054  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12656  013056  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12657                           
 12658                           ;SPI.c: 82: break;
 12659  01305A  D078               	goto	l609
 12660  01305C                     
 12661                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 12662  01305C  0100               	movlb	0	; () banked
 12663  01305E  EE20 F006          	lfsr	2,6
 12664  013062  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12665  013064  26D9               	addwf	fsr2l,f,c
 12666  013066  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12667  013068  22DA               	addwfc	fsr2h,f,c
 12668  01306A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12669  01306E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12670  013072  0E04               	movlw	4
 12671  013074  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12672  013076  0E00               	movlw	0
 12673  013078  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12674  01307A  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12675                           
 12676                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 12677  01307E  0100               	movlb	0	; () banked
 12678  013080  EE20 F003          	lfsr	2,3
 12679  013084  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12680  013086  26D9               	addwf	fsr2l,f,c
 12681  013088  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12682  01308A  22DA               	addwfc	fsr2h,f,c
 12683  01308C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12684  013090  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12685  013094  0E06               	movlw	6
 12686  013096  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12687  013098  0E01               	movlw	1
 12688  01309A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12689  01309C  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12690                           
 12691                           ;SPI.c: 86: break;
 12692  0130A0  D055               	goto	l609
 12693  0130A2                     
 12694                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 12695  0130A2  0100               	movlb	0	; () banked
 12696  0130A4  EE20 F006          	lfsr	2,6
 12697  0130A8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12698  0130AA  26D9               	addwf	fsr2l,f,c
 12699  0130AC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12700  0130AE  22DA               	addwfc	fsr2h,f,c
 12701  0130B0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12702  0130B4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12703  0130B8  0E04               	movlw	4
 12704  0130BA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12705  0130BC  0E01               	movlw	1
 12706  0130BE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12707  0130C0  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12708                           
 12709                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 12710  0130C4  0100               	movlb	0	; () banked
 12711  0130C6  EE20 F003          	lfsr	2,3
 12712  0130CA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12713  0130CC  26D9               	addwf	fsr2l,f,c
 12714  0130CE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12715  0130D0  22DA               	addwfc	fsr2h,f,c
 12716  0130D2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12717  0130D6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12718  0130DA  0E06               	movlw	6
 12719  0130DC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12720  0130DE  0E00               	movlw	0
 12721  0130E0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12722  0130E2  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12723                           
 12724                           ;SPI.c: 90: break;
 12725  0130E6  D032               	goto	l609
 12726  0130E8                     
 12727                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 12728  0130E8  0100               	movlb	0	; () banked
 12729  0130EA  EE20 F006          	lfsr	2,6
 12730  0130EE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12731  0130F0  26D9               	addwf	fsr2l,f,c
 12732  0130F2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12733  0130F4  22DA               	addwfc	fsr2h,f,c
 12734  0130F6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12735  0130FA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12736  0130FE  0E04               	movlw	4
 12737  013100  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12738  013102  0E01               	movlw	1
 12739  013104  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12740  013106  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12741                           
 12742                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 12743  01310A  0100               	movlb	0	; () banked
 12744  01310C  EE20 F003          	lfsr	2,3
 12745  013110  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12746  013112  26D9               	addwf	fsr2l,f,c
 12747  013114  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12748  013116  22DA               	addwfc	fsr2h,f,c
 12749  013118  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12750  01311C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12751  013120  0E06               	movlw	6
 12752  013122  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12753  013124  0E01               	movlw	1
 12754  013126  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12755  013128  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12756                           
 12757                           ;SPI.c: 94: break;
 12758  01312C  D00F               	goto	l609
 12759  01312E                     l607:
 12760  01312E  0100               	movlb	0	; () banked
 12761  013130  5192               	movf	SPI_Init@pMode& (0+255),w,b
 12762                           
 12763                           ; Switch size 1, requested type "space"
 12764                           ; Number of cases is 4, Range of values is 0 to 3
 12765                           ; switch strategies available:
 12766                           ; Name         Instructions Cycles
 12767                           ; simple_byte           13     7 (average)
 12768                           ;	Chosen strategy is simple_byte
 12769  013132  0A00               	xorlw	0	; case 0
 12770  013134  B4D8               	btfsc	status,2,c
 12771  013136  D76F               	goto	l608
 12772  013138  0A01               	xorlw	1	; case 1
 12773  01313A  B4D8               	btfsc	status,2,c
 12774  01313C  D78F               	goto	l610
 12775  01313E  0A03               	xorlw	3	; case 2
 12776  013140  B4D8               	btfsc	status,2,c
 12777  013142  D7AF               	goto	l611
 12778  013144  0A01               	xorlw	1	; case 3
 12779  013146  A4D8               	btfss	status,2,c
 12780  013148  0012               	return	
 12781  01314A  D7CE               	goto	l612
 12782  01314C                     l609:
 12783                           
 12784                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 12785                           
 12786                           ; BSR set to: 0
 12787  01314C  0100               	movlb	0	; () banked
 12788  01314E  EE20 F006          	lfsr	2,6
 12789  013152  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12790  013154  26D9               	addwf	fsr2l,f,c
 12791  013156  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12792  013158  22DA               	addwfc	fsr2h,f,c
 12793  01315A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12794  01315E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12795  013162  0E07               	movlw	7
 12796  013164  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12797  013166  0E00               	movlw	0
 12798  013168  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12799  01316A  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12800                           
 12801                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 12802  01316E  0100               	movlb	0	; () banked
 12803  013170  EE20 F006          	lfsr	2,6
 12804  013174  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12805  013176  26D9               	addwf	fsr2l,f,c
 12806  013178  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12807  01317A  22DA               	addwfc	fsr2h,f,c
 12808  01317C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12809  013180  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12810  013184  0E06               	movlw	6
 12811  013186  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12812  013188  0E00               	movlw	0
 12813  01318A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12814  01318C  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12815                           
 12816                           ;SPI.c: 106: Timer2_Init(pClock);
 12817  013190  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 12818  013194  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 12819  013198  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 12820  01319C  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 12821  0131A0  ECD5  F0AE         	call	_Timer2_Init	;wreg free
 12822                           
 12823                           ;SPI.c: 112: SPI_DisableISR(pInput);
 12824  0131A4  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 12825  0131A8  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 12826  0131AC  EC2C  F0C4         	call	_SPI_DisableISR	;wreg free
 12827                           
 12828                           ;SPI.c: 116: switch (pChannel)
 12829  0131B0  D004               	goto	l614
 12830  0131B2                     l615:
 12831                           
 12832                           ; BSR set to: 0
 12833  0131B2  869F               	bsf	3999,3,c	;volatile
 12834  0131B4  D00B               	goto	l616
 12835  0131B6                     l617:
 12836                           
 12837                           ; BSR set to: 0
 12838  0131B6  8EA5               	bsf	4005,7,c	;volatile
 12839  0131B8  D009               	goto	l616
 12840  0131BA                     l614:
 12841                           
 12842                           ; BSR set to: 0
 12843  0131BA  0100               	movlb	0	; () banked
 12844  0131BC  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12845                           
 12846                           ; Switch size 1, requested type "space"
 12847                           ; Number of cases is 2, Range of values is 0 to 1
 12848                           ; switch strategies available:
 12849                           ; Name         Instructions Cycles
 12850                           ; simple_byte            7     4 (average)
 12851                           ;	Chosen strategy is simple_byte
 12852  0131BE  0A00               	xorlw	0	; case 0
 12853  0131C0  B4D8               	btfsc	status,2,c
 12854  0131C2  D7F7               	goto	l615
 12855  0131C4  0A01               	xorlw	1	; case 1
 12856  0131C6  A4D8               	btfss	status,2,c
 12857  0131C8  0012               	return	
 12858  0131CA  D7F5               	goto	l617
 12859  0131CC                     l616:
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;SPI.c: 124: SPI_DCS(pInput);
 12863                           
 12864                           ; BSR set to: 0
 12865  0131CC  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 12866  0131D0  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 12867  0131D4  EC9F  F0C3         	call	_SPI_DCS	;wreg free
 12868                           
 12869                           ;SPI.c: 126: pInput->mBusy = 0;
 12870  0131D8  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 12871  0131DC  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 12872  0131E0  0E00               	movlw	0
 12873  0131E2  6EDF               	movwf	indf2,c
 12874                           
 12875                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 12876  0131E4  0100               	movlb	0	; () banked
 12877  0131E6  EE20 F006          	lfsr	2,6
 12878  0131EA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12879  0131EC  26D9               	addwf	fsr2l,f,c
 12880  0131EE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12881  0131F0  22DA               	addwfc	fsr2h,f,c
 12882  0131F2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12883  0131F6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12884  0131FA  0E00               	movlw	0
 12885  0131FC  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12886  0131FE  0E03               	movlw	3
 12887  013200  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12888  013202  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 12889                           
 12890                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12891  013206  0100               	movlb	0	; () banked
 12892  013208  EE20 F006          	lfsr	2,6
 12893  01320C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12894  01320E  26D9               	addwf	fsr2l,f,c
 12895  013210  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12896  013212  22DA               	addwfc	fsr2h,f,c
 12897  013214  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12898  013218  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12899  01321C  0E05               	movlw	5
 12900  01321E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12901  013220  0E01               	movlw	1
 12902  013222  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12903  013224  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 12904  013228  0012               	return		;funcret
 12905  01322A                     __end_of_SPI_Init:
 12906                           	opt stack 0
 12907                           tosu	equ	0xFFF
 12908                           tosh	equ	0xFFE
 12909                           tosl	equ	0xFFD
 12910                           pclath	equ	0xFFA
 12911                           tblptru	equ	0xFF8
 12912                           tblptrh	equ	0xFF7
 12913                           tblptrl	equ	0xFF6
 12914                           tablat	equ	0xFF5
 12915                           prodh	equ	0xFF4
 12916                           prodl	equ	0xFF3
 12917                           intcon	equ	0xFF2
 12918                           postinc0	equ	0xFEE
 12919                           wreg	equ	0xFE8
 12920                           indf1	equ	0xFE7
 12921                           postdec1	equ	0xFE5
 12922                           fsr1h	equ	0xFE2
 12923                           fsr1l	equ	0xFE1
 12924                           indf2	equ	0xFDF
 12925                           postinc2	equ	0xFDE
 12926                           postdec2	equ	0xFDD
 12927                           plusw2	equ	0xFDB
 12928                           fsr2h	equ	0xFDA
 12929                           fsr2l	equ	0xFD9
 12930                           status	equ	0xFD8
 12931                           
 12932 ;; *************** function _Timer2_Init *****************
 12933 ;; Defined at:
 12934 ;;		line 10 in file "Library/Timer2.c"
 12935 ;; Parameters:    Size  Location     Type
 12936 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 12937 ;; Auto vars:     Size  Location     Type
 12938 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 12939 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 12940 ;;  RDIV            4   18[BANK0 ] unsigned long 
 12941 ;; Return value:  Size  Location     Type
 12942 ;;                  1    wreg      void 
 12943 ;; Registers used:
 12944 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12945 ;; Tracked objects:
 12946 ;;		On entry : 0/0
 12947 ;;		On exit  : 0/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12951 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12953 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12954 ;;Total ram usage:       17 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:    8
 12957 ;; This function calls:
 12958 ;;		_Timer2_Clear
 12959 ;;		___lldiv
 12960 ;; This function is called by:
 12961 ;;		_SPI_Init
 12962 ;; This function uses a non-reentrant model
 12963 ;;
 12964                           
 12965                           	psect	text59
 12966  015DAA                     __ptext59:
 12967                           	opt stack 0
 12968  015DAA                     _Timer2_Init:
 12969                           	opt stack 19
 12970                           
 12971                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 12972                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 12973                           ;Timer2.c: 14: static UINT8 PRE = 0;
 12974                           ;Timer2.c: 15: static UINT32 DIV = 0;
 12975                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 12976                           
 12977                           ;incstack = 0
 12978  015DAA  0E00               	movlw	0
 12979  015DAC  0100               	movlb	0	; () banked
 12980  015DAE  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 12981  015DB0  0E6C               	movlw	108
 12982  015DB2  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 12983  015DB4  0EDC               	movlw	220
 12984  015DB6  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 12985  015DB8  0E02               	movlw	2
 12986  015DBA  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 12990                           ;Timer2.c: 20: pFrequency *= 2;
 12991  015DBC  90D8               	bcf	status,0,c
 12992  015DBE  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 12993  015DC0  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 12994  015DC2  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 12995  015DC4  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;Timer2.c: 23: pCPUClock /= 4;
 12999  015DC6  0E02               	movlw	2
 13000  015DC8  6F71               	movwf	??_Timer2_Init& (0+255),b
 13001  015DCA                     u12905:
 13002  015DCA  90D8               	bcf	status,0,c
 13003  015DCC  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 13004  015DCE  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 13005  015DD0  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 13006  015DD2  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 13007  015DD4  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 13008  015DD6  D7F9               	goto	u12905
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 13012  015DD8  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 13013  015DDC  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 13014  015DE0  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 13015  015DE4  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 13016  015DE8  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 13017  015DEC  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 13018  015DF0  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 13019  015DF4  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 13020  015DF8  EC6C  F0BA         	call	___lldiv	;wreg free
 13021  015DFC  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 13022  015E00  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 13023  015E04  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 13024  015E08  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 13025                           
 13026                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 13027  015E0C  D00E               	goto	l1828
 13028  015E0E                     l15415:
 13029                           
 13030                           ;Timer2.c: 28: {
 13031                           ;Timer2.c: 29: RDIV = 0;
 13032  015E0E  0E00               	movlw	0
 13033  015E10  0100               	movlb	0	; () banked
 13034  015E12  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 13035  015E14  0E00               	movlw	0
 13036  015E16  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 13037  015E18  0E00               	movlw	0
 13038  015E1A  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 13039  015E1C  0E00               	movlw	0
 13040  015E1E  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;Timer2.c: 30: INDEX ++;
 13044  015E20  2A3E               	incf	Timer2_Init@INDEX,f,c
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;Timer2.c: 31: if (INDEX >= 3)
 13048  015E22  0E02               	movlw	2
 13049  015E24  643E               	cpfsgt	Timer2_Init@INDEX,c
 13050  015E26  D001               	goto	l1828
 13051  015E28  D023               	goto	u12920
 13052  015E2A                     l1828:
 13053                           
 13054                           ; BSR set to: 0
 13055                           
 13056                           ; BSR set to: 0
 13057  015E2A  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 13058  015E2E  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 13059  015E32  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 13060  015E36  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 13061  015E3A  503E               	movf	Timer2_Init@INDEX,w,c
 13062  015E3C  0D01               	mullw	1
 13063  015E3E  0E3E               	movlw	low Timer2_Init@PRESCALE
 13064  015E40  24F3               	addwf	prodl,w,c
 13065  015E42  6EF6               	movwf	tblptrl,c
 13066  015E44  0EFC               	movlw	high Timer2_Init@PRESCALE
 13067  015E46  20F4               	addwfc	prodh,w,c
 13068  015E48  6EF7               	movwf	tblptrh,c
 13069  015E4A                     	if	1	;There are 3 active tblptr bytes
 13070  015E4A  6AF8               	clrf	tblptru,c
 13071  015E4C  0E00               	movlw	low (__mediumconst shr (0+16))
 13072  015E4E  22F8               	addwfc	tblptru,f,c
 13073  015E50                     	endif
 13074  015E50  0008               	tblrd		*
 13075  015E52  50F5               	movf	tablat,w,c
 13076  015E54  0100               	movlb	0	; () banked
 13077  015E56  6F64               	movwf	___lldiv@divisor& (0+255),b
 13078  015E58  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13079  015E5A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13080  015E5C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13081  015E5E  EC6C  F0BA         	call	___lldiv	;wreg free
 13082  015E62  0100               	movlb	0	; () banked
 13083  015E64  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13084  015E66  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 13085  015E68  E1D2               	bnz	l15415
 13086  015E6A  0561               	decf	(?___lldiv+1)& (0+255),w,b
 13087  015E6C  B0D8               	btfsc	status,0,c
 13088  015E6E  D7CF               	goto	l1827
 13089  015E70                     u12920:
 13090                           
 13091                           ; BSR set to: 0
 13092                           ;Timer2.c: 33: }
 13093                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 13094                           
 13095                           ; BSR set to: 0
 13096  015E70  50CA               	movf	4042,w,c	;volatile
 13097  015E72  183E               	xorwf	Timer2_Init@INDEX,w,c
 13098  015E74  0BFC               	andlw	-4
 13099  015E76  183E               	xorwf	Timer2_Init@INDEX,w,c
 13100  015E78  6ECA               	movwf	4042,c	;volatile
 13101                           
 13102                           ; BSR set to: 0
 13103                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 13104  015E7A  84CA               	bsf	4042,2,c	;volatile
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;Timer2.c: 44: Timer2_Clear();
 13108  015E7C  EC5D  F0C6         	call	_Timer2_Clear	;wreg free
 13109                           
 13110                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 13111  015E80  503E               	movf	Timer2_Init@INDEX,w,c
 13112  015E82  0D01               	mullw	1
 13113  015E84  0E3E               	movlw	low Timer2_Init@PRESCALE
 13114  015E86  24F3               	addwf	prodl,w,c
 13115  015E88  6EF6               	movwf	tblptrl,c
 13116  015E8A  0EFC               	movlw	high Timer2_Init@PRESCALE
 13117  015E8C  20F4               	addwfc	prodh,w,c
 13118  015E8E  6EF7               	movwf	tblptrh,c
 13119  015E90                     	if	1	;There are 3 active tblptr bytes
 13120  015E90  6AF8               	clrf	tblptru,c
 13121  015E92  0E00               	movlw	low (__mediumconst shr (0+16))
 13122  015E94  22F8               	addwfc	tblptru,f,c
 13123  015E96                     	endif
 13124  015E96  0008               	tblrd		*
 13125  015E98  CFF5 F03D          	movff	tablat,Timer2_Init@PRE
 13126                           
 13127                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 13128  015E9C  0EFF               	movlw	255
 13129  015E9E  0100               	movlb	0	; () banked
 13130  015EA0  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 13131  015EA2  0101               	movlb	1	; () banked
 13132  015EA4  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 13133  015EA6  0EFF               	movlw	255
 13134  015EA8  0100               	movlb	0	; () banked
 13135  015EAA  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 13136  015EAC  0101               	movlb	1	; () banked
 13137  015EAE  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 13138  015EB0  0EFF               	movlw	255
 13139  015EB2  0100               	movlb	0	; () banked
 13140  015EB4  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 13141  015EB6  0101               	movlb	1	; () banked
 13142  015EB8  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 13143  015EBA  0EFF               	movlw	255
 13144  015EBC  0100               	movlb	0	; () banked
 13145  015EBE  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 13146  015EC0  0101               	movlb	1	; () banked
 13147  015EC2  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 13148                           
 13149                           ; BSR set to: 1
 13150                           ;Timer2.c: 48: INDEX = DIV/PRE;
 13151  015EC4  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 13152  015EC8  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 13153  015ECC  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 13154  015ED0  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 13155  015ED4  503D               	movf	Timer2_Init@PRE,w,c
 13156  015ED6  0100               	movlb	0	; () banked
 13157  015ED8  6F64               	movwf	___lldiv@divisor& (0+255),b
 13158  015EDA  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13159  015EDC  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13160  015EDE  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13161  015EE0  EC6C  F0BA         	call	___lldiv	;wreg free
 13162  015EE4  0100               	movlb	0	; () banked
 13163  015EE6  5160               	movf	?___lldiv& (0+255),w,b
 13164  015EE8  6E3E               	movwf	Timer2_Init@INDEX,c
 13165                           
 13166                           ; BSR set to: 0
 13167                           ;Timer2.c: 49: PR2 = INDEX;
 13168  015EEA  C03E  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 13169                           
 13170                           ; BSR set to: 0
 13171  015EEE  0012               	return		;funcret
 13172  015EF0                     __end_of_Timer2_Init:
 13173                           	opt stack 0
 13174                           tosu	equ	0xFFF
 13175                           tosh	equ	0xFFE
 13176                           tosl	equ	0xFFD
 13177                           pclath	equ	0xFFA
 13178                           tblptru	equ	0xFF8
 13179                           tblptrh	equ	0xFF7
 13180                           tblptrl	equ	0xFF6
 13181                           tablat	equ	0xFF5
 13182                           prodh	equ	0xFF4
 13183                           prodl	equ	0xFF3
 13184                           intcon	equ	0xFF2
 13185                           postinc0	equ	0xFEE
 13186                           wreg	equ	0xFE8
 13187                           indf1	equ	0xFE7
 13188                           postdec1	equ	0xFE5
 13189                           fsr1h	equ	0xFE2
 13190                           fsr1l	equ	0xFE1
 13191                           indf2	equ	0xFDF
 13192                           postinc2	equ	0xFDE
 13193                           postdec2	equ	0xFDD
 13194                           plusw2	equ	0xFDB
 13195                           fsr2h	equ	0xFDA
 13196                           fsr2l	equ	0xFD9
 13197                           status	equ	0xFD8
 13198                           
 13199 ;; *************** function ___lldiv *****************
 13200 ;; Defined at:
 13201 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 13202 ;; Parameters:    Size  Location     Type
 13203 ;;  dividend        4    0[BANK0 ] unsigned long 
 13204 ;;  divisor         4    4[BANK0 ] unsigned long 
 13205 ;; Auto vars:     Size  Location     Type
 13206 ;;  quotient        4    8[BANK0 ] unsigned long 
 13207 ;;  counter         1   12[BANK0 ] unsigned char 
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  4    0[BANK0 ] unsigned long 
 13210 ;; Registers used:
 13211 ;;		wreg, status,2, status,0
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13217 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13218 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13220 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13221 ;;Total ram usage:       13 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; Hardware stack levels required when called:    7
 13224 ;; This function calls:
 13225 ;;		Nothing
 13226 ;; This function is called by:
 13227 ;;		_Timer2_Init
 13228 ;;		_rand_between
 13229 ;;		_I2C_Init
 13230 ;;		_Timer0_Init
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           	psect	text60
 13235  0174D8                     __ptext60:
 13236                           	opt stack 0
 13237  0174D8                     ___lldiv:
 13238                           	opt stack 19
 13239                           
 13240                           ; BSR set to: 0
 13241                           ;incstack = 0
 13242  0174D8  0E00               	movlw	0
 13243  0174DA  0100               	movlb	0	; () banked
 13244  0174DC  6F68               	movwf	___lldiv@quotient& (0+255),b
 13245  0174DE  0E00               	movlw	0
 13246  0174E0  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 13247  0174E2  0E00               	movlw	0
 13248  0174E4  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 13249  0174E6  0E00               	movlw	0
 13250  0174E8  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 13251                           
 13252                           ; BSR set to: 0
 13253  0174EA  5164               	movf	___lldiv@divisor& (0+255),w,b
 13254  0174EC  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13255  0174EE  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13256  0174F0  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13257  0174F2  B4D8               	btfsc	status,2,c
 13258  0174F4  D02A               	goto	l2906
 13259                           
 13260                           ; BSR set to: 0
 13261  0174F6  0E01               	movlw	1
 13262  0174F8  6F6C               	movwf	___lldiv@counter& (0+255),b
 13263  0174FA  D006               	goto	l2901
 13264  0174FC                     
 13265                           ; BSR set to: 0
 13266                           
 13267                           ; BSR set to: 0
 13268  0174FC  90D8               	bcf	status,0,c
 13269  0174FE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 13270  017500  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13271  017502  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13272  017504  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13273  017506  2B6C               	incf	___lldiv@counter& (0+255),f,b
 13274  017508                     l2901:
 13275                           
 13276                           ; BSR set to: 0
 13277                           
 13278                           ; BSR set to: 0
 13279  017508  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 13280  01750A  D7F8               	goto	l2902
 13281  01750C                     u12800:
 13282                           
 13283                           ; BSR set to: 0
 13284                           
 13285                           ; BSR set to: 0
 13286                           
 13287                           ; BSR set to: 0
 13288  01750C  90D8               	bcf	status,0,c
 13289  01750E  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 13290  017510  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13291  017512  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13292  017514  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13293                           
 13294                           ; BSR set to: 0
 13295  017516  5164               	movf	___lldiv@divisor& (0+255),w,b
 13296  017518  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 13297  01751A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13298  01751C  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 13299  01751E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13300  017520  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 13301  017522  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13302  017524  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 13303  017526  A0D8               	btfss	status,0,c
 13304  017528  D009               	goto	l2905
 13305                           
 13306                           ; BSR set to: 0
 13307  01752A  5164               	movf	___lldiv@divisor& (0+255),w,b
 13308  01752C  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 13309  01752E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13310  017530  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 13311  017532  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13312  017534  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 13313  017536  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13314  017538  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 13315                           
 13316                           ; BSR set to: 0
 13317  01753A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 13318  01753C                     l2905:
 13319                           
 13320                           ; BSR set to: 0
 13321                           
 13322                           ; BSR set to: 0
 13323  01753C  90D8               	bcf	status,0,c
 13324  01753E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 13325  017540  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 13326  017542  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 13327  017544  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 13328                           
 13329                           ; BSR set to: 0
 13330  017546  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 13331  017548  D7E1               	goto	u12800
 13332  01754A                     l2906:
 13333                           
 13334                           ; BSR set to: 0
 13335                           
 13336                           ; BSR set to: 0
 13337  01754A  C068  F060         	movff	___lldiv@quotient,?___lldiv
 13338  01754E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13339  017552  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13340  017556  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13341                           
 13342                           ; BSR set to: 0
 13343  01755A  0012               	return		;funcret
 13344  01755C                     __end_of___lldiv:
 13345                           	opt stack 0
 13346                           tosu	equ	0xFFF
 13347                           tosh	equ	0xFFE
 13348                           tosl	equ	0xFFD
 13349                           pclath	equ	0xFFA
 13350                           tblptru	equ	0xFF8
 13351                           tblptrh	equ	0xFF7
 13352                           tblptrl	equ	0xFF6
 13353                           tablat	equ	0xFF5
 13354                           prodh	equ	0xFF4
 13355                           prodl	equ	0xFF3
 13356                           intcon	equ	0xFF2
 13357                           postinc0	equ	0xFEE
 13358                           wreg	equ	0xFE8
 13359                           indf1	equ	0xFE7
 13360                           postdec1	equ	0xFE5
 13361                           fsr1h	equ	0xFE2
 13362                           fsr1l	equ	0xFE1
 13363                           indf2	equ	0xFDF
 13364                           postinc2	equ	0xFDE
 13365                           postdec2	equ	0xFDD
 13366                           plusw2	equ	0xFDB
 13367                           fsr2h	equ	0xFDA
 13368                           fsr2l	equ	0xFD9
 13369                           status	equ	0xFD8
 13370                           
 13371 ;; *************** function _Timer2_Clear *****************
 13372 ;; Defined at:
 13373 ;;		line 3 in file "Library/Timer2.c"
 13374 ;; Parameters:    Size  Location     Type
 13375 ;;		None
 13376 ;; Auto vars:     Size  Location     Type
 13377 ;;		None
 13378 ;; Return value:  Size  Location     Type
 13379 ;;                  1    wreg      void 
 13380 ;; Registers used:
 13381 ;;		None
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13391 ;;Total ram usage:        0 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    7
 13394 ;; This function calls:
 13395 ;;		Nothing
 13396 ;; This function is called by:
 13397 ;;		_Timer2_Init
 13398 ;; This function uses a non-reentrant model
 13399 ;;
 13400                           
 13401                           	psect	text61
 13402  018CBA                     __ptext61:
 13403                           	opt stack 0
 13404  018CBA                     _Timer2_Clear:
 13405                           	opt stack 19
 13406                           
 13407                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;incstack = 0
 13411  018CBA  929E               	bcf	3998,1,c	;volatile
 13412                           
 13413                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 13414  018CBC  929D               	bcf	3997,1,c	;volatile
 13415                           
 13416                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 13417  018CBE  929F               	bcf	3999,1,c	;volatile
 13418  018CC0  0012               	return		;funcret
 13419  018CC2                     __end_of_Timer2_Clear:
 13420                           	opt stack 0
 13421                           tosu	equ	0xFFF
 13422                           tosh	equ	0xFFE
 13423                           tosl	equ	0xFFD
 13424                           pclath	equ	0xFFA
 13425                           tblptru	equ	0xFF8
 13426                           tblptrh	equ	0xFF7
 13427                           tblptrl	equ	0xFF6
 13428                           tablat	equ	0xFF5
 13429                           prodh	equ	0xFF4
 13430                           prodl	equ	0xFF3
 13431                           intcon	equ	0xFF2
 13432                           postinc0	equ	0xFEE
 13433                           wreg	equ	0xFE8
 13434                           indf1	equ	0xFE7
 13435                           postdec1	equ	0xFE5
 13436                           fsr1h	equ	0xFE2
 13437                           fsr1l	equ	0xFE1
 13438                           indf2	equ	0xFDF
 13439                           postinc2	equ	0xFDE
 13440                           postdec2	equ	0xFDD
 13441                           plusw2	equ	0xFDB
 13442                           fsr2h	equ	0xFDA
 13443                           fsr2l	equ	0xFD9
 13444                           status	equ	0xFD8
 13445                           
 13446 ;; *************** function _SPI_DisableISR *****************
 13447 ;; Defined at:
 13448 ;;		line 181 in file "Library/SPI.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 13451 ;;		 -> SPI1(11), SPI2(11), 
 13452 ;; Auto vars:     Size  Location     Type
 13453 ;;		None
 13454 ;; Return value:  Size  Location     Type
 13455 ;;                  1    wreg      void 
 13456 ;; Registers used:
 13457 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13458 ;; Tracked objects:
 13459 ;;		On entry : 0/0
 13460 ;;		On exit  : 0/0
 13461 ;;		Unchanged: 0/0
 13462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;Total ram usage:        2 bytes
 13468 ;; Hardware stack levels used:    1
 13469 ;; Hardware stack levels required when called:    7
 13470 ;; This function calls:
 13471 ;;		Nothing
 13472 ;; This function is called by:
 13473 ;;		_SPI_Init
 13474 ;; This function uses a non-reentrant model
 13475 ;;
 13476                           
 13477                           	psect	text62
 13478  018858                     __ptext62:
 13479                           	opt stack 0
 13480  018858                     _SPI_DisableISR:
 13481                           	opt stack 20
 13482                           
 13483                           ;SPI.c: 183: switch (pInput->mChannel)
 13484                           
 13485                           ;incstack = 0
 13486  018858  D004               	goto	l654
 13487  01885A                     l655:
 13488                           
 13489                           ; BSR set to: 0
 13490  01885A  969D               	bcf	3997,3,c	;volatile
 13491  01885C  0012               	return	
 13492  01885E                     l657:
 13493                           
 13494                           ; BSR set to: 0
 13495  01885E  9EA3               	bcf	4003,7,c	;volatile
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;SPI.c: 188: };
 13499                           
 13500                           ; BSR set to: 0
 13501                           
 13502                           ;SPI.c: 187: default: return;
 13503  018860  0012               	return	
 13504  018862                     l654:
 13505                           
 13506                           ; BSR set to: 0
 13507  018862  0100               	movlb	0	; () banked
 13508  018864  EE20 F002          	lfsr	2,2
 13509  018868  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 13510  01886A  26D9               	addwf	fsr2l,f,c
 13511  01886C  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 13512  01886E  22DA               	addwfc	fsr2h,f,c
 13513  018870  50DF               	movf	indf2,w,c
 13514                           
 13515                           ; Switch size 1, requested type "space"
 13516                           ; Number of cases is 2, Range of values is 0 to 1
 13517                           ; switch strategies available:
 13518                           ; Name         Instructions Cycles
 13519                           ; simple_byte            7     4 (average)
 13520                           ;	Chosen strategy is simple_byte
 13521  018872  0A00               	xorlw	0	; case 0
 13522  018874  B4D8               	btfsc	status,2,c
 13523  018876  D7F1               	goto	l655
 13524  018878  0A01               	xorlw	1	; case 1
 13525  01887A  A4D8               	btfss	status,2,c
 13526  01887C  0012               	return	
 13527  01887E  D7EF               	goto	l657
 13528  018880                     __end_of_SPI_DisableISR:
 13529                           	opt stack 0
 13530                           tosu	equ	0xFFF
 13531                           tosh	equ	0xFFE
 13532                           tosl	equ	0xFFD
 13533                           pclath	equ	0xFFA
 13534                           tblptru	equ	0xFF8
 13535                           tblptrh	equ	0xFF7
 13536                           tblptrl	equ	0xFF6
 13537                           tablat	equ	0xFF5
 13538                           prodh	equ	0xFF4
 13539                           prodl	equ	0xFF3
 13540                           intcon	equ	0xFF2
 13541                           postinc0	equ	0xFEE
 13542                           wreg	equ	0xFE8
 13543                           indf1	equ	0xFE7
 13544                           postdec1	equ	0xFE5
 13545                           fsr1h	equ	0xFE2
 13546                           fsr1l	equ	0xFE1
 13547                           indf2	equ	0xFDF
 13548                           postinc2	equ	0xFDE
 13549                           postdec2	equ	0xFDD
 13550                           plusw2	equ	0xFDB
 13551                           fsr2h	equ	0xFDA
 13552                           fsr2l	equ	0xFD9
 13553                           status	equ	0xFD8
 13554                           
 13555 ;; *************** function _SPI_DCS *****************
 13556 ;; Defined at:
 13557 ;;		line 219 in file "Library/SPI.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 13560 ;;		 -> SPI1(11), SPI2(11), 
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;		None
 13563 ;; Return value:  Size  Location     Type
 13564 ;;                  1    wreg      void 
 13565 ;; Registers used:
 13566 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13567 ;; Tracked objects:
 13568 ;;		On entry : 0/0
 13569 ;;		On exit  : 0/0
 13570 ;;		Unchanged: 0/0
 13571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13572 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13576 ;;Total ram usage:        2 bytes
 13577 ;; Hardware stack levels used:    1
 13578 ;; Hardware stack levels required when called:    7
 13579 ;; This function calls:
 13580 ;;		Nothing
 13581 ;; This function is called by:
 13582 ;;		_SPI_Init
 13583 ;; This function uses a non-reentrant model
 13584 ;;
 13585                           
 13586                           	psect	text63
 13587  01873E                     __ptext63:
 13588                           	opt stack 0
 13589  01873E                     _SPI_DCS:
 13590                           	opt stack 20
 13591                           
 13592                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 13593                           
 13594                           ; BSR set to: 0
 13595                           ;incstack = 0
 13596  01873E  0100               	movlb	0	; () banked
 13597  018740  EE20 F002          	lfsr	2,2
 13598  018744  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 13599  018746  26D9               	addwf	fsr2l,f,c
 13600  018748  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 13601  01874A  22DA               	addwfc	fsr2h,f,c
 13602  01874C  50DF               	movf	indf2,w,c
 13603  01874E  A4D8               	btfss	status,2,c
 13604  018750  D007               	goto	l673
 13605                           
 13606                           ; BSR set to: 0
 13607                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 13608  018752  C18E  FFD9         	movff	_PortC+4,fsr2l
 13609  018756  C18F  FFDA         	movff	_PortC+5,fsr2h
 13610  01875A  0101               	movlb	1	; () banked
 13611  01875C  84DF               	bsf	indf2,2,c
 13612  01875E  0012               	return	
 13613  018760                     l673:
 13614                           
 13615                           ;SPI.c: 223: else
 13616                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 13617                           
 13618                           ; BSR set to: 1
 13619  018760  C17A  FFD9         	movff	_PortD+4,fsr2l
 13620  018764  C17B  FFDA         	movff	_PortD+5,fsr2h
 13621  018768  0101               	movlb	1	; () banked
 13622  01876A  8EDF               	bsf	indf2,7,c
 13623  01876C  0012               	return	
 13624  01876E                     __end_of_SPI_DCS:
 13625                           	opt stack 0
 13626                           tosu	equ	0xFFF
 13627                           tosh	equ	0xFFE
 13628                           tosl	equ	0xFFD
 13629                           pclath	equ	0xFFA
 13630                           tblptru	equ	0xFF8
 13631                           tblptrh	equ	0xFF7
 13632                           tblptrl	equ	0xFF6
 13633                           tablat	equ	0xFF5
 13634                           prodh	equ	0xFF4
 13635                           prodl	equ	0xFF3
 13636                           intcon	equ	0xFF2
 13637                           postinc0	equ	0xFEE
 13638                           wreg	equ	0xFE8
 13639                           indf1	equ	0xFE7
 13640                           postdec1	equ	0xFE5
 13641                           fsr1h	equ	0xFE2
 13642                           fsr1l	equ	0xFE1
 13643                           indf2	equ	0xFDF
 13644                           postinc2	equ	0xFDE
 13645                           postdec2	equ	0xFDD
 13646                           plusw2	equ	0xFDB
 13647                           fsr2h	equ	0xFDA
 13648                           fsr2l	equ	0xFD9
 13649                           status	equ	0xFD8
 13650                           
 13651 ;; *************** function _Go_Home *****************
 13652 ;; Defined at:
 13653 ;;		line 632 in file "dans.c"
 13654 ;; Parameters:    Size  Location     Type
 13655 ;;		None
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;		None
 13658 ;; Return value:  Size  Location     Type
 13659 ;;                  1    wreg      void 
 13660 ;; Registers used:
 13661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13662 ;; Tracked objects:
 13663 ;;		On entry : 0/0
 13664 ;;		On exit  : 0/0
 13665 ;;		Unchanged: 0/0
 13666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13671 ;;Total ram usage:        0 bytes
 13672 ;; Hardware stack levels used:    1
 13673 ;; Hardware stack levels required when called:   16
 13674 ;; This function calls:
 13675 ;;		_Go_Backward
 13676 ;;		_pop
 13677 ;; This function is called by:
 13678 ;;		_main
 13679 ;; This function uses a non-reentrant model
 13680 ;;
 13681                           
 13682                           	psect	text64
 13683  0189FE                     __ptext64:
 13684                           	opt stack 0
 13685  0189FE                     _Go_Home:
 13686                           	opt stack 14
 13687                           
 13688                           ;dans.c: 633: Go_Backward(pop(), 200);
 13689                           
 13690                           ; BSR set to: 1
 13691                           ;incstack = 0
 13692  0189FE  EC80  F0C0         	call	_pop	;wreg free
 13693  018A02  C083  F1F7         	movff	?_pop,Go_Backward@direction
 13694  018A06  C084  F1F8         	movff	?_pop+1,Go_Backward@direction+1
 13695  018A0A  0E00               	movlw	0
 13696  018A0C  0101               	movlb	1	; () banked
 13697  018A0E  6FFA               	movwf	(Go_Backward@spd+1)& (0+255),b
 13698  018A10  0EC8               	movlw	200
 13699  018A12  6FF9               	movwf	Go_Backward@spd& (0+255),b
 13700  018A14  EC60  F0B4         	call	_Go_Backward	;wreg free
 13701  018A18  0012               	return		;funcret
 13702  018A1A                     __end_of_Go_Home:
 13703                           	opt stack 0
 13704                           tosu	equ	0xFFF
 13705                           tosh	equ	0xFFE
 13706                           tosl	equ	0xFFD
 13707                           pclath	equ	0xFFA
 13708                           tblptru	equ	0xFF8
 13709                           tblptrh	equ	0xFF7
 13710                           tblptrl	equ	0xFF6
 13711                           tablat	equ	0xFF5
 13712                           prodh	equ	0xFF4
 13713                           prodl	equ	0xFF3
 13714                           intcon	equ	0xFF2
 13715                           postinc0	equ	0xFEE
 13716                           wreg	equ	0xFE8
 13717                           indf1	equ	0xFE7
 13718                           postdec1	equ	0xFE5
 13719                           fsr1h	equ	0xFE2
 13720                           fsr1l	equ	0xFE1
 13721                           indf2	equ	0xFDF
 13722                           postinc2	equ	0xFDE
 13723                           postdec2	equ	0xFDD
 13724                           plusw2	equ	0xFDB
 13725                           fsr2h	equ	0xFDA
 13726                           fsr2l	equ	0xFD9
 13727                           status	equ	0xFD8
 13728                           
 13729 ;; *************** function _pop *****************
 13730 ;; Defined at:
 13731 ;;		line 248 in file "dans.c"
 13732 ;; Parameters:    Size  Location     Type
 13733 ;;		None
 13734 ;; Auto vars:     Size  Location     Type
 13735 ;;  data            2   37[BANK0 ] int 
 13736 ;; Return value:  Size  Location     Type
 13737 ;;                  2   35[BANK0 ] int 
 13738 ;; Registers used:
 13739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13740 ;; Tracked objects:
 13741 ;;		On entry : 0/0
 13742 ;;		On exit  : 0/0
 13743 ;;		Unchanged: 0/0
 13744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13748 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13749 ;;Total ram usage:        4 bytes
 13750 ;; Hardware stack levels used:    1
 13751 ;; Hardware stack levels required when called:   13
 13752 ;; This function calls:
 13753 ;;		_isempty
 13754 ;;		_printf
 13755 ;; This function is called by:
 13756 ;;		_Navigate_Maze
 13757 ;;		_Go_Home
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           	psect	text65
 13762  018100                     __ptext65:
 13763                           	opt stack 0
 13764  018100                     _pop:
 13765                           	opt stack 16
 13766                           
 13767                           ;dans.c: 249: int data;
 13768                           ;dans.c: 251: if(!isempty()) {
 13769                           
 13770                           ;incstack = 0
 13771  018100  ECDA  F0C5         	call	_isempty	;wreg free
 13772  018104  0900               	iorlw	0
 13773  018106  A4D8               	btfss	status,2,c
 13774  018108  D019               	goto	l2387
 13775                           
 13776                           ;dans.c: 252: data = stack[top];
 13777  01810A  90D8               	bcf	status,0,c
 13778  01810C  0101               	movlb	1	; () banked
 13779  01810E  35E0               	rlcf	_top& (0+255),w,b
 13780  018110  6ED9               	movwf	fsr2l,c
 13781  018112  35E1               	rlcf	(_top+1)& (0+255),w,b
 13782  018114  6EDA               	movwf	fsr2h,c
 13783  018116  0E00               	movlw	low _stack
 13784  018118  26D9               	addwf	fsr2l,f,c
 13785  01811A  0E02               	movlw	high _stack
 13786  01811C  22DA               	addwfc	fsr2h,f,c
 13787  01811E  CFDE F085          	movff	postinc2,pop@data
 13788  018122  CFDD F086          	movff	postdec2,pop@data+1
 13789                           
 13790                           ; BSR set to: 1
 13791                           ;dans.c: 253: top = top - 1;
 13792  018126  0EFF               	movlw	255
 13793  018128  25E0               	addwf	_top& (0+255),w,b
 13794  01812A  6FE0               	movwf	_top& (0+255),b
 13795  01812C  0EFF               	movlw	255
 13796  01812E  21E1               	addwfc	(_top+1)& (0+255),w,b
 13797  018130  6FE1               	movwf	(_top+1)& (0+255),b
 13798                           
 13799                           ; BSR set to: 1
 13800                           ;dans.c: 254: return data;
 13801  018132  C085  F083         	movff	pop@data,?_pop
 13802  018136  C086  F084         	movff	pop@data+1,?_pop+1
 13803                           
 13804                           ; BSR set to: 1
 13805                           ;dans.c: 255: } else {
 13806                           
 13807                           ; BSR set to: 1
 13808  01813A  0012               	return	
 13809  01813C                     l2387:
 13810                           
 13811                           ;dans.c: 256: printf("Could not retrieve data, Stack is empty.\n");
 13812                           
 13813                           ; BSR set to: 1
 13814  01813C  0E7B               	movlw	low STR_21
 13815  01813E  0100               	movlb	0	; () banked
 13816  018140  6F75               	movwf	printf@f& (0+255),b
 13817  018142  0EFE               	movlw	high STR_21
 13818  018144  6F76               	movwf	(printf@f+1)& (0+255),b
 13819  018146  EC7E  F0AB         	call	_printf	;wreg free
 13820  01814A  0012               	return	
 13821  01814C                     __end_of_pop:
 13822                           	opt stack 0
 13823                           tosu	equ	0xFFF
 13824                           tosh	equ	0xFFE
 13825                           tosl	equ	0xFFD
 13826                           pclath	equ	0xFFA
 13827                           tblptru	equ	0xFF8
 13828                           tblptrh	equ	0xFF7
 13829                           tblptrl	equ	0xFF6
 13830                           tablat	equ	0xFF5
 13831                           prodh	equ	0xFF4
 13832                           prodl	equ	0xFF3
 13833                           intcon	equ	0xFF2
 13834                           postinc0	equ	0xFEE
 13835                           wreg	equ	0xFE8
 13836                           indf1	equ	0xFE7
 13837                           postdec1	equ	0xFE5
 13838                           fsr1h	equ	0xFE2
 13839                           fsr1l	equ	0xFE1
 13840                           indf2	equ	0xFDF
 13841                           postinc2	equ	0xFDE
 13842                           postdec2	equ	0xFDD
 13843                           plusw2	equ	0xFDB
 13844                           fsr2h	equ	0xFDA
 13845                           fsr2l	equ	0xFD9
 13846                           status	equ	0xFD8
 13847                           
 13848 ;; *************** function _isempty *****************
 13849 ;; Defined at:
 13850 ;;		line 231 in file "dans.c"
 13851 ;; Parameters:    Size  Location     Type
 13852 ;;		None
 13853 ;; Auto vars:     Size  Location     Type
 13854 ;;		None
 13855 ;; Return value:  Size  Location     Type
 13856 ;;                  1    wreg      unsigned char 
 13857 ;; Registers used:
 13858 ;;		wreg, status,2, status,0
 13859 ;; Tracked objects:
 13860 ;;		On entry : 0/0
 13861 ;;		On exit  : 0/0
 13862 ;;		Unchanged: 0/0
 13863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13868 ;;Total ram usage:        0 bytes
 13869 ;; Hardware stack levels used:    1
 13870 ;; Hardware stack levels required when called:    7
 13871 ;; This function calls:
 13872 ;;		Nothing
 13873 ;; This function is called by:
 13874 ;;		_pop
 13875 ;; This function uses a non-reentrant model
 13876 ;;
 13877                           
 13878                           	psect	text66
 13879  018BB4                     __ptext66:
 13880                           	opt stack 0
 13881  018BB4                     _isempty:
 13882                           	opt stack 21
 13883                           
 13884                           ;dans.c: 233: if(top == -1)
 13885                           
 13886                           ;incstack = 0
 13887  018BB4  0101               	movlb	1	; () banked
 13888  018BB6  29E0               	incf	_top& (0+255),w,b
 13889  018BB8  E105               	bnz	l16165
 13890  018BBA  29E1               	incf	(_top+1)& (0+255),w,b
 13891  018BBC  A4D8               	btfss	status,2,c
 13892  018BBE  D002               	goto	l2374
 13893                           
 13894                           ; BSR set to: 1
 13895                           ;dans.c: 234: return 1;
 13896  018BC0  0E01               	movlw	1
 13897                           
 13898                           ; BSR set to: 1
 13899                           
 13900                           ; BSR set to: 1
 13901  018BC2  0012               	return	
 13902  018BC4                     l2374:
 13903  018BC4                     l16165:
 13904                           
 13905                           ; BSR set to: 1
 13906                           ;dans.c: 235: else
 13907                           ;dans.c: 236: return 0;
 13908  018BC4  0E00               	movlw	0
 13909                           
 13910                           ; BSR set to: 1
 13911  018BC6  0012               	return	
 13912  018BC8                     __end_of_isempty:
 13913                           	opt stack 0
 13914                           tosu	equ	0xFFF
 13915                           tosh	equ	0xFFE
 13916                           tosl	equ	0xFFD
 13917                           pclath	equ	0xFFA
 13918                           tblptru	equ	0xFF8
 13919                           tblptrh	equ	0xFF7
 13920                           tblptrl	equ	0xFF6
 13921                           tablat	equ	0xFF5
 13922                           prodh	equ	0xFF4
 13923                           prodl	equ	0xFF3
 13924                           intcon	equ	0xFF2
 13925                           postinc0	equ	0xFEE
 13926                           wreg	equ	0xFE8
 13927                           indf1	equ	0xFE7
 13928                           postdec1	equ	0xFE5
 13929                           fsr1h	equ	0xFE2
 13930                           fsr1l	equ	0xFE1
 13931                           indf2	equ	0xFDF
 13932                           postinc2	equ	0xFDE
 13933                           postdec2	equ	0xFDD
 13934                           plusw2	equ	0xFDB
 13935                           fsr2h	equ	0xFDA
 13936                           fsr2l	equ	0xFD9
 13937                           status	equ	0xFD8
 13938                           
 13939 ;; *************** function _Go_Backward *****************
 13940 ;; Defined at:
 13941 ;;		line 577 in file "dans.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;  direction       2   15[BANK1 ] int 
 13944 ;;  spd             2   17[BANK1 ] int 
 13945 ;; Auto vars:     Size  Location     Type
 13946 ;;		None
 13947 ;; Return value:  Size  Location     Type
 13948 ;;                  1    wreg      void 
 13949 ;; Registers used:
 13950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13951 ;; Tracked objects:
 13952 ;;		On entry : 0/0
 13953 ;;		On exit  : 0/0
 13954 ;;		Unchanged: 0/0
 13955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13956 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13958 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13959 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;Total ram usage:        6 bytes
 13961 ;; Hardware stack levels used:    1
 13962 ;; Hardware stack levels required when called:   15
 13963 ;; This function calls:
 13964 ;;		_Travel
 13965 ;;		___wmul
 13966 ;; This function is called by:
 13967 ;;		_Navigate_Maze
 13968 ;;		_Go_Home
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           	psect	text67
 13973  0168C0                     __ptext67:
 13974                           	opt stack 0
 13975  0168C0                     _Go_Backward:
 13976                           	opt stack 14
 13977                           
 13978                           ;dans.c: 578: if(direction == 1)
 13979                           
 13980                           ; BSR set to: 1
 13981                           ;incstack = 0
 13982  0168C0  0101               	movlb	1	; () banked
 13983  0168C2  05F7               	decf	Go_Backward@direction& (0+255),w,b
 13984  0168C4  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 13985  0168C6  A4D8               	btfss	status,2,c
 13986  0168C8  D004               	goto	l2493
 13987                           
 13988                           ; BSR set to: 1
 13989                           ;dans.c: 579: direction = 3;
 13990  0168CA  0E00               	movlw	0
 13991  0168CC  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 13992  0168CE  0E03               	movlw	3
 13993  0168D0  D019               	goto	L14
 13994  0168D2                     l2493:
 13995                           
 13996                           ; BSR set to: 1
 13997                           ;dans.c: 580: else if(direction == 3)
 13998                           
 13999                           ; BSR set to: 1
 14000  0168D2  0E03               	movlw	3
 14001  0168D4  19F7               	xorwf	Go_Backward@direction& (0+255),w,b
 14002  0168D6  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 14003  0168D8  A4D8               	btfss	status,2,c
 14004  0168DA  D004               	goto	l2495
 14005                           
 14006                           ; BSR set to: 1
 14007                           ;dans.c: 581: direction =1;
 14008  0168DC  0E00               	movlw	0
 14009  0168DE  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 14010  0168E0  0E01               	movlw	1
 14011  0168E2  D010               	goto	L14
 14012  0168E4                     l2495:
 14013                           
 14014                           ; BSR set to: 1
 14015                           ;dans.c: 583: else if(direction == 0)
 14016                           
 14017                           ; BSR set to: 1
 14018  0168E4  51F7               	movf	Go_Backward@direction& (0+255),w,b
 14019  0168E6  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 14020  0168E8  A4D8               	btfss	status,2,c
 14021  0168EA  D004               	goto	l2497
 14022                           
 14023                           ; BSR set to: 1
 14024                           ;dans.c: 584: direction = 2;
 14025  0168EC  0E00               	movlw	0
 14026  0168EE  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 14027  0168F0  0E02               	movlw	2
 14028  0168F2  D008               	goto	L14
 14029  0168F4                     l2497:
 14030                           
 14031                           ; BSR set to: 1
 14032                           ;dans.c: 585: else if(direction == 2)
 14033                           
 14034                           ; BSR set to: 1
 14035  0168F4  0E02               	movlw	2
 14036  0168F6  19F7               	xorwf	Go_Backward@direction& (0+255),w,b
 14037  0168F8  11F8               	iorwf	(Go_Backward@direction+1)& (0+255),w,b
 14038  0168FA  A4D8               	btfss	status,2,c
 14039  0168FC  D004               	goto	l2499
 14040                           
 14041                           ; BSR set to: 1
 14042                           ;dans.c: 586: direction = 0;
 14043  0168FE  0E00               	movlw	0
 14044  016900  6FF8               	movwf	(Go_Backward@direction+1)& (0+255),b
 14045  016902  0E00               	movlw	0
 14046  016904                     L14:
 14047  016904  6FF7               	movwf	Go_Backward@direction& (0+255),b
 14048  016906                     l2499:
 14049                           
 14050                           ; BSR set to: 1
 14051                           ;dans.c: 588: Travel(direction, 970, 0, spd, 0);
 14052                           
 14053                           ; BSR set to: 1
 14054                           
 14055                           ; BSR set to: 1
 14056                           
 14057                           ; BSR set to: 1
 14058                           
 14059                           ; BSR set to: 1
 14060  016906  C1F7  F0F1         	movff	Go_Backward@direction,Travel@direction
 14061  01690A  C1F8  F0F2         	movff	Go_Backward@direction+1,Travel@direction+1
 14062  01690E  0E03               	movlw	3
 14063  016910  0100               	movlb	0	; () banked
 14064  016912  6FF4               	movwf	(Travel@Dist+1)& (0+255),b
 14065  016914  0ECA               	movlw	202
 14066  016916  6FF3               	movwf	Travel@Dist& (0+255),b
 14067  016918  0E00               	movlw	0
 14068  01691A  6FF6               	movwf	(Travel@Test_ADC+1)& (0+255),b
 14069  01691C  0E00               	movlw	0
 14070  01691E  6FF5               	movwf	Travel@Test_ADC& (0+255),b
 14071  016920  C1F9  F0F7         	movff	Go_Backward@spd,Travel@Spd
 14072  016924  C1FA  F0F8         	movff	Go_Backward@spd+1,Travel@Spd+1
 14073  016928  0E00               	movlw	0
 14074  01692A  6FFA               	movwf	(Travel@Wall+1)& (0+255),b
 14075  01692C  0E00               	movlw	0
 14076  01692E  6FF9               	movwf	Travel@Wall& (0+255),b
 14077  016930  EC76  F091         	call	_Travel	;wreg free
 14078                           
 14079                           ;dans.c: 589: maze[X_Pos][Y_Pos].Options += 1;
 14080  016934  C13C  F060         	movff	_X_Pos,___wmul@multiplier
 14081  016938  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
 14082  01693C  0E00               	movlw	0
 14083  01693E  0100               	movlb	0	; () banked
 14084  016940  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14085  016942  0E32               	movlw	50
 14086  016944  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14087  016946  EC40  F0C4         	call	___wmul	;wreg free
 14088  01694A  0E00               	movlw	low _maze
 14089  01694C  0101               	movlb	1	; () banked
 14090  01694E  6FFB               	movwf	??_Go_Backward& (0+255),b
 14091  016950  0E03               	movlw	high _maze
 14092  016952  6FFC               	movwf	(??_Go_Backward+1)& (0+255),b
 14093  016954  0100               	movlb	0	; () banked
 14094  016956  5160               	movf	?___wmul& (0+255),w,b
 14095  016958  0101               	movlb	1	; () banked
 14096  01695A  27FB               	addwf	??_Go_Backward& (0+255),f,b
 14097  01695C  0100               	movlb	0	; () banked
 14098  01695E  5161               	movf	(?___wmul+1)& (0+255),w,b
 14099  016960  0101               	movlb	1	; () banked
 14100  016962  23FC               	addwfc	(??_Go_Backward+1)& (0+255),f,b
 14101  016964  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
 14102  016968  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
 14103  01696C  0E00               	movlw	0
 14104  01696E  0100               	movlb	0	; () banked
 14105  016970  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14106  016972  0E0A               	movlw	10
 14107  016974  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14108  016976  EC40  F0C4         	call	___wmul	;wreg free
 14109  01697A  0100               	movlb	0	; () banked
 14110  01697C  5160               	movf	?___wmul& (0+255),w,b
 14111  01697E  0101               	movlb	1	; () banked
 14112  016980  27FB               	addwf	??_Go_Backward& (0+255),f,b
 14113  016982  0100               	movlb	0	; () banked
 14114  016984  5161               	movf	(?___wmul+1)& (0+255),w,b
 14115  016986  0101               	movlb	1	; () banked
 14116  016988  23FC               	addwfc	(??_Go_Backward+1)& (0+255),f,b
 14117  01698A  0E08               	movlw	8
 14118  01698C  25FB               	addwf	??_Go_Backward& (0+255),w,b
 14119  01698E  6ED9               	movwf	fsr2l,c
 14120  016990  0E00               	movlw	0
 14121  016992  21FC               	addwfc	(??_Go_Backward+1)& (0+255),w,b
 14122  016994  6EDA               	movwf	fsr2h,c
 14123  016996  2ADE               	incf	postinc2,f,c
 14124  016998  0E00               	movlw	0
 14125  01699A  22DD               	addwfc	postdec2,f,c
 14126                           
 14127                           ; BSR set to: 1
 14128  01699C  0012               	return		;funcret
 14129  01699E                     __end_of_Go_Backward:
 14130                           	opt stack 0
 14131                           tosu	equ	0xFFF
 14132                           tosh	equ	0xFFE
 14133                           tosl	equ	0xFFD
 14134                           pclath	equ	0xFFA
 14135                           tblptru	equ	0xFF8
 14136                           tblptrh	equ	0xFF7
 14137                           tblptrl	equ	0xFF6
 14138                           tablat	equ	0xFF5
 14139                           prodh	equ	0xFF4
 14140                           prodl	equ	0xFF3
 14141                           intcon	equ	0xFF2
 14142                           postinc0	equ	0xFEE
 14143                           wreg	equ	0xFE8
 14144                           indf1	equ	0xFE7
 14145                           postdec1	equ	0xFE5
 14146                           fsr1h	equ	0xFE2
 14147                           fsr1l	equ	0xFE1
 14148                           indf2	equ	0xFDF
 14149                           postinc2	equ	0xFDE
 14150                           postdec2	equ	0xFDD
 14151                           plusw2	equ	0xFDB
 14152                           fsr2h	equ	0xFDA
 14153                           fsr2l	equ	0xFD9
 14154                           status	equ	0xFD8
 14155                           
 14156 ;; *************** function _Travel *****************
 14157 ;; Defined at:
 14158 ;;		line 347 in file "dans.c"
 14159 ;; Parameters:    Size  Location     Type
 14160 ;;  direction       2  145[BANK0 ] int 
 14161 ;;  Dist            2  147[BANK0 ] int 
 14162 ;;  Test_ADC        2  149[BANK0 ] int 
 14163 ;;  Spd             2  151[BANK0 ] int 
 14164 ;;  Wall            2  153[BANK0 ] int 
 14165 ;; Auto vars:     Size  Location     Type
 14166 ;;  rev_Dist        2    6[BANK1 ] int 
 14167 ;;  error           2   13[BANK1 ] int 
 14168 ;;  Req_Dir         2   11[BANK1 ] int 
 14169 ;;  Dist_Travell    2    9[BANK1 ] int 
 14170 ;;  spd2            2    4[BANK1 ] int 
 14171 ;;  spd1            2    2[BANK1 ] int 
 14172 ;;  Dir             2    0[BANK1 ] int 
 14173 ;;  Prev_Angle      1    8[BANK1 ] unsigned char 
 14174 ;; Return value:  Size  Location     Type
 14175 ;;                  2  145[BANK0 ] int 
 14176 ;; Registers used:
 14177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14178 ;; Tracked objects:
 14179 ;;		On entry : 0/0
 14180 ;;		On exit  : 0/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14183 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14184 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14185 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14186 ;;      Totals:         0      14      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14187 ;;Total ram usage:       29 bytes
 14188 ;; Hardware stack levels used:    1
 14189 ;; Hardware stack levels required when called:   14
 14190 ;; This function calls:
 14191 ;;		_ADCAverage
 14192 ;;		_Console_Render
 14193 ;;		_Drive
 14194 ;;		_Get_VirtualWall_State
 14195 ;;		_Move_ADC_To
 14196 ;;		_Robot_Stop
 14197 ;;		_Turn
 14198 ;;		_UpdateDistance
 14199 ;;		___wmul
 14200 ;;		_printf
 14201 ;;		_push
 14202 ;; This function is called by:
 14203 ;;		_main
 14204 ;;		_Go_Backward
 14205 ;;		_Navigate_Maze
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text68
 14210  0122EC                     __ptext68:
 14211                           	opt stack 0
 14212  0122EC                     _Travel:
 14213                           	opt stack 16
 14214                           
 14215                           ;dans.c: 348: int Dist_Travelled = 0;
 14216                           
 14217                           ; BSR set to: 1
 14218                           ;incstack = 0
 14219  0122EC  0E00               	movlw	0
 14220  0122EE  0101               	movlb	1	; () banked
 14221  0122F0  6FF2               	movwf	(Travel@Dist_Travelled+1)& (0+255),b
 14222  0122F2  0E00               	movlw	0
 14223  0122F4  6FF1               	movwf	Travel@Dist_Travelled& (0+255),b
 14224                           
 14225                           ;dans.c: 349: int Req_Dir = 0;
 14226  0122F6  0E00               	movlw	0
 14227  0122F8  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14228  0122FA  0E00               	movlw	0
 14229  0122FC  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14230                           
 14231                           ; BSR set to: 1
 14232                           ;dans.c: 350: int Dir;
 14233                           ;dans.c: 351: bool Prev_Angle;
 14234                           ;dans.c: 352: if (Wall == 0 && flag == 0){
 14235  0122FE  0100               	movlb	0	; () banked
 14236  012300  51F9               	movf	Travel@Wall& (0+255),w,b
 14237  012302  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14238  012304  A4D8               	btfss	status,2,c
 14239  012306  D004               	goto	l2420
 14240                           
 14241                           ; BSR set to: 0
 14242  012308  502C               	movf	_flag,w,c
 14243  01230A  102D               	iorwf	_flag+1,w,c
 14244  01230C  B4D8               	btfsc	status,2,c
 14245  01230E  D014               	goto	l2423
 14246  012310                     l2420:
 14247                           
 14248                           ;dans.c: 359: else if (Wall == 0 && flag != 0){
 14249                           
 14250                           ; BSR set to: 1
 14251  012310  0100               	movlb	0	; () banked
 14252  012312  51F9               	movf	Travel@Wall& (0+255),w,b
 14253  012314  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14254  012316  A4D8               	btfss	status,2,c
 14255  012318  D012               	goto	l2422
 14256                           
 14257                           ; BSR set to: 0
 14258  01231A  502C               	movf	_flag,w,c
 14259  01231C  102D               	iorwf	_flag+1,w,c
 14260  01231E  B4D8               	btfsc	status,2,c
 14261  012320  D00E               	goto	l2422
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;dans.c: 360: if (Prev_Angle != 0)
 14265  012322  0101               	movlb	1	; () banked
 14266  012324  51F0               	movf	Travel@Prev_Angle& (0+255),w,b
 14267  012326  B4D8               	btfsc	status,2,c
 14268  012328  D007               	goto	l2423
 14269                           
 14270                           ; BSR set to: 1
 14271                           ;dans.c: 361: Move_ADC_To(-90);
 14272  01232A  0EFF               	movlw	255
 14273  01232C  0100               	movlb	0	; () banked
 14274  01232E  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
 14275  012330  0EA6               	movlw	166
 14276  012332  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
 14277  012334  EC32  F0AC         	call	_Move_ADC_To	;wreg free
 14278  012338                     l2423:
 14279                           
 14280                           ;dans.c: 362: Prev_Angle = 0;
 14281  012338  0E00               	movlw	0
 14282  01233A  0101               	movlb	1	; () banked
 14283  01233C  6FF0               	movwf	Travel@Prev_Angle& (0+255),b
 14284  01233E                     l2422:
 14285                           
 14286                           ;dans.c: 363: }
 14287                           ;dans.c: 365: if (Wall == 1 && flag != 0){
 14288                           
 14289                           ; BSR set to: 1
 14290                           
 14291                           ; BSR set to: 1
 14292  01233E  0100               	movlb	0	; () banked
 14293  012340  05F9               	decf	Travel@Wall& (0+255),w,b
 14294  012342  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14295  012344  A4D8               	btfss	status,2,c
 14296  012346  D012               	goto	l2424
 14297                           
 14298                           ; BSR set to: 0
 14299  012348  502C               	movf	_flag,w,c
 14300  01234A  102D               	iorwf	_flag+1,w,c
 14301  01234C  B4D8               	btfsc	status,2,c
 14302  01234E  D00E               	goto	l2424
 14303                           
 14304                           ; BSR set to: 0
 14305                           ;dans.c: 366: if (Prev_Angle != 1)
 14306  012350  0101               	movlb	1	; () banked
 14307  012352  05F0               	decf	Travel@Prev_Angle& (0+255),w,b
 14308  012354  B4D8               	btfsc	status,2,c
 14309  012356  D007               	goto	l2425
 14310                           
 14311                           ; BSR set to: 1
 14312                           ;dans.c: 367: Move_ADC_To(90);
 14313  012358  0E00               	movlw	0
 14314  01235A  0100               	movlb	0	; () banked
 14315  01235C  6FAA               	movwf	(Move_ADC_To@Angle+1)& (0+255),b
 14316  01235E  0E5A               	movlw	90
 14317  012360  6FA9               	movwf	Move_ADC_To@Angle& (0+255),b
 14318  012362  EC32  F0AC         	call	_Move_ADC_To	;wreg free
 14319  012366                     l2425:
 14320                           
 14321                           ;dans.c: 368: Prev_Angle = 1;
 14322  012366  0E01               	movlw	1
 14323  012368  0101               	movlb	1	; () banked
 14324  01236A  6FF0               	movwf	Travel@Prev_Angle& (0+255),b
 14325  01236C                     l2424:
 14326                           
 14327                           ;dans.c: 369: }
 14328                           ;dans.c: 371: if(direction == Current_Direction){
 14329                           
 14330                           ; BSR set to: 1
 14331  01236C  0101               	movlb	1	; () banked
 14332  01236E  51E2               	movf	_Current_Direction& (0+255),w,b
 14333  012370  0100               	movlb	0	; () banked
 14334  012372  19F1               	xorwf	Travel@direction& (0+255),w,b
 14335  012374  E106               	bnz	l16019
 14336  012376  0101               	movlb	1	; () banked
 14337  012378  51E3               	movf	(_Current_Direction+1)& (0+255),w,b
 14338  01237A  0100               	movlb	0	; () banked
 14339  01237C  19F2               	xorwf	(Travel@direction+1)& (0+255),w,b
 14340  01237E  B4D8               	btfsc	status,2,c
 14341  012380  D092               	goto	l2427
 14342  012382                     l16019:
 14343                           
 14344                           ; BSR set to: 0
 14345                           ;dans.c: 374: else {
 14346                           ;dans.c: 375: Req_Dir = direction - Current_Direction;
 14347  012382  C1E2  F0FB         	movff	_Current_Direction,??_Travel
 14348  012386  C1E3  F0FC         	movff	_Current_Direction+1,??_Travel+1
 14349  01238A  1FFB               	comf	??_Travel& (0+255),f,b
 14350  01238C  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14351  01238E  4BFB               	infsnz	??_Travel& (0+255),f,b
 14352  012390  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14353  012392  51F1               	movf	Travel@direction& (0+255),w,b
 14354  012394  25FB               	addwf	??_Travel& (0+255),w,b
 14355  012396  0101               	movlb	1	; () banked
 14356  012398  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14357  01239A  0100               	movlb	0	; () banked
 14358  01239C  51F2               	movf	(Travel@direction+1)& (0+255),w,b
 14359  01239E  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14360  0123A0  0101               	movlb	1	; () banked
 14361  0123A2  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14362                           
 14363                           ;dans.c: 377: if (Req_Dir < 0){
 14364  0123A4  AFF4               	btfss	(Travel@Req_Dir+1)& (0+255),7,b
 14365  0123A6  D03A               	goto	l2428
 14366                           
 14367                           ; BSR set to: 1
 14368                           ;dans.c: 378: Req_Dir = 83*Req_Dir*-1;
 14369  0123A8  C1F3  F0FB         	movff	Travel@Req_Dir,??_Travel
 14370  0123AC  C1F4  F0FC         	movff	Travel@Req_Dir+1,??_Travel+1
 14371  0123B0  0100               	movlb	0	; () banked
 14372  0123B2  1FFB               	comf	??_Travel& (0+255),f,b
 14373  0123B4  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14374  0123B6  4BFB               	infsnz	??_Travel& (0+255),f,b
 14375  0123B8  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14376  0123BA  C0FB  F060         	movff	??_Travel,___wmul@multiplier
 14377  0123BE  C0FC  F061         	movff	??_Travel+1,___wmul@multiplier+1
 14378  0123C2  0E00               	movlw	0
 14379  0123C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14380  0123C6  0E53               	movlw	83
 14381  0123C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14382  0123CA  EC40  F0C4         	call	___wmul	;wreg free
 14383  0123CE  C060  F1F3         	movff	?___wmul,Travel@Req_Dir
 14384  0123D2  C061  F1F4         	movff	?___wmul+1,Travel@Req_Dir+1
 14385                           
 14386                           ;dans.c: 379: Dir = 1;
 14387  0123D6  0E00               	movlw	0
 14388  0123D8  0101               	movlb	1	; () banked
 14389  0123DA  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14390  0123DC  0E01               	movlw	1
 14391  0123DE  6FE8               	movwf	Travel@Dir& (0+255),b
 14392                           
 14393                           ; BSR set to: 1
 14394                           ;dans.c: 380: if(Req_Dir > 166){
 14395  0123E0  BFF4               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
 14396  0123E2  D04E               	goto	l2431
 14397  0123E4  51F4               	movf	(Travel@Req_Dir+1)& (0+255),w,b
 14398  0123E6  E104               	bnz	u13330
 14399  0123E8  0EA7               	movlw	167
 14400  0123EA  5DF3               	subwf	Travel@Req_Dir& (0+255),w,b
 14401  0123EC  A0D8               	btfss	status,0,c
 14402  0123EE  D048               	goto	l2431
 14403  0123F0                     u13330:
 14404                           
 14405                           ; BSR set to: 1
 14406                           ;dans.c: 381: Req_Dir = 332 - Req_Dir;
 14407  0123F0  C1F3  F0FB         	movff	Travel@Req_Dir,??_Travel
 14408  0123F4  C1F4  F0FC         	movff	Travel@Req_Dir+1,??_Travel+1
 14409  0123F8  0100               	movlb	0	; () banked
 14410  0123FA  1FFB               	comf	??_Travel& (0+255),f,b
 14411  0123FC  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14412  0123FE  4BFB               	infsnz	??_Travel& (0+255),f,b
 14413  012400  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14414  012402  0E4C               	movlw	76
 14415  012404  25FB               	addwf	??_Travel& (0+255),w,b
 14416  012406  0101               	movlb	1	; () banked
 14417  012408  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14418  01240A  0E01               	movlw	1
 14419  01240C  0100               	movlb	0	; () banked
 14420  01240E  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14421  012410  0101               	movlb	1	; () banked
 14422  012412  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14423                           
 14424                           ; BSR set to: 1
 14425                           ;dans.c: 382: Dir = 0;
 14426  012414  0E00               	movlw	0
 14427  012416  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14428  012418  0E00               	movlw	0
 14429  01241A  D031               	goto	L15
 14430  01241C                     l2428:
 14431                           
 14432                           ; BSR set to: 1
 14433                           ;dans.c: 385: else{
 14434                           ;dans.c: 386: Req_Dir = 83*Req_Dir;
 14435                           
 14436                           ; BSR set to: 1
 14437  01241C  C1F3  F060         	movff	Travel@Req_Dir,___wmul@multiplier
 14438  012420  C1F4  F061         	movff	Travel@Req_Dir+1,___wmul@multiplier+1
 14439  012424  0E00               	movlw	0
 14440  012426  0100               	movlb	0	; () banked
 14441  012428  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14442  01242A  0E53               	movlw	83
 14443  01242C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14444  01242E  EC40  F0C4         	call	___wmul	;wreg free
 14445  012432  C060  F1F3         	movff	?___wmul,Travel@Req_Dir
 14446  012436  C061  F1F4         	movff	?___wmul+1,Travel@Req_Dir+1
 14447                           
 14448                           ;dans.c: 387: Dir = 0;
 14449  01243A  0E00               	movlw	0
 14450  01243C  0101               	movlb	1	; () banked
 14451  01243E  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14452  012440  0E00               	movlw	0
 14453  012442  6FE8               	movwf	Travel@Dir& (0+255),b
 14454                           
 14455                           ; BSR set to: 1
 14456                           ;dans.c: 388: if(Req_Dir > 166){
 14457  012444  BFF4               	btfsc	(Travel@Req_Dir+1)& (0+255),7,b
 14458  012446  D01C               	goto	l2431
 14459  012448  51F4               	movf	(Travel@Req_Dir+1)& (0+255),w,b
 14460  01244A  E104               	bnz	u13340
 14461  01244C  0EA7               	movlw	167
 14462  01244E  5DF3               	subwf	Travel@Req_Dir& (0+255),w,b
 14463  012450  A0D8               	btfss	status,0,c
 14464  012452  D016               	goto	l2431
 14465  012454                     u13340:
 14466                           
 14467                           ; BSR set to: 1
 14468                           ;dans.c: 389: Req_Dir = 332 - Req_Dir;
 14469  012454  C1F3  F0FB         	movff	Travel@Req_Dir,??_Travel
 14470  012458  C1F4  F0FC         	movff	Travel@Req_Dir+1,??_Travel+1
 14471  01245C  0100               	movlb	0	; () banked
 14472  01245E  1FFB               	comf	??_Travel& (0+255),f,b
 14473  012460  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14474  012462  4BFB               	infsnz	??_Travel& (0+255),f,b
 14475  012464  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14476  012466  0E4C               	movlw	76
 14477  012468  25FB               	addwf	??_Travel& (0+255),w,b
 14478  01246A  0101               	movlb	1	; () banked
 14479  01246C  6FF3               	movwf	Travel@Req_Dir& (0+255),b
 14480  01246E  0E01               	movlw	1
 14481  012470  0100               	movlb	0	; () banked
 14482  012472  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14483  012474  0101               	movlb	1	; () banked
 14484  012476  6FF4               	movwf	(Travel@Req_Dir+1)& (0+255),b
 14485                           
 14486                           ; BSR set to: 1
 14487                           ;dans.c: 390: Dir = 1;
 14488  012478  0E00               	movlw	0
 14489  01247A  6FE9               	movwf	(Travel@Dir+1)& (0+255),b
 14490  01247C  0E01               	movlw	1
 14491  01247E                     L15:
 14492  01247E  6FE8               	movwf	Travel@Dir& (0+255),b
 14493  012480                     l2431:
 14494                           
 14495                           ; BSR set to: 1
 14496                           ;dans.c: 391: }
 14497                           ;dans.c: 392: }
 14498                           ;dans.c: 393: Turn(Req_Dir, 200, Dir);
 14499                           
 14500                           ; BSR set to: 1
 14501                           
 14502                           ; BSR set to: 1
 14503  012480  C1F3  F061         	movff	Travel@Req_Dir,Turn@Angle
 14504  012484  C1F4  F062         	movff	Travel@Req_Dir+1,Turn@Angle+1
 14505  012488  0E00               	movlw	0
 14506  01248A  0100               	movlb	0	; () banked
 14507  01248C  6F64               	movwf	(Turn@Speed+1)& (0+255),b
 14508  01248E  0EC8               	movlw	200
 14509  012490  6F63               	movwf	Turn@Speed& (0+255),b
 14510  012492  C1E8  F065         	movff	Travel@Dir,Turn@Dir
 14511  012496  C1E9  F066         	movff	Travel@Dir+1,Turn@Dir+1
 14512  01249A  ECA4  F0BB         	call	_Turn	;wreg free
 14513                           
 14514                           ;dans.c: 394: Current_Direction = direction;
 14515  01249E  C0F1  F1E2         	movff	Travel@direction,_Current_Direction
 14516  0124A2  C0F2  F1E3         	movff	Travel@direction+1,_Current_Direction+1
 14517  0124A6                     l2427:
 14518                           
 14519                           ;dans.c: 395: }
 14520                           ;dans.c: 397: Drive(Spd,Spd);
 14521  0124A6  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14522  0124AA  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14523  0124AE  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14524  0124B2  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14525  0124B6  ECF1  F0C0         	call	_Drive	;wreg free
 14526                           
 14527                           ;dans.c: 400: ADCAverage();
 14528  0124BA  EC23  F09E         	call	_ADCAverage	;wreg free
 14529                           
 14530                           ;dans.c: 402: k = 4;
 14531  0124BE  0E00               	movlw	0
 14532  0124C0  0101               	movlb	1	; () banked
 14533  0124C2  6F39               	movwf	(_k+1)& (0+255),b
 14534  0124C4  0E04               	movlw	4
 14535  0124C6  6F38               	movwf	_k& (0+255),b
 14536                           
 14537                           ; BSR set to: 1
 14538                           ;dans.c: 403: int error;
 14539                           ;dans.c: 404: int spd1 =0 ;
 14540  0124C8  0E00               	movlw	0
 14541  0124CA  6FEB               	movwf	(Travel@spd1+1)& (0+255),b
 14542  0124CC  0E00               	movlw	0
 14543  0124CE  6FEA               	movwf	Travel@spd1& (0+255),b
 14544                           
 14545                           ; BSR set to: 1
 14546                           ;dans.c: 405: int spd2=0;
 14547  0124D0  0E00               	movlw	0
 14548  0124D2  6FED               	movwf	(Travel@spd2+1)& (0+255),b
 14549  0124D4  0E00               	movlw	0
 14550  0124D6  6FEC               	movwf	Travel@spd2& (0+255),b
 14551                           
 14552                           ;dans.c: 407: while (Dist_Travelled<Dist){
 14553  0124D8  D1A3               	goto	l2453
 14554  0124DA                     
 14555                           ;dans.c: 410: ADCAverage();
 14556                           
 14557                           ; BSR set to: 1
 14558  0124DA  EC23  F09E         	call	_ADCAverage	;wreg free
 14559                           
 14560                           ;dans.c: 411: error = Desired_Level - average;
 14561  0124DE  C02E  F0FB         	movff	_average,??_Travel
 14562  0124E2  C02F  F0FC         	movff	_average+1,??_Travel+1
 14563  0124E6  0100               	movlb	0	; () banked
 14564  0124E8  1FFB               	comf	??_Travel& (0+255),f,b
 14565  0124EA  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14566  0124EC  4BFB               	infsnz	??_Travel& (0+255),f,b
 14567  0124EE  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14568  0124F0  0101               	movlb	1	; () banked
 14569  0124F2  51DA               	movf	_Desired_Level& (0+255),w,b
 14570  0124F4  0100               	movlb	0	; () banked
 14571  0124F6  25FB               	addwf	??_Travel& (0+255),w,b
 14572  0124F8  0101               	movlb	1	; () banked
 14573  0124FA  6FF5               	movwf	Travel@error& (0+255),b
 14574  0124FC  51DB               	movf	(_Desired_Level+1)& (0+255),w,b
 14575  0124FE  0100               	movlb	0	; () banked
 14576  012500  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14577  012502  0101               	movlb	1	; () banked
 14578  012504  6FF6               	movwf	(Travel@error+1)& (0+255),b
 14579                           
 14580                           ; BSR set to: 1
 14581                           ;dans.c: 412: error*=k;
 14582  012506  C1F5  F060         	movff	Travel@error,___wmul@multiplier
 14583  01250A  C1F6  F061         	movff	Travel@error+1,___wmul@multiplier+1
 14584  01250E  C138  F062         	movff	_k,___wmul@multiplicand
 14585  012512  C139  F063         	movff	_k+1,___wmul@multiplicand+1
 14586  012516  EC40  F0C4         	call	___wmul	;wreg free
 14587  01251A  C060  F1F5         	movff	?___wmul,Travel@error
 14588  01251E  C061  F1F6         	movff	?___wmul+1,Travel@error+1
 14589                           
 14590                           ;dans.c: 414: if (average<= 90){
 14591  012522  BE2F               	btfsc	_average+1,7,c
 14592  012524  D006               	goto	u13350
 14593  012526  502F               	movf	_average+1,w,c
 14594  012528  E103               	bnz	u13351
 14595  01252A  0E5B               	movlw	91
 14596  01252C  5C2E               	subwf	_average,w,c
 14597  01252E  B0D8               	btfsc	status,0,c
 14598  012530                     u13351:
 14599  012530  D0C2               	goto	l2434
 14600  012532                     u13350:
 14601                           
 14602                           ;dans.c: 416: if (error > 300){
 14603  012532  0101               	movlb	1	; () banked
 14604  012534  BFF6               	btfsc	(Travel@error+1)& (0+255),7,b
 14605  012536  D00A               	goto	l2435
 14606  012538  0E2D               	movlw	45
 14607  01253A  5DF5               	subwf	Travel@error& (0+255),w,b
 14608  01253C  0E01               	movlw	1
 14609  01253E  59F6               	subwfb	(Travel@error+1)& (0+255),w,b
 14610  012540  A0D8               	btfss	status,0,c
 14611  012542  D004               	goto	l2435
 14612                           
 14613                           ; BSR set to: 1
 14614                           ;dans.c: 417: error=30;
 14615  012544  0E00               	movlw	0
 14616  012546  6FF6               	movwf	(Travel@error+1)& (0+255),b
 14617  012548  0E1E               	movlw	30
 14618  01254A  6FF5               	movwf	Travel@error& (0+255),b
 14619  01254C                     l2435:
 14620                           
 14621                           ; BSR set to: 1
 14622                           ;dans.c: 418: }
 14623                           ;dans.c: 419: if (error < -30){
 14624                           
 14625                           ; BSR set to: 1
 14626  01254C  AFF6               	btfss	(Travel@error+1)& (0+255),7,b
 14627  01254E  D00A               	goto	l2436
 14628  012550  0EE2               	movlw	226
 14629  012552  5DF5               	subwf	Travel@error& (0+255),w,b
 14630  012554  0EFF               	movlw	255
 14631  012556  59F6               	subwfb	(Travel@error+1)& (0+255),w,b
 14632  012558  B0D8               	btfsc	status,0,c
 14633  01255A  D004               	goto	l2436
 14634                           
 14635                           ; BSR set to: 1
 14636                           ;dans.c: 420: error = -30;
 14637  01255C  0EFF               	movlw	255
 14638  01255E  6FF6               	movwf	(Travel@error+1)& (0+255),b
 14639  012560  0EE2               	movlw	226
 14640  012562  6FF5               	movwf	Travel@error& (0+255),b
 14641  012564                     l2436:
 14642                           
 14643                           ; BSR set to: 1
 14644                           ;dans.c: 421: }
 14645                           ;dans.c: 422: if (error == Desired_Level + 4 || error == Desired_Level - 4){
 14646                           
 14647                           ; BSR set to: 1
 14648  012564  0E04               	movlw	4
 14649  012566  25DA               	addwf	_Desired_Level& (0+255),w,b
 14650  012568  0100               	movlb	0	; () banked
 14651  01256A  6FFB               	movwf	??_Travel& (0+255),b
 14652  01256C  0E00               	movlw	0
 14653  01256E  0101               	movlb	1	; () banked
 14654  012570  21DB               	addwfc	(_Desired_Level+1)& (0+255),w,b
 14655  012572  0100               	movlb	0	; () banked
 14656  012574  6FFC               	movwf	(??_Travel+1)& (0+255),b
 14657  012576  0101               	movlb	1	; () banked
 14658  012578  51F5               	movf	Travel@error& (0+255),w,b
 14659  01257A  0100               	movlb	0	; () banked
 14660  01257C  19FB               	xorwf	??_Travel& (0+255),w,b
 14661  01257E  E106               	bnz	u13380
 14662  012580  0101               	movlb	1	; () banked
 14663  012582  51F6               	movf	(Travel@error+1)& (0+255),w,b
 14664  012584  0100               	movlb	0	; () banked
 14665  012586  19FC               	xorwf	(??_Travel+1)& (0+255),w,b
 14666  012588  B4D8               	btfsc	status,2,c
 14667  01258A  D017               	goto	u13390
 14668  01258C                     u13380:
 14669                           
 14670                           ; BSR set to: 0
 14671  01258C  0EFC               	movlw	252
 14672  01258E  6FFB               	movwf	??_Travel& (0+255),b
 14673  012590  0EFF               	movlw	255
 14674  012592  6FFC               	movwf	(??_Travel+1)& (0+255),b
 14675  012594  C1DA  F0FD         	movff	_Desired_Level,??_Travel+2
 14676  012598  C1DB  F0FE         	movff	_Desired_Level+1,??_Travel+3
 14677  01259C  51FB               	movf	??_Travel& (0+255),w,b
 14678  01259E  27FD               	addwf	(??_Travel+2)& (0+255),f,b
 14679  0125A0  51FC               	movf	(??_Travel+1)& (0+255),w,b
 14680  0125A2  23FE               	addwfc	(??_Travel+3)& (0+255),f,b
 14681  0125A4  0101               	movlb	1	; () banked
 14682  0125A6  51F5               	movf	Travel@error& (0+255),w,b
 14683  0125A8  0100               	movlb	0	; () banked
 14684  0125AA  19FD               	xorwf	(??_Travel+2)& (0+255),w,b
 14685  0125AC  E110               	bnz	l16077
 14686  0125AE  0101               	movlb	1	; () banked
 14687  0125B0  51F6               	movf	(Travel@error+1)& (0+255),w,b
 14688  0125B2  0100               	movlb	0	; () banked
 14689  0125B4  19FE               	xorwf	(??_Travel+3)& (0+255),w,b
 14690  0125B6  A4D8               	btfss	status,2,c
 14691  0125B8  D00A               	goto	l2437
 14692  0125BA                     u13390:
 14693                           
 14694                           ; BSR set to: 0
 14695                           ;dans.c: 423: Drive(Spd,Spd);
 14696                           
 14697                           ; BSR set to: 0
 14698  0125BA  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14699  0125BE  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14700  0125C2  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14701  0125C6  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14702  0125CA  ECF1  F0C0         	call	_Drive	;wreg free
 14703  0125CE                     l2437:
 14704  0125CE                     l16077:
 14705                           
 14706                           ;dans.c: 424: }
 14707                           ;dans.c: 425: if (error >= 0){
 14708  0125CE  0101               	movlb	1	; () banked
 14709  0125D0  BFF6               	btfsc	(Travel@error+1)& (0+255),7,b
 14710  0125D2  D031               	goto	l2443
 14711                           
 14712                           ; BSR set to: 1
 14713                           ;dans.c: 427: spd1 = Spd - error;
 14714  0125D4  C1F5  F0FB         	movff	Travel@error,??_Travel
 14715  0125D8  C1F6  F0FC         	movff	Travel@error+1,??_Travel+1
 14716  0125DC  0100               	movlb	0	; () banked
 14717  0125DE  1FFB               	comf	??_Travel& (0+255),f,b
 14718  0125E0  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14719  0125E2  4BFB               	infsnz	??_Travel& (0+255),f,b
 14720  0125E4  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14721  0125E6  51F7               	movf	Travel@Spd& (0+255),w,b
 14722  0125E8  25FB               	addwf	??_Travel& (0+255),w,b
 14723  0125EA  0101               	movlb	1	; () banked
 14724  0125EC  6FEA               	movwf	Travel@spd1& (0+255),b
 14725  0125EE  0100               	movlb	0	; () banked
 14726  0125F0  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
 14727  0125F2  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14728  0125F4  0101               	movlb	1	; () banked
 14729  0125F6  6FEB               	movwf	(Travel@spd1+1)& (0+255),b
 14730                           
 14731                           ;dans.c: 428: if (Wall ==0){
 14732  0125F8  0100               	movlb	0	; () banked
 14733  0125FA  51F9               	movf	Travel@Wall& (0+255),w,b
 14734  0125FC  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14735  0125FE  A4D8               	btfss	status,2,c
 14736  012600  D00B               	goto	l2441
 14737                           
 14738                           ; BSR set to: 0
 14739                           ;dans.c: 429: Drive(spd1,Spd);
 14740  012602  C1EA  F061         	movff	Travel@spd1,Drive@SpeedL
 14741  012606  C1EB  F062         	movff	Travel@spd1+1,Drive@SpeedL+1
 14742  01260A  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14743  01260E  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14744  012612  ECF1  F0C0         	call	_Drive	;wreg free
 14745                           
 14746                           ;dans.c: 430: }
 14747  012616  D00F               	goto	l2443
 14748  012618                     l2441:
 14749                           
 14750                           ;dans.c: 431: else if (Wall == 1){
 14751  012618  0100               	movlb	0	; () banked
 14752  01261A  05F9               	decf	Travel@Wall& (0+255),w,b
 14753  01261C  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14754  01261E  A4D8               	btfss	status,2,c
 14755  012620  D00A               	goto	l2443
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;dans.c: 432: Drive(Spd,spd1);
 14759  012622  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14760  012626  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14761  01262A  C1EA  F063         	movff	Travel@spd1,Drive@SpeedR
 14762  01262E  C1EB  F064         	movff	Travel@spd1+1,Drive@SpeedR+1
 14763  012632  ECF1  F0C0         	call	_Drive	;wreg free
 14764  012636                     l2443:
 14765                           
 14766                           ;dans.c: 433: }
 14767                           ;dans.c: 435: }
 14768                           ;dans.c: 436: if (error <= 0){
 14769  012636  0101               	movlb	1	; () banked
 14770  012638  BFF6               	btfsc	(Travel@error+1)& (0+255),7,b
 14771  01263A  D005               	goto	u13430
 14772  01263C  51F6               	movf	(Travel@error+1)& (0+255),w,b
 14773  01263E  E145               	bnz	l2452
 14774  012640  05F5               	decf	Travel@error& (0+255),w,b
 14775  012642  B0D8               	btfsc	status,0,c
 14776  012644  D042               	goto	l2452
 14777  012646                     u13430:
 14778                           
 14779                           ; BSR set to: 1
 14780                           ;dans.c: 437: error=((error<0)?-error:error);
 14781  012646  AFF6               	btfss	(Travel@error+1)& (0+255),7,b
 14782  012648  D004               	goto	l2448
 14783                           
 14784                           ; BSR set to: 1
 14785                           
 14786                           ; BSR set to: 1
 14787                           
 14788                           ; BSR set to: 1
 14789  01264A  6DF5               	negf	Travel@error& (0+255),b
 14790  01264C  1FF6               	comf	(Travel@error+1)& (0+255),f,b
 14791  01264E  B0D8               	btfsc	status,0,c
 14792  012650  2BF6               	incf	(Travel@error+1)& (0+255),f,b
 14793  012652                     l2448:
 14794                           
 14795                           ; BSR set to: 1
 14796                           ;dans.c: 438: spd2= Spd - error;
 14797                           
 14798                           ; BSR set to: 1
 14799  012652  C1F5  F0FB         	movff	Travel@error,??_Travel
 14800  012656  C1F6  F0FC         	movff	Travel@error+1,??_Travel+1
 14801  01265A  0100               	movlb	0	; () banked
 14802  01265C  1FFB               	comf	??_Travel& (0+255),f,b
 14803  01265E  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14804  012660  4BFB               	infsnz	??_Travel& (0+255),f,b
 14805  012662  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14806  012664  51F7               	movf	Travel@Spd& (0+255),w,b
 14807  012666  25FB               	addwf	??_Travel& (0+255),w,b
 14808  012668  0101               	movlb	1	; () banked
 14809  01266A  6FEC               	movwf	Travel@spd2& (0+255),b
 14810  01266C  0100               	movlb	0	; () banked
 14811  01266E  51F8               	movf	(Travel@Spd+1)& (0+255),w,b
 14812  012670  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 14813  012672  0101               	movlb	1	; () banked
 14814  012674  6FED               	movwf	(Travel@spd2+1)& (0+255),b
 14815                           
 14816                           ; BSR set to: 1
 14817                           ;dans.c: 440: if (Wall == 0){
 14818  012676  0100               	movlb	0	; () banked
 14819  012678  51F9               	movf	Travel@Wall& (0+255),w,b
 14820  01267A  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14821  01267C  A4D8               	btfss	status,2,c
 14822  01267E  D00B               	goto	l2449
 14823                           
 14824                           ; BSR set to: 0
 14825                           ;dans.c: 441: Drive(Spd,spd2);
 14826  012680  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14827  012684  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14828  012688  C1EC  F063         	movff	Travel@spd2,Drive@SpeedR
 14829  01268C  C1ED  F064         	movff	Travel@spd2+1,Drive@SpeedR+1
 14830  012690  ECF1  F0C0         	call	_Drive	;wreg free
 14831                           
 14832                           ;dans.c: 442: }
 14833  012694  D01A               	goto	l2452
 14834  012696                     l2449:
 14835                           
 14836                           ;dans.c: 443: else if (Wall == 1){
 14837  012696  0100               	movlb	0	; () banked
 14838  012698  05F9               	decf	Travel@Wall& (0+255),w,b
 14839  01269A  11FA               	iorwf	(Travel@Wall+1)& (0+255),w,b
 14840  01269C  A4D8               	btfss	status,2,c
 14841  01269E  D015               	goto	l2452
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;dans.c: 444: Drive(spd2,Spd);
 14845  0126A0  C1EC  F061         	movff	Travel@spd2,Drive@SpeedL
 14846  0126A4  C1ED  F062         	movff	Travel@spd2+1,Drive@SpeedL+1
 14847  0126A8  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14848  0126AC  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14849  0126B0  ECF1  F0C0         	call	_Drive	;wreg free
 14850                           
 14851                           ;dans.c: 445: }
 14852                           ;dans.c: 446: }
 14853                           ;dans.c: 448: }
 14854  0126B4  D00A               	goto	l2452
 14855  0126B6                     l2434:
 14856                           
 14857                           ;dans.c: 449: else
 14858                           ;dans.c: 450: Drive(Spd,Spd);
 14859  0126B6  C0F7  F061         	movff	Travel@Spd,Drive@SpeedL
 14860  0126BA  C0F8  F062         	movff	Travel@Spd+1,Drive@SpeedL+1
 14861  0126BE  C0F7  F063         	movff	Travel@Spd,Drive@SpeedR
 14862  0126C2  C0F8  F064         	movff	Travel@Spd+1,Drive@SpeedR+1
 14863  0126C6  ECF1  F0C0         	call	_Drive	;wreg free
 14864  0126CA                     l2452:
 14865                           
 14866                           ;dans.c: 452: Dist_Travelled += UpdateDistance();
 14867  0126CA  ECC9  F0BD         	call	_UpdateDistance	;wreg free
 14868  0126CE  0100               	movlb	0	; () banked
 14869  0126D0  5161               	movf	?_UpdateDistance& (0+255),w,b
 14870  0126D2  0101               	movlb	1	; () banked
 14871  0126D4  27F1               	addwf	Travel@Dist_Travelled& (0+255),f,b
 14872  0126D6  0100               	movlb	0	; () banked
 14873  0126D8  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
 14874  0126DA  0101               	movlb	1	; () banked
 14875  0126DC  23F2               	addwfc	(Travel@Dist_Travelled+1)& (0+255),f,b
 14876                           
 14877                           ;dans.c: 460: if (Get_VirtualWall_State()){
 14878  0126DE  EC8E  F0C4         	call	_Get_VirtualWall_State	;wreg free
 14879  0126E2  0100               	movlb	0	; () banked
 14880  0126E4  5161               	movf	?_Get_VirtualWall_State& (0+255),w,b
 14881  0126E6  1162               	iorwf	(?_Get_VirtualWall_State+1)& (0+255),w,b
 14882  0126E8  B4D8               	btfsc	status,2,c
 14883  0126EA  D09A               	goto	l2453
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;dans.c: 461: maze[X_Pos][Y_Pos].walls[direction] = 1;
 14887  0126EC  C13C  F060         	movff	_X_Pos,___wmul@multiplier
 14888  0126F0  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
 14889  0126F4  0E00               	movlw	0
 14890  0126F6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14891  0126F8  0E32               	movlw	50
 14892  0126FA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14893  0126FC  EC40  F0C4         	call	___wmul	;wreg free
 14894  012700  0E04               	movlw	4
 14895  012702  0100               	movlb	0	; () banked
 14896  012704  25F1               	addwf	Travel@direction& (0+255),w,b
 14897  012706  6FFB               	movwf	??_Travel& (0+255),b
 14898  012708  0E00               	movlw	0
 14899  01270A  21F2               	addwfc	(Travel@direction+1)& (0+255),w,b
 14900  01270C  6FFC               	movwf	(??_Travel+1)& (0+255),b
 14901  01270E  0E00               	movlw	low _maze
 14902  012710  6FFD               	movwf	(??_Travel+2)& (0+255),b
 14903  012712  0E03               	movlw	high _maze
 14904  012714  6FFE               	movwf	(??_Travel+3)& (0+255),b
 14905  012716  51FB               	movf	??_Travel& (0+255),w,b
 14906  012718  27FD               	addwf	(??_Travel+2)& (0+255),f,b
 14907  01271A  51FC               	movf	(??_Travel+1)& (0+255),w,b
 14908  01271C  23FE               	addwfc	(??_Travel+3)& (0+255),f,b
 14909  01271E  5160               	movf	?___wmul& (0+255),w,b
 14910  012720  27FD               	addwf	(??_Travel+2)& (0+255),f,b
 14911  012722  5161               	movf	(?___wmul+1)& (0+255),w,b
 14912  012724  23FE               	addwfc	(??_Travel+3)& (0+255),f,b
 14913  012726  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
 14914  01272A  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
 14915  01272E  0E00               	movlw	0
 14916  012730  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14917  012732  0E0A               	movlw	10
 14918  012734  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14919  012736  EC40  F0C4         	call	___wmul	;wreg free
 14920  01273A  0100               	movlb	0	; () banked
 14921  01273C  5160               	movf	?___wmul& (0+255),w,b
 14922  01273E  25FD               	addwf	(??_Travel+2)& (0+255),w,b
 14923  012740  6ED9               	movwf	fsr2l,c
 14924  012742  5161               	movf	(?___wmul+1)& (0+255),w,b
 14925  012744  21FE               	addwfc	(??_Travel+3)& (0+255),w,b
 14926  012746  6EDA               	movwf	fsr2h,c
 14927  012748  0E01               	movlw	1
 14928  01274A  6EDF               	movwf	indf2,c
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;dans.c: 463: int rev_Dist = 0;
 14932  01274C  0E00               	movlw	0
 14933  01274E  0101               	movlb	1	; () banked
 14934  012750  6FEF               	movwf	(Travel@rev_Dist+1)& (0+255),b
 14935  012752  0E00               	movlw	0
 14936  012754  6FEE               	movwf	Travel@rev_Dist& (0+255),b
 14937                           
 14938                           ; BSR set to: 1
 14939                           ;dans.c: 465: printf("WALL FOUND\n");
 14940  012756  0E80               	movlw	low STR_24
 14941  012758  0100               	movlb	0	; () banked
 14942  01275A  6F75               	movwf	printf@f& (0+255),b
 14943  01275C  0EFF               	movlw	high STR_24
 14944  01275E  6F76               	movwf	(printf@f+1)& (0+255),b
 14945  012760  EC7E  F0AB         	call	_printf	;wreg free
 14946                           
 14947                           ;dans.c: 466: Console_Render();
 14948  012764  ECA2  F0A7         	call	_Console_Render	;wreg free
 14949                           
 14950                           ;dans.c: 467: Drive(-Spd,-Spd);
 14951  012768  C0F7  F0FB         	movff	Travel@Spd,??_Travel
 14952  01276C  C0F8  F0FC         	movff	Travel@Spd+1,??_Travel+1
 14953  012770  0100               	movlb	0	; () banked
 14954  012772  1FFB               	comf	??_Travel& (0+255),f,b
 14955  012774  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 14956  012776  4BFB               	infsnz	??_Travel& (0+255),f,b
 14957  012778  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 14958  01277A  C0FB  F061         	movff	??_Travel,Drive@SpeedL
 14959  01277E  C0FC  F062         	movff	??_Travel+1,Drive@SpeedL+1
 14960  012782  C0F7  F0FD         	movff	Travel@Spd,??_Travel+2
 14961  012786  C0F8  F0FE         	movff	Travel@Spd+1,??_Travel+3
 14962  01278A  1FFD               	comf	(??_Travel+2)& (0+255),f,b
 14963  01278C  1FFE               	comf	(??_Travel+3)& (0+255),f,b
 14964  01278E  4BFD               	infsnz	(??_Travel+2)& (0+255),f,b
 14965  012790  2BFE               	incf	(??_Travel+3)& (0+255),f,b
 14966  012792  C0FD  F063         	movff	??_Travel+2,Drive@SpeedR
 14967  012796  C0FE  F064         	movff	??_Travel+3,Drive@SpeedR+1
 14968  01279A  ECF1  F0C0         	call	_Drive	;wreg free
 14969                           
 14970                           ;dans.c: 468: UpdateDistance();
 14971  01279E  ECC9  F0BD         	call	_UpdateDistance	;wreg free
 14972                           
 14973                           ;dans.c: 469: while(rev_Dist >= -Dist_Travelled){
 14974  0127A2  D028               	goto	l2454
 14975  0127A4                     
 14976                           ;dans.c: 471: rev_Dist += UpdateDistance();
 14977  0127A4  ECC9  F0BD         	call	_UpdateDistance	;wreg free
 14978  0127A8  0100               	movlb	0	; () banked
 14979  0127AA  5161               	movf	?_UpdateDistance& (0+255),w,b
 14980  0127AC  0101               	movlb	1	; () banked
 14981  0127AE  27EE               	addwf	Travel@rev_Dist& (0+255),f,b
 14982  0127B0  0100               	movlb	0	; () banked
 14983  0127B2  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
 14984  0127B4  0101               	movlb	1	; () banked
 14985  0127B6  23EF               	addwfc	(Travel@rev_Dist+1)& (0+255),f,b
 14986                           
 14987                           ; BSR set to: 1
 14988                           ;dans.c: 472: Console_Render();
 14989  0127B8  ECA2  F0A7         	call	_Console_Render	;wreg free
 14990                           
 14991                           ;dans.c: 473: printf("%c", (char)35);
 14992  0127BC  0EFC               	movlw	low STR_1
 14993  0127BE  0100               	movlb	0	; () banked
 14994  0127C0  6F75               	movwf	printf@f& (0+255),b
 14995  0127C2  0EFF               	movlw	high STR_1
 14996  0127C4  6F76               	movwf	(printf@f+1)& (0+255),b
 14997  0127C6  0E00               	movlw	0
 14998  0127C8  6F78               	movwf	(?_printf+3)& (0+255),b
 14999  0127CA  0E23               	movlw	35
 15000  0127CC  6F77               	movwf	(?_printf+2)& (0+255),b
 15001  0127CE  EC7E  F0AB         	call	_printf	;wreg free
 15002                           
 15003                           ;dans.c: 474: printf("rev:%d Tar: %d\n", rev_Dist, Dist_Travelled);
 15004  0127D2  0E60               	movlw	low STR_26
 15005  0127D4  0100               	movlb	0	; () banked
 15006  0127D6  6F75               	movwf	printf@f& (0+255),b
 15007  0127D8  0EFF               	movlw	high STR_26
 15008  0127DA  6F76               	movwf	(printf@f+1)& (0+255),b
 15009  0127DC  C1EE  F077         	movff	Travel@rev_Dist,?_printf+2
 15010  0127E0  C1EF  F078         	movff	Travel@rev_Dist+1,?_printf+3
 15011  0127E4  C1F1  F079         	movff	Travel@Dist_Travelled,?_printf+4
 15012  0127E8  C1F2  F07A         	movff	Travel@Dist_Travelled+1,?_printf+5
 15013  0127EC  EC7E  F0AB         	call	_printf	;wreg free
 15014                           
 15015                           ;dans.c: 475: Console_Render();
 15016  0127F0  ECA2  F0A7         	call	_Console_Render	;wreg free
 15017  0127F4                     l2454:
 15018  0127F4  C1F1  F0FB         	movff	Travel@Dist_Travelled,??_Travel
 15019  0127F8  C1F2  F0FC         	movff	Travel@Dist_Travelled+1,??_Travel+1
 15020  0127FC  0100               	movlb	0	; () banked
 15021  0127FE  1FFB               	comf	??_Travel& (0+255),f,b
 15022  012800  1FFC               	comf	(??_Travel+1)& (0+255),f,b
 15023  012802  4BFB               	infsnz	??_Travel& (0+255),f,b
 15024  012804  2BFC               	incf	(??_Travel+1)& (0+255),f,b
 15025  012806  51FB               	movf	??_Travel& (0+255),w,b
 15026  012808  0101               	movlb	1	; () banked
 15027  01280A  5DEE               	subwf	Travel@rev_Dist& (0+255),w,b
 15028  01280C  51EF               	movf	(Travel@rev_Dist+1)& (0+255),w,b
 15029  01280E  0A80               	xorlw	128
 15030  012810  0100               	movlb	0	; () banked
 15031  012812  6FFD               	movwf	(??_Travel+2)& (0+255),b
 15032  012814  51FC               	movf	(??_Travel+1)& (0+255),w,b
 15033  012816  0A80               	xorlw	128
 15034  012818  59FD               	subwfb	(??_Travel+2)& (0+255),w,b
 15035  01281A  A0D8               	btfss	status,0,c
 15036  01281C  0012               	return	
 15037  01281E  D7C2               	goto	l2455
 15038  012820                     l2453:
 15039                           
 15040                           ; BSR set to: 0
 15041                           
 15042                           ; BSR set to: 0
 15043  012820  0100               	movlb	0	; () banked
 15044  012822  51F3               	movf	Travel@Dist& (0+255),w,b
 15045  012824  0101               	movlb	1	; () banked
 15046  012826  5DF1               	subwf	Travel@Dist_Travelled& (0+255),w,b
 15047  012828  51F2               	movf	(Travel@Dist_Travelled+1)& (0+255),w,b
 15048  01282A  0A80               	xorlw	128
 15049  01282C  0100               	movlb	0	; () banked
 15050  01282E  6FFB               	movwf	??_Travel& (0+255),b
 15051  012830  51F4               	movf	(Travel@Dist+1)& (0+255),w,b
 15052  012832  0A80               	xorlw	128
 15053  012834  59FB               	subwfb	??_Travel& (0+255),w,b
 15054  012836  A0D8               	btfss	status,0,c
 15055  012838  D650               	goto	l2433
 15056                           
 15057                           ; BSR set to: 0
 15058                           ;dans.c: 478: }
 15059                           ;dans.c: 482: }
 15060                           ;dans.c: 483: if (direction == 0){
 15061                           
 15062                           ; BSR set to: 0
 15063  01283A  51F1               	movf	Travel@direction& (0+255),w,b
 15064  01283C  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15065  01283E  A4D8               	btfss	status,2,c
 15066  012840  D005               	goto	l2459
 15067                           
 15068                           ; BSR set to: 0
 15069                           ;dans.c: 484: X_Pos -= 1;
 15070  012842  0101               	movlb	1	; () banked
 15071  012844  073C               	decf	_X_Pos& (0+255),f,b
 15072  012846  A0D8               	btfss	status,0,c
 15073  012848  073D               	decf	(_X_Pos+1)& (0+255),f,b
 15074                           
 15075                           ;dans.c: 485: }
 15076  01284A  D01D               	goto	l2465
 15077  01284C                     l2459:
 15078                           
 15079                           ;dans.c: 486: else if (direction == 1){
 15080                           
 15081                           ; BSR set to: 1
 15082  01284C  0100               	movlb	0	; () banked
 15083  01284E  05F1               	decf	Travel@direction& (0+255),w,b
 15084  012850  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15085  012852  A4D8               	btfss	status,2,c
 15086  012854  D004               	goto	l2461
 15087                           
 15088                           ; BSR set to: 0
 15089                           ;dans.c: 487: Y_Pos += 1;
 15090  012856  0101               	movlb	1	; () banked
 15091  012858  4B3A               	infsnz	_Y_Pos& (0+255),f,b
 15092  01285A  2B3B               	incf	(_Y_Pos+1)& (0+255),f,b
 15093                           
 15094                           ;dans.c: 488: }
 15095  01285C  D014               	goto	l2465
 15096  01285E                     l2461:
 15097                           
 15098                           ;dans.c: 489: else if (direction == 2){
 15099                           
 15100                           ; BSR set to: 1
 15101  01285E  0E02               	movlw	2
 15102  012860  0100               	movlb	0	; () banked
 15103  012862  19F1               	xorwf	Travel@direction& (0+255),w,b
 15104  012864  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15105  012866  A4D8               	btfss	status,2,c
 15106  012868  D004               	goto	l2463
 15107                           
 15108                           ; BSR set to: 0
 15109                           ;dans.c: 490: X_Pos += 1;
 15110  01286A  0101               	movlb	1	; () banked
 15111  01286C  4B3C               	infsnz	_X_Pos& (0+255),f,b
 15112  01286E  2B3D               	incf	(_X_Pos+1)& (0+255),f,b
 15113                           
 15114                           ;dans.c: 491: }
 15115  012870  D00A               	goto	l2465
 15116  012872                     l2463:
 15117                           
 15118                           ;dans.c: 492: else if (direction == 3){
 15119                           
 15120                           ; BSR set to: 1
 15121  012872  0E03               	movlw	3
 15122  012874  0100               	movlb	0	; () banked
 15123  012876  19F1               	xorwf	Travel@direction& (0+255),w,b
 15124  012878  11F2               	iorwf	(Travel@direction+1)& (0+255),w,b
 15125  01287A  A4D8               	btfss	status,2,c
 15126  01287C  D004               	goto	l2465
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;dans.c: 493: Y_Pos -= 1;
 15130  01287E  0101               	movlb	1	; () banked
 15131  012880  073A               	decf	_Y_Pos& (0+255),f,b
 15132  012882  A0D8               	btfss	status,0,c
 15133  012884  073B               	decf	(_Y_Pos+1)& (0+255),f,b
 15134  012886                     l2465:
 15135                           
 15136                           ;dans.c: 494: }
 15137                           ;dans.c: 495: if(maze[X_Pos][Y_Pos].Options > 0){
 15138                           
 15139                           ; BSR set to: 1
 15140                           
 15141                           ; BSR set to: 1
 15142                           
 15143                           ; BSR set to: 1
 15144                           
 15145                           ; BSR set to: 1
 15146  012886  C13C  F060         	movff	_X_Pos,___wmul@multiplier
 15147  01288A  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
 15148  01288E  0E00               	movlw	0
 15149  012890  0100               	movlb	0	; () banked
 15150  012892  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15151  012894  0E32               	movlw	50
 15152  012896  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15153  012898  EC40  F0C4         	call	___wmul	;wreg free
 15154  01289C  0E00               	movlw	low _maze
 15155  01289E  0100               	movlb	0	; () banked
 15156  0128A0  6FFB               	movwf	??_Travel& (0+255),b
 15157  0128A2  0E03               	movlw	high _maze
 15158  0128A4  6FFC               	movwf	(??_Travel+1)& (0+255),b
 15159  0128A6  5160               	movf	?___wmul& (0+255),w,b
 15160  0128A8  27FB               	addwf	??_Travel& (0+255),f,b
 15161  0128AA  5161               	movf	(?___wmul+1)& (0+255),w,b
 15162  0128AC  23FC               	addwfc	(??_Travel+1)& (0+255),f,b
 15163  0128AE  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
 15164  0128B2  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
 15165  0128B6  0E00               	movlw	0
 15166  0128B8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15167  0128BA  0E0A               	movlw	10
 15168  0128BC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15169  0128BE  EC40  F0C4         	call	___wmul	;wreg free
 15170  0128C2  0100               	movlb	0	; () banked
 15171  0128C4  5160               	movf	?___wmul& (0+255),w,b
 15172  0128C6  27FB               	addwf	??_Travel& (0+255),f,b
 15173  0128C8  5161               	movf	(?___wmul+1)& (0+255),w,b
 15174  0128CA  23FC               	addwfc	(??_Travel+1)& (0+255),f,b
 15175  0128CC  0E08               	movlw	8
 15176  0128CE  25FB               	addwf	??_Travel& (0+255),w,b
 15177  0128D0  6ED9               	movwf	fsr2l,c
 15178  0128D2  0E00               	movlw	0
 15179  0128D4  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 15180  0128D6  6EDA               	movwf	fsr2h,c
 15181  0128D8  0E01               	movlw	1
 15182  0128DA  BEDB               	btfsc	plusw2,7,c
 15183  0128DC  D00C               	goto	l2466
 15184  0128DE  0E01               	movlw	1
 15185  0128E0  50DB               	movf	plusw2,w,c
 15186  0128E2  E103               	bnz	u13540
 15187  0128E4  04DE               	decf	postinc2,w,c
 15188  0128E6  A0D8               	btfss	status,0,c
 15189  0128E8  D006               	goto	l2466
 15190  0128EA                     u13540:
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;dans.c: 496: push(direction);
 15194  0128EA  C0F1  F083         	movff	Travel@direction,push@data
 15195  0128EE  C0F2  F084         	movff	Travel@direction+1,push@data+1
 15196  0128F2  ECCA  F0C1         	call	_push	;wreg free
 15197  0128F6                     l2466:
 15198                           
 15199                           ;dans.c: 497: }
 15200                           ;dans.c: 499: maze[X_Pos][Y_Pos].Options -= 1;
 15201  0128F6  C13C  F060         	movff	_X_Pos,___wmul@multiplier
 15202  0128FA  C13D  F061         	movff	_X_Pos+1,___wmul@multiplier+1
 15203  0128FE  0E00               	movlw	0
 15204  012900  0100               	movlb	0	; () banked
 15205  012902  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15206  012904  0E32               	movlw	50
 15207  012906  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15208  012908  EC40  F0C4         	call	___wmul	;wreg free
 15209  01290C  0E00               	movlw	low _maze
 15210  01290E  0100               	movlb	0	; () banked
 15211  012910  6FFB               	movwf	??_Travel& (0+255),b
 15212  012912  0E03               	movlw	high _maze
 15213  012914  6FFC               	movwf	(??_Travel+1)& (0+255),b
 15214  012916  5160               	movf	?___wmul& (0+255),w,b
 15215  012918  27FB               	addwf	??_Travel& (0+255),f,b
 15216  01291A  5161               	movf	(?___wmul+1)& (0+255),w,b
 15217  01291C  23FC               	addwfc	(??_Travel+1)& (0+255),f,b
 15218  01291E  C13A  F060         	movff	_Y_Pos,___wmul@multiplier
 15219  012922  C13B  F061         	movff	_Y_Pos+1,___wmul@multiplier+1
 15220  012926  0E00               	movlw	0
 15221  012928  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15222  01292A  0E0A               	movlw	10
 15223  01292C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15224  01292E  EC40  F0C4         	call	___wmul	;wreg free
 15225  012932  0100               	movlb	0	; () banked
 15226  012934  5160               	movf	?___wmul& (0+255),w,b
 15227  012936  27FB               	addwf	??_Travel& (0+255),f,b
 15228  012938  5161               	movf	(?___wmul+1)& (0+255),w,b
 15229  01293A  23FC               	addwfc	(??_Travel+1)& (0+255),f,b
 15230  01293C  0E08               	movlw	8
 15231  01293E  25FB               	addwf	??_Travel& (0+255),w,b
 15232  012940  6ED9               	movwf	fsr2l,c
 15233  012942  0E00               	movlw	0
 15234  012944  21FC               	addwfc	(??_Travel+1)& (0+255),w,b
 15235  012946  6EDA               	movwf	fsr2h,c
 15236  012948  06DE               	decf	postinc2,f,c
 15237  01294A  0E00               	movlw	0
 15238  01294C  5ADD               	subwfb	postdec2,f,c
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;dans.c: 500: Robot_Stop();
 15242  01294E  ECB0  F0C4         	call	_Robot_Stop	;wreg free
 15243  012952  0012               	return		;funcret
 15244  012954                     __end_of_Travel:
 15245                           	opt stack 0
 15246                           tosu	equ	0xFFF
 15247                           tosh	equ	0xFFE
 15248                           tosl	equ	0xFFD
 15249                           pclath	equ	0xFFA
 15250                           tblptru	equ	0xFF8
 15251                           tblptrh	equ	0xFF7
 15252                           tblptrl	equ	0xFF6
 15253                           tablat	equ	0xFF5
 15254                           prodh	equ	0xFF4
 15255                           prodl	equ	0xFF3
 15256                           intcon	equ	0xFF2
 15257                           postinc0	equ	0xFEE
 15258                           wreg	equ	0xFE8
 15259                           indf1	equ	0xFE7
 15260                           postdec1	equ	0xFE5
 15261                           fsr1h	equ	0xFE2
 15262                           fsr1l	equ	0xFE1
 15263                           indf2	equ	0xFDF
 15264                           postinc2	equ	0xFDE
 15265                           postdec2	equ	0xFDD
 15266                           plusw2	equ	0xFDB
 15267                           fsr2h	equ	0xFDA
 15268                           fsr2l	equ	0xFD9
 15269                           status	equ	0xFD8
 15270                           
 15271 ;; *************** function _push *****************
 15272 ;; Defined at:
 15273 ;;		line 260 in file "dans.c"
 15274 ;; Parameters:    Size  Location     Type
 15275 ;;  data            2   35[BANK0 ] int 
 15276 ;; Auto vars:     Size  Location     Type
 15277 ;;		None
 15278 ;; Return value:  Size  Location     Type
 15279 ;;                  2   35[BANK0 ] int 
 15280 ;; Registers used:
 15281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15282 ;; Tracked objects:
 15283 ;;		On entry : 0/0
 15284 ;;		On exit  : 0/0
 15285 ;;		Unchanged: 0/0
 15286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15287 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15291 ;;Total ram usage:        2 bytes
 15292 ;; Hardware stack levels used:    1
 15293 ;; Hardware stack levels required when called:   13
 15294 ;; This function calls:
 15295 ;;		_isfull
 15296 ;;		_printf
 15297 ;; This function is called by:
 15298 ;;		_Travel
 15299 ;; This function uses a non-reentrant model
 15300 ;;
 15301                           
 15302                           	psect	text69
 15303  018394                     __ptext69:
 15304                           	opt stack 0
 15305  018394                     _push:
 15306                           	opt stack 16
 15307                           
 15308                           ;dans.c: 262: if(!isfull()) {
 15309                           
 15310                           ;incstack = 0
 15311  018394  ECE4  F0C5         	call	_isfull	;wreg free
 15312  018398  0900               	iorlw	0
 15313  01839A  A4D8               	btfss	status,2,c
 15314  01839C  D015               	goto	l2392
 15315                           
 15316                           ;dans.c: 263: top = top + 1;
 15317  01839E  0E01               	movlw	1
 15318  0183A0  0101               	movlb	1	; () banked
 15319  0183A2  25E0               	addwf	_top& (0+255),w,b
 15320  0183A4  6FE0               	movwf	_top& (0+255),b
 15321  0183A6  0E00               	movlw	0
 15322  0183A8  21E1               	addwfc	(_top+1)& (0+255),w,b
 15323  0183AA  6FE1               	movwf	(_top+1)& (0+255),b
 15324                           
 15325                           ; BSR set to: 1
 15326                           ;dans.c: 264: stack[top] = data;
 15327  0183AC  90D8               	bcf	status,0,c
 15328  0183AE  35E0               	rlcf	_top& (0+255),w,b
 15329  0183B0  6ED9               	movwf	fsr2l,c
 15330  0183B2  35E1               	rlcf	(_top+1)& (0+255),w,b
 15331  0183B4  6EDA               	movwf	fsr2h,c
 15332  0183B6  0E00               	movlw	low _stack
 15333  0183B8  26D9               	addwf	fsr2l,f,c
 15334  0183BA  0E02               	movlw	high _stack
 15335  0183BC  22DA               	addwfc	fsr2h,f,c
 15336  0183BE  C083  FFDE         	movff	push@data,postinc2
 15337  0183C2  C084  FFDD         	movff	push@data+1,postdec2
 15338                           
 15339                           ;dans.c: 265: } else {
 15340  0183C6  0012               	return	
 15341  0183C8                     l2392:
 15342                           
 15343                           ;dans.c: 266: printf("Could not insert data, Stack is full.\n");
 15344                           
 15345                           ; BSR set to: 1
 15346  0183C8  0EA5               	movlw	low STR_22
 15347  0183CA  0100               	movlb	0	; () banked
 15348  0183CC  6F75               	movwf	printf@f& (0+255),b
 15349  0183CE  0EFE               	movlw	high STR_22
 15350  0183D0  6F76               	movwf	(printf@f+1)& (0+255),b
 15351  0183D2  EC7E  F0AB         	call	_printf	;wreg free
 15352  0183D6  0012               	return	
 15353  0183D8                     __end_of_push:
 15354                           	opt stack 0
 15355                           tosu	equ	0xFFF
 15356                           tosh	equ	0xFFE
 15357                           tosl	equ	0xFFD
 15358                           pclath	equ	0xFFA
 15359                           tblptru	equ	0xFF8
 15360                           tblptrh	equ	0xFF7
 15361                           tblptrl	equ	0xFF6
 15362                           tablat	equ	0xFF5
 15363                           prodh	equ	0xFF4
 15364                           prodl	equ	0xFF3
 15365                           intcon	equ	0xFF2
 15366                           postinc0	equ	0xFEE
 15367                           wreg	equ	0xFE8
 15368                           indf1	equ	0xFE7
 15369                           postdec1	equ	0xFE5
 15370                           fsr1h	equ	0xFE2
 15371                           fsr1l	equ	0xFE1
 15372                           indf2	equ	0xFDF
 15373                           postinc2	equ	0xFDE
 15374                           postdec2	equ	0xFDD
 15375                           plusw2	equ	0xFDB
 15376                           fsr2h	equ	0xFDA
 15377                           fsr2l	equ	0xFD9
 15378                           status	equ	0xFD8
 15379                           
 15380 ;; *************** function _isfull *****************
 15381 ;; Defined at:
 15382 ;;		line 238 in file "dans.c"
 15383 ;; Parameters:    Size  Location     Type
 15384 ;;		None
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;		None
 15387 ;; Return value:  Size  Location     Type
 15388 ;;                  1    wreg      unsigned char 
 15389 ;; Registers used:
 15390 ;;		wreg, status,2, status,0
 15391 ;; Tracked objects:
 15392 ;;		On entry : 0/0
 15393 ;;		On exit  : 0/0
 15394 ;;		Unchanged: 0/0
 15395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15400 ;;Total ram usage:        0 bytes
 15401 ;; Hardware stack levels used:    1
 15402 ;; Hardware stack levels required when called:    7
 15403 ;; This function calls:
 15404 ;;		Nothing
 15405 ;; This function is called by:
 15406 ;;		_push
 15407 ;; This function uses a non-reentrant model
 15408 ;;
 15409                           
 15410                           	psect	text70
 15411  018BC8                     __ptext70:
 15412                           	opt stack 0
 15413  018BC8                     _isfull:
 15414                           	opt stack 21
 15415                           
 15416                           ;dans.c: 240: if(top == 20)
 15417                           
 15418                           ;incstack = 0
 15419  018BC8  0E14               	movlw	20
 15420  018BCA  0101               	movlb	1	; () banked
 15421  018BCC  19E0               	xorwf	_top& (0+255),w,b
 15422  018BCE  11E1               	iorwf	(_top+1)& (0+255),w,b
 15423  018BD0  A4D8               	btfss	status,2,c
 15424  018BD2  D002               	goto	l2379
 15425                           
 15426                           ; BSR set to: 1
 15427                           ;dans.c: 241: return 1;
 15428  018BD4  0E01               	movlw	1
 15429                           
 15430                           ; BSR set to: 1
 15431                           
 15432                           ; BSR set to: 1
 15433  018BD6  0012               	return	
 15434  018BD8                     l2379:
 15435                           
 15436                           ; BSR set to: 1
 15437                           ;dans.c: 242: else
 15438                           ;dans.c: 243: return 0;
 15439                           
 15440                           ; BSR set to: 1
 15441  018BD8  0E00               	movlw	0
 15442                           
 15443                           ; BSR set to: 1
 15444  018BDA  0012               	return	
 15445  018BDC                     __end_of_isfull:
 15446                           	opt stack 0
 15447                           tosu	equ	0xFFF
 15448                           tosh	equ	0xFFE
 15449                           tosl	equ	0xFFD
 15450                           pclath	equ	0xFFA
 15451                           tblptru	equ	0xFF8
 15452                           tblptrh	equ	0xFF7
 15453                           tblptrl	equ	0xFF6
 15454                           tablat	equ	0xFF5
 15455                           prodh	equ	0xFF4
 15456                           prodl	equ	0xFF3
 15457                           intcon	equ	0xFF2
 15458                           postinc0	equ	0xFEE
 15459                           wreg	equ	0xFE8
 15460                           indf1	equ	0xFE7
 15461                           postdec1	equ	0xFE5
 15462                           fsr1h	equ	0xFE2
 15463                           fsr1l	equ	0xFE1
 15464                           indf2	equ	0xFDF
 15465                           postinc2	equ	0xFDE
 15466                           postdec2	equ	0xFDD
 15467                           plusw2	equ	0xFDB
 15468                           fsr2h	equ	0xFDA
 15469                           fsr2l	equ	0xFD9
 15470                           status	equ	0xFD8
 15471                           
 15472 ;; *************** function _UpdateDistance *****************
 15473 ;; Defined at:
 15474 ;;		line 286 in file "dans.c"
 15475 ;; Parameters:    Size  Location     Type
 15476 ;;		None
 15477 ;; Auto vars:     Size  Location     Type
 15478 ;;		None
 15479 ;; Return value:  Size  Location     Type
 15480 ;;                  2    1[BANK0 ] int 
 15481 ;; Registers used:
 15482 ;;		wreg, status,2, status,0, cstack
 15483 ;; Tracked objects:
 15484 ;;		On entry : 0/0
 15485 ;;		On exit  : 0/0
 15486 ;;		Unchanged: 0/0
 15487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15488 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15491 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15492 ;;Total ram usage:        6 bytes
 15493 ;; Hardware stack levels used:    1
 15494 ;; Hardware stack levels required when called:    8
 15495 ;; This function calls:
 15496 ;;		_eusartRec
 15497 ;;		_eusartSend
 15498 ;; This function is called by:
 15499 ;;		_Robot_Init
 15500 ;;		_Travel
 15501 ;; This function uses a non-reentrant model
 15502 ;;
 15503                           
 15504                           	psect	text71
 15505  017B92                     __ptext71:
 15506                           	opt stack 0
 15507  017B92                     _UpdateDistance:
 15508                           	opt stack 21
 15509                           
 15510                           ;dans.c: 287: eusartSend(142);
 15511                           
 15512                           ; BSR set to: 1
 15513                           ;incstack = 0
 15514  017B92  0E8E               	movlw	142
 15515  017B94  EC2D  F0C6         	call	_eusartSend
 15516                           
 15517                           ;dans.c: 288: eusartSend(19);
 15518  017B98  0E13               	movlw	19
 15519  017B9A  EC2D  F0C6         	call	_eusartSend
 15520                           
 15521                           ;dans.c: 289: Current_Dist1 = eusartRec();
 15522  017B9E  EC61  F0C6         	call	_eusartRec	;wreg free
 15523  017BA2  0100               	movlb	0	; () banked
 15524  017BA4  6F63               	movwf	??_UpdateDistance& (0+255),b
 15525  017BA6  5163               	movf	??_UpdateDistance& (0+255),w,b
 15526  017BA8  0101               	movlb	1	; () banked
 15527  017BAA  6F4C               	movwf	_Current_Dist1& (0+255),b
 15528  017BAC  6B4D               	clrf	(_Current_Dist1+1)& (0+255),b
 15529                           
 15530                           ; BSR set to: 1
 15531                           ;dans.c: 290: Current_Dist2 = eusartRec();
 15532  017BAE  EC61  F0C6         	call	_eusartRec	;wreg free
 15533  017BB2  0100               	movlb	0	; () banked
 15534  017BB4  6F63               	movwf	??_UpdateDistance& (0+255),b
 15535  017BB6  5163               	movf	??_UpdateDistance& (0+255),w,b
 15536  017BB8  0101               	movlb	1	; () banked
 15537  017BBA  6F4A               	movwf	_Current_Dist2& (0+255),b
 15538  017BBC  6B4B               	clrf	(_Current_Dist2+1)& (0+255),b
 15539                           
 15540                           ; BSR set to: 1
 15541                           ;dans.c: 292: Current_Dist = ((Current_Dist1 <<(8)) & 0b1111111100000000 | (Current_Dist
      +                          2 & 255));
 15542  017BBE  0E00               	movlw	0
 15543  017BC0  0100               	movlb	0	; () banked
 15544  017BC2  6F63               	movwf	??_UpdateDistance& (0+255),b
 15545  017BC4  0EFF               	movlw	255
 15546  017BC6  6F64               	movwf	(??_UpdateDistance+1)& (0+255),b
 15547  017BC8  0101               	movlb	1	; () banked
 15548  017BCA  514C               	movf	_Current_Dist1& (0+255),w,b
 15549  017BCC  0100               	movlb	0	; () banked
 15550  017BCE  6F66               	movwf	(??_UpdateDistance+3)& (0+255),b
 15551  017BD0  6B65               	clrf	(??_UpdateDistance+2)& (0+255),b
 15552  017BD2  5163               	movf	??_UpdateDistance& (0+255),w,b
 15553  017BD4  1765               	andwf	(??_UpdateDistance+2)& (0+255),f,b
 15554  017BD6  5164               	movf	(??_UpdateDistance+1)& (0+255),w,b
 15555  017BD8  1766               	andwf	(??_UpdateDistance+3)& (0+255),f,b
 15556  017BDA  0101               	movlb	1	; () banked
 15557  017BDC  514A               	movf	_Current_Dist2& (0+255),w,b
 15558  017BDE  0100               	movlb	0	; () banked
 15559  017BE0  1165               	iorwf	(??_UpdateDistance+2)& (0+255),w,b
 15560  017BE2  0101               	movlb	1	; () banked
 15561  017BE4  6F4E               	movwf	_Current_Dist& (0+255),b
 15562  017BE6  0100               	movlb	0	; () banked
 15563  017BE8  5166               	movf	(??_UpdateDistance+3)& (0+255),w,b
 15564  017BEA  0101               	movlb	1	; () banked
 15565  017BEC  6F4F               	movwf	(_Current_Dist+1)& (0+255),b
 15566                           
 15567                           ; BSR set to: 1
 15568                           ;dans.c: 293: return Current_Dist;
 15569  017BEE  C14E  F061         	movff	_Current_Dist,?_UpdateDistance
 15570  017BF2  C14F  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
 15571  017BF6  0012               	return	
 15572  017BF8                     __end_of_UpdateDistance:
 15573                           	opt stack 0
 15574                           tosu	equ	0xFFF
 15575                           tosh	equ	0xFFE
 15576                           tosl	equ	0xFFD
 15577                           pclath	equ	0xFFA
 15578                           tblptru	equ	0xFF8
 15579                           tblptrh	equ	0xFF7
 15580                           tblptrl	equ	0xFF6
 15581                           tablat	equ	0xFF5
 15582                           prodh	equ	0xFF4
 15583                           prodl	equ	0xFF3
 15584                           intcon	equ	0xFF2
 15585                           postinc0	equ	0xFEE
 15586                           wreg	equ	0xFE8
 15587                           indf1	equ	0xFE7
 15588                           postdec1	equ	0xFE5
 15589                           fsr1h	equ	0xFE2
 15590                           fsr1l	equ	0xFE1
 15591                           indf2	equ	0xFDF
 15592                           postinc2	equ	0xFDE
 15593                           postdec2	equ	0xFDD
 15594                           plusw2	equ	0xFDB
 15595                           fsr2h	equ	0xFDA
 15596                           fsr2l	equ	0xFD9
 15597                           status	equ	0xFD8
 15598                           
 15599 ;; *************** function _Turn *****************
 15600 ;; Defined at:
 15601 ;;		line 324 in file "dans.c"
 15602 ;; Parameters:    Size  Location     Type
 15603 ;;  Angle           2    1[BANK0 ] int 
 15604 ;;  Speed           2    3[BANK0 ] int 
 15605 ;;  Dir             2    5[BANK0 ] int 
 15606 ;; Auto vars:     Size  Location     Type
 15607 ;;  Rad             2    9[BANK0 ] int 
 15608 ;;  C_Angle         2    7[BANK0 ] int 
 15609 ;; Return value:  Size  Location     Type
 15610 ;;                  2    1[BANK0 ] int 
 15611 ;; Registers used:
 15612 ;;		wreg, status,2, status,0, cstack
 15613 ;; Tracked objects:
 15614 ;;		On entry : 0/0
 15615 ;;		On exit  : 0/0
 15616 ;;		Unchanged: 0/0
 15617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15618 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15619 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15621 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15622 ;;Total ram usage:       10 bytes
 15623 ;; Hardware stack levels used:    1
 15624 ;; Hardware stack levels required when called:    9
 15625 ;; This function calls:
 15626 ;;		_Robot_Stop
 15627 ;;		_eusartRec
 15628 ;;		_eusartSend
 15629 ;; This function is called by:
 15630 ;;		_Travel
 15631 ;; This function uses a non-reentrant model
 15632 ;;
 15633                           
 15634                           	psect	text72
 15635  017748                     __ptext72:
 15636                           	opt stack 0
 15637  017748                     _Turn:
 15638                           	opt stack 20
 15639                           
 15640                           ;dans.c: 325: int Rad = 1;
 15641                           
 15642                           ; BSR set to: 1
 15643                           ;incstack = 0
 15644  017748  0E00               	movlw	0
 15645  01774A  0100               	movlb	0	; () banked
 15646  01774C  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
 15647  01774E  0E01               	movlw	1
 15648  017750  6F69               	movwf	Turn@Rad& (0+255),b
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;dans.c: 326: if (Dir == 0){
 15652  017752  5165               	movf	Turn@Dir& (0+255),w,b
 15653  017754  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
 15654  017756  A4D8               	btfss	status,2,c
 15655  017758  D004               	goto	l2416
 15656                           
 15657                           ; BSR set to: 0
 15658                           ;dans.c: 327: Rad = 65535;
 15659  01775A  6969               	setf	Turn@Rad& (0+255),b
 15660  01775C  696A               	setf	(Turn@Rad+1)& (0+255),b
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;dans.c: 328: Angle = ~Angle;
 15664  01775E  1F61               	comf	Turn@Angle& (0+255),f,b
 15665  017760  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
 15666  017762                     l2416:
 15667                           
 15668                           ; BSR set to: 0
 15669                           ;dans.c: 329: }
 15670                           ;dans.c: 331: eusartSend(137);
 15671                           
 15672                           ; BSR set to: 0
 15673  017762  0E89               	movlw	137
 15674  017764  EC2D  F0C6         	call	_eusartSend
 15675                           
 15676                           ;dans.c: 332: eusartSend(((unsigned char)(((Speed)>>8)&0xFF)));
 15677  017768  0100               	movlb	0	; () banked
 15678  01776A  5164               	movf	(Turn@Speed+1)& (0+255),w,b
 15679  01776C  EC2D  F0C6         	call	_eusartSend
 15680                           
 15681                           ;dans.c: 333: eusartSend(((unsigned char)((Speed)&0xFF)));
 15682  017770  0100               	movlb	0	; () banked
 15683  017772  5163               	movf	Turn@Speed& (0+255),w,b
 15684  017774  EC2D  F0C6         	call	_eusartSend
 15685                           
 15686                           ;dans.c: 334: eusartSend(((unsigned char)(((Rad)>>8)&0xFF)));
 15687  017778  0100               	movlb	0	; () banked
 15688  01777A  516A               	movf	(Turn@Rad+1)& (0+255),w,b
 15689  01777C  EC2D  F0C6         	call	_eusartSend
 15690                           
 15691                           ;dans.c: 335: eusartSend(((unsigned char)((Rad)&0xFF)));
 15692  017780  0100               	movlb	0	; () banked
 15693  017782  5169               	movf	Turn@Rad& (0+255),w,b
 15694  017784  EC2D  F0C6         	call	_eusartSend
 15695                           
 15696                           ;dans.c: 336: int C_Angle = 0;
 15697  017788  0E00               	movlw	0
 15698  01778A  0100               	movlb	0	; () banked
 15699  01778C  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
 15700  01778E  0E00               	movlw	0
 15701  017790  6F67               	movwf	Turn@C_Angle& (0+255),b
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;dans.c: 337: eusartSend(157);
 15705  017792  0E9D               	movlw	157
 15706  017794  EC2D  F0C6         	call	_eusartSend
 15707                           
 15708                           ;dans.c: 338: eusartSend(((unsigned char)(((Angle)>>8)&0xFF)));
 15709  017798  0100               	movlb	0	; () banked
 15710  01779A  5162               	movf	(Turn@Angle+1)& (0+255),w,b
 15711  01779C  EC2D  F0C6         	call	_eusartSend
 15712                           
 15713                           ;dans.c: 339: eusartSend(((unsigned char)((Angle)&0xFF)));
 15714  0177A0  0100               	movlb	0	; () banked
 15715  0177A2  5161               	movf	Turn@Angle& (0+255),w,b
 15716  0177A4  EC2D  F0C6         	call	_eusartSend
 15717                           
 15718                           ;dans.c: 341: Robot_Stop();
 15719  0177A8  ECB0  F0C4         	call	_Robot_Stop	;wreg free
 15720                           
 15721                           ;dans.c: 343: eusartSend(142);
 15722  0177AC  0E8E               	movlw	142
 15723  0177AE  EC2D  F0C6         	call	_eusartSend
 15724                           
 15725                           ;dans.c: 344: eusartSend(7);
 15726  0177B2  0E07               	movlw	7
 15727  0177B4  EC2D  F0C6         	call	_eusartSend
 15728                           
 15729                           ;dans.c: 345: eusartRec();
 15730  0177B8  EC61  F0C6         	call	_eusartRec	;wreg free
 15731  0177BC  0012               	return		;funcret
 15732  0177BE                     __end_of_Turn:
 15733                           	opt stack 0
 15734                           tosu	equ	0xFFF
 15735                           tosh	equ	0xFFE
 15736                           tosl	equ	0xFFD
 15737                           pclath	equ	0xFFA
 15738                           tblptru	equ	0xFF8
 15739                           tblptrh	equ	0xFF7
 15740                           tblptrl	equ	0xFF6
 15741                           tablat	equ	0xFF5
 15742                           prodh	equ	0xFF4
 15743                           prodl	equ	0xFF3
 15744                           intcon	equ	0xFF2
 15745                           postinc0	equ	0xFEE
 15746                           wreg	equ	0xFE8
 15747                           indf1	equ	0xFE7
 15748                           postdec1	equ	0xFE5
 15749                           fsr1h	equ	0xFE2
 15750                           fsr1l	equ	0xFE1
 15751                           indf2	equ	0xFDF
 15752                           postinc2	equ	0xFDE
 15753                           postdec2	equ	0xFDD
 15754                           plusw2	equ	0xFDB
 15755                           fsr2h	equ	0xFDA
 15756                           fsr2l	equ	0xFD9
 15757                           status	equ	0xFD8
 15758                           
 15759 ;; *************** function _Robot_Stop *****************
 15760 ;; Defined at:
 15761 ;;		line 295 in file "dans.c"
 15762 ;; Parameters:    Size  Location     Type
 15763 ;;		None
 15764 ;; Auto vars:     Size  Location     Type
 15765 ;;		None
 15766 ;; Return value:  Size  Location     Type
 15767 ;;                  1    wreg      void 
 15768 ;; Registers used:
 15769 ;;		wreg, cstack
 15770 ;; Tracked objects:
 15771 ;;		On entry : 0/0
 15772 ;;		On exit  : 0/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15779 ;;Total ram usage:        0 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; Hardware stack levels required when called:    8
 15782 ;; This function calls:
 15783 ;;		_eusartSend
 15784 ;; This function is called by:
 15785 ;;		_Robot_Init
 15786 ;;		_Turn
 15787 ;;		_Travel
 15788 ;; This function uses a non-reentrant model
 15789 ;;
 15790                           
 15791                           	psect	text73
 15792  018960                     __ptext73:
 15793                           	opt stack 0
 15794  018960                     _Robot_Stop:
 15795                           	opt stack 20
 15796                           
 15797                           ;dans.c: 296: eusartSend(137);
 15798                           
 15799                           ;incstack = 0
 15800  018960  0E89               	movlw	137
 15801  018962  EC2D  F0C6         	call	_eusartSend
 15802                           
 15803                           ;dans.c: 297: eusartSend(0);
 15804  018966  0E00               	movlw	0
 15805  018968  EC2D  F0C6         	call	_eusartSend
 15806                           
 15807                           ;dans.c: 298: eusartSend(0);
 15808  01896C  0E00               	movlw	0
 15809  01896E  EC2D  F0C6         	call	_eusartSend
 15810                           
 15811                           ;dans.c: 299: eusartSend(0);
 15812  018972  0E00               	movlw	0
 15813  018974  EC2D  F0C6         	call	_eusartSend
 15814                           
 15815                           ;dans.c: 300: eusartSend(0);
 15816  018978  0E00               	movlw	0
 15817  01897A  EC2D  F0C6         	call	_eusartSend
 15818  01897E  0012               	return		;funcret
 15819  018980                     __end_of_Robot_Stop:
 15820                           	opt stack 0
 15821                           tosu	equ	0xFFF
 15822                           tosh	equ	0xFFE
 15823                           tosl	equ	0xFFD
 15824                           pclath	equ	0xFFA
 15825                           tblptru	equ	0xFF8
 15826                           tblptrh	equ	0xFF7
 15827                           tblptrl	equ	0xFF6
 15828                           tablat	equ	0xFF5
 15829                           prodh	equ	0xFF4
 15830                           prodl	equ	0xFF3
 15831                           intcon	equ	0xFF2
 15832                           postinc0	equ	0xFEE
 15833                           wreg	equ	0xFE8
 15834                           indf1	equ	0xFE7
 15835                           postdec1	equ	0xFE5
 15836                           fsr1h	equ	0xFE2
 15837                           fsr1l	equ	0xFE1
 15838                           indf2	equ	0xFDF
 15839                           postinc2	equ	0xFDE
 15840                           postdec2	equ	0xFDD
 15841                           plusw2	equ	0xFDB
 15842                           fsr2h	equ	0xFDA
 15843                           fsr2l	equ	0xFD9
 15844                           status	equ	0xFD8
 15845                           
 15846 ;; *************** function _Move_ADC_To *****************
 15847 ;; Defined at:
 15848 ;;		line 552 in file "dans.c"
 15849 ;; Parameters:    Size  Location     Type
 15850 ;;  Angle           2   73[BANK0 ] int 
 15851 ;; Auto vars:     Size  Location     Type
 15852 ;;		None
 15853 ;; Return value:  Size  Location     Type
 15854 ;;                  1    wreg      void 
 15855 ;; Registers used:
 15856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15857 ;; Tracked objects:
 15858 ;;		On entry : 0/0
 15859 ;;		On exit  : 0/0
 15860 ;;		Unchanged: 0/0
 15861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15866 ;;Total ram usage:        2 bytes
 15867 ;; Hardware stack levels used:    1
 15868 ;; Hardware stack levels required when called:   13
 15869 ;; This function calls:
 15870 ;;		_Console_Render
 15871 ;;		_SteppingCCW
 15872 ;;		_SteppingCW
 15873 ;;		___fladd
 15874 ;;		___flmul
 15875 ;;		___fltol
 15876 ;;		___xxtofl
 15877 ;;		_printf
 15878 ;; This function is called by:
 15879 ;;		_Travel
 15880 ;; This function uses a non-reentrant model
 15881 ;;
 15882                           
 15883                           	psect	text74
 15884  015864                     __ptext74:
 15885                           	opt stack 0
 15886  015864                     _Move_ADC_To:
 15887                           	opt stack 16
 15888                           
 15889                           ;dans.c: 554: if (flag==0){
 15890                           
 15891                           ;incstack = 0
 15892  015864  502C               	movf	_flag,w,c
 15893  015866  102D               	iorwf	_flag+1,w,c
 15894  015868  A4D8               	btfss	status,2,c
 15895  01586A  D042               	goto	l2481
 15896                           
 15897                           ;dans.c: 556: Steps = (Angle * 1.42222)+200;
 15898  01586C  0E00               	movlw	0
 15899  01586E  0100               	movlb	0	; () banked
 15900  015870  6F8F               	movwf	___fladd@a& (0+255),b
 15901  015872  0E00               	movlw	0
 15902  015874  6F90               	movwf	(___fladd@a+1)& (0+255),b
 15903  015876  0E48               	movlw	72
 15904  015878  6F91               	movwf	(___fladd@a+2)& (0+255),b
 15905  01587A  0E43               	movlw	67
 15906  01587C  6F92               	movwf	(___fladd@a+3)& (0+255),b
 15907  01587E  0E4E               	movlw	78
 15908  015880  6F72               	movwf	___flmul@a& (0+255),b
 15909  015882  0E0B               	movlw	11
 15910  015884  6F73               	movwf	(___flmul@a+1)& (0+255),b
 15911  015886  0EB6               	movlw	182
 15912  015888  6F74               	movwf	(___flmul@a+2)& (0+255),b
 15913  01588A  0E3F               	movlw	63
 15914  01588C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 15915  01588E  C0A9  F060         	movff	Move_ADC_To@Angle,___xxtofl@val
 15916  015892  C0AA  F061         	movff	Move_ADC_To@Angle+1,___xxtofl@val+1
 15917  015896  0E00               	movlw	0
 15918  015898  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 15919  01589A  0EFF               	movlw	-1
 15920  01589C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 15921  01589E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 15922  0158A0  0E01               	movlw	1
 15923  0158A2  ECDF  F0AC         	call	___xxtofl
 15924  0158A6  C060  F06E         	movff	?___xxtofl,___flmul@b
 15925  0158AA  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 15926  0158AE  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 15927  0158B2  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 15928  0158B6  ECDB  F09A         	call	___flmul	;wreg free
 15929  0158BA  C06E  F08B         	movff	?___flmul,___fladd@b
 15930  0158BE  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 15931  0158C2  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 15932  0158C6  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 15933  0158CA  EC84  F09C         	call	___fladd	;wreg free
 15934  0158CE  C08B  F09F         	movff	?___fladd,___fltol@f1
 15935  0158D2  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 15936  0158D6  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 15937  0158DA  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 15938  0158DE  ECCF  F0B4         	call	___fltol	;wreg free
 15939  0158E2  C09F  F144         	movff	?___fltol,_Steps
 15940  0158E6  C0A0  F145         	movff	?___fltol+1,_Steps+1
 15941                           
 15942                           ;dans.c: 557: flag++;
 15943  0158EA  4A2C               	infsnz	_flag,f,c
 15944  0158EC  2A2D               	incf	_flag+1,f,c
 15945                           
 15946                           ;dans.c: 558: }
 15947  0158EE  D031               	goto	l2483
 15948  0158F0                     l2481:
 15949                           
 15950                           ;dans.c: 559: else if (!flag==0){
 15951  0158F0  502C               	movf	_flag,w,c
 15952  0158F2  102D               	iorwf	_flag+1,w,c
 15953  0158F4  B4D8               	btfsc	status,2,c
 15954  0158F6  D02D               	goto	l2483
 15955                           
 15956                           ;dans.c: 560: Steps = (Angle * 1.42222);
 15957  0158F8  0E4E               	movlw	78
 15958  0158FA  0100               	movlb	0	; () banked
 15959  0158FC  6F72               	movwf	___flmul@a& (0+255),b
 15960  0158FE  0E0B               	movlw	11
 15961  015900  6F73               	movwf	(___flmul@a+1)& (0+255),b
 15962  015902  0EB6               	movlw	182
 15963  015904  6F74               	movwf	(___flmul@a+2)& (0+255),b
 15964  015906  0E3F               	movlw	63
 15965  015908  6F75               	movwf	(___flmul@a+3)& (0+255),b
 15966  01590A  C0A9  F060         	movff	Move_ADC_To@Angle,___xxtofl@val
 15967  01590E  C0AA  F061         	movff	Move_ADC_To@Angle+1,___xxtofl@val+1
 15968  015912  0E00               	movlw	0
 15969  015914  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 15970  015916  0EFF               	movlw	-1
 15971  015918  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 15972  01591A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 15973  01591C  0E01               	movlw	1
 15974  01591E  ECDF  F0AC         	call	___xxtofl
 15975  015922  C060  F06E         	movff	?___xxtofl,___flmul@b
 15976  015926  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 15977  01592A  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 15978  01592E  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 15979  015932  ECDB  F09A         	call	___flmul	;wreg free
 15980  015936  C06E  F09F         	movff	?___flmul,___fltol@f1
 15981  01593A  C06F  F0A0         	movff	?___flmul+1,___fltol@f1+1
 15982  01593E  C070  F0A1         	movff	?___flmul+2,___fltol@f1+2
 15983  015942  C071  F0A2         	movff	?___flmul+3,___fltol@f1+3
 15984  015946  ECCF  F0B4         	call	___fltol	;wreg free
 15985  01594A  C09F  F144         	movff	?___fltol,_Steps
 15986  01594E  C0A0  F145         	movff	?___fltol+1,_Steps+1
 15987  015952                     l2483:
 15988                           
 15989                           ;dans.c: 561: }
 15990                           ;dans.c: 563: printf("%c", (char)35);
 15991  015952  0EFC               	movlw	low STR_1
 15992  015954  0100               	movlb	0	; () banked
 15993  015956  6F75               	movwf	printf@f& (0+255),b
 15994  015958  0EFF               	movlw	high STR_1
 15995  01595A  6F76               	movwf	(printf@f+1)& (0+255),b
 15996  01595C  0E00               	movlw	0
 15997  01595E  6F78               	movwf	(?_printf+3)& (0+255),b
 15998  015960  0E23               	movlw	35
 15999  015962  6F77               	movwf	(?_printf+2)& (0+255),b
 16000  015964  EC7E  F0AB         	call	_printf	;wreg free
 16001                           
 16002                           ;dans.c: 564: printf("\nSteps %d", Steps);
 16003  015968  0EC7               	movlw	low STR_30
 16004  01596A  0100               	movlb	0	; () banked
 16005  01596C  6F75               	movwf	printf@f& (0+255),b
 16006  01596E  0EFF               	movlw	high STR_30
 16007  015970  6F76               	movwf	(printf@f+1)& (0+255),b
 16008  015972  C144  F077         	movff	_Steps,?_printf+2
 16009  015976  C145  F078         	movff	_Steps+1,?_printf+3
 16010  01597A  EC7E  F0AB         	call	_printf	;wreg free
 16011                           
 16012                           ;dans.c: 565: printf("\nFlag %d", flag);
 16013  01597E  0EDB               	movlw	low STR_31
 16014  015980  0100               	movlb	0	; () banked
 16015  015982  6F75               	movwf	printf@f& (0+255),b
 16016  015984  0EFF               	movlw	high STR_31
 16017  015986  6F76               	movwf	(printf@f+1)& (0+255),b
 16018  015988  C02C  F077         	movff	_flag,?_printf+2
 16019  01598C  C02D  F078         	movff	_flag+1,?_printf+3
 16020  015990  EC7E  F0AB         	call	_printf	;wreg free
 16021                           
 16022                           ;dans.c: 566: Console_Render();
 16023  015994  ECA2  F0A7         	call	_Console_Render	;wreg free
 16024                           
 16025                           ;dans.c: 567: while (Steps >= 0){
 16026  015998  D006               	goto	l2484
 16027  01599A                     
 16028                           ;dans.c: 568: Steps --;
 16029  01599A  0101               	movlb	1	; () banked
 16030  01599C  0744               	decf	_Steps& (0+255),f,b
 16031  01599E  A0D8               	btfss	status,0,c
 16032  0159A0  0745               	decf	(_Steps+1)& (0+255),f,b
 16033                           
 16034                           ; BSR set to: 1
 16035                           ;dans.c: 569: SteppingCW();
 16036  0159A2  ECCC  F0C0         	call	_SteppingCW	;wreg free
 16037  0159A6                     l2484:
 16038  0159A6  0101               	movlb	1	; () banked
 16039  0159A8  BF45               	btfsc	(_Steps+1)& (0+255),7,b
 16040  0159AA  D005               	goto	l2487
 16041  0159AC  D7F6               	goto	l2485
 16042  0159AE                     
 16043                           ; BSR set to: 1
 16044                           ;dans.c: 572: Steps ++;
 16045                           
 16046                           ; BSR set to: 1
 16047  0159AE  4B44               	infsnz	_Steps& (0+255),f,b
 16048  0159B0  2B45               	incf	(_Steps+1)& (0+255),f,b
 16049                           
 16050                           ; BSR set to: 1
 16051                           ;dans.c: 573: SteppingCCW();
 16052  0159B2  EC16  F0C1         	call	_SteppingCCW	;wreg free
 16053  0159B6                     l2487:
 16054  0159B6  0101               	movlb	1	; () banked
 16055  0159B8  AF45               	btfss	(_Steps+1)& (0+255),7,b
 16056  0159BA  0012               	return	
 16057  0159BC  D7F8               	goto	l2488
 16058  0159BE                     __end_of_Move_ADC_To:
 16059                           	opt stack 0
 16060                           tosu	equ	0xFFF
 16061                           tosh	equ	0xFFE
 16062                           tosl	equ	0xFFD
 16063                           pclath	equ	0xFFA
 16064                           tblptru	equ	0xFF8
 16065                           tblptrh	equ	0xFF7
 16066                           tblptrl	equ	0xFF6
 16067                           tablat	equ	0xFF5
 16068                           prodh	equ	0xFF4
 16069                           prodl	equ	0xFF3
 16070                           intcon	equ	0xFF2
 16071                           postinc0	equ	0xFEE
 16072                           wreg	equ	0xFE8
 16073                           indf1	equ	0xFE7
 16074                           postdec1	equ	0xFE5
 16075                           fsr1h	equ	0xFE2
 16076                           fsr1l	equ	0xFE1
 16077                           indf2	equ	0xFDF
 16078                           postinc2	equ	0xFDE
 16079                           postdec2	equ	0xFDD
 16080                           plusw2	equ	0xFDB
 16081                           fsr2h	equ	0xFDA
 16082                           fsr2l	equ	0xFD9
 16083                           status	equ	0xFD8
 16084                           
 16085 ;; *************** function _SteppingCW *****************
 16086 ;; Defined at:
 16087 ;;		line 525 in file "dans.c"
 16088 ;; Parameters:    Size  Location     Type
 16089 ;;		None
 16090 ;; Auto vars:     Size  Location     Type
 16091 ;;		None
 16092 ;; Return value:  Size  Location     Type
 16093 ;;                  2  2002[None  ] int 
 16094 ;; Registers used:
 16095 ;;		wreg, status,2, status,0, cstack
 16096 ;; Tracked objects:
 16097 ;;		On entry : 0/0
 16098 ;;		On exit  : 0/0
 16099 ;;		Unchanged: 0/0
 16100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16105 ;;Total ram usage:        0 bytes
 16106 ;; Hardware stack levels used:    1
 16107 ;; Hardware stack levels required when called:    8
 16108 ;; This function calls:
 16109 ;;		_STP1
 16110 ;;		_STP2
 16111 ;;		_STP3
 16112 ;;		_STP4
 16113 ;;		_delay_ms
 16114 ;; This function is called by:
 16115 ;;		_Sensor_Observe
 16116 ;;		_Move_ADC_To
 16117 ;; This function uses a non-reentrant model
 16118 ;;
 16119                           
 16120                           	psect	text75
 16121  018198                     __ptext75:
 16122                           	opt stack 0
 16123  018198                     _SteppingCW:
 16124                           	opt stack 20
 16125                           
 16126                           ;dans.c: 526: STP1();
 16127                           
 16128                           ; BSR set to: 1
 16129                           ;incstack = 0
 16130  018198  EC0C  F0C6         	call	_STP1	;wreg free
 16131                           
 16132                           ;dans.c: 527: delay_ms(2);
 16133  01819C  0E00               	movlw	0
 16134  01819E  0100               	movlb	0	; () banked
 16135  0181A0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16136  0181A2  0E02               	movlw	2
 16137  0181A4  6F60               	movwf	delay_ms@ms& (0+255),b
 16138  0181A6  ECBA  F0BE         	call	_delay_ms	;wreg free
 16139                           
 16140                           ;dans.c: 528: STP2();
 16141  0181AA  EC02  F0C6         	call	_STP2	;wreg free
 16142                           
 16143                           ;dans.c: 529: delay_ms(2);
 16144  0181AE  0E00               	movlw	0
 16145  0181B0  0100               	movlb	0	; () banked
 16146  0181B2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16147  0181B4  0E02               	movlw	2
 16148  0181B6  6F60               	movwf	delay_ms@ms& (0+255),b
 16149  0181B8  ECBA  F0BE         	call	_delay_ms	;wreg free
 16150                           
 16151                           ;dans.c: 530: STP3();
 16152  0181BC  ECF8  F0C5         	call	_STP3	;wreg free
 16153                           
 16154                           ;dans.c: 531: delay_ms(2);
 16155  0181C0  0E00               	movlw	0
 16156  0181C2  0100               	movlb	0	; () banked
 16157  0181C4  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16158  0181C6  0E02               	movlw	2
 16159  0181C8  6F60               	movwf	delay_ms@ms& (0+255),b
 16160  0181CA  ECBA  F0BE         	call	_delay_ms	;wreg free
 16161                           
 16162                           ;dans.c: 532: STP4();
 16163  0181CE  ECEE  F0C5         	call	_STP4	;wreg free
 16164                           
 16165                           ;dans.c: 533: delay_ms(2);
 16166  0181D2  0E00               	movlw	0
 16167  0181D4  0100               	movlb	0	; () banked
 16168  0181D6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 16169  0181D8  0E02               	movlw	2
 16170  0181DA  6F60               	movwf	delay_ms@ms& (0+255),b
 16171  0181DC  ECBA  F0BE         	call	_delay_ms	;wreg free
 16172  0181E0  0012               	return		;funcret
 16173  0181E2                     __end_of_SteppingCW:
 16174                           	opt stack 0
 16175                           tosu	equ	0xFFF
 16176                           tosh	equ	0xFFE
 16177                           tosl	equ	0xFFD
 16178                           pclath	equ	0xFFA
 16179                           tblptru	equ	0xFF8
 16180                           tblptrh	equ	0xFF7
 16181                           tblptrl	equ	0xFF6
 16182                           tablat	equ	0xFF5
 16183                           prodh	equ	0xFF4
 16184                           prodl	equ	0xFF3
 16185                           intcon	equ	0xFF2
 16186                           postinc0	equ	0xFEE
 16187                           wreg	equ	0xFE8
 16188                           indf1	equ	0xFE7
 16189                           postdec1	equ	0xFE5
 16190                           fsr1h	equ	0xFE2
 16191                           fsr1l	equ	0xFE1
 16192                           indf2	equ	0xFDF
 16193                           postinc2	equ	0xFDE
 16194                           postdec2	equ	0xFDD
 16195                           plusw2	equ	0xFDB
 16196                           fsr2h	equ	0xFDA
 16197                           fsr2l	equ	0xFD9
 16198                           status	equ	0xFD8
 16199                           
 16200 ;; *************** function _Get_VirtualWall_State *****************
 16201 ;; Defined at:
 16202 ;;		line 302 in file "dans.c"
 16203 ;; Parameters:    Size  Location     Type
 16204 ;;		None
 16205 ;; Auto vars:     Size  Location     Type
 16206 ;;  Vitual_Wall_    2    4[BANK0 ] int 
 16207 ;; Return value:  Size  Location     Type
 16208 ;;                  2    1[BANK0 ] int 
 16209 ;; Registers used:
 16210 ;;		wreg, status,2, status,0, cstack
 16211 ;; Tracked objects:
 16212 ;;		On entry : 0/0
 16213 ;;		On exit  : 0/0
 16214 ;;		Unchanged: 0/0
 16215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16216 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16217 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16219 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;Total ram usage:        5 bytes
 16221 ;; Hardware stack levels used:    1
 16222 ;; Hardware stack levels required when called:    8
 16223 ;; This function calls:
 16224 ;;		_eusartRec
 16225 ;;		_eusartSend
 16226 ;; This function is called by:
 16227 ;;		_Travel
 16228 ;; This function uses a non-reentrant model
 16229 ;;
 16230                           
 16231                           	psect	text76
 16232  01891C                     __ptext76:
 16233                           	opt stack 0
 16234  01891C                     _Get_VirtualWall_State:
 16235                           	opt stack 21
 16236                           
 16237                           ;dans.c: 303: eusartSend(142);
 16238                           
 16239                           ;incstack = 0
 16240  01891C  0E8E               	movlw	142
 16241  01891E  EC2D  F0C6         	call	_eusartSend
 16242                           
 16243                           ;dans.c: 304: eusartSend(13);
 16244  018922  0E0D               	movlw	13
 16245  018924  EC2D  F0C6         	call	_eusartSend
 16246                           
 16247                           ;dans.c: 305: int Vitual_Wall_Sensor = (eusartRec());
 16248  018928  EC61  F0C6         	call	_eusartRec	;wreg free
 16249  01892C  0100               	movlb	0	; () banked
 16250  01892E  6F63               	movwf	??_Get_VirtualWall_State& (0+255),b
 16251  018930  5163               	movf	??_Get_VirtualWall_State& (0+255),w,b
 16252  018932  6F64               	movwf	Get_VirtualWall_State@Vitual_Wall_Sensor& (0+255),b
 16253  018934  6B65               	clrf	(Get_VirtualWall_State@Vitual_Wall_Sensor+1)& (0+255),b
 16254                           
 16255                           ; BSR set to: 0
 16256                           ;dans.c: 306: return Vitual_Wall_Sensor;
 16257  018936  C064  F061         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor,?_Get_VirtualWall_State
 16258  01893A  C065  F062         	movff	Get_VirtualWall_State@Vitual_Wall_Sensor+1,?_Get_VirtualWall_State+1
 16259  01893E  0012               	return	
 16260  018940                     __end_of_Get_VirtualWall_State:
 16261                           	opt stack 0
 16262                           tosu	equ	0xFFF
 16263                           tosh	equ	0xFFE
 16264                           tosl	equ	0xFFD
 16265                           pclath	equ	0xFFA
 16266                           tblptru	equ	0xFF8
 16267                           tblptrh	equ	0xFF7
 16268                           tblptrl	equ	0xFF6
 16269                           tablat	equ	0xFF5
 16270                           prodh	equ	0xFF4
 16271                           prodl	equ	0xFF3
 16272                           intcon	equ	0xFF2
 16273                           postinc0	equ	0xFEE
 16274                           wreg	equ	0xFE8
 16275                           indf1	equ	0xFE7
 16276                           postdec1	equ	0xFE5
 16277                           fsr1h	equ	0xFE2
 16278                           fsr1l	equ	0xFE1
 16279                           indf2	equ	0xFDF
 16280                           postinc2	equ	0xFDE
 16281                           postdec2	equ	0xFDD
 16282                           plusw2	equ	0xFDB
 16283                           fsr2h	equ	0xFDA
 16284                           fsr2l	equ	0xFD9
 16285                           status	equ	0xFD8
 16286                           
 16287 ;; *************** function _Drive *****************
 16288 ;; Defined at:
 16289 ;;		line 270 in file "dans.c"
 16290 ;; Parameters:    Size  Location     Type
 16291 ;;  SpeedL          2    1[BANK0 ] int 
 16292 ;;  SpeedR          2    3[BANK0 ] int 
 16293 ;; Auto vars:     Size  Location     Type
 16294 ;;		None
 16295 ;; Return value:  Size  Location     Type
 16296 ;;                  1    wreg      void 
 16297 ;; Registers used:
 16298 ;;		wreg, status,2, status,0, cstack
 16299 ;; Tracked objects:
 16300 ;;		On entry : 0/0
 16301 ;;		On exit  : 0/0
 16302 ;;		Unchanged: 0/0
 16303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16304 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16307 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16308 ;;Total ram usage:        4 bytes
 16309 ;; Hardware stack levels used:    1
 16310 ;; Hardware stack levels required when called:    8
 16311 ;; This function calls:
 16312 ;;		_eusartSend
 16313 ;; This function is called by:
 16314 ;;		_Travel
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           	psect	text77
 16319  0181E2                     __ptext77:
 16320                           	opt stack 0
 16321  0181E2                     _Drive:
 16322                           	opt stack 21
 16323                           
 16324                           ;dans.c: 271: if (SpeedL < 0){
 16325                           
 16326                           ; BSR set to: 0
 16327                           ;incstack = 0
 16328  0181E2  0100               	movlb	0	; () banked
 16329  0181E4  AF62               	btfss	(Drive@SpeedL+1)& (0+255),7,b
 16330  0181E6  D006               	goto	l2397
 16331                           
 16332                           ; BSR set to: 0
 16333                           ;dans.c: 272: SpeedL = -1*SpeedL;
 16334  0181E8  6D61               	negf	Drive@SpeedL& (0+255),b
 16335  0181EA  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
 16336  0181EC  B0D8               	btfsc	status,0,c
 16337  0181EE  2B62               	incf	(Drive@SpeedL+1)& (0+255),f,b
 16338                           
 16339                           ;dans.c: 273: SpeedL = ~SpeedL;
 16340  0181F0  1F61               	comf	Drive@SpeedL& (0+255),f,b
 16341  0181F2  1F62               	comf	(Drive@SpeedL+1)& (0+255),f,b
 16342  0181F4                     l2397:
 16343                           
 16344                           ; BSR set to: 0
 16345                           ;dans.c: 274: }
 16346                           ;dans.c: 275: if (SpeedR < 0){
 16347                           
 16348                           ; BSR set to: 0
 16349  0181F4  AF64               	btfss	(Drive@SpeedR+1)& (0+255),7,b
 16350  0181F6  D006               	goto	l2398
 16351                           
 16352                           ; BSR set to: 0
 16353                           ;dans.c: 276: SpeedR = -1*SpeedR;
 16354  0181F8  6D63               	negf	Drive@SpeedR& (0+255),b
 16355  0181FA  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
 16356  0181FC  B0D8               	btfsc	status,0,c
 16357  0181FE  2B64               	incf	(Drive@SpeedR+1)& (0+255),f,b
 16358                           
 16359                           ;dans.c: 277: SpeedR = ~SpeedR;
 16360  018200  1F63               	comf	Drive@SpeedR& (0+255),f,b
 16361  018202  1F64               	comf	(Drive@SpeedR+1)& (0+255),f,b
 16362  018204                     l2398:
 16363                           
 16364                           ; BSR set to: 0
 16365                           ;dans.c: 278: }
 16366                           ;dans.c: 280: eusartSend(145);
 16367                           
 16368                           ; BSR set to: 0
 16369  018204  0E91               	movlw	145
 16370  018206  EC2D  F0C6         	call	_eusartSend
 16371                           
 16372                           ;dans.c: 281: eusartSend(((unsigned char)(((SpeedL)>>8)&0xFF)));
 16373  01820A  0100               	movlb	0	; () banked
 16374  01820C  5162               	movf	(Drive@SpeedL+1)& (0+255),w,b
 16375  01820E  EC2D  F0C6         	call	_eusartSend
 16376                           
 16377                           ;dans.c: 282: eusartSend(((unsigned char)((SpeedL)&0xFF)));
 16378  018212  0100               	movlb	0	; () banked
 16379  018214  5161               	movf	Drive@SpeedL& (0+255),w,b
 16380  018216  EC2D  F0C6         	call	_eusartSend
 16381                           
 16382                           ;dans.c: 283: eusartSend(((unsigned char)(((SpeedR)>>8)&0xFF)));
 16383  01821A  0100               	movlb	0	; () banked
 16384  01821C  5164               	movf	(Drive@SpeedR+1)& (0+255),w,b
 16385  01821E  EC2D  F0C6         	call	_eusartSend
 16386                           
 16387                           ;dans.c: 284: eusartSend(((unsigned char)((SpeedR)&0xFF)));
 16388  018222  0100               	movlb	0	; () banked
 16389  018224  5163               	movf	Drive@SpeedR& (0+255),w,b
 16390  018226  EC2D  F0C6         	call	_eusartSend
 16391  01822A  0012               	return		;funcret
 16392  01822C                     __end_of_Drive:
 16393                           	opt stack 0
 16394                           tosu	equ	0xFFF
 16395                           tosh	equ	0xFFE
 16396                           tosl	equ	0xFFD
 16397                           pclath	equ	0xFFA
 16398                           tblptru	equ	0xFF8
 16399                           tblptrh	equ	0xFF7
 16400                           tblptrl	equ	0xFF6
 16401                           tablat	equ	0xFF5
 16402                           prodh	equ	0xFF4
 16403                           prodl	equ	0xFF3
 16404                           intcon	equ	0xFF2
 16405                           postinc0	equ	0xFEE
 16406                           wreg	equ	0xFE8
 16407                           indf1	equ	0xFE7
 16408                           postdec1	equ	0xFE5
 16409                           fsr1h	equ	0xFE2
 16410                           fsr1l	equ	0xFE1
 16411                           indf2	equ	0xFDF
 16412                           postinc2	equ	0xFDE
 16413                           postdec2	equ	0xFDD
 16414                           plusw2	equ	0xFDB
 16415                           fsr2h	equ	0xFDA
 16416                           fsr2l	equ	0xFD9
 16417                           status	equ	0xFD8
 16418                           
 16419 ;; *************** function _FunctInitButton *****************
 16420 ;; Defined at:
 16421 ;;		line 16 in file "Functions.c"
 16422 ;; Parameters:    Size  Location     Type
 16423 ;;		None
 16424 ;; Auto vars:     Size  Location     Type
 16425 ;;		None
 16426 ;; Return value:  Size  Location     Type
 16427 ;;                  1    wreg      void 
 16428 ;; Registers used:
 16429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16430 ;; Tracked objects:
 16431 ;;		On entry : 0/0
 16432 ;;		On exit  : 0/0
 16433 ;;		Unchanged: 0/0
 16434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16439 ;;Total ram usage:        0 bytes
 16440 ;; Hardware stack levels used:    1
 16441 ;; Hardware stack levels required when called:   16
 16442 ;; This function calls:
 16443 ;;		_Button_Init
 16444 ;; This function is called by:
 16445 ;;		_main
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           	psect	text78
 16450  0177BE                     __ptext78:
 16451                           	opt stack 0
 16452  0177BE                     _FunctInitButton:
 16453                           	opt stack 14
 16454                           
 16455                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 16456                           
 16457                           ;incstack = 0
 16458  0177BE  0EA9               	movlw	low _TestButton
 16459  0177C0  0100               	movlb	0	; () banked
 16460  0177C2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16461  0177C4  0E02               	movlw	high _TestButton
 16462  0177C6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16463  0177C8  0E00               	movlw	0
 16464  0177CA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16465  0177CC  0E02               	movlw	2
 16466  0177CE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16467  0177D0  0EE4               	movlw	low _MXK_InitTestButton
 16468  0177D2  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16469  0177D4  0E8A               	movlw	high _MXK_InitTestButton
 16470  0177D6  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16471  0177D8  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 16472  0177DA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16473  0177DC  0EA0               	movlw	low _MXK_TestButton
 16474  0177DE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16475  0177E0  0E8B               	movlw	high _MXK_TestButton
 16476  0177E2  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16477  0177E4  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 16478  0177E6  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16479  0177E8  0EA8               	movlw	low _Event_TestButton
 16480  0177EA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16481  0177EC  0E86               	movlw	high _Event_TestButton
 16482  0177EE  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16483  0177F0  0E01               	movlw	low (_Event_TestButton shr (0+16))
 16484  0177F2  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16485  0177F4  ECF7  F0B5         	call	_Button_Init	;wreg free
 16486                           
 16487                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 16488  0177F8  0E9F               	movlw	low _DIPSwitch
 16489  0177FA  0100               	movlb	0	; () banked
 16490  0177FC  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16491  0177FE  0E02               	movlw	high _DIPSwitch
 16492  017800  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16493  017802  0E00               	movlw	0
 16494  017804  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16495  017806  0E02               	movlw	2
 16496  017808  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16497  01780A  0ECC               	movlw	low _MXK_InitDIPSwitch
 16498  01780C  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16499  01780E  0E8A               	movlw	high _MXK_InitDIPSwitch
 16500  017810  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16501  017812  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 16502  017814  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16503  017816  0E28               	movlw	low _MXK_DIPSwitch
 16504  017818  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16505  01781A  0E8B               	movlw	high _MXK_DIPSwitch
 16506  01781C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16507  01781E  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 16508  017820  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16509  017822  0ED0               	movlw	low _Event_DIPSwitch
 16510  017824  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16511  017826  0E88               	movlw	high _Event_DIPSwitch
 16512  017828  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16513  01782A  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 16514  01782C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16515  01782E  ECF7  F0B5         	call	_Button_Init	;wreg free
 16516  017832  0012               	return		;funcret
 16517  017834                     __end_of_FunctInitButton:
 16518                           	opt stack 0
 16519                           tosu	equ	0xFFF
 16520                           tosh	equ	0xFFE
 16521                           tosl	equ	0xFFD
 16522                           pclath	equ	0xFFA
 16523                           tblptru	equ	0xFF8
 16524                           tblptrh	equ	0xFF7
 16525                           tblptrl	equ	0xFF6
 16526                           tablat	equ	0xFF5
 16527                           prodh	equ	0xFF4
 16528                           prodl	equ	0xFF3
 16529                           intcon	equ	0xFF2
 16530                           postinc0	equ	0xFEE
 16531                           wreg	equ	0xFE8
 16532                           indf1	equ	0xFE7
 16533                           postdec1	equ	0xFE5
 16534                           fsr1h	equ	0xFE2
 16535                           fsr1l	equ	0xFE1
 16536                           indf2	equ	0xFDF
 16537                           postinc2	equ	0xFDE
 16538                           postdec2	equ	0xFDD
 16539                           plusw2	equ	0xFDB
 16540                           fsr2h	equ	0xFDA
 16541                           fsr2l	equ	0xFD9
 16542                           status	equ	0xFD8
 16543                           
 16544 ;; *************** function _Button_Init *****************
 16545 ;; Defined at:
 16546 ;;		line 18 in file "Library/Button.c"
 16547 ;; Parameters:    Size  Location     Type
 16548 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 16549 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 16550 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 16551 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 16552 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 16553 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 16554 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 16555 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 16556 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 16557 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 16558 ;; Auto vars:     Size  Location     Type
 16559 ;;		None
 16560 ;; Return value:  Size  Location     Type
 16561 ;;                  1    wreg      void 
 16562 ;; Registers used:
 16563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16564 ;; Tracked objects:
 16565 ;;		On entry : 0/0
 16566 ;;		On exit  : 0/0
 16567 ;;		Unchanged: 0/0
 16568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16569 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16572 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16573 ;;Total ram usage:       13 bytes
 16574 ;; Hardware stack levels used:    1
 16575 ;; Hardware stack levels required when called:   15
 16576 ;; This function calls:
 16577 ;;		_HMI_InitButtons
 16578 ;;		_MXK_InitDIPSwitch
 16579 ;;		_MXK_InitTestButton
 16580 ;; This function is called by:
 16581 ;;		_HMI_Init
 16582 ;;		_FunctInitButton
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           	psect	text79
 16587  016BEE                     __ptext79:
 16588                           	opt stack 0
 16589  016BEE                     _Button_Init:
 16590                           	opt stack 14
 16591                           
 16592                           ;Button.c: 21: if(pInput==(void*)0)
 16593                           
 16594                           ;incstack = 0
 16595  016BEE  0100               	movlb	0	; () banked
 16596  016BF0  519B               	movf	Button_Init@pInput& (0+255),w,b
 16597  016BF2  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 16598  016BF4  B4D8               	btfsc	status,2,c
 16599  016BF6  0012               	return	
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;Button.c: 23: if(pInitIO==(void*)0)
 16603                           
 16604                           ; BSR set to: 0
 16605                           
 16606                           ; BSR set to: 0
 16607                           ;Button.c: 22: return;
 16608  016BF8  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16609  016BFA  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 16610  016BFC  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 16611  016BFE  B4D8               	btfsc	status,2,c
 16612  016C00  0012               	return	
 16613                           
 16614                           ; BSR set to: 0
 16615                           ;Button.c: 25: if(pGetState==(void*)0)
 16616                           
 16617                           ; BSR set to: 0
 16618                           
 16619                           ; BSR set to: 0
 16620                           ;Button.c: 24: return;
 16621  016C02  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 16622  016C04  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 16623  016C06  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 16624  016C08  B4D8               	btfsc	status,2,c
 16625  016C0A  0012               	return	
 16626                           
 16627                           ; BSR set to: 0
 16628                           ;Button.c: 27: if(pFunction==(void*)0)
 16629                           
 16630                           ; BSR set to: 0
 16631                           
 16632                           ; BSR set to: 0
 16633                           ;Button.c: 26: return;
 16634  016C0C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 16635  016C0E  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 16636  016C10  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 16637  016C12  B4D8               	btfsc	status,2,c
 16638  016C14  0012               	return	
 16639                           
 16640                           ; BSR set to: 0
 16641                           ;Button.c: 30: if(pThreshold == 0)
 16642                           
 16643                           ; BSR set to: 0
 16644                           
 16645                           ; BSR set to: 0
 16646                           ;Button.c: 28: return;
 16647  016C16  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 16648  016C18  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 16649  016C1A  A4D8               	btfss	status,2,c
 16650  016C1C  D004               	goto	l8
 16651                           
 16652                           ; BSR set to: 0
 16653                           ;Button.c: 31: pThreshold = 1;
 16654  016C1E  0E00               	movlw	0
 16655  016C20  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16656  016C22  0E01               	movlw	1
 16657  016C24  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16658  016C26                     l8:
 16659                           
 16660                           ; BSR set to: 0
 16661                           ;Button.c: 34: pInput->mState = 0;
 16662                           
 16663                           ; BSR set to: 0
 16664  016C26  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 16665  016C2A  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 16666  016C2E  0E00               	movlw	0
 16667  016C30  6EDF               	movwf	indf2,c
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;Button.c: 35: pInput->mCount = 0;
 16671  016C32  EE20 F001          	lfsr	2,1
 16672  016C36  519B               	movf	Button_Init@pInput& (0+255),w,b
 16673  016C38  26D9               	addwf	fsr2l,f,c
 16674  016C3A  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16675  016C3C  22DA               	addwfc	fsr2h,f,c
 16676  016C3E  0E00               	movlw	0
 16677  016C40  6EDF               	movwf	indf2,c
 16678                           
 16679                           ; BSR set to: 0
 16680                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 16681  016C42  EE20 F002          	lfsr	2,2
 16682  016C46  519B               	movf	Button_Init@pInput& (0+255),w,b
 16683  016C48  26D9               	addwf	fsr2l,f,c
 16684  016C4A  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16685  016C4C  22DA               	addwfc	fsr2h,f,c
 16686  016C4E  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 16687  016C52  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 16688                           
 16689                           ; BSR set to: 0
 16690                           ;Button.c: 37: pInput->mFunction = pFunction;
 16691  016C56  EE20 F004          	lfsr	2,4
 16692  016C5A  519B               	movf	Button_Init@pInput& (0+255),w,b
 16693  016C5C  26D9               	addwf	fsr2l,f,c
 16694  016C5E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16695  016C60  22DA               	addwfc	fsr2h,f,c
 16696  016C62  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 16697  016C66  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 16698  016C6A  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 16699                           
 16700                           ; BSR set to: 0
 16701                           ;Button.c: 38: pInput->mGetState = pGetState;
 16702  016C6E  EE20 F007          	lfsr	2,7
 16703  016C72  519B               	movf	Button_Init@pInput& (0+255),w,b
 16704  016C74  26D9               	addwf	fsr2l,f,c
 16705  016C76  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 16706  016C78  22DA               	addwfc	fsr2h,f,c
 16707  016C7A  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 16708  016C7E  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 16709  016C82  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 16710                           
 16711                           ; BSR set to: 0
 16712                           ;Button.c: 41: pInitIO();
 16713  016C86  D801               	call	u13618
 16714  016C88  0012               	return	
 16715  016C8A                     u13618:
 16716  016C8A  0005               	push	
 16717  016C8C  6EFA               	movwf	pclath,c
 16718  016C8E  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 16719  016C90  6EFD               	movwf	tosl,c
 16720  016C92  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 16721  016C94  6EFE               	movwf	tosh,c
 16722  016C96  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 16723  016C98  6EFF               	movwf	tosu,c
 16724  016C9A  50FA               	movf	pclath,w,c
 16725  016C9C  0012               	return		;indir
 16726  016C9E                     __end_of_Button_Init:
 16727                           	opt stack 0
 16728                           tosu	equ	0xFFF
 16729                           tosh	equ	0xFFE
 16730                           tosl	equ	0xFFD
 16731                           pclath	equ	0xFFA
 16732                           tblptru	equ	0xFF8
 16733                           tblptrh	equ	0xFF7
 16734                           tblptrl	equ	0xFF6
 16735                           tablat	equ	0xFF5
 16736                           prodh	equ	0xFF4
 16737                           prodl	equ	0xFF3
 16738                           intcon	equ	0xFF2
 16739                           postinc0	equ	0xFEE
 16740                           wreg	equ	0xFE8
 16741                           indf1	equ	0xFE7
 16742                           postdec1	equ	0xFE5
 16743                           fsr1h	equ	0xFE2
 16744                           fsr1l	equ	0xFE1
 16745                           indf2	equ	0xFDF
 16746                           postinc2	equ	0xFDE
 16747                           postdec2	equ	0xFDD
 16748                           plusw2	equ	0xFDB
 16749                           fsr2h	equ	0xFDA
 16750                           fsr2l	equ	0xFD9
 16751                           status	equ	0xFD8
 16752                           
 16753 ;; *************** function _MXK_InitDIPSwitch *****************
 16754 ;; Defined at:
 16755 ;;		line 20 in file "Library/MXK.c"
 16756 ;; Parameters:    Size  Location     Type
 16757 ;;		None
 16758 ;; Auto vars:     Size  Location     Type
 16759 ;;		None
 16760 ;; Return value:  Size  Location     Type
 16761 ;;                  1    wreg      void 
 16762 ;; Registers used:
 16763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16764 ;; Tracked objects:
 16765 ;;		On entry : 0/0
 16766 ;;		On exit  : 0/0
 16767 ;;		Unchanged: 0/0
 16768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16773 ;;Total ram usage:        0 bytes
 16774 ;; Hardware stack levels used:    1
 16775 ;; Hardware stack levels required when called:   14
 16776 ;; This function calls:
 16777 ;;		_Port_SetQuadType
 16778 ;; This function is called by:
 16779 ;;		_FunctInitButton
 16780 ;;		_Button_Init
 16781 ;; This function uses a non-reentrant model
 16782 ;;
 16783                           
 16784                           	psect	text80
 16785  018ACC                     __ptext80:
 16786                           	opt stack 0
 16787  018ACC                     _MXK_InitDIPSwitch:
 16788                           	opt stack 14
 16789                           
 16790                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 16791                           
 16792                           ;incstack = 0
 16793  018ACC  0E76               	movlw	low _PortD
 16794  018ACE  0100               	movlb	0	; () banked
 16795  018AD0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 16796  018AD2  0E01               	movlw	high _PortD
 16797  018AD4  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16798  018AD6  0E00               	movlw	0
 16799  018AD8  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16800  018ADA  0E00               	movlw	0
 16801  018ADC  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 16802  018ADE  ECC7  F0A4         	call	_Port_SetQuadType	;wreg free
 16803  018AE2  0012               	return		;funcret
 16804  018AE4                     __end_of_MXK_InitDIPSwitch:
 16805                           	opt stack 0
 16806                           tosu	equ	0xFFF
 16807                           tosh	equ	0xFFE
 16808                           tosl	equ	0xFFD
 16809                           pclath	equ	0xFFA
 16810                           tblptru	equ	0xFF8
 16811                           tblptrh	equ	0xFF7
 16812                           tblptrl	equ	0xFF6
 16813                           tablat	equ	0xFF5
 16814                           prodh	equ	0xFF4
 16815                           prodl	equ	0xFF3
 16816                           intcon	equ	0xFF2
 16817                           postinc0	equ	0xFEE
 16818                           wreg	equ	0xFE8
 16819                           indf1	equ	0xFE7
 16820                           postdec1	equ	0xFE5
 16821                           fsr1h	equ	0xFE2
 16822                           fsr1l	equ	0xFE1
 16823                           indf2	equ	0xFDF
 16824                           postinc2	equ	0xFDE
 16825                           postdec2	equ	0xFDD
 16826                           plusw2	equ	0xFDB
 16827                           fsr2h	equ	0xFDA
 16828                           fsr2l	equ	0xFD9
 16829                           status	equ	0xFD8
 16830                           
 16831 ;; *************** function _HMI_InitButtons *****************
 16832 ;; Defined at:
 16833 ;;		line 21 in file "HMI.c"
 16834 ;; Parameters:    Size  Location     Type
 16835 ;;		None
 16836 ;; Auto vars:     Size  Location     Type
 16837 ;;		None
 16838 ;; Return value:  Size  Location     Type
 16839 ;;                  1    wreg      void 
 16840 ;; Registers used:
 16841 ;;		wreg, status,2
 16842 ;; Tracked objects:
 16843 ;;		On entry : 0/0
 16844 ;;		On exit  : 0/0
 16845 ;;		Unchanged: 0/0
 16846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16851 ;;Total ram usage:        0 bytes
 16852 ;; Hardware stack levels used:    1
 16853 ;; Hardware stack levels required when called:    7
 16854 ;; This function calls:
 16855 ;;		Nothing
 16856 ;; This function is called by:
 16857 ;;		_HMI_Init
 16858 ;;		_Button_Init
 16859 ;; This function uses a non-reentrant model
 16860 ;;
 16861                           
 16862                           	psect	text81
 16863  018CD6                     __ptext81:
 16864                           	opt stack 0
 16865  018CD6                     _HMI_InitButtons:
 16866                           	opt stack 21
 16867                           
 16868                           ;HMI.c: 23: TRISE = 0xFC;
 16869                           
 16870                           ;incstack = 0
 16871  018CD6  0EFC               	movlw	252
 16872  018CD8  6E96               	movwf	3990,c	;volatile
 16873  018CDA  0012               	return		;funcret
 16874  018CDC                     __end_of_HMI_InitButtons:
 16875                           	opt stack 0
 16876                           tosu	equ	0xFFF
 16877                           tosh	equ	0xFFE
 16878                           tosl	equ	0xFFD
 16879                           pclath	equ	0xFFA
 16880                           tblptru	equ	0xFF8
 16881                           tblptrh	equ	0xFF7
 16882                           tblptrl	equ	0xFF6
 16883                           tablat	equ	0xFF5
 16884                           prodh	equ	0xFF4
 16885                           prodl	equ	0xFF3
 16886                           intcon	equ	0xFF2
 16887                           postinc0	equ	0xFEE
 16888                           wreg	equ	0xFE8
 16889                           indf1	equ	0xFE7
 16890                           postdec1	equ	0xFE5
 16891                           fsr1h	equ	0xFE2
 16892                           fsr1l	equ	0xFE1
 16893                           indf2	equ	0xFDF
 16894                           postinc2	equ	0xFDE
 16895                           postdec2	equ	0xFDD
 16896                           plusw2	equ	0xFDB
 16897                           fsr2h	equ	0xFDA
 16898                           fsr2l	equ	0xFD9
 16899                           status	equ	0xFD8
 16900                           
 16901 ;; *************** function _MXK_InitTestButton *****************
 16902 ;; Defined at:
 16903 ;;		line 10 in file "Library/MXK.c"
 16904 ;; Parameters:    Size  Location     Type
 16905 ;;		None
 16906 ;; Auto vars:     Size  Location     Type
 16907 ;;		None
 16908 ;; Return value:  Size  Location     Type
 16909 ;;                  1    wreg      void 
 16910 ;; Registers used:
 16911 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16912 ;; Tracked objects:
 16913 ;;		On entry : 0/0
 16914 ;;		On exit  : 0/0
 16915 ;;		Unchanged: 0/0
 16916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16921 ;;Total ram usage:        0 bytes
 16922 ;; Hardware stack levels used:    1
 16923 ;; Hardware stack levels required when called:   12
 16924 ;; This function calls:
 16925 ;;		_Port_SetPinType
 16926 ;; This function is called by:
 16927 ;;		_FunctInitButton
 16928 ;;		_Button_Init
 16929 ;; This function uses a non-reentrant model
 16930 ;;
 16931                           
 16932                           	psect	text82
 16933  018AE4                     __ptext82:
 16934                           	opt stack 0
 16935  018AE4                     _MXK_InitTestButton:
 16936                           	opt stack 16
 16937                           
 16938                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 16939                           
 16940                           ;incstack = 0
 16941  018AE4  0E80               	movlw	low _PortB
 16942  018AE6  0100               	movlb	0	; () banked
 16943  018AE8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 16944  018AEA  0E01               	movlw	high _PortB
 16945  018AEC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16946  018AEE  0E04               	movlw	4
 16947  018AF0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 16948  018AF2  0E00               	movlw	0
 16949  018AF4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 16950  018AF6  EC7D  F0A8         	call	_Port_SetPinType	;wreg free
 16951  018AFA  0012               	return		;funcret
 16952  018AFC                     __end_of_MXK_InitTestButton:
 16953                           	opt stack 0
 16954                           tosu	equ	0xFFF
 16955                           tosh	equ	0xFFE
 16956                           tosl	equ	0xFFD
 16957                           pclath	equ	0xFFA
 16958                           tblptru	equ	0xFF8
 16959                           tblptrh	equ	0xFF7
 16960                           tblptrl	equ	0xFF6
 16961                           tablat	equ	0xFF5
 16962                           prodh	equ	0xFF4
 16963                           prodl	equ	0xFF3
 16964                           intcon	equ	0xFF2
 16965                           postinc0	equ	0xFEE
 16966                           wreg	equ	0xFE8
 16967                           indf1	equ	0xFE7
 16968                           postdec1	equ	0xFE5
 16969                           fsr1h	equ	0xFE2
 16970                           fsr1l	equ	0xFE1
 16971                           indf2	equ	0xFDF
 16972                           postinc2	equ	0xFDE
 16973                           postdec2	equ	0xFDD
 16974                           plusw2	equ	0xFDB
 16975                           fsr2h	equ	0xFDA
 16976                           fsr2l	equ	0xFD9
 16977                           status	equ	0xFD8
 16978                           
 16979 ;; *************** function _Port_SetPinType *****************
 16980 ;; Defined at:
 16981 ;;		line 189 in file "Library/Port.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16984 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16985 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16986 ;;  pPin            1   40[BANK0 ] enum E6750
 16987 ;;  pType           1   41[BANK0 ] enum E6795
 16988 ;; Auto vars:     Size  Location     Type
 16989 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 16990 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 16991 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 16992 ;;  Output          1   42[BANK0 ] enum E6475
 16993 ;; Return value:  Size  Location     Type
 16994 ;;                  1    wreg      enum E6475
 16995 ;; Registers used:
 16996 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16997 ;; Tracked objects:
 16998 ;;		On entry : 0/0
 16999 ;;		On exit  : 0/0
 17000 ;;		Unchanged: 0/0
 17001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17002 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17003 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;Total ram usage:        7 bytes
 17007 ;; Hardware stack levels used:    1
 17008 ;; Hardware stack levels required when called:   11
 17009 ;; This function calls:
 17010 ;;		_Byte_SetBit
 17011 ;;		_PortProperty_Valid
 17012 ;;		_Word_SetPair
 17013 ;; This function is called by:
 17014 ;;		_Configure_GPIOs
 17015 ;;		_LED_Init
 17016 ;;		_Port_Init
 17017 ;;		_SPI_Init
 17018 ;;		_MXK_InitTestButton
 17019 ;;		_MXK_Init
 17020 ;;		_I2C_Init
 17021 ;;		_Motor_Init
 17022 ;; This function uses a non-reentrant model
 17023 ;;
 17024                           
 17025                           	psect	text83
 17026  0150FA                     __ptext83:
 17027                           	opt stack 0
 17028  0150FA                     _Port_SetPinType:
 17029                           	opt stack 18
 17030                           
 17031                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 17032                           
 17033                           ;incstack = 0
 17034  0150FA  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 17035  0150FE  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 17036  015102  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 17037  015106  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 17038                           
 17039                           ;Port.c: 192: ePinError Output = ePinErrorState;
 17040  01510A  0E05               	movlw	5
 17041  01510C  0100               	movlb	0	; () banked
 17042  01510E  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17043                           
 17044                           ;Port.c: 193: switch (pType)
 17045  015110  D0A7               	goto	l412
 17046  015112                     
 17047                           ; BSR set to: 0
 17048                           ;Port.c: 197: {
 17049                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17050                           
 17051                           ; BSR set to: 0
 17052  015112  EE20 F002          	lfsr	2,2
 17053  015116  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17054  015118  26D9               	addwf	fsr2l,f,c
 17055  01511A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17056  01511C  22DA               	addwfc	fsr2h,f,c
 17057  01511E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17058  015122  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17059  015126  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17060  01512A  0E01               	movlw	1
 17061  01512C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17062  01512E  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 17063                           
 17064                           ;Port.c: 203: break;
 17065  015132  D0A4               	goto	l414
 17066  015134                     
 17067                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 17068  015134  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17069  015138  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17070  01513C  0E01               	movlw	1
 17071  01513E  0100               	movlb	0	; () banked
 17072  015140  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17073  015142  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17074  015146  EC95  F0BD         	call	_PortProperty_Valid	;wreg free
 17075  01514A  0100               	movlb	0	; () banked
 17076  01514C  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17077  01514E  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17078  015150  A4D8               	btfss	status,2,c
 17079  015152  0012               	return	
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;Port.c: 208: {
 17083                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17084  015154  EE20 F002          	lfsr	2,2
 17085  015158  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17086  01515A  26D9               	addwf	fsr2l,f,c
 17087  01515C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17088  01515E  22DA               	addwfc	fsr2h,f,c
 17089  015160  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17090  015164  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17091  015168  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17092  01516C  0E00               	movlw	0
 17093  01516E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17094  015170  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 17095                           
 17096                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17097  015174  0100               	movlb	0	; () banked
 17098  015176  EE20 F004          	lfsr	2,4
 17099  01517A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17100  01517C  26D9               	addwf	fsr2l,f,c
 17101  01517E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17102  015180  22DA               	addwfc	fsr2h,f,c
 17103  015182  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17104  015186  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17105  01518A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17106  01518E  0E00               	movlw	0
 17107  015190  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17108  015192  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 17109                           
 17110                           ;Port.c: 214: break;
 17111  015196  D072               	goto	l414
 17112  015198                     
 17113                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 17114                           
 17115                           ;Port.c: 218: case eTypeOutputOpenSource:
 17116  015198  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17117  01519C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17118  0151A0  0E02               	movlw	2
 17119  0151A2  0100               	movlb	0	; () banked
 17120  0151A4  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17121  0151A6  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17122  0151AA  EC95  F0BD         	call	_PortProperty_Valid	;wreg free
 17123  0151AE  0100               	movlb	0	; () banked
 17124  0151B0  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17125  0151B2  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17126  0151B4  A4D8               	btfss	status,2,c
 17127  0151B6  0012               	return	
 17128                           
 17129                           ; BSR set to: 0
 17130                           ;Port.c: 220: {
 17131                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 17132  0151B8  EE20 F002          	lfsr	2,2
 17133  0151BC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17134  0151BE  26D9               	addwf	fsr2l,f,c
 17135  0151C0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17136  0151C2  22DA               	addwfc	fsr2h,f,c
 17137  0151C4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17138  0151C8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17139  0151CC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17140  0151D0  0E01               	movlw	1
 17141  0151D2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17142  0151D4  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 17143                           
 17144                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 17145  0151D8  0100               	movlb	0	; () banked
 17146  0151DA  EE20 F004          	lfsr	2,4
 17147  0151DE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17148  0151E0  26D9               	addwf	fsr2l,f,c
 17149  0151E2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17150  0151E4  22DA               	addwfc	fsr2h,f,c
 17151  0151E6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17152  0151EA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17153  0151EE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17154  0151F2  0E01               	movlw	1
 17155  0151F4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17156  0151F6  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 17157                           
 17158                           ;Port.c: 226: break;
 17159  0151FA  D040               	goto	l414
 17160  0151FC                     
 17161                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 17162                           
 17163                           ;Port.c: 230: case eTypeOutputPushPull:
 17164  0151FC  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 17165  015200  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 17166  015204  0E00               	movlw	0
 17167  015206  0100               	movlb	0	; () banked
 17168  015208  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 17169  01520A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 17170  01520E  EC95  F0BD         	call	_PortProperty_Valid	;wreg free
 17171  015212  0100               	movlb	0	; () banked
 17172  015214  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 17173  015216  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 17174  015218  A4D8               	btfss	status,2,c
 17175  01521A  0012               	return	
 17176                           
 17177                           ; BSR set to: 0
 17178                           ;Port.c: 232: {
 17179                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 17180  01521C  EE20 F002          	lfsr	2,2
 17181  015220  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17182  015222  26D9               	addwf	fsr2l,f,c
 17183  015224  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17184  015226  22DA               	addwfc	fsr2h,f,c
 17185  015228  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17186  01522C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17187  015230  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17188  015234  0E00               	movlw	0
 17189  015236  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17190  015238  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 17191                           
 17192                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 17193  01523C  0100               	movlb	0	; () banked
 17194  01523E  EE20 F004          	lfsr	2,4
 17195  015242  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 17196  015244  26D9               	addwf	fsr2l,f,c
 17197  015246  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 17198  015248  22DA               	addwfc	fsr2h,f,c
 17199  01524A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17200  01524E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17201  015252  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 17202  015256  0E00               	movlw	0
 17203  015258  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17204  01525A  ECBA  F0BF         	call	_Byte_SetBit	;wreg free
 17205                           
 17206                           ;Port.c: 239: }
 17207                           
 17208                           ;Port.c: 238: break;
 17209  01525E  D00E               	goto	l414
 17210  015260                     l412:
 17211  015260  0100               	movlb	0	; () banked
 17212  015262  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 17213                           
 17214                           ; Switch size 1, requested type "space"
 17215                           ; Number of cases is 4, Range of values is 0 to 3
 17216                           ; switch strategies available:
 17217                           ; Name         Instructions Cycles
 17218                           ; simple_byte           13     7 (average)
 17219                           ;	Chosen strategy is simple_byte
 17220  015264  0A00               	xorlw	0	; case 0
 17221  015266  B4D8               	btfsc	status,2,c
 17222  015268  D754               	goto	l413
 17223  01526A  0A01               	xorlw	1	; case 1
 17224  01526C  B4D8               	btfsc	status,2,c
 17225  01526E  D762               	goto	l415
 17226  015270  0A03               	xorlw	3	; case 2
 17227  015272  B4D8               	btfsc	status,2,c
 17228  015274  D791               	goto	l417
 17229  015276  0A01               	xorlw	1	; case 3
 17230  015278  B4D8               	btfsc	status,2,c
 17231  01527A  D7C0               	goto	l421
 17232  01527C                     l414:
 17233                           
 17234                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 17235                           
 17236                           ; BSR set to: 0
 17237  01527C  0E08               	movlw	8
 17238  01527E  0100               	movlb	0	; () banked
 17239  015280  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 17240  015282  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17241  015284  0E00               	movlw	0
 17242  015286  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 17243  015288  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17244  01528A  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 17245  01528E  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 17246  015292  ECE5  F0C2         	call	_Word_SetPair	;wreg free
 17247  015296  0012               	return	
 17248  015298                     __end_of_Port_SetPinType:
 17249                           	opt stack 0
 17250                           tosu	equ	0xFFF
 17251                           tosh	equ	0xFFE
 17252                           tosl	equ	0xFFD
 17253                           pclath	equ	0xFFA
 17254                           tblptru	equ	0xFF8
 17255                           tblptrh	equ	0xFF7
 17256                           tblptrl	equ	0xFF6
 17257                           tablat	equ	0xFF5
 17258                           prodh	equ	0xFF4
 17259                           prodl	equ	0xFF3
 17260                           intcon	equ	0xFF2
 17261                           postinc0	equ	0xFEE
 17262                           wreg	equ	0xFE8
 17263                           indf1	equ	0xFE7
 17264                           postdec1	equ	0xFE5
 17265                           fsr1h	equ	0xFE2
 17266                           fsr1l	equ	0xFE1
 17267                           indf2	equ	0xFDF
 17268                           postinc2	equ	0xFDE
 17269                           postdec2	equ	0xFDD
 17270                           plusw2	equ	0xFDB
 17271                           fsr2h	equ	0xFDA
 17272                           fsr2l	equ	0xFD9
 17273                           status	equ	0xFD8
 17274                           
 17275 ;; *************** function _Byte_SetBit *****************
 17276 ;; Defined at:
 17277 ;;		line 32 in file "Library/Types.c"
 17278 ;; Parameters:    Size  Location     Type
 17279 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17280 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 17281 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 17282 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17283 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17284 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17285 ;;		 -> NULL(0), 
 17286 ;;  pBit            1    2[BANK0 ] unsigned char 
 17287 ;;  pValue          1    3[BANK0 ] unsigned char 
 17288 ;; Auto vars:     Size  Location     Type
 17289 ;;		None
 17290 ;; Return value:  Size  Location     Type
 17291 ;;                  1    wreg      void 
 17292 ;; Registers used:
 17293 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17294 ;; Tracked objects:
 17295 ;;		On entry : 0/0
 17296 ;;		On exit  : 0/0
 17297 ;;		Unchanged: 0/0
 17298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17299 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17301 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17302 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17303 ;;Total ram usage:        7 bytes
 17304 ;; Hardware stack levels used:    1
 17305 ;; Hardware stack levels required when called:    7
 17306 ;; This function calls:
 17307 ;;		Nothing
 17308 ;; This function is called by:
 17309 ;;		_Port_SetPinType
 17310 ;;		_Port_SetPin
 17311 ;;		_SPI_Init
 17312 ;;		_SPI_MinSpeed
 17313 ;;		_SPI_MaxSpeed
 17314 ;;		_Word_SetBit
 17315 ;;		_I2C_Init
 17316 ;; This function uses a non-reentrant model
 17317 ;;
 17318                           
 17319                           	psect	text84
 17320  017F74                     __ptext84:
 17321                           	opt stack 0
 17322  017F74                     _Byte_SetBit:
 17323                           	opt stack 21
 17324                           
 17325                           ;Types.c: 34: pValue &= 1;
 17326                           
 17327                           ;incstack = 0
 17328  017F74  0E01               	movlw	1
 17329  017F76  0100               	movlb	0	; () banked
 17330  017F78  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 17334  017F7A  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17335  017F7E  0E01               	movlw	1
 17336  017F80  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 17337  017F82  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17338  017F84  D002               	goto	u11624
 17339  017F86                     u11625:
 17340  017F86  90D8               	bcf	status,0,c
 17341  017F88  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17342  017F8A                     u11624:
 17343  017F8A  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17344  017F8C  D7FC               	goto	u11625
 17345  017F8E  0100               	movlb	0	; () banked
 17346  017F90  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17347  017F92  0AFF               	xorlw	255
 17348  017F94  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 17349  017F96  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17350  017F9A  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17351  017F9E  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 17352  017FA0  16DF               	andwf	indf2,f,c
 17353                           
 17354                           ; BSR set to: 0
 17355                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 17356  017FA2  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 17357  017FA6  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 17358  017FAA  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 17359  017FAC  D002               	goto	u11634
 17360  017FAE                     u11635:
 17361  017FAE  90D8               	bcf	status,0,c
 17362  017FB0  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 17363  017FB2                     u11634:
 17364  017FB2  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 17365  017FB4  D7FC               	goto	u11635
 17366  017FB6  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 17367  017FBA  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 17368  017FBE  0100               	movlb	0	; () banked
 17369  017FC0  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 17370  017FC2  12DF               	iorwf	indf2,f,c
 17371                           
 17372                           ; BSR set to: 0
 17373  017FC4  0012               	return		;funcret
 17374  017FC6                     __end_of_Byte_SetBit:
 17375                           	opt stack 0
 17376                           tosu	equ	0xFFF
 17377                           tosh	equ	0xFFE
 17378                           tosl	equ	0xFFD
 17379                           pclath	equ	0xFFA
 17380                           tblptru	equ	0xFF8
 17381                           tblptrh	equ	0xFF7
 17382                           tblptrl	equ	0xFF6
 17383                           tablat	equ	0xFF5
 17384                           prodh	equ	0xFF4
 17385                           prodl	equ	0xFF3
 17386                           intcon	equ	0xFF2
 17387                           postinc0	equ	0xFEE
 17388                           wreg	equ	0xFE8
 17389                           indf1	equ	0xFE7
 17390                           postdec1	equ	0xFE5
 17391                           fsr1h	equ	0xFE2
 17392                           fsr1l	equ	0xFE1
 17393                           indf2	equ	0xFDF
 17394                           postinc2	equ	0xFDE
 17395                           postdec2	equ	0xFDD
 17396                           plusw2	equ	0xFDB
 17397                           fsr2h	equ	0xFDA
 17398                           fsr2l	equ	0xFD9
 17399                           status	equ	0xFD8
 17400                           
 17401 ;; *************** function _Port_SetQuadType *****************
 17402 ;; Defined at:
 17403 ;;		line 399 in file "Library/Port.c"
 17404 ;; Parameters:    Size  Location     Type
 17405 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 17406 ;;		 -> PortB(10), PortD(10), 
 17407 ;;  pQuad           1   56[BANK0 ] enum E6776
 17408 ;;  pType           1   57[BANK0 ] enum E6795
 17409 ;; Auto vars:     Size  Location     Type
 17410 ;;  Output          1   58[BANK0 ] enum E6475
 17411 ;; Return value:  Size  Location     Type
 17412 ;;                  1    wreg      enum E6475
 17413 ;; Registers used:
 17414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17415 ;; Tracked objects:
 17416 ;;		On entry : 0/0
 17417 ;;		On exit  : 0/0
 17418 ;;		Unchanged: 0/0
 17419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17423 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17424 ;;Total ram usage:        5 bytes
 17425 ;; Hardware stack levels used:    1
 17426 ;; Hardware stack levels required when called:   13
 17427 ;; This function calls:
 17428 ;;		_Byte_SetQuad
 17429 ;;		_Port_CheckQuadType
 17430 ;;		_Word_SetPair
 17431 ;; This function is called by:
 17432 ;;		_MXK_InitDIPSwitch
 17433 ;;		_MXK_Init
 17434 ;; This function uses a non-reentrant model
 17435 ;;
 17436                           
 17437                           	psect	text85
 17438  01498E                     __ptext85:
 17439                           	opt stack 0
 17440  01498E                     _Port_SetQuadType:
 17441                           	opt stack 16
 17442                           
 17443                           ;Port.c: 401: ePinError Output = ePinErrorState;
 17444                           
 17445                           ; BSR set to: 0
 17446                           ;incstack = 0
 17447  01498E  0E05               	movlw	5
 17448  014990  0100               	movlb	0	; () banked
 17449  014992  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17450                           
 17451                           ;Port.c: 403: switch (pType)
 17452  014994  D0B8               	goto	l476
 17453  014996                     
 17454                           ; BSR set to: 0
 17455                           ;Port.c: 407: {
 17456                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17457                           
 17458                           ; BSR set to: 0
 17459  014996  EE20 F002          	lfsr	2,2
 17460  01499A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17461  01499C  26D9               	addwf	fsr2l,f,c
 17462  01499E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17463  0149A0  22DA               	addwfc	fsr2h,f,c
 17464  0149A2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17465  0149A6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17466  0149AA  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17467  0149AE  0E0F               	movlw	15
 17468  0149B0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17469  0149B2  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17470                           
 17471                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17472  0149B6  0100               	movlb	0	; () banked
 17473  0149B8  EE20 F004          	lfsr	2,4
 17474  0149BC  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17475  0149BE  26D9               	addwf	fsr2l,f,c
 17476  0149C0  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17477  0149C2  22DA               	addwfc	fsr2h,f,c
 17478  0149C4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17479  0149C8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17480  0149CC  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17481  0149D0  0E00               	movlw	0
 17482  0149D2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17483  0149D4  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17484                           
 17485                           ;Port.c: 413: }
 17486                           ;Port.c: 415: break;
 17487  0149D8  D0A4               	goto	l478
 17488  0149DA                     
 17489                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17490  0149DA  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17491  0149DE  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17492  0149E2  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17493  0149E6  0E03               	movlw	3
 17494  0149E8  0100               	movlb	0	; () banked
 17495  0149EA  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17496  0149EC  EC0B  F0C0         	call	_Port_CheckQuadType	;wreg free
 17497  0149F0  0100               	movlb	0	; () banked
 17498  0149F2  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17499  0149F4  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17500  0149F6  A4D8               	btfss	status,2,c
 17501  0149F8  0012               	return	
 17502                           
 17503                           ; BSR set to: 0
 17504                           ;Port.c: 418: {
 17505                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17506  0149FA  EE20 F002          	lfsr	2,2
 17507  0149FE  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17508  014A00  26D9               	addwf	fsr2l,f,c
 17509  014A02  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17510  014A04  22DA               	addwfc	fsr2h,f,c
 17511  014A06  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17512  014A0A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17513  014A0E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17514  014A12  0E00               	movlw	0
 17515  014A14  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17516  014A16  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17517                           
 17518                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17519  014A1A  0100               	movlb	0	; () banked
 17520  014A1C  EE20 F004          	lfsr	2,4
 17521  014A20  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17522  014A22  26D9               	addwf	fsr2l,f,c
 17523  014A24  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17524  014A26  22DA               	addwfc	fsr2h,f,c
 17525  014A28  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17526  014A2C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17527  014A30  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17528  014A34  0E00               	movlw	0
 17529  014A36  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17530  014A38  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17531                           
 17532                           ;Port.c: 424: }
 17533  014A3C  D072               	goto	l478
 17534  014A3E                     
 17535                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17536  014A3E  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17537  014A42  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17538  014A46  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17539  014A4A  0E03               	movlw	3
 17540  014A4C  0100               	movlb	0	; () banked
 17541  014A4E  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17542  014A50  EC0B  F0C0         	call	_Port_CheckQuadType	;wreg free
 17543  014A54  0100               	movlb	0	; () banked
 17544  014A56  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17545  014A58  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17546  014A5A  A4D8               	btfss	status,2,c
 17547  014A5C  0012               	return	
 17548                           
 17549                           ; BSR set to: 0
 17550                           ;Port.c: 429: {
 17551                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 17552  014A5E  EE20 F002          	lfsr	2,2
 17553  014A62  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17554  014A64  26D9               	addwf	fsr2l,f,c
 17555  014A66  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17556  014A68  22DA               	addwfc	fsr2h,f,c
 17557  014A6A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17558  014A6E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17559  014A72  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17560  014A76  0E0F               	movlw	15
 17561  014A78  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17562  014A7A  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17563                           
 17564                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 17565  014A7E  0100               	movlb	0	; () banked
 17566  014A80  EE20 F004          	lfsr	2,4
 17567  014A84  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17568  014A86  26D9               	addwf	fsr2l,f,c
 17569  014A88  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17570  014A8A  22DA               	addwfc	fsr2h,f,c
 17571  014A8C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17572  014A90  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17573  014A94  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17574  014A98  0E0F               	movlw	15
 17575  014A9A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17576  014A9C  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17577                           
 17578                           ;Port.c: 435: }
 17579  014AA0  D040               	goto	l478
 17580  014AA2                     
 17581                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 17582  014AA2  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 17583  014AA6  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 17584  014AAA  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 17585  014AAE  0E03               	movlw	3
 17586  014AB0  0100               	movlb	0	; () banked
 17587  014AB2  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 17588  014AB4  EC0B  F0C0         	call	_Port_CheckQuadType	;wreg free
 17589  014AB8  0100               	movlb	0	; () banked
 17590  014ABA  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 17591  014ABC  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 17592  014ABE  A4D8               	btfss	status,2,c
 17593  014AC0  0012               	return	
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;Port.c: 440: {
 17597                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 17598  014AC2  EE20 F002          	lfsr	2,2
 17599  014AC6  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17600  014AC8  26D9               	addwf	fsr2l,f,c
 17601  014ACA  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17602  014ACC  22DA               	addwfc	fsr2h,f,c
 17603  014ACE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17604  014AD2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17605  014AD6  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17606  014ADA  0E00               	movlw	0
 17607  014ADC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17608  014ADE  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17609                           
 17610                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 17611  014AE2  0100               	movlb	0	; () banked
 17612  014AE4  EE20 F004          	lfsr	2,4
 17613  014AE8  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 17614  014AEA  26D9               	addwf	fsr2l,f,c
 17615  014AEC  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17616  014AEE  22DA               	addwfc	fsr2h,f,c
 17617  014AF0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17618  014AF4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17619  014AF8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 17620  014AFC  0E00               	movlw	0
 17621  014AFE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17622  014B00  ECD0  F0C4         	call	_Byte_SetQuad	;wreg free
 17623                           
 17624                           ;Port.c: 446: }
 17625  014B04  D00E               	goto	l478
 17626  014B06                     l476:
 17627  014B06  0100               	movlb	0	; () banked
 17628  014B08  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 17629                           
 17630                           ; Switch size 1, requested type "space"
 17631                           ; Number of cases is 4, Range of values is 0 to 3
 17632                           ; switch strategies available:
 17633                           ; Name         Instructions Cycles
 17634                           ; simple_byte           13     7 (average)
 17635                           ;	Chosen strategy is simple_byte
 17636  014B0A  0A00               	xorlw	0	; case 0
 17637  014B0C  B4D8               	btfsc	status,2,c
 17638  014B0E  D743               	goto	l477
 17639  014B10  0A01               	xorlw	1	; case 1
 17640  014B12  B4D8               	btfsc	status,2,c
 17641  014B14  D762               	goto	l479
 17642  014B16  0A03               	xorlw	3	; case 2
 17643  014B18  B4D8               	btfsc	status,2,c
 17644  014B1A  D791               	goto	l483
 17645  014B1C  0A01               	xorlw	1	; case 3
 17646  014B1E  B4D8               	btfsc	status,2,c
 17647  014B20  D7C0               	goto	l486
 17648  014B22                     l478:
 17649                           
 17650                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 17651                           
 17652                           ; BSR set to: 0
 17653  014B22  0E08               	movlw	8
 17654  014B24  0100               	movlb	0	; () banked
 17655  014B26  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17656  014B28  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17657  014B2A  0E00               	movlw	0
 17658  014B2C  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17659  014B2E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17660  014B30  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17661  014B32  0D04               	mullw	4
 17662  014B34  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 17663  014B38  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17664  014B3C  ECE5  F0C2         	call	_Word_SetPair	;wreg free
 17665                           
 17666                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 17667  014B40  0E08               	movlw	8
 17668  014B42  0100               	movlb	0	; () banked
 17669  014B44  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17670  014B46  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17671  014B48  0E00               	movlw	0
 17672  014B4A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17673  014B4C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17674  014B4E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17675  014B50  0D04               	mullw	4
 17676  014B52  28F3               	incf	prodl,w,c
 17677  014B54  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17678  014B56  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17679  014B5A  ECE5  F0C2         	call	_Word_SetPair	;wreg free
 17680                           
 17681                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 17682  014B5E  0E08               	movlw	8
 17683  014B60  0100               	movlb	0	; () banked
 17684  014B62  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17685  014B64  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17686  014B66  0E00               	movlw	0
 17687  014B68  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17688  014B6A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17689  014B6C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17690  014B6E  0D04               	mullw	4
 17691  014B70  50F3               	movf	prodl,w,c
 17692  014B72  0F02               	addlw	2
 17693  014B74  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17694  014B76  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17695  014B7A  ECE5  F0C2         	call	_Word_SetPair	;wreg free
 17696                           
 17697                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 17698  014B7E  0E08               	movlw	8
 17699  014B80  0100               	movlb	0	; () banked
 17700  014B82  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 17701  014B84  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 17702  014B86  0E00               	movlw	0
 17703  014B88  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 17704  014B8A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 17705  014B8C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 17706  014B8E  0D04               	mullw	4
 17707  014B90  50F3               	movf	prodl,w,c
 17708  014B92  0F03               	addlw	3
 17709  014B94  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 17710  014B96  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 17711  014B9A  ECE5  F0C2         	call	_Word_SetPair	;wreg free
 17712  014B9E  0012               	return	
 17713  014BA0                     __end_of_Port_SetQuadType:
 17714                           	opt stack 0
 17715                           tosu	equ	0xFFF
 17716                           tosh	equ	0xFFE
 17717                           tosl	equ	0xFFD
 17718                           pclath	equ	0xFFA
 17719                           tblptru	equ	0xFF8
 17720                           tblptrh	equ	0xFF7
 17721                           tblptrl	equ	0xFF6
 17722                           tablat	equ	0xFF5
 17723                           prodh	equ	0xFF4
 17724                           prodl	equ	0xFF3
 17725                           intcon	equ	0xFF2
 17726                           postinc0	equ	0xFEE
 17727                           wreg	equ	0xFE8
 17728                           indf1	equ	0xFE7
 17729                           postdec1	equ	0xFE5
 17730                           fsr1h	equ	0xFE2
 17731                           fsr1l	equ	0xFE1
 17732                           indf2	equ	0xFDF
 17733                           postinc2	equ	0xFDE
 17734                           postdec2	equ	0xFDD
 17735                           plusw2	equ	0xFDB
 17736                           fsr2h	equ	0xFDA
 17737                           fsr2l	equ	0xFD9
 17738                           status	equ	0xFD8
 17739                           
 17740 ;; *************** function _Word_SetPair *****************
 17741 ;; Defined at:
 17742 ;;		line 149 in file "Library/Types.c"
 17743 ;; Parameters:    Size  Location     Type
 17744 ;;  pInput          2   15[BANK0 ] PTR struct Word
 17745 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17746 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17747 ;;  pPair           1   17[BANK0 ] unsigned char 
 17748 ;;  pValue          1   18[BANK0 ] unsigned char 
 17749 ;; Auto vars:     Size  Location     Type
 17750 ;;		None
 17751 ;; Return value:  Size  Location     Type
 17752 ;;                  1    wreg      void 
 17753 ;; Registers used:
 17754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17755 ;; Tracked objects:
 17756 ;;		On entry : 0/0
 17757 ;;		On exit  : 0/0
 17758 ;;		Unchanged: 0/0
 17759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17764 ;;Total ram usage:        4 bytes
 17765 ;; Hardware stack levels used:    1
 17766 ;; Hardware stack levels required when called:    9
 17767 ;; This function calls:
 17768 ;;		_Byte_SetPair
 17769 ;; This function is called by:
 17770 ;;		_Port_SetPinType
 17771 ;;		_Port_SetQuadType
 17772 ;;		_Port_SetType
 17773 ;;		_Port_SetPairType
 17774 ;;		_PortProperty_Init
 17775 ;; This function uses a non-reentrant model
 17776 ;;
 17777                           
 17778                           	psect	text86
 17779  0185CA                     __ptext86:
 17780                           	opt stack 0
 17781  0185CA                     _Word_SetPair:
 17782                           	opt stack 19
 17783                           
 17784                           ;Types.c: 151: if (pPair >= 4)
 17785                           
 17786                           ;incstack = 0
 17787  0185CA  0E03               	movlw	3
 17788  0185CC  0100               	movlb	0	; () banked
 17789  0185CE  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 17790  0185D0  D00E               	goto	l776
 17791                           
 17792                           ; BSR set to: 0
 17793                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 17794  0185D2  0E01               	movlw	1
 17795  0185D4  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 17796  0185D6  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 17797  0185D8  0E00               	movlw	0
 17798  0185DA  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 17799  0185DC  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 17800  0185DE  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 17801  0185E0  0FFC               	addlw	252
 17802  0185E2  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 17803  0185E4  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17804  0185E8  ECC0  F0C4         	call	_Byte_SetPair	;wreg free
 17805  0185EC  0012               	return	
 17806  0185EE                     l776:
 17807                           
 17808                           ;Types.c: 153: else
 17809                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 17810  0185EE  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 17811  0185F2  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 17812  0185F6  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 17813  0185FA  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17814  0185FE  ECC0  F0C4         	call	_Byte_SetPair	;wreg free
 17815  018602  0012               	return	
 17816  018604                     __end_of_Word_SetPair:
 17817                           	opt stack 0
 17818                           tosu	equ	0xFFF
 17819                           tosh	equ	0xFFE
 17820                           tosl	equ	0xFFD
 17821                           pclath	equ	0xFFA
 17822                           tblptru	equ	0xFF8
 17823                           tblptrh	equ	0xFF7
 17824                           tblptrl	equ	0xFF6
 17825                           tablat	equ	0xFF5
 17826                           prodh	equ	0xFF4
 17827                           prodl	equ	0xFF3
 17828                           intcon	equ	0xFF2
 17829                           postinc0	equ	0xFEE
 17830                           wreg	equ	0xFE8
 17831                           indf1	equ	0xFE7
 17832                           postdec1	equ	0xFE5
 17833                           fsr1h	equ	0xFE2
 17834                           fsr1l	equ	0xFE1
 17835                           indf2	equ	0xFDF
 17836                           postinc2	equ	0xFDE
 17837                           postdec2	equ	0xFDD
 17838                           plusw2	equ	0xFDB
 17839                           fsr2h	equ	0xFDA
 17840                           fsr2l	equ	0xFD9
 17841                           status	equ	0xFD8
 17842                           
 17843 ;; *************** function _Byte_SetPair *****************
 17844 ;; Defined at:
 17845 ;;		line 83 in file "Library/Types.c"
 17846 ;; Parameters:    Size  Location     Type
 17847 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17848 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17849 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17850 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 17851 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 17852 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 17853 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 17854 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 17855 ;;		 -> NULL(0), 
 17856 ;;  pPair           1   13[BANK0 ] unsigned char 
 17857 ;;  pValue          1   14[BANK0 ] unsigned char 
 17858 ;; Auto vars:     Size  Location     Type
 17859 ;;		None
 17860 ;; Return value:  Size  Location     Type
 17861 ;;                  1    wreg      void 
 17862 ;; Registers used:
 17863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17864 ;; Tracked objects:
 17865 ;;		On entry : 0/0
 17866 ;;		On exit  : 0/0
 17867 ;;		Unchanged: 0/0
 17868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17869 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17872 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17873 ;;Total ram usage:        4 bytes
 17874 ;; Hardware stack levels used:    1
 17875 ;; Hardware stack levels required when called:    8
 17876 ;; This function calls:
 17877 ;;		_Byte_SetZone
 17878 ;; This function is called by:
 17879 ;;		_Word_SetPair
 17880 ;;		_Port_SetPairType
 17881 ;;		_Port_SetPair
 17882 ;; This function uses a non-reentrant model
 17883 ;;
 17884                           
 17885                           	psect	text87
 17886  018980                     __ptext87:
 17887                           	opt stack 0
 17888  018980                     _Byte_SetPair:
 17889                           	opt stack 19
 17890                           
 17891                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 17892                           
 17893                           ;incstack = 0
 17894  018980  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 17895  018984  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 17896  018988  0E04               	movlw	4
 17897  01898A  0100               	movlb	0	; () banked
 17898  01898C  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 17899  01898E  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 17900  018992  0E02               	movlw	2
 17901  018994  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17902  018996  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 17903  01899A  EC16  F0B9         	call	_Byte_SetZone	;wreg free
 17904  01899E  0012               	return		;funcret
 17905  0189A0                     __end_of_Byte_SetPair:
 17906                           	opt stack 0
 17907                           tosu	equ	0xFFF
 17908                           tosh	equ	0xFFE
 17909                           tosl	equ	0xFFD
 17910                           pclath	equ	0xFFA
 17911                           tblptru	equ	0xFF8
 17912                           tblptrh	equ	0xFF7
 17913                           tblptrl	equ	0xFF6
 17914                           tablat	equ	0xFF5
 17915                           prodh	equ	0xFF4
 17916                           prodl	equ	0xFF3
 17917                           intcon	equ	0xFF2
 17918                           postinc0	equ	0xFEE
 17919                           wreg	equ	0xFE8
 17920                           indf1	equ	0xFE7
 17921                           postdec1	equ	0xFE5
 17922                           fsr1h	equ	0xFE2
 17923                           fsr1l	equ	0xFE1
 17924                           indf2	equ	0xFDF
 17925                           postinc2	equ	0xFDE
 17926                           postdec2	equ	0xFDD
 17927                           plusw2	equ	0xFDB
 17928                           fsr2h	equ	0xFDA
 17929                           fsr2l	equ	0xFD9
 17930                           status	equ	0xFD8
 17931                           
 17932 ;; *************** function _Port_CheckQuadType *****************
 17933 ;; Defined at:
 17934 ;;		line 126 in file "Library/Port.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 17937 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17938 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17939 ;;  pQuad           1   49[BANK0 ] enum E6776
 17940 ;;  pDrive          1   50[BANK0 ] enum E6469
 17941 ;; Auto vars:     Size  Location     Type
 17942 ;;  Output          1   53[BANK0 ] enum E6475
 17943 ;;  Pair2           1   52[BANK0 ] enum E6760
 17944 ;;  Pair1           1   51[BANK0 ] enum E6760
 17945 ;; Return value:  Size  Location     Type
 17946 ;;                  1    wreg      enum E6475
 17947 ;; Registers used:
 17948 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17949 ;; Tracked objects:
 17950 ;;		On entry : 0/0
 17951 ;;		On exit  : 0/0
 17952 ;;		Unchanged: 0/0
 17953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17954 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17957 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17958 ;;Total ram usage:        7 bytes
 17959 ;; Hardware stack levels used:    1
 17960 ;; Hardware stack levels required when called:   12
 17961 ;; This function calls:
 17962 ;;		_Port_CheckPairType
 17963 ;; This function is called by:
 17964 ;;		_Port_CheckPortType
 17965 ;;		_Port_SetQuadType
 17966 ;; This function uses a non-reentrant model
 17967 ;;
 17968                           
 17969                           	psect	text88
 17970  018016                     __ptext88:
 17971                           	opt stack 0
 17972  018016                     _Port_CheckQuadType:
 17973                           	opt stack 15
 17974                           
 17975                           ;Port.c: 128: ePinError Output = ePinErrorState;
 17976                           
 17977                           ;incstack = 0
 17978  018016  0E05               	movlw	5
 17979  018018  0100               	movlb	0	; () banked
 17980  01801A  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 17984  01801C  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17985  01801E  0D02               	mullw	2
 17986  018020  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 17990  018024  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17991  018026  0D02               	mullw	2
 17992  018028  28F3               	incf	prodl,w,c
 17993  01802A  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 17994                           
 17995                           ; BSR set to: 0
 17996                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 17997  01802C  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17998  018030  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17999  018034  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 18000  018038  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18001  01803C  EC2C  F0BE         	call	_Port_CheckPairType	;wreg free
 18002  018040  0100               	movlb	0	; () banked
 18003  018042  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18004  018044  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18005  018046  A4D8               	btfss	status,2,c
 18006  018048  D00C               	goto	l393
 18007                           
 18008                           ; BSR set to: 0
 18009                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 18010  01804A  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 18011  01804E  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 18012  018052  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 18013  018056  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 18014  01805A  EC2C  F0BE         	call	_Port_CheckPairType	;wreg free
 18015  01805E  0100               	movlb	0	; () banked
 18016  018060  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 18017  018062                     l393:
 18018                           
 18019                           ; BSR set to: 0
 18020                           ;Port.c: 136: return Output;
 18021                           
 18022                           ; BSR set to: 0
 18023  018062  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 18024  018064  0012               	return	
 18025  018066                     __end_of_Port_CheckQuadType:
 18026                           	opt stack 0
 18027                           tosu	equ	0xFFF
 18028                           tosh	equ	0xFFE
 18029                           tosl	equ	0xFFD
 18030                           pclath	equ	0xFFA
 18031                           tblptru	equ	0xFF8
 18032                           tblptrh	equ	0xFF7
 18033                           tblptrl	equ	0xFF6
 18034                           tablat	equ	0xFF5
 18035                           prodh	equ	0xFF4
 18036                           prodl	equ	0xFF3
 18037                           intcon	equ	0xFF2
 18038                           postinc0	equ	0xFEE
 18039                           wreg	equ	0xFE8
 18040                           indf1	equ	0xFE7
 18041                           postdec1	equ	0xFE5
 18042                           fsr1h	equ	0xFE2
 18043                           fsr1l	equ	0xFE1
 18044                           indf2	equ	0xFDF
 18045                           postinc2	equ	0xFDE
 18046                           postdec2	equ	0xFDD
 18047                           plusw2	equ	0xFDB
 18048                           fsr2h	equ	0xFDA
 18049                           fsr2l	equ	0xFD9
 18050                           status	equ	0xFD8
 18051                           
 18052 ;; *************** function _Port_CheckPairType *****************
 18053 ;; Defined at:
 18054 ;;		line 112 in file "Library/Port.c"
 18055 ;; Parameters:    Size  Location     Type
 18056 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18057 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18058 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18059 ;;  pPair           1   40[BANK0 ] enum E6760
 18060 ;;  pDrive          1   41[BANK0 ] enum E6469
 18061 ;; Auto vars:     Size  Location     Type
 18062 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 18063 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18064 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18065 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18066 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18067 ;;  Output          1   44[BANK0 ] enum E6475
 18068 ;;  Pin2            1   43[BANK0 ] enum E6750
 18069 ;;  Pin1            1   42[BANK0 ] enum E6750
 18070 ;; Return value:  Size  Location     Type
 18071 ;;                  1    wreg      enum E6475
 18072 ;; Registers used:
 18073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18074 ;; Tracked objects:
 18075 ;;		On entry : 0/0
 18076 ;;		On exit  : 0/0
 18077 ;;		Unchanged: 0/0
 18078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18079 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18080 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18082 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18083 ;;Total ram usage:        9 bytes
 18084 ;; Hardware stack levels used:    1
 18085 ;; Hardware stack levels required when called:   11
 18086 ;; This function calls:
 18087 ;;		_PortProperty_Valid
 18088 ;; This function is called by:
 18089 ;;		_Port_CheckQuadType
 18090 ;;		_Port_SetPairType
 18091 ;; This function uses a non-reentrant model
 18092 ;;
 18093                           
 18094                           	psect	text89
 18095  017C58                     __ptext89:
 18096                           	opt stack 0
 18097  017C58                     _Port_CheckPairType:
 18098                           	opt stack 15
 18099                           
 18100                           ;Port.c: 114: ePinError Output = ePinErrorState;
 18101                           
 18102                           ; BSR set to: 0
 18103                           ;incstack = 0
 18104  017C58  0E05               	movlw	5
 18105  017C5A  0100               	movlb	0	; () banked
 18106  017C5C  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 18110  017C5E  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 18111  017C62  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 18112  017C66  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 18113  017C6A  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 18117  017C6E  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18118  017C70  0D02               	mullw	2
 18119  017C72  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 18120                           
 18121                           ; BSR set to: 0
 18122                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 18123  017C76  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 18124  017C78  0D02               	mullw	2
 18125  017C7A  28F3               	incf	prodl,w,c
 18126  017C7C  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 18130  017C7E  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18131  017C82  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18132  017C86  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18133  017C8A  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 18134  017C8E  EC95  F0BD         	call	_PortProperty_Valid	;wreg free
 18135  017C92  0100               	movlb	0	; () banked
 18136  017C94  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18137  017C96  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18138  017C98  A4D8               	btfss	status,2,c
 18139  017C9A  D00C               	goto	l389
 18140                           
 18141                           ; BSR set to: 0
 18142                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 18143  017C9C  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 18144  017CA0  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 18145  017CA4  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 18146  017CA8  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 18147  017CAC  EC95  F0BD         	call	_PortProperty_Valid	;wreg free
 18148  017CB0  0100               	movlb	0	; () banked
 18149  017CB2  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 18150  017CB4                     l389:
 18151                           
 18152                           ; BSR set to: 0
 18153                           ;Port.c: 124: return Output;
 18154                           
 18155                           ; BSR set to: 0
 18156  017CB4  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 18157  017CB6  0012               	return	
 18158  017CB8                     __end_of_Port_CheckPairType:
 18159                           	opt stack 0
 18160                           tosu	equ	0xFFF
 18161                           tosh	equ	0xFFE
 18162                           tosl	equ	0xFFD
 18163                           pclath	equ	0xFFA
 18164                           tblptru	equ	0xFF8
 18165                           tblptrh	equ	0xFF7
 18166                           tblptrl	equ	0xFF6
 18167                           tablat	equ	0xFF5
 18168                           prodh	equ	0xFF4
 18169                           prodl	equ	0xFF3
 18170                           intcon	equ	0xFF2
 18171                           postinc0	equ	0xFEE
 18172                           wreg	equ	0xFE8
 18173                           indf1	equ	0xFE7
 18174                           postdec1	equ	0xFE5
 18175                           fsr1h	equ	0xFE2
 18176                           fsr1l	equ	0xFE1
 18177                           indf2	equ	0xFDF
 18178                           postinc2	equ	0xFDE
 18179                           postdec2	equ	0xFDD
 18180                           plusw2	equ	0xFDB
 18181                           fsr2h	equ	0xFDA
 18182                           fsr2l	equ	0xFD9
 18183                           status	equ	0xFD8
 18184                           
 18185 ;; *************** function _PortProperty_Valid *****************
 18186 ;; Defined at:
 18187 ;;		line 220 in file "Library/Types.c"
 18188 ;; Parameters:    Size  Location     Type
 18189 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 18190 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18191 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18192 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18193 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18194 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 18195 ;;  pPin            1   18[BANK0 ] unsigned char 
 18196 ;; Auto vars:     Size  Location     Type
 18197 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 18198 ;;  Pair            1   37[BANK0 ] enum E6469
 18199 ;; Return value:  Size  Location     Type
 18200 ;;                  1    wreg      enum E6475
 18201 ;; Registers used:
 18202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18203 ;; Tracked objects:
 18204 ;;		On entry : 0/0
 18205 ;;		On exit  : 0/0
 18206 ;;		Unchanged: 0/0
 18207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18208 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18209 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18210 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18211 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18212 ;;Total ram usage:       23 bytes
 18213 ;; Hardware stack levels used:    1
 18214 ;; Hardware stack levels required when called:   10
 18215 ;; This function calls:
 18216 ;;		_Word_GetPair
 18217 ;; This function is called by:
 18218 ;;		_Port_CheckPairType
 18219 ;;		_Port_SetPinType
 18220 ;; This function uses a non-reentrant model
 18221 ;;
 18222                           
 18223                           	psect	text90
 18224  017B2A                     __ptext90:
 18225                           	opt stack 0
 18226  017B2A                     _PortProperty_Valid:
 18227                           	opt stack 15
 18228                           
 18229                           ;Types.c: 222: ePinDrive Pair;
 18230                           ;Types.c: 223: const ePinError Errors[4][4] =
 18231                           ;Types.c: 224: {
 18232                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 18233                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 18234                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 18235                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 18236                           ;Types.c: 230: };
 18237                           
 18238                           ; BSR set to: 0
 18239                           ;incstack = 0
 18240  017B2A  0E17               	movlw	low PortProperty_Valid@F6830
 18241  017B2C  6EF6               	movwf	tblptrl,c
 18242  017B2E                     	if	1	;There is more than 1 active tblptr byte
 18243  017B2E  0EFC               	movlw	high PortProperty_Valid@F6830
 18244  017B30  6EF7               	movwf	tblptrh,c
 18245  017B32                     	endif
 18246  017B32                     	if	1	;There are 3 active tblptr bytes
 18247  017B32  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 18248  017B34  6EF8               	movwf	tblptru,c
 18249  017B36                     	endif
 18250  017B36  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 18251  017B3A  0E0F               	movlw	15
 18252  017B3C                     u11590:
 18253  017B3C  0009               	tblrd		*+
 18254  017B3E  CFF5 FFDE          	movff	tablat,postinc2
 18255  017B42  06E8               	decf	wreg,f,c
 18256  017B44  E2FB               	bc	u11590
 18257                           
 18258                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 18259  017B46  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 18260  017B4A  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 18261  017B4E  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 18262  017B52  EC6E  F0C3         	call	_Word_GetPair	;wreg free
 18263  017B56  0100               	movlb	0	; () banked
 18264  017B58  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 18265                           
 18266                           ; BSR set to: 0
 18267                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 18268  017B5A  0E04               	movlw	4
 18269  017B5C  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 18270  017B5E  D017               	goto	l819
 18271                           
 18272                           ; BSR set to: 0
 18273  017B60  0E04               	movlw	4
 18274  017B62  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 18275  017B64  D014               	goto	l819
 18276                           
 18277                           ; BSR set to: 0
 18278                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 18279  017B66  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 18280  017B68  0D04               	mullw	4
 18281  017B6A  0E75               	movlw	low PortProperty_Valid@Errors
 18282  017B6C  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 18283  017B6E  0E00               	movlw	high PortProperty_Valid@Errors
 18284  017B70  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 18285  017B72  50F3               	movf	prodl,w,c
 18286  017B74  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 18287  017B76  50F4               	movf	prodh,w,c
 18288  017B78  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 18289  017B7A  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 18290  017B7C  0D01               	mullw	1
 18291  017B7E  50F3               	movf	prodl,w,c
 18292  017B80  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 18293  017B82  6ED9               	movwf	fsr2l,c
 18294  017B84  50F4               	movf	prodh,w,c
 18295  017B86  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 18296  017B88  6EDA               	movwf	fsr2h,c
 18297  017B8A  50DF               	movf	indf2,w,c
 18298                           
 18299                           ; BSR set to: 0
 18300  017B8C  0012               	return	
 18301  017B8E                     l819:
 18302                           
 18303                           ; BSR set to: 0
 18304                           ;Types.c: 237: return ePinErrorState;
 18305                           
 18306                           ; BSR set to: 0
 18307  017B8E  0E05               	movlw	5
 18308  017B90  0012               	return	
 18309  017B92                     __end_of_PortProperty_Valid:
 18310                           	opt stack 0
 18311                           tosu	equ	0xFFF
 18312                           tosh	equ	0xFFE
 18313                           tosl	equ	0xFFD
 18314                           pclath	equ	0xFFA
 18315                           tblptru	equ	0xFF8
 18316                           tblptrh	equ	0xFF7
 18317                           tblptrl	equ	0xFF6
 18318                           tablat	equ	0xFF5
 18319                           prodh	equ	0xFF4
 18320                           prodl	equ	0xFF3
 18321                           intcon	equ	0xFF2
 18322                           postinc0	equ	0xFEE
 18323                           wreg	equ	0xFE8
 18324                           indf1	equ	0xFE7
 18325                           postdec1	equ	0xFE5
 18326                           fsr1h	equ	0xFE2
 18327                           fsr1l	equ	0xFE1
 18328                           indf2	equ	0xFDF
 18329                           postinc2	equ	0xFDE
 18330                           postdec2	equ	0xFDD
 18331                           plusw2	equ	0xFDB
 18332                           fsr2h	equ	0xFDA
 18333                           fsr2l	equ	0xFD9
 18334                           status	equ	0xFD8
 18335                           
 18336 ;; *************** function _Word_GetPair *****************
 18337 ;; Defined at:
 18338 ;;		line 156 in file "Library/Types.c"
 18339 ;; Parameters:    Size  Location     Type
 18340 ;;  pInput          2   12[BANK0 ] PTR struct Word
 18341 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18342 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 18343 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 18344 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18345 ;;  pPair           1   14[BANK0 ] unsigned char 
 18346 ;; Auto vars:     Size  Location     Type
 18347 ;;		None
 18348 ;; Return value:  Size  Location     Type
 18349 ;;                  1    wreg      unsigned char 
 18350 ;; Registers used:
 18351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18352 ;; Tracked objects:
 18353 ;;		On entry : 0/0
 18354 ;;		On exit  : 0/0
 18355 ;;		Unchanged: 0/0
 18356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18357 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18360 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18361 ;;Total ram usage:        3 bytes
 18362 ;; Hardware stack levels used:    1
 18363 ;; Hardware stack levels required when called:    9
 18364 ;; This function calls:
 18365 ;;		_Byte_GetPair
 18366 ;; This function is called by:
 18367 ;;		_Port_Init
 18368 ;;		_Port_SetPin
 18369 ;;		_Port_Set
 18370 ;;		_PortProperty_Valid
 18371 ;;		_Port_SetPair
 18372 ;;		_Port_SetQuad
 18373 ;; This function uses a non-reentrant model
 18374 ;;
 18375                           
 18376                           	psect	text91
 18377  0186DC                     __ptext91:
 18378                           	opt stack 0
 18379  0186DC                     _Word_GetPair:
 18380                           	opt stack 15
 18381                           
 18382                           ;Types.c: 158: if (pPair >= 4)
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;incstack = 0
 18386  0186DC  0E03               	movlw	3
 18387  0186DE  0100               	movlb	0	; () banked
 18388  0186E0  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 18389  0186E2  D00C               	goto	l781
 18390                           
 18391                           ; BSR set to: 0
 18392                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 18393  0186E4  0E01               	movlw	1
 18394  0186E6  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 18395  0186E8  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 18396  0186EA  0E00               	movlw	0
 18397  0186EC  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 18398  0186EE  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 18399  0186F0  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 18400  0186F2  0FFC               	addlw	252
 18401  0186F4  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 18402  0186F6  EC0D  F0C5         	call	_Byte_GetPair	;wreg free
 18403  0186FA  0012               	return	
 18404  0186FC                     l781:
 18405                           
 18406                           ;Types.c: 160: else
 18407                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 18408  0186FC  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 18409  018700  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 18410  018704  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 18411  018708  EC0D  F0C5         	call	_Byte_GetPair	;wreg free
 18412  01870C  0012               	return	
 18413  01870E                     __end_of_Word_GetPair:
 18414                           	opt stack 0
 18415                           tosu	equ	0xFFF
 18416                           tosh	equ	0xFFE
 18417                           tosl	equ	0xFFD
 18418                           pclath	equ	0xFFA
 18419                           tblptru	equ	0xFF8
 18420                           tblptrh	equ	0xFF7
 18421                           tblptrl	equ	0xFF6
 18422                           tablat	equ	0xFF5
 18423                           prodh	equ	0xFF4
 18424                           prodl	equ	0xFF3
 18425                           intcon	equ	0xFF2
 18426                           postinc0	equ	0xFEE
 18427                           wreg	equ	0xFE8
 18428                           indf1	equ	0xFE7
 18429                           postdec1	equ	0xFE5
 18430                           fsr1h	equ	0xFE2
 18431                           fsr1l	equ	0xFE1
 18432                           indf2	equ	0xFDF
 18433                           postinc2	equ	0xFDE
 18434                           postdec2	equ	0xFDD
 18435                           plusw2	equ	0xFDB
 18436                           fsr2h	equ	0xFDA
 18437                           fsr2l	equ	0xFD9
 18438                           status	equ	0xFD8
 18439                           
 18440 ;; *************** function _Byte_GetPair *****************
 18441 ;; Defined at:
 18442 ;;		line 87 in file "Library/Types.c"
 18443 ;; Parameters:    Size  Location     Type
 18444 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 18445 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18446 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18447 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18448 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18449 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18450 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18451 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18452 ;;		 -> NULL(0), 
 18453 ;;  pPair           1   11[BANK0 ] unsigned char 
 18454 ;; Auto vars:     Size  Location     Type
 18455 ;;		None
 18456 ;; Return value:  Size  Location     Type
 18457 ;;                  1    wreg      unsigned char 
 18458 ;; Registers used:
 18459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18460 ;; Tracked objects:
 18461 ;;		On entry : 0/0
 18462 ;;		On exit  : 0/0
 18463 ;;		Unchanged: 0/0
 18464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18465 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18468 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18469 ;;Total ram usage:        3 bytes
 18470 ;; Hardware stack levels used:    1
 18471 ;; Hardware stack levels required when called:    8
 18472 ;; This function calls:
 18473 ;;		_Byte_GetZone
 18474 ;; This function is called by:
 18475 ;;		_Word_GetPair
 18476 ;; This function uses a non-reentrant model
 18477 ;;
 18478                           
 18479                           	psect	text92
 18480  018A1A                     __ptext92:
 18481                           	opt stack 0
 18482  018A1A                     _Byte_GetPair:
 18483                           	opt stack 15
 18484                           
 18485                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 18486                           
 18487                           ;incstack = 0
 18488  018A1A  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 18489  018A1E  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 18490  018A22  0E04               	movlw	4
 18491  018A24  0100               	movlb	0	; () banked
 18492  018A26  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 18493  018A28  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 18494  018A2C  0E02               	movlw	2
 18495  018A2E  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 18496  018A30  EC2A  F0BB         	call	_Byte_GetZone	;wreg free
 18497  018A34  0012               	return	
 18498  018A36                     __end_of_Byte_GetPair:
 18499                           	opt stack 0
 18500                           tosu	equ	0xFFF
 18501                           tosh	equ	0xFFE
 18502                           tosl	equ	0xFFD
 18503                           pclath	equ	0xFFA
 18504                           tblptru	equ	0xFF8
 18505                           tblptrh	equ	0xFF7
 18506                           tblptrl	equ	0xFF6
 18507                           tablat	equ	0xFF5
 18508                           prodh	equ	0xFF4
 18509                           prodl	equ	0xFF3
 18510                           intcon	equ	0xFF2
 18511                           postinc0	equ	0xFEE
 18512                           wreg	equ	0xFE8
 18513                           indf1	equ	0xFE7
 18514                           postdec1	equ	0xFE5
 18515                           fsr1h	equ	0xFE2
 18516                           fsr1l	equ	0xFE1
 18517                           indf2	equ	0xFDF
 18518                           postinc2	equ	0xFDE
 18519                           postdec2	equ	0xFDD
 18520                           plusw2	equ	0xFDB
 18521                           fsr2h	equ	0xFDA
 18522                           fsr2l	equ	0xFD9
 18523                           status	equ	0xFD8
 18524                           
 18525 ;; *************** function _Byte_GetZone *****************
 18526 ;; Defined at:
 18527 ;;		line 64 in file "Library/Types.c"
 18528 ;; Parameters:    Size  Location     Type
 18529 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18530 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 18531 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 18532 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 18533 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 18534 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 18535 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 18536 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 18537 ;;		 -> NULL(0), 
 18538 ;;  pMax            1    2[BANK0 ] unsigned char 
 18539 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18540 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18541 ;; Auto vars:     Size  Location     Type
 18542 ;;  Output          1    8[BANK0 ] unsigned char 
 18543 ;;  Offset          1    7[BANK0 ] unsigned char 
 18544 ;;  MASK            1    6[BANK0 ] unsigned char 
 18545 ;; Return value:  Size  Location     Type
 18546 ;;                  1    wreg      unsigned char 
 18547 ;; Registers used:
 18548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18549 ;; Tracked objects:
 18550 ;;		On entry : 0/0
 18551 ;;		On exit  : 0/0
 18552 ;;		Unchanged: 0/0
 18553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18554 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18555 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18557 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18558 ;;Total ram usage:        9 bytes
 18559 ;; Hardware stack levels used:    1
 18560 ;; Hardware stack levels required when called:    7
 18561 ;; This function calls:
 18562 ;;		Nothing
 18563 ;; This function is called by:
 18564 ;;		_Byte_GetPair
 18565 ;;		_Byte_GetTriple
 18566 ;;		_Byte_GetQuad
 18567 ;; This function uses a non-reentrant model
 18568 ;;
 18569                           
 18570                           	psect	text93
 18571  017654                     __ptext93:
 18572                           	opt stack 0
 18573  017654                     _Byte_GetZone:
 18574                           	opt stack 15
 18575                           
 18576                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 18577                           
 18578                           ;incstack = 0
 18579  017654  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 18580  017658  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 18581  01765C  0E00               	movlw	low (__mediumconst shr (0+16))
 18582  01765E  6EF8               	movwf	tblptru,c
 18583  017660  0E0F               	movlw	(high __ramtop+-1)
 18584  017662  64F7               	cpfsgt	tblptrh,c
 18585  017664  D003               	bra	u10537
 18586  017666  0008               	tblrd		*
 18587  017668  50F5               	movf	tablat,w,c
 18588  01766A  D005               	bra	u10530
 18589  01766C                     u10537:
 18590  01766C  CFF6 FFE9          	movff	tblptrl,fsr0l
 18591  017670  CFF7 FFEA          	movff	tblptrh,fsr0h
 18592  017674  50EF               	movf	indf0,w,c
 18593  017676                     u10530:
 18594  017676  0100               	movlb	0	; () banked
 18595  017678  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 18596                           
 18597                           ; BSR set to: 0
 18598                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 18599  01767A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18600  01767C  0D01               	mullw	1
 18601  01767E  0E31               	movlw	low _MASKS
 18602  017680  24F3               	addwf	prodl,w,c
 18603  017682  6EF6               	movwf	tblptrl,c
 18604  017684  0EFC               	movlw	high _MASKS
 18605  017686  20F4               	addwfc	prodh,w,c
 18606  017688  6EF7               	movwf	tblptrh,c
 18607  01768A                     	if	1	;There are 3 active tblptr bytes
 18608  01768A  6AF8               	clrf	tblptru,c
 18609  01768C  0E00               	movlw	low (__mediumconst shr (0+16))
 18610  01768E  22F8               	addwfc	tblptru,f,c
 18611  017690                     	endif
 18612  017690  0008               	tblrd		*
 18613  017692  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;Types.c: 68: UINT8 Offset = 0;
 18617  017696  0E00               	movlw	0
 18618  017698  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 18619                           
 18620                           ;Types.c: 70: while (pChunk >= pMax)
 18621  01769A  D003               	goto	l732
 18622  01769C                     
 18623                           ; BSR set to: 0
 18624                           ;Types.c: 71: {
 18625                           ;Types.c: 72: pChunk -= pMax;
 18626                           
 18627                           ; BSR set to: 0
 18628  01769C  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18629  01769E  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 18630                           
 18631                           ; BSR set to: 0
 18632                           ;Types.c: 73: Offset += 1;
 18633  0176A0  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 18634  0176A2                     l732:
 18635                           
 18636                           ; BSR set to: 0
 18637                           
 18638                           ; BSR set to: 0
 18639  0176A2  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 18640  0176A4  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 18641  0176A6  B0D8               	btfsc	status,0,c
 18642  0176A8  D7F9               	goto	l733
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;Types.c: 74: }
 18646                           ;Types.c: 75: pChunk *= pChunkSize;
 18647                           
 18648                           ; BSR set to: 0
 18649  0176AA  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 18650  0176AC  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 18651  0176AE  50F3               	movf	prodl,w,c
 18652  0176B0  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 18653                           
 18654                           ; BSR set to: 0
 18655                           ;Types.c: 76: pChunk += Offset;
 18656  0176B2  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 18657  0176B4  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 18658                           
 18659                           ; BSR set to: 0
 18660                           ;Types.c: 78: Output >>= pChunk;
 18661  0176B6  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 18662  0176B8  6F65               	movwf	??_Byte_GetZone& (0+255),b
 18663  0176BA  D002               	goto	u10550
 18664  0176BC                     u10555:
 18665  0176BC  90D8               	bcf	status,0,c
 18666  0176BE  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 18667  0176C0                     u10550:
 18668  0176C0  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 18669  0176C2  D7FC               	goto	u10555
 18670                           
 18671                           ;Types.c: 79: Output &= MASK;
 18672  0176C4  0100               	movlb	0	; () banked
 18673  0176C6  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 18674  0176C8  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 18675                           
 18676                           ; BSR set to: 0
 18677                           ;Types.c: 80: return Output;
 18678  0176CA  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 18679  0176CC  0012               	return	
 18680  0176CE                     __end_of_Byte_GetZone:
 18681                           	opt stack 0
 18682                           tosu	equ	0xFFF
 18683                           tosh	equ	0xFFE
 18684                           tosl	equ	0xFFD
 18685                           pclath	equ	0xFFA
 18686                           tblptru	equ	0xFF8
 18687                           tblptrh	equ	0xFF7
 18688                           tblptrl	equ	0xFF6
 18689                           tablat	equ	0xFF5
 18690                           prodh	equ	0xFF4
 18691                           prodl	equ	0xFF3
 18692                           intcon	equ	0xFF2
 18693                           indf0	equ	0xFEF
 18694                           postinc0	equ	0xFEE
 18695                           fsr0h	equ	0xFEA
 18696                           fsr0l	equ	0xFE9
 18697                           wreg	equ	0xFE8
 18698                           indf1	equ	0xFE7
 18699                           postdec1	equ	0xFE5
 18700                           fsr1h	equ	0xFE2
 18701                           fsr1l	equ	0xFE1
 18702                           indf2	equ	0xFDF
 18703                           postinc2	equ	0xFDE
 18704                           postdec2	equ	0xFDD
 18705                           plusw2	equ	0xFDB
 18706                           fsr2h	equ	0xFDA
 18707                           fsr2l	equ	0xFD9
 18708                           status	equ	0xFD8
 18709                           
 18710 ;; *************** function _Byte_SetQuad *****************
 18711 ;; Defined at:
 18712 ;;		line 101 in file "Library/Types.c"
 18713 ;; Parameters:    Size  Location     Type
 18714 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 18715 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 18716 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18717 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18718 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18719 ;;		 -> NULL(0), 
 18720 ;;  pQuad           1   13[BANK0 ] unsigned char 
 18721 ;;  pValue          1   14[BANK0 ] unsigned char 
 18722 ;; Auto vars:     Size  Location     Type
 18723 ;;		None
 18724 ;; Return value:  Size  Location     Type
 18725 ;;                  1    wreg      void 
 18726 ;; Registers used:
 18727 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18728 ;; Tracked objects:
 18729 ;;		On entry : 0/0
 18730 ;;		On exit  : 0/0
 18731 ;;		Unchanged: 0/0
 18732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18733 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18736 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18737 ;;Total ram usage:        4 bytes
 18738 ;; Hardware stack levels used:    1
 18739 ;; Hardware stack levels required when called:    8
 18740 ;; This function calls:
 18741 ;;		_Byte_SetZone
 18742 ;; This function is called by:
 18743 ;;		_Port_SetQuadType
 18744 ;;		_SPI_Init
 18745 ;;		_SPI_MinSpeed
 18746 ;;		_SPI_MaxSpeed
 18747 ;;		_Port_SetQuad
 18748 ;;		_Word_SetQuad
 18749 ;;		_I2C_Init
 18750 ;; This function uses a non-reentrant model
 18751 ;;
 18752                           
 18753                           	psect	text94
 18754  0189A0                     __ptext94:
 18755                           	opt stack 0
 18756  0189A0                     _Byte_SetQuad:
 18757                           	opt stack 20
 18758                           
 18759                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 18760                           
 18761                           ; BSR set to: 0
 18762                           ;incstack = 0
 18763  0189A0  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 18764  0189A4  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 18765  0189A8  0E02               	movlw	2
 18766  0189AA  0100               	movlb	0	; () banked
 18767  0189AC  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 18768  0189AE  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 18769  0189B2  0E04               	movlw	4
 18770  0189B4  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 18771  0189B6  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 18772  0189BA  EC16  F0B9         	call	_Byte_SetZone	;wreg free
 18773  0189BE  0012               	return		;funcret
 18774  0189C0                     __end_of_Byte_SetQuad:
 18775                           	opt stack 0
 18776                           tosu	equ	0xFFF
 18777                           tosh	equ	0xFFE
 18778                           tosl	equ	0xFFD
 18779                           pclath	equ	0xFFA
 18780                           tblptru	equ	0xFF8
 18781                           tblptrh	equ	0xFF7
 18782                           tblptrl	equ	0xFF6
 18783                           tablat	equ	0xFF5
 18784                           prodh	equ	0xFF4
 18785                           prodl	equ	0xFF3
 18786                           intcon	equ	0xFF2
 18787                           indf0	equ	0xFEF
 18788                           postinc0	equ	0xFEE
 18789                           fsr0h	equ	0xFEA
 18790                           fsr0l	equ	0xFE9
 18791                           wreg	equ	0xFE8
 18792                           indf1	equ	0xFE7
 18793                           postdec1	equ	0xFE5
 18794                           fsr1h	equ	0xFE2
 18795                           fsr1l	equ	0xFE1
 18796                           indf2	equ	0xFDF
 18797                           postinc2	equ	0xFDE
 18798                           postdec2	equ	0xFDD
 18799                           plusw2	equ	0xFDB
 18800                           fsr2h	equ	0xFDA
 18801                           fsr2l	equ	0xFD9
 18802                           status	equ	0xFD8
 18803                           
 18804 ;; *************** function _Byte_SetZone *****************
 18805 ;; Defined at:
 18806 ;;		line 47 in file "Library/Types.c"
 18807 ;; Parameters:    Size  Location     Type
 18808 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18809 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18810 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18811 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 18812 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 18813 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18814 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18815 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18816 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18817 ;;  pMax            1    2[BANK0 ] unsigned char 
 18818 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18819 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18820 ;;  pValue          1    5[BANK0 ] unsigned char 
 18821 ;; Auto vars:     Size  Location     Type
 18822 ;;  MASK            1   10[BANK0 ] unsigned char 
 18823 ;;  Offset          1    9[BANK0 ] unsigned char 
 18824 ;; Return value:  Size  Location     Type
 18825 ;;                  1    wreg      void 
 18826 ;; Registers used:
 18827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18828 ;; Tracked objects:
 18829 ;;		On entry : 0/0
 18830 ;;		On exit  : 0/0
 18831 ;;		Unchanged: 0/0
 18832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18833 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18835 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18836 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18837 ;;Total ram usage:       11 bytes
 18838 ;; Hardware stack levels used:    1
 18839 ;; Hardware stack levels required when called:    7
 18840 ;; This function calls:
 18841 ;;		Nothing
 18842 ;; This function is called by:
 18843 ;;		_Byte_SetPair
 18844 ;;		_Byte_SetQuad
 18845 ;;		_Byte_SetTriple
 18846 ;; This function uses a non-reentrant model
 18847 ;;
 18848                           
 18849                           	psect	text95
 18850  01722C                     __ptext95:
 18851                           	opt stack 0
 18852  01722C                     _Byte_SetZone:
 18853                           	opt stack 19
 18854                           
 18855                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 18856                           
 18857                           ;incstack = 0
 18858  01722C  0100               	movlb	0	; () banked
 18859  01722E  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18860  017230  0D01               	mullw	1
 18861  017232  0E31               	movlw	low _MASKS
 18862  017234  24F3               	addwf	prodl,w,c
 18863  017236  6EF6               	movwf	tblptrl,c
 18864  017238  0EFC               	movlw	high _MASKS
 18865  01723A  20F4               	addwfc	prodh,w,c
 18866  01723C  6EF7               	movwf	tblptrh,c
 18867  01723E                     	if	1	;There are 3 active tblptr bytes
 18868  01723E  6AF8               	clrf	tblptru,c
 18869  017240  0E00               	movlw	low (__mediumconst shr (0+16))
 18870  017242  22F8               	addwfc	tblptru,f,c
 18871  017244                     	endif
 18872  017244  0008               	tblrd		*
 18873  017246  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 18874                           
 18875                           ; BSR set to: 0
 18876                           ;Types.c: 50: UINT8 Offset = 0;
 18877  01724A  0E00               	movlw	0
 18878  01724C  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 18879                           
 18880                           ;Types.c: 52: while (pChunk >= pMax)
 18881  01724E  D003               	goto	l726
 18882  017250                     
 18883                           ; BSR set to: 0
 18884                           ;Types.c: 53: {
 18885                           ;Types.c: 54: pChunk -= pMax;
 18886                           
 18887                           ; BSR set to: 0
 18888  017250  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18889  017252  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 18890                           
 18891                           ; BSR set to: 0
 18892                           ;Types.c: 55: Offset += 1;
 18893  017254  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 18894  017256                     l726:
 18895                           
 18896                           ; BSR set to: 0
 18897                           
 18898                           ; BSR set to: 0
 18899  017256  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 18900  017258  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 18901  01725A  B0D8               	btfsc	status,0,c
 18902  01725C  D7F9               	goto	l727
 18903                           
 18904                           ; BSR set to: 0
 18905                           ;Types.c: 56: }
 18906                           ;Types.c: 57: pChunk *= pChunkSize;
 18907                           
 18908                           ; BSR set to: 0
 18909  01725E  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18910  017260  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 18911  017262  50F3               	movf	prodl,w,c
 18912  017264  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 18913                           
 18914                           ; BSR set to: 0
 18915                           ;Types.c: 58: pChunk += Offset;
 18916  017266  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 18917  017268  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 18918                           
 18919                           ; BSR set to: 0
 18920                           ;Types.c: 60: pValue &= MASK;
 18921  01726A  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 18922  01726C  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 18923                           
 18924                           ; BSR set to: 0
 18925                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 18926  01726E  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18927  017272  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 18928  017276  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18929  017278  D002               	goto	u11664
 18930  01727A                     u11665:
 18931  01727A  90D8               	bcf	status,0,c
 18932  01727C  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18933  01727E                     u11664:
 18934  01727E  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18935  017280  D7FC               	goto	u11665
 18936  017282  0100               	movlb	0	; () banked
 18937  017284  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18938  017286  0AFF               	xorlw	255
 18939  017288  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 18940  01728A  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18941  01728E  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18942  017292  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 18943  017294  16DF               	andwf	indf2,f,c
 18944                           
 18945                           ; BSR set to: 0
 18946                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 18947  017296  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18948  01729A  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 18949  01729E  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 18950  0172A0  D002               	goto	u11674
 18951  0172A2                     u11675:
 18952  0172A2  90D8               	bcf	status,0,c
 18953  0172A4  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18954  0172A6                     u11674:
 18955  0172A6  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 18956  0172A8  D7FC               	goto	u11675
 18957  0172AA  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18958  0172AE  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18959  0172B2  0100               	movlb	0	; () banked
 18960  0172B4  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18961  0172B6  12DF               	iorwf	indf2,f,c
 18962                           
 18963                           ; BSR set to: 0
 18964  0172B8  0012               	return		;funcret
 18965  0172BA                     __end_of_Byte_SetZone:
 18966                           	opt stack 0
 18967                           tosu	equ	0xFFF
 18968                           tosh	equ	0xFFE
 18969                           tosl	equ	0xFFD
 18970                           pclath	equ	0xFFA
 18971                           tblptru	equ	0xFF8
 18972                           tblptrh	equ	0xFF7
 18973                           tblptrl	equ	0xFF6
 18974                           tablat	equ	0xFF5
 18975                           prodh	equ	0xFF4
 18976                           prodl	equ	0xFF3
 18977                           intcon	equ	0xFF2
 18978                           indf0	equ	0xFEF
 18979                           postinc0	equ	0xFEE
 18980                           fsr0h	equ	0xFEA
 18981                           fsr0l	equ	0xFE9
 18982                           wreg	equ	0xFE8
 18983                           indf1	equ	0xFE7
 18984                           postdec1	equ	0xFE5
 18985                           fsr1h	equ	0xFE2
 18986                           fsr1l	equ	0xFE1
 18987                           indf2	equ	0xFDF
 18988                           postinc2	equ	0xFDE
 18989                           postdec2	equ	0xFDD
 18990                           plusw2	equ	0xFDB
 18991                           fsr2h	equ	0xFDA
 18992                           fsr2l	equ	0xFD9
 18993                           status	equ	0xFD8
 18994                           
 18995 ;; *************** function _Detect_Victim *****************
 18996 ;; Defined at:
 18997 ;;		line 308 in file "dans.c"
 18998 ;; Parameters:    Size  Location     Type
 18999 ;;		None
 19000 ;; Auto vars:     Size  Location     Type
 19001 ;;  Home_Base_St    2   47[BANK0 ] int 
 19002 ;; Return value:  Size  Location     Type
 19003 ;;                  2   44[BANK0 ] int 
 19004 ;; Registers used:
 19005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19006 ;; Tracked objects:
 19007 ;;		On entry : 0/0
 19008 ;;		On exit  : 0/0
 19009 ;;		Unchanged: 0/0
 19010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19011 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19012 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19014 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19015 ;;Total ram usage:        5 bytes
 19016 ;; Hardware stack levels used:    1
 19017 ;; Hardware stack levels required when called:   13
 19018 ;; This function calls:
 19019 ;;		_Console_Render
 19020 ;;		_eusartRec
 19021 ;;		_eusartSend
 19022 ;;		_printf
 19023 ;; This function is called by:
 19024 ;;		_main
 19025 ;; This function uses a non-reentrant model
 19026 ;;
 19027                           
 19028                           	psect	text96
 19029  017D16                     __ptext96:
 19030                           	opt stack 0
 19031  017D16                     _Detect_Victim:
 19032                           	opt stack 17
 19033                           
 19034                           ;dans.c: 309: eusartSend(142);
 19035                           
 19036                           ; BSR set to: 0
 19037                           ;incstack = 0
 19038  017D16  0E8E               	movlw	142
 19039  017D18  EC2D  F0C6         	call	_eusartSend
 19040                           
 19041                           ;dans.c: 310: eusartSend(17);
 19042  017D1C  0E11               	movlw	17
 19043  017D1E  EC2D  F0C6         	call	_eusartSend
 19044                           
 19045                           ;dans.c: 311: int Home_Base_State = (eusartRec());
 19046  017D22  EC61  F0C6         	call	_eusartRec	;wreg free
 19047  017D26  0100               	movlb	0	; () banked
 19048  017D28  6F8E               	movwf	??_Detect_Victim& (0+255),b
 19049  017D2A  518E               	movf	??_Detect_Victim& (0+255),w,b
 19050  017D2C  6F8F               	movwf	Detect_Victim@Home_Base_State& (0+255),b
 19051  017D2E  6B90               	clrf	(Detect_Victim@Home_Base_State+1)& (0+255),b
 19052                           
 19053                           ; BSR set to: 0
 19054                           ;dans.c: 312: if(Home_Base_State >= 240 && Home_Base_State <= 254){
 19055  017D30  BF90               	btfsc	(Detect_Victim@Home_Base_State+1)& (0+255),7,b
 19056  017D32  D012               	goto	l2411
 19057  017D34  5190               	movf	(Detect_Victim@Home_Base_State+1)& (0+255),w,b
 19058  017D36  E104               	bnz	u14400
 19059  017D38  0EF0               	movlw	240
 19060  017D3A  5D8F               	subwf	Detect_Victim@Home_Base_State& (0+255),w,b
 19061  017D3C  A0D8               	btfss	status,0,c
 19062  017D3E  D00C               	goto	l2411
 19063  017D40                     u14400:
 19064                           
 19065                           ; BSR set to: 0
 19066  017D40  BF90               	btfsc	(Detect_Victim@Home_Base_State+1)& (0+255),7,b
 19067  017D42  D005               	goto	u14410
 19068  017D44  5190               	movf	(Detect_Victim@Home_Base_State+1)& (0+255),w,b
 19069  017D46  E108               	bnz	l17099
 19070  017D48  298F               	incf	Detect_Victim@Home_Base_State& (0+255),w,b
 19071  017D4A  B0D8               	btfsc	status,0,c
 19072  017D4C  D005               	goto	l2411
 19073  017D4E                     u14410:
 19074                           
 19075                           ; BSR set to: 0
 19076                           ;dans.c: 313: return 1;
 19077  017D4E  0E00               	movlw	0
 19078  017D50  6F8D               	movwf	(?_Detect_Victim+1)& (0+255),b
 19079  017D52  0E01               	movlw	1
 19080  017D54  6F8C               	movwf	?_Detect_Victim& (0+255),b
 19081                           
 19082                           ; BSR set to: 0
 19083  017D56  0012               	return	
 19084  017D58                     l2411:
 19085  017D58                     l17099:
 19086                           
 19087                           ; BSR set to: 0
 19088                           ;dans.c: 316: else{
 19089                           ;dans.c: 317: printf("\nNOTHING!!!");
 19090  017D58  0EA4               	movlw	low STR_23
 19091  017D5A  6F75               	movwf	printf@f& (0+255),b
 19092  017D5C  0EFF               	movlw	high STR_23
 19093  017D5E  6F76               	movwf	(printf@f+1)& (0+255),b
 19094  017D60  EC7E  F0AB         	call	_printf	;wreg free
 19095                           
 19096                           ;dans.c: 318: Console_Render();
 19097  017D64  ECA2  F0A7         	call	_Console_Render	;wreg free
 19098                           
 19099                           ;dans.c: 319: }
 19100                           ;dans.c: 320: return 0;
 19101  017D68  0E00               	movlw	0
 19102  017D6A  0100               	movlb	0	; () banked
 19103  017D6C  6F8D               	movwf	(?_Detect_Victim+1)& (0+255),b
 19104  017D6E  0E00               	movlw	0
 19105  017D70  6F8C               	movwf	?_Detect_Victim& (0+255),b
 19106  017D72  0012               	return	
 19107  017D74                     __end_of_Detect_Victim:
 19108                           	opt stack 0
 19109                           tosu	equ	0xFFF
 19110                           tosh	equ	0xFFE
 19111                           tosl	equ	0xFFD
 19112                           pclath	equ	0xFFA
 19113                           tblptru	equ	0xFF8
 19114                           tblptrh	equ	0xFF7
 19115                           tblptrl	equ	0xFF6
 19116                           tablat	equ	0xFF5
 19117                           prodh	equ	0xFF4
 19118                           prodl	equ	0xFF3
 19119                           intcon	equ	0xFF2
 19120                           indf0	equ	0xFEF
 19121                           postinc0	equ	0xFEE
 19122                           fsr0h	equ	0xFEA
 19123                           fsr0l	equ	0xFE9
 19124                           wreg	equ	0xFE8
 19125                           indf1	equ	0xFE7
 19126                           postdec1	equ	0xFE5
 19127                           fsr1h	equ	0xFE2
 19128                           fsr1l	equ	0xFE1
 19129                           indf2	equ	0xFDF
 19130                           postinc2	equ	0xFDE
 19131                           postdec2	equ	0xFDD
 19132                           plusw2	equ	0xFDB
 19133                           fsr2h	equ	0xFDA
 19134                           fsr2l	equ	0xFD9
 19135                           status	equ	0xFD8
 19136                           
 19137 ;; *************** function _eusartSend *****************
 19138 ;; Defined at:
 19139 ;;		line 223 in file "dans.c"
 19140 ;; Parameters:    Size  Location     Type
 19141 ;;  sendChar        1    wreg     unsigned char 
 19142 ;; Auto vars:     Size  Location     Type
 19143 ;;  sendChar        1    0[BANK0 ] unsigned char 
 19144 ;; Return value:  Size  Location     Type
 19145 ;;                  1    wreg      void 
 19146 ;; Registers used:
 19147 ;;		wreg
 19148 ;; Tracked objects:
 19149 ;;		On entry : 0/0
 19150 ;;		On exit  : 0/0
 19151 ;;		Unchanged: 0/0
 19152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19157 ;;Total ram usage:        1 bytes
 19158 ;; Hardware stack levels used:    1
 19159 ;; Hardware stack levels required when called:    7
 19160 ;; This function calls:
 19161 ;;		Nothing
 19162 ;; This function is called by:
 19163 ;;		_Robot_Init
 19164 ;;		_Drive
 19165 ;;		_UpdateDistance
 19166 ;;		_Robot_Stop
 19167 ;;		_Get_VirtualWall_State
 19168 ;;		_Detect_Victim
 19169 ;;		_Turn
 19170 ;;		_Get_Sensor_State
 19171 ;;		_BangBang
 19172 ;;		_LEDOn
 19173 ;;		_LEDOff
 19174 ;; This function uses a non-reentrant model
 19175 ;;
 19176                           
 19177                           	psect	text97
 19178  018C5A                     __ptext97:
 19179                           	opt stack 0
 19180  018C5A                     _eusartSend:
 19181                           	opt stack 21
 19182                           
 19183                           ; BSR set to: 0
 19184                           ;incstack = 0
 19185                           ;eusartSend@sendChar stored from wreg
 19186  018C5A  0100               	movlb	0	; () banked
 19187  018C5C  6F60               	movwf	eusartSend@sendChar& (0+255),b
 19188  018C5E                     
 19189                           ;dans.c: 224: while(!TXSTA1bits.TRMT){};
 19190  018C5E  A2AD               	btfss	4013,1,c	;volatile
 19191  018C60  D7FE               	goto	l14969
 19192                           
 19193                           ;dans.c: 225: TXREG1 = sendChar;
 19194  018C62  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 19195  018C66  0012               	return		;funcret
 19196  018C68                     __end_of_eusartSend:
 19197                           	opt stack 0
 19198                           tosu	equ	0xFFF
 19199                           tosh	equ	0xFFE
 19200                           tosl	equ	0xFFD
 19201                           pclath	equ	0xFFA
 19202                           tblptru	equ	0xFF8
 19203                           tblptrh	equ	0xFF7
 19204                           tblptrl	equ	0xFF6
 19205                           tablat	equ	0xFF5
 19206                           prodh	equ	0xFF4
 19207                           prodl	equ	0xFF3
 19208                           intcon	equ	0xFF2
 19209                           indf0	equ	0xFEF
 19210                           postinc0	equ	0xFEE
 19211                           fsr0h	equ	0xFEA
 19212                           fsr0l	equ	0xFE9
 19213                           wreg	equ	0xFE8
 19214                           indf1	equ	0xFE7
 19215                           postdec1	equ	0xFE5
 19216                           fsr1h	equ	0xFE2
 19217                           fsr1l	equ	0xFE1
 19218                           indf2	equ	0xFDF
 19219                           postinc2	equ	0xFDE
 19220                           postdec2	equ	0xFDD
 19221                           plusw2	equ	0xFDB
 19222                           fsr2h	equ	0xFDA
 19223                           fsr2l	equ	0xFD9
 19224                           status	equ	0xFD8
 19225                           
 19226 ;; *************** function _eusartRec *****************
 19227 ;; Defined at:
 19228 ;;		line 227 in file "dans.c"
 19229 ;; Parameters:    Size  Location     Type
 19230 ;;		None
 19231 ;; Auto vars:     Size  Location     Type
 19232 ;;		None
 19233 ;; Return value:  Size  Location     Type
 19234 ;;                  1    wreg      unsigned char 
 19235 ;; Registers used:
 19236 ;;		wreg, status,2
 19237 ;; Tracked objects:
 19238 ;;		On entry : 0/0
 19239 ;;		On exit  : 0/0
 19240 ;;		Unchanged: 0/0
 19241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19246 ;;Total ram usage:        0 bytes
 19247 ;; Hardware stack levels used:    1
 19248 ;; Hardware stack levels required when called:    7
 19249 ;; This function calls:
 19250 ;;		Nothing
 19251 ;; This function is called by:
 19252 ;;		_UpdateDistance
 19253 ;;		_Get_VirtualWall_State
 19254 ;;		_Detect_Victim
 19255 ;;		_Turn
 19256 ;; This function uses a non-reentrant model
 19257 ;;
 19258                           
 19259                           	psect	text98
 19260  018CC2                     __ptext98:
 19261                           	opt stack 0
 19262  018CC2                     _eusartRec:
 19263                           	opt stack 21
 19264                           
 19265                           ;dans.c: 228: while(!PIR1bits.RC1IF){}
 19266                           
 19267                           ;incstack = 0
 19268  018CC2  AA9E               	btfss	3998,5,c	;volatile
 19269  018CC4  D7FE               	goto	_eusartRec
 19270                           
 19271                           ;dans.c: 229: return (int) RCREG1;
 19272  018CC6  50AF               	movf	4015,w,c	;volatile
 19273  018CC8  0012               	return	
 19274  018CCA                     __end_of_eusartRec:
 19275                           	opt stack 0
 19276                           tosu	equ	0xFFF
 19277                           tosh	equ	0xFFE
 19278                           tosl	equ	0xFFD
 19279                           pclath	equ	0xFFA
 19280                           tblptru	equ	0xFF8
 19281                           tblptrh	equ	0xFF7
 19282                           tblptrl	equ	0xFF6
 19283                           tablat	equ	0xFF5
 19284                           prodh	equ	0xFF4
 19285                           prodl	equ	0xFF3
 19286                           intcon	equ	0xFF2
 19287                           indf0	equ	0xFEF
 19288                           postinc0	equ	0xFEE
 19289                           fsr0h	equ	0xFEA
 19290                           fsr0l	equ	0xFE9
 19291                           wreg	equ	0xFE8
 19292                           indf1	equ	0xFE7
 19293                           postdec1	equ	0xFE5
 19294                           fsr1h	equ	0xFE2
 19295                           fsr1l	equ	0xFE1
 19296                           indf2	equ	0xFDF
 19297                           postinc2	equ	0xFDE
 19298                           postdec2	equ	0xFDD
 19299                           plusw2	equ	0xFDB
 19300                           fsr2h	equ	0xFDA
 19301                           fsr2l	equ	0xFD9
 19302                           status	equ	0xFD8
 19303                           
 19304 ;; *************** function _Create_Maze *****************
 19305 ;; Defined at:
 19306 ;;		line 11 in file "dans.c"
 19307 ;; Parameters:    Size  Location     Type
 19308 ;;		None
 19309 ;; Auto vars:     Size  Location     Type
 19310 ;;  p               2   10[BANK0 ] int 
 19311 ;;  y               2   14[BANK0 ] int 
 19312 ;;  x               2   12[BANK0 ] int 
 19313 ;;  count           2    8[BANK0 ] int 
 19314 ;; Return value:  Size  Location     Type
 19315 ;;                  2  2016[None  ] int 
 19316 ;; Registers used:
 19317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19318 ;; Tracked objects:
 19319 ;;		On entry : 0/0
 19320 ;;		On exit  : 0/0
 19321 ;;		Unchanged: 0/0
 19322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19324 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19325 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19326 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19327 ;;Total ram usage:       10 bytes
 19328 ;; Hardware stack levels used:    1
 19329 ;; Hardware stack levels required when called:    8
 19330 ;; This function calls:
 19331 ;;		___wmul
 19332 ;; This function is called by:
 19333 ;;		_main
 19334 ;; This function uses a non-reentrant model
 19335 ;;
 19336                           
 19337                           	psect	text99
 19338  010000                     __ptext99:
 19339                           	opt stack 0
 19340  010000                     _Create_Maze:
 19341                           	opt stack 22
 19342                           
 19343                           ;dans.c: 13: int count = 0;
 19344                           
 19345                           ;incstack = 0
 19346  010000  0E00               	movlw	0
 19347  010002  0100               	movlb	0	; () banked
 19348  010004  6F69               	movwf	(Create_Maze@count+1)& (0+255),b
 19349  010006  0E00               	movlw	0
 19350  010008  6F68               	movwf	Create_Maze@count& (0+255),b
 19351                           
 19352                           ;dans.c: 14: int x = 0;
 19353  01000A  0E00               	movlw	0
 19354  01000C  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 19355  01000E  0E00               	movlw	0
 19356  010010  6F6C               	movwf	Create_Maze@x& (0+255),b
 19357                           
 19358                           ;dans.c: 15: int y = 0;
 19359  010012  0E00               	movlw	0
 19360  010014  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 19361  010016  0E00               	movlw	0
 19362  010018  6F6E               	movwf	Create_Maze@y& (0+255),b
 19363                           
 19364                           ;dans.c: 16: for (int p = 0; p < 20; p++){
 19365  01001A  0E00               	movlw	0
 19366  01001C  6F6B               	movwf	(Create_Maze@p+1)& (0+255),b
 19367  01001E  0E00               	movlw	0
 19368  010020  6F6A               	movwf	Create_Maze@p& (0+255),b
 19369  010022                     l16803:
 19370                           
 19371                           ; BSR set to: 0
 19372  010022  BF6B               	btfsc	(Create_Maze@p+1)& (0+255),7,b
 19373  010024  D006               	goto	l2336
 19374  010026  516B               	movf	(Create_Maze@p+1)& (0+255),w,b
 19375  010028  E114               	bnz	l16813
 19376  01002A  0E14               	movlw	20
 19377  01002C  5D6A               	subwf	Create_Maze@p& (0+255),w,b
 19378  01002E  B0D8               	btfsc	status,0,c
 19379  010030  D010               	goto	u14260
 19380  010032                     l2336:
 19381                           
 19382                           ; BSR set to: 0
 19383                           ;dans.c: 17: stack[p]=4;
 19384                           
 19385                           ; BSR set to: 0
 19386  010032  90D8               	bcf	status,0,c
 19387  010034  356A               	rlcf	Create_Maze@p& (0+255),w,b
 19388  010036  6ED9               	movwf	fsr2l,c
 19389  010038  356B               	rlcf	(Create_Maze@p+1)& (0+255),w,b
 19390  01003A  6EDA               	movwf	fsr2h,c
 19391  01003C  0E00               	movlw	low _stack
 19392  01003E  26D9               	addwf	fsr2l,f,c
 19393  010040  0E02               	movlw	high _stack
 19394  010042  22DA               	addwfc	fsr2h,f,c
 19395  010044  0E04               	movlw	4
 19396  010046  6EDE               	movwf	postinc2,c
 19397  010048  0E00               	movlw	0
 19398  01004A  6EDD               	movwf	postdec2,c
 19399                           
 19400                           ; BSR set to: 0
 19401  01004C  4B6A               	infsnz	Create_Maze@p& (0+255),f,b
 19402  01004E  2B6B               	incf	(Create_Maze@p+1)& (0+255),f,b
 19403  010050  D7E8               	goto	l16803
 19404  010052                     u14260:
 19405  010052                     l16813:
 19406                           
 19407                           ; BSR set to: 0
 19408                           ;dans.c: 18: }
 19409                           ;dans.c: 19: for(x = 0 ; x < 4; ++x){
 19410  010052  0E00               	movlw	0
 19411  010054  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 19412  010056  0E00               	movlw	0
 19413  010058  6F6C               	movwf	Create_Maze@x& (0+255),b
 19414                           
 19415                           ; BSR set to: 0
 19416  01005A  BF6D               	btfsc	(Create_Maze@x+1)& (0+255),7,b
 19417  01005C  D006               	goto	l2338
 19418  01005E  516D               	movf	(Create_Maze@x+1)& (0+255),w,b
 19419  010060  E170               	bnz	l2339
 19420  010062  0E04               	movlw	4
 19421  010064  5D6C               	subwf	Create_Maze@x& (0+255),w,b
 19422  010066  B0D8               	btfsc	status,0,c
 19423  010068  D06C               	goto	u14300
 19424  01006A                     l2338:
 19425                           
 19426                           ; BSR set to: 0
 19427                           ;dans.c: 20: for(y = 0 ; y < 5; ++y){
 19428                           
 19429                           ; BSR set to: 0
 19430  01006A  0E00               	movlw	0
 19431  01006C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 19432  01006E  0E00               	movlw	0
 19433  010070  6F6E               	movwf	Create_Maze@y& (0+255),b
 19434  010072                     l16821:
 19435                           
 19436                           ; BSR set to: 0
 19437  010072  BF6F               	btfsc	(Create_Maze@y+1)& (0+255),7,b
 19438  010074  D006               	goto	l2340
 19439  010076  516F               	movf	(Create_Maze@y+1)& (0+255),w,b
 19440  010078  E15D               	bnz	l16833
 19441  01007A  0E05               	movlw	5
 19442  01007C  5D6E               	subwf	Create_Maze@y& (0+255),w,b
 19443  01007E  B0D8               	btfsc	status,0,c
 19444  010080  D059               	goto	u14290
 19445  010082                     l2340:
 19446                           
 19447                           ; BSR set to: 0
 19448                           ;dans.c: 21: maze[x][y].id = count;
 19449                           
 19450                           ; BSR set to: 0
 19451  010082  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19452  010086  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19453  01008A  0E00               	movlw	0
 19454  01008C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19455  01008E  0E32               	movlw	50
 19456  010090  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19457  010092  EC40  F0C4         	call	___wmul	;wreg free
 19458  010096  0E00               	movlw	low _maze
 19459  010098  0100               	movlb	0	; () banked
 19460  01009A  6F66               	movwf	??_Create_Maze& (0+255),b
 19461  01009C  0E03               	movlw	high _maze
 19462  01009E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19463  0100A0  5160               	movf	?___wmul& (0+255),w,b
 19464  0100A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 19465  0100A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 19466  0100A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19467  0100A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19468  0100AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19469  0100B0  0E00               	movlw	0
 19470  0100B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19471  0100B4  0E0A               	movlw	10
 19472  0100B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19473  0100B8  EC40  F0C4         	call	___wmul	;wreg free
 19474  0100BC  0100               	movlb	0	; () banked
 19475  0100BE  5160               	movf	?___wmul& (0+255),w,b
 19476  0100C0  2566               	addwf	??_Create_Maze& (0+255),w,b
 19477  0100C2  6ED9               	movwf	fsr2l,c
 19478  0100C4  5161               	movf	(?___wmul+1)& (0+255),w,b
 19479  0100C6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19480  0100C8  6EDA               	movwf	fsr2h,c
 19481  0100CA  C068  FFDE         	movff	Create_Maze@count,postinc2
 19482  0100CE  C069  FFDD         	movff	Create_Maze@count+1,postdec2
 19483                           
 19484                           ;dans.c: 22: maze[x][y].victim = 0;
 19485  0100D2  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19486  0100D6  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19487  0100DA  0E00               	movlw	0
 19488  0100DC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19489  0100DE  0E32               	movlw	50
 19490  0100E0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19491  0100E2  EC40  F0C4         	call	___wmul	;wreg free
 19492  0100E6  0E00               	movlw	low _maze
 19493  0100E8  0100               	movlb	0	; () banked
 19494  0100EA  6F66               	movwf	??_Create_Maze& (0+255),b
 19495  0100EC  0E03               	movlw	high _maze
 19496  0100EE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19497  0100F0  5160               	movf	?___wmul& (0+255),w,b
 19498  0100F2  2766               	addwf	??_Create_Maze& (0+255),f,b
 19499  0100F4  5161               	movf	(?___wmul+1)& (0+255),w,b
 19500  0100F6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19501  0100F8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19502  0100FC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19503  010100  0E00               	movlw	0
 19504  010102  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19505  010104  0E0A               	movlw	10
 19506  010106  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19507  010108  EC40  F0C4         	call	___wmul	;wreg free
 19508  01010C  0100               	movlb	0	; () banked
 19509  01010E  5160               	movf	?___wmul& (0+255),w,b
 19510  010110  2766               	addwf	??_Create_Maze& (0+255),f,b
 19511  010112  5161               	movf	(?___wmul+1)& (0+255),w,b
 19512  010114  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19513  010116  0E02               	movlw	2
 19514  010118  2566               	addwf	??_Create_Maze& (0+255),w,b
 19515  01011A  6ED9               	movwf	fsr2l,c
 19516  01011C  0E00               	movlw	0
 19517  01011E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19518  010120  6EDA               	movwf	fsr2h,c
 19519  010122  0E00               	movlw	0
 19520  010124  6EDE               	movwf	postinc2,c
 19521  010126  0E00               	movlw	0
 19522  010128  6EDD               	movwf	postdec2,c
 19523                           
 19524                           ; BSR set to: 0
 19525                           ;dans.c: 23: ++count;
 19526  01012A  4B68               	infsnz	Create_Maze@count& (0+255),f,b
 19527  01012C  2B69               	incf	(Create_Maze@count+1)& (0+255),f,b
 19528                           
 19529                           ; BSR set to: 0
 19530  01012E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19531  010130  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19532  010132  D79F               	goto	l16821
 19533  010134                     u14290:
 19534  010134                     l16833:
 19535                           
 19536                           ; BSR set to: 0
 19537  010134  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 19538  010136  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 19539                           
 19540                           ; BSR set to: 0
 19541  010138  BF6D               	btfsc	(Create_Maze@x+1)& (0+255),7,b
 19542  01013A  D797               	goto	l2338
 19543  01013C  516D               	movf	(Create_Maze@x+1)& (0+255),w,b
 19544  01013E  E101               	bnz	l16837
 19545  010140  D790               	goto	L16
 19546  010142                     u14300:
 19547  010142                     l2339:
 19548  010142                     l16837:
 19549                           
 19550                           ; BSR set to: 0
 19551                           ;dans.c: 24: }
 19552                           ;dans.c: 25: }
 19553                           ;dans.c: 26: x = 0;
 19554  010142  0E00               	movlw	0
 19555  010144  6F6D               	movwf	(Create_Maze@x+1)& (0+255),b
 19556  010146  0E00               	movlw	0
 19557  010148  6F6C               	movwf	Create_Maze@x& (0+255),b
 19558                           
 19559                           ;dans.c: 27: y = 0;
 19560  01014A  0E00               	movlw	0
 19561  01014C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 19562  01014E  0E00               	movlw	0
 19563  010150  6F6E               	movwf	Create_Maze@y& (0+255),b
 19564                           
 19565                           ;dans.c: 29: X_Pos = 3;
 19566  010152  0E00               	movlw	0
 19567  010154  0101               	movlb	1	; () banked
 19568  010156  6F3D               	movwf	(_X_Pos+1)& (0+255),b
 19569  010158  0E03               	movlw	3
 19570  01015A  6F3C               	movwf	_X_Pos& (0+255),b
 19571                           
 19572                           ;dans.c: 30: Y_Pos = 1;
 19573  01015C  0E00               	movlw	0
 19574  01015E  6F3B               	movwf	(_Y_Pos+1)& (0+255),b
 19575  010160  0E01               	movlw	1
 19576  010162  6F3A               	movwf	_Y_Pos& (0+255),b
 19577                           
 19578                           ; BSR set to: 1
 19579                           ;dans.c: 32: maze[x][y].walls[0] = 1;
 19580  010164  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19581  010168  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19582  01016C  0E00               	movlw	0
 19583  01016E  0100               	movlb	0	; () banked
 19584  010170  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19585  010172  0E32               	movlw	50
 19586  010174  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19587  010176  EC40  F0C4         	call	___wmul	;wreg free
 19588  01017A  0E00               	movlw	low _maze
 19589  01017C  0100               	movlb	0	; () banked
 19590  01017E  6F66               	movwf	??_Create_Maze& (0+255),b
 19591  010180  0E03               	movlw	high _maze
 19592  010182  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19593  010184  5160               	movf	?___wmul& (0+255),w,b
 19594  010186  2766               	addwf	??_Create_Maze& (0+255),f,b
 19595  010188  5161               	movf	(?___wmul+1)& (0+255),w,b
 19596  01018A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19597  01018C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19598  010190  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19599  010194  0E00               	movlw	0
 19600  010196  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19601  010198  0E0A               	movlw	10
 19602  01019A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19603  01019C  EC40  F0C4         	call	___wmul	;wreg free
 19604  0101A0  0100               	movlb	0	; () banked
 19605  0101A2  5160               	movf	?___wmul& (0+255),w,b
 19606  0101A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19607  0101A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19608  0101A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19609  0101AA  0E04               	movlw	4
 19610  0101AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19611  0101AE  6ED9               	movwf	fsr2l,c
 19612  0101B0  0E00               	movlw	0
 19613  0101B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19614  0101B4  6EDA               	movwf	fsr2h,c
 19615  0101B6  0E01               	movlw	1
 19616  0101B8  6EDF               	movwf	indf2,c
 19617                           
 19618                           ; BSR set to: 0
 19619                           ;dans.c: 33: maze[x][y].walls[1] = 0;
 19620  0101BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19621  0101BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19622  0101C2  0E00               	movlw	0
 19623  0101C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19624  0101C6  0E32               	movlw	50
 19625  0101C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19626  0101CA  EC40  F0C4         	call	___wmul	;wreg free
 19627  0101CE  0E00               	movlw	low _maze
 19628  0101D0  0100               	movlb	0	; () banked
 19629  0101D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19630  0101D4  0E03               	movlw	high _maze
 19631  0101D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19632  0101D8  5160               	movf	?___wmul& (0+255),w,b
 19633  0101DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19634  0101DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19635  0101DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19636  0101E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19637  0101E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19638  0101E8  0E00               	movlw	0
 19639  0101EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19640  0101EC  0E0A               	movlw	10
 19641  0101EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19642  0101F0  EC40  F0C4         	call	___wmul	;wreg free
 19643  0101F4  0100               	movlb	0	; () banked
 19644  0101F6  5160               	movf	?___wmul& (0+255),w,b
 19645  0101F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19646  0101FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19647  0101FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19648  0101FE  0E05               	movlw	5
 19649  010200  2566               	addwf	??_Create_Maze& (0+255),w,b
 19650  010202  6ED9               	movwf	fsr2l,c
 19651  010204  0E00               	movlw	0
 19652  010206  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19653  010208  6EDA               	movwf	fsr2h,c
 19654  01020A  0E00               	movlw	0
 19655  01020C  6EDF               	movwf	indf2,c
 19656                           
 19657                           ; BSR set to: 0
 19658                           ;dans.c: 34: maze[x][y].walls[2] = 0;
 19659  01020E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19660  010212  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19661  010216  0E00               	movlw	0
 19662  010218  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19663  01021A  0E32               	movlw	50
 19664  01021C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19665  01021E  EC40  F0C4         	call	___wmul	;wreg free
 19666  010222  0E00               	movlw	low _maze
 19667  010224  0100               	movlb	0	; () banked
 19668  010226  6F66               	movwf	??_Create_Maze& (0+255),b
 19669  010228  0E03               	movlw	high _maze
 19670  01022A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19671  01022C  5160               	movf	?___wmul& (0+255),w,b
 19672  01022E  2766               	addwf	??_Create_Maze& (0+255),f,b
 19673  010230  5161               	movf	(?___wmul+1)& (0+255),w,b
 19674  010232  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19675  010234  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19676  010238  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19677  01023C  0E00               	movlw	0
 19678  01023E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19679  010240  0E0A               	movlw	10
 19680  010242  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19681  010244  EC40  F0C4         	call	___wmul	;wreg free
 19682  010248  0100               	movlb	0	; () banked
 19683  01024A  5160               	movf	?___wmul& (0+255),w,b
 19684  01024C  2766               	addwf	??_Create_Maze& (0+255),f,b
 19685  01024E  5161               	movf	(?___wmul+1)& (0+255),w,b
 19686  010250  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19687  010252  0E06               	movlw	6
 19688  010254  2566               	addwf	??_Create_Maze& (0+255),w,b
 19689  010256  6ED9               	movwf	fsr2l,c
 19690  010258  0E00               	movlw	0
 19691  01025A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19692  01025C  6EDA               	movwf	fsr2h,c
 19693  01025E  0E00               	movlw	0
 19694  010260  6EDF               	movwf	indf2,c
 19695                           
 19696                           ; BSR set to: 0
 19697                           ;dans.c: 35: maze[x][y].walls[3] = 1;
 19698  010262  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19699  010266  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19700  01026A  0E00               	movlw	0
 19701  01026C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19702  01026E  0E32               	movlw	50
 19703  010270  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19704  010272  EC40  F0C4         	call	___wmul	;wreg free
 19705  010276  0E00               	movlw	low _maze
 19706  010278  0100               	movlb	0	; () banked
 19707  01027A  6F66               	movwf	??_Create_Maze& (0+255),b
 19708  01027C  0E03               	movlw	high _maze
 19709  01027E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19710  010280  5160               	movf	?___wmul& (0+255),w,b
 19711  010282  2766               	addwf	??_Create_Maze& (0+255),f,b
 19712  010284  5161               	movf	(?___wmul+1)& (0+255),w,b
 19713  010286  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19714  010288  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19715  01028C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19716  010290  0E00               	movlw	0
 19717  010292  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19718  010294  0E0A               	movlw	10
 19719  010296  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19720  010298  EC40  F0C4         	call	___wmul	;wreg free
 19721  01029C  0100               	movlb	0	; () banked
 19722  01029E  5160               	movf	?___wmul& (0+255),w,b
 19723  0102A0  2766               	addwf	??_Create_Maze& (0+255),f,b
 19724  0102A2  5161               	movf	(?___wmul+1)& (0+255),w,b
 19725  0102A4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19726  0102A6  0E07               	movlw	7
 19727  0102A8  2566               	addwf	??_Create_Maze& (0+255),w,b
 19728  0102AA  6ED9               	movwf	fsr2l,c
 19729  0102AC  0E00               	movlw	0
 19730  0102AE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19731  0102B0  6EDA               	movwf	fsr2h,c
 19732  0102B2  0E01               	movlw	1
 19733  0102B4  6EDF               	movwf	indf2,c
 19734                           
 19735                           ; BSR set to: 0
 19736                           ;dans.c: 36: maze[x][y].Options = 2;
 19737  0102B6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19738  0102BA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19739  0102BE  0E00               	movlw	0
 19740  0102C0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19741  0102C2  0E32               	movlw	50
 19742  0102C4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19743  0102C6  EC40  F0C4         	call	___wmul	;wreg free
 19744  0102CA  0E00               	movlw	low _maze
 19745  0102CC  0100               	movlb	0	; () banked
 19746  0102CE  6F66               	movwf	??_Create_Maze& (0+255),b
 19747  0102D0  0E03               	movlw	high _maze
 19748  0102D2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19749  0102D4  5160               	movf	?___wmul& (0+255),w,b
 19750  0102D6  2766               	addwf	??_Create_Maze& (0+255),f,b
 19751  0102D8  5161               	movf	(?___wmul+1)& (0+255),w,b
 19752  0102DA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19753  0102DC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19754  0102E0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19755  0102E4  0E00               	movlw	0
 19756  0102E6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19757  0102E8  0E0A               	movlw	10
 19758  0102EA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19759  0102EC  EC40  F0C4         	call	___wmul	;wreg free
 19760  0102F0  0100               	movlb	0	; () banked
 19761  0102F2  5160               	movf	?___wmul& (0+255),w,b
 19762  0102F4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19763  0102F6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19764  0102F8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19765  0102FA  0E08               	movlw	8
 19766  0102FC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19767  0102FE  6ED9               	movwf	fsr2l,c
 19768  010300  0E00               	movlw	0
 19769  010302  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19770  010304  6EDA               	movwf	fsr2h,c
 19771  010306  0E02               	movlw	2
 19772  010308  6EDE               	movwf	postinc2,c
 19773  01030A  0E00               	movlw	0
 19774  01030C  6EDD               	movwf	postdec2,c
 19775                           
 19776                           ; BSR set to: 0
 19777                           ;dans.c: 38: ++y;
 19778  01030E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19779  010310  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19780                           
 19781                           ; BSR set to: 0
 19782                           ;dans.c: 39: maze[x][y].walls[0] = 1;
 19783  010312  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19784  010316  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19785  01031A  0E00               	movlw	0
 19786  01031C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19787  01031E  0E32               	movlw	50
 19788  010320  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19789  010322  EC40  F0C4         	call	___wmul	;wreg free
 19790  010326  0E00               	movlw	low _maze
 19791  010328  0100               	movlb	0	; () banked
 19792  01032A  6F66               	movwf	??_Create_Maze& (0+255),b
 19793  01032C  0E03               	movlw	high _maze
 19794  01032E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19795  010330  5160               	movf	?___wmul& (0+255),w,b
 19796  010332  2766               	addwf	??_Create_Maze& (0+255),f,b
 19797  010334  5161               	movf	(?___wmul+1)& (0+255),w,b
 19798  010336  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19799  010338  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19800  01033C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19801  010340  0E00               	movlw	0
 19802  010342  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19803  010344  0E0A               	movlw	10
 19804  010346  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19805  010348  EC40  F0C4         	call	___wmul	;wreg free
 19806  01034C  0100               	movlb	0	; () banked
 19807  01034E  5160               	movf	?___wmul& (0+255),w,b
 19808  010350  2766               	addwf	??_Create_Maze& (0+255),f,b
 19809  010352  5161               	movf	(?___wmul+1)& (0+255),w,b
 19810  010354  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19811  010356  0E04               	movlw	4
 19812  010358  2566               	addwf	??_Create_Maze& (0+255),w,b
 19813  01035A  6ED9               	movwf	fsr2l,c
 19814  01035C  0E00               	movlw	0
 19815  01035E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19816  010360  6EDA               	movwf	fsr2h,c
 19817  010362  0E01               	movlw	1
 19818  010364  6EDF               	movwf	indf2,c
 19819                           
 19820                           ; BSR set to: 0
 19821                           ;dans.c: 40: maze[x][y].walls[1] = 0;
 19822  010366  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19823  01036A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19824  01036E  0E00               	movlw	0
 19825  010370  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19826  010372  0E32               	movlw	50
 19827  010374  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19828  010376  EC40  F0C4         	call	___wmul	;wreg free
 19829  01037A  0E00               	movlw	low _maze
 19830  01037C  0100               	movlb	0	; () banked
 19831  01037E  6F66               	movwf	??_Create_Maze& (0+255),b
 19832  010380  0E03               	movlw	high _maze
 19833  010382  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19834  010384  5160               	movf	?___wmul& (0+255),w,b
 19835  010386  2766               	addwf	??_Create_Maze& (0+255),f,b
 19836  010388  5161               	movf	(?___wmul+1)& (0+255),w,b
 19837  01038A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19838  01038C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19839  010390  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19840  010394  0E00               	movlw	0
 19841  010396  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19842  010398  0E0A               	movlw	10
 19843  01039A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19844  01039C  EC40  F0C4         	call	___wmul	;wreg free
 19845  0103A0  0100               	movlb	0	; () banked
 19846  0103A2  5160               	movf	?___wmul& (0+255),w,b
 19847  0103A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 19848  0103A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 19849  0103A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19850  0103AA  0E05               	movlw	5
 19851  0103AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 19852  0103AE  6ED9               	movwf	fsr2l,c
 19853  0103B0  0E00               	movlw	0
 19854  0103B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19855  0103B4  6EDA               	movwf	fsr2h,c
 19856  0103B6  0E00               	movlw	0
 19857  0103B8  6EDF               	movwf	indf2,c
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;dans.c: 41: maze[x][y].walls[2] = 1;
 19861  0103BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19862  0103BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19863  0103C2  0E00               	movlw	0
 19864  0103C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19865  0103C6  0E32               	movlw	50
 19866  0103C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19867  0103CA  EC40  F0C4         	call	___wmul	;wreg free
 19868  0103CE  0E00               	movlw	low _maze
 19869  0103D0  0100               	movlb	0	; () banked
 19870  0103D2  6F66               	movwf	??_Create_Maze& (0+255),b
 19871  0103D4  0E03               	movlw	high _maze
 19872  0103D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19873  0103D8  5160               	movf	?___wmul& (0+255),w,b
 19874  0103DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 19875  0103DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 19876  0103DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19877  0103E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19878  0103E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19879  0103E8  0E00               	movlw	0
 19880  0103EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19881  0103EC  0E0A               	movlw	10
 19882  0103EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19883  0103F0  EC40  F0C4         	call	___wmul	;wreg free
 19884  0103F4  0100               	movlb	0	; () banked
 19885  0103F6  5160               	movf	?___wmul& (0+255),w,b
 19886  0103F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 19887  0103FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 19888  0103FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19889  0103FE  0E06               	movlw	6
 19890  010400  2566               	addwf	??_Create_Maze& (0+255),w,b
 19891  010402  6ED9               	movwf	fsr2l,c
 19892  010404  0E00               	movlw	0
 19893  010406  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19894  010408  6EDA               	movwf	fsr2h,c
 19895  01040A  0E01               	movlw	1
 19896  01040C  6EDF               	movwf	indf2,c
 19897                           
 19898                           ; BSR set to: 0
 19899                           ;dans.c: 42: maze[x][y].walls[3] = 0;
 19900  01040E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19901  010412  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19902  010416  0E00               	movlw	0
 19903  010418  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19904  01041A  0E32               	movlw	50
 19905  01041C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19906  01041E  EC40  F0C4         	call	___wmul	;wreg free
 19907  010422  0E00               	movlw	low _maze
 19908  010424  0100               	movlb	0	; () banked
 19909  010426  6F66               	movwf	??_Create_Maze& (0+255),b
 19910  010428  0E03               	movlw	high _maze
 19911  01042A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19912  01042C  5160               	movf	?___wmul& (0+255),w,b
 19913  01042E  2766               	addwf	??_Create_Maze& (0+255),f,b
 19914  010430  5161               	movf	(?___wmul+1)& (0+255),w,b
 19915  010432  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19916  010434  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19917  010438  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19918  01043C  0E00               	movlw	0
 19919  01043E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19920  010440  0E0A               	movlw	10
 19921  010442  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19922  010444  EC40  F0C4         	call	___wmul	;wreg free
 19923  010448  0100               	movlb	0	; () banked
 19924  01044A  5160               	movf	?___wmul& (0+255),w,b
 19925  01044C  2766               	addwf	??_Create_Maze& (0+255),f,b
 19926  01044E  5161               	movf	(?___wmul+1)& (0+255),w,b
 19927  010450  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19928  010452  0E07               	movlw	7
 19929  010454  2566               	addwf	??_Create_Maze& (0+255),w,b
 19930  010456  6ED9               	movwf	fsr2l,c
 19931  010458  0E00               	movlw	0
 19932  01045A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19933  01045C  6EDA               	movwf	fsr2h,c
 19934  01045E  0E00               	movlw	0
 19935  010460  6EDF               	movwf	indf2,c
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;dans.c: 43: maze[x][y].Options = 2;
 19939  010462  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19940  010466  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19941  01046A  0E00               	movlw	0
 19942  01046C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19943  01046E  0E32               	movlw	50
 19944  010470  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19945  010472  EC40  F0C4         	call	___wmul	;wreg free
 19946  010476  0E00               	movlw	low _maze
 19947  010478  0100               	movlb	0	; () banked
 19948  01047A  6F66               	movwf	??_Create_Maze& (0+255),b
 19949  01047C  0E03               	movlw	high _maze
 19950  01047E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19951  010480  5160               	movf	?___wmul& (0+255),w,b
 19952  010482  2766               	addwf	??_Create_Maze& (0+255),f,b
 19953  010484  5161               	movf	(?___wmul+1)& (0+255),w,b
 19954  010486  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19955  010488  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 19956  01048C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 19957  010490  0E00               	movlw	0
 19958  010492  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19959  010494  0E0A               	movlw	10
 19960  010496  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19961  010498  EC40  F0C4         	call	___wmul	;wreg free
 19962  01049C  0100               	movlb	0	; () banked
 19963  01049E  5160               	movf	?___wmul& (0+255),w,b
 19964  0104A0  2766               	addwf	??_Create_Maze& (0+255),f,b
 19965  0104A2  5161               	movf	(?___wmul+1)& (0+255),w,b
 19966  0104A4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 19967  0104A6  0E08               	movlw	8
 19968  0104A8  2566               	addwf	??_Create_Maze& (0+255),w,b
 19969  0104AA  6ED9               	movwf	fsr2l,c
 19970  0104AC  0E00               	movlw	0
 19971  0104AE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 19972  0104B0  6EDA               	movwf	fsr2h,c
 19973  0104B2  0E02               	movlw	2
 19974  0104B4  6EDE               	movwf	postinc2,c
 19975  0104B6  0E00               	movlw	0
 19976  0104B8  6EDD               	movwf	postdec2,c
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;dans.c: 45: ++y;
 19980  0104BA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 19981  0104BC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 19982                           
 19983                           ; BSR set to: 0
 19984                           ;dans.c: 46: maze[x][y].walls[0] = 1;
 19985  0104BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 19986  0104C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 19987  0104C6  0E00               	movlw	0
 19988  0104C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19989  0104CA  0E32               	movlw	50
 19990  0104CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19991  0104CE  EC40  F0C4         	call	___wmul	;wreg free
 19992  0104D2  0E00               	movlw	low _maze
 19993  0104D4  0100               	movlb	0	; () banked
 19994  0104D6  6F66               	movwf	??_Create_Maze& (0+255),b
 19995  0104D8  0E03               	movlw	high _maze
 19996  0104DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 19997  0104DC  5160               	movf	?___wmul& (0+255),w,b
 19998  0104DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 19999  0104E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 20000  0104E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20001  0104E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20002  0104E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20003  0104EC  0E00               	movlw	0
 20004  0104EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20005  0104F0  0E0A               	movlw	10
 20006  0104F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20007  0104F4  EC40  F0C4         	call	___wmul	;wreg free
 20008  0104F8  0100               	movlb	0	; () banked
 20009  0104FA  5160               	movf	?___wmul& (0+255),w,b
 20010  0104FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 20011  0104FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 20012  010500  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20013  010502  0E04               	movlw	4
 20014  010504  2566               	addwf	??_Create_Maze& (0+255),w,b
 20015  010506  6ED9               	movwf	fsr2l,c
 20016  010508  0E00               	movlw	0
 20017  01050A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20018  01050C  6EDA               	movwf	fsr2h,c
 20019  01050E  0E01               	movlw	1
 20020  010510  6EDF               	movwf	indf2,c
 20021                           
 20022                           ; BSR set to: 0
 20023                           ;dans.c: 47: maze[x][y].walls[1] = 0;
 20024  010512  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20025  010516  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20026  01051A  0E00               	movlw	0
 20027  01051C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20028  01051E  0E32               	movlw	50
 20029  010520  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20030  010522  EC40  F0C4         	call	___wmul	;wreg free
 20031  010526  0E00               	movlw	low _maze
 20032  010528  0100               	movlb	0	; () banked
 20033  01052A  6F66               	movwf	??_Create_Maze& (0+255),b
 20034  01052C  0E03               	movlw	high _maze
 20035  01052E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20036  010530  5160               	movf	?___wmul& (0+255),w,b
 20037  010532  2766               	addwf	??_Create_Maze& (0+255),f,b
 20038  010534  5161               	movf	(?___wmul+1)& (0+255),w,b
 20039  010536  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20040  010538  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20041  01053C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20042  010540  0E00               	movlw	0
 20043  010542  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20044  010544  0E0A               	movlw	10
 20045  010546  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20046  010548  EC40  F0C4         	call	___wmul	;wreg free
 20047  01054C  0100               	movlb	0	; () banked
 20048  01054E  5160               	movf	?___wmul& (0+255),w,b
 20049  010550  2766               	addwf	??_Create_Maze& (0+255),f,b
 20050  010552  5161               	movf	(?___wmul+1)& (0+255),w,b
 20051  010554  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20052  010556  0E05               	movlw	5
 20053  010558  2566               	addwf	??_Create_Maze& (0+255),w,b
 20054  01055A  6ED9               	movwf	fsr2l,c
 20055  01055C  0E00               	movlw	0
 20056  01055E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20057  010560  6EDA               	movwf	fsr2h,c
 20058  010562  0E00               	movlw	0
 20059  010564  6EDF               	movwf	indf2,c
 20060                           
 20061                           ; BSR set to: 0
 20062                           ;dans.c: 48: maze[x][y].walls[2] = 0;
 20063  010566  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20064  01056A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20065  01056E  0E00               	movlw	0
 20066  010570  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20067  010572  0E32               	movlw	50
 20068  010574  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20069  010576  EC40  F0C4         	call	___wmul	;wreg free
 20070  01057A  0E00               	movlw	low _maze
 20071  01057C  0100               	movlb	0	; () banked
 20072  01057E  6F66               	movwf	??_Create_Maze& (0+255),b
 20073  010580  0E03               	movlw	high _maze
 20074  010582  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20075  010584  5160               	movf	?___wmul& (0+255),w,b
 20076  010586  2766               	addwf	??_Create_Maze& (0+255),f,b
 20077  010588  5161               	movf	(?___wmul+1)& (0+255),w,b
 20078  01058A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20079  01058C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20080  010590  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20081  010594  0E00               	movlw	0
 20082  010596  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20083  010598  0E0A               	movlw	10
 20084  01059A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20085  01059C  EC40  F0C4         	call	___wmul	;wreg free
 20086  0105A0  0100               	movlb	0	; () banked
 20087  0105A2  5160               	movf	?___wmul& (0+255),w,b
 20088  0105A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20089  0105A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20090  0105A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20091  0105AA  0E06               	movlw	6
 20092  0105AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20093  0105AE  6ED9               	movwf	fsr2l,c
 20094  0105B0  0E00               	movlw	0
 20095  0105B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20096  0105B4  6EDA               	movwf	fsr2h,c
 20097  0105B6  0E00               	movlw	0
 20098  0105B8  6EDF               	movwf	indf2,c
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;dans.c: 49: maze[x][y].walls[3] = 0;
 20102  0105BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20103  0105BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20104  0105C2  0E00               	movlw	0
 20105  0105C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20106  0105C6  0E32               	movlw	50
 20107  0105C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20108  0105CA  EC40  F0C4         	call	___wmul	;wreg free
 20109  0105CE  0E00               	movlw	low _maze
 20110  0105D0  0100               	movlb	0	; () banked
 20111  0105D2  6F66               	movwf	??_Create_Maze& (0+255),b
 20112  0105D4  0E03               	movlw	high _maze
 20113  0105D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20114  0105D8  5160               	movf	?___wmul& (0+255),w,b
 20115  0105DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20116  0105DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20117  0105DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20118  0105E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20119  0105E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20120  0105E8  0E00               	movlw	0
 20121  0105EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20122  0105EC  0E0A               	movlw	10
 20123  0105EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20124  0105F0  EC40  F0C4         	call	___wmul	;wreg free
 20125  0105F4  0100               	movlb	0	; () banked
 20126  0105F6  5160               	movf	?___wmul& (0+255),w,b
 20127  0105F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20128  0105FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20129  0105FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20130  0105FE  0E07               	movlw	7
 20131  010600  2566               	addwf	??_Create_Maze& (0+255),w,b
 20132  010602  6ED9               	movwf	fsr2l,c
 20133  010604  0E00               	movlw	0
 20134  010606  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20135  010608  6EDA               	movwf	fsr2h,c
 20136  01060A  0E00               	movlw	0
 20137  01060C  6EDF               	movwf	indf2,c
 20138                           
 20139                           ; BSR set to: 0
 20140                           ;dans.c: 50: maze[x][y].Options = 3;
 20141  01060E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20142  010612  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20143  010616  0E00               	movlw	0
 20144  010618  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20145  01061A  0E32               	movlw	50
 20146  01061C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20147  01061E  EC40  F0C4         	call	___wmul	;wreg free
 20148  010622  0E00               	movlw	low _maze
 20149  010624  0100               	movlb	0	; () banked
 20150  010626  6F66               	movwf	??_Create_Maze& (0+255),b
 20151  010628  0E03               	movlw	high _maze
 20152  01062A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20153  01062C  5160               	movf	?___wmul& (0+255),w,b
 20154  01062E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20155  010630  5161               	movf	(?___wmul+1)& (0+255),w,b
 20156  010632  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20157  010634  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20158  010638  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20159  01063C  0E00               	movlw	0
 20160  01063E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20161  010640  0E0A               	movlw	10
 20162  010642  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20163  010644  EC40  F0C4         	call	___wmul	;wreg free
 20164  010648  0100               	movlb	0	; () banked
 20165  01064A  5160               	movf	?___wmul& (0+255),w,b
 20166  01064C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20167  01064E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20168  010650  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20169  010652  0E08               	movlw	8
 20170  010654  2566               	addwf	??_Create_Maze& (0+255),w,b
 20171  010656  6ED9               	movwf	fsr2l,c
 20172  010658  0E00               	movlw	0
 20173  01065A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20174  01065C  6EDA               	movwf	fsr2h,c
 20175  01065E  0E03               	movlw	3
 20176  010660  6EDE               	movwf	postinc2,c
 20177  010662  0E00               	movlw	0
 20178  010664  6EDD               	movwf	postdec2,c
 20179                           
 20180                           ; BSR set to: 0
 20181                           ;dans.c: 52: ++y;
 20182  010666  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20183  010668  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;dans.c: 53: maze[x][y].walls[0] = 1;
 20187  01066A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20188  01066E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20189  010672  0E00               	movlw	0
 20190  010674  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20191  010676  0E32               	movlw	50
 20192  010678  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20193  01067A  EC40  F0C4         	call	___wmul	;wreg free
 20194  01067E  0E00               	movlw	low _maze
 20195  010680  0100               	movlb	0	; () banked
 20196  010682  6F66               	movwf	??_Create_Maze& (0+255),b
 20197  010684  0E03               	movlw	high _maze
 20198  010686  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20199  010688  5160               	movf	?___wmul& (0+255),w,b
 20200  01068A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20201  01068C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20202  01068E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20203  010690  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20204  010694  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20205  010698  0E00               	movlw	0
 20206  01069A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20207  01069C  0E0A               	movlw	10
 20208  01069E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20209  0106A0  EC40  F0C4         	call	___wmul	;wreg free
 20210  0106A4  0100               	movlb	0	; () banked
 20211  0106A6  5160               	movf	?___wmul& (0+255),w,b
 20212  0106A8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20213  0106AA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20214  0106AC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20215  0106AE  0E04               	movlw	4
 20216  0106B0  2566               	addwf	??_Create_Maze& (0+255),w,b
 20217  0106B2  6ED9               	movwf	fsr2l,c
 20218  0106B4  0E00               	movlw	0
 20219  0106B6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20220  0106B8  6EDA               	movwf	fsr2h,c
 20221  0106BA  0E01               	movlw	1
 20222  0106BC  6EDF               	movwf	indf2,c
 20223                           
 20224                           ; BSR set to: 0
 20225                           ;dans.c: 54: maze[x][y].walls[1] = 1;
 20226  0106BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20227  0106C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20228  0106C6  0E00               	movlw	0
 20229  0106C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20230  0106CA  0E32               	movlw	50
 20231  0106CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20232  0106CE  EC40  F0C4         	call	___wmul	;wreg free
 20233  0106D2  0E00               	movlw	low _maze
 20234  0106D4  0100               	movlb	0	; () banked
 20235  0106D6  6F66               	movwf	??_Create_Maze& (0+255),b
 20236  0106D8  0E03               	movlw	high _maze
 20237  0106DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20238  0106DC  5160               	movf	?___wmul& (0+255),w,b
 20239  0106DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 20240  0106E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 20241  0106E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20242  0106E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20243  0106E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20244  0106EC  0E00               	movlw	0
 20245  0106EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20246  0106F0  0E0A               	movlw	10
 20247  0106F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20248  0106F4  EC40  F0C4         	call	___wmul	;wreg free
 20249  0106F8  0100               	movlb	0	; () banked
 20250  0106FA  5160               	movf	?___wmul& (0+255),w,b
 20251  0106FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 20252  0106FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 20253  010700  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20254  010702  0E05               	movlw	5
 20255  010704  2566               	addwf	??_Create_Maze& (0+255),w,b
 20256  010706  6ED9               	movwf	fsr2l,c
 20257  010708  0E00               	movlw	0
 20258  01070A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20259  01070C  6EDA               	movwf	fsr2h,c
 20260  01070E  0E01               	movlw	1
 20261  010710  6EDF               	movwf	indf2,c
 20262                           
 20263                           ; BSR set to: 0
 20264                           ;dans.c: 55: maze[x][y].walls[2] = 0;
 20265  010712  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20266  010716  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20267  01071A  0E00               	movlw	0
 20268  01071C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20269  01071E  0E32               	movlw	50
 20270  010720  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20271  010722  EC40  F0C4         	call	___wmul	;wreg free
 20272  010726  0E00               	movlw	low _maze
 20273  010728  0100               	movlb	0	; () banked
 20274  01072A  6F66               	movwf	??_Create_Maze& (0+255),b
 20275  01072C  0E03               	movlw	high _maze
 20276  01072E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20277  010730  5160               	movf	?___wmul& (0+255),w,b
 20278  010732  2766               	addwf	??_Create_Maze& (0+255),f,b
 20279  010734  5161               	movf	(?___wmul+1)& (0+255),w,b
 20280  010736  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20281  010738  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20282  01073C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20283  010740  0E00               	movlw	0
 20284  010742  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20285  010744  0E0A               	movlw	10
 20286  010746  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20287  010748  EC40  F0C4         	call	___wmul	;wreg free
 20288  01074C  0100               	movlb	0	; () banked
 20289  01074E  5160               	movf	?___wmul& (0+255),w,b
 20290  010750  2766               	addwf	??_Create_Maze& (0+255),f,b
 20291  010752  5161               	movf	(?___wmul+1)& (0+255),w,b
 20292  010754  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20293  010756  0E06               	movlw	6
 20294  010758  2566               	addwf	??_Create_Maze& (0+255),w,b
 20295  01075A  6ED9               	movwf	fsr2l,c
 20296  01075C  0E00               	movlw	0
 20297  01075E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20298  010760  6EDA               	movwf	fsr2h,c
 20299  010762  0E00               	movlw	0
 20300  010764  6EDF               	movwf	indf2,c
 20301                           
 20302                           ; BSR set to: 0
 20303                           ;dans.c: 56: maze[x][y].walls[3] = 0;
 20304  010766  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20305  01076A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20306  01076E  0E00               	movlw	0
 20307  010770  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20308  010772  0E32               	movlw	50
 20309  010774  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20310  010776  EC40  F0C4         	call	___wmul	;wreg free
 20311  01077A  0E00               	movlw	low _maze
 20312  01077C  0100               	movlb	0	; () banked
 20313  01077E  6F66               	movwf	??_Create_Maze& (0+255),b
 20314  010780  0E03               	movlw	high _maze
 20315  010782  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20316  010784  5160               	movf	?___wmul& (0+255),w,b
 20317  010786  2766               	addwf	??_Create_Maze& (0+255),f,b
 20318  010788  5161               	movf	(?___wmul+1)& (0+255),w,b
 20319  01078A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20320  01078C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20321  010790  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20322  010794  0E00               	movlw	0
 20323  010796  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20324  010798  0E0A               	movlw	10
 20325  01079A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20326  01079C  EC40  F0C4         	call	___wmul	;wreg free
 20327  0107A0  0100               	movlb	0	; () banked
 20328  0107A2  5160               	movf	?___wmul& (0+255),w,b
 20329  0107A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20330  0107A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20331  0107A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20332  0107AA  0E07               	movlw	7
 20333  0107AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20334  0107AE  6ED9               	movwf	fsr2l,c
 20335  0107B0  0E00               	movlw	0
 20336  0107B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20337  0107B4  6EDA               	movwf	fsr2h,c
 20338  0107B6  0E00               	movlw	0
 20339  0107B8  6EDF               	movwf	indf2,c
 20340                           
 20341                           ; BSR set to: 0
 20342                           ;dans.c: 57: maze[x][y].Options = 2;
 20343  0107BA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20344  0107BE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20345  0107C2  0E00               	movlw	0
 20346  0107C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20347  0107C6  0E32               	movlw	50
 20348  0107C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20349  0107CA  EC40  F0C4         	call	___wmul	;wreg free
 20350  0107CE  0E00               	movlw	low _maze
 20351  0107D0  0100               	movlb	0	; () banked
 20352  0107D2  6F66               	movwf	??_Create_Maze& (0+255),b
 20353  0107D4  0E03               	movlw	high _maze
 20354  0107D6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20355  0107D8  5160               	movf	?___wmul& (0+255),w,b
 20356  0107DA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20357  0107DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20358  0107DE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20359  0107E0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20360  0107E4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20361  0107E8  0E00               	movlw	0
 20362  0107EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20363  0107EC  0E0A               	movlw	10
 20364  0107EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20365  0107F0  EC40  F0C4         	call	___wmul	;wreg free
 20366  0107F4  0100               	movlb	0	; () banked
 20367  0107F6  5160               	movf	?___wmul& (0+255),w,b
 20368  0107F8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20369  0107FA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20370  0107FC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20371  0107FE  0E08               	movlw	8
 20372  010800  2566               	addwf	??_Create_Maze& (0+255),w,b
 20373  010802  6ED9               	movwf	fsr2l,c
 20374  010804  0E00               	movlw	0
 20375  010806  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20376  010808  6EDA               	movwf	fsr2h,c
 20377  01080A  0E02               	movlw	2
 20378  01080C  6EDE               	movwf	postinc2,c
 20379  01080E  0E00               	movlw	0
 20380  010810  6EDD               	movwf	postdec2,c
 20381                           
 20382                           ; BSR set to: 0
 20383                           ;dans.c: 59: ++y;
 20384  010812  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20385  010814  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20386                           
 20387                           ; BSR set to: 0
 20388                           ;dans.c: 60: maze[x][y].walls[0] = 1;
 20389  010816  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20390  01081A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20391  01081E  0E00               	movlw	0
 20392  010820  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20393  010822  0E32               	movlw	50
 20394  010824  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20395  010826  EC40  F0C4         	call	___wmul	;wreg free
 20396  01082A  0E00               	movlw	low _maze
 20397  01082C  0100               	movlb	0	; () banked
 20398  01082E  6F66               	movwf	??_Create_Maze& (0+255),b
 20399  010830  0E03               	movlw	high _maze
 20400  010832  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20401  010834  5160               	movf	?___wmul& (0+255),w,b
 20402  010836  2766               	addwf	??_Create_Maze& (0+255),f,b
 20403  010838  5161               	movf	(?___wmul+1)& (0+255),w,b
 20404  01083A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20405  01083C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20406  010840  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20407  010844  0E00               	movlw	0
 20408  010846  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20409  010848  0E0A               	movlw	10
 20410  01084A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20411  01084C  EC40  F0C4         	call	___wmul	;wreg free
 20412  010850  0100               	movlb	0	; () banked
 20413  010852  5160               	movf	?___wmul& (0+255),w,b
 20414  010854  2766               	addwf	??_Create_Maze& (0+255),f,b
 20415  010856  5161               	movf	(?___wmul+1)& (0+255),w,b
 20416  010858  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20417  01085A  0E04               	movlw	4
 20418  01085C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20419  01085E  6ED9               	movwf	fsr2l,c
 20420  010860  0E00               	movlw	0
 20421  010862  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20422  010864  6EDA               	movwf	fsr2h,c
 20423  010866  0E01               	movlw	1
 20424  010868  6EDF               	movwf	indf2,c
 20425                           
 20426                           ; BSR set to: 0
 20427                           ;dans.c: 61: maze[x][y].walls[1] = 1;
 20428  01086A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20429  01086E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20430  010872  0E00               	movlw	0
 20431  010874  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20432  010876  0E32               	movlw	50
 20433  010878  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20434  01087A  EC40  F0C4         	call	___wmul	;wreg free
 20435  01087E  0E00               	movlw	low _maze
 20436  010880  0100               	movlb	0	; () banked
 20437  010882  6F66               	movwf	??_Create_Maze& (0+255),b
 20438  010884  0E03               	movlw	high _maze
 20439  010886  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20440  010888  5160               	movf	?___wmul& (0+255),w,b
 20441  01088A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20442  01088C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20443  01088E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20444  010890  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20445  010894  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20446  010898  0E00               	movlw	0
 20447  01089A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20448  01089C  0E0A               	movlw	10
 20449  01089E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20450  0108A0  EC40  F0C4         	call	___wmul	;wreg free
 20451  0108A4  0100               	movlb	0	; () banked
 20452  0108A6  5160               	movf	?___wmul& (0+255),w,b
 20453  0108A8  2766               	addwf	??_Create_Maze& (0+255),f,b
 20454  0108AA  5161               	movf	(?___wmul+1)& (0+255),w,b
 20455  0108AC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20456  0108AE  0E05               	movlw	5
 20457  0108B0  2566               	addwf	??_Create_Maze& (0+255),w,b
 20458  0108B2  6ED9               	movwf	fsr2l,c
 20459  0108B4  0E00               	movlw	0
 20460  0108B6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20461  0108B8  6EDA               	movwf	fsr2h,c
 20462  0108BA  0E01               	movlw	1
 20463  0108BC  6EDF               	movwf	indf2,c
 20464                           
 20465                           ; BSR set to: 0
 20466                           ;dans.c: 62: maze[x][y].walls[2] = 0;
 20467  0108BE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20468  0108C2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20469  0108C6  0E00               	movlw	0
 20470  0108C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20471  0108CA  0E32               	movlw	50
 20472  0108CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20473  0108CE  EC40  F0C4         	call	___wmul	;wreg free
 20474  0108D2  0E00               	movlw	low _maze
 20475  0108D4  0100               	movlb	0	; () banked
 20476  0108D6  6F66               	movwf	??_Create_Maze& (0+255),b
 20477  0108D8  0E03               	movlw	high _maze
 20478  0108DA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20479  0108DC  5160               	movf	?___wmul& (0+255),w,b
 20480  0108DE  2766               	addwf	??_Create_Maze& (0+255),f,b
 20481  0108E0  5161               	movf	(?___wmul+1)& (0+255),w,b
 20482  0108E2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20483  0108E4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20484  0108E8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20485  0108EC  0E00               	movlw	0
 20486  0108EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20487  0108F0  0E0A               	movlw	10
 20488  0108F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20489  0108F4  EC40  F0C4         	call	___wmul	;wreg free
 20490  0108F8  0100               	movlb	0	; () banked
 20491  0108FA  5160               	movf	?___wmul& (0+255),w,b
 20492  0108FC  2766               	addwf	??_Create_Maze& (0+255),f,b
 20493  0108FE  5161               	movf	(?___wmul+1)& (0+255),w,b
 20494  010900  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20495  010902  0E06               	movlw	6
 20496  010904  2566               	addwf	??_Create_Maze& (0+255),w,b
 20497  010906  6ED9               	movwf	fsr2l,c
 20498  010908  0E00               	movlw	0
 20499  01090A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20500  01090C  6EDA               	movwf	fsr2h,c
 20501  01090E  0E00               	movlw	0
 20502  010910  6EDF               	movwf	indf2,c
 20503                           
 20504                           ; BSR set to: 0
 20505                           ;dans.c: 63: maze[x][y].walls[3] = 1;
 20506  010912  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20507  010916  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20508  01091A  0E00               	movlw	0
 20509  01091C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20510  01091E  0E32               	movlw	50
 20511  010920  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20512  010922  EC40  F0C4         	call	___wmul	;wreg free
 20513  010926  0E00               	movlw	low _maze
 20514  010928  0100               	movlb	0	; () banked
 20515  01092A  6F66               	movwf	??_Create_Maze& (0+255),b
 20516  01092C  0E03               	movlw	high _maze
 20517  01092E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20518  010930  5160               	movf	?___wmul& (0+255),w,b
 20519  010932  2766               	addwf	??_Create_Maze& (0+255),f,b
 20520  010934  5161               	movf	(?___wmul+1)& (0+255),w,b
 20521  010936  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20522  010938  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20523  01093C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20524  010940  0E00               	movlw	0
 20525  010942  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20526  010944  0E0A               	movlw	10
 20527  010946  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20528  010948  EC40  F0C4         	call	___wmul	;wreg free
 20529  01094C  0100               	movlb	0	; () banked
 20530  01094E  5160               	movf	?___wmul& (0+255),w,b
 20531  010950  2766               	addwf	??_Create_Maze& (0+255),f,b
 20532  010952  5161               	movf	(?___wmul+1)& (0+255),w,b
 20533  010954  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20534  010956  0E07               	movlw	7
 20535  010958  2566               	addwf	??_Create_Maze& (0+255),w,b
 20536  01095A  6ED9               	movwf	fsr2l,c
 20537  01095C  0E00               	movlw	0
 20538  01095E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20539  010960  6EDA               	movwf	fsr2h,c
 20540  010962  0E01               	movlw	1
 20541  010964  6EDF               	movwf	indf2,c
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;dans.c: 64: maze[x][y].Options = 1;
 20545  010966  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20546  01096A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20547  01096E  0E00               	movlw	0
 20548  010970  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20549  010972  0E32               	movlw	50
 20550  010974  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20551  010976  EC40  F0C4         	call	___wmul	;wreg free
 20552  01097A  0E00               	movlw	low _maze
 20553  01097C  0100               	movlb	0	; () banked
 20554  01097E  6F66               	movwf	??_Create_Maze& (0+255),b
 20555  010980  0E03               	movlw	high _maze
 20556  010982  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20557  010984  5160               	movf	?___wmul& (0+255),w,b
 20558  010986  2766               	addwf	??_Create_Maze& (0+255),f,b
 20559  010988  5161               	movf	(?___wmul+1)& (0+255),w,b
 20560  01098A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20561  01098C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20562  010990  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20563  010994  0E00               	movlw	0
 20564  010996  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20565  010998  0E0A               	movlw	10
 20566  01099A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20567  01099C  EC40  F0C4         	call	___wmul	;wreg free
 20568  0109A0  0100               	movlb	0	; () banked
 20569  0109A2  5160               	movf	?___wmul& (0+255),w,b
 20570  0109A4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20571  0109A6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20572  0109A8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20573  0109AA  0E08               	movlw	8
 20574  0109AC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20575  0109AE  6ED9               	movwf	fsr2l,c
 20576  0109B0  0E00               	movlw	0
 20577  0109B2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20578  0109B4  6EDA               	movwf	fsr2h,c
 20579  0109B6  0E01               	movlw	1
 20580  0109B8  6EDE               	movwf	postinc2,c
 20581  0109BA  0E00               	movlw	0
 20582  0109BC  6EDD               	movwf	postdec2,c
 20583                           
 20584                           ; BSR set to: 0
 20585                           ;dans.c: 66: ++x;
 20586  0109BE  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 20587  0109C0  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 20588                           
 20589                           ; BSR set to: 0
 20590                           ;dans.c: 67: y=0;
 20591  0109C2  0E00               	movlw	0
 20592  0109C4  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 20593  0109C6  0E00               	movlw	0
 20594  0109C8  6F6E               	movwf	Create_Maze@y& (0+255),b
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;dans.c: 68: maze[x][y].walls[0] = 0;
 20598  0109CA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20599  0109CE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20600  0109D2  0E00               	movlw	0
 20601  0109D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20602  0109D6  0E32               	movlw	50
 20603  0109D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20604  0109DA  EC40  F0C4         	call	___wmul	;wreg free
 20605  0109DE  0E00               	movlw	low _maze
 20606  0109E0  0100               	movlb	0	; () banked
 20607  0109E2  6F66               	movwf	??_Create_Maze& (0+255),b
 20608  0109E4  0E03               	movlw	high _maze
 20609  0109E6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20610  0109E8  5160               	movf	?___wmul& (0+255),w,b
 20611  0109EA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20612  0109EC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20613  0109EE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20614  0109F0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20615  0109F4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20616  0109F8  0E00               	movlw	0
 20617  0109FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20618  0109FC  0E0A               	movlw	10
 20619  0109FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20620  010A00  EC40  F0C4         	call	___wmul	;wreg free
 20621  010A04  0100               	movlb	0	; () banked
 20622  010A06  5160               	movf	?___wmul& (0+255),w,b
 20623  010A08  2766               	addwf	??_Create_Maze& (0+255),f,b
 20624  010A0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20625  010A0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20626  010A0E  0E04               	movlw	4
 20627  010A10  2566               	addwf	??_Create_Maze& (0+255),w,b
 20628  010A12  6ED9               	movwf	fsr2l,c
 20629  010A14  0E00               	movlw	0
 20630  010A16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20631  010A18  6EDA               	movwf	fsr2h,c
 20632  010A1A  0E00               	movlw	0
 20633  010A1C  6EDF               	movwf	indf2,c
 20634                           
 20635                           ; BSR set to: 0
 20636                           ;dans.c: 69: maze[x][y].walls[1] = 0;
 20637  010A1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20638  010A22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20639  010A26  0E00               	movlw	0
 20640  010A28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20641  010A2A  0E32               	movlw	50
 20642  010A2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20643  010A2E  EC40  F0C4         	call	___wmul	;wreg free
 20644  010A32  0E00               	movlw	low _maze
 20645  010A34  0100               	movlb	0	; () banked
 20646  010A36  6F66               	movwf	??_Create_Maze& (0+255),b
 20647  010A38  0E03               	movlw	high _maze
 20648  010A3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20649  010A3C  5160               	movf	?___wmul& (0+255),w,b
 20650  010A3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20651  010A40  5161               	movf	(?___wmul+1)& (0+255),w,b
 20652  010A42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20653  010A44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20654  010A48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20655  010A4C  0E00               	movlw	0
 20656  010A4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20657  010A50  0E0A               	movlw	10
 20658  010A52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20659  010A54  EC40  F0C4         	call	___wmul	;wreg free
 20660  010A58  0100               	movlb	0	; () banked
 20661  010A5A  5160               	movf	?___wmul& (0+255),w,b
 20662  010A5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20663  010A5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20664  010A60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20665  010A62  0E05               	movlw	5
 20666  010A64  2566               	addwf	??_Create_Maze& (0+255),w,b
 20667  010A66  6ED9               	movwf	fsr2l,c
 20668  010A68  0E00               	movlw	0
 20669  010A6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20670  010A6C  6EDA               	movwf	fsr2h,c
 20671  010A6E  0E00               	movlw	0
 20672  010A70  6EDF               	movwf	indf2,c
 20673                           
 20674                           ; BSR set to: 0
 20675                           ;dans.c: 70: maze[x][y].walls[2] = 0;
 20676  010A72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20677  010A76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20678  010A7A  0E00               	movlw	0
 20679  010A7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20680  010A7E  0E32               	movlw	50
 20681  010A80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20682  010A82  EC40  F0C4         	call	___wmul	;wreg free
 20683  010A86  0E00               	movlw	low _maze
 20684  010A88  0100               	movlb	0	; () banked
 20685  010A8A  6F66               	movwf	??_Create_Maze& (0+255),b
 20686  010A8C  0E03               	movlw	high _maze
 20687  010A8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20688  010A90  5160               	movf	?___wmul& (0+255),w,b
 20689  010A92  2766               	addwf	??_Create_Maze& (0+255),f,b
 20690  010A94  5161               	movf	(?___wmul+1)& (0+255),w,b
 20691  010A96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20692  010A98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20693  010A9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20694  010AA0  0E00               	movlw	0
 20695  010AA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20696  010AA4  0E0A               	movlw	10
 20697  010AA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20698  010AA8  EC40  F0C4         	call	___wmul	;wreg free
 20699  010AAC  0100               	movlb	0	; () banked
 20700  010AAE  5160               	movf	?___wmul& (0+255),w,b
 20701  010AB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 20702  010AB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 20703  010AB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20704  010AB6  0E06               	movlw	6
 20705  010AB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 20706  010ABA  6ED9               	movwf	fsr2l,c
 20707  010ABC  0E00               	movlw	0
 20708  010ABE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20709  010AC0  6EDA               	movwf	fsr2h,c
 20710  010AC2  0E00               	movlw	0
 20711  010AC4  6EDF               	movwf	indf2,c
 20712                           
 20713                           ; BSR set to: 0
 20714                           ;dans.c: 71: maze[x][y].walls[3] = 1;
 20715  010AC6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20716  010ACA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20717  010ACE  0E00               	movlw	0
 20718  010AD0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20719  010AD2  0E32               	movlw	50
 20720  010AD4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20721  010AD6  EC40  F0C4         	call	___wmul	;wreg free
 20722  010ADA  0E00               	movlw	low _maze
 20723  010ADC  0100               	movlb	0	; () banked
 20724  010ADE  6F66               	movwf	??_Create_Maze& (0+255),b
 20725  010AE0  0E03               	movlw	high _maze
 20726  010AE2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20727  010AE4  5160               	movf	?___wmul& (0+255),w,b
 20728  010AE6  2766               	addwf	??_Create_Maze& (0+255),f,b
 20729  010AE8  5161               	movf	(?___wmul+1)& (0+255),w,b
 20730  010AEA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20731  010AEC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20732  010AF0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20733  010AF4  0E00               	movlw	0
 20734  010AF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20735  010AF8  0E0A               	movlw	10
 20736  010AFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20737  010AFC  EC40  F0C4         	call	___wmul	;wreg free
 20738  010B00  0100               	movlb	0	; () banked
 20739  010B02  5160               	movf	?___wmul& (0+255),w,b
 20740  010B04  2766               	addwf	??_Create_Maze& (0+255),f,b
 20741  010B06  5161               	movf	(?___wmul+1)& (0+255),w,b
 20742  010B08  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20743  010B0A  0E07               	movlw	7
 20744  010B0C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20745  010B0E  6ED9               	movwf	fsr2l,c
 20746  010B10  0E00               	movlw	0
 20747  010B12  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20748  010B14  6EDA               	movwf	fsr2h,c
 20749  010B16  0E01               	movlw	1
 20750  010B18  6EDF               	movwf	indf2,c
 20751                           
 20752                           ; BSR set to: 0
 20753                           ;dans.c: 72: maze[x][y].Options = 3;
 20754  010B1A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20755  010B1E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20756  010B22  0E00               	movlw	0
 20757  010B24  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20758  010B26  0E32               	movlw	50
 20759  010B28  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20760  010B2A  EC40  F0C4         	call	___wmul	;wreg free
 20761  010B2E  0E00               	movlw	low _maze
 20762  010B30  0100               	movlb	0	; () banked
 20763  010B32  6F66               	movwf	??_Create_Maze& (0+255),b
 20764  010B34  0E03               	movlw	high _maze
 20765  010B36  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20766  010B38  5160               	movf	?___wmul& (0+255),w,b
 20767  010B3A  2766               	addwf	??_Create_Maze& (0+255),f,b
 20768  010B3C  5161               	movf	(?___wmul+1)& (0+255),w,b
 20769  010B3E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20770  010B40  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20771  010B44  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20772  010B48  0E00               	movlw	0
 20773  010B4A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20774  010B4C  0E0A               	movlw	10
 20775  010B4E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20776  010B50  EC40  F0C4         	call	___wmul	;wreg free
 20777  010B54  0100               	movlb	0	; () banked
 20778  010B56  5160               	movf	?___wmul& (0+255),w,b
 20779  010B58  2766               	addwf	??_Create_Maze& (0+255),f,b
 20780  010B5A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20781  010B5C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20782  010B5E  0E08               	movlw	8
 20783  010B60  2566               	addwf	??_Create_Maze& (0+255),w,b
 20784  010B62  6ED9               	movwf	fsr2l,c
 20785  010B64  0E00               	movlw	0
 20786  010B66  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20787  010B68  6EDA               	movwf	fsr2h,c
 20788  010B6A  0E03               	movlw	3
 20789  010B6C  6EDE               	movwf	postinc2,c
 20790  010B6E  0E00               	movlw	0
 20791  010B70  6EDD               	movwf	postdec2,c
 20792                           
 20793                           ;dans.c: 74: ++y;
 20794  010B72  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20795  010B74  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20796                           
 20797                           ; BSR set to: 0
 20798                           ;dans.c: 75: maze[x][y].walls[0] = 1;
 20799  010B76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20800  010B7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20801  010B7E  0E00               	movlw	0
 20802  010B80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20803  010B82  0E32               	movlw	50
 20804  010B84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20805  010B86  EC40  F0C4         	call	___wmul	;wreg free
 20806  010B8A  0E00               	movlw	low _maze
 20807  010B8C  0100               	movlb	0	; () banked
 20808  010B8E  6F66               	movwf	??_Create_Maze& (0+255),b
 20809  010B90  0E03               	movlw	high _maze
 20810  010B92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20811  010B94  5160               	movf	?___wmul& (0+255),w,b
 20812  010B96  2766               	addwf	??_Create_Maze& (0+255),f,b
 20813  010B98  5161               	movf	(?___wmul+1)& (0+255),w,b
 20814  010B9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20815  010B9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20816  010BA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20817  010BA4  0E00               	movlw	0
 20818  010BA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20819  010BA8  0E0A               	movlw	10
 20820  010BAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20821  010BAC  EC40  F0C4         	call	___wmul	;wreg free
 20822  010BB0  0100               	movlb	0	; () banked
 20823  010BB2  5160               	movf	?___wmul& (0+255),w,b
 20824  010BB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 20825  010BB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 20826  010BB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20827  010BBA  0E04               	movlw	4
 20828  010BBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 20829  010BBE  6ED9               	movwf	fsr2l,c
 20830  010BC0  0E00               	movlw	0
 20831  010BC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20832  010BC4  6EDA               	movwf	fsr2h,c
 20833  010BC6  0E01               	movlw	1
 20834  010BC8  6EDF               	movwf	indf2,c
 20835                           
 20836                           ; BSR set to: 0
 20837                           ;dans.c: 76: maze[x][y].walls[1] = 1;
 20838  010BCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20839  010BCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20840  010BD2  0E00               	movlw	0
 20841  010BD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20842  010BD6  0E32               	movlw	50
 20843  010BD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20844  010BDA  EC40  F0C4         	call	___wmul	;wreg free
 20845  010BDE  0E00               	movlw	low _maze
 20846  010BE0  0100               	movlb	0	; () banked
 20847  010BE2  6F66               	movwf	??_Create_Maze& (0+255),b
 20848  010BE4  0E03               	movlw	high _maze
 20849  010BE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20850  010BE8  5160               	movf	?___wmul& (0+255),w,b
 20851  010BEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 20852  010BEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 20853  010BEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20854  010BF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20855  010BF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20856  010BF8  0E00               	movlw	0
 20857  010BFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20858  010BFC  0E0A               	movlw	10
 20859  010BFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20860  010C00  EC40  F0C4         	call	___wmul	;wreg free
 20861  010C04  0100               	movlb	0	; () banked
 20862  010C06  5160               	movf	?___wmul& (0+255),w,b
 20863  010C08  2766               	addwf	??_Create_Maze& (0+255),f,b
 20864  010C0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 20865  010C0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20866  010C0E  0E05               	movlw	5
 20867  010C10  2566               	addwf	??_Create_Maze& (0+255),w,b
 20868  010C12  6ED9               	movwf	fsr2l,c
 20869  010C14  0E00               	movlw	0
 20870  010C16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20871  010C18  6EDA               	movwf	fsr2h,c
 20872  010C1A  0E01               	movlw	1
 20873  010C1C  6EDF               	movwf	indf2,c
 20874                           
 20875                           ; BSR set to: 0
 20876                           ;dans.c: 77: maze[x][y].walls[2] = 1;
 20877  010C1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20878  010C22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20879  010C26  0E00               	movlw	0
 20880  010C28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20881  010C2A  0E32               	movlw	50
 20882  010C2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20883  010C2E  EC40  F0C4         	call	___wmul	;wreg free
 20884  010C32  0E00               	movlw	low _maze
 20885  010C34  0100               	movlb	0	; () banked
 20886  010C36  6F66               	movwf	??_Create_Maze& (0+255),b
 20887  010C38  0E03               	movlw	high _maze
 20888  010C3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20889  010C3C  5160               	movf	?___wmul& (0+255),w,b
 20890  010C3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 20891  010C40  5161               	movf	(?___wmul+1)& (0+255),w,b
 20892  010C42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20893  010C44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20894  010C48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20895  010C4C  0E00               	movlw	0
 20896  010C4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20897  010C50  0E0A               	movlw	10
 20898  010C52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20899  010C54  EC40  F0C4         	call	___wmul	;wreg free
 20900  010C58  0100               	movlb	0	; () banked
 20901  010C5A  5160               	movf	?___wmul& (0+255),w,b
 20902  010C5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 20903  010C5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 20904  010C60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20905  010C62  0E06               	movlw	6
 20906  010C64  2566               	addwf	??_Create_Maze& (0+255),w,b
 20907  010C66  6ED9               	movwf	fsr2l,c
 20908  010C68  0E00               	movlw	0
 20909  010C6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20910  010C6C  6EDA               	movwf	fsr2h,c
 20911  010C6E  0E01               	movlw	1
 20912  010C70  6EDF               	movwf	indf2,c
 20913                           
 20914                           ; BSR set to: 0
 20915                           ;dans.c: 78: maze[x][y].walls[3] = 0;
 20916  010C72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20917  010C76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20918  010C7A  0E00               	movlw	0
 20919  010C7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20920  010C7E  0E32               	movlw	50
 20921  010C80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20922  010C82  EC40  F0C4         	call	___wmul	;wreg free
 20923  010C86  0E00               	movlw	low _maze
 20924  010C88  0100               	movlb	0	; () banked
 20925  010C8A  6F66               	movwf	??_Create_Maze& (0+255),b
 20926  010C8C  0E03               	movlw	high _maze
 20927  010C8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20928  010C90  5160               	movf	?___wmul& (0+255),w,b
 20929  010C92  2766               	addwf	??_Create_Maze& (0+255),f,b
 20930  010C94  5161               	movf	(?___wmul+1)& (0+255),w,b
 20931  010C96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20932  010C98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20933  010C9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20934  010CA0  0E00               	movlw	0
 20935  010CA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20936  010CA4  0E0A               	movlw	10
 20937  010CA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20938  010CA8  EC40  F0C4         	call	___wmul	;wreg free
 20939  010CAC  0100               	movlb	0	; () banked
 20940  010CAE  5160               	movf	?___wmul& (0+255),w,b
 20941  010CB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 20942  010CB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 20943  010CB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20944  010CB6  0E07               	movlw	7
 20945  010CB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 20946  010CBA  6ED9               	movwf	fsr2l,c
 20947  010CBC  0E00               	movlw	0
 20948  010CBE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20949  010CC0  6EDA               	movwf	fsr2h,c
 20950  010CC2  0E00               	movlw	0
 20951  010CC4  6EDF               	movwf	indf2,c
 20952                           
 20953                           ; BSR set to: 0
 20954                           ;dans.c: 79: maze[x][y].Options = 1;
 20955  010CC6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 20956  010CCA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 20957  010CCE  0E00               	movlw	0
 20958  010CD0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20959  010CD2  0E32               	movlw	50
 20960  010CD4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20961  010CD6  EC40  F0C4         	call	___wmul	;wreg free
 20962  010CDA  0E00               	movlw	low _maze
 20963  010CDC  0100               	movlb	0	; () banked
 20964  010CDE  6F66               	movwf	??_Create_Maze& (0+255),b
 20965  010CE0  0E03               	movlw	high _maze
 20966  010CE2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 20967  010CE4  5160               	movf	?___wmul& (0+255),w,b
 20968  010CE6  2766               	addwf	??_Create_Maze& (0+255),f,b
 20969  010CE8  5161               	movf	(?___wmul+1)& (0+255),w,b
 20970  010CEA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20971  010CEC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 20972  010CF0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 20973  010CF4  0E00               	movlw	0
 20974  010CF6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 20975  010CF8  0E0A               	movlw	10
 20976  010CFA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 20977  010CFC  EC40  F0C4         	call	___wmul	;wreg free
 20978  010D00  0100               	movlb	0	; () banked
 20979  010D02  5160               	movf	?___wmul& (0+255),w,b
 20980  010D04  2766               	addwf	??_Create_Maze& (0+255),f,b
 20981  010D06  5161               	movf	(?___wmul+1)& (0+255),w,b
 20982  010D08  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 20983  010D0A  0E08               	movlw	8
 20984  010D0C  2566               	addwf	??_Create_Maze& (0+255),w,b
 20985  010D0E  6ED9               	movwf	fsr2l,c
 20986  010D10  0E00               	movlw	0
 20987  010D12  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 20988  010D14  6EDA               	movwf	fsr2h,c
 20989  010D16  0E01               	movlw	1
 20990  010D18  6EDE               	movwf	postinc2,c
 20991  010D1A  0E00               	movlw	0
 20992  010D1C  6EDD               	movwf	postdec2,c
 20993                           
 20994                           ; BSR set to: 0
 20995                           ;dans.c: 81: ++y;
 20996  010D1E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 20997  010D20  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 20998                           
 20999                           ;dans.c: 82: maze[x][y].walls[0] = 0;
 21000  010D22  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21001  010D26  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21002  010D2A  0E00               	movlw	0
 21003  010D2C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21004  010D2E  0E32               	movlw	50
 21005  010D30  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21006  010D32  EC40  F0C4         	call	___wmul	;wreg free
 21007  010D36  0E00               	movlw	low _maze
 21008  010D38  0100               	movlb	0	; () banked
 21009  010D3A  6F66               	movwf	??_Create_Maze& (0+255),b
 21010  010D3C  0E03               	movlw	high _maze
 21011  010D3E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21012  010D40  5160               	movf	?___wmul& (0+255),w,b
 21013  010D42  2766               	addwf	??_Create_Maze& (0+255),f,b
 21014  010D44  5161               	movf	(?___wmul+1)& (0+255),w,b
 21015  010D46  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21016  010D48  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21017  010D4C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21018  010D50  0E00               	movlw	0
 21019  010D52  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21020  010D54  0E0A               	movlw	10
 21021  010D56  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21022  010D58  EC40  F0C4         	call	___wmul	;wreg free
 21023  010D5C  0100               	movlb	0	; () banked
 21024  010D5E  5160               	movf	?___wmul& (0+255),w,b
 21025  010D60  2766               	addwf	??_Create_Maze& (0+255),f,b
 21026  010D62  5161               	movf	(?___wmul+1)& (0+255),w,b
 21027  010D64  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21028  010D66  0E04               	movlw	4
 21029  010D68  2566               	addwf	??_Create_Maze& (0+255),w,b
 21030  010D6A  6ED9               	movwf	fsr2l,c
 21031  010D6C  0E00               	movlw	0
 21032  010D6E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21033  010D70  6EDA               	movwf	fsr2h,c
 21034  010D72  0E00               	movlw	0
 21035  010D74  6EDF               	movwf	indf2,c
 21036                           
 21037                           ;dans.c: 83: maze[x][y].walls[1] = 1;
 21038  010D76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21039  010D7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21040  010D7E  0E00               	movlw	0
 21041  010D80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21042  010D82  0E32               	movlw	50
 21043  010D84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21044  010D86  EC40  F0C4         	call	___wmul	;wreg free
 21045  010D8A  0E00               	movlw	low _maze
 21046  010D8C  0100               	movlb	0	; () banked
 21047  010D8E  6F66               	movwf	??_Create_Maze& (0+255),b
 21048  010D90  0E03               	movlw	high _maze
 21049  010D92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21050  010D94  5160               	movf	?___wmul& (0+255),w,b
 21051  010D96  2766               	addwf	??_Create_Maze& (0+255),f,b
 21052  010D98  5161               	movf	(?___wmul+1)& (0+255),w,b
 21053  010D9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21054  010D9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21055  010DA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21056  010DA4  0E00               	movlw	0
 21057  010DA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21058  010DA8  0E0A               	movlw	10
 21059  010DAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21060  010DAC  EC40  F0C4         	call	___wmul	;wreg free
 21061  010DB0  0100               	movlb	0	; () banked
 21062  010DB2  5160               	movf	?___wmul& (0+255),w,b
 21063  010DB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21064  010DB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21065  010DB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21066  010DBA  0E05               	movlw	5
 21067  010DBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21068  010DBE  6ED9               	movwf	fsr2l,c
 21069  010DC0  0E00               	movlw	0
 21070  010DC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21071  010DC4  6EDA               	movwf	fsr2h,c
 21072  010DC6  0E01               	movlw	1
 21073  010DC8  6EDF               	movwf	indf2,c
 21074                           
 21075                           ;dans.c: 84: maze[x][y].walls[2] = 0;
 21076  010DCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21077  010DCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21078  010DD2  0E00               	movlw	0
 21079  010DD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21080  010DD6  0E32               	movlw	50
 21081  010DD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21082  010DDA  EC40  F0C4         	call	___wmul	;wreg free
 21083  010DDE  0E00               	movlw	low _maze
 21084  010DE0  0100               	movlb	0	; () banked
 21085  010DE2  6F66               	movwf	??_Create_Maze& (0+255),b
 21086  010DE4  0E03               	movlw	high _maze
 21087  010DE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21088  010DE8  5160               	movf	?___wmul& (0+255),w,b
 21089  010DEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21090  010DEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21091  010DEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21092  010DF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21093  010DF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21094  010DF8  0E00               	movlw	0
 21095  010DFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21096  010DFC  0E0A               	movlw	10
 21097  010DFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21098  010E00  EC40  F0C4         	call	___wmul	;wreg free
 21099  010E04  0100               	movlb	0	; () banked
 21100  010E06  5160               	movf	?___wmul& (0+255),w,b
 21101  010E08  2766               	addwf	??_Create_Maze& (0+255),f,b
 21102  010E0A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21103  010E0C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21104  010E0E  0E06               	movlw	6
 21105  010E10  2566               	addwf	??_Create_Maze& (0+255),w,b
 21106  010E12  6ED9               	movwf	fsr2l,c
 21107  010E14  0E00               	movlw	0
 21108  010E16  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21109  010E18  6EDA               	movwf	fsr2h,c
 21110  010E1A  0E00               	movlw	0
 21111  010E1C  6EDF               	movwf	indf2,c
 21112                           
 21113                           ;dans.c: 85: maze[x][y].walls[3] = 1;
 21114  010E1E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21115  010E22  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21116  010E26  0E00               	movlw	0
 21117  010E28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21118  010E2A  0E32               	movlw	50
 21119  010E2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21120  010E2E  EC40  F0C4         	call	___wmul	;wreg free
 21121  010E32  0E00               	movlw	low _maze
 21122  010E34  0100               	movlb	0	; () banked
 21123  010E36  6F66               	movwf	??_Create_Maze& (0+255),b
 21124  010E38  0E03               	movlw	high _maze
 21125  010E3A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21126  010E3C  5160               	movf	?___wmul& (0+255),w,b
 21127  010E3E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21128  010E40  5161               	movf	(?___wmul+1)& (0+255),w,b
 21129  010E42  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21130  010E44  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21131  010E48  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21132  010E4C  0E00               	movlw	0
 21133  010E4E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21134  010E50  0E0A               	movlw	10
 21135  010E52  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21136  010E54  EC40  F0C4         	call	___wmul	;wreg free
 21137  010E58  0100               	movlb	0	; () banked
 21138  010E5A  5160               	movf	?___wmul& (0+255),w,b
 21139  010E5C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21140  010E5E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21141  010E60  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21142  010E62  0E07               	movlw	7
 21143  010E64  2566               	addwf	??_Create_Maze& (0+255),w,b
 21144  010E66  6ED9               	movwf	fsr2l,c
 21145  010E68  0E00               	movlw	0
 21146  010E6A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21147  010E6C  6EDA               	movwf	fsr2h,c
 21148  010E6E  0E01               	movlw	1
 21149  010E70  6EDF               	movwf	indf2,c
 21150                           
 21151                           ;dans.c: 86: maze[x][y].Options = 2;
 21152  010E72  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21153  010E76  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21154  010E7A  0E00               	movlw	0
 21155  010E7C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21156  010E7E  0E32               	movlw	50
 21157  010E80  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21158  010E82  EC40  F0C4         	call	___wmul	;wreg free
 21159  010E86  0E00               	movlw	low _maze
 21160  010E88  0100               	movlb	0	; () banked
 21161  010E8A  6F66               	movwf	??_Create_Maze& (0+255),b
 21162  010E8C  0E03               	movlw	high _maze
 21163  010E8E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21164  010E90  5160               	movf	?___wmul& (0+255),w,b
 21165  010E92  2766               	addwf	??_Create_Maze& (0+255),f,b
 21166  010E94  5161               	movf	(?___wmul+1)& (0+255),w,b
 21167  010E96  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21168  010E98  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21169  010E9C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21170  010EA0  0E00               	movlw	0
 21171  010EA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21172  010EA4  0E0A               	movlw	10
 21173  010EA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21174  010EA8  EC40  F0C4         	call	___wmul	;wreg free
 21175  010EAC  0100               	movlb	0	; () banked
 21176  010EAE  5160               	movf	?___wmul& (0+255),w,b
 21177  010EB0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21178  010EB2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21179  010EB4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21180  010EB6  0E08               	movlw	8
 21181  010EB8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21182  010EBA  6ED9               	movwf	fsr2l,c
 21183  010EBC  0E00               	movlw	0
 21184  010EBE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21185  010EC0  6EDA               	movwf	fsr2h,c
 21186  010EC2  0E02               	movlw	2
 21187  010EC4  6EDE               	movwf	postinc2,c
 21188  010EC6  0E00               	movlw	0
 21189  010EC8  6EDD               	movwf	postdec2,c
 21190                           
 21191                           ; BSR set to: 0
 21192                           ;dans.c: 88: ++y;
 21193  010ECA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21194  010ECC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21195                           
 21196                           ; BSR set to: 0
 21197                           ;dans.c: 89: maze[x][y].walls[0] = 0;
 21198  010ECE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21199  010ED2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21200  010ED6  0E00               	movlw	0
 21201  010ED8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21202  010EDA  0E32               	movlw	50
 21203  010EDC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21204  010EDE  EC40  F0C4         	call	___wmul	;wreg free
 21205  010EE2  0E00               	movlw	low _maze
 21206  010EE4  0100               	movlb	0	; () banked
 21207  010EE6  6F66               	movwf	??_Create_Maze& (0+255),b
 21208  010EE8  0E03               	movlw	high _maze
 21209  010EEA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21210  010EEC  5160               	movf	?___wmul& (0+255),w,b
 21211  010EEE  2766               	addwf	??_Create_Maze& (0+255),f,b
 21212  010EF0  5161               	movf	(?___wmul+1)& (0+255),w,b
 21213  010EF2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21214  010EF4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21215  010EF8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21216  010EFC  0E00               	movlw	0
 21217  010EFE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21218  010F00  0E0A               	movlw	10
 21219  010F02  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21220  010F04  EC40  F0C4         	call	___wmul	;wreg free
 21221  010F08  0100               	movlb	0	; () banked
 21222  010F0A  5160               	movf	?___wmul& (0+255),w,b
 21223  010F0C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21224  010F0E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21225  010F10  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21226  010F12  0E04               	movlw	4
 21227  010F14  2566               	addwf	??_Create_Maze& (0+255),w,b
 21228  010F16  6ED9               	movwf	fsr2l,c
 21229  010F18  0E00               	movlw	0
 21230  010F1A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21231  010F1C  6EDA               	movwf	fsr2h,c
 21232  010F1E  0E00               	movlw	0
 21233  010F20  6EDF               	movwf	indf2,c
 21234                           
 21235                           ; BSR set to: 0
 21236                           ;dans.c: 90: maze[x][y].walls[1] = 0;
 21237  010F22  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21238  010F26  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21239  010F2A  0E00               	movlw	0
 21240  010F2C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21241  010F2E  0E32               	movlw	50
 21242  010F30  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21243  010F32  EC40  F0C4         	call	___wmul	;wreg free
 21244  010F36  0E00               	movlw	low _maze
 21245  010F38  0100               	movlb	0	; () banked
 21246  010F3A  6F66               	movwf	??_Create_Maze& (0+255),b
 21247  010F3C  0E03               	movlw	high _maze
 21248  010F3E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21249  010F40  5160               	movf	?___wmul& (0+255),w,b
 21250  010F42  2766               	addwf	??_Create_Maze& (0+255),f,b
 21251  010F44  5161               	movf	(?___wmul+1)& (0+255),w,b
 21252  010F46  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21253  010F48  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21254  010F4C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21255  010F50  0E00               	movlw	0
 21256  010F52  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21257  010F54  0E0A               	movlw	10
 21258  010F56  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21259  010F58  EC40  F0C4         	call	___wmul	;wreg free
 21260  010F5C  0100               	movlb	0	; () banked
 21261  010F5E  5160               	movf	?___wmul& (0+255),w,b
 21262  010F60  2766               	addwf	??_Create_Maze& (0+255),f,b
 21263  010F62  5161               	movf	(?___wmul+1)& (0+255),w,b
 21264  010F64  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21265  010F66  0E05               	movlw	5
 21266  010F68  2566               	addwf	??_Create_Maze& (0+255),w,b
 21267  010F6A  6ED9               	movwf	fsr2l,c
 21268  010F6C  0E00               	movlw	0
 21269  010F6E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21270  010F70  6EDA               	movwf	fsr2h,c
 21271  010F72  0E00               	movlw	0
 21272  010F74  6EDF               	movwf	indf2,c
 21273                           
 21274                           ; BSR set to: 0
 21275                           ;dans.c: 91: maze[x][y].walls[2] = 1;
 21276  010F76  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21277  010F7A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21278  010F7E  0E00               	movlw	0
 21279  010F80  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21280  010F82  0E32               	movlw	50
 21281  010F84  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21282  010F86  EC40  F0C4         	call	___wmul	;wreg free
 21283  010F8A  0E00               	movlw	low _maze
 21284  010F8C  0100               	movlb	0	; () banked
 21285  010F8E  6F66               	movwf	??_Create_Maze& (0+255),b
 21286  010F90  0E03               	movlw	high _maze
 21287  010F92  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21288  010F94  5160               	movf	?___wmul& (0+255),w,b
 21289  010F96  2766               	addwf	??_Create_Maze& (0+255),f,b
 21290  010F98  5161               	movf	(?___wmul+1)& (0+255),w,b
 21291  010F9A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21292  010F9C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21293  010FA0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21294  010FA4  0E00               	movlw	0
 21295  010FA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21296  010FA8  0E0A               	movlw	10
 21297  010FAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21298  010FAC  EC40  F0C4         	call	___wmul	;wreg free
 21299  010FB0  0100               	movlb	0	; () banked
 21300  010FB2  5160               	movf	?___wmul& (0+255),w,b
 21301  010FB4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21302  010FB6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21303  010FB8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21304  010FBA  0E06               	movlw	6
 21305  010FBC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21306  010FBE  6ED9               	movwf	fsr2l,c
 21307  010FC0  0E00               	movlw	0
 21308  010FC2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21309  010FC4  6EDA               	movwf	fsr2h,c
 21310  010FC6  0E01               	movlw	1
 21311  010FC8  6EDF               	movwf	indf2,c
 21312                           
 21313                           ; BSR set to: 0
 21314                           ;dans.c: 92: maze[x][y].walls[3] = 1;
 21315  010FCA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21316  010FCE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21317  010FD2  0E00               	movlw	0
 21318  010FD4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21319  010FD6  0E32               	movlw	50
 21320  010FD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21321  010FDA  EC40  F0C4         	call	___wmul	;wreg free
 21322  010FDE  0E00               	movlw	low _maze
 21323  010FE0  0100               	movlb	0	; () banked
 21324  010FE2  6F66               	movwf	??_Create_Maze& (0+255),b
 21325  010FE4  0E03               	movlw	high _maze
 21326  010FE6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21327  010FE8  5160               	movf	?___wmul& (0+255),w,b
 21328  010FEA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21329  010FEC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21330  010FEE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21331  010FF0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21332  010FF4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21333  010FF8  0E00               	movlw	0
 21334  010FFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21335  010FFC  0E0A               	movlw	10
 21336  010FFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21337  011000  EC40  F0C4         	call	___wmul	;wreg free
 21338  011004  0100               	movlb	0	; () banked
 21339  011006  5160               	movf	?___wmul& (0+255),w,b
 21340  011008  2766               	addwf	??_Create_Maze& (0+255),f,b
 21341  01100A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21342  01100C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21343  01100E  0E07               	movlw	7
 21344  011010  2566               	addwf	??_Create_Maze& (0+255),w,b
 21345  011012  6ED9               	movwf	fsr2l,c
 21346  011014  0E00               	movlw	0
 21347  011016  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21348  011018  6EDA               	movwf	fsr2h,c
 21349  01101A  0E01               	movlw	1
 21350  01101C  6EDF               	movwf	indf2,c
 21351                           
 21352                           ; BSR set to: 0
 21353                           ;dans.c: 93: maze[x][y].Options = 2;
 21354  01101E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21355  011022  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21356  011026  0E00               	movlw	0
 21357  011028  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21358  01102A  0E32               	movlw	50
 21359  01102C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21360  01102E  EC40  F0C4         	call	___wmul	;wreg free
 21361  011032  0E00               	movlw	low _maze
 21362  011034  0100               	movlb	0	; () banked
 21363  011036  6F66               	movwf	??_Create_Maze& (0+255),b
 21364  011038  0E03               	movlw	high _maze
 21365  01103A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21366  01103C  5160               	movf	?___wmul& (0+255),w,b
 21367  01103E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21368  011040  5161               	movf	(?___wmul+1)& (0+255),w,b
 21369  011042  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21370  011044  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21371  011048  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21372  01104C  0E00               	movlw	0
 21373  01104E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21374  011050  0E0A               	movlw	10
 21375  011052  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21376  011054  EC40  F0C4         	call	___wmul	;wreg free
 21377  011058  0100               	movlb	0	; () banked
 21378  01105A  5160               	movf	?___wmul& (0+255),w,b
 21379  01105C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21380  01105E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21381  011060  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21382  011062  0E08               	movlw	8
 21383  011064  2566               	addwf	??_Create_Maze& (0+255),w,b
 21384  011066  6ED9               	movwf	fsr2l,c
 21385  011068  0E00               	movlw	0
 21386  01106A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21387  01106C  6EDA               	movwf	fsr2h,c
 21388  01106E  0E02               	movlw	2
 21389  011070  6EDE               	movwf	postinc2,c
 21390  011072  0E00               	movlw	0
 21391  011074  6EDD               	movwf	postdec2,c
 21392                           
 21393                           ;dans.c: 95: ++y;
 21394  011076  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21395  011078  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21396                           
 21397                           ; BSR set to: 0
 21398                           ;dans.c: 96: maze[x][y].walls[0] = 0;
 21399  01107A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21400  01107E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21401  011082  0E00               	movlw	0
 21402  011084  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21403  011086  0E32               	movlw	50
 21404  011088  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21405  01108A  EC40  F0C4         	call	___wmul	;wreg free
 21406  01108E  0E00               	movlw	low _maze
 21407  011090  0100               	movlb	0	; () banked
 21408  011092  6F66               	movwf	??_Create_Maze& (0+255),b
 21409  011094  0E03               	movlw	high _maze
 21410  011096  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21411  011098  5160               	movf	?___wmul& (0+255),w,b
 21412  01109A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21413  01109C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21414  01109E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21415  0110A0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21416  0110A4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21417  0110A8  0E00               	movlw	0
 21418  0110AA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21419  0110AC  0E0A               	movlw	10
 21420  0110AE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21421  0110B0  EC40  F0C4         	call	___wmul	;wreg free
 21422  0110B4  0100               	movlb	0	; () banked
 21423  0110B6  5160               	movf	?___wmul& (0+255),w,b
 21424  0110B8  2766               	addwf	??_Create_Maze& (0+255),f,b
 21425  0110BA  5161               	movf	(?___wmul+1)& (0+255),w,b
 21426  0110BC  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21427  0110BE  0E04               	movlw	4
 21428  0110C0  2566               	addwf	??_Create_Maze& (0+255),w,b
 21429  0110C2  6ED9               	movwf	fsr2l,c
 21430  0110C4  0E00               	movlw	0
 21431  0110C6  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21432  0110C8  6EDA               	movwf	fsr2h,c
 21433  0110CA  0E00               	movlw	0
 21434  0110CC  6EDF               	movwf	indf2,c
 21435                           
 21436                           ; BSR set to: 0
 21437                           ;dans.c: 97: maze[x][y].walls[1] = 1;
 21438  0110CE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21439  0110D2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21440  0110D6  0E00               	movlw	0
 21441  0110D8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21442  0110DA  0E32               	movlw	50
 21443  0110DC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21444  0110DE  EC40  F0C4         	call	___wmul	;wreg free
 21445  0110E2  0E00               	movlw	low _maze
 21446  0110E4  0100               	movlb	0	; () banked
 21447  0110E6  6F66               	movwf	??_Create_Maze& (0+255),b
 21448  0110E8  0E03               	movlw	high _maze
 21449  0110EA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21450  0110EC  5160               	movf	?___wmul& (0+255),w,b
 21451  0110EE  2766               	addwf	??_Create_Maze& (0+255),f,b
 21452  0110F0  5161               	movf	(?___wmul+1)& (0+255),w,b
 21453  0110F2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21454  0110F4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21455  0110F8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21456  0110FC  0E00               	movlw	0
 21457  0110FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21458  011100  0E0A               	movlw	10
 21459  011102  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21460  011104  EC40  F0C4         	call	___wmul	;wreg free
 21461  011108  0100               	movlb	0	; () banked
 21462  01110A  5160               	movf	?___wmul& (0+255),w,b
 21463  01110C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21464  01110E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21465  011110  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21466  011112  0E05               	movlw	5
 21467  011114  2566               	addwf	??_Create_Maze& (0+255),w,b
 21468  011116  6ED9               	movwf	fsr2l,c
 21469  011118  0E00               	movlw	0
 21470  01111A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21471  01111C  6EDA               	movwf	fsr2h,c
 21472  01111E  0E01               	movlw	1
 21473  011120  6EDF               	movwf	indf2,c
 21474                           
 21475                           ; BSR set to: 0
 21476                           ;dans.c: 98: maze[x][y].walls[2] = 1;
 21477  011122  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21478  011126  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21479  01112A  0E00               	movlw	0
 21480  01112C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21481  01112E  0E32               	movlw	50
 21482  011130  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21483  011132  EC40  F0C4         	call	___wmul	;wreg free
 21484  011136  0E00               	movlw	low _maze
 21485  011138  0100               	movlb	0	; () banked
 21486  01113A  6F66               	movwf	??_Create_Maze& (0+255),b
 21487  01113C  0E03               	movlw	high _maze
 21488  01113E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21489  011140  5160               	movf	?___wmul& (0+255),w,b
 21490  011142  2766               	addwf	??_Create_Maze& (0+255),f,b
 21491  011144  5161               	movf	(?___wmul+1)& (0+255),w,b
 21492  011146  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21493  011148  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21494  01114C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21495  011150  0E00               	movlw	0
 21496  011152  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21497  011154  0E0A               	movlw	10
 21498  011156  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21499  011158  EC40  F0C4         	call	___wmul	;wreg free
 21500  01115C  0100               	movlb	0	; () banked
 21501  01115E  5160               	movf	?___wmul& (0+255),w,b
 21502  011160  2766               	addwf	??_Create_Maze& (0+255),f,b
 21503  011162  5161               	movf	(?___wmul+1)& (0+255),w,b
 21504  011164  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21505  011166  0E06               	movlw	6
 21506  011168  2566               	addwf	??_Create_Maze& (0+255),w,b
 21507  01116A  6ED9               	movwf	fsr2l,c
 21508  01116C  0E00               	movlw	0
 21509  01116E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21510  011170  6EDA               	movwf	fsr2h,c
 21511  011172  0E01               	movlw	1
 21512  011174  6EDF               	movwf	indf2,c
 21513                           
 21514                           ; BSR set to: 0
 21515                           ;dans.c: 99: maze[x][y].walls[3] = 0;
 21516  011176  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21517  01117A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21518  01117E  0E00               	movlw	0
 21519  011180  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21520  011182  0E32               	movlw	50
 21521  011184  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21522  011186  EC40  F0C4         	call	___wmul	;wreg free
 21523  01118A  0E00               	movlw	low _maze
 21524  01118C  0100               	movlb	0	; () banked
 21525  01118E  6F66               	movwf	??_Create_Maze& (0+255),b
 21526  011190  0E03               	movlw	high _maze
 21527  011192  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21528  011194  5160               	movf	?___wmul& (0+255),w,b
 21529  011196  2766               	addwf	??_Create_Maze& (0+255),f,b
 21530  011198  5161               	movf	(?___wmul+1)& (0+255),w,b
 21531  01119A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21532  01119C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21533  0111A0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21534  0111A4  0E00               	movlw	0
 21535  0111A6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21536  0111A8  0E0A               	movlw	10
 21537  0111AA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21538  0111AC  EC40  F0C4         	call	___wmul	;wreg free
 21539  0111B0  0100               	movlb	0	; () banked
 21540  0111B2  5160               	movf	?___wmul& (0+255),w,b
 21541  0111B4  2766               	addwf	??_Create_Maze& (0+255),f,b
 21542  0111B6  5161               	movf	(?___wmul+1)& (0+255),w,b
 21543  0111B8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21544  0111BA  0E07               	movlw	7
 21545  0111BC  2566               	addwf	??_Create_Maze& (0+255),w,b
 21546  0111BE  6ED9               	movwf	fsr2l,c
 21547  0111C0  0E00               	movlw	0
 21548  0111C2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21549  0111C4  6EDA               	movwf	fsr2h,c
 21550  0111C6  0E00               	movlw	0
 21551  0111C8  6EDF               	movwf	indf2,c
 21552                           
 21553                           ; BSR set to: 0
 21554                           ;dans.c: 100: maze[x][y].Options = 2;
 21555  0111CA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21556  0111CE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21557  0111D2  0E00               	movlw	0
 21558  0111D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21559  0111D6  0E32               	movlw	50
 21560  0111D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21561  0111DA  EC40  F0C4         	call	___wmul	;wreg free
 21562  0111DE  0E00               	movlw	low _maze
 21563  0111E0  0100               	movlb	0	; () banked
 21564  0111E2  6F66               	movwf	??_Create_Maze& (0+255),b
 21565  0111E4  0E03               	movlw	high _maze
 21566  0111E6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21567  0111E8  5160               	movf	?___wmul& (0+255),w,b
 21568  0111EA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21569  0111EC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21570  0111EE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21571  0111F0  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21572  0111F4  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21573  0111F8  0E00               	movlw	0
 21574  0111FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21575  0111FC  0E0A               	movlw	10
 21576  0111FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21577  011200  EC40  F0C4         	call	___wmul	;wreg free
 21578  011204  0100               	movlb	0	; () banked
 21579  011206  5160               	movf	?___wmul& (0+255),w,b
 21580  011208  2766               	addwf	??_Create_Maze& (0+255),f,b
 21581  01120A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21582  01120C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21583  01120E  0E08               	movlw	8
 21584  011210  2566               	addwf	??_Create_Maze& (0+255),w,b
 21585  011212  6ED9               	movwf	fsr2l,c
 21586  011214  0E00               	movlw	0
 21587  011216  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21588  011218  6EDA               	movwf	fsr2h,c
 21589  01121A  0E02               	movlw	2
 21590  01121C  6EDE               	movwf	postinc2,c
 21591  01121E  0E00               	movlw	0
 21592  011220  6EDD               	movwf	postdec2,c
 21593                           
 21594                           ; BSR set to: 0
 21595                           ;dans.c: 102: ++x;
 21596  011222  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 21597  011224  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 21598                           
 21599                           ; BSR set to: 0
 21600                           ;dans.c: 103: y=0;
 21601  011226  0E00               	movlw	0
 21602  011228  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 21603  01122A  0E00               	movlw	0
 21604  01122C  6F6E               	movwf	Create_Maze@y& (0+255),b
 21605                           
 21606                           ; BSR set to: 0
 21607                           ;dans.c: 104: maze[x][y].walls[0] = 0;
 21608  01122E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21609  011232  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21610  011236  0E00               	movlw	0
 21611  011238  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21612  01123A  0E32               	movlw	50
 21613  01123C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21614  01123E  EC40  F0C4         	call	___wmul	;wreg free
 21615  011242  0E00               	movlw	low _maze
 21616  011244  0100               	movlb	0	; () banked
 21617  011246  6F66               	movwf	??_Create_Maze& (0+255),b
 21618  011248  0E03               	movlw	high _maze
 21619  01124A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21620  01124C  5160               	movf	?___wmul& (0+255),w,b
 21621  01124E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21622  011250  5161               	movf	(?___wmul+1)& (0+255),w,b
 21623  011252  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21624  011254  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21625  011258  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21626  01125C  0E00               	movlw	0
 21627  01125E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21628  011260  0E0A               	movlw	10
 21629  011262  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21630  011264  EC40  F0C4         	call	___wmul	;wreg free
 21631  011268  0100               	movlb	0	; () banked
 21632  01126A  5160               	movf	?___wmul& (0+255),w,b
 21633  01126C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21634  01126E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21635  011270  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21636  011272  0E04               	movlw	4
 21637  011274  2566               	addwf	??_Create_Maze& (0+255),w,b
 21638  011276  6ED9               	movwf	fsr2l,c
 21639  011278  0E00               	movlw	0
 21640  01127A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21641  01127C  6EDA               	movwf	fsr2h,c
 21642  01127E  0E00               	movlw	0
 21643  011280  6EDF               	movwf	indf2,c
 21644                           
 21645                           ; BSR set to: 0
 21646                           ;dans.c: 105: maze[x][y].walls[1] = 0;
 21647  011282  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21648  011286  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21649  01128A  0E00               	movlw	0
 21650  01128C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21651  01128E  0E32               	movlw	50
 21652  011290  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21653  011292  EC40  F0C4         	call	___wmul	;wreg free
 21654  011296  0E00               	movlw	low _maze
 21655  011298  0100               	movlb	0	; () banked
 21656  01129A  6F66               	movwf	??_Create_Maze& (0+255),b
 21657  01129C  0E03               	movlw	high _maze
 21658  01129E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21659  0112A0  5160               	movf	?___wmul& (0+255),w,b
 21660  0112A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21661  0112A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21662  0112A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21663  0112A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21664  0112AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21665  0112B0  0E00               	movlw	0
 21666  0112B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21667  0112B4  0E0A               	movlw	10
 21668  0112B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21669  0112B8  EC40  F0C4         	call	___wmul	;wreg free
 21670  0112BC  0100               	movlb	0	; () banked
 21671  0112BE  5160               	movf	?___wmul& (0+255),w,b
 21672  0112C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21673  0112C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21674  0112C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21675  0112C6  0E05               	movlw	5
 21676  0112C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21677  0112CA  6ED9               	movwf	fsr2l,c
 21678  0112CC  0E00               	movlw	0
 21679  0112CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21680  0112D0  6EDA               	movwf	fsr2h,c
 21681  0112D2  0E00               	movlw	0
 21682  0112D4  6EDF               	movwf	indf2,c
 21683                           
 21684                           ; BSR set to: 0
 21685                           ;dans.c: 106: maze[x][y].walls[2] = 0;
 21686  0112D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21687  0112DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21688  0112DE  0E00               	movlw	0
 21689  0112E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21690  0112E2  0E32               	movlw	50
 21691  0112E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21692  0112E6  EC40  F0C4         	call	___wmul	;wreg free
 21693  0112EA  0E00               	movlw	low _maze
 21694  0112EC  0100               	movlb	0	; () banked
 21695  0112EE  6F66               	movwf	??_Create_Maze& (0+255),b
 21696  0112F0  0E03               	movlw	high _maze
 21697  0112F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21698  0112F4  5160               	movf	?___wmul& (0+255),w,b
 21699  0112F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21700  0112F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21701  0112FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21702  0112FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21703  011300  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21704  011304  0E00               	movlw	0
 21705  011306  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21706  011308  0E0A               	movlw	10
 21707  01130A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21708  01130C  EC40  F0C4         	call	___wmul	;wreg free
 21709  011310  0100               	movlb	0	; () banked
 21710  011312  5160               	movf	?___wmul& (0+255),w,b
 21711  011314  2766               	addwf	??_Create_Maze& (0+255),f,b
 21712  011316  5161               	movf	(?___wmul+1)& (0+255),w,b
 21713  011318  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21714  01131A  0E06               	movlw	6
 21715  01131C  2566               	addwf	??_Create_Maze& (0+255),w,b
 21716  01131E  6ED9               	movwf	fsr2l,c
 21717  011320  0E00               	movlw	0
 21718  011322  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21719  011324  6EDA               	movwf	fsr2h,c
 21720  011326  0E00               	movlw	0
 21721  011328  6EDF               	movwf	indf2,c
 21722                           
 21723                           ; BSR set to: 0
 21724                           ;dans.c: 107: maze[x][y].walls[3] = 1;
 21725  01132A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21726  01132E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21727  011332  0E00               	movlw	0
 21728  011334  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21729  011336  0E32               	movlw	50
 21730  011338  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21731  01133A  EC40  F0C4         	call	___wmul	;wreg free
 21732  01133E  0E00               	movlw	low _maze
 21733  011340  0100               	movlb	0	; () banked
 21734  011342  6F66               	movwf	??_Create_Maze& (0+255),b
 21735  011344  0E03               	movlw	high _maze
 21736  011346  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21737  011348  5160               	movf	?___wmul& (0+255),w,b
 21738  01134A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21739  01134C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21740  01134E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21741  011350  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21742  011354  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21743  011358  0E00               	movlw	0
 21744  01135A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21745  01135C  0E0A               	movlw	10
 21746  01135E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21747  011360  EC40  F0C4         	call	___wmul	;wreg free
 21748  011364  0100               	movlb	0	; () banked
 21749  011366  5160               	movf	?___wmul& (0+255),w,b
 21750  011368  2766               	addwf	??_Create_Maze& (0+255),f,b
 21751  01136A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21752  01136C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21753  01136E  0E07               	movlw	7
 21754  011370  2566               	addwf	??_Create_Maze& (0+255),w,b
 21755  011372  6ED9               	movwf	fsr2l,c
 21756  011374  0E00               	movlw	0
 21757  011376  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21758  011378  6EDA               	movwf	fsr2h,c
 21759  01137A  0E01               	movlw	1
 21760  01137C  6EDF               	movwf	indf2,c
 21761                           
 21762                           ; BSR set to: 0
 21763                           ;dans.c: 108: maze[x][y].Options = 3;
 21764  01137E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21765  011382  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21766  011386  0E00               	movlw	0
 21767  011388  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21768  01138A  0E32               	movlw	50
 21769  01138C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21770  01138E  EC40  F0C4         	call	___wmul	;wreg free
 21771  011392  0E00               	movlw	low _maze
 21772  011394  0100               	movlb	0	; () banked
 21773  011396  6F66               	movwf	??_Create_Maze& (0+255),b
 21774  011398  0E03               	movlw	high _maze
 21775  01139A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21776  01139C  5160               	movf	?___wmul& (0+255),w,b
 21777  01139E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21778  0113A0  5161               	movf	(?___wmul+1)& (0+255),w,b
 21779  0113A2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21780  0113A4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21781  0113A8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21782  0113AC  0E00               	movlw	0
 21783  0113AE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21784  0113B0  0E0A               	movlw	10
 21785  0113B2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21786  0113B4  EC40  F0C4         	call	___wmul	;wreg free
 21787  0113B8  0100               	movlb	0	; () banked
 21788  0113BA  5160               	movf	?___wmul& (0+255),w,b
 21789  0113BC  2766               	addwf	??_Create_Maze& (0+255),f,b
 21790  0113BE  5161               	movf	(?___wmul+1)& (0+255),w,b
 21791  0113C0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21792  0113C2  0E08               	movlw	8
 21793  0113C4  2566               	addwf	??_Create_Maze& (0+255),w,b
 21794  0113C6  6ED9               	movwf	fsr2l,c
 21795  0113C8  0E00               	movlw	0
 21796  0113CA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21797  0113CC  6EDA               	movwf	fsr2h,c
 21798  0113CE  0E03               	movlw	3
 21799  0113D0  6EDE               	movwf	postinc2,c
 21800  0113D2  0E00               	movlw	0
 21801  0113D4  6EDD               	movwf	postdec2,c
 21802                           
 21803                           ; BSR set to: 0
 21804                           ;dans.c: 110: ++y;
 21805  0113D6  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 21806  0113D8  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 21807                           
 21808                           ; BSR set to: 0
 21809                           ;dans.c: 111: maze[x][y].walls[0] = 1;
 21810  0113DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21811  0113DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21812  0113E2  0E00               	movlw	0
 21813  0113E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21814  0113E6  0E32               	movlw	50
 21815  0113E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21816  0113EA  EC40  F0C4         	call	___wmul	;wreg free
 21817  0113EE  0E00               	movlw	low _maze
 21818  0113F0  0100               	movlb	0	; () banked
 21819  0113F2  6F66               	movwf	??_Create_Maze& (0+255),b
 21820  0113F4  0E03               	movlw	high _maze
 21821  0113F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21822  0113F8  5160               	movf	?___wmul& (0+255),w,b
 21823  0113FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 21824  0113FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21825  0113FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21826  011400  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21827  011404  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21828  011408  0E00               	movlw	0
 21829  01140A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21830  01140C  0E0A               	movlw	10
 21831  01140E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21832  011410  EC40  F0C4         	call	___wmul	;wreg free
 21833  011414  0100               	movlb	0	; () banked
 21834  011416  5160               	movf	?___wmul& (0+255),w,b
 21835  011418  2766               	addwf	??_Create_Maze& (0+255),f,b
 21836  01141A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21837  01141C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21838  01141E  0E04               	movlw	4
 21839  011420  2566               	addwf	??_Create_Maze& (0+255),w,b
 21840  011422  6ED9               	movwf	fsr2l,c
 21841  011424  0E00               	movlw	0
 21842  011426  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21843  011428  6EDA               	movwf	fsr2h,c
 21844  01142A  0E01               	movlw	1
 21845  01142C  6EDF               	movwf	indf2,c
 21846                           
 21847                           ; BSR set to: 0
 21848                           ;dans.c: 112: maze[x][y].walls[1] = 0;
 21849  01142E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21850  011432  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21851  011436  0E00               	movlw	0
 21852  011438  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21853  01143A  0E32               	movlw	50
 21854  01143C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21855  01143E  EC40  F0C4         	call	___wmul	;wreg free
 21856  011442  0E00               	movlw	low _maze
 21857  011444  0100               	movlb	0	; () banked
 21858  011446  6F66               	movwf	??_Create_Maze& (0+255),b
 21859  011448  0E03               	movlw	high _maze
 21860  01144A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21861  01144C  5160               	movf	?___wmul& (0+255),w,b
 21862  01144E  2766               	addwf	??_Create_Maze& (0+255),f,b
 21863  011450  5161               	movf	(?___wmul+1)& (0+255),w,b
 21864  011452  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21865  011454  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21866  011458  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21867  01145C  0E00               	movlw	0
 21868  01145E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21869  011460  0E0A               	movlw	10
 21870  011462  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21871  011464  EC40  F0C4         	call	___wmul	;wreg free
 21872  011468  0100               	movlb	0	; () banked
 21873  01146A  5160               	movf	?___wmul& (0+255),w,b
 21874  01146C  2766               	addwf	??_Create_Maze& (0+255),f,b
 21875  01146E  5161               	movf	(?___wmul+1)& (0+255),w,b
 21876  011470  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21877  011472  0E05               	movlw	5
 21878  011474  2566               	addwf	??_Create_Maze& (0+255),w,b
 21879  011476  6ED9               	movwf	fsr2l,c
 21880  011478  0E00               	movlw	0
 21881  01147A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21882  01147C  6EDA               	movwf	fsr2h,c
 21883  01147E  0E00               	movlw	0
 21884  011480  6EDF               	movwf	indf2,c
 21885                           
 21886                           ; BSR set to: 0
 21887                           ;dans.c: 113: maze[x][y].walls[2] = 1;
 21888  011482  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21889  011486  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21890  01148A  0E00               	movlw	0
 21891  01148C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21892  01148E  0E32               	movlw	50
 21893  011490  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21894  011492  EC40  F0C4         	call	___wmul	;wreg free
 21895  011496  0E00               	movlw	low _maze
 21896  011498  0100               	movlb	0	; () banked
 21897  01149A  6F66               	movwf	??_Create_Maze& (0+255),b
 21898  01149C  0E03               	movlw	high _maze
 21899  01149E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21900  0114A0  5160               	movf	?___wmul& (0+255),w,b
 21901  0114A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 21902  0114A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 21903  0114A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21904  0114A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21905  0114AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21906  0114B0  0E00               	movlw	0
 21907  0114B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21908  0114B4  0E0A               	movlw	10
 21909  0114B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21910  0114B8  EC40  F0C4         	call	___wmul	;wreg free
 21911  0114BC  0100               	movlb	0	; () banked
 21912  0114BE  5160               	movf	?___wmul& (0+255),w,b
 21913  0114C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 21914  0114C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 21915  0114C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21916  0114C6  0E06               	movlw	6
 21917  0114C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 21918  0114CA  6ED9               	movwf	fsr2l,c
 21919  0114CC  0E00               	movlw	0
 21920  0114CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21921  0114D0  6EDA               	movwf	fsr2h,c
 21922  0114D2  0E01               	movlw	1
 21923  0114D4  6EDF               	movwf	indf2,c
 21924                           
 21925                           ; BSR set to: 0
 21926                           ;dans.c: 114: maze[x][y].walls[3] = 0;
 21927  0114D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21928  0114DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21929  0114DE  0E00               	movlw	0
 21930  0114E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21931  0114E2  0E32               	movlw	50
 21932  0114E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21933  0114E6  EC40  F0C4         	call	___wmul	;wreg free
 21934  0114EA  0E00               	movlw	low _maze
 21935  0114EC  0100               	movlb	0	; () banked
 21936  0114EE  6F66               	movwf	??_Create_Maze& (0+255),b
 21937  0114F0  0E03               	movlw	high _maze
 21938  0114F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21939  0114F4  5160               	movf	?___wmul& (0+255),w,b
 21940  0114F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 21941  0114F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 21942  0114FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21943  0114FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21944  011500  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21945  011504  0E00               	movlw	0
 21946  011506  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21947  011508  0E0A               	movlw	10
 21948  01150A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21949  01150C  EC40  F0C4         	call	___wmul	;wreg free
 21950  011510  0100               	movlb	0	; () banked
 21951  011512  5160               	movf	?___wmul& (0+255),w,b
 21952  011514  2766               	addwf	??_Create_Maze& (0+255),f,b
 21953  011516  5161               	movf	(?___wmul+1)& (0+255),w,b
 21954  011518  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21955  01151A  0E07               	movlw	7
 21956  01151C  2566               	addwf	??_Create_Maze& (0+255),w,b
 21957  01151E  6ED9               	movwf	fsr2l,c
 21958  011520  0E00               	movlw	0
 21959  011522  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21960  011524  6EDA               	movwf	fsr2h,c
 21961  011526  0E00               	movlw	0
 21962  011528  6EDF               	movwf	indf2,c
 21963                           
 21964                           ; BSR set to: 0
 21965                           ;dans.c: 115: maze[x][y].Options = 2;
 21966  01152A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 21967  01152E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 21968  011532  0E00               	movlw	0
 21969  011534  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21970  011536  0E32               	movlw	50
 21971  011538  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21972  01153A  EC40  F0C4         	call	___wmul	;wreg free
 21973  01153E  0E00               	movlw	low _maze
 21974  011540  0100               	movlb	0	; () banked
 21975  011542  6F66               	movwf	??_Create_Maze& (0+255),b
 21976  011544  0E03               	movlw	high _maze
 21977  011546  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 21978  011548  5160               	movf	?___wmul& (0+255),w,b
 21979  01154A  2766               	addwf	??_Create_Maze& (0+255),f,b
 21980  01154C  5161               	movf	(?___wmul+1)& (0+255),w,b
 21981  01154E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21982  011550  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 21983  011554  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 21984  011558  0E00               	movlw	0
 21985  01155A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21986  01155C  0E0A               	movlw	10
 21987  01155E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21988  011560  EC40  F0C4         	call	___wmul	;wreg free
 21989  011564  0100               	movlb	0	; () banked
 21990  011566  5160               	movf	?___wmul& (0+255),w,b
 21991  011568  2766               	addwf	??_Create_Maze& (0+255),f,b
 21992  01156A  5161               	movf	(?___wmul+1)& (0+255),w,b
 21993  01156C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 21994  01156E  0E08               	movlw	8
 21995  011570  2566               	addwf	??_Create_Maze& (0+255),w,b
 21996  011572  6ED9               	movwf	fsr2l,c
 21997  011574  0E00               	movlw	0
 21998  011576  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 21999  011578  6EDA               	movwf	fsr2h,c
 22000  01157A  0E02               	movlw	2
 22001  01157C  6EDE               	movwf	postinc2,c
 22002  01157E  0E00               	movlw	0
 22003  011580  6EDD               	movwf	postdec2,c
 22004                           
 22005                           ; BSR set to: 0
 22006                           ;dans.c: 117: ++y;
 22007  011582  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22008  011584  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22009                           
 22010                           ; BSR set to: 0
 22011                           ;dans.c: 118: maze[x][y].walls[0] = 0;
 22012  011586  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22013  01158A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22014  01158E  0E00               	movlw	0
 22015  011590  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22016  011592  0E32               	movlw	50
 22017  011594  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22018  011596  EC40  F0C4         	call	___wmul	;wreg free
 22019  01159A  0E00               	movlw	low _maze
 22020  01159C  0100               	movlb	0	; () banked
 22021  01159E  6F66               	movwf	??_Create_Maze& (0+255),b
 22022  0115A0  0E03               	movlw	high _maze
 22023  0115A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22024  0115A4  5160               	movf	?___wmul& (0+255),w,b
 22025  0115A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22026  0115A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22027  0115AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22028  0115AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22029  0115B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22030  0115B4  0E00               	movlw	0
 22031  0115B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22032  0115B8  0E0A               	movlw	10
 22033  0115BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22034  0115BC  EC40  F0C4         	call	___wmul	;wreg free
 22035  0115C0  0100               	movlb	0	; () banked
 22036  0115C2  5160               	movf	?___wmul& (0+255),w,b
 22037  0115C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22038  0115C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22039  0115C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22040  0115CA  0E04               	movlw	4
 22041  0115CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22042  0115CE  6ED9               	movwf	fsr2l,c
 22043  0115D0  0E00               	movlw	0
 22044  0115D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22045  0115D4  6EDA               	movwf	fsr2h,c
 22046  0115D6  0E00               	movlw	0
 22047  0115D8  6EDF               	movwf	indf2,c
 22048                           
 22049                           ; BSR set to: 0
 22050                           ;dans.c: 119: maze[x][y].walls[1] = 0;
 22051  0115DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22052  0115DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22053  0115E2  0E00               	movlw	0
 22054  0115E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22055  0115E6  0E32               	movlw	50
 22056  0115E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22057  0115EA  EC40  F0C4         	call	___wmul	;wreg free
 22058  0115EE  0E00               	movlw	low _maze
 22059  0115F0  0100               	movlb	0	; () banked
 22060  0115F2  6F66               	movwf	??_Create_Maze& (0+255),b
 22061  0115F4  0E03               	movlw	high _maze
 22062  0115F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22063  0115F8  5160               	movf	?___wmul& (0+255),w,b
 22064  0115FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 22065  0115FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22066  0115FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22067  011600  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22068  011604  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22069  011608  0E00               	movlw	0
 22070  01160A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22071  01160C  0E0A               	movlw	10
 22072  01160E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22073  011610  EC40  F0C4         	call	___wmul	;wreg free
 22074  011614  0100               	movlb	0	; () banked
 22075  011616  5160               	movf	?___wmul& (0+255),w,b
 22076  011618  2766               	addwf	??_Create_Maze& (0+255),f,b
 22077  01161A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22078  01161C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22079  01161E  0E05               	movlw	5
 22080  011620  2566               	addwf	??_Create_Maze& (0+255),w,b
 22081  011622  6ED9               	movwf	fsr2l,c
 22082  011624  0E00               	movlw	0
 22083  011626  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22084  011628  6EDA               	movwf	fsr2h,c
 22085  01162A  0E00               	movlw	0
 22086  01162C  6EDF               	movwf	indf2,c
 22087                           
 22088                           ; BSR set to: 0
 22089                           ;dans.c: 120: maze[x][y].walls[2] = 0;
 22090  01162E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22091  011632  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22092  011636  0E00               	movlw	0
 22093  011638  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22094  01163A  0E32               	movlw	50
 22095  01163C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22096  01163E  EC40  F0C4         	call	___wmul	;wreg free
 22097  011642  0E00               	movlw	low _maze
 22098  011644  0100               	movlb	0	; () banked
 22099  011646  6F66               	movwf	??_Create_Maze& (0+255),b
 22100  011648  0E03               	movlw	high _maze
 22101  01164A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22102  01164C  5160               	movf	?___wmul& (0+255),w,b
 22103  01164E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22104  011650  5161               	movf	(?___wmul+1)& (0+255),w,b
 22105  011652  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22106  011654  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22107  011658  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22108  01165C  0E00               	movlw	0
 22109  01165E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22110  011660  0E0A               	movlw	10
 22111  011662  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22112  011664  EC40  F0C4         	call	___wmul	;wreg free
 22113  011668  0100               	movlb	0	; () banked
 22114  01166A  5160               	movf	?___wmul& (0+255),w,b
 22115  01166C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22116  01166E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22117  011670  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22118  011672  0E06               	movlw	6
 22119  011674  2566               	addwf	??_Create_Maze& (0+255),w,b
 22120  011676  6ED9               	movwf	fsr2l,c
 22121  011678  0E00               	movlw	0
 22122  01167A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22123  01167C  6EDA               	movwf	fsr2h,c
 22124  01167E  0E00               	movlw	0
 22125  011680  6EDF               	movwf	indf2,c
 22126                           
 22127                           ; BSR set to: 0
 22128                           ;dans.c: 121: maze[x][y].walls[3] = 0;
 22129  011682  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22130  011686  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22131  01168A  0E00               	movlw	0
 22132  01168C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22133  01168E  0E32               	movlw	50
 22134  011690  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22135  011692  EC40  F0C4         	call	___wmul	;wreg free
 22136  011696  0E00               	movlw	low _maze
 22137  011698  0100               	movlb	0	; () banked
 22138  01169A  6F66               	movwf	??_Create_Maze& (0+255),b
 22139  01169C  0E03               	movlw	high _maze
 22140  01169E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22141  0116A0  5160               	movf	?___wmul& (0+255),w,b
 22142  0116A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22143  0116A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22144  0116A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22145  0116A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22146  0116AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22147  0116B0  0E00               	movlw	0
 22148  0116B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22149  0116B4  0E0A               	movlw	10
 22150  0116B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22151  0116B8  EC40  F0C4         	call	___wmul	;wreg free
 22152  0116BC  0100               	movlb	0	; () banked
 22153  0116BE  5160               	movf	?___wmul& (0+255),w,b
 22154  0116C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22155  0116C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22156  0116C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22157  0116C6  0E07               	movlw	7
 22158  0116C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22159  0116CA  6ED9               	movwf	fsr2l,c
 22160  0116CC  0E00               	movlw	0
 22161  0116CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22162  0116D0  6EDA               	movwf	fsr2h,c
 22163  0116D2  0E00               	movlw	0
 22164  0116D4  6EDF               	movwf	indf2,c
 22165                           
 22166                           ; BSR set to: 0
 22167                           ;dans.c: 122: maze[x][y].Options = 4;
 22168  0116D6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22169  0116DA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22170  0116DE  0E00               	movlw	0
 22171  0116E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22172  0116E2  0E32               	movlw	50
 22173  0116E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22174  0116E6  EC40  F0C4         	call	___wmul	;wreg free
 22175  0116EA  0E00               	movlw	low _maze
 22176  0116EC  0100               	movlb	0	; () banked
 22177  0116EE  6F66               	movwf	??_Create_Maze& (0+255),b
 22178  0116F0  0E03               	movlw	high _maze
 22179  0116F2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22180  0116F4  5160               	movf	?___wmul& (0+255),w,b
 22181  0116F6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22182  0116F8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22183  0116FA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22184  0116FC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22185  011700  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22186  011704  0E00               	movlw	0
 22187  011706  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22188  011708  0E0A               	movlw	10
 22189  01170A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22190  01170C  EC40  F0C4         	call	___wmul	;wreg free
 22191  011710  0100               	movlb	0	; () banked
 22192  011712  5160               	movf	?___wmul& (0+255),w,b
 22193  011714  2766               	addwf	??_Create_Maze& (0+255),f,b
 22194  011716  5161               	movf	(?___wmul+1)& (0+255),w,b
 22195  011718  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22196  01171A  0E08               	movlw	8
 22197  01171C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22198  01171E  6ED9               	movwf	fsr2l,c
 22199  011720  0E00               	movlw	0
 22200  011722  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22201  011724  6EDA               	movwf	fsr2h,c
 22202  011726  0E04               	movlw	4
 22203  011728  6EDE               	movwf	postinc2,c
 22204  01172A  0E00               	movlw	0
 22205  01172C  6EDD               	movwf	postdec2,c
 22206                           
 22207                           ; BSR set to: 0
 22208                           ;dans.c: 124: ++y;
 22209  01172E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22210  011730  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22211                           
 22212                           ; BSR set to: 0
 22213                           ;dans.c: 125: maze[x][y].walls[0] = 1;
 22214  011732  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22215  011736  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22216  01173A  0E00               	movlw	0
 22217  01173C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22218  01173E  0E32               	movlw	50
 22219  011740  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22220  011742  EC40  F0C4         	call	___wmul	;wreg free
 22221  011746  0E00               	movlw	low _maze
 22222  011748  0100               	movlb	0	; () banked
 22223  01174A  6F66               	movwf	??_Create_Maze& (0+255),b
 22224  01174C  0E03               	movlw	high _maze
 22225  01174E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22226  011750  5160               	movf	?___wmul& (0+255),w,b
 22227  011752  2766               	addwf	??_Create_Maze& (0+255),f,b
 22228  011754  5161               	movf	(?___wmul+1)& (0+255),w,b
 22229  011756  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22230  011758  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22231  01175C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22232  011760  0E00               	movlw	0
 22233  011762  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22234  011764  0E0A               	movlw	10
 22235  011766  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22236  011768  EC40  F0C4         	call	___wmul	;wreg free
 22237  01176C  0100               	movlb	0	; () banked
 22238  01176E  5160               	movf	?___wmul& (0+255),w,b
 22239  011770  2766               	addwf	??_Create_Maze& (0+255),f,b
 22240  011772  5161               	movf	(?___wmul+1)& (0+255),w,b
 22241  011774  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22242  011776  0E04               	movlw	4
 22243  011778  2566               	addwf	??_Create_Maze& (0+255),w,b
 22244  01177A  6ED9               	movwf	fsr2l,c
 22245  01177C  0E00               	movlw	0
 22246  01177E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22247  011780  6EDA               	movwf	fsr2h,c
 22248  011782  0E01               	movlw	1
 22249  011784  6EDF               	movwf	indf2,c
 22250                           
 22251                           ; BSR set to: 0
 22252                           ;dans.c: 126: maze[x][y].walls[1] = 0;
 22253  011786  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22254  01178A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22255  01178E  0E00               	movlw	0
 22256  011790  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22257  011792  0E32               	movlw	50
 22258  011794  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22259  011796  EC40  F0C4         	call	___wmul	;wreg free
 22260  01179A  0E00               	movlw	low _maze
 22261  01179C  0100               	movlb	0	; () banked
 22262  01179E  6F66               	movwf	??_Create_Maze& (0+255),b
 22263  0117A0  0E03               	movlw	high _maze
 22264  0117A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22265  0117A4  5160               	movf	?___wmul& (0+255),w,b
 22266  0117A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22267  0117A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22268  0117AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22269  0117AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22270  0117B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22271  0117B4  0E00               	movlw	0
 22272  0117B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22273  0117B8  0E0A               	movlw	10
 22274  0117BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22275  0117BC  EC40  F0C4         	call	___wmul	;wreg free
 22276  0117C0  0100               	movlb	0	; () banked
 22277  0117C2  5160               	movf	?___wmul& (0+255),w,b
 22278  0117C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22279  0117C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22280  0117C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22281  0117CA  0E05               	movlw	5
 22282  0117CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22283  0117CE  6ED9               	movwf	fsr2l,c
 22284  0117D0  0E00               	movlw	0
 22285  0117D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22286  0117D4  6EDA               	movwf	fsr2h,c
 22287  0117D6  0E00               	movlw	0
 22288  0117D8  6EDF               	movwf	indf2,c
 22289                           
 22290                           ; BSR set to: 0
 22291                           ;dans.c: 127: maze[x][y].walls[2] = 1;
 22292  0117DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22293  0117DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22294  0117E2  0E00               	movlw	0
 22295  0117E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22296  0117E6  0E32               	movlw	50
 22297  0117E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22298  0117EA  EC40  F0C4         	call	___wmul	;wreg free
 22299  0117EE  0E00               	movlw	low _maze
 22300  0117F0  0100               	movlb	0	; () banked
 22301  0117F2  6F66               	movwf	??_Create_Maze& (0+255),b
 22302  0117F4  0E03               	movlw	high _maze
 22303  0117F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22304  0117F8  5160               	movf	?___wmul& (0+255),w,b
 22305  0117FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 22306  0117FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22307  0117FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22308  011800  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22309  011804  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22310  011808  0E00               	movlw	0
 22311  01180A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22312  01180C  0E0A               	movlw	10
 22313  01180E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22314  011810  EC40  F0C4         	call	___wmul	;wreg free
 22315  011814  0100               	movlb	0	; () banked
 22316  011816  5160               	movf	?___wmul& (0+255),w,b
 22317  011818  2766               	addwf	??_Create_Maze& (0+255),f,b
 22318  01181A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22319  01181C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22320  01181E  0E06               	movlw	6
 22321  011820  2566               	addwf	??_Create_Maze& (0+255),w,b
 22322  011822  6ED9               	movwf	fsr2l,c
 22323  011824  0E00               	movlw	0
 22324  011826  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22325  011828  6EDA               	movwf	fsr2h,c
 22326  01182A  0E01               	movlw	1
 22327  01182C  6EDF               	movwf	indf2,c
 22328                           
 22329                           ; BSR set to: 0
 22330                           ;dans.c: 128: maze[x][y].walls[3] = 0;
 22331  01182E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22332  011832  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22333  011836  0E00               	movlw	0
 22334  011838  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22335  01183A  0E32               	movlw	50
 22336  01183C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22337  01183E  EC40  F0C4         	call	___wmul	;wreg free
 22338  011842  0E00               	movlw	low _maze
 22339  011844  0100               	movlb	0	; () banked
 22340  011846  6F66               	movwf	??_Create_Maze& (0+255),b
 22341  011848  0E03               	movlw	high _maze
 22342  01184A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22343  01184C  5160               	movf	?___wmul& (0+255),w,b
 22344  01184E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22345  011850  5161               	movf	(?___wmul+1)& (0+255),w,b
 22346  011852  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22347  011854  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22348  011858  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22349  01185C  0E00               	movlw	0
 22350  01185E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22351  011860  0E0A               	movlw	10
 22352  011862  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22353  011864  EC40  F0C4         	call	___wmul	;wreg free
 22354  011868  0100               	movlb	0	; () banked
 22355  01186A  5160               	movf	?___wmul& (0+255),w,b
 22356  01186C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22357  01186E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22358  011870  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22359  011872  0E07               	movlw	7
 22360  011874  2566               	addwf	??_Create_Maze& (0+255),w,b
 22361  011876  6ED9               	movwf	fsr2l,c
 22362  011878  0E00               	movlw	0
 22363  01187A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22364  01187C  6EDA               	movwf	fsr2h,c
 22365  01187E  0E00               	movlw	0
 22366  011880  6EDF               	movwf	indf2,c
 22367                           
 22368                           ; BSR set to: 0
 22369                           ;dans.c: 129: maze[x][y].Options = 2;
 22370  011882  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22371  011886  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22372  01188A  0E00               	movlw	0
 22373  01188C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22374  01188E  0E32               	movlw	50
 22375  011890  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22376  011892  EC40  F0C4         	call	___wmul	;wreg free
 22377  011896  0E00               	movlw	low _maze
 22378  011898  0100               	movlb	0	; () banked
 22379  01189A  6F66               	movwf	??_Create_Maze& (0+255),b
 22380  01189C  0E03               	movlw	high _maze
 22381  01189E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22382  0118A0  5160               	movf	?___wmul& (0+255),w,b
 22383  0118A2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22384  0118A4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22385  0118A6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22386  0118A8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22387  0118AC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22388  0118B0  0E00               	movlw	0
 22389  0118B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22390  0118B4  0E0A               	movlw	10
 22391  0118B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22392  0118B8  EC40  F0C4         	call	___wmul	;wreg free
 22393  0118BC  0100               	movlb	0	; () banked
 22394  0118BE  5160               	movf	?___wmul& (0+255),w,b
 22395  0118C0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22396  0118C2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22397  0118C4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22398  0118C6  0E08               	movlw	8
 22399  0118C8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22400  0118CA  6ED9               	movwf	fsr2l,c
 22401  0118CC  0E00               	movlw	0
 22402  0118CE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22403  0118D0  6EDA               	movwf	fsr2h,c
 22404  0118D2  0E02               	movlw	2
 22405  0118D4  6EDE               	movwf	postinc2,c
 22406  0118D6  0E00               	movlw	0
 22407  0118D8  6EDD               	movwf	postdec2,c
 22408                           
 22409                           ; BSR set to: 0
 22410                           ;dans.c: 131: ++y;
 22411  0118DA  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22412  0118DC  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22413                           
 22414                           ; BSR set to: 0
 22415                           ;dans.c: 132: maze[x][y].walls[0] = 1;
 22416  0118DE  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22417  0118E2  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22418  0118E6  0E00               	movlw	0
 22419  0118E8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22420  0118EA  0E32               	movlw	50
 22421  0118EC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22422  0118EE  EC40  F0C4         	call	___wmul	;wreg free
 22423  0118F2  0E00               	movlw	low _maze
 22424  0118F4  0100               	movlb	0	; () banked
 22425  0118F6  6F66               	movwf	??_Create_Maze& (0+255),b
 22426  0118F8  0E03               	movlw	high _maze
 22427  0118FA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22428  0118FC  5160               	movf	?___wmul& (0+255),w,b
 22429  0118FE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22430  011900  5161               	movf	(?___wmul+1)& (0+255),w,b
 22431  011902  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22432  011904  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22433  011908  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22434  01190C  0E00               	movlw	0
 22435  01190E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22436  011910  0E0A               	movlw	10
 22437  011912  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22438  011914  EC40  F0C4         	call	___wmul	;wreg free
 22439  011918  0100               	movlb	0	; () banked
 22440  01191A  5160               	movf	?___wmul& (0+255),w,b
 22441  01191C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22442  01191E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22443  011920  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22444  011922  0E04               	movlw	4
 22445  011924  2566               	addwf	??_Create_Maze& (0+255),w,b
 22446  011926  6ED9               	movwf	fsr2l,c
 22447  011928  0E00               	movlw	0
 22448  01192A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22449  01192C  6EDA               	movwf	fsr2h,c
 22450  01192E  0E01               	movlw	1
 22451  011930  6EDF               	movwf	indf2,c
 22452                           
 22453                           ; BSR set to: 0
 22454                           ;dans.c: 133: maze[x][y].walls[1] = 1;
 22455  011932  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22456  011936  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22457  01193A  0E00               	movlw	0
 22458  01193C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22459  01193E  0E32               	movlw	50
 22460  011940  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22461  011942  EC40  F0C4         	call	___wmul	;wreg free
 22462  011946  0E00               	movlw	low _maze
 22463  011948  0100               	movlb	0	; () banked
 22464  01194A  6F66               	movwf	??_Create_Maze& (0+255),b
 22465  01194C  0E03               	movlw	high _maze
 22466  01194E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22467  011950  5160               	movf	?___wmul& (0+255),w,b
 22468  011952  2766               	addwf	??_Create_Maze& (0+255),f,b
 22469  011954  5161               	movf	(?___wmul+1)& (0+255),w,b
 22470  011956  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22471  011958  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22472  01195C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22473  011960  0E00               	movlw	0
 22474  011962  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22475  011964  0E0A               	movlw	10
 22476  011966  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22477  011968  EC40  F0C4         	call	___wmul	;wreg free
 22478  01196C  0100               	movlb	0	; () banked
 22479  01196E  5160               	movf	?___wmul& (0+255),w,b
 22480  011970  2766               	addwf	??_Create_Maze& (0+255),f,b
 22481  011972  5161               	movf	(?___wmul+1)& (0+255),w,b
 22482  011974  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22483  011976  0E05               	movlw	5
 22484  011978  2566               	addwf	??_Create_Maze& (0+255),w,b
 22485  01197A  6ED9               	movwf	fsr2l,c
 22486  01197C  0E00               	movlw	0
 22487  01197E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22488  011980  6EDA               	movwf	fsr2h,c
 22489  011982  0E01               	movlw	1
 22490  011984  6EDF               	movwf	indf2,c
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;dans.c: 134: maze[x][y].walls[2] = 0;
 22494  011986  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22495  01198A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22496  01198E  0E00               	movlw	0
 22497  011990  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22498  011992  0E32               	movlw	50
 22499  011994  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22500  011996  EC40  F0C4         	call	___wmul	;wreg free
 22501  01199A  0E00               	movlw	low _maze
 22502  01199C  0100               	movlb	0	; () banked
 22503  01199E  6F66               	movwf	??_Create_Maze& (0+255),b
 22504  0119A0  0E03               	movlw	high _maze
 22505  0119A2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22506  0119A4  5160               	movf	?___wmul& (0+255),w,b
 22507  0119A6  2766               	addwf	??_Create_Maze& (0+255),f,b
 22508  0119A8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22509  0119AA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22510  0119AC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22511  0119B0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22512  0119B4  0E00               	movlw	0
 22513  0119B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22514  0119B8  0E0A               	movlw	10
 22515  0119BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22516  0119BC  EC40  F0C4         	call	___wmul	;wreg free
 22517  0119C0  0100               	movlb	0	; () banked
 22518  0119C2  5160               	movf	?___wmul& (0+255),w,b
 22519  0119C4  2766               	addwf	??_Create_Maze& (0+255),f,b
 22520  0119C6  5161               	movf	(?___wmul+1)& (0+255),w,b
 22521  0119C8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22522  0119CA  0E06               	movlw	6
 22523  0119CC  2566               	addwf	??_Create_Maze& (0+255),w,b
 22524  0119CE  6ED9               	movwf	fsr2l,c
 22525  0119D0  0E00               	movlw	0
 22526  0119D2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22527  0119D4  6EDA               	movwf	fsr2h,c
 22528  0119D6  0E00               	movlw	0
 22529  0119D8  6EDF               	movwf	indf2,c
 22530                           
 22531                           ; BSR set to: 0
 22532                           ;dans.c: 135: maze[x][y].walls[3] = 0;
 22533  0119DA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22534  0119DE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22535  0119E2  0E00               	movlw	0
 22536  0119E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22537  0119E6  0E32               	movlw	50
 22538  0119E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22539  0119EA  EC40  F0C4         	call	___wmul	;wreg free
 22540  0119EE  0E00               	movlw	low _maze
 22541  0119F0  0100               	movlb	0	; () banked
 22542  0119F2  6F66               	movwf	??_Create_Maze& (0+255),b
 22543  0119F4  0E03               	movlw	high _maze
 22544  0119F6  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22545  0119F8  5160               	movf	?___wmul& (0+255),w,b
 22546  0119FA  2766               	addwf	??_Create_Maze& (0+255),f,b
 22547  0119FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22548  0119FE  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22549  011A00  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22550  011A04  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22551  011A08  0E00               	movlw	0
 22552  011A0A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22553  011A0C  0E0A               	movlw	10
 22554  011A0E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22555  011A10  EC40  F0C4         	call	___wmul	;wreg free
 22556  011A14  0100               	movlb	0	; () banked
 22557  011A16  5160               	movf	?___wmul& (0+255),w,b
 22558  011A18  2766               	addwf	??_Create_Maze& (0+255),f,b
 22559  011A1A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22560  011A1C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22561  011A1E  0E07               	movlw	7
 22562  011A20  2566               	addwf	??_Create_Maze& (0+255),w,b
 22563  011A22  6ED9               	movwf	fsr2l,c
 22564  011A24  0E00               	movlw	0
 22565  011A26  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22566  011A28  6EDA               	movwf	fsr2h,c
 22567  011A2A  0E00               	movlw	0
 22568  011A2C  6EDF               	movwf	indf2,c
 22569                           
 22570                           ; BSR set to: 0
 22571                           ;dans.c: 136: maze[x][y].Options = 2;
 22572  011A2E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22573  011A32  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22574  011A36  0E00               	movlw	0
 22575  011A38  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22576  011A3A  0E32               	movlw	50
 22577  011A3C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22578  011A3E  EC40  F0C4         	call	___wmul	;wreg free
 22579  011A42  0E00               	movlw	low _maze
 22580  011A44  0100               	movlb	0	; () banked
 22581  011A46  6F66               	movwf	??_Create_Maze& (0+255),b
 22582  011A48  0E03               	movlw	high _maze
 22583  011A4A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22584  011A4C  5160               	movf	?___wmul& (0+255),w,b
 22585  011A4E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22586  011A50  5161               	movf	(?___wmul+1)& (0+255),w,b
 22587  011A52  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22588  011A54  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22589  011A58  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22590  011A5C  0E00               	movlw	0
 22591  011A5E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22592  011A60  0E0A               	movlw	10
 22593  011A62  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22594  011A64  EC40  F0C4         	call	___wmul	;wreg free
 22595  011A68  0100               	movlb	0	; () banked
 22596  011A6A  5160               	movf	?___wmul& (0+255),w,b
 22597  011A6C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22598  011A6E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22599  011A70  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22600  011A72  0E08               	movlw	8
 22601  011A74  2566               	addwf	??_Create_Maze& (0+255),w,b
 22602  011A76  6ED9               	movwf	fsr2l,c
 22603  011A78  0E00               	movlw	0
 22604  011A7A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22605  011A7C  6EDA               	movwf	fsr2h,c
 22606  011A7E  0E02               	movlw	2
 22607  011A80  6EDE               	movwf	postinc2,c
 22608  011A82  0E00               	movlw	0
 22609  011A84  6EDD               	movwf	postdec2,c
 22610                           
 22611                           ; BSR set to: 0
 22612                           ;dans.c: 138: ++x;
 22613  011A86  4B6C               	infsnz	Create_Maze@x& (0+255),f,b
 22614  011A88  2B6D               	incf	(Create_Maze@x+1)& (0+255),f,b
 22615                           
 22616                           ; BSR set to: 0
 22617                           ;dans.c: 139: y=0;
 22618  011A8A  0E00               	movlw	0
 22619  011A8C  6F6F               	movwf	(Create_Maze@y+1)& (0+255),b
 22620  011A8E  0E00               	movlw	0
 22621  011A90  6F6E               	movwf	Create_Maze@y& (0+255),b
 22622                           
 22623                           ; BSR set to: 0
 22624                           ;dans.c: 140: maze[x][y].walls[0] = 0;
 22625  011A92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22626  011A96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22627  011A9A  0E00               	movlw	0
 22628  011A9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22629  011A9E  0E32               	movlw	50
 22630  011AA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22631  011AA2  EC40  F0C4         	call	___wmul	;wreg free
 22632  011AA6  0E00               	movlw	low _maze
 22633  011AA8  0100               	movlb	0	; () banked
 22634  011AAA  6F66               	movwf	??_Create_Maze& (0+255),b
 22635  011AAC  0E03               	movlw	high _maze
 22636  011AAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22637  011AB0  5160               	movf	?___wmul& (0+255),w,b
 22638  011AB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22639  011AB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22640  011AB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22641  011AB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22642  011ABC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22643  011AC0  0E00               	movlw	0
 22644  011AC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22645  011AC4  0E0A               	movlw	10
 22646  011AC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22647  011AC8  EC40  F0C4         	call	___wmul	;wreg free
 22648  011ACC  0100               	movlb	0	; () banked
 22649  011ACE  5160               	movf	?___wmul& (0+255),w,b
 22650  011AD0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22651  011AD2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22652  011AD4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22653  011AD6  0E04               	movlw	4
 22654  011AD8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22655  011ADA  6ED9               	movwf	fsr2l,c
 22656  011ADC  0E00               	movlw	0
 22657  011ADE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22658  011AE0  6EDA               	movwf	fsr2h,c
 22659  011AE2  0E00               	movlw	0
 22660  011AE4  6EDF               	movwf	indf2,c
 22661                           
 22662                           ; BSR set to: 0
 22663                           ;dans.c: 141: maze[x][y].walls[1] = 0;
 22664  011AE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22665  011AEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22666  011AEE  0E00               	movlw	0
 22667  011AF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22668  011AF2  0E32               	movlw	50
 22669  011AF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22670  011AF6  EC40  F0C4         	call	___wmul	;wreg free
 22671  011AFA  0E00               	movlw	low _maze
 22672  011AFC  0100               	movlb	0	; () banked
 22673  011AFE  6F66               	movwf	??_Create_Maze& (0+255),b
 22674  011B00  0E03               	movlw	high _maze
 22675  011B02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22676  011B04  5160               	movf	?___wmul& (0+255),w,b
 22677  011B06  2766               	addwf	??_Create_Maze& (0+255),f,b
 22678  011B08  5161               	movf	(?___wmul+1)& (0+255),w,b
 22679  011B0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22680  011B0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22681  011B10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22682  011B14  0E00               	movlw	0
 22683  011B16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22684  011B18  0E0A               	movlw	10
 22685  011B1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22686  011B1C  EC40  F0C4         	call	___wmul	;wreg free
 22687  011B20  0100               	movlb	0	; () banked
 22688  011B22  5160               	movf	?___wmul& (0+255),w,b
 22689  011B24  2766               	addwf	??_Create_Maze& (0+255),f,b
 22690  011B26  5161               	movf	(?___wmul+1)& (0+255),w,b
 22691  011B28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22692  011B2A  0E05               	movlw	5
 22693  011B2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22694  011B2E  6ED9               	movwf	fsr2l,c
 22695  011B30  0E00               	movlw	0
 22696  011B32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22697  011B34  6EDA               	movwf	fsr2h,c
 22698  011B36  0E00               	movlw	0
 22699  011B38  6EDF               	movwf	indf2,c
 22700                           
 22701                           ; BSR set to: 0
 22702                           ;dans.c: 142: maze[x][y].walls[2] = 1;
 22703  011B3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22704  011B3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22705  011B42  0E00               	movlw	0
 22706  011B44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22707  011B46  0E32               	movlw	50
 22708  011B48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22709  011B4A  EC40  F0C4         	call	___wmul	;wreg free
 22710  011B4E  0E00               	movlw	low _maze
 22711  011B50  0100               	movlb	0	; () banked
 22712  011B52  6F66               	movwf	??_Create_Maze& (0+255),b
 22713  011B54  0E03               	movlw	high _maze
 22714  011B56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22715  011B58  5160               	movf	?___wmul& (0+255),w,b
 22716  011B5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22717  011B5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22718  011B5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22719  011B60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22720  011B64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22721  011B68  0E00               	movlw	0
 22722  011B6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22723  011B6C  0E0A               	movlw	10
 22724  011B6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22725  011B70  EC40  F0C4         	call	___wmul	;wreg free
 22726  011B74  0100               	movlb	0	; () banked
 22727  011B76  5160               	movf	?___wmul& (0+255),w,b
 22728  011B78  2766               	addwf	??_Create_Maze& (0+255),f,b
 22729  011B7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22730  011B7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22731  011B7E  0E06               	movlw	6
 22732  011B80  2566               	addwf	??_Create_Maze& (0+255),w,b
 22733  011B82  6ED9               	movwf	fsr2l,c
 22734  011B84  0E00               	movlw	0
 22735  011B86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22736  011B88  6EDA               	movwf	fsr2h,c
 22737  011B8A  0E01               	movlw	1
 22738  011B8C  6EDF               	movwf	indf2,c
 22739                           
 22740                           ; BSR set to: 0
 22741                           ;dans.c: 143: maze[x][y].walls[3] = 1;
 22742  011B8E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22743  011B92  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22744  011B96  0E00               	movlw	0
 22745  011B98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22746  011B9A  0E32               	movlw	50
 22747  011B9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22748  011B9E  EC40  F0C4         	call	___wmul	;wreg free
 22749  011BA2  0E00               	movlw	low _maze
 22750  011BA4  0100               	movlb	0	; () banked
 22751  011BA6  6F66               	movwf	??_Create_Maze& (0+255),b
 22752  011BA8  0E03               	movlw	high _maze
 22753  011BAA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22754  011BAC  5160               	movf	?___wmul& (0+255),w,b
 22755  011BAE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22756  011BB0  5161               	movf	(?___wmul+1)& (0+255),w,b
 22757  011BB2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22758  011BB4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22759  011BB8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22760  011BBC  0E00               	movlw	0
 22761  011BBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22762  011BC0  0E0A               	movlw	10
 22763  011BC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22764  011BC4  EC40  F0C4         	call	___wmul	;wreg free
 22765  011BC8  0100               	movlb	0	; () banked
 22766  011BCA  5160               	movf	?___wmul& (0+255),w,b
 22767  011BCC  2766               	addwf	??_Create_Maze& (0+255),f,b
 22768  011BCE  5161               	movf	(?___wmul+1)& (0+255),w,b
 22769  011BD0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22770  011BD2  0E07               	movlw	7
 22771  011BD4  2566               	addwf	??_Create_Maze& (0+255),w,b
 22772  011BD6  6ED9               	movwf	fsr2l,c
 22773  011BD8  0E00               	movlw	0
 22774  011BDA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22775  011BDC  6EDA               	movwf	fsr2h,c
 22776  011BDE  0E01               	movlw	1
 22777  011BE0  6EDF               	movwf	indf2,c
 22778                           
 22779                           ; BSR set to: 0
 22780                           ;dans.c: 144: maze[x][y].Options = 2;
 22781  011BE2  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22782  011BE6  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22783  011BEA  0E00               	movlw	0
 22784  011BEC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22785  011BEE  0E32               	movlw	50
 22786  011BF0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22787  011BF2  EC40  F0C4         	call	___wmul	;wreg free
 22788  011BF6  0E00               	movlw	low _maze
 22789  011BF8  0100               	movlb	0	; () banked
 22790  011BFA  6F66               	movwf	??_Create_Maze& (0+255),b
 22791  011BFC  0E03               	movlw	high _maze
 22792  011BFE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22793  011C00  5160               	movf	?___wmul& (0+255),w,b
 22794  011C02  2766               	addwf	??_Create_Maze& (0+255),f,b
 22795  011C04  5161               	movf	(?___wmul+1)& (0+255),w,b
 22796  011C06  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22797  011C08  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22798  011C0C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22799  011C10  0E00               	movlw	0
 22800  011C12  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22801  011C14  0E0A               	movlw	10
 22802  011C16  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22803  011C18  EC40  F0C4         	call	___wmul	;wreg free
 22804  011C1C  0100               	movlb	0	; () banked
 22805  011C1E  5160               	movf	?___wmul& (0+255),w,b
 22806  011C20  2766               	addwf	??_Create_Maze& (0+255),f,b
 22807  011C22  5161               	movf	(?___wmul+1)& (0+255),w,b
 22808  011C24  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22809  011C26  0E08               	movlw	8
 22810  011C28  2566               	addwf	??_Create_Maze& (0+255),w,b
 22811  011C2A  6ED9               	movwf	fsr2l,c
 22812  011C2C  0E00               	movlw	0
 22813  011C2E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22814  011C30  6EDA               	movwf	fsr2h,c
 22815  011C32  0E02               	movlw	2
 22816  011C34  6EDE               	movwf	postinc2,c
 22817  011C36  0E00               	movlw	0
 22818  011C38  6EDD               	movwf	postdec2,c
 22819                           
 22820                           ; BSR set to: 0
 22821                           ;dans.c: 146: ++y;
 22822  011C3A  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 22823  011C3C  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 22824                           
 22825                           ;dans.c: 147: maze[x][y].walls[0] = 1;
 22826  011C3E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22827  011C42  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22828  011C46  0E00               	movlw	0
 22829  011C48  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22830  011C4A  0E32               	movlw	50
 22831  011C4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22832  011C4E  EC40  F0C4         	call	___wmul	;wreg free
 22833  011C52  0E00               	movlw	low _maze
 22834  011C54  0100               	movlb	0	; () banked
 22835  011C56  6F66               	movwf	??_Create_Maze& (0+255),b
 22836  011C58  0E03               	movlw	high _maze
 22837  011C5A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22838  011C5C  5160               	movf	?___wmul& (0+255),w,b
 22839  011C5E  2766               	addwf	??_Create_Maze& (0+255),f,b
 22840  011C60  5161               	movf	(?___wmul+1)& (0+255),w,b
 22841  011C62  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22842  011C64  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22843  011C68  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22844  011C6C  0E00               	movlw	0
 22845  011C6E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22846  011C70  0E0A               	movlw	10
 22847  011C72  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22848  011C74  EC40  F0C4         	call	___wmul	;wreg free
 22849  011C78  0100               	movlb	0	; () banked
 22850  011C7A  5160               	movf	?___wmul& (0+255),w,b
 22851  011C7C  2766               	addwf	??_Create_Maze& (0+255),f,b
 22852  011C7E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22853  011C80  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22854  011C82  0E04               	movlw	4
 22855  011C84  2566               	addwf	??_Create_Maze& (0+255),w,b
 22856  011C86  6ED9               	movwf	fsr2l,c
 22857  011C88  0E00               	movlw	0
 22858  011C8A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22859  011C8C  6EDA               	movwf	fsr2h,c
 22860  011C8E  0E01               	movlw	1
 22861  011C90  6EDF               	movwf	indf2,c
 22862                           
 22863                           ;dans.c: 148: maze[x][y].walls[1] = 1;
 22864  011C92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22865  011C96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22866  011C9A  0E00               	movlw	0
 22867  011C9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22868  011C9E  0E32               	movlw	50
 22869  011CA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22870  011CA2  EC40  F0C4         	call	___wmul	;wreg free
 22871  011CA6  0E00               	movlw	low _maze
 22872  011CA8  0100               	movlb	0	; () banked
 22873  011CAA  6F66               	movwf	??_Create_Maze& (0+255),b
 22874  011CAC  0E03               	movlw	high _maze
 22875  011CAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22876  011CB0  5160               	movf	?___wmul& (0+255),w,b
 22877  011CB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 22878  011CB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 22879  011CB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22880  011CB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22881  011CBC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22882  011CC0  0E00               	movlw	0
 22883  011CC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22884  011CC4  0E0A               	movlw	10
 22885  011CC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22886  011CC8  EC40  F0C4         	call	___wmul	;wreg free
 22887  011CCC  0100               	movlb	0	; () banked
 22888  011CCE  5160               	movf	?___wmul& (0+255),w,b
 22889  011CD0  2766               	addwf	??_Create_Maze& (0+255),f,b
 22890  011CD2  5161               	movf	(?___wmul+1)& (0+255),w,b
 22891  011CD4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22892  011CD6  0E05               	movlw	5
 22893  011CD8  2566               	addwf	??_Create_Maze& (0+255),w,b
 22894  011CDA  6ED9               	movwf	fsr2l,c
 22895  011CDC  0E00               	movlw	0
 22896  011CDE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22897  011CE0  6EDA               	movwf	fsr2h,c
 22898  011CE2  0E01               	movlw	1
 22899  011CE4  6EDF               	movwf	indf2,c
 22900                           
 22901                           ;dans.c: 149: maze[x][y].walls[2] = 1;
 22902  011CE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22903  011CEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22904  011CEE  0E00               	movlw	0
 22905  011CF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22906  011CF2  0E32               	movlw	50
 22907  011CF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22908  011CF6  EC40  F0C4         	call	___wmul	;wreg free
 22909  011CFA  0E00               	movlw	low _maze
 22910  011CFC  0100               	movlb	0	; () banked
 22911  011CFE  6F66               	movwf	??_Create_Maze& (0+255),b
 22912  011D00  0E03               	movlw	high _maze
 22913  011D02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22914  011D04  5160               	movf	?___wmul& (0+255),w,b
 22915  011D06  2766               	addwf	??_Create_Maze& (0+255),f,b
 22916  011D08  5161               	movf	(?___wmul+1)& (0+255),w,b
 22917  011D0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22918  011D0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22919  011D10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22920  011D14  0E00               	movlw	0
 22921  011D16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22922  011D18  0E0A               	movlw	10
 22923  011D1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22924  011D1C  EC40  F0C4         	call	___wmul	;wreg free
 22925  011D20  0100               	movlb	0	; () banked
 22926  011D22  5160               	movf	?___wmul& (0+255),w,b
 22927  011D24  2766               	addwf	??_Create_Maze& (0+255),f,b
 22928  011D26  5161               	movf	(?___wmul+1)& (0+255),w,b
 22929  011D28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22930  011D2A  0E06               	movlw	6
 22931  011D2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 22932  011D2E  6ED9               	movwf	fsr2l,c
 22933  011D30  0E00               	movlw	0
 22934  011D32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22935  011D34  6EDA               	movwf	fsr2h,c
 22936  011D36  0E01               	movlw	1
 22937  011D38  6EDF               	movwf	indf2,c
 22938                           
 22939                           ;dans.c: 150: maze[x][y].walls[3] = 0;
 22940  011D3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22941  011D3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22942  011D42  0E00               	movlw	0
 22943  011D44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22944  011D46  0E32               	movlw	50
 22945  011D48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22946  011D4A  EC40  F0C4         	call	___wmul	;wreg free
 22947  011D4E  0E00               	movlw	low _maze
 22948  011D50  0100               	movlb	0	; () banked
 22949  011D52  6F66               	movwf	??_Create_Maze& (0+255),b
 22950  011D54  0E03               	movlw	high _maze
 22951  011D56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22952  011D58  5160               	movf	?___wmul& (0+255),w,b
 22953  011D5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 22954  011D5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22955  011D5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22956  011D60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22957  011D64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22958  011D68  0E00               	movlw	0
 22959  011D6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22960  011D6C  0E0A               	movlw	10
 22961  011D6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22962  011D70  EC40  F0C4         	call	___wmul	;wreg free
 22963  011D74  0100               	movlb	0	; () banked
 22964  011D76  5160               	movf	?___wmul& (0+255),w,b
 22965  011D78  2766               	addwf	??_Create_Maze& (0+255),f,b
 22966  011D7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 22967  011D7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22968  011D7E  0E07               	movlw	7
 22969  011D80  2566               	addwf	??_Create_Maze& (0+255),w,b
 22970  011D82  6ED9               	movwf	fsr2l,c
 22971  011D84  0E00               	movlw	0
 22972  011D86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 22973  011D88  6EDA               	movwf	fsr2h,c
 22974  011D8A  0E00               	movlw	0
 22975  011D8C  6EDF               	movwf	indf2,c
 22976                           
 22977                           ;dans.c: 151: maze[x][y].Options = 1;
 22978  011D8E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 22979  011D92  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 22980  011D96  0E00               	movlw	0
 22981  011D98  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22982  011D9A  0E32               	movlw	50
 22983  011D9C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22984  011D9E  EC40  F0C4         	call	___wmul	;wreg free
 22985  011DA2  0E00               	movlw	low _maze
 22986  011DA4  0100               	movlb	0	; () banked
 22987  011DA6  6F66               	movwf	??_Create_Maze& (0+255),b
 22988  011DA8  0E03               	movlw	high _maze
 22989  011DAA  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 22990  011DAC  5160               	movf	?___wmul& (0+255),w,b
 22991  011DAE  2766               	addwf	??_Create_Maze& (0+255),f,b
 22992  011DB0  5161               	movf	(?___wmul+1)& (0+255),w,b
 22993  011DB2  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 22994  011DB4  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 22995  011DB8  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 22996  011DBC  0E00               	movlw	0
 22997  011DBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22998  011DC0  0E0A               	movlw	10
 22999  011DC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23000  011DC4  EC40  F0C4         	call	___wmul	;wreg free
 23001  011DC8  0100               	movlb	0	; () banked
 23002  011DCA  5160               	movf	?___wmul& (0+255),w,b
 23003  011DCC  2766               	addwf	??_Create_Maze& (0+255),f,b
 23004  011DCE  5161               	movf	(?___wmul+1)& (0+255),w,b
 23005  011DD0  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23006  011DD2  0E08               	movlw	8
 23007  011DD4  2566               	addwf	??_Create_Maze& (0+255),w,b
 23008  011DD6  6ED9               	movwf	fsr2l,c
 23009  011DD8  0E00               	movlw	0
 23010  011DDA  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23011  011DDC  6EDA               	movwf	fsr2h,c
 23012  011DDE  0E01               	movlw	1
 23013  011DE0  6EDE               	movwf	postinc2,c
 23014  011DE2  0E00               	movlw	0
 23015  011DE4  6EDD               	movwf	postdec2,c
 23016                           
 23017                           ; BSR set to: 0
 23018                           ;dans.c: 153: ++y;
 23019  011DE6  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 23020  011DE8  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 23021                           
 23022                           ; BSR set to: 0
 23023                           ;dans.c: 154: maze[x][y].walls[0] = 0;
 23024  011DEA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23025  011DEE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23026  011DF2  0E00               	movlw	0
 23027  011DF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23028  011DF6  0E32               	movlw	50
 23029  011DF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23030  011DFA  EC40  F0C4         	call	___wmul	;wreg free
 23031  011DFE  0E00               	movlw	low _maze
 23032  011E00  0100               	movlb	0	; () banked
 23033  011E02  6F66               	movwf	??_Create_Maze& (0+255),b
 23034  011E04  0E03               	movlw	high _maze
 23035  011E06  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23036  011E08  5160               	movf	?___wmul& (0+255),w,b
 23037  011E0A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23038  011E0C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23039  011E0E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23040  011E10  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23041  011E14  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23042  011E18  0E00               	movlw	0
 23043  011E1A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23044  011E1C  0E0A               	movlw	10
 23045  011E1E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23046  011E20  EC40  F0C4         	call	___wmul	;wreg free
 23047  011E24  0100               	movlb	0	; () banked
 23048  011E26  5160               	movf	?___wmul& (0+255),w,b
 23049  011E28  2766               	addwf	??_Create_Maze& (0+255),f,b
 23050  011E2A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23051  011E2C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23052  011E2E  0E04               	movlw	4
 23053  011E30  2566               	addwf	??_Create_Maze& (0+255),w,b
 23054  011E32  6ED9               	movwf	fsr2l,c
 23055  011E34  0E00               	movlw	0
 23056  011E36  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23057  011E38  6EDA               	movwf	fsr2h,c
 23058  011E3A  0E00               	movlw	0
 23059  011E3C  6EDF               	movwf	indf2,c
 23060                           
 23061                           ; BSR set to: 0
 23062                           ;dans.c: 155: maze[x][y].walls[1] = 1;
 23063  011E3E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23064  011E42  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23065  011E46  0E00               	movlw	0
 23066  011E48  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23067  011E4A  0E32               	movlw	50
 23068  011E4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23069  011E4E  EC40  F0C4         	call	___wmul	;wreg free
 23070  011E52  0E00               	movlw	low _maze
 23071  011E54  0100               	movlb	0	; () banked
 23072  011E56  6F66               	movwf	??_Create_Maze& (0+255),b
 23073  011E58  0E03               	movlw	high _maze
 23074  011E5A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23075  011E5C  5160               	movf	?___wmul& (0+255),w,b
 23076  011E5E  2766               	addwf	??_Create_Maze& (0+255),f,b
 23077  011E60  5161               	movf	(?___wmul+1)& (0+255),w,b
 23078  011E62  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23079  011E64  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23080  011E68  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23081  011E6C  0E00               	movlw	0
 23082  011E6E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23083  011E70  0E0A               	movlw	10
 23084  011E72  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23085  011E74  EC40  F0C4         	call	___wmul	;wreg free
 23086  011E78  0100               	movlb	0	; () banked
 23087  011E7A  5160               	movf	?___wmul& (0+255),w,b
 23088  011E7C  2766               	addwf	??_Create_Maze& (0+255),f,b
 23089  011E7E  5161               	movf	(?___wmul+1)& (0+255),w,b
 23090  011E80  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23091  011E82  0E05               	movlw	5
 23092  011E84  2566               	addwf	??_Create_Maze& (0+255),w,b
 23093  011E86  6ED9               	movwf	fsr2l,c
 23094  011E88  0E00               	movlw	0
 23095  011E8A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23096  011E8C  6EDA               	movwf	fsr2h,c
 23097  011E8E  0E01               	movlw	1
 23098  011E90  6EDF               	movwf	indf2,c
 23099                           
 23100                           ; BSR set to: 0
 23101                           ;dans.c: 156: maze[x][y].walls[2] = 1;
 23102  011E92  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23103  011E96  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23104  011E9A  0E00               	movlw	0
 23105  011E9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23106  011E9E  0E32               	movlw	50
 23107  011EA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23108  011EA2  EC40  F0C4         	call	___wmul	;wreg free
 23109  011EA6  0E00               	movlw	low _maze
 23110  011EA8  0100               	movlb	0	; () banked
 23111  011EAA  6F66               	movwf	??_Create_Maze& (0+255),b
 23112  011EAC  0E03               	movlw	high _maze
 23113  011EAE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23114  011EB0  5160               	movf	?___wmul& (0+255),w,b
 23115  011EB2  2766               	addwf	??_Create_Maze& (0+255),f,b
 23116  011EB4  5161               	movf	(?___wmul+1)& (0+255),w,b
 23117  011EB6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23118  011EB8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23119  011EBC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23120  011EC0  0E00               	movlw	0
 23121  011EC2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23122  011EC4  0E0A               	movlw	10
 23123  011EC6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23124  011EC8  EC40  F0C4         	call	___wmul	;wreg free
 23125  011ECC  0100               	movlb	0	; () banked
 23126  011ECE  5160               	movf	?___wmul& (0+255),w,b
 23127  011ED0  2766               	addwf	??_Create_Maze& (0+255),f,b
 23128  011ED2  5161               	movf	(?___wmul+1)& (0+255),w,b
 23129  011ED4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23130  011ED6  0E06               	movlw	6
 23131  011ED8  2566               	addwf	??_Create_Maze& (0+255),w,b
 23132  011EDA  6ED9               	movwf	fsr2l,c
 23133  011EDC  0E00               	movlw	0
 23134  011EDE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23135  011EE0  6EDA               	movwf	fsr2h,c
 23136  011EE2  0E01               	movlw	1
 23137  011EE4  6EDF               	movwf	indf2,c
 23138                           
 23139                           ; BSR set to: 0
 23140                           ;dans.c: 157: maze[x][y].walls[3] = 1;
 23141  011EE6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23142  011EEA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23143  011EEE  0E00               	movlw	0
 23144  011EF0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23145  011EF2  0E32               	movlw	50
 23146  011EF4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23147  011EF6  EC40  F0C4         	call	___wmul	;wreg free
 23148  011EFA  0E00               	movlw	low _maze
 23149  011EFC  0100               	movlb	0	; () banked
 23150  011EFE  6F66               	movwf	??_Create_Maze& (0+255),b
 23151  011F00  0E03               	movlw	high _maze
 23152  011F02  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23153  011F04  5160               	movf	?___wmul& (0+255),w,b
 23154  011F06  2766               	addwf	??_Create_Maze& (0+255),f,b
 23155  011F08  5161               	movf	(?___wmul+1)& (0+255),w,b
 23156  011F0A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23157  011F0C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23158  011F10  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23159  011F14  0E00               	movlw	0
 23160  011F16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23161  011F18  0E0A               	movlw	10
 23162  011F1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23163  011F1C  EC40  F0C4         	call	___wmul	;wreg free
 23164  011F20  0100               	movlb	0	; () banked
 23165  011F22  5160               	movf	?___wmul& (0+255),w,b
 23166  011F24  2766               	addwf	??_Create_Maze& (0+255),f,b
 23167  011F26  5161               	movf	(?___wmul+1)& (0+255),w,b
 23168  011F28  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23169  011F2A  0E07               	movlw	7
 23170  011F2C  2566               	addwf	??_Create_Maze& (0+255),w,b
 23171  011F2E  6ED9               	movwf	fsr2l,c
 23172  011F30  0E00               	movlw	0
 23173  011F32  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23174  011F34  6EDA               	movwf	fsr2h,c
 23175  011F36  0E01               	movlw	1
 23176  011F38  6EDF               	movwf	indf2,c
 23177                           
 23178                           ; BSR set to: 0
 23179                           ;dans.c: 158: maze[x][y].Options = 1;
 23180  011F3A  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23181  011F3E  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23182  011F42  0E00               	movlw	0
 23183  011F44  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23184  011F46  0E32               	movlw	50
 23185  011F48  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23186  011F4A  EC40  F0C4         	call	___wmul	;wreg free
 23187  011F4E  0E00               	movlw	low _maze
 23188  011F50  0100               	movlb	0	; () banked
 23189  011F52  6F66               	movwf	??_Create_Maze& (0+255),b
 23190  011F54  0E03               	movlw	high _maze
 23191  011F56  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23192  011F58  5160               	movf	?___wmul& (0+255),w,b
 23193  011F5A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23194  011F5C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23195  011F5E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23196  011F60  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23197  011F64  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23198  011F68  0E00               	movlw	0
 23199  011F6A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23200  011F6C  0E0A               	movlw	10
 23201  011F6E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23202  011F70  EC40  F0C4         	call	___wmul	;wreg free
 23203  011F74  0100               	movlb	0	; () banked
 23204  011F76  5160               	movf	?___wmul& (0+255),w,b
 23205  011F78  2766               	addwf	??_Create_Maze& (0+255),f,b
 23206  011F7A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23207  011F7C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23208  011F7E  0E08               	movlw	8
 23209  011F80  2566               	addwf	??_Create_Maze& (0+255),w,b
 23210  011F82  6ED9               	movwf	fsr2l,c
 23211  011F84  0E00               	movlw	0
 23212  011F86  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23213  011F88  6EDA               	movwf	fsr2h,c
 23214  011F8A  0E01               	movlw	1
 23215  011F8C  6EDE               	movwf	postinc2,c
 23216  011F8E  0E00               	movlw	0
 23217  011F90  6EDD               	movwf	postdec2,c
 23218                           
 23219                           ;dans.c: 160: ++y;
 23220  011F92  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 23221  011F94  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 23222                           
 23223                           ; BSR set to: 0
 23224                           ;dans.c: 161: maze[x][y].walls[0] = 1;
 23225  011F96  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23226  011F9A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23227  011F9E  0E00               	movlw	0
 23228  011FA0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23229  011FA2  0E32               	movlw	50
 23230  011FA4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23231  011FA6  EC40  F0C4         	call	___wmul	;wreg free
 23232  011FAA  0E00               	movlw	low _maze
 23233  011FAC  0100               	movlb	0	; () banked
 23234  011FAE  6F66               	movwf	??_Create_Maze& (0+255),b
 23235  011FB0  0E03               	movlw	high _maze
 23236  011FB2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23237  011FB4  5160               	movf	?___wmul& (0+255),w,b
 23238  011FB6  2766               	addwf	??_Create_Maze& (0+255),f,b
 23239  011FB8  5161               	movf	(?___wmul+1)& (0+255),w,b
 23240  011FBA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23241  011FBC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23242  011FC0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23243  011FC4  0E00               	movlw	0
 23244  011FC6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23245  011FC8  0E0A               	movlw	10
 23246  011FCA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23247  011FCC  EC40  F0C4         	call	___wmul	;wreg free
 23248  011FD0  0100               	movlb	0	; () banked
 23249  011FD2  5160               	movf	?___wmul& (0+255),w,b
 23250  011FD4  2766               	addwf	??_Create_Maze& (0+255),f,b
 23251  011FD6  5161               	movf	(?___wmul+1)& (0+255),w,b
 23252  011FD8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23253  011FDA  0E04               	movlw	4
 23254  011FDC  2566               	addwf	??_Create_Maze& (0+255),w,b
 23255  011FDE  6ED9               	movwf	fsr2l,c
 23256  011FE0  0E00               	movlw	0
 23257  011FE2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23258  011FE4  6EDA               	movwf	fsr2h,c
 23259  011FE6  0E01               	movlw	1
 23260  011FE8  6EDF               	movwf	indf2,c
 23261                           
 23262                           ; BSR set to: 0
 23263                           ;dans.c: 162: maze[x][y].walls[1] = 0;
 23264  011FEA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23265  011FEE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23266  011FF2  0E00               	movlw	0
 23267  011FF4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23268  011FF6  0E32               	movlw	50
 23269  011FF8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23270  011FFA  EC40  F0C4         	call	___wmul	;wreg free
 23271  011FFE  0E00               	movlw	low _maze
 23272  012000  0100               	movlb	0	; () banked
 23273  012002  6F66               	movwf	??_Create_Maze& (0+255),b
 23274  012004  0E03               	movlw	high _maze
 23275  012006  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23276  012008  5160               	movf	?___wmul& (0+255),w,b
 23277  01200A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23278  01200C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23279  01200E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23280  012010  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23281  012014  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23282  012018  0E00               	movlw	0
 23283  01201A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23284  01201C  0E0A               	movlw	10
 23285  01201E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23286  012020  EC40  F0C4         	call	___wmul	;wreg free
 23287  012024  0100               	movlb	0	; () banked
 23288  012026  5160               	movf	?___wmul& (0+255),w,b
 23289  012028  2766               	addwf	??_Create_Maze& (0+255),f,b
 23290  01202A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23291  01202C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23292  01202E  0E05               	movlw	5
 23293  012030  2566               	addwf	??_Create_Maze& (0+255),w,b
 23294  012032  6ED9               	movwf	fsr2l,c
 23295  012034  0E00               	movlw	0
 23296  012036  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23297  012038  6EDA               	movwf	fsr2h,c
 23298  01203A  0E00               	movlw	0
 23299  01203C  6EDF               	movwf	indf2,c
 23300                           
 23301                           ; BSR set to: 0
 23302                           ;dans.c: 163: maze[x][y].walls[2] = 1;
 23303  01203E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23304  012042  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23305  012046  0E00               	movlw	0
 23306  012048  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23307  01204A  0E32               	movlw	50
 23308  01204C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23309  01204E  EC40  F0C4         	call	___wmul	;wreg free
 23310  012052  0E00               	movlw	low _maze
 23311  012054  0100               	movlb	0	; () banked
 23312  012056  6F66               	movwf	??_Create_Maze& (0+255),b
 23313  012058  0E03               	movlw	high _maze
 23314  01205A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23315  01205C  5160               	movf	?___wmul& (0+255),w,b
 23316  01205E  2766               	addwf	??_Create_Maze& (0+255),f,b
 23317  012060  5161               	movf	(?___wmul+1)& (0+255),w,b
 23318  012062  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23319  012064  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23320  012068  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23321  01206C  0E00               	movlw	0
 23322  01206E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23323  012070  0E0A               	movlw	10
 23324  012072  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23325  012074  EC40  F0C4         	call	___wmul	;wreg free
 23326  012078  0100               	movlb	0	; () banked
 23327  01207A  5160               	movf	?___wmul& (0+255),w,b
 23328  01207C  2766               	addwf	??_Create_Maze& (0+255),f,b
 23329  01207E  5161               	movf	(?___wmul+1)& (0+255),w,b
 23330  012080  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23331  012082  0E06               	movlw	6
 23332  012084  2566               	addwf	??_Create_Maze& (0+255),w,b
 23333  012086  6ED9               	movwf	fsr2l,c
 23334  012088  0E00               	movlw	0
 23335  01208A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23336  01208C  6EDA               	movwf	fsr2h,c
 23337  01208E  0E01               	movlw	1
 23338  012090  6EDF               	movwf	indf2,c
 23339                           
 23340                           ; BSR set to: 0
 23341                           ;dans.c: 164: maze[x][y].walls[3] = 1;
 23342  012092  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23343  012096  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23344  01209A  0E00               	movlw	0
 23345  01209C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23346  01209E  0E32               	movlw	50
 23347  0120A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23348  0120A2  EC40  F0C4         	call	___wmul	;wreg free
 23349  0120A6  0E00               	movlw	low _maze
 23350  0120A8  0100               	movlb	0	; () banked
 23351  0120AA  6F66               	movwf	??_Create_Maze& (0+255),b
 23352  0120AC  0E03               	movlw	high _maze
 23353  0120AE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23354  0120B0  5160               	movf	?___wmul& (0+255),w,b
 23355  0120B2  2766               	addwf	??_Create_Maze& (0+255),f,b
 23356  0120B4  5161               	movf	(?___wmul+1)& (0+255),w,b
 23357  0120B6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23358  0120B8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23359  0120BC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23360  0120C0  0E00               	movlw	0
 23361  0120C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23362  0120C4  0E0A               	movlw	10
 23363  0120C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23364  0120C8  EC40  F0C4         	call	___wmul	;wreg free
 23365  0120CC  0100               	movlb	0	; () banked
 23366  0120CE  5160               	movf	?___wmul& (0+255),w,b
 23367  0120D0  2766               	addwf	??_Create_Maze& (0+255),f,b
 23368  0120D2  5161               	movf	(?___wmul+1)& (0+255),w,b
 23369  0120D4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23370  0120D6  0E07               	movlw	7
 23371  0120D8  2566               	addwf	??_Create_Maze& (0+255),w,b
 23372  0120DA  6ED9               	movwf	fsr2l,c
 23373  0120DC  0E00               	movlw	0
 23374  0120DE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23375  0120E0  6EDA               	movwf	fsr2h,c
 23376  0120E2  0E01               	movlw	1
 23377  0120E4  6EDF               	movwf	indf2,c
 23378                           
 23379                           ; BSR set to: 0
 23380                           ;dans.c: 165: maze[x][y].Options = 1;
 23381  0120E6  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23382  0120EA  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23383  0120EE  0E00               	movlw	0
 23384  0120F0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23385  0120F2  0E32               	movlw	50
 23386  0120F4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23387  0120F6  EC40  F0C4         	call	___wmul	;wreg free
 23388  0120FA  0E00               	movlw	low _maze
 23389  0120FC  0100               	movlb	0	; () banked
 23390  0120FE  6F66               	movwf	??_Create_Maze& (0+255),b
 23391  012100  0E03               	movlw	high _maze
 23392  012102  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23393  012104  5160               	movf	?___wmul& (0+255),w,b
 23394  012106  2766               	addwf	??_Create_Maze& (0+255),f,b
 23395  012108  5161               	movf	(?___wmul+1)& (0+255),w,b
 23396  01210A  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23397  01210C  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23398  012110  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23399  012114  0E00               	movlw	0
 23400  012116  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23401  012118  0E0A               	movlw	10
 23402  01211A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23403  01211C  EC40  F0C4         	call	___wmul	;wreg free
 23404  012120  0100               	movlb	0	; () banked
 23405  012122  5160               	movf	?___wmul& (0+255),w,b
 23406  012124  2766               	addwf	??_Create_Maze& (0+255),f,b
 23407  012126  5161               	movf	(?___wmul+1)& (0+255),w,b
 23408  012128  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23409  01212A  0E08               	movlw	8
 23410  01212C  2566               	addwf	??_Create_Maze& (0+255),w,b
 23411  01212E  6ED9               	movwf	fsr2l,c
 23412  012130  0E00               	movlw	0
 23413  012132  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23414  012134  6EDA               	movwf	fsr2h,c
 23415  012136  0E01               	movlw	1
 23416  012138  6EDE               	movwf	postinc2,c
 23417  01213A  0E00               	movlw	0
 23418  01213C  6EDD               	movwf	postdec2,c
 23419                           
 23420                           ; BSR set to: 0
 23421                           ;dans.c: 167: ++y;
 23422  01213E  4B6E               	infsnz	Create_Maze@y& (0+255),f,b
 23423  012140  2B6F               	incf	(Create_Maze@y+1)& (0+255),f,b
 23424                           
 23425                           ;dans.c: 168: maze[x][y].walls[0] = 0;
 23426  012142  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23427  012146  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23428  01214A  0E00               	movlw	0
 23429  01214C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23430  01214E  0E32               	movlw	50
 23431  012150  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23432  012152  EC40  F0C4         	call	___wmul	;wreg free
 23433  012156  0E00               	movlw	low _maze
 23434  012158  0100               	movlb	0	; () banked
 23435  01215A  6F66               	movwf	??_Create_Maze& (0+255),b
 23436  01215C  0E03               	movlw	high _maze
 23437  01215E  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23438  012160  5160               	movf	?___wmul& (0+255),w,b
 23439  012162  2766               	addwf	??_Create_Maze& (0+255),f,b
 23440  012164  5161               	movf	(?___wmul+1)& (0+255),w,b
 23441  012166  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23442  012168  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23443  01216C  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23444  012170  0E00               	movlw	0
 23445  012172  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23446  012174  0E0A               	movlw	10
 23447  012176  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23448  012178  EC40  F0C4         	call	___wmul	;wreg free
 23449  01217C  0100               	movlb	0	; () banked
 23450  01217E  5160               	movf	?___wmul& (0+255),w,b
 23451  012180  2766               	addwf	??_Create_Maze& (0+255),f,b
 23452  012182  5161               	movf	(?___wmul+1)& (0+255),w,b
 23453  012184  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23454  012186  0E04               	movlw	4
 23455  012188  2566               	addwf	??_Create_Maze& (0+255),w,b
 23456  01218A  6ED9               	movwf	fsr2l,c
 23457  01218C  0E00               	movlw	0
 23458  01218E  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23459  012190  6EDA               	movwf	fsr2h,c
 23460  012192  0E00               	movlw	0
 23461  012194  6EDF               	movwf	indf2,c
 23462                           
 23463                           ;dans.c: 169: maze[x][y].walls[1] = 1;
 23464  012196  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23465  01219A  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23466  01219E  0E00               	movlw	0
 23467  0121A0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23468  0121A2  0E32               	movlw	50
 23469  0121A4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23470  0121A6  EC40  F0C4         	call	___wmul	;wreg free
 23471  0121AA  0E00               	movlw	low _maze
 23472  0121AC  0100               	movlb	0	; () banked
 23473  0121AE  6F66               	movwf	??_Create_Maze& (0+255),b
 23474  0121B0  0E03               	movlw	high _maze
 23475  0121B2  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23476  0121B4  5160               	movf	?___wmul& (0+255),w,b
 23477  0121B6  2766               	addwf	??_Create_Maze& (0+255),f,b
 23478  0121B8  5161               	movf	(?___wmul+1)& (0+255),w,b
 23479  0121BA  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23480  0121BC  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23481  0121C0  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23482  0121C4  0E00               	movlw	0
 23483  0121C6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23484  0121C8  0E0A               	movlw	10
 23485  0121CA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23486  0121CC  EC40  F0C4         	call	___wmul	;wreg free
 23487  0121D0  0100               	movlb	0	; () banked
 23488  0121D2  5160               	movf	?___wmul& (0+255),w,b
 23489  0121D4  2766               	addwf	??_Create_Maze& (0+255),f,b
 23490  0121D6  5161               	movf	(?___wmul+1)& (0+255),w,b
 23491  0121D8  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23492  0121DA  0E05               	movlw	5
 23493  0121DC  2566               	addwf	??_Create_Maze& (0+255),w,b
 23494  0121DE  6ED9               	movwf	fsr2l,c
 23495  0121E0  0E00               	movlw	0
 23496  0121E2  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23497  0121E4  6EDA               	movwf	fsr2h,c
 23498  0121E6  0E01               	movlw	1
 23499  0121E8  6EDF               	movwf	indf2,c
 23500                           
 23501                           ;dans.c: 170: maze[x][y].walls[2] = 1;
 23502  0121EA  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23503  0121EE  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23504  0121F2  0E00               	movlw	0
 23505  0121F4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23506  0121F6  0E32               	movlw	50
 23507  0121F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23508  0121FA  EC40  F0C4         	call	___wmul	;wreg free
 23509  0121FE  0E00               	movlw	low _maze
 23510  012200  0100               	movlb	0	; () banked
 23511  012202  6F66               	movwf	??_Create_Maze& (0+255),b
 23512  012204  0E03               	movlw	high _maze
 23513  012206  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23514  012208  5160               	movf	?___wmul& (0+255),w,b
 23515  01220A  2766               	addwf	??_Create_Maze& (0+255),f,b
 23516  01220C  5161               	movf	(?___wmul+1)& (0+255),w,b
 23517  01220E  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23518  012210  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23519  012214  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23520  012218  0E00               	movlw	0
 23521  01221A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23522  01221C  0E0A               	movlw	10
 23523  01221E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23524  012220  EC40  F0C4         	call	___wmul	;wreg free
 23525  012224  0100               	movlb	0	; () banked
 23526  012226  5160               	movf	?___wmul& (0+255),w,b
 23527  012228  2766               	addwf	??_Create_Maze& (0+255),f,b
 23528  01222A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23529  01222C  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23530  01222E  0E06               	movlw	6
 23531  012230  2566               	addwf	??_Create_Maze& (0+255),w,b
 23532  012232  6ED9               	movwf	fsr2l,c
 23533  012234  0E00               	movlw	0
 23534  012236  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23535  012238  6EDA               	movwf	fsr2h,c
 23536  01223A  0E01               	movlw	1
 23537  01223C  6EDF               	movwf	indf2,c
 23538                           
 23539                           ;dans.c: 171: maze[x][y].walls[3] = 0;
 23540  01223E  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23541  012242  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23542  012246  0E00               	movlw	0
 23543  012248  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23544  01224A  0E32               	movlw	50
 23545  01224C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23546  01224E  EC40  F0C4         	call	___wmul	;wreg free
 23547  012252  0E00               	movlw	low _maze
 23548  012254  0100               	movlb	0	; () banked
 23549  012256  6F66               	movwf	??_Create_Maze& (0+255),b
 23550  012258  0E03               	movlw	high _maze
 23551  01225A  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23552  01225C  5160               	movf	?___wmul& (0+255),w,b
 23553  01225E  2766               	addwf	??_Create_Maze& (0+255),f,b
 23554  012260  5161               	movf	(?___wmul+1)& (0+255),w,b
 23555  012262  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23556  012264  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23557  012268  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23558  01226C  0E00               	movlw	0
 23559  01226E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23560  012270  0E0A               	movlw	10
 23561  012272  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23562  012274  EC40  F0C4         	call	___wmul	;wreg free
 23563  012278  0100               	movlb	0	; () banked
 23564  01227A  5160               	movf	?___wmul& (0+255),w,b
 23565  01227C  2766               	addwf	??_Create_Maze& (0+255),f,b
 23566  01227E  5161               	movf	(?___wmul+1)& (0+255),w,b
 23567  012280  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23568  012282  0E07               	movlw	7
 23569  012284  2566               	addwf	??_Create_Maze& (0+255),w,b
 23570  012286  6ED9               	movwf	fsr2l,c
 23571  012288  0E00               	movlw	0
 23572  01228A  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23573  01228C  6EDA               	movwf	fsr2h,c
 23574  01228E  0E00               	movlw	0
 23575  012290  6EDF               	movwf	indf2,c
 23576                           
 23577                           ;dans.c: 172: maze[x][y].Options = 2;
 23578  012292  C06C  F060         	movff	Create_Maze@x,___wmul@multiplier
 23579  012296  C06D  F061         	movff	Create_Maze@x+1,___wmul@multiplier+1
 23580  01229A  0E00               	movlw	0
 23581  01229C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23582  01229E  0E32               	movlw	50
 23583  0122A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23584  0122A2  EC40  F0C4         	call	___wmul	;wreg free
 23585  0122A6  0E00               	movlw	low _maze
 23586  0122A8  0100               	movlb	0	; () banked
 23587  0122AA  6F66               	movwf	??_Create_Maze& (0+255),b
 23588  0122AC  0E03               	movlw	high _maze
 23589  0122AE  6F67               	movwf	(??_Create_Maze+1)& (0+255),b
 23590  0122B0  5160               	movf	?___wmul& (0+255),w,b
 23591  0122B2  2766               	addwf	??_Create_Maze& (0+255),f,b
 23592  0122B4  5161               	movf	(?___wmul+1)& (0+255),w,b
 23593  0122B6  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23594  0122B8  C06E  F060         	movff	Create_Maze@y,___wmul@multiplier
 23595  0122BC  C06F  F061         	movff	Create_Maze@y+1,___wmul@multiplier+1
 23596  0122C0  0E00               	movlw	0
 23597  0122C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23598  0122C4  0E0A               	movlw	10
 23599  0122C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23600  0122C8  EC40  F0C4         	call	___wmul	;wreg free
 23601  0122CC  0100               	movlb	0	; () banked
 23602  0122CE  5160               	movf	?___wmul& (0+255),w,b
 23603  0122D0  2766               	addwf	??_Create_Maze& (0+255),f,b
 23604  0122D2  5161               	movf	(?___wmul+1)& (0+255),w,b
 23605  0122D4  2367               	addwfc	(??_Create_Maze+1)& (0+255),f,b
 23606  0122D6  0E08               	movlw	8
 23607  0122D8  2566               	addwf	??_Create_Maze& (0+255),w,b
 23608  0122DA  6ED9               	movwf	fsr2l,c
 23609  0122DC  0E00               	movlw	0
 23610  0122DE  2167               	addwfc	(??_Create_Maze+1)& (0+255),w,b
 23611  0122E0  6EDA               	movwf	fsr2h,c
 23612  0122E2  0E02               	movlw	2
 23613  0122E4  6EDE               	movwf	postinc2,c
 23614  0122E6  0E00               	movlw	0
 23615  0122E8  6EDD               	movwf	postdec2,c
 23616                           
 23617                           ; BSR set to: 0
 23618  0122EA  0012               	return		;funcret
 23619  0122EC                     __end_of_Create_Maze:
 23620                           	opt stack 0
 23621                           tosu	equ	0xFFF
 23622                           tosh	equ	0xFFE
 23623                           tosl	equ	0xFFD
 23624                           pclath	equ	0xFFA
 23625                           tblptru	equ	0xFF8
 23626                           tblptrh	equ	0xFF7
 23627                           tblptrl	equ	0xFF6
 23628                           tablat	equ	0xFF5
 23629                           prodh	equ	0xFF4
 23630                           prodl	equ	0xFF3
 23631                           intcon	equ	0xFF2
 23632                           indf0	equ	0xFEF
 23633                           postinc0	equ	0xFEE
 23634                           fsr0h	equ	0xFEA
 23635                           fsr0l	equ	0xFE9
 23636                           wreg	equ	0xFE8
 23637                           indf1	equ	0xFE7
 23638                           postdec1	equ	0xFE5
 23639                           fsr1h	equ	0xFE2
 23640                           fsr1l	equ	0xFE1
 23641                           indf2	equ	0xFDF
 23642                           postinc2	equ	0xFDE
 23643                           postdec2	equ	0xFDD
 23644                           plusw2	equ	0xFDB
 23645                           fsr2h	equ	0xFDA
 23646                           fsr2l	equ	0xFD9
 23647                           status	equ	0xFD8
 23648                           
 23649 ;; *************** function _Console_Init *****************
 23650 ;; Defined at:
 23651 ;;		line 157 in file "Library/Console.c"
 23652 ;; Parameters:    Size  Location     Type
 23653 ;;		None
 23654 ;; Auto vars:     Size  Location     Type
 23655 ;;  y               1    3[BANK0 ] unsigned char 
 23656 ;;  x               1    2[BANK0 ] unsigned char 
 23657 ;; Return value:  Size  Location     Type
 23658 ;;                  1    wreg      void 
 23659 ;; Registers used:
 23660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23661 ;; Tracked objects:
 23662 ;;		On entry : 0/0
 23663 ;;		On exit  : 0/0
 23664 ;;		Unchanged: 0/0
 23665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23667 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23668 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23669 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23670 ;;Total ram usage:        4 bytes
 23671 ;; Hardware stack levels used:    1
 23672 ;; Hardware stack levels required when called:    7
 23673 ;; This function calls:
 23674 ;;		Nothing
 23675 ;; This function is called by:
 23676 ;;		_main
 23677 ;; This function uses a non-reentrant model
 23678 ;;
 23679                           
 23680                           	psect	text100
 23681  0179F0                     __ptext100:
 23682                           	opt stack 0
 23683  0179F0                     _Console_Init:
 23684                           	opt stack 23
 23685                           
 23686                           ;Console.c: 160: lBufferX = 0;
 23687                           
 23688                           ; BSR set to: 0
 23689                           ;incstack = 0
 23690  0179F0  0E00               	movlw	0
 23691  0179F2  6E46               	movwf	_lBufferX,c
 23692                           
 23693                           ;Console.c: 161: lBufferY = 0;
 23694  0179F4  0E00               	movlw	0
 23695  0179F6  6E45               	movwf	_lBufferY,c
 23696                           
 23697                           ;Console.c: 163: UINT8 x, y;
 23698                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23699  0179F8  0E00               	movlw	0
 23700  0179FA  0100               	movlb	0	; () banked
 23701  0179FC  6F62               	movwf	Console_Init@x& (0+255),b
 23702  0179FE                     l16579:
 23703                           
 23704                           ; BSR set to: 0
 23705  0179FE  0E13               	movlw	19
 23706  017A00  6562               	cpfsgt	Console_Init@x& (0+255),b
 23707  017A02  D001               	goto	l976
 23708  017A04  0012               	return	
 23709  017A06                     l976:
 23710                           
 23711                           ; BSR set to: 0
 23712                           ;Console.c: 165: {
 23713                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23714                           
 23715                           ; BSR set to: 0
 23716  017A06  0E00               	movlw	0
 23717  017A08  6F63               	movwf	Console_Init@y& (0+255),b
 23718  017A0A                     l16585:
 23719                           
 23720                           ; BSR set to: 0
 23721  017A0A  0E0E               	movlw	14
 23722  017A0C  6563               	cpfsgt	Console_Init@y& (0+255),b
 23723  017A0E  D001               	goto	l978
 23724  017A10  D022               	goto	u14100
 23725  017A12                     l978:
 23726                           
 23727                           ; BSR set to: 0
 23728                           ;Console.c: 167: {
 23729                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23730                           
 23731                           ; BSR set to: 0
 23732  017A12  5163               	movf	Console_Init@y& (0+255),w,b
 23733  017A14  0D14               	mullw	20
 23734  017A16  0E46               	movlw	low _lBuffer
 23735  017A18  6F60               	movwf	??_Console_Init& (0+255),b
 23736  017A1A  0E04               	movlw	high _lBuffer
 23737  017A1C  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 23738  017A1E  50F3               	movf	prodl,w,c
 23739  017A20  2760               	addwf	??_Console_Init& (0+255),f,b
 23740  017A22  50F4               	movf	prodh,w,c
 23741  017A24  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23742  017A26  5162               	movf	Console_Init@x& (0+255),w,b
 23743  017A28  0D01               	mullw	1
 23744  017A2A  50F3               	movf	prodl,w,c
 23745  017A2C  2560               	addwf	??_Console_Init& (0+255),w,b
 23746  017A2E  6ED9               	movwf	fsr2l,c
 23747  017A30  50F4               	movf	prodh,w,c
 23748  017A32  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23749  017A34  6EDA               	movwf	fsr2h,c
 23750  017A36  0E00               	movlw	0
 23751  017A38  6EDF               	movwf	indf2,c
 23752                           
 23753                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23754  017A3A  5163               	movf	Console_Init@y& (0+255),w,b
 23755  017A3C  0D02               	mullw	2
 23756  017A3E  0E28               	movlw	low _lCBuffer
 23757  017A40  24F3               	addwf	prodl,w,c
 23758  017A42  6ED9               	movwf	fsr2l,c
 23759  017A44  0E02               	movlw	high _lCBuffer
 23760  017A46  20F4               	addwfc	prodh,w,c
 23761  017A48  6EDA               	movwf	fsr2h,c
 23762  017A4A  0EFF               	movlw	255
 23763  017A4C  6EDE               	movwf	postinc2,c
 23764  017A4E  0EFF               	movlw	255
 23765  017A50  6EDD               	movwf	postdec2,c
 23766                           
 23767                           ; BSR set to: 0
 23768  017A52  2B63               	incf	Console_Init@y& (0+255),f,b
 23769  017A54  D7DA               	goto	l16585
 23770  017A56                     u14100:
 23771                           
 23772                           ; BSR set to: 0
 23773                           
 23774                           ; BSR set to: 0
 23775  017A56  2B62               	incf	Console_Init@x& (0+255),f,b
 23776  017A58  D7D2               	goto	l16579
 23777  017A5A                     __end_of_Console_Init:
 23778                           	opt stack 0
 23779                           tosu	equ	0xFFF
 23780                           tosh	equ	0xFFE
 23781                           tosl	equ	0xFFD
 23782                           pclath	equ	0xFFA
 23783                           tblptru	equ	0xFF8
 23784                           tblptrh	equ	0xFF7
 23785                           tblptrl	equ	0xFF6
 23786                           tablat	equ	0xFF5
 23787                           prodh	equ	0xFF4
 23788                           prodl	equ	0xFF3
 23789                           intcon	equ	0xFF2
 23790                           indf0	equ	0xFEF
 23791                           postinc0	equ	0xFEE
 23792                           fsr0h	equ	0xFEA
 23793                           fsr0l	equ	0xFE9
 23794                           wreg	equ	0xFE8
 23795                           indf1	equ	0xFE7
 23796                           postdec1	equ	0xFE5
 23797                           fsr1h	equ	0xFE2
 23798                           fsr1l	equ	0xFE1
 23799                           indf2	equ	0xFDF
 23800                           postinc2	equ	0xFDE
 23801                           postdec2	equ	0xFDD
 23802                           plusw2	equ	0xFDB
 23803                           fsr2h	equ	0xFDA
 23804                           fsr2l	equ	0xFD9
 23805                           status	equ	0xFD8
 23806                           
 23807 ;; *************** function _Closest_Object *****************
 23808 ;; Defined at:
 23809 ;;		line 281 in file "main.c"
 23810 ;; Parameters:    Size  Location     Type
 23811 ;;		None
 23812 ;; Auto vars:     Size  Location     Type
 23813 ;;		None
 23814 ;; Return value:  Size  Location     Type
 23815 ;;                  1    wreg      void 
 23816 ;; Registers used:
 23817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23818 ;; Tracked objects:
 23819 ;;		On entry : 0/0
 23820 ;;		On exit  : 0/0
 23821 ;;		Unchanged: 0/0
 23822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23827 ;;Total ram usage:        0 bytes
 23828 ;; Hardware stack levels used:    1
 23829 ;; Hardware stack levels required when called:   13
 23830 ;; This function calls:
 23831 ;;		_ADCAverage
 23832 ;;		_Console_Render
 23833 ;;		_SteppingCCW
 23834 ;;		_printf
 23835 ;; This function is called by:
 23836 ;;		_main
 23837 ;; This function uses a non-reentrant model
 23838 ;;
 23839                           
 23840                           	psect	text101
 23841  016C9E                     __ptext101:
 23842                           	opt stack 0
 23843  016C9E                     _Closest_Object:
 23844                           	opt stack 17
 23845                           
 23846                           ;main.c: 282: printf("%c", (char)35);
 23847                           
 23848                           ; BSR set to: 0
 23849                           ;incstack = 0
 23850  016C9E  0EFC               	movlw	low STR_1
 23851  016CA0  0100               	movlb	0	; () banked
 23852  016CA2  6F75               	movwf	printf@f& (0+255),b
 23853  016CA4  0EFF               	movlw	high STR_1
 23854  016CA6  6F76               	movwf	(printf@f+1)& (0+255),b
 23855  016CA8  0E00               	movlw	0
 23856  016CAA  6F78               	movwf	(?_printf+3)& (0+255),b
 23857  016CAC  0E23               	movlw	35
 23858  016CAE  6F77               	movwf	(?_printf+2)& (0+255),b
 23859  016CB0  EC7E  F0AB         	call	_printf	;wreg free
 23860                           
 23861                           ;main.c: 283: printf("Stepped 360 degrees");
 23862  016CB4  0E15               	movlw	low STR_7
 23863  016CB6  0100               	movlb	0	; () banked
 23864  016CB8  6F75               	movwf	printf@f& (0+255),b
 23865  016CBA  0EFF               	movlw	high STR_7
 23866  016CBC  6F76               	movwf	(printf@f+1)& (0+255),b
 23867  016CBE  EC7E  F0AB         	call	_printf	;wreg free
 23868                           
 23869                           ;main.c: 284: printf("\nThe Closes object (mm): %d", Low_Sensor);
 23870  016CC2  0ECC               	movlw	low STR_8
 23871  016CC4  0100               	movlb	0	; () banked
 23872  016CC6  6F75               	movwf	printf@f& (0+255),b
 23873  016CC8  0EFE               	movlw	high STR_8
 23874  016CCA  6F76               	movwf	(printf@f+1)& (0+255),b
 23875  016CCC  C1D8  F077         	movff	_Low_Sensor,?_printf+2
 23876  016CD0  C1D9  F078         	movff	_Low_Sensor+1,?_printf+3
 23877  016CD4  EC7E  F0AB         	call	_printf	;wreg free
 23878                           
 23879                           ;main.c: 285: printf("\nGoing back to: %d", Close_Pos);
 23880  016CD8  0E3C               	movlw	low STR_9
 23881  016CDA  0100               	movlb	0	; () banked
 23882  016CDC  6F75               	movwf	printf@f& (0+255),b
 23883  016CDE  0EFF               	movlw	high STR_9
 23884  016CE0  6F76               	movwf	(printf@f+1)& (0+255),b
 23885  016CE2  C128  F077         	movff	_Close_Pos,?_printf+2
 23886  016CE6  C129  F078         	movff	_Close_Pos+1,?_printf+3
 23887  016CEA  EC7E  F0AB         	call	_printf	;wreg free
 23888                           
 23889                           ;main.c: 286: Console_Render();
 23890  016CEE  ECA2  F0A7         	call	_Console_Render	;wreg free
 23891                           
 23892                           ;main.c: 287: while (!CCW_Count<=0){
 23893  016CF2  D020               	goto	l2204
 23894  016CF4                     
 23895                           ;main.c: 288: CCW_Count--;
 23896  016CF4  0101               	movlb	1	; () banked
 23897  016CF6  0724               	decf	_CCW_Count& (0+255),f,b
 23898  016CF8  A0D8               	btfss	status,0,c
 23899  016CFA  0725               	decf	(_CCW_Count+1)& (0+255),f,b
 23900                           
 23901                           ; BSR set to: 1
 23902                           ;main.c: 289: printf("%c", (char)35);
 23903  016CFC  0EFC               	movlw	low STR_1
 23904  016CFE  0100               	movlb	0	; () banked
 23905  016D00  6F75               	movwf	printf@f& (0+255),b
 23906  016D02  0EFF               	movlw	high STR_1
 23907  016D04  6F76               	movwf	(printf@f+1)& (0+255),b
 23908  016D06  0E00               	movlw	0
 23909  016D08  6F78               	movwf	(?_printf+3)& (0+255),b
 23910  016D0A  0E23               	movlw	35
 23911  016D0C  6F77               	movwf	(?_printf+2)& (0+255),b
 23912  016D0E  EC7E  F0AB         	call	_printf	;wreg free
 23913                           
 23914                           ;main.c: 290: printf("\nSteps Travelled: %d",CCW_Count);
 23915  016D12  0E00               	movlw	low STR_11
 23916  016D14  0100               	movlb	0	; () banked
 23917  016D16  6F75               	movwf	printf@f& (0+255),b
 23918  016D18  0EFF               	movlw	high STR_11
 23919  016D1A  6F76               	movwf	(printf@f+1)& (0+255),b
 23920  016D1C  C124  F077         	movff	_CCW_Count,?_printf+2
 23921  016D20  C125  F078         	movff	_CCW_Count+1,?_printf+3
 23922  016D24  EC7E  F0AB         	call	_printf	;wreg free
 23923                           
 23924                           ;main.c: 291: Console_Render();
 23925  016D28  ECA2  F0A7         	call	_Console_Render	;wreg free
 23926                           
 23927                           ;main.c: 292: ADCAverage ();
 23928  016D2C  EC23  F09E         	call	_ADCAverage	;wreg free
 23929                           
 23930                           ;main.c: 293: SteppingCCW();
 23931  016D30  EC16  F0C1         	call	_SteppingCCW	;wreg free
 23932  016D34                     l2204:
 23933  016D34  0101               	movlb	1	; () banked
 23934  016D36  5124               	movf	_CCW_Count& (0+255),w,b
 23935  016D38  1125               	iorwf	(_CCW_Count+1)& (0+255),w,b
 23936  016D3A  A4D8               	btfss	status,2,c
 23937  016D3C  D7DB               	goto	l2205
 23938                           
 23939                           ; BSR set to: 1
 23940                           ;main.c: 294: }
 23941                           ;main.c: 295: RD5=0;
 23942  016D3E  9A83               	bcf	3971,5,c	;volatile
 23943                           
 23944                           ;main.c: 296: RD7=0;
 23945  016D40  9E83               	bcf	3971,7,c	;volatile
 23946                           
 23947                           ;main.c: 297: RA2=0;
 23948  016D42  9480               	bcf	3968,2,c	;volatile
 23949                           
 23950                           ;main.c: 298: RA3=0;
 23951  016D44  9680               	bcf	3968,3,c	;volatile
 23952                           
 23953                           ; BSR set to: 1
 23954                           
 23955                           ;main.c: 299: return;
 23956  016D46  0012               	return		;funcret
 23957  016D48                     __end_of_Closest_Object:
 23958                           	opt stack 0
 23959                           tosu	equ	0xFFF
 23960                           tosh	equ	0xFFE
 23961                           tosl	equ	0xFFD
 23962                           pclath	equ	0xFFA
 23963                           tblptru	equ	0xFF8
 23964                           tblptrh	equ	0xFF7
 23965                           tblptrl	equ	0xFF6
 23966                           tablat	equ	0xFF5
 23967                           prodh	equ	0xFF4
 23968                           prodl	equ	0xFF3
 23969                           intcon	equ	0xFF2
 23970                           indf0	equ	0xFEF
 23971                           postinc0	equ	0xFEE
 23972                           fsr0h	equ	0xFEA
 23973                           fsr0l	equ	0xFE9
 23974                           wreg	equ	0xFE8
 23975                           indf1	equ	0xFE7
 23976                           postdec1	equ	0xFE5
 23977                           fsr1h	equ	0xFE2
 23978                           fsr1l	equ	0xFE1
 23979                           indf2	equ	0xFDF
 23980                           postinc2	equ	0xFDE
 23981                           postdec2	equ	0xFDD
 23982                           plusw2	equ	0xFDB
 23983                           fsr2h	equ	0xFDA
 23984                           fsr2l	equ	0xFD9
 23985                           status	equ	0xFD8
 23986                           
 23987 ;; *************** function _printf *****************
 23988 ;; Defined at:
 23989 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 23990 ;; Parameters:    Size  Location     Type
 23991 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 23992 ;;		 -> STR_34(12), STR_33(7), STR_32(12), STR_31(9), 
 23993 ;;		 -> STR_30(10), STR_29(3), STR_28(24), STR_27(3), 
 23994 ;;		 -> STR_26(16), STR_25(3), STR_24(12), STR_23(12), 
 23995 ;;		 -> STR_22(39), STR_21(42), STR_20(9), STR_19(11), 
 23996 ;;		 -> STR_18(10), STR_17(3), STR_16(8), STR_15(10), 
 23997 ;;		 -> STR_14(3), STR_13(16), STR_12(3), STR_11(21), 
 23998 ;;		 -> STR_10(3), STR_9(19), STR_8(28), STR_7(20), 
 23999 ;;		 -> STR_6(3), STR_5(17), STR_4(12), STR_3(3), 
 24000 ;;		 -> STR_2(19), STR_1(3), 
 24001 ;; Auto vars:     Size  Location     Type
 24002 ;;  tmpval          4    0        struct .
 24003 ;;  cp              3    0        PTR const unsigned char 
 24004 ;;  val             2   32[BANK0 ] unsigned int 
 24005 ;;  ap              2   30[BANK0 ] PTR void [1]
 24006 ;;		 -> ?_printf(2), 
 24007 ;;  len             2    0        unsigned int 
 24008 ;;  c               1   34[BANK0 ] char 
 24009 ;;  prec            1   29[BANK0 ] char 
 24010 ;;  flag            1   28[BANK0 ] unsigned char 
 24011 ;; Return value:  Size  Location     Type
 24012 ;;                  2   21[BANK0 ] int 
 24013 ;; Registers used:
 24014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24015 ;; Tracked objects:
 24016 ;;		On entry : 0/0
 24017 ;;		On exit  : 0/0
 24018 ;;		Unchanged: 0/0
 24019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24020 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24021 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24023 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24024 ;;Total ram usage:       14 bytes
 24025 ;; Hardware stack levels used:    1
 24026 ;; Hardware stack levels required when called:   12
 24027 ;; This function calls:
 24028 ;;		___lwdiv
 24029 ;;		___lwmod
 24030 ;;		_putch
 24031 ;; This function is called by:
 24032 ;;		_Sensor_Observe
 24033 ;;		_Closest_Object
 24034 ;;		_main
 24035 ;;		_pop
 24036 ;;		_push
 24037 ;;		_Detect_Victim
 24038 ;;		_Travel
 24039 ;;		_Move_ADC_To
 24040 ;;		_Navigate_Maze
 24041 ;;		_Find_Flag
 24042 ;; This function uses a non-reentrant model
 24043 ;;
 24044                           
 24045                           	psect	text102
 24046  0156FC                     __ptext102:
 24047                           	opt stack 0
 24048  0156FC                     _printf:
 24049                           	opt stack 18
 24050                           
 24051                           ;doprnt.c: 466: va_list ap;
 24052                           ;doprnt.c: 499: signed char c;
 24053                           ;doprnt.c: 506: signed char prec;
 24054                           ;doprnt.c: 508: unsigned char flag;
 24055                           ;doprnt.c: 523: union {
 24056                           ;doprnt.c: 524: unsigned long vd;
 24057                           ;doprnt.c: 525: double integ;
 24058                           ;doprnt.c: 526: } tmpval;
 24059                           ;doprnt.c: 528: unsigned int val;
 24060                           ;doprnt.c: 529: unsigned len;
 24061                           ;doprnt.c: 530: const char * cp;
 24062                           ;doprnt.c: 533: *ap = __va_start();
 24063                           
 24064                           ; BSR set to: 1
 24065                           ;incstack = 0
 24066  0156FC  0E77               	movlw	low (?_printf+2)
 24067  0156FE  0100               	movlb	0	; () banked
 24068  015700  6F7E               	movwf	printf@ap& (0+255),b
 24069  015702  0E00               	movlw	high (?_printf+2)
 24070  015704  6F7F               	movwf	(printf@ap+1)& (0+255),b
 24071                           
 24072                           ;doprnt.c: 536: while(c = *f++) {
 24073  015706  D09E               	goto	u12670
 24074  015708                     
 24075                           ; BSR set to: 0
 24076                           ;doprnt.c: 538: if(c != '%')
 24077                           
 24078                           ; BSR set to: 0
 24079  015708  0E25               	movlw	37
 24080  01570A  1982               	xorwf	printf@c& (0+255),w,b
 24081  01570C  B4D8               	btfsc	status,2,c
 24082  01570E  D004               	goto	l2532
 24083                           
 24084                           ; BSR set to: 0
 24085                           ;doprnt.c: 540: {
 24086                           ;doprnt.c: 541: (putch(c) );
 24087  015710  5182               	movf	printf@c& (0+255),w,b
 24088  015712  EC34  F0C6         	call	_putch
 24089                           
 24090                           ;doprnt.c: 542: continue;
 24091  015716  D096               	goto	u12670
 24092  015718                     l2532:
 24093                           
 24094                           ;doprnt.c: 543: }
 24095                           ;doprnt.c: 548: flag = 0;
 24096  015718  0E00               	movlw	0
 24097  01571A  0100               	movlb	0	; () banked
 24098  01571C  6F7C               	movwf	printf@flag& (0+255),b
 24099                           
 24100                           ;doprnt.c: 635: switch(c = *f++) {
 24101  01571E  D00E               	goto	l2533
 24102  015720                     
 24103                           ; BSR set to: 0
 24104                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 24105                           
 24106                           ; BSR set to: 0
 24107  015720  C07E  FFD9         	movff	printf@ap,fsr2l
 24108  015724  C07F  FFDA         	movff	printf@ap+1,fsr2h
 24109  015728  50DF               	movf	indf2,w,c
 24110  01572A  6F82               	movwf	printf@c& (0+255),b
 24111                           
 24112                           ; BSR set to: 0
 24113  01572C  0E02               	movlw	2
 24114  01572E  277E               	addwf	printf@ap& (0+255),f,b
 24115  015730  0E00               	movlw	0
 24116  015732  237F               	addwfc	(printf@ap+1)& (0+255),f,b
 24117  015734                     
 24118                           ; BSR set to: 0
 24119                           ;doprnt.c: 809: (putch(c) );
 24120                           
 24121                           ; BSR set to: 0
 24122  015734  5182               	movf	printf@c& (0+255),w,b
 24123  015736  EC34  F0C6         	call	_putch
 24124                           
 24125                           ;doprnt.c: 810: continue;
 24126  01573A  D084               	goto	u12670
 24127  01573C                     l2533:
 24128  01573C  C075  FFF6         	movff	printf@f,tblptrl
 24129  015740  C076  FFF7         	movff	printf@f+1,tblptrh
 24130  015744  0100               	movlb	0	; () banked
 24131  015746  4B75               	infsnz	printf@f& (0+255),f,b
 24132  015748  2B76               	incf	(printf@f+1)& (0+255),f,b
 24133  01574A                     	if	0	;tblptru may be non-zero
 24134  01574A                     	endif
 24135  01574A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24136  01574A  0E00               	movlw	low (__mediumconst shr (0+16))
 24137  01574C  6EF8               	movwf	tblptru,c
 24138  01574E                     	endif
 24139  01574E  0008               	tblrd		*
 24140  015750  CFF5 F082          	movff	tablat,printf@c
 24141  015754  5182               	movf	printf@c& (0+255),w,b
 24142                           
 24143                           ; Switch size 1, requested type "space"
 24144                           ; Number of cases is 4, Range of values is 0 to 105
 24145                           ; switch strategies available:
 24146                           ; Name         Instructions Cycles
 24147                           ; simple_byte           13     7 (average)
 24148                           ;	Chosen strategy is simple_byte
 24149  015756  0A00               	xorlw	0	; case 0
 24150  015758  B4D8               	btfsc	status,2,c
 24151  01575A  0012               	return	
 24152  01575C  0A63               	xorlw	99	; case 99
 24153  01575E  B4D8               	btfsc	status,2,c
 24154  015760  D7DF               	goto	l2539
 24155  015762  0A07               	xorlw	7	; case 100
 24156  015764  B4D8               	btfsc	status,2,c
 24157  015766  D003               	goto	l2538
 24158  015768  0A0D               	xorlw	13	; case 105
 24159  01576A  A4D8               	btfss	status,2,c
 24160  01576C  D7E3               	goto	l2540
 24161  01576E                     l2538:
 24162                           
 24163                           ;doprnt.c: 1253: {
 24164                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 24165                           
 24166                           ; BSR set to: 0
 24167  01576E  C07E  FFD9         	movff	printf@ap,fsr2l
 24168  015772  C07F  FFDA         	movff	printf@ap+1,fsr2h
 24169  015776  CFDE F080          	movff	postinc2,printf@val
 24170  01577A  CFDD F081          	movff	postdec2,printf@val+1
 24171  01577E  0E02               	movlw	2
 24172  015780  0100               	movlb	0	; () banked
 24173  015782  277E               	addwf	printf@ap& (0+255),f,b
 24174  015784  0E00               	movlw	0
 24175  015786  237F               	addwfc	(printf@ap+1)& (0+255),f,b
 24176                           
 24177                           ; BSR set to: 0
 24178                           ;doprnt.c: 1261: if((int)val < 0) {
 24179  015788  AF81               	btfss	(printf@val+1)& (0+255),7,b
 24180  01578A  D006               	goto	l2541
 24181                           
 24182                           ; BSR set to: 0
 24183                           ;doprnt.c: 1262: flag |= 0x03;
 24184  01578C  0E03               	movlw	3
 24185  01578E  137C               	iorwf	printf@flag& (0+255),f,b
 24186                           
 24187                           ; BSR set to: 0
 24188                           ;doprnt.c: 1263: val = -val;
 24189  015790  6D80               	negf	printf@val& (0+255),b
 24190  015792  1F81               	comf	(printf@val+1)& (0+255),f,b
 24191  015794  B0D8               	btfsc	status,0,c
 24192  015796  2B81               	incf	(printf@val+1)& (0+255),f,b
 24193  015798                     l2541:
 24194                           
 24195                           ; BSR set to: 0
 24196                           ;doprnt.c: 1264: }
 24197                           ;doprnt.c: 1266: }
 24198                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24199                           
 24200                           ; BSR set to: 0
 24201  015798  0E01               	movlw	1
 24202  01579A  6F82               	movwf	printf@c& (0+255),b
 24203  01579C                     l15173:
 24204                           
 24205                           ; BSR set to: 0
 24206  01579C  0E05               	movlw	5
 24207  01579E  1982               	xorwf	printf@c& (0+255),w,b
 24208  0157A0  B4D8               	btfsc	status,2,c
 24209  0157A2  D015               	goto	u12650
 24210                           
 24211                           ; BSR set to: 0
 24212                           ;doprnt.c: 1306: if(val < dpowers[c])
 24213                           
 24214                           ; BSR set to: 0
 24215                           
 24216                           ; BSR set to: 0
 24217  0157A4  5182               	movf	printf@c& (0+255),w,b
 24218  0157A6  0D02               	mullw	2
 24219  0157A8  0E27               	movlw	low _dpowers
 24220  0157AA  24F3               	addwf	prodl,w,c
 24221  0157AC  6EF6               	movwf	tblptrl,c
 24222  0157AE  0EFC               	movlw	high _dpowers
 24223  0157B0  20F4               	addwfc	prodh,w,c
 24224  0157B2  6EF7               	movwf	tblptrh,c
 24225  0157B4                     	if	1	;There are 3 active tblptr bytes
 24226  0157B4  6AF8               	clrf	tblptru,c
 24227  0157B6  0E00               	movlw	low (__mediumconst shr (0+16))
 24228  0157B8  22F8               	addwfc	tblptru,f,c
 24229  0157BA                     	endif
 24230  0157BA  0009               	tblrd		*+
 24231  0157BC  50F5               	movf	tablat,w,c
 24232  0157BE  5D80               	subwf	printf@val& (0+255),w,b
 24233  0157C0  0009               	tblrd		*+
 24234  0157C2  50F5               	movf	tablat,w,c
 24235  0157C4  5981               	subwfb	(printf@val+1)& (0+255),w,b
 24236  0157C6  A0D8               	btfss	status,0,c
 24237  0157C8  D002               	goto	u12650
 24238                           
 24239                           ; BSR set to: 0
 24240                           
 24241                           ; BSR set to: 0
 24242                           
 24243                           ; BSR set to: 0
 24244                           ;doprnt.c: 1307: break;
 24245  0157CA  2B82               	incf	printf@c& (0+255),f,b
 24246  0157CC  D7E7               	goto	l15173
 24247  0157CE                     u12650:
 24248                           
 24249                           ; BSR set to: 0
 24250                           ;doprnt.c: 1422: {
 24251                           ;doprnt.c: 1438: if(flag & 0x03)
 24252                           
 24253                           ; BSR set to: 0
 24254  0157CE  C07C  F07B         	movff	printf@flag,??_printf
 24255  0157D2  0E03               	movlw	3
 24256  0157D4  177B               	andwf	??_printf& (0+255),f,b
 24257  0157D6  B4D8               	btfsc	status,2,c
 24258  0157D8  D003               	goto	l2545
 24259                           
 24260                           ; BSR set to: 0
 24261                           ;doprnt.c: 1439: (putch('-') );
 24262  0157DA  0E2D               	movlw	45
 24263  0157DC  EC34  F0C6         	call	_putch
 24264  0157E0                     l2545:
 24265                           
 24266                           ;doprnt.c: 1469: }
 24267                           ;doprnt.c: 1472: prec = c;
 24268  0157E0  C082  F07D         	movff	printf@c,printf@prec
 24269                           
 24270                           ;doprnt.c: 1474: while(prec--) {
 24271  0157E4  D02A               	goto	l2546
 24272  0157E6                     
 24273                           ;doprnt.c: 1478: {
 24274                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 24275  0157E6  0100               	movlb	0	; () banked
 24276  0157E8  517D               	movf	printf@prec& (0+255),w,b
 24277  0157EA  0D02               	mullw	2
 24278  0157EC  0E27               	movlw	low _dpowers
 24279  0157EE  24F3               	addwf	prodl,w,c
 24280  0157F0  6EF6               	movwf	tblptrl,c
 24281  0157F2  0EFC               	movlw	high _dpowers
 24282  0157F4  20F4               	addwfc	prodh,w,c
 24283  0157F6  6EF7               	movwf	tblptrh,c
 24284  0157F8                     	if	1	;There are 3 active tblptr bytes
 24285  0157F8  6AF8               	clrf	tblptru,c
 24286  0157FA  0E00               	movlw	low (__mediumconst shr (0+16))
 24287  0157FC  22F8               	addwfc	tblptru,f,c
 24288  0157FE                     	endif
 24289  0157FE  0009               	tblrd		*+
 24290  015800  CFF5 F062          	movff	tablat,___lwdiv@divisor
 24291  015804  000A               	tblrd		*-
 24292  015806  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 24293  01580A  C080  F060         	movff	printf@val,___lwdiv@dividend
 24294  01580E  C081  F061         	movff	printf@val+1,___lwdiv@dividend+1
 24295  015812  EC90  F0BF         	call	___lwdiv	;wreg free
 24296  015816  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 24297  01581A  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 24298  01581E  0E00               	movlw	0
 24299  015820  0100               	movlb	0	; () banked
 24300  015822  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 24301  015824  0E0A               	movlw	10
 24302  015826  6F69               	movwf	___lwmod@divisor& (0+255),b
 24303  015828  ECEC  F0C1         	call	___lwmod	;wreg free
 24304  01582C  0100               	movlb	0	; () banked
 24305  01582E  5167               	movf	?___lwmod& (0+255),w,b
 24306  015830  0F30               	addlw	48
 24307  015832  6F82               	movwf	printf@c& (0+255),b
 24308                           
 24309                           ; BSR set to: 0
 24310                           ;doprnt.c: 1523: }
 24311                           ;doprnt.c: 1524: (putch(c) );
 24312  015834  5182               	movf	printf@c& (0+255),w,b
 24313  015836  EC34  F0C6         	call	_putch
 24314  01583A                     l2546:
 24315  01583A  0100               	movlb	0	; () banked
 24316  01583C  077D               	decf	printf@prec& (0+255),f,b
 24317  01583E  297D               	incf	printf@prec& (0+255),w,b
 24318  015840  A4D8               	btfss	status,2,c
 24319  015842  D7D1               	goto	l2547
 24320  015844                     u12670:
 24321                           
 24322                           ; BSR set to: 0
 24323                           
 24324                           ; BSR set to: 0
 24325  015844  C075  FFF6         	movff	printf@f,tblptrl
 24326  015848  C076  FFF7         	movff	printf@f+1,tblptrh
 24327  01584C  0100               	movlb	0	; () banked
 24328  01584E  4B75               	infsnz	printf@f& (0+255),f,b
 24329  015850  2B76               	incf	(printf@f+1)& (0+255),f,b
 24330  015852                     	if	0	;tblptru may be non-zero
 24331  015852                     	endif
 24332  015852                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24333  015852  0E00               	movlw	low (__mediumconst shr (0+16))
 24334  015854  6EF8               	movwf	tblptru,c
 24335  015856                     	endif
 24336  015856  0008               	tblrd		*
 24337  015858  CFF5 F082          	movff	tablat,printf@c
 24338  01585C  5182               	movf	printf@c& (0+255),w,b
 24339  01585E  B4D8               	btfsc	status,2,c
 24340  015860  0012               	return	
 24341  015862  D752               	goto	l2531
 24342  015864                     __end_of_printf:
 24343                           	opt stack 0
 24344                           tosu	equ	0xFFF
 24345                           tosh	equ	0xFFE
 24346                           tosl	equ	0xFFD
 24347                           pclath	equ	0xFFA
 24348                           tblptru	equ	0xFF8
 24349                           tblptrh	equ	0xFF7
 24350                           tblptrl	equ	0xFF6
 24351                           tablat	equ	0xFF5
 24352                           prodh	equ	0xFF4
 24353                           prodl	equ	0xFF3
 24354                           intcon	equ	0xFF2
 24355                           indf0	equ	0xFEF
 24356                           postinc0	equ	0xFEE
 24357                           fsr0h	equ	0xFEA
 24358                           fsr0l	equ	0xFE9
 24359                           wreg	equ	0xFE8
 24360                           indf1	equ	0xFE7
 24361                           postdec1	equ	0xFE5
 24362                           fsr1h	equ	0xFE2
 24363                           fsr1l	equ	0xFE1
 24364                           indf2	equ	0xFDF
 24365                           postinc2	equ	0xFDE
 24366                           postdec2	equ	0xFDD
 24367                           plusw2	equ	0xFDB
 24368                           fsr2h	equ	0xFDA
 24369                           fsr2l	equ	0xFD9
 24370                           status	equ	0xFD8
 24371                           
 24372 ;; *************** function _putch *****************
 24373 ;; Defined at:
 24374 ;;		line 454 in file "Library/Console.c"
 24375 ;; Parameters:    Size  Location     Type
 24376 ;;  c               1    wreg     unsigned char 
 24377 ;; Auto vars:     Size  Location     Type
 24378 ;;  c               1   20[BANK0 ] unsigned char 
 24379 ;; Return value:  Size  Location     Type
 24380 ;;                  1    wreg      void 
 24381 ;; Registers used:
 24382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24383 ;; Tracked objects:
 24384 ;;		On entry : 0/0
 24385 ;;		On exit  : 0/0
 24386 ;;		Unchanged: 0/0
 24387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24391 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24392 ;;Total ram usage:        1 bytes
 24393 ;; Hardware stack levels used:    1
 24394 ;; Hardware stack levels required when called:   11
 24395 ;; This function calls:
 24396 ;;		_Console_PrintChar
 24397 ;; This function is called by:
 24398 ;;		_printf
 24399 ;; This function uses a non-reentrant model
 24400 ;;
 24401                           
 24402                           	psect	text103
 24403  018C68                     __ptext103:
 24404                           	opt stack 0
 24405  018C68                     _putch:
 24406                           	opt stack 18
 24407                           
 24408                           ; BSR set to: 0
 24409                           ;incstack = 0
 24410                           ;putch@c stored from wreg
 24411  018C68  0100               	movlb	0	; () banked
 24412  018C6A  6F74               	movwf	putch@c& (0+255),b
 24413                           
 24414                           ;Console.c: 456: Console_PrintChar(c);
 24415  018C6C  0100               	movlb	0	; () banked
 24416  018C6E  5174               	movf	putch@c& (0+255),w,b
 24417  018C70  EC89  F0AD         	call	_Console_PrintChar
 24418  018C74  0012               	return		;funcret
 24419  018C76                     __end_of_putch:
 24420                           	opt stack 0
 24421                           tosu	equ	0xFFF
 24422                           tosh	equ	0xFFE
 24423                           tosl	equ	0xFFD
 24424                           pclath	equ	0xFFA
 24425                           tblptru	equ	0xFF8
 24426                           tblptrh	equ	0xFF7
 24427                           tblptrl	equ	0xFF6
 24428                           tablat	equ	0xFF5
 24429                           prodh	equ	0xFF4
 24430                           prodl	equ	0xFF3
 24431                           intcon	equ	0xFF2
 24432                           indf0	equ	0xFEF
 24433                           postinc0	equ	0xFEE
 24434                           fsr0h	equ	0xFEA
 24435                           fsr0l	equ	0xFE9
 24436                           wreg	equ	0xFE8
 24437                           indf1	equ	0xFE7
 24438                           postdec1	equ	0xFE5
 24439                           fsr1h	equ	0xFE2
 24440                           fsr1l	equ	0xFE1
 24441                           indf2	equ	0xFDF
 24442                           postinc2	equ	0xFDE
 24443                           postdec2	equ	0xFDD
 24444                           plusw2	equ	0xFDB
 24445                           fsr2h	equ	0xFDA
 24446                           fsr2l	equ	0xFD9
 24447                           status	equ	0xFD8
 24448                           
 24449 ;; *************** function _Console_PrintChar *****************
 24450 ;; Defined at:
 24451 ;;		line 322 in file "Library/Console.c"
 24452 ;; Parameters:    Size  Location     Type
 24453 ;;  pInput          1    wreg     unsigned char 
 24454 ;; Auto vars:     Size  Location     Type
 24455 ;;  pInput          1   19[BANK0 ] unsigned char 
 24456 ;; Return value:  Size  Location     Type
 24457 ;;                  1    wreg      void 
 24458 ;; Registers used:
 24459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24460 ;; Tracked objects:
 24461 ;;		On entry : 0/0
 24462 ;;		On exit  : 0/0
 24463 ;;		Unchanged: 0/0
 24464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24467 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24468 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24469 ;;Total ram usage:        4 bytes
 24470 ;; Hardware stack levels used:    1
 24471 ;; Hardware stack levels required when called:   10
 24472 ;; This function calls:
 24473 ;;		_Console_Backspace
 24474 ;;		_Console_FormFeed
 24475 ;;		_Console_IncrementCursor
 24476 ;;		_Console_NewLine
 24477 ;;		_Console_ResetCursor
 24478 ;;		_Console_Tab
 24479 ;; This function is called by:
 24480 ;;		_putch
 24481 ;;		_Console_PrintString
 24482 ;; This function uses a non-reentrant model
 24483 ;;
 24484                           
 24485                           	psect	text104
 24486  015B12                     __ptext104:
 24487                           	opt stack 0
 24488  015B12                     _Console_PrintChar:
 24489                           	opt stack 18
 24490                           
 24491                           ;incstack = 0
 24492                           ;Console_PrintChar@pInput stored from wreg
 24493  015B12  0100               	movlb	0	; () banked
 24494  015B14  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
 24495                           
 24496                           ;Console.c: 324: switch(pInput)
 24497  015B16  D08A               	goto	l1036
 24498  015B18                     
 24499                           ;Console.c: 327: case '\n':
 24500                           ;Console.c: 328: Console_NewLine();
 24501  015B18  EC67  F0BB         	call	_Console_NewLine	;wreg free
 24502                           
 24503                           ;Console.c: 329: return;
 24504  015B1C  0012               	return	
 24505  015B1E                     
 24506                           ;Console.c: 331: Console_Backspace();
 24507  015B1E  EC33  F0C0         	call	_Console_Backspace	;wreg free
 24508                           
 24509                           ;Console.c: 332: return;
 24510  015B22  0012               	return	
 24511  015B24                     
 24512                           ;Console.c: 334: Console_FormFeed();
 24513  015B24  EC8C  F0BC         	call	_Console_FormFeed	;wreg free
 24514                           
 24515                           ;Console.c: 335: return;
 24516  015B28  0012               	return	
 24517  015B2A                     
 24518                           ;Console.c: 337: Console_Tab();
 24519  015B2A  EC83  F0B8         	call	_Console_Tab	;wreg free
 24520                           
 24521                           ;Console.c: 338: return;
 24522  015B2E  0012               	return	
 24523  015B30                     
 24524                           ;Console.c: 340: Console_IncrementCursor();
 24525  015B30  EC12  F0BF         	call	_Console_IncrementCursor	;wreg free
 24526                           
 24527                           ;Console.c: 341: return;
 24528  015B34  0012               	return	
 24529  015B36                     
 24530                           ;Console.c: 343: Console_ResetCursor();
 24531  015B36  EC1B  F0C5         	call	_Console_ResetCursor	;wreg free
 24532                           
 24533                           ;Console.c: 344: return;
 24534  015B3A  0012               	return	
 24535  015B3C                     
 24536                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 24537                           
 24538                           ;Console.c: 349: default:
 24539  015B3C  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 24540  015B40  0E7F               	movlw	127
 24541  015B42  0100               	movlb	0	; () banked
 24542  015B44  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 24543  015B46  5045               	movf	_lBufferY,w,c
 24544  015B48  0D14               	mullw	20
 24545  015B4A  0E46               	movlw	low _lBuffer
 24546  015B4C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24547  015B4E  0E04               	movlw	high _lBuffer
 24548  015B50  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 24549  015B52  50F3               	movf	prodl,w,c
 24550  015B54  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 24551  015B56  50F4               	movf	prodh,w,c
 24552  015B58  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 24553  015B5A  5046               	movf	_lBufferX,w,c
 24554  015B5C  0D01               	mullw	1
 24555  015B5E  50F3               	movf	prodl,w,c
 24556  015B60  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 24557  015B62  6ED9               	movwf	fsr2l,c
 24558  015B64  50F4               	movf	prodh,w,c
 24559  015B66  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 24560  015B68  6EDA               	movwf	fsr2h,c
 24561  015B6A  50DF               	movf	indf2,w,c
 24562  015B6C  0B7F               	andlw	127
 24563  015B6E  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 24564  015B70  B4D8               	btfsc	status,2,c
 24565  015B72  D023               	goto	l1047
 24566                           
 24567                           ; BSR set to: 0
 24568                           ;Console.c: 351: {
 24569                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 24570  015B74  0E01               	movlw	1
 24571  015B76  6E4D               	movwf	_change,c
 24572                           
 24573                           ; BSR set to: 0
 24574  015B78  5045               	movf	_lBufferY,w,c
 24575  015B7A  0D14               	mullw	20
 24576  015B7C  0E46               	movlw	low _lBuffer
 24577  015B7E  6F70               	movwf	??_Console_PrintChar& (0+255),b
 24578  015B80  0E04               	movlw	high _lBuffer
 24579  015B82  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24580  015B84  50F3               	movf	prodl,w,c
 24581  015B86  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 24582  015B88  50F4               	movf	prodh,w,c
 24583  015B8A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 24584  015B8C  5046               	movf	_lBufferX,w,c
 24585  015B8E  0D01               	mullw	1
 24586  015B90  50F3               	movf	prodl,w,c
 24587  015B92  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 24588  015B94  6ED9               	movwf	fsr2l,c
 24589  015B96  50F4               	movf	prodh,w,c
 24590  015B98  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 24591  015B9A  6EDA               	movwf	fsr2h,c
 24592  015B9C  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 24593  015B9E  0980               	iorlw	128
 24594  015BA0  6EDF               	movwf	indf2,c
 24595                           
 24596                           ; BSR set to: 0
 24597                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 24598  015BA2  5045               	movf	_lBufferY,w,c
 24599  015BA4  0D02               	mullw	2
 24600  015BA6  0E28               	movlw	low _lCBuffer
 24601  015BA8  24F3               	addwf	prodl,w,c
 24602  015BAA  6ED9               	movwf	fsr2l,c
 24603  015BAC  0E02               	movlw	high _lCBuffer
 24604  015BAE  20F4               	addwfc	prodh,w,c
 24605  015BB0  6EDA               	movwf	fsr2h,c
 24606  015BB2  C1E4  FFDE         	movff	_gForecolour,postinc2
 24607  015BB6  C1E5  FFDD         	movff	_gForecolour+1,postdec2
 24608  015BBA                     l1047:
 24609                           
 24610                           ; BSR set to: 0
 24611                           ;Console.c: 354: }
 24612                           ;Console.c: 368: if(Console_IncrementCursor())
 24613                           
 24614                           ; BSR set to: 0
 24615  015BBA  EC12  F0BF         	call	_Console_IncrementCursor	;wreg free
 24616  015BBE  0900               	iorlw	0
 24617  015BC0  B4D8               	btfsc	status,2,c
 24618  015BC2  0012               	return	
 24619                           
 24620                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 24621  015BC4  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 24622  015BC8  0E7F               	movlw	127
 24623  015BCA  0100               	movlb	0	; () banked
 24624  015BCC  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 24625  015BCE  5045               	movf	_lBufferY,w,c
 24626  015BD0  0D14               	mullw	20
 24627  015BD2  0E46               	movlw	low _lBuffer
 24628  015BD4  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24629  015BD6  0E04               	movlw	high _lBuffer
 24630  015BD8  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 24631  015BDA  50F3               	movf	prodl,w,c
 24632  015BDC  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 24633  015BDE  50F4               	movf	prodh,w,c
 24634  015BE0  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 24635  015BE2  5046               	movf	_lBufferX,w,c
 24636  015BE4  0D01               	mullw	1
 24637  015BE6  50F3               	movf	prodl,w,c
 24638  015BE8  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 24639  015BEA  6ED9               	movwf	fsr2l,c
 24640  015BEC  50F4               	movf	prodh,w,c
 24641  015BEE  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 24642  015BF0  6EDA               	movwf	fsr2h,c
 24643  015BF2  50DF               	movf	indf2,w,c
 24644  015BF4  0B7F               	andlw	127
 24645  015BF6  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 24646  015BF8  B4D8               	btfsc	status,2,c
 24647  015BFA  0012               	return	
 24648                           
 24649                           ; BSR set to: 0
 24650                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 24651  015BFC  0E01               	movlw	1
 24652  015BFE  6E4D               	movwf	_change,c
 24653                           
 24654                           ; BSR set to: 0
 24655  015C00  5045               	movf	_lBufferY,w,c
 24656  015C02  0D14               	mullw	20
 24657  015C04  0E46               	movlw	low _lBuffer
 24658  015C06  6F70               	movwf	??_Console_PrintChar& (0+255),b
 24659  015C08  0E04               	movlw	high _lBuffer
 24660  015C0A  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24661  015C0C  50F3               	movf	prodl,w,c
 24662  015C0E  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 24663  015C10  50F4               	movf	prodh,w,c
 24664  015C12  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 24665  015C14  5046               	movf	_lBufferX,w,c
 24666  015C16  0D01               	mullw	1
 24667  015C18  50F3               	movf	prodl,w,c
 24668  015C1A  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 24669  015C1C  6ED9               	movwf	fsr2l,c
 24670  015C1E  50F4               	movf	prodh,w,c
 24671  015C20  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 24672  015C22  6EDA               	movwf	fsr2h,c
 24673  015C24  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 24674  015C26  0980               	iorlw	128
 24675  015C28  6EDF               	movwf	indf2,c
 24676                           
 24677                           ; BSR set to: 0
 24678                           ;Console.c: 372: };
 24679                           
 24680                           ; BSR set to: 0
 24681                           ;Console.c: 371: return;
 24682                           
 24683                           ; BSR set to: 0
 24684                           
 24685                           ; BSR set to: 0
 24686  015C2A  0012               	return	
 24687  015C2C                     l1036:
 24688                           
 24689                           ; BSR set to: 0
 24690  015C2C  0100               	movlb	0	; () banked
 24691  015C2E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 24692                           
 24693                           ; Switch size 1, requested type "space"
 24694                           ; Number of cases is 8, Range of values is 7 to 35
 24695                           ; switch strategies available:
 24696                           ; Name         Instructions Cycles
 24697                           ; simple_byte           25    13 (average)
 24698                           ;	Chosen strategy is simple_byte
 24699  015C30  0A07               	xorlw	7	; case 7
 24700  015C32  B4D8               	btfsc	status,2,c
 24701  015C34  D77D               	goto	l1043
 24702  015C36  0A0F               	xorlw	15	; case 8
 24703  015C38  B4D8               	btfsc	status,2,c
 24704  015C3A  D771               	goto	l1040
 24705  015C3C  0A01               	xorlw	1	; case 9
 24706  015C3E  B4D8               	btfsc	status,2,c
 24707  015C40  D774               	goto	l1042
 24708  015C42  0A03               	xorlw	3	; case 10
 24709  015C44  B4D8               	btfsc	status,2,c
 24710  015C46  D768               	goto	l1037
 24711  015C48  0A06               	xorlw	6	; case 12
 24712  015C4A  B4D8               	btfsc	status,2,c
 24713  015C4C  D76B               	goto	l1041
 24714  015C4E  0A01               	xorlw	1	; case 13
 24715  015C50  B4D8               	btfsc	status,2,c
 24716  015C52  D762               	goto	l1037
 24717  015C54  0A2D               	xorlw	45	; case 32
 24718  015C56  B4D8               	btfsc	status,2,c
 24719  015C58  D771               	goto	l1045
 24720  015C5A  0A03               	xorlw	3	; case 35
 24721  015C5C  B4D8               	btfsc	status,2,c
 24722  015C5E  D76B               	goto	l1044
 24723  015C60  D76D               	goto	l1045
 24724  015C62                     __end_of_Console_PrintChar:
 24725                           	opt stack 0
 24726                           tosu	equ	0xFFF
 24727                           tosh	equ	0xFFE
 24728                           tosl	equ	0xFFD
 24729                           pclath	equ	0xFFA
 24730                           tblptru	equ	0xFF8
 24731                           tblptrh	equ	0xFF7
 24732                           tblptrl	equ	0xFF6
 24733                           tablat	equ	0xFF5
 24734                           prodh	equ	0xFF4
 24735                           prodl	equ	0xFF3
 24736                           intcon	equ	0xFF2
 24737                           indf0	equ	0xFEF
 24738                           postinc0	equ	0xFEE
 24739                           fsr0h	equ	0xFEA
 24740                           fsr0l	equ	0xFE9
 24741                           wreg	equ	0xFE8
 24742                           indf1	equ	0xFE7
 24743                           postdec1	equ	0xFE5
 24744                           fsr1h	equ	0xFE2
 24745                           fsr1l	equ	0xFE1
 24746                           indf2	equ	0xFDF
 24747                           postinc2	equ	0xFDE
 24748                           postdec2	equ	0xFDD
 24749                           plusw2	equ	0xFDB
 24750                           fsr2h	equ	0xFDA
 24751                           fsr2l	equ	0xFD9
 24752                           status	equ	0xFD8
 24753                           
 24754 ;; *************** function _Console_Tab *****************
 24755 ;; Defined at:
 24756 ;;		line 260 in file "Library/Console.c"
 24757 ;; Parameters:    Size  Location     Type
 24758 ;;		None
 24759 ;; Auto vars:     Size  Location     Type
 24760 ;;  c               1   15[BANK0 ] unsigned char 
 24761 ;;  i               1   14[BANK0 ] unsigned char 
 24762 ;;  t               1   13[BANK0 ] unsigned char 
 24763 ;; Return value:  Size  Location     Type
 24764 ;;                  1    wreg      void 
 24765 ;; Registers used:
 24766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24767 ;; Tracked objects:
 24768 ;;		On entry : 0/0
 24769 ;;		On exit  : 0/0
 24770 ;;		Unchanged: 0/0
 24771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24773 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24774 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24775 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24776 ;;Total ram usage:        8 bytes
 24777 ;; Hardware stack levels used:    1
 24778 ;; Hardware stack levels required when called:    9
 24779 ;; This function calls:
 24780 ;;		_Console_ClearCursor
 24781 ;;		_Console_IncrementCursor
 24782 ;;		___awdiv
 24783 ;; This function is called by:
 24784 ;;		_Console_PrintChar
 24785 ;; This function uses a non-reentrant model
 24786 ;;
 24787                           
 24788                           	psect	text105
 24789  017106                     __ptext105:
 24790                           	opt stack 0
 24791  017106                     _Console_Tab:
 24792                           	opt stack 18
 24793                           
 24794                           ;Console.c: 262: UINT8 i = 0;
 24795                           
 24796                           ;incstack = 0
 24797  017106  0E00               	movlw	0
 24798  017108  0100               	movlb	0	; () banked
 24799  01710A  6F6E               	movwf	Console_Tab@i& (0+255),b
 24800                           
 24801                           ; BSR set to: 0
 24802                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 24803  01710C  0EFA               	movlw	250
 24804  01710E  2448               	addwf	_gCursor,w,c
 24805  017110  6F60               	movwf	___awdiv@dividend& (0+255),b
 24806  017112  0EFF               	movlw	255
 24807  017114  2049               	addwfc	_gCursor+1,w,c
 24808  017116  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
 24809  017118  0E00               	movlw	0
 24810  01711A  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 24811  01711C  0E06               	movlw	6
 24812  01711E  6F62               	movwf	___awdiv@divisor& (0+255),b
 24813  017120  EC29  F0BA         	call	___awdiv	;wreg free
 24814  017124  0100               	movlb	0	; () banked
 24815  017126  5160               	movf	?___awdiv& (0+255),w,b
 24816  017128  6F6F               	movwf	Console_Tab@c& (0+255),b
 24817                           
 24818                           ; BSR set to: 0
 24819                           ;Console.c: 264: UINT8 t = c/4;
 24820  01712A  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
 24821  01712E  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
 24822  017130  0E00               	movlw	0
 24823  017132  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 24824  017134  0E04               	movlw	4
 24825  017136  6F62               	movwf	___awdiv@divisor& (0+255),b
 24826  017138  EC29  F0BA         	call	___awdiv	;wreg free
 24827  01713C  0100               	movlb	0	; () banked
 24828  01713E  5160               	movf	?___awdiv& (0+255),w,b
 24829  017140  6F6D               	movwf	Console_Tab@t& (0+255),b
 24830                           
 24831                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 24832  017142  0E00               	movlw	0
 24833  017144  6F6E               	movwf	Console_Tab@i& (0+255),b
 24834  017146  D006               	goto	l1009
 24835  017148                     
 24836                           ; BSR set to: 0
 24837                           ;Console.c: 266: {
 24838                           ;Console.c: 267: Console_ClearCursor();
 24839                           
 24840                           ; BSR set to: 0
 24841  017148  ECB7  F0C3         	call	_Console_ClearCursor	;wreg free
 24842                           
 24843                           ;Console.c: 268: Console_IncrementCursor();
 24844  01714C  EC12  F0BF         	call	_Console_IncrementCursor	;wreg free
 24845  017150  0100               	movlb	0	; () banked
 24846  017152  2B6E               	incf	Console_Tab@i& (0+255),f,b
 24847  017154                     l1009:
 24848                           
 24849                           ; BSR set to: 0
 24850                           
 24851                           ; BSR set to: 0
 24852  017154  516D               	movf	Console_Tab@t& (0+255),w,b
 24853  017156  0D04               	mullw	4
 24854  017158  1EF3               	comf	prodl,f,c
 24855  01715A  1EF4               	comf	prodh,f,c
 24856  01715C  4AF3               	infsnz	prodl,f,c
 24857  01715E  2AF4               	incf	prodh,f,c
 24858  017160  516F               	movf	Console_Tab@c& (0+255),w,b
 24859  017162  6F68               	movwf	??_Console_Tab& (0+255),b
 24860  017164  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
 24861  017166  50F3               	movf	prodl,w,c
 24862  017168  2768               	addwf	??_Console_Tab& (0+255),f,b
 24863  01716A  50F4               	movf	prodh,w,c
 24864  01716C  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 24865  01716E  1F68               	comf	??_Console_Tab& (0+255),f,b
 24866  017170  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
 24867  017172  4B68               	infsnz	??_Console_Tab& (0+255),f,b
 24868  017174  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
 24869  017176  0E04               	movlw	4
 24870  017178  2768               	addwf	??_Console_Tab& (0+255),f,b
 24871  01717A  0E00               	movlw	0
 24872  01717C  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 24873  01717E  516E               	movf	Console_Tab@i& (0+255),w,b
 24874  017180  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
 24875  017182  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
 24876  017184  5168               	movf	??_Console_Tab& (0+255),w,b
 24877  017186  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
 24878  017188  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
 24879  01718A  0A80               	xorlw	128
 24880  01718C  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
 24881  01718E  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
 24882  017190  0A80               	xorlw	128
 24883  017192  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 24884  017194  B0D8               	btfsc	status,0,c
 24885  017196  0012               	return	
 24886  017198  D7D7               	goto	l1010
 24887  01719A                     __end_of_Console_Tab:
 24888                           	opt stack 0
 24889                           tosu	equ	0xFFF
 24890                           tosh	equ	0xFFE
 24891                           tosl	equ	0xFFD
 24892                           pclath	equ	0xFFA
 24893                           tblptru	equ	0xFF8
 24894                           tblptrh	equ	0xFF7
 24895                           tblptrl	equ	0xFF6
 24896                           tablat	equ	0xFF5
 24897                           prodh	equ	0xFF4
 24898                           prodl	equ	0xFF3
 24899                           intcon	equ	0xFF2
 24900                           indf0	equ	0xFEF
 24901                           postinc0	equ	0xFEE
 24902                           fsr0h	equ	0xFEA
 24903                           fsr0l	equ	0xFE9
 24904                           wreg	equ	0xFE8
 24905                           indf1	equ	0xFE7
 24906                           postdec1	equ	0xFE5
 24907                           fsr1h	equ	0xFE2
 24908                           fsr1l	equ	0xFE1
 24909                           indf2	equ	0xFDF
 24910                           postinc2	equ	0xFDE
 24911                           postdec2	equ	0xFDD
 24912                           plusw2	equ	0xFDB
 24913                           fsr2h	equ	0xFDA
 24914                           fsr2l	equ	0xFD9
 24915                           status	equ	0xFD8
 24916                           
 24917 ;; *************** function _Console_IncrementCursor *****************
 24918 ;; Defined at:
 24919 ;;		line 243 in file "Library/Console.c"
 24920 ;; Parameters:    Size  Location     Type
 24921 ;;		None
 24922 ;; Auto vars:     Size  Location     Type
 24923 ;;		None
 24924 ;; Return value:  Size  Location     Type
 24925 ;;                  1    wreg      unsigned char 
 24926 ;; Registers used:
 24927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24928 ;; Tracked objects:
 24929 ;;		On entry : 0/0
 24930 ;;		On exit  : 0/0
 24931 ;;		Unchanged: 0/0
 24932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24937 ;;Total ram usage:        2 bytes
 24938 ;; Hardware stack levels used:    1
 24939 ;; Hardware stack levels required when called:    8
 24940 ;; This function calls:
 24941 ;;		_Console_FormFeed
 24942 ;;		_Console_NewLine
 24943 ;; This function is called by:
 24944 ;;		_Console_Tab
 24945 ;;		_Console_PrintChar
 24946 ;; This function uses a non-reentrant model
 24947 ;;
 24948                           
 24949                           	psect	text106
 24950  017E24                     __ptext106:
 24951                           	opt stack 0
 24952  017E24                     _Console_IncrementCursor:
 24953                           	opt stack 18
 24954                           
 24955                           ;Console.c: 246: lBufferX += 1;
 24956                           
 24957                           ; BSR set to: 0
 24958                           ;incstack = 0
 24959  017E24  2A46               	incf	_lBufferX,f,c
 24960                           
 24961                           ;Console.c: 248: gCursor.x += 6;
 24962  017E26  0E06               	movlw	6
 24963  017E28  2648               	addwf	_gCursor,f,c
 24964  017E2A  0E00               	movlw	0
 24965  017E2C  2249               	addwfc	_gCursor+1,f,c
 24966                           
 24967                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 24968  017E2E  0E06               	movlw	6
 24969  017E30  2448               	addwf	_gCursor,w,c
 24970  017E32  0100               	movlb	0	; () banked
 24971  017E34  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24972  017E36  0E00               	movlw	0
 24973  017E38  2049               	addwfc	_gCursor+1,w,c
 24974  017E3A  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24975  017E3C  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24976  017E3E  D007               	goto	l1004
 24977  017E40  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 24978  017E42  E103               	bnz	u10650
 24979  017E44  0E80               	movlw	128
 24980  017E46  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 24981  017E48  B0D8               	btfsc	status,0,c
 24982  017E4A                     u10650:
 24983                           
 24984                           ; BSR set to: 0
 24985                           ;Console.c: 250: Console_NewLine();
 24986  017E4A  EC67  F0BB         	call	_Console_NewLine	;wreg free
 24987  017E4E                     l1004:
 24988                           
 24989                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 24990  017E4E  0E08               	movlw	8
 24991  017E50  244A               	addwf	_gCursor+2,w,c
 24992  017E52  0100               	movlb	0	; () banked
 24993  017E54  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 24994  017E56  0E00               	movlw	0
 24995  017E58  204B               	addwfc	_gCursor+3,w,c
 24996  017E5A  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 24997  017E5C  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 24998  017E5E  D00A               	goto	l1005
 24999  017E60  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 25000  017E62  E104               	bnz	u10660
 25001  017E64  0E80               	movlw	128
 25002  017E66  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 25003  017E68  A0D8               	btfss	status,0,c
 25004  017E6A  D004               	goto	l1005
 25005  017E6C                     u10660:
 25006                           
 25007                           ; BSR set to: 0
 25008                           ;Console.c: 252: {
 25009                           ;Console.c: 253: Console_FormFeed();
 25010  017E6C  EC8C  F0BC         	call	_Console_FormFeed	;wreg free
 25011                           
 25012                           ;Console.c: 254: return 1;
 25013  017E70  0E01               	movlw	1
 25014  017E72  0012               	return	
 25015  017E74                     l1005:
 25016                           
 25017                           ;Console.c: 255: }
 25018                           ;Console.c: 257: return 0;
 25019  017E74  0E00               	movlw	0
 25020  017E76  0012               	return	
 25021  017E78                     __end_of_Console_IncrementCursor:
 25022                           	opt stack 0
 25023                           tosu	equ	0xFFF
 25024                           tosh	equ	0xFFE
 25025                           tosl	equ	0xFFD
 25026                           pclath	equ	0xFFA
 25027                           tblptru	equ	0xFF8
 25028                           tblptrh	equ	0xFF7
 25029                           tblptrl	equ	0xFF6
 25030                           tablat	equ	0xFF5
 25031                           prodh	equ	0xFF4
 25032                           prodl	equ	0xFF3
 25033                           intcon	equ	0xFF2
 25034                           indf0	equ	0xFEF
 25035                           postinc0	equ	0xFEE
 25036                           fsr0h	equ	0xFEA
 25037                           fsr0l	equ	0xFE9
 25038                           wreg	equ	0xFE8
 25039                           indf1	equ	0xFE7
 25040                           postdec1	equ	0xFE5
 25041                           fsr1h	equ	0xFE2
 25042                           fsr1l	equ	0xFE1
 25043                           indf2	equ	0xFDF
 25044                           postinc2	equ	0xFDE
 25045                           postdec2	equ	0xFDD
 25046                           plusw2	equ	0xFDB
 25047                           fsr2h	equ	0xFDA
 25048                           fsr2l	equ	0xFD9
 25049                           status	equ	0xFD8
 25050                           
 25051 ;; *************** function _Console_NewLine *****************
 25052 ;; Defined at:
 25053 ;;		line 175 in file "Library/Console.c"
 25054 ;; Parameters:    Size  Location     Type
 25055 ;;		None
 25056 ;; Auto vars:     Size  Location     Type
 25057 ;;		None
 25058 ;; Return value:  Size  Location     Type
 25059 ;;                  1    wreg      void 
 25060 ;; Registers used:
 25061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25062 ;; Tracked objects:
 25063 ;;		On entry : 0/0
 25064 ;;		On exit  : 0/0
 25065 ;;		Unchanged: 0/0
 25066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25069 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25071 ;;Total ram usage:        2 bytes
 25072 ;; Hardware stack levels used:    1
 25073 ;; Hardware stack levels required when called:    7
 25074 ;; This function calls:
 25075 ;;		Nothing
 25076 ;; This function is called by:
 25077 ;;		_Console_IncrementCursor
 25078 ;;		_Console_PrintChar
 25079 ;; This function uses a non-reentrant model
 25080 ;;
 25081                           
 25082                           	psect	text107
 25083  0176CE                     __ptext107:
 25084                           	opt stack 0
 25085  0176CE                     _Console_NewLine:
 25086                           	opt stack 18
 25087                           
 25088                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 25089                           
 25090                           ;incstack = 0
 25091  0176CE  D02D               	goto	l983
 25092  0176D0                     
 25093                           ;Console.c: 179: {
 25094                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 25095  0176D0  5045               	movf	_lBufferY,w,c
 25096  0176D2  0D14               	mullw	20
 25097  0176D4  0E46               	movlw	low _lBuffer
 25098  0176D6  0100               	movlb	0	; () banked
 25099  0176D8  6F60               	movwf	??_Console_NewLine& (0+255),b
 25100  0176DA  0E04               	movlw	high _lBuffer
 25101  0176DC  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 25102  0176DE  50F3               	movf	prodl,w,c
 25103  0176E0  2760               	addwf	??_Console_NewLine& (0+255),f,b
 25104  0176E2  50F4               	movf	prodh,w,c
 25105  0176E4  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 25106  0176E6  5046               	movf	_lBufferX,w,c
 25107  0176E8  0D01               	mullw	1
 25108  0176EA  50F3               	movf	prodl,w,c
 25109  0176EC  2560               	addwf	??_Console_NewLine& (0+255),w,b
 25110  0176EE  6ED9               	movwf	fsr2l,c
 25111  0176F0  50F4               	movf	prodh,w,c
 25112  0176F2  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 25113  0176F4  6EDA               	movwf	fsr2h,c
 25114  0176F6  50DF               	movf	indf2,w,c
 25115  0176F8  B4D8               	btfsc	status,2,c
 25116  0176FA  D016               	goto	l985
 25117                           
 25118                           ; BSR set to: 0
 25119                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 25120  0176FC  0E01               	movlw	1
 25121  0176FE  6E4D               	movwf	_change,c
 25122                           
 25123                           ; BSR set to: 0
 25124  017700  5045               	movf	_lBufferY,w,c
 25125  017702  0D14               	mullw	20
 25126  017704  0E46               	movlw	low _lBuffer
 25127  017706  6F60               	movwf	??_Console_NewLine& (0+255),b
 25128  017708  0E04               	movlw	high _lBuffer
 25129  01770A  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 25130  01770C  50F3               	movf	prodl,w,c
 25131  01770E  2760               	addwf	??_Console_NewLine& (0+255),f,b
 25132  017710  50F4               	movf	prodh,w,c
 25133  017712  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 25134  017714  5046               	movf	_lBufferX,w,c
 25135  017716  0D01               	mullw	1
 25136  017718  50F3               	movf	prodl,w,c
 25137  01771A  2560               	addwf	??_Console_NewLine& (0+255),w,b
 25138  01771C  6ED9               	movwf	fsr2l,c
 25139  01771E  50F4               	movf	prodh,w,c
 25140  017720  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 25141  017722  6EDA               	movwf	fsr2h,c
 25142  017724  0E80               	movlw	128
 25143  017726  6EDF               	movwf	indf2,c
 25144  017728                     l985:
 25145                           
 25146                           ; BSR set to: 0
 25147                           ;Console.c: 182: lBufferX ++;
 25148                           
 25149                           ; BSR set to: 0
 25150  017728  2A46               	incf	_lBufferX,f,c
 25151  01772A                     l983:
 25152                           
 25153                           ; BSR set to: 0
 25154  01772A  0E13               	movlw	19
 25155  01772C  6446               	cpfsgt	_lBufferX,c
 25156  01772E  D7D0               	goto	l984
 25157                           
 25158                           ;Console.c: 183: }
 25159                           ;Console.c: 185: lBufferX = 0;
 25160  017730  0E00               	movlw	0
 25161  017732  6E46               	movwf	_lBufferX,c
 25162                           
 25163                           ;Console.c: 186: lBufferY ++;
 25164  017734  2A45               	incf	_lBufferY,f,c
 25165                           
 25166                           ;Console.c: 188: gCursor.y += 8;
 25167  017736  0E08               	movlw	8
 25168  017738  264A               	addwf	_gCursor+2,f,c
 25169  01773A  0E00               	movlw	0
 25170  01773C  224B               	addwfc	_gCursor+3,f,c
 25171                           
 25172                           ;Console.c: 189: gCursor.x = 6;
 25173  01773E  0E00               	movlw	0
 25174  017740  6E49               	movwf	_gCursor+1,c
 25175  017742  0E06               	movlw	6
 25176  017744  6E48               	movwf	_gCursor,c
 25177  017746  0012               	return		;funcret
 25178  017748                     __end_of_Console_NewLine:
 25179                           	opt stack 0
 25180                           tosu	equ	0xFFF
 25181                           tosh	equ	0xFFE
 25182                           tosl	equ	0xFFD
 25183                           pclath	equ	0xFFA
 25184                           tblptru	equ	0xFF8
 25185                           tblptrh	equ	0xFF7
 25186                           tblptrl	equ	0xFF6
 25187                           tablat	equ	0xFF5
 25188                           prodh	equ	0xFF4
 25189                           prodl	equ	0xFF3
 25190                           intcon	equ	0xFF2
 25191                           indf0	equ	0xFEF
 25192                           postinc0	equ	0xFEE
 25193                           fsr0h	equ	0xFEA
 25194                           fsr0l	equ	0xFE9
 25195                           wreg	equ	0xFE8
 25196                           indf1	equ	0xFE7
 25197                           postdec1	equ	0xFE5
 25198                           fsr1h	equ	0xFE2
 25199                           fsr1l	equ	0xFE1
 25200                           indf2	equ	0xFDF
 25201                           postinc2	equ	0xFDE
 25202                           postdec2	equ	0xFDD
 25203                           plusw2	equ	0xFDB
 25204                           fsr2h	equ	0xFDA
 25205                           fsr2l	equ	0xFD9
 25206                           status	equ	0xFD8
 25207                           
 25208 ;; *************** function _Console_FormFeed *****************
 25209 ;; Defined at:
 25210 ;;		line 192 in file "Library/Console.c"
 25211 ;; Parameters:    Size  Location     Type
 25212 ;;		None
 25213 ;; Auto vars:     Size  Location     Type
 25214 ;;  y               1    3[BANK0 ] unsigned char 
 25215 ;;  x               1    2[BANK0 ] unsigned char 
 25216 ;; Return value:  Size  Location     Type
 25217 ;;                  1    wreg      void 
 25218 ;; Registers used:
 25219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25220 ;; Tracked objects:
 25221 ;;		On entry : 0/0
 25222 ;;		On exit  : 0/0
 25223 ;;		Unchanged: 0/0
 25224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25228 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25229 ;;Total ram usage:        4 bytes
 25230 ;; Hardware stack levels used:    1
 25231 ;; Hardware stack levels required when called:    7
 25232 ;; This function calls:
 25233 ;;		Nothing
 25234 ;; This function is called by:
 25235 ;;		_Console_IncrementCursor
 25236 ;;		_Console_PrintChar
 25237 ;; This function uses a non-reentrant model
 25238 ;;
 25239                           
 25240                           	psect	text108
 25241  017918                     __ptext108:
 25242                           	opt stack 0
 25243  017918                     _Console_FormFeed:
 25244                           	opt stack 18
 25245                           
 25246                           ;Console.c: 195: lBufferX = 0;
 25247                           
 25248                           ;incstack = 0
 25249  017918  0E00               	movlw	0
 25250  01791A  6E46               	movwf	_lBufferX,c
 25251                           
 25252                           ;Console.c: 196: lBufferY = 0;
 25253  01791C  0E00               	movlw	0
 25254  01791E  6E45               	movwf	_lBufferY,c
 25255                           
 25256                           ;Console.c: 197: UINT8 x, y;
 25257                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 25258  017920  0E00               	movlw	0
 25259  017922  0100               	movlb	0	; () banked
 25260  017924  6F63               	movwf	Console_FormFeed@y& (0+255),b
 25261  017926                     l13465:
 25262                           
 25263                           ; BSR set to: 0
 25264  017926  0E0E               	movlw	14
 25265  017928  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 25266  01792A  D001               	goto	l990
 25267  01792C  D020               	goto	u10610
 25268  01792E                     l990:
 25269                           
 25270                           ; BSR set to: 0
 25271                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 25272                           
 25273                           ; BSR set to: 0
 25274  01792E  0E00               	movlw	0
 25275  017930  6F62               	movwf	Console_FormFeed@x& (0+255),b
 25276  017932                     l13471:
 25277                           
 25278                           ; BSR set to: 0
 25279  017932  0E13               	movlw	19
 25280  017934  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 25281  017936  D001               	goto	l992
 25282  017938  D018               	goto	u10600
 25283  01793A                     l992:
 25284                           
 25285                           ; BSR set to: 0
 25286                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 25287                           
 25288                           ; BSR set to: 0
 25289  01793A  0E01               	movlw	1
 25290  01793C  6E4D               	movwf	_change,c
 25291                           
 25292                           ; BSR set to: 0
 25293  01793E  5163               	movf	Console_FormFeed@y& (0+255),w,b
 25294  017940  0D14               	mullw	20
 25295  017942  0E46               	movlw	low _lBuffer
 25296  017944  6F60               	movwf	??_Console_FormFeed& (0+255),b
 25297  017946  0E04               	movlw	high _lBuffer
 25298  017948  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 25299  01794A  50F3               	movf	prodl,w,c
 25300  01794C  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 25301  01794E  50F4               	movf	prodh,w,c
 25302  017950  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 25303  017952  5162               	movf	Console_FormFeed@x& (0+255),w,b
 25304  017954  0D01               	mullw	1
 25305  017956  50F3               	movf	prodl,w,c
 25306  017958  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 25307  01795A  6ED9               	movwf	fsr2l,c
 25308  01795C  50F4               	movf	prodh,w,c
 25309  01795E  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 25310  017960  6EDA               	movwf	fsr2h,c
 25311  017962  0E80               	movlw	128
 25312  017964  6EDF               	movwf	indf2,c
 25313                           
 25314                           ; BSR set to: 0
 25315  017966  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 25316  017968  D7E4               	goto	l13471
 25317  01796A                     u10600:
 25318                           
 25319                           ; BSR set to: 0
 25320                           
 25321                           ; BSR set to: 0
 25322  01796A  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 25323  01796C  D7DC               	goto	l13465
 25324  01796E                     u10610:
 25325                           
 25326                           ; BSR set to: 0
 25327                           ;Console.c: 204: clearall = 1;
 25328                           
 25329                           ; BSR set to: 0
 25330  01796E  0E01               	movlw	1
 25331  017970  6E47               	movwf	_clearall,c
 25332                           
 25333                           ;Console.c: 205: gCursor.x = 6;
 25334  017972  0E00               	movlw	0
 25335  017974  6E49               	movwf	_gCursor+1,c
 25336  017976  0E06               	movlw	6
 25337  017978  6E48               	movwf	_gCursor,c
 25338                           
 25339                           ;Console.c: 206: gCursor.y = 6;
 25340  01797A  0E00               	movlw	0
 25341  01797C  6E4B               	movwf	_gCursor+3,c
 25342  01797E  0E06               	movlw	6
 25343  017980  6E4A               	movwf	_gCursor+2,c
 25344                           
 25345                           ; BSR set to: 0
 25346  017982  0012               	return		;funcret
 25347  017984                     __end_of_Console_FormFeed:
 25348                           	opt stack 0
 25349                           tosu	equ	0xFFF
 25350                           tosh	equ	0xFFE
 25351                           tosl	equ	0xFFD
 25352                           pclath	equ	0xFFA
 25353                           tblptru	equ	0xFF8
 25354                           tblptrh	equ	0xFF7
 25355                           tblptrl	equ	0xFF6
 25356                           tablat	equ	0xFF5
 25357                           prodh	equ	0xFF4
 25358                           prodl	equ	0xFF3
 25359                           intcon	equ	0xFF2
 25360                           indf0	equ	0xFEF
 25361                           postinc0	equ	0xFEE
 25362                           fsr0h	equ	0xFEA
 25363                           fsr0l	equ	0xFE9
 25364                           wreg	equ	0xFE8
 25365                           indf1	equ	0xFE7
 25366                           postdec1	equ	0xFE5
 25367                           fsr1h	equ	0xFE2
 25368                           fsr1l	equ	0xFE1
 25369                           indf2	equ	0xFDF
 25370                           postinc2	equ	0xFDE
 25371                           postdec2	equ	0xFDD
 25372                           plusw2	equ	0xFDB
 25373                           fsr2h	equ	0xFDA
 25374                           fsr2l	equ	0xFD9
 25375                           status	equ	0xFD8
 25376                           
 25377 ;; *************** function _Console_ResetCursor *****************
 25378 ;; Defined at:
 25379 ;;		line 297 in file "Library/Console.c"
 25380 ;; Parameters:    Size  Location     Type
 25381 ;;		None
 25382 ;; Auto vars:     Size  Location     Type
 25383 ;;		None
 25384 ;; Return value:  Size  Location     Type
 25385 ;;                  1    wreg      void 
 25386 ;; Registers used:
 25387 ;;		wreg, status,2
 25388 ;; Tracked objects:
 25389 ;;		On entry : 0/0
 25390 ;;		On exit  : 0/0
 25391 ;;		Unchanged: 0/0
 25392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25397 ;;Total ram usage:        0 bytes
 25398 ;; Hardware stack levels used:    1
 25399 ;; Hardware stack levels required when called:    7
 25400 ;; This function calls:
 25401 ;;		Nothing
 25402 ;; This function is called by:
 25403 ;;		_Console_PrintChar
 25404 ;; This function uses a non-reentrant model
 25405 ;;
 25406                           
 25407                           	psect	text109
 25408  018A36                     __ptext109:
 25409                           	opt stack 0
 25410  018A36                     _Console_ResetCursor:
 25411                           	opt stack 20
 25412                           
 25413                           ;Console.c: 299: gCursor.x = 6;
 25414                           
 25415                           ; BSR set to: 0
 25416                           ;incstack = 0
 25417  018A36  0E00               	movlw	0
 25418  018A38  6E49               	movwf	_gCursor+1,c
 25419  018A3A  0E06               	movlw	6
 25420  018A3C  6E48               	movwf	_gCursor,c
 25421                           
 25422                           ;Console.c: 300: gCursor.y = 6;
 25423  018A3E  0E00               	movlw	0
 25424  018A40  6E4B               	movwf	_gCursor+3,c
 25425  018A42  0E06               	movlw	6
 25426  018A44  6E4A               	movwf	_gCursor+2,c
 25427                           
 25428                           ;Console.c: 303: lBufferX = 0;
 25429  018A46  0E00               	movlw	0
 25430  018A48  6E46               	movwf	_lBufferX,c
 25431                           
 25432                           ;Console.c: 304: lBufferY = 0;
 25433  018A4A  0E00               	movlw	0
 25434  018A4C  6E45               	movwf	_lBufferY,c
 25435  018A4E  0012               	return		;funcret
 25436  018A50                     __end_of_Console_ResetCursor:
 25437                           	opt stack 0
 25438                           tosu	equ	0xFFF
 25439                           tosh	equ	0xFFE
 25440                           tosl	equ	0xFFD
 25441                           pclath	equ	0xFFA
 25442                           tblptru	equ	0xFF8
 25443                           tblptrh	equ	0xFF7
 25444                           tblptrl	equ	0xFF6
 25445                           tablat	equ	0xFF5
 25446                           prodh	equ	0xFF4
 25447                           prodl	equ	0xFF3
 25448                           intcon	equ	0xFF2
 25449                           indf0	equ	0xFEF
 25450                           postinc0	equ	0xFEE
 25451                           fsr0h	equ	0xFEA
 25452                           fsr0l	equ	0xFE9
 25453                           wreg	equ	0xFE8
 25454                           indf1	equ	0xFE7
 25455                           postdec1	equ	0xFE5
 25456                           fsr1h	equ	0xFE2
 25457                           fsr1l	equ	0xFE1
 25458                           indf2	equ	0xFDF
 25459                           postinc2	equ	0xFDE
 25460                           postdec2	equ	0xFDD
 25461                           plusw2	equ	0xFDB
 25462                           fsr2h	equ	0xFDA
 25463                           fsr2l	equ	0xFD9
 25464                           status	equ	0xFD8
 25465                           
 25466 ;; *************** function _Console_Backspace *****************
 25467 ;; Defined at:
 25468 ;;		line 209 in file "Library/Console.c"
 25469 ;; Parameters:    Size  Location     Type
 25470 ;;		None
 25471 ;; Auto vars:     Size  Location     Type
 25472 ;;		None
 25473 ;; Return value:  Size  Location     Type
 25474 ;;                  1    wreg      void 
 25475 ;; Registers used:
 25476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25477 ;; Tracked objects:
 25478 ;;		On entry : 0/0
 25479 ;;		On exit  : 0/0
 25480 ;;		Unchanged: 0/0
 25481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25486 ;;Total ram usage:        0 bytes
 25487 ;; Hardware stack levels used:    1
 25488 ;; Hardware stack levels required when called:    8
 25489 ;; This function calls:
 25490 ;;		_Console_ClearCursor
 25491 ;; This function is called by:
 25492 ;;		_Console_PrintChar
 25493 ;; This function uses a non-reentrant model
 25494 ;;
 25495                           
 25496                           	psect	text110
 25497  018066                     __ptext110:
 25498                           	opt stack 0
 25499  018066                     _Console_Backspace:
 25500                           	opt stack 19
 25501                           
 25502                           ;Console.c: 211: if (lBufferX > 0)
 25503                           
 25504                           ;incstack = 0
 25505  018066  5046               	movf	_lBufferX,w,c
 25506  018068  B4D8               	btfsc	status,2,c
 25507  01806A  D006               	goto	l997
 25508                           
 25509                           ;Console.c: 212: {
 25510                           ;Console.c: 213: gCursor.x -= 6;
 25511  01806C  0EFA               	movlw	250
 25512  01806E  2648               	addwf	_gCursor,f,c
 25513  018070  0EFF               	movlw	255
 25514  018072  2249               	addwfc	_gCursor+1,f,c
 25515                           
 25516                           ;Console.c: 216: lBufferX --;
 25517  018074  0646               	decf	_lBufferX,f,c
 25518                           
 25519                           ;Console.c: 218: }
 25520  018076  D01B               	goto	l1000
 25521  018078                     l997:
 25522                           
 25523                           ;Console.c: 219: else if (lBufferY > 0)
 25524  018078  5045               	movf	_lBufferY,w,c
 25525  01807A  B4D8               	btfsc	status,2,c
 25526  01807C  D00C               	goto	l999
 25527                           
 25528                           ;Console.c: 220: {
 25529                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 25530  01807E  0E00               	movlw	0
 25531  018080  6E49               	movwf	_gCursor+1,c
 25532  018082  0E72               	movlw	114
 25533  018084  6E48               	movwf	_gCursor,c
 25534                           
 25535                           ;Console.c: 222: gCursor.y -= 8;
 25536  018086  0EF8               	movlw	248
 25537  018088  264A               	addwf	_gCursor+2,f,c
 25538  01808A  0EFF               	movlw	255
 25539  01808C  224B               	addwfc	_gCursor+3,f,c
 25540                           
 25541                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 25542  01808E  0E13               	movlw	19
 25543  018090  6E46               	movwf	_lBufferX,c
 25544                           
 25545                           ;Console.c: 226: lBufferY --;
 25546  018092  0645               	decf	_lBufferY,f,c
 25547                           
 25548                           ;Console.c: 228: }
 25549  018094  D00C               	goto	l1000
 25550  018096                     l999:
 25551                           
 25552                           ;Console.c: 229: else
 25553                           ;Console.c: 230: {
 25554                           ;Console.c: 231: gCursor.x = 6;
 25555  018096  0E00               	movlw	0
 25556  018098  6E49               	movwf	_gCursor+1,c
 25557  01809A  0E06               	movlw	6
 25558  01809C  6E48               	movwf	_gCursor,c
 25559                           
 25560                           ;Console.c: 232: gCursor.y = 6;
 25561  01809E  0E00               	movlw	0
 25562  0180A0  6E4B               	movwf	_gCursor+3,c
 25563  0180A2  0E06               	movlw	6
 25564  0180A4  6E4A               	movwf	_gCursor+2,c
 25565                           
 25566                           ;Console.c: 235: lBufferX = 0;
 25567  0180A6  0E00               	movlw	0
 25568  0180A8  6E46               	movwf	_lBufferX,c
 25569                           
 25570                           ;Console.c: 236: lBufferY = 0;
 25571  0180AA  0E00               	movlw	0
 25572  0180AC  6E45               	movwf	_lBufferY,c
 25573  0180AE                     l1000:
 25574                           
 25575                           ;Console.c: 238: }
 25576                           ;Console.c: 240: Console_ClearCursor();
 25577  0180AE  ECB7  F0C3         	call	_Console_ClearCursor	;wreg free
 25578  0180B2  0012               	return		;funcret
 25579  0180B4                     __end_of_Console_Backspace:
 25580                           	opt stack 0
 25581                           tosu	equ	0xFFF
 25582                           tosh	equ	0xFFE
 25583                           tosl	equ	0xFFD
 25584                           pclath	equ	0xFFA
 25585                           tblptru	equ	0xFF8
 25586                           tblptrh	equ	0xFF7
 25587                           tblptrl	equ	0xFF6
 25588                           tablat	equ	0xFF5
 25589                           prodh	equ	0xFF4
 25590                           prodl	equ	0xFF3
 25591                           intcon	equ	0xFF2
 25592                           indf0	equ	0xFEF
 25593                           postinc0	equ	0xFEE
 25594                           fsr0h	equ	0xFEA
 25595                           fsr0l	equ	0xFE9
 25596                           wreg	equ	0xFE8
 25597                           indf1	equ	0xFE7
 25598                           postdec1	equ	0xFE5
 25599                           fsr1h	equ	0xFE2
 25600                           fsr1l	equ	0xFE1
 25601                           indf2	equ	0xFDF
 25602                           postinc2	equ	0xFDE
 25603                           postdec2	equ	0xFDD
 25604                           plusw2	equ	0xFDB
 25605                           fsr2h	equ	0xFDA
 25606                           fsr2l	equ	0xFD9
 25607                           status	equ	0xFD8
 25608                           
 25609 ;; *************** function _Console_ClearCursor *****************
 25610 ;; Defined at:
 25611 ;;		line 308 in file "Library/Console.c"
 25612 ;; Parameters:    Size  Location     Type
 25613 ;;		None
 25614 ;; Auto vars:     Size  Location     Type
 25615 ;;		None
 25616 ;; Return value:  Size  Location     Type
 25617 ;;                  1    wreg      void 
 25618 ;; Registers used:
 25619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25620 ;; Tracked objects:
 25621 ;;		On entry : 0/0
 25622 ;;		On exit  : 0/0
 25623 ;;		Unchanged: 0/0
 25624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25629 ;;Total ram usage:        2 bytes
 25630 ;; Hardware stack levels used:    1
 25631 ;; Hardware stack levels required when called:    7
 25632 ;; This function calls:
 25633 ;;		Nothing
 25634 ;; This function is called by:
 25635 ;;		_Console_Backspace
 25636 ;;		_Console_Tab
 25637 ;; This function uses a non-reentrant model
 25638 ;;
 25639                           
 25640                           	psect	text111
 25641  01876E                     __ptext111:
 25642                           	opt stack 0
 25643  01876E                     _Console_ClearCursor:
 25644                           	opt stack 19
 25645                           
 25646                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 25647                           
 25648                           ;incstack = 0
 25649  01876E  0E01               	movlw	1
 25650  018770  6E4D               	movwf	_change,c
 25651  018772  5045               	movf	_lBufferY,w,c
 25652  018774  0D14               	mullw	20
 25653  018776  0E46               	movlw	low _lBuffer
 25654  018778  0100               	movlb	0	; () banked
 25655  01877A  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 25656  01877C  0E04               	movlw	high _lBuffer
 25657  01877E  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 25658  018780  50F3               	movf	prodl,w,c
 25659  018782  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 25660  018784  50F4               	movf	prodh,w,c
 25661  018786  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 25662  018788  5046               	movf	_lBufferX,w,c
 25663  01878A  0D01               	mullw	1
 25664  01878C  50F3               	movf	prodl,w,c
 25665  01878E  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 25666  018790  6ED9               	movwf	fsr2l,c
 25667  018792  50F4               	movf	prodh,w,c
 25668  018794  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 25669  018796  6EDA               	movwf	fsr2h,c
 25670  018798  0E80               	movlw	128
 25671  01879A  6EDF               	movwf	indf2,c
 25672                           
 25673                           ; BSR set to: 0
 25674  01879C  0012               	return		;funcret
 25675  01879E                     __end_of_Console_ClearCursor:
 25676                           	opt stack 0
 25677                           tosu	equ	0xFFF
 25678                           tosh	equ	0xFFE
 25679                           tosl	equ	0xFFD
 25680                           pclath	equ	0xFFA
 25681                           tblptru	equ	0xFF8
 25682                           tblptrh	equ	0xFF7
 25683                           tblptrl	equ	0xFF6
 25684                           tablat	equ	0xFF5
 25685                           prodh	equ	0xFF4
 25686                           prodl	equ	0xFF3
 25687                           intcon	equ	0xFF2
 25688                           indf0	equ	0xFEF
 25689                           postinc0	equ	0xFEE
 25690                           fsr0h	equ	0xFEA
 25691                           fsr0l	equ	0xFE9
 25692                           wreg	equ	0xFE8
 25693                           indf1	equ	0xFE7
 25694                           postdec1	equ	0xFE5
 25695                           fsr1h	equ	0xFE2
 25696                           fsr1l	equ	0xFE1
 25697                           indf2	equ	0xFDF
 25698                           postinc2	equ	0xFDE
 25699                           postdec2	equ	0xFDD
 25700                           plusw2	equ	0xFDB
 25701                           fsr2h	equ	0xFDA
 25702                           fsr2l	equ	0xFD9
 25703                           status	equ	0xFD8
 25704                           
 25705 ;; *************** function _SteppingCCW *****************
 25706 ;; Defined at:
 25707 ;;		line 512 in file "dans.c"
 25708 ;; Parameters:    Size  Location     Type
 25709 ;;		None
 25710 ;; Auto vars:     Size  Location     Type
 25711 ;;		None
 25712 ;; Return value:  Size  Location     Type
 25713 ;;                  2  2004[None  ] int 
 25714 ;; Registers used:
 25715 ;;		wreg, status,2, status,0, cstack
 25716 ;; Tracked objects:
 25717 ;;		On entry : 0/0
 25718 ;;		On exit  : 0/0
 25719 ;;		Unchanged: 0/0
 25720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25725 ;;Total ram usage:        0 bytes
 25726 ;; Hardware stack levels used:    1
 25727 ;; Hardware stack levels required when called:    8
 25728 ;; This function calls:
 25729 ;;		_STP1
 25730 ;;		_STP2
 25731 ;;		_STP3
 25732 ;;		_STP4
 25733 ;;		_delay_ms
 25734 ;; This function is called by:
 25735 ;;		_Closest_Object
 25736 ;;		_Move_ADC_To
 25737 ;;		_Find_Flag
 25738 ;; This function uses a non-reentrant model
 25739 ;;
 25740                           
 25741                           	psect	text112
 25742  01822C                     __ptext112:
 25743                           	opt stack 0
 25744  01822C                     _SteppingCCW:
 25745                           	opt stack 20
 25746                           
 25747                           ;dans.c: 513: STP4();
 25748                           
 25749                           ; BSR set to: 0
 25750                           ;incstack = 0
 25751  01822C  ECEE  F0C5         	call	_STP4	;wreg free
 25752                           
 25753                           ;dans.c: 514: delay_ms(2);
 25754  018230  0E00               	movlw	0
 25755  018232  0100               	movlb	0	; () banked
 25756  018234  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25757  018236  0E02               	movlw	2
 25758  018238  6F60               	movwf	delay_ms@ms& (0+255),b
 25759  01823A  ECBA  F0BE         	call	_delay_ms	;wreg free
 25760                           
 25761                           ;dans.c: 515: STP3();
 25762  01823E  ECF8  F0C5         	call	_STP3	;wreg free
 25763                           
 25764                           ;dans.c: 516: delay_ms(2);
 25765  018242  0E00               	movlw	0
 25766  018244  0100               	movlb	0	; () banked
 25767  018246  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25768  018248  0E02               	movlw	2
 25769  01824A  6F60               	movwf	delay_ms@ms& (0+255),b
 25770  01824C  ECBA  F0BE         	call	_delay_ms	;wreg free
 25771                           
 25772                           ;dans.c: 517: STP2();
 25773  018250  EC02  F0C6         	call	_STP2	;wreg free
 25774                           
 25775                           ;dans.c: 518: delay_ms(2);
 25776  018254  0E00               	movlw	0
 25777  018256  0100               	movlb	0	; () banked
 25778  018258  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25779  01825A  0E02               	movlw	2
 25780  01825C  6F60               	movwf	delay_ms@ms& (0+255),b
 25781  01825E  ECBA  F0BE         	call	_delay_ms	;wreg free
 25782                           
 25783                           ;dans.c: 519: STP1();
 25784  018262  EC0C  F0C6         	call	_STP1	;wreg free
 25785                           
 25786                           ;dans.c: 520: delay_ms(2);
 25787  018266  0E00               	movlw	0
 25788  018268  0100               	movlb	0	; () banked
 25789  01826A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 25790  01826C  0E02               	movlw	2
 25791  01826E  6F60               	movwf	delay_ms@ms& (0+255),b
 25792  018270  ECBA  F0BE         	call	_delay_ms	;wreg free
 25793  018274  0012               	return		;funcret
 25794  018276                     __end_of_SteppingCCW:
 25795                           	opt stack 0
 25796                           tosu	equ	0xFFF
 25797                           tosh	equ	0xFFE
 25798                           tosl	equ	0xFFD
 25799                           pclath	equ	0xFFA
 25800                           tblptru	equ	0xFF8
 25801                           tblptrh	equ	0xFF7
 25802                           tblptrl	equ	0xFF6
 25803                           tablat	equ	0xFF5
 25804                           prodh	equ	0xFF4
 25805                           prodl	equ	0xFF3
 25806                           intcon	equ	0xFF2
 25807                           indf0	equ	0xFEF
 25808                           postinc0	equ	0xFEE
 25809                           fsr0h	equ	0xFEA
 25810                           fsr0l	equ	0xFE9
 25811                           wreg	equ	0xFE8
 25812                           indf1	equ	0xFE7
 25813                           postdec1	equ	0xFE5
 25814                           fsr1h	equ	0xFE2
 25815                           fsr1l	equ	0xFE1
 25816                           indf2	equ	0xFDF
 25817                           postinc2	equ	0xFDE
 25818                           postdec2	equ	0xFDD
 25819                           plusw2	equ	0xFDB
 25820                           fsr2h	equ	0xFDA
 25821                           fsr2l	equ	0xFD9
 25822                           status	equ	0xFD8
 25823                           
 25824 ;; *************** function _delay_ms *****************
 25825 ;; Defined at:
 25826 ;;		line 240 in file "Library/Types.c"
 25827 ;; Parameters:    Size  Location     Type
 25828 ;;  ms              2    0[BANK0 ] unsigned short 
 25829 ;; Auto vars:     Size  Location     Type
 25830 ;;  u               4    2[BANK0 ] volatile unsigned long 
 25831 ;; Return value:  Size  Location     Type
 25832 ;;                  1    wreg      void 
 25833 ;; Registers used:
 25834 ;;		wreg, status,2, status,0
 25835 ;; Tracked objects:
 25836 ;;		On entry : 0/0
 25837 ;;		On exit  : 0/0
 25838 ;;		Unchanged: 0/0
 25839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25840 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25841 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25843 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25844 ;;Total ram usage:        6 bytes
 25845 ;; Hardware stack levels used:    1
 25846 ;; Hardware stack levels required when called:    7
 25847 ;; This function calls:
 25848 ;;		Nothing
 25849 ;; This function is called by:
 25850 ;;		_LCD_Reset
 25851 ;;		_LCD_Init
 25852 ;;		_MXK_Init
 25853 ;;		_main
 25854 ;;		_SteppingCCW
 25855 ;;		_SteppingCW
 25856 ;; This function uses a non-reentrant model
 25857 ;;
 25858                           
 25859                           	psect	text113
 25860  017D74                     __ptext113:
 25861                           	opt stack 0
 25862  017D74                     _delay_ms:
 25863                           	opt stack 23
 25864                           
 25865                           ;Types.c: 242: volatile unsigned long u;
 25866                           ;Types.c: 243: while (ms--)
 25867                           
 25868                           ;incstack = 0
 25869  017D74  D01B               	goto	u12130
 25870  017D76                     l14775:
 25871                           
 25872                           ;Types.c: 244: {
 25873                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 25874  017D76  0E00               	movlw	0
 25875  017D78  0100               	movlb	0	; () banked
 25876  017D7A  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 25877  017D7C  0E00               	movlw	0
 25878  017D7E  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 25879  017D80  0E00               	movlw	0
 25880  017D82  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 25881  017D84  0E00               	movlw	0
 25882  017D86  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 25883  017D88                     l14777:
 25884                           
 25885                           ; BSR set to: 0
 25886  017D88  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 25887  017D8A  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 25888  017D8C  E10F               	bnz	l14783
 25889  017D8E  0EB0               	movlw	176
 25890  017D90  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 25891  017D92  0E04               	movlw	4
 25892  017D94  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 25893  017D96  B0D8               	btfsc	status,0,c
 25894  017D98  D009               	goto	u12130
 25895                           
 25896                           ; BSR set to: 0
 25897                           
 25898                           ; BSR set to: 0
 25899  017D9A  F000               	nop		; ;# 
 25900  017D9C  0E01               	movlw	1
 25901  017D9E  0100               	movlb	0	; () banked
 25902  017DA0  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 25903  017DA2  0E00               	movlw	0
 25904  017DA4  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 25905  017DA6  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 25906  017DA8  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 25907  017DAA  D7EE               	goto	l14777
 25908  017DAC                     u12130:
 25909  017DAC                     l14783:
 25910  017DAC  0100               	movlb	0	; () banked
 25911  017DAE  0760               	decf	delay_ms@ms& (0+255),f,b
 25912  017DB0  A0D8               	btfss	status,0,c
 25913  017DB2  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 25914  017DB4  2960               	incf	delay_ms@ms& (0+255),w,b
 25915  017DB6  E1DF               	bnz	l14775
 25916  017DB8  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 25917  017DBA  A4D8               	btfss	status,2,c
 25918  017DBC  D7DC               	goto	l824
 25919                           
 25920                           ; BSR set to: 0
 25921                           ;Types.c: 251: }
 25922                           ;Types.c: 252: }
 25923                           ;Types.c: 253: u = 0x8008;
 25924                           
 25925                           ; BSR set to: 0
 25926  017DBE  0E08               	movlw	8
 25927  017DC0  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 25928  017DC2  0E80               	movlw	128
 25929  017DC4  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 25930  017DC6  0E00               	movlw	0
 25931  017DC8  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 25932  017DCA  0E00               	movlw	0
 25933  017DCC  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 25934                           
 25935                           ; BSR set to: 0
 25936  017DCE  0012               	return		;funcret
 25937  017DD0                     __end_of_delay_ms:
 25938                           	opt stack 0
 25939                           tosu	equ	0xFFF
 25940                           tosh	equ	0xFFE
 25941                           tosl	equ	0xFFD
 25942                           pclath	equ	0xFFA
 25943                           tblptru	equ	0xFF8
 25944                           tblptrh	equ	0xFF7
 25945                           tblptrl	equ	0xFF6
 25946                           tablat	equ	0xFF5
 25947                           prodh	equ	0xFF4
 25948                           prodl	equ	0xFF3
 25949                           intcon	equ	0xFF2
 25950                           indf0	equ	0xFEF
 25951                           postinc0	equ	0xFEE
 25952                           fsr0h	equ	0xFEA
 25953                           fsr0l	equ	0xFE9
 25954                           wreg	equ	0xFE8
 25955                           indf1	equ	0xFE7
 25956                           postdec1	equ	0xFE5
 25957                           fsr1h	equ	0xFE2
 25958                           fsr1l	equ	0xFE1
 25959                           indf2	equ	0xFDF
 25960                           postinc2	equ	0xFDE
 25961                           postdec2	equ	0xFDD
 25962                           plusw2	equ	0xFDB
 25963                           fsr2h	equ	0xFDA
 25964                           fsr2l	equ	0xFD9
 25965                           status	equ	0xFD8
 25966                           
 25967 ;; *************** function _STP4 *****************
 25968 ;; Defined at:
 25969 ;;		line 227 in file "main.c"
 25970 ;; Parameters:    Size  Location     Type
 25971 ;;		None
 25972 ;; Auto vars:     Size  Location     Type
 25973 ;;		None
 25974 ;; Return value:  Size  Location     Type
 25975 ;;                  2  2191[None  ] int 
 25976 ;; Registers used:
 25977 ;;		None
 25978 ;; Tracked objects:
 25979 ;;		On entry : 0/0
 25980 ;;		On exit  : 0/0
 25981 ;;		Unchanged: 0/0
 25982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25987 ;;Total ram usage:        0 bytes
 25988 ;; Hardware stack levels used:    1
 25989 ;; Hardware stack levels required when called:    7
 25990 ;; This function calls:
 25991 ;;		Nothing
 25992 ;; This function is called by:
 25993 ;;		_SteppingCCW
 25994 ;;		_SteppingCW
 25995 ;; This function uses a non-reentrant model
 25996 ;;
 25997                           
 25998                           	psect	text114
 25999  018BDC                     __ptext114:
 26000                           	opt stack 0
 26001  018BDC                     _STP4:
 26002                           	opt stack 20
 26003                           
 26004                           ;main.c: 228: TRISA2=0;
 26005                           
 26006                           ; BSR set to: 0
 26007                           ;incstack = 0
 26008  018BDC  9492               	bcf	3986,2,c	;volatile
 26009                           
 26010                           ;main.c: 229: TRISA3=0;
 26011  018BDE  9692               	bcf	3986,3,c	;volatile
 26012                           
 26013                           ;main.c: 230: TRISD5=0;
 26014  018BE0  9A95               	bcf	3989,5,c	;volatile
 26015                           
 26016                           ;main.c: 231: TRISD7=0;
 26017  018BE2  9E95               	bcf	3989,7,c	;volatile
 26018                           
 26019                           ;main.c: 232: RD5=0;
 26020  018BE4  9A83               	bcf	3971,5,c	;volatile
 26021                           
 26022                           ;main.c: 233: RD7=0;
 26023  018BE6  9E83               	bcf	3971,7,c	;volatile
 26024                           
 26025                           ;main.c: 234: RA2=0;
 26026  018BE8  9480               	bcf	3968,2,c	;volatile
 26027                           
 26028                           ;main.c: 235: RA3=0;
 26029  018BEA  9680               	bcf	3968,3,c	;volatile
 26030                           
 26031                           ;main.c: 236: RD7 = 1;
 26032  018BEC  8E83               	bsf	3971,7,c	;volatile
 26033  018BEE  0012               	return		;funcret
 26034  018BF0                     __end_of_STP4:
 26035                           	opt stack 0
 26036                           tosu	equ	0xFFF
 26037                           tosh	equ	0xFFE
 26038                           tosl	equ	0xFFD
 26039                           pclath	equ	0xFFA
 26040                           tblptru	equ	0xFF8
 26041                           tblptrh	equ	0xFF7
 26042                           tblptrl	equ	0xFF6
 26043                           tablat	equ	0xFF5
 26044                           prodh	equ	0xFF4
 26045                           prodl	equ	0xFF3
 26046                           intcon	equ	0xFF2
 26047                           indf0	equ	0xFEF
 26048                           postinc0	equ	0xFEE
 26049                           fsr0h	equ	0xFEA
 26050                           fsr0l	equ	0xFE9
 26051                           wreg	equ	0xFE8
 26052                           indf1	equ	0xFE7
 26053                           postdec1	equ	0xFE5
 26054                           fsr1h	equ	0xFE2
 26055                           fsr1l	equ	0xFE1
 26056                           indf2	equ	0xFDF
 26057                           postinc2	equ	0xFDE
 26058                           postdec2	equ	0xFDD
 26059                           plusw2	equ	0xFDB
 26060                           fsr2h	equ	0xFDA
 26061                           fsr2l	equ	0xFD9
 26062                           status	equ	0xFD8
 26063                           
 26064 ;; *************** function _STP3 *****************
 26065 ;; Defined at:
 26066 ;;		line 216 in file "main.c"
 26067 ;; Parameters:    Size  Location     Type
 26068 ;;		None
 26069 ;; Auto vars:     Size  Location     Type
 26070 ;;		None
 26071 ;; Return value:  Size  Location     Type
 26072 ;;                  2  2188[None  ] int 
 26073 ;; Registers used:
 26074 ;;		None
 26075 ;; Tracked objects:
 26076 ;;		On entry : 0/0
 26077 ;;		On exit  : 0/0
 26078 ;;		Unchanged: 0/0
 26079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26084 ;;Total ram usage:        0 bytes
 26085 ;; Hardware stack levels used:    1
 26086 ;; Hardware stack levels required when called:    7
 26087 ;; This function calls:
 26088 ;;		Nothing
 26089 ;; This function is called by:
 26090 ;;		_SteppingCCW
 26091 ;;		_SteppingCW
 26092 ;; This function uses a non-reentrant model
 26093 ;;
 26094                           
 26095                           	psect	text115
 26096  018BF0                     __ptext115:
 26097                           	opt stack 0
 26098  018BF0                     _STP3:
 26099                           	opt stack 20
 26100                           
 26101                           ;main.c: 217: TRISA2=0;
 26102                           
 26103                           ;incstack = 0
 26104  018BF0  9492               	bcf	3986,2,c	;volatile
 26105                           
 26106                           ;main.c: 218: TRISA3=0;
 26107  018BF2  9692               	bcf	3986,3,c	;volatile
 26108                           
 26109                           ;main.c: 219: TRISD5=0;
 26110  018BF4  9A95               	bcf	3989,5,c	;volatile
 26111                           
 26112                           ;main.c: 220: TRISD7=0;
 26113  018BF6  9E95               	bcf	3989,7,c	;volatile
 26114                           
 26115                           ;main.c: 221: RD5=0;
 26116  018BF8  9A83               	bcf	3971,5,c	;volatile
 26117                           
 26118                           ;main.c: 222: RD7=0;
 26119  018BFA  9E83               	bcf	3971,7,c	;volatile
 26120                           
 26121                           ;main.c: 223: RA2=0;
 26122  018BFC  9480               	bcf	3968,2,c	;volatile
 26123                           
 26124                           ;main.c: 224: RA3=0;
 26125  018BFE  9680               	bcf	3968,3,c	;volatile
 26126                           
 26127                           ;main.c: 225: RD5 = 1;
 26128  018C00  8A83               	bsf	3971,5,c	;volatile
 26129  018C02  0012               	return		;funcret
 26130  018C04                     __end_of_STP3:
 26131                           	opt stack 0
 26132                           tosu	equ	0xFFF
 26133                           tosh	equ	0xFFE
 26134                           tosl	equ	0xFFD
 26135                           pclath	equ	0xFFA
 26136                           tblptru	equ	0xFF8
 26137                           tblptrh	equ	0xFF7
 26138                           tblptrl	equ	0xFF6
 26139                           tablat	equ	0xFF5
 26140                           prodh	equ	0xFF4
 26141                           prodl	equ	0xFF3
 26142                           intcon	equ	0xFF2
 26143                           indf0	equ	0xFEF
 26144                           postinc0	equ	0xFEE
 26145                           fsr0h	equ	0xFEA
 26146                           fsr0l	equ	0xFE9
 26147                           wreg	equ	0xFE8
 26148                           indf1	equ	0xFE7
 26149                           postdec1	equ	0xFE5
 26150                           fsr1h	equ	0xFE2
 26151                           fsr1l	equ	0xFE1
 26152                           indf2	equ	0xFDF
 26153                           postinc2	equ	0xFDE
 26154                           postdec2	equ	0xFDD
 26155                           plusw2	equ	0xFDB
 26156                           fsr2h	equ	0xFDA
 26157                           fsr2l	equ	0xFD9
 26158                           status	equ	0xFD8
 26159                           
 26160 ;; *************** function _STP2 *****************
 26161 ;; Defined at:
 26162 ;;		line 205 in file "main.c"
 26163 ;; Parameters:    Size  Location     Type
 26164 ;;		None
 26165 ;; Auto vars:     Size  Location     Type
 26166 ;;		None
 26167 ;; Return value:  Size  Location     Type
 26168 ;;                  2  2185[None  ] int 
 26169 ;; Registers used:
 26170 ;;		None
 26171 ;; Tracked objects:
 26172 ;;		On entry : 0/0
 26173 ;;		On exit  : 0/0
 26174 ;;		Unchanged: 0/0
 26175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26180 ;;Total ram usage:        0 bytes
 26181 ;; Hardware stack levels used:    1
 26182 ;; Hardware stack levels required when called:    7
 26183 ;; This function calls:
 26184 ;;		Nothing
 26185 ;; This function is called by:
 26186 ;;		_SteppingCCW
 26187 ;;		_SteppingCW
 26188 ;; This function uses a non-reentrant model
 26189 ;;
 26190                           
 26191                           	psect	text116
 26192  018C04                     __ptext116:
 26193                           	opt stack 0
 26194  018C04                     _STP2:
 26195                           	opt stack 20
 26196                           
 26197                           ;main.c: 206: TRISA2=0;
 26198                           
 26199                           ;incstack = 0
 26200  018C04  9492               	bcf	3986,2,c	;volatile
 26201                           
 26202                           ;main.c: 207: TRISA3=0;
 26203  018C06  9692               	bcf	3986,3,c	;volatile
 26204                           
 26205                           ;main.c: 208: TRISD5=0;
 26206  018C08  9A95               	bcf	3989,5,c	;volatile
 26207                           
 26208                           ;main.c: 209: TRISD7=0;
 26209  018C0A  9E95               	bcf	3989,7,c	;volatile
 26210                           
 26211                           ;main.c: 210: RD5=0;
 26212  018C0C  9A83               	bcf	3971,5,c	;volatile
 26213                           
 26214                           ;main.c: 211: RD7=0;
 26215  018C0E  9E83               	bcf	3971,7,c	;volatile
 26216                           
 26217                           ;main.c: 212: RA2=0;
 26218  018C10  9480               	bcf	3968,2,c	;volatile
 26219                           
 26220                           ;main.c: 213: RA3=0;
 26221  018C12  9680               	bcf	3968,3,c	;volatile
 26222                           
 26223                           ;main.c: 214: RA3 = 1;
 26224  018C14  8680               	bsf	3968,3,c	;volatile
 26225  018C16  0012               	return		;funcret
 26226  018C18                     __end_of_STP2:
 26227                           	opt stack 0
 26228                           tosu	equ	0xFFF
 26229                           tosh	equ	0xFFE
 26230                           tosl	equ	0xFFD
 26231                           pclath	equ	0xFFA
 26232                           tblptru	equ	0xFF8
 26233                           tblptrh	equ	0xFF7
 26234                           tblptrl	equ	0xFF6
 26235                           tablat	equ	0xFF5
 26236                           prodh	equ	0xFF4
 26237                           prodl	equ	0xFF3
 26238                           intcon	equ	0xFF2
 26239                           indf0	equ	0xFEF
 26240                           postinc0	equ	0xFEE
 26241                           fsr0h	equ	0xFEA
 26242                           fsr0l	equ	0xFE9
 26243                           wreg	equ	0xFE8
 26244                           indf1	equ	0xFE7
 26245                           postdec1	equ	0xFE5
 26246                           fsr1h	equ	0xFE2
 26247                           fsr1l	equ	0xFE1
 26248                           indf2	equ	0xFDF
 26249                           postinc2	equ	0xFDE
 26250                           postdec2	equ	0xFDD
 26251                           plusw2	equ	0xFDB
 26252                           fsr2h	equ	0xFDA
 26253                           fsr2l	equ	0xFD9
 26254                           status	equ	0xFD8
 26255                           
 26256 ;; *************** function _STP1 *****************
 26257 ;; Defined at:
 26258 ;;		line 193 in file "main.c"
 26259 ;; Parameters:    Size  Location     Type
 26260 ;;		None
 26261 ;; Auto vars:     Size  Location     Type
 26262 ;;		None
 26263 ;; Return value:  Size  Location     Type
 26264 ;;                  2  2182[None  ] int 
 26265 ;; Registers used:
 26266 ;;		None
 26267 ;; Tracked objects:
 26268 ;;		On entry : 0/0
 26269 ;;		On exit  : 0/0
 26270 ;;		Unchanged: 0/0
 26271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26276 ;;Total ram usage:        0 bytes
 26277 ;; Hardware stack levels used:    1
 26278 ;; Hardware stack levels required when called:    7
 26279 ;; This function calls:
 26280 ;;		Nothing
 26281 ;; This function is called by:
 26282 ;;		_SteppingCCW
 26283 ;;		_SteppingCW
 26284 ;; This function uses a non-reentrant model
 26285 ;;
 26286                           
 26287                           	psect	text117
 26288  018C18                     __ptext117:
 26289                           	opt stack 0
 26290  018C18                     _STP1:
 26291                           	opt stack 20
 26292                           
 26293                           ;main.c: 194: TRISA2=0;
 26294                           
 26295                           ;incstack = 0
 26296  018C18  9492               	bcf	3986,2,c	;volatile
 26297                           
 26298                           ;main.c: 195: TRISA3=0;
 26299  018C1A  9692               	bcf	3986,3,c	;volatile
 26300                           
 26301                           ;main.c: 196: TRISD5=0;
 26302  018C1C  9A95               	bcf	3989,5,c	;volatile
 26303                           
 26304                           ;main.c: 197: TRISD7=0;
 26305  018C1E  9E95               	bcf	3989,7,c	;volatile
 26306                           
 26307                           ;main.c: 198: RD5=0;
 26308  018C20  9A83               	bcf	3971,5,c	;volatile
 26309                           
 26310                           ;main.c: 199: RD7=0;
 26311  018C22  9E83               	bcf	3971,7,c	;volatile
 26312                           
 26313                           ;main.c: 200: RA2=0;
 26314  018C24  9480               	bcf	3968,2,c	;volatile
 26315                           
 26316                           ;main.c: 201: RA3=0;
 26317  018C26  9680               	bcf	3968,3,c	;volatile
 26318                           
 26319                           ;main.c: 202: RA2 = 1;
 26320  018C28  8480               	bsf	3968,2,c	;volatile
 26321  018C2A  0012               	return		;funcret
 26322  018C2C                     __end_of_STP1:
 26323                           	opt stack 0
 26324                           tosu	equ	0xFFF
 26325                           tosh	equ	0xFFE
 26326                           tosl	equ	0xFFD
 26327                           pclath	equ	0xFFA
 26328                           tblptru	equ	0xFF8
 26329                           tblptrh	equ	0xFF7
 26330                           tblptrl	equ	0xFF6
 26331                           tablat	equ	0xFF5
 26332                           prodh	equ	0xFF4
 26333                           prodl	equ	0xFF3
 26334                           intcon	equ	0xFF2
 26335                           indf0	equ	0xFEF
 26336                           postinc0	equ	0xFEE
 26337                           fsr0h	equ	0xFEA
 26338                           fsr0l	equ	0xFE9
 26339                           wreg	equ	0xFE8
 26340                           indf1	equ	0xFE7
 26341                           postdec1	equ	0xFE5
 26342                           fsr1h	equ	0xFE2
 26343                           fsr1l	equ	0xFE1
 26344                           indf2	equ	0xFDF
 26345                           postinc2	equ	0xFDE
 26346                           postdec2	equ	0xFDD
 26347                           plusw2	equ	0xFDB
 26348                           fsr2h	equ	0xFDA
 26349                           fsr2l	equ	0xFD9
 26350                           status	equ	0xFD8
 26351                           
 26352 ;; *************** function _Console_Render *****************
 26353 ;; Defined at:
 26354 ;;		line 377 in file "Library/Console.c"
 26355 ;; Parameters:    Size  Location     Type
 26356 ;;		None
 26357 ;; Auto vars:     Size  Location     Type
 26358 ;;  lCursor         4   38[BANK0 ] struct Point
 26359 ;;  y               1   43[BANK0 ] unsigned char 
 26360 ;;  x               1   42[BANK0 ] unsigned char 
 26361 ;;  temp            1   37[BANK0 ] unsigned char 
 26362 ;;  Temp            2    0        unsigned short 
 26363 ;; Return value:  Size  Location     Type
 26364 ;;                  1    wreg      void 
 26365 ;; Registers used:
 26366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26367 ;; Tracked objects:
 26368 ;;		On entry : 0/0
 26369 ;;		On exit  : 0/0
 26370 ;;		Unchanged: 0/0
 26371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26373 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26375 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26376 ;;Total ram usage:        9 bytes
 26377 ;; Hardware stack levels used:    1
 26378 ;; Hardware stack levels required when called:   11
 26379 ;; This function calls:
 26380 ;;		_Console_MakeField
 26381 ;;		_LCD_DrawField
 26382 ;;		_LCD_FillRectangle
 26383 ;; This function is called by:
 26384 ;;		_Sensor_Observe
 26385 ;;		_Closest_Object
 26386 ;;		_main
 26387 ;;		_Detect_Victim
 26388 ;;		_Travel
 26389 ;;		_Move_ADC_To
 26390 ;;		_Navigate_Maze
 26391 ;;		_Find_Flag
 26392 ;; This function uses a non-reentrant model
 26393 ;;
 26394                           
 26395                           	psect	text118
 26396  014F44                     __ptext118:
 26397                           	opt stack 0
 26398  014F44                     _Console_Render:
 26399                           	opt stack 17
 26400                           
 26401                           ;Console.c: 379: Colour Temp;
 26402                           ;Console.c: 380: if (change)
 26403                           
 26404                           ;incstack = 0
 26405  014F44  504D               	movf	_change,w,c
 26406  014F46  B4D8               	btfsc	status,2,c
 26407  014F48  0012               	return	
 26408                           
 26409                           ;Console.c: 381: {
 26410                           ;Console.c: 382: UINT8 x, y, temp;
 26411                           ;Console.c: 383: Point lCursor = {6,6};
 26412  014F4A  C1C8  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 26413  014F4E  C1C9  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 26414  014F52  C1CA  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 26415  014F56  C1CB  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 26416                           
 26417                           ;Console.c: 385: if (clearall)
 26418  014F5A  5047               	movf	_clearall,w,c
 26419  014F5C  B4D8               	btfsc	status,2,c
 26420  014F5E  D004               	goto	l1056
 26421                           
 26422                           ;Console.c: 386: {
 26423                           ;Console.c: 389: temp = lBufferY;
 26424  014F60  C045  F085         	movff	_lBufferY,Console_Render@temp
 26425                           
 26426                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 26427  014F64  0E0F               	movlw	15
 26428  014F66  6E45               	movwf	_lBufferY,c
 26429  014F68                     l1056:
 26430                           
 26431                           ;Console.c: 391: }
 26432                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 26433  014F68  0E00               	movlw	0
 26434  014F6A  0100               	movlb	0	; () banked
 26435  014F6C  6F8B               	movwf	Console_Render@y& (0+255),b
 26436  014F6E  D0B9               	goto	l1057
 26437  014F70                     
 26438                           ; BSR set to: 0
 26439                           ;Console.c: 394: {
 26440                           ;Console.c: 395: gForecolour = lCBuffer[y];
 26441                           
 26442                           ; BSR set to: 0
 26443  014F70  518B               	movf	Console_Render@y& (0+255),w,b
 26444  014F72  0D02               	mullw	2
 26445  014F74  0E28               	movlw	low _lCBuffer
 26446  014F76  24F3               	addwf	prodl,w,c
 26447  014F78  6ED9               	movwf	fsr2l,c
 26448  014F7A  0E02               	movlw	high _lCBuffer
 26449  014F7C  20F4               	addwfc	prodh,w,c
 26450  014F7E  6EDA               	movwf	fsr2h,c
 26451  014F80  CFDE F1E4          	movff	postinc2,_gForecolour
 26452  014F84  CFDD F1E5          	movff	postdec2,_gForecolour+1
 26453                           
 26454                           ; BSR set to: 0
 26455                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26456  014F88  0E00               	movlw	0
 26457  014F8A  6F8A               	movwf	Console_Render@x& (0+255),b
 26458  014F8C                     l15091:
 26459                           
 26460                           ; BSR set to: 0
 26461  014F8C  0E13               	movlw	19
 26462  014F8E  658A               	cpfsgt	Console_Render@x& (0+255),b
 26463  014F90  D001               	goto	l1059
 26464  014F92  D09E               	goto	u12560
 26465  014F94                     l1059:
 26466                           
 26467                           ; BSR set to: 0
 26468                           ;Console.c: 397: {
 26469                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 26470                           
 26471                           ; BSR set to: 0
 26472  014F94  518B               	movf	Console_Render@y& (0+255),w,b
 26473  014F96  0D14               	mullw	20
 26474  014F98  0E46               	movlw	low _lBuffer
 26475  014F9A  6F83               	movwf	??_Console_Render& (0+255),b
 26476  014F9C  0E04               	movlw	high _lBuffer
 26477  014F9E  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26478  014FA0  50F3               	movf	prodl,w,c
 26479  014FA2  2783               	addwf	??_Console_Render& (0+255),f,b
 26480  014FA4  50F4               	movf	prodh,w,c
 26481  014FA6  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26482  014FA8  518A               	movf	Console_Render@x& (0+255),w,b
 26483  014FAA  0D01               	mullw	1
 26484  014FAC  50F3               	movf	prodl,w,c
 26485  014FAE  2583               	addwf	??_Console_Render& (0+255),w,b
 26486  014FB0  6ED9               	movwf	fsr2l,c
 26487  014FB2  50F4               	movf	prodh,w,c
 26488  014FB4  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26489  014FB6  6EDA               	movwf	fsr2h,c
 26490  014FB8  AEDF               	btfss	indf2,7,c
 26491  014FBA  D083               	goto	l1063
 26492                           
 26493                           ; BSR set to: 0
 26494                           ;Console.c: 399: {
 26495                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 26496  014FBC  518B               	movf	Console_Render@y& (0+255),w,b
 26497  014FBE  0D14               	mullw	20
 26498  014FC0  0E46               	movlw	low _lBuffer
 26499  014FC2  6F83               	movwf	??_Console_Render& (0+255),b
 26500  014FC4  0E04               	movlw	high _lBuffer
 26501  014FC6  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26502  014FC8  50F3               	movf	prodl,w,c
 26503  014FCA  2783               	addwf	??_Console_Render& (0+255),f,b
 26504  014FCC  50F4               	movf	prodh,w,c
 26505  014FCE  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26506  014FD0  518A               	movf	Console_Render@x& (0+255),w,b
 26507  014FD2  0D01               	mullw	1
 26508  014FD4  50F3               	movf	prodl,w,c
 26509  014FD6  2583               	addwf	??_Console_Render& (0+255),w,b
 26510  014FD8  6ED9               	movwf	fsr2l,c
 26511  014FDA  50F4               	movf	prodh,w,c
 26512  014FDC  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26513  014FDE  6EDA               	movwf	fsr2h,c
 26514  014FE0  0E7F               	movlw	127
 26515  014FE2  16DF               	andwf	indf2,f,c
 26516                           
 26517                           ;Console.c: 401: if (lBuffer[y][x])
 26518  014FE4  518B               	movf	Console_Render@y& (0+255),w,b
 26519  014FE6  0D14               	mullw	20
 26520  014FE8  0E46               	movlw	low _lBuffer
 26521  014FEA  6F83               	movwf	??_Console_Render& (0+255),b
 26522  014FEC  0E04               	movlw	high _lBuffer
 26523  014FEE  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26524  014FF0  50F3               	movf	prodl,w,c
 26525  014FF2  2783               	addwf	??_Console_Render& (0+255),f,b
 26526  014FF4  50F4               	movf	prodh,w,c
 26527  014FF6  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26528  014FF8  518A               	movf	Console_Render@x& (0+255),w,b
 26529  014FFA  0D01               	mullw	1
 26530  014FFC  50F3               	movf	prodl,w,c
 26531  014FFE  2583               	addwf	??_Console_Render& (0+255),w,b
 26532  015000  6ED9               	movwf	fsr2l,c
 26533  015002  50F4               	movf	prodh,w,c
 26534  015004  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26535  015006  6EDA               	movwf	fsr2h,c
 26536  015008  50DF               	movf	indf2,w,c
 26537  01500A  B4D8               	btfsc	status,2,c
 26538  01500C  D043               	goto	l1062
 26539                           
 26540                           ; BSR set to: 0
 26541                           ;Console.c: 402: {
 26542                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 26543  01500E  C154  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 26544  015012  C155  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 26545  015016  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 26546  01501A  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 26547  01501E  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 26548  015022  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 26549  015026  C1D0  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 26550  01502A  C1D1  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 26551  01502E  C1D2  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 26552  015032  C1D3  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 26553  015036  EC3C  F0BF         	call	_LCD_FillRectangle	;wreg free
 26554                           
 26555                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 26556  01503A  0100               	movlb	0	; () banked
 26557  01503C  518B               	movf	Console_Render@y& (0+255),w,b
 26558  01503E  0D14               	mullw	20
 26559  015040  0E46               	movlw	low _lBuffer
 26560  015042  6F83               	movwf	??_Console_Render& (0+255),b
 26561  015044  0E04               	movlw	high _lBuffer
 26562  015046  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 26563  015048  50F3               	movf	prodl,w,c
 26564  01504A  2783               	addwf	??_Console_Render& (0+255),f,b
 26565  01504C  50F4               	movf	prodh,w,c
 26566  01504E  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 26567  015050  518A               	movf	Console_Render@x& (0+255),w,b
 26568  015052  0D01               	mullw	1
 26569  015054  50F3               	movf	prodl,w,c
 26570  015056  2583               	addwf	??_Console_Render& (0+255),w,b
 26571  015058  6ED9               	movwf	fsr2l,c
 26572  01505A  50F4               	movf	prodh,w,c
 26573  01505C  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 26574  01505E  6EDA               	movwf	fsr2h,c
 26575  015060  50DF               	movf	indf2,w,c
 26576  015062  ECF9  F0B6         	call	_Console_MakeField
 26577  015066  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 26578  01506A  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 26579  01506E  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 26580  015072  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 26581  015076  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 26582  01507A  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 26583  01507E  C1D0  F078         	movff	_gCharSize,LCD_DrawField@pSize
 26584  015082  C1D1  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 26585  015086  C1D2  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 26586  01508A  C1D3  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 26587  01508E  ECAE  F0BA         	call	_LCD_DrawField	;wreg free
 26588                           
 26589                           ;Console.c: 405: }
 26590  015092  D017               	goto	l1063
 26591  015094                     l1062:
 26592                           
 26593                           ;Console.c: 406: else
 26594                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 26595  015094  0E00               	movlw	0
 26596  015096  0100               	movlb	0	; () banked
 26597  015098  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 26598  01509A  0E00               	movlw	0
 26599  01509C  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 26600  01509E  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 26601  0150A2  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 26602  0150A6  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 26603  0150AA  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 26604  0150AE  C1D0  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 26605  0150B2  C1D1  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 26606  0150B6  C1D2  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 26607  0150BA  C1D3  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 26608  0150BE  EC3C  F0BF         	call	_LCD_FillRectangle	;wreg free
 26609  0150C2                     l1063:
 26610                           
 26611                           ;Console.c: 408: }
 26612                           ;Console.c: 409: lCursor.x += (5 + 1);
 26613  0150C2  0E06               	movlw	6
 26614  0150C4  0100               	movlb	0	; () banked
 26615  0150C6  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 26616  0150C8  0E00               	movlw	0
 26617  0150CA  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 26618                           
 26619                           ; BSR set to: 0
 26620  0150CC  2B8A               	incf	Console_Render@x& (0+255),f,b
 26621  0150CE  D75E               	goto	l15091
 26622  0150D0                     u12560:
 26623                           
 26624                           ; BSR set to: 0
 26625                           ;Console.c: 410: }
 26626                           ;Console.c: 411: lCursor.y += (7 + 1);
 26627                           
 26628                           ; BSR set to: 0
 26629  0150D0  0E08               	movlw	8
 26630  0150D2  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 26631  0150D4  0E00               	movlw	0
 26632  0150D6  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 26633                           
 26634                           ; BSR set to: 0
 26635                           ;Console.c: 412: lCursor.x = 6;
 26636  0150D8  0E00               	movlw	0
 26637  0150DA  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 26638  0150DC  0E06               	movlw	6
 26639  0150DE  6F86               	movwf	Console_Render@lCursor& (0+255),b
 26640                           
 26641                           ; BSR set to: 0
 26642  0150E0  2B8B               	incf	Console_Render@y& (0+255),f,b
 26643  0150E2                     l1057:
 26644                           
 26645                           ; BSR set to: 0
 26646                           
 26647                           ; BSR set to: 0
 26648  0150E2  518B               	movf	Console_Render@y& (0+255),w,b
 26649  0150E4  5C45               	subwf	_lBufferY,w,c
 26650  0150E6  B0D8               	btfsc	status,0,c
 26651  0150E8  D743               	goto	l1058
 26652                           
 26653                           ; BSR set to: 0
 26654                           ;Console.c: 413: }
 26655                           ;Console.c: 415: if (clearall)
 26656                           
 26657                           ; BSR set to: 0
 26658  0150EA  5047               	movf	_clearall,w,c
 26659  0150EC  B4D8               	btfsc	status,2,c
 26660  0150EE  0012               	return	
 26661                           
 26662                           ; BSR set to: 0
 26663                           ;Console.c: 416: {
 26664                           ;Console.c: 417: clearall = 0;
 26665  0150F0  0E00               	movlw	0
 26666  0150F2  6E47               	movwf	_clearall,c
 26667                           
 26668                           ; BSR set to: 0
 26669                           ;Console.c: 418: lBufferY = temp;
 26670  0150F4  C085  F045         	movff	Console_Render@temp,_lBufferY
 26671                           
 26672                           ; BSR set to: 0
 26673  0150F8  0012               	return	
 26674  0150FA                     __end_of_Console_Render:
 26675                           	opt stack 0
 26676                           tosu	equ	0xFFF
 26677                           tosh	equ	0xFFE
 26678                           tosl	equ	0xFFD
 26679                           pclath	equ	0xFFA
 26680                           tblptru	equ	0xFF8
 26681                           tblptrh	equ	0xFF7
 26682                           tblptrl	equ	0xFF6
 26683                           tablat	equ	0xFF5
 26684                           prodh	equ	0xFF4
 26685                           prodl	equ	0xFF3
 26686                           intcon	equ	0xFF2
 26687                           indf0	equ	0xFEF
 26688                           postinc0	equ	0xFEE
 26689                           fsr0h	equ	0xFEA
 26690                           fsr0l	equ	0xFE9
 26691                           wreg	equ	0xFE8
 26692                           indf1	equ	0xFE7
 26693                           postdec1	equ	0xFE5
 26694                           fsr1h	equ	0xFE2
 26695                           fsr1l	equ	0xFE1
 26696                           indf2	equ	0xFDF
 26697                           postinc2	equ	0xFDE
 26698                           postdec2	equ	0xFDD
 26699                           plusw2	equ	0xFDB
 26700                           fsr2h	equ	0xFDA
 26701                           fsr2l	equ	0xFD9
 26702                           status	equ	0xFD8
 26703                           
 26704 ;; *************** function _LCD_FillRectangle *****************
 26705 ;; Defined at:
 26706 ;;		line 318 in file "Library/LCD.c"
 26707 ;; Parameters:    Size  Location     Type
 26708 ;;  pColour         2    9[BANK0 ] unsigned short 
 26709 ;;  pPoint          4   11[BANK0 ] struct Point
 26710 ;;  pSize           4   15[BANK0 ] struct Point
 26711 ;; Auto vars:     Size  Location     Type
 26712 ;;  j               1   22[BANK0 ] unsigned char 
 26713 ;;  i               1   21[BANK0 ] unsigned char 
 26714 ;; Return value:  Size  Location     Type
 26715 ;;                  1    wreg      void 
 26716 ;; Registers used:
 26717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26718 ;; Tracked objects:
 26719 ;;		On entry : 0/0
 26720 ;;		On exit  : 0/0
 26721 ;;		Unchanged: 0/0
 26722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26723 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26724 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26726 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26727 ;;Total ram usage:       14 bytes
 26728 ;; Hardware stack levels used:    1
 26729 ;; Hardware stack levels required when called:   10
 26730 ;; This function calls:
 26731 ;;		_LCD_Word_Write
 26732 ;;		_Set_Addr_Window
 26733 ;; This function is called by:
 26734 ;;		_Console_Render
 26735 ;;		_Console_ClearLine
 26736 ;; This function uses a non-reentrant model
 26737 ;;
 26738                           
 26739                           	psect	text119
 26740  017E78                     __ptext119:
 26741                           	opt stack 0
 26742  017E78                     _LCD_FillRectangle:
 26743                           	opt stack 17
 26744                           
 26745                           ;LCD.c: 320: UINT8 i = 0x00;
 26746                           
 26747                           ;incstack = 0
 26748  017E78  0E00               	movlw	0
 26749  017E7A  0100               	movlb	0	; () banked
 26750  017E7C  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 26751                           
 26752                           ;LCD.c: 321: UINT8 j = 0x00;
 26753  017E7E  0E00               	movlw	0
 26754  017E80  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 26755                           
 26756                           ; BSR set to: 0
 26757                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 26758  017E82  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 26759  017E86  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 26760  017E88  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 26761  017E8A  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 26762  017E8C  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 26763  017E8E  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 26764  017E90  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 26765  017E92  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 26766  017E94  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 26767  017E96  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 26768  017E98  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 26769  017E9A  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 26770  017E9C  EC36  F0B8         	call	_Set_Addr_Window
 26771                           
 26772                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 26773  017EA0  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 26774  017EA4  0100               	movlb	0	; () banked
 26775  017EA6  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 26776  017EA8  B4D8               	btfsc	status,2,c
 26777  017EAA  0012               	return	
 26778                           
 26779                           ; BSR set to: 0
 26780                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 26781                           
 26782                           ; BSR set to: 0
 26783  017EAC  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 26784  017EB0                     l14797:
 26785                           
 26786                           ; BSR set to: 0
 26787  017EB0  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 26788  017EB2  B4D8               	btfsc	status,2,c
 26789  017EB4  D009               	goto	u12170
 26790                           
 26791                           ; BSR set to: 0
 26792                           ;LCD.c: 333: LCD_Word_Write(pColour);
 26793                           
 26794                           ; BSR set to: 0
 26795                           
 26796                           ; BSR set to: 0
 26797  017EB6  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 26798  017EBA  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 26799  017EBE  EC28  F0C5         	call	_LCD_Word_Write	;wreg free
 26800  017EC2  0100               	movlb	0	; () banked
 26801  017EC4  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 26802  017EC6  D7F4               	goto	l14797
 26803  017EC8                     u12170:
 26804                           
 26805                           ; BSR set to: 0
 26806                           
 26807                           ; BSR set to: 0
 26808  017EC8  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 26809  017ECA  D7ED               	goto	L17
 26810  017ECC                     __end_of_LCD_FillRectangle:
 26811                           	opt stack 0
 26812                           tosu	equ	0xFFF
 26813                           tosh	equ	0xFFE
 26814                           tosl	equ	0xFFD
 26815                           pclath	equ	0xFFA
 26816                           tblptru	equ	0xFF8
 26817                           tblptrh	equ	0xFF7
 26818                           tblptrl	equ	0xFF6
 26819                           tablat	equ	0xFF5
 26820                           prodh	equ	0xFF4
 26821                           prodl	equ	0xFF3
 26822                           intcon	equ	0xFF2
 26823                           indf0	equ	0xFEF
 26824                           postinc0	equ	0xFEE
 26825                           fsr0h	equ	0xFEA
 26826                           fsr0l	equ	0xFE9
 26827                           wreg	equ	0xFE8
 26828                           indf1	equ	0xFE7
 26829                           postdec1	equ	0xFE5
 26830                           fsr1h	equ	0xFE2
 26831                           fsr1l	equ	0xFE1
 26832                           indf2	equ	0xFDF
 26833                           postinc2	equ	0xFDE
 26834                           postdec2	equ	0xFDD
 26835                           plusw2	equ	0xFDB
 26836                           fsr2h	equ	0xFDA
 26837                           fsr2l	equ	0xFD9
 26838                           status	equ	0xFD8
 26839                           
 26840 ;; *************** function _LCD_DrawField *****************
 26841 ;; Defined at:
 26842 ;;		line 393 in file "Library/LCD.c"
 26843 ;; Parameters:    Size  Location     Type
 26844 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 26845 ;;		 -> Console_MakeField@Fill(70), 
 26846 ;;  pPoint          4   20[BANK0 ] struct Point
 26847 ;;  pSize           4   24[BANK0 ] struct Point
 26848 ;; Auto vars:     Size  Location     Type
 26849 ;;  count           2   30[BANK0 ] unsigned short 
 26850 ;;  i               1   34[BANK0 ] unsigned char 
 26851 ;;  ymax            1   33[BANK0 ] unsigned char 
 26852 ;;  xmax            1   32[BANK0 ] unsigned char 
 26853 ;; Return value:  Size  Location     Type
 26854 ;;                  1    wreg      void 
 26855 ;; Registers used:
 26856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26857 ;; Tracked objects:
 26858 ;;		On entry : 0/0
 26859 ;;		On exit  : 0/0
 26860 ;;		Unchanged: 0/0
 26861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26862 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26863 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26864 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26865 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26866 ;;Total ram usage:       17 bytes
 26867 ;; Hardware stack levels used:    1
 26868 ;; Hardware stack levels required when called:   10
 26869 ;; This function calls:
 26870 ;;		_LCD_Word_Write
 26871 ;;		_Set_Addr_Window
 26872 ;;		___wmul
 26873 ;; This function is called by:
 26874 ;;		_Console_Render
 26875 ;; This function uses a non-reentrant model
 26876 ;;
 26877                           
 26878                           	psect	text120
 26879  01755C                     __ptext120:
 26880                           	opt stack 0
 26881  01755C                     _LCD_DrawField:
 26882                           	opt stack 17
 26883                           
 26884                           ;LCD.c: 396: UINT8 i = 0x00;
 26885                           
 26886                           ; BSR set to: 0
 26887                           ;incstack = 0
 26888  01755C  0E00               	movlw	0
 26889  01755E  0100               	movlb	0	; () banked
 26890  017560  6F82               	movwf	LCD_DrawField@i& (0+255),b
 26891                           
 26892                           ; BSR set to: 0
 26893                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 26894  017562  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 26895  017564  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 26896  017566  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 26897                           
 26898                           ; BSR set to: 0
 26899                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 26900  017568  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 26901  01756A  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 26902  01756C  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 26903                           
 26904                           ; BSR set to: 0
 26905                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 26906  01756E  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 26907  017572  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 26908  017576  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 26909  01757A  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 26910  01757E  EC40  F0C4         	call	___wmul	;wreg free
 26911  017582  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 26912  017586  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 26913                           
 26914                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 26915  01758A  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 26916  01758E  0100               	movlb	0	; () banked
 26917  017590  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 26918  017592  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 26919  017594  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 26920  017596  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 26921  017598  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 26922  01759A  EC36  F0B8         	call	_Set_Addr_Window
 26923                           
 26924                           ;LCD.c: 403: for(i = 0; i < count; i++)
 26925  01759E  0E00               	movlw	0
 26926  0175A0  0100               	movlb	0	; () banked
 26927  0175A2  6F82               	movwf	LCD_DrawField@i& (0+255),b
 26928  0175A4  D010               	goto	l183
 26929  0175A6                     
 26930                           ; BSR set to: 0
 26931                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 26932                           
 26933                           ; BSR set to: 0
 26934  0175A6  5182               	movf	LCD_DrawField@i& (0+255),w,b
 26935  0175A8  0D02               	mullw	2
 26936  0175AA  50F3               	movf	prodl,w,c
 26937  0175AC  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 26938  0175AE  6ED9               	movwf	fsr2l,c
 26939  0175B0  50F4               	movf	prodh,w,c
 26940  0175B2  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 26941  0175B4  6EDA               	movwf	fsr2h,c
 26942  0175B6  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 26943  0175BA  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 26944  0175BE  EC28  F0C5         	call	_LCD_Word_Write	;wreg free
 26945  0175C2  0100               	movlb	0	; () banked
 26946  0175C4  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 26947  0175C6                     l183:
 26948                           
 26949                           ; BSR set to: 0
 26950                           
 26951                           ; BSR set to: 0
 26952  0175C6  5182               	movf	LCD_DrawField@i& (0+255),w,b
 26953  0175C8  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 26954  0175CA  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 26955  0175CC  517E               	movf	LCD_DrawField@count& (0+255),w,b
 26956  0175CE  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 26957  0175D0  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 26958  0175D2  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 26959  0175D4  B0D8               	btfsc	status,0,c
 26960  0175D6  0012               	return	
 26961  0175D8  D7E6               	goto	l184
 26962  0175DA                     __end_of_LCD_DrawField:
 26963                           	opt stack 0
 26964                           tosu	equ	0xFFF
 26965                           tosh	equ	0xFFE
 26966                           tosl	equ	0xFFD
 26967                           pclath	equ	0xFFA
 26968                           tblptru	equ	0xFF8
 26969                           tblptrh	equ	0xFF7
 26970                           tblptrl	equ	0xFF6
 26971                           tablat	equ	0xFF5
 26972                           prodh	equ	0xFF4
 26973                           prodl	equ	0xFF3
 26974                           intcon	equ	0xFF2
 26975                           indf0	equ	0xFEF
 26976                           postinc0	equ	0xFEE
 26977                           fsr0h	equ	0xFEA
 26978                           fsr0l	equ	0xFE9
 26979                           wreg	equ	0xFE8
 26980                           indf1	equ	0xFE7
 26981                           postdec1	equ	0xFE5
 26982                           fsr1h	equ	0xFE2
 26983                           fsr1l	equ	0xFE1
 26984                           indf2	equ	0xFDF
 26985                           postinc2	equ	0xFDE
 26986                           postdec2	equ	0xFDD
 26987                           plusw2	equ	0xFDB
 26988                           fsr2h	equ	0xFDA
 26989                           fsr2l	equ	0xFD9
 26990                           status	equ	0xFD8
 26991                           
 26992 ;; *************** function ___wmul *****************
 26993 ;; Defined at:
 26994 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 26995 ;; Parameters:    Size  Location     Type
 26996 ;;  multiplier      2    0[BANK0 ] unsigned int 
 26997 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 26998 ;; Auto vars:     Size  Location     Type
 26999 ;;  product         2    4[BANK0 ] unsigned int 
 27000 ;; Return value:  Size  Location     Type
 27001 ;;                  2    0[BANK0 ] unsigned int 
 27002 ;; Registers used:
 27003 ;;		wreg, status,2, status,0, prodl, prodh
 27004 ;; Tracked objects:
 27005 ;;		On entry : 0/0
 27006 ;;		On exit  : 0/0
 27007 ;;		Unchanged: 0/0
 27008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27009 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27012 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27013 ;;Total ram usage:        6 bytes
 27014 ;; Hardware stack levels used:    1
 27015 ;; Hardware stack levels required when called:    7
 27016 ;; This function calls:
 27017 ;;		Nothing
 27018 ;; This function is called by:
 27019 ;;		_LCD_DrawField
 27020 ;;		_main
 27021 ;;		_Create_Maze
 27022 ;;		_Travel
 27023 ;;		_Go_Backward
 27024 ;;		_Navigate_Maze
 27025 ;; This function uses a non-reentrant model
 27026 ;;
 27027                           
 27028                           	psect	text121
 27029  018880                     __ptext121:
 27030                           	opt stack 0
 27031  018880                     ___wmul:
 27032                           	opt stack 23
 27033                           
 27034                           ; BSR set to: 0
 27035                           ;incstack = 0
 27036  018880  0100               	movlb	0	; () banked
 27037  018882  5160               	movf	___wmul@multiplier& (0+255),w,b
 27038  018884  0362               	mulwf	___wmul@multiplicand& (0+255),b
 27039  018886  CFF3 F064          	movff	prodl,___wmul@product
 27040  01888A  CFF4 F065          	movff	prodh,___wmul@product+1
 27041  01888E  5160               	movf	___wmul@multiplier& (0+255),w,b
 27042  018890  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 27043  018892  50F3               	movf	prodl,w,c
 27044  018894  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 27045  018896  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 27046  018898  0362               	mulwf	___wmul@multiplicand& (0+255),b
 27047  01889A  50F3               	movf	prodl,w,c
 27048  01889C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 27049                           
 27050                           ; BSR set to: 0
 27051  01889E  C064  F060         	movff	___wmul@product,?___wmul
 27052  0188A2  C065  F061         	movff	___wmul@product+1,?___wmul+1
 27053  0188A6  0012               	return	
 27054  0188A8                     __end_of___wmul:
 27055                           	opt stack 0
 27056                           tosu	equ	0xFFF
 27057                           tosh	equ	0xFFE
 27058                           tosl	equ	0xFFD
 27059                           pclath	equ	0xFFA
 27060                           tblptru	equ	0xFF8
 27061                           tblptrh	equ	0xFF7
 27062                           tblptrl	equ	0xFF6
 27063                           tablat	equ	0xFF5
 27064                           prodh	equ	0xFF4
 27065                           prodl	equ	0xFF3
 27066                           intcon	equ	0xFF2
 27067                           indf0	equ	0xFEF
 27068                           postinc0	equ	0xFEE
 27069                           fsr0h	equ	0xFEA
 27070                           fsr0l	equ	0xFE9
 27071                           wreg	equ	0xFE8
 27072                           indf1	equ	0xFE7
 27073                           postdec1	equ	0xFE5
 27074                           fsr1h	equ	0xFE2
 27075                           fsr1l	equ	0xFE1
 27076                           indf2	equ	0xFDF
 27077                           postinc2	equ	0xFDE
 27078                           postdec2	equ	0xFDD
 27079                           plusw2	equ	0xFDB
 27080                           fsr2h	equ	0xFDA
 27081                           fsr2l	equ	0xFD9
 27082                           status	equ	0xFD8
 27083                           
 27084 ;; *************** function _Set_Addr_Window *****************
 27085 ;; Defined at:
 27086 ;;		line 214 in file "Library/LCD.c"
 27087 ;; Parameters:    Size  Location     Type
 27088 ;;  xs              1    wreg     unsigned char 
 27089 ;;  ys              1    5[BANK0 ] unsigned char 
 27090 ;;  xe              1    6[BANK0 ] unsigned char 
 27091 ;;  ye              1    7[BANK0 ] unsigned char 
 27092 ;; Auto vars:     Size  Location     Type
 27093 ;;  xs              1    8[BANK0 ] unsigned char 
 27094 ;; Return value:  Size  Location     Type
 27095 ;;                  1    wreg      void 
 27096 ;; Registers used:
 27097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27098 ;; Tracked objects:
 27099 ;;		On entry : 0/0
 27100 ;;		On exit  : 0/0
 27101 ;;		Unchanged: 0/0
 27102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27103 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27106 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27107 ;;Total ram usage:        4 bytes
 27108 ;; Hardware stack levels used:    1
 27109 ;; Hardware stack levels required when called:    9
 27110 ;; This function calls:
 27111 ;;		_LCD_Write
 27112 ;; This function is called by:
 27113 ;;		_LCD_Fill
 27114 ;;		_LCD_FillRectangle
 27115 ;;		_LCD_DrawField
 27116 ;;		_RAM_Address_Set
 27117 ;;		_LCD_DrawPixel
 27118 ;; This function uses a non-reentrant model
 27119 ;;
 27120                           
 27121                           	psect	text122
 27122  01706C                     __ptext122:
 27123                           	opt stack 0
 27124  01706C                     _Set_Addr_Window:
 27125                           	opt stack 17
 27126                           
 27127                           ; BSR set to: 0
 27128                           ;incstack = 0
 27129                           ;Set_Addr_Window@xs stored from wreg
 27130  01706C  0100               	movlb	0	; () banked
 27131  01706E  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 27132                           
 27133                           ;LCD.c: 216: ys+=2;
 27134  017070  0E02               	movlw	2
 27135  017072  0100               	movlb	0	; () banked
 27136  017074  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 27137                           
 27138                           ;LCD.c: 217: ye+=2;
 27139  017076  0E02               	movlw	2
 27140  017078  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 27141                           
 27142                           ;LCD.c: 218: xs+=3;
 27143  01707A  0E03               	movlw	3
 27144  01707C  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 27145                           
 27146                           ;LCD.c: 219: xe+=3;
 27147  01707E  0E03               	movlw	3
 27148  017080  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 27149                           
 27150                           ; BSR set to: 0
 27151                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 27152  017082  0E00               	movlw	0
 27153  017084  6F63               	movwf	LCD_Write@mode& (0+255),b
 27154  017086  0E2A               	movlw	42
 27155  017088  ECE0  F0C4         	call	_LCD_Write
 27156                           
 27157                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 27158  01708C  0E01               	movlw	1
 27159  01708E  0100               	movlb	0	; () banked
 27160  017090  6F63               	movwf	LCD_Write@mode& (0+255),b
 27161  017092  0E00               	movlw	0
 27162  017094  ECE0  F0C4         	call	_LCD_Write
 27163                           
 27164                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 27165  017098  0E01               	movlw	1
 27166  01709A  0100               	movlb	0	; () banked
 27167  01709C  6F63               	movwf	LCD_Write@mode& (0+255),b
 27168  01709E  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 27169  0170A0  ECE0  F0C4         	call	_LCD_Write
 27170                           
 27171                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 27172  0170A4  0E01               	movlw	1
 27173  0170A6  0100               	movlb	0	; () banked
 27174  0170A8  6F63               	movwf	LCD_Write@mode& (0+255),b
 27175  0170AA  0E00               	movlw	0
 27176  0170AC  ECE0  F0C4         	call	_LCD_Write
 27177                           
 27178                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 27179  0170B0  0E01               	movlw	1
 27180  0170B2  0100               	movlb	0	; () banked
 27181  0170B4  6F63               	movwf	LCD_Write@mode& (0+255),b
 27182  0170B6  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 27183  0170B8  ECE0  F0C4         	call	_LCD_Write
 27184                           
 27185                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 27186  0170BC  0E00               	movlw	0
 27187  0170BE  0100               	movlb	0	; () banked
 27188  0170C0  6F63               	movwf	LCD_Write@mode& (0+255),b
 27189  0170C2  0E2B               	movlw	43
 27190  0170C4  ECE0  F0C4         	call	_LCD_Write
 27191                           
 27192                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 27193  0170C8  0E01               	movlw	1
 27194  0170CA  0100               	movlb	0	; () banked
 27195  0170CC  6F63               	movwf	LCD_Write@mode& (0+255),b
 27196  0170CE  0E00               	movlw	0
 27197  0170D0  ECE0  F0C4         	call	_LCD_Write
 27198                           
 27199                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 27200  0170D4  0E01               	movlw	1
 27201  0170D6  0100               	movlb	0	; () banked
 27202  0170D8  6F63               	movwf	LCD_Write@mode& (0+255),b
 27203  0170DA  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 27204  0170DC  ECE0  F0C4         	call	_LCD_Write
 27205                           
 27206                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 27207  0170E0  0E01               	movlw	1
 27208  0170E2  0100               	movlb	0	; () banked
 27209  0170E4  6F63               	movwf	LCD_Write@mode& (0+255),b
 27210  0170E6  0E00               	movlw	0
 27211  0170E8  ECE0  F0C4         	call	_LCD_Write
 27212                           
 27213                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 27214  0170EC  0E01               	movlw	1
 27215  0170EE  0100               	movlb	0	; () banked
 27216  0170F0  6F63               	movwf	LCD_Write@mode& (0+255),b
 27217  0170F2  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 27218  0170F4  ECE0  F0C4         	call	_LCD_Write
 27219                           
 27220                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 27221  0170F8  0E00               	movlw	0
 27222  0170FA  0100               	movlb	0	; () banked
 27223  0170FC  6F63               	movwf	LCD_Write@mode& (0+255),b
 27224  0170FE  0E2C               	movlw	44
 27225  017100  ECE0  F0C4         	call	_LCD_Write
 27226  017104  0012               	return		;funcret
 27227  017106                     __end_of_Set_Addr_Window:
 27228                           	opt stack 0
 27229                           tosu	equ	0xFFF
 27230                           tosh	equ	0xFFE
 27231                           tosl	equ	0xFFD
 27232                           pclath	equ	0xFFA
 27233                           tblptru	equ	0xFF8
 27234                           tblptrh	equ	0xFF7
 27235                           tblptrl	equ	0xFF6
 27236                           tablat	equ	0xFF5
 27237                           prodh	equ	0xFF4
 27238                           prodl	equ	0xFF3
 27239                           intcon	equ	0xFF2
 27240                           indf0	equ	0xFEF
 27241                           postinc0	equ	0xFEE
 27242                           fsr0h	equ	0xFEA
 27243                           fsr0l	equ	0xFE9
 27244                           wreg	equ	0xFE8
 27245                           indf1	equ	0xFE7
 27246                           postdec1	equ	0xFE5
 27247                           fsr1h	equ	0xFE2
 27248                           fsr1l	equ	0xFE1
 27249                           indf2	equ	0xFDF
 27250                           postinc2	equ	0xFDE
 27251                           postdec2	equ	0xFDD
 27252                           plusw2	equ	0xFDB
 27253                           fsr2h	equ	0xFDA
 27254                           fsr2l	equ	0xFD9
 27255                           status	equ	0xFD8
 27256                           
 27257 ;; *************** function _LCD_Word_Write *****************
 27258 ;; Defined at:
 27259 ;;		line 198 in file "Library/LCD.c"
 27260 ;; Parameters:    Size  Location     Type
 27261 ;;  value           2    5[BANK0 ] unsigned short 
 27262 ;; Auto vars:     Size  Location     Type
 27263 ;;		None
 27264 ;; Return value:  Size  Location     Type
 27265 ;;                  1    wreg      void 
 27266 ;; Registers used:
 27267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27268 ;; Tracked objects:
 27269 ;;		On entry : 0/0
 27270 ;;		On exit  : 0/0
 27271 ;;		Unchanged: 0/0
 27272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27277 ;;Total ram usage:        2 bytes
 27278 ;; Hardware stack levels used:    1
 27279 ;; Hardware stack levels required when called:    9
 27280 ;; This function calls:
 27281 ;;		_LCD_Write
 27282 ;; This function is called by:
 27283 ;;		_LCD_Fill
 27284 ;;		_LCD_FillRectangle
 27285 ;;		_LCD_DrawField
 27286 ;;		_LCD_DrawPixel
 27287 ;; This function uses a non-reentrant model
 27288 ;;
 27289                           
 27290                           	psect	text123
 27291  018A50                     __ptext123:
 27292                           	opt stack 0
 27293  018A50                     _LCD_Word_Write:
 27294                           	opt stack 17
 27295                           
 27296                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 27297                           
 27298                           ;incstack = 0
 27299  018A50  0E01               	movlw	1
 27300  018A52  0100               	movlb	0	; () banked
 27301  018A54  6F63               	movwf	LCD_Write@mode& (0+255),b
 27302  018A56  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 27303  018A58  ECE0  F0C4         	call	_LCD_Write
 27304                           
 27305                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 27306  018A5C  0E01               	movlw	1
 27307  018A5E  0100               	movlb	0	; () banked
 27308  018A60  6F63               	movwf	LCD_Write@mode& (0+255),b
 27309  018A62  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 27310  018A64  ECE0  F0C4         	call	_LCD_Write
 27311  018A68  0012               	return		;funcret
 27312  018A6A                     __end_of_LCD_Word_Write:
 27313                           	opt stack 0
 27314                           tosu	equ	0xFFF
 27315                           tosh	equ	0xFFE
 27316                           tosl	equ	0xFFD
 27317                           pclath	equ	0xFFA
 27318                           tblptru	equ	0xFF8
 27319                           tblptrh	equ	0xFF7
 27320                           tblptrl	equ	0xFF6
 27321                           tablat	equ	0xFF5
 27322                           prodh	equ	0xFF4
 27323                           prodl	equ	0xFF3
 27324                           intcon	equ	0xFF2
 27325                           indf0	equ	0xFEF
 27326                           postinc0	equ	0xFEE
 27327                           fsr0h	equ	0xFEA
 27328                           fsr0l	equ	0xFE9
 27329                           wreg	equ	0xFE8
 27330                           indf1	equ	0xFE7
 27331                           postdec1	equ	0xFE5
 27332                           fsr1h	equ	0xFE2
 27333                           fsr1l	equ	0xFE1
 27334                           indf2	equ	0xFDF
 27335                           postinc2	equ	0xFDE
 27336                           postdec2	equ	0xFDD
 27337                           plusw2	equ	0xFDB
 27338                           fsr2h	equ	0xFDA
 27339                           fsr2l	equ	0xFD9
 27340                           status	equ	0xFD8
 27341                           
 27342 ;; *************** function _LCD_Write *****************
 27343 ;; Defined at:
 27344 ;;		line 67 in file "Library/LCD.c"
 27345 ;; Parameters:    Size  Location     Type
 27346 ;;  value           1    wreg     unsigned char 
 27347 ;;  mode            1    3[BANK0 ] enum E6761
 27348 ;; Auto vars:     Size  Location     Type
 27349 ;;  value           1    4[BANK0 ] unsigned char 
 27350 ;; Return value:  Size  Location     Type
 27351 ;;                  1    wreg      void 
 27352 ;; Registers used:
 27353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27354 ;; Tracked objects:
 27355 ;;		On entry : 0/0
 27356 ;;		On exit  : 0/0
 27357 ;;		Unchanged: 0/0
 27358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27359 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27363 ;;Total ram usage:        2 bytes
 27364 ;; Hardware stack levels used:    1
 27365 ;; Hardware stack levels required when called:    8
 27366 ;; This function calls:
 27367 ;;		_Mode_Set
 27368 ;;		_SPI_Send
 27369 ;; This function is called by:
 27370 ;;		_LCD_Init
 27371 ;;		_LCD_Word_Write
 27372 ;;		_Set_Addr_Window
 27373 ;;		_Set_Rotation
 27374 ;;		_LCD_WriteCMD
 27375 ;;		_LCD_WriteData
 27376 ;;		_LCD_Data_Write
 27377 ;;		_LCD_Data_Write_4k
 27378 ;;		_Invert_Display
 27379 ;; This function uses a non-reentrant model
 27380 ;;
 27381                           
 27382                           	psect	text124
 27383  0189C0                     __ptext124:
 27384                           	opt stack 0
 27385  0189C0                     _LCD_Write:
 27386                           	opt stack 17
 27387                           
 27388                           ;incstack = 0
 27389                           ;LCD_Write@value stored from wreg
 27390  0189C0  0100               	movlb	0	; () banked
 27391  0189C2  6F64               	movwf	LCD_Write@value& (0+255),b
 27392                           
 27393                           ;LCD.c: 89: Mode_Set(mode);
 27394  0189C4  0100               	movlb	0	; () banked
 27395  0189C6  5163               	movf	LCD_Write@mode& (0+255),w,b
 27396  0189C8  EC16  F0C6         	call	_Mode_Set
 27397                           
 27398                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 27399  0189CC  0E61               	movlw	low _SPI2
 27400  0189CE  0100               	movlb	0	; () banked
 27401  0189D0  6F60               	movwf	SPI_Send@pInput& (0+255),b
 27402  0189D2  0E01               	movlw	high _SPI2
 27403  0189D4  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 27404  0189D6  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 27405  0189DA  ECC2  F0BC         	call	_SPI_Send	;wreg free
 27406  0189DE  0012               	return		;funcret
 27407  0189E0                     __end_of_LCD_Write:
 27408                           	opt stack 0
 27409                           tosu	equ	0xFFF
 27410                           tosh	equ	0xFFE
 27411                           tosl	equ	0xFFD
 27412                           pclath	equ	0xFFA
 27413                           tblptru	equ	0xFF8
 27414                           tblptrh	equ	0xFF7
 27415                           tblptrl	equ	0xFF6
 27416                           tablat	equ	0xFF5
 27417                           prodh	equ	0xFF4
 27418                           prodl	equ	0xFF3
 27419                           intcon	equ	0xFF2
 27420                           indf0	equ	0xFEF
 27421                           postinc0	equ	0xFEE
 27422                           fsr0h	equ	0xFEA
 27423                           fsr0l	equ	0xFE9
 27424                           wreg	equ	0xFE8
 27425                           indf1	equ	0xFE7
 27426                           postdec1	equ	0xFE5
 27427                           fsr1h	equ	0xFE2
 27428                           fsr1l	equ	0xFE1
 27429                           indf2	equ	0xFDF
 27430                           postinc2	equ	0xFDE
 27431                           postdec2	equ	0xFDD
 27432                           plusw2	equ	0xFDB
 27433                           fsr2h	equ	0xFDA
 27434                           fsr2l	equ	0xFD9
 27435                           status	equ	0xFD8
 27436                           
 27437 ;; *************** function _Mode_Set *****************
 27438 ;; Defined at:
 27439 ;;		line 40 in file "Library/LCD.c"
 27440 ;; Parameters:    Size  Location     Type
 27441 ;;  pMode           1    wreg     enum E6761
 27442 ;; Auto vars:     Size  Location     Type
 27443 ;;  pMode           1    0[BANK0 ] enum E6761
 27444 ;; Return value:  Size  Location     Type
 27445 ;;                  1    wreg      void 
 27446 ;; Registers used:
 27447 ;;		wreg
 27448 ;; Tracked objects:
 27449 ;;		On entry : 0/0
 27450 ;;		On exit  : 0/0
 27451 ;;		Unchanged: 0/0
 27452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27456 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27457 ;;Total ram usage:        1 bytes
 27458 ;; Hardware stack levels used:    1
 27459 ;; Hardware stack levels required when called:    7
 27460 ;; This function calls:
 27461 ;;		Nothing
 27462 ;; This function is called by:
 27463 ;;		_LCD_Write
 27464 ;; This function uses a non-reentrant model
 27465 ;;
 27466                           
 27467                           	psect	text125
 27468  018C2C                     __ptext125:
 27469                           	opt stack 0
 27470  018C2C                     _Mode_Set:
 27471                           	opt stack 17
 27472                           
 27473                           ;incstack = 0
 27474                           ;Mode_Set@pMode stored from wreg
 27475  018C2C  0100               	movlb	0	; () banked
 27476  018C2E  6F60               	movwf	Mode_Set@pMode& (0+255),b
 27477                           
 27478                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 27479  018C30  0100               	movlb	0	; () banked
 27480  018C32  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 27481  018C34  D002               	bra	u10625
 27482  018C36  9E85               	bcf	3973,7,c	;volatile
 27483  018C38  D001               	bra	u10626
 27484  018C3A                     u10625:
 27485  018C3A  8E85               	bsf	3973,7,c	;volatile
 27486  018C3C                     u10626:
 27487  018C3C  0012               	return		;funcret
 27488  018C3E                     __end_of_Mode_Set:
 27489                           	opt stack 0
 27490                           tosu	equ	0xFFF
 27491                           tosh	equ	0xFFE
 27492                           tosl	equ	0xFFD
 27493                           pclath	equ	0xFFA
 27494                           tblptru	equ	0xFF8
 27495                           tblptrh	equ	0xFF7
 27496                           tblptrl	equ	0xFF6
 27497                           tablat	equ	0xFF5
 27498                           prodh	equ	0xFF4
 27499                           prodl	equ	0xFF3
 27500                           intcon	equ	0xFF2
 27501                           indf0	equ	0xFEF
 27502                           postinc0	equ	0xFEE
 27503                           fsr0h	equ	0xFEA
 27504                           fsr0l	equ	0xFE9
 27505                           wreg	equ	0xFE8
 27506                           indf1	equ	0xFE7
 27507                           postdec1	equ	0xFE5
 27508                           fsr1h	equ	0xFE2
 27509                           fsr1l	equ	0xFE1
 27510                           indf2	equ	0xFDF
 27511                           postinc2	equ	0xFDE
 27512                           postdec2	equ	0xFDD
 27513                           plusw2	equ	0xFDB
 27514                           fsr2h	equ	0xFDA
 27515                           fsr2l	equ	0xFD9
 27516                           status	equ	0xFD8
 27517                           
 27518 ;; *************** function _Console_MakeField *****************
 27519 ;; Defined at:
 27520 ;;		line 435 in file "Library/Console.c"
 27521 ;; Parameters:    Size  Location     Type
 27522 ;;  pInput          1    wreg     unsigned char 
 27523 ;; Auto vars:     Size  Location     Type
 27524 ;;  pInput          1   11[BANK0 ] unsigned char 
 27525 ;;  y               1   17[BANK0 ] unsigned char 
 27526 ;;  x               1   16[BANK0 ] unsigned char 
 27527 ;;  Column          2   12[BANK0 ] PTR struct Byte
 27528 ;;		 -> Font5x7(480), 
 27529 ;;  Index           2    9[BANK0 ] unsigned short 
 27530 ;; Return value:  Size  Location     Type
 27531 ;;                  2    5[BANK0 ] PTR unsigned short 
 27532 ;; Registers used:
 27533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27534 ;; Tracked objects:
 27535 ;;		On entry : 0/0
 27536 ;;		On exit  : 0/0
 27537 ;;		Unchanged: 0/0
 27538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27540 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27542 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27543 ;;Total ram usage:       13 bytes
 27544 ;; Hardware stack levels used:    1
 27545 ;; Hardware stack levels required when called:    8
 27546 ;; This function calls:
 27547 ;;		_Byte_GetBit
 27548 ;; This function is called by:
 27549 ;;		_Console_Render
 27550 ;; This function uses a non-reentrant model
 27551 ;;
 27552                           
 27553                           	psect	text126
 27554  016DF2                     __ptext126:
 27555                           	opt stack 0
 27556  016DF2                     _Console_MakeField:
 27557                           	opt stack 19
 27558                           
 27559                           ;incstack = 0
 27560                           ;Console_MakeField@pInput stored from wreg
 27561  016DF2  0100               	movlb	0	; () banked
 27562  016DF4  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 27563                           
 27564                           ;Console.c: 437: static Colour Fill[7][5];
 27565                           ;Console.c: 438: pInput -= 32;
 27566  016DF6  0E20               	movlw	32
 27567  016DF8  0100               	movlb	0	; () banked
 27568  016DFA  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 27569                           
 27570                           ; BSR set to: 0
 27571                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 27572  016DFC  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 27573  016DFE  0D05               	mullw	5
 27574  016E00  CFF3 F069          	movff	prodl,Console_MakeField@Index
 27575  016E04  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 27576                           
 27577                           ; BSR set to: 0
 27578                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 27579  016E08  0E41               	movlw	low _Font5x7
 27580  016E0A  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 27581  016E0C  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 27582  016E0E  0EFC               	movlw	high _Font5x7
 27583  016E10  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 27584  016E12  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 27585                           
 27586                           ; BSR set to: 0
 27587                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 27588  016E14  0E00               	movlw	0
 27589  016E16  6F70               	movwf	Console_MakeField@x& (0+255),b
 27590  016E18                     l14893:
 27591                           
 27592                           ; BSR set to: 0
 27593  016E18  0E04               	movlw	4
 27594  016E1A  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 27595  016E1C  D001               	goto	l1077
 27596  016E1E  D037               	goto	u12290
 27597  016E20                     l1077:
 27598                           
 27599                           ; BSR set to: 0
 27600                           ;Console.c: 444: {
 27601                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 27602                           
 27603                           ; BSR set to: 0
 27604  016E20  0E00               	movlw	0
 27605  016E22  6F71               	movwf	Console_MakeField@y& (0+255),b
 27606  016E24                     l14899:
 27607                           
 27608                           ; BSR set to: 0
 27609  016E24  0E06               	movlw	6
 27610  016E26  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 27611  016E28  D001               	goto	l1079
 27612  016E2A  D02D               	goto	u12280
 27613  016E2C                     l1079:
 27614                           
 27615                           ; BSR set to: 0
 27616                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 27617                           
 27618                           ; BSR set to: 0
 27619  016E2C  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 27620  016E30  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 27621  016E34  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 27622  016E38  EC16  F0C4         	call	_Byte_GetBit	;wreg free
 27623  016E3C  0900               	iorlw	0
 27624  016E3E  A4D8               	btfss	status,2,c
 27625  016E40  D005               	goto	l1082
 27626  016E42  C154  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 27627  016E46  C155  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 27628  016E4A  D004               	goto	l1084
 27629  016E4C                     l1082:
 27630  016E4C  C1E4  F06E         	movff	_gForecolour,_Console_MakeField$10974
 27631  016E50  C1E5  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 27632  016E54                     l1084:
 27633  016E54  0100               	movlb	0	; () banked
 27634  016E56  5171               	movf	Console_MakeField@y& (0+255),w,b
 27635  016E58  0D0A               	mullw	10
 27636  016E5A  0E00               	movlw	low Console_MakeField@Fill
 27637  016E5C  6F67               	movwf	??_Console_MakeField& (0+255),b
 27638  016E5E  0E04               	movlw	high Console_MakeField@Fill
 27639  016E60  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 27640  016E62  50F3               	movf	prodl,w,c
 27641  016E64  2767               	addwf	??_Console_MakeField& (0+255),f,b
 27642  016E66  50F4               	movf	prodh,w,c
 27643  016E68  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 27644  016E6A  5170               	movf	Console_MakeField@x& (0+255),w,b
 27645  016E6C  0D02               	mullw	2
 27646  016E6E  50F3               	movf	prodl,w,c
 27647  016E70  2567               	addwf	??_Console_MakeField& (0+255),w,b
 27648  016E72  6ED9               	movwf	fsr2l,c
 27649  016E74  50F4               	movf	prodh,w,c
 27650  016E76  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 27651  016E78  6EDA               	movwf	fsr2h,c
 27652  016E7A  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 27653  016E7E  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 27654                           
 27655                           ; BSR set to: 0
 27656  016E82  2B71               	incf	Console_MakeField@y& (0+255),f,b
 27657  016E84  D7CF               	goto	l14899
 27658  016E86                     u12280:
 27659                           
 27660                           ; BSR set to: 0
 27661                           ;Console.c: 447: Column += 1;
 27662                           
 27663                           ; BSR set to: 0
 27664  016E86  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 27665  016E88  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 27666  016E8A  2B70               	incf	Console_MakeField@x& (0+255),f,b
 27667  016E8C  D7C5               	goto	l14893
 27668  016E8E                     u12290:
 27669                           
 27670                           ; BSR set to: 0
 27671                           ;Console.c: 448: }
 27672                           ;Console.c: 449: return (ColourPtr)Fill;
 27673                           
 27674                           ; BSR set to: 0
 27675  016E8E  0E00               	movlw	low Console_MakeField@Fill
 27676  016E90  6F65               	movwf	?_Console_MakeField& (0+255),b
 27677  016E92  0E04               	movlw	high Console_MakeField@Fill
 27678  016E94  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 27679  016E96  0012               	return	
 27680  016E98                     __end_of_Console_MakeField:
 27681                           	opt stack 0
 27682                           tosu	equ	0xFFF
 27683                           tosh	equ	0xFFE
 27684                           tosl	equ	0xFFD
 27685                           pclath	equ	0xFFA
 27686                           tblptru	equ	0xFF8
 27687                           tblptrh	equ	0xFF7
 27688                           tblptrl	equ	0xFF6
 27689                           tablat	equ	0xFF5
 27690                           prodh	equ	0xFF4
 27691                           prodl	equ	0xFF3
 27692                           intcon	equ	0xFF2
 27693                           indf0	equ	0xFEF
 27694                           postinc0	equ	0xFEE
 27695                           fsr0h	equ	0xFEA
 27696                           fsr0l	equ	0xFE9
 27697                           wreg	equ	0xFE8
 27698                           indf1	equ	0xFE7
 27699                           postdec1	equ	0xFE5
 27700                           fsr1h	equ	0xFE2
 27701                           fsr1l	equ	0xFE1
 27702                           indf2	equ	0xFDF
 27703                           postinc2	equ	0xFDE
 27704                           postdec2	equ	0xFDD
 27705                           plusw2	equ	0xFDB
 27706                           fsr2h	equ	0xFDA
 27707                           fsr2l	equ	0xFD9
 27708                           status	equ	0xFD8
 27709                           
 27710 ;; *************** function _Byte_GetBit *****************
 27711 ;; Defined at:
 27712 ;;		line 38 in file "Library/Types.c"
 27713 ;; Parameters:    Size  Location     Type
 27714 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 27715 ;;		 -> Font5x7(480), 
 27716 ;;  pBit            1    2[BANK0 ] unsigned char 
 27717 ;; Auto vars:     Size  Location     Type
 27718 ;;  Output          1    4[BANK0 ] unsigned char 
 27719 ;; Return value:  Size  Location     Type
 27720 ;;                  1    wreg      unsigned char 
 27721 ;; Registers used:
 27722 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 27723 ;; Tracked objects:
 27724 ;;		On entry : 0/0
 27725 ;;		On exit  : 0/0
 27726 ;;		Unchanged: 0/0
 27727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27728 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27731 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27732 ;;Total ram usage:        5 bytes
 27733 ;; Hardware stack levels used:    1
 27734 ;; Hardware stack levels required when called:    7
 27735 ;; This function calls:
 27736 ;;		Nothing
 27737 ;; This function is called by:
 27738 ;;		_Console_MakeField
 27739 ;;		_Word_GetBit
 27740 ;; This function uses a non-reentrant model
 27741 ;;
 27742                           
 27743                           	psect	text127
 27744  01882C                     __ptext127:
 27745                           	opt stack 0
 27746  01882C                     _Byte_GetBit:
 27747                           	opt stack 19
 27748                           
 27749                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 27750                           
 27751                           ; BSR set to: 0
 27752                           ;incstack = 0
 27753  01882C  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 27754  018830  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 27755  018834                     	if	0	;tblptru may be non-zero
 27756  018834                     	endif
 27757  018834                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 27758  018834  0E00               	movlw	low (__mediumconst shr (0+16))
 27759  018836  6EF8               	movwf	tblptru,c
 27760  018838                     	endif
 27761  018838  0008               	tblrd		*
 27762  01883A  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 27763                           
 27764                           ;Types.c: 42: Output >>= pBit;
 27765  01883E  0100               	movlb	0	; () banked
 27766  018840  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 27767  018842  6F63               	movwf	??_Byte_GetBit& (0+255),b
 27768  018844  D002               	goto	u11640
 27769  018846                     u11645:
 27770  018846  90D8               	bcf	status,0,c
 27771  018848  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 27772  01884A                     u11640:
 27773  01884A  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 27774  01884C  D7FC               	goto	u11645
 27775                           
 27776                           ;Types.c: 43: Output &= 1;
 27777  01884E  0E01               	movlw	1
 27778  018850  0100               	movlb	0	; () banked
 27779  018852  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 27780                           
 27781                           ; BSR set to: 0
 27782                           ;Types.c: 44: return Output;
 27783  018854  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 27784  018856  0012               	return	
 27785  018858                     __end_of_Byte_GetBit:
 27786                           	opt stack 0
 27787                           tosu	equ	0xFFF
 27788                           tosh	equ	0xFFE
 27789                           tosl	equ	0xFFD
 27790                           pclath	equ	0xFFA
 27791                           tblptru	equ	0xFF8
 27792                           tblptrh	equ	0xFF7
 27793                           tblptrl	equ	0xFF6
 27794                           tablat	equ	0xFF5
 27795                           prodh	equ	0xFF4
 27796                           prodl	equ	0xFF3
 27797                           intcon	equ	0xFF2
 27798                           indf0	equ	0xFEF
 27799                           postinc0	equ	0xFEE
 27800                           fsr0h	equ	0xFEA
 27801                           fsr0l	equ	0xFE9
 27802                           wreg	equ	0xFE8
 27803                           indf1	equ	0xFE7
 27804                           postdec1	equ	0xFE5
 27805                           fsr1h	equ	0xFE2
 27806                           fsr1l	equ	0xFE1
 27807                           indf2	equ	0xFDF
 27808                           postinc2	equ	0xFDE
 27809                           postdec2	equ	0xFDD
 27810                           plusw2	equ	0xFDB
 27811                           fsr2h	equ	0xFDA
 27812                           fsr2l	equ	0xFD9
 27813                           status	equ	0xFD8
 27814                           
 27815 ;; *************** function _ADCAverage *****************
 27816 ;; Defined at:
 27817 ;;		line 198 in file "dans.c"
 27818 ;; Parameters:    Size  Location     Type
 27819 ;;		None
 27820 ;; Auto vars:     Size  Location     Type
 27821 ;;		None
 27822 ;; Return value:  Size  Location     Type
 27823 ;;                  2  2000[None  ] int 
 27824 ;; Registers used:
 27825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27826 ;; Tracked objects:
 27827 ;;		On entry : 0/0
 27828 ;;		On exit  : 0/0
 27829 ;;		Unchanged: 0/0
 27830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27832 ;;      Locals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27833 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27834 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27835 ;;Total ram usage:       26 bytes
 27836 ;; Hardware stack levels used:    1
 27837 ;; Hardware stack levels required when called:   11
 27838 ;; This function calls:
 27839 ;;		_FunctReadADC
 27840 ;;		_HMI_Render
 27841 ;;		_HMI_SetNumber
 27842 ;;		___awdiv
 27843 ;;		___fladd
 27844 ;;		___flmul
 27845 ;;		___flneg
 27846 ;;		___fltol
 27847 ;;		___xxtofl
 27848 ;;		_pow
 27849 ;; This function is called by:
 27850 ;;		_Sensor_Observe
 27851 ;;		_Closest_Object
 27852 ;;		_main
 27853 ;;		_Travel
 27854 ;;		_Find_Flag
 27855 ;; This function uses a non-reentrant model
 27856 ;;
 27857                           
 27858                           	psect	text128
 27859  013C46                     __ptext128:
 27860                           	opt stack 0
 27861  013C46                     _ADCAverage:
 27862                           	opt stack 18
 27863                           
 27864                           ;dans.c: 200: total = total - readings[readIndex];
 27865                           
 27866                           ; BSR set to: 0
 27867                           ;incstack = 0
 27868  013C46  90D8               	bcf	status,0,c
 27869  013C48  3430               	rlcf	_readIndex,w,c
 27870  013C4A  6ED9               	movwf	fsr2l,c
 27871  013C4C  3431               	rlcf	_readIndex+1,w,c
 27872  013C4E  6EDA               	movwf	fsr2h,c
 27873  013C50  0E46               	movlw	low _readings
 27874  013C52  26D9               	addwf	fsr2l,f,c
 27875  013C54  0E02               	movlw	high _readings
 27876  013C56  22DA               	addwfc	fsr2h,f,c
 27877  013C58  CFDE F0D7          	movff	postinc2,??_ADCAverage
 27878  013C5C  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 27879  013C60  0100               	movlb	0	; () banked
 27880  013C62  1FD7               	comf	??_ADCAverage& (0+255),f,b
 27881  013C64  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 27882  013C66  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 27883  013C68  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 27884  013C6A  0101               	movlb	1	; () banked
 27885  013C6C  5140               	movf	_total& (0+255),w,b
 27886  013C6E  0100               	movlb	0	; () banked
 27887  013C70  25D7               	addwf	??_ADCAverage& (0+255),w,b
 27888  013C72  0101               	movlb	1	; () banked
 27889  013C74  6F40               	movwf	_total& (0+255),b
 27890  013C76  5141               	movf	(_total+1)& (0+255),w,b
 27891  013C78  0100               	movlb	0	; () banked
 27892  013C7A  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 27893  013C7C  0101               	movlb	1	; () banked
 27894  013C7E  6F41               	movwf	(_total+1)& (0+255),b
 27895                           
 27896                           ; BSR set to: 1
 27897                           ;dans.c: 202: readings[readIndex] = (FunctReadADC(0));
 27898  013C80  0E00               	movlw	0
 27899  013C82  0100               	movlb	0	; () banked
 27900  013C84  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 27901  013C86  0E00               	movlw	0
 27902  013C88  6F60               	movwf	FunctReadADC@channel& (0+255),b
 27903  013C8A  EC8D  F0C2         	call	_FunctReadADC	;wreg free
 27904  013C8E  90D8               	bcf	status,0,c
 27905  013C90  3430               	rlcf	_readIndex,w,c
 27906  013C92  6ED9               	movwf	fsr2l,c
 27907  013C94  3431               	rlcf	_readIndex+1,w,c
 27908  013C96  6EDA               	movwf	fsr2h,c
 27909  013C98  0E46               	movlw	low _readings
 27910  013C9A  26D9               	addwf	fsr2l,f,c
 27911  013C9C  0E02               	movlw	high _readings
 27912  013C9E  22DA               	addwfc	fsr2h,f,c
 27913  013CA0  0100               	movlb	0	; () banked
 27914  013CA2  C060  FFDE         	movff	?_FunctReadADC,postinc2
 27915  013CA6  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 27916                           
 27917                           ; BSR set to: 0
 27918                           ;dans.c: 204: total = total + readings[readIndex];
 27919  013CAA  90D8               	bcf	status,0,c
 27920  013CAC  3430               	rlcf	_readIndex,w,c
 27921  013CAE  6ED9               	movwf	fsr2l,c
 27922  013CB0  3431               	rlcf	_readIndex+1,w,c
 27923  013CB2  6EDA               	movwf	fsr2h,c
 27924  013CB4  0E46               	movlw	low _readings
 27925  013CB6  26D9               	addwf	fsr2l,f,c
 27926  013CB8  0E02               	movlw	high _readings
 27927  013CBA  22DA               	addwfc	fsr2h,f,c
 27928  013CBC  CFDE F0D7          	movff	postinc2,??_ADCAverage
 27929  013CC0  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 27930  013CC4  0101               	movlb	1	; () banked
 27931  013CC6  5140               	movf	_total& (0+255),w,b
 27932  013CC8  0100               	movlb	0	; () banked
 27933  013CCA  25D7               	addwf	??_ADCAverage& (0+255),w,b
 27934  013CCC  0101               	movlb	1	; () banked
 27935  013CCE  6F40               	movwf	_total& (0+255),b
 27936  013CD0  5141               	movf	(_total+1)& (0+255),w,b
 27937  013CD2  0100               	movlb	0	; () banked
 27938  013CD4  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 27939  013CD6  0101               	movlb	1	; () banked
 27940  013CD8  6F41               	movwf	(_total+1)& (0+255),b
 27941                           
 27942                           ; BSR set to: 1
 27943                           ;dans.c: 206: readIndex++;
 27944  013CDA  4A30               	infsnz	_readIndex,f,c
 27945  013CDC  2A31               	incf	_readIndex+1,f,c
 27946                           
 27947                           ; BSR set to: 1
 27948                           ;dans.c: 209: if (readIndex >= numReadings) {
 27949  013CDE  51DE               	movf	_numReadings& (0+255),w,b
 27950  013CE0  5C30               	subwf	_readIndex,w,c
 27951  013CE2  5031               	movf	_readIndex+1,w,c
 27952  013CE4  0A80               	xorlw	128
 27953  013CE6  0100               	movlb	0	; () banked
 27954  013CE8  6FD7               	movwf	??_ADCAverage& (0+255),b
 27955  013CEA  0101               	movlb	1	; () banked
 27956  013CEC  51DF               	movf	(_numReadings+1)& (0+255),w,b
 27957  013CEE  0A80               	xorlw	128
 27958  013CF0  0100               	movlb	0	; () banked
 27959  013CF2  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 27960  013CF4  A0D8               	btfss	status,0,c
 27961  013CF6  D004               	goto	l2358
 27962                           
 27963                           ; BSR set to: 0
 27964                           ;dans.c: 211: readIndex = 0;
 27965  013CF8  0E00               	movlw	0
 27966  013CFA  6E31               	movwf	_readIndex+1,c
 27967  013CFC  0E00               	movlw	0
 27968  013CFE  6E30               	movwf	_readIndex,c
 27969  013D00                     l2358:
 27970                           
 27971                           ; BSR set to: 0
 27972                           ;dans.c: 212: }
 27973                           ;dans.c: 215: average = total / numReadings;
 27974                           
 27975                           ; BSR set to: 0
 27976  013D00  C140  F060         	movff	_total,___awdiv@dividend
 27977  013D04  C141  F061         	movff	_total+1,___awdiv@dividend+1
 27978  013D08  C1DE  F062         	movff	_numReadings,___awdiv@divisor
 27979  013D0C  C1DF  F063         	movff	_numReadings+1,___awdiv@divisor+1
 27980  013D10  EC29  F0BA         	call	___awdiv	;wreg free
 27981  013D14  C060  F02E         	movff	?___awdiv,_average
 27982  013D18  C061  F02F         	movff	?___awdiv+1,_average+1
 27983                           
 27984                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 27985  013D1C  C02E  F060         	movff	_average,___xxtofl@val
 27986  013D20  C02F  F061         	movff	_average+1,___xxtofl@val+1
 27987  013D24  0100               	movlb	0	; () banked
 27988  013D26  0E00               	movlw	0
 27989  013D28  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 27990  013D2A  0EFF               	movlw	-1
 27991  013D2C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 27992  013D2E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 27993  013D30  0E01               	movlw	1
 27994  013D32  ECDF  F0AC         	call	___xxtofl
 27995  013D36  C060  F0D9         	movff	?___xxtofl,_ADCAverage$15832
 27996  013D3A  C061  F0DA         	movff	?___xxtofl+1,_ADCAverage$15832+1
 27997  013D3E  C062  F0DB         	movff	?___xxtofl+2,_ADCAverage$15832+2
 27998  013D42  C063  F0DC         	movff	?___xxtofl+3,_ADCAverage$15832+3
 27999                           
 28000                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28001  013D46  0E00               	movlw	0
 28002  013D48  0100               	movlb	0	; () banked
 28003  013D4A  6FC6               	movwf	pow@y& (0+255),b
 28004  013D4C  0E00               	movlw	0
 28005  013D4E  6FC7               	movwf	(pow@y+1)& (0+255),b
 28006  013D50  0E00               	movlw	0
 28007  013D52  6FC8               	movwf	(pow@y+2)& (0+255),b
 28008  013D54  0E40               	movlw	64
 28009  013D56  6FC9               	movwf	(pow@y+3)& (0+255),b
 28010  013D58  C0D9  F0C2         	movff	_ADCAverage$15832,pow@x
 28011  013D5C  C0DA  F0C3         	movff	_ADCAverage$15832+1,pow@x+1
 28012  013D60  C0DB  F0C4         	movff	_ADCAverage$15832+2,pow@x+2
 28013  013D64  C0DC  F0C5         	movff	_ADCAverage$15832+3,pow@x+3
 28014  013D68  ECD0  F0A5         	call	_pow	;wreg free
 28015  013D6C  C0C2  F0DD         	movff	?_pow,_ADCAverage$15833
 28016  013D70  C0C3  F0DE         	movff	?_pow+1,_ADCAverage$15833+1
 28017  013D74  C0C4  F0DF         	movff	?_pow+2,_ADCAverage$15833+2
 28018  013D78  C0C5  F0E0         	movff	?_pow+3,_ADCAverage$15833+3
 28019                           
 28020                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28021  013D7C  C02E  F060         	movff	_average,___xxtofl@val
 28022  013D80  C02F  F061         	movff	_average+1,___xxtofl@val+1
 28023  013D84  0100               	movlb	0	; () banked
 28024  013D86  0E00               	movlw	0
 28025  013D88  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28026  013D8A  0EFF               	movlw	-1
 28027  013D8C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28028  013D8E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28029  013D90  0E01               	movlw	1
 28030  013D92  ECDF  F0AC         	call	___xxtofl
 28031  013D96  C060  F0E1         	movff	?___xxtofl,_ADCAverage$15834
 28032  013D9A  C061  F0E2         	movff	?___xxtofl+1,_ADCAverage$15834+1
 28033  013D9E  C062  F0E3         	movff	?___xxtofl+2,_ADCAverage$15834+2
 28034  013DA2  C063  F0E4         	movff	?___xxtofl+3,_ADCAverage$15834+3
 28035                           
 28036                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28037  013DA6  0E00               	movlw	0
 28038  013DA8  0100               	movlb	0	; () banked
 28039  013DAA  6FC6               	movwf	pow@y& (0+255),b
 28040  013DAC  0E00               	movlw	0
 28041  013DAE  6FC7               	movwf	(pow@y+1)& (0+255),b
 28042  013DB0  0E40               	movlw	64
 28043  013DB2  6FC8               	movwf	(pow@y+2)& (0+255),b
 28044  013DB4  0E40               	movlw	64
 28045  013DB6  6FC9               	movwf	(pow@y+3)& (0+255),b
 28046  013DB8  C0E1  F0C2         	movff	_ADCAverage$15834,pow@x
 28047  013DBC  C0E2  F0C3         	movff	_ADCAverage$15834+1,pow@x+1
 28048  013DC0  C0E3  F0C4         	movff	_ADCAverage$15834+2,pow@x+2
 28049  013DC4  C0E4  F0C5         	movff	_ADCAverage$15834+3,pow@x+3
 28050  013DC8  ECD0  F0A5         	call	_pow	;wreg free
 28051  013DCC  C0C2  F0E5         	movff	?_pow,_ADCAverage$15835
 28052  013DD0  C0C3  F0E6         	movff	?_pow+1,_ADCAverage$15835+1
 28053  013DD4  C0C4  F0E7         	movff	?_pow+2,_ADCAverage$15835+2
 28054  013DD8  C0C5  F0E8         	movff	?_pow+3,_ADCAverage$15835+3
 28055                           
 28056                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28057  013DDC  0EA6               	movlw	166
 28058  013DDE  0100               	movlb	0	; () banked
 28059  013DE0  6F72               	movwf	___flmul@a& (0+255),b
 28060  013DE2  0E9B               	movlw	155
 28061  013DE4  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28062  013DE6  0EC4               	movlw	196
 28063  013DE8  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28064  013DEA  0E3A               	movlw	58
 28065  013DEC  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28066  013DEE  C0DD  F06E         	movff	_ADCAverage$15833,___flmul@b
 28067  013DF2  C0DE  F06F         	movff	_ADCAverage$15833+1,___flmul@b+1
 28068  013DF6  C0DF  F070         	movff	_ADCAverage$15833+2,___flmul@b+2
 28069  013DFA  C0E0  F071         	movff	_ADCAverage$15833+3,___flmul@b+3
 28070  013DFE  ECDB  F09A         	call	___flmul	;wreg free
 28071  013E02  C06E  F08F         	movff	?___flmul,___fladd@a
 28072  013E06  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 28073  013E0A  C070  F091         	movff	?___flmul+2,___fladd@a+2
 28074  013E0E  C071  F092         	movff	?___flmul+3,___fladd@a+3
 28075  013E12  0E87               	movlw	135
 28076  013E14  0100               	movlb	0	; () banked
 28077  013E16  6F72               	movwf	___flmul@a& (0+255),b
 28078  013E18  0E97               	movlw	151
 28079  013E1A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28080  013E1C  0E71               	movlw	113
 28081  013E1E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28082  013E20  0EB5               	movlw	181
 28083  013E22  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28084  013E24  C0E5  F06E         	movff	_ADCAverage$15835,___flmul@b
 28085  013E28  C0E6  F06F         	movff	_ADCAverage$15835+1,___flmul@b+1
 28086  013E2C  C0E7  F070         	movff	_ADCAverage$15835+2,___flmul@b+2
 28087  013E30  C0E8  F071         	movff	_ADCAverage$15835+3,___flmul@b+3
 28088  013E34  ECDB  F09A         	call	___flmul	;wreg free
 28089  013E38  C06E  F08B         	movff	?___flmul,___fladd@b
 28090  013E3C  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 28091  013E40  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 28092  013E44  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 28093  013E48  EC84  F09C         	call	___fladd	;wreg free
 28094  013E4C  C08B  F0E9         	movff	?___fladd,_ADCAverage$15836
 28095  013E50  C08C  F0EA         	movff	?___fladd+1,_ADCAverage$15836+1
 28096  013E54  C08D  F0EB         	movff	?___fladd+2,_ADCAverage$15836+2
 28097  013E58  C08E  F0EC         	movff	?___fladd+3,_ADCAverage$15836+3
 28098                           
 28099                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28100  013E5C  0E8C               	movlw	140
 28101  013E5E  0100               	movlb	0	; () banked
 28102  013E60  6F72               	movwf	___flmul@a& (0+255),b
 28103  013E62  0EB9               	movlw	185
 28104  013E64  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28105  013E66  0E6B               	movlw	107
 28106  013E68  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28107  013E6A  0E3F               	movlw	63
 28108  013E6C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28109  013E6E  C02E  F060         	movff	_average,___xxtofl@val
 28110  013E72  C02F  F061         	movff	_average+1,___xxtofl@val+1
 28111  013E76  0E00               	movlw	0
 28112  013E78  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28113  013E7A  0EFF               	movlw	-1
 28114  013E7C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28115  013E7E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28116  013E80  0E01               	movlw	1
 28117  013E82  ECDF  F0AC         	call	___xxtofl
 28118  013E86  C060  F06E         	movff	?___xxtofl,___flmul@b
 28119  013E8A  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 28120  013E8E  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 28121  013E92  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 28122  013E96  ECDB  F09A         	call	___flmul	;wreg free
 28123  013E9A  C06E  F087         	movff	?___flmul,___flneg@f1
 28124  013E9E  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 28125  013EA2  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 28126  013EA6  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 28127  013EAA  ECCF  F0C3         	call	___flneg	;wreg free
 28128  013EAE  C087  F08F         	movff	?___flneg,___fladd@a
 28129  013EB2  C088  F090         	movff	?___flneg+1,___fladd@a+1
 28130  013EB6  C089  F091         	movff	?___flneg+2,___fladd@a+2
 28131  013EBA  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 28132  013EBE  C0E9  F08B         	movff	_ADCAverage$15836,___fladd@b
 28133  013EC2  C0EA  F08C         	movff	_ADCAverage$15836+1,___fladd@b+1
 28134  013EC6  C0EB  F08D         	movff	_ADCAverage$15836+2,___fladd@b+2
 28135  013ECA  C0EC  F08E         	movff	_ADCAverage$15836+3,___fladd@b+3
 28136  013ECE  EC84  F09C         	call	___fladd	;wreg free
 28137  013ED2  C08B  F0ED         	movff	?___fladd,_ADCAverage$15837
 28138  013ED6  C08C  F0EE         	movff	?___fladd+1,_ADCAverage$15837+1
 28139  013EDA  C08D  F0EF         	movff	?___fladd+2,_ADCAverage$15837+2
 28140  013EDE  C08E  F0F0         	movff	?___fladd+3,_ADCAverage$15837+3
 28141                           
 28142                           ;dans.c: 216: average = -0.0000009*pow(average, 3)+0.0015*pow(average, 2)-0.9208*average
      +                          +227.33;
 28143  013EE2  0E7B               	movlw	123
 28144  013EE4  0100               	movlb	0	; () banked
 28145  013EE6  6F8F               	movwf	___fladd@a& (0+255),b
 28146  013EE8  0E54               	movlw	84
 28147  013EEA  6F90               	movwf	(___fladd@a+1)& (0+255),b
 28148  013EEC  0E63               	movlw	99
 28149  013EEE  6F91               	movwf	(___fladd@a+2)& (0+255),b
 28150  013EF0  0E43               	movlw	67
 28151  013EF2  6F92               	movwf	(___fladd@a+3)& (0+255),b
 28152  013EF4  C0ED  F08B         	movff	_ADCAverage$15837,___fladd@b
 28153  013EF8  C0EE  F08C         	movff	_ADCAverage$15837+1,___fladd@b+1
 28154  013EFC  C0EF  F08D         	movff	_ADCAverage$15837+2,___fladd@b+2
 28155  013F00  C0F0  F08E         	movff	_ADCAverage$15837+3,___fladd@b+3
 28156  013F04  EC84  F09C         	call	___fladd	;wreg free
 28157  013F08  C08B  F09F         	movff	?___fladd,___fltol@f1
 28158  013F0C  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 28159  013F10  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 28160  013F14  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 28161  013F18  ECCF  F0B4         	call	___fltol	;wreg free
 28162  013F1C  C09F  F02E         	movff	?___fltol,_average
 28163  013F20  C0A0  F02F         	movff	?___fltol+1,_average+1
 28164                           
 28165                           ;dans.c: 219: HMI_SetNumber(average);
 28166  013F24  C02E  F076         	movff	_average,HMI_SetNumber@pInput
 28167  013F28  C02F  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 28168  013F2C  EC7B  F0C4         	call	_HMI_SetNumber	;wreg free
 28169                           
 28170                           ;dans.c: 220: HMI_Render();
 28171  013F30  EC1E  F0C3         	call	_HMI_Render	;wreg free
 28172  013F34  0012               	return	
 28173  013F36                     __end_of_ADCAverage:
 28174                           	opt stack 0
 28175                           tosu	equ	0xFFF
 28176                           tosh	equ	0xFFE
 28177                           tosl	equ	0xFFD
 28178                           pclath	equ	0xFFA
 28179                           tblptru	equ	0xFF8
 28180                           tblptrh	equ	0xFF7
 28181                           tblptrl	equ	0xFF6
 28182                           tablat	equ	0xFF5
 28183                           prodh	equ	0xFF4
 28184                           prodl	equ	0xFF3
 28185                           intcon	equ	0xFF2
 28186                           indf0	equ	0xFEF
 28187                           postinc0	equ	0xFEE
 28188                           fsr0h	equ	0xFEA
 28189                           fsr0l	equ	0xFE9
 28190                           wreg	equ	0xFE8
 28191                           indf1	equ	0xFE7
 28192                           postdec1	equ	0xFE5
 28193                           fsr1h	equ	0xFE2
 28194                           fsr1l	equ	0xFE1
 28195                           indf2	equ	0xFDF
 28196                           postinc2	equ	0xFDE
 28197                           postdec2	equ	0xFDD
 28198                           plusw2	equ	0xFDB
 28199                           fsr2h	equ	0xFDA
 28200                           fsr2l	equ	0xFD9
 28201                           status	equ	0xFD8
 28202                           
 28203 ;; *************** function _pow *****************
 28204 ;; Defined at:
 28205 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\pow.c"
 28206 ;; Parameters:    Size  Location     Type
 28207 ;;  x               4   98[BANK0 ] int 
 28208 ;;  y               4  102[BANK0 ] int 
 28209 ;; Auto vars:     Size  Location     Type
 28210 ;;  yi              4  115[BANK0 ] unsigned long 
 28211 ;;  sign            1  114[BANK0 ] unsigned char 
 28212 ;; Return value:  Size  Location     Type
 28213 ;;                  4   98[BANK0 ] unsigned char 
 28214 ;; Registers used:
 28215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28216 ;; Tracked objects:
 28217 ;;		On entry : 0/0
 28218 ;;		On exit  : 0/0
 28219 ;;		Unchanged: 0/0
 28220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28221 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28222 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28224 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28225 ;;Total ram usage:       21 bytes
 28226 ;; Hardware stack levels used:    1
 28227 ;; Hardware stack levels required when called:   10
 28228 ;; This function calls:
 28229 ;;		___flge
 28230 ;;		___flmul
 28231 ;;		___flneg
 28232 ;;		___fltol
 28233 ;;		___xxtofl
 28234 ;;		_exp
 28235 ;;		_log
 28236 ;; This function is called by:
 28237 ;;		_ADCAverage
 28238 ;; This function uses a non-reentrant model
 28239 ;;
 28240                           
 28241                           	psect	text129
 28242  014BA0                     __ptext129:
 28243                           	opt stack 0
 28244  014BA0                     _pow:
 28245                           	opt stack 18
 28246                           
 28247                           ;incstack = 0
 28248  014BA0  0E00               	movlw	0
 28249  014BA2  0100               	movlb	0	; () banked
 28250  014BA4  6FD2               	movwf	pow@sign& (0+255),b
 28251                           
 28252                           ; BSR set to: 0
 28253  014BA6  51C2               	movf	pow@x& (0+255),w,b
 28254  014BA8  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 28255  014BAA  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 28256  014BAC  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 28257  014BAE  A4D8               	btfss	status,2,c
 28258  014BB0  D024               	goto	l2984
 28259                           
 28260                           ; BSR set to: 0
 28261  014BB2  0E00               	movlw	0
 28262  014BB4  6F60               	movwf	___flge@ff1& (0+255),b
 28263  014BB6  0E00               	movlw	0
 28264  014BB8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 28265  014BBA  0E00               	movlw	0
 28266  014BBC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 28267  014BBE  0E00               	movlw	0
 28268  014BC0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 28269  014BC2  C0C6  F064         	movff	pow@y,___flge@ff2
 28270  014BC6  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 28271  014BCA  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 28272  014BCE  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 28273  014BD2  EC4D  F0B1         	call	___flge	;wreg free
 28274  014BD6  0100               	movlb	0	; () banked
 28275  014BD8  A0D8               	btfss	status,0,c
 28276  014BDA  D005               	goto	l2985
 28277                           
 28278                           ; BSR set to: 0
 28279  014BDC  0E00               	movlw	0
 28280  014BDE  0101               	movlb	1	; () banked
 28281  014BE0  6F1B               	movwf	(_errno+1)& (0+255),b
 28282  014BE2  0E21               	movlw	33
 28283  014BE4  6F1A               	movwf	_errno& (0+255),b
 28284  014BE6                     l2985:
 28285  014BE6  0E00               	movlw	0
 28286  014BE8  0100               	movlb	0	; () banked
 28287  014BEA  6FC2               	movwf	?_pow& (0+255),b
 28288  014BEC  0E00               	movlw	0
 28289  014BEE  6FC3               	movwf	(?_pow+1)& (0+255),b
 28290  014BF0  0E00               	movlw	0
 28291  014BF2  6FC4               	movwf	(?_pow+2)& (0+255),b
 28292  014BF4  0E00               	movlw	0
 28293  014BF6  6FC5               	movwf	(?_pow+3)& (0+255),b
 28294                           
 28295                           ; BSR set to: 0
 28296  014BF8  0012               	return	
 28297  014BFA                     l2984:
 28298                           
 28299                           ; BSR set to: 0
 28300                           
 28301                           ; BSR set to: 0
 28302  014BFA  51C6               	movf	pow@y& (0+255),w,b
 28303  014BFC  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 28304  014BFE  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 28305  014C00  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 28306  014C02  A4D8               	btfss	status,2,c
 28307  014C04  D009               	goto	l2987
 28308                           
 28309                           ; BSR set to: 0
 28310  014C06  0E00               	movlw	0
 28311  014C08  6FC2               	movwf	?_pow& (0+255),b
 28312  014C0A  0E00               	movlw	0
 28313  014C0C  6FC3               	movwf	(?_pow+1)& (0+255),b
 28314  014C0E  0E80               	movlw	128
 28315  014C10  6FC4               	movwf	(?_pow+2)& (0+255),b
 28316  014C12  0E3F               	movlw	63
 28317  014C14  6FC5               	movwf	(?_pow+3)& (0+255),b
 28318                           
 28319                           ; BSR set to: 0
 28320  014C16  0012               	return	
 28321  014C18                     l2987:
 28322                           
 28323                           ; BSR set to: 0
 28324                           
 28325                           ; BSR set to: 0
 28326  014C18  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 28327  014C1A  D04F               	goto	l2988
 28328                           
 28329                           ; BSR set to: 0
 28330  014C1C  C0C6  F09F         	movff	pow@y,___fltol@f1
 28331  014C20  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 28332  014C24  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 28333  014C28  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 28334  014C2C  ECCF  F0B4         	call	___fltol	;wreg free
 28335  014C30  C09F  F0D3         	movff	?___fltol,pow@yi
 28336  014C34  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 28337  014C38  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 28338  014C3C  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 28339  014C40  C0D3  F060         	movff	pow@yi,___xxtofl@val
 28340  014C44  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 28341  014C48  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 28342  014C4C  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 28343  014C50  0E00               	movlw	0
 28344  014C52  ECDF  F0AC         	call	___xxtofl
 28345  014C56  0100               	movlb	0	; () banked
 28346  014C58  51C6               	movf	pow@y& (0+255),w,b
 28347  014C5A  1960               	xorwf	?___xxtofl& (0+255),w,b
 28348  014C5C  E10A               	bnz	u12750
 28349  014C5E  51C7               	movf	(pow@y+1)& (0+255),w,b
 28350  014C60  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 28351  014C62  E107               	bnz	u12750
 28352  014C64  51C8               	movf	(pow@y+2)& (0+255),w,b
 28353  014C66  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 28354  014C68  E104               	bnz	u12750
 28355  014C6A  51C9               	movf	(pow@y+3)& (0+255),w,b
 28356  014C6C  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 28357  014C6E  B4D8               	btfsc	status,2,c
 28358  014C70  D00F               	goto	l2989
 28359  014C72                     u12750:
 28360                           
 28361                           ; BSR set to: 0
 28362  014C72  0E00               	movlw	0
 28363  014C74  0101               	movlb	1	; () banked
 28364  014C76  6F1B               	movwf	(_errno+1)& (0+255),b
 28365  014C78  0E21               	movlw	33
 28366  014C7A  6F1A               	movwf	_errno& (0+255),b
 28367  014C7C  0E00               	movlw	0
 28368  014C7E  0100               	movlb	0	; () banked
 28369  014C80  6FC2               	movwf	?_pow& (0+255),b
 28370  014C82  0E00               	movlw	0
 28371  014C84  6FC3               	movwf	(?_pow+1)& (0+255),b
 28372  014C86  0E00               	movlw	0
 28373  014C88  6FC4               	movwf	(?_pow+2)& (0+255),b
 28374  014C8A  0E00               	movlw	0
 28375  014C8C  6FC5               	movwf	(?_pow+3)& (0+255),b
 28376                           
 28377                           ; BSR set to: 0
 28378  014C8E  0012               	return	
 28379  014C90                     l2989:
 28380                           
 28381                           ; BSR set to: 0
 28382                           
 28383                           ; BSR set to: 0
 28384  014C90  51D3               	movf	pow@yi& (0+255),w,b
 28385  014C92  0B01               	andlw	1
 28386  014C94  6FD2               	movwf	pow@sign& (0+255),b
 28387                           
 28388                           ; BSR set to: 0
 28389  014C96  C0C2  F087         	movff	pow@x,___flneg@f1
 28390  014C9A  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 28391  014C9E  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 28392  014CA2  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 28393  014CA6  ECCF  F0C3         	call	___flneg	;wreg free
 28394  014CAA  C087  F0C2         	movff	?___flneg,pow@x
 28395  014CAE  C088  F0C3         	movff	?___flneg+1,pow@x+1
 28396  014CB2  C089  F0C4         	movff	?___flneg+2,pow@x+2
 28397  014CB6  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 28398  014CBA                     l2988:
 28399  014CBA  C0C2  F0AF         	movff	pow@x,log@x
 28400  014CBE  C0C3  F0B0         	movff	pow@x+1,log@x+1
 28401  014CC2  C0C4  F0B1         	movff	pow@x+2,log@x+2
 28402  014CC6  C0C5  F0B2         	movff	pow@x+3,log@x+3
 28403  014CCA  ECC4  F0AA         	call	_log	;wreg free
 28404  014CCE  C0AF  F0CA         	movff	?_log,_pow$15838
 28405  014CD2  C0B0  F0CB         	movff	?_log+1,_pow$15838+1
 28406  014CD6  C0B1  F0CC         	movff	?_log+2,_pow$15838+2
 28407  014CDA  C0B2  F0CD         	movff	?_log+3,_pow$15838+3
 28408  014CDE  C0CA  F06E         	movff	_pow$15838,___flmul@b
 28409  014CE2  C0CB  F06F         	movff	_pow$15838+1,___flmul@b+1
 28410  014CE6  C0CC  F070         	movff	_pow$15838+2,___flmul@b+2
 28411  014CEA  C0CD  F071         	movff	_pow$15838+3,___flmul@b+3
 28412  014CEE  C0C6  F072         	movff	pow@y,___flmul@a
 28413  014CF2  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 28414  014CF6  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 28415  014CFA  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 28416  014CFE  ECDB  F09A         	call	___flmul	;wreg free
 28417  014D02  C06E  F0CE         	movff	?___flmul,_pow$15839
 28418  014D06  C06F  F0CF         	movff	?___flmul+1,_pow$15839+1
 28419  014D0A  C070  F0D0         	movff	?___flmul+2,_pow$15839+2
 28420  014D0E  C071  F0D1         	movff	?___flmul+3,_pow$15839+3
 28421  014D12  C0CE  F0B7         	movff	_pow$15839,exp@x
 28422  014D16  C0CF  F0B8         	movff	_pow$15839+1,exp@x+1
 28423  014D1A  C0D0  F0B9         	movff	_pow$15839+2,exp@x+2
 28424  014D1E  C0D1  F0BA         	movff	_pow$15839+3,exp@x+3
 28425  014D22  EC8D  F0A3         	call	_exp	;wreg free
 28426  014D26  C0B7  F0C2         	movff	?_exp,pow@x
 28427  014D2A  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 28428  014D2E  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 28429  014D32  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 28430  014D36  0100               	movlb	0	; () banked
 28431  014D38  51D2               	movf	pow@sign& (0+255),w,b
 28432  014D3A  B4D8               	btfsc	status,2,c
 28433  014D3C  D013               	goto	l2990
 28434                           
 28435                           ; BSR set to: 0
 28436  014D3E  C0C2  F087         	movff	pow@x,___flneg@f1
 28437  014D42  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 28438  014D46  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 28439  014D4A  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 28440  014D4E  ECCF  F0C3         	call	___flneg	;wreg free
 28441  014D52  C087  F0C2         	movff	?___flneg,?_pow
 28442  014D56  C088  F0C3         	movff	?___flneg+1,?_pow+1
 28443  014D5A  C089  F0C4         	movff	?___flneg+2,?_pow+2
 28444  014D5E  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 28445  014D62  0012               	return	
 28446  014D64                     l2990:
 28447                           
 28448                           ; BSR set to: 0
 28449  014D64  C0C2  F0C2         	movff	pow@x,?_pow
 28450  014D68  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 28451  014D6C  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 28452  014D70  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 28453  014D74  0012               	return		;funcret
 28454  014D76                     __end_of_pow:
 28455                           	opt stack 0
 28456                           tosu	equ	0xFFF
 28457                           tosh	equ	0xFFE
 28458                           tosl	equ	0xFFD
 28459                           pclath	equ	0xFFA
 28460                           tblptru	equ	0xFF8
 28461                           tblptrh	equ	0xFF7
 28462                           tblptrl	equ	0xFF6
 28463                           tablat	equ	0xFF5
 28464                           prodh	equ	0xFF4
 28465                           prodl	equ	0xFF3
 28466                           intcon	equ	0xFF2
 28467                           indf0	equ	0xFEF
 28468                           postinc0	equ	0xFEE
 28469                           fsr0h	equ	0xFEA
 28470                           fsr0l	equ	0xFE9
 28471                           wreg	equ	0xFE8
 28472                           indf1	equ	0xFE7
 28473                           postdec1	equ	0xFE5
 28474                           fsr1h	equ	0xFE2
 28475                           fsr1l	equ	0xFE1
 28476                           indf2	equ	0xFDF
 28477                           postinc2	equ	0xFDE
 28478                           postdec2	equ	0xFDD
 28479                           plusw2	equ	0xFDB
 28480                           fsr2h	equ	0xFDA
 28481                           fsr2l	equ	0xFD9
 28482                           status	equ	0xFD8
 28483                           
 28484 ;; *************** function _log *****************
 28485 ;; Defined at:
 28486 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\log.c"
 28487 ;; Parameters:    Size  Location     Type
 28488 ;;  x               4   79[BANK0 ] unsigned char 
 28489 ;; Auto vars:     Size  Location     Type
 28490 ;;  exponent        2   83[BANK0 ] int 
 28491 ;; Return value:  Size  Location     Type
 28492 ;;                  4   79[BANK0 ] int 
 28493 ;; Registers used:
 28494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28495 ;; Tracked objects:
 28496 ;;		On entry : 0/0
 28497 ;;		On exit  : 0/0
 28498 ;;		Unchanged: 0/0
 28499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28500 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28501 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28503 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28504 ;;Total ram usage:        6 bytes
 28505 ;; Hardware stack levels used:    1
 28506 ;; Hardware stack levels required when called:    9
 28507 ;; This function calls:
 28508 ;;		___fladd
 28509 ;;		___flmul
 28510 ;;		___xxtofl
 28511 ;;		_eval_poly
 28512 ;;		_frexp
 28513 ;; This function is called by:
 28514 ;;		_pow
 28515 ;; This function uses a non-reentrant model
 28516 ;;
 28517                           
 28518                           	psect	text130
 28519  015588                     __ptext130:
 28520                           	opt stack 0
 28521  015588                     _log:
 28522                           	opt stack 18
 28523                           
 28524                           ;incstack = 0
 28525  015588  0100               	movlb	0	; () banked
 28526  01558A  AFB2               	btfss	(log@x+3)& (0+255),7,b
 28527  01558C  D00F               	goto	l3186
 28528                           
 28529                           ; BSR set to: 0
 28530  01558E  0E00               	movlw	0
 28531  015590  0101               	movlb	1	; () banked
 28532  015592  6F1B               	movwf	(_errno+1)& (0+255),b
 28533  015594  0E21               	movlw	33
 28534  015596  6F1A               	movwf	_errno& (0+255),b
 28535  015598  0E00               	movlw	0
 28536  01559A  0100               	movlb	0	; () banked
 28537  01559C  6FAF               	movwf	?_log& (0+255),b
 28538  01559E  0E00               	movlw	0
 28539  0155A0  6FB0               	movwf	(?_log+1)& (0+255),b
 28540  0155A2  0E00               	movlw	0
 28541  0155A4  6FB1               	movwf	(?_log+2)& (0+255),b
 28542  0155A6  0E00               	movlw	0
 28543  0155A8  6FB2               	movwf	(?_log+3)& (0+255),b
 28544                           
 28545                           ; BSR set to: 0
 28546  0155AA  0012               	return	
 28547  0155AC                     l3186:
 28548                           
 28549                           ; BSR set to: 0
 28550                           
 28551                           ; BSR set to: 0
 28552  0155AC  51AF               	movf	log@x& (0+255),w,b
 28553  0155AE  11B0               	iorwf	(log@x+1)& (0+255),w,b
 28554  0155B0  11B1               	iorwf	(log@x+2)& (0+255),w,b
 28555  0155B2  11B2               	iorwf	(log@x+3)& (0+255),w,b
 28556  0155B4  A4D8               	btfss	status,2,c
 28557  0155B6  D00F               	goto	l3188
 28558                           
 28559                           ; BSR set to: 0
 28560  0155B8  0E00               	movlw	0
 28561  0155BA  0101               	movlb	1	; () banked
 28562  0155BC  6F1B               	movwf	(_errno+1)& (0+255),b
 28563  0155BE  0E22               	movlw	34
 28564  0155C0  6F1A               	movwf	_errno& (0+255),b
 28565  0155C2  0E00               	movlw	0
 28566  0155C4  0100               	movlb	0	; () banked
 28567  0155C6  6FAF               	movwf	?_log& (0+255),b
 28568  0155C8  0E00               	movlw	0
 28569  0155CA  6FB0               	movwf	(?_log+1)& (0+255),b
 28570  0155CC  0E00               	movlw	0
 28571  0155CE  6FB1               	movwf	(?_log+2)& (0+255),b
 28572  0155D0  0E00               	movlw	0
 28573  0155D2  6FB2               	movwf	(?_log+3)& (0+255),b
 28574                           
 28575                           ; BSR set to: 0
 28576  0155D4  0012               	return	
 28577  0155D6                     l3188:
 28578                           
 28579                           ; BSR set to: 0
 28580                           
 28581                           ; BSR set to: 0
 28582  0155D6  0E00               	movlw	0
 28583  0155D8  6F72               	movwf	___flmul@a& (0+255),b
 28584  0155DA  0E00               	movlw	0
 28585  0155DC  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28586  0155DE  0E00               	movlw	0
 28587  0155E0  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28588  0155E2  0E40               	movlw	64
 28589  0155E4  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28590  0155E6  0EB3               	movlw	low log@exponent
 28591  0155E8  6F64               	movwf	frexp@eptr& (0+255),b
 28592  0155EA  0E00               	movlw	high log@exponent
 28593  0155EC  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 28594  0155EE  C0AF  F060         	movff	log@x,frexp@value
 28595  0155F2  C0B0  F061         	movff	log@x+1,frexp@value+1
 28596  0155F6  C0B1  F062         	movff	log@x+2,frexp@value+2
 28597  0155FA  C0B2  F063         	movff	log@x+3,frexp@value+3
 28598  0155FE  EC4C  F0B7         	call	_frexp	;wreg free
 28599  015602  C060  F06E         	movff	?_frexp,___flmul@b
 28600  015606  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 28601  01560A  C062  F070         	movff	?_frexp+2,___flmul@b+2
 28602  01560E  C063  F071         	movff	?_frexp+3,___flmul@b+3
 28603  015612  ECDB  F09A         	call	___flmul	;wreg free
 28604  015616  C06E  F08B         	movff	?___flmul,___fladd@b
 28605  01561A  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 28606  01561E  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 28607  015622  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 28608  015626  0E00               	movlw	0
 28609  015628  0100               	movlb	0	; () banked
 28610  01562A  6F8F               	movwf	___fladd@a& (0+255),b
 28611  01562C  0E00               	movlw	0
 28612  01562E  6F90               	movwf	(___fladd@a+1)& (0+255),b
 28613  015630  0E80               	movlw	128
 28614  015632  6F91               	movwf	(___fladd@a+2)& (0+255),b
 28615  015634  0EBF               	movlw	191
 28616  015636  6F92               	movwf	(___fladd@a+3)& (0+255),b
 28617  015638  EC84  F09C         	call	___fladd	;wreg free
 28618  01563C  C08B  F0AF         	movff	?___fladd,log@x
 28619  015640  C08C  F0B0         	movff	?___fladd+1,log@x+1
 28620  015644  C08D  F0B1         	movff	?___fladd+2,log@x+2
 28621  015648  C08E  F0B2         	movff	?___fladd+3,log@x+3
 28622  01564C  0100               	movlb	0	; () banked
 28623  01564E  07B3               	decf	log@exponent& (0+255),f,b
 28624  015650  A0D8               	btfss	status,0,c
 28625  015652  07B4               	decf	(log@exponent+1)& (0+255),f,b
 28626                           
 28627                           ; BSR set to: 0
 28628  015654  C0AF  F09F         	movff	log@x,eval_poly@x
 28629  015658  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 28630  01565C  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 28631  015660  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 28632  015664  0E49               	movlw	low log@coeff
 28633  015666  6FA3               	movwf	eval_poly@d& (0+255),b
 28634  015668  0EFE               	movlw	high log@coeff
 28635  01566A  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 28636  01566C  0E00               	movlw	0
 28637  01566E  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 28638  015670  0E08               	movlw	8
 28639  015672  6FA5               	movwf	eval_poly@n& (0+255),b
 28640  015674  ECEF  F0B2         	call	_eval_poly	;wreg free
 28641  015678  C09F  F0AF         	movff	?_eval_poly,log@x
 28642  01567C  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 28643  015680  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 28644  015684  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 28645  015688  0E18               	movlw	24
 28646  01568A  0100               	movlb	0	; () banked
 28647  01568C  6F72               	movwf	___flmul@a& (0+255),b
 28648  01568E  0E72               	movlw	114
 28649  015690  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28650  015692  0E31               	movlw	49
 28651  015694  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28652  015696  0E3F               	movlw	63
 28653  015698  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28654  01569A  C0B3  F060         	movff	log@exponent,___xxtofl@val
 28655  01569E  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 28656  0156A2  0E00               	movlw	0
 28657  0156A4  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28658  0156A6  0EFF               	movlw	-1
 28659  0156A8  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28660  0156AA  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28661  0156AC  0E01               	movlw	1
 28662  0156AE  ECDF  F0AC         	call	___xxtofl
 28663  0156B2  C060  F06E         	movff	?___xxtofl,___flmul@b
 28664  0156B6  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 28665  0156BA  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 28666  0156BE  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 28667  0156C2  ECDB  F09A         	call	___flmul	;wreg free
 28668  0156C6  C06E  F08B         	movff	?___flmul,___fladd@b
 28669  0156CA  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 28670  0156CE  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 28671  0156D2  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 28672  0156D6  C0AF  F08F         	movff	log@x,___fladd@a
 28673  0156DA  C0B0  F090         	movff	log@x+1,___fladd@a+1
 28674  0156DE  C0B1  F091         	movff	log@x+2,___fladd@a+2
 28675  0156E2  C0B2  F092         	movff	log@x+3,___fladd@a+3
 28676  0156E6  EC84  F09C         	call	___fladd	;wreg free
 28677  0156EA  C08B  F0AF         	movff	?___fladd,?_log
 28678  0156EE  C08C  F0B0         	movff	?___fladd+1,?_log+1
 28679  0156F2  C08D  F0B1         	movff	?___fladd+2,?_log+2
 28680  0156F6  C08E  F0B2         	movff	?___fladd+3,?_log+3
 28681  0156FA  0012               	return	
 28682  0156FC                     __end_of_log:
 28683                           	opt stack 0
 28684                           tosu	equ	0xFFF
 28685                           tosh	equ	0xFFE
 28686                           tosl	equ	0xFFD
 28687                           pclath	equ	0xFFA
 28688                           tblptru	equ	0xFF8
 28689                           tblptrh	equ	0xFF7
 28690                           tblptrl	equ	0xFF6
 28691                           tablat	equ	0xFF5
 28692                           prodh	equ	0xFF4
 28693                           prodl	equ	0xFF3
 28694                           intcon	equ	0xFF2
 28695                           indf0	equ	0xFEF
 28696                           postinc0	equ	0xFEE
 28697                           fsr0h	equ	0xFEA
 28698                           fsr0l	equ	0xFE9
 28699                           wreg	equ	0xFE8
 28700                           indf1	equ	0xFE7
 28701                           postdec1	equ	0xFE5
 28702                           fsr1h	equ	0xFE2
 28703                           fsr1l	equ	0xFE1
 28704                           indf2	equ	0xFDF
 28705                           postinc2	equ	0xFDE
 28706                           postdec2	equ	0xFDD
 28707                           plusw2	equ	0xFDB
 28708                           fsr2h	equ	0xFDA
 28709                           fsr2l	equ	0xFD9
 28710                           status	equ	0xFD8
 28711                           
 28712 ;; *************** function _exp *****************
 28713 ;; Defined at:
 28714 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\exp.c"
 28715 ;; Parameters:    Size  Location     Type
 28716 ;;  x               4   87[BANK0 ] int 
 28717 ;; Auto vars:     Size  Location     Type
 28718 ;;  exponent        2   95[BANK0 ] int 
 28719 ;;  sign            1   97[BANK0 ] unsigned char 
 28720 ;; Return value:  Size  Location     Type
 28721 ;;                  4   87[BANK0 ] unsigned char 
 28722 ;; Registers used:
 28723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28724 ;; Tracked objects:
 28725 ;;		On entry : 0/0
 28726 ;;		On exit  : 0/0
 28727 ;;		Unchanged: 0/0
 28728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28729 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28730 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28732 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28733 ;;Total ram usage:       11 bytes
 28734 ;; Hardware stack levels used:    1
 28735 ;; Hardware stack levels required when called:    9
 28736 ;; This function calls:
 28737 ;;		___fldiv
 28738 ;;		___flge
 28739 ;;		___flmul
 28740 ;;		___flneg
 28741 ;;		___flsub
 28742 ;;		___fltol
 28743 ;;		___xxtofl
 28744 ;;		_eval_poly
 28745 ;;		_floor
 28746 ;;		_ldexp
 28747 ;; This function is called by:
 28748 ;;		_pow
 28749 ;; This function uses a non-reentrant model
 28750 ;;
 28751                           
 28752                           	psect	text131
 28753  01471A                     __ptext131:
 28754                           	opt stack 0
 28755  01471A                     _exp:
 28756                           	opt stack 18
 28757                           
 28758                           ;incstack = 0
 28759  01471A  0100               	movlb	0	; () banked
 28760  01471C  51B7               	movf	exp@x& (0+255),w,b
 28761  01471E  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 28762  014720  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 28763  014722  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 28764  014724  A4D8               	btfss	status,2,c
 28765  014726  D009               	goto	l3144
 28766                           
 28767                           ; BSR set to: 0
 28768  014728  0E00               	movlw	0
 28769  01472A  6FB7               	movwf	?_exp& (0+255),b
 28770  01472C  0E00               	movlw	0
 28771  01472E  6FB8               	movwf	(?_exp+1)& (0+255),b
 28772  014730  0E80               	movlw	128
 28773  014732  6FB9               	movwf	(?_exp+2)& (0+255),b
 28774  014734  0E3F               	movlw	63
 28775  014736  6FBA               	movwf	(?_exp+3)& (0+255),b
 28776                           
 28777                           ; BSR set to: 0
 28778  014738  0012               	return	
 28779  01473A                     l3144:
 28780                           
 28781                           ; BSR set to: 0
 28782                           
 28783                           ; BSR set to: 0
 28784  01473A  0E18               	movlw	24
 28785  01473C  6F60               	movwf	___flge@ff1& (0+255),b
 28786  01473E  0E72               	movlw	114
 28787  014740  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 28788  014742  0E31               	movlw	49
 28789  014744  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 28790  014746  0E44               	movlw	68
 28791  014748  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 28792  01474A  C0B7  F064         	movff	exp@x,___flge@ff2
 28793  01474E  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 28794  014752  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 28795  014756  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 28796  01475A  EC4D  F0B1         	call	___flge	;wreg free
 28797  01475E  0100               	movlb	0	; () banked
 28798  014760  B0D8               	btfsc	status,0,c
 28799  014762  D00F               	goto	l3146
 28800                           
 28801                           ; BSR set to: 0
 28802  014764  0E00               	movlw	0
 28803  014766  0101               	movlb	1	; () banked
 28804  014768  6F1B               	movwf	(_errno+1)& (0+255),b
 28805  01476A  0E22               	movlw	34
 28806  01476C  6F1A               	movwf	_errno& (0+255),b
 28807  01476E  0EFF               	movlw	255
 28808  014770  0100               	movlb	0	; () banked
 28809  014772  6FB7               	movwf	?_exp& (0+255),b
 28810  014774  0EFF               	movlw	255
 28811  014776  6FB8               	movwf	(?_exp+1)& (0+255),b
 28812  014778  0E7F               	movlw	127
 28813  01477A  6FB9               	movwf	(?_exp+2)& (0+255),b
 28814  01477C  0E7F               	movlw	127
 28815  01477E  6FBA               	movwf	(?_exp+3)& (0+255),b
 28816                           
 28817                           ; BSR set to: 0
 28818  014780  0012               	return	
 28819  014782                     l3146:
 28820                           
 28821                           ; BSR set to: 0
 28822                           
 28823                           ; BSR set to: 0
 28824  014782  C0B7  F060         	movff	exp@x,___flge@ff1
 28825  014786  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 28826  01478A  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 28827  01478E  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 28828  014792  0E87               	movlw	135
 28829  014794  6F64               	movwf	___flge@ff2& (0+255),b
 28830  014796  0E48               	movlw	72
 28831  014798  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 28832  01479A  0E3A               	movlw	58
 28833  01479C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 28834  01479E  0EC4               	movlw	196
 28835  0147A0  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 28836  0147A2  EC4D  F0B1         	call	___flge	;wreg free
 28837  0147A6  0100               	movlb	0	; () banked
 28838  0147A8  B0D8               	btfsc	status,0,c
 28839  0147AA  D00F               	goto	l3147
 28840                           
 28841                           ; BSR set to: 0
 28842  0147AC  0E00               	movlw	0
 28843  0147AE  0101               	movlb	1	; () banked
 28844  0147B0  6F1B               	movwf	(_errno+1)& (0+255),b
 28845  0147B2  0E22               	movlw	34
 28846  0147B4  6F1A               	movwf	_errno& (0+255),b
 28847  0147B6  0E00               	movlw	0
 28848  0147B8  0100               	movlb	0	; () banked
 28849  0147BA  6FB7               	movwf	?_exp& (0+255),b
 28850  0147BC  0E00               	movlw	0
 28851  0147BE  6FB8               	movwf	(?_exp+1)& (0+255),b
 28852  0147C0  0E00               	movlw	0
 28853  0147C2  6FB9               	movwf	(?_exp+2)& (0+255),b
 28854  0147C4  0E00               	movlw	0
 28855  0147C6  6FBA               	movwf	(?_exp+3)& (0+255),b
 28856                           
 28857                           ; BSR set to: 0
 28858  0147C8  0012               	return	
 28859  0147CA                     l3147:
 28860                           
 28861                           ; BSR set to: 0
 28862                           
 28863                           ; BSR set to: 0
 28864  0147CA  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 28865  0147CC  D002               	goto	u12440
 28866  0147CE  0E01               	movlw	1
 28867  0147D0  D001               	goto	u12450
 28868  0147D2                     u12440:
 28869  0147D2  0E00               	movlw	0
 28870  0147D4                     u12450:
 28871  0147D4  6FC1               	movwf	exp@sign& (0+255),b
 28872                           
 28873                           ; BSR set to: 0
 28874  0147D6  51C1               	movf	exp@sign& (0+255),w,b
 28875  0147D8  B4D8               	btfsc	status,2,c
 28876  0147DA  D012               	goto	l3148
 28877                           
 28878                           ; BSR set to: 0
 28879  0147DC  C0B7  F087         	movff	exp@x,___flneg@f1
 28880  0147E0  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 28881  0147E4  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 28882  0147E8  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 28883  0147EC  ECCF  F0C3         	call	___flneg	;wreg free
 28884  0147F0  C087  F0B7         	movff	?___flneg,exp@x
 28885  0147F4  C088  F0B8         	movff	?___flneg+1,exp@x+1
 28886  0147F8  C089  F0B9         	movff	?___flneg+2,exp@x+2
 28887  0147FC  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 28888  014800                     l3148:
 28889  014800  C0B7  F06E         	movff	exp@x,___flmul@b
 28890  014804  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 28891  014808  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 28892  01480C  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 28893  014810  0E3B               	movlw	59
 28894  014812  0100               	movlb	0	; () banked
 28895  014814  6F72               	movwf	___flmul@a& (0+255),b
 28896  014816  0EAA               	movlw	170
 28897  014818  6F73               	movwf	(___flmul@a+1)& (0+255),b
 28898  01481A  0EB8               	movlw	184
 28899  01481C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 28900  01481E  0E3F               	movlw	63
 28901  014820  6F75               	movwf	(___flmul@a+3)& (0+255),b
 28902  014822  ECDB  F09A         	call	___flmul	;wreg free
 28903  014826  C06E  F0B7         	movff	?___flmul,exp@x
 28904  01482A  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 28905  01482E  C070  F0B9         	movff	?___flmul+2,exp@x+2
 28906  014832  C071  F0BA         	movff	?___flmul+3,exp@x+3
 28907  014836  C0B7  F0A9         	movff	exp@x,floor@x
 28908  01483A  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 28909  01483E  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 28910  014842  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 28911  014846  ECDE  F0B1         	call	_floor	;wreg free
 28912  01484A  C0A9  F0BB         	movff	?_floor,_exp$15840
 28913  01484E  C0AA  F0BC         	movff	?_floor+1,_exp$15840+1
 28914  014852  C0AB  F0BD         	movff	?_floor+2,_exp$15840+2
 28915  014856  C0AC  F0BE         	movff	?_floor+3,_exp$15840+3
 28916  01485A  C0BB  F09F         	movff	_exp$15840,___fltol@f1
 28917  01485E  C0BC  F0A0         	movff	_exp$15840+1,___fltol@f1+1
 28918  014862  C0BD  F0A1         	movff	_exp$15840+2,___fltol@f1+2
 28919  014866  C0BE  F0A2         	movff	_exp$15840+3,___fltol@f1+3
 28920  01486A  ECCF  F0B4         	call	___fltol	;wreg free
 28921  01486E  C09F  F0BF         	movff	?___fltol,exp@exponent
 28922  014872  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 28923  014876  C0B7  F09F         	movff	exp@x,___flsub@b
 28924  01487A  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 28925  01487E  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 28926  014882  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 28927  014886  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 28928  01488A  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 28929  01488E  0100               	movlb	0	; () banked
 28930  014890  0E00               	movlw	0
 28931  014892  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 28932  014894  0EFF               	movlw	-1
 28933  014896  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 28934  014898  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 28935  01489A  0E01               	movlw	1
 28936  01489C  ECDF  F0AC         	call	___xxtofl
 28937  0148A0  C060  F0A3         	movff	?___xxtofl,___flsub@a
 28938  0148A4  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 28939  0148A8  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 28940  0148AC  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 28941  0148B0  EC83  F0C1         	call	___flsub	;wreg free
 28942  0148B4  C09F  F0B7         	movff	?___flsub,exp@x
 28943  0148B8  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 28944  0148BC  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 28945  0148C0  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 28946  0148C4  C0B7  F09F         	movff	exp@x,eval_poly@x
 28947  0148C8  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 28948  0148CC  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 28949  0148D0  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 28950  0148D4  0E21               	movlw	low exp@coeff
 28951  0148D6  0100               	movlb	0	; () banked
 28952  0148D8  6FA3               	movwf	eval_poly@d& (0+255),b
 28953  0148DA  0EFE               	movlw	high exp@coeff
 28954  0148DC  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 28955  0148DE  0E00               	movlw	0
 28956  0148E0  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 28957  0148E2  0E09               	movlw	9
 28958  0148E4  6FA5               	movwf	eval_poly@n& (0+255),b
 28959  0148E6  ECEF  F0B2         	call	_eval_poly	;wreg free
 28960  0148EA  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 28961  0148EE  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 28962  0148F2  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 28963  0148F6  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 28964  0148FA  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 28965  0148FE  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 28966  014902  ECEE  F0B3         	call	_ldexp	;wreg free
 28967  014906  C0AF  F0B7         	movff	?_ldexp,exp@x
 28968  01490A  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 28969  01490E  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 28970  014912  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 28971  014916  0100               	movlb	0	; () banked
 28972  014918  51C1               	movf	exp@sign& (0+255),w,b
 28973  01491A  B4D8               	btfsc	status,2,c
 28974  01491C  D02F               	goto	l3149
 28975                           
 28976                           ; BSR set to: 0
 28977  01491E  29B7               	incf	exp@x& (0+255),w,b
 28978  014920  E112               	bnz	l15045
 28979  014922  29B8               	incf	(exp@x+1)& (0+255),w,b
 28980  014924  E110               	bnz	l15045
 28981  014926  0E7F               	movlw	127
 28982  014928  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 28983  01492A  E10D               	bnz	l15045
 28984  01492C  0E7F               	movlw	127
 28985  01492E  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 28986  014930  A4D8               	btfss	status,2,c
 28987  014932  D009               	goto	l3150
 28988                           
 28989                           ; BSR set to: 0
 28990  014934  0E00               	movlw	0
 28991  014936  6FB7               	movwf	?_exp& (0+255),b
 28992  014938  0E00               	movlw	0
 28993  01493A  6FB8               	movwf	(?_exp+1)& (0+255),b
 28994  01493C  0E00               	movlw	0
 28995  01493E  6FB9               	movwf	(?_exp+2)& (0+255),b
 28996  014940  0E00               	movlw	0
 28997  014942  6FBA               	movwf	(?_exp+3)& (0+255),b
 28998                           
 28999                           ; BSR set to: 0
 29000  014944  0012               	return	
 29001  014946                     l3150:
 29002  014946                     l15045:
 29003                           
 29004                           ; BSR set to: 0
 29005  014946  0E00               	movlw	0
 29006  014948  6F60               	movwf	___fldiv@b& (0+255),b
 29007  01494A  0E00               	movlw	0
 29008  01494C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 29009  01494E  0E80               	movlw	128
 29010  014950  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 29011  014952  0E3F               	movlw	63
 29012  014954  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 29013  014956  C0B7  F064         	movff	exp@x,___fldiv@a
 29014  01495A  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 29015  01495E  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 29016  014962  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 29017  014966  EC9B  F09F         	call	___fldiv	;wreg free
 29018  01496A  C060  F0B7         	movff	?___fldiv,?_exp
 29019  01496E  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 29020  014972  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 29021  014976  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 29022  01497A  0012               	return	
 29023  01497C                     l3149:
 29024                           
 29025                           ; BSR set to: 0
 29026  01497C  C0B7  F0B7         	movff	exp@x,?_exp
 29027  014980  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 29028  014984  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 29029  014988  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 29030  01498C  0012               	return		;funcret
 29031  01498E                     __end_of_exp:
 29032                           	opt stack 0
 29033                           tosu	equ	0xFFF
 29034                           tosh	equ	0xFFE
 29035                           tosl	equ	0xFFD
 29036                           pclath	equ	0xFFA
 29037                           tblptru	equ	0xFF8
 29038                           tblptrh	equ	0xFF7
 29039                           tblptrl	equ	0xFF6
 29040                           tablat	equ	0xFF5
 29041                           prodh	equ	0xFF4
 29042                           prodl	equ	0xFF3
 29043                           intcon	equ	0xFF2
 29044                           indf0	equ	0xFEF
 29045                           postinc0	equ	0xFEE
 29046                           fsr0h	equ	0xFEA
 29047                           fsr0l	equ	0xFE9
 29048                           wreg	equ	0xFE8
 29049                           indf1	equ	0xFE7
 29050                           postdec1	equ	0xFE5
 29051                           fsr1h	equ	0xFE2
 29052                           fsr1l	equ	0xFE1
 29053                           indf2	equ	0xFDF
 29054                           postinc2	equ	0xFDE
 29055                           postdec2	equ	0xFDD
 29056                           plusw2	equ	0xFDB
 29057                           fsr2h	equ	0xFDA
 29058                           fsr2l	equ	0xFD9
 29059                           status	equ	0xFD8
 29060                           
 29061 ;; *************** function _ldexp *****************
 29062 ;; Defined at:
 29063 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 29064 ;; Parameters:    Size  Location     Type
 29065 ;;  value           4   79[BANK0 ] unsigned char 
 29066 ;;  newexp          2   83[BANK0 ] int 
 29067 ;; Auto vars:     Size  Location     Type
 29068 ;;		None
 29069 ;; Return value:  Size  Location     Type
 29070 ;;                  4   79[BANK0 ] int 
 29071 ;; Registers used:
 29072 ;;		wreg, status,2, status,0
 29073 ;; Tracked objects:
 29074 ;;		On entry : 0/0
 29075 ;;		On exit  : 0/0
 29076 ;;		Unchanged: 0/0
 29077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29078 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29080 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29081 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29082 ;;Total ram usage:        8 bytes
 29083 ;; Hardware stack levels used:    1
 29084 ;; Hardware stack levels required when called:    7
 29085 ;; This function calls:
 29086 ;;		Nothing
 29087 ;; This function is called by:
 29088 ;;		_exp
 29089 ;; This function uses a non-reentrant model
 29090 ;;
 29091                           
 29092                           	psect	text132
 29093  0167DC                     __ptext132:
 29094                           	opt stack 0
 29095  0167DC                     _ldexp:
 29096                           	opt stack 19
 29097                           
 29098                           ;incstack = 0
 29099  0167DC  0100               	movlb	0	; () banked
 29100  0167DE  51AF               	movf	ldexp@value& (0+255),w,b
 29101  0167E0  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 29102  0167E2  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 29103  0167E4  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 29104  0167E6  A4D8               	btfss	status,2,c
 29105  0167E8  D009               	goto	l3168
 29106                           
 29107                           ; BSR set to: 0
 29108  0167EA  0E00               	movlw	0
 29109  0167EC  6FAF               	movwf	?_ldexp& (0+255),b
 29110  0167EE  0E00               	movlw	0
 29111  0167F0  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29112  0167F2  0E00               	movlw	0
 29113  0167F4  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29114  0167F6  0E00               	movlw	0
 29115  0167F8  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 29116                           
 29117                           ; BSR set to: 0
 29118  0167FA  0012               	return	
 29119  0167FC                     l3168:
 29120                           
 29121                           ; BSR set to: 0
 29122                           
 29123                           ; BSR set to: 0
 29124  0167FC  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 29125  0167FE  0B7F               	andlw	127
 29126  016800  6FB5               	movwf	??_ldexp& (0+255),b
 29127  016802  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 29128  016804  90D8               	bcf	status,0,c
 29129  016806  37B5               	rlcf	??_ldexp& (0+255),f,b
 29130  016808  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 29131  01680A  51B5               	movf	??_ldexp& (0+255),w,b
 29132  01680C  27B3               	addwf	ldexp@newexp& (0+255),f,b
 29133  01680E  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 29134  016810  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 29135  016812  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 29136  016814  D003               	goto	u12080
 29137  016816  6BB5               	clrf	??_ldexp& (0+255),b
 29138  016818  2BB5               	incf	??_ldexp& (0+255),f,b
 29139  01681A  D002               	goto	u12088
 29140  01681C                     u12080:
 29141  01681C  0100               	movlb	0	; () banked
 29142  01681E  6BB5               	clrf	??_ldexp& (0+255),b
 29143  016820                     u12088:
 29144  016820  51B5               	movf	??_ldexp& (0+255),w,b
 29145  016822  27B3               	addwf	ldexp@newexp& (0+255),f,b
 29146  016824  0E00               	movlw	0
 29147  016826  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 29148  016828  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 29149  01682A  D00F               	goto	l3170
 29150                           
 29151                           ; BSR set to: 0
 29152  01682C  0E00               	movlw	0
 29153  01682E  0101               	movlb	1	; () banked
 29154  016830  6F1B               	movwf	(_errno+1)& (0+255),b
 29155  016832  0E22               	movlw	34
 29156  016834  6F1A               	movwf	_errno& (0+255),b
 29157  016836  0E00               	movlw	0
 29158  016838  0100               	movlb	0	; () banked
 29159  01683A  6FAF               	movwf	?_ldexp& (0+255),b
 29160  01683C  0E00               	movlw	0
 29161  01683E  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29162  016840  0E00               	movlw	0
 29163  016842  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29164  016844  0E00               	movlw	0
 29165  016846                     L18:
 29166  016846  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 29167                           
 29168                           ; BSR set to: 0
 29169  016848  0012               	return	
 29170  01684A                     l3170:
 29171                           
 29172                           ; BSR set to: 0
 29173                           
 29174                           ; BSR set to: 0
 29175  01684A  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 29176  01684C  D01B               	goto	l3172
 29177  01684E  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 29178  016850  A0D8               	btfss	status,0,c
 29179  016852  D018               	goto	l3172
 29180                           
 29181                           ; BSR set to: 0
 29182  016854  0E00               	movlw	0
 29183  016856  0101               	movlb	1	; () banked
 29184  016858  6F1B               	movwf	(_errno+1)& (0+255),b
 29185  01685A  0E22               	movlw	34
 29186  01685C  6F1A               	movwf	_errno& (0+255),b
 29187                           
 29188                           ; BSR set to: 1
 29189  01685E  0100               	movlb	0	; () banked
 29190  016860  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 29191  016862  D008               	goto	l3173
 29192                           
 29193                           ; BSR set to: 0
 29194  016864  0EFF               	movlw	255
 29195  016866  6FAF               	movwf	?_ldexp& (0+255),b
 29196  016868  0EFF               	movlw	255
 29197  01686A  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29198  01686C  0E7F               	movlw	127
 29199  01686E  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29200  016870  0EFF               	movlw	255
 29201  016872  D7E9               	goto	L18
 29202  016874                     l3173:
 29203                           
 29204                           ; BSR set to: 0
 29205                           
 29206                           ; BSR set to: 0
 29207  016874  0EFF               	movlw	255
 29208  016876  6FAF               	movwf	?_ldexp& (0+255),b
 29209  016878  0EFF               	movlw	255
 29210  01687A  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 29211  01687C  0E7F               	movlw	127
 29212  01687E  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 29213  016880  0E7F               	movlw	127
 29214  016882  D7E1               	goto	L18
 29215  016884                     l3172:
 29216                           
 29217                           ; BSR set to: 0
 29218                           
 29219                           ; BSR set to: 0
 29220  016884  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 29221  016886  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 29222  016888  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 29223  01688A  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 29224  01688C  6FB5               	movwf	??_ldexp& (0+255),b
 29225  01688E  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 29226  016890  19B5               	xorwf	??_ldexp& (0+255),w,b
 29227  016892  0B80               	andlw	-128
 29228  016894  19B5               	xorwf	??_ldexp& (0+255),w,b
 29229  016896  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 29230  016898  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 29231  01689C  0E01               	movlw	1
 29232  01689E  17B5               	andwf	??_ldexp& (0+255),f,b
 29233  0168A0  33B5               	rrcf	??_ldexp& (0+255),f,b
 29234  0168A2  33B5               	rrcf	??_ldexp& (0+255),f,b
 29235  0168A4  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 29236  0168A6  19B5               	xorwf	??_ldexp& (0+255),w,b
 29237  0168A8  0B7F               	andlw	-129
 29238  0168AA  19B5               	xorwf	??_ldexp& (0+255),w,b
 29239  0168AC  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 29240                           
 29241                           ; BSR set to: 0
 29242                           
 29243                           ; BSR set to: 0
 29244                           
 29245                           ; BSR set to: 0
 29246  0168AE  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 29247  0168B2  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 29248  0168B6  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 29249  0168BA  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 29250  0168BE  0012               	return	
 29251  0168C0                     __end_of_ldexp:
 29252                           	opt stack 0
 29253                           tosu	equ	0xFFF
 29254                           tosh	equ	0xFFE
 29255                           tosl	equ	0xFFD
 29256                           pclath	equ	0xFFA
 29257                           tblptru	equ	0xFF8
 29258                           tblptrh	equ	0xFF7
 29259                           tblptrl	equ	0xFF6
 29260                           tablat	equ	0xFF5
 29261                           prodh	equ	0xFF4
 29262                           prodl	equ	0xFF3
 29263                           intcon	equ	0xFF2
 29264                           indf0	equ	0xFEF
 29265                           postinc0	equ	0xFEE
 29266                           fsr0h	equ	0xFEA
 29267                           fsr0l	equ	0xFE9
 29268                           wreg	equ	0xFE8
 29269                           indf1	equ	0xFE7
 29270                           postdec1	equ	0xFE5
 29271                           fsr1h	equ	0xFE2
 29272                           fsr1l	equ	0xFE1
 29273                           indf2	equ	0xFDF
 29274                           postinc2	equ	0xFDE
 29275                           postdec2	equ	0xFDD
 29276                           plusw2	equ	0xFDB
 29277                           fsr2h	equ	0xFDA
 29278                           fsr2l	equ	0xFD9
 29279                           status	equ	0xFD8
 29280                           
 29281 ;; *************** function _floor *****************
 29282 ;; Defined at:
 29283 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\floor.c"
 29284 ;; Parameters:    Size  Location     Type
 29285 ;;  x               4   73[BANK0 ] int 
 29286 ;; Auto vars:     Size  Location     Type
 29287 ;;  i               4   77[BANK0 ] int 
 29288 ;;  expon           2   81[BANK0 ] int 
 29289 ;; Return value:  Size  Location     Type
 29290 ;;                  4   73[BANK0 ] int 
 29291 ;; Registers used:
 29292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29293 ;; Tracked objects:
 29294 ;;		On entry : 0/0
 29295 ;;		On exit  : 0/0
 29296 ;;		Unchanged: 0/0
 29297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29298 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29299 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29301 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29302 ;;Total ram usage:       10 bytes
 29303 ;; Hardware stack levels used:    1
 29304 ;; Hardware stack levels required when called:    8
 29305 ;; This function calls:
 29306 ;;		___fladd
 29307 ;;		___flge
 29308 ;;		___fltol
 29309 ;;		___xxtofl
 29310 ;;		_frexp
 29311 ;; This function is called by:
 29312 ;;		_exp
 29313 ;; This function uses a non-reentrant model
 29314 ;;
 29315                           
 29316                           	psect	text133
 29317  0163BC                     __ptext133:
 29318                           	opt stack 0
 29319  0163BC                     _floor:
 29320                           	opt stack 18
 29321                           
 29322                           ; BSR set to: 0
 29323                           ;incstack = 0
 29324  0163BC  C0A9  F060         	movff	floor@x,frexp@value
 29325  0163C0  C0AA  F061         	movff	floor@x+1,frexp@value+1
 29326  0163C4  C0AB  F062         	movff	floor@x+2,frexp@value+2
 29327  0163C8  C0AC  F063         	movff	floor@x+3,frexp@value+3
 29328  0163CC  0EB1               	movlw	low floor@expon
 29329  0163CE  0100               	movlb	0	; () banked
 29330  0163D0  6F64               	movwf	frexp@eptr& (0+255),b
 29331  0163D2  0E00               	movlw	high floor@expon
 29332  0163D4  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 29333  0163D6  EC4C  F0B7         	call	_frexp	;wreg free
 29334  0163DA  0100               	movlb	0	; () banked
 29335  0163DC  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 29336  0163DE  D014               	goto	l3155
 29337                           
 29338                           ; BSR set to: 0
 29339  0163E0  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 29340  0163E2  D009               	goto	l3156
 29341                           
 29342                           ; BSR set to: 0
 29343  0163E4  0E00               	movlw	0
 29344  0163E6  6FA9               	movwf	?_floor& (0+255),b
 29345  0163E8  0E00               	movlw	0
 29346  0163EA  6FAA               	movwf	(?_floor+1)& (0+255),b
 29347  0163EC  0E80               	movlw	128
 29348  0163EE  6FAB               	movwf	(?_floor+2)& (0+255),b
 29349  0163F0  0EBF               	movlw	191
 29350  0163F2  6FAC               	movwf	(?_floor+3)& (0+255),b
 29351                           
 29352                           ; BSR set to: 0
 29353  0163F4  0012               	return	
 29354  0163F6                     l3156:
 29355                           
 29356                           ; BSR set to: 0
 29357                           
 29358                           ; BSR set to: 0
 29359  0163F6  0E00               	movlw	0
 29360  0163F8  6FA9               	movwf	?_floor& (0+255),b
 29361  0163FA  0E00               	movlw	0
 29362  0163FC  6FAA               	movwf	(?_floor+1)& (0+255),b
 29363  0163FE  0E00               	movlw	0
 29364  016400  6FAB               	movwf	(?_floor+2)& (0+255),b
 29365  016402  0E00               	movlw	0
 29366  016404  6FAC               	movwf	(?_floor+3)& (0+255),b
 29367                           
 29368                           ; BSR set to: 0
 29369  016406  0012               	return	
 29370  016408                     l3155:
 29371                           
 29372                           ; BSR set to: 0
 29373                           
 29374                           ; BSR set to: 0
 29375  016408  51B2               	movf	(floor@expon+1)& (0+255),w,b
 29376  01640A  E104               	bnz	u12040
 29377  01640C  0E1D               	movlw	29
 29378  01640E  5DB1               	subwf	floor@expon& (0+255),w,b
 29379  016410  A0D8               	btfss	status,0,c
 29380  016412  D009               	goto	l3158
 29381  016414                     u12040:
 29382                           
 29383                           ; BSR set to: 0
 29384  016414  C0A9  F0A9         	movff	floor@x,?_floor
 29385  016418  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 29386  01641C  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 29387  016420  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 29388  016424  0012               	return	
 29389  016426                     l3158:
 29390                           
 29391                           ; BSR set to: 0
 29392                           
 29393                           ; BSR set to: 0
 29394  016426  C0A9  F09F         	movff	floor@x,___fltol@f1
 29395  01642A  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 29396  01642E  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 29397  016432  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 29398  016436  ECCF  F0B4         	call	___fltol	;wreg free
 29399  01643A  C09F  F060         	movff	?___fltol,___xxtofl@val
 29400  01643E  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 29401  016442  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 29402  016446  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 29403  01644A  0E01               	movlw	1
 29404  01644C  ECDF  F0AC         	call	___xxtofl
 29405  016450  C060  F0AD         	movff	?___xxtofl,floor@i
 29406  016454  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 29407  016458  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 29408  01645C  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 29409  016460  C0A9  F060         	movff	floor@x,___flge@ff1
 29410  016464  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 29411  016468  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 29412  01646C  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 29413  016470  C0AD  F064         	movff	floor@i,___flge@ff2
 29414  016474  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 29415  016478  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 29416  01647C  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 29417  016480  EC4D  F0B1         	call	___flge	;wreg free
 29418  016484  0100               	movlb	0	; () banked
 29419  016486  B0D8               	btfsc	status,0,c
 29420  016488  D01B               	goto	l3159
 29421                           
 29422                           ; BSR set to: 0
 29423  01648A  C0AD  F08B         	movff	floor@i,___fladd@b
 29424  01648E  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 29425  016492  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 29426  016496  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 29427  01649A  0E00               	movlw	0
 29428  01649C  6F8F               	movwf	___fladd@a& (0+255),b
 29429  01649E  0E00               	movlw	0
 29430  0164A0  6F90               	movwf	(___fladd@a+1)& (0+255),b
 29431  0164A2  0E80               	movlw	128
 29432  0164A4  6F91               	movwf	(___fladd@a+2)& (0+255),b
 29433  0164A6  0EBF               	movlw	191
 29434  0164A8  6F92               	movwf	(___fladd@a+3)& (0+255),b
 29435  0164AA  EC84  F09C         	call	___fladd	;wreg free
 29436  0164AE  C08B  F0A9         	movff	?___fladd,?_floor
 29437  0164B2  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 29438  0164B6  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 29439  0164BA  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 29440  0164BE  0012               	return	
 29441  0164C0                     l3159:
 29442                           
 29443                           ; BSR set to: 0
 29444  0164C0  C0AD  F0A9         	movff	floor@i,?_floor
 29445  0164C4  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 29446  0164C8  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 29447  0164CC  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 29448  0164D0  0012               	return		;funcret
 29449  0164D2                     __end_of_floor:
 29450                           	opt stack 0
 29451                           tosu	equ	0xFFF
 29452                           tosh	equ	0xFFE
 29453                           tosl	equ	0xFFD
 29454                           pclath	equ	0xFFA
 29455                           tblptru	equ	0xFF8
 29456                           tblptrh	equ	0xFF7
 29457                           tblptrl	equ	0xFF6
 29458                           tablat	equ	0xFF5
 29459                           prodh	equ	0xFF4
 29460                           prodl	equ	0xFF3
 29461                           intcon	equ	0xFF2
 29462                           indf0	equ	0xFEF
 29463                           postinc0	equ	0xFEE
 29464                           fsr0h	equ	0xFEA
 29465                           fsr0l	equ	0xFE9
 29466                           wreg	equ	0xFE8
 29467                           indf1	equ	0xFE7
 29468                           postdec1	equ	0xFE5
 29469                           fsr1h	equ	0xFE2
 29470                           fsr1l	equ	0xFE1
 29471                           indf2	equ	0xFDF
 29472                           postinc2	equ	0xFDE
 29473                           postdec2	equ	0xFDD
 29474                           plusw2	equ	0xFDB
 29475                           fsr2h	equ	0xFDA
 29476                           fsr2l	equ	0xFD9
 29477                           status	equ	0xFD8
 29478                           
 29479 ;; *************** function _frexp *****************
 29480 ;; Defined at:
 29481 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\frexp.c"
 29482 ;; Parameters:    Size  Location     Type
 29483 ;;  value           4    0[BANK0 ] int 
 29484 ;;  eptr            2    4[BANK0 ] PTR int 
 29485 ;;		 -> log@exponent(2), floor@expon(2), 
 29486 ;; Auto vars:     Size  Location     Type
 29487 ;;		None
 29488 ;; Return value:  Size  Location     Type
 29489 ;;                  4    0[BANK0 ] PTR int 
 29490 ;; Registers used:
 29491 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29492 ;; Tracked objects:
 29493 ;;		On entry : 0/0
 29494 ;;		On exit  : 0/0
 29495 ;;		Unchanged: 0/0
 29496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29497 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29499 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29500 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29501 ;;Total ram usage:        8 bytes
 29502 ;; Hardware stack levels used:    1
 29503 ;; Hardware stack levels required when called:    7
 29504 ;; This function calls:
 29505 ;;		Nothing
 29506 ;; This function is called by:
 29507 ;;		_floor
 29508 ;;		_log
 29509 ;; This function uses a non-reentrant model
 29510 ;;
 29511                           
 29512                           	psect	text134
 29513  016E98                     __ptext134:
 29514                           	opt stack 0
 29515  016E98                     _frexp:
 29516                           	opt stack 19
 29517                           
 29518                           ;incstack = 0
 29519  016E98  0100               	movlb	0	; () banked
 29520  016E9A  5160               	movf	frexp@value& (0+255),w,b
 29521  016E9C  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 29522  016E9E  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 29523  016EA0  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 29524  016EA2  A4D8               	btfss	status,2,c
 29525  016EA4  D011               	goto	l3164
 29526                           
 29527                           ; BSR set to: 0
 29528  016EA6  C064  FFD9         	movff	frexp@eptr,fsr2l
 29529  016EAA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29530  016EAE  0E00               	movlw	0
 29531  016EB0  6EDE               	movwf	postinc2,c
 29532  016EB2  0E00               	movlw	0
 29533  016EB4  6EDD               	movwf	postdec2,c
 29534                           
 29535                           ; BSR set to: 0
 29536  016EB6  0E00               	movlw	0
 29537  016EB8  6F60               	movwf	?_frexp& (0+255),b
 29538  016EBA  0E00               	movlw	0
 29539  016EBC  6F61               	movwf	(?_frexp+1)& (0+255),b
 29540  016EBE  0E00               	movlw	0
 29541  016EC0  6F62               	movwf	(?_frexp+2)& (0+255),b
 29542  016EC2  0E00               	movlw	0
 29543  016EC4  6F63               	movwf	(?_frexp+3)& (0+255),b
 29544                           
 29545                           ; BSR set to: 0
 29546  016EC6  0012               	return	
 29547  016EC8                     l3164:
 29548                           
 29549                           ; BSR set to: 0
 29550                           
 29551                           ; BSR set to: 0
 29552  016EC8  5163               	movf	(frexp@value+3)& (0+255),w,b
 29553  016ECA  0B7F               	andlw	127
 29554  016ECC  6F66               	movwf	??_frexp& (0+255),b
 29555  016ECE  6B67               	clrf	(??_frexp+1)& (0+255),b
 29556  016ED0  90D8               	bcf	status,0,c
 29557  016ED2  3766               	rlcf	??_frexp& (0+255),f,b
 29558  016ED4  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 29559  016ED6  C064  FFD9         	movff	frexp@eptr,fsr2l
 29560  016EDA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29561  016EDE  C066  FFDE         	movff	??_frexp,postinc2
 29562  016EE2  C067  FFDD         	movff	??_frexp+1,postdec2
 29563  016EE6  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 29564  016EE8  D003               	goto	u11580
 29565  016EEA  6B66               	clrf	??_frexp& (0+255),b
 29566  016EEC  2B66               	incf	??_frexp& (0+255),f,b
 29567  016EEE  D002               	goto	u11588
 29568  016EF0                     u11580:
 29569  016EF0  0100               	movlb	0	; () banked
 29570  016EF2  6B66               	clrf	??_frexp& (0+255),b
 29571  016EF4                     u11588:
 29572  016EF4  5166               	movf	??_frexp& (0+255),w,b
 29573  016EF6  C064  FFD9         	movff	frexp@eptr,fsr2l
 29574  016EFA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29575  016EFE  12DE               	iorwf	postinc2,f,c
 29576  016F00  0E00               	movlw	0
 29577  016F02  12DD               	iorwf	postdec2,f,c
 29578                           
 29579                           ; BSR set to: 0
 29580  016F04  C064  FFD9         	movff	frexp@eptr,fsr2l
 29581  016F08  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 29582  016F0C  0E82               	movlw	130
 29583  016F0E  26DE               	addwf	postinc2,f,c
 29584  016F10  0EFF               	movlw	255
 29585  016F12  22DD               	addwfc	postdec2,f,c
 29586                           
 29587                           ; BSR set to: 0
 29588  016F14  8163               	bsf	(frexp@value+3)& (0+255),0,b
 29589  016F16  8363               	bsf	(frexp@value+3)& (0+255),1,b
 29590  016F18  8563               	bsf	(frexp@value+3)& (0+255),2,b
 29591  016F1A  8763               	bsf	(frexp@value+3)& (0+255),3,b
 29592  016F1C  8963               	bsf	(frexp@value+3)& (0+255),4,b
 29593  016F1E  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 29594  016F20  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 29595                           
 29596                           ; BSR set to: 0
 29597  016F22  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 29598                           
 29599                           ; BSR set to: 0
 29600  016F24  C060  F060         	movff	frexp@value,?_frexp
 29601  016F28  C061  F061         	movff	frexp@value+1,?_frexp+1
 29602  016F2C  C062  F062         	movff	frexp@value+2,?_frexp+2
 29603  016F30  C063  F063         	movff	frexp@value+3,?_frexp+3
 29604  016F34  0012               	return	
 29605  016F36                     __end_of_frexp:
 29606                           	opt stack 0
 29607                           tosu	equ	0xFFF
 29608                           tosh	equ	0xFFE
 29609                           tosl	equ	0xFFD
 29610                           pclath	equ	0xFFA
 29611                           tblptru	equ	0xFF8
 29612                           tblptrh	equ	0xFF7
 29613                           tblptrl	equ	0xFF6
 29614                           tablat	equ	0xFF5
 29615                           prodh	equ	0xFF4
 29616                           prodl	equ	0xFF3
 29617                           intcon	equ	0xFF2
 29618                           indf0	equ	0xFEF
 29619                           postinc0	equ	0xFEE
 29620                           fsr0h	equ	0xFEA
 29621                           fsr0l	equ	0xFE9
 29622                           wreg	equ	0xFE8
 29623                           indf1	equ	0xFE7
 29624                           postdec1	equ	0xFE5
 29625                           fsr1h	equ	0xFE2
 29626                           fsr1l	equ	0xFE1
 29627                           indf2	equ	0xFDF
 29628                           postinc2	equ	0xFDE
 29629                           postdec2	equ	0xFDD
 29630                           plusw2	equ	0xFDB
 29631                           fsr2h	equ	0xFDA
 29632                           fsr2l	equ	0xFD9
 29633                           status	equ	0xFD8
 29634                           
 29635 ;; *************** function ___xxtofl *****************
 29636 ;; Defined at:
 29637 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\xxtofl.c"
 29638 ;; Parameters:    Size  Location     Type
 29639 ;;  sign            1    wreg     unsigned char 
 29640 ;;  val             4    0[BANK0 ] long 
 29641 ;; Auto vars:     Size  Location     Type
 29642 ;;  sign            1    8[BANK0 ] unsigned char 
 29643 ;;  arg             4   10[BANK0 ] unsigned long 
 29644 ;;  exp             1    9[BANK0 ] unsigned char 
 29645 ;; Return value:  Size  Location     Type
 29646 ;;                  4    0[BANK0 ] unsigned char 
 29647 ;; Registers used:
 29648 ;;		wreg, status,2, status,0
 29649 ;; Tracked objects:
 29650 ;;		On entry : 0/0
 29651 ;;		On exit  : 0/0
 29652 ;;		Unchanged: 0/0
 29653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29654 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29655 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29656 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29657 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29658 ;;Total ram usage:       14 bytes
 29659 ;; Hardware stack levels used:    1
 29660 ;; Hardware stack levels required when called:    7
 29661 ;; This function calls:
 29662 ;;		Nothing
 29663 ;; This function is called by:
 29664 ;;		_ADCAverage
 29665 ;;		_Move_ADC_To
 29666 ;;		_pow
 29667 ;;		_exp
 29668 ;;		_floor
 29669 ;;		_log
 29670 ;;		_ADC_Voltage
 29671 ;; This function uses a non-reentrant model
 29672 ;;
 29673                           
 29674                           	psect	text135
 29675  0159BE                     __ptext135:
 29676                           	opt stack 0
 29677  0159BE                     ___xxtofl:
 29678                           	opt stack 21
 29679                           
 29680                           ; BSR set to: 0
 29681                           ;incstack = 0
 29682                           ;___xxtofl@sign stored from wreg
 29683  0159BE  0100               	movlb	0	; () banked
 29684  0159C0  6F68               	movwf	___xxtofl@sign& (0+255),b
 29685  0159C2  0100               	movlb	0	; () banked
 29686  0159C4  5168               	movf	___xxtofl@sign& (0+255),w,b
 29687  0159C6  A4D8               	btfss	status,2,c
 29688                           
 29689                           ; BSR set to: 0
 29690  0159C8  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 29691  0159CA  D01A               	goto	l3113
 29692                           
 29693                           ; BSR set to: 0
 29694  0159CC  C060  F064         	movff	___xxtofl@val,??___xxtofl
 29695  0159D0  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 29696  0159D4  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 29697  0159D8  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 29698  0159DC  1F64               	comf	??___xxtofl& (0+255),f,b
 29699  0159DE  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 29700  0159E0  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 29701  0159E2  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 29702  0159E4  2B64               	incf	??___xxtofl& (0+255),f,b
 29703  0159E6  0E00               	movlw	0
 29704  0159E8  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 29705  0159EA  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 29706  0159EC  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 29707  0159EE  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 29708  0159F2  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 29709  0159F6  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 29710  0159FA  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 29711  0159FE  D008               	goto	l3114
 29712  015A00                     l3113:
 29713                           
 29714                           ; BSR set to: 0
 29715  015A00  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 29716  015A04  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 29717  015A08  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 29718  015A0C  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 29719  015A10                     l3114:
 29720                           
 29721                           ; BSR set to: 0
 29722                           
 29723                           ; BSR set to: 0
 29724  015A10  5160               	movf	___xxtofl@val& (0+255),w,b
 29725  015A12  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 29726  015A14  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 29727  015A16  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 29728  015A18  A4D8               	btfss	status,2,c
 29729  015A1A  D009               	goto	l3115
 29730                           
 29731                           ; BSR set to: 0
 29732  015A1C  0E00               	movlw	0
 29733  015A1E  6F60               	movwf	?___xxtofl& (0+255),b
 29734  015A20  0E00               	movlw	0
 29735  015A22  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 29736  015A24  0E00               	movlw	0
 29737  015A26  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 29738  015A28  0E00               	movlw	0
 29739  015A2A  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 29740                           
 29741                           ; BSR set to: 0
 29742  015A2C  0012               	return	
 29743  015A2E                     l3115:
 29744                           
 29745                           ; BSR set to: 0
 29746                           
 29747                           ; BSR set to: 0
 29748  015A2E  0E96               	movlw	150
 29749  015A30  6F69               	movwf	___xxtofl@exp& (0+255),b
 29750  015A32  D006               	goto	l3117
 29751  015A34                     
 29752                           ; BSR set to: 0
 29753                           
 29754                           ; BSR set to: 0
 29755  015A34  2B69               	incf	___xxtofl@exp& (0+255),f,b
 29756  015A36  90D8               	bcf	status,0,c
 29757  015A38  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 29758  015A3A  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 29759  015A3C  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 29760  015A3E  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 29761  015A40                     l3117:
 29762                           
 29763                           ; BSR set to: 0
 29764                           
 29765                           ; BSR set to: 0
 29766  015A40  0E00               	movlw	0
 29767  015A42  156A               	andwf	___xxtofl@arg& (0+255),w,b
 29768  015A44  6F64               	movwf	??___xxtofl& (0+255),b
 29769  015A46  0E00               	movlw	0
 29770  015A48  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 29771  015A4A  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 29772  015A4C  0E00               	movlw	0
 29773  015A4E  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 29774  015A50  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 29775  015A52  0EFE               	movlw	254
 29776  015A54  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 29777  015A56  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 29778  015A58  5164               	movf	??___xxtofl& (0+255),w,b
 29779  015A5A  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 29780  015A5C  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 29781  015A5E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 29782  015A60  B4D8               	btfsc	status,2,c
 29783  015A62  D00D               	goto	l3120
 29784  015A64  D7E7               	goto	l3118
 29785  015A66                     
 29786                           ; BSR set to: 0
 29787                           
 29788                           ; BSR set to: 0
 29789  015A66  2B69               	incf	___xxtofl@exp& (0+255),f,b
 29790                           
 29791                           ; BSR set to: 0
 29792  015A68  0E01               	movlw	1
 29793  015A6A  276A               	addwf	___xxtofl@arg& (0+255),f,b
 29794  015A6C  0E00               	movlw	0
 29795  015A6E  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 29796  015A70  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 29797  015A72  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 29798                           
 29799                           ; BSR set to: 0
 29800  015A74  90D8               	bcf	status,0,c
 29801  015A76  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 29802  015A78  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 29803  015A7A  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 29804  015A7C  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 29805  015A7E                     l3120:
 29806                           
 29807                           ; BSR set to: 0
 29808  015A7E  0E00               	movlw	0
 29809  015A80  156A               	andwf	___xxtofl@arg& (0+255),w,b
 29810  015A82  6F64               	movwf	??___xxtofl& (0+255),b
 29811  015A84  0E00               	movlw	0
 29812  015A86  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 29813  015A88  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 29814  015A8A  0E00               	movlw	0
 29815  015A8C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 29816  015A8E  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 29817  015A90  0EFF               	movlw	255
 29818  015A92  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 29819  015A94  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 29820  015A96  5164               	movf	??___xxtofl& (0+255),w,b
 29821  015A98  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 29822  015A9A  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 29823  015A9C  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 29824  015A9E  B4D8               	btfsc	status,2,c
 29825  015AA0  D007               	goto	l3123
 29826  015AA2  D7E1               	goto	l3121
 29827  015AA4                     
 29828                           ; BSR set to: 0
 29829                           
 29830                           ; BSR set to: 0
 29831  015AA4  0769               	decf	___xxtofl@exp& (0+255),f,b
 29832  015AA6  90D8               	bcf	status,0,c
 29833  015AA8  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 29834  015AAA  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 29835  015AAC  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 29836  015AAE  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 29837  015AB0                     l3123:
 29838                           
 29839                           ; BSR set to: 0
 29840                           
 29841                           ; BSR set to: 0
 29842  015AB0  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 29843  015AB2  D003               	goto	u11530
 29844                           
 29845                           ; BSR set to: 0
 29846  015AB4  0E02               	movlw	2
 29847  015AB6  6169               	cpfslt	___xxtofl@exp& (0+255),b
 29848  015AB8  D7F5               	goto	l3124
 29849  015ABA                     u11530:
 29850                           
 29851                           ; BSR set to: 0
 29852                           
 29853                           ; BSR set to: 0
 29854  015ABA  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 29855  015ABC  D008               	goto	l3128
 29856                           
 29857                           ; BSR set to: 0
 29858  015ABE  0EFF               	movlw	255
 29859  015AC0  176A               	andwf	___xxtofl@arg& (0+255),f,b
 29860  015AC2  0EFF               	movlw	255
 29861  015AC4  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 29862  015AC6  0E7F               	movlw	127
 29863  015AC8  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 29864  015ACA  0EFF               	movlw	255
 29865  015ACC  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 29866  015ACE                     l3128:
 29867                           
 29868                           ; BSR set to: 0
 29869  015ACE  90D8               	bcf	status,0,c
 29870  015AD0  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 29871  015AD2  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 29872  015AD6  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 29873  015AD8  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 29874  015ADA  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 29875  015ADC  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 29876  015AE0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 29877  015AE2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 29878  015AE4  6B64               	clrf	??___xxtofl& (0+255),b
 29879  015AE6  5164               	movf	??___xxtofl& (0+255),w,b
 29880  015AE8  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 29881  015AEA  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 29882  015AEC  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 29883  015AEE  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 29884  015AF0  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 29885  015AF2  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 29886  015AF4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 29887                           
 29888                           ; BSR set to: 0
 29889  015AF6  5168               	movf	___xxtofl@sign& (0+255),w,b
 29890  015AF8  A4D8               	btfss	status,2,c
 29891                           
 29892                           ; BSR set to: 0
 29893  015AFA  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 29894  015AFC  D001               	goto	l3129
 29895                           
 29896                           ; BSR set to: 0
 29897  015AFE  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 29898  015B00                     l3129:
 29899                           
 29900                           ; BSR set to: 0
 29901                           
 29902                           ; BSR set to: 0
 29903  015B00  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 29904  015B04  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 29905  015B08  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 29906  015B0C  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 29907  015B10  0012               	return	
 29908  015B12                     __end_of___xxtofl:
 29909                           	opt stack 0
 29910                           tosu	equ	0xFFF
 29911                           tosh	equ	0xFFE
 29912                           tosl	equ	0xFFD
 29913                           pclath	equ	0xFFA
 29914                           tblptru	equ	0xFF8
 29915                           tblptrh	equ	0xFF7
 29916                           tblptrl	equ	0xFF6
 29917                           tablat	equ	0xFF5
 29918                           prodh	equ	0xFF4
 29919                           prodl	equ	0xFF3
 29920                           intcon	equ	0xFF2
 29921                           indf0	equ	0xFEF
 29922                           postinc0	equ	0xFEE
 29923                           fsr0h	equ	0xFEA
 29924                           fsr0l	equ	0xFE9
 29925                           wreg	equ	0xFE8
 29926                           indf1	equ	0xFE7
 29927                           postdec1	equ	0xFE5
 29928                           fsr1h	equ	0xFE2
 29929                           fsr1l	equ	0xFE1
 29930                           indf2	equ	0xFDF
 29931                           postinc2	equ	0xFDE
 29932                           postdec2	equ	0xFDD
 29933                           plusw2	equ	0xFDB
 29934                           fsr2h	equ	0xFDA
 29935                           fsr2l	equ	0xFD9
 29936                           status	equ	0xFD8
 29937                           
 29938 ;; *************** function ___fltol *****************
 29939 ;; Defined at:
 29940 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fltol.c"
 29941 ;; Parameters:    Size  Location     Type
 29942 ;;  f1              4   63[BANK0 ] unsigned char 
 29943 ;; Auto vars:     Size  Location     Type
 29944 ;;  exp1            1   72[BANK0 ] unsigned char 
 29945 ;;  sign1           1   71[BANK0 ] unsigned char 
 29946 ;; Return value:  Size  Location     Type
 29947 ;;                  4   63[BANK0 ] long 
 29948 ;; Registers used:
 29949 ;;		wreg, status,2, status,0
 29950 ;; Tracked objects:
 29951 ;;		On entry : 0/0
 29952 ;;		On exit  : 0/0
 29953 ;;		Unchanged: 0/0
 29954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29956 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29957 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29958 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29959 ;;Total ram usage:       10 bytes
 29960 ;; Hardware stack levels used:    1
 29961 ;; Hardware stack levels required when called:    7
 29962 ;; This function calls:
 29963 ;;		Nothing
 29964 ;; This function is called by:
 29965 ;;		_ADCAverage
 29966 ;;		_Move_ADC_To
 29967 ;;		_pow
 29968 ;;		_exp
 29969 ;;		_floor
 29970 ;; This function uses a non-reentrant model
 29971 ;;
 29972                           
 29973                           	psect	text136
 29974  01699E                     __ptext136:
 29975                           	opt stack 0
 29976  01699E                     ___fltol:
 29977                           	opt stack 21
 29978                           
 29979                           ; BSR set to: 0
 29980                           ;incstack = 0
 29981  01699E  0100               	movlb	0	; () banked
 29982  0169A0  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 29983  0169A2  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 29984  0169A4  6FA8               	movwf	___fltol@exp1& (0+255),b
 29985  0169A6  51A8               	movf	___fltol@exp1& (0+255),w,b
 29986  0169A8  A4D8               	btfss	status,2,c
 29987  0169AA  D009               	goto	l2780
 29988                           
 29989                           ; BSR set to: 0
 29990  0169AC  0E00               	movlw	0
 29991  0169AE  6F9F               	movwf	?___fltol& (0+255),b
 29992  0169B0  0E00               	movlw	0
 29993  0169B2  6FA0               	movwf	(?___fltol+1)& (0+255),b
 29994  0169B4  0E00               	movlw	0
 29995  0169B6  6FA1               	movwf	(?___fltol+2)& (0+255),b
 29996  0169B8  0E00               	movlw	0
 29997  0169BA  6FA2               	movwf	(?___fltol+3)& (0+255),b
 29998                           
 29999                           ; BSR set to: 0
 30000  0169BC  0012               	return	
 30001  0169BE                     l2780:
 30002                           
 30003                           ; BSR set to: 0
 30004                           
 30005                           ; BSR set to: 0
 30006  0169BE  C09F  F0A3         	movff	___fltol@f1,??___fltol
 30007  0169C2  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 30008  0169C6  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 30009  0169CA  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 30010  0169CE  0E20               	movlw	32
 30011  0169D0  D005               	goto	u11410
 30012  0169D2                     u11415:
 30013  0169D2  90D8               	bcf	status,0,c
 30014  0169D4  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 30015  0169D6  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 30016  0169D8  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 30017  0169DA  33A3               	rrcf	??___fltol& (0+255),f,b
 30018  0169DC                     u11410:
 30019  0169DC  2EE8               	decfsz	wreg,f,c
 30020  0169DE  D7F9               	goto	u11415
 30021  0169E0  51A3               	movf	??___fltol& (0+255),w,b
 30022  0169E2  6FA7               	movwf	___fltol@sign1& (0+255),b
 30023                           
 30024                           ; BSR set to: 0
 30025  0169E4  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 30026                           
 30027                           ; BSR set to: 0
 30028  0169E6  0EFF               	movlw	255
 30029  0169E8  179F               	andwf	___fltol@f1& (0+255),f,b
 30030  0169EA  0EFF               	movlw	255
 30031  0169EC  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 30032  0169EE  0EFF               	movlw	255
 30033  0169F0  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 30034  0169F2  0E00               	movlw	0
 30035  0169F4  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 30036                           
 30037                           ; BSR set to: 0
 30038  0169F6  0E96               	movlw	150
 30039  0169F8  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 30040                           
 30041                           ; BSR set to: 0
 30042  0169FA  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 30043  0169FC  D016               	goto	l2782
 30044                           
 30045                           ; BSR set to: 0
 30046  0169FE  51A8               	movf	___fltol@exp1& (0+255),w,b
 30047  016A00  0A80               	xorlw	128
 30048  016A02  0F97               	addlw	151
 30049  016A04  B0D8               	btfsc	status,0,c
 30050  016A06  D009               	goto	l2783
 30051                           
 30052                           ; BSR set to: 0
 30053  016A08  0E00               	movlw	0
 30054  016A0A  6F9F               	movwf	?___fltol& (0+255),b
 30055  016A0C  0E00               	movlw	0
 30056  016A0E  6FA0               	movwf	(?___fltol+1)& (0+255),b
 30057  016A10  0E00               	movlw	0
 30058  016A12  6FA1               	movwf	(?___fltol+2)& (0+255),b
 30059  016A14  0E00               	movlw	0
 30060  016A16  6FA2               	movwf	(?___fltol+3)& (0+255),b
 30061                           
 30062                           ; BSR set to: 0
 30063  016A18  0012               	return	
 30064  016A1A                     l2783:
 30065                           
 30066                           ; BSR set to: 0
 30067                           
 30068                           ; BSR set to: 0
 30069                           
 30070                           ; BSR set to: 0
 30071  016A1A  90D8               	bcf	status,0,c
 30072  016A1C  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 30073  016A1E  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 30074  016A20  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 30075  016A22  339F               	rrcf	___fltol@f1& (0+255),f,b
 30076                           
 30077                           ; BSR set to: 0
 30078  016A24  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 30079  016A26  D7F9               	goto	l2783
 30080                           
 30081                           ; BSR set to: 0
 30082  016A28  D015               	goto	u11450
 30083  016A2A                     l2782:
 30084                           
 30085                           ; BSR set to: 0
 30086                           
 30087                           ; BSR set to: 0
 30088  016A2A  0E1F               	movlw	31
 30089  016A2C  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 30090  016A2E  D00F               	goto	l2788
 30091                           
 30092                           ; BSR set to: 0
 30093  016A30  0E00               	movlw	0
 30094  016A32  6F9F               	movwf	?___fltol& (0+255),b
 30095  016A34  0E00               	movlw	0
 30096  016A36  6FA0               	movwf	(?___fltol+1)& (0+255),b
 30097  016A38  0E00               	movlw	0
 30098  016A3A  6FA1               	movwf	(?___fltol+2)& (0+255),b
 30099  016A3C  0E00               	movlw	0
 30100  016A3E  6FA2               	movwf	(?___fltol+3)& (0+255),b
 30101                           
 30102                           ; BSR set to: 0
 30103  016A40  0012               	return	
 30104  016A42                     
 30105                           ; BSR set to: 0
 30106                           
 30107                           ; BSR set to: 0
 30108  016A42  90D8               	bcf	status,0,c
 30109  016A44  379F               	rlcf	___fltol@f1& (0+255),f,b
 30110  016A46  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 30111  016A48  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 30112  016A4A  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 30113  016A4C  07A8               	decf	___fltol@exp1& (0+255),f,b
 30114  016A4E                     l2788:
 30115                           
 30116                           ; BSR set to: 0
 30117                           
 30118                           ; BSR set to: 0
 30119  016A4E  51A8               	movf	___fltol@exp1& (0+255),w,b
 30120  016A50  A4D8               	btfss	status,2,c
 30121  016A52  D7F7               	goto	l2789
 30122  016A54                     u11450:
 30123                           
 30124                           ; BSR set to: 0
 30125                           
 30126                           ; BSR set to: 0
 30127                           
 30128                           ; BSR set to: 0
 30129  016A54  51A7               	movf	___fltol@sign1& (0+255),w,b
 30130  016A56  B4D8               	btfsc	status,2,c
 30131  016A58  D008               	goto	l2791
 30132                           
 30133                           ; BSR set to: 0
 30134  016A5A  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 30135  016A5C  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 30136  016A5E  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 30137  016A60  6D9F               	negf	___fltol@f1& (0+255),b
 30138  016A62  0E00               	movlw	0
 30139  016A64  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 30140  016A66  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 30141  016A68  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 30142  016A6A                     l2791:
 30143                           
 30144                           ; BSR set to: 0
 30145                           
 30146                           ; BSR set to: 0
 30147  016A6A  C09F  F09F         	movff	___fltol@f1,?___fltol
 30148  016A6E  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 30149  016A72  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 30150  016A76  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 30151  016A7A  0012               	return	
 30152  016A7C                     __end_of___fltol:
 30153                           	opt stack 0
 30154                           tosu	equ	0xFFF
 30155                           tosh	equ	0xFFE
 30156                           tosl	equ	0xFFD
 30157                           pclath	equ	0xFFA
 30158                           tblptru	equ	0xFF8
 30159                           tblptrh	equ	0xFF7
 30160                           tblptrl	equ	0xFF6
 30161                           tablat	equ	0xFF5
 30162                           prodh	equ	0xFF4
 30163                           prodl	equ	0xFF3
 30164                           intcon	equ	0xFF2
 30165                           indf0	equ	0xFEF
 30166                           postinc0	equ	0xFEE
 30167                           fsr0h	equ	0xFEA
 30168                           fsr0l	equ	0xFE9
 30169                           wreg	equ	0xFE8
 30170                           indf1	equ	0xFE7
 30171                           postdec1	equ	0xFE5
 30172                           fsr1h	equ	0xFE2
 30173                           fsr1l	equ	0xFE1
 30174                           indf2	equ	0xFDF
 30175                           postinc2	equ	0xFDE
 30176                           postdec2	equ	0xFDD
 30177                           plusw2	equ	0xFDB
 30178                           fsr2h	equ	0xFDA
 30179                           fsr2l	equ	0xFD9
 30180                           status	equ	0xFD8
 30181                           
 30182 ;; *************** function ___flge *****************
 30183 ;; Defined at:
 30184 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flge.c"
 30185 ;; Parameters:    Size  Location     Type
 30186 ;;  ff1             4    0[BANK0 ] long 
 30187 ;;  ff2             4    4[BANK0 ] long 
 30188 ;; Auto vars:     Size  Location     Type
 30189 ;;		None
 30190 ;; Return value:  Size  Location     Type
 30191 ;;		None               void
 30192 ;; Registers used:
 30193 ;;		wreg, status,2, status,0
 30194 ;; Tracked objects:
 30195 ;;		On entry : 0/0
 30196 ;;		On exit  : 0/0
 30197 ;;		Unchanged: 0/0
 30198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30199 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30201 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30202 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30203 ;;Total ram usage:       12 bytes
 30204 ;; Hardware stack levels used:    1
 30205 ;; Hardware stack levels required when called:    7
 30206 ;; This function calls:
 30207 ;;		Nothing
 30208 ;; This function is called by:
 30209 ;;		_pow
 30210 ;;		_exp
 30211 ;;		_floor
 30212 ;; This function uses a non-reentrant model
 30213 ;;
 30214                           
 30215                           	psect	text137
 30216  01629A                     __ptext137:
 30217                           	opt stack 0
 30218  01629A                     ___flge:
 30219                           	opt stack 18
 30220                           
 30221                           ; BSR set to: 0
 30222                           ;incstack = 0
 30223  01629A  0E00               	movlw	0
 30224  01629C  0100               	movlb	0	; () banked
 30225  01629E  1560               	andwf	___flge@ff1& (0+255),w,b
 30226  0162A0  6F68               	movwf	??___flge& (0+255),b
 30227  0162A2  0E00               	movlw	0
 30228  0162A4  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 30229  0162A6  6F69               	movwf	(??___flge+1)& (0+255),b
 30230  0162A8  0E80               	movlw	128
 30231  0162AA  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 30232  0162AC  6F6A               	movwf	(??___flge+2)& (0+255),b
 30233  0162AE  0E7F               	movlw	127
 30234  0162B0  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 30235  0162B2  6F6B               	movwf	(??___flge+3)& (0+255),b
 30236  0162B4  5168               	movf	??___flge& (0+255),w,b
 30237  0162B6  1169               	iorwf	(??___flge+1)& (0+255),w,b
 30238  0162B8  116A               	iorwf	(??___flge+2)& (0+255),w,b
 30239  0162BA  116B               	iorwf	(??___flge+3)& (0+255),w,b
 30240  0162BC  A4D8               	btfss	status,2,c
 30241  0162BE  D008               	goto	l2750
 30242                           
 30243                           ; BSR set to: 0
 30244  0162C0  0E00               	movlw	0
 30245  0162C2  6F60               	movwf	___flge@ff1& (0+255),b
 30246  0162C4  0E00               	movlw	0
 30247  0162C6  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 30248  0162C8  0E00               	movlw	0
 30249  0162CA  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 30250  0162CC  0E00               	movlw	0
 30251  0162CE  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 30252  0162D0                     l2750:
 30253                           
 30254                           ; BSR set to: 0
 30255                           
 30256                           ; BSR set to: 0
 30257  0162D0  0E00               	movlw	0
 30258  0162D2  1564               	andwf	___flge@ff2& (0+255),w,b
 30259  0162D4  6F68               	movwf	??___flge& (0+255),b
 30260  0162D6  0E00               	movlw	0
 30261  0162D8  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 30262  0162DA  6F69               	movwf	(??___flge+1)& (0+255),b
 30263  0162DC  0E80               	movlw	128
 30264  0162DE  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 30265  0162E0  6F6A               	movwf	(??___flge+2)& (0+255),b
 30266  0162E2  0E7F               	movlw	127
 30267  0162E4  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 30268  0162E6  6F6B               	movwf	(??___flge+3)& (0+255),b
 30269  0162E8  5168               	movf	??___flge& (0+255),w,b
 30270  0162EA  1169               	iorwf	(??___flge+1)& (0+255),w,b
 30271  0162EC  116A               	iorwf	(??___flge+2)& (0+255),w,b
 30272  0162EE  116B               	iorwf	(??___flge+3)& (0+255),w,b
 30273  0162F0  A4D8               	btfss	status,2,c
 30274  0162F2  D008               	goto	l2751
 30275                           
 30276                           ; BSR set to: 0
 30277  0162F4  0E00               	movlw	0
 30278  0162F6  6F64               	movwf	___flge@ff2& (0+255),b
 30279  0162F8  0E00               	movlw	0
 30280  0162FA  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 30281  0162FC  0E00               	movlw	0
 30282  0162FE  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 30283  016300  0E00               	movlw	0
 30284  016302  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 30285  016304                     l2751:
 30286                           
 30287                           ; BSR set to: 0
 30288                           
 30289                           ; BSR set to: 0
 30290  016304  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 30291  016306  D01D               	goto	l2752
 30292                           
 30293                           ; BSR set to: 0
 30294  016308  C060  F068         	movff	___flge@ff1,??___flge
 30295  01630C  C061  F069         	movff	___flge@ff1+1,??___flge+1
 30296  016310  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 30297  016314  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 30298  016318  1F68               	comf	??___flge& (0+255),f,b
 30299  01631A  1F69               	comf	(??___flge+1)& (0+255),f,b
 30300  01631C  1F6A               	comf	(??___flge+2)& (0+255),f,b
 30301  01631E  1F6B               	comf	(??___flge+3)& (0+255),f,b
 30302  016320  2B68               	incf	??___flge& (0+255),f,b
 30303  016322  0E00               	movlw	0
 30304  016324  2369               	addwfc	(??___flge+1)& (0+255),f,b
 30305  016326  236A               	addwfc	(??___flge+2)& (0+255),f,b
 30306  016328  236B               	addwfc	(??___flge+3)& (0+255),f,b
 30307  01632A  0E00               	movlw	0
 30308  01632C  2568               	addwf	??___flge& (0+255),w,b
 30309  01632E  6F60               	movwf	___flge@ff1& (0+255),b
 30310  016330  0E00               	movlw	0
 30311  016332  2169               	addwfc	(??___flge+1)& (0+255),w,b
 30312  016334  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 30313  016336  0E00               	movlw	0
 30314  016338  216A               	addwfc	(??___flge+2)& (0+255),w,b
 30315  01633A  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 30316  01633C  0E80               	movlw	128
 30317  01633E  216B               	addwfc	(??___flge+3)& (0+255),w,b
 30318  016340  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 30319  016342                     l2752:
 30320                           
 30321                           ; BSR set to: 0
 30322                           
 30323                           ; BSR set to: 0
 30324  016342  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 30325  016344  D01D               	goto	l2753
 30326                           
 30327                           ; BSR set to: 0
 30328  016346  C064  F068         	movff	___flge@ff2,??___flge
 30329  01634A  C065  F069         	movff	___flge@ff2+1,??___flge+1
 30330  01634E  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 30331  016352  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 30332  016356  1F68               	comf	??___flge& (0+255),f,b
 30333  016358  1F69               	comf	(??___flge+1)& (0+255),f,b
 30334  01635A  1F6A               	comf	(??___flge+2)& (0+255),f,b
 30335  01635C  1F6B               	comf	(??___flge+3)& (0+255),f,b
 30336  01635E  2B68               	incf	??___flge& (0+255),f,b
 30337  016360  0E00               	movlw	0
 30338  016362  2369               	addwfc	(??___flge+1)& (0+255),f,b
 30339  016364  236A               	addwfc	(??___flge+2)& (0+255),f,b
 30340  016366  236B               	addwfc	(??___flge+3)& (0+255),f,b
 30341  016368  0E00               	movlw	0
 30342  01636A  2568               	addwf	??___flge& (0+255),w,b
 30343  01636C  6F64               	movwf	___flge@ff2& (0+255),b
 30344  01636E  0E00               	movlw	0
 30345  016370  2169               	addwfc	(??___flge+1)& (0+255),w,b
 30346  016372  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 30347  016374  0E00               	movlw	0
 30348  016376  216A               	addwfc	(??___flge+2)& (0+255),w,b
 30349  016378  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 30350  01637A  0E80               	movlw	128
 30351  01637C  216B               	addwfc	(??___flge+3)& (0+255),w,b
 30352  01637E  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 30353  016380                     l2753:
 30354                           
 30355                           ; BSR set to: 0
 30356  016380  0E00               	movlw	0
 30357  016382  1B60               	xorwf	___flge@ff1& (0+255),f,b
 30358  016384  0E00               	movlw	0
 30359  016386  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 30360  016388  0E00               	movlw	0
 30361  01638A  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 30362  01638C  0E80               	movlw	128
 30363  01638E  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 30364  016390  0E00               	movlw	0
 30365  016392  1B64               	xorwf	___flge@ff2& (0+255),f,b
 30366  016394  0E00               	movlw	0
 30367  016396  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 30368  016398  0E00               	movlw	0
 30369  01639A  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 30370  01639C  0E80               	movlw	128
 30371  01639E  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 30372  0163A0  5164               	movf	___flge@ff2& (0+255),w,b
 30373  0163A2  5D60               	subwf	___flge@ff1& (0+255),w,b
 30374  0163A4  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 30375  0163A6  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 30376  0163A8  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 30377  0163AA  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 30378  0163AC  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 30379  0163AE  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 30380  0163B0  B0D8               	btfsc	status,0,c
 30381  0163B2  D002               	goto	l13415
 30382                           
 30383                           ; BSR set to: 0
 30384  0163B4  90D8               	bcf	status,0,c
 30385  0163B6  0012               	return	
 30386  0163B8                     l13415:
 30387                           
 30388                           ; BSR set to: 0
 30389                           
 30390                           ; BSR set to: 0
 30391  0163B8  80D8               	bsf	status,0,c
 30392                           
 30393                           ; BSR set to: 0
 30394  0163BA  0012               	return	
 30395  0163BC                     __end_of___flge:
 30396                           	opt stack 0
 30397                           tosu	equ	0xFFF
 30398                           tosh	equ	0xFFE
 30399                           tosl	equ	0xFFD
 30400                           pclath	equ	0xFFA
 30401                           tblptru	equ	0xFF8
 30402                           tblptrh	equ	0xFF7
 30403                           tblptrl	equ	0xFF6
 30404                           tablat	equ	0xFF5
 30405                           prodh	equ	0xFF4
 30406                           prodl	equ	0xFF3
 30407                           intcon	equ	0xFF2
 30408                           indf0	equ	0xFEF
 30409                           postinc0	equ	0xFEE
 30410                           fsr0h	equ	0xFEA
 30411                           fsr0l	equ	0xFE9
 30412                           wreg	equ	0xFE8
 30413                           indf1	equ	0xFE7
 30414                           postdec1	equ	0xFE5
 30415                           fsr1h	equ	0xFE2
 30416                           fsr1l	equ	0xFE1
 30417                           indf2	equ	0xFDF
 30418                           postinc2	equ	0xFDE
 30419                           postdec2	equ	0xFDD
 30420                           plusw2	equ	0xFDB
 30421                           fsr2h	equ	0xFDA
 30422                           fsr2l	equ	0xFD9
 30423                           status	equ	0xFD8
 30424                           
 30425 ;; *************** function _eval_poly *****************
 30426 ;; Defined at:
 30427 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\evalpoly.c"
 30428 ;; Parameters:    Size  Location     Type
 30429 ;;  x               4   63[BANK0 ] long 
 30430 ;;  d               2   67[BANK0 ] PTR const 
 30431 ;;		 -> log@coeff(36), exp@coeff(40), 
 30432 ;;  n               2   69[BANK0 ] int 
 30433 ;; Auto vars:     Size  Location     Type
 30434 ;;  res             4   75[BANK0 ] int 
 30435 ;; Return value:  Size  Location     Type
 30436 ;;                  4   63[BANK0 ] int 
 30437 ;; Registers used:
 30438 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30439 ;; Tracked objects:
 30440 ;;		On entry : 0/0
 30441 ;;		On exit  : 0/0
 30442 ;;		Unchanged: 0/0
 30443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30444 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30446 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30447 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30448 ;;Total ram usage:       16 bytes
 30449 ;; Hardware stack levels used:    1
 30450 ;; Hardware stack levels required when called:    8
 30451 ;; This function calls:
 30452 ;;		___fladd
 30453 ;;		___flmul
 30454 ;; This function is called by:
 30455 ;;		_exp
 30456 ;;		_log
 30457 ;; This function uses a non-reentrant model
 30458 ;;
 30459                           
 30460                           	psect	text138
 30461  0165DE                     __ptext138:
 30462                           	opt stack 0
 30463  0165DE                     _eval_poly:
 30464                           	opt stack 18
 30465                           
 30466                           ; BSR set to: 0
 30467                           ;incstack = 0
 30468  0165DE  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 30469  0165E2  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 30470  0165E6  0100               	movlb	0	; () banked
 30471  0165E8  90D8               	bcf	status,0,c
 30472  0165EA  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30473  0165EC  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30474  0165EE  90D8               	bcf	status,0,c
 30475  0165F0  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30476  0165F2  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30477  0165F4  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 30478  0165F8  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 30479  0165FC  51A7               	movf	??_eval_poly& (0+255),w,b
 30480  0165FE  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 30481  016600  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 30482  016602  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 30483  016604  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 30484  016608  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 30485  01660C                     	if	0	;tblptru may be non-zero
 30486  01660C                     	endif
 30487  01660C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 30488  01660C  0E00               	movlw	low (__mediumconst shr (0+16))
 30489  01660E  6EF8               	movwf	tblptru,c
 30490  016610                     	endif
 30491  016610  0009               	tblrd		*+
 30492  016612  CFF5 F0AB          	movff	tablat,eval_poly@res
 30493  016616  0009               	tblrd		*+
 30494  016618  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 30495  01661C  0009               	tblrd		*+
 30496  01661E  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 30497  016622  000A               	tblrd		*-
 30498  016624  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 30499  016628  D04C               	goto	l3194
 30500  01662A                     
 30501                           ; BSR set to: 0
 30502                           
 30503                           ; BSR set to: 0
 30504  01662A  C0AB  F072         	movff	eval_poly@res,___flmul@a
 30505  01662E  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 30506  016632  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 30507  016636  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 30508  01663A  C09F  F06E         	movff	eval_poly@x,___flmul@b
 30509  01663E  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 30510  016642  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 30511  016646  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 30512  01664A  ECDB  F09A         	call	___flmul	;wreg free
 30513  01664E  C06E  F08B         	movff	?___flmul,___fladd@b
 30514  016652  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 30515  016656  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 30516  01665A  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 30517  01665E  0100               	movlb	0	; () banked
 30518  016660  07A5               	decf	eval_poly@n& (0+255),f,b
 30519  016662  A0D8               	btfss	status,0,c
 30520  016664  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 30521  016666  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 30522  01666A  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 30523  01666E  90D8               	bcf	status,0,c
 30524  016670  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30525  016672  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30526  016674  90D8               	bcf	status,0,c
 30527  016676  37A7               	rlcf	??_eval_poly& (0+255),f,b
 30528  016678  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 30529  01667A  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 30530  01667E  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 30531  016682  51A7               	movf	??_eval_poly& (0+255),w,b
 30532  016684  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 30533  016686  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 30534  016688  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 30535  01668A  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 30536  01668E  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 30537  016692                     	if	0	;tblptru may be non-zero
 30538  016692                     	endif
 30539  016692                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 30540  016692  0E00               	movlw	low (__mediumconst shr (0+16))
 30541  016694  6EF8               	movwf	tblptru,c
 30542  016696                     	endif
 30543  016696  0009               	tblrd		*+
 30544  016698  CFF5 F08F          	movff	tablat,___fladd@a
 30545  01669C  0009               	tblrd		*+
 30546  01669E  CFF5 F090          	movff	tablat,___fladd@a+1
 30547  0166A2  0009               	tblrd		*+
 30548  0166A4  CFF5 F091          	movff	tablat,___fladd@a+2
 30549  0166A8  000A               	tblrd		*-
 30550  0166AA  CFF5 F092          	movff	tablat,___fladd@a+3
 30551  0166AE  EC84  F09C         	call	___fladd	;wreg free
 30552  0166B2  C08B  F0AB         	movff	?___fladd,eval_poly@res
 30553  0166B6  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 30554  0166BA  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 30555  0166BE  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 30556  0166C2                     l3194:
 30557  0166C2  0100               	movlb	0	; () banked
 30558  0166C4  51A5               	movf	eval_poly@n& (0+255),w,b
 30559  0166C6  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 30560  0166C8  A4D8               	btfss	status,2,c
 30561  0166CA  D7AF               	goto	l3195
 30562                           
 30563                           ; BSR set to: 0
 30564  0166CC  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 30565  0166D0  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 30566  0166D4  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 30567  0166D8  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 30568                           
 30569                           ; BSR set to: 0
 30570  0166DC  0012               	return		;funcret
 30571  0166DE                     __end_of_eval_poly:
 30572                           	opt stack 0
 30573                           tosu	equ	0xFFF
 30574                           tosh	equ	0xFFE
 30575                           tosl	equ	0xFFD
 30576                           pclath	equ	0xFFA
 30577                           tblptru	equ	0xFF8
 30578                           tblptrh	equ	0xFF7
 30579                           tblptrl	equ	0xFF6
 30580                           tablat	equ	0xFF5
 30581                           prodh	equ	0xFF4
 30582                           prodl	equ	0xFF3
 30583                           intcon	equ	0xFF2
 30584                           indf0	equ	0xFEF
 30585                           postinc0	equ	0xFEE
 30586                           fsr0h	equ	0xFEA
 30587                           fsr0l	equ	0xFE9
 30588                           wreg	equ	0xFE8
 30589                           indf1	equ	0xFE7
 30590                           postdec1	equ	0xFE5
 30591                           fsr1h	equ	0xFE2
 30592                           fsr1l	equ	0xFE1
 30593                           indf2	equ	0xFDF
 30594                           postinc2	equ	0xFDE
 30595                           postdec2	equ	0xFDD
 30596                           plusw2	equ	0xFDB
 30597                           fsr2h	equ	0xFDA
 30598                           fsr2l	equ	0xFD9
 30599                           status	equ	0xFD8
 30600                           
 30601 ;; *************** function ___flmul *****************
 30602 ;; Defined at:
 30603 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcmul.c"
 30604 ;; Parameters:    Size  Location     Type
 30605 ;;  b               4   14[BANK0 ] int 
 30606 ;;  a               4   18[BANK0 ] int 
 30607 ;; Auto vars:     Size  Location     Type
 30608 ;;  prod            4   33[BANK0 ] struct .
 30609 ;;  grs             4   28[BANK0 ] unsigned long 
 30610 ;;  temp            2   37[BANK0 ] struct .
 30611 ;;  bexp            1   32[BANK0 ] unsigned char 
 30612 ;;  aexp            1   27[BANK0 ] unsigned char 
 30613 ;;  sign            1   26[BANK0 ] unsigned char 
 30614 ;; Return value:  Size  Location     Type
 30615 ;;                  4   14[BANK0 ] unsigned char 
 30616 ;; Registers used:
 30617 ;;		wreg, status,2, status,0, prodl, prodh
 30618 ;; Tracked objects:
 30619 ;;		On entry : 0/0
 30620 ;;		On exit  : 0/0
 30621 ;;		Unchanged: 0/0
 30622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30623 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30624 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30625 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30626 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30627 ;;Total ram usage:       25 bytes
 30628 ;; Hardware stack levels used:    1
 30629 ;; Hardware stack levels required when called:    7
 30630 ;; This function calls:
 30631 ;;		Nothing
 30632 ;; This function is called by:
 30633 ;;		_ADCAverage
 30634 ;;		_Move_ADC_To
 30635 ;;		_pow
 30636 ;;		_exp
 30637 ;;		_log
 30638 ;;		_eval_poly
 30639 ;;		_ADC_Voltage
 30640 ;; This function uses a non-reentrant model
 30641 ;;
 30642                           
 30643                           	psect	text139
 30644  0135B6                     __ptext139:
 30645                           	opt stack 0
 30646  0135B6                     ___flmul:
 30647                           	opt stack 21
 30648                           
 30649                           ; BSR set to: 0
 30650                           ;incstack = 0
 30651  0135B6  0100               	movlb	0	; () banked
 30652  0135B8  5171               	movf	(___flmul@b+3)& (0+255),w,b
 30653  0135BA  0B80               	andlw	128
 30654  0135BC  6F7A               	movwf	___flmul@sign& (0+255),b
 30655  0135BE  5171               	movf	(___flmul@b+3)& (0+255),w,b
 30656  0135C0  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 30657  0135C2  6F80               	movwf	___flmul@bexp& (0+255),b
 30658                           
 30659                           ; BSR set to: 0
 30660  0135C4  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 30661                           
 30662                           ; BSR set to: 0
 30663  0135C6  8180               	bsf	___flmul@bexp& (0+255),0,b
 30664                           
 30665                           ; BSR set to: 0
 30666                           
 30667                           ; BSR set to: 0
 30668  0135C8  5180               	movf	___flmul@bexp& (0+255),w,b
 30669  0135CA  B4D8               	btfsc	status,2,c
 30670  0135CC  D00D               	goto	l3085
 30671                           
 30672                           ; BSR set to: 0
 30673  0135CE  2980               	incf	___flmul@bexp& (0+255),w,b
 30674  0135D0  A4D8               	btfss	status,2,c
 30675  0135D2  D008               	goto	l3086
 30676                           
 30677                           ; BSR set to: 0
 30678  0135D4  0E00               	movlw	0
 30679  0135D6  6F6E               	movwf	___flmul@b& (0+255),b
 30680  0135D8  0E00               	movlw	0
 30681  0135DA  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 30682  0135DC  0E00               	movlw	0
 30683  0135DE  6F70               	movwf	(___flmul@b+2)& (0+255),b
 30684  0135E0  0E00               	movlw	0
 30685  0135E2  6F71               	movwf	(___flmul@b+3)& (0+255),b
 30686  0135E4                     l3086:
 30687                           
 30688                           ; BSR set to: 0
 30689                           
 30690                           ; BSR set to: 0
 30691  0135E4  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 30692  0135E6  D008               	goto	l3087
 30693  0135E8                     l3085:
 30694                           
 30695                           ; BSR set to: 0
 30696                           
 30697                           ; BSR set to: 0
 30698  0135E8  0E00               	movlw	0
 30699  0135EA  6F6E               	movwf	___flmul@b& (0+255),b
 30700  0135EC  0E00               	movlw	0
 30701  0135EE  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 30702  0135F0  0E00               	movlw	0
 30703  0135F2  6F70               	movwf	(___flmul@b+2)& (0+255),b
 30704  0135F4  0E00               	movlw	0
 30705  0135F6  6F71               	movwf	(___flmul@b+3)& (0+255),b
 30706  0135F8                     l3087:
 30707                           
 30708                           ; BSR set to: 0
 30709                           
 30710                           ; BSR set to: 0
 30711  0135F8  5175               	movf	(___flmul@a+3)& (0+255),w,b
 30712  0135FA  0B80               	andlw	128
 30713  0135FC  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 30714                           
 30715                           ; BSR set to: 0
 30716  0135FE  5175               	movf	(___flmul@a+3)& (0+255),w,b
 30717  013600  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 30718  013602  6F7B               	movwf	___flmul@aexp& (0+255),b
 30719                           
 30720                           ; BSR set to: 0
 30721  013604  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 30722                           
 30723                           ; BSR set to: 0
 30724  013606  817B               	bsf	___flmul@aexp& (0+255),0,b
 30725                           
 30726                           ; BSR set to: 0
 30727                           
 30728                           ; BSR set to: 0
 30729  013608  517B               	movf	___flmul@aexp& (0+255),w,b
 30730  01360A  B4D8               	btfsc	status,2,c
 30731  01360C  D00D               	goto	l3089
 30732                           
 30733                           ; BSR set to: 0
 30734  01360E  297B               	incf	___flmul@aexp& (0+255),w,b
 30735  013610  A4D8               	btfss	status,2,c
 30736  013612  D008               	goto	l3090
 30737                           
 30738                           ; BSR set to: 0
 30739  013614  0E00               	movlw	0
 30740  013616  6F72               	movwf	___flmul@a& (0+255),b
 30741  013618  0E00               	movlw	0
 30742  01361A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 30743  01361C  0E00               	movlw	0
 30744  01361E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 30745  013620  0E00               	movlw	0
 30746  013622  6F75               	movwf	(___flmul@a+3)& (0+255),b
 30747  013624                     l3090:
 30748                           
 30749                           ; BSR set to: 0
 30750                           
 30751                           ; BSR set to: 0
 30752  013624  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 30753  013626  D008               	goto	l3091
 30754  013628                     l3089:
 30755                           
 30756                           ; BSR set to: 0
 30757                           
 30758                           ; BSR set to: 0
 30759  013628  0E00               	movlw	0
 30760  01362A  6F72               	movwf	___flmul@a& (0+255),b
 30761  01362C  0E00               	movlw	0
 30762  01362E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 30763  013630  0E00               	movlw	0
 30764  013632  6F74               	movwf	(___flmul@a+2)& (0+255),b
 30765  013634  0E00               	movlw	0
 30766  013636  6F75               	movwf	(___flmul@a+3)& (0+255),b
 30767  013638                     l3091:
 30768                           
 30769                           ; BSR set to: 0
 30770  013638  517B               	movf	___flmul@aexp& (0+255),w,b
 30771  01363A  B4D8               	btfsc	status,2,c
 30772  01363C  D003               	goto	u11230
 30773                           
 30774                           ; BSR set to: 0
 30775  01363E  5180               	movf	___flmul@bexp& (0+255),w,b
 30776  013640  A4D8               	btfss	status,2,c
 30777  013642  D009               	goto	l3092
 30778  013644                     u11230:
 30779                           
 30780                           ; BSR set to: 0
 30781                           
 30782                           ; BSR set to: 0
 30783  013644  0E00               	movlw	0
 30784  013646  6F6E               	movwf	?___flmul& (0+255),b
 30785  013648  0E00               	movlw	0
 30786  01364A  6F6F               	movwf	(?___flmul+1)& (0+255),b
 30787  01364C  0E00               	movlw	0
 30788  01364E  6F70               	movwf	(?___flmul+2)& (0+255),b
 30789  013650  0E00               	movlw	0
 30790  013652  6F71               	movwf	(?___flmul+3)& (0+255),b
 30791                           
 30792                           ; BSR set to: 0
 30793  013654  0012               	return	
 30794  013656                     l3092:
 30795                           
 30796                           ; BSR set to: 0
 30797                           
 30798                           ; BSR set to: 0
 30799  013656  5174               	movf	(___flmul@a+2)& (0+255),w,b
 30800  013658  036E               	mulwf	___flmul@b& (0+255),b
 30801  01365A  CFF3 F085          	movff	prodl,___flmul@temp
 30802  01365E  CFF4 F086          	movff	prodh,___flmul@temp+1
 30803                           
 30804                           ; BSR set to: 0
 30805  013662  5185               	movf	___flmul@temp& (0+255),w,b
 30806  013664  6F7C               	movwf	___flmul@grs& (0+255),b
 30807  013666  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 30808  013668  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 30809  01366A  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 30810                           
 30811                           ; BSR set to: 0
 30812  01366C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30813  01366E  6F81               	movwf	___flmul@prod& (0+255),b
 30814  013670  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 30815  013672  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 30816  013674  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 30817  013676  5173               	movf	(___flmul@a+1)& (0+255),w,b
 30818  013678  036F               	mulwf	(___flmul@b+1)& (0+255),b
 30819  01367A  CFF3 F085          	movff	prodl,___flmul@temp
 30820  01367E  CFF4 F086          	movff	prodh,___flmul@temp+1
 30821                           
 30822                           ; BSR set to: 0
 30823  013682  5185               	movf	___flmul@temp& (0+255),w,b
 30824  013684  277C               	addwf	___flmul@grs& (0+255),f,b
 30825  013686  0E00               	movlw	0
 30826  013688  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30827  01368A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30828  01368C  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30829                           
 30830                           ; BSR set to: 0
 30831  01368E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30832  013690  2781               	addwf	___flmul@prod& (0+255),f,b
 30833  013692  0E00               	movlw	0
 30834  013694  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30835  013696  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30836  013698  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30837  01369A  5172               	movf	___flmul@a& (0+255),w,b
 30838  01369C  0370               	mulwf	(___flmul@b+2)& (0+255),b
 30839  01369E  CFF3 F085          	movff	prodl,___flmul@temp
 30840  0136A2  CFF4 F086          	movff	prodh,___flmul@temp+1
 30841                           
 30842                           ; BSR set to: 0
 30843  0136A6  5185               	movf	___flmul@temp& (0+255),w,b
 30844  0136A8  277C               	addwf	___flmul@grs& (0+255),f,b
 30845  0136AA  0E00               	movlw	0
 30846  0136AC  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30847  0136AE  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30848  0136B0  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30849                           
 30850                           ; BSR set to: 0
 30851  0136B2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30852  0136B4  2781               	addwf	___flmul@prod& (0+255),f,b
 30853  0136B6  0E00               	movlw	0
 30854  0136B8  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30855  0136BA  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30856  0136BC  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30857                           
 30858                           ; BSR set to: 0
 30859  0136BE  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 30860  0136C2  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 30861  0136C6  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 30862  0136CA  6B7C               	clrf	___flmul@grs& (0+255),b
 30863                           
 30864                           ; BSR set to: 0
 30865  0136CC  5172               	movf	___flmul@a& (0+255),w,b
 30866  0136CE  036F               	mulwf	(___flmul@b+1)& (0+255),b
 30867  0136D0  CFF3 F085          	movff	prodl,___flmul@temp
 30868  0136D4  CFF4 F086          	movff	prodh,___flmul@temp+1
 30869                           
 30870                           ; BSR set to: 0
 30871  0136D8  5185               	movf	___flmul@temp& (0+255),w,b
 30872  0136DA  277C               	addwf	___flmul@grs& (0+255),f,b
 30873  0136DC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30874  0136DE  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30875  0136E0  0E00               	movlw	0
 30876  0136E2  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30877  0136E4  0E00               	movlw	0
 30878  0136E6  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30879                           
 30880                           ; BSR set to: 0
 30881  0136E8  5173               	movf	(___flmul@a+1)& (0+255),w,b
 30882  0136EA  036E               	mulwf	___flmul@b& (0+255),b
 30883  0136EC  CFF3 F085          	movff	prodl,___flmul@temp
 30884  0136F0  CFF4 F086          	movff	prodh,___flmul@temp+1
 30885                           
 30886                           ; BSR set to: 0
 30887  0136F4  5185               	movf	___flmul@temp& (0+255),w,b
 30888  0136F6  277C               	addwf	___flmul@grs& (0+255),f,b
 30889  0136F8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30890  0136FA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30891  0136FC  0E00               	movlw	0
 30892  0136FE  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30893  013700  0E00               	movlw	0
 30894  013702  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30895                           
 30896                           ; BSR set to: 0
 30897  013704  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 30898  013708  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 30899  01370C  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 30900  013710  6B7C               	clrf	___flmul@grs& (0+255),b
 30901  013712  5172               	movf	___flmul@a& (0+255),w,b
 30902  013714  036E               	mulwf	___flmul@b& (0+255),b
 30903  013716  CFF3 F085          	movff	prodl,___flmul@temp
 30904  01371A  CFF4 F086          	movff	prodh,___flmul@temp+1
 30905                           
 30906                           ; BSR set to: 0
 30907  01371E  5185               	movf	___flmul@temp& (0+255),w,b
 30908  013720  277C               	addwf	___flmul@grs& (0+255),f,b
 30909  013722  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30910  013724  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 30911  013726  0E00               	movlw	0
 30912  013728  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 30913  01372A  0E00               	movlw	0
 30914  01372C  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 30915                           
 30916                           ; BSR set to: 0
 30917  01372E  5174               	movf	(___flmul@a+2)& (0+255),w,b
 30918  013730  036F               	mulwf	(___flmul@b+1)& (0+255),b
 30919  013732  CFF3 F085          	movff	prodl,___flmul@temp
 30920  013736  CFF4 F086          	movff	prodh,___flmul@temp+1
 30921  01373A  5185               	movf	___flmul@temp& (0+255),w,b
 30922  01373C  2781               	addwf	___flmul@prod& (0+255),f,b
 30923  01373E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30924  013740  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30925  013742  0E00               	movlw	0
 30926  013744  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30927  013746  0E00               	movlw	0
 30928  013748  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30929                           
 30930                           ; BSR set to: 0
 30931  01374A  5173               	movf	(___flmul@a+1)& (0+255),w,b
 30932  01374C  0370               	mulwf	(___flmul@b+2)& (0+255),b
 30933  01374E  CFF3 F085          	movff	prodl,___flmul@temp
 30934  013752  CFF4 F086          	movff	prodh,___flmul@temp+1
 30935                           
 30936                           ; BSR set to: 0
 30937  013756  5185               	movf	___flmul@temp& (0+255),w,b
 30938  013758  2781               	addwf	___flmul@prod& (0+255),f,b
 30939  01375A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30940  01375C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30941  01375E  0E00               	movlw	0
 30942  013760  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30943  013762  0E00               	movlw	0
 30944  013764  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30945  013766  5174               	movf	(___flmul@a+2)& (0+255),w,b
 30946  013768  0370               	mulwf	(___flmul@b+2)& (0+255),b
 30947  01376A  CFF3 F085          	movff	prodl,___flmul@temp
 30948  01376E  CFF4 F086          	movff	prodh,___flmul@temp+1
 30949                           
 30950                           ; BSR set to: 0
 30951  013772  5185               	movf	___flmul@temp& (0+255),w,b
 30952  013774  6F76               	movwf	??___flmul& (0+255),b
 30953  013776  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 30954  013778  6F77               	movwf	(??___flmul+1)& (0+255),b
 30955  01377A  6B78               	clrf	(??___flmul+2)& (0+255),b
 30956  01377C  6B79               	clrf	(??___flmul+3)& (0+255),b
 30957  01377E  C078  F079         	movff	??___flmul+2,??___flmul+3
 30958  013782  C077  F078         	movff	??___flmul+1,??___flmul+2
 30959  013786  C076  F077         	movff	??___flmul,??___flmul+1
 30960  01378A  6B76               	clrf	??___flmul& (0+255),b
 30961  01378C  5176               	movf	??___flmul& (0+255),w,b
 30962  01378E  2781               	addwf	___flmul@prod& (0+255),f,b
 30963  013790  5177               	movf	(??___flmul+1)& (0+255),w,b
 30964  013792  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30965  013794  5178               	movf	(??___flmul+2)& (0+255),w,b
 30966  013796  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30967  013798  5179               	movf	(??___flmul+3)& (0+255),w,b
 30968  01379A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30969                           
 30970                           ; BSR set to: 0
 30971  01379C  C07C  F076         	movff	___flmul@grs,??___flmul
 30972  0137A0  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 30973  0137A4  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 30974  0137A8  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 30975  0137AC  0E19               	movlw	25
 30976  0137AE  D005               	goto	u11240
 30977  0137B0                     u11245:
 30978  0137B0  90D8               	bcf	status,0,c
 30979  0137B2  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 30980  0137B4  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 30981  0137B6  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 30982  0137B8  3376               	rrcf	??___flmul& (0+255),f,b
 30983  0137BA                     u11240:
 30984  0137BA  2EE8               	decfsz	wreg,f,c
 30985  0137BC  D7F9               	goto	u11245
 30986  0137BE  5176               	movf	??___flmul& (0+255),w,b
 30987  0137C0  2781               	addwf	___flmul@prod& (0+255),f,b
 30988  0137C2  5177               	movf	(??___flmul+1)& (0+255),w,b
 30989  0137C4  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 30990  0137C6  5178               	movf	(??___flmul+2)& (0+255),w,b
 30991  0137C8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 30992  0137CA  5179               	movf	(??___flmul+3)& (0+255),w,b
 30993  0137CC  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 30994                           
 30995                           ; BSR set to: 0
 30996  0137CE  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 30997  0137D2  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 30998  0137D6  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 30999  0137DA  6B7C               	clrf	___flmul@grs& (0+255),b
 31000                           
 31001                           ; BSR set to: 0
 31002  0137DC  517B               	movf	___flmul@aexp& (0+255),w,b
 31003  0137DE  C080  F076         	movff	___flmul@bexp,??___flmul
 31004  0137E2  6B77               	clrf	(??___flmul+1)& (0+255),b
 31005  0137E4  2776               	addwf	??___flmul& (0+255),f,b
 31006  0137E6  0E00               	movlw	0
 31007  0137E8  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 31008  0137EA  0E82               	movlw	130
 31009  0137EC  2576               	addwf	??___flmul& (0+255),w,b
 31010  0137EE  6F85               	movwf	___flmul@temp& (0+255),b
 31011  0137F0  0EFF               	movlw	255
 31012  0137F2  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 31013  0137F4  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 31014  0137F6  D00F               	goto	l3096
 31015  0137F8                     
 31016                           ; BSR set to: 0
 31017                           
 31018                           ; BSR set to: 0
 31019  0137F8  90D8               	bcf	status,0,c
 31020  0137FA  3781               	rlcf	___flmul@prod& (0+255),f,b
 31021  0137FC  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 31022  0137FE  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 31023  013800  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 31024                           
 31025                           ; BSR set to: 0
 31026  013802  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 31027                           
 31028                           ; BSR set to: 0
 31029  013804  8181               	bsf	___flmul@prod& (0+255),0,b
 31030                           
 31031                           ; BSR set to: 0
 31032  013806  90D8               	bcf	status,0,c
 31033  013808  377C               	rlcf	___flmul@grs& (0+255),f,b
 31034  01380A  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 31035  01380C  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 31036  01380E  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 31037  013810  0785               	decf	___flmul@temp& (0+255),f,b
 31038  013812  A0D8               	btfss	status,0,c
 31039  013814  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 31040  013816                     l3096:
 31041                           
 31042                           ; BSR set to: 0
 31043                           
 31044                           ; BSR set to: 0
 31045  013816  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 31046  013818  D7EF               	goto	l3097
 31047                           
 31048                           ; BSR set to: 0
 31049                           
 31050                           ; BSR set to: 0
 31051  01381A  0E00               	movlw	0
 31052  01381C  6F7B               	movwf	___flmul@aexp& (0+255),b
 31053                           
 31054                           ; BSR set to: 0
 31055  01381E  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 31056  013820  D016               	goto	l3103
 31057                           
 31058                           ; BSR set to: 0
 31059  013822  0EFF               	movlw	255
 31060  013824  157C               	andwf	___flmul@grs& (0+255),w,b
 31061  013826  6F76               	movwf	??___flmul& (0+255),b
 31062  013828  0EFF               	movlw	255
 31063  01382A  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 31064  01382C  6F77               	movwf	(??___flmul+1)& (0+255),b
 31065  01382E  0EFF               	movlw	255
 31066  013830  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 31067  013832  6F78               	movwf	(??___flmul+2)& (0+255),b
 31068  013834  0E7F               	movlw	127
 31069  013836  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 31070  013838  6F79               	movwf	(??___flmul+3)& (0+255),b
 31071  01383A  5176               	movf	??___flmul& (0+255),w,b
 31072  01383C  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 31073  01383E  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 31074  013840  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 31075  013842  A4D8               	btfss	status,2,c
 31076  013844  D002               	goto	u11290
 31077                           
 31078                           ; BSR set to: 0
 31079                           
 31080                           ; BSR set to: 0
 31081  013846  A181               	btfss	___flmul@prod& (0+255),0,b
 31082  013848  D002               	goto	l3103
 31083  01384A                     u11290:
 31084                           
 31085                           ; BSR set to: 0
 31086  01384A  0E01               	movlw	1
 31087  01384C  6F7B               	movwf	___flmul@aexp& (0+255),b
 31088  01384E                     l3103:
 31089                           
 31090                           ; BSR set to: 0
 31091                           
 31092                           ; BSR set to: 0
 31093                           
 31094                           ; BSR set to: 0
 31095  01384E  517B               	movf	___flmul@aexp& (0+255),w,b
 31096  013850  B4D8               	btfsc	status,2,c
 31097  013852  D01F               	goto	l3105
 31098                           
 31099                           ; BSR set to: 0
 31100  013854  0E01               	movlw	1
 31101  013856  2781               	addwf	___flmul@prod& (0+255),f,b
 31102  013858  0E00               	movlw	0
 31103  01385A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 31104  01385C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 31105  01385E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 31106                           
 31107                           ; BSR set to: 0
 31108  013860  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 31109  013862  D017               	goto	l3105
 31110                           
 31111                           ; BSR set to: 0
 31112  013864  C081  F076         	movff	___flmul@prod,??___flmul
 31113  013868  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 31114  01386C  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 31115  013870  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 31116  013874  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 31117  013876  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 31118  013878  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 31119  01387A  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 31120  01387C  3376               	rrcf	??___flmul& (0+255),f,b
 31121  01387E  C076  F081         	movff	??___flmul,___flmul@prod
 31122  013882  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 31123  013886  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 31124  01388A  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 31125                           
 31126                           ; BSR set to: 0
 31127  01388E  4B85               	infsnz	___flmul@temp& (0+255),f,b
 31128  013890  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 31129  013892                     l3105:
 31130                           
 31131                           ; BSR set to: 0
 31132                           
 31133                           ; BSR set to: 0
 31134                           
 31135                           ; BSR set to: 0
 31136  013892  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 31137  013894  D00D               	goto	l3106
 31138  013896  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31139  013898  E103               	bnz	u11320
 31140  01389A  2985               	incf	___flmul@temp& (0+255),w,b
 31141  01389C  A0D8               	btfss	status,0,c
 31142  01389E  D008               	goto	l3106
 31143  0138A0                     u11320:
 31144                           
 31145                           ; BSR set to: 0
 31146  0138A0  0E00               	movlw	0
 31147  0138A2  6F81               	movwf	___flmul@prod& (0+255),b
 31148  0138A4  0E00               	movlw	0
 31149  0138A6  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 31150  0138A8  0E80               	movlw	128
 31151  0138AA  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 31152  0138AC  0E7F               	movlw	127
 31153  0138AE  D020               	goto	L19
 31154  0138B0                     l3106:
 31155                           
 31156                           ; BSR set to: 0
 31157                           
 31158                           ; BSR set to: 0
 31159  0138B0  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 31160  0138B2  D005               	goto	u11330
 31161  0138B4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 31162  0138B6  E10E               	bnz	l3108
 31163  0138B8  0585               	decf	___flmul@temp& (0+255),w,b
 31164  0138BA  B0D8               	btfsc	status,0,c
 31165  0138BC  D00B               	goto	l3108
 31166  0138BE                     u11330:
 31167                           
 31168                           ; BSR set to: 0
 31169  0138BE  0E00               	movlw	0
 31170  0138C0  6F81               	movwf	___flmul@prod& (0+255),b
 31171  0138C2  0E00               	movlw	0
 31172  0138C4  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 31173  0138C6  0E00               	movlw	0
 31174  0138C8  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 31175  0138CA  0E00               	movlw	0
 31176  0138CC  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 31177  0138CE  0E00               	movlw	0
 31178  0138D0  6F7A               	movwf	___flmul@sign& (0+255),b
 31179  0138D2  D00F               	goto	l3109
 31180  0138D4                     l3108:
 31181                           
 31182                           ; BSR set to: 0
 31183  0138D4  C085  F080         	movff	___flmul@temp,___flmul@bexp
 31184                           
 31185                           ; BSR set to: 0
 31186  0138D8  0EFF               	movlw	255
 31187  0138DA  1781               	andwf	___flmul@prod& (0+255),f,b
 31188  0138DC  0EFF               	movlw	255
 31189  0138DE  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 31190  0138E0  0E7F               	movlw	127
 31191  0138E2  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 31192  0138E4  0E00               	movlw	0
 31193  0138E6  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 31194                           
 31195                           ; BSR set to: 0
 31196  0138E8  B180               	btfsc	___flmul@bexp& (0+255),0,b
 31197                           
 31198                           ; BSR set to: 0
 31199  0138EA  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 31200                           
 31201                           ; BSR set to: 0
 31202                           
 31203                           ; BSR set to: 0
 31204  0138EC  90D8               	bcf	status,0,c
 31205  0138EE  3180               	rrcf	___flmul@bexp& (0+255),w,b
 31206  0138F0                     L19:
 31207  0138F0  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 31208  0138F2                     l3109:
 31209                           
 31210                           ; BSR set to: 0
 31211                           
 31212                           ; BSR set to: 0
 31213                           
 31214                           ; BSR set to: 0
 31215  0138F2  517A               	movf	___flmul@sign& (0+255),w,b
 31216  0138F4  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 31217                           
 31218                           ; BSR set to: 0
 31219  0138F6  C081  F06E         	movff	___flmul@prod,?___flmul
 31220  0138FA  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 31221  0138FE  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 31222  013902  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 31223  013906  0012               	return	
 31224  013908                     __end_of___flmul:
 31225                           	opt stack 0
 31226                           tosu	equ	0xFFF
 31227                           tosh	equ	0xFFE
 31228                           tosl	equ	0xFFD
 31229                           pclath	equ	0xFFA
 31230                           tblptru	equ	0xFF8
 31231                           tblptrh	equ	0xFF7
 31232                           tblptrl	equ	0xFF6
 31233                           tablat	equ	0xFF5
 31234                           prodh	equ	0xFF4
 31235                           prodl	equ	0xFF3
 31236                           intcon	equ	0xFF2
 31237                           indf0	equ	0xFEF
 31238                           postinc0	equ	0xFEE
 31239                           fsr0h	equ	0xFEA
 31240                           fsr0l	equ	0xFE9
 31241                           wreg	equ	0xFE8
 31242                           indf1	equ	0xFE7
 31243                           postdec1	equ	0xFE5
 31244                           fsr1h	equ	0xFE2
 31245                           fsr1l	equ	0xFE1
 31246                           indf2	equ	0xFDF
 31247                           postinc2	equ	0xFDE
 31248                           postdec2	equ	0xFDD
 31249                           plusw2	equ	0xFDB
 31250                           fsr2h	equ	0xFDA
 31251                           fsr2l	equ	0xFD9
 31252                           status	equ	0xFD8
 31253                           
 31254 ;; *************** function ___flsub *****************
 31255 ;; Defined at:
 31256 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 31257 ;; Parameters:    Size  Location     Type
 31258 ;;  b               4   63[BANK0 ] unsigned char 
 31259 ;;  a               4   67[BANK0 ] unsigned char 
 31260 ;; Auto vars:     Size  Location     Type
 31261 ;;		None
 31262 ;; Return value:  Size  Location     Type
 31263 ;;                  4   63[BANK0 ] unsigned char 
 31264 ;; Registers used:
 31265 ;;		wreg, status,2, status,0, cstack
 31266 ;; Tracked objects:
 31267 ;;		On entry : 0/0
 31268 ;;		On exit  : 0/0
 31269 ;;		Unchanged: 0/0
 31270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31271 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31274 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31275 ;;Total ram usage:        8 bytes
 31276 ;; Hardware stack levels used:    1
 31277 ;; Hardware stack levels required when called:    8
 31278 ;; This function calls:
 31279 ;;		___fladd
 31280 ;; This function is called by:
 31281 ;;		_exp
 31282 ;; This function uses a non-reentrant model
 31283 ;;
 31284                           
 31285                           	psect	text140
 31286  018306                     __ptext140:
 31287                           	opt stack 0
 31288  018306                     ___flsub:
 31289                           	opt stack 18
 31290                           
 31291                           ; BSR set to: 0
 31292                           ;incstack = 0
 31293  018306  0E00               	movlw	0
 31294  018308  0100               	movlb	0	; () banked
 31295  01830A  1BA3               	xorwf	___flsub@a& (0+255),f,b
 31296  01830C  0E00               	movlw	0
 31297  01830E  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 31298  018310  0E00               	movlw	0
 31299  018312  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 31300  018314  0E80               	movlw	128
 31301  018316  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 31302                           
 31303                           ; BSR set to: 0
 31304  018318  C09F  F08B         	movff	___flsub@b,___fladd@b
 31305  01831C  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 31306  018320  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 31307  018324  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 31308  018328  C0A3  F08F         	movff	___flsub@a,___fladd@a
 31309  01832C  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 31310  018330  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 31311  018334  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 31312  018338  EC84  F09C         	call	___fladd	;wreg free
 31313  01833C  C08B  F09F         	movff	?___fladd,?___flsub
 31314  018340  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 31315  018344  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 31316  018348  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 31317  01834C  0012               	return	
 31318  01834E                     __end_of___flsub:
 31319                           	opt stack 0
 31320                           tosu	equ	0xFFF
 31321                           tosh	equ	0xFFE
 31322                           tosl	equ	0xFFD
 31323                           pclath	equ	0xFFA
 31324                           tblptru	equ	0xFF8
 31325                           tblptrh	equ	0xFF7
 31326                           tblptrl	equ	0xFF6
 31327                           tablat	equ	0xFF5
 31328                           prodh	equ	0xFF4
 31329                           prodl	equ	0xFF3
 31330                           intcon	equ	0xFF2
 31331                           indf0	equ	0xFEF
 31332                           postinc0	equ	0xFEE
 31333                           fsr0h	equ	0xFEA
 31334                           fsr0l	equ	0xFE9
 31335                           wreg	equ	0xFE8
 31336                           indf1	equ	0xFE7
 31337                           postdec1	equ	0xFE5
 31338                           fsr1h	equ	0xFE2
 31339                           fsr1l	equ	0xFE1
 31340                           indf2	equ	0xFDF
 31341                           postinc2	equ	0xFDE
 31342                           postdec2	equ	0xFDD
 31343                           plusw2	equ	0xFDB
 31344                           fsr2h	equ	0xFDA
 31345                           fsr2l	equ	0xFD9
 31346                           status	equ	0xFD8
 31347                           
 31348 ;; *************** function ___fladd *****************
 31349 ;; Defined at:
 31350 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcadd.c"
 31351 ;; Parameters:    Size  Location     Type
 31352 ;;  b               4   43[BANK0 ] unsigned char 
 31353 ;;  a               4   47[BANK0 ] unsigned char 
 31354 ;; Auto vars:     Size  Location     Type
 31355 ;;  grs             1   62[BANK0 ] unsigned char 
 31356 ;;  bexp            1   61[BANK0 ] unsigned char 
 31357 ;;  aexp            1   60[BANK0 ] unsigned char 
 31358 ;;  signs           1   59[BANK0 ] unsigned char 
 31359 ;; Return value:  Size  Location     Type
 31360 ;;                  4   43[BANK0 ] unsigned char 
 31361 ;; Registers used:
 31362 ;;		wreg, status,2, status,0
 31363 ;; Tracked objects:
 31364 ;;		On entry : 0/0
 31365 ;;		On exit  : 0/0
 31366 ;;		Unchanged: 0/0
 31367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31368 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31369 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31370 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31371 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31372 ;;Total ram usage:       20 bytes
 31373 ;; Hardware stack levels used:    1
 31374 ;; Hardware stack levels required when called:    7
 31375 ;; This function calls:
 31376 ;;		Nothing
 31377 ;; This function is called by:
 31378 ;;		_ADCAverage
 31379 ;;		_Move_ADC_To
 31380 ;;		___flsub
 31381 ;;		_floor
 31382 ;;		_log
 31383 ;;		_eval_poly
 31384 ;; This function uses a non-reentrant model
 31385 ;;
 31386                           
 31387                           	psect	text141
 31388  013908                     __ptext141:
 31389                           	opt stack 0
 31390  013908                     ___fladd:
 31391                           	opt stack 21
 31392                           
 31393                           ;incstack = 0
 31394  013908  0100               	movlb	0	; () banked
 31395  01390A  518E               	movf	(___fladd@b+3)& (0+255),w,b
 31396  01390C  0B80               	andlw	128
 31397  01390E  6F9B               	movwf	___fladd@signs& (0+255),b
 31398  013910  518E               	movf	(___fladd@b+3)& (0+255),w,b
 31399  013912  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 31400  013914  6F9D               	movwf	___fladd@bexp& (0+255),b
 31401                           
 31402                           ; BSR set to: 0
 31403  013916  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 31404                           
 31405                           ; BSR set to: 0
 31406  013918  819D               	bsf	___fladd@bexp& (0+255),0,b
 31407                           
 31408                           ; BSR set to: 0
 31409                           
 31410                           ; BSR set to: 0
 31411  01391A  519D               	movf	___fladd@bexp& (0+255),w,b
 31412  01391C  B4D8               	btfsc	status,2,c
 31413  01391E  D00D               	goto	l2994
 31414                           
 31415                           ; BSR set to: 0
 31416  013920  299D               	incf	___fladd@bexp& (0+255),w,b
 31417  013922  A4D8               	btfss	status,2,c
 31418  013924  D008               	goto	l2995
 31419                           
 31420                           ; BSR set to: 0
 31421  013926  0E00               	movlw	0
 31422  013928  6F8B               	movwf	___fladd@b& (0+255),b
 31423  01392A  0E00               	movlw	0
 31424  01392C  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31425  01392E  0E00               	movlw	0
 31426  013930  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31427  013932  0E00               	movlw	0
 31428  013934  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31429  013936                     l2995:
 31430                           
 31431                           ; BSR set to: 0
 31432                           
 31433                           ; BSR set to: 0
 31434  013936  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 31435  013938  D006               	goto	L20
 31436  01393A                     l2994:
 31437                           
 31438                           ; BSR set to: 0
 31439                           
 31440                           ; BSR set to: 0
 31441  01393A  0E00               	movlw	0
 31442  01393C  6F8B               	movwf	___fladd@b& (0+255),b
 31443  01393E  0E00               	movlw	0
 31444  013940  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31445  013942  0E00               	movlw	0
 31446  013944  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31447  013946                     L20:
 31448  013946  0E00               	movlw	0
 31449  013948  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31450                           
 31451                           ; BSR set to: 0
 31452                           
 31453                           ; BSR set to: 0
 31454  01394A  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31455  01394C  0B80               	andlw	128
 31456  01394E  6F9C               	movwf	___fladd@aexp& (0+255),b
 31457                           
 31458                           ; BSR set to: 0
 31459  013950  519B               	movf	___fladd@signs& (0+255),w,b
 31460  013952  199C               	xorwf	___fladd@aexp& (0+255),w,b
 31461  013954  A4D8               	btfss	status,2,c
 31462                           
 31463                           ; BSR set to: 0
 31464  013956  8D9B               	bsf	___fladd@signs& (0+255),6,b
 31465                           
 31466                           ; BSR set to: 0
 31467                           
 31468                           ; BSR set to: 0
 31469  013958  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31470  01395A  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 31471  01395C  6F9C               	movwf	___fladd@aexp& (0+255),b
 31472                           
 31473                           ; BSR set to: 0
 31474  01395E  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 31475                           
 31476                           ; BSR set to: 0
 31477  013960  819C               	bsf	___fladd@aexp& (0+255),0,b
 31478                           
 31479                           ; BSR set to: 0
 31480                           
 31481                           ; BSR set to: 0
 31482  013962  519C               	movf	___fladd@aexp& (0+255),w,b
 31483  013964  B4D8               	btfsc	status,2,c
 31484  013966  D00D               	goto	l2999
 31485                           
 31486                           ; BSR set to: 0
 31487  013968  299C               	incf	___fladd@aexp& (0+255),w,b
 31488  01396A  A4D8               	btfss	status,2,c
 31489  01396C  D008               	goto	l3000
 31490                           
 31491                           ; BSR set to: 0
 31492  01396E  0E00               	movlw	0
 31493  013970  6F8F               	movwf	___fladd@a& (0+255),b
 31494  013972  0E00               	movlw	0
 31495  013974  6F90               	movwf	(___fladd@a+1)& (0+255),b
 31496  013976  0E00               	movlw	0
 31497  013978  6F91               	movwf	(___fladd@a+2)& (0+255),b
 31498  01397A  0E00               	movlw	0
 31499  01397C  6F92               	movwf	(___fladd@a+3)& (0+255),b
 31500  01397E                     l3000:
 31501                           
 31502                           ; BSR set to: 0
 31503                           
 31504                           ; BSR set to: 0
 31505  01397E  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 31506  013980  D006               	goto	L21
 31507  013982                     l2999:
 31508                           
 31509                           ; BSR set to: 0
 31510                           
 31511                           ; BSR set to: 0
 31512  013982  0E00               	movlw	0
 31513  013984  6F8F               	movwf	___fladd@a& (0+255),b
 31514  013986  0E00               	movlw	0
 31515  013988  6F90               	movwf	(___fladd@a+1)& (0+255),b
 31516  01398A  0E00               	movlw	0
 31517  01398C  6F91               	movwf	(___fladd@a+2)& (0+255),b
 31518  01398E                     L21:
 31519  01398E  0E00               	movlw	0
 31520  013990  6F92               	movwf	(___fladd@a+3)& (0+255),b
 31521                           
 31522                           ; BSR set to: 0
 31523                           
 31524                           ; BSR set to: 0
 31525  013992  519D               	movf	___fladd@bexp& (0+255),w,b
 31526  013994  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 31527  013996  B0D8               	btfsc	status,0,c
 31528  013998  D022               	goto	l3002
 31529                           
 31530                           ; BSR set to: 0
 31531  01399A  AD9B               	btfss	___fladd@signs& (0+255),6,b
 31532  01399C  D002               	goto	l3003
 31533                           
 31534                           ; BSR set to: 0
 31535  01399E  0E80               	movlw	128
 31536  0139A0  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 31537  0139A2                     l3003:
 31538                           
 31539                           ; BSR set to: 0
 31540                           
 31541                           ; BSR set to: 0
 31542  0139A2  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 31543                           
 31544                           ; BSR set to: 0
 31545  0139A6  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 31546                           
 31547                           ; BSR set to: 0
 31548  0139AA  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 31549                           
 31550                           ; BSR set to: 0
 31551  0139AE  C08B  F09E         	movff	___fladd@b,___fladd@grs
 31552                           
 31553                           ; BSR set to: 0
 31554  0139B2  C08F  F08B         	movff	___fladd@a,___fladd@b
 31555                           
 31556                           ; BSR set to: 0
 31557  0139B6  C09E  F08F         	movff	___fladd@grs,___fladd@a
 31558                           
 31559                           ; BSR set to: 0
 31560  0139BA  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 31561                           
 31562                           ; BSR set to: 0
 31563  0139BE  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 31564                           
 31565                           ; BSR set to: 0
 31566  0139C2  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 31567                           
 31568                           ; BSR set to: 0
 31569  0139C6  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 31570                           
 31571                           ; BSR set to: 0
 31572  0139CA  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 31573                           
 31574                           ; BSR set to: 0
 31575  0139CE  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 31576                           
 31577                           ; BSR set to: 0
 31578  0139D2  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 31579                           
 31580                           ; BSR set to: 0
 31581  0139D6  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 31582                           
 31583                           ; BSR set to: 0
 31584  0139DA  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 31585  0139DE                     l3002:
 31586                           
 31587                           ; BSR set to: 0
 31588                           
 31589                           ; BSR set to: 0
 31590  0139DE  0E00               	movlw	0
 31591  0139E0  6F9E               	movwf	___fladd@grs& (0+255),b
 31592                           
 31593                           ; BSR set to: 0
 31594  0139E2  519D               	movf	___fladd@bexp& (0+255),w,b
 31595  0139E4  6F93               	movwf	??___fladd& (0+255),b
 31596  0139E6  6B94               	clrf	(??___fladd+1)& (0+255),b
 31597  0139E8  1F93               	comf	??___fladd& (0+255),f,b
 31598  0139EA  1F94               	comf	(??___fladd+1)& (0+255),f,b
 31599  0139EC  4B93               	infsnz	??___fladd& (0+255),f,b
 31600  0139EE  2B94               	incf	(??___fladd+1)& (0+255),f,b
 31601  0139F0  519C               	movf	___fladd@aexp& (0+255),w,b
 31602  0139F2  6F95               	movwf	(??___fladd+2)& (0+255),b
 31603  0139F4  6B96               	clrf	(??___fladd+3)& (0+255),b
 31604  0139F6  5193               	movf	??___fladd& (0+255),w,b
 31605  0139F8  2795               	addwf	(??___fladd+2)& (0+255),f,b
 31606  0139FA  5194               	movf	(??___fladd+1)& (0+255),w,b
 31607  0139FC  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 31608  0139FE  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 31609  013A00  D02C               	goto	l3006
 31610  013A02  5196               	movf	(??___fladd+3)& (0+255),w,b
 31611  013A04  E104               	bnz	u10860
 31612  013A06  0E1A               	movlw	26
 31613  013A08  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 31614  013A0A  A0D8               	btfss	status,0,c
 31615  013A0C  D026               	goto	l3006
 31616  013A0E                     u10860:
 31617                           
 31618                           ; BSR set to: 0
 31619  013A0E  518B               	movf	___fladd@b& (0+255),w,b
 31620  013A10  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 31621  013A12  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 31622  013A14  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 31623  013A16  B4D8               	btfsc	status,2,c
 31624  013A18  D002               	goto	u10870
 31625  013A1A  0E01               	movlw	1
 31626  013A1C  D001               	goto	u10880
 31627  013A1E                     u10870:
 31628  013A1E  0E00               	movlw	0
 31629  013A20                     u10880:
 31630  013A20  6F9E               	movwf	___fladd@grs& (0+255),b
 31631                           
 31632                           ; BSR set to: 0
 31633  013A22  0E00               	movlw	0
 31634  013A24  6F8B               	movwf	___fladd@b& (0+255),b
 31635  013A26  0E00               	movlw	0
 31636  013A28  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31637  013A2A  0E00               	movlw	0
 31638  013A2C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31639  013A2E  0E00               	movlw	0
 31640  013A30  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31641                           
 31642                           ; BSR set to: 0
 31643  013A32  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 31644  013A36  D015               	goto	u10910
 31645  013A38                     l3007:
 31646                           
 31647                           ; BSR set to: 0
 31648  013A38  A19E               	btfss	___fladd@grs& (0+255),0,b
 31649  013A3A  D005               	goto	l3008
 31650                           
 31651                           ; BSR set to: 0
 31652  013A3C  90D8               	bcf	status,0,c
 31653  013A3E  319E               	rrcf	___fladd@grs& (0+255),w,b
 31654  013A40  0901               	iorlw	1
 31655  013A42  6F9E               	movwf	___fladd@grs& (0+255),b
 31656  013A44  D002               	goto	l3009
 31657  013A46                     l3008:
 31658                           
 31659                           ; BSR set to: 0
 31660                           
 31661                           ; BSR set to: 0
 31662  013A46  90D8               	bcf	status,0,c
 31663  013A48  339E               	rrcf	___fladd@grs& (0+255),f,b
 31664  013A4A                     l3009:
 31665                           
 31666                           ; BSR set to: 0
 31667                           
 31668                           ; BSR set to: 0
 31669  013A4A  B18B               	btfsc	___fladd@b& (0+255),0,b
 31670                           
 31671                           ; BSR set to: 0
 31672  013A4C  8F9E               	bsf	___fladd@grs& (0+255),7,b
 31673                           
 31674                           ; BSR set to: 0
 31675                           
 31676                           ; BSR set to: 0
 31677  013A4E  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 31678  013A50  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 31679  013A52  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 31680  013A54  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 31681  013A56  338B               	rrcf	___fladd@b& (0+255),f,b
 31682                           
 31683                           ; BSR set to: 0
 31684  013A58  2B9D               	incf	___fladd@bexp& (0+255),f,b
 31685  013A5A                     l3006:
 31686                           
 31687                           ; BSR set to: 0
 31688  013A5A  519C               	movf	___fladd@aexp& (0+255),w,b
 31689  013A5C  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 31690  013A5E  A0D8               	btfss	status,0,c
 31691  013A60  D7EB               	goto	l3007
 31692  013A62                     u10910:
 31693                           
 31694                           ; BSR set to: 0
 31695                           
 31696                           ; BSR set to: 0
 31697  013A62  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 31698  013A64  D029               	goto	l3012
 31699                           
 31700                           ; BSR set to: 0
 31701  013A66  519D               	movf	___fladd@bexp& (0+255),w,b
 31702  013A68  A4D8               	btfss	status,2,c
 31703  013A6A  D009               	goto	l3013
 31704                           
 31705                           ; BSR set to: 0
 31706  013A6C  0E00               	movlw	0
 31707  013A6E  6F8B               	movwf	?___fladd& (0+255),b
 31708  013A70  0E00               	movlw	0
 31709  013A72  6F8C               	movwf	(?___fladd+1)& (0+255),b
 31710  013A74  0E00               	movlw	0
 31711  013A76  6F8D               	movwf	(?___fladd+2)& (0+255),b
 31712  013A78  0E00               	movlw	0
 31713  013A7A  6F8E               	movwf	(?___fladd+3)& (0+255),b
 31714                           
 31715                           ; BSR set to: 0
 31716  013A7C  0012               	return	
 31717  013A7E                     l3013:
 31718                           
 31719                           ; BSR set to: 0
 31720                           
 31721                           ; BSR set to: 0
 31722  013A7E  518F               	movf	___fladd@a& (0+255),w,b
 31723  013A80  278B               	addwf	___fladd@b& (0+255),f,b
 31724  013A82  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31725  013A84  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 31726  013A86  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31727  013A88  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 31728  013A8A  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31729  013A8C  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 31730                           
 31731                           ; BSR set to: 0
 31732  013A8E  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 31733  013A90  D083               	goto	u11040
 31734                           
 31735                           ; BSR set to: 0
 31736  013A92  A19E               	btfss	___fladd@grs& (0+255),0,b
 31737  013A94  D006               	goto	l3016
 31738                           
 31739                           ; BSR set to: 0
 31740  013A96  90D8               	bcf	status,0,c
 31741  013A98  339E               	rrcf	___fladd@grs& (0+255),f,b
 31742  013A9A  519E               	movf	___fladd@grs& (0+255),w,b
 31743  013A9C  0901               	iorlw	1
 31744  013A9E  6F9E               	movwf	___fladd@grs& (0+255),b
 31745  013AA0  D002               	goto	l3017
 31746  013AA2                     l3016:
 31747                           
 31748                           ; BSR set to: 0
 31749                           
 31750                           ; BSR set to: 0
 31751  013AA2  90D8               	bcf	status,0,c
 31752  013AA4  339E               	rrcf	___fladd@grs& (0+255),f,b
 31753  013AA6                     l3017:
 31754                           
 31755                           ; BSR set to: 0
 31756                           
 31757                           ; BSR set to: 0
 31758  013AA6  B18B               	btfsc	___fladd@b& (0+255),0,b
 31759                           
 31760                           ; BSR set to: 0
 31761  013AA8  8F9E               	bsf	___fladd@grs& (0+255),7,b
 31762                           
 31763                           ; BSR set to: 0
 31764                           
 31765                           ; BSR set to: 0
 31766  013AAA  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 31767  013AAC  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 31768  013AAE  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 31769  013AB0  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 31770  013AB2  338B               	rrcf	___fladd@b& (0+255),f,b
 31771                           
 31772                           ; BSR set to: 0
 31773  013AB4  2B9D               	incf	___fladd@bexp& (0+255),f,b
 31774                           
 31775                           ; BSR set to: 0
 31776  013AB6  D070               	goto	u11040
 31777  013AB8                     l3012:
 31778                           
 31779                           ; BSR set to: 0
 31780                           
 31781                           ; BSR set to: 0
 31782  013AB8  518F               	movf	___fladd@a& (0+255),w,b
 31783  013ABA  5D8B               	subwf	___fladd@b& (0+255),w,b
 31784  013ABC  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31785  013ABE  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 31786  013AC0  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31787  013AC2  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 31788  013AC4  518E               	movf	(___fladd@b+3)& (0+255),w,b
 31789  013AC6  0A80               	xorlw	128
 31790  013AC8  6F93               	movwf	??___fladd& (0+255),b
 31791  013ACA  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31792  013ACC  0A80               	xorlw	128
 31793  013ACE  5993               	subwfb	??___fladd& (0+255),w,b
 31794  013AD0  B0D8               	btfsc	status,0,c
 31795  013AD2  D036               	goto	l3020
 31796                           
 31797                           ; BSR set to: 0
 31798  013AD4  C08B  F093         	movff	___fladd@b,??___fladd
 31799  013AD8  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 31800  013ADC  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 31801  013AE0  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 31802  013AE4  1F93               	comf	??___fladd& (0+255),f,b
 31803  013AE6  1F94               	comf	(??___fladd+1)& (0+255),f,b
 31804  013AE8  1F95               	comf	(??___fladd+2)& (0+255),f,b
 31805  013AEA  1F96               	comf	(??___fladd+3)& (0+255),f,b
 31806  013AEC  2B93               	incf	??___fladd& (0+255),f,b
 31807  013AEE  0E00               	movlw	0
 31808  013AF0  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 31809  013AF2  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 31810  013AF4  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 31811  013AF6  518F               	movf	___fladd@a& (0+255),w,b
 31812  013AF8  2593               	addwf	??___fladd& (0+255),w,b
 31813  013AFA  6F97               	movwf	(??___fladd+4)& (0+255),b
 31814  013AFC  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31815  013AFE  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 31816  013B00  6F98               	movwf	(??___fladd+5)& (0+255),b
 31817  013B02  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31818  013B04  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 31819  013B06  6F99               	movwf	(??___fladd+6)& (0+255),b
 31820  013B08  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31821  013B0A  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 31822  013B0C  6F9A               	movwf	(??___fladd+7)& (0+255),b
 31823  013B0E  0EFF               	movlw	255
 31824  013B10  2597               	addwf	(??___fladd+4)& (0+255),w,b
 31825  013B12  6F8B               	movwf	___fladd@b& (0+255),b
 31826  013B14  0EFF               	movlw	255
 31827  013B16  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 31828  013B18  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 31829  013B1A  0EFF               	movlw	255
 31830  013B1C  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 31831  013B1E  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 31832  013B20  0EFF               	movlw	255
 31833  013B22  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 31834  013B24  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 31835  013B26  0E80               	movlw	128
 31836  013B28  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 31837                           
 31838                           ; BSR set to: 0
 31839  013B2A  6D9E               	negf	___fladd@grs& (0+255),b
 31840                           
 31841                           ; BSR set to: 0
 31842  013B2C  519E               	movf	___fladd@grs& (0+255),w,b
 31843  013B2E  A4D8               	btfss	status,2,c
 31844  013B30  D00F               	goto	l3022
 31845                           
 31846                           ; BSR set to: 0
 31847  013B32  0E01               	movlw	1
 31848  013B34  278B               	addwf	___fladd@b& (0+255),f,b
 31849  013B36  0E00               	movlw	0
 31850  013B38  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 31851  013B3A  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 31852  013B3C  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 31853                           
 31854                           ; BSR set to: 0
 31855  013B3E  D008               	goto	l3022
 31856  013B40                     l3020:
 31857                           
 31858                           ; BSR set to: 0
 31859                           
 31860                           ; BSR set to: 0
 31861  013B40  518F               	movf	___fladd@a& (0+255),w,b
 31862  013B42  5F8B               	subwf	___fladd@b& (0+255),f,b
 31863  013B44  5190               	movf	(___fladd@a+1)& (0+255),w,b
 31864  013B46  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 31865  013B48  5191               	movf	(___fladd@a+2)& (0+255),w,b
 31866  013B4A  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 31867  013B4C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 31868  013B4E  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 31869  013B50                     l3022:
 31870                           
 31871                           ; BSR set to: 0
 31872  013B50  518B               	movf	___fladd@b& (0+255),w,b
 31873  013B52  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 31874  013B54  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 31875  013B56  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 31876  013B58  A4D8               	btfss	status,2,c
 31877  013B5A  D01C               	goto	l3029
 31878                           
 31879                           ; BSR set to: 0
 31880  013B5C  519E               	movf	___fladd@grs& (0+255),w,b
 31881  013B5E  A4D8               	btfss	status,2,c
 31882  013B60  D019               	goto	l3029
 31883                           
 31884                           ; BSR set to: 0
 31885  013B62  0E00               	movlw	0
 31886  013B64  6F8B               	movwf	?___fladd& (0+255),b
 31887  013B66  0E00               	movlw	0
 31888  013B68  6F8C               	movwf	(?___fladd+1)& (0+255),b
 31889  013B6A  0E00               	movlw	0
 31890  013B6C  6F8D               	movwf	(?___fladd+2)& (0+255),b
 31891  013B6E  0E00               	movlw	0
 31892  013B70  6F8E               	movwf	(?___fladd+3)& (0+255),b
 31893                           
 31894                           ; BSR set to: 0
 31895  013B72  0012               	return	
 31896  013B74                     
 31897                           ; BSR set to: 0
 31898                           
 31899                           ; BSR set to: 0
 31900  013B74  90D8               	bcf	status,0,c
 31901  013B76  378B               	rlcf	___fladd@b& (0+255),f,b
 31902  013B78  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 31903  013B7A  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 31904  013B7C  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 31905                           
 31906                           ; BSR set to: 0
 31907  013B7E  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 31908                           
 31909                           ; BSR set to: 0
 31910  013B80  818B               	bsf	___fladd@b& (0+255),0,b
 31911                           
 31912                           ; BSR set to: 0
 31913                           
 31914                           ; BSR set to: 0
 31915  013B82  A19E               	btfss	___fladd@grs& (0+255),0,b
 31916  013B84  D002               	goto	l3027
 31917                           
 31918                           ; BSR set to: 0
 31919  013B86  80D8               	bsf	status,0,c
 31920  013B88  D001               	goto	L22
 31921  013B8A                     l3027:
 31922                           
 31923                           ; BSR set to: 0
 31924                           
 31925                           ; BSR set to: 0
 31926  013B8A  90D8               	bcf	status,0,c
 31927  013B8C                     L22:
 31928  013B8C  379E               	rlcf	___fladd@grs& (0+255),f,b
 31929                           
 31930                           ; BSR set to: 0
 31931                           
 31932                           ; BSR set to: 0
 31933  013B8E  519D               	movf	___fladd@bexp& (0+255),w,b
 31934  013B90  A4D8               	btfss	status,2,c
 31935                           
 31936                           ; BSR set to: 0
 31937  013B92  079D               	decf	___fladd@bexp& (0+255),f,b
 31938  013B94                     l3029:
 31939                           
 31940                           ; BSR set to: 0
 31941                           
 31942                           ; BSR set to: 0
 31943                           
 31944                           ; BSR set to: 0
 31945  013B94  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 31946  013B96  D7EE               	goto	l3025
 31947  013B98                     u11040:
 31948                           
 31949                           ; BSR set to: 0
 31950                           
 31951                           ; BSR set to: 0
 31952                           
 31953                           ; BSR set to: 0
 31954  013B98  0E00               	movlw	0
 31955  013B9A  6F9C               	movwf	___fladd@aexp& (0+255),b
 31956                           
 31957                           ; BSR set to: 0
 31958  013B9C  AF9E               	btfss	___fladd@grs& (0+255),7,b
 31959  013B9E  D00A               	goto	l3034
 31960                           
 31961                           ; BSR set to: 0
 31962  013BA0  C09E  F093         	movff	___fladd@grs,??___fladd
 31963  013BA4  0E7F               	movlw	127
 31964  013BA6  1793               	andwf	??___fladd& (0+255),f,b
 31965  013BA8  A4D8               	btfss	status,2,c
 31966  013BAA  D002               	goto	u11070
 31967                           
 31968                           ; BSR set to: 0
 31969                           
 31970                           ; BSR set to: 0
 31971  013BAC  A18B               	btfss	___fladd@b& (0+255),0,b
 31972  013BAE  D002               	goto	l3034
 31973  013BB0                     u11070:
 31974                           
 31975                           ; BSR set to: 0
 31976  013BB0  0E01               	movlw	1
 31977  013BB2  6F9C               	movwf	___fladd@aexp& (0+255),b
 31978  013BB4                     l3034:
 31979                           
 31980                           ; BSR set to: 0
 31981                           
 31982                           ; BSR set to: 0
 31983                           
 31984                           ; BSR set to: 0
 31985  013BB4  519C               	movf	___fladd@aexp& (0+255),w,b
 31986  013BB6  B4D8               	btfsc	status,2,c
 31987  013BB8  D020               	goto	l3037
 31988                           
 31989                           ; BSR set to: 0
 31990  013BBA  0E01               	movlw	1
 31991  013BBC  278B               	addwf	___fladd@b& (0+255),f,b
 31992  013BBE  0E00               	movlw	0
 31993  013BC0  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 31994  013BC2  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 31995  013BC4  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 31996                           
 31997                           ; BSR set to: 0
 31998  013BC6  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 31999  013BC8  D018               	goto	l3037
 32000                           
 32001                           ; BSR set to: 0
 32002  013BCA  C08B  F093         	movff	___fladd@b,??___fladd
 32003  013BCE  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 32004  013BD2  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 32005  013BD6  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 32006  013BDA  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 32007  013BDC  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 32008  013BDE  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 32009  013BE0  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 32010  013BE2  3393               	rrcf	??___fladd& (0+255),f,b
 32011  013BE4  C093  F08B         	movff	??___fladd,___fladd@b
 32012  013BE8  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 32013  013BEC  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 32014  013BF0  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 32015  013BF4  299D               	incf	___fladd@bexp& (0+255),w,b
 32016  013BF6  A4D8               	btfss	status,2,c
 32017                           
 32018                           ; BSR set to: 0
 32019  013BF8  2B9D               	incf	___fladd@bexp& (0+255),f,b
 32020  013BFA                     l3037:
 32021                           
 32022                           ; BSR set to: 0
 32023                           
 32024                           ; BSR set to: 0
 32025                           
 32026                           ; BSR set to: 0
 32027                           
 32028                           ; BSR set to: 0
 32029  013BFA  299D               	incf	___fladd@bexp& (0+255),w,b
 32030  013BFC  B4D8               	btfsc	status,2,c
 32031  013BFE  D003               	goto	u11120
 32032                           
 32033                           ; BSR set to: 0
 32034  013C00  519D               	movf	___fladd@bexp& (0+255),w,b
 32035  013C02  A4D8               	btfss	status,2,c
 32036  013C04  D00D               	goto	l3041
 32037  013C06                     u11120:
 32038                           
 32039                           ; BSR set to: 0
 32040                           
 32041                           ; BSR set to: 0
 32042  013C06  0E00               	movlw	0
 32043  013C08  6F8B               	movwf	___fladd@b& (0+255),b
 32044  013C0A  0E00               	movlw	0
 32045  013C0C  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 32046  013C0E  0E00               	movlw	0
 32047  013C10  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 32048  013C12  0E00               	movlw	0
 32049  013C14  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32050  013C16  519D               	movf	___fladd@bexp& (0+255),w,b
 32051  013C18  A4D8               	btfss	status,2,c
 32052  013C1A  D002               	goto	l3041
 32053                           
 32054                           ; BSR set to: 0
 32055  013C1C  0E00               	movlw	0
 32056  013C1E  6F9B               	movwf	___fladd@signs& (0+255),b
 32057  013C20                     l3041:
 32058                           
 32059                           ; BSR set to: 0
 32060                           
 32061                           ; BSR set to: 0
 32062                           
 32063                           ; BSR set to: 0
 32064  013C20  A19D               	btfss	___fladd@bexp& (0+255),0,b
 32065  013C22  D002               	goto	l3042
 32066                           
 32067                           ; BSR set to: 0
 32068  013C24  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 32069  013C26  D001               	goto	l3043
 32070  013C28                     l3042:
 32071                           
 32072                           ; BSR set to: 0
 32073                           
 32074                           ; BSR set to: 0
 32075  013C28  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 32076  013C2A                     l3043:
 32077                           
 32078                           ; BSR set to: 0
 32079                           
 32080                           ; BSR set to: 0
 32081  013C2A  90D8               	bcf	status,0,c
 32082  013C2C  319D               	rrcf	___fladd@bexp& (0+255),w,b
 32083  013C2E  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 32084                           
 32085                           ; BSR set to: 0
 32086  013C30  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 32087                           
 32088                           ; BSR set to: 0
 32089  013C32  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 32090                           
 32091                           ; BSR set to: 0
 32092                           
 32093                           ; BSR set to: 0
 32094  013C34  C08B  F08B         	movff	___fladd@b,?___fladd
 32095  013C38  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 32096  013C3C  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 32097  013C40  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 32098  013C44  0012               	return	
 32099  013C46                     __end_of___fladd:
 32100                           	opt stack 0
 32101                           tosu	equ	0xFFF
 32102                           tosh	equ	0xFFE
 32103                           tosl	equ	0xFFD
 32104                           pclath	equ	0xFFA
 32105                           tblptru	equ	0xFF8
 32106                           tblptrh	equ	0xFF7
 32107                           tblptrl	equ	0xFF6
 32108                           tablat	equ	0xFF5
 32109                           prodh	equ	0xFF4
 32110                           prodl	equ	0xFF3
 32111                           intcon	equ	0xFF2
 32112                           indf0	equ	0xFEF
 32113                           postinc0	equ	0xFEE
 32114                           fsr0h	equ	0xFEA
 32115                           fsr0l	equ	0xFE9
 32116                           wreg	equ	0xFE8
 32117                           indf1	equ	0xFE7
 32118                           postdec1	equ	0xFE5
 32119                           fsr1h	equ	0xFE2
 32120                           fsr1l	equ	0xFE1
 32121                           indf2	equ	0xFDF
 32122                           postinc2	equ	0xFDE
 32123                           postdec2	equ	0xFDD
 32124                           plusw2	equ	0xFDB
 32125                           fsr2h	equ	0xFDA
 32126                           fsr2l	equ	0xFD9
 32127                           status	equ	0xFD8
 32128                           
 32129 ;; *************** function ___flneg *****************
 32130 ;; Defined at:
 32131 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\flneg.c"
 32132 ;; Parameters:    Size  Location     Type
 32133 ;;  f1              4   39[BANK0 ] unsigned char 
 32134 ;; Auto vars:     Size  Location     Type
 32135 ;;		None
 32136 ;; Return value:  Size  Location     Type
 32137 ;;                  4   39[BANK0 ] unsigned char 
 32138 ;; Registers used:
 32139 ;;		wreg, status,2, status,0
 32140 ;; Tracked objects:
 32141 ;;		On entry : 0/0
 32142 ;;		On exit  : 0/0
 32143 ;;		Unchanged: 0/0
 32144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32148 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32149 ;;Total ram usage:        4 bytes
 32150 ;; Hardware stack levels used:    1
 32151 ;; Hardware stack levels required when called:    7
 32152 ;; This function calls:
 32153 ;;		Nothing
 32154 ;; This function is called by:
 32155 ;;		_ADCAverage
 32156 ;;		_pow
 32157 ;;		_exp
 32158 ;; This function uses a non-reentrant model
 32159 ;;
 32160                           
 32161                           	psect	text142
 32162  01879E                     __ptext142:
 32163                           	opt stack 0
 32164  01879E                     ___flneg:
 32165                           	opt stack 19
 32166                           
 32167                           ; BSR set to: 0
 32168                           ;incstack = 0
 32169  01879E  0100               	movlb	0	; () banked
 32170  0187A0  5187               	movf	___flneg@f1& (0+255),w,b
 32171  0187A2  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 32172  0187A4  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 32173  0187A6  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 32174  0187A8  B4D8               	btfsc	status,2,c
 32175  0187AA  D008               	goto	l2757
 32176                           
 32177                           ; BSR set to: 0
 32178  0187AC  0E00               	movlw	0
 32179  0187AE  1B87               	xorwf	___flneg@f1& (0+255),f,b
 32180  0187B0  0E00               	movlw	0
 32181  0187B2  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 32182  0187B4  0E00               	movlw	0
 32183  0187B6  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 32184  0187B8  0E80               	movlw	128
 32185  0187BA  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 32186  0187BC                     l2757:
 32187                           
 32188                           ; BSR set to: 0
 32189                           
 32190                           ; BSR set to: 0
 32191  0187BC  C087  F087         	movff	___flneg@f1,?___flneg
 32192  0187C0  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 32193  0187C4  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 32194  0187C8  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 32195  0187CC  0012               	return	
 32196  0187CE                     __end_of___flneg:
 32197                           	opt stack 0
 32198                           tosu	equ	0xFFF
 32199                           tosh	equ	0xFFE
 32200                           tosl	equ	0xFFD
 32201                           pclath	equ	0xFFA
 32202                           tblptru	equ	0xFF8
 32203                           tblptrh	equ	0xFF7
 32204                           tblptrl	equ	0xFF6
 32205                           tablat	equ	0xFF5
 32206                           prodh	equ	0xFF4
 32207                           prodl	equ	0xFF3
 32208                           intcon	equ	0xFF2
 32209                           indf0	equ	0xFEF
 32210                           postinc0	equ	0xFEE
 32211                           fsr0h	equ	0xFEA
 32212                           fsr0l	equ	0xFE9
 32213                           wreg	equ	0xFE8
 32214                           indf1	equ	0xFE7
 32215                           postdec1	equ	0xFE5
 32216                           fsr1h	equ	0xFE2
 32217                           fsr1l	equ	0xFE1
 32218                           indf2	equ	0xFDF
 32219                           postinc2	equ	0xFDE
 32220                           postdec2	equ	0xFDD
 32221                           plusw2	equ	0xFDB
 32222                           fsr2h	equ	0xFDA
 32223                           fsr2l	equ	0xFD9
 32224                           status	equ	0xFD8
 32225                           
 32226 ;; *************** function ___fldiv *****************
 32227 ;; Defined at:
 32228 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\sprcdiv.c"
 32229 ;; Parameters:    Size  Location     Type
 32230 ;;  b               4    0[BANK0 ] unsigned char 
 32231 ;;  a               4    4[BANK0 ] unsigned char 
 32232 ;; Auto vars:     Size  Location     Type
 32233 ;;  grs             4   19[BANK0 ] unsigned long 
 32234 ;;  rem             4   13[BANK0 ] unsigned long 
 32235 ;;  new_exp         2   17[BANK0 ] int 
 32236 ;;  aexp            1   24[BANK0 ] unsigned char 
 32237 ;;  bexp            1   23[BANK0 ] unsigned char 
 32238 ;;  sign            1   12[BANK0 ] unsigned char 
 32239 ;; Return value:  Size  Location     Type
 32240 ;;                  4    0[BANK0 ] unsigned char 
 32241 ;; Registers used:
 32242 ;;		wreg, status,2, status,0
 32243 ;; Tracked objects:
 32244 ;;		On entry : 0/0
 32245 ;;		On exit  : 0/0
 32246 ;;		Unchanged: 0/0
 32247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32248 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32249 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32250 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32251 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32252 ;;Total ram usage:       25 bytes
 32253 ;; Hardware stack levels used:    1
 32254 ;; Hardware stack levels required when called:    7
 32255 ;; This function calls:
 32256 ;;		Nothing
 32257 ;; This function is called by:
 32258 ;;		_exp
 32259 ;;		_ADC_Voltage
 32260 ;; This function uses a non-reentrant model
 32261 ;;
 32262                           
 32263                           	psect	text143
 32264  013F36                     __ptext143:
 32265                           	opt stack 0
 32266  013F36                     ___fldiv:
 32267                           	opt stack 19
 32268                           
 32269                           ; BSR set to: 0
 32270                           ;incstack = 0
 32271  013F36  0100               	movlb	0	; () banked
 32272  013F38  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 32273  013F3A  0B80               	andlw	128
 32274  013F3C  6F6C               	movwf	___fldiv@sign& (0+255),b
 32275  013F3E  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 32276  013F40  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 32277  013F42  6F77               	movwf	___fldiv@bexp& (0+255),b
 32278                           
 32279                           ; BSR set to: 0
 32280  013F44  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 32281                           
 32282                           ; BSR set to: 0
 32283  013F46  8177               	bsf	___fldiv@bexp& (0+255),0,b
 32284                           
 32285                           ; BSR set to: 0
 32286                           
 32287                           ; BSR set to: 0
 32288  013F48  5177               	movf	___fldiv@bexp& (0+255),w,b
 32289  013F4A  B4D8               	btfsc	status,2,c
 32290  013F4C  D00D               	goto	l3051
 32291                           
 32292                           ; BSR set to: 0
 32293  013F4E  2977               	incf	___fldiv@bexp& (0+255),w,b
 32294  013F50  A4D8               	btfss	status,2,c
 32295  013F52  D008               	goto	l3052
 32296                           
 32297                           ; BSR set to: 0
 32298  013F54  0E00               	movlw	0
 32299  013F56  6F60               	movwf	___fldiv@b& (0+255),b
 32300  013F58  0E00               	movlw	0
 32301  013F5A  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32302  013F5C  0E00               	movlw	0
 32303  013F5E  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32304  013F60  0E00               	movlw	0
 32305  013F62  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32306  013F64                     l3052:
 32307                           
 32308                           ; BSR set to: 0
 32309                           
 32310                           ; BSR set to: 0
 32311  013F64  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 32312  013F66  D006               	goto	L23
 32313  013F68                     l3051:
 32314                           
 32315                           ; BSR set to: 0
 32316                           
 32317                           ; BSR set to: 0
 32318  013F68  0E00               	movlw	0
 32319  013F6A  6F60               	movwf	___fldiv@b& (0+255),b
 32320  013F6C  0E00               	movlw	0
 32321  013F6E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32322  013F70  0E00               	movlw	0
 32323  013F72  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32324  013F74                     L23:
 32325  013F74  0E00               	movlw	0
 32326  013F76  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32327                           
 32328                           ; BSR set to: 0
 32329                           
 32330                           ; BSR set to: 0
 32331  013F78  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32332  013F7A  0B80               	andlw	128
 32333  013F7C  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 32334                           
 32335                           ; BSR set to: 0
 32336  013F7E  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32337  013F80  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 32338  013F82  6F78               	movwf	___fldiv@aexp& (0+255),b
 32339                           
 32340                           ; BSR set to: 0
 32341  013F84  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 32342                           
 32343                           ; BSR set to: 0
 32344  013F86  8178               	bsf	___fldiv@aexp& (0+255),0,b
 32345                           
 32346                           ; BSR set to: 0
 32347                           
 32348                           ; BSR set to: 0
 32349  013F88  5178               	movf	___fldiv@aexp& (0+255),w,b
 32350  013F8A  B4D8               	btfsc	status,2,c
 32351  013F8C  D00D               	goto	l3055
 32352                           
 32353                           ; BSR set to: 0
 32354  013F8E  2978               	incf	___fldiv@aexp& (0+255),w,b
 32355  013F90  A4D8               	btfss	status,2,c
 32356  013F92  D008               	goto	l3056
 32357                           
 32358                           ; BSR set to: 0
 32359  013F94  0E00               	movlw	0
 32360  013F96  6F64               	movwf	___fldiv@a& (0+255),b
 32361  013F98  0E00               	movlw	0
 32362  013F9A  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 32363  013F9C  0E00               	movlw	0
 32364  013F9E  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 32365  013FA0  0E00               	movlw	0
 32366  013FA2  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 32367  013FA4                     l3056:
 32368                           
 32369                           ; BSR set to: 0
 32370                           
 32371                           ; BSR set to: 0
 32372  013FA4  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 32373  013FA6  D006               	goto	L24
 32374  013FA8                     l3055:
 32375                           
 32376                           ; BSR set to: 0
 32377                           
 32378                           ; BSR set to: 0
 32379  013FA8  0E00               	movlw	0
 32380  013FAA  6F64               	movwf	___fldiv@a& (0+255),b
 32381  013FAC  0E00               	movlw	0
 32382  013FAE  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 32383  013FB0  0E00               	movlw	0
 32384  013FB2  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 32385  013FB4                     L24:
 32386  013FB4  0E00               	movlw	0
 32387  013FB6  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 32388                           
 32389                           ; BSR set to: 0
 32390                           
 32391                           ; BSR set to: 0
 32392  013FB8  5164               	movf	___fldiv@a& (0+255),w,b
 32393  013FBA  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 32394  013FBC  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 32395  013FBE  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 32396  013FC0  A4D8               	btfss	status,2,c
 32397  013FC2  D015               	goto	l3058
 32398                           
 32399                           ; BSR set to: 0
 32400  013FC4  0E00               	movlw	0
 32401  013FC6  6F60               	movwf	___fldiv@b& (0+255),b
 32402  013FC8  0E00               	movlw	0
 32403  013FCA  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32404  013FCC  0E00               	movlw	0
 32405  013FCE  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32406  013FD0  0E00               	movlw	0
 32407  013FD2  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32408                           
 32409                           ; BSR set to: 0
 32410  013FD4  0E80               	movlw	128
 32411  013FD6  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 32412  013FD8  0E7F               	movlw	127
 32413  013FDA  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 32414                           
 32415                           ; BSR set to: 0
 32416  013FDC  C060  F060         	movff	___fldiv@b,?___fldiv
 32417  013FE0  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32418  013FE4  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32419  013FE8  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32420                           
 32421                           ; BSR set to: 0
 32422  013FEC  0012               	return	
 32423  013FEE                     l3058:
 32424                           
 32425                           ; BSR set to: 0
 32426                           
 32427                           ; BSR set to: 0
 32428  013FEE  5177               	movf	___fldiv@bexp& (0+255),w,b
 32429  013FF0  A4D8               	btfss	status,2,c
 32430  013FF2  D011               	goto	l3060
 32431                           
 32432                           ; BSR set to: 0
 32433  013FF4  0E00               	movlw	0
 32434  013FF6  6F60               	movwf	___fldiv@b& (0+255),b
 32435  013FF8  0E00               	movlw	0
 32436  013FFA  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32437  013FFC  0E00               	movlw	0
 32438  013FFE  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32439  014000  0E00               	movlw	0
 32440  014002  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32441                           
 32442                           ; BSR set to: 0
 32443  014004  C060  F060         	movff	___fldiv@b,?___fldiv
 32444  014008  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32445  01400C  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32446  014010  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32447                           
 32448                           ; BSR set to: 0
 32449  014014  0012               	return	
 32450  014016                     l3060:
 32451                           
 32452                           ; BSR set to: 0
 32453                           
 32454                           ; BSR set to: 0
 32455  014016  5178               	movf	___fldiv@aexp& (0+255),w,b
 32456  014018  6F68               	movwf	??___fldiv& (0+255),b
 32457  01401A  6B69               	clrf	(??___fldiv+1)& (0+255),b
 32458  01401C  1F68               	comf	??___fldiv& (0+255),f,b
 32459  01401E  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 32460  014020  4B68               	infsnz	??___fldiv& (0+255),f,b
 32461  014022  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 32462  014024  5177               	movf	___fldiv@bexp& (0+255),w,b
 32463  014026  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 32464  014028  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 32465  01402A  5168               	movf	??___fldiv& (0+255),w,b
 32466  01402C  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 32467  01402E  5169               	movf	(??___fldiv+1)& (0+255),w,b
 32468  014030  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 32469  014032  0E7F               	movlw	127
 32470  014034  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 32471  014036  6F71               	movwf	___fldiv@new_exp& (0+255),b
 32472  014038  0E00               	movlw	0
 32473  01403A  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 32474  01403C  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32475                           
 32476                           ; BSR set to: 0
 32477  01403E  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 32478  014042  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 32479  014046  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 32480  01404A  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 32481                           
 32482                           ; BSR set to: 0
 32483  01404E  0E00               	movlw	0
 32484  014050  6F60               	movwf	___fldiv@b& (0+255),b
 32485  014052  0E00               	movlw	0
 32486  014054  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32487  014056  0E00               	movlw	0
 32488  014058  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32489  01405A  0E00               	movlw	0
 32490  01405C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32491                           
 32492                           ; BSR set to: 0
 32493  01405E  0E00               	movlw	0
 32494  014060  6F73               	movwf	___fldiv@grs& (0+255),b
 32495  014062  0E00               	movlw	0
 32496  014064  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 32497  014066  0E00               	movlw	0
 32498  014068  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 32499  01406A  0E00               	movlw	0
 32500  01406C  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 32501                           
 32502                           ; BSR set to: 0
 32503  01406E  0E00               	movlw	0
 32504  014070  6F78               	movwf	___fldiv@aexp& (0+255),b
 32505  014072  D028               	goto	l3061
 32506  014074                     
 32507                           ; BSR set to: 0
 32508                           
 32509                           ; BSR set to: 0
 32510  014074  5178               	movf	___fldiv@aexp& (0+255),w,b
 32511  014076  B4D8               	btfsc	status,2,c
 32512  014078  D011               	goto	l3063
 32513                           
 32514                           ; BSR set to: 0
 32515  01407A  90D8               	bcf	status,0,c
 32516  01407C  376D               	rlcf	___fldiv@rem& (0+255),f,b
 32517  01407E  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 32518  014080  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 32519  014082  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 32520  014084  90D8               	bcf	status,0,c
 32521  014086  3760               	rlcf	___fldiv@b& (0+255),f,b
 32522  014088  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 32523  01408A  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 32524  01408C  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 32525                           
 32526                           ; BSR set to: 0
 32527  01408E  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 32528                           
 32529                           ; BSR set to: 0
 32530  014090  8160               	bsf	___fldiv@b& (0+255),0,b
 32531                           
 32532                           ; BSR set to: 0
 32533  014092  90D8               	bcf	status,0,c
 32534  014094  3773               	rlcf	___fldiv@grs& (0+255),f,b
 32535  014096  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 32536  014098  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 32537  01409A  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 32538  01409C                     l3063:
 32539                           
 32540                           ; BSR set to: 0
 32541                           
 32542                           ; BSR set to: 0
 32543  01409C  5164               	movf	___fldiv@a& (0+255),w,b
 32544  01409E  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 32545  0140A0  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 32546  0140A2  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 32547  0140A4  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 32548  0140A6  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 32549  0140A8  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32550  0140AA  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 32551  0140AC  A0D8               	btfss	status,0,c
 32552  0140AE  D009               	goto	l3065
 32553                           
 32554                           ; BSR set to: 0
 32555  0140B0  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 32556                           
 32557                           ; BSR set to: 0
 32558  0140B2  5164               	movf	___fldiv@a& (0+255),w,b
 32559  0140B4  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 32560  0140B6  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 32561  0140B8  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 32562  0140BA  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 32563  0140BC  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 32564  0140BE  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 32565  0140C0  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 32566  0140C2                     l3065:
 32567                           
 32568                           ; BSR set to: 0
 32569                           
 32570                           ; BSR set to: 0
 32571  0140C2  2B78               	incf	___fldiv@aexp& (0+255),f,b
 32572  0140C4                     l3061:
 32573                           
 32574                           ; BSR set to: 0
 32575  0140C4  0E19               	movlw	25
 32576  0140C6  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 32577  0140C8  D7D5               	goto	l3062
 32578                           
 32579                           ; BSR set to: 0
 32580                           
 32581                           ; BSR set to: 0
 32582  0140CA  516D               	movf	___fldiv@rem& (0+255),w,b
 32583  0140CC  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 32584  0140CE  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 32585  0140D0  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 32586  0140D2  B4D8               	btfsc	status,2,c
 32587  0140D4  D011               	goto	l3068
 32588                           
 32589                           ; BSR set to: 0
 32590  0140D6  8173               	bsf	___fldiv@grs& (0+255),0,b
 32591                           
 32592                           ; BSR set to: 0
 32593  0140D8  D00F               	goto	l3068
 32594  0140DA                     
 32595                           ; BSR set to: 0
 32596                           
 32597                           ; BSR set to: 0
 32598  0140DA  90D8               	bcf	status,0,c
 32599  0140DC  3760               	rlcf	___fldiv@b& (0+255),f,b
 32600  0140DE  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 32601  0140E0  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 32602  0140E2  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 32603                           
 32604                           ; BSR set to: 0
 32605  0140E4  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 32606                           
 32607                           ; BSR set to: 0
 32608  0140E6  8160               	bsf	___fldiv@b& (0+255),0,b
 32609                           
 32610                           ; BSR set to: 0
 32611  0140E8  90D8               	bcf	status,0,c
 32612  0140EA  3773               	rlcf	___fldiv@grs& (0+255),f,b
 32613  0140EC  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 32614  0140EE  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 32615  0140F0  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 32616  0140F2  0771               	decf	___fldiv@new_exp& (0+255),f,b
 32617  0140F4  A0D8               	btfss	status,0,c
 32618  0140F6  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 32619  0140F8                     l3068:
 32620                           
 32621                           ; BSR set to: 0
 32622                           
 32623                           ; BSR set to: 0
 32624  0140F8  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 32625  0140FA  D7EF               	goto	l3069
 32626                           
 32627                           ; BSR set to: 0
 32628                           
 32629                           ; BSR set to: 0
 32630  0140FC  0E00               	movlw	0
 32631  0140FE  6F78               	movwf	___fldiv@aexp& (0+255),b
 32632                           
 32633                           ; BSR set to: 0
 32634  014100  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 32635  014102  D016               	goto	l3075
 32636                           
 32637                           ; BSR set to: 0
 32638  014104  0EFF               	movlw	255
 32639  014106  1573               	andwf	___fldiv@grs& (0+255),w,b
 32640  014108  6F68               	movwf	??___fldiv& (0+255),b
 32641  01410A  0EFF               	movlw	255
 32642  01410C  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 32643  01410E  6F69               	movwf	(??___fldiv+1)& (0+255),b
 32644  014110  0EFF               	movlw	255
 32645  014112  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 32646  014114  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 32647  014116  0E7F               	movlw	127
 32648  014118  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 32649  01411A  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 32650  01411C  5168               	movf	??___fldiv& (0+255),w,b
 32651  01411E  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 32652  014120  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 32653  014122  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 32654  014124  A4D8               	btfss	status,2,c
 32655  014126  D002               	goto	u11890
 32656                           
 32657                           ; BSR set to: 0
 32658                           
 32659                           ; BSR set to: 0
 32660  014128  A160               	btfss	___fldiv@b& (0+255),0,b
 32661  01412A  D002               	goto	l3075
 32662  01412C                     u11890:
 32663                           
 32664                           ; BSR set to: 0
 32665  01412C  0E01               	movlw	1
 32666  01412E  6F78               	movwf	___fldiv@aexp& (0+255),b
 32667  014130                     l3075:
 32668                           
 32669                           ; BSR set to: 0
 32670                           
 32671                           ; BSR set to: 0
 32672                           
 32673                           ; BSR set to: 0
 32674  014130  5178               	movf	___fldiv@aexp& (0+255),w,b
 32675  014132  B4D8               	btfsc	status,2,c
 32676  014134  D01F               	goto	l3077
 32677                           
 32678                           ; BSR set to: 0
 32679  014136  0E01               	movlw	1
 32680  014138  2760               	addwf	___fldiv@b& (0+255),f,b
 32681  01413A  0E00               	movlw	0
 32682  01413C  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 32683  01413E  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 32684  014140  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 32685                           
 32686                           ; BSR set to: 0
 32687  014142  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 32688  014144  D017               	goto	l3077
 32689                           
 32690                           ; BSR set to: 0
 32691  014146  C060  F068         	movff	___fldiv@b,??___fldiv
 32692  01414A  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 32693  01414E  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 32694  014152  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 32695  014156  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 32696  014158  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 32697  01415A  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 32698  01415C  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 32699  01415E  3368               	rrcf	??___fldiv& (0+255),f,b
 32700  014160  C068  F060         	movff	??___fldiv,___fldiv@b
 32701  014164  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 32702  014168  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 32703  01416C  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 32704                           
 32705                           ; BSR set to: 0
 32706  014170  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 32707  014172  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 32708  014174                     l3077:
 32709                           
 32710                           ; BSR set to: 0
 32711                           
 32712                           ; BSR set to: 0
 32713                           
 32714                           ; BSR set to: 0
 32715  014174  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 32716  014176  D010               	goto	l3078
 32717  014178  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 32718  01417A  E103               	bnz	u11920
 32719  01417C  2971               	incf	___fldiv@new_exp& (0+255),w,b
 32720  01417E  A0D8               	btfss	status,0,c
 32721  014180  D00B               	goto	l3078
 32722  014182                     u11920:
 32723                           
 32724                           ; BSR set to: 0
 32725  014182  0E00               	movlw	0
 32726  014184  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32727  014186  6971               	setf	___fldiv@new_exp& (0+255),b
 32728  014188  0E00               	movlw	0
 32729  01418A  6F60               	movwf	___fldiv@b& (0+255),b
 32730  01418C  0E00               	movlw	0
 32731  01418E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32732  014190  0E00               	movlw	0
 32733  014192  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32734  014194  0E00               	movlw	0
 32735  014196  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32736  014198                     l3078:
 32737                           
 32738                           ; BSR set to: 0
 32739                           
 32740                           ; BSR set to: 0
 32741  014198  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 32742  01419A  D005               	goto	u11930
 32743  01419C  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 32744  01419E  E111               	bnz	l14621
 32745  0141A0  0571               	decf	___fldiv@new_exp& (0+255),w,b
 32746  0141A2  B0D8               	btfsc	status,0,c
 32747  0141A4  D00E               	goto	l3079
 32748  0141A6                     u11930:
 32749                           
 32750                           ; BSR set to: 0
 32751  0141A6  0E00               	movlw	0
 32752  0141A8  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 32753  0141AA  0E00               	movlw	0
 32754  0141AC  6F71               	movwf	___fldiv@new_exp& (0+255),b
 32755  0141AE  0E00               	movlw	0
 32756  0141B0  6F60               	movwf	___fldiv@b& (0+255),b
 32757  0141B2  0E00               	movlw	0
 32758  0141B4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 32759  0141B6  0E00               	movlw	0
 32760  0141B8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 32761  0141BA  0E00               	movlw	0
 32762  0141BC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32763  0141BE  0E00               	movlw	0
 32764  0141C0  6F6C               	movwf	___fldiv@sign& (0+255),b
 32765  0141C2                     l3079:
 32766  0141C2                     l14621:
 32767                           
 32768                           ; BSR set to: 0
 32769  0141C2  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 32770                           
 32771                           ; BSR set to: 0
 32772  0141C6  A177               	btfss	___fldiv@bexp& (0+255),0,b
 32773  0141C8  D002               	goto	l3080
 32774                           
 32775                           ; BSR set to: 0
 32776  0141CA  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 32777  0141CC  D001               	goto	l3081
 32778  0141CE                     l3080:
 32779                           
 32780                           ; BSR set to: 0
 32781                           
 32782                           ; BSR set to: 0
 32783  0141CE  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 32784  0141D0                     l3081:
 32785                           
 32786                           ; BSR set to: 0
 32787                           
 32788                           ; BSR set to: 0
 32789  0141D0  90D8               	bcf	status,0,c
 32790  0141D2  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 32791  0141D4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 32792                           
 32793                           ; BSR set to: 0
 32794  0141D6  516C               	movf	___fldiv@sign& (0+255),w,b
 32795  0141D8  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 32796                           
 32797                           ; BSR set to: 0
 32798  0141DA  C060  F060         	movff	___fldiv@b,?___fldiv
 32799  0141DE  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 32800  0141E2  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 32801  0141E6  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 32802  0141EA  0012               	return	
 32803  0141EC                     __end_of___fldiv:
 32804                           	opt stack 0
 32805                           tosu	equ	0xFFF
 32806                           tosh	equ	0xFFE
 32807                           tosl	equ	0xFFD
 32808                           pclath	equ	0xFFA
 32809                           tblptru	equ	0xFF8
 32810                           tblptrh	equ	0xFF7
 32811                           tblptrl	equ	0xFF6
 32812                           tablat	equ	0xFF5
 32813                           prodh	equ	0xFF4
 32814                           prodl	equ	0xFF3
 32815                           intcon	equ	0xFF2
 32816                           indf0	equ	0xFEF
 32817                           postinc0	equ	0xFEE
 32818                           fsr0h	equ	0xFEA
 32819                           fsr0l	equ	0xFE9
 32820                           wreg	equ	0xFE8
 32821                           indf1	equ	0xFE7
 32822                           postdec1	equ	0xFE5
 32823                           fsr1h	equ	0xFE2
 32824                           fsr1l	equ	0xFE1
 32825                           indf2	equ	0xFDF
 32826                           postinc2	equ	0xFDE
 32827                           postdec2	equ	0xFDD
 32828                           plusw2	equ	0xFDB
 32829                           fsr2h	equ	0xFDA
 32830                           fsr2l	equ	0xFD9
 32831                           status	equ	0xFD8
 32832                           
 32833 ;; *************** function ___awdiv *****************
 32834 ;; Defined at:
 32835 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
 32836 ;; Parameters:    Size  Location     Type
 32837 ;;  dividend        2    0[BANK0 ] int 
 32838 ;;  divisor         2    2[BANK0 ] int 
 32839 ;; Auto vars:     Size  Location     Type
 32840 ;;  quotient        2    6[BANK0 ] int 
 32841 ;;  sign            1    5[BANK0 ] unsigned char 
 32842 ;;  counter         1    4[BANK0 ] unsigned char 
 32843 ;; Return value:  Size  Location     Type
 32844 ;;                  2    0[BANK0 ] int 
 32845 ;; Registers used:
 32846 ;;		wreg, status,2, status,0
 32847 ;; Tracked objects:
 32848 ;;		On entry : 0/0
 32849 ;;		On exit  : 0/0
 32850 ;;		Unchanged: 0/0
 32851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32852 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32853 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32855 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32856 ;;Total ram usage:        8 bytes
 32857 ;; Hardware stack levels used:    1
 32858 ;; Hardware stack levels required when called:    7
 32859 ;; This function calls:
 32860 ;;		Nothing
 32861 ;; This function is called by:
 32862 ;;		_Console_Tab
 32863 ;;		_ADCAverage
 32864 ;; This function uses a non-reentrant model
 32865 ;;
 32866                           
 32867                           	psect	text144
 32868  017452                     __ptext144:
 32869                           	opt stack 0
 32870  017452                     ___awdiv:
 32871                           	opt stack 19
 32872                           
 32873                           ; BSR set to: 0
 32874                           ;incstack = 0
 32875  017452  0E00               	movlw	0
 32876  017454  0100               	movlb	0	; () banked
 32877  017456  6F65               	movwf	___awdiv@sign& (0+255),b
 32878                           
 32879                           ; BSR set to: 0
 32880  017458  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 32881  01745A  D006               	goto	l2718
 32882                           
 32883                           ; BSR set to: 0
 32884  01745C  6D62               	negf	___awdiv@divisor& (0+255),b
 32885  01745E  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 32886  017460  B0D8               	btfsc	status,0,c
 32887  017462  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 32888                           
 32889                           ; BSR set to: 0
 32890  017464  0E01               	movlw	1
 32891  017466  6F65               	movwf	___awdiv@sign& (0+255),b
 32892  017468                     l2718:
 32893                           
 32894                           ; BSR set to: 0
 32895                           
 32896                           ; BSR set to: 0
 32897  017468  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 32898  01746A  D006               	goto	l2719
 32899                           
 32900                           ; BSR set to: 0
 32901  01746C  6D60               	negf	___awdiv@dividend& (0+255),b
 32902  01746E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 32903  017470  B0D8               	btfsc	status,0,c
 32904  017472  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 32905                           
 32906                           ; BSR set to: 0
 32907  017474  0E01               	movlw	1
 32908  017476  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 32909  017478                     l2719:
 32910                           
 32911                           ; BSR set to: 0
 32912                           
 32913                           ; BSR set to: 0
 32914  017478  0E00               	movlw	0
 32915  01747A  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 32916  01747C  0E00               	movlw	0
 32917  01747E  6F66               	movwf	___awdiv@quotient& (0+255),b
 32918                           
 32919                           ; BSR set to: 0
 32920  017480  5162               	movf	___awdiv@divisor& (0+255),w,b
 32921  017482  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 32922  017484  B4D8               	btfsc	status,2,c
 32923  017486  D01C               	goto	l2726
 32924                           
 32925                           ; BSR set to: 0
 32926  017488  0E01               	movlw	1
 32927  01748A  6F64               	movwf	___awdiv@counter& (0+255),b
 32928  01748C  D004               	goto	l2721
 32929  01748E                     
 32930                           ; BSR set to: 0
 32931                           
 32932                           ; BSR set to: 0
 32933  01748E  90D8               	bcf	status,0,c
 32934  017490  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 32935  017492  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 32936  017494  2B64               	incf	___awdiv@counter& (0+255),f,b
 32937  017496                     l2721:
 32938                           
 32939                           ; BSR set to: 0
 32940                           
 32941                           ; BSR set to: 0
 32942  017496  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 32943  017498  D7FA               	goto	l2722
 32944  01749A                     u10700:
 32945                           
 32946                           ; BSR set to: 0
 32947                           
 32948                           ; BSR set to: 0
 32949                           
 32950                           ; BSR set to: 0
 32951  01749A  90D8               	bcf	status,0,c
 32952  01749C  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 32953  01749E  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 32954                           
 32955                           ; BSR set to: 0
 32956  0174A0  5162               	movf	___awdiv@divisor& (0+255),w,b
 32957  0174A2  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 32958  0174A4  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 32959  0174A6  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 32960  0174A8  A0D8               	btfss	status,0,c
 32961  0174AA  D005               	goto	l2725
 32962                           
 32963                           ; BSR set to: 0
 32964  0174AC  5162               	movf	___awdiv@divisor& (0+255),w,b
 32965  0174AE  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 32966  0174B0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 32967  0174B2  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 32968                           
 32969                           ; BSR set to: 0
 32970  0174B4  8166               	bsf	___awdiv@quotient& (0+255),0,b
 32971  0174B6                     l2725:
 32972                           
 32973                           ; BSR set to: 0
 32974                           
 32975                           ; BSR set to: 0
 32976  0174B6  90D8               	bcf	status,0,c
 32977  0174B8  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 32978  0174BA  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 32979                           
 32980                           ; BSR set to: 0
 32981  0174BC  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 32982  0174BE  D7ED               	goto	u10700
 32983  0174C0                     l2726:
 32984                           
 32985                           ; BSR set to: 0
 32986                           
 32987                           ; BSR set to: 0
 32988                           
 32989                           ; BSR set to: 0
 32990  0174C0  5165               	movf	___awdiv@sign& (0+255),w,b
 32991  0174C2  B4D8               	btfsc	status,2,c
 32992  0174C4  D004               	goto	l2727
 32993                           
 32994                           ; BSR set to: 0
 32995  0174C6  6D66               	negf	___awdiv@quotient& (0+255),b
 32996  0174C8  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 32997  0174CA  B0D8               	btfsc	status,0,c
 32998  0174CC  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 32999  0174CE                     l2727:
 33000                           
 33001                           ; BSR set to: 0
 33002                           
 33003                           ; BSR set to: 0
 33004  0174CE  C066  F060         	movff	___awdiv@quotient,?___awdiv
 33005  0174D2  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 33006  0174D6  0012               	return	
 33007  0174D8                     __end_of___awdiv:
 33008                           	opt stack 0
 33009                           tosu	equ	0xFFF
 33010                           tosh	equ	0xFFE
 33011                           tosl	equ	0xFFD
 33012                           pclath	equ	0xFFA
 33013                           tblptru	equ	0xFF8
 33014                           tblptrh	equ	0xFF7
 33015                           tblptrl	equ	0xFF6
 33016                           tablat	equ	0xFF5
 33017                           prodh	equ	0xFF4
 33018                           prodl	equ	0xFF3
 33019                           intcon	equ	0xFF2
 33020                           indf0	equ	0xFEF
 33021                           postinc0	equ	0xFEE
 33022                           fsr0h	equ	0xFEA
 33023                           fsr0l	equ	0xFE9
 33024                           wreg	equ	0xFE8
 33025                           indf1	equ	0xFE7
 33026                           postdec1	equ	0xFE5
 33027                           fsr1h	equ	0xFE2
 33028                           fsr1l	equ	0xFE1
 33029                           indf2	equ	0xFDF
 33030                           postinc2	equ	0xFDE
 33031                           postdec2	equ	0xFDD
 33032                           plusw2	equ	0xFDB
 33033                           fsr2h	equ	0xFDA
 33034                           fsr2l	equ	0xFD9
 33035                           status	equ	0xFD8
 33036                           
 33037 ;; *************** function _HMI_SetNumber *****************
 33038 ;; Defined at:
 33039 ;;		line 221 in file "HMI.c"
 33040 ;; Parameters:    Size  Location     Type
 33041 ;;  pInput          2   22[BANK0 ] int 
 33042 ;; Auto vars:     Size  Location     Type
 33043 ;;		None
 33044 ;; Return value:  Size  Location     Type
 33045 ;;                  1    wreg      void 
 33046 ;; Registers used:
 33047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 33048 ;; Tracked objects:
 33049 ;;		On entry : 0/0
 33050 ;;		On exit  : 0/0
 33051 ;;		Unchanged: 0/0
 33052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33057 ;;Total ram usage:        2 bytes
 33058 ;; Hardware stack levels used:    1
 33059 ;; Hardware stack levels required when called:    9
 33060 ;; This function calls:
 33061 ;;		_HMI_SetSegments
 33062 ;;		_itos
 33063 ;; This function is called by:
 33064 ;;		_Event_TestButton
 33065 ;;		_main
 33066 ;;		_ADCAverage
 33067 ;;		_Event_HMI_UpButton
 33068 ;;		_Event_HMI_DownButton
 33069 ;; This function uses a non-reentrant model
 33070 ;;
 33071                           
 33072                           	psect	text145
 33073  0188F6                     __ptext145:
 33074                           	opt stack 0
 33075  0188F6                     _HMI_SetNumber:
 33076                           	opt stack 19
 33077                           
 33078                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 33079                           
 33080                           ; BSR set to: 0
 33081                           ;incstack = 0
 33082  0188F6  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 33083  0188FA  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 33084  0188FE  0E5A               	movlw	low _HMIBoard
 33085  018900  0100               	movlb	0	; () banked
 33086  018902  6F6E               	movwf	itos@destination& (0+255),b
 33087  018904  0E02               	movlw	high _HMIBoard
 33088  018906  6F6F               	movwf	(itos@destination+1)& (0+255),b
 33089  018908  EC3E  F0B5         	call	_itos	;wreg free
 33090                           
 33091                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 33092  01890C  0E5A               	movlw	low _HMIBoard
 33093  01890E  0100               	movlb	0	; () banked
 33094  018910  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 33095  018912  0E02               	movlw	high _HMIBoard
 33096  018914  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 33097  018916  EC9B  F0B7         	call	_HMI_SetSegments	;wreg free
 33098  01891A  0012               	return		;funcret
 33099  01891C                     __end_of_HMI_SetNumber:
 33100                           	opt stack 0
 33101                           tosu	equ	0xFFF
 33102                           tosh	equ	0xFFE
 33103                           tosl	equ	0xFFD
 33104                           pclath	equ	0xFFA
 33105                           tblptru	equ	0xFF8
 33106                           tblptrh	equ	0xFF7
 33107                           tblptrl	equ	0xFF6
 33108                           tablat	equ	0xFF5
 33109                           prodh	equ	0xFF4
 33110                           prodl	equ	0xFF3
 33111                           intcon	equ	0xFF2
 33112                           indf0	equ	0xFEF
 33113                           postinc0	equ	0xFEE
 33114                           fsr0h	equ	0xFEA
 33115                           fsr0l	equ	0xFE9
 33116                           wreg	equ	0xFE8
 33117                           indf1	equ	0xFE7
 33118                           postdec1	equ	0xFE5
 33119                           fsr1h	equ	0xFE2
 33120                           fsr1l	equ	0xFE1
 33121                           indf2	equ	0xFDF
 33122                           postinc2	equ	0xFDE
 33123                           postdec2	equ	0xFDD
 33124                           plusw2	equ	0xFDB
 33125                           fsr2h	equ	0xFDA
 33126                           fsr2l	equ	0xFD9
 33127                           status	equ	0xFD8
 33128                           
 33129 ;; *************** function _itos *****************
 33130 ;; Defined at:
 33131 ;;		line 369 in file "Library/Types.c"
 33132 ;; Parameters:    Size  Location     Type
 33133 ;;  input           2   12[BANK0 ] unsigned short 
 33134 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 33135 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33136 ;; Auto vars:     Size  Location     Type
 33137 ;;  Out             2   20[BANK0 ] unsigned short 
 33138 ;;  Length          2   18[BANK0 ] unsigned short 
 33139 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 33140 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33141 ;; Return value:  Size  Location     Type
 33142 ;;                  1    wreg      void 
 33143 ;; Registers used:
 33144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 33145 ;; Tracked objects:
 33146 ;;		On entry : 0/0
 33147 ;;		On exit  : 0/0
 33148 ;;		Unchanged: 0/0
 33149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33151 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33153 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33154 ;;Total ram usage:       10 bytes
 33155 ;; Hardware stack levels used:    1
 33156 ;; Hardware stack levels required when called:    8
 33157 ;; This function calls:
 33158 ;;		___lwdiv
 33159 ;;		___lwmod
 33160 ;;		_reverse
 33161 ;; This function is called by:
 33162 ;;		_HMI_SetNumber
 33163 ;; This function uses a non-reentrant model
 33164 ;;
 33165                           
 33166                           	psect	text146
 33167  016A7C                     __ptext146:
 33168                           	opt stack 0
 33169  016A7C                     _itos:
 33170                           	opt stack 19
 33171                           
 33172                           ;Types.c: 371: UINT16 Out = input;
 33173                           
 33174                           ;incstack = 0
 33175  016A7C  C06C  F074         	movff	itos@input,itos@Out
 33176  016A80  C06D  F075         	movff	itos@input+1,itos@Out+1
 33177                           
 33178                           ;Types.c: 372: UINT16 Length = 0;
 33179  016A84  0E00               	movlw	0
 33180  016A86  0100               	movlb	0	; () banked
 33181  016A88  6F73               	movwf	(itos@Length+1)& (0+255),b
 33182  016A8A  0E00               	movlw	0
 33183  016A8C  6F72               	movwf	itos@Length& (0+255),b
 33184                           
 33185                           ; BSR set to: 0
 33186                           ;Types.c: 373: char *Data = destination;
 33187  016A8E  C06E  F070         	movff	itos@destination,itos@Data
 33188  016A92  C06F  F071         	movff	itos@destination+1,itos@Data+1
 33189                           
 33190                           ; BSR set to: 0
 33191                           ;Types.c: 374: if(Out == 0)
 33192  016A96  5174               	movf	itos@Out& (0+255),w,b
 33193  016A98  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 33194  016A9A  A4D8               	btfss	status,2,c
 33195  016A9C  D030               	goto	l929
 33196                           
 33197                           ; BSR set to: 0
 33198                           ;Types.c: 375: {
 33199                           ;Types.c: 376: Data[0] = (UINT16)'0';
 33200  016A9E  C070  FFD9         	movff	itos@Data,fsr2l
 33201  016AA2  C071  FFDA         	movff	itos@Data+1,fsr2h
 33202  016AA6  0E30               	movlw	48
 33203  016AA8  6EDF               	movwf	indf2,c
 33204                           
 33205                           ; BSR set to: 0
 33206                           ;Types.c: 377: Length = 1;
 33207  016AAA  0E00               	movlw	0
 33208  016AAC  6F73               	movwf	(itos@Length+1)& (0+255),b
 33209  016AAE  0E01               	movlw	1
 33210  016AB0  6F72               	movwf	itos@Length& (0+255),b
 33211                           
 33212                           ;Types.c: 378: }
 33213  016AB2  D039               	goto	l928
 33214  016AB4                     
 33215                           ; BSR set to: 0
 33216                           ;Types.c: 382: {
 33217                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 33218                           
 33219                           ; BSR set to: 0
 33220  016AB4  C074  F067         	movff	itos@Out,___lwmod@dividend
 33221  016AB8  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 33222  016ABC  0E00               	movlw	0
 33223  016ABE  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 33224  016AC0  0E0A               	movlw	10
 33225  016AC2  6F69               	movwf	___lwmod@divisor& (0+255),b
 33226  016AC4  ECEC  F0C1         	call	___lwmod	;wreg free
 33227  016AC8  0100               	movlb	0	; () banked
 33228  016ACA  5167               	movf	?___lwmod& (0+255),w,b
 33229  016ACC  0F30               	addlw	48
 33230  016ACE  C070  FFD9         	movff	itos@Data,fsr2l
 33231  016AD2  C071  FFDA         	movff	itos@Data+1,fsr2h
 33232  016AD6  6EDF               	movwf	indf2,c
 33233                           
 33234                           ; BSR set to: 0
 33235                           ;Types.c: 384: Out /= 10;
 33236  016AD8  C074  F060         	movff	itos@Out,___lwdiv@dividend
 33237  016ADC  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 33238  016AE0  0E00               	movlw	0
 33239  016AE2  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 33240  016AE4  0E0A               	movlw	10
 33241  016AE6  6F62               	movwf	___lwdiv@divisor& (0+255),b
 33242  016AE8  EC90  F0BF         	call	___lwdiv	;wreg free
 33243  016AEC  C060  F074         	movff	?___lwdiv,itos@Out
 33244  016AF0  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 33245                           
 33246                           ;Types.c: 385: Length ++;
 33247  016AF4  0100               	movlb	0	; () banked
 33248  016AF6  4B72               	infsnz	itos@Length& (0+255),f,b
 33249  016AF8  2B73               	incf	(itos@Length+1)& (0+255),f,b
 33250                           
 33251                           ; BSR set to: 0
 33252                           ;Types.c: 386: Data++;
 33253  016AFA  4B70               	infsnz	itos@Data& (0+255),f,b
 33254  016AFC  2B71               	incf	(itos@Data+1)& (0+255),f,b
 33255  016AFE                     l929:
 33256                           
 33257                           ; BSR set to: 0
 33258                           
 33259                           ; BSR set to: 0
 33260  016AFE  5174               	movf	itos@Out& (0+255),w,b
 33261  016B00  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 33262  016B02  B4D8               	btfsc	status,2,c
 33263  016B04  D006               	goto	u12240
 33264                           
 33265                           ; BSR set to: 0
 33266  016B06  5173               	movf	(itos@Length+1)& (0+255),w,b
 33267  016B08  E104               	bnz	l14881
 33268  016B0A  0E06               	movlw	6
 33269  016B0C  5D72               	subwf	itos@Length& (0+255),w,b
 33270  016B0E  A0D8               	btfss	status,0,c
 33271  016B10  D7D1               	goto	l930
 33272  016B12                     u12240:
 33273  016B12                     l14881:
 33274                           
 33275                           ; BSR set to: 0
 33276                           ;Types.c: 387: }
 33277                           ;Types.c: 388: reverse(destination, Length);
 33278  016B12  C06E  F060         	movff	itos@destination,reverse@input
 33279  016B16  C06F  F061         	movff	itos@destination+1,reverse@input+1
 33280  016B1A  C072  F062         	movff	itos@Length,reverse@length
 33281  016B1E  C073  F063         	movff	itos@Length+1,reverse@length+1
 33282  016B22  EC66  F0BF         	call	_reverse	;wreg free
 33283  016B26                     l928:
 33284                           
 33285                           ;Types.c: 389: }
 33286                           ;Types.c: 390: destination[Length] = '\0';
 33287  016B26  0100               	movlb	0	; () banked
 33288  016B28  5172               	movf	itos@Length& (0+255),w,b
 33289  016B2A  256E               	addwf	itos@destination& (0+255),w,b
 33290  016B2C  6ED9               	movwf	fsr2l,c
 33291  016B2E  5173               	movf	(itos@Length+1)& (0+255),w,b
 33292  016B30  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 33293  016B32  6EDA               	movwf	fsr2h,c
 33294  016B34  0E00               	movlw	0
 33295  016B36  6EDF               	movwf	indf2,c
 33296                           
 33297                           ; BSR set to: 0
 33298  016B38  0012               	return		;funcret
 33299  016B3A                     __end_of_itos:
 33300                           	opt stack 0
 33301                           tosu	equ	0xFFF
 33302                           tosh	equ	0xFFE
 33303                           tosl	equ	0xFFD
 33304                           pclath	equ	0xFFA
 33305                           tblptru	equ	0xFF8
 33306                           tblptrh	equ	0xFF7
 33307                           tblptrl	equ	0xFF6
 33308                           tablat	equ	0xFF5
 33309                           prodh	equ	0xFF4
 33310                           prodl	equ	0xFF3
 33311                           intcon	equ	0xFF2
 33312                           indf0	equ	0xFEF
 33313                           postinc0	equ	0xFEE
 33314                           fsr0h	equ	0xFEA
 33315                           fsr0l	equ	0xFE9
 33316                           wreg	equ	0xFE8
 33317                           indf1	equ	0xFE7
 33318                           postdec1	equ	0xFE5
 33319                           fsr1h	equ	0xFE2
 33320                           fsr1l	equ	0xFE1
 33321                           indf2	equ	0xFDF
 33322                           postinc2	equ	0xFDE
 33323                           postdec2	equ	0xFDD
 33324                           plusw2	equ	0xFDB
 33325                           fsr2h	equ	0xFDA
 33326                           fsr2l	equ	0xFD9
 33327                           status	equ	0xFD8
 33328                           
 33329 ;; *************** function _reverse *****************
 33330 ;; Defined at:
 33331 ;;		line 357 in file "Library/Types.c"
 33332 ;; Parameters:    Size  Location     Type
 33333 ;;  input           2    0[BANK0 ] PTR unsigned char 
 33334 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33335 ;;  length          2    2[BANK0 ] unsigned short 
 33336 ;; Auto vars:     Size  Location     Type
 33337 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 33338 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33339 ;;  tempVar         1    4[BANK0 ] unsigned char 
 33340 ;; Return value:  Size  Location     Type
 33341 ;;                  1    wreg      void 
 33342 ;; Registers used:
 33343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 33344 ;; Tracked objects:
 33345 ;;		On entry : 0/0
 33346 ;;		On exit  : 0/0
 33347 ;;		Unchanged: 0/0
 33348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33350 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33352 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33353 ;;Total ram usage:        7 bytes
 33354 ;; Hardware stack levels used:    1
 33355 ;; Hardware stack levels required when called:    7
 33356 ;; This function calls:
 33357 ;;		Nothing
 33358 ;; This function is called by:
 33359 ;;		_itos
 33360 ;; This function uses a non-reentrant model
 33361 ;;
 33362                           
 33363                           	psect	text147
 33364  017ECC                     __ptext147:
 33365                           	opt stack 0
 33366  017ECC                     _reverse:
 33367                           	opt stack 19
 33368                           
 33369                           ;Types.c: 359: char tempVar,
 33370                           ;Types.c: 360: *iterator = input + length;
 33371                           
 33372                           ; BSR set to: 0
 33373                           ;incstack = 0
 33374  017ECC  0100               	movlb	0	; () banked
 33375  017ECE  5162               	movf	reverse@length& (0+255),w,b
 33376  017ED0  2560               	addwf	reverse@input& (0+255),w,b
 33377  017ED2  6F65               	movwf	reverse@iterator& (0+255),b
 33378  017ED4  5163               	movf	(reverse@length+1)& (0+255),w,b
 33379  017ED6  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 33380  017ED8  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 33381                           
 33382                           ;Types.c: 362: while ( --iterator > input )
 33383  017EDA  D018               	goto	l921
 33384  017EDC                     
 33385                           ; BSR set to: 0
 33386                           ;Types.c: 363: {
 33387                           ;Types.c: 364: tempVar = *input;
 33388                           
 33389                           ; BSR set to: 0
 33390  017EDC  C060  FFD9         	movff	reverse@input,fsr2l
 33391  017EE0  C061  FFDA         	movff	reverse@input+1,fsr2h
 33392  017EE4  50DF               	movf	indf2,w,c
 33393  017EE6  6F64               	movwf	reverse@tempVar& (0+255),b
 33394                           
 33395                           ; BSR set to: 0
 33396                           ;Types.c: 365: *input++=*iterator;
 33397  017EE8  C065  FFD9         	movff	reverse@iterator,fsr2l
 33398  017EEC  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 33399  017EF0  C060  FFE1         	movff	reverse@input,fsr1l
 33400  017EF4  C061  FFE2         	movff	reverse@input+1,fsr1h
 33401  017EF8  CFDF FFE7          	movff	indf2,indf1
 33402                           
 33403                           ; BSR set to: 0
 33404  017EFC  4B60               	infsnz	reverse@input& (0+255),f,b
 33405  017EFE  2B61               	incf	(reverse@input+1)& (0+255),f,b
 33406                           
 33407                           ; BSR set to: 0
 33408                           ;Types.c: 366: *iterator=tempVar;
 33409  017F00  C065  FFD9         	movff	reverse@iterator,fsr2l
 33410  017F04  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 33411  017F08  C064  FFDF         	movff	reverse@tempVar,indf2
 33412  017F0C                     l921:
 33413                           
 33414                           ; BSR set to: 0
 33415                           
 33416                           ; BSR set to: 0
 33417  017F0C  0765               	decf	reverse@iterator& (0+255),f,b
 33418  017F0E  A0D8               	btfss	status,0,c
 33419  017F10  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 33420  017F12  5165               	movf	reverse@iterator& (0+255),w,b
 33421  017F14  5D60               	subwf	reverse@input& (0+255),w,b
 33422  017F16  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 33423  017F18  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 33424  017F1A  B0D8               	btfsc	status,0,c
 33425  017F1C  0012               	return	
 33426  017F1E  D7DE               	goto	l922
 33427  017F20                     __end_of_reverse:
 33428                           	opt stack 0
 33429                           tosu	equ	0xFFF
 33430                           tosh	equ	0xFFE
 33431                           tosl	equ	0xFFD
 33432                           pclath	equ	0xFFA
 33433                           tblptru	equ	0xFF8
 33434                           tblptrh	equ	0xFF7
 33435                           tblptrl	equ	0xFF6
 33436                           tablat	equ	0xFF5
 33437                           prodh	equ	0xFF4
 33438                           prodl	equ	0xFF3
 33439                           intcon	equ	0xFF2
 33440                           indf0	equ	0xFEF
 33441                           postinc0	equ	0xFEE
 33442                           fsr0h	equ	0xFEA
 33443                           fsr0l	equ	0xFE9
 33444                           wreg	equ	0xFE8
 33445                           indf1	equ	0xFE7
 33446                           postdec1	equ	0xFE5
 33447                           fsr1h	equ	0xFE2
 33448                           fsr1l	equ	0xFE1
 33449                           indf2	equ	0xFDF
 33450                           postinc2	equ	0xFDE
 33451                           postdec2	equ	0xFDD
 33452                           plusw2	equ	0xFDB
 33453                           fsr2h	equ	0xFDA
 33454                           fsr2l	equ	0xFD9
 33455                           status	equ	0xFD8
 33456                           
 33457 ;; *************** function ___lwmod *****************
 33458 ;; Defined at:
 33459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 33460 ;; Parameters:    Size  Location     Type
 33461 ;;  dividend        2    7[BANK0 ] unsigned int 
 33462 ;;  divisor         2    9[BANK0 ] unsigned int 
 33463 ;; Auto vars:     Size  Location     Type
 33464 ;;  counter         1   11[BANK0 ] unsigned char 
 33465 ;; Return value:  Size  Location     Type
 33466 ;;                  2    7[BANK0 ] unsigned int 
 33467 ;; Registers used:
 33468 ;;		wreg, status,2, status,0
 33469 ;; Tracked objects:
 33470 ;;		On entry : 0/0
 33471 ;;		On exit  : 0/0
 33472 ;;		Unchanged: 0/0
 33473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33474 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33477 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33478 ;;Total ram usage:        5 bytes
 33479 ;; Hardware stack levels used:    1
 33480 ;; Hardware stack levels required when called:    7
 33481 ;; This function calls:
 33482 ;;		Nothing
 33483 ;; This function is called by:
 33484 ;;		_itos
 33485 ;;		_printf
 33486 ;; This function uses a non-reentrant model
 33487 ;;
 33488                           
 33489                           	psect	text148
 33490  0183D8                     __ptext148:
 33491                           	opt stack 0
 33492  0183D8                     ___lwmod:
 33493                           	opt stack 22
 33494                           
 33495                           ; BSR set to: 0
 33496                           ;incstack = 0
 33497  0183D8  0100               	movlb	0	; () banked
 33498  0183DA  5169               	movf	___lwmod@divisor& (0+255),w,b
 33499  0183DC  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 33500  0183DE  B4D8               	btfsc	status,2,c
 33501  0183E0  D018               	goto	l2969
 33502                           
 33503                           ; BSR set to: 0
 33504  0183E2  0E01               	movlw	1
 33505  0183E4  6F6B               	movwf	___lwmod@counter& (0+255),b
 33506  0183E6  D004               	goto	l2964
 33507  0183E8                     
 33508                           ; BSR set to: 0
 33509                           
 33510                           ; BSR set to: 0
 33511  0183E8  90D8               	bcf	status,0,c
 33512  0183EA  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 33513  0183EC  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 33514  0183EE  2B6B               	incf	___lwmod@counter& (0+255),f,b
 33515  0183F0                     l2964:
 33516                           
 33517                           ; BSR set to: 0
 33518                           
 33519                           ; BSR set to: 0
 33520  0183F0  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 33521  0183F2  D7FA               	goto	l2965
 33522  0183F4                     u12000:
 33523                           
 33524                           ; BSR set to: 0
 33525                           
 33526                           ; BSR set to: 0
 33527                           
 33528                           ; BSR set to: 0
 33529  0183F4  5169               	movf	___lwmod@divisor& (0+255),w,b
 33530  0183F6  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 33531  0183F8  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 33532  0183FA  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 33533  0183FC  A0D8               	btfss	status,0,c
 33534  0183FE  D004               	goto	l2968
 33535                           
 33536                           ; BSR set to: 0
 33537  018400  5169               	movf	___lwmod@divisor& (0+255),w,b
 33538  018402  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 33539  018404  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 33540  018406  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 33541  018408                     l2968:
 33542                           
 33543                           ; BSR set to: 0
 33544                           
 33545                           ; BSR set to: 0
 33546  018408  90D8               	bcf	status,0,c
 33547  01840A  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 33548  01840C  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 33549                           
 33550                           ; BSR set to: 0
 33551  01840E  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 33552  018410  D7F1               	goto	u12000
 33553  018412                     l2969:
 33554                           
 33555                           ; BSR set to: 0
 33556                           
 33557                           ; BSR set to: 0
 33558  018412  C067  F067         	movff	___lwmod@dividend,?___lwmod
 33559  018416  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 33560                           
 33561                           ; BSR set to: 0
 33562  01841A  0012               	return		;funcret
 33563  01841C                     __end_of___lwmod:
 33564                           	opt stack 0
 33565                           tosu	equ	0xFFF
 33566                           tosh	equ	0xFFE
 33567                           tosl	equ	0xFFD
 33568                           pclath	equ	0xFFA
 33569                           tblptru	equ	0xFF8
 33570                           tblptrh	equ	0xFF7
 33571                           tblptrl	equ	0xFF6
 33572                           tablat	equ	0xFF5
 33573                           prodh	equ	0xFF4
 33574                           prodl	equ	0xFF3
 33575                           intcon	equ	0xFF2
 33576                           indf0	equ	0xFEF
 33577                           postinc0	equ	0xFEE
 33578                           fsr0h	equ	0xFEA
 33579                           fsr0l	equ	0xFE9
 33580                           wreg	equ	0xFE8
 33581                           indf1	equ	0xFE7
 33582                           postdec1	equ	0xFE5
 33583                           fsr1h	equ	0xFE2
 33584                           fsr1l	equ	0xFE1
 33585                           indf2	equ	0xFDF
 33586                           postinc2	equ	0xFDE
 33587                           postdec2	equ	0xFDD
 33588                           plusw2	equ	0xFDB
 33589                           fsr2h	equ	0xFDA
 33590                           fsr2l	equ	0xFD9
 33591                           status	equ	0xFD8
 33592                           
 33593 ;; *************** function ___lwdiv *****************
 33594 ;; Defined at:
 33595 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 33596 ;; Parameters:    Size  Location     Type
 33597 ;;  dividend        2    0[BANK0 ] unsigned int 
 33598 ;;  divisor         2    2[BANK0 ] unsigned int 
 33599 ;; Auto vars:     Size  Location     Type
 33600 ;;  quotient        2    5[BANK0 ] unsigned int 
 33601 ;;  counter         1    4[BANK0 ] unsigned char 
 33602 ;; Return value:  Size  Location     Type
 33603 ;;                  2    0[BANK0 ] unsigned int 
 33604 ;; Registers used:
 33605 ;;		wreg, status,2, status,0
 33606 ;; Tracked objects:
 33607 ;;		On entry : 0/0
 33608 ;;		On exit  : 0/0
 33609 ;;		Unchanged: 0/0
 33610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33611 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33612 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33614 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33615 ;;Total ram usage:        7 bytes
 33616 ;; Hardware stack levels used:    1
 33617 ;; Hardware stack levels required when called:    7
 33618 ;; This function calls:
 33619 ;;		Nothing
 33620 ;; This function is called by:
 33621 ;;		_itos
 33622 ;;		_printf
 33623 ;; This function uses a non-reentrant model
 33624 ;;
 33625                           
 33626                           	psect	text149
 33627  017F20                     __ptext149:
 33628                           	opt stack 0
 33629  017F20                     ___lwdiv:
 33630                           	opt stack 22
 33631                           
 33632                           ; BSR set to: 0
 33633                           ;incstack = 0
 33634  017F20  0E00               	movlw	0
 33635  017F22  0100               	movlb	0	; () banked
 33636  017F24  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 33637  017F26  0E00               	movlw	0
 33638  017F28  6F65               	movwf	___lwdiv@quotient& (0+255),b
 33639                           
 33640                           ; BSR set to: 0
 33641  017F2A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 33642  017F2C  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 33643  017F2E  B4D8               	btfsc	status,2,c
 33644  017F30  D01C               	goto	l2959
 33645                           
 33646                           ; BSR set to: 0
 33647  017F32  0E01               	movlw	1
 33648  017F34  6F64               	movwf	___lwdiv@counter& (0+255),b
 33649  017F36  D004               	goto	l2954
 33650  017F38                     
 33651                           ; BSR set to: 0
 33652                           
 33653                           ; BSR set to: 0
 33654  017F38  90D8               	bcf	status,0,c
 33655  017F3A  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 33656  017F3C  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 33657  017F3E  2B64               	incf	___lwdiv@counter& (0+255),f,b
 33658  017F40                     l2954:
 33659                           
 33660                           ; BSR set to: 0
 33661                           
 33662                           ; BSR set to: 0
 33663  017F40  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 33664  017F42  D7FA               	goto	l2955
 33665  017F44                     u11970:
 33666                           
 33667                           ; BSR set to: 0
 33668                           
 33669                           ; BSR set to: 0
 33670                           
 33671                           ; BSR set to: 0
 33672  017F44  90D8               	bcf	status,0,c
 33673  017F46  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 33674  017F48  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 33675                           
 33676                           ; BSR set to: 0
 33677  017F4A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 33678  017F4C  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 33679  017F4E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 33680  017F50  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 33681  017F52  A0D8               	btfss	status,0,c
 33682  017F54  D005               	goto	l2958
 33683                           
 33684                           ; BSR set to: 0
 33685  017F56  5162               	movf	___lwdiv@divisor& (0+255),w,b
 33686  017F58  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 33687  017F5A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 33688  017F5C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 33689                           
 33690                           ; BSR set to: 0
 33691  017F5E  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 33692  017F60                     l2958:
 33693                           
 33694                           ; BSR set to: 0
 33695                           
 33696                           ; BSR set to: 0
 33697  017F60  90D8               	bcf	status,0,c
 33698  017F62  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 33699  017F64  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 33700                           
 33701                           ; BSR set to: 0
 33702  017F66  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 33703  017F68  D7ED               	goto	u11970
 33704  017F6A                     l2959:
 33705                           
 33706                           ; BSR set to: 0
 33707                           
 33708                           ; BSR set to: 0
 33709  017F6A  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 33710  017F6E  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 33711                           
 33712                           ; BSR set to: 0
 33713  017F72  0012               	return		;funcret
 33714  017F74                     __end_of___lwdiv:
 33715                           	opt stack 0
 33716                           tosu	equ	0xFFF
 33717                           tosh	equ	0xFFE
 33718                           tosl	equ	0xFFD
 33719                           pclath	equ	0xFFA
 33720                           tblptru	equ	0xFF8
 33721                           tblptrh	equ	0xFF7
 33722                           tblptrl	equ	0xFF6
 33723                           tablat	equ	0xFF5
 33724                           prodh	equ	0xFF4
 33725                           prodl	equ	0xFF3
 33726                           intcon	equ	0xFF2
 33727                           indf0	equ	0xFEF
 33728                           postinc0	equ	0xFEE
 33729                           fsr0h	equ	0xFEA
 33730                           fsr0l	equ	0xFE9
 33731                           wreg	equ	0xFE8
 33732                           indf1	equ	0xFE7
 33733                           postdec1	equ	0xFE5
 33734                           fsr1h	equ	0xFE2
 33735                           fsr1l	equ	0xFE1
 33736                           indf2	equ	0xFDF
 33737                           postinc2	equ	0xFDE
 33738                           postdec2	equ	0xFDD
 33739                           plusw2	equ	0xFDB
 33740                           fsr2h	equ	0xFDA
 33741                           fsr2l	equ	0xFD9
 33742                           status	equ	0xFD8
 33743                           
 33744 ;; *************** function _HMI_SetSegments *****************
 33745 ;; Defined at:
 33746 ;;		line 226 in file "HMI.c"
 33747 ;; Parameters:    Size  Location     Type
 33748 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 33749 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 33750 ;; Auto vars:     Size  Location     Type
 33751 ;;  in              2    4[BANK0 ] unsigned short 
 33752 ;; Return value:  Size  Location     Type
 33753 ;;                  1    wreg      void 
 33754 ;; Registers used:
 33755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 33756 ;; Tracked objects:
 33757 ;;		On entry : 0/0
 33758 ;;		On exit  : 0/0
 33759 ;;		Unchanged: 0/0
 33760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33761 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33764 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33765 ;;Total ram usage:        5 bytes
 33766 ;; Hardware stack levels used:    1
 33767 ;; Hardware stack levels required when called:    8
 33768 ;; This function calls:
 33769 ;;		_ToSegment
 33770 ;; This function is called by:
 33771 ;;		_HMI_SetNumber
 33772 ;; This function uses a non-reentrant model
 33773 ;;
 33774                           
 33775                           	psect	text150
 33776  016F36                     __ptext150:
 33777                           	opt stack 0
 33778  016F36                     _HMI_SetSegments:
 33779                           	opt stack 19
 33780                           
 33781                           ;HMI.c: 228: UINT16 in=0;
 33782                           
 33783                           ; BSR set to: 0
 33784                           ;incstack = 0
 33785  016F36  0E00               	movlw	0
 33786  016F38  0100               	movlb	0	; () banked
 33787  016F3A  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 33788  016F3C  0E00               	movlw	0
 33789  016F3E  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 33790                           
 33791                           ;HMI.c: 229: while(*pString)
 33792  016F40  D02E               	goto	l1202
 33793  016F42                     
 33794                           ; BSR set to: 0
 33795                           ;HMI.c: 230: {
 33796                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 33797                           
 33798                           ; BSR set to: 0
 33799  016F42  0E5A               	movlw	low _HMIBoard
 33800  016F44  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33801  016F46  6ED9               	movwf	fsr2l,c
 33802  016F48  0E02               	movlw	high _HMIBoard
 33803  016F4A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33804  016F4C  6EDA               	movwf	fsr2h,c
 33805  016F4E  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 33806  016F52  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 33807  016F56  50E7               	movf	indf1,w,c
 33808  016F58  EC4B  F0A2         	call	_ToSegment
 33809  016F5C  6EDF               	movwf	indf2,c
 33810                           
 33811                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 33812  016F5E  0E5A               	movlw	low _HMIBoard
 33813  016F60  0100               	movlb	0	; () banked
 33814  016F62  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33815  016F64  6ED9               	movwf	fsr2l,c
 33816  016F66  0E02               	movlw	high _HMIBoard
 33817  016F68  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33818  016F6A  6EDA               	movwf	fsr2h,c
 33819  016F6C  0E80               	movlw	128
 33820  016F6E  18DE               	xorwf	postinc2,w,c
 33821  016F70  A4D8               	btfss	status,2,c
 33822  016F72  D00B               	goto	l1201
 33823                           
 33824                           ; BSR set to: 0
 33825                           ;HMI.c: 234: {
 33826                           ;HMI.c: 235: in--;
 33827  016F74  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 33828  016F76  A0D8               	btfss	status,0,c
 33829  016F78  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 33830                           
 33831                           ; BSR set to: 0
 33832                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 33833  016F7A  0E5A               	movlw	low _HMIBoard
 33834  016F7C  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33835  016F7E  6ED9               	movwf	fsr2l,c
 33836  016F80  0E02               	movlw	high _HMIBoard
 33837  016F82  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33838  016F84  6EDA               	movwf	fsr2h,c
 33839  016F86  0E00               	movlw	0
 33840  016F88  8EDB               	bsf	plusw2,7,c
 33841  016F8A                     l1201:
 33842                           
 33843                           ; BSR set to: 0
 33844                           ;HMI.c: 237: }
 33845                           ;HMI.c: 239: pString++;
 33846                           
 33847                           ; BSR set to: 0
 33848  016F8A  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 33849  016F8C  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 33850                           
 33851                           ; BSR set to: 0
 33852                           ;HMI.c: 240: in++;
 33853  016F8E  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 33854  016F90  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 33855                           
 33856                           ; BSR set to: 0
 33857                           ;HMI.c: 241: if (in>=6)
 33858  016F92  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 33859  016F94  E116               	bnz	l14967
 33860  016F96  0E06               	movlw	6
 33861  016F98  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 33862  016F9A  B0D8               	btfsc	status,0,c
 33863  016F9C  D012               	goto	l1204
 33864  016F9E                     l1202:
 33865                           
 33866                           ; BSR set to: 0
 33867                           
 33868                           ; BSR set to: 0
 33869                           
 33870                           ; BSR set to: 0
 33871  016F9E  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 33872  016FA2  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 33873  016FA6  50DF               	movf	indf2,w,c
 33874  016FA8  B4D8               	btfsc	status,2,c
 33875  016FAA  D00B               	goto	l1204
 33876  016FAC  D7CA               	goto	l1200
 33877  016FAE                     
 33878                           ; BSR set to: 0
 33879                           ;HMI.c: 245: {
 33880                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 33881                           
 33882                           ; BSR set to: 0
 33883  016FAE  0E5A               	movlw	low _HMIBoard
 33884  016FB0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 33885  016FB2  6ED9               	movwf	fsr2l,c
 33886  016FB4  0E02               	movlw	high _HMIBoard
 33887  016FB6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 33888  016FB8  6EDA               	movwf	fsr2h,c
 33889  016FBA  0E00               	movlw	0
 33890  016FBC  6EDF               	movwf	indf2,c
 33891                           
 33892                           ; BSR set to: 0
 33893                           ;HMI.c: 247: in++;
 33894  016FBE  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 33895  016FC0  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 33896  016FC2                     l1204:
 33897  016FC2                     l14967:
 33898                           
 33899                           ; BSR set to: 0
 33900  016FC2  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 33901  016FC4  E105               	bnz	l1207
 33902  016FC6  0E06               	movlw	6
 33903  016FC8  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 33904  016FCA  B0D8               	btfsc	status,0,c
 33905  016FCC  0012               	return	
 33906  016FCE  D7EF               	goto	l1205
 33907  016FD0                     l1207:
 33908                           
 33909                           ; BSR set to: 0
 33910  016FD0  0012               	return		;funcret
 33911  016FD2                     __end_of_HMI_SetSegments:
 33912                           	opt stack 0
 33913                           tosu	equ	0xFFF
 33914                           tosh	equ	0xFFE
 33915                           tosl	equ	0xFFD
 33916                           pclath	equ	0xFFA
 33917                           tblptru	equ	0xFF8
 33918                           tblptrh	equ	0xFF7
 33919                           tblptrl	equ	0xFF6
 33920                           tablat	equ	0xFF5
 33921                           prodh	equ	0xFF4
 33922                           prodl	equ	0xFF3
 33923                           intcon	equ	0xFF2
 33924                           indf0	equ	0xFEF
 33925                           postinc0	equ	0xFEE
 33926                           fsr0h	equ	0xFEA
 33927                           fsr0l	equ	0xFE9
 33928                           wreg	equ	0xFE8
 33929                           indf1	equ	0xFE7
 33930                           postdec1	equ	0xFE5
 33931                           fsr1h	equ	0xFE2
 33932                           fsr1l	equ	0xFE1
 33933                           indf2	equ	0xFDF
 33934                           postinc2	equ	0xFDE
 33935                           postdec2	equ	0xFDD
 33936                           plusw2	equ	0xFDB
 33937                           fsr2h	equ	0xFDA
 33938                           fsr2l	equ	0xFD9
 33939                           status	equ	0xFD8
 33940                           
 33941 ;; *************** function _ToSegment *****************
 33942 ;; Defined at:
 33943 ;;		line 284 in file "Library/Types.c"
 33944 ;; Parameters:    Size  Location     Type
 33945 ;;  pCHR            1    wreg     unsigned char 
 33946 ;; Auto vars:     Size  Location     Type
 33947 ;;  pCHR            1    0[BANK0 ] unsigned char 
 33948 ;; Return value:  Size  Location     Type
 33949 ;;                  1    wreg      unsigned char 
 33950 ;; Registers used:
 33951 ;;		wreg, status,2, status,0
 33952 ;; Tracked objects:
 33953 ;;		On entry : 0/0
 33954 ;;		On exit  : 0/0
 33955 ;;		Unchanged: 0/0
 33956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33961 ;;Total ram usage:        1 bytes
 33962 ;; Hardware stack levels used:    1
 33963 ;; Hardware stack levels required when called:    7
 33964 ;; This function calls:
 33965 ;;		Nothing
 33966 ;; This function is called by:
 33967 ;;		_HMI_SetSegments
 33968 ;; This function uses a non-reentrant model
 33969 ;;
 33970                           
 33971                           	psect	text151
 33972  014496                     __ptext151:
 33973                           	opt stack 0
 33974  014496                     _ToSegment:
 33975                           	opt stack 19
 33976                           
 33977                           ; BSR set to: 0
 33978                           ;incstack = 0
 33979                           ;ToSegment@pCHR stored from wreg
 33980  014496  0100               	movlb	0	; () banked
 33981  014498  6F60               	movwf	ToSegment@pCHR& (0+255),b
 33982                           
 33983                           ;Types.c: 286: switch(pCHR)
 33984  01449A  D07E               	goto	l853
 33985  01449C  0E3F               	movlw	63
 33986  01449E  0012               	return	
 33987  0144A0  0E06               	movlw	6
 33988  0144A2  0012               	return	
 33989  0144A4  0E5B               	movlw	91
 33990  0144A6  0012               	return	
 33991  0144A8  0E4F               	movlw	79
 33992  0144AA  0012               	return	
 33993  0144AC  0E66               	movlw	102
 33994  0144AE  0012               	return	
 33995  0144B0  0E6D               	movlw	109
 33996  0144B2  0012               	return	
 33997  0144B4  0E7D               	movlw	125
 33998  0144B6  0012               	return	
 33999  0144B8  0E07               	movlw	7
 34000  0144BA  0012               	return	
 34001  0144BC  0E7F               	movlw	127
 34002  0144BE  0012               	return	
 34003  0144C0  0E6F               	movlw	111
 34004  0144C2  0012               	return	
 34005  0144C4  0E5F               	movlw	95
 34006  0144C6  0012               	return	
 34007  0144C8  0E7C               	movlw	124
 34008  0144CA  0012               	return	
 34009  0144CC  0E58               	movlw	88
 34010  0144CE  0012               	return	
 34011  0144D0  0E5E               	movlw	94
 34012  0144D2  0012               	return	
 34013  0144D4  0E7B               	movlw	123
 34014  0144D6  0012               	return	
 34015  0144D8  0E71               	movlw	113
 34016  0144DA  0012               	return	
 34017  0144DC  0E6F               	movlw	111
 34018  0144DE  0012               	return	
 34019  0144E0  0E74               	movlw	116
 34020  0144E2  0012               	return	
 34021  0144E4  0E04               	movlw	4
 34022  0144E6  0012               	return	
 34023  0144E8  0E0E               	movlw	14
 34024  0144EA  0012               	return	
 34025  0144EC  0E7A               	movlw	122
 34026  0144EE  0012               	return	
 34027  0144F0  0E06               	movlw	6
 34028  0144F2  0012               	return	
 34029  0144F4  0E14               	movlw	20
 34030  0144F6  0012               	return	
 34031  0144F8  0E54               	movlw	84
 34032  0144FA  0012               	return	
 34033  0144FC  0E5C               	movlw	92
 34034  0144FE  0012               	return	
 34035  014500  0E73               	movlw	115
 34036  014502  0012               	return	
 34037  014504  0E67               	movlw	103
 34038  014506  0012               	return	
 34039  014508  0E50               	movlw	80
 34040  01450A  0012               	return	
 34041  01450C  0E6D               	movlw	109
 34042  01450E  0012               	return	
 34043  014510  0E78               	movlw	120
 34044  014512  0012               	return	
 34045  014514  0E1C               	movlw	28
 34046  014516  0012               	return	
 34047  014518  0E62               	movlw	98
 34048  01451A  0012               	return	
 34049  01451C  0E2A               	movlw	42
 34050  01451E  0012               	return	
 34051  014520  0E64               	movlw	100
 34052  014522  0012               	return	
 34053  014524  0E6E               	movlw	110
 34054  014526  0012               	return	
 34055  014528  0E5B               	movlw	91
 34056  01452A  0012               	return	
 34057  01452C  0E77               	movlw	119
 34058  01452E  0012               	return	
 34059  014530  0E7F               	movlw	127
 34060  014532  0012               	return	
 34061  014534  0E39               	movlw	57
 34062  014536  0012               	return	
 34063  014538  0E3F               	movlw	63
 34064  01453A  0012               	return	
 34065  01453C  0E79               	movlw	121
 34066  01453E  0012               	return	
 34067  014540  0E71               	movlw	113
 34068  014542  0012               	return	
 34069  014544  0E3D               	movlw	61
 34070  014546  0012               	return	
 34071  014548  0E76               	movlw	118
 34072  01454A  0012               	return	
 34073  01454C  0E06               	movlw	6
 34074  01454E  0012               	return	
 34075  014550  0E1E               	movlw	30
 34076  014552  0012               	return	
 34077  014554  0E57               	movlw	87
 34078  014556  0012               	return	
 34079  014558  0E38               	movlw	56
 34080  01455A  0012               	return	
 34081  01455C  0E76               	movlw	118
 34082  01455E  0012               	return	
 34083  014560  0E76               	movlw	118
 34084  014562  0012               	return	
 34085  014564  0E3F               	movlw	63
 34086  014566  0012               	return	
 34087  014568  0E73               	movlw	115
 34088  01456A  0012               	return	
 34089  01456C  0E3F               	movlw	63
 34090  01456E  0012               	return	
 34091  014570  0E77               	movlw	119
 34092  014572  0012               	return	
 34093  014574  0E6D               	movlw	109
 34094  014576  0012               	return	
 34095  014578  0E31               	movlw	49
 34096  01457A  0012               	return	
 34097  01457C  0E3E               	movlw	62
 34098  01457E  0012               	return	
 34099  014580  0E3E               	movlw	62
 34100  014582  0012               	return	
 34101  014584  0E7E               	movlw	126
 34102  014586  0012               	return	
 34103  014588  0E76               	movlw	118
 34104  01458A  0012               	return	
 34105  01458C  0E66               	movlw	102
 34106  01458E  0012               	return	
 34107  014590  0E5B               	movlw	91
 34108  014592  0012               	return	
 34109  014594  0E80               	movlw	128
 34110  014596  0012               	return	
 34111  014598                     l853:
 34112  014598  0100               	movlb	0	; () banked
 34113  01459A  5160               	movf	ToSegment@pCHR& (0+255),w,b
 34114                           
 34115                           ; Switch size 1, requested type "space"
 34116                           ; Number of cases is 63, Range of values is 46 to 122
 34117                           ; switch strategies available:
 34118                           ; Name         Instructions Cycles
 34119                           ; simple_byte          190    96 (average)
 34120                           ;	Chosen strategy is simple_byte
 34121  01459C  0A2E               	xorlw	46	; case 46
 34122  01459E  B4D8               	btfsc	status,2,c
 34123  0145A0  D7F9               	goto	l917
 34124  0145A2  0A1E               	xorlw	30	; case 48
 34125  0145A4  B4D8               	btfsc	status,2,c
 34126  0145A6  D77A               	goto	l854
 34127  0145A8  0A01               	xorlw	1	; case 49
 34128  0145AA  B4D8               	btfsc	status,2,c
 34129  0145AC  D779               	goto	l856
 34130  0145AE  0A03               	xorlw	3	; case 50
 34131  0145B0  B4D8               	btfsc	status,2,c
 34132  0145B2  D778               	goto	l857
 34133  0145B4  0A01               	xorlw	1	; case 51
 34134  0145B6  B4D8               	btfsc	status,2,c
 34135  0145B8  D777               	goto	l858
 34136  0145BA  0A07               	xorlw	7	; case 52
 34137  0145BC  B4D8               	btfsc	status,2,c
 34138  0145BE  D776               	goto	l859
 34139  0145C0  0A01               	xorlw	1	; case 53
 34140  0145C2  B4D8               	btfsc	status,2,c
 34141  0145C4  D775               	goto	l860
 34142  0145C6  0A03               	xorlw	3	; case 54
 34143  0145C8  B4D8               	btfsc	status,2,c
 34144  0145CA  D774               	goto	l861
 34145  0145CC  0A01               	xorlw	1	; case 55
 34146  0145CE  B4D8               	btfsc	status,2,c
 34147  0145D0  D773               	goto	l862
 34148  0145D2  0A0F               	xorlw	15	; case 56
 34149  0145D4  B4D8               	btfsc	status,2,c
 34150  0145D6  D772               	goto	l863
 34151  0145D8  0A01               	xorlw	1	; case 57
 34152  0145DA  B4D8               	btfsc	status,2,c
 34153  0145DC  D771               	goto	l864
 34154  0145DE  0A78               	xorlw	120	; case 65
 34155  0145E0  B4D8               	btfsc	status,2,c
 34156  0145E2  D7A4               	goto	l891
 34157  0145E4  0A03               	xorlw	3	; case 66
 34158  0145E6  B4D8               	btfsc	status,2,c
 34159  0145E8  D7A3               	goto	l892
 34160  0145EA  0A01               	xorlw	1	; case 67
 34161  0145EC  B4D8               	btfsc	status,2,c
 34162  0145EE  D7A2               	goto	l893
 34163  0145F0  0A07               	xorlw	7	; case 68
 34164  0145F2  B4D8               	btfsc	status,2,c
 34165  0145F4  D7A1               	goto	l894
 34166  0145F6  0A01               	xorlw	1	; case 69
 34167  0145F8  B4D8               	btfsc	status,2,c
 34168  0145FA  D7A0               	goto	l895
 34169  0145FC  0A03               	xorlw	3	; case 70
 34170  0145FE  B4D8               	btfsc	status,2,c
 34171  014600  D79F               	goto	l896
 34172  014602  0A01               	xorlw	1	; case 71
 34173  014604  B4D8               	btfsc	status,2,c
 34174  014606  D79E               	goto	l897
 34175  014608  0A0F               	xorlw	15	; case 72
 34176  01460A  B4D8               	btfsc	status,2,c
 34177  01460C  D79D               	goto	l898
 34178  01460E  0A01               	xorlw	1	; case 73
 34179  014610  B4D8               	btfsc	status,2,c
 34180  014612  D79C               	goto	l899
 34181  014614  0A03               	xorlw	3	; case 74
 34182  014616  B4D8               	btfsc	status,2,c
 34183  014618  D79B               	goto	l900
 34184  01461A  0A01               	xorlw	1	; case 75
 34185  01461C  B4D8               	btfsc	status,2,c
 34186  01461E  D79A               	goto	l901
 34187  014620  0A07               	xorlw	7	; case 76
 34188  014622  B4D8               	btfsc	status,2,c
 34189  014624  D799               	goto	l902
 34190  014626  0A01               	xorlw	1	; case 77
 34191  014628  B4D8               	btfsc	status,2,c
 34192  01462A  D798               	goto	l903
 34193  01462C  0A03               	xorlw	3	; case 78
 34194  01462E  B4D8               	btfsc	status,2,c
 34195  014630  D797               	goto	l904
 34196  014632  0A01               	xorlw	1	; case 79
 34197  014634  B4D8               	btfsc	status,2,c
 34198  014636  D796               	goto	l905
 34199  014638  0A1F               	xorlw	31	; case 80
 34200  01463A  B4D8               	btfsc	status,2,c
 34201  01463C  D795               	goto	l906
 34202  01463E  0A01               	xorlw	1	; case 81
 34203  014640  B4D8               	btfsc	status,2,c
 34204  014642  D794               	goto	l907
 34205  014644  0A03               	xorlw	3	; case 82
 34206  014646  B4D8               	btfsc	status,2,c
 34207  014648  D793               	goto	l908
 34208  01464A  0A01               	xorlw	1	; case 83
 34209  01464C  B4D8               	btfsc	status,2,c
 34210  01464E  D792               	goto	l909
 34211  014650  0A07               	xorlw	7	; case 84
 34212  014652  B4D8               	btfsc	status,2,c
 34213  014654  D791               	goto	l910
 34214  014656  0A01               	xorlw	1	; case 85
 34215  014658  B4D8               	btfsc	status,2,c
 34216  01465A  D790               	goto	l911
 34217  01465C  0A03               	xorlw	3	; case 86
 34218  01465E  B4D8               	btfsc	status,2,c
 34219  014660  D78F               	goto	l912
 34220  014662  0A01               	xorlw	1	; case 87
 34221  014664  B4D8               	btfsc	status,2,c
 34222  014666  D78E               	goto	l913
 34223  014668  0A0F               	xorlw	15	; case 88
 34224  01466A  B4D8               	btfsc	status,2,c
 34225  01466C  D78D               	goto	l914
 34226  01466E  0A01               	xorlw	1	; case 89
 34227  014670  B4D8               	btfsc	status,2,c
 34228  014672  D78C               	goto	l915
 34229  014674  0A03               	xorlw	3	; case 90
 34230  014676  B4D8               	btfsc	status,2,c
 34231  014678  D78B               	goto	l916
 34232  01467A  0A3B               	xorlw	59	; case 97
 34233  01467C  B4D8               	btfsc	status,2,c
 34234  01467E  D722               	goto	l865
 34235  014680  0A03               	xorlw	3	; case 98
 34236  014682  B4D8               	btfsc	status,2,c
 34237  014684  D721               	goto	l866
 34238  014686  0A01               	xorlw	1	; case 99
 34239  014688  B4D8               	btfsc	status,2,c
 34240  01468A  D720               	goto	l867
 34241  01468C  0A07               	xorlw	7	; case 100
 34242  01468E  B4D8               	btfsc	status,2,c
 34243  014690  D71F               	goto	l868
 34244  014692  0A01               	xorlw	1	; case 101
 34245  014694  B4D8               	btfsc	status,2,c
 34246  014696  D71E               	goto	l869
 34247  014698  0A03               	xorlw	3	; case 102
 34248  01469A  B4D8               	btfsc	status,2,c
 34249  01469C  D71D               	goto	l870
 34250  01469E  0A01               	xorlw	1	; case 103
 34251  0146A0  B4D8               	btfsc	status,2,c
 34252  0146A2  D71C               	goto	l871
 34253  0146A4  0A0F               	xorlw	15	; case 104
 34254  0146A6  B4D8               	btfsc	status,2,c
 34255  0146A8  D71B               	goto	l872
 34256  0146AA  0A01               	xorlw	1	; case 105
 34257  0146AC  B4D8               	btfsc	status,2,c
 34258  0146AE  D71A               	goto	l873
 34259  0146B0  0A03               	xorlw	3	; case 106
 34260  0146B2  B4D8               	btfsc	status,2,c
 34261  0146B4  D719               	goto	l874
 34262  0146B6  0A01               	xorlw	1	; case 107
 34263  0146B8  B4D8               	btfsc	status,2,c
 34264  0146BA  D718               	goto	l875
 34265  0146BC  0A07               	xorlw	7	; case 108
 34266  0146BE  B4D8               	btfsc	status,2,c
 34267  0146C0  D717               	goto	l876
 34268  0146C2  0A01               	xorlw	1	; case 109
 34269  0146C4  B4D8               	btfsc	status,2,c
 34270  0146C6  D716               	goto	l877
 34271  0146C8  0A03               	xorlw	3	; case 110
 34272  0146CA  B4D8               	btfsc	status,2,c
 34273  0146CC  D715               	goto	l878
 34274  0146CE  0A01               	xorlw	1	; case 111
 34275  0146D0  B4D8               	btfsc	status,2,c
 34276  0146D2  D714               	goto	l879
 34277  0146D4  0A1F               	xorlw	31	; case 112
 34278  0146D6  B4D8               	btfsc	status,2,c
 34279  0146D8  D713               	goto	l880
 34280  0146DA  0A01               	xorlw	1	; case 113
 34281  0146DC  B4D8               	btfsc	status,2,c
 34282  0146DE  D712               	goto	l881
 34283  0146E0  0A03               	xorlw	3	; case 114
 34284  0146E2  B4D8               	btfsc	status,2,c
 34285  0146E4  D711               	goto	l882
 34286  0146E6  0A01               	xorlw	1	; case 115
 34287  0146E8  B4D8               	btfsc	status,2,c
 34288  0146EA  D710               	goto	l883
 34289  0146EC  0A07               	xorlw	7	; case 116
 34290  0146EE  B4D8               	btfsc	status,2,c
 34291  0146F0  D70F               	goto	l884
 34292  0146F2  0A01               	xorlw	1	; case 117
 34293  0146F4  B4D8               	btfsc	status,2,c
 34294  0146F6  D70E               	goto	l885
 34295  0146F8  0A03               	xorlw	3	; case 118
 34296  0146FA  B4D8               	btfsc	status,2,c
 34297  0146FC  D70D               	goto	l886
 34298  0146FE  0A01               	xorlw	1	; case 119
 34299  014700  B4D8               	btfsc	status,2,c
 34300  014702  D70C               	goto	l887
 34301  014704  0A0F               	xorlw	15	; case 120
 34302  014706  B4D8               	btfsc	status,2,c
 34303  014708  D70B               	goto	l888
 34304  01470A  0A01               	xorlw	1	; case 121
 34305  01470C  B4D8               	btfsc	status,2,c
 34306  01470E  D70A               	goto	l889
 34307  014710  0A03               	xorlw	3	; case 122
 34308  014712  B4D8               	btfsc	status,2,c
 34309  014714  D709               	goto	l890
 34310                           
 34311                           ;Types.c: 354: return 0;
 34312                           
 34313                           ; BSR set to: 0
 34314  014716  0E00               	movlw	0
 34315  014718  0012               	return	
 34316  01471A                     __end_of_ToSegment:
 34317                           	opt stack 0
 34318                           tosu	equ	0xFFF
 34319                           tosh	equ	0xFFE
 34320                           tosl	equ	0xFFD
 34321                           pclath	equ	0xFFA
 34322                           tblptru	equ	0xFF8
 34323                           tblptrh	equ	0xFF7
 34324                           tblptrl	equ	0xFF6
 34325                           tablat	equ	0xFF5
 34326                           prodh	equ	0xFF4
 34327                           prodl	equ	0xFF3
 34328                           intcon	equ	0xFF2
 34329                           indf0	equ	0xFEF
 34330                           postinc0	equ	0xFEE
 34331                           fsr0h	equ	0xFEA
 34332                           fsr0l	equ	0xFE9
 34333                           wreg	equ	0xFE8
 34334                           indf1	equ	0xFE7
 34335                           postdec1	equ	0xFE5
 34336                           fsr1h	equ	0xFE2
 34337                           fsr1l	equ	0xFE1
 34338                           indf2	equ	0xFDF
 34339                           postinc2	equ	0xFDE
 34340                           postdec2	equ	0xFDD
 34341                           plusw2	equ	0xFDB
 34342                           fsr2h	equ	0xFDA
 34343                           fsr2l	equ	0xFD9
 34344                           status	equ	0xFD8
 34345                           
 34346 ;; *************** function _HMI_Render *****************
 34347 ;; Defined at:
 34348 ;;		line 138 in file "HMI.c"
 34349 ;; Parameters:    Size  Location     Type
 34350 ;;		None
 34351 ;; Auto vars:     Size  Location     Type
 34352 ;;  a               2    8[BANK0 ] unsigned short 
 34353 ;; Return value:  Size  Location     Type
 34354 ;;                  1    wreg      void 
 34355 ;; Registers used:
 34356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34357 ;; Tracked objects:
 34358 ;;		On entry : 0/0
 34359 ;;		On exit  : 0/0
 34360 ;;		Unchanged: 0/0
 34361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34366 ;;Total ram usage:        2 bytes
 34367 ;; Hardware stack levels used:    1
 34368 ;; Hardware stack levels required when called:    9
 34369 ;; This function calls:
 34370 ;;		_OutSeg
 34371 ;; This function is called by:
 34372 ;;		_main
 34373 ;;		_ADCAverage
 34374 ;; This function uses a non-reentrant model
 34375 ;;
 34376                           
 34377                           	psect	text152
 34378  01863C                     __ptext152:
 34379                           	opt stack 0
 34380  01863C                     _HMI_Render:
 34381                           	opt stack 19
 34382                           
 34383                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 34384                           
 34385                           ;incstack = 0
 34386  01863C  0E00               	movlw	0
 34387  01863E  0100               	movlb	0	; () banked
 34388  018640  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 34389  018642  0E00               	movlw	0
 34390  018644  6F68               	movwf	HMI_Render@a& (0+255),b
 34391  018646                     l15127:
 34392                           
 34393                           ; BSR set to: 0
 34394  018646  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 34395  018648  E113               	bnz	l1158
 34396  01864A  0E08               	movlw	8
 34397  01864C  5D68               	subwf	HMI_Render@a& (0+255),w,b
 34398  01864E  B0D8               	btfsc	status,0,c
 34399  018650  0012               	return	
 34400                           
 34401                           ; BSR set to: 0
 34402                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 34403                           
 34404                           ; BSR set to: 0
 34405                           
 34406                           ; BSR set to: 0
 34407  018652  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 34408  018656  0E5A               	movlw	low _HMIBoard
 34409  018658  2568               	addwf	HMI_Render@a& (0+255),w,b
 34410  01865A  6ED9               	movwf	fsr2l,c
 34411  01865C  0E02               	movlw	high _HMIBoard
 34412  01865E  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 34413  018660  6EDA               	movwf	fsr2h,c
 34414  018662  50DF               	movf	indf2,w,c
 34415  018664  EC55  F0BC         	call	_OutSeg
 34416  018668  0100               	movlb	0	; () banked
 34417  01866A  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 34418  01866C  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 34419  01866E  D7EB               	goto	l15127
 34420  018670                     l1158:
 34421                           
 34422                           ; BSR set to: 0
 34423  018670  0012               	return		;funcret
 34424  018672                     __end_of_HMI_Render:
 34425                           	opt stack 0
 34426                           tosu	equ	0xFFF
 34427                           tosh	equ	0xFFE
 34428                           tosl	equ	0xFFD
 34429                           pclath	equ	0xFFA
 34430                           tblptru	equ	0xFF8
 34431                           tblptrh	equ	0xFF7
 34432                           tblptrl	equ	0xFF6
 34433                           tablat	equ	0xFF5
 34434                           prodh	equ	0xFF4
 34435                           prodl	equ	0xFF3
 34436                           intcon	equ	0xFF2
 34437                           indf0	equ	0xFEF
 34438                           postinc0	equ	0xFEE
 34439                           fsr0h	equ	0xFEA
 34440                           fsr0l	equ	0xFE9
 34441                           wreg	equ	0xFE8
 34442                           indf1	equ	0xFE7
 34443                           postdec1	equ	0xFE5
 34444                           fsr1h	equ	0xFE2
 34445                           fsr1l	equ	0xFE1
 34446                           indf2	equ	0xFDF
 34447                           postinc2	equ	0xFDE
 34448                           postdec2	equ	0xFDD
 34449                           plusw2	equ	0xFDB
 34450                           fsr2h	equ	0xFDA
 34451                           fsr2l	equ	0xFD9
 34452                           status	equ	0xFD8
 34453                           
 34454 ;; *************** function _OutSeg *****************
 34455 ;; Defined at:
 34456 ;;		line 54 in file "HMI.c"
 34457 ;; Parameters:    Size  Location     Type
 34458 ;;  pInput          1    wreg     unsigned char 
 34459 ;;  pSegment        1    3[BANK0 ] unsigned char 
 34460 ;; Auto vars:     Size  Location     Type
 34461 ;;  pInput          1    6[BANK0 ] unsigned char 
 34462 ;;  out             1    7[BANK0 ] volatile unsigned char 
 34463 ;; Return value:  Size  Location     Type
 34464 ;;                  1    wreg      void 
 34465 ;; Registers used:
 34466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 34467 ;; Tracked objects:
 34468 ;;		On entry : 0/0
 34469 ;;		On exit  : 0/0
 34470 ;;		Unchanged: 0/0
 34471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34472 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34473 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34474 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34475 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34476 ;;Total ram usage:        5 bytes
 34477 ;; Hardware stack levels used:    1
 34478 ;; Hardware stack levels required when called:    8
 34479 ;; This function calls:
 34480 ;;		_SPI_Send
 34481 ;; This function is called by:
 34482 ;;		_HMI_Render
 34483 ;;		_HMI_GRender
 34484 ;; This function uses a non-reentrant model
 34485 ;;
 34486                           
 34487                           	psect	text153
 34488  0178AA                     __ptext153:
 34489                           	opt stack 0
 34490  0178AA                     _OutSeg:
 34491                           	opt stack 19
 34492                           
 34493                           ; BSR set to: 0
 34494                           ;incstack = 0
 34495                           ;OutSeg@pInput stored from wreg
 34496  0178AA  0100               	movlb	0	; () banked
 34497  0178AC  6F66               	movwf	OutSeg@pInput& (0+255),b
 34498                           
 34499                           ;HMI.c: 58: static UINT8 cur;
 34500                           ;HMI.c: 59: volatile UINT8 out;
 34501                           ;HMI.c: 60: static UINT8 segset;
 34502                           ;HMI.c: 61: static UINT8 a;
 34503                           ;HMI.c: 83: if (pSegment <= 8)
 34504  0178AE  0E09               	movlw	9
 34505  0178B0  0100               	movlb	0	; () banked
 34506  0178B2  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 34507  0178B4  0012               	return	
 34508                           
 34509                           ; BSR set to: 0
 34510                           ;HMI.c: 84: {
 34511                           ;HMI.c: 85: cur = pInput;
 34512  0178B6  C066  F044         	movff	OutSeg@pInput,OutSeg@cur
 34513                           
 34514                           ; BSR set to: 0
 34515                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 34516  0178BA  0E00               	movlw	0
 34517  0178BC  6E42               	movwf	OutSeg@a,c
 34518  0178BE                     l14929:
 34519                           
 34520                           ; BSR set to: 0
 34521  0178BE  0E07               	movlw	7
 34522  0178C0  6442               	cpfsgt	OutSeg@a,c
 34523  0178C2  D001               	goto	l1146
 34524  0178C4  D01F               	goto	u12330
 34525  0178C6                     l1146:
 34526                           
 34527                           ;HMI.c: 87: {
 34528                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 34529                           
 34530                           ; BSR set to: 0
 34531  0178C6  C044  F064         	movff	OutSeg@cur,??_OutSeg
 34532  0178CA  0E01               	movlw	1
 34533  0178CC  0100               	movlb	0	; () banked
 34534  0178CE  1764               	andwf	??_OutSeg& (0+255),f,b
 34535  0178D0  0E06               	movlw	6
 34536  0178D2  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 34537  0178D4                     u12325:
 34538  0178D4  90D8               	bcf	status,0,c
 34539  0178D6  3764               	rlcf	??_OutSeg& (0+255),f,b
 34540  0178D8  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 34541  0178DA  D7FC               	goto	u12325
 34542  0178DC  5164               	movf	??_OutSeg& (0+255),w,b
 34543  0178DE  6E43               	movwf	OutSeg@segset,c
 34544                           
 34545                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 34546  0178E0  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 34547  0178E2  42E8               	rrncf	wreg,f,c
 34548  0178E4  0BF8               	andlw	248
 34549  0178E6  1042               	iorwf	OutSeg@a,w,c
 34550  0178E8  1043               	iorwf	OutSeg@segset,w,c
 34551  0178EA  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 34552                           
 34553                           ;HMI.c: 90: cur >>= 1;
 34554  0178EC  90D8               	bcf	status,0,c
 34555  0178EE  3244               	rrcf	OutSeg@cur,f,c
 34556                           
 34557                           ; BSR set to: 0
 34558                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 34559  0178F0  0E94               	movlw	low _SPI1
 34560  0178F2  6F60               	movwf	SPI_Send@pInput& (0+255),b
 34561  0178F4  0E02               	movlw	high _SPI1
 34562  0178F6  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 34563  0178F8  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 34564  0178FC  ECC2  F0BC         	call	_SPI_Send	;wreg free
 34565  017900  2A42               	incf	OutSeg@a,f,c
 34566  017902  D7DD               	goto	l14929
 34567  017904                     u12330:
 34568                           
 34569                           ;HMI.c: 96: }
 34570                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 34571  017904  0E94               	movlw	low _SPI1
 34572  017906  0100               	movlb	0	; () banked
 34573  017908  6F60               	movwf	SPI_Send@pInput& (0+255),b
 34574  01790A  0E02               	movlw	high _SPI1
 34575  01790C  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 34576  01790E  0E00               	movlw	0
 34577  017910  6F62               	movwf	SPI_Send@pData& (0+255),b
 34578  017912  ECC2  F0BC         	call	_SPI_Send	;wreg free
 34579  017916  0012               	return	
 34580  017918                     __end_of_OutSeg:
 34581                           	opt stack 0
 34582                           tosu	equ	0xFFF
 34583                           tosh	equ	0xFFE
 34584                           tosl	equ	0xFFD
 34585                           pclath	equ	0xFFA
 34586                           tblptru	equ	0xFF8
 34587                           tblptrh	equ	0xFF7
 34588                           tblptrl	equ	0xFF6
 34589                           tablat	equ	0xFF5
 34590                           prodh	equ	0xFF4
 34591                           prodl	equ	0xFF3
 34592                           intcon	equ	0xFF2
 34593                           indf0	equ	0xFEF
 34594                           postinc0	equ	0xFEE
 34595                           fsr0h	equ	0xFEA
 34596                           fsr0l	equ	0xFE9
 34597                           wreg	equ	0xFE8
 34598                           indf1	equ	0xFE7
 34599                           postdec1	equ	0xFE5
 34600                           fsr1h	equ	0xFE2
 34601                           fsr1l	equ	0xFE1
 34602                           indf2	equ	0xFDF
 34603                           postinc2	equ	0xFDE
 34604                           postdec2	equ	0xFDD
 34605                           plusw2	equ	0xFDB
 34606                           fsr2h	equ	0xFDA
 34607                           fsr2l	equ	0xFD9
 34608                           status	equ	0xFD8
 34609                           
 34610 ;; *************** function _SPI_Send *****************
 34611 ;; Defined at:
 34612 ;;		line 226 in file "Library/SPI.c"
 34613 ;; Parameters:    Size  Location     Type
 34614 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 34615 ;;		 -> SPI1(11), SPI2(11), 
 34616 ;;  pData           1    2[BANK0 ] unsigned char 
 34617 ;; Auto vars:     Size  Location     Type
 34618 ;;		None
 34619 ;; Return value:  Size  Location     Type
 34620 ;;                  1    wreg      unsigned char 
 34621 ;; Registers used:
 34622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34623 ;; Tracked objects:
 34624 ;;		On entry : 0/0
 34625 ;;		On exit  : 0/0
 34626 ;;		Unchanged: 0/0
 34627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34628 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34631 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34632 ;;Total ram usage:        3 bytes
 34633 ;; Hardware stack levels used:    1
 34634 ;; Hardware stack levels required when called:    7
 34635 ;; This function calls:
 34636 ;;		Nothing
 34637 ;; This function is called by:
 34638 ;;		_LCD_Write
 34639 ;;		_OutSeg
 34640 ;; This function uses a non-reentrant model
 34641 ;;
 34642                           
 34643                           	psect	text154
 34644  017984                     __ptext154:
 34645                           	opt stack 0
 34646  017984                     _SPI_Send:
 34647                           	opt stack 17
 34648                           
 34649                           ;SPI.c: 253: switch (pInput->mChannel)
 34650                           
 34651                           ;incstack = 0
 34652  017984  D026               	goto	l678
 34653  017986                     
 34654                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 34655  017986  C18E  FFD9         	movff	_PortC+4,fsr2l
 34656  01798A  C18F  FFDA         	movff	_PortC+5,fsr2h
 34657  01798E  0101               	movlb	1	; () banked
 34658  017990  94DF               	bcf	indf2,2,c
 34659                           
 34660                           ; BSR set to: 1
 34661                           ;SPI.c: 257: SSP1BUF = pData;
 34662  017992  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 34663  017996                     
 34664                           ; BSR set to: 1
 34665  017996  A0C7               	btfss	4039,0,c	;volatile
 34666  017998  D7FE               	goto	l681
 34667                           
 34668                           ;SPI.c: 259: pData = SSP1BUF;
 34669  01799A  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 34670                           
 34671                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 34672  01799E  C18E  FFD9         	movff	_PortC+4,fsr2l
 34673  0179A2  C18F  FFDA         	movff	_PortC+5,fsr2h
 34674  0179A6  0101               	movlb	1	; () banked
 34675  0179A8  84DF               	bsf	indf2,2,c
 34676                           
 34677                           ; BSR set to: 1
 34678                           ;SPI.c: 261: return pData;
 34679                           ;	Return value of _SPI_Send is never used
 34680  0179AA  0012               	return	
 34681  0179AC                     
 34682                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 34683                           
 34684                           ; BSR set to: 1
 34685  0179AC  C17A  FFD9         	movff	_PortD+4,fsr2l
 34686  0179B0  C17B  FFDA         	movff	_PortD+5,fsr2h
 34687  0179B4  0101               	movlb	1	; () banked
 34688  0179B6  9EDF               	bcf	indf2,7,c
 34689                           
 34690                           ; BSR set to: 1
 34691                           ;SPI.c: 264: SSP2BUF = pData;
 34692  0179B8  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 34693  0179BC                     
 34694                           ; BSR set to: 1
 34695  0179BC  A06D               	btfss	3949,0,c	;volatile
 34696  0179BE  D7FE               	goto	l686
 34697                           
 34698                           ;SPI.c: 266: pData = SSP2BUF;
 34699  0179C0  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 34700                           
 34701                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 34702  0179C4  C17A  FFD9         	movff	_PortD+4,fsr2l
 34703  0179C8  C17B  FFDA         	movff	_PortD+5,fsr2h
 34704  0179CC  0101               	movlb	1	; () banked
 34705  0179CE  8EDF               	bsf	indf2,7,c
 34706                           
 34707                           ; BSR set to: 1
 34708                           ;SPI.c: 269: };
 34709                           
 34710                           ; BSR set to: 1
 34711                           ;SPI.c: 268: return pData;
 34712                           ;	Return value of _SPI_Send is never used
 34713  0179D0  0012               	return	
 34714  0179D2                     l678:
 34715                           
 34716                           ; BSR set to: 1
 34717  0179D2  0100               	movlb	0	; () banked
 34718  0179D4  EE20 F002          	lfsr	2,2
 34719  0179D8  5160               	movf	SPI_Send@pInput& (0+255),w,b
 34720  0179DA  26D9               	addwf	fsr2l,f,c
 34721  0179DC  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 34722  0179DE  22DA               	addwfc	fsr2h,f,c
 34723  0179E0  50DF               	movf	indf2,w,c
 34724                           
 34725                           ; Switch size 1, requested type "space"
 34726                           ; Number of cases is 2, Range of values is 0 to 1
 34727                           ; switch strategies available:
 34728                           ; Name         Instructions Cycles
 34729                           ; simple_byte            7     4 (average)
 34730                           ;	Chosen strategy is simple_byte
 34731  0179E2  0A00               	xorlw	0	; case 0
 34732  0179E4  B4D8               	btfsc	status,2,c
 34733  0179E6  D7CF               	goto	l679
 34734  0179E8  0A01               	xorlw	1	; case 1
 34735  0179EA  A4D8               	btfss	status,2,c
 34736  0179EC  0012               	return	
 34737  0179EE  D7DE               	goto	l684
 34738  0179F0                     __end_of_SPI_Send:
 34739                           	opt stack 0
 34740                           tosu	equ	0xFFF
 34741                           tosh	equ	0xFFE
 34742                           tosl	equ	0xFFD
 34743                           pclath	equ	0xFFA
 34744                           tblptru	equ	0xFF8
 34745                           tblptrh	equ	0xFF7
 34746                           tblptrl	equ	0xFF6
 34747                           tablat	equ	0xFF5
 34748                           prodh	equ	0xFF4
 34749                           prodl	equ	0xFF3
 34750                           intcon	equ	0xFF2
 34751                           indf0	equ	0xFEF
 34752                           postinc0	equ	0xFEE
 34753                           fsr0h	equ	0xFEA
 34754                           fsr0l	equ	0xFE9
 34755                           wreg	equ	0xFE8
 34756                           indf1	equ	0xFE7
 34757                           postdec1	equ	0xFE5
 34758                           fsr1h	equ	0xFE2
 34759                           fsr1l	equ	0xFE1
 34760                           indf2	equ	0xFDF
 34761                           postinc2	equ	0xFDE
 34762                           postdec2	equ	0xFDD
 34763                           plusw2	equ	0xFDB
 34764                           fsr2h	equ	0xFDA
 34765                           fsr2l	equ	0xFD9
 34766                           status	equ	0xFD8
 34767                           
 34768 ;; *************** function _FunctReadADC *****************
 34769 ;; Defined at:
 34770 ;;		line 186 in file "dans.c"
 34771 ;; Parameters:    Size  Location     Type
 34772 ;;  channel         2    0[BANK0 ] int 
 34773 ;; Auto vars:     Size  Location     Type
 34774 ;;		None
 34775 ;; Return value:  Size  Location     Type
 34776 ;;                  2    0[BANK0 ] int 
 34777 ;; Registers used:
 34778 ;;		wreg, status,2, status,0
 34779 ;; Tracked objects:
 34780 ;;		On entry : 0/0
 34781 ;;		On exit  : 0/0
 34782 ;;		Unchanged: 0/0
 34783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34784 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34787 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34788 ;;Total ram usage:        2 bytes
 34789 ;; Hardware stack levels used:    1
 34790 ;; Hardware stack levels required when called:    7
 34791 ;; This function calls:
 34792 ;;		Nothing
 34793 ;; This function is called by:
 34794 ;;		_ADCAverage
 34795 ;; This function uses a non-reentrant model
 34796 ;;
 34797                           
 34798                           	psect	text155
 34799  01851A                     __ptext155:
 34800                           	opt stack 0
 34801  01851A                     _FunctReadADC:
 34802                           	opt stack 21
 34803                           
 34804                           ;dans.c: 188: if(channel>4) return 0;
 34805                           
 34806                           ;incstack = 0
 34807  01851A  0100               	movlb	0	; () banked
 34808  01851C  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 34809  01851E  D00B               	goto	l2351
 34810  018520  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 34811  018522  E104               	bnz	u12690
 34812  018524  0E05               	movlw	5
 34813  018526  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 34814  018528  A0D8               	btfss	status,0,c
 34815  01852A  D005               	goto	l2351
 34816  01852C                     u12690:
 34817                           
 34818                           ; BSR set to: 0
 34819  01852C  0E00               	movlw	0
 34820  01852E  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 34821  018530  0E00               	movlw	0
 34822  018532  6F60               	movwf	?_FunctReadADC& (0+255),b
 34823                           
 34824                           ; BSR set to: 0
 34825  018534  0012               	return	
 34826  018536                     l2351:
 34827                           
 34828                           ; BSR set to: 0
 34829                           ;dans.c: 189: ADCON0=0x00;
 34830                           
 34831                           ; BSR set to: 0
 34832  018536  0E00               	movlw	0
 34833  018538  6EC2               	movwf	4034,c	;volatile
 34834                           
 34835                           ; BSR set to: 0
 34836                           ;dans.c: 190: ADCON0=(channel<<2);
 34837  01853A  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 34838  01853C  46E8               	rlncf	wreg,f,c
 34839  01853E  0BFC               	andlw	252
 34840  018540  6EC2               	movwf	4034,c	;volatile
 34841                           
 34842                           ; BSR set to: 0
 34843                           ;dans.c: 191: ADON=1;
 34844  018542  80C2               	bsf	4034,0,c	;volatile
 34845                           
 34846                           ; BSR set to: 0
 34847                           ;dans.c: 192: GODONE=1;
 34848  018544  82C2               	bsf	4034,1,c	;volatile
 34849  018546                     
 34850                           ; BSR set to: 0
 34851  018546  B2C2               	btfsc	4034,1,c	;volatile
 34852  018548  D7FE               	goto	l2354
 34853                           
 34854                           ;dans.c: 194: ADON=0;
 34855  01854A  90C2               	bcf	4034,0,c	;volatile
 34856                           
 34857                           ;dans.c: 195: return ADRES;
 34858  01854C  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 34859  018550  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 34860  018554  0012               	return		;funcret
 34861  018556                     __end_of_FunctReadADC:
 34862                           	opt stack 0
 34863                           tosu	equ	0xFFF
 34864                           tosh	equ	0xFFE
 34865                           tosl	equ	0xFFD
 34866                           pclath	equ	0xFFA
 34867                           tblptru	equ	0xFF8
 34868                           tblptrh	equ	0xFF7
 34869                           tblptrl	equ	0xFF6
 34870                           tablat	equ	0xFF5
 34871                           prodh	equ	0xFF4
 34872                           prodl	equ	0xFF3
 34873                           intcon	equ	0xFF2
 34874                           indf0	equ	0xFEF
 34875                           postinc0	equ	0xFEE
 34876                           fsr0h	equ	0xFEA
 34877                           fsr0l	equ	0xFE9
 34878                           wreg	equ	0xFE8
 34879                           indf1	equ	0xFE7
 34880                           postdec1	equ	0xFE5
 34881                           fsr1h	equ	0xFE2
 34882                           fsr1l	equ	0xFE1
 34883                           indf2	equ	0xFDF
 34884                           postinc2	equ	0xFDE
 34885                           postdec2	equ	0xFDD
 34886                           plusw2	equ	0xFDB
 34887                           fsr2h	equ	0xFDA
 34888                           fsr2l	equ	0xFD9
 34889                           status	equ	0xFD8
 34890                           
 34891 ;; *************** function _ISR_Function *****************
 34892 ;; Defined at:
 34893 ;;		line 38 in file "Library/ISR.c"
 34894 ;; Parameters:    Size  Location     Type
 34895 ;;		None
 34896 ;; Auto vars:     Size  Location     Type
 34897 ;;		None
 34898 ;; Return value:  Size  Location     Type
 34899 ;;                  1    wreg      void 
 34900 ;; Registers used:
 34901 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34902 ;; Tracked objects:
 34903 ;;		On entry : 0/0
 34904 ;;		On exit  : 0/0
 34905 ;;		Unchanged: 0/0
 34906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34909 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34910 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34911 ;;Total ram usage:       18 bytes
 34912 ;; Hardware stack levels used:    1
 34913 ;; Hardware stack levels required when called:    6
 34914 ;; This function calls:
 34915 ;;		_Timer0_ISR
 34916 ;; This function is called by:
 34917 ;;		Interrupt level 2
 34918 ;; This function uses a non-reentrant model
 34919 ;;
 34920                           
 34921                           	psect	intcode
 34922  001408                     __pintcode:
 34923                           	opt stack 0
 34924  001408                     _ISR_Function:
 34925                           	opt stack 14
 34926                           
 34927                           ;incstack = 0
 34928  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 34929  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 34930  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 34931  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 34932  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 34933  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 34934  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 34935  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 34936  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 34937  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 34938  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 34939  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 34940  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 34941  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 34942  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 34943  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 34944  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 34945  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 34946  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 34947                           
 34948                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 34949  001452  92F2               	bcf	intcon,1,c	;volatile
 34950                           
 34951                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 34952  001454  B4F2               	btfsc	intcon,2,c	;volatile
 34953  001456  AAF2               	btfss	intcon,5,c	;volatile
 34954  001458  D002               	goto	i2l1590
 34955                           
 34956                           ;ISR.c: 68: Timer0_ISR();
 34957  00145A  EC54  F0C4         	call	_Timer0_ISR	;wreg free
 34958  00145E                     i2l1590:
 34959  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 34960  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 34961  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 34962  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 34963  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 34964  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 34965  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 34966  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 34967  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 34968  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 34969  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 34970  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 34971  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 34972  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 34973  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 34974  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 34975  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 34976  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 34977  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 34978  0014A8  0011               	retfie		f
 34979  0014AA                     __end_of_ISR_Function:
 34980                           	opt stack 0
 34981                           tosu	equ	0xFFF
 34982                           tosh	equ	0xFFE
 34983                           tosl	equ	0xFFD
 34984                           pclatu	equ	0xFFB
 34985                           pclath	equ	0xFFA
 34986                           tblptru	equ	0xFF8
 34987                           tblptrh	equ	0xFF7
 34988                           tblptrl	equ	0xFF6
 34989                           tablat	equ	0xFF5
 34990                           prodh	equ	0xFF4
 34991                           prodl	equ	0xFF3
 34992                           intcon	equ	0xFF2
 34993                           indf0	equ	0xFEF
 34994                           postinc0	equ	0xFEE
 34995                           fsr0h	equ	0xFEA
 34996                           fsr0l	equ	0xFE9
 34997                           wreg	equ	0xFE8
 34998                           indf1	equ	0xFE7
 34999                           postdec1	equ	0xFE5
 35000                           fsr1h	equ	0xFE2
 35001                           fsr1l	equ	0xFE1
 35002                           indf2	equ	0xFDF
 35003                           postinc2	equ	0xFDE
 35004                           postdec2	equ	0xFDD
 35005                           plusw2	equ	0xFDB
 35006                           fsr2h	equ	0xFDA
 35007                           fsr2l	equ	0xFD9
 35008                           status	equ	0xFD8
 35009                           
 35010 ;; *************** function _Timer0_ISR *****************
 35011 ;; Defined at:
 35012 ;;		line 94 in file "Library/Timer0.c"
 35013 ;; Parameters:    Size  Location     Type
 35014 ;;		None
 35015 ;; Auto vars:     Size  Location     Type
 35016 ;;		None
 35017 ;; Return value:  Size  Location     Type
 35018 ;;                  1    wreg      void 
 35019 ;; Registers used:
 35020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35021 ;; Tracked objects:
 35022 ;;		On entry : 0/0
 35023 ;;		On exit  : 0/0
 35024 ;;		Unchanged: 0/0
 35025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35030 ;;Total ram usage:        0 bytes
 35031 ;; Hardware stack levels used:    1
 35032 ;; Hardware stack levels required when called:    5
 35033 ;; This function calls:
 35034 ;;		Absolute function
 35035 ;;		i2_Motor_Step
 35036 ;;		i2_Timer0_Stop
 35037 ;; This function is called by:
 35038 ;;		_ISR_Function
 35039 ;; This function uses a non-reentrant model
 35040 ;;
 35041                           
 35042                           	psect	text157
 35043  0188A8                     __ptext157:
 35044                           	opt stack 0
 35045  0188A8                     _Timer0_ISR:
 35046                           	opt stack 14
 35047                           
 35048                           ;Timer0.c: 96: Timer0_Stop();
 35049                           
 35050                           ;incstack = 0
 35051  0188A8  EC6E  F0C6         	call	i2_Timer0_Stop	;wreg free
 35052                           
 35053                           ;Timer0.c: 99: if (gISR != 0)
 35054  0188AC  0101               	movlb	1	; () banked
 35055  0188AE  5108               	movf	_gISR& (0+255),w,b
 35056  0188B0  1109               	iorwf	(_gISR+1)& (0+255),w,b
 35057  0188B2  110A               	iorwf	(_gISR+2)& (0+255),w,b
 35058  0188B4  B4D8               	btfsc	status,2,c
 35059  0188B6  0012               	return	
 35060                           
 35061                           ; BSR set to: 1
 35062                           ;Timer0.c: 100: gISR();
 35063  0188B8  D801               	call	i2u1558_48
 35064  0188BA  0012               	return	
 35065  0188BC                     i2u1558_48:
 35066  0188BC  0005               	push	
 35067  0188BE  6EFA               	movwf	pclath,c
 35068  0188C0  5108               	movf	_gISR& (0+255),w,b
 35069  0188C2  6EFD               	movwf	tosl,c
 35070  0188C4  5109               	movf	(_gISR+1)& (0+255),w,b
 35071  0188C6  6EFE               	movwf	tosh,c
 35072  0188C8  510A               	movf	(_gISR+2)& (0+255),w,b
 35073  0188CA  6EFF               	movwf	tosu,c
 35074  0188CC  50FA               	movf	pclath,w,c
 35075  0188CE  0012               	return		;indir
 35076  0188D0                     __end_of_Timer0_ISR:
 35077                           	opt stack 0
 35078                           tosu	equ	0xFFF
 35079                           tosh	equ	0xFFE
 35080                           tosl	equ	0xFFD
 35081                           pclatu	equ	0xFFB
 35082                           pclath	equ	0xFFA
 35083                           tblptru	equ	0xFF8
 35084                           tblptrh	equ	0xFF7
 35085                           tblptrl	equ	0xFF6
 35086                           tablat	equ	0xFF5
 35087                           prodh	equ	0xFF4
 35088                           prodl	equ	0xFF3
 35089                           intcon	equ	0xFF2
 35090                           indf0	equ	0xFEF
 35091                           postinc0	equ	0xFEE
 35092                           fsr0h	equ	0xFEA
 35093                           fsr0l	equ	0xFE9
 35094                           wreg	equ	0xFE8
 35095                           indf1	equ	0xFE7
 35096                           postdec1	equ	0xFE5
 35097                           fsr1h	equ	0xFE2
 35098                           fsr1l	equ	0xFE1
 35099                           indf2	equ	0xFDF
 35100                           postinc2	equ	0xFDE
 35101                           postdec2	equ	0xFDD
 35102                           plusw2	equ	0xFDB
 35103                           fsr2h	equ	0xFDA
 35104                           fsr2l	equ	0xFD9
 35105                           status	equ	0xFD8
 35106                           
 35107 ;; *************** function i2_Motor_Step *****************
 35108 ;; Defined at:
 35109 ;;		line 75 in file "Library/Motor.c"
 35110 ;; Parameters:    Size  Location     Type
 35111 ;;		None
 35112 ;; Auto vars:     Size  Location     Type
 35113 ;;		None
 35114 ;; Return value:  Size  Location     Type
 35115 ;;                  1    wreg      void 
 35116 ;; Registers used:
 35117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35118 ;; Tracked objects:
 35119 ;;		On entry : 0/0
 35120 ;;		On exit  : 0/0
 35121 ;;		Unchanged: 0/0
 35122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35125 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35127 ;;Total ram usage:        2 bytes
 35128 ;; Hardware stack levels used:    1
 35129 ;; Hardware stack levels required when called:    4
 35130 ;; This function calls:
 35131 ;;		i2_MXK_Queue
 35132 ;;		i2_MXK_Release
 35133 ;;		i2_MXK_SwitchTo
 35134 ;;		i2_Port_SetPin
 35135 ;;		i2_Timer0_Restart
 35136 ;;		i2_Timer0_Stop
 35137 ;; This function is called by:
 35138 ;; This function uses a non-reentrant model
 35139 ;;
 35140                           
 35141                           	psect	text158
 35142  0166DE                     __ptext158:
 35143                           	opt stack 0
 35144  0166DE                     i2_Motor_Step:
 35145                           	opt stack 14
 35146                           
 35147                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 35148                           
 35149                           ;incstack = 0
 35150  0166DE  EE20 F004          	lfsr	2,4
 35151  0166E2  5038               	movf	_lMotor,w,c
 35152  0166E4  26D9               	addwf	fsr2l,f,c
 35153  0166E6  5039               	movf	_lMotor+1,w,c
 35154  0166E8  22DA               	addwfc	fsr2h,f,c
 35155  0166EA  50DF               	movf	indf2,w,c
 35156  0166EC  EC39  F0C3         	call	i2_MXK_SwitchTo
 35157  0166F0  0900               	iorlw	0
 35158  0166F2  B4D8               	btfsc	status,2,c
 35159  0166F4  D06A               	goto	i2l1627
 35160                           
 35161                           ;Motor.c: 78: {
 35162                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 35163  0166F6  C038  FFD9         	movff	_lMotor,fsr2l
 35164  0166FA  C039  FFDA         	movff	_lMotor+1,fsr2h
 35165  0166FE  50DE               	movf	postinc2,w,c
 35166  016700  10DE               	iorwf	postinc2,w,c
 35167  016702  B4D8               	btfsc	status,2,c
 35168  016704  D05D               	goto	i2l1628
 35169                           
 35170                           ;Motor.c: 80: {
 35171                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 35172  016706  C038  FFD9         	movff	_lMotor,fsr2l
 35173  01670A  C039  FFDA         	movff	_lMotor+1,fsr2h
 35174  01670E  0E01               	movlw	1
 35175  016710  BEDB               	btfsc	plusw2,7,c
 35176  016712  D022               	goto	i2l1629
 35177  016714  0E01               	movlw	1
 35178  016716  50DB               	movf	plusw2,w,c
 35179  016718  E103               	bnz	i2u885_40
 35180  01671A  04DE               	decf	postinc2,w,c
 35181  01671C  A0D8               	btfss	status,0,c
 35182  01671E  D01C               	goto	i2l1629
 35183  016720                     i2u885_40:
 35184                           
 35185                           ;Motor.c: 83: {
 35186                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 35187  016720  C038  FFD9         	movff	_lMotor,fsr2l
 35188  016724  C039  FFDA         	movff	_lMotor+1,fsr2h
 35189  016728  28DE               	incf	postinc2,w,c
 35190  01672A  E104               	bnz	i2u886_40
 35191  01672C  0E7F               	movlw	127
 35192  01672E  18DE               	xorwf	postinc2,w,c
 35193  016730  B4D8               	btfsc	status,2,c
 35194  016732  D007               	goto	i2l1630
 35195  016734                     i2u886_40:
 35196                           
 35197                           ;Motor.c: 85: lMotor->mDelta --;
 35198  016734  C038  FFD9         	movff	_lMotor,fsr2l
 35199  016738  C039  FFDA         	movff	_lMotor+1,fsr2h
 35200  01673C  06DE               	decf	postinc2,f,c
 35201  01673E  0E00               	movlw	0
 35202  016740  5ADD               	subwfb	postdec2,f,c
 35203  016742                     i2l1630:
 35204                           
 35205                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 35206  016742  0E6C               	movlw	low _PortE
 35207  016744  6E10               	movwf	i2Port_SetPin@pInput,c
 35208  016746  0E01               	movlw	high _PortE
 35209  016748  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35210  01674A  0E00               	movlw	0
 35211  01674C  6E12               	movwf	i2Port_SetPin@pPin,c
 35212  01674E  0E01               	movlw	1
 35213  016750  6E13               	movwf	i2Port_SetPin@pValue,c
 35214  016752  ECA4  F0B6         	call	i2_Port_SetPin	;wreg free
 35215                           
 35216                           ;Motor.c: 88: }
 35217  016756  D01B               	goto	i2l1631
 35218  016758                     i2l1629:
 35219                           
 35220                           ;Motor.c: 89: else
 35221                           ;Motor.c: 90: {
 35222                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 35223  016758  C038  FFD9         	movff	_lMotor,fsr2l
 35224  01675C  C039  FFDA         	movff	_lMotor+1,fsr2h
 35225  016760  04DE               	decf	postinc2,w,c
 35226  016762  E104               	bnz	i2u887_40
 35227  016764  0E80               	movlw	128
 35228  016766  18DE               	xorwf	postinc2,w,c
 35229  016768  B4D8               	btfsc	status,2,c
 35230  01676A  D007               	goto	i2l1632
 35231  01676C                     i2u887_40:
 35232                           
 35233                           ;Motor.c: 92: lMotor->mDelta ++;
 35234  01676C  C038  FFD9         	movff	_lMotor,fsr2l
 35235  016770  C039  FFDA         	movff	_lMotor+1,fsr2h
 35236  016774  2ADE               	incf	postinc2,f,c
 35237  016776  0E00               	movlw	0
 35238  016778  22DD               	addwfc	postdec2,f,c
 35239  01677A                     i2l1632:
 35240                           
 35241                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 35242  01677A  0E6C               	movlw	low _PortE
 35243  01677C  6E10               	movwf	i2Port_SetPin@pInput,c
 35244  01677E  0E01               	movlw	high _PortE
 35245  016780  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35246  016782  0E00               	movlw	0
 35247  016784  6E12               	movwf	i2Port_SetPin@pPin,c
 35248  016786  0E00               	movlw	0
 35249  016788  6E13               	movwf	i2Port_SetPin@pValue,c
 35250  01678A  ECA4  F0B6         	call	i2_Port_SetPin	;wreg free
 35251  01678E                     i2l1631:
 35252                           
 35253                           ;Motor.c: 95: }
 35254                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 35255  01678E  0E6C               	movlw	low _PortE
 35256  016790  6E10               	movwf	i2Port_SetPin@pInput,c
 35257  016792  0E01               	movlw	high _PortE
 35258  016794  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35259  016796  0E01               	movlw	1
 35260  016798  6E12               	movwf	i2Port_SetPin@pPin,c
 35261  01679A  0E01               	movlw	1
 35262  01679C  6E13               	movwf	i2Port_SetPin@pValue,c
 35263  01679E  ECA4  F0B6         	call	i2_Port_SetPin	;wreg free
 35264                           
 35265                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 35266  0167A2  0E6C               	movlw	low _PortE
 35267  0167A4  6E10               	movwf	i2Port_SetPin@pInput,c
 35268  0167A6  0E01               	movlw	high _PortE
 35269  0167A8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 35270  0167AA  0E01               	movlw	1
 35271  0167AC  6E12               	movwf	i2Port_SetPin@pPin,c
 35272  0167AE  0E00               	movlw	0
 35273  0167B0  6E13               	movwf	i2Port_SetPin@pValue,c
 35274  0167B2  ECA4  F0B6         	call	i2_Port_SetPin	;wreg free
 35275                           
 35276                           ;Motor.c: 101: MXK_Release();
 35277  0167B6  EC71  F0C6         	call	i2_MXK_Release	;wreg free
 35278                           
 35279                           ;Motor.c: 102: Timer0_Restart();
 35280  0167BA  EC48  F0C6         	call	i2_Timer0_Restart	;wreg free
 35281                           
 35282                           ;Motor.c: 103: return;
 35283  0167BE  0012               	return	
 35284  0167C0                     i2l1628:
 35285                           
 35286                           ;Motor.c: 104: }
 35287                           ;Motor.c: 105: MXK_Release();
 35288  0167C0  EC71  F0C6         	call	i2_MXK_Release	;wreg free
 35289                           
 35290                           ;Motor.c: 106: Timer0_Stop();
 35291  0167C4  EC6E  F0C6         	call	i2_Timer0_Stop	;wreg free
 35292                           
 35293                           ;Motor.c: 107: return;
 35294  0167C8  0012               	return	
 35295  0167CA                     i2l1627:
 35296                           
 35297                           ;Motor.c: 108: }
 35298                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 35299  0167CA  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 35300  0167CE  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 35301  0167D2  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 35302  0167D6  EC3B  F0C6         	call	i2_MXK_Queue	;wreg free
 35303  0167DA  0012               	return		;funcret
 35304  0167DC                     __end_ofi2_Motor_Step:
 35305                           	opt stack 0
 35306                           tosu	equ	0xFFF
 35307                           tosh	equ	0xFFE
 35308                           tosl	equ	0xFFD
 35309                           pclatu	equ	0xFFB
 35310                           pclath	equ	0xFFA
 35311                           tblptru	equ	0xFF8
 35312                           tblptrh	equ	0xFF7
 35313                           tblptrl	equ	0xFF6
 35314                           tablat	equ	0xFF5
 35315                           prodh	equ	0xFF4
 35316                           prodl	equ	0xFF3
 35317                           intcon	equ	0xFF2
 35318                           indf0	equ	0xFEF
 35319                           postinc0	equ	0xFEE
 35320                           fsr0h	equ	0xFEA
 35321                           fsr0l	equ	0xFE9
 35322                           wreg	equ	0xFE8
 35323                           indf1	equ	0xFE7
 35324                           postdec1	equ	0xFE5
 35325                           fsr1h	equ	0xFE2
 35326                           fsr1l	equ	0xFE1
 35327                           indf2	equ	0xFDF
 35328                           postinc2	equ	0xFDE
 35329                           postdec2	equ	0xFDD
 35330                           plusw2	equ	0xFDB
 35331                           fsr2h	equ	0xFDA
 35332                           fsr2l	equ	0xFD9
 35333                           status	equ	0xFD8
 35334                           
 35335 ;; *************** function i2_Timer0_Stop *****************
 35336 ;; Defined at:
 35337 ;;		line 89 in file "Library/Timer0.c"
 35338 ;; Parameters:    Size  Location     Type
 35339 ;;		None
 35340 ;; Auto vars:     Size  Location     Type
 35341 ;;		None
 35342 ;; Return value:  Size  Location     Type
 35343 ;;                  1    wreg      void 
 35344 ;; Registers used:
 35345 ;;		None
 35346 ;; Tracked objects:
 35347 ;;		On entry : 0/0
 35348 ;;		On exit  : 0/0
 35349 ;;		Unchanged: 0/0
 35350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35355 ;;Total ram usage:        0 bytes
 35356 ;; Hardware stack levels used:    1
 35357 ;; This function calls:
 35358 ;;		Nothing
 35359 ;; This function is called by:
 35360 ;;		_Timer0_ISR
 35361 ;;		i2_Motor_Step
 35362 ;; This function uses a non-reentrant model
 35363 ;;
 35364                           
 35365                           	psect	text159
 35366  018CDC                     __ptext159:
 35367                           	opt stack 0
 35368  018CDC                     i2_Timer0_Stop:
 35369                           	opt stack 18
 35370                           
 35371                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 35372                           
 35373                           ;incstack = 0
 35374  018CDC  9AF2               	bcf	intcon,5,c	;volatile
 35375                           
 35376                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 35377  018CDE  94F2               	bcf	intcon,2,c	;volatile
 35378  018CE0  0012               	return		;funcret
 35379  018CE2                     __end_ofi2_Timer0_Stop:
 35380                           	opt stack 0
 35381                           tosu	equ	0xFFF
 35382                           tosh	equ	0xFFE
 35383                           tosl	equ	0xFFD
 35384                           pclatu	equ	0xFFB
 35385                           pclath	equ	0xFFA
 35386                           tblptru	equ	0xFF8
 35387                           tblptrh	equ	0xFF7
 35388                           tblptrl	equ	0xFF6
 35389                           tablat	equ	0xFF5
 35390                           prodh	equ	0xFF4
 35391                           prodl	equ	0xFF3
 35392                           intcon	equ	0xFF2
 35393                           indf0	equ	0xFEF
 35394                           postinc0	equ	0xFEE
 35395                           fsr0h	equ	0xFEA
 35396                           fsr0l	equ	0xFE9
 35397                           wreg	equ	0xFE8
 35398                           indf1	equ	0xFE7
 35399                           postdec1	equ	0xFE5
 35400                           fsr1h	equ	0xFE2
 35401                           fsr1l	equ	0xFE1
 35402                           indf2	equ	0xFDF
 35403                           postinc2	equ	0xFDE
 35404                           postdec2	equ	0xFDD
 35405                           plusw2	equ	0xFDB
 35406                           fsr2h	equ	0xFDA
 35407                           fsr2l	equ	0xFD9
 35408                           status	equ	0xFD8
 35409                           
 35410 ;; *************** function i2_Timer0_Restart *****************
 35411 ;; Defined at:
 35412 ;;		line 83 in file "Library/Timer0.c"
 35413 ;; Parameters:    Size  Location     Type
 35414 ;;		None
 35415 ;; Auto vars:     Size  Location     Type
 35416 ;;		None
 35417 ;; Return value:  Size  Location     Type
 35418 ;;                  1    wreg      void 
 35419 ;; Registers used:
 35420 ;;		None
 35421 ;; Tracked objects:
 35422 ;;		On entry : 0/0
 35423 ;;		On exit  : 0/0
 35424 ;;		Unchanged: 0/0
 35425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35430 ;;Total ram usage:        0 bytes
 35431 ;; Hardware stack levels used:    1
 35432 ;; This function calls:
 35433 ;;		Nothing
 35434 ;; This function is called by:
 35435 ;;		i2_Motor_Step
 35436 ;; This function uses a non-reentrant model
 35437 ;;
 35438                           
 35439                           	psect	text160
 35440  018C90                     __ptext160:
 35441                           	opt stack 0
 35442  018C90                     i2_Timer0_Restart:
 35443                           	opt stack 17
 35444                           
 35445                           ;Timer0.c: 85: TMR0 = COUNTER;
 35446                           
 35447                           ;incstack = 0
 35448  018C90  C036  FFD6         	movff	_COUNTER,4054	;volatile
 35449  018C94  C037  FFD7         	movff	_COUNTER+1,4055	;volatile
 35450                           
 35451                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 35452  018C98  8AF2               	bsf	intcon,5,c	;volatile
 35453  018C9A  0012               	return		;funcret
 35454  018C9C                     __end_ofi2_Timer0_Restart:
 35455                           	opt stack 0
 35456                           tosu	equ	0xFFF
 35457                           tosh	equ	0xFFE
 35458                           tosl	equ	0xFFD
 35459                           pclatu	equ	0xFFB
 35460                           pclath	equ	0xFFA
 35461                           tblptru	equ	0xFF8
 35462                           tblptrh	equ	0xFF7
 35463                           tblptrl	equ	0xFF6
 35464                           tablat	equ	0xFF5
 35465                           prodh	equ	0xFF4
 35466                           prodl	equ	0xFF3
 35467                           intcon	equ	0xFF2
 35468                           indf0	equ	0xFEF
 35469                           postinc0	equ	0xFEE
 35470                           fsr0h	equ	0xFEA
 35471                           fsr0l	equ	0xFE9
 35472                           wreg	equ	0xFE8
 35473                           indf1	equ	0xFE7
 35474                           postdec1	equ	0xFE5
 35475                           fsr1h	equ	0xFE2
 35476                           fsr1l	equ	0xFE1
 35477                           indf2	equ	0xFDF
 35478                           postinc2	equ	0xFDE
 35479                           postdec2	equ	0xFDD
 35480                           plusw2	equ	0xFDB
 35481                           fsr2h	equ	0xFDA
 35482                           fsr2l	equ	0xFD9
 35483                           status	equ	0xFD8
 35484                           
 35485 ;; *************** function i2_Port_SetPin *****************
 35486 ;; Defined at:
 35487 ;;		line 247 in file "Library/Port.c"
 35488 ;; Parameters:    Size  Location     Type
 35489 ;;  pInput          2   15[COMRAM] const PTR struct Port
 35490 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 35491 ;;  pPin            1   17[COMRAM] enum E6750
 35492 ;;  pValue          1   18[COMRAM] unsigned char 
 35493 ;; Auto vars:     Size  Location     Type
 35494 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 35495 ;; Return value:  Size  Location     Type
 35496 ;;                  1    wreg      void 
 35497 ;; Registers used:
 35498 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35499 ;; Tracked objects:
 35500 ;;		On entry : 0/0
 35501 ;;		On exit  : 0/0
 35502 ;;		Unchanged: 0/0
 35503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35504 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35507 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35508 ;;Total ram usage:        5 bytes
 35509 ;; Hardware stack levels used:    1
 35510 ;; Hardware stack levels required when called:    3
 35511 ;; This function calls:
 35512 ;;		i2_Byte_SetBit
 35513 ;;		i2_Word_GetPair
 35514 ;; This function is called by:
 35515 ;;		i2_Motor_Step
 35516 ;; This function uses a non-reentrant model
 35517 ;;
 35518                           
 35519                           	psect	text161
 35520  016D48                     __ptext161:
 35521                           	opt stack 0
 35522  016D48                     i2_Port_SetPin:
 35523                           	opt stack 14
 35524                           
 35525                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 35526                           
 35527                           ;incstack = 0
 35528  016D48  0E08               	movlw	8
 35529  016D4A  2410               	addwf	i2Port_SetPin@pInput,w,c
 35530  016D4C  6E0D               	movwf	i2Word_GetPair@pInput,c
 35531  016D4E  0E00               	movlw	0
 35532  016D50  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 35533  016D52  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 35534  016D54  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 35535  016D58  ECE7  F0C3         	call	i2_Word_GetPair	;wreg free
 35536  016D5C  6E14               	movwf	i2Port_SetPin@Type,c
 35537                           
 35538                           ;Port.c: 250: switch (Type)
 35539  016D5E  D03B               	goto	i2l427
 35540  016D60                     
 35541                           ;Port.c: 256: pValue &= 1;
 35542  016D60  0E01               	movlw	1
 35543  016D62  1613               	andwf	i2Port_SetPin@pValue,f,c
 35544                           
 35545                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 35546  016D64  EE20 F002          	lfsr	2,2
 35547  016D68  5010               	movf	i2Port_SetPin@pInput,w,c
 35548  016D6A  26D9               	addwf	fsr2l,f,c
 35549  016D6C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 35550  016D6E  22DA               	addwfc	fsr2h,f,c
 35551  016D70  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 35552  016D74  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 35553  016D78  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 35554  016D7C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 35555  016D80  ECA6  F0C0         	call	i2_Byte_SetBit	;wreg free
 35556                           
 35557                           ;Port.c: 258: break;
 35558  016D84  0012               	return	
 35559  016D86                     
 35560                           ;Port.c: 261: pValue &= 1;
 35561  016D86  0E01               	movlw	1
 35562  016D88  1613               	andwf	i2Port_SetPin@pValue,f,c
 35563                           
 35564                           ;Port.c: 262: pValue ^= 1;
 35565  016D8A  0E01               	movlw	1
 35566  016D8C  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 35567                           
 35568                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 35569  016D8E  EE20 F002          	lfsr	2,2
 35570  016D92  5010               	movf	i2Port_SetPin@pInput,w,c
 35571  016D94  26D9               	addwf	fsr2l,f,c
 35572  016D96  5011               	movf	i2Port_SetPin@pInput+1,w,c
 35573  016D98  22DA               	addwfc	fsr2h,f,c
 35574  016D9A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 35575  016D9E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 35576  016DA2  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 35577  016DA6  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 35578  016DAA  ECA6  F0C0         	call	i2_Byte_SetBit	;wreg free
 35579                           
 35580                           ;Port.c: 264: break;
 35581  016DAE  0012               	return	
 35582  016DB0                     
 35583                           ;Port.c: 266: pValue &= 1;
 35584  016DB0  0E01               	movlw	1
 35585  016DB2  1613               	andwf	i2Port_SetPin@pValue,f,c
 35586                           
 35587                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 35588  016DB4  EE20 F004          	lfsr	2,4
 35589  016DB8  5010               	movf	i2Port_SetPin@pInput,w,c
 35590  016DBA  26D9               	addwf	fsr2l,f,c
 35591  016DBC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 35592  016DBE  22DA               	addwfc	fsr2h,f,c
 35593  016DC0  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 35594  016DC4  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 35595  016DC8  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 35596  016DCC  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 35597  016DD0  ECA6  F0C0         	call	i2_Byte_SetBit	;wreg free
 35598                           
 35599                           ;Port.c: 269: }
 35600                           
 35601                           ;Port.c: 268: break;
 35602  016DD4  0012               	return	
 35603  016DD6                     i2l427:
 35604  016DD6  5014               	movf	i2Port_SetPin@Type,w,c
 35605                           
 35606                           ; Switch size 1, requested type "space"
 35607                           ; Number of cases is 4, Range of values is 0 to 3
 35608                           ; switch strategies available:
 35609                           ; Name         Instructions Cycles
 35610                           ; simple_byte           13     7 (average)
 35611                           ;	Chosen strategy is simple_byte
 35612  016DD8  0A00               	xorlw	0	; case 0
 35613  016DDA  B4D8               	btfsc	status,2,c
 35614  016DDC  0012               	return	
 35615  016DDE  0A01               	xorlw	1	; case 1
 35616  016DE0  B4D8               	btfsc	status,2,c
 35617  016DE2  D7BE               	goto	i2l430
 35618  016DE4  0A03               	xorlw	3	; case 2
 35619  016DE6  B4D8               	btfsc	status,2,c
 35620  016DE8  D7CE               	goto	i2l432
 35621  016DEA  0A01               	xorlw	1	; case 3
 35622  016DEC  A4D8               	btfss	status,2,c
 35623  016DEE  0012               	return	
 35624  016DF0  D7DF               	goto	i2l433
 35625  016DF2                     __end_ofi2_Port_SetPin:
 35626                           	opt stack 0
 35627                           tosu	equ	0xFFF
 35628                           tosh	equ	0xFFE
 35629                           tosl	equ	0xFFD
 35630                           pclatu	equ	0xFFB
 35631                           pclath	equ	0xFFA
 35632                           tblptru	equ	0xFF8
 35633                           tblptrh	equ	0xFF7
 35634                           tblptrl	equ	0xFF6
 35635                           tablat	equ	0xFF5
 35636                           prodh	equ	0xFF4
 35637                           prodl	equ	0xFF3
 35638                           intcon	equ	0xFF2
 35639                           indf0	equ	0xFEF
 35640                           postinc0	equ	0xFEE
 35641                           fsr0h	equ	0xFEA
 35642                           fsr0l	equ	0xFE9
 35643                           wreg	equ	0xFE8
 35644                           indf1	equ	0xFE7
 35645                           postdec1	equ	0xFE5
 35646                           fsr1h	equ	0xFE2
 35647                           fsr1l	equ	0xFE1
 35648                           indf2	equ	0xFDF
 35649                           postinc2	equ	0xFDE
 35650                           postdec2	equ	0xFDD
 35651                           plusw2	equ	0xFDB
 35652                           fsr2h	equ	0xFDA
 35653                           fsr2l	equ	0xFD9
 35654                           status	equ	0xFD8
 35655                           
 35656 ;; *************** function i2_Word_GetPair *****************
 35657 ;; Defined at:
 35658 ;;		line 156 in file "Library/Types.c"
 35659 ;; Parameters:    Size  Location     Type
 35660 ;;  pInput          2   12[COMRAM] PTR struct Word
 35661 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 35662 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 35663 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 35664 ;;		 -> PortC(10), PortF(10), NULL(0), 
 35665 ;;  pPair           1   14[COMRAM] unsigned char 
 35666 ;; Auto vars:     Size  Location     Type
 35667 ;;		None
 35668 ;; Return value:  Size  Location     Type
 35669 ;;                  1    wreg      unsigned char 
 35670 ;; Registers used:
 35671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35672 ;; Tracked objects:
 35673 ;;		On entry : 0/0
 35674 ;;		On exit  : 0/0
 35675 ;;		Unchanged: 0/0
 35676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35677 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35680 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35681 ;;Total ram usage:        3 bytes
 35682 ;; Hardware stack levels used:    1
 35683 ;; Hardware stack levels required when called:    2
 35684 ;; This function calls:
 35685 ;;		i2_Byte_GetPair
 35686 ;; This function is called by:
 35687 ;;		i2_Port_SetPin
 35688 ;; This function uses a non-reentrant model
 35689 ;;
 35690                           
 35691                           	psect	text162
 35692  0187CE                     __ptext162:
 35693                           	opt stack 0
 35694  0187CE                     i2_Word_GetPair:
 35695                           	opt stack 14
 35696                           
 35697                           ;Types.c: 158: if (pPair >= 4)
 35698                           
 35699                           ;incstack = 0
 35700  0187CE  0E03               	movlw	3
 35701  0187D0  640F               	cpfsgt	i2Word_GetPair@pPair,c
 35702  0187D2  D00C               	goto	i2l781
 35703                           
 35704                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 35705  0187D4  0E01               	movlw	1
 35706  0187D6  240D               	addwf	i2Word_GetPair@pInput,w,c
 35707  0187D8  6E0A               	movwf	i2Byte_GetPair@pInput,c
 35708  0187DA  0E00               	movlw	0
 35709  0187DC  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 35710  0187DE  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 35711  0187E0  500F               	movf	i2Word_GetPair@pPair,w,c
 35712  0187E2  0FFC               	addlw	252
 35713  0187E4  6E0C               	movwf	i2Byte_GetPair@pPair,c
 35714  0187E6  EC35  F0C5         	call	i2_Byte_GetPair	;wreg free
 35715  0187EA  0012               	return	
 35716  0187EC                     i2l781:
 35717                           
 35718                           ;Types.c: 160: else
 35719                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 35720  0187EC  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 35721  0187F0  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 35722  0187F4  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 35723  0187F8  EC35  F0C5         	call	i2_Byte_GetPair	;wreg free
 35724  0187FC  0012               	return	
 35725  0187FE                     __end_ofi2_Word_GetPair:
 35726                           	opt stack 0
 35727                           tosu	equ	0xFFF
 35728                           tosh	equ	0xFFE
 35729                           tosl	equ	0xFFD
 35730                           pclatu	equ	0xFFB
 35731                           pclath	equ	0xFFA
 35732                           tblptru	equ	0xFF8
 35733                           tblptrh	equ	0xFF7
 35734                           tblptrl	equ	0xFF6
 35735                           tablat	equ	0xFF5
 35736                           prodh	equ	0xFF4
 35737                           prodl	equ	0xFF3
 35738                           intcon	equ	0xFF2
 35739                           indf0	equ	0xFEF
 35740                           postinc0	equ	0xFEE
 35741                           fsr0h	equ	0xFEA
 35742                           fsr0l	equ	0xFE9
 35743                           wreg	equ	0xFE8
 35744                           indf1	equ	0xFE7
 35745                           postdec1	equ	0xFE5
 35746                           fsr1h	equ	0xFE2
 35747                           fsr1l	equ	0xFE1
 35748                           indf2	equ	0xFDF
 35749                           postinc2	equ	0xFDE
 35750                           postdec2	equ	0xFDD
 35751                           plusw2	equ	0xFDB
 35752                           fsr2h	equ	0xFDA
 35753                           fsr2l	equ	0xFD9
 35754                           status	equ	0xFD8
 35755                           
 35756 ;; *************** function i2_Byte_GetPair *****************
 35757 ;; Defined at:
 35758 ;;		line 87 in file "Library/Types.c"
 35759 ;; Parameters:    Size  Location     Type
 35760 ;;  pInput          2    9[COMRAM] PTR struct Byte
 35761 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 35762 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 35763 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 35764 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 35765 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 35766 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 35767 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 35768 ;;		 -> NULL(0), 
 35769 ;;  pPair           1   11[COMRAM] unsigned char 
 35770 ;; Auto vars:     Size  Location     Type
 35771 ;;		None
 35772 ;; Return value:  Size  Location     Type
 35773 ;;                  1    wreg      unsigned char 
 35774 ;; Registers used:
 35775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35776 ;; Tracked objects:
 35777 ;;		On entry : 0/0
 35778 ;;		On exit  : 0/0
 35779 ;;		Unchanged: 0/0
 35780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35781 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35784 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35785 ;;Total ram usage:        3 bytes
 35786 ;; Hardware stack levels used:    1
 35787 ;; Hardware stack levels required when called:    1
 35788 ;; This function calls:
 35789 ;;		i2_Byte_GetZone
 35790 ;; This function is called by:
 35791 ;;		i2_Word_GetPair
 35792 ;; This function uses a non-reentrant model
 35793 ;;
 35794                           
 35795                           	psect	text163
 35796  018A6A                     __ptext163:
 35797                           	opt stack 0
 35798  018A6A                     i2_Byte_GetPair:
 35799                           	opt stack 14
 35800                           
 35801                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 35802                           
 35803                           ;incstack = 0
 35804  018A6A  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 35805  018A6E  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 35806  018A72  0E04               	movlw	4
 35807  018A74  6E03               	movwf	i2Byte_GetZone@pMax,c
 35808  018A76  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 35809  018A7A  0E02               	movlw	2
 35810  018A7C  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 35811  018A7E  EC1A  F0BC         	call	i2_Byte_GetZone	;wreg free
 35812  018A82  0012               	return	
 35813  018A84                     __end_ofi2_Byte_GetPair:
 35814                           	opt stack 0
 35815                           tosu	equ	0xFFF
 35816                           tosh	equ	0xFFE
 35817                           tosl	equ	0xFFD
 35818                           pclatu	equ	0xFFB
 35819                           pclath	equ	0xFFA
 35820                           tblptru	equ	0xFF8
 35821                           tblptrh	equ	0xFF7
 35822                           tblptrl	equ	0xFF6
 35823                           tablat	equ	0xFF5
 35824                           prodh	equ	0xFF4
 35825                           prodl	equ	0xFF3
 35826                           intcon	equ	0xFF2
 35827                           indf0	equ	0xFEF
 35828                           postinc0	equ	0xFEE
 35829                           fsr0h	equ	0xFEA
 35830                           fsr0l	equ	0xFE9
 35831                           wreg	equ	0xFE8
 35832                           indf1	equ	0xFE7
 35833                           postdec1	equ	0xFE5
 35834                           fsr1h	equ	0xFE2
 35835                           fsr1l	equ	0xFE1
 35836                           indf2	equ	0xFDF
 35837                           postinc2	equ	0xFDE
 35838                           postdec2	equ	0xFDD
 35839                           plusw2	equ	0xFDB
 35840                           fsr2h	equ	0xFDA
 35841                           fsr2l	equ	0xFD9
 35842                           status	equ	0xFD8
 35843                           
 35844 ;; *************** function i2_Byte_GetZone *****************
 35845 ;; Defined at:
 35846 ;;		line 64 in file "Library/Types.c"
 35847 ;; Parameters:    Size  Location     Type
 35848 ;;  pInput          2    0[COMRAM] PTR struct Byte
 35849 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 35850 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 35851 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 35852 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 35853 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 35854 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 35855 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 35856 ;;		 -> NULL(0), 
 35857 ;;  pMax            1    2[COMRAM] unsigned char 
 35858 ;;  pChunk          1    3[COMRAM] unsigned char 
 35859 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 35860 ;; Auto vars:     Size  Location     Type
 35861 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 35862 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 35863 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 35864 ;; Return value:  Size  Location     Type
 35865 ;;                  1    wreg      unsigned char 
 35866 ;; Registers used:
 35867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 35868 ;; Tracked objects:
 35869 ;;		On entry : 0/0
 35870 ;;		On exit  : 0/0
 35871 ;;		Unchanged: 0/0
 35872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35873 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35874 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35875 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35876 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35877 ;;Total ram usage:        9 bytes
 35878 ;; Hardware stack levels used:    1
 35879 ;; This function calls:
 35880 ;;		Nothing
 35881 ;; This function is called by:
 35882 ;;		i2_Byte_GetPair
 35883 ;; This function uses a non-reentrant model
 35884 ;;
 35885                           
 35886                           	psect	text164
 35887  017834                     __ptext164:
 35888                           	opt stack 0
 35889  017834                     i2_Byte_GetZone:
 35890                           	opt stack 14
 35891                           
 35892                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 35893                           
 35894                           ;incstack = 0
 35895  017834  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 35896  017838  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 35897  01783C  0E00               	movlw	low (__mediumconst shr (0+16))
 35898  01783E  6EF8               	movwf	tblptru,c
 35899  017840  0E0F               	movlw	(high __ramtop+-1)
 35900  017842  64F7               	cpfsgt	tblptrh,c
 35901  017844  D003               	bra	i2u727_47
 35902  017846  0008               	tblrd		*
 35903  017848  50F5               	movf	tablat,w,c
 35904  01784A  D005               	bra	i2u727_40
 35905  01784C                     i2u727_47:
 35906  01784C  CFF6 FFE9          	movff	tblptrl,fsr0l
 35907  017850  CFF7 FFEA          	movff	tblptrh,fsr0h
 35908  017854  50EF               	movf	indf0,w,c
 35909  017856                     i2u727_40:
 35910  017856  6E09               	movwf	i2Byte_GetZone@Output,c
 35911                           
 35912                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 35913  017858  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 35914  01785A  0D01               	mullw	1
 35915  01785C  0E31               	movlw	low _MASKS
 35916  01785E  24F3               	addwf	prodl,w,c
 35917  017860  6EF6               	movwf	tblptrl,c
 35918  017862  0EFC               	movlw	high _MASKS
 35919  017864  20F4               	addwfc	prodh,w,c
 35920  017866  6EF7               	movwf	tblptrh,c
 35921  017868                     	if	1	;There are 3 active tblptr bytes
 35922  017868  6AF8               	clrf	tblptru,c
 35923  01786A  0E00               	movlw	low (__mediumconst shr (0+16))
 35924  01786C  22F8               	addwfc	tblptru,f,c
 35925  01786E                     	endif
 35926  01786E  0008               	tblrd		*
 35927  017870  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 35928                           
 35929                           ;Types.c: 68: UINT8 Offset = 0;
 35930  017874  0E00               	movlw	0
 35931  017876  6E08               	movwf	i2Byte_GetZone@Offset,c
 35932                           
 35933                           ;Types.c: 70: while (pChunk >= pMax)
 35934  017878  D003               	goto	i2l732
 35935  01787A                     
 35936                           ;Types.c: 71: {
 35937                           ;Types.c: 72: pChunk -= pMax;
 35938  01787A  5003               	movf	i2Byte_GetZone@pMax,w,c
 35939  01787C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 35940                           
 35941                           ;Types.c: 73: Offset += 1;
 35942  01787E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 35943  017880                     i2l732:
 35944  017880  5003               	movf	i2Byte_GetZone@pMax,w,c
 35945  017882  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 35946  017884  B0D8               	btfsc	status,0,c
 35947  017886  D7F9               	goto	i2l733
 35948                           
 35949                           ;Types.c: 74: }
 35950                           ;Types.c: 75: pChunk *= pChunkSize;
 35951  017888  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 35952  01788A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 35953  01788C  50F3               	movf	prodl,w,c
 35954  01788E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 35955                           
 35956                           ;Types.c: 76: pChunk += Offset;
 35957  017890  5008               	movf	i2Byte_GetZone@Offset,w,c
 35958  017892  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 35959                           
 35960                           ;Types.c: 78: Output >>= pChunk;
 35961  017894  2804               	incf	i2Byte_GetZone@pChunk,w,c
 35962  017896  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 35963  017898  D002               	goto	i2u729_40
 35964  01789A                     i2u729_45:
 35965  01789A  90D8               	bcf	status,0,c
 35966  01789C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 35967  01789E                     i2u729_40:
 35968  01789E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 35969  0178A0  D7FC               	goto	i2u729_45
 35970                           
 35971                           ;Types.c: 79: Output &= MASK;
 35972  0178A2  5007               	movf	i2Byte_GetZone@MASK,w,c
 35973  0178A4  1609               	andwf	i2Byte_GetZone@Output,f,c
 35974                           
 35975                           ;Types.c: 80: return Output;
 35976  0178A6  5009               	movf	i2Byte_GetZone@Output,w,c
 35977  0178A8  0012               	return	
 35978  0178AA                     __end_ofi2_Byte_GetZone:
 35979                           	opt stack 0
 35980                           tosu	equ	0xFFF
 35981                           tosh	equ	0xFFE
 35982                           tosl	equ	0xFFD
 35983                           pclatu	equ	0xFFB
 35984                           pclath	equ	0xFFA
 35985                           tblptru	equ	0xFF8
 35986                           tblptrh	equ	0xFF7
 35987                           tblptrl	equ	0xFF6
 35988                           tablat	equ	0xFF5
 35989                           prodh	equ	0xFF4
 35990                           prodl	equ	0xFF3
 35991                           intcon	equ	0xFF2
 35992                           indf0	equ	0xFEF
 35993                           postinc0	equ	0xFEE
 35994                           fsr0h	equ	0xFEA
 35995                           fsr0l	equ	0xFE9
 35996                           wreg	equ	0xFE8
 35997                           indf1	equ	0xFE7
 35998                           postdec1	equ	0xFE5
 35999                           fsr1h	equ	0xFE2
 36000                           fsr1l	equ	0xFE1
 36001                           indf2	equ	0xFDF
 36002                           postinc2	equ	0xFDE
 36003                           postdec2	equ	0xFDD
 36004                           plusw2	equ	0xFDB
 36005                           fsr2h	equ	0xFDA
 36006                           fsr2l	equ	0xFD9
 36007                           status	equ	0xFD8
 36008                           
 36009 ;; *************** function i2_Byte_SetBit *****************
 36010 ;; Defined at:
 36011 ;;		line 32 in file "Library/Types.c"
 36012 ;; Parameters:    Size  Location     Type
 36013 ;;  pInput          2    0[COMRAM] PTR struct Byte
 36014 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 36015 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 36016 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 36017 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 36018 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 36019 ;;		 -> NULL(0), 
 36020 ;;  pBit            1    2[COMRAM] unsigned char 
 36021 ;;  pValue          1    3[COMRAM] unsigned char 
 36022 ;; Auto vars:     Size  Location     Type
 36023 ;;		None
 36024 ;; Return value:  Size  Location     Type
 36025 ;;                  1    wreg      void 
 36026 ;; Registers used:
 36027 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 36028 ;; Tracked objects:
 36029 ;;		On entry : 0/0
 36030 ;;		On exit  : 0/0
 36031 ;;		Unchanged: 0/0
 36032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36033 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36035 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36036 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36037 ;;Total ram usage:        7 bytes
 36038 ;; Hardware stack levels used:    1
 36039 ;; This function calls:
 36040 ;;		Nothing
 36041 ;; This function is called by:
 36042 ;;		i2_Port_SetPin
 36043 ;; This function uses a non-reentrant model
 36044 ;;
 36045                           
 36046                           	psect	text165
 36047  01814C                     __ptext165:
 36048                           	opt stack 0
 36049  01814C                     i2_Byte_SetBit:
 36050                           	opt stack 16
 36051                           
 36052                           ;Types.c: 34: pValue &= 1;
 36053                           
 36054                           ;incstack = 0
 36055  01814C  0E01               	movlw	1
 36056  01814E  1604               	andwf	i2Byte_SetBit@pValue,f,c
 36057                           
 36058                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 36059  018150  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 36060  018154  0E01               	movlw	1
 36061  018156  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 36062  018158  2A05               	incf	??i2_Byte_SetBit,f,c
 36063  01815A  D002               	goto	i2u788_44
 36064  01815C                     i2u788_45:
 36065  01815C  90D8               	bcf	status,0,c
 36066  01815E  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 36067  018160                     i2u788_44:
 36068  018160  2E05               	decfsz	??i2_Byte_SetBit,f,c
 36069  018162  D7FC               	goto	i2u788_45
 36070  018164  5006               	movf	??i2_Byte_SetBit+1,w,c
 36071  018166  0AFF               	xorlw	255
 36072  018168  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 36073  01816A  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 36074  01816E  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 36075  018172  5007               	movf	??i2_Byte_SetBit+2,w,c
 36076  018174  16DF               	andwf	indf2,f,c
 36077                           
 36078                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 36079  018176  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 36080  01817A  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 36081  01817E  2A05               	incf	??i2_Byte_SetBit,f,c
 36082  018180  D002               	goto	i2u789_44
 36083  018182                     i2u789_45:
 36084  018182  90D8               	bcf	status,0,c
 36085  018184  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 36086  018186                     i2u789_44:
 36087  018186  2E05               	decfsz	??i2_Byte_SetBit,f,c
 36088  018188  D7FC               	goto	i2u789_45
 36089  01818A  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 36090  01818E  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 36091  018192  5006               	movf	??i2_Byte_SetBit+1,w,c
 36092  018194  12DF               	iorwf	indf2,f,c
 36093  018196  0012               	return		;funcret
 36094  018198                     __end_ofi2_Byte_SetBit:
 36095                           	opt stack 0
 36096                           tosu	equ	0xFFF
 36097                           tosh	equ	0xFFE
 36098                           tosl	equ	0xFFD
 36099                           pclatu	equ	0xFFB
 36100                           pclath	equ	0xFFA
 36101                           tblptru	equ	0xFF8
 36102                           tblptrh	equ	0xFF7
 36103                           tblptrl	equ	0xFF6
 36104                           tablat	equ	0xFF5
 36105                           prodh	equ	0xFF4
 36106                           prodl	equ	0xFF3
 36107                           intcon	equ	0xFF2
 36108                           indf0	equ	0xFEF
 36109                           postinc0	equ	0xFEE
 36110                           fsr0h	equ	0xFEA
 36111                           fsr0l	equ	0xFE9
 36112                           wreg	equ	0xFE8
 36113                           indf1	equ	0xFE7
 36114                           postdec1	equ	0xFE5
 36115                           fsr1h	equ	0xFE2
 36116                           fsr1l	equ	0xFE1
 36117                           indf2	equ	0xFDF
 36118                           postinc2	equ	0xFDE
 36119                           postdec2	equ	0xFDD
 36120                           plusw2	equ	0xFDB
 36121                           fsr2h	equ	0xFDA
 36122                           fsr2l	equ	0xFD9
 36123                           status	equ	0xFD8
 36124                           
 36125 ;; *************** function i2_MXK_SwitchTo *****************
 36126 ;; Defined at:
 36127 ;;		line 105 in file "Library/MXK.c"
 36128 ;; Parameters:    Size  Location     Type
 36129 ;;  pModule         1    wreg     enum E6927
 36130 ;; Auto vars:     Size  Location     Type
 36131 ;;  pModule         1    7[COMRAM] enum E6927
 36132 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 36133 ;; Return value:  Size  Location     Type
 36134 ;;                  1    wreg      unsigned char 
 36135 ;; Registers used:
 36136 ;;		wreg, status,2, status,0, cstack
 36137 ;; Tracked objects:
 36138 ;;		On entry : 0/0
 36139 ;;		On exit  : 0/0
 36140 ;;		Unchanged: 0/0
 36141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36146 ;;Total ram usage:        2 bytes
 36147 ;; Hardware stack levels used:    1
 36148 ;; Hardware stack levels required when called:    1
 36149 ;; This function calls:
 36150 ;;		i2_delay_us
 36151 ;; This function is called by:
 36152 ;;		i2_Motor_Step
 36153 ;; This function uses a non-reentrant model
 36154 ;;
 36155                           
 36156                           	psect	text166
 36157  018672                     __ptext166:
 36158                           	opt stack 0
 36159  018672                     i2_MXK_SwitchTo:
 36160                           	opt stack 16
 36161                           
 36162                           ;incstack = 0
 36163                           ;i2MXK_SwitchTo@pModule stored from wreg
 36164  018672  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 36165                           
 36166                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 36167  018674  5086               	movf	3974,w,c	;volatile
 36168  018676  0B0F               	andlw	15
 36169  018678  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 36170                           
 36171                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 36172  01867A  504C               	movf	_Bus_State,w,c
 36173  01867C  A4D8               	btfss	status,2,c
 36174  01867E  D002               	goto	i2l1730
 36175                           
 36176                           ;MXK.c: 110: return 0;
 36177  018680  0E00               	movlw	0
 36178  018682  0012               	return	
 36179  018684                     i2l1730:
 36180                           
 36181                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 36182  018684  0E00               	movlw	0
 36183  018686  6E4C               	movwf	_Bus_State,c
 36184                           
 36185                           ;MXK.c: 114: if (CUR != pModule)
 36186  018688  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 36187  01868A  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 36188  01868C  B4D8               	btfsc	status,2,c
 36189  01868E  D00A               	goto	i2l1732
 36190                           
 36191                           ;MXK.c: 115: {
 36192                           ;MXK.c: 116: PORTG &= ~(0xF);
 36193  018690  0EF0               	movlw	240
 36194  018692  1686               	andwf	3974,f,c	;volatile
 36195                           
 36196                           ;MXK.c: 117: PORTG |= pModule;
 36197  018694  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 36198  018696  1286               	iorwf	3974,f,c	;volatile
 36199                           
 36200                           ;MXK.c: 120: delay_us(10);
 36201  018698  0E00               	movlw	0
 36202  01869A  6E02               	movwf	i2delay_us@us+1,c
 36203  01869C  0E0A               	movlw	10
 36204  01869E  6E01               	movwf	i2delay_us@us,c
 36205  0186A0  EC4E  F0C2         	call	i2_delay_us	;wreg free
 36206  0186A4                     i2l1732:
 36207                           
 36208                           ;MXK.c: 121: }
 36209                           ;MXK.c: 122: return 1;
 36210  0186A4  0E01               	movlw	1
 36211  0186A6  0012               	return	
 36212  0186A8                     __end_ofi2_MXK_SwitchTo:
 36213                           	opt stack 0
 36214                           tosu	equ	0xFFF
 36215                           tosh	equ	0xFFE
 36216                           tosl	equ	0xFFD
 36217                           pclatu	equ	0xFFB
 36218                           pclath	equ	0xFFA
 36219                           tblptru	equ	0xFF8
 36220                           tblptrh	equ	0xFF7
 36221                           tblptrl	equ	0xFF6
 36222                           tablat	equ	0xFF5
 36223                           prodh	equ	0xFF4
 36224                           prodl	equ	0xFF3
 36225                           intcon	equ	0xFF2
 36226                           indf0	equ	0xFEF
 36227                           postinc0	equ	0xFEE
 36228                           fsr0h	equ	0xFEA
 36229                           fsr0l	equ	0xFE9
 36230                           wreg	equ	0xFE8
 36231                           indf1	equ	0xFE7
 36232                           postdec1	equ	0xFE5
 36233                           fsr1h	equ	0xFE2
 36234                           fsr1l	equ	0xFE1
 36235                           indf2	equ	0xFDF
 36236                           postinc2	equ	0xFDE
 36237                           postdec2	equ	0xFDD
 36238                           plusw2	equ	0xFDB
 36239                           fsr2h	equ	0xFDA
 36240                           fsr2l	equ	0xFD9
 36241                           status	equ	0xFD8
 36242                           
 36243 ;; *************** function i2_delay_us *****************
 36244 ;; Defined at:
 36245 ;;		line 255 in file "Library/Types.c"
 36246 ;; Parameters:    Size  Location     Type
 36247 ;;  us              2    0[COMRAM] unsigned short 
 36248 ;; Auto vars:     Size  Location     Type
 36249 ;;  delay_us        4    2[COMRAM] unsigned long 
 36250 ;; Return value:  Size  Location     Type
 36251 ;;                  1    wreg      void 
 36252 ;; Registers used:
 36253 ;;		wreg, status,2, status,0
 36254 ;; Tracked objects:
 36255 ;;		On entry : 0/0
 36256 ;;		On exit  : 0/0
 36257 ;;		Unchanged: 0/0
 36258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36260 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36262 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36263 ;;Total ram usage:        6 bytes
 36264 ;; Hardware stack levels used:    1
 36265 ;; This function calls:
 36266 ;;		Nothing
 36267 ;; This function is called by:
 36268 ;;		i2_MXK_SwitchTo
 36269 ;; This function uses a non-reentrant model
 36270 ;;
 36271                           
 36272                           	psect	text167
 36273  01849C                     __ptext167:
 36274                           	opt stack 0
 36275  01849C                     i2_delay_us:
 36276                           	opt stack 16
 36277                           
 36278                           ;Types.c: 256: unsigned long u;
 36279                           ;Types.c: 257: while (us--) {
 36280                           
 36281                           ;incstack = 0
 36282  01849C  D016               	goto	i2u792_40
 36283  01849E                     i2l10711:
 36284                           
 36285                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 36286  01849E  0E00               	movlw	0
 36287  0184A0  6E03               	movwf	i2delay_us@u,c
 36288  0184A2  0E00               	movlw	0
 36289  0184A4  6E04               	movwf	i2delay_us@u+1,c
 36290  0184A6  0E00               	movlw	0
 36291  0184A8  6E05               	movwf	i2delay_us@u+2,c
 36292  0184AA  0E00               	movlw	0
 36293  0184AC  6E06               	movwf	i2delay_us@u+3,c
 36294  0184AE                     i2l10713:
 36295  0184AE  5003               	movf	i2delay_us@u,w,c
 36296  0184B0  1004               	iorwf	i2delay_us@u+1,w,c
 36297  0184B2  1005               	iorwf	i2delay_us@u+2,w,c
 36298  0184B4  1006               	iorwf	i2delay_us@u+3,w,c
 36299  0184B6  A4D8               	btfss	status,2,c
 36300  0184B8  D008               	goto	i2u792_40
 36301  0184BA  F000               	nop		; ;# 
 36302  0184BC  0E01               	movlw	1
 36303  0184BE  2603               	addwf	i2delay_us@u,f,c
 36304  0184C0  0E00               	movlw	0
 36305  0184C2  2204               	addwfc	i2delay_us@u+1,f,c
 36306  0184C4  2205               	addwfc	i2delay_us@u+2,f,c
 36307  0184C6  2206               	addwfc	i2delay_us@u+3,f,c
 36308  0184C8  D7F2               	goto	i2l10713
 36309  0184CA                     i2u792_40:
 36310  0184CA  0601               	decf	i2delay_us@us,f,c
 36311  0184CC  A0D8               	btfss	status,0,c
 36312  0184CE  0602               	decf	i2delay_us@us+1,f,c
 36313  0184D0  2801               	incf	i2delay_us@us,w,c
 36314  0184D2  E1E5               	bnz	i2l10711
 36315  0184D4  2802               	incf	i2delay_us@us+1,w,c
 36316  0184D6  B4D8               	btfsc	status,2,c
 36317  0184D8  0012               	return	
 36318  0184DA  D7E1               	goto	i2l832
 36319  0184DC                     __end_ofi2_delay_us:
 36320                           	opt stack 0
 36321                           tosu	equ	0xFFF
 36322                           tosh	equ	0xFFE
 36323                           tosl	equ	0xFFD
 36324                           pclatu	equ	0xFFB
 36325                           pclath	equ	0xFFA
 36326                           tblptru	equ	0xFF8
 36327                           tblptrh	equ	0xFF7
 36328                           tblptrl	equ	0xFF6
 36329                           tablat	equ	0xFF5
 36330                           prodh	equ	0xFF4
 36331                           prodl	equ	0xFF3
 36332                           intcon	equ	0xFF2
 36333                           indf0	equ	0xFEF
 36334                           postinc0	equ	0xFEE
 36335                           fsr0h	equ	0xFEA
 36336                           fsr0l	equ	0xFE9
 36337                           wreg	equ	0xFE8
 36338                           indf1	equ	0xFE7
 36339                           postdec1	equ	0xFE5
 36340                           fsr1h	equ	0xFE2
 36341                           fsr1l	equ	0xFE1
 36342                           indf2	equ	0xFDF
 36343                           postinc2	equ	0xFDE
 36344                           postdec2	equ	0xFDD
 36345                           plusw2	equ	0xFDB
 36346                           fsr2h	equ	0xFDA
 36347                           fsr2l	equ	0xFD9
 36348                           status	equ	0xFD8
 36349                           
 36350 ;; *************** function i2_MXK_Release *****************
 36351 ;; Defined at:
 36352 ;;		line 130 in file "Library/MXK.c"
 36353 ;; Parameters:    Size  Location     Type
 36354 ;;		None
 36355 ;; Auto vars:     Size  Location     Type
 36356 ;;		None
 36357 ;; Return value:  Size  Location     Type
 36358 ;;                  1    wreg      unsigned char 
 36359 ;; Registers used:
 36360 ;;		wreg, status,2, status,0
 36361 ;; Tracked objects:
 36362 ;;		On entry : 0/0
 36363 ;;		On exit  : 0/0
 36364 ;;		Unchanged: 0/0
 36365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36370 ;;Total ram usage:        0 bytes
 36371 ;; Hardware stack levels used:    1
 36372 ;; This function calls:
 36373 ;;		Nothing
 36374 ;; This function is called by:
 36375 ;;		i2_Motor_Step
 36376 ;; This function uses a non-reentrant model
 36377 ;;
 36378                           
 36379                           	psect	text168
 36380  018CE2                     __ptext168:
 36381                           	opt stack 0
 36382  018CE2                     i2_MXK_Release:
 36383                           	opt stack 17
 36384                           
 36385                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 36386                           
 36387                           ;incstack = 0
 36388  018CE2  0E01               	movlw	1
 36389  018CE4  6E4C               	movwf	_Bus_State,c
 36390                           
 36391                           ;MXK.c: 135: return 1;
 36392                           ;	Return value of i2_MXK_Release is never used
 36393  018CE6  0012               	return	
 36394  018CE8                     __end_ofi2_MXK_Release:
 36395                           	opt stack 0
 36396                           tosu	equ	0xFFF
 36397                           tosh	equ	0xFFE
 36398                           tosl	equ	0xFFD
 36399                           pclatu	equ	0xFFB
 36400                           pclath	equ	0xFFA
 36401                           tblptru	equ	0xFF8
 36402                           tblptrh	equ	0xFF7
 36403                           tblptrl	equ	0xFF6
 36404                           tablat	equ	0xFF5
 36405                           prodh	equ	0xFF4
 36406                           prodl	equ	0xFF3
 36407                           intcon	equ	0xFF2
 36408                           indf0	equ	0xFEF
 36409                           postinc0	equ	0xFEE
 36410                           fsr0h	equ	0xFEA
 36411                           fsr0l	equ	0xFE9
 36412                           wreg	equ	0xFE8
 36413                           indf1	equ	0xFE7
 36414                           postdec1	equ	0xFE5
 36415                           fsr1h	equ	0xFE2
 36416                           fsr1l	equ	0xFE1
 36417                           indf2	equ	0xFDF
 36418                           postinc2	equ	0xFDE
 36419                           postdec2	equ	0xFDD
 36420                           plusw2	equ	0xFDB
 36421                           fsr2h	equ	0xFDA
 36422                           fsr2l	equ	0xFD9
 36423                           status	equ	0xFD8
 36424                           
 36425 ;; *************** function i2_MXK_Queue *****************
 36426 ;; Defined at:
 36427 ;;		line 144 in file "Library/MXK.c"
 36428 ;; Parameters:    Size  Location     Type
 36429 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 36430 ;;		 -> Absolute function(1), Motor_Step(1), 
 36431 ;; Auto vars:     Size  Location     Type
 36432 ;;		None
 36433 ;; Return value:  Size  Location     Type
 36434 ;;                  1    wreg      void 
 36435 ;; Registers used:
 36436 ;;		wreg, status,2, status,0
 36437 ;; Tracked objects:
 36438 ;;		On entry : 0/0
 36439 ;;		On exit  : 0/0
 36440 ;;		Unchanged: 0/0
 36441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 36442 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36445 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 36446 ;;Total ram usage:        3 bytes
 36447 ;; Hardware stack levels used:    1
 36448 ;; This function calls:
 36449 ;;		Nothing
 36450 ;; This function is called by:
 36451 ;;		i2_Motor_Step
 36452 ;; This function uses a non-reentrant model
 36453 ;;
 36454                           
 36455                           	psect	text169
 36456  018C76                     __ptext169:
 36457                           	opt stack 0
 36458  018C76                     i2_MXK_Queue:
 36459                           	opt stack 17
 36460                           
 36461                           ;MXK.c: 146: lQueue = pCallback;
 36462                           
 36463                           ;incstack = 0
 36464  018C76  C001  F029         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 36465  018C7A  C002  F02A         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 36466  018C7E  C003  F02B         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 36467  018C82  0012               	return		;funcret
 36468  018C84                     __end_ofi2_MXK_Queue:
 36469                           	opt stack 0
 36470                           tosu	equ	0xFFF
 36471                           tosh	equ	0xFFE
 36472                           tosl	equ	0xFFD
 36473                           pclatu	equ	0xFFB
 36474                           pclath	equ	0xFFA
 36475                           tblptru	equ	0xFF8
 36476                           tblptrh	equ	0xFF7
 36477                           tblptrl	equ	0xFF6
 36478                           tablat	equ	0xFF5
 36479                           prodh	equ	0xFF4
 36480                           prodl	equ	0xFF3
 36481                           intcon	equ	0xFF2
 36482                           indf0	equ	0xFEF
 36483                           postinc0	equ	0xFEE
 36484                           fsr0h	equ	0xFEA
 36485                           fsr0l	equ	0xFE9
 36486                           wreg	equ	0xFE8
 36487                           indf1	equ	0xFE7
 36488                           postdec1	equ	0xFE5
 36489                           fsr1h	equ	0xFE2
 36490                           fsr1l	equ	0xFE1
 36491                           indf2	equ	0xFDF
 36492                           postinc2	equ	0xFDE
 36493                           postdec2	equ	0xFDD
 36494                           plusw2	equ	0xFDB
 36495                           fsr2h	equ	0xFDA
 36496                           fsr2l	equ	0xFD9
 36497                           status	equ	0xFD8
 36498                           tosu	equ	0xFFF
 36499                           tosh	equ	0xFFE
 36500                           tosl	equ	0xFFD
 36501                           pclatu	equ	0xFFB
 36502                           pclath	equ	0xFFA
 36503                           tblptru	equ	0xFF8
 36504                           tblptrh	equ	0xFF7
 36505                           tblptrl	equ	0xFF6
 36506                           tablat	equ	0xFF5
 36507                           prodh	equ	0xFF4
 36508                           prodl	equ	0xFF3
 36509                           intcon	equ	0xFF2
 36510                           indf0	equ	0xFEF
 36511                           postinc0	equ	0xFEE
 36512                           fsr0h	equ	0xFEA
 36513                           fsr0l	equ	0xFE9
 36514                           wreg	equ	0xFE8
 36515                           indf1	equ	0xFE7
 36516                           postdec1	equ	0xFE5
 36517                           fsr1h	equ	0xFE2
 36518                           fsr1l	equ	0xFE1
 36519                           indf2	equ	0xFDF
 36520                           postinc2	equ	0xFDE
 36521                           postdec2	equ	0xFDD
 36522                           plusw2	equ	0xFDB
 36523                           fsr2h	equ	0xFDA
 36524                           fsr2l	equ	0xFD9
 36525                           status	equ	0xFD8
 36526                           
 36527                           	psect	text170
 36528  000000                     __ptext170:
 36529                           	opt stack 0
 36530                           tosu	equ	0xFFF
 36531                           tosh	equ	0xFFE
 36532                           tosl	equ	0xFFD
 36533                           pclatu	equ	0xFFB
 36534                           pclath	equ	0xFFA
 36535                           tblptru	equ	0xFF8
 36536                           tblptrh	equ	0xFF7
 36537                           tblptrl	equ	0xFF6
 36538                           tablat	equ	0xFF5
 36539                           prodh	equ	0xFF4
 36540                           prodl	equ	0xFF3
 36541                           intcon	equ	0xFF2
 36542                           indf0	equ	0xFEF
 36543                           postinc0	equ	0xFEE
 36544                           fsr0h	equ	0xFEA
 36545                           fsr0l	equ	0xFE9
 36546                           wreg	equ	0xFE8
 36547                           indf1	equ	0xFE7
 36548                           postdec1	equ	0xFE5
 36549                           fsr1h	equ	0xFE2
 36550                           fsr1l	equ	0xFE1
 36551                           indf2	equ	0xFDF
 36552                           postinc2	equ	0xFDE
 36553                           postdec2	equ	0xFDD
 36554                           plusw2	equ	0xFDB
 36555                           fsr2h	equ	0xFDA
 36556                           fsr2l	equ	0xFD9
 36557                           status	equ	0xFD8
 36558                           
 36559                           	psect	rparam
 36560  0000                     tosu	equ	0xFFF
 36561                           tosh	equ	0xFFE
 36562                           tosl	equ	0xFFD
 36563                           pclatu	equ	0xFFB
 36564                           pclath	equ	0xFFA
 36565                           tblptru	equ	0xFF8
 36566                           tblptrh	equ	0xFF7
 36567                           tblptrl	equ	0xFF6
 36568                           tablat	equ	0xFF5
 36569                           prodh	equ	0xFF4
 36570                           prodl	equ	0xFF3
 36571                           intcon	equ	0xFF2
 36572                           indf0	equ	0xFEF
 36573                           postinc0	equ	0xFEE
 36574                           fsr0h	equ	0xFEA
 36575                           fsr0l	equ	0xFE9
 36576                           wreg	equ	0xFE8
 36577                           indf1	equ	0xFE7
 36578                           postdec1	equ	0xFE5
 36579                           fsr1h	equ	0xFE2
 36580                           fsr1l	equ	0xFE1
 36581                           indf2	equ	0xFDF
 36582                           postinc2	equ	0xFDE
 36583                           postdec2	equ	0xFDD
 36584                           plusw2	equ	0xFDB
 36585                           fsr2h	equ	0xFDA
 36586                           fsr2l	equ	0xFD9
 36587                           status	equ	0xFD8
 36588                           
 36589                           	psect	temp
 36590  000051                     btemp:
 36591                           	opt stack 0
 36592  000051                     	ds	1
 36593  0000                     int$flags	set	btemp
 36594  0000                     wtemp6	set	btemp+1
 36595                           tosu	equ	0xFFF
 36596                           tosh	equ	0xFFE
 36597                           tosl	equ	0xFFD
 36598                           pclatu	equ	0xFFB
 36599                           pclath	equ	0xFFA
 36600                           tblptru	equ	0xFF8
 36601                           tblptrh	equ	0xFF7
 36602                           tblptrl	equ	0xFF6
 36603                           tablat	equ	0xFF5
 36604                           prodh	equ	0xFF4
 36605                           prodl	equ	0xFF3
 36606                           intcon	equ	0xFF2
 36607                           indf0	equ	0xFEF
 36608                           postinc0	equ	0xFEE
 36609                           fsr0h	equ	0xFEA
 36610                           fsr0l	equ	0xFE9
 36611                           wreg	equ	0xFE8
 36612                           indf1	equ	0xFE7
 36613                           postdec1	equ	0xFE5
 36614                           fsr1h	equ	0xFE2
 36615                           fsr1l	equ	0xFE1
 36616                           indf2	equ	0xFDF
 36617                           postinc2	equ	0xFDE
 36618                           postdec2	equ	0xFDD
 36619                           plusw2	equ	0xFDB
 36620                           fsr2h	equ	0xFDA
 36621                           fsr2l	equ	0xFD9
 36622                           status	equ	0xFD8


Data Sizes:
    Strings     388
    Constant    806
    Data        41
    BSS         1000
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    159     159
    BANK1           256     23     255
    BANK2           256     12     211
    BANK3           256      0     200
    BANK4           256      0      70
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(BANK1[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_34(CODE[12]), STR_33(CODE[7]), STR_32(CODE[12]), STR_31(CODE[9]), 
		 -> STR_30(CODE[10]), STR_29(CODE[3]), STR_28(CODE[24]), STR_27(CODE[3]), 
		 -> STR_26(CODE[16]), STR_25(CODE[3]), STR_24(CODE[12]), STR_23(CODE[12]), 
		 -> STR_22(CODE[39]), STR_21(CODE[42]), STR_20(CODE[9]), STR_19(CODE[11]), 
		 -> STR_18(CODE[10]), STR_17(CODE[3]), STR_16(CODE[8]), STR_15(CODE[10]), 
		 -> STR_14(CODE[3]), STR_13(CODE[16]), STR_12(CODE[3]), STR_11(CODE[21]), 
		 -> STR_10(CODE[3]), STR_9(CODE[19]), STR_8(CODE[28]), STR_7(CODE[20]), 
		 -> STR_6(CODE[3]), STR_5(CODE[17]), STR_4(CODE[12]), STR_3(CODE[3]), 
		 -> STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK2[8]), HMIBoard(BANK2[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK2[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK2[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Travel
    _Sensor_Observe->_ADCAverage
    _Robot_Init->_UpdateDistance
    _Navigate_Maze->_Travel
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _pop->_printf
    _Go_Backward->_Travel
    _Travel->_ADCAverage
    _push->_printf
    _UpdateDistance->_eusartSend
    _Turn->_eusartSend
    _Robot_Stop->_eusartSend
    _Move_ADC_To->___fltol
    _SteppingCW->_delay_ms
    _Get_VirtualWall_State->_eusartSend
    _Drive->_eusartSend
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Detect_Victim->_Console_Render
    _Create_Maze->___wmul
    _Closest_Object->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _SteppingCCW->_delay_ms
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Navigate_Maze
    _Navigate_Maze->_Go_Backward
    _Go_Home->_Go_Backward
    _Go_Backward->_Travel

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Navigate_Maze

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0 4362714
                                              4 BANK2      8     8      0
                         _ADCAverage
                     _Closest_Object
                       _Console_Init
                     _Console_Render
                        _Create_Maze
                      _Detect_Victim
                    _FunctInitButton
                            _Go_Home
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                           _LED_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                      _Navigate_Maze
                         _Robot_Init
                     _Sensor_Observe
                             _Travel
                             ___wmul
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe                                       6     6      0  232306
                                            145 BANK0      6     6      0
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Navigate_Maze                                        8     8      0 1193258
                                             21 BANK1      2     2      0
                                              0 BANK2      4     4      0
                     _Console_Render
                        _Go_Backward
                             _Travel
                             ___wmul
                                _pop
                             _printf
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363528
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  293252
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  263029
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95653
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37341
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Go_Home                                              0     0      0  543036
                        _Go_Backward
                                _pop
 ---------------------------------------------------------------------------------
 (2) _pop                                                  4     2      2    9798
                                             35 BANK0      4     2      2
                            _isempty
                             _printf
 ---------------------------------------------------------------------------------
 (3) _isempty                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Go_Backward                                          6     2      4  533238
                                             15 BANK1      6     2      4
                             _Travel
                             ___wmul
                                _pop (ARG)
 ---------------------------------------------------------------------------------
 (1) _Travel                                              29    19     10  459240
                                            145 BANK0     14     4     10
                                              0 BANK1     15    15      0
                         _ADCAverage
                     _Console_Render
                              _Drive
              _Get_VirtualWall_State
                        _Move_ADC_To
                         _Robot_Stop
                               _Turn
                     _UpdateDistance
                             ___wmul
                             _printf
                               _push
 ---------------------------------------------------------------------------------
 (2) _push                                                 2     0      2    9947
                                             35 BANK0      2     0      2
                             _isfull
                             _printf
 ---------------------------------------------------------------------------------
 (3) _isfull                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _UpdateDistance                                       6     4      2      31
                                              1 BANK0      6     4      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Move_ADC_To                                          2     0      2  138433
                                             73 BANK0      2     0      2
                     _Console_Render
                        _SteppingCCW
                         _SteppingCW
                            ___fladd
                            ___flmul
                            ___fltol
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (3) _SteppingCW                                           0     0      0    2534
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Get_VirtualWall_State                                5     3      2      65
                                              1 BANK0      5     3      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Drive                                                4     0      4    2785
                                              1 BANK0      4     0      4
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Detect_Victim                                        5     3      2  117843
                                             44 BANK0      5     3      2
                     _Console_Render
                          _eusartRec
                         _eusartSend
                             _printf
 ---------------------------------------------------------------------------------
 (3) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Create_Maze                                         10    10      0   79866
                                              6 BANK0     10    10      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Closest_Object                                       0     0      0  232232
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              23    17      6    9764
                                             21 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _SteppingCCW                                          0     0      0    2534
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    2534
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _STP4                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _STP3                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _STP2                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _STP1                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0  107983
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   89176
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4   73192
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  111951
                                            119 BANK0     26    26      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   88412
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   28640
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   47182
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   12119
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1996
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   13173
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    6065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6575
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    5942
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (7) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _Closest_Object
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Create_Maze
     ___wmul
   _Detect_Victim
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _eusartRec
     _eusartSend
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _Go_Home
     _Go_Backward
       _Travel
         _ADCAverage
           _FunctReadADC
           _HMI_Render
             _OutSeg
               _SPI_Send
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           ___awdiv
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _pow
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _exp
               ___fldiv
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _floor
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flge
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
             _log
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _frexp
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _Drive
           _eusartSend
         _Get_VirtualWall_State
           _eusartRec
           _eusartSend
         _Move_ADC_To
           _Console_Render
             _Console_MakeField
               _Byte_GetBit
             _LCD_DrawField
               _Console_MakeField (ARG)
                 _Byte_GetBit
               _LCD_Word_Write (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               ___wmul (ARG)
             _LCD_FillRectangle
               _LCD_Word_Write
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
           _SteppingCCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           _SteppingCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _Robot_Stop
           _eusartSend
         _Turn
           _Robot_Stop
             _eusartSend
           _eusartRec
           _eusartSend
         _UpdateDistance
           _eusartRec
           _eusartSend
         ___wmul
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
         _push
           _isfull
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
       ___wmul
       _pop (ARG)
         _isempty
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     _pop
       _isempty
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Navigate_Maze *
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Go_Backward
       _Travel
         _ADCAverage
           _FunctReadADC
           _HMI_Render
             _OutSeg
               _SPI_Send
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           ___awdiv
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _pow
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _exp
               ___fldiv
               ___flge
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _floor
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flge
                 ___fltol
                   ___fladd (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___fladd
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___flneg (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                         _frexp (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flmul
                     ___xxtofl (ARG)
                     _frexp (ARG)
             _log
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl
               _eval_poly
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
               _frexp
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _Drive
           _eusartSend
         _Get_VirtualWall_State
           _eusartRec
           _eusartSend
         _Move_ADC_To
           _Console_Render
             _Console_MakeField
               _Byte_GetBit
             _LCD_DrawField
               _Console_MakeField (ARG)
                 _Byte_GetBit
               _LCD_Word_Write (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window (ARG)
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               ___wmul (ARG)
             _LCD_FillRectangle
               _LCD_Word_Write
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
               _Set_Addr_Window
                 _LCD_Write
                   _Mode_Set
                   _SPI_Send
           _SteppingCCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           _SteppingCW
             _STP1
             _STP2
             _STP3
             _STP4
             _delay_ms
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _Robot_Stop
           _eusartSend
         _Turn
           _Robot_Stop
             _eusartSend
           _eusartRec
           _eusartSend
         _UpdateDistance
           _eusartRec
           _eusartSend
         ___wmul
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
         _push
           _isfull
           _printf
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
       ___wmul
       _pop (ARG)
         _isempty
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     _Travel
       _ADCAverage
         _FunctReadADC
         _HMI_Render
           _OutSeg
             _SPI_Send
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         ___awdiv
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _pow
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _exp
             ___fldiv
             ___flge
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___flsub
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _floor
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flge
               ___fltol
                 ___fladd (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___fladd
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___flneg (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                       _frexp (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                   _frexp (ARG)
           _log
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl
             _eval_poly
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
             _frexp
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Drive
         _eusartSend
       _Get_VirtualWall_State
         _eusartRec
         _eusartSend
       _Move_ADC_To
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _SteppingCCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         _SteppingCW
           _STP1
           _STP2
           _STP3
           _STP4
           _delay_ms
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _Robot_Stop
         _eusartSend
       _Turn
         _Robot_Stop
           _eusartSend
         _eusartRec
         _eusartSend
       _UpdateDistance
         _eusartRec
         _eusartSend
       ___wmul
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
       _push
         _isfull
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
     ___wmul
     _pop
       _isempty
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _Sensor_Observe *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
       _STP2
       _STP3
       _STP4
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Travel *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _Drive
       _eusartSend
     _Get_VirtualWall_State
       _eusartRec
       _eusartSend
     _Move_ADC_To
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _SteppingCCW
         _STP1
         _STP2
         _STP3
         _STP4
         _delay_ms
       _SteppingCW
         _STP1
         _STP2
         _STP3
         _STP4
         _delay_ms
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _Robot_Stop
       _eusartSend
     _Turn
       _Robot_Stop
         _eusartSend
       _eusartRec
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _push
       _isfull
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
   ___wmul *
   _delay_ms *
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      46      14       27.3%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      C      D3       9       82.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100     17      FF       7       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3CF      12        0.0%
DATA                 0      0     4FB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon May 21 18:51:36 2018

                          i2_Timer0_Stop 8CDC                         SPI_Init@pChannel 0091  
             __size_of_MXK_BlockSwitchTo 0038                 Sensor_Observe@Low_Sensor 00F5  
                           i2_Motor_Step 66DE                                        _A 01E6  
                                      l8 6C26                             ___fldiv@aexp 0078  
                           ___fldiv@bexp 0077                                        _a 01E7  
                                      _i 015F                                        _j 015E  
                                      _k 0138                                        _l 004F  
                                      _u 015D                                        _w 0050  
                                      _x 013E                             ___fldiv@sign 006C  
                                     l11 61DE                                       l12 61CC  
                                     l90 5D62                                       l87 5CDC  
                    __size_of_ADCAverage 02F0                                       l89 5D3C  
                       ??_UpdateDistance 0063                             ___awdiv@sign 0065  
                    ___wmul@multiplicand 0062                            Travel@Req_Dir 01F3  
                          _HMI_DIPSwitch 8B3C                       LCD_DrawField@pSize 0078  
                     LCD_DrawField@count 007E                        ?_Event_TestButton 0001  
                       i2_Timer0_Restart 8C90                                      l120 71CC  
                                    l121 71E2                                      l122 71F8  
                                    l220 7E06                                      l117 720E  
                                    l221 7DD6                                      l118 71B8  
                                    l230 8294                                      l222 7E16  
                                    l223 7DEE                              ?_LED_Toggle 0001  
                                    l234 848A                                      l235 8462  
                                    l227 82AC                                      l403 5540  
                                    l412 5260                                      l228 827C  
                                    l340 7354                                      l404 54E0  
                                    l421 51FC                                      l413 5112  
                                    l237 8476                                      l341 735E  
                                    l405 5570                            ??_Console_Tab 0068  
                                    l414 527C                                      l430 6B56  
                                    l350 7422                                      l342 7368  
                                    l510 4D7E                                      l406 54F8  
                                    l183 75C6                                      l415 5134  
                                    l351 73D0                                      l343 7372  
                                    l511 4E74                                      l407 5510  
                                    l184 75A6                                      l600 2E92  
                                    l432 6B7C                                      l344 737C  
                                    l512 4D9E                                      l408 5528  
                                    l417 5198                                      l601 2FE4  
                                    l433 6BA8                                      l353 73DC  
                                    l337 739A                                      l345 7386  
                                    l610 305C                                      l602 2EBE  
                                    l354 73E6                                      l346 7390  
                                    l338 7348                                      l370 72F4  
                                    l611 30A2                                      l603 2FF4  
                                    l427 6BD0                                      l355 73F0  
                                    l363 7312                                      l371 72FE  
                                    l531 4434                              ?_HMI_GetBar 0001  
                                    l612 30E8                                      l604 2F4E  
                                    l356 73FA                                      l372 7308  
                                    l364 72C0                                      l532 4456  
                                    l516 4DDE                                      l357 7404  
                                    l509 4E5A                                      l614 31BA  
                                    l358 740E                                      l366 72CC  
                                    l526 4476                                      l615 31B2  
                                    l607 312E                                      l359 7418  
                                    l367 72D6                                      l519 4E1E  
                                    l616 31CC                                      l608 3016  
                                    l368 72E0                                      l528 4494  
                                    l393 8062                                      l617 31B6  
                                    l609 314C                                      l369 72EA  
                                    l529 4416                                      l483 4A3E  
                                    l900 4550                                      l732 76A2  
                                    l476 4B06                                      l901 4554  
                                    l733 769C                                      l389 7CB4  
                                    l477 4996                                      l397 8458  
                                    l910 4578                                      l902 4558  
                                    l726 7256                                      l478 4B22  
                                    l486 4AA2                                      l654 8862  
                                    l911 457C                                      l903 455C  
                                    l727 7250                                      l479 49DA  
                                    l655 885A                                      l912 4580  
                                    l904 4560                                      l824 7D76  
                                    l832 8350                                      l681 7996  
                                    l913 4584                                      l905 4564  
                                    l921 7F0C                                      l673 8760  
                                    l657 885E                                      l914 4588  
                                    l906 4568                                      l922 7EDC  
                                    l930 6AB4                                      l915 458C  
                                    l907 456C                                      l819 7B8E  
                                    l684 79AC                                      l916 4590  
                                    l908 4570                                      l860 44B0  
                                    l853 4598                                      l917 4594  
                                    l909 4574                                      l861 44B4  
                                    l781 86FC                                      l597 2E9C  
                                    l678 79D2                                      l686 79BC  
                                    l870 44D8                                      l862 44B8  
                                    l854 449C                                      l598 2E88  
                                    l679 7986                                      l871 44DC  
                                    l863 44BC                                      l599 2EAC  
                                    l880 4500                                      l872 44E0  
                                    l864 44C0                                      l856 44A0  
                                    l928 6B26                                      l776 85EE  
                                    l881 4504                                      l873 44E4  
                                    l865 44C4                                      l857 44A4  
                                    l929 6AFE                                      l890 4528  
                                    l882 4508                                      l874 44E8  
                                    l866 44C8                                      l858 44A8  
                                    l891 452C                                      l883 450C  
                                    l875 44EC                                      l867 44CC  
                                    l859 44AC                                      l892 4530  
                                    l884 4510                                      l876 44F0  
                                    l868 44D0                                      l893 4534  
                                    l885 4514                                      l877 44F4  
                                    l869 44D4                                      l894 4538  
                                    l886 4518                                      l878 44F8  
                                    l990 792E                                      l895 453C  
                                    l887 451C                                      l879 44FC  
                                    l983 772A                                      l896 4540  
                                    l888 4520                                      l992 793A  
                                    l984 76D0                                      l976 7A06  
                                    l897 4544                                      l889 4524  
                                    l985 7728                                      l898 4548  
                                    l978 7A12                                      l899 454C  
                                    l997 8078                                      l999 8096  
                                    _RA2 007C02                                      _RA3 007C03  
                                    _RD5 007C1D                                      _RD7 007C1F  
                                    _PR2 000FCB                                      _Spd 01DC  
                                    _exp 471A                                      _log 5588  
                                    _mod 012E                                      _val 0150  
                                    _pop 8100                                      _pow 4BA0  
                                    _top 01E0                              ?_HMI_SetBar 0001  
                     ??_Event_TestButton 0079                             _Word_GetPair 86DC  
                                    prod 000FF3                              ?_HMI_Render 0001  
                    MXK_SwitchTo@pModule 0067                                      tosl 000FFD  
                                    wreg 000FE8                       Console_MakeField@x 0070  
                     Console_MakeField@y 0071                               _TXSTA1bits 000FAD  
                           Console_Tab@c 006F                             Console_Tab@i 006E  
                    LCD_DrawField@pField 0072                             Console_Tab@t 006D  
                           ___flmul@aexp 007B                             ___flmul@bexp 0080  
                             i2_delay_us 849C                     Port_Set@TypeRequired 0082  
                           ___flmul@sign 007A                             ___flmul@temp 0085  
                           ___flmul@prod 0081                        Console_FormFeed@x 0062  
                      Console_FormFeed@y 0063                      LCD_DrawField@pPoint 0074  
                         ?_LCD_DrawField 0072                    Port_SetPinType@Output 008A  
                        Port_SetPin@Type 0073                          Port_SetPin@pPin 0071  
                          ?_Byte_GetPair 0069                          __end_of_LED_Set 82BE  
                __size_ofi2_Word_GetPair 0030                            i2_Port_SetPin 6D48  
                           ___fltol@exp1 00A8                             _Word_SetPair 85CA  
                                   l1000 80AE                                     l1010 7148  
                                   l1004 7E4E                            ?_Byte_GetZone 0060  
                                   l1005 7E74                                     l1200 6F42  
                                   l1040 5B1E                                     l1201 6F8A  
                                   l1009 7154                                     l1041 5B24  
                                   l1202 6F9E                                     l1042 5B2A  
                                   l1043 5B30                                     l1204 6FC2  
                                   l1036 5C2C                                     l1044 5B36  
                                   l1205 6FAE                                     l1045 5B3C  
                                   l1037 5B18                                     l1062 5094  
                                   l1207 6FD0                                     l1063 50C2  
                                   l1047 5BBA                                     l3000 397E  
                                   l1056 4F68                                     l1057 50E2  
                                   l1153 5412                                     l1146 78C6  
                                   l3002 39DE                                     l1082 6E4C  
                                   l1058 4F70                                     l3003 39A2  
                                   l1059 4F94                                     l3020 3B40  
                                   l3012 3AB8                                     l1084 6E54  
                                   l2204 6D34                                     l2220 3340  
                                   l3013 3A7E                                     l1077 6E20  
                                   l2205 6CF4                                     l2221 3352  
                                   l1158 8670                                     l3022 3B50  
                                   l3006 3A5A                                     l2230 354A  
                                   l3007 3A38                                     l3103 384E  
                                   l1079 6E2C                                     l2231 3510  
                                   l2223 3390                                     l3016 3AA2  
                                   l3008 3A46                                     l3120 5A7E  
                                   l2216 3274                                     l3041 3C20  
                                   l3025 3B74                                     l3017 3AA6  
                                   l3009 3A4A                                     l3105 3892  
                                   l3121 5A66                                     l3113 5A00  
                                   l2233 3562                                     l3042 3C28  
                                   l3034 3BB4                                     l3106 38B0  
                                   l3114 5A10                                     l2226 339E  
                                   l2218 331C                                     l3051 3F68  
                                   l3043 3C2A                                     l3027 3B8A  
                                   l3123 5AB0                                     l3115 5A2E  
                                   l2411 7D58                                     l2235 3564  
                                   l2227 34C2                                     l2219 332E  
                                   l3060 4016                                     l3052 3F64  
                                   l3108 38D4                                     l3124 5AA4  
                                   l2340 0082                                     l2420 2310  
                                   l2236 35A2                                     l2228 34FC  
                                   l3061 40C4                                     l3037 3BFA  
                                   l3029 3B94                                     l3109 38F2  
                                   l3117 5A40                                     l3062 4074  
                                   l3118 5A34                                     l3150 4946  
                                   l2422 233E                                     l1630 653C  
                                   l2510 2DAC                                     l2351 8536  
                                   l3063 409C                                     l3055 3FA8  
                                   l2431 2480                                     l2423 2338  
                                   l1631 658C                                     l2503 2E58  
                                   l3080 41CE                                     l3056 3FA4  
                                   l3128 5ACE                                     l3144 473A  
                                   l2336 0032                                     l2416 7762  
                                   l2424 236C                                     l1632 6576  
                                   l2512 2DBE                                     l2504 2ADA  
                                   l3081 41D0                                     l3065 40C2  
                                   l3129 5B00                                     l2441 2618  
                                   l2433 24DA                                     l2425 2366  
                                   l2345 80E4                                     l2354 8546  
                                   l3058 3FEE                                     l3090 3624  
                                   l3170 684A                                     l3146 4782  
                                   l2338 006A                                     l2434 26B6  
                                   l2346 80C4                                     l1730 856C  
                                   l2514 2DC0                                     l2506 2BCA  
                                   l3075 4130                                     l3091 3638  
                                   l3155 6408                                     l3147 47CA  
                                   l2531 5708                                     l2339 0142  
                                   l2443 2636                                     l2435 254C  
                                   l2427 24A6                                     l1627 65CC  
                                   l2195 5FCC                                     l3068 40F8  
                                   l3092 3656                                     l3164 6EC8  
                                   l3156 63F6                                     l3172 6884  
                                   l3148 4800                                     l2540 5734  
                                   l2532 5718                                     l2452 26CA  
                                   l2436 2564                                     l2428 241C  
                                   l1724 8610                                     l1732 858C  
                                   l1628 65C2                                     l2508 2CBA  
                                   l2196 5F2A                                     l3077 4174  
                                   l3069 40DA                                     l3085 35E8  
                                   l3173 6874                                     l3149 497C  
                                   l2541 5798                                     l2533 573C  
                                   l2461 285E                                     l2453 2820  
                                   l2437 25CE                                     l1629 6554  
                                   l2197 5F8C                                     l3078 4198  
                                   l3086 35E4                                     l3158 6426  
                                   l2358 3D00                                     l2454 27F4  
                                   l2374 8BC4                                     l1726 8638  
                                   l3079 41C2                                     l3087 35F8  
                                   l3159 64C0                                     l2463 2872  
                                   l2455 27A4                                     l1735 8B24  
                                   l2199 5FC8                                     l3096 3816  
                                   l3168 67FC                                     l2392 83C8  
                                   l2448 2652                                     l2721 7496  
                                   l3097 37F8                                     l3089 3628  
                                   l2545 57E0                                     l2481 58F0  
                                   l2465 2886                                     l2449 2696  
                                   l2722 748E                                     l3194 66C2  
                                   l3186 55AC                                     l2546 583A  
                                   l2538 576E                                     l2466 28F6  
                                   l3195 662A                                     l2547 57E6  
                                   l2539 5720                                     l2483 5952  
                                   l2379 8BD8                                     l2459 284C  
                                   l2387 813C                                     l1827 5E0E  
                                   l3188 55D6                                     l2484 59A6  
                                   l1828 5E2A                                     l2725 74B6  
                                   l2397 81F4                                     l2485 599A  
                                   l2493 68D2                                     l2901 7508  
                                   l2726 74C0                                     l2718 7468  
                                   l2750 62D0                                     l2398 8204  
                                   l2902 74FC                                     l2727 74CE  
                                   l2719 7478                                     l2751 6304  
                                   l2487 59B6                                     l2495 68E4  
                                   l2752 6342                                     l2488 59AE  
                                   l2753 6380                                     l2497 68F4  
                                   l2905 753C                                     l1873 86D4  
                                   l2906 754A                                     l2499 6906  
                                   l2780 69BE                                     l2757 87BC  
                                   l2782 6A2A                                     l2791 6A6A  
                                   l2783 6A1A                                     l2954 7F40  
                                   l2955 7F38                                     l2964 83F0  
                                   l2788 6A4E                                     l2965 83E8  
                                   l2789 6A42                                     l2958 7F60  
                                   l2990 4D64                                     l2959 7F6A  
                                   l2968 8408                                     l2984 4BFA  
                                   l2969 8412                                     l2985 4BE6  
                                   l2994 393A                                     l2995 3936  
                                   l2987 4C18                                     l2988 4CBA  
                                   ?_exp 00B7                                     l2989 4C90  
                                   ?_log 00AF                                     l2999 3982  
                         ??_Console_Init 0060                                     _ADON 007E10  
                                   ?_pop 0083                    Port_SetPinType@pInput 0086  
                                   ?_pow 00C2                           Travel@Test_ADC 00F5  
                                   STR_1 FFFC                                     STR_2 FF29  
                                   STR_3 FFFC                                     STR_4 FFB0  
                                   STR_5 FF4F                                     STR_6 FFFC  
                                   STR_7 FF15                                     STR_8 FECC  
                                   STR_9 FF3C                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   _LATF 000F8E              __size_of_MXK_InitTestButton 0018  
                                   _LATG 000F8F                      __end_of_GetPortPORT 7452  
                                   _PIR1 000F9E                                     _PIR2 000FA1  
                                   _PIR3 000FA4                      __end_of_GetPortTRIS 7342  
                                   _SPI1 0294                                     _SPI2 0161  
                                   _TMR0 000FD6                                     _STP1 8C18  
                                   _STP2 8C04                                     _STP3 8BF0  
                                   _STP4 8BDC                                     _gISR 0108  
                     Event_DIPSwitch@Bar 007A                            ??_Byte_GetBit 0063  
                                   _Turn 7748                       SPI_MaxSpeed@pInput 006F  
                                   _flag 002C                            ?_Byte_SetByte 0060  
                          ?_Byte_SetPair 006B                          __end_of_SPI_DCS 876E  
                                   _main 322A                                     _maze 0300  
                                   _mode 0148                          ??i2_Byte_SetBit 0005  
                          ?_Byte_SetQuad 006B                                     _itos 6A7C  
                                   _test 011C                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf1 000FE7                                     indf2 000FDF  
                                   fsr1l 000FE1                                     fsr2l 000FD9  
                                   _push 8394                            ?_Byte_SetZone 0060  
                                   btemp 0051                                     _zero 004E  
                    __end_of_Create_Maze 22EC                                     exp@x 00B7  
                                   log@x 00AF                            ??_Byte_SetBit 0064  
                                   pow@x 00C2                                     pow@y 00C6  
                     __size_of_LCD_Reset 0050                                     prodh 000FF4  
                                   prodl 000FF3                                     start 14AA  
                     __size_of_LCD_Write 0020                            __CFG_IESO$OFF 000000  
                        ___fldiv@new_exp 0071                          ?_SPI_DisableISR 0060  
                    HMI_SetButton@pValue 0066                          __end_of_Go_Home 8A1A  
                             _Cliff_Left 0158                            Console_Init@x 0062  
                          Console_Init@y 0063                           ?i2_Timer0_Stop 0001  
                      i2Byte_SetBit@pBit 0003                             ___param_bank 000000  
                        __end_of_Font5x7 FE21                          __end_of_InitADC 8100  
                   Set_Rotation@rotation 0066                            ??_Init_Timer0 0060  
                 __size_of_HMI_SetButton 007A                   __size_of_HMI_SetNumber 0026  
                            ?_ISR_Enable 0001                                    ??_exp 00BB  
                                  ??_log 00B3                                    ??_pop 0085  
                                  ??_pow 00CA             __size_of_Console_ClearCursor 0030  
                       __end_of_LCD_Fill 8306                         __end_of_LCD_Init 5DAA  
                                  ?_STP1 0001                                    ?_STP2 0001  
                                  ?_STP3 0001                                    ?_STP4 0001  
                         ?_HMI_DIPSwitch 0001                            __CFG_PLLDIV$3 000000  
                       __end_of_LED_Init 7E24                             _BAUDCON1bits 000F7E  
                          ??_Button_Init 00A8                  GetPortProperties@pInput 0062  
                          ??_Button_Poll 007E                         __end_of_HMI_Init 5414  
                 __size_of_Navigate_Maze 0532                                    l13415 63B8  
                                  l15045 4946                                    ?_Turn 0061  
                                  l15127 8646                                    l13471 7932  
                                  l13465 7926                                    l15091 4F8C  
                                  l16019 2382                                    l14621 41C2  
                                  l15173 579C                                    l15415 5E0E  
                                  l16311 54D8                                    l16077 25CE  
                                  l16165 8BC4                                    l15453 8350  
                                  l18021 354A                         __end_of_HMI_Poll 7C58  
                                  l16423 5CDC                                    l15455 8362  
                                  l16273 82EA                                    l16433 5D6E  
                                  l14775 7D76                                    l14783 7DAC  
                                  l16607 53F0                                    l14929 78BE  
                                  l14881 6B12                                    l14777 7D88  
                                  l16803 0022                                    l17099 7D58  
                                  l14893 6E18                                    l14797 7EB0  
                                  l16821 0072                                    l16813 0052  
                                  l14967 6FC2                                    l16585 7A0A  
                                  l16833 0134                                    l14969 8C5E  
                                  l14899 6E24                                    l16579 79FE  
                                  l16837 0142                                    _I2C1T 01A5  
                                  _I2C2T 019E                            ___fltol@sign1 00A7  
                        __end_of___fladd 3C46                                    ?_main 0001  
                        __end_of___fldiv 41EC                          __end_of___awdiv 74D8  
                        __end_of___flneg 87CE                                    _ADRES 000FC3  
                                  ?_itos 006C                                    STR_10 FFFC  
                                  STR_11 FF00                                    STR_12 FFFC  
                                  STR_20 FFE4                                    STR_13 FF70  
                                  STR_21 FE7B                                    STR_14 FFFC  
                                  STR_30 FFC7                                    STR_22 FEA5  
                                  STR_31 FFDB                                    STR_15 FFD1  
                                  STR_23 FFA4                                    STR_16 FFED  
                                  STR_32 FF8C                                    STR_24 FF80  
                                  STR_25 FFFC                                    STR_17 FFFC  
                                  STR_33 FFF5                                    STR_18 FFD1  
                                  STR_34 FF98                                    STR_26 FF60  
                                  STR_19 FFBC                                    STR_28 FEE8  
                                  STR_29 FFFC                          __end_of___flmul 3908  
                        __end_of___flsub 834E                          __end_of___fltol 6A7C  
                                  ?_push 0083                          _Event_DIPSwitch 88D0  
                        __end_of___lldiv 755C                                    u12000 83F4  
                                  u11120 3C06                                    u11040 3B98  
                                  u11070 3BB0                                    u11230 3644  
                                  u11320 38A0                                    u11240 37BA  
                                  u12040 6414                                    u10600 796A  
                                  u11330 38BE                                    u11410 69DC  
                                  u12130 7DAC                                    u10610 796E  
                                  u10530 7676                                    u12210 85BC  
                                  u10700 749A                  __size_of_HMI_LeftSwitch 0014  
                        ___awdiv@divisor 0062                                    u11245 37B0  
                                  u10550 76C0                                    u11415 69D2  
                                  u12215 85B8                   Navigate_Maze@Direction 01FD  
                                  u12240 6B12                                    u12080 681C  
                                  u10625 8C3A                                    u10537 766C  
                                  u13105 420E                                    u12330 7904  
                                  u11290 384A                                    u11450 6A54  
                                  u11530 5ABA                                    u10626 8C3C  
                                  u12170 7EC8                                    u10650 7E4A  
                                  u10555 76BC                                    u13115 4220  
                                  u10660 7E6C                                    u14100 7A56  
                                  u12325 78D4                                    u13125 4232  
                                  u10910 3A62                                    u13135 424A  
                                  u12088 6820                                    u12440 47D2  
                                  u11640 884A                                    u12280 6E86  
                                  u11624 7F8A                                    u11625 7F86  
                                  u13145 4344                                    u12450 47D4  
                                  u12290 6E8E                                    u11634 7FB2  
                                  u13330 23F0                                    u11635 7FAE  
                                  u13155 4398                                    u10860 3A0E  
                                  u11580 6EF0                                    u14300 0142  
                                  u13340 2454                                    u11645 8846  
                                  u13165 43C6                                    u10870 3A1E  
                                  u11590 7B3C                                    u13430 2646  
                                  u13350 2532                                    u14310 29EA  
                                  u13351 2530                                    u13175 43F4  
                                  u11920 4182                                    u10880 3A20  
                                  u12560 50D0                                    u14400 7D40  
                                  u11664 727E                                    u12800 750C  
                                  u11665 727A                                    u11930 41A6  
                                  u12650 57CE                                    u14410 7D4E  
                                  u11674 72A6                                    u14330 2AD0  
                                  u11675 72A2                                    u11588 6EF4  
                                  u14260 0052                                    u13540 28EA  
                                  u13380 258C                                    u13700 8302  
                                  u12750 4C72                                    u12670 5844  
                                  u13390 25BA                                    u14350 2BC0  
                                  u12920 5E70                                    u12905 5DCA  
                                  u12690 852C                                    u11970 7F44  
                                  u11890 412C                                    u14290 0134  
                                  u13618 6C8A                                    u13730 5576  
                                  u14370 2CB0                                    u13628 617E  
                                  u13629 6192                                    u12950 8380  
                                  u14390 2DA0                                    u13760 651A  
                                  u12890 850C                                    u13770 652E  
                                  u13780 6568                                    u12974 762C  
                                  u13678 6284                                    u12975 7628  
                                  u12895 8508                                    u13880 5D6E  
                                  u15608 871C                                    u15609 8730  
                                  u15658 3294                                    _INDEX 0040  
                                  u15659 32A8                                    u15668 32B4  
                                  u15669 32C8                                    u15678 32D4  
                                  u15679 32E8                                    u15688 32F4  
                                  u15689 3308                          __end_of___lwdiv 7F74  
                                  u15788 34E0                                    u15789 34F4  
                                  _MASKS FC31                          __end_of___lwmod 841C  
                                  i2l430 6D60                                    i2l432 6D86  
                                  i2l433 6DB0                                    i2l427 6DD6  
                                  i2l732 7880                                    i2l733 787A  
                                  i2l832 849E                                    i2l781 87EC  
                        ___awdiv@counter 0064                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _PORTD 000F83                                    _PORTE 000F84  
                                  _PORTF 000F85                                    _PORTG 000F86  
                __size_of_HMI_DownSwitch 0014                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _TRISF 000F97                                    _TRISG 000F98  
                                  _T_VAR 0132                         ??i2_Byte_GetPair 000D  
                                  _Drive 81E2                            ?_FunctReadADC 0060  
                       ??i2_Byte_GetZone 0006                       Port_TogglePin@pPin 0076  
                                  _X_Pos 013C                  __size_of_Sensor_Observe 0140  
                                  _Y_Pos 013A                           __CFG_FCMEN$OFF 000000  
                                  _PortA 02BD                                    _PortB 0180  
                                  _PortC 018A                                    _PortD 0176  
                                  _PortE 016C                                    _PortF 0194  
                                  _PortG 02B3                  __end_of_Port_SetPinType 5298  
                                  _Steps 0144                          _ADC_Initialised 0160  
                  __end_of_Detect_Victim 7D74                           ??_Byte_GetPair 006C  
                         ?i2_Port_SetPin 0010                              LED_Set@pLED 0075  
                         Travel@rev_Dist 01EE                          __end_of_dpowers FC31  
                         ??_Byte_GetZone 0065                                    _count 0126  
                                  _floor 63BC                                    _ldexp 67DC  
                         Button_Poll@Pin 0083                                    _frexp 6E98  
                                  _errno 011A                 __size_of_Set_Addr_Window 009A  
                    __end_of_Console_Tab 719A                         __end_of_MXK_Init 616C  
                        __end_of_isempty 8BC8                                    _stack 0200  
                   i2Byte_GetPair@pInput 000A                                    _putch 8C68  
                                  _total 0140                         __end_of_SPI_Init 322A  
                       __end_of_SPI_Send 79F0                               _BumpSensor 015C  
                            _Go_Backward 68C0                    __end_ofi2_MXK_Release 8CE8  
                                  pclath 000FFA                                    tablat 000FF5  
                        __end_of_reverse 7F20                       __size_of_MXK_Queue 000E  
                         ??_Byte_SetByte 0063                           ??_Byte_SetPair 006F  
                                  pow@yi 00D3                           ??_Byte_SetQuad 006F  
                                  plusw2 000FDB                           ??_Byte_SetZone 0066  
                                  status 000FD8                                    wtemp6 0052  
                        _Configure_GPIOs 7CB8                     i2MXK_Queue@pCallback 0001  
                            i2delay_us@u 0003                           _LCD_Word_Write 8A50  
                            _Cliff_FLeft 015A                      __size_of_LED_Toggle 0040  
                    __size_of_HMI_GetBar 0006                            ?_HMI_UpSwitch 0001  
                            exp@exponent 00BF                               _Event_NULL 1404  
            __size_of_Port_CheckPairType 0060                              ldexp@newexp 00B3  
                           __end_of_STP1 8C2C                             __end_of_STP2 8C18  
                           __end_of_STP3 8C04                             __end_of_STP4 8BF0  
                            _Cliff_Right 0159                      __size_of_HMI_SetBar 000A  
                        __initialization 6FD2                      __size_of_HMI_Render 0036  
                             _Found_Flag 0032                              log@exponent 00B3  
                    __end_of_Byte_GetBit 8858                            _Current_Dist1 014C  
                          _Current_Dist2 014A                             __end_of_Turn 77BE  
                           __end_of_main 35B6                             __end_of_itos 6B3A  
                   HMI_SetButton@reindex 0062                             SPI_Send9@dat 0156  
                           __end_of_push 83D8                      __end_of_Byte_SetBit 7FC6  
                   Travel@Dist_Travelled 01F1                            ??_Move_ADC_To 00AB  
                       __end_of_InitList FC07              __size_of_Port_CheckQuadType 0050  
                                 ??_STP1 0060                                   ??_STP2 0060  
                                 ??_STP3 0060                                   ??_STP4 0060  
                       __end_of_Mode_Set 8C3E              __size_of_Port_CheckPortType 0040  
                                 ??_Turn 0067                              HMI_Render@a 0068  
                                 ??_main 02CB                                   ??_itos 0070  
                                 ??_push 0085                      __end_of_Init_Timer0 8ACC  
               __size_of_FunctInitButton 0076                  _Console_MakeField$10974 006E  
                          __activetblptr 000003                        Port_SetPin@pInput 006F  
                      __end_of_LCD_Reset 8016                        Port_SetPin@pValue 0072  
                              ??_LED_Set 0075                        _MXK_InitDIPSwitch 8ACC  
                         ??_FunctReadADC 0062                        GetPortPORT@pInput 0062  
                 Port_CheckPairType@Pin1 008A                   Port_CheckPairType@Pin2 008B  
                      __end_of_LCD_Write 89E0                              _GetPortPORT 73CA  
                           ?i2_MXK_Queue 0001                              _GetPortTRIS 72BA  
                        ??_LCD_DrawField 007C                                   ?_Drive 0061  
             __end_of_PortProperty_Valid 7B92                         __end_of_Port_Set 4496  
                            ?i2_delay_us 0001         __size_of_Console_IncrementCursor 0054  
                        Travel@direction 00F1                      __end_of_Button_Init 6C9E  
                    __end_of_Button_Poll 629A                        Word_GetPair@pPair 006E  
                LCD_FillRectangle@pPoint 006B                       ?_MXK_InitDIPSwitch 0001  
                          _HMI_SetButton 75DA                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                             ??_ADCAverage 00D7  
                              ??_SPI_DCS 0062                                   ?_floor 00A9  
                                 ?_ldexp 00AF                                   ?_frexp 0060  
                            _Create_Maze 0000                               _Low_Sensor 01D8  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                          _HMI_SetNumber 88F6                   Port_SetQuadType@Output 009A  
                                 _ANCON0 000FC1                         ___awdiv@dividend 0060  
                                 ?_putch 0001                         ??_Console_Render 0083  
                          ToSegment@pCHR 0060                         Travel@Prev_Angle 01F0  
                                 _GODONE 007E11                         _Console_FormFeed 7918  
                 Port_SetQuadType@pInput 0096                                   i2l1630 6742  
                                 i2l1631 678E                                   i2l1632 677A  
                                 i2l1730 8684                                   i2l1627 67CA  
                                 i2l1732 86A4                                   i2l1628 67C0  
                                 i2l1629 6758                                   i2l1590 145E  
                         __CFG_WDTEN$OFF 000000                      __size_of_ISR_Enable 000A  
                                 _RCREG1 000FAF                                   _RCSTA1 000FAC  
                 __end_of_LCD_Word_Write 8A6A                            _Navigate_Maze 2954  
                         _Timer0_Restart 8C84                                ??_Go_Home 00FF  
                                 _SPBRG1 000FB0                      ??_MXK_InitDIPSwitch 009B  
                      _Current_Direction 01E2                                   _TRISA2 007C92  
                                 _TRISA3 007C93                                   _TRISD5 007CAD  
                                 _TRISD7 007CAF                                   _TXREG1 000FAE  
                       __end_of___xxtofl 5B12                                ??_InitADC 0060  
                         i2_MXK_SwitchTo 8672                                   _TXSTA1 000FAD  
                        Byte_GetBit@pBit 0062                               _Reset_High 8A9C  
                     Console_Render@temp 0085                           ??_HMI_UpSwitch 0066  
                         OutSeg@pSegment 0063                          ??i2_Timer0_Stop 0001  
                    Port_TogglePin@Value 0077                         __end_of_delay_ms 7DD0  
                           LED_Init@pLED 008D                         __end_of_delay_us 8394  
                          ??_Timer2_Init 0071                            ??_Timer0_Stop 0060  
                             _Timer0_ISR 88A8                 __size_of_Console_NewLine 007A  
                      Timer2_Init@DIVIDE 007A                           __CFG_XINST$OFF 000000  
                                 _OutSeg 78AA                 __size_of_HMI_InitButtons 0006  
                                 _Travel 22EC                                   ___flge 629A  
                             _Motor_Step 64D2                  __end_of_Event_DIPSwitch 88F6  
                              ??___fladd 0093                                   ___wmul 8880  
                        ??_HMI_DIPSwitch 0066                                ??___fldiv 0068  
                              ??___awdiv 0064                                ??___flneg 008B  
                         __CFG_STVREN$ON 000000                               _Robot_Init 8AFC  
                                 _change 004D                                ??___flmul 0076  
                                 _lMotor 0038                                ??___flsub 00A7  
                              ??___fltol 00A3                                ??___lldiv 0068  
                                 _lQueue 0029                               _TestButton 02A9  
                             _Robot_Stop 8960                                ??___lwdiv 0064  
                     __size_of_ToSegment 0284                                ??___lwmod 006B  
               __end_of_Port_SetQuadType 4BA0                 i2Byte_GetZone@pChunkSize 0005  
                           HMI_GRender@a 0152                     __end_of_Console_Init 7A5A  
                      GetPortTRIS@pInput 0062                       __size_of_Reset_Low 0018  
                                 clear_0 701A                                   clear_1 702C  
                                 clear_2 7038                                   clear_3 7044  
                                 clear_4 7050                                   clear_5 705C  
                                 _isfull 8BC8                       __end_of_ADCAverage 3F36  
                       ___awdiv@quotient 0066                               Port_Init@i 00A5  
                      __end_of_MXK_Queue 8C5A               __end_ofHMI_SetButton@F7213 FC3E  
                                 _printf 56FC                __end_of_MXK_InitDIPSwitch 8AE4  
                                 main@up 02D2                           HMI_SetButton@v 0067  
                                 floor@i 00AD                                   floor@x 00A9  
                 HMI_SetSegments@pString 0061                              _Console_Tab 7106  
                    LCD_Word_Write@value 0065                             __pdataCOMRAM 0048  
                       Create_Maze@count 0068                       __size_of_Port_Init 0174  
                          ??_Port_GetPin 0063                 Port_CheckPortType@Output 0099  
                              ??_isempty 0060                      __end_of_Move_ADC_To 59BE  
                        ??i2_Port_SetPin 0014                             __mediumconst FB54  
            __end_ofTimer2_Init@PRESCALE FC41                 Port_CheckPortType@pDrive 0098  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                             ?_MXK_Dequeue 0001  
                         ?_HMI_SetButton 0001                 Port_CheckPortType@pInput 0096  
                          ??_Port_SetPin 0073                                ??_reverse 0064  
                  Console_MakeField@Fill 0400                         ?_Port_SetPinType 0086  
                                 putch@c 0074                           ?_HMI_SetNumber 0076  
                         i2_Word_GetPair 87CE                  __end_of_Configure_GPIOs 7D16  
                       ??_MXK_TestButton 0066                   __end_of_Timer0_Restart 8C90  
                          Set_Rotation@m 0065                             ?_MXK_Release 0001  
                         ?_Navigate_Maze 0001                               ___flge@ff1 0060  
                             ___flge@ff2 0064                               _SteppingCW 8198  
                        __CFG_FOSC$HSPLL 000000                   __end_ofi2_MXK_SwitchTo 86A8  
                           ___xxtofl@arg 006A                         __end_ofexp@coeff FE49  
                           i2delay_us@us 0001                             ___xxtofl@exp 0069  
                           ___xxtofl@val 0060                         __end_oflog@coeff FE6D  
                        ?_LCD_Word_Write 0065                               __accesstop 0060  
                __end_of__initialization 7062                               Travel@Dist 00F3  
                              ?_LCD_Fill 0069                                ?_LCD_Init 0001  
                           _Cliff_FRight 015B                            SPI_Init@pMode 0092  
                             Travel@Wall 00F9                               ___flneg@f1 0087  
                            _Byte_GetBit 882C                                ?_LED_Init 0001  
               __end_ofi2_Timer0_Restart 8C9C                               Travel@spd1 01EA  
                             Travel@spd2 01EC                                ?_HMI_Init 0001  
                      ??_Set_Addr_Window 0068                                ?_HMI_Poll 0001  
                           eval_poly@res 00AB                            ___rparam_used 000001  
                             ___fltol@f1 009F                              _Byte_SetBit 7F74  
                          __end_of_MASKS FC3A                           _PortA_Property FE79  
                            ?_Event_NULL 0001                                LCD_Fill@i 006B  
                              LCD_Fill@j 006C                                LCD_Init@i 0097  
                          __end_of_Drive 822C                    _Get_VirtualWall_State 891C  
                         __pcstackCOMRAM 0001                           _PortB_Property FE77  
                    __size_ofi2_delay_us 0040                             __pidataBANK1 8940  
                            _Init_Timer0 8AB4                      i2Byte_SetBit@pInput 0001  
                   __end_of_Byte_GetPair 8A36                          Console_Render@x 008A  
                        Console_Render@y 008B                      i2Byte_SetBit@pValue 0004  
                          ?_Set_Rotation 0001                      Timer0_Init@PRESCALE FC07  
                   __end_of_Byte_GetZone 76CE                            __end_of_floor 64D2  
                          __end_of_ldexp 68C0                            __end_of_frexp 6F36  
                    FunctReadADC@channel 0060                           _PortC_Property FE75  
                          __end_of_putch 8C76                                ?_MXK_Init 0001  
                    __end_of_Timer2_Init 5EF0                      __end_of_Timer0_Stop 8CD0  
                              ?_SPI_Init 008D                                ?_SPI_Send 0060  
                            _Button_Init 6BEE                        Port_SetType@pType 009C  
                            _Button_Poll 616C                     __end_of_Byte_SetByte 8C4C  
                   __end_of_Byte_SetPair 89A0                           _HMI_LeftSwitch 8B8C  
                         _PortD_Property FE73                     __end_of_Byte_SetQuad 89C0  
                           ??_LED_Toggle 0078                             ??_HMI_GetBar 0060  
                   __end_of_Byte_SetZone 72BA                           _HMI_DownSwitch 8B50  
                          SPI_Send@pData 0062                            ??_SteppingCCW 0066  
                  __end_of_MXK_DIPSwitch 8B3C                             ??_HMI_SetBar 0060  
                           ??_HMI_Render 0068                           _PortE_Property FE71  
                         _Sensor_Observe 5EF0                 __size_of_HMI_SetSegments 009C  
                 __end_ofi2_Word_GetPair 87FE                                  ??_Drive 0065  
                         _PortF_Property FE6F                  Port_CheckQuadType@Pair1 0093  
                Port_CheckQuadType@Pair2 0094                 MXK_BlockSwitchTo@pModule 0067  
                                ??_floor 00AD                                  ??_ldexp 00B5  
                                ??_frexp 0066                        ??_FunctInitButton 00A8  
                      _Console_Backspace 8066                          ?_Timer0_Restart 0001  
                                ??_putch 0074                         Move_ADC_To@Angle 00A9  
               __size_of_HMI_RightSwitch 0014                      _Console_ClearCursor 876E  
                      __end_of_ToSegment 471A                           _PortG_Property FE6D  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                    __end_of_Port_GetPin 85CA                  Port_CheckQuadType@pQuad 0091  
                        reverse@iterator 0065                       __size_of_eval_poly 0100  
                       ??_SPI_DisableISR 0062                          ?i2_MXK_SwitchTo 0001  
                     ?_Console_Backspace 0001                        __end_of_Reset_Low 8A9C  
              __size_of_Event_TestButton 0034                  __size_of_Port_TogglePin 002E  
                             ??_LCD_Fill 006B                               ??_LCD_Init 0095  
                    __end_of_Port_SetPin 6BEE                   __end_of_PortA_Property FE7B  
                              ?_Mode_Set 0001                       Byte_SetByte@pInput 0060  
                             ??_LED_Init 008D                       Byte_SetByte@pValue 0062  
                          ?_ISR_Function 0001                              ?_Reset_High 0001  
                             ??_HMI_Init 00A8                               ??_HMI_Poll 0084  
                          ?_Timer2_Clear 0001                           Go_Backward@spd 01F9  
                Port_CheckPairType@Props 008D                   __end_of_PortB_Property FE79  
                     __size_of_eusartRec 0008                        __end_of_Port_Init 5588  
                            ?_Timer0_ISR 0001                  Port_CheckPairType@pPair 0088  
                     __end_of_LED_Toggle 849C                       __end_of_HMI_GetBar 8CD6  
               LCD_FillRectangle@pColour 0069                     __end_of_FunctReadADC 8556  
                    ??_Console_Backspace 0062                        Set_Addr_Window@xe 0066  
                      Set_Addr_Window@ye 0067                        Set_Addr_Window@xs 0068  
                      Set_Addr_Window@ys 0065                                  ?_OutSeg 0063  
                     Byte_SetPair@pInput 006B                                  ?_Travel 00F1  
                            ?_Motor_Step 0001                       Byte_SetPair@pValue 006E  
                                ?___flge 0060                       __end_of_HMI_SetBar 8CB0  
                 __end_of_PortC_Property FE77                       Word_GetPair@pInput 006C  
                     __end_of_HMI_Render 8672                           ??_Set_Rotation 0065  
                              ?_Port_Set 006F                                  ?___wmul 0060  
                            ?_Robot_Init 0001                         ?_Event_DIPSwitch 0001  
                      Port_GetPin@Output 0065                             ??_ISR_Enable 0060  
                            ?_Robot_Stop 0001             __size_of_Console_ResetCursor 001A  
                   ?_Console_ClearCursor 0001                   __end_of_HMI_LeftSwitch 8BA0  
                 __end_of_PortD_Property FE75                                  _ADC_AN0 01BB  
                                _ADC_AN1 01B6                                  _ADC_AN2 01B1  
                                _ADC_AN3 01AC                               ??_MXK_Init 00A6  
                            _Move_ADC_To 5864                        Port_GetPin@pInput 0060  
                      _Console_MakeField 6DF2                                  ?_isfull 0001  
                      ??_Console_NewLine 0060                   __end_of_HMI_DownSwitch 8B64  
                             ??_SPI_Init 0093                   Event_TestButton@pState 0079  
                             ??_SPI_Send 0063                                  ?_printf 0075  
                      ??_HMI_InitButtons 0060               __size_of_MXK_InitDIPSwitch 0018  
                 __end_of_PortE_Property FE73                      Console_Render@F6956 01C8  
                 __end_of_Sensor_Observe 6030                       ?_Console_MakeField 0065  
                                _COUNTER 0036                                  i2l10711 849E  
                                i2l10713 84AE                          ??_HMI_SetButton 0060  
                   __end_of_HMI_UpSwitch 8B78                                  _LED_Set 8276  
                _Console_IncrementCursor 7E24                                ?___xxtofl 0060  
                 __end_of_PortF_Property FE71                              _gBackcolour 0154  
                        ??_HMI_SetNumber 0078                                _I2C1_Done 0117  
                        ?i2_Word_GetPair 000D                                _I2C2_Done 0114  
                              _I2C1_More 0111                                _I2C2_More 010E  
                              ?_delay_ms 0060                __end_of_Console_Backspace 80B4  
                              ?_delay_us 0060                      __size_of_Event_NULL 0002  
             __end_of_MXK_InitTestButton 8AFC                                  _SSP1ADD 000FC8  
                                _SSP1BUF 000FC9                                  _SSP2BUF 000F6F  
                 __end_of_PortG_Property FE6F                      ??_Console_MakeField 0067  
                        ??_Navigate_Maze 02C7                                  _SPI_DCS 873E  
                   __size_ofi2_MXK_Queue 000E                         ?_Configure_GPIOs 0001  
               ?_InitSerialCommunication 0001                      __end_of_SteppingCCW 8276  
                           ?_Go_Backward 01F7                       eusartSend@sendChar 0060  
                   i2Byte_GetZone@Offset 0008                              ?_SteppingCW 0001  
                                _Go_Home 89FE                       __end_of_ISR_Enable 8CA6  
                         ??_ISR_Function 0017                     i2Byte_GetZone@Output 0009  
                      Event_TestButton@j 003C                               ??_Mode_Set 0060  
                         ??_Timer2_Clear 0060                                  _Font5x7 FC41  
                   i2Byte_GetZone@pChunk 0004                                  _InitADC 80B4  
                   i2Byte_GetZone@pInput 0001                     SPI_DisableISR@pInput 0060  
                          ?_Port_GetQuad 0060                          Byte_SetBit@pBit 0062  
                   Port_TogglePin@pInput 0074                    __end_ofi2_Byte_SetBit 8198  
                 ?_Get_VirtualWall_State 0061                                  __Hparam 0000  
                      Port_GetQuad@pQuad 0062                              _Timer2_Init 5DAA  
                                __Lparam 0000                              _Timer0_Stop 8CCA  
                  __size_of_Console_Init 006A                                  OutSeg@a 0042  
        __end_ofPortProperty_Valid@F6830 FC27                            LCD_Write@mode 0063  
                        __size_of_OutSeg 006E                              _Motor_Count 0146  
                             ??_Port_Set 0072                          __size_of_Travel 0668  
                        __size_of___flge 0122                __end_of_Console_MakeField 6E98  
                      _Console_PrintChar 5B12                  __size_of_Closest_Object 00AA  
                                ___fladd 3908                            ?_Port_SetType 009A  
                                _gCursor 0048                                  ___fldiv 3F36  
                                ___awdiv 7452                                  ___flneg 879E  
                  ??_Console_ClearCursor 0060                                  ___flmul 35B6  
                                ___flsub 8306                                  ___fltol 699E  
                                _lBuffer 0446                                  ___lldiv 74D8  
                        __size_of___wmul 0028                                  ___lwdiv 7F20  
                                ___lwmod 83D8                                  Turn@Dir 0065  
                                Turn@Rad 0069                          ?_HMI_LeftSwitch 0001  
               __end_of_Console_FormFeed 7984                       ?_Console_PrintChar 0001  
                                __pcinit 6FD2                        __end_of_eval_poly 66DE  
                        ?_HMI_DownSwitch 0001                                  __ramtop 1000  
                        __size_of_isfull 0014                                _CCW_Count 0124  
                                __ptext0 322A                                  __ptext1 5EF0  
                                __ptext2 8AFC                                  __ptext3 2954  
                                __ptext4 6030                                  __ptext5 5414  
                                __ptext6 4D76                                  __ptext7 841C  
                                __ptext8 41EC                                  __ptext9 8C3E  
                             _eusartSend 8C5A                          __size_of_printf 0168  
                                _average 002E                                _T0CONbits 000FD5  
                        ?_Sensor_Observe 0001                        i2MXK_SwitchTo@CUR 0007  
                                _countOn 01D6                                  _dpowers FC27  
                              _T2CONbits 000FCA                            LED_Set@pValue 0074  
                           __size_of_exp 0274                             __size_of_log 0174  
                    __size_of_Reset_High 0018                    Event_DIPSwitch@pState 0079  
                           __size_of_pop 004C                             __size_of_pow 01D6  
                             ??___xxtofl 0064                             ?_GetPortPORT 0060  
                                _isempty 8BB4                             ?_GetPortTRIS 0060  
                    ??_Console_PrintChar 0070                        __end_of_eusartRec 8CCA  
                            _Port_GetPin 8590                        __CFG_MSSPMSK$MSK5 000000  
                    LCD_DrawRectangle@p2 01C4                      LCD_DrawRectangle@p4 01C0  
                           ??i2_delay_us 0003                               ??_delay_ms 0062  
                             ??_delay_us 0062                                  _reverse 7ECC  
              Sensor_Observe@High_Sensor 00F3                                _DIPSwitch 029F  
                    __size_of_Timer0_ISR 0028                              _Port_SetPin 6B3A  
                __size_of_UpdateDistance 0066                           LCD_DrawField@i 0082  
                           ?_Create_Maze 0001                                _LCD_Reset 7FC6  
                    __size_of_Motor_Step 010C                              _VictimCount 0134  
                              _LCD_Write 89C0                     __size_of_MXK_Dequeue 0030  
                             delay_ms@ms 0060                     end_of_initialization 7062  
                    __size_of_Robot_Init 0016                                  exp@sign 00C1  
                             delay_us@us 0060                      __size_of_Robot_Stop 0020  
                      ??_HMI_SetSegments 0063                  Console_PrintChar@pInput 0073  
                           _Console_Init 79F0                     __size_of_MXK_Release 0016  
             __end_of_Port_CheckPairType 7CB8                                  itos@Out 0074  
                         ??_Port_GetQuad 0063                       _PortProperty_Valid 7B2A  
                                pop@data 0085                       Byte_SetQuad@pInput 006B  
                     SPI_MinSpeed@pInput 006F                       Byte_SetQuad@pValue 006E  
                  __size_of_Byte_GetPair 001C                                i2u1558_48 88BC  
                        ___lldiv@divisor 0064                    __size_of_Byte_GetZone 007A  
                      ??_HMI_RightSwitch 0066                                  pow@sign 00D2  
                        ___lldiv@counter 006C                __end_of_Console_PrintChar 5C62  
                         ??_Port_SetType 009D               __end_of_Port_CheckQuadType 8066  
                                printf@c 0082                                  printf@f 0075  
                         Port_Init@pPort 00A2                                  postdec1 000FE5  
                                postdec2 000FDD                    __size_of_Byte_SetByte 000E  
                  __size_of_Byte_SetPair 0020                   Console_MakeField@Index 0069  
                       _ADCAverage$15832 00D9                         _ADCAverage$15833 00DD  
                       _ADCAverage$15834 00E1                         _ADCAverage$15835 00E5  
                       _ADCAverage$15836 00E9                         _ADCAverage$15837 00ED  
                                postinc0 000FEE                                  postinc2 000FDE  
                    ?_PortProperty_Valid 006F                    __size_of_Byte_SetQuad 0020  
             __end_of_Port_CheckPortType 845C                    __size_of_Byte_SetZone 008E  
                 __size_of_Detect_Victim 005E                       __end_ofi2_delay_us 84DC  
                     Button_Init@pInitIO 009F                        ?_Port_SetQuadType 0096  
                            _gForecolour 01E4                ??_Console_IncrementCursor 0064  
                 __size_ofi2_MXK_Release 0006                      __size_of_SteppingCW 004A  
                              _PORTFbits 000F85                               _timercount 011E  
                     ??_Port_SetQuadType 009A                             ?_Console_Tab 0001  
                       Byte_GetZone@MASK 0066                              ___fladd@grs 009E  
                  Console_Render@lCursor 0086                              _SteppingCCW 822C  
        __end_of_InitSerialCommunication 89FE                                _MXK_Queue 8C4C  
                       __CFG_CPUDIV$OSC1 000000                            ___xxtofl@sign 0068  
                       Byte_GetZone@pMax 0062               __size_of_Console_Backspace 004E  
                              _TRISCbits 000F94                              _Square_Dist 0130  
                        _Set_Addr_Window 706C                           SPI_Init@pClock 008D  
                       ??_LCD_Word_Write 0067                              ___fldiv@grs 0073  
                            ___fldiv@rem 006D                    __end_of_LCD_DrawField 75DA  
                         Port_Set@pInput 006F                           SPI_Init@pInput 0093  
                   ??_PortProperty_Valid 0073                           Port_Set@pValue 0071  
                             ?_LCD_Reset 0001                     __end_of_Set_Rotation 722C  
                             ?_LCD_Write 0063                             _Byte_GetPair 8A1A  
                     HMI_SetButton@F7213 FC3A                             _Byte_GetZone 7654  
                          ?_MXK_SwitchTo 0001                        LCD_DrawField@xmax 0080  
                      LCD_DrawField@ymax 0081                              Travel@error 01F5  
Get_VirtualWall_State@Vitual_Wall_Sensor 0064                           _Port_TogglePin 87FE  
                       _Event_TestButton 86A8                              ___flmul@grs 007C  
                  __size_of_FunctReadADC 003C                     Port_SetPinType@Props 008B  
                           ?_Byte_GetBit 0060                  __size_ofi2_Byte_GetPair 001A  
                           _Byte_SetByte 8C3E                             _Byte_SetPair 8980  
                           _Byte_SetQuad 89A0                           _Previous_Angle 0136  
                __size_ofi2_Byte_GetZone 0076                             _Byte_SetZone 722C  
                   Port_SetPinType@pType 0089                        ?i2_Timer0_Restart 0001  
                           ?_Byte_SetBit 0060                            ?_SPI_MaxSpeed 006F  
                      __size_of_LCD_Fill 0048                             ??_Event_NULL 0060  
                      __size_of_LCD_Init 0148                        __size_of_LED_Init 0054  
                          ?_SPI_MinSpeed 006F                    __end_ofi2_Timer0_Stop 8CE2  
                     ??i2_Timer0_Restart 0001                        __size_of_HMI_Init 017C  
                      __size_of_HMI_Poll 0060                            ?i2_Motor_Step 0001  
                           ?_Init_Timer0 0001               __size_of_Console_MakeField 00A6  
                         __end_of_OutSeg 7918                           __end_of_Travel 2954  
                         __end_of___flge 63BC                    __size_of_HMI_UpSwitch 0014  
                              _Close_Pos 0128                           __end_of___wmul 88A8  
                  __end_of_HMI_DIPSwitch 8B50                            __pidataCOMRAM 8CB0  
                           ?_Button_Init 009B                          _FunctInitButton 77BE  
                           ?_Button_Poll 007B                              ?_eusartSend 0001  
                              _Bus_State 004C                      i2Byte_GetPair@pPair 000C  
                         __end_of_isfull 8BDC                     __end_of_ISR_Function 14AA  
                      __size_of_MXK_Init 013C                                _BumpState 012C  
                            Turn@C_Angle 0067                               floor@expon 00B1  
                   __end_of_Timer2_Clear 8CC2                           __end_of_printf 5864  
                      __size_of_SPI_Init 03A4                        __size_of_SPI_Send 006C  
                          ?_Word_GetPair 006C                         ??_Timer0_Restart 0060  
                     Port_SetType@Output 009F                      start_initialization 6FD2  
                             ?_MXK_Queue 0060                               eval_poly@d 00A3  
                             eval_poly@n 00A5                               eval_poly@x 009F  
                             ldexp@value 00AF                             _FunctReadADC 851A  
               PortProperty_Valid@Errors 0075                         ??i2_MXK_SwitchTo 0007  
                      _LCD_FillRectangle 7E78                       Port_SetType@pInput 009A  
                           _Current_Dist 014E                              __end_of_exp 498E  
                            __end_of_log 56FC                              _ADC_Reading 012A  
                            __end_of_pop 814C                              __end_of_pow 4D76  
                             HMI_Init@in 00A8                      HMI_SetNumber@pInput 0076  
                  __end_ofi2_Port_SetPin 6DF2                       __end_of_Event_NULL 1406  
                          _Detect_Victim 7D16                   __end_of_Port_TogglePin 882C  
                          ?_Word_SetPair 006F                        Byte_SetBit@pInput 0060  
                         ??_MXK_SwitchTo 0066                        Byte_SetBit@pValue 0063  
                     ?_LCD_FillRectangle 0069                      _Console_ResetCursor 8A36  
            PortProperty_Valid@pPinDrive 0071                     MXK_BlockSwitchTo@CUR 0066  
               PortProperty_Valid@pInput 006F                            i2_MXK_Release 8CE2  
                             frexp@value 0060                   LCD_FillRectangle@pSize 006F  
                         SPI_Send@pInput 0060                     __size_of_Go_Backward 00DE  
                           ??_Reset_High 0074                 __size_of_Port_SetPinType 019E  
                         ??_SPI_MaxSpeed 0071                    Port_SetQuadType@pQuad 0098  
                              _ToSegment 4496                      ??_LCD_FillRectangle 0073  
                  Port_SetQuadType@pType 0099                          _Console_NewLine 76CE  
                         ??_SPI_MinSpeed 0071                             _HMI_UpSwitch 8B64  
                              _Reset_Low 8A84                             ??_Timer0_ISR 0017  
                        _HMI_InitButtons 8CD6                        __size_of_Mode_Set 0012  
             __size_of_Console_PrintChar 0150                                _gCharSize 01D0  
                       Timer2_Init@INDEX 003E                                OutSeg@cur 0044  
                         ??i2_Motor_Step 0015                                 ??_OutSeg 0064  
                              OutSeg@out 0067                  __size_of_Console_Render 01B6  
                           ??_Motor_Step 0074                                 ??_Travel 00FB  
                         _Closest_Object 6C9E                                 ??___flge 0068  
                     Byte_SetZone@Offset 0069                             ??_Robot_Init 0067  
                               ??___wmul 0064                             ??_Robot_Stop 0061  
                   ?_Console_ResetCursor 0001                                _Port_Init 5414  
                            __pdataBANK1 01C8                             ?_Move_ADC_To 00A9  
                      __size_of_Port_Set 02AA                       Byte_SetZone@pChunk 0063  
                               ??_isfull 0060                         ??i2_Word_GetPair 0010  
                     Byte_SetZone@pInput 0060                       Byte_SetZone@pValue 0065  
                          Mode_Set@pMode 0060                                 ??_printf 007B  
                __end_of_Set_Addr_Window 7106                 Port_CheckQuadType@Output 0095  
                              _gLineSize 01CC                 Port_CheckQuadType@pDrive 0092  
                              ___fladd@a 008F                                ___fladd@b 008B  
                         ??_Word_GetPair 006F                 Port_CheckQuadType@pInput 008F  
                          _Desired_Level 01DA                                Travel@Dir 01E8  
                   __end_of_Port_GetQuad 851A                                ___fldiv@a 0064  
                              ___fldiv@b 0060                __end_of_LCD_FillRectangle 7ECC  
                            __pbssBIGRAM 0446                                Travel@Spd 00F7  
                               ?_LED_Set 0074                                ___flmul@a 0072  
                              ___flmul@b 006E                              __pbssCOMRAM 0029  
                              ___flsub@a 00A3                                ___flsub@b 009F  
                     __end_of_Reset_High 8AB4                            __pcstackBANK0 0060  
                          __pcstackBANK1 01E8                            __pcstackBANK2 02C7  
                         _UpdateDistance 7B92                               itos@Length 0072  
                         ?_Detect_Victim 008C                           ??_Word_SetPair 0073  
                      __size_of___xxtofl 0154                       __end_of_Timer0_ISR 88D0  
                   __size_of_GetPortPORT 0088                              ??_LCD_Reset 0079  
                   __size_of_GetPortTRIS 0088                     __end_of_Port_SetType 4F44  
                               ?_SPI_DCS 0060                          ?_Port_TogglePin 0074  
                            ??_LCD_Write 0064                        __size_of_delay_ms 005C  
                      __size_of_delay_us 0046                                Turn@Angle 0061  
                    __CFG_CCP2MX$DEFAULT 000000                       __end_of_Motor_Step 65DE  
                  Timer2_Init@pFrequency 006D                             ??_SteppingCW 0066  
                         ?i2_MXK_Release 0001                                Turn@Speed 0063  
                     __end_of_Robot_Init 8B12                     __size_of_Create_Maze 22EC  
                     __end_of_Robot_Stop 8980                                 ?_Go_Home 0001  
                              _exp$15840 00BB                  ??_Get_VirtualWall_State 0063  
                               ?_InitADC 0001                 Port_CheckPairType@Output 008C  
                    __size_of_eusartSend 000E                               ?_ToSegment 0001  
               Port_CheckPairType@pDrive 0089                 Port_CheckPairType@pInput 0086  
                         reverse@tempVar 0064                   __end_of_Closest_Object 6D48  
                     _MXK_InitTestButton 8AE4                               ?_Reset_Low 0001  
                 __size_of_MXK_DIPSwitch 0014                             ?_Timer2_Init 006D  
                       ??_HMI_LeftSwitch 0066                             ?_Timer0_Stop 0001  
                       ___lwdiv@dividend 0060                            _lStepFunction 010B  
                __size_of_MXK_TestButton 0014                        Byte_SetPair@pPair 006D  
                __end_of_FunctInitButton 7834                         ??_HMI_DownSwitch 0066  
       __size_of_InitSerialCommunication 001E                                __pintcode 1408  
                          __pmediumconst FB54                    ??_Console_ResetCursor 0060  
                               ?___fladd 008B                                 ?___fldiv 0060  
                               ?___awdiv 0060                                __ptext100 79F0  
                              __ptext101 6C9E                                __ptext110 8066  
                              __ptext102 56FC                                 ?___flneg 0087  
                              __ptext111 876E                                __ptext103 8C68  
                              __ptext120 755C                                __ptext112 822C  
                              __ptext104 5B12                                __ptext121 8880  
                              __ptext113 7D74                                __ptext105 7106  
                              __ptext130 5588                                __ptext122 706C  
                              __ptext114 8BDC                                __ptext106 7E24  
                              __ptext131 471A                                __ptext123 8A50  
                              __ptext115 8BF0                                __ptext107 76CE  
                              __ptext140 8306                                __ptext132 67DC  
                              __ptext124 89C0                                __ptext116 8C04  
                              __ptext108 7918                                __ptext141 3908  
                              __ptext133 63BC                                __ptext125 8C2C  
                              __ptext117 8C18                                __ptext109 8A36  
                              __ptext150 6F36                                __ptext142 879E  
                              __ptext134 6E98                                __ptext126 6DF2  
                              __ptext118 4F44                                __ptext151 4496  
                              __ptext143 3F36                                __ptext135 59BE  
                              __ptext127 882C                                __ptext119 7E78  
                              __ptext160 8C90                                __ptext152 863C  
                              __ptext144 7452                                __ptext136 699E  
                              __ptext128 3C46                                __ptext161 6D48  
                              __ptext153 78AA                                __ptext145 88F6  
                              __ptext137 629A                                __ptext129 4BA0  
                              __ptext170 0000                                __ptext162 87CE  
                              __ptext154 7984                                __ptext146 6A7C  
                              __ptext138 65DE                                __ptext163 8A6A  
                              __ptext155 851A                                __ptext147 7ECC  
                              __ptext139 35B6                                __ptext164 7834  
                              __ptext148 83D8                                __ptext165 814C  
                              __ptext157 88A8                                __ptext149 7F20  
                              __ptext166 8672                                __ptext158 66DE  
                              _pShiftVal 0034                                __ptext167 849C  
                              __ptext159 8CDC                                __ptext168 8CE2  
                              __ptext169 8C76                                 ?___flmul 006E  
                       ??_Sensor_Observe 00F1                                 ?___flsub 009F  
                               ?___fltol 009F                                 ?___lldiv 0060  
                             ?_Port_Init 00A0                                 ?___lwdiv 0060  
                               ?___lwmod 0067                      ?_MXK_InitTestButton 0001  
                      ?_Console_FormFeed 0001                        _GetPortProperties 7342  
                              _pow$15838 00CA                                _pow$15839 00CE  
                     __end_of_SteppingCW 81E2              __end_ofTimer0_Init@PRESCALE FC17  
                     ??_Console_FormFeed 0060                          _HMI_SetSegments 6F36  
                     ?_GetPortProperties 0060                         Event_NULL@pState 0001  
                 __end_of_UpdateDistance 7BF8                 __size_of_Event_DIPSwitch 0026  
                  __size_of_Set_Rotation 0092                            ??i2_MXK_Queue 0004  
                              _eval_poly 65DE                                 ?_isempty 0001  
                            ??_MXK_Queue 0063                             ?_Port_GetPin 0060  
                         __size_of_Drive 004A                    __end_of_HMI_SetButton 7654  
                   __size_of_Console_Tab 0094                                 ?_reverse 0060  
                           ?_Port_SetPin 006F                                _readIndex 0030  
                  __end_of_HMI_SetNumber 891C                         ___lwdiv@quotient 0065  
                        _HMI_RightSwitch 8B78                           __size_of_floor 0116  
                         __size_of_ldexp 00E4                           __size_of_frexp 009E  
                    ??_GetPortProperties 0062                  __end_of_Console_NewLine 7748  
                              _eusartRec 8CC2                     ??_MXK_InitTestButton 008D  
                     Byte_GetPair@pInput 0069                           __size_of_putch 000E  
                  __end_of_Navigate_Maze 2E86                  __end_of_HMI_InitButtons 8CDC  
                      i2Port_SetPin@Type 0014                        i2Port_SetPin@pPin 0012  
                         i2_Byte_GetPair 8A6A                                 _LCD_Fill 82BE  
                               _LCD_Init 5C62                           ___wmul@product 0064  
                               _HMIBoard 025A                           i2_Byte_GetZone 7834  
                               _LED_Init 7DD0                                delay_ms@u 0062  
                     Button_Poll@pButton 007B                                delay_us@u 0062  
                               _HMI_Init 5298                                 _HMI_Poll 7BF8  
                     MXK_Queue@pCallback 0060                                 _IPR1bits 000F9F  
                               _IPR3bits 000FA5                                 _PIE1bits 000F9D  
                               _PIE3bits 000FA3              __end_of_Console_ClearCursor 879E  
               __size_of_Configure_GPIOs 005E                     __size_of_Byte_GetBit 002C  
                        ?_Closest_Object 0001                        Byte_SetQuad@pQuad 006D  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               _CW_Count 0122                                 i2u727_40 7856  
                               i2u727_47 784C                                 i2u729_40 789E  
                               i2u729_45 789A                                 i2u792_40 84CA  
                   __size_of_Byte_SetBit 0052                                 i2u788_44 8160  
                               i2u788_45 815C                                 i2u885_40 6720  
                               i2u789_44 8186                                 i2u789_45 8182  
                               i2u886_40 6734                                 i2u887_40 676C  
                               _RCONbits 000FD0                     i2Word_GetPair@pInput 000D  
                     _Sensor_Observe_Fin 0120                         __CFG_WDTPS$32768 000000  
                       HMI_SetBar@pValue 0060                        Button_Init@pInput 009B  
                __size_of_SPI_DisableISR 0028                                 _SSP1CON1 000FC6  
                      ??_Port_SetPinType 008A                                 _SSP1CON2 000FC5  
                               _SSP2CON1 000F6C                                 _SSP2CON2 000F6B  
                  __size_of_ISR_Function 00A2                                 _SSP1STAT 000FC7  
              __end_of_GetPortProperties 73CA                                 _SSP2STAT 000F6D  
                           _Set_Rotation 719A                    __size_of_Timer2_Clear 0008  
                   __end_of_MXK_SwitchTo 8590                       _Port_CheckPairType 7C58  
                               _MXK_Init 6030                     __size_of_Init_Timer0 0018  
                        MXK_SwitchTo@CUR 0066                                 _SPI_Init 2E86  
               __end_of_Event_TestButton 86DC                                 _SPI_Send 7984  
                             _ADCON0bits 000FC2                               _ADCON1bits 000FC1  
                       ?_Set_Addr_Window 0065                        ___wmul@multiplier 0060  
                      Byte_GetBit@Output 0064                     Go_Backward@direction 01F7  
                             printf@flag 007C                     Timer2_Init@pCPUClock 0076  
             __size_of_LCD_FillRectangle 0054                             ?_SteppingCCW 0001  
                   __size_of_Button_Init 00B0                          ?_UpdateDistance 0061  
                   __end_of_SPI_MaxSpeed 7AC2                               printf@prec 007D  
                      Byte_GetBit@pInput 0060                      Port_SetPinType@pPin 0088  
                   __size_of_Button_Poll 012E                               ?_eval_poly 009F  
                        ??_Detect_Victim 008E                       _Port_CheckQuadType 8016  
                          _MXK_DIPSwitch 8B28                      ?_Port_CheckPairType 0086  
                              main@right 02D0                     __end_of_SPI_MinSpeed 7B2A  
                          ??_MXK_Dequeue 0076                         __size_of_LED_Set 0048  
                 __size_ofi2_Byte_SetBit 004C                       _Port_CheckPortType 841C  
                  Button_Poll@pIncrement 007D                  PortProperty_Valid@F6830 FC17  
                   __end_ofi2_Motor_Step 67DC                          ??i2_MXK_Release 0001  
                             _ADCAverage 3C46                                copy_data0 6FE6  
                              copy_data1 7006                            ??_MXK_Release 0060  
                             ?_eusartRec 0001                   __end_ofi2_Byte_GetPair 8A84  
              __size_of_Port_SetQuadType 0212                         __size_of_SPI_DCS 0030  
                    ?_Port_CheckQuadType 008F                   __end_ofi2_Byte_GetZone 78AA  
                    __end_ofi2_MXK_Queue 8C84                      ?_Port_CheckPortType 0096  
                        itos@destination 006E                                 _InitList FB55  
                   _Motor_Step$intlevel0 64D8                                 _Mode_Set 8C2C  
                     Port_GetQuad@Output 0065                         __size_of_Go_Home 001C  
                            ??_ToSegment 0060                             _ISR_Function 1408  
                              frexp@eptr 0064                       Port_GetQuad@pInput 0060  
                           _Timer2_Clear 8CBA                         __size_of_InitADC 004C  
                   __end_of_Word_GetPair 870E                                 _lCBuffer 0228  
                   ??_Port_CheckPairType 008A                              ??_Reset_Low 0074  
                               __Hrparam 0000                             OutSeg@pInput 0066  
                         _Console_Render 4F44                                 __Lrparam 0000  
                        Timer2_Init@RDIV 0072                         ?_FunctInitButton 0001  
                         LCD_Write@value 0064                                 _Port_Set 41EC  
                           OutSeg@segset 0043                                rand@screw 0041  
                   __end_of_Word_SetPair 8604                              ??_Port_Init 00A3  
                __end_of_HMI_SetSegments 6FD2                     ??_Port_CheckQuadType 0093  
                       __size_of___fladd 033E                         __size_of___fldiv 02B6  
                  __size_of_Port_GetQuad 003E                         __size_of___awdiv 0086  
                       __size_of___flneg 0030                         __size_of___flmul 0352  
                       __size_of___flsub 0048                         __size_of___fltol 00DE  
                       __size_of___lldiv 0084                        _MXK_BlockSwitchTo 8604  
                       __size_of___lwdiv 0054                     ??_Port_CheckPortType 0099  
                       __size_of___lwmod 0044                                 _lBufferX 0046  
                               _lBufferY 0045                      Timer2_Init@PRESCALE FC3E  
                           ??_eusartSend 0060                          LCD_Fill@pColour 0069  
                     ?_MXK_BlockSwitchTo 0001                __size_ofi2_Timer0_Restart 000C  
                   __size_of_Move_ADC_To 015A                                 _lCurrent 003A  
                __end_of_HMI_RightSwitch 8B8C                   Byte_GetZone@pChunkSize 0064  
                         ?_MXK_DIPSwitch 0001                   Byte_SetZone@pChunkSize 0064  
                  __size_of_Port_SetType 01CE                            reverse@length 0062  
                           Create_Maze@p 006A                             Create_Maze@x 006C  
                           Create_Maze@y 006E                                itos@input 006C  
                  i2MXK_SwitchTo@pModule 0008                                 ___xxtofl 59BE  
                               _delay_ms 7D74                                 _delay_us 834E  
                               _clearall 0047                         __size_of_isempty 0014  
                        ___lwdiv@divisor 0062                          ___lwdiv@counter 0064  
                        Port_GetPin@pPin 0062                                 __ptext10 72BA  
                               __ptext11 7342                                 __ptext20 8B12  
                               __ptext12 73CA                                 __ptext21 8C4C  
                               __ptext13 7DD0                                 __ptext30 8A84  
                               __ptext22 8604                                 __ptext14 8276  
                               __ptext31 8A9C                                 __ptext23 834E  
                               __ptext15 870E                                 __ptext40 8B50  
                               __ptext32 8AB4                                 __ptext24 5C62  
                               __ptext16 64D2                                 __ptext41 8B64  
                               __ptext33 89E0                                 __ptext25 719A  
                               __ptext17 8CCA                                 __ptext50 845C  
                               __ptext42 8B78                                 __ptext34 80B4  
                               __ptext26 82BE                                 __ptext18 8C84  
                               __ptext51 87FE                                 __ptext43 8B8C  
                               __ptext35 8C9C                                 __ptext27 7CB8  
                               __ptext19 8556                                 __ptext60 74D8  
                               __ptext52 6B3A                                 __ptext44 8BA0  
                               __ptext36 7BF8                                 __ptext28 7A5A  
                               __ptext61 8CBA                                 __ptext53 8590  
                               __ptext45 84DC                                 __ptext37 616C  
                               __ptext29 7FC6                                 __ptext70 8BC8  
                               __ptext62 8858                                 __ptext54 8CA6  
                               __ptext46 88D0                                 __ptext38 8B28  
                               __ptext71 7B92                                 __ptext63 873E  
                               __ptext55 8CD0                                 __ptext47 1404  
                               __ptext39 8B3C                      ??_MXK_BlockSwitchTo 0066  
                               __ptext80 8ACC                                 __ptext72 7748  
                               __ptext64 89FE                                 __ptext56 5298  
                               __ptext48 86A8                                 __ptext81 8CD6  
                               __ptext73 8960                                 __ptext65 8100  
                               __ptext57 7AC2                                 __ptext49 75DA  
                               __ptext90 7B2A                                 __ptext82 8AE4  
                               __ptext74 5864                                 __ptext66 8BB4  
                               __ptext58 2E86                                 __ptext91 86DC  
                               __ptext83 50FA                                 __ptext75 8198  
                               __ptext67 68C0                                 __ptext59 5DAA  
                               __ptext92 8A1A                                 __ptext84 7F74  
                               __ptext76 891C                                 __ptext68 22EC  
                               __ptext93 7654                                 __ptext85 498E  
                               __ptext77 81E2                                 __ptext69 8394  
                               __ptext94 89A0                                 __ptext86 85CA  
                               __ptext78 77BE                                 __ptext95 722C  
                               __ptext87 8980                                 __ptext79 6BEE  
                               __ptext96 7D16                                 __ptext88 8016  
                               __ptext97 8C5A                                 __ptext89 7C58  
                               __ptext98 8CC2                                 __ptext99 0000  
                           _SSP1CON1bits 000FC6                         __size_of_reverse 0054  
                           _SSP1CON2bits 000FC5              __size_of_PortProperty_Valid 0068  
                     i2Byte_GetZone@MASK 0007                             _SSP2CON1bits 000F6C  
                           _SSP2CON2bits 000F6B                          ?i2_Byte_GetPair 000A  
                       ?_Console_NewLine 0001                        ??_Event_DIPSwitch 0079  
                        ?i2_Byte_GetZone 0001                                 _countOff 01D4  
                          __size_of_STP1 0014                            __size_of_STP2 0014  
                          __size_of_STP3 0014                            __size_of_STP4 0014  
                     i2Byte_GetZone@pMax 0003                         ?_HMI_InitButtons 0001  
                    __end_of_MXK_Dequeue 873E                        HMI_SetSegments@in 0064  
                  Button_Init@pThreshold 009D                            __size_of_Turn 0076  
                          __size_of_main 038C                            __size_of_itos 00BE  
                      Byte_GetPair@pPair 006B                            __size_of_push 0044  
                               _readings 0246                   __end_of_Console_Render 50FA  
                    i2Port_SetPin@pInput 0010                      i2Port_SetPin@pValue 0013  
                     __end_of_eusartSend 8C68                             _Port_GetQuad 84DC  
                    __end_of_MXK_Release 8B28                           _MXK_TestButton 8BA0  
                _InitSerialCommunication 89E0                            i2_Byte_SetBit 814C  
                    i2Word_GetPair@pPair 000F                __end_of_MXK_BlockSwitchTo 863C  
               ?_Console_IncrementCursor 0001                     __size_of_Timer2_Init 0146  
                               int$flags 0051                     __size_of_Timer0_Stop 0006  
                           _Port_SetType 4D76                             Port_Set@Type 0086  
             __size_of_GetPortProperties 0088                   __size_of_LCD_DrawField 007E  
                      ??_Configure_GPIOs 0095                                printf@val 0080  
                           _SSP1STATbits 000FC7                                 main@left 02D1  
                               main@down 02CF                           Timer0_Init@DIV 0104  
                         Timer0_Init@PRE 003F                             _SSP2STATbits 000F6D  
                               exp@coeff FE21                               _LED_Toggle 845C  
                               log@coeff FE49                               _HMI_GetBar 8CD0  
                   Button_Init@pGetState 00A2                   PortProperty_Valid@Pair 0085  
                       ??_Port_TogglePin 0077                              _OSCTUNEbits 000F9B  
                             _INTCONbits 000FF2                   PortProperty_Valid@pPin 0072  
                            ??_eval_poly 00A7                               _HMI_SetBar 8CA6  
                             _HMI_Render 863C                         Byte_SetZone@MASK 006A  
                            i2_MXK_Queue 8C76                           Timer2_Init@DIV 0100  
                         Timer2_Init@PRE 003D                         Byte_SetZone@pMax 0062  
                 __size_ofi2_Timer0_Stop 0006                     __size_of_Port_GetPin 003A  
                            ?_ADCAverage 0001                     Button_Init@pFunction 00A5  
                               itos@Data 0070                              ??_eusartRec 0060  
                          ??_Go_Backward 01FB                       LCD_FillRectangle@i 0075  
                     LCD_FillRectangle@j 0076                     __size_of_Port_SetPin 00B4  
                               intlevel2 0000                             reverse@input 0060  
                            _numReadings 01DE                   __size_of_HMI_DIPSwitch 0014  
                       ___lwmod@dividend 0067                         ___lldiv@dividend 0060  
                 __end_of_MXK_TestButton 8BB4           __size_of_Get_VirtualWall_State 0024  
                        ?_Console_Render 0001            __end_of_Get_VirtualWall_State 8940  
                __size_of_LCD_Word_Write 001A                           ?i2_Byte_SetBit 0001  
                  __size_of_MXK_SwitchTo 003A                           _SPI_DisableISR 8858  
                        Port_Init@pInput 00A0                                 printf@ap 007E  
                            _thisReading 0142                                 push@data 0083  
                 __size_ofi2_Port_SetPin 00AA                               _ISR_Enable 8C9C  
                       ?_HMI_SetSegments 0061                  Console_MakeField@Column 006C  
                  __size_of_SPI_MaxSpeed 0068                            SPI_DCS@pInput 0060  
                  __size_of_SPI_MinSpeed 0068             Detect_Victim@Home_Base_State 008F  
                        ??_MXK_DIPSwitch 0066                    __size_ofi2_Motor_Step 00FE  
                Console_MakeField@pInput 006B                         ?_HMI_RightSwitch 0001  
                       ___lldiv@quotient 0068                            ??_GetPortPORT 0062  
                        ___lwmod@divisor 0069                            ??_GetPortTRIS 0062  
                     Word_SetPair@pInput 006F                          ___lwmod@counter 006B  
                     Word_SetPair@pValue 0072                              _MXK_Dequeue 870E  
                   __size_of_SteppingCCW 004A                            ??_Create_Maze 0066  
                         LED_Toggle@pLED 0078                            ___fladd@signs 009B  
                          _LCD_DrawField 755C                         _Port_SetQuadType 498E  
                            _MXK_Release 8B12                __size_of_Console_FormFeed 006C  
                           _MXK_SwitchTo 8556                    __size_of_Word_GetPair 0032  
                     Byte_GetZone@Offset 0067                            ?_Console_Init 0001  
                      Word_SetPair@pPair 0071                         ??_Closest_Object 00F1  
                        _Port_SetPinType 50FA                             ___fladd@aexp 009C  
                           ___fladd@bexp 009D                  __size_of_Timer0_Restart 000C  
                     Byte_GetZone@Output 0068                ??_InitSerialCommunication 0060  
                     Byte_GetZone@pChunk 0063                          ?_MXK_TestButton 0001  
            __end_of_Console_ResetCursor 8A50                       Byte_GetZone@pInput 0060  
                __size_ofi2_MXK_SwitchTo 0036          __end_of_Console_IncrementCursor 7E78  
                  __size_of_Word_SetPair 003A                      __end_of_Go_Backward 699E  
                 __end_of_SPI_DisableISR 8880                             _SPI_MaxSpeed 7A5A  
                           _SPI_MinSpeed 7AC2                       Port_Set@TypeActual 0084  
                            Drive@SpeedL 0061                              Drive@SpeedR 0063  
