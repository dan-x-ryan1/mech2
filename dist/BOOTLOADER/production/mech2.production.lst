

<<<<<<< HEAD
Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed May 16 11:15:57 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
=======
Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 14 12:31:25 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
<<<<<<< HEAD
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1,inline
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1,inline
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1,inline
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1,inline
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1
   152                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1
   154                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   155                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   156  0000                     
   157                           ; Version 1.44
   158                           ; Generated 14/09/2017 GMT
   159                           ; 
   160                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   161                           ; All rights reserved.
   162                           ; 
   163                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   164                           ; 
   165                           ; Redistribution and use in source and binary forms, with or without modification, are
   166                           ; permitted provided that the following conditions are met:
   167                           ; 
   168                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   169                           ;        conditions and the following disclaimer.
   170                           ; 
   171                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   172                           ;        of conditions and the following disclaimer in the documentation and/or other
   173                           ;        materials provided with the distribution.
   174                           ; 
   175                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   176                           ;        software without specific prior written permission.
   177                           ; 
   178                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   179                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   180                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   181                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   182                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   183                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   184                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   185                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   186                           ; 
   187                           ; 
   188                           ; Code-generator required, PIC18F67J50 Definitions
   189                           ; 
   190                           ; SFR Addresses
   191  0000                     
   192                           	psect	idataCOMRAM
   193  013A80                     __pidataCOMRAM:
   194                           	opt stack 0
   195                           
   196                           ;initializer for _gCursor
   197  013A80  0006               	dw	6
   198  013A82  0006               	dw	6
   199                           
   200                           ;initializer for _numReadings
   201  013A84  0032               	dw	50
   202                           
   203                           ;initializer for _top
   204  013A86  FFFF               	dw	65535
   205                           
   206                           ;initializer for _Bus_State
   207  013A88  01                 	db	1
   208                           
   209                           ;initializer for _A
   210  013A89  41                 	db	65
   211                           
   212                           ;initializer for _a
   213  013A8A  61                 	db	97
   214                           
   215                           ;initializer for _zero
   216  013A8B  30                 	db	48
   217                           
   218                           ;initializer for _l
   219  013A8C  80                 	db	128
   220                           
   221                           ;initializer for _w
   222  013A8D  80                 	db	128
   223                           
   224                           	psect	idataBANK0
   225  013AD4                     __pidataBANK0:
   226                           	opt stack 0
   227                           
   228                           ;initializer for _countOff
   229  013AD4  00F8               	dw	248
   230                           
   231                           ;initializer for _countOn
   232  013AD6  007C               	dw	124
   233                           
   234                           ;initializer for _Low_Sensor
   235  013AD8  2710               	dw	10000
   236                           
   237                           ;initializer for _y_grid
   238  013ADA  0004               	dw	4
   239                           
   240                           ;initializer for _x_grid
   241  013ADC  0005               	dw	5
   242                           
   243                           ;initializer for _gForecolour
   244  013ADE  FFFF               	dw	65535
   245                           
   246                           ;initializer for _change
   247  013AE0  01                 	db	1
   248                           
   249                           	psect	idataBANK1
   250  013AE1                     __pidataBANK1:
   251                           	opt stack 0
   252                           
   253                           ;initializer for Console_Render@F6956
   254  013AE1  0006               	dw	6
   255  013AE3  0006               	dw	6
   256                           
   257                           ;initializer for _gLineSize
   258  013AE5  0080               	dw	128
   259  013AE7  0007               	dw	7
   260                           
   261                           ;initializer for _gCharSize
   262  013AE9  0005               	dw	5
   263  013AEB  0007               	dw	7
   264                           
   265                           	psect	mediumconst
   266  00FBEA                     __pmediumconst:
   267                           	opt stack 0
   268  00FBEA  00                 	db	0
   269  00FBEB                     _InitList:
   270                           	opt stack 0
   271  00FBEB  1100               	dw	4352
   272  00FBED  0080               	dw	128
   273  00FBEF  012C               	dw	300
   274  00FBF1  B100               	dw	45312
   275  00FBF3  0002               	dw	2
   276  00FBF5  0035               	dw	53
   277  00FBF7  0036               	dw	54
   278  00FBF9  B200               	dw	45568
   279  00FBFB  0002               	dw	2
   280  00FBFD  0035               	dw	53
   281  00FBFF  0036               	dw	54
   282  00FC01  B300               	dw	45824
   283  00FC03  0002               	dw	2
   284  00FC05  0035               	dw	53
   285  00FC07  0036               	dw	54
   286  00FC09  0002               	dw	2
   287  00FC0B  0035               	dw	53
   288  00FC0D  0036               	dw	54
   289  00FC0F  B400               	dw	46080
   290  00FC11  0000               	dw	0
   291  00FC13  C000               	dw	49152
   292  00FC15  00A2               	dw	162
   293  00FC17  0002               	dw	2
   294  00FC19  0084               	dw	132
   295  00FC1B  C100               	dw	49408
   296  00FC1D  00C5               	dw	197
   297  00FC1F  C200               	dw	49664
   298  00FC21  000D               	dw	13
   299  00FC23  0000               	dw	0
   300  00FC25  C300               	dw	49920
   301  00FC27  008D               	dw	141
   302  00FC29  002A               	dw	42
   303  00FC2B  C400               	dw	50176
   304  00FC2D  008D               	dw	141
   305  00FC2F  00EE               	dw	238
   306  00FC31  C500               	dw	50432
   307  00FC33  000A               	dw	10
   308  00FC35  3600               	dw	13824
   309  00FC37  00C8               	dw	200
   310  00FC39  E000               	dw	57344
   311  00FC3B  0012               	dw	18
   312  00FC3D  001C               	dw	28
   313  00FC3F  0010               	dw	16
   314  00FC41  0018               	dw	24
   315  00FC43  0033               	dw	51
   316  00FC45  002C               	dw	44
   317  00FC47  0025               	dw	37
   318  00FC49  0028               	dw	40
   319  00FC4B  0028               	dw	40
   320  00FC4D  0027               	dw	39
   321  00FC4F  002F               	dw	47
   322  00FC51  003C               	dw	60
   323  00FC53  0000               	dw	0
   324  00FC55  0003               	dw	3
   325  00FC57  0003               	dw	3
   326  00FC59  0010               	dw	16
   327  00FC5B  0080               	dw	128
   328  00FC5D  0078               	dw	120
   329  00FC5F  E100               	dw	57600
   330  00FC61  0012               	dw	18
   331  00FC63  001C               	dw	28
   332  00FC65  0010               	dw	16
   333  00FC67  0018               	dw	24
   334  00FC69  002D               	dw	45
   335  00FC6B  0028               	dw	40
   336  00FC6D  0023               	dw	35
   337  00FC6F  0028               	dw	40
   338  00FC71  0028               	dw	40
   339  00FC73  0026               	dw	38
   340  00FC75  002F               	dw	47
   341  00FC77  003B               	dw	59
   342  00FC79  0000               	dw	0
   343  00FC7B  0003               	dw	3
   344  00FC7D  0003               	dw	3
   345  00FC7F  0010               	dw	16
   346  00FC81  3A00               	dw	14848
   347  00FC83  0005               	dw	5
   348  00FC85  2A00               	dw	10752
   349  00FC87  0000               	dw	0
   350  00FC89  0002               	dw	2
   351  00FC8B  0000               	dw	0
   352  00FC8D  0081               	dw	129
   353  00FC8F  2B00               	dw	11008
   354  00FC91  0000               	dw	0
   355  00FC93  0003               	dw	3
   356  00FC95  0000               	dw	0
   357  00FC97  00A2               	dw	162
   358  00FC99  2900               	dw	10496
   359  00FC9B  2C00               	dw	11264
   360  00FC9D                     __end_of_InitList:
   361                           	opt stack 0
   362  00FC9D                     Timer0_Init@PRESCALE:
   363                           	opt stack 0
   364  00FC9D  0002               	dw	2
   365  00FC9F  0004               	dw	4
   366  00FCA1  0008               	dw	8
   367  00FCA3  0010               	dw	16
   368  00FCA5  0020               	dw	32
   369  00FCA7  0040               	dw	64
   370  00FCA9  0080               	dw	128
   371  00FCAB  0100               	dw	256
   372  00FCAD                     __end_ofTimer0_Init@PRESCALE:
   373                           	opt stack 0
   374  00FCAD                     PortProperty_Valid@F6830:
   375                           	opt stack 0
   376  00FCAD  00                 	db	0
   377  00FCAE  01                 	db	1
   378  00FCAF  02                 	db	2
   379  00FCB0  00                 	db	0
   380  00FCB1  01                 	db	1
   381  00FCB2  00                 	db	0
   382  00FCB3  01                 	db	1
   383  00FCB4  00                 	db	0
   384  00FCB5  02                 	db	2
   385  00FCB6  02                 	db	2
   386  00FCB7  00                 	db	0
   387  00FCB8  00                 	db	0
   388  00FCB9  03                 	db	3
   389  00FCBA  03                 	db	3
   390  00FCBB  03                 	db	3
   391  00FCBC  00                 	db	0
   392  00FCBD                     __end_ofPortProperty_Valid@F6830:
   393                           	opt stack 0
   394  00FCBD                     _dpowers:
   395                           	opt stack 0
   396  00FCBD  0001               	dw	1
   397  00FCBF  000A               	dw	10
   398  00FCC1  0064               	dw	100
   399  00FCC3  03E8               	dw	1000
   400  00FCC5  2710               	dw	10000
   401  00FCC7                     __end_of_dpowers:
   402                           	opt stack 0
   403  00FCC7                     _MASKS:
   404                           	opt stack 0
   405  00FCC7  00                 	db	0
   406  00FCC8  01                 	db	1
   407  00FCC9  03                 	db	3
   408  00FCCA  07                 	db	7
   409  00FCCB  0F                 	db	15
   410  00FCCC  1F                 	db	31
   411  00FCCD  3F                 	db	63
   412  00FCCE  7F                 	db	127
   413  00FCCF  FF                 	db	255
   414  00FCD0                     __end_of_MASKS:
   415                           	opt stack 0
   416  00FCD0                     HMI_SetButton@F7213:
   417                           	opt stack 0
   418  00FCD0  00                 	db	0
   419  00FCD1  02                 	db	2
   420  00FCD2  01                 	db	1
   421  00FCD3  03                 	db	3
   422  00FCD4                     __end_ofHMI_SetButton@F7213:
   423                           	opt stack 0
   424  00FCD4                     Timer2_Init@PRESCALE:
   425                           	opt stack 0
   426  00FCD4  01                 	db	1
   427  00FCD5  04                 	db	4
   428  00FCD6  10                 	db	16
   429  00FCD7                     __end_ofTimer2_Init@PRESCALE:
   430                           	opt stack 0
   431  00FCD7                     _Font5x7:
   432                           	opt stack 0
   433  00FCD7  00                 	db	0
   434  00FCD8  00                 	db	0
   435  00FCD9  00                 	db	0
   436  00FCDA  00                 	db	0
   437  00FCDB  00                 	db	0
   438  00FCDC  00                 	db	0
   439  00FCDD  00                 	db	0
   440  00FCDE  5F                 	db	95
   441  00FCDF  00                 	db	0
   442  00FCE0  00                 	db	0
   443  00FCE1  00                 	db	0
   444  00FCE2  07                 	db	7
   445  00FCE3  00                 	db	0
   446  00FCE4  07                 	db	7
   447  00FCE5  00                 	db	0
   448  00FCE6  14                 	db	20
   449  00FCE7  7F                 	db	127
   450  00FCE8  14                 	db	20
   451  00FCE9  7F                 	db	127
   452  00FCEA  14                 	db	20
   453  00FCEB  24                 	db	36
   454  00FCEC  2A                 	db	42
   455  00FCED  7F                 	db	127
   456  00FCEE  2A                 	db	42
   457  00FCEF  12                 	db	18
   458  00FCF0  23                 	db	35
   459  00FCF1  13                 	db	19
   460  00FCF2  08                 	db	8
   461  00FCF3  64                 	db	100
   462  00FCF4  62                 	db	98
   463  00FCF5  36                 	db	54
   464  00FCF6  49                 	db	73
   465  00FCF7  55                 	db	85
   466  00FCF8  22                 	db	34
   467  00FCF9  50                 	db	80
   468  00FCFA  00                 	db	0
   469  00FCFB  05                 	db	5
   470  00FCFC  03                 	db	3
   471  00FCFD  00                 	db	0
   472  00FCFE  00                 	db	0
   473  00FCFF  00                 	db	0
   474  00FD00  1C                 	db	28
   475  00FD01  22                 	db	34
   476  00FD02  41                 	db	65
   477  00FD03  00                 	db	0
   478  00FD04  00                 	db	0
   479  00FD05  41                 	db	65
   480  00FD06  22                 	db	34
   481  00FD07  1C                 	db	28
   482  00FD08  00                 	db	0
   483  00FD09  08                 	db	8
   484  00FD0A  2A                 	db	42
   485  00FD0B  1C                 	db	28
   486  00FD0C  2A                 	db	42
   487  00FD0D  08                 	db	8
   488  00FD0E  08                 	db	8
   489  00FD0F  08                 	db	8
   490  00FD10  3E                 	db	62
   491  00FD11  08                 	db	8
   492  00FD12  08                 	db	8
   493  00FD13  00                 	db	0
   494  00FD14  50                 	db	80
   495  00FD15  30                 	db	48
   496  00FD16  00                 	db	0
   497  00FD17  00                 	db	0
   498  00FD18  08                 	db	8
   499  00FD19  08                 	db	8
   500  00FD1A  08                 	db	8
   501  00FD1B  08                 	db	8
   502  00FD1C  08                 	db	8
   503  00FD1D  00                 	db	0
   504  00FD1E  60                 	db	96
   505  00FD1F  60                 	db	96
   506  00FD20  00                 	db	0
   507  00FD21  00                 	db	0
   508  00FD22  20                 	db	32
   509  00FD23  10                 	db	16
   510  00FD24  08                 	db	8
   511  00FD25  04                 	db	4
   512  00FD26  02                 	db	2
   513  00FD27  3E                 	db	62
   514  00FD28  51                 	db	81
   515  00FD29  49                 	db	73
   516  00FD2A  45                 	db	69
   517  00FD2B  3E                 	db	62
   518  00FD2C  00                 	db	0
   519  00FD2D  42                 	db	66
   520  00FD2E  7F                 	db	127
   521  00FD2F  40                 	db	64
   522  00FD30  00                 	db	0
   523  00FD31  42                 	db	66
   524  00FD32  61                 	db	97
   525  00FD33  51                 	db	81
   526  00FD34  49                 	db	73
   527  00FD35  46                 	db	70
   528  00FD36  21                 	db	33
   529  00FD37  41                 	db	65
   530  00FD38  45                 	db	69
   531  00FD39  4B                 	db	75
   532  00FD3A  31                 	db	49
   533  00FD3B  18                 	db	24
   534  00FD3C  14                 	db	20
   535  00FD3D  12                 	db	18
   536  00FD3E  7F                 	db	127
   537  00FD3F  10                 	db	16
   538  00FD40  27                 	db	39
   539  00FD41  45                 	db	69
   540  00FD42  45                 	db	69
   541  00FD43  45                 	db	69
   542  00FD44  39                 	db	57
   543  00FD45  3C                 	db	60
   544  00FD46  4A                 	db	74
   545  00FD47  49                 	db	73
   546  00FD48  49                 	db	73
   547  00FD49  30                 	db	48
   548  00FD4A  01                 	db	1
   549  00FD4B  71                 	db	113
   550  00FD4C  09                 	db	9
   551  00FD4D  05                 	db	5
   552  00FD4E  03                 	db	3
   553  00FD4F  36                 	db	54
   554  00FD50  49                 	db	73
   555  00FD51  49                 	db	73
   556  00FD52  49                 	db	73
   557  00FD53  36                 	db	54
   558  00FD54  06                 	db	6
   559  00FD55  49                 	db	73
   560  00FD56  49                 	db	73
   561  00FD57  29                 	db	41
   562  00FD58  1E                 	db	30
   563  00FD59  00                 	db	0
   564  00FD5A  36                 	db	54
   565  00FD5B  36                 	db	54
   566  00FD5C  00                 	db	0
   567  00FD5D  00                 	db	0
   568  00FD5E  00                 	db	0
   569  00FD5F  56                 	db	86
   570  00FD60  36                 	db	54
   571  00FD61  00                 	db	0
   572  00FD62  00                 	db	0
   573  00FD63  00                 	db	0
   574  00FD64  08                 	db	8
   575  00FD65  14                 	db	20
   576  00FD66  22                 	db	34
   577  00FD67  41                 	db	65
   578  00FD68  14                 	db	20
   579  00FD69  14                 	db	20
   580  00FD6A  14                 	db	20
   581  00FD6B  14                 	db	20
   582  00FD6C  14                 	db	20
   583  00FD6D  41                 	db	65
   584  00FD6E  22                 	db	34
   585  00FD6F  14                 	db	20
   586  00FD70  08                 	db	8
   587  00FD71  00                 	db	0
   588  00FD72  02                 	db	2
   589  00FD73  01                 	db	1
   590  00FD74  51                 	db	81
   591  00FD75  09                 	db	9
   592  00FD76  06                 	db	6
   593  00FD77  32                 	db	50
   594  00FD78  49                 	db	73
   595  00FD79  79                 	db	121
   596  00FD7A  41                 	db	65
   597  00FD7B  3E                 	db	62
   598  00FD7C  7E                 	db	126
   599  00FD7D  11                 	db	17
   600  00FD7E  11                 	db	17
   601  00FD7F  11                 	db	17
   602  00FD80  7E                 	db	126
   603  00FD81  7F                 	db	127
   604  00FD82  49                 	db	73
   605  00FD83  49                 	db	73
   606  00FD84  49                 	db	73
   607  00FD85  36                 	db	54
   608  00FD86  3E                 	db	62
   609  00FD87  41                 	db	65
   610  00FD88  41                 	db	65
   611  00FD89  41                 	db	65
   612  00FD8A  22                 	db	34
   613  00FD8B  7F                 	db	127
   614  00FD8C  41                 	db	65
   615  00FD8D  41                 	db	65
   616  00FD8E  22                 	db	34
   617  00FD8F  1C                 	db	28
   618  00FD90  7F                 	db	127
   619  00FD91  49                 	db	73
   620  00FD92  49                 	db	73
   621  00FD93  49                 	db	73
   622  00FD94  41                 	db	65
   623  00FD95  7F                 	db	127
   624  00FD96  09                 	db	9
   625  00FD97  09                 	db	9
   626  00FD98  01                 	db	1
   627  00FD99  01                 	db	1
   628  00FD9A  3E                 	db	62
   629  00FD9B  41                 	db	65
   630  00FD9C  41                 	db	65
   631  00FD9D  51                 	db	81
   632  00FD9E  32                 	db	50
   633  00FD9F  7F                 	db	127
   634  00FDA0  08                 	db	8
   635  00FDA1  08                 	db	8
   636  00FDA2  08                 	db	8
   637  00FDA3  7F                 	db	127
   638  00FDA4  00                 	db	0
   639  00FDA5  41                 	db	65
   640  00FDA6  7F                 	db	127
   641  00FDA7  41                 	db	65
   642  00FDA8  00                 	db	0
   643  00FDA9  20                 	db	32
   644  00FDAA  40                 	db	64
   645  00FDAB  41                 	db	65
   646  00FDAC  3F                 	db	63
   647  00FDAD  01                 	db	1
   648  00FDAE  7F                 	db	127
   649  00FDAF  08                 	db	8
   650  00FDB0  14                 	db	20
   651  00FDB1  22                 	db	34
   652  00FDB2  41                 	db	65
   653  00FDB3  7F                 	db	127
   654  00FDB4  40                 	db	64
   655  00FDB5  40                 	db	64
   656  00FDB6  40                 	db	64
   657  00FDB7  40                 	db	64
   658  00FDB8  7F                 	db	127
   659  00FDB9  02                 	db	2
   660  00FDBA  04                 	db	4
   661  00FDBB  02                 	db	2
   662  00FDBC  7F                 	db	127
   663  00FDBD  7F                 	db	127
   664  00FDBE  04                 	db	4
   665  00FDBF  08                 	db	8
   666  00FDC0  10                 	db	16
   667  00FDC1  7F                 	db	127
   668  00FDC2  3E                 	db	62
   669  00FDC3  41                 	db	65
   670  00FDC4  41                 	db	65
   671  00FDC5  41                 	db	65
   672  00FDC6  3E                 	db	62
   673  00FDC7  7F                 	db	127
   674  00FDC8  09                 	db	9
   675  00FDC9  09                 	db	9
   676  00FDCA  09                 	db	9
   677  00FDCB  06                 	db	6
   678  00FDCC  3E                 	db	62
   679  00FDCD  41                 	db	65
   680  00FDCE  51                 	db	81
   681  00FDCF  21                 	db	33
   682  00FDD0  5E                 	db	94
   683  00FDD1  7F                 	db	127
   684  00FDD2  09                 	db	9
   685  00FDD3  19                 	db	25
   686  00FDD4  29                 	db	41
   687  00FDD5  46                 	db	70
   688  00FDD6  46                 	db	70
   689  00FDD7  49                 	db	73
   690  00FDD8  49                 	db	73
   691  00FDD9  49                 	db	73
   692  00FDDA  31                 	db	49
   693  00FDDB  01                 	db	1
   694  00FDDC  01                 	db	1
   695  00FDDD  7F                 	db	127
   696  00FDDE  01                 	db	1
   697  00FDDF  01                 	db	1
   698  00FDE0  3F                 	db	63
   699  00FDE1  40                 	db	64
   700  00FDE2  40                 	db	64
   701  00FDE3  40                 	db	64
   702  00FDE4  3F                 	db	63
   703  00FDE5  1F                 	db	31
   704  00FDE6  20                 	db	32
   705  00FDE7  40                 	db	64
   706  00FDE8  20                 	db	32
   707  00FDE9  1F                 	db	31
   708  00FDEA  7F                 	db	127
   709  00FDEB  20                 	db	32
   710  00FDEC  18                 	db	24
   711  00FDED  20                 	db	32
   712  00FDEE  7F                 	db	127
   713  00FDEF  63                 	db	99
   714  00FDF0  14                 	db	20
   715  00FDF1  08                 	db	8
   716  00FDF2  14                 	db	20
   717  00FDF3  63                 	db	99
   718  00FDF4  03                 	db	3
   719  00FDF5  04                 	db	4
   720  00FDF6  78                 	db	120
   721  00FDF7  04                 	db	4
   722  00FDF8  03                 	db	3
   723  00FDF9  61                 	db	97
   724  00FDFA  51                 	db	81
   725  00FDFB  49                 	db	73
   726  00FDFC  45                 	db	69
   727  00FDFD  43                 	db	67
   728  00FDFE  00                 	db	0
   729  00FDFF  00                 	db	0
   730  00FE00  7F                 	db	127
   731  00FE01  41                 	db	65
   732  00FE02  41                 	db	65
   733  00FE03  02                 	db	2
   734  00FE04  04                 	db	4
   735  00FE05  08                 	db	8
   736  00FE06  10                 	db	16
   737  00FE07  20                 	db	32
   738  00FE08  41                 	db	65
   739  00FE09  41                 	db	65
   740  00FE0A  7F                 	db	127
   741  00FE0B  00                 	db	0
   742  00FE0C  00                 	db	0
   743  00FE0D  04                 	db	4
   744  00FE0E  02                 	db	2
   745  00FE0F  01                 	db	1
   746  00FE10  02                 	db	2
   747  00FE11  04                 	db	4
   748  00FE12  40                 	db	64
   749  00FE13  40                 	db	64
   750  00FE14  40                 	db	64
   751  00FE15  40                 	db	64
   752  00FE16  40                 	db	64
   753  00FE17  00                 	db	0
   754  00FE18  01                 	db	1
   755  00FE19  02                 	db	2
   756  00FE1A  04                 	db	4
   757  00FE1B  00                 	db	0
   758  00FE1C  20                 	db	32
   759  00FE1D  54                 	db	84
   760  00FE1E  54                 	db	84
   761  00FE1F  54                 	db	84
   762  00FE20  78                 	db	120
   763  00FE21  7F                 	db	127
   764  00FE22  48                 	db	72
   765  00FE23  44                 	db	68
   766  00FE24  44                 	db	68
   767  00FE25  38                 	db	56
   768  00FE26  38                 	db	56
   769  00FE27  44                 	db	68
   770  00FE28  44                 	db	68
   771  00FE29  44                 	db	68
   772  00FE2A  20                 	db	32
   773  00FE2B  38                 	db	56
   774  00FE2C  44                 	db	68
   775  00FE2D  44                 	db	68
   776  00FE2E  48                 	db	72
   777  00FE2F  7F                 	db	127
   778  00FE30  38                 	db	56
   779  00FE31  54                 	db	84
   780  00FE32  54                 	db	84
   781  00FE33  54                 	db	84
   782  00FE34  18                 	db	24
   783  00FE35  08                 	db	8
   784  00FE36  7E                 	db	126
   785  00FE37  09                 	db	9
   786  00FE38  01                 	db	1
   787  00FE39  02                 	db	2
   788  00FE3A  08                 	db	8
   789  00FE3B  14                 	db	20
   790  00FE3C  54                 	db	84
   791  00FE3D  54                 	db	84
   792  00FE3E  3C                 	db	60
   793  00FE3F  7F                 	db	127
   794  00FE40  08                 	db	8
   795  00FE41  04                 	db	4
   796  00FE42  04                 	db	4
   797  00FE43  78                 	db	120
   798  00FE44  00                 	db	0
   799  00FE45  44                 	db	68
   800  00FE46  7D                 	db	125
   801  00FE47  40                 	db	64
   802  00FE48  00                 	db	0
   803  00FE49  20                 	db	32
   804  00FE4A  40                 	db	64
   805  00FE4B  44                 	db	68
   806  00FE4C  3D                 	db	61
   807  00FE4D  00                 	db	0
   808  00FE4E  00                 	db	0
   809  00FE4F  7F                 	db	127
   810  00FE50  10                 	db	16
   811  00FE51  28                 	db	40
   812  00FE52  44                 	db	68
   813  00FE53  00                 	db	0
   814  00FE54  41                 	db	65
   815  00FE55  7F                 	db	127
   816  00FE56  40                 	db	64
   817  00FE57  00                 	db	0
   818  00FE58  7C                 	db	124
   819  00FE59  04                 	db	4
   820  00FE5A  18                 	db	24
   821  00FE5B  04                 	db	4
   822  00FE5C  78                 	db	120
   823  00FE5D  7C                 	db	124
   824  00FE5E  08                 	db	8
   825  00FE5F  04                 	db	4
   826  00FE60  04                 	db	4
   827  00FE61  78                 	db	120
   828  00FE62  38                 	db	56
   829  00FE63  44                 	db	68
   830  00FE64  44                 	db	68
   831  00FE65  44                 	db	68
   832  00FE66  38                 	db	56
   833  00FE67  7C                 	db	124
   834  00FE68  14                 	db	20
   835  00FE69  14                 	db	20
   836  00FE6A  14                 	db	20
   837  00FE6B  08                 	db	8
   838  00FE6C  08                 	db	8
   839  00FE6D  14                 	db	20
   840  00FE6E  14                 	db	20
   841  00FE6F  18                 	db	24
   842  00FE70  7C                 	db	124
   843  00FE71  7C                 	db	124
   844  00FE72  08                 	db	8
   845  00FE73  04                 	db	4
   846  00FE74  04                 	db	4
   847  00FE75  08                 	db	8
   848  00FE76  48                 	db	72
   849  00FE77  54                 	db	84
   850  00FE78  54                 	db	84
   851  00FE79  54                 	db	84
   852  00FE7A  20                 	db	32
   853  00FE7B  04                 	db	4
   854  00FE7C  3F                 	db	63
   855  00FE7D  44                 	db	68
   856  00FE7E  40                 	db	64
   857  00FE7F  20                 	db	32
   858  00FE80  3C                 	db	60
   859  00FE81  40                 	db	64
   860  00FE82  40                 	db	64
   861  00FE83  20                 	db	32
   862  00FE84  7C                 	db	124
   863  00FE85  1C                 	db	28
   864  00FE86  20                 	db	32
   865  00FE87  40                 	db	64
   866  00FE88  20                 	db	32
   867  00FE89  1C                 	db	28
   868  00FE8A  3C                 	db	60
   869  00FE8B  40                 	db	64
   870  00FE8C  30                 	db	48
   871  00FE8D  40                 	db	64
   872  00FE8E  3C                 	db	60
   873  00FE8F  44                 	db	68
   874  00FE90  28                 	db	40
   875  00FE91  10                 	db	16
   876  00FE92  28                 	db	40
   877  00FE93  44                 	db	68
   878  00FE94  0C                 	db	12
   879  00FE95  50                 	db	80
   880  00FE96  50                 	db	80
   881  00FE97  50                 	db	80
   882  00FE98  3C                 	db	60
   883  00FE99  44                 	db	68
   884  00FE9A  64                 	db	100
   885  00FE9B  54                 	db	84
   886  00FE9C  4C                 	db	76
   887  00FE9D  44                 	db	68
   888  00FE9E  00                 	db	0
   889  00FE9F  08                 	db	8
   890  00FEA0  36                 	db	54
   891  00FEA1  41                 	db	65
   892  00FEA2  00                 	db	0
   893  00FEA3  00                 	db	0
   894  00FEA4  00                 	db	0
   895  00FEA5  7F                 	db	127
   896  00FEA6  00                 	db	0
   897  00FEA7  00                 	db	0
   898  00FEA8  00                 	db	0
   899  00FEA9  41                 	db	65
   900  00FEAA  36                 	db	54
   901  00FEAB  08                 	db	8
   902  00FEAC  00                 	db	0
   903  00FEAD  08                 	db	8
   904  00FEAE  08                 	db	8
   905  00FEAF  2A                 	db	42
   906  00FEB0  1C                 	db	28
   907  00FEB1  08                 	db	8
   908  00FEB2  08                 	db	8
   909  00FEB3  1C                 	db	28
   910  00FEB4  2A                 	db	42
   911  00FEB5  08                 	db	8
   912  00FEB6  08                 	db	8
   913  00FEB7                     __end_of_Font5x7:
   914                           	opt stack 0
   915  00FEB7                     exp@coeff:
   916                           	opt stack 0
   917  00FEB7  0000               	dw	0
   918  00FEB9  3F80               	dw	16256
   919  00FEBB  7218               	dw	29208
   920  00FEBD  3F31               	dw	16177
   921  00FEBF  FDF0               	dw	65008
   922  00FEC1  3E75               	dw	15989
   923  00FEC3  5847               	dw	22599
   924  00FEC5  3D63               	dw	15715
   925  00FEC7  9558               	dw	38232
   926  00FEC9  3C1D               	dw	15389
   927  00FECB  C482               	dw	50306
   928  00FECD  3AAE               	dw	15022
   929  00FECF  78A8               	dw	30888
   930  00FED1  3921               	dw	14625
   931  00FED3  93EF               	dw	37871
   932  00FED5  3780               	dw	14208
   933  00FED7  92A0               	dw	37536
   934  00FED9  35A7               	dw	13735
   935  00FEDB  5646               	dw	22086
   936  00FEDD  3415               	dw	13333
   937  00FEDF                     __end_ofexp@coeff:
   938                           	opt stack 0
   939  00FEDF                     log@coeff:
   940                           	opt stack 0
   941  00FEDF  0000               	dw	0
   942  00FEE1  0000               	dw	0
   943  00FEE3  FFC4               	dw	65476
   944  00FEE5  3F7F               	dw	16255
   945  00FEE7  EF80               	dw	61312
   946  00FEE9  BEFF               	dw	48895
   947  00FEEB  E190               	dw	57744
   948  00FEED  3EA9               	dw	16041
   949  00FEEF  82EC               	dw	33516
   950  00FEF1  BE76               	dw	48758
   951  00FEF3  AD82               	dw	44418
   952  00FEF5  3E2B               	dw	15915
   953  00FEF7  3C0E               	dw	15374
   954  00FEF9  BDC3               	dw	48579
   955  00FEFB  D187               	dw	53639
   956  00FEFD  3D13               	dw	15635
   957  00FEFF  7841               	dw	30785
   958  00FF01  BBD3               	dw	48083
   959  00FF03                     __end_oflog@coeff:
   960                           	opt stack 0
   961  00FF03                     _PortG_Property:
   962                           	opt stack 0
   963  00FF03  FC00               	dw	64512
   964  00FF05                     __end_of_PortG_Property:
   965                           	opt stack 0
   966  00FF05                     _PortF_Property:
   967                           	opt stack 0
   968  00FF05  0FFF               	dw	4095
   969  00FF07                     __end_of_PortF_Property:
   970                           	opt stack 0
   971  00FF07                     _PortE_Property:
   972                           	opt stack 0
   973  00FF07  0000               	dw	0
   974  00FF09                     __end_of_PortE_Property:
   975                           	opt stack 0
   976  00FF09                     _PortD_Property:
   977                           	opt stack 0
   978  00FF09  FFFF               	dw	65535
   979  00FF0B                     __end_of_PortD_Property:
   980                           	opt stack 0
   981  00FF0B                     _PortC_Property:
   982                           	opt stack 0
   983  00FF0B  FFF0               	dw	65520
   984  00FF0D                     __end_of_PortC_Property:
   985                           	opt stack 0
   986  00FF0D                     _PortB_Property:
   987                           	opt stack 0
   988  00FF0D  FF00               	dw	65280
   989  00FF0F                     __end_of_PortB_Property:
   990                           	opt stack 0
   991  00FF0F                     _PortA_Property:
   992                           	opt stack 0
   993  00FF0F  00FF               	dw	255
   994  00FF11                     __end_of_PortA_Property:
   995                           	opt stack 0
   996  0000                     _ADRES	set	4035
   997  0000                     _TMR0	set	4054
   998  0000                     _RCREG1	set	4015
   999  0000                     _TXREG1	set	4014
  1000  0000                     _SPBRG1	set	4016
  1001  0000                     _TXSTA1bits	set	4013
  1002  0000                     _BAUDCON1bits	set	3966
  1003  0000                     _RCSTA1	set	4012
  1004  0000                     _TXSTA1	set	4013
  1005  0000                     _TRISCbits	set	3988
  1006  0000                     _ADCON0	set	4034
  1007  0000                     _ADCON1	set	4033
  1008  0000                     _PR2	set	4043
  1009  0000                     _T2CONbits	set	4042
  1010  0000                     _T0CONbits	set	4053
  1011  0000                     _RCONbits	set	4048
  1012  0000                     _OSCTUNEbits	set	3995
  1013  0000                     _PIR3	set	4004
  1014  0000                     _PIR2	set	4001
  1015  0000                     _PIR1	set	3998
  1016  0000                     _INTCONbits	set	4082
  1017  0000                     _SSP2CON2bits	set	3947
  1018  0000                     _SSP1CON2bits	set	4037
  1019  0000                     _SSP1ADD	set	4040
  1020  0000                     _ANCON0	set	4033
  1021  0000                     _ADRESL	set	4035
  1022  0000                     _ADRESH	set	4036
  1023  0000                     _ADCON1bits	set	4033
  1024  0000                     _ADCON0bits	set	4034
  1025  0000                     _SSP2CON1bits	set	3948
  1026  0000                     _SSP1CON1bits	set	4038
  1027  0000                     _SSP2STATbits	set	3949
  1028  0000                     _SSP1STATbits	set	4039
  1029  0000                     _PIE3bits	set	4003
  1030  0000                     _PIE1bits	set	3997
  1031  0000                     _PIR3bits	set	4004
  1032  0000                     _PIR1bits	set	3998
  1033  0000                     _IPR3bits	set	4005
  1034  0000                     _IPR1bits	set	3999
  1035  0000                     _PORTFbits	set	3973
  1036  0000                     _SSP2CON2	set	3947
  1037  0000                     _SSP1CON2	set	4037
  1038  0000                     _SSP2BUF	set	3951
  1039  0000                     _SSP2CON1	set	3948
  1040  0000                     _SSP2STAT	set	3949
  1041  0000                     _SSP1BUF	set	4041
  1042  0000                     _SSP1CON1	set	4038
  1043  0000                     _SSP1STAT	set	4039
  1044  0000                     _LATG	set	3983
  1045  0000                     _LATF	set	3982
  1046  0000                     _LATE	set	3981
  1047  0000                     _LATD	set	3980
  1048  0000                     _LATC	set	3979
  1049  0000                     _LATB	set	3978
  1050  0000                     _LATA	set	3977
  1051  0000                     _TRISG	set	3992
  1052  0000                     _TRISF	set	3991
  1053  0000                     _TRISE	set	3990
  1054  0000                     _TRISD	set	3989
  1055  0000                     _TRISC	set	3988
  1056  0000                     _TRISB	set	3987
  1057  0000                     _TRISA	set	3986
  1058  0000                     _PORTG	set	3974
  1059  0000                     _PORTF	set	3973
  1060  0000                     _PORTE	set	3972
  1061  0000                     _PORTD	set	3971
  1062  0000                     _PORTC	set	3970
  1063  0000                     _PORTB	set	3969
  1064  0000                     _PORTA	set	3968
  1065  0000                     _RA3	set	31747
  1066  0000                     _RA2	set	31746
  1067  0000                     _RD7	set	31775
  1068  0000                     _RD5	set	31773
  1069  0000                     _TRISD7	set	31919
  1070  0000                     _TRISD5	set	31917
  1071  0000                     _TRISA3	set	31891
  1072  0000                     _TRISA2	set	31890
  1073  0000                     _GODONE	set	32273
  1074  0000                     _ADON	set	32272
  1075  00FF11  43                 	db	67	;'C'
  1076  00FF12  6F                 	db	111	;'o'
  1077  00FF13  75                 	db	117	;'u'
  1078  00FF14  6C                 	db	108	;'l'
  1079  00FF15  64                 	db	100	;'d'
  1080  00FF16  20                 	db	32
  1081  00FF17  6E                 	db	110	;'n'
  1082  00FF18  6F                 	db	111	;'o'
  1083  00FF19  74                 	db	116	;'t'
  1084  00FF1A  20                 	db	32
  1085  00FF1B  72                 	db	114	;'r'
  1086  00FF1C  65                 	db	101	;'e'
  1087  00FF1D  74                 	db	116	;'t'
  1088  00FF1E  72                 	db	114	;'r'
  1089  00FF1F  69                 	db	105	;'i'
  1090  00FF20  65                 	db	101	;'e'
  1091  00FF21  76                 	db	118	;'v'
  1092  00FF22  65                 	db	101	;'e'
  1093  00FF23  20                 	db	32
  1094  00FF24  64                 	db	100	;'d'
  1095  00FF25  61                 	db	97	;'a'
  1096  00FF26  74                 	db	116	;'t'
  1097  00FF27  61                 	db	97	;'a'
  1098  00FF28  2C                 	db	44
  1099  00FF29  20                 	db	32
  1100  00FF2A  53                 	db	83	;'S'
  1101  00FF2B  74                 	db	116	;'t'
  1102  00FF2C  61                 	db	97	;'a'
  1103  00FF2D  63                 	db	99	;'c'
  1104  00FF2E  6B                 	db	107	;'k'
  1105  00FF2F  20                 	db	32
  1106  00FF30  69                 	db	105	;'i'
  1107  00FF31  73                 	db	115	;'s'
  1108  00FF32  20                 	db	32
  1109  00FF33  65                 	db	101	;'e'
  1110  00FF34  6D                 	db	109	;'m'
  1111  00FF35  70                 	db	112	;'p'
  1112  00FF36  74                 	db	116	;'t'
  1113  00FF37  79                 	db	121	;'y'
  1114  00FF38  2E                 	db	46
  1115  00FF39  0A                 	db	10
  1116  00FF3A  00                 	db	0
  1117  00FF3B  43                 	db	67	;'C'
  1118  00FF3C  6F                 	db	111	;'o'
  1119  00FF3D  75                 	db	117	;'u'
  1120  00FF3E  6C                 	db	108	;'l'
  1121  00FF3F  64                 	db	100	;'d'
  1122  00FF40  20                 	db	32
  1123  00FF41  6E                 	db	110	;'n'
  1124  00FF42  6F                 	db	111	;'o'
  1125  00FF43  74                 	db	116	;'t'
  1126  00FF44  20                 	db	32
  1127  00FF45  69                 	db	105	;'i'
  1128  00FF46  6E                 	db	110	;'n'
  1129  00FF47  73                 	db	115	;'s'
  1130  00FF48  65                 	db	101	;'e'
  1131  00FF49  72                 	db	114	;'r'
  1132  00FF4A  74                 	db	116	;'t'
  1133  00FF4B  20                 	db	32
  1134  00FF4C  64                 	db	100	;'d'
  1135  00FF4D  61                 	db	97	;'a'
  1136  00FF4E  74                 	db	116	;'t'
  1137  00FF4F  61                 	db	97	;'a'
  1138  00FF50  2C                 	db	44
  1139  00FF51  20                 	db	32
  1140  00FF52  53                 	db	83	;'S'
  1141  00FF53  74                 	db	116	;'t'
  1142  00FF54  61                 	db	97	;'a'
  1143  00FF55  63                 	db	99	;'c'
  1144  00FF56  6B                 	db	107	;'k'
  1145  00FF57  20                 	db	32
  1146  00FF58  69                 	db	105	;'i'
  1147  00FF59  73                 	db	115	;'s'
  1148  00FF5A  20                 	db	32
  1149  00FF5B  66                 	db	102	;'f'
  1150  00FF5C  75                 	db	117	;'u'
  1151  00FF5D  6C                 	db	108	;'l'
  1152  00FF5E  6C                 	db	108	;'l'
  1153  00FF5F  2E                 	db	46
  1154  00FF60  0A                 	db	10
  1155  00FF61  00                 	db	0
  1156  00FF62                     STR_13:
  1157  00FF62  0A                 	db	10
  1158  00FF63  54                 	db	84	;'T'
  1159  00FF64  68                 	db	104	;'h'
  1160  00FF65  65                 	db	101	;'e'
  1161  00FF66  20                 	db	32
  1162  00FF67  43                 	db	67	;'C'
  1163  00FF68  6C                 	db	108	;'l'
  1164  00FF69  6F                 	db	111	;'o'
  1165  00FF6A  73                 	db	115	;'s'
  1166  00FF6B  65                 	db	101	;'e'
  1167  00FF6C  73                 	db	115	;'s'
  1168  00FF6D  20                 	db	32
  1169  00FF6E  6F                 	db	111	;'o'
  1170  00FF6F  62                 	db	98	;'b'
  1171  00FF70  6A                 	db	106	;'j'
  1172  00FF71  65                 	db	101	;'e'
  1173  00FF72  63                 	db	99	;'c'
  1174  00FF73  74                 	db	116	;'t'
  1175  00FF74  20                 	db	32
  1176  00FF75  28                 	db	40
  1177  00FF76  6D                 	db	109	;'m'
  1178  00FF77  6D                 	db	109	;'m'
  1179  00FF78  29                 	db	41
  1180  00FF79  3A                 	db	58	;':'
  1181  00FF7A  20                 	db	32
  1182  00FF7B  25                 	db	37
  1183  00FF7C  64                 	db	100	;'d'
  1184  00FF7D  00                 	db	0
  1185  00FF7E  0A                 	db	10
  1186  00FF7F  53                 	db	83	;'S'
  1187  00FF80  74                 	db	116	;'t'
  1188  00FF81  65                 	db	101	;'e'
  1189  00FF82  70                 	db	112	;'p'
  1190  00FF83  73                 	db	115	;'s'
  1191  00FF84  20                 	db	32
  1192  00FF85  54                 	db	84	;'T'
  1193  00FF86  72                 	db	114	;'r'
  1194  00FF87  61                 	db	97	;'a'
  1195  00FF88  76                 	db	118	;'v'
  1196  00FF89  65                 	db	101	;'e'
  1197  00FF8A  6C                 	db	108	;'l'
  1198  00FF8B  6C                 	db	108	;'l'
  1199  00FF8C  65                 	db	101	;'e'
  1200  00FF8D  64                 	db	100	;'d'
  1201  00FF8E  3A                 	db	58	;':'
  1202  00FF8F  20                 	db	32
  1203  00FF90  25                 	db	37
  1204  00FF91  64                 	db	100	;'d'
  1205  00FF92  00                 	db	0
  1206  00FF93                     STR_12:
  1207  00FF93  53                 	db	83	;'S'
  1208  00FF94  74                 	db	116	;'t'
  1209  00FF95  65                 	db	101	;'e'
  1210  00FF96  70                 	db	112	;'p'
  1211  00FF97  70                 	db	112	;'p'
  1212  00FF98  65                 	db	101	;'e'
  1213  00FF99  64                 	db	100	;'d'
  1214  00FF9A  20                 	db	32
  1215  00FF9B  33                 	db	51	;'3'
  1216  00FF9C  36                 	db	54	;'6'
  1217  00FF9D  30                 	db	48	;'0'
  1218  00FF9E  20                 	db	32
  1219  00FF9F  64                 	db	100	;'d'
  1220  00FFA0  65                 	db	101	;'e'
  1221  00FFA1  67                 	db	103	;'g'
  1222  00FFA2  72                 	db	114	;'r'
  1223  00FFA3  65                 	db	101	;'e'
  1224  00FFA4  65                 	db	101	;'e'
  1225  00FFA5  73                 	db	115	;'s'
  1226  00FFA6  00                 	db	0
  1227  00FFA7                     STR_2:
  1228  00FFA7  20                 	db	32
  1229  00FFA8  20                 	db	32
  1230  00FFA9  20                 	db	32
  1231  00FFAA  20                 	db	32
  1232  00FFAB  20                 	db	32
  1233  00FFAC  20                 	db	32
  1234  00FFAD  20                 	db	32
  1235  00FFAE  20                 	db	32
  1236  00FFAF  20                 	db	32
  1237  00FFB0  20                 	db	32
  1238  00FFB1  20                 	db	32
  1239  00FFB2  20                 	db	32
  1240  00FFB3  20                 	db	32
  1241  00FFB4  20                 	db	32
  1242  00FFB5  20                 	db	32
  1243  00FFB6  20                 	db	32
  1244  00FFB7  20                 	db	32
  1245  00FFB8  0A                 	db	10
  1246  00FFB9  00                 	db	0
  1247  00FFBA  53                 	db	83	;'S'
  1248  00FFBB  65                 	db	101	;'e'
  1249  00FFBC  6E                 	db	110	;'n'
  1250  00FFBD  73                 	db	115	;'s'
  1251  00FFBE  6F                 	db	111	;'o'
  1252  00FFBF  72                 	db	114	;'r'
  1253  00FFC0  20                 	db	32
  1254  00FFC1  4D                 	db	77	;'M'
  1255  00FFC2  6F                 	db	111	;'o'
  1256  00FFC3  76                 	db	118	;'v'
  1257  00FFC4  69                 	db	105	;'i'
  1258  00FFC5  6E                 	db	110	;'n'
  1259  00FFC6  67                 	db	103	;'g'
  1260  00FFC7  21                 	db	33
  1261  00FFC8  20                 	db	32
  1262  00FFC9  20                 	db	32
  1263  00FFCA  20                 	db	32
  1264  00FFCB  0A                 	db	10
  1265  00FFCC  00                 	db	0
  1266  00FFCD                     STR_14:
  1267  00FFCD  0A                 	db	10
  1268  00FFCE  47                 	db	71	;'G'
  1269  00FFCF  6F                 	db	111	;'o'
  1270  00FFD0  69                 	db	105	;'i'
  1271  00FFD1  6E                 	db	110	;'n'
  1272  00FFD2  67                 	db	103	;'g'
  1273  00FFD3  20                 	db	32
  1274  00FFD4  62                 	db	98	;'b'
  1275  00FFD5  61                 	db	97	;'a'
  1276  00FFD6  63                 	db	99	;'c'
  1277  00FFD7  6B                 	db	107	;'k'
  1278  00FFD8  20                 	db	32
  1279  00FFD9  74                 	db	116	;'t'
  1280  00FFDA  6F                 	db	111	;'o'
  1281  00FFDB  3A                 	db	58	;':'
  1282  00FFDC  20                 	db	32
  1283  00FFDD  25                 	db	37
  1284  00FFDE  64                 	db	100	;'d'
  1285  00FFDF  00                 	db	0
  1286  00FFE0  53                 	db	83	;'S'
  1287  00FFE1  65                 	db	101	;'e'
  1288  00FFE2  6E                 	db	110	;'n'
  1289  00FFE3  73                 	db	115	;'s'
  1290  00FFE4  6F                 	db	111	;'o'
  1291  00FFE5  72                 	db	114	;'r'
  1292  00FFE6  20                 	db	32
  1293  00FFE7  4D                 	db	77	;'M'
  1294  00FFE8  6F                 	db	111	;'o'
  1295  00FFE9  76                 	db	118	;'v'
  1296  00FFEA  69                 	db	105	;'i'
  1297  00FFEB  6E                 	db	110	;'n'
  1298  00FFEC  67                 	db	103	;'g'
  1299  00FFED  21                 	db	33
  1300  00FFEE  0A                 	db	10
  1301  00FFEF  00                 	db	0
  1302  00FFF0                     STR_31:
  1303  00FFF0  74                 	db	116	;'t'
  1304  00FFF1  65                 	db	101	;'e'
  1305  00FFF2  73                 	db	115	;'s'
  1306  00FFF3  74                 	db	116	;'t'
  1307  00FFF4  0A                 	db	10
  1308  00FFF5  00                 	db	0
  1309  00FFF6  25                 	db	37
  1310  00FFF7  64                 	db	100	;'d'
  1311  00FFF8  20                 	db	32
  1312  00FFF9  0A                 	db	10
  1313  00FFFA  00                 	db	0
  1314  00FFFB                     STR_1:
  1315  00FFFB  25                 	db	37
  1316  00FFFC  63                 	db	99	;'c'
  1317  00FFFD  00                 	db	0
  1318  0000                     
  1319                           ; #config settings
  1320  00FFFE  00                 	db	0	; dummy byte at the end
  1321  0000                     
  1322                           	psect	cinit
  1323  012026                     __pcinit:
  1324                           	opt stack 0
  1325  012026                     start_initialization:
  1326                           	opt stack 0
  1327  012026                     __initialization:
  1328                           	opt stack 0
  1329                           
  1330                           ; Initialize objects allocated to BANK1 (12 bytes)
  1331                           ; load TBLPTR registers with __pidataBANK1
  1332  012026  0EE1               	movlw	low __pidataBANK1
  1333  012028  6EF6               	movwf	tblptrl,c
  1334  01202A  0E3A               	movlw	high __pidataBANK1
  1335  01202C  6EF7               	movwf	tblptrh,c
  1336  01202E  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1337  012030  6EF8               	movwf	tblptru,c
  1338  012032  EE01  F0E8         	lfsr	0,__pdataBANK1
  1339  012036  EE10 F00C          	lfsr	1,12
  1340  01203A                     copy_data0:
  1341  01203A  0009               	tblrd		*+
  1342  01203C  CFF5 FFEE          	movff	tablat,postinc0
  1343  012040  50E5               	movf	postdec1,w,c
  1344  012042  50E1               	movf	fsr1l,w,c
  1345  012044  E1FA               	bnz	copy_data0
  1346                           
  1347                           ; Initialize objects allocated to BANK0 (13 bytes)
  1348                           ; load TBLPTR registers with __pidataBANK0
  1349  012046  0ED4               	movlw	low __pidataBANK0
  1350  012048  6EF6               	movwf	tblptrl,c
  1351  01204A  0E3A               	movlw	high __pidataBANK0
  1352  01204C  6EF7               	movwf	tblptrh,c
  1353  01204E  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1354  012050  6EF8               	movwf	tblptru,c
  1355  012052  EE00  F0F3         	lfsr	0,__pdataBANK0
  1356  012056  EE10 F00D          	lfsr	1,13
  1357  01205A                     copy_data1:
  1358  01205A  0009               	tblrd		*+
  1359  01205C  CFF5 FFEE          	movff	tablat,postinc0
  1360  012060  50E5               	movf	postdec1,w,c
  1361  012062  50E1               	movf	fsr1l,w,c
  1362  012064  E1FA               	bnz	copy_data1
  1363                           
  1364                           ; Initialize objects allocated to COMRAM (14 bytes)
  1365                           ; load TBLPTR registers with __pidataCOMRAM
  1366  012066  0E80               	movlw	low __pidataCOMRAM
  1367  012068  6EF6               	movwf	tblptrl,c
  1368  01206A  0E3A               	movlw	high __pidataCOMRAM
  1369  01206C  6EF7               	movwf	tblptrh,c
  1370  01206E  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1371  012070  6EF8               	movwf	tblptru,c
  1372  012072  EE00  F043         	lfsr	0,__pdataCOMRAM
  1373  012076  EE10 F00E          	lfsr	1,14
  1374  01207A                     copy_data2:
  1375  01207A  0009               	tblrd		*+
  1376  01207C  CFF5 FFEE          	movff	tablat,postinc0
  1377  012080  50E5               	movf	postdec1,w,c
  1378  012082  50E1               	movf	fsr1l,w,c
  1379  012084  E1FA               	bnz	copy_data2
  1380                           
  1381                           ; Clear objects allocated to BIGRAM (300 bytes)
  1382  012086  EE02  F0F0         	lfsr	0,__pbssBIGRAM
  1383  01208A  EE11 F02C          	lfsr	1,300
  1384  01208E                     clear_0:
  1385  01208E  6AEE               	clrf	postinc0,c
  1386  012090  50E5               	movf	postdec1,w,c
  1387  012092  50E1               	movf	fsr1l,w,c
  1388  012094  E1FC               	bnz	clear_0
  1389  012096  50E2               	movf	fsr1h,w,c
  1390  012098  E1FA               	bnz	clear_0
  1391                           
  1392                           ; Clear objects allocated to BANK2 (240 bytes)
  1393  01209A  EE02  F000         	lfsr	0,__pbssBANK2
  1394  01209E  0EF0               	movlw	240
  1395  0120A0                     clear_1:
  1396  0120A0  6AEE               	clrf	postinc0,c
  1397  0120A2  06E8               	decf	wreg,f,c
  1398  0120A4  E1FD               	bnz	clear_1
  1399                           
  1400                           ; Clear objects allocated to BANK1 (215 bytes)
  1401  0120A6  EE01  F000         	lfsr	0,__pbssBANK1
  1402  0120AA  0ED7               	movlw	215
  1403  0120AC                     clear_2:
  1404  0120AC  6AEE               	clrf	postinc0,c
  1405  0120AE  06E8               	decf	wreg,f,c
  1406  0120B0  E1FD               	bnz	clear_2
  1407                           
  1408                           ; Clear objects allocated to BANK0 (83 bytes)
  1409  0120B2  EE00  F060         	lfsr	0,__pbssBANK0
  1410  0120B6  0E53               	movlw	83
  1411  0120B8                     clear_3:
  1412  0120B8  6AEE               	clrf	postinc0,c
  1413  0120BA  06E8               	decf	wreg,f,c
  1414  0120BC  E1FD               	bnz	clear_3
  1415                           
  1416                           ; Clear objects allocated to COMRAM (26 bytes)
  1417  0120BE  EE00  F029         	lfsr	0,__pbssCOMRAM
  1418  0120C2  0E1A               	movlw	26
  1419  0120C4                     clear_4:
  1420  0120C4  6AEE               	clrf	postinc0,c
  1421  0120C6  06E8               	decf	wreg,f,c
  1422  0120C8  E1FD               	bnz	clear_4
  1423  0120CA                     end_of_initialization:
  1424                           	opt stack 0
  1425  0120CA                     __end_of__initialization:
  1426                           	opt stack 0
  1427  0120CA  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1428  0120CC  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1429  0120CE  0100               	movlb	0
  1430  0120D0  EFC6  F08C         	goto	_main	;jump to C main() function
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           postdec1	equ	0xFE5
  1438                           fsr1h	equ	0xFE2
  1439                           fsr1l	equ	0xFE1
  1440                           
  1441                           	psect	bssCOMRAM
  1442  000029                     __pbssCOMRAM:
  1443                           	opt stack 0
  1444  000029                     _average:
  1445                           	opt stack 0
  1446  000029                     	ds	2
  1447  00002B                     _total:
  1448                           	opt stack 0
  1449  00002B                     	ds	2
  1450  00002D                     _readIndex:
  1451                           	opt stack 0
  1452  00002D                     	ds	2
  1453  00002F                     _COUNTER:
  1454                           	opt stack 0
  1455  00002F                     	ds	2
  1456  000031                     HMI_GRender@a:
  1457                           	opt stack 0
  1458  000031                     	ds	2
  1459  000033                     _Current_Dist2:
  1460                           	opt stack 0
  1461  000033                     	ds	1
  1462  000034                     _i:
  1463                           	opt stack 0
  1464  000034                     	ds	1
  1465  000035                     Timer0_Init@PRE:
  1466                           	opt stack 0
  1467  000035                     	ds	1
  1468  000036                     _INDEX:
  1469                           	opt stack 0
  1470  000036                     	ds	1
  1471  000037                     rand@screw:
  1472                           	opt stack 0
  1473  000037                     	ds	1
  1474  000038                     _ADC_Initialised:
  1475                           	opt stack 0
  1476  000038                     	ds	1
  1477  000039                     OutSeg@a:
  1478                           	opt stack 0
  1479  000039                     	ds	1
  1480  00003A                     OutSeg@segset:
  1481                           	opt stack 0
  1482  00003A                     	ds	1
  1483  00003B                     OutSeg@cur:
  1484                           	opt stack 0
  1485  00003B                     	ds	1
  1486  00003C                     _I2C1T:
  1487                           	opt stack 0
  1488  00003C                     	ds	7
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499                           	psect	dataCOMRAM
  1500  000043                     __pdataCOMRAM:
  1501                           	opt stack 0
  1502  000043                     _gCursor:
  1503                           	opt stack 0
  1504  000043                     	ds	4
  1505  000047                     _numReadings:
  1506                           	opt stack 0
  1507  000047                     	ds	2
  1508  000049                     _top:
  1509                           	opt stack 0
  1510  000049                     	ds	2
  1511  00004B                     _Bus_State:
  1512                           	opt stack 0
  1513  00004B                     	ds	1
  1514  00004C                     	ds	1
  1515  00004D                     	ds	1
  1516  00004E                     	ds	1
  1517  00004F                     _l:
  1518                           	opt stack 0
  1519  00004F                     	ds	1
  1520  000050                     _w:
  1521                           	opt stack 0
  1522  000050                     	ds	1
  1523                           tblptru	equ	0xFF8
  1524                           tblptrh	equ	0xFF7
  1525                           tblptrl	equ	0xFF6
  1526                           tablat	equ	0xFF5
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           postdec1	equ	0xFE5
  1530                           fsr1h	equ	0xFE2
  1531                           fsr1l	equ	0xFE1
  1532                           
  1533                           	psect	bssBANK0
  1534  000060                     __pbssBANK0:
  1535                           	opt stack 0
  1536  000060                     _gISR:
  1537                           	opt stack 0
  1538  000060                     	ds	3
  1539  000063                     _lQueue:
  1540                           	opt stack 0
  1541  000063                     	ds	3
  1542  000066                     _lStepFunction:
  1543                           	opt stack 0
  1544  000066                     	ds	3
  1545  000069                     _timercount:
  1546                           	opt stack 0
  1547  000069                     	ds	2
  1548  00006B                     _thisReading:
  1549                           	opt stack 0
  1550  00006B                     	ds	2
  1551  00006D                     _CW_Count:
  1552                           	opt stack 0
  1553  00006D                     	ds	2
  1554  00006F                     _CCW_Count:
  1555                           	opt stack 0
  1556  00006F                     	ds	2
  1557  000071                     _Close_Pos:
  1558                           	opt stack 0
  1559  000071                     	ds	2
  1560  000073                     _Motor_Count:
  1561                           	opt stack 0
  1562  000073                     	ds	2
  1563  000075                     _mode:
  1564                           	opt stack 0
  1565  000075                     	ds	2
  1566  000077                     _pShiftVal:
  1567                           	opt stack 0
  1568  000077                     	ds	2
  1569  000079                     _val:
  1570                           	opt stack 0
  1571  000079                     	ds	2
  1572  00007B                     _lMotor:
  1573                           	opt stack 0
  1574  00007B                     	ds	2
  1575  00007D                     _lCurrent:
  1576                           	opt stack 0
  1577  00007D                     	ds	2
  1578  00007F                     _gBackcolour:
  1579                           	opt stack 0
  1580  00007F                     	ds	2
  1581  000081                     SPI_Send9@dat:
  1582                           	opt stack 0
  1583  000081                     	ds	2
  1584  000083                     _Cliff_Left:
  1585                           	opt stack 0
  1586  000083                     	ds	1
  1587  000084                     _Cliff_Right:
  1588                           	opt stack 0
  1589  000084                     	ds	1
  1590  000085                     _Cliff_FLeft:
  1591                           	opt stack 0
  1592  000085                     	ds	1
  1593  000086                     _Cliff_FRight:
  1594                           	opt stack 0
  1595  000086                     	ds	1
  1596  000087                     _BumpSensor:
  1597                           	opt stack 0
  1598  000087                     	ds	1
  1599  000088                     _Current_Dist1:
  1600                           	opt stack 0
  1601  000088                     	ds	1
  1602  000089                     Event_TestButton@j:
  1603                           	opt stack 0
  1604  000089                     	ds	1
  1605  00008A                     _u:
  1606                           	opt stack 0
  1607  00008A                     	ds	1
  1608  00008B                     _j:
  1609                           	opt stack 0
  1610  00008B                     	ds	1
  1611  00008C                     Timer2_Init@PRE:
  1612                           	opt stack 0
  1613  00008C                     	ds	1
  1614  00008D                     Timer2_Init@INDEX:
  1615                           	opt stack 0
  1616  00008D                     	ds	1
  1617  00008E                     _lBufferY:
  1618                           	opt stack 0
  1619  00008E                     	ds	1
  1620  00008F                     _lBufferX:
  1621                           	opt stack 0
  1622  00008F                     	ds	1
  1623  000090                     _clearall:
  1624                           	opt stack 0
  1625  000090                     	ds	1
  1626  000091                     _PortE:
  1627                           	opt stack 0
  1628  000091                     	ds	10
  1629  00009B                     _PortD:
  1630                           	opt stack 0
  1631  00009B                     	ds	10
  1632  0000A5                     _PortC:
  1633                           	opt stack 0
  1634  0000A5                     	ds	10
  1635  0000AF                     LCD_DrawRectangle@p2:
  1636                           	opt stack 0
  1637  0000AF                     	ds	4
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           fsr1h	equ	0xFE2
  1646                           fsr1l	equ	0xFE1
  1647                           
  1648                           	psect	dataBANK0
  1649  0000F3                     __pdataBANK0:
  1650                           	opt stack 0
  1651  0000F3                     _countOff:
  1652                           	opt stack 0
  1653  0000F3                     	ds	2
  1654  0000F5                     _countOn:
  1655                           	opt stack 0
  1656  0000F5                     	ds	2
  1657  0000F7                     _Low_Sensor:
  1658                           	opt stack 0
  1659  0000F7                     	ds	2
  1660  0000F9                     _y_grid:
  1661                           	opt stack 0
  1662  0000F9                     	ds	2
  1663  0000FB                     _x_grid:
  1664                           	opt stack 0
  1665  0000FB                     	ds	2
  1666  0000FD                     _gForecolour:
  1667                           	opt stack 0
  1668  0000FD                     	ds	2
  1669  0000FF                     _change:
  1670                           	opt stack 0
  1671  0000FF                     	ds	1
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           postdec1	equ	0xFE5
  1679                           fsr1h	equ	0xFE2
  1680                           fsr1l	equ	0xFE1
  1681                           
  1682                           	psect	bssBANK1
  1683  000100                     __pbssBANK1:
  1684                           	opt stack 0
  1685  000100                     Timer2_Init@DIV:
  1686                           	opt stack 0
  1687  000100                     	ds	4
  1688  000104                     Timer0_Init@DIV:
  1689                           	opt stack 0
  1690  000104                     	ds	4
  1691  000108                     _I2C2_More:
  1692                           	opt stack 0
  1693  000108                     	ds	3
  1694  00010B                     _I2C1_More:
  1695                           	opt stack 0
  1696  00010B                     	ds	3
  1697  00010E                     _I2C2_Done:
  1698                           	opt stack 0
  1699  00010E                     	ds	3
  1700  000111                     _I2C1_Done:
  1701                           	opt stack 0
  1702  000111                     	ds	3
  1703  000114                     _errno:
  1704                           	opt stack 0
  1705  000114                     	ds	2
  1706  000116                     _test:
  1707                           	opt stack 0
  1708  000116                     	ds	2
  1709  000118                     _Sensor_Observe_Fin:
  1710                           	opt stack 0
  1711  000118                     	ds	2
  1712  00011A                     _count:
  1713                           	opt stack 0
  1714  00011A                     	ds	2
  1715  00011C                     _ADC_Reading:
  1716                           	opt stack 0
  1717  00011C                     	ds	2
  1718  00011E                     _BumpState:
  1719                           	opt stack 0
  1720  00011E                     	ds	2
  1721  000120                     _mod:
  1722                           	opt stack 0
  1723  000120                     	ds	2
  1724  000122                     _Square_Dist:
  1725                           	opt stack 0
  1726  000122                     	ds	2
  1727  000124                     _T_VAR:
  1728                           	opt stack 0
  1729  000124                     	ds	2
  1730  000126                     _Current_Dist:
  1731                           	opt stack 0
  1732  000126                     	ds	2
  1733  000128                     _y:
  1734                           	opt stack 0
  1735  000128                     	ds	2
  1736  00012A                     _x:
  1737                           	opt stack 0
  1738  00012A                     	ds	2
  1739  00012C                     _HMIBoard:
  1740                           	opt stack 0
  1741  00012C                     	ds	58
  1742  000166                     _SPI1:
  1743                           	opt stack 0
  1744  000166                     	ds	11
  1745  000171                     _SPI2:
  1746                           	opt stack 0
  1747  000171                     	ds	11
  1748  00017C                     _DIPSwitch:
  1749                           	opt stack 0
  1750  00017C                     	ds	10
  1751  000186                     _TestButton:
  1752                           	opt stack 0
  1753  000186                     	ds	10
  1754  000190                     _PortG:
  1755                           	opt stack 0
  1756  000190                     	ds	10
  1757  00019A                     _PortB:
  1758                           	opt stack 0
  1759  00019A                     	ds	10
  1760  0001A4                     _PortA:
  1761                           	opt stack 0
  1762  0001A4                     	ds	10
  1763  0001AE                     _PortF:
  1764                           	opt stack 0
  1765  0001AE                     	ds	10
  1766  0001B8                     _I2C2T:
  1767                           	opt stack 0
  1768  0001B8                     	ds	7
  1769  0001BF                     _ADC_AN3:
  1770                           	opt stack 0
  1771  0001BF                     	ds	5
  1772  0001C4                     _ADC_AN2:
  1773                           	opt stack 0
  1774  0001C4                     	ds	5
  1775  0001C9                     _ADC_AN1:
  1776                           	opt stack 0
  1777  0001C9                     	ds	5
  1778  0001CE                     _ADC_AN0:
  1779                           	opt stack 0
  1780  0001CE                     	ds	5
  1781  0001D3                     LCD_DrawRectangle@p4:
  1782                           	opt stack 0
  1783  0001D3                     	ds	4
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	dataBANK1
  1795  0001E8                     __pdataBANK1:
  1796                           	opt stack 0
  1797  0001E8                     Console_Render@F6956:
  1798                           	opt stack 0
  1799  0001E8                     	ds	4
  1800  0001EC                     _gLineSize:
  1801                           	opt stack 0
  1802  0001EC                     	ds	4
  1803  0001F0                     _gCharSize:
  1804                           	opt stack 0
  1805  0001F0                     	ds	4
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           postinc0	equ	0xFEE
  1811                           wreg	equ	0xFE8
  1812                           postdec1	equ	0xFE5
  1813                           fsr1h	equ	0xFE2
  1814                           fsr1l	equ	0xFE1
  1815                           
  1816                           	psect	bssBANK2
  1817  000200                     __pbssBANK2:
  1818                           	opt stack 0
  1819  000200                     _readings:
  1820                           	opt stack 0
  1821  000200                     	ds	100
  1822  000264                     _stack:
  1823                           	opt stack 0
  1824  000264                     	ds	40
  1825  00028C                     _lCBuffer:
  1826                           	opt stack 0
  1827  00028C                     	ds	30
  1828  0002AA                     Console_MakeField@Fill:
  1829                           	opt stack 0
  1830  0002AA                     	ds	70
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1h	equ	0xFE2
  1839                           fsr1l	equ	0xFE1
  1840                           
  1841                           	psect	bssBIGRAM
  1842  0002F0                     __pbssBIGRAM:
  1843                           	opt stack 0
  1844  0002F0                     _lBuffer:
  1845                           	opt stack 0
  1846  0002F0                     	ds	300
  1847                           tblptru	equ	0xFF8
  1848                           tblptrh	equ	0xFF7
  1849                           tblptrl	equ	0xFF6
  1850                           tablat	equ	0xFF5
  1851                           postinc0	equ	0xFEE
  1852                           wreg	equ	0xFE8
  1853                           postdec1	equ	0xFE5
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           
  1857                           	psect	cstackBANK1
  1858  0001D7                     __pcstackBANK1:
  1859                           	opt stack 0
  1860  0001D7                     Button_Init@pInput:
  1861                           	opt stack 0
  1862  0001D7                     Port_Init@pInput:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x0
  1866  0001D7                     	ds	2
  1867  0001D9                     Port_Init@pPort:
  1868                           	opt stack 0
  1869  0001D9                     Button_Init@pThreshold:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x2
  1873  0001D9                     	ds	1
  1874  0001DA                     ??_Port_Init:
  1875                           
  1876                           ; 1 bytes @ 0x3
  1877  0001DA                     	ds	1
  1878  0001DB                     Button_Init@pInitIO:
  1879                           	opt stack 0
  1880                           
  1881                           ; 3 bytes @ 0x4
  1882  0001DB                     	ds	1
  1883  0001DC                     Port_Init@i:
  1884                           	opt stack 0
  1885                           
  1886                           ; 1 bytes @ 0x5
  1887  0001DC                     	ds	2
  1888  0001DE                     Button_Init@pGetState:
  1889                           	opt stack 0
  1890                           
  1891                           ; 3 bytes @ 0x7
  1892  0001DE                     	ds	3
  1893  0001E1                     Button_Init@pFunction:
  1894                           	opt stack 0
  1895                           
  1896                           ; 3 bytes @ 0xA
  1897  0001E1                     	ds	3
  1898  0001E4                     main@right:
  1899                           	opt stack 0
  1900                           
  1901                           ; 1 bytes @ 0xD
  1902  0001E4                     	ds	1
  1903  0001E5                     main@up:
  1904                           	opt stack 0
  1905                           
  1906                           ; 1 bytes @ 0xE
  1907  0001E5                     	ds	1
  1908  0001E6                     main@left:
  1909                           	opt stack 0
  1910                           
  1911                           ; 1 bytes @ 0xF
  1912  0001E6                     	ds	1
  1913  0001E7                     main@down:
  1914                           	opt stack 0
  1915                           
  1916                           ; 1 bytes @ 0x10
  1917  0001E7                     	ds	1
  1918                           tblptru	equ	0xFF8
  1919                           tblptrh	equ	0xFF7
  1920                           tblptrl	equ	0xFF6
  1921                           tablat	equ	0xFF5
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1h	equ	0xFE2
  1926                           fsr1l	equ	0xFE1
  1927                           
  1928                           	psect	cstackBANK0
  1929  0000B3                     __pcstackBANK0:
  1930                           	opt stack 0
  1931  0000B3                     ??_Console_ClearCursor:
  1932  0000B3                     ??_Console_Init:
  1933  0000B3                     ??_Console_NewLine:
  1934  0000B3                     ??_Console_FormFeed:
  1935  0000B3                     ??_HMI_SetButton:
  1936  0000B3                     ??_InitADC:
  1937  0000B3                     ?_GetPortProperties:
  1938                           	opt stack 0
  1939  0000B3                     ?_GetPortPORT:
  1940                           	opt stack 0
  1941  0000B3                     ?_GetPortTRIS:
  1942                           	opt stack 0
  1943  0000B3                     ?___wmul:
  1944                           	opt stack 0
  1945  0000B3                     ?___awdiv:
  1946                           	opt stack 0
  1947  0000B3                     ?___lwdiv:
  1948                           	opt stack 0
  1949  0000B3                     ?___lldiv:
  1950                           	opt stack 0
  1951  0000B3                     Mode_Set@pMode:
  1952                           	opt stack 0
  1953  0000B3                     ToSegment@pCHR:
  1954                           	opt stack 0
  1955  0000B3                     HMI_SetBar@pValue:
  1956                           	opt stack 0
  1957  0000B3                     eusartSend@sendChar:
  1958                           	opt stack 0
  1959  0000B3                     Port_GetPin@pInput:
  1960                           	opt stack 0
  1961  0000B3                     Port_GetQuad@pInput:
  1962                           	opt stack 0
  1963  0000B3                     SPI_DisableISR@pInput:
  1964                           	opt stack 0
  1965  0000B3                     SPI_DCS@pInput:
  1966                           	opt stack 0
  1967  0000B3                     SPI_Send@pInput:
  1968                           	opt stack 0
  1969  0000B3                     Byte_SetBit@pInput:
  1970                           	opt stack 0
  1971  0000B3                     Byte_GetBit@pInput:
  1972                           	opt stack 0
  1973  0000B3                     Byte_SetZone@pInput:
  1974                           	opt stack 0
  1975  0000B3                     Byte_GetZone@pInput:
  1976                           	opt stack 0
  1977  0000B3                     Byte_SetByte@pInput:
  1978                           	opt stack 0
  1979  0000B3                     delay_ms@ms:
  1980                           	opt stack 0
  1981  0000B3                     delay_us@us:
  1982                           	opt stack 0
  1983  0000B3                     reverse@input:
  1984                           	opt stack 0
  1985  0000B3                     ___wmul@multiplier:
  1986                           	opt stack 0
  1987  0000B3                     ___awdiv@dividend:
  1988                           	opt stack 0
  1989  0000B3                     ___lwdiv@dividend:
  1990                           	opt stack 0
  1991  0000B3                     MXK_Queue@pCallback:
  1992                           	opt stack 0
  1993  0000B3                     ___lldiv@dividend:
  1994                           	opt stack 0
  1995                           
  1996                           ; 4 bytes @ 0x0
  1997  0000B3                     	ds	1
  1998  0000B4                     HMI_SetSegments@pString:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x1
  2002  0000B4                     	ds	1
  2003  0000B5                     GetPortProperties@pInput:
  2004                           	opt stack 0
  2005  0000B5                     GetPortPORT@pInput:
  2006                           	opt stack 0
  2007  0000B5                     GetPortTRIS@pInput:
  2008                           	opt stack 0
  2009  0000B5                     Port_GetPin@pPin:
  2010                           	opt stack 0
  2011  0000B5                     Port_GetQuad@pQuad:
  2012                           	opt stack 0
  2013  0000B5                     SPI_Send@pData:
  2014                           	opt stack 0
  2015  0000B5                     Byte_SetBit@pBit:
  2016                           	opt stack 0
  2017  0000B5                     Byte_GetBit@pBit:
  2018                           	opt stack 0
  2019  0000B5                     Byte_SetZone@pMax:
  2020                           	opt stack 0
  2021  0000B5                     Byte_GetZone@pMax:
  2022                           	opt stack 0
  2023  0000B5                     Byte_SetByte@pValue:
  2024                           	opt stack 0
  2025  0000B5                     Console_Init@x:
  2026                           	opt stack 0
  2027  0000B5                     Console_FormFeed@x:
  2028                           	opt stack 0
  2029  0000B5                     reverse@length:
  2030                           	opt stack 0
  2031  0000B5                     ___wmul@multiplicand:
  2032                           	opt stack 0
  2033  0000B5                     ___awdiv@divisor:
  2034                           	opt stack 0
  2035  0000B5                     ___lwdiv@divisor:
  2036                           	opt stack 0
  2037  0000B5                     delay_ms@u:
  2038                           	opt stack 0
  2039  0000B5                     delay_us@u:
  2040                           	opt stack 0
  2041  0000B5                     HMI_SetButton@reindex:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x2
  2045  0000B5                     	ds	1
  2046  0000B6                     ??_Port_GetPin:
  2047  0000B6                     ??_Port_GetQuad:
  2048  0000B6                     ??_Byte_GetBit:
  2049  0000B6                     LCD_Write@mode:
  2050                           	opt stack 0
  2051  0000B6                     Byte_SetBit@pValue:
  2052                           	opt stack 0
  2053  0000B6                     Byte_SetZone@pChunk:
  2054                           	opt stack 0
  2055  0000B6                     Byte_GetZone@pChunk:
  2056                           	opt stack 0
  2057  0000B6                     Console_Init@y:
  2058                           	opt stack 0
  2059  0000B6                     Console_FormFeed@y:
  2060                           	opt stack 0
  2061  0000B6                     OutSeg@pSegment:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0x3
  2065  0000B6                     	ds	1
  2066  0000B7                     ??_Byte_SetBit:
  2067  0000B7                     ??_Console_IncrementCursor:
  2068  0000B7                     ??_OutSeg:
  2069  0000B7                     LCD_Write@value:
  2070                           	opt stack 0
  2071  0000B7                     Byte_GetBit@Output:
  2072                           	opt stack 0
  2073  0000B7                     Byte_SetZone@pChunkSize:
  2074                           	opt stack 0
  2075  0000B7                     Byte_GetZone@pChunkSize:
  2076                           	opt stack 0
  2077  0000B7                     reverse@tempVar:
  2078                           	opt stack 0
  2079  0000B7                     ___awdiv@counter:
  2080                           	opt stack 0
  2081  0000B7                     ___lwdiv@counter:
  2082                           	opt stack 0
  2083  0000B7                     HMI_SetSegments@in:
  2084                           	opt stack 0
  2085  0000B7                     ___wmul@product:
  2086                           	opt stack 0
  2087  0000B7                     ___lldiv@divisor:
  2088                           	opt stack 0
  2089                           
  2090                           ; 4 bytes @ 0x4
  2091  0000B7                     	ds	1
  2092  0000B8                     ??_Byte_GetZone:
  2093  0000B8                     ?_Console_MakeField:
  2094                           	opt stack 0
  2095  0000B8                     Set_Addr_Window@ys:
  2096                           	opt stack 0
  2097  0000B8                     Set_Rotation@m:
  2098                           	opt stack 0
  2099  0000B8                     Port_GetPin@Output:
  2100                           	opt stack 0
  2101  0000B8                     Port_GetQuad@Output:
  2102                           	opt stack 0
  2103  0000B8                     Byte_SetZone@pValue:
  2104                           	opt stack 0
  2105  0000B8                     ___awdiv@sign:
  2106                           	opt stack 0
  2107  0000B8                     LCD_Word_Write@value:
  2108                           	opt stack 0
  2109  0000B8                     reverse@iterator:
  2110                           	opt stack 0
  2111  0000B8                     ___lwdiv@quotient:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x5
  2115  0000B8                     	ds	1
  2116  0000B9                     ??_Byte_SetZone:
  2117  0000B9                     Set_Addr_Window@xe:
  2118                           	opt stack 0
  2119  0000B9                     Set_Rotation@rotation:
  2120                           	opt stack 0
  2121  0000B9                     Byte_GetZone@MASK:
  2122                           	opt stack 0
  2123  0000B9                     OutSeg@pInput:
  2124                           	opt stack 0
  2125  0000B9                     HMI_SetButton@pValue:
  2126                           	opt stack 0
  2127  0000B9                     MXK_BlockSwitchTo@CUR:
  2128                           	opt stack 0
  2129  0000B9                     MXK_SwitchTo@CUR:
  2130                           	opt stack 0
  2131  0000B9                     ___awdiv@quotient:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0x6
  2135  0000B9                     	ds	1
  2136  0000BA                     ??_Console_MakeField:
  2137  0000BA                     ?___lwmod:
  2138                           	opt stack 0
  2139  0000BA                     Set_Addr_Window@ye:
  2140                           	opt stack 0
  2141  0000BA                     Byte_GetZone@Offset:
  2142                           	opt stack 0
  2143  0000BA                     OutSeg@out:
  2144                           	opt stack 0
  2145  0000BA                     HMI_SetButton@v:
  2146                           	opt stack 0
  2147  0000BA                     MXK_BlockSwitchTo@pModule:
  2148                           	opt stack 0
  2149  0000BA                     MXK_SwitchTo@pModule:
  2150                           	opt stack 0
  2151  0000BA                     ___lwmod@dividend:
  2152                           	opt stack 0
  2153                           
  2154                           ; 2 bytes @ 0x7
  2155  0000BA                     	ds	1
  2156  0000BB                     ??_Console_Tab:
  2157  0000BB                     Set_Addr_Window@xs:
  2158                           	opt stack 0
  2159  0000BB                     Byte_GetZone@Output:
  2160                           	opt stack 0
  2161  0000BB                     HMI_Render@a:
  2162                           	opt stack 0
  2163  0000BB                     ___lldiv@quotient:
  2164                           	opt stack 0
  2165                           
  2166                           ; 4 bytes @ 0x8
  2167  0000BB                     	ds	1
  2168  0000BC                     Byte_SetZone@Offset:
  2169                           	opt stack 0
  2170  0000BC                     LCD_Fill@pColour:
  2171                           	opt stack 0
  2172  0000BC                     LCD_FillRectangle@pColour:
  2173                           	opt stack 0
  2174  0000BC                     Byte_GetPair@pInput:
  2175                           	opt stack 0
  2176  0000BC                     Console_MakeField@Index:
  2177                           	opt stack 0
  2178  0000BC                     ___lwmod@divisor:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x9
  2182  0000BC                     	ds	1
  2183  0000BD                     Byte_SetZone@MASK:
  2184                           	opt stack 0
  2185                           
  2186                           ; 1 bytes @ 0xA
  2187  0000BD                     	ds	1
  2188  0000BE                     LCD_Fill@i:
  2189                           	opt stack 0
  2190  0000BE                     Byte_GetPair@pPair:
  2191                           	opt stack 0
  2192  0000BE                     Console_MakeField@pInput:
  2193                           	opt stack 0
  2194  0000BE                     ___lwmod@counter:
  2195                           	opt stack 0
  2196  0000BE                     Byte_SetPair@pInput:
  2197                           	opt stack 0
  2198  0000BE                     Byte_SetQuad@pInput:
  2199                           	opt stack 0
  2200  0000BE                     LCD_FillRectangle@pPoint:
  2201                           	opt stack 0
  2202                           
  2203                           ; 4 bytes @ 0xB
  2204  0000BE                     	ds	1
  2205  0000BF                     LCD_Fill@j:
  2206                           	opt stack 0
  2207  0000BF                     ___lldiv@counter:
  2208                           	opt stack 0
  2209  0000BF                     Word_GetPair@pInput:
  2210                           	opt stack 0
  2211  0000BF                     itos@input:
  2212                           	opt stack 0
  2213  0000BF                     Console_MakeField@Column:
  2214                           	opt stack 0
  2215                           
  2216                           ; 2 bytes @ 0xC
  2217  0000BF                     	ds	1
  2218  0000C0                     Byte_SetPair@pPair:
  2219                           	opt stack 0
  2220  0000C0                     Byte_SetQuad@pQuad:
  2221                           	opt stack 0
  2222  0000C0                     Console_Tab@t:
  2223                           	opt stack 0
  2224  0000C0                     Timer2_Init@pFrequency:
  2225                           	opt stack 0
  2226                           
  2227                           ; 4 bytes @ 0xD
  2228  0000C0                     	ds	1
  2229  0000C1                     Byte_SetPair@pValue:
  2230                           	opt stack 0
  2231  0000C1                     Byte_SetQuad@pValue:
  2232                           	opt stack 0
  2233  0000C1                     Word_GetPair@pPair:
  2234                           	opt stack 0
  2235  0000C1                     Console_Tab@i:
  2236                           	opt stack 0
  2237  0000C1                     itos@destination:
  2238                           	opt stack 0
  2239  0000C1                     _Console_MakeField$10974:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0xE
  2243  0000C1                     	ds	1
  2244  0000C2                     Console_Tab@c:
  2245                           	opt stack 0
  2246  0000C2                     Port_SetPin@pInput:
  2247                           	opt stack 0
  2248  0000C2                     Port_Set@pInput:
  2249                           	opt stack 0
  2250  0000C2                     SPI_MinSpeed@pInput:
  2251                           	opt stack 0
  2252  0000C2                     SPI_MaxSpeed@pInput:
  2253                           	opt stack 0
  2254  0000C2                     Word_SetPair@pInput:
  2255                           	opt stack 0
  2256  0000C2                     PortProperty_Valid@pInput:
  2257                           	opt stack 0
  2258  0000C2                     LCD_FillRectangle@pSize:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0xF
  2262  0000C2                     	ds	1
  2263  0000C3                     ??_Console_PrintChar:
  2264  0000C3                     Console_MakeField@x:
  2265                           	opt stack 0
  2266  0000C3                     itos@Data:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x10
  2270  0000C3                     	ds	1
  2271  0000C4                     ??_Timer2_Init:
  2272  0000C4                     Port_SetPin@pPin:
  2273                           	opt stack 0
  2274  0000C4                     Port_Set@pValue:
  2275                           	opt stack 0
  2276  0000C4                     Word_SetPair@pPair:
  2277                           	opt stack 0
  2278  0000C4                     PortProperty_Valid@pPinDrive:
  2279                           	opt stack 0
  2280  0000C4                     Console_MakeField@y:
  2281                           	opt stack 0
  2282                           
  2283                           ; 1 bytes @ 0x11
  2284  0000C4                     	ds	1
  2285  0000C5                     ??_Port_Set:
  2286  0000C5                     Port_SetPin@pValue:
  2287                           	opt stack 0
  2288  0000C5                     Word_SetPair@pValue:
  2289                           	opt stack 0
  2290  0000C5                     PortProperty_Valid@pPin:
  2291                           	opt stack 0
  2292  0000C5                     LCD_DrawField@pField:
  2293                           	opt stack 0
  2294  0000C5                     itos@Length:
  2295                           	opt stack 0
  2296  0000C5                     Timer2_Init@RDIV:
  2297                           	opt stack 0
  2298                           
  2299                           ; 4 bytes @ 0x12
  2300  0000C5                     	ds	1
  2301  0000C6                     ??_PortProperty_Valid:
  2302  0000C6                     ??_LCD_FillRectangle:
  2303  0000C6                     Port_SetPin@Type:
  2304                           	opt stack 0
  2305  0000C6                     Console_PrintChar@pInput:
  2306                           	opt stack 0
  2307                           
  2308                           ; 1 bytes @ 0x13
  2309  0000C6                     	ds	1
  2310  0000C7                     LED_Set@pValue:
  2311                           	opt stack 0
  2312  0000C7                     putch@c:
  2313                           	opt stack 0
  2314  0000C7                     Port_TogglePin@pInput:
  2315                           	opt stack 0
  2316  0000C7                     itos@Out:
  2317                           	opt stack 0
  2318  0000C7                     LCD_DrawField@pPoint:
  2319                           	opt stack 0
  2320                           
  2321                           ; 4 bytes @ 0x14
  2322  0000C7                     	ds	1
  2323  0000C8                     ?_printf:
  2324                           	opt stack 0
  2325  0000C8                     LCD_FillRectangle@i:
  2326                           	opt stack 0
  2327  0000C8                     LED_Set@pLED:
  2328                           	opt stack 0
  2329  0000C8                     printf@f:
  2330                           	opt stack 0
  2331  0000C8                     PortProperty_Valid@Errors:
  2332                           	opt stack 0
  2333                           
  2334                           ; 16 bytes @ 0x15
  2335  0000C8                     	ds	1
  2336  0000C9                     LCD_FillRectangle@j:
  2337                           	opt stack 0
  2338  0000C9                     Port_TogglePin@pPin:
  2339                           	opt stack 0
  2340  0000C9                     HMI_SetNumber@pInput:
  2341                           	opt stack 0
  2342  0000C9                     Timer2_Init@pCPUClock:
  2343                           	opt stack 0
  2344                           
  2345                           ; 4 bytes @ 0x16
  2346  0000C9                     	ds	1
  2347  0000CA                     Port_TogglePin@Value:
  2348                           	opt stack 0
  2349                           
  2350                           ; 1 bytes @ 0x17
  2351  0000CA                     	ds	1
  2352  0000CB                     LED_Toggle@pLED:
  2353                           	opt stack 0
  2354  0000CB                     LCD_DrawField@pSize:
  2355                           	opt stack 0
  2356                           
  2357                           ; 4 bytes @ 0x18
  2358  0000CB                     	ds	1
  2359  0000CC                     ??_printf:
  2360  0000CC                     Event_DIPSwitch@pState:
  2361                           	opt stack 0
  2362  0000CC                     Event_TestButton@pState:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x19
  2366  0000CC                     	ds	1
  2367  0000CD                     Event_DIPSwitch@Bar:
  2368                           	opt stack 0
  2369  0000CD                     printf@flag:
  2370                           	opt stack 0
  2371  0000CD                     Timer2_Init@DIVIDE:
  2372                           	opt stack 0
  2373                           
  2374                           ; 4 bytes @ 0x1A
  2375  0000CD                     	ds	1
  2376  0000CE                     printf@prec:
  2377                           	opt stack 0
  2378  0000CE                     Button_Poll@pButton:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x1B
  2382  0000CE                     	ds	1
  2383  0000CF                     ??_LCD_DrawField:
  2384  0000CF                     printf@ap:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x1C
  2388  0000CF                     	ds	1
  2389  0000D0                     Button_Poll@pIncrement:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x1D
  2393  0000D0                     	ds	1
  2394  0000D1                     ??_Button_Poll:
  2395  0000D1                     LCD_DrawField@count:
  2396                           	opt stack 0
  2397  0000D1                     printf@val:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x1E
  2401  0000D1                     	ds	2
  2402  0000D3                     LCD_DrawField@xmax:
  2403                           	opt stack 0
  2404  0000D3                     printf@c:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x20
  2408  0000D3                     	ds	1
  2409  0000D4                     LCD_DrawField@ymax:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x21
  2413  0000D4                     	ds	1
  2414  0000D5                     LCD_DrawField@i:
  2415                           	opt stack 0
  2416  0000D5                     Port_Set@TypeRequired:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x22
  2420  0000D5                     	ds	1
  2421  0000D6                     ??_Console_Render:
  2422  0000D6                     Button_Poll@Pin:
  2423                           	opt stack 0
  2424                           
  2425                           ; 1 bytes @ 0x23
  2426  0000D6                     	ds	1
  2427  0000D7                     Port_Set@TypeActual:
  2428                           	opt stack 0
  2429                           
  2430                           ; 2 bytes @ 0x24
  2431  0000D7                     	ds	1
  2432  0000D8                     PortProperty_Valid@Pair:
  2433                           	opt stack 0
  2434  0000D8                     Console_Render@temp:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x25
  2438  0000D8                     	ds	1
  2439  0000D9                     Port_Set@Type:
  2440                           	opt stack 0
  2441  0000D9                     Port_CheckPairType@pInput:
  2442                           	opt stack 0
  2443  0000D9                     Port_SetPinType@pInput:
  2444                           	opt stack 0
  2445  0000D9                     Console_Render@lCursor:
  2446                           	opt stack 0
  2447                           
  2448                           ; 4 bytes @ 0x26
  2449  0000D9                     	ds	2
  2450  0000DB                     Port_CheckPairType@pPair:
  2451                           	opt stack 0
  2452  0000DB                     Port_SetPinType@pPin:
  2453                           	opt stack 0
  2454                           
  2455                           ; 1 bytes @ 0x28
  2456  0000DB                     	ds	1
  2457  0000DC                     Port_CheckPairType@pDrive:
  2458                           	opt stack 0
  2459  0000DC                     Port_SetPinType@pType:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0x29
  2463  0000DC                     	ds	1
  2464  0000DD                     Port_CheckPairType@Pin1:
  2465                           	opt stack 0
  2466  0000DD                     Port_SetPinType@Output:
  2467                           	opt stack 0
  2468  0000DD                     Console_Render@x:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x2A
  2472  0000DD                     	ds	1
  2473  0000DE                     Port_CheckPairType@Pin2:
  2474                           	opt stack 0
  2475  0000DE                     Console_Render@y:
  2476                           	opt stack 0
  2477  0000DE                     Port_SetPinType@Props:
  2478                           	opt stack 0
  2479                           
  2480                           ; 2 bytes @ 0x2B
  2481  0000DE                     	ds	1
  2482  0000DF                     Port_CheckPairType@Output:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x2C
  2486  0000DF                     	ds	1
  2487  0000E0                     LED_Init@pLED:
  2488                           	opt stack 0
  2489  0000E0                     Port_CheckPairType@Props:
  2490                           	opt stack 0
  2491  0000E0                     SPI_Init@pClock:
  2492                           	opt stack 0
  2493                           
  2494                           ; 4 bytes @ 0x2D
  2495  0000E0                     	ds	2
  2496  0000E2                     Port_CheckQuadType@pInput:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x2F
  2500  0000E2                     	ds	2
  2501  0000E4                     Port_CheckQuadType@pQuad:
  2502                           	opt stack 0
  2503  0000E4                     SPI_Init@pChannel:
  2504                           	opt stack 0
  2505                           
  2506                           ; 1 bytes @ 0x31
  2507  0000E4                     	ds	1
  2508  0000E5                     Port_CheckQuadType@pDrive:
  2509                           	opt stack 0
  2510  0000E5                     SPI_Init@pMode:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x32
  2514  0000E5                     	ds	1
  2515  0000E6                     Port_CheckQuadType@Pair1:
  2516                           	opt stack 0
  2517  0000E6                     SPI_Init@pInput:
  2518                           	opt stack 0
  2519                           
  2520                           ; 2 bytes @ 0x33
  2521  0000E6                     	ds	1
  2522  0000E7                     Port_CheckQuadType@Pair2:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x34
  2526  0000E7                     	ds	1
  2527  0000E8                     ??_LCD_Init:
  2528  0000E8                     Port_CheckQuadType@Output:
  2529                           	opt stack 0
  2530                           
  2531                           ; 1 bytes @ 0x35
  2532  0000E8                     	ds	1
  2533  0000E9                     Port_CheckPortType@pInput:
  2534                           	opt stack 0
  2535  0000E9                     Port_SetQuadType@pInput:
  2536                           	opt stack 0
  2537                           
  2538                           ; 2 bytes @ 0x36
  2539  0000E9                     	ds	1
  2540  0000EA                     LCD_Init@i:
  2541                           	opt stack 0
  2542                           
  2543                           ; 2 bytes @ 0x37
  2544  0000EA                     	ds	1
  2545  0000EB                     Port_CheckPortType@pDrive:
  2546                           	opt stack 0
  2547  0000EB                     Port_SetQuadType@pQuad:
  2548                           	opt stack 0
  2549                           
  2550                           ; 1 bytes @ 0x38
  2551  0000EB                     	ds	1
  2552  0000EC                     Port_CheckPortType@Output:
  2553                           	opt stack 0
  2554  0000EC                     Port_SetQuadType@pType:
  2555                           	opt stack 0
  2556                           
  2557                           ; 1 bytes @ 0x39
  2558  0000EC                     	ds	1
  2559  0000ED                     Port_SetQuadType@Output:
  2560                           	opt stack 0
  2561  0000ED                     Port_SetType@pInput:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x3A
  2565  0000ED                     	ds	1
  2566  0000EE                     HMI_Init@in:
  2567                           	opt stack 0
  2568                           
  2569                           ; 2 bytes @ 0x3B
  2570  0000EE                     	ds	1
  2571  0000EF                     Port_SetType@pType:
  2572                           	opt stack 0
  2573                           
  2574                           ; 1 bytes @ 0x3C
  2575  0000EF                     	ds	1
  2576  0000F0                     ??_Port_SetType:
  2577                           
  2578                           ; 1 bytes @ 0x3D
  2579  0000F0                     	ds	2
  2580  0000F2                     Port_SetType@Output:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x3F
  2584  0000F2                     	ds	1
  2585  0000F3                     tblptru	equ	0xFF8
  2586                           tblptrh	equ	0xFF7
  2587                           tblptrl	equ	0xFF6
  2588                           tablat	equ	0xFF5
  2589                           postinc0	equ	0xFEE
  2590                           wreg	equ	0xFE8
  2591                           postdec1	equ	0xFE5
  2592                           fsr1h	equ	0xFE2
  2593                           fsr1l	equ	0xFE1
  2594                           
  2595                           ; 1 bytes @ 0x40
  2596                           
  2597                           	psect	cstackCOMRAM
  2598  000001                     __pcstackCOMRAM:
  2599                           	opt stack 0
  2600  000001                     i2Byte_SetBit@pInput:
  2601                           	opt stack 0
  2602  000001                     i2Byte_GetZone@pInput:
  2603                           	opt stack 0
  2604  000001                     i2delay_us@us:
  2605                           	opt stack 0
  2606  000001                     i2MXK_Queue@pCallback:
  2607                           	opt stack 0
  2608                           
  2609                           ; 3 bytes @ 0x0
  2610  000001                     	ds	2
  2611  000003                     i2Byte_SetBit@pBit:
  2612                           	opt stack 0
  2613  000003                     i2Byte_GetZone@pMax:
  2614                           	opt stack 0
  2615  000003                     i2delay_us@u:
  2616                           	opt stack 0
  2617                           
  2618                           ; 4 bytes @ 0x2
  2619  000003                     	ds	1
  2620  000004                     i2Byte_SetBit@pValue:
  2621                           	opt stack 0
  2622  000004                     i2Byte_GetZone@pChunk:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x3
  2626  000004                     	ds	1
  2627  000005                     ??i2_Byte_SetBit:
  2628  000005                     i2Byte_GetZone@pChunkSize:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x4
  2632  000005                     	ds	1
  2633  000006                     ??i2_Byte_GetZone:
  2634                           
  2635                           ; 1 bytes @ 0x5
  2636  000006                     	ds	1
  2637  000007                     i2Byte_GetZone@MASK:
  2638                           	opt stack 0
  2639  000007                     i2MXK_SwitchTo@CUR:
  2640                           	opt stack 0
  2641                           
  2642                           ; 1 bytes @ 0x6
  2643  000007                     	ds	1
  2644  000008                     i2Byte_GetZone@Offset:
  2645                           	opt stack 0
  2646  000008                     i2MXK_SwitchTo@pModule:
  2647                           	opt stack 0
  2648                           
  2649                           ; 1 bytes @ 0x7
  2650  000008                     	ds	1
  2651  000009                     i2Byte_GetZone@Output:
  2652                           	opt stack 0
  2653                           
  2654                           ; 1 bytes @ 0x8
  2655  000009                     	ds	1
  2656  00000A                     i2Byte_GetPair@pInput:
  2657                           	opt stack 0
  2658                           
  2659                           ; 2 bytes @ 0x9
  2660  00000A                     	ds	2
  2661  00000C                     i2Byte_GetPair@pPair:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0xB
  2665  00000C                     	ds	1
  2666  00000D                     i2Word_GetPair@pInput:
  2667                           	opt stack 0
  2668                           
  2669                           ; 2 bytes @ 0xC
  2670  00000D                     	ds	2
  2671  00000F                     i2Word_GetPair@pPair:
  2672                           	opt stack 0
  2673                           
  2674                           ; 1 bytes @ 0xE
  2675  00000F                     	ds	1
  2676  000010                     i2Port_SetPin@pInput:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0xF
  2680  000010                     	ds	2
  2681  000012                     i2Port_SetPin@pPin:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x11
  2685  000012                     	ds	1
  2686  000013                     i2Port_SetPin@pValue:
  2687                           	opt stack 0
  2688                           
  2689                           ; 1 bytes @ 0x12
  2690  000013                     	ds	1
  2691  000014                     i2Port_SetPin@Type:
  2692                           	opt stack 0
  2693                           
  2694                           ; 1 bytes @ 0x13
  2695  000014                     	ds	1
  2696  000015                     
  2697                           ; 1 bytes @ 0x14
  2698  000015                     	ds	2
  2699  000017                     ??_ISR_Function:
  2700                           
  2701                           ; 1 bytes @ 0x16
  2702  000017                     	ds	18
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           postinc0	equ	0xFEE
  2708                           wreg	equ	0xFE8
  2709                           postdec1	equ	0xFE5
  2710                           fsr1h	equ	0xFE2
  2711                           fsr1l	equ	0xFE1
  2712                           
  2713 ;;
  2714 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2715 ;;
  2716 ;; *************** function _main *****************
  2717 ;; Defined at:
  2718 ;;		line 438 in file "main.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  down            1   16[BANK1 ] unsigned char 
  2723 ;;  left            1   15[BANK1 ] unsigned char 
  2724 ;;  up              1   14[BANK1 ] unsigned char 
  2725 ;;  right           1   13[BANK1 ] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;Total ram usage:        4 bytes
  2740 ;; Hardware stack levels required when called:   17
  2741 ;; This function calls:
  2742 ;;		_Console_Init
  2743 ;;		_Console_Render
  2744 ;;		_FunctInitButton
  2745 ;;		_HMI_DIPSwitch
  2746 ;;		_HMI_DownSwitch
  2747 ;;		_HMI_Init
  2748 ;;		_HMI_LeftSwitch
  2749 ;;		_HMI_Poll
  2750 ;;		_HMI_Render
  2751 ;;		_HMI_RightSwitch
  2752 ;;		_HMI_SetNumber
  2753 ;;		_HMI_UpSwitch
  2754 ;;		_ISR_Enable
  2755 ;;		_InitADC
  2756 ;;		_InitSerialCommunication
  2757 ;;		_Init_Timer0
  2758 ;;		_LCD_Init
  2759 ;;		_LED_Init
  2760 ;;		_MXK_BlockSwitchTo
  2761 ;;		_MXK_DIPSwitch
  2762 ;;		_MXK_Dequeue
  2763 ;;		_MXK_Init
  2764 ;;		_MXK_Release
  2765 ;;		_MXK_TestButton
  2766 ;;		_Robot_Init
  2767 ;;		_printf
  2768 ;; This function is called by:
  2769 ;;		Startup code after reset
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text0
  2774  01198C                     __ptext0:
  2775                           	opt stack 0
  2776  01198C                     _main:
  2777                           	opt stack 14
  2778                           
  2779                           ;main.c: 441: MXK_Init();
  2780                           
  2781                           ;incstack = 0
  2782  01198C  EC27  F08C         	call	_MXK_Init	;wreg free
  2783                           
  2784                           ;main.c: 442: Init_Timer0();
  2785  011990  ECC2  F09C         	call	_Init_Timer0	;wreg free
  2786                           
  2787                           ;main.c: 443: InitSerialCommunication();
  2788  011994  EC59  F09C         	call	_InitSerialCommunication	;wreg free
  2789                           
  2790                           ;main.c: 444: Robot_Init();
  2791  011998  ECE6  F09C         	call	_Robot_Init	;wreg free
  2792                           
  2793                           ;main.c: 445: ISR_Enable();
  2794  01199C  EC83  F09D         	call	_ISR_Enable	;wreg free
  2795                           
  2796                           ;main.c: 446: FunctInitButton();
  2797  0119A0  ECCF  F094         	call	_FunctInitButton	;wreg free
  2798                           
  2799                           ;main.c: 447: InitADC();
  2800  0119A4  EC79  F099         	call	_InitADC	;wreg free
  2801                           
  2802                           ;main.c: 448: LED_Init(eLED2);
  2803  0119A8  0E01               	movlw	1
  2804  0119AA  EC9F  F097         	call	_LED_Init
  2805                           
  2806                           ;main.c: 450: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2807  0119AE  0E01               	movlw	1
  2808  0119B0  EC93  F09A         	call	_MXK_BlockSwitchTo
  2809  0119B4  0900               	iorlw	0
  2810  0119B6  B4D8               	btfsc	status,2,c
  2811  0119B8  D00C               	goto	l2242
  2812                           
  2813                           ;main.c: 451: HMI_Init();
  2814  0119BA  ECC6  F088         	call	_HMI_Init	;wreg free
  2815                           
  2816                           ;main.c: 452: LCD_Init();
  2817  0119BE  ECE0  F08A         	call	_LCD_Init	;wreg free
  2818                           
  2819                           ;main.c: 453: Console_Init();
  2820  0119C2  ECE7  F095         	call	_Console_Init	;wreg free
  2821                           
  2822                           ;main.c: 454: if (MXK_Release())
  2823  0119C6  EC9E  F09C         	call	_MXK_Release	;wreg free
  2824  0119CA  0900               	iorlw	0
  2825  0119CC  A4D8               	btfss	status,2,c
  2826                           
  2827                           ;main.c: 455: MXK_Dequeue();
  2828  0119CE  ECE5  F09A         	call	_MXK_Dequeue	;wreg free
  2829  0119D2                     l2242:
  2830                           
  2831                           ;main.c: 460: HMI_Poll();
  2832                           
  2833                           ;main.c: 456: }
  2834                           ;main.c: 458: for(;;) {
  2835  0119D2  ECB8  F096         	call	_HMI_Poll	;wreg free
  2836                           
  2837                           ;main.c: 462: bool down = HMIBoard.mDown.mGetState();
  2838  0119D6  EE21  F059         	lfsr	2,_HMIBoard+45
  2839  0119DA  D801               	call	u10568
  2840  0119DC  D00A               	goto	u10569
  2841  0119DE                     u10568:
  2842  0119DE  0005               	push	
  2843  0119E0  6EFA               	movwf	pclath,c
  2844  0119E2  50DE               	movf	postinc2,w,c
  2845  0119E4  6EFD               	movwf	tosl,c
  2846  0119E6  50DE               	movf	postinc2,w,c
  2847  0119E8  6EFE               	movwf	tosh,c
  2848  0119EA  50DE               	movf	postinc2,w,c
  2849  0119EC  6EFF               	movwf	tosu,c
  2850  0119EE  50FA               	movf	pclath,w,c
  2851  0119F0  0012               	return		;indir
  2852  0119F2                     u10569:
  2853  0119F2  0101               	movlb	1	; () banked
  2854  0119F4  6FE7               	movwf	main@down& (0+255),b
  2855                           
  2856                           ; BSR set to: 1
  2857                           ;main.c: 463: bool right = HMIBoard.mRight.mGetState();
  2858  0119F6  EE21  F03B         	lfsr	2,_HMIBoard+15
  2859  0119FA  D801               	call	u10578
  2860  0119FC  D00A               	goto	u10579
  2861  0119FE                     u10578:
  2862  0119FE  0005               	push	
  2863  011A00  6EFA               	movwf	pclath,c
  2864  011A02  50DE               	movf	postinc2,w,c
  2865  011A04  6EFD               	movwf	tosl,c
  2866  011A06  50DE               	movf	postinc2,w,c
  2867  011A08  6EFE               	movwf	tosh,c
  2868  011A0A  50DE               	movf	postinc2,w,c
  2869  011A0C  6EFF               	movwf	tosu,c
  2870  011A0E  50FA               	movf	pclath,w,c
  2871  011A10  0012               	return		;indir
  2872  011A12                     u10579:
  2873  011A12  0101               	movlb	1	; () banked
  2874  011A14  6FE4               	movwf	main@right& (0+255),b
  2875                           
  2876                           ; BSR set to: 1
  2877                           ;main.c: 464: bool up = HMIBoard.mUp.mGetState();
  2878  011A16  EE21  F04F         	lfsr	2,_HMIBoard+35
  2879  011A1A  D801               	call	u10588
  2880  011A1C  D00A               	goto	u10589
  2881  011A1E                     u10588:
  2882  011A1E  0005               	push	
  2883  011A20  6EFA               	movwf	pclath,c
  2884  011A22  50DE               	movf	postinc2,w,c
  2885  011A24  6EFD               	movwf	tosl,c
  2886  011A26  50DE               	movf	postinc2,w,c
  2887  011A28  6EFE               	movwf	tosh,c
  2888  011A2A  50DE               	movf	postinc2,w,c
  2889  011A2C  6EFF               	movwf	tosu,c
  2890  011A2E  50FA               	movf	pclath,w,c
  2891  011A30  0012               	return		;indir
  2892  011A32                     u10589:
  2893  011A32  0101               	movlb	1	; () banked
  2894  011A34  6FE5               	movwf	main@up& (0+255),b
  2895                           
  2896                           ; BSR set to: 1
  2897                           ;main.c: 465: bool left = HMIBoard.mLeft.mGetState();
  2898  011A36  EE21  F045         	lfsr	2,_HMIBoard+25
  2899  011A3A  D801               	call	u10598
  2900  011A3C  D00A               	goto	u10599
  2901  011A3E                     u10598:
  2902  011A3E  0005               	push	
  2903  011A40  6EFA               	movwf	pclath,c
  2904  011A42  50DE               	movf	postinc2,w,c
  2905  011A44  6EFD               	movwf	tosl,c
  2906  011A46  50DE               	movf	postinc2,w,c
  2907  011A48  6EFE               	movwf	tosh,c
  2908  011A4A  50DE               	movf	postinc2,w,c
  2909  011A4C  6EFF               	movwf	tosu,c
  2910  011A4E  50FA               	movf	pclath,w,c
  2911  011A50  0012               	return		;indir
  2912  011A52                     u10599:
  2913  011A52  0101               	movlb	1	; () banked
  2914  011A54  6FE6               	movwf	main@left& (0+255),b
  2915                           
  2916                           ; BSR set to: 1
  2917                           ;main.c: 467: if (down) {
  2918  011A56  51E7               	movf	main@down& (0+255),w,b
  2919  011A58  B4D8               	btfsc	status,2,c
  2920  011A5A  D005               	goto	l2244
  2921                           
  2922                           ; BSR set to: 1
  2923                           ;main.c: 468: mode = 1;
  2924  011A5C  0E00               	movlw	0
  2925  011A5E  0100               	movlb	0	; () banked
  2926  011A60  6F76               	movwf	(_mode+1)& (0+255),b
  2927  011A62  0E01               	movlw	1
  2928  011A64  6F75               	movwf	_mode& (0+255),b
  2929  011A66                     l2244:
  2930                           
  2931                           ;main.c: 469: }
  2932                           ;main.c: 477: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2933                           
  2934                           ; BSR set to: 0
  2935  011A66  0E01               	movlw	1
  2936  011A68  EC93  F09A         	call	_MXK_BlockSwitchTo
  2937  011A6C  0900               	iorlw	0
  2938  011A6E  B4D8               	btfsc	status,2,c
  2939  011A70  D7B0               	goto	l2242
  2940                           
  2941                           ;main.c: 478: if (mode == 1){
  2942  011A72  0100               	movlb	0	; () banked
  2943  011A74  0575               	decf	_mode& (0+255),w,b
  2944  011A76  1176               	iorwf	(_mode+1)& (0+255),w,b
  2945  011A78  A4D8               	btfss	status,2,c
  2946  011A7A  D01C               	goto	l2246
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;main.c: 481: printf("%c",(char)35);
  2950  011A7C  0EFB               	movlw	low STR_1
  2951  011A7E  6FC8               	movwf	printf@f& (0+255),b
  2952  011A80  0EFF               	movlw	high STR_1
  2953  011A82  6FC9               	movwf	(printf@f+1)& (0+255),b
  2954  011A84  0E00               	movlw	0
  2955  011A86  6FCB               	movwf	(?_printf+3)& (0+255),b
  2956  011A88  0E23               	movlw	35
  2957  011A8A  6FCA               	movwf	(?_printf+2)& (0+255),b
  2958  011A8C  EC84  F089         	call	_printf	;wreg free
  2959                           
  2960                           ;main.c: 482: printf("test\n");
  2961  011A90  0EF0               	movlw	low STR_31
  2962  011A92  0100               	movlb	0	; () banked
  2963  011A94  6FC8               	movwf	printf@f& (0+255),b
  2964  011A96  0EFF               	movlw	high STR_31
  2965  011A98  6FC9               	movwf	(printf@f+1)& (0+255),b
  2966  011A9A  EC84  F089         	call	_printf	;wreg free
  2967                           
  2968                           ;main.c: 484: Console_Render();
  2969  011A9E  EC59  F086         	call	_Console_Render	;wreg free
  2970                           
  2971                           ;main.c: 485: HMI_SetNumber (100);
  2972  011AA2  0E00               	movlw	0
  2973  011AA4  0100               	movlb	0	; () banked
  2974  011AA6  6FCA               	movwf	(HMI_SetNumber@pInput+1)& (0+255),b
  2975  011AA8  0E64               	movlw	100
  2976  011AAA  6FC9               	movwf	HMI_SetNumber@pInput& (0+255),b
  2977  011AAC  ECF4  F09B         	call	_HMI_SetNumber	;wreg free
  2978                           
  2979                           ;main.c: 486: HMI_Render();
  2980  011AB0  ECAF  F09A         	call	_HMI_Render	;wreg free
  2981  011AB4                     l2246:
  2982                           
  2983                           ;main.c: 487: }
  2984                           ;main.c: 489: Console_Render();
  2985  011AB4  EC59  F086         	call	_Console_Render	;wreg free
  2986                           
  2987                           ;main.c: 490: if (MXK_Release())
  2988  011AB8  EC9E  F09C         	call	_MXK_Release	;wreg free
  2989  011ABC  0900               	iorlw	0
  2990  011ABE  B4D8               	btfsc	status,2,c
  2991  011AC0  D788               	goto	l2242
  2992                           
  2993                           ;main.c: 491: MXK_Dequeue();
  2994  011AC2  ECE5  F09A         	call	_MXK_Dequeue	;wreg free
  2995                           
  2996                           ;main.c: 492: }
  2997                           ;main.c: 493: }
  2998  011AC6  D785               	goto	l2242
  2999  011AC8                     __end_of_main:
  3000                           	opt stack 0
  3001                           tosu	equ	0xFFF
  3002                           tosh	equ	0xFFE
  3003                           tosl	equ	0xFFD
  3004                           pclath	equ	0xFFA
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           postinc0	equ	0xFEE
  3010                           wreg	equ	0xFE8
  3011                           postdec1	equ	0xFE5
  3012                           fsr1h	equ	0xFE2
  3013                           fsr1l	equ	0xFE1
  3014                           postinc2	equ	0xFDE
  3015                           status	equ	0xFD8
  3016                           
  3017 ;; *************** function _printf *****************
  3018 ;; Defined at:
  3019 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3022 ;;		 -> STR_35(5), STR_34(3), STR_33(39), STR_32(42), 
  3023 ;;		 -> STR_31(6), STR_30(3), STR_29(21), STR_28(3), 
  3024 ;;		 -> STR_27(19), STR_26(28), STR_25(20), STR_24(3), 
  3025 ;;		 -> STR_23(19), STR_22(19), STR_21(19), STR_20(19), 
  3026 ;;		 -> STR_19(19), STR_18(19), STR_17(19), STR_16(19), 
  3027 ;;		 -> STR_15(3), STR_14(19), STR_13(28), STR_12(20), 
  3028 ;;		 -> STR_11(3), STR_10(19), STR_9(19), STR_8(19), 
  3029 ;;		 -> STR_7(19), STR_6(19), STR_5(19), STR_4(19), 
  3030 ;;		 -> STR_3(16), STR_2(19), STR_1(3), 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  tmpval          4    0        struct .
  3033 ;;  cp              3    0        PTR const unsigned char 
  3034 ;;  val             2   30[BANK0 ] unsigned int 
  3035 ;;  ap              2   28[BANK0 ] PTR void [1]
  3036 ;;		 -> ?_printf(2), 
  3037 ;;  len             2    0        unsigned int 
  3038 ;;  c               1   32[BANK0 ] char 
  3039 ;;  prec            1   27[BANK0 ] char 
  3040 ;;  flag            1   26[BANK0 ] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2   21[BANK0 ] int 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:       12 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:   12
  3057 ;; This function calls:
  3058 ;;		___lwdiv
  3059 ;;		___lwmod
  3060 ;;		_putch
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;;		_Sensor_Observe2
  3064 ;;		_Closest_Object2
  3065 ;;		_Sensor_Observe
  3066 ;;		_Closest_Object
  3067 ;;		_pop
  3068 ;;		_push
  3069 ;;		_giveID
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text1
  3074  011308                     __ptext1:
  3075                           	opt stack 0
  3076  011308                     _printf:
  3077                           	opt stack 18
  3078                           
  3079                           ;doprnt.c: 466: va_list ap;
  3080                           ;doprnt.c: 499: signed char c;
  3081                           ;doprnt.c: 506: signed char prec;
  3082                           ;doprnt.c: 508: unsigned char flag;
  3083                           ;doprnt.c: 523: union {
  3084                           ;doprnt.c: 524: unsigned long vd;
  3085                           ;doprnt.c: 525: double integ;
  3086                           ;doprnt.c: 526: } tmpval;
  3087                           ;doprnt.c: 528: unsigned int val;
  3088                           ;doprnt.c: 529: unsigned len;
  3089                           ;doprnt.c: 530: const char * cp;
  3090                           ;doprnt.c: 533: *ap = __va_start();
  3091                           
  3092                           ;incstack = 0
  3093  011308  0ECA               	movlw	low (?_printf+2)
  3094  01130A  0100               	movlb	0	; () banked
  3095  01130C  6FCF               	movwf	printf@ap& (0+255),b
  3096  01130E  0E00               	movlw	high (?_printf+2)
  3097  011310  6FD0               	movwf	(printf@ap+1)& (0+255),b
  3098                           
  3099                           ;doprnt.c: 536: while(c = *f++) {
  3100  011312  D09E               	goto	u9600
  3101  011314                     
  3102                           ; BSR set to: 0
  3103                           ;doprnt.c: 538: if(c != '%')
  3104                           
  3105                           ; BSR set to: 0
  3106  011314  0E25               	movlw	37
  3107  011316  19D3               	xorwf	printf@c& (0+255),w,b
  3108  011318  B4D8               	btfsc	status,2,c
  3109  01131A  D004               	goto	l2311
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;doprnt.c: 540: {
  3113                           ;doprnt.c: 541: (putch(c) );
  3114  01131C  51D3               	movf	printf@c& (0+255),w,b
  3115  01131E  EC47  F09D         	call	_putch
  3116                           
  3117                           ;doprnt.c: 542: continue;
  3118  011322  D096               	goto	u9600
  3119  011324                     l2311:
  3120                           
  3121                           ;doprnt.c: 543: }
  3122                           ;doprnt.c: 548: flag = 0;
  3123  011324  0E00               	movlw	0
  3124  011326  0100               	movlb	0	; () banked
  3125  011328  6FCD               	movwf	printf@flag& (0+255),b
  3126                           
  3127                           ;doprnt.c: 635: switch(c = *f++) {
  3128  01132A  D00E               	goto	l2312
  3129  01132C                     
  3130                           ; BSR set to: 0
  3131                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3132                           
  3133                           ; BSR set to: 0
  3134  01132C  C0CF  FFD9         	movff	printf@ap,fsr2l
  3135  011330  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  3136  011334  50DF               	movf	indf2,w,c
  3137  011336  6FD3               	movwf	printf@c& (0+255),b
  3138                           
  3139                           ; BSR set to: 0
  3140  011338  0E02               	movlw	2
  3141  01133A  27CF               	addwf	printf@ap& (0+255),f,b
  3142  01133C  0E00               	movlw	0
  3143  01133E  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  3144  011340                     
  3145                           ; BSR set to: 0
  3146                           ;doprnt.c: 809: (putch(c) );
  3147                           
  3148                           ; BSR set to: 0
  3149  011340  51D3               	movf	printf@c& (0+255),w,b
  3150  011342  EC47  F09D         	call	_putch
  3151                           
  3152                           ;doprnt.c: 810: continue;
  3153  011346  D084               	goto	u9600
  3154  011348                     l2312:
  3155  011348  C0C8  FFF6         	movff	printf@f,tblptrl
  3156  01134C  C0C9  FFF7         	movff	printf@f+1,tblptrh
  3157  011350  0100               	movlb	0	; () banked
  3158  011352  4BC8               	infsnz	printf@f& (0+255),f,b
  3159  011354  2BC9               	incf	(printf@f+1)& (0+255),f,b
  3160  011356                     	if	0	;tblptru may be non-zero
  3161  011356                     	endif
  3162  011356                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3163  011356  0E00               	movlw	low (__mediumconst shr (0+16))
  3164  011358  6EF8               	movwf	tblptru,c
  3165  01135A                     	endif
  3166  01135A  0008               	tblrd		*
  3167  01135C  CFF5 F0D3          	movff	tablat,printf@c
  3168  011360  51D3               	movf	printf@c& (0+255),w,b
  3169                           
  3170                           ; Switch size 1, requested type "space"
  3171                           ; Number of cases is 4, Range of values is 0 to 105
  3172                           ; switch strategies available:
  3173                           ; Name         Instructions Cycles
  3174                           ; simple_byte           13     7 (average)
  3175                           ;	Chosen strategy is simple_byte
  3176  011362  0A00               	xorlw	0	; case 0
  3177  011364  B4D8               	btfsc	status,2,c
  3178  011366  0012               	return	
  3179  011368  0A63               	xorlw	99	; case 99
  3180  01136A  B4D8               	btfsc	status,2,c
  3181  01136C  D7DF               	goto	l2318
  3182  01136E  0A07               	xorlw	7	; case 100
  3183  011370  B4D8               	btfsc	status,2,c
  3184  011372  D003               	goto	l2317
  3185  011374  0A0D               	xorlw	13	; case 105
  3186  011376  A4D8               	btfss	status,2,c
  3187  011378  D7E3               	goto	l2319
  3188  01137A                     l2317:
  3189                           
  3190                           ;doprnt.c: 1253: {
  3191                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3192                           
  3193                           ; BSR set to: 0
  3194  01137A  C0CF  FFD9         	movff	printf@ap,fsr2l
  3195  01137E  C0D0  FFDA         	movff	printf@ap+1,fsr2h
  3196  011382  CFDE F0D1          	movff	postinc2,printf@val
  3197  011386  CFDD F0D2          	movff	postdec2,printf@val+1
  3198  01138A  0E02               	movlw	2
  3199  01138C  0100               	movlb	0	; () banked
  3200  01138E  27CF               	addwf	printf@ap& (0+255),f,b
  3201  011390  0E00               	movlw	0
  3202  011392  23D0               	addwfc	(printf@ap+1)& (0+255),f,b
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;doprnt.c: 1261: if((int)val < 0) {
  3206  011394  AFD2               	btfss	(printf@val+1)& (0+255),7,b
  3207  011396  D006               	goto	l2320
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;doprnt.c: 1262: flag |= 0x03;
  3211  011398  0E03               	movlw	3
  3212  01139A  13CD               	iorwf	printf@flag& (0+255),f,b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;doprnt.c: 1263: val = -val;
  3216  01139C  6DD1               	negf	printf@val& (0+255),b
  3217  01139E  1FD2               	comf	(printf@val+1)& (0+255),f,b
  3218  0113A0  B0D8               	btfsc	status,0,c
  3219  0113A2  2BD2               	incf	(printf@val+1)& (0+255),f,b
  3220  0113A4                     l2320:
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;doprnt.c: 1264: }
  3224                           ;doprnt.c: 1266: }
  3225                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3226                           
  3227                           ; BSR set to: 0
  3228  0113A4  0E01               	movlw	1
  3229  0113A6  6FD3               	movwf	printf@c& (0+255),b
  3230  0113A8                     l13412:
  3231                           
  3232                           ; BSR set to: 0
  3233  0113A8  0E05               	movlw	5
  3234  0113AA  19D3               	xorwf	printf@c& (0+255),w,b
  3235  0113AC  B4D8               	btfsc	status,2,c
  3236  0113AE  D015               	goto	u9580
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;doprnt.c: 1306: if(val < dpowers[c])
  3240                           
  3241                           ; BSR set to: 0
  3242                           
  3243                           ; BSR set to: 0
  3244  0113B0  51D3               	movf	printf@c& (0+255),w,b
  3245  0113B2  0D02               	mullw	2
  3246  0113B4  0EBD               	movlw	low _dpowers
  3247  0113B6  24F3               	addwf	prodl,w,c
  3248  0113B8  6EF6               	movwf	tblptrl,c
  3249  0113BA  0EFC               	movlw	high _dpowers
  3250  0113BC  20F4               	addwfc	prodh,w,c
  3251  0113BE  6EF7               	movwf	tblptrh,c
  3252  0113C0                     	if	1	;There are 3 active tblptr bytes
  3253  0113C0  6AF8               	clrf	tblptru,c
  3254  0113C2  0E00               	movlw	low (__mediumconst shr (0+16))
  3255  0113C4  22F8               	addwfc	tblptru,f,c
  3256  0113C6                     	endif
  3257  0113C6  0009               	tblrd		*+
  3258  0113C8  50F5               	movf	tablat,w,c
  3259  0113CA  5DD1               	subwf	printf@val& (0+255),w,b
  3260  0113CC  0009               	tblrd		*+
  3261  0113CE  50F5               	movf	tablat,w,c
  3262  0113D0  59D2               	subwfb	(printf@val+1)& (0+255),w,b
  3263  0113D2  A0D8               	btfss	status,0,c
  3264  0113D4  D002               	goto	u9580
  3265                           
  3266                           ; BSR set to: 0
  3267                           
  3268                           ; BSR set to: 0
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;doprnt.c: 1307: break;
  3272  0113D6  2BD3               	incf	printf@c& (0+255),f,b
  3273  0113D8  D7E7               	goto	l13412
  3274  0113DA                     u9580:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;doprnt.c: 1422: {
  3278                           ;doprnt.c: 1438: if(flag & 0x03)
  3279                           
  3280                           ; BSR set to: 0
  3281  0113DA  C0CD  F0CC         	movff	printf@flag,??_printf
  3282  0113DE  0E03               	movlw	3
  3283  0113E0  17CC               	andwf	??_printf& (0+255),f,b
  3284  0113E2  B4D8               	btfsc	status,2,c
  3285  0113E4  D003               	goto	l2324
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;doprnt.c: 1439: (putch('-') );
  3289  0113E6  0E2D               	movlw	45
  3290  0113E8  EC47  F09D         	call	_putch
  3291  0113EC                     l2324:
  3292                           
  3293                           ;doprnt.c: 1469: }
  3294                           ;doprnt.c: 1472: prec = c;
  3295  0113EC  C0D3  F0CE         	movff	printf@c,printf@prec
  3296                           
  3297                           ;doprnt.c: 1474: while(prec--) {
  3298  0113F0  D02A               	goto	l2325
  3299  0113F2                     
  3300                           ;doprnt.c: 1478: {
  3301                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3302  0113F2  0100               	movlb	0	; () banked
  3303  0113F4  51CE               	movf	printf@prec& (0+255),w,b
  3304  0113F6  0D02               	mullw	2
  3305  0113F8  0EBD               	movlw	low _dpowers
  3306  0113FA  24F3               	addwf	prodl,w,c
  3307  0113FC  6EF6               	movwf	tblptrl,c
  3308  0113FE  0EFC               	movlw	high _dpowers
  3309  011400  20F4               	addwfc	prodh,w,c
  3310  011402  6EF7               	movwf	tblptrh,c
  3311  011404                     	if	1	;There are 3 active tblptr bytes
  3312  011404  6AF8               	clrf	tblptru,c
  3313  011406  0E00               	movlw	low (__mediumconst shr (0+16))
  3314  011408  22F8               	addwfc	tblptru,f,c
  3315  01140A                     	endif
  3316  01140A  0009               	tblrd		*+
  3317  01140C  CFF5 F0B5          	movff	tablat,___lwdiv@divisor
  3318  011410  000A               	tblrd		*-
  3319  011412  CFF5 F0B6          	movff	tablat,___lwdiv@divisor+1
  3320  011416  C0D1  F0B3         	movff	printf@val,___lwdiv@dividend
  3321  01141A  C0D2  F0B4         	movff	printf@val+1,___lwdiv@dividend+1
  3322  01141E  ECF3  F097         	call	___lwdiv	;wreg free
  3323  011422  C0B3  F0BA         	movff	?___lwdiv,___lwmod@dividend
  3324  011426  C0B4  F0BB         	movff	?___lwdiv+1,___lwmod@dividend+1
  3325  01142A  0E00               	movlw	0
  3326  01142C  0100               	movlb	0	; () banked
  3327  01142E  6FBD               	movwf	(___lwmod@divisor+1)& (0+255),b
  3328  011430  0E0A               	movlw	10
  3329  011432  6FBC               	movwf	___lwmod@divisor& (0+255),b
  3330  011434  EC9B  F099         	call	___lwmod	;wreg free
  3331  011438  0100               	movlb	0	; () banked
  3332  01143A  51BA               	movf	?___lwmod& (0+255),w,b
  3333  01143C  0F30               	addlw	48
  3334  01143E  6FD3               	movwf	printf@c& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 1523: }
  3338                           ;doprnt.c: 1524: (putch(c) );
  3339  011440  51D3               	movf	printf@c& (0+255),w,b
  3340  011442  EC47  F09D         	call	_putch
  3341  011446                     l2325:
  3342  011446  0100               	movlb	0	; () banked
  3343  011448  07CE               	decf	printf@prec& (0+255),f,b
  3344  01144A  29CE               	incf	printf@prec& (0+255),w,b
  3345  01144C  A4D8               	btfss	status,2,c
  3346  01144E  D7D1               	goto	l2326
  3347  011450                     u9600:
  3348                           
  3349                           ; BSR set to: 0
  3350                           
  3351                           ; BSR set to: 0
  3352  011450  C0C8  FFF6         	movff	printf@f,tblptrl
  3353  011454  C0C9  FFF7         	movff	printf@f+1,tblptrh
  3354  011458  0100               	movlb	0	; () banked
  3355  01145A  4BC8               	infsnz	printf@f& (0+255),f,b
  3356  01145C  2BC9               	incf	(printf@f+1)& (0+255),f,b
  3357  01145E                     	if	0	;tblptru may be non-zero
  3358  01145E                     	endif
  3359  01145E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3360  01145E  0E00               	movlw	low (__mediumconst shr (0+16))
  3361  011460  6EF8               	movwf	tblptru,c
  3362  011462                     	endif
  3363  011462  0008               	tblrd		*
  3364  011464  CFF5 F0D3          	movff	tablat,printf@c
  3365  011468  51D3               	movf	printf@c& (0+255),w,b
  3366  01146A  B4D8               	btfsc	status,2,c
  3367  01146C  0012               	return	
  3368  01146E  D752               	goto	l2310
  3369  011470                     __end_of_printf:
  3370                           	opt stack 0
  3371                           tosu	equ	0xFFF
  3372                           tosh	equ	0xFFE
  3373                           tosl	equ	0xFFD
  3374                           pclath	equ	0xFFA
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           postdec1	equ	0xFE5
  3384                           fsr1h	equ	0xFE2
  3385                           fsr1l	equ	0xFE1
  3386                           indf2	equ	0xFDF
  3387                           postinc2	equ	0xFDE
  3388                           postdec2	equ	0xFDD
  3389                           fsr2h	equ	0xFDA
  3390                           fsr2l	equ	0xFD9
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _putch *****************
  3394 ;; Defined at:
  3395 ;;		line 454 in file "Library/Console.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;  c               1    wreg     unsigned char 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  c               1   20[BANK0 ] unsigned char 
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      void 
  3402 ;; Registers used:
  3403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;Total ram usage:        1 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:   11
  3416 ;; This function calls:
  3417 ;;		_Console_PrintChar
  3418 ;; This function is called by:
  3419 ;;		_printf
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text2
  3424  013A8E                     __ptext2:
  3425                           	opt stack 0
  3426  013A8E                     _putch:
  3427                           	opt stack 18
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;incstack = 0
  3431                           ;putch@c stored from wreg
  3432  013A8E  0100               	movlb	0	; () banked
  3433  013A90  6FC7               	movwf	putch@c& (0+255),b
  3434                           
  3435                           ;Console.c: 456: Console_PrintChar(c);
  3436  013A92  0100               	movlb	0	; () banked
  3437  013A94  51C7               	movf	putch@c& (0+255),w,b
  3438  013A96  EC38  F08A         	call	_Console_PrintChar
  3439  013A9A  0012               	return		;funcret
  3440  013A9C                     __end_of_putch:
  3441                           	opt stack 0
  3442                           tosu	equ	0xFFF
  3443                           tosh	equ	0xFFE
  3444                           tosl	equ	0xFFD
  3445                           pclath	equ	0xFFA
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1h	equ	0xFE2
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           postdec2	equ	0xFDD
  3460                           fsr2h	equ	0xFDA
  3461                           fsr2l	equ	0xFD9
  3462                           status	equ	0xFD8
  3463                           
  3464 ;; *************** function _Console_PrintChar *****************
  3465 ;; Defined at:
  3466 ;;		line 322 in file "Library/Console.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  pInput          1    wreg     unsigned char 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  pInput          1   19[BANK0 ] unsigned char 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;Total ram usage:        4 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:   10
  3487 ;; This function calls:
  3488 ;;		_Console_Backspace
  3489 ;;		_Console_FormFeed
  3490 ;;		_Console_IncrementCursor
  3491 ;;		_Console_NewLine
  3492 ;;		_Console_ResetCursor
  3493 ;;		_Console_Tab
  3494 ;; This function is called by:
  3495 ;;		_putch
  3496 ;;		_Console_PrintString
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text3
  3501  011470                     __ptext3:
  3502                           	opt stack 0
  3503  011470                     _Console_PrintChar:
  3504                           	opt stack 18
  3505                           
  3506                           ;incstack = 0
  3507                           ;Console_PrintChar@pInput stored from wreg
  3508  011470  0100               	movlb	0	; () banked
  3509  011472  6FC6               	movwf	Console_PrintChar@pInput& (0+255),b
  3510                           
  3511                           ;Console.c: 324: switch(pInput)
  3512  011474  D08A               	goto	l1036
  3513  011476                     
  3514                           ;Console.c: 327: case '\n':
  3515                           ;Console.c: 328: Console_NewLine();
  3516  011476  EC17  F094         	call	_Console_NewLine	;wreg free
  3517                           
  3518                           ;Console.c: 329: return;
  3519  01147A  0012               	return	
  3520  01147C                     
  3521                           ;Console.c: 331: Console_Backspace();
  3522  01147C  EC70  F098         	call	_Console_Backspace	;wreg free
  3523                           
  3524                           ;Console.c: 332: return;
  3525  011480  0012               	return	
  3526  011482                     
  3527                           ;Console.c: 334: Console_FormFeed();
  3528  011482  EC7C  F095         	call	_Console_FormFeed	;wreg free
  3529                           
  3530                           ;Console.c: 335: return;
  3531  011486  0012               	return	
  3532  011488                     
  3533                           ;Console.c: 337: Console_Tab();
  3534  011488  ECAD  F091         	call	_Console_Tab	;wreg free
  3535                           
  3536                           ;Console.c: 338: return;
  3537  01148C  0012               	return	
  3538  01148E                     
  3539                           ;Console.c: 340: Console_IncrementCursor();
  3540  01148E  EC75  F097         	call	_Console_IncrementCursor	;wreg free
  3541                           
  3542                           ;Console.c: 341: return;
  3543  011492  0012               	return	
  3544  011494                     
  3545                           ;Console.c: 343: Console_ResetCursor();
  3546  011494  EC68  F09C         	call	_Console_ResetCursor	;wreg free
  3547                           
  3548                           ;Console.c: 344: return;
  3549  011498  0012               	return	
  3550  01149A                     
  3551                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3552                           
  3553                           ;Console.c: 349: default:
  3554  01149A  C0C6  F0C3         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3555  01149E  0E7F               	movlw	127
  3556  0114A0  0100               	movlb	0	; () banked
  3557  0114A2  17C3               	andwf	??_Console_PrintChar& (0+255),f,b
  3558  0114A4  518E               	movf	_lBufferY& (0+255),w,b
  3559  0114A6  0D14               	mullw	20
  3560  0114A8  0EF0               	movlw	low _lBuffer
  3561  0114AA  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3562  0114AC  0E02               	movlw	high _lBuffer
  3563  0114AE  6FC5               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3564  0114B0  50F3               	movf	prodl,w,c
  3565  0114B2  27C4               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3566  0114B4  50F4               	movf	prodh,w,c
  3567  0114B6  23C5               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3568  0114B8  518F               	movf	_lBufferX& (0+255),w,b
  3569  0114BA  0D01               	mullw	1
  3570  0114BC  50F3               	movf	prodl,w,c
  3571  0114BE  25C4               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3572  0114C0  6ED9               	movwf	fsr2l,c
  3573  0114C2  50F4               	movf	prodh,w,c
  3574  0114C4  21C5               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3575  0114C6  6EDA               	movwf	fsr2h,c
  3576  0114C8  50DF               	movf	indf2,w,c
  3577  0114CA  0B7F               	andlw	127
  3578  0114CC  19C3               	xorwf	??_Console_PrintChar& (0+255),w,b
  3579  0114CE  B4D8               	btfsc	status,2,c
  3580  0114D0  D023               	goto	l1047
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;Console.c: 351: {
  3584                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3585  0114D2  0E01               	movlw	1
  3586  0114D4  6FFF               	movwf	_change& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589  0114D6  518E               	movf	_lBufferY& (0+255),w,b
  3590  0114D8  0D14               	mullw	20
  3591  0114DA  0EF0               	movlw	low _lBuffer
  3592  0114DC  6FC3               	movwf	??_Console_PrintChar& (0+255),b
  3593  0114DE  0E02               	movlw	high _lBuffer
  3594  0114E0  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3595  0114E2  50F3               	movf	prodl,w,c
  3596  0114E4  27C3               	addwf	??_Console_PrintChar& (0+255),f,b
  3597  0114E6  50F4               	movf	prodh,w,c
  3598  0114E8  23C4               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3599  0114EA  518F               	movf	_lBufferX& (0+255),w,b
  3600  0114EC  0D01               	mullw	1
  3601  0114EE  50F3               	movf	prodl,w,c
  3602  0114F0  25C3               	addwf	??_Console_PrintChar& (0+255),w,b
  3603  0114F2  6ED9               	movwf	fsr2l,c
  3604  0114F4  50F4               	movf	prodh,w,c
  3605  0114F6  21C4               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3606  0114F8  6EDA               	movwf	fsr2h,c
  3607  0114FA  51C6               	movf	Console_PrintChar@pInput& (0+255),w,b
  3608  0114FC  0980               	iorlw	128
  3609  0114FE  6EDF               	movwf	indf2,c
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  3613  011500  518E               	movf	_lBufferY& (0+255),w,b
  3614  011502  0D02               	mullw	2
  3615  011504  0E8C               	movlw	low _lCBuffer
  3616  011506  24F3               	addwf	prodl,w,c
  3617  011508  6ED9               	movwf	fsr2l,c
  3618  01150A  0E02               	movlw	high _lCBuffer
  3619  01150C  20F4               	addwfc	prodh,w,c
  3620  01150E  6EDA               	movwf	fsr2h,c
  3621  011510  C0FD  FFDE         	movff	_gForecolour,postinc2
  3622  011514  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  3623  011518                     l1047:
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;Console.c: 354: }
  3627                           ;Console.c: 368: if(Console_IncrementCursor())
  3628                           
  3629                           ; BSR set to: 0
  3630  011518  EC75  F097         	call	_Console_IncrementCursor	;wreg free
  3631  01151C  0900               	iorlw	0
  3632  01151E  B4D8               	btfsc	status,2,c
  3633  011520  0012               	return	
  3634                           
  3635                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  3636  011522  C0C6  F0C3         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  3637  011526  0E7F               	movlw	127
  3638  011528  0100               	movlb	0	; () banked
  3639  01152A  17C3               	andwf	??_Console_PrintChar& (0+255),f,b
  3640  01152C  518E               	movf	_lBufferY& (0+255),w,b
  3641  01152E  0D14               	mullw	20
  3642  011530  0EF0               	movlw	low _lBuffer
  3643  011532  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3644  011534  0E02               	movlw	high _lBuffer
  3645  011536  6FC5               	movwf	(??_Console_PrintChar+2)& (0+255),b
  3646  011538  50F3               	movf	prodl,w,c
  3647  01153A  27C4               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  3648  01153C  50F4               	movf	prodh,w,c
  3649  01153E  23C5               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  3650  011540  518F               	movf	_lBufferX& (0+255),w,b
  3651  011542  0D01               	mullw	1
  3652  011544  50F3               	movf	prodl,w,c
  3653  011546  25C4               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  3654  011548  6ED9               	movwf	fsr2l,c
  3655  01154A  50F4               	movf	prodh,w,c
  3656  01154C  21C5               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  3657  01154E  6EDA               	movwf	fsr2h,c
  3658  011550  50DF               	movf	indf2,w,c
  3659  011552  0B7F               	andlw	127
  3660  011554  19C3               	xorwf	??_Console_PrintChar& (0+255),w,b
  3661  011556  B4D8               	btfsc	status,2,c
  3662  011558  0012               	return	
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  3666  01155A  0E01               	movlw	1
  3667  01155C  6FFF               	movwf	_change& (0+255),b
  3668                           
  3669                           ; BSR set to: 0
  3670  01155E  518E               	movf	_lBufferY& (0+255),w,b
  3671  011560  0D14               	mullw	20
  3672  011562  0EF0               	movlw	low _lBuffer
  3673  011564  6FC3               	movwf	??_Console_PrintChar& (0+255),b
  3674  011566  0E02               	movlw	high _lBuffer
  3675  011568  6FC4               	movwf	(??_Console_PrintChar+1)& (0+255),b
  3676  01156A  50F3               	movf	prodl,w,c
  3677  01156C  27C3               	addwf	??_Console_PrintChar& (0+255),f,b
  3678  01156E  50F4               	movf	prodh,w,c
  3679  011570  23C4               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  3680  011572  518F               	movf	_lBufferX& (0+255),w,b
  3681  011574  0D01               	mullw	1
  3682  011576  50F3               	movf	prodl,w,c
  3683  011578  25C3               	addwf	??_Console_PrintChar& (0+255),w,b
  3684  01157A  6ED9               	movwf	fsr2l,c
  3685  01157C  50F4               	movf	prodh,w,c
  3686  01157E  21C4               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  3687  011580  6EDA               	movwf	fsr2h,c
  3688  011582  51C6               	movf	Console_PrintChar@pInput& (0+255),w,b
  3689  011584  0980               	iorlw	128
  3690  011586  6EDF               	movwf	indf2,c
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;Console.c: 372: };
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;Console.c: 371: return;
  3697                           
  3698                           ; BSR set to: 0
  3699                           
  3700                           ; BSR set to: 0
  3701  011588  0012               	return	
  3702  01158A                     l1036:
  3703                           
  3704                           ; BSR set to: 0
  3705  01158A  0100               	movlb	0	; () banked
  3706  01158C  51C6               	movf	Console_PrintChar@pInput& (0+255),w,b
  3707                           
  3708                           ; Switch size 1, requested type "space"
  3709                           ; Number of cases is 8, Range of values is 7 to 35
  3710                           ; switch strategies available:
  3711                           ; Name         Instructions Cycles
  3712                           ; simple_byte           25    13 (average)
  3713                           ;	Chosen strategy is simple_byte
  3714  01158E  0A07               	xorlw	7	; case 7
  3715  011590  B4D8               	btfsc	status,2,c
  3716  011592  D77D               	goto	l1043
  3717  011594  0A0F               	xorlw	15	; case 8
  3718  011596  B4D8               	btfsc	status,2,c
  3719  011598  D771               	goto	l1040
  3720  01159A  0A01               	xorlw	1	; case 9
  3721  01159C  B4D8               	btfsc	status,2,c
  3722  01159E  D774               	goto	l1042
  3723  0115A0  0A03               	xorlw	3	; case 10
  3724  0115A2  B4D8               	btfsc	status,2,c
  3725  0115A4  D768               	goto	l1037
  3726  0115A6  0A06               	xorlw	6	; case 12
  3727  0115A8  B4D8               	btfsc	status,2,c
  3728  0115AA  D76B               	goto	l1041
  3729  0115AC  0A01               	xorlw	1	; case 13
  3730  0115AE  B4D8               	btfsc	status,2,c
  3731  0115B0  D762               	goto	l1037
  3732  0115B2  0A2D               	xorlw	45	; case 32
  3733  0115B4  B4D8               	btfsc	status,2,c
  3734  0115B6  D771               	goto	l1045
  3735  0115B8  0A03               	xorlw	3	; case 35
  3736  0115BA  B4D8               	btfsc	status,2,c
  3737  0115BC  D76B               	goto	l1044
  3738  0115BE  D76D               	goto	l1045
  3739  0115C0                     __end_of_Console_PrintChar:
  3740                           	opt stack 0
  3741                           tosu	equ	0xFFF
  3742                           tosh	equ	0xFFE
  3743                           tosl	equ	0xFFD
  3744                           pclath	equ	0xFFA
  3745                           tblptru	equ	0xFF8
  3746                           tblptrh	equ	0xFF7
  3747                           tblptrl	equ	0xFF6
  3748                           tablat	equ	0xFF5
  3749                           prodh	equ	0xFF4
  3750                           prodl	equ	0xFF3
  3751                           postinc0	equ	0xFEE
  3752                           wreg	equ	0xFE8
  3753                           postdec1	equ	0xFE5
  3754                           fsr1h	equ	0xFE2
  3755                           fsr1l	equ	0xFE1
  3756                           indf2	equ	0xFDF
  3757                           postinc2	equ	0xFDE
  3758                           postdec2	equ	0xFDD
  3759                           fsr2h	equ	0xFDA
  3760                           fsr2l	equ	0xFD9
  3761                           status	equ	0xFD8
  3762                           
  3763 ;; *************** function _Console_Tab *****************
  3764 ;; Defined at:
  3765 ;;		line 260 in file "Library/Console.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;		None
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  c               1   15[BANK0 ] unsigned char 
  3770 ;;  i               1   14[BANK0 ] unsigned char 
  3771 ;;  t               1   13[BANK0 ] unsigned char 
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  1    wreg      void 
  3774 ;; Registers used:
  3775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3783 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;Total ram usage:        8 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    9
  3788 ;; This function calls:
  3789 ;;		_Console_ClearCursor
  3790 ;;		_Console_IncrementCursor
  3791 ;;		___awdiv
  3792 ;; This function is called by:
  3793 ;;		_Console_PrintChar
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text4
  3798  01235A                     __ptext4:
  3799                           	opt stack 0
  3800  01235A                     _Console_Tab:
  3801                           	opt stack 18
  3802                           
  3803                           ;Console.c: 262: UINT8 i = 0;
  3804                           
  3805                           ;incstack = 0
  3806  01235A  0E00               	movlw	0
  3807  01235C  0100               	movlb	0	; () banked
  3808  01235E  6FC1               	movwf	Console_Tab@i& (0+255),b
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  3812  012360  0EFA               	movlw	250
  3813  012362  2443               	addwf	_gCursor,w,c
  3814  012364  6FB3               	movwf	___awdiv@dividend& (0+255),b
  3815  012366  0EFF               	movlw	255
  3816  012368  2044               	addwfc	_gCursor+1,w,c
  3817  01236A  6FB4               	movwf	(___awdiv@dividend+1)& (0+255),b
  3818  01236C  0E00               	movlw	0
  3819  01236E  6FB6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3820  012370  0E06               	movlw	6
  3821  012372  6FB5               	movwf	___awdiv@divisor& (0+255),b
  3822  012374  EC53  F093         	call	___awdiv	;wreg free
  3823  012378  0100               	movlb	0	; () banked
  3824  01237A  51B3               	movf	?___awdiv& (0+255),w,b
  3825  01237C  6FC2               	movwf	Console_Tab@c& (0+255),b
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;Console.c: 264: UINT8 t = c/4;
  3829  01237E  C0C2  F0B3         	movff	Console_Tab@c,___awdiv@dividend
  3830  012382  6BB4               	clrf	(___awdiv@dividend+1)& (0+255),b
  3831  012384  0E00               	movlw	0
  3832  012386  6FB6               	movwf	(___awdiv@divisor+1)& (0+255),b
  3833  012388  0E04               	movlw	4
  3834  01238A  6FB5               	movwf	___awdiv@divisor& (0+255),b
  3835  01238C  EC53  F093         	call	___awdiv	;wreg free
  3836  012390  0100               	movlb	0	; () banked
  3837  012392  51B3               	movf	?___awdiv& (0+255),w,b
  3838  012394  6FC0               	movwf	Console_Tab@t& (0+255),b
  3839                           
  3840                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  3841  012396  0E00               	movlw	0
  3842  012398  6FC1               	movwf	Console_Tab@i& (0+255),b
  3843  01239A  D006               	goto	l1009
  3844  01239C                     
  3845                           ; BSR set to: 0
  3846                           ;Console.c: 266: {
  3847                           ;Console.c: 267: Console_ClearCursor();
  3848                           
  3849                           ; BSR set to: 0
  3850  01239C  EC32  F09B         	call	_Console_ClearCursor	;wreg free
  3851                           
  3852                           ;Console.c: 268: Console_IncrementCursor();
  3853  0123A0  EC75  F097         	call	_Console_IncrementCursor	;wreg free
  3854  0123A4  0100               	movlb	0	; () banked
  3855  0123A6  2BC1               	incf	Console_Tab@i& (0+255),f,b
  3856  0123A8                     l1009:
  3857                           
  3858                           ; BSR set to: 0
  3859                           
  3860                           ; BSR set to: 0
  3861  0123A8  51C0               	movf	Console_Tab@t& (0+255),w,b
  3862  0123AA  0D04               	mullw	4
  3863  0123AC  1EF3               	comf	prodl,f,c
  3864  0123AE  1EF4               	comf	prodh,f,c
  3865  0123B0  4AF3               	infsnz	prodl,f,c
  3866  0123B2  2AF4               	incf	prodh,f,c
  3867  0123B4  51C2               	movf	Console_Tab@c& (0+255),w,b
  3868  0123B6  6FBB               	movwf	??_Console_Tab& (0+255),b
  3869  0123B8  6BBC               	clrf	(??_Console_Tab+1)& (0+255),b
  3870  0123BA  50F3               	movf	prodl,w,c
  3871  0123BC  27BB               	addwf	??_Console_Tab& (0+255),f,b
  3872  0123BE  50F4               	movf	prodh,w,c
  3873  0123C0  23BC               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3874  0123C2  1FBB               	comf	??_Console_Tab& (0+255),f,b
  3875  0123C4  1FBC               	comf	(??_Console_Tab+1)& (0+255),f,b
  3876  0123C6  4BBB               	infsnz	??_Console_Tab& (0+255),f,b
  3877  0123C8  2BBC               	incf	(??_Console_Tab+1)& (0+255),f,b
  3878  0123CA  0E04               	movlw	4
  3879  0123CC  27BB               	addwf	??_Console_Tab& (0+255),f,b
  3880  0123CE  0E00               	movlw	0
  3881  0123D0  23BC               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  3882  0123D2  51C1               	movf	Console_Tab@i& (0+255),w,b
  3883  0123D4  6FBD               	movwf	(??_Console_Tab+2)& (0+255),b
  3884  0123D6  6BBE               	clrf	(??_Console_Tab+3)& (0+255),b
  3885  0123D8  51BB               	movf	??_Console_Tab& (0+255),w,b
  3886  0123DA  5DBD               	subwf	(??_Console_Tab+2)& (0+255),w,b
  3887  0123DC  51BE               	movf	(??_Console_Tab+3)& (0+255),w,b
  3888  0123DE  0A80               	xorlw	128
  3889  0123E0  6FBF               	movwf	(??_Console_Tab+4)& (0+255),b
  3890  0123E2  51BC               	movf	(??_Console_Tab+1)& (0+255),w,b
  3891  0123E4  0A80               	xorlw	128
  3892  0123E6  59BF               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  3893  0123E8  B0D8               	btfsc	status,0,c
  3894  0123EA  0012               	return	
  3895  0123EC  D7D7               	goto	l1010
  3896  0123EE                     __end_of_Console_Tab:
  3897                           	opt stack 0
  3898                           tosu	equ	0xFFF
  3899                           tosh	equ	0xFFE
  3900                           tosl	equ	0xFFD
  3901                           pclath	equ	0xFFA
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           postdec1	equ	0xFE5
  3911                           fsr1h	equ	0xFE2
  3912                           fsr1l	equ	0xFE1
  3913                           indf2	equ	0xFDF
  3914                           postinc2	equ	0xFDE
  3915                           postdec2	equ	0xFDD
  3916                           fsr2h	equ	0xFDA
  3917                           fsr2l	equ	0xFD9
  3918                           status	equ	0xFD8
  3919                           
  3920 ;; *************** function ___awdiv *****************
  3921 ;; Defined at:
  3922 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  dividend        2    0[BANK0 ] int 
  3925 ;;  divisor         2    2[BANK0 ] int 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  quotient        2    6[BANK0 ] int 
  3928 ;;  sign            1    5[BANK0 ] unsigned char 
  3929 ;;  counter         1    4[BANK0 ] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  2    0[BANK0 ] int 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;Total ram usage:        8 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    7
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_Console_Tab
  3950 ;;		_ADCAverage
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text5
  3955  0126A6                     __ptext5:
  3956                           	opt stack 0
  3957  0126A6                     ___awdiv:
  3958                           	opt stack 19
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;incstack = 0
  3962  0126A6  0E00               	movlw	0
  3963  0126A8  0100               	movlb	0	; () banked
  3964  0126AA  6FB8               	movwf	___awdiv@sign& (0+255),b
  3965                           
  3966                           ; BSR set to: 0
  3967  0126AC  AFB6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  3968  0126AE  D006               	goto	l2497
  3969                           
  3970                           ; BSR set to: 0
  3971  0126B0  6DB5               	negf	___awdiv@divisor& (0+255),b
  3972  0126B2  1FB6               	comf	(___awdiv@divisor+1)& (0+255),f,b
  3973  0126B4  B0D8               	btfsc	status,0,c
  3974  0126B6  2BB6               	incf	(___awdiv@divisor+1)& (0+255),f,b
  3975                           
  3976                           ; BSR set to: 0
  3977  0126B8  0E01               	movlw	1
  3978  0126BA  6FB8               	movwf	___awdiv@sign& (0+255),b
  3979  0126BC                     l2497:
  3980                           
  3981                           ; BSR set to: 0
  3982                           
  3983                           ; BSR set to: 0
  3984  0126BC  AFB4               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  3985  0126BE  D006               	goto	l2498
  3986                           
  3987                           ; BSR set to: 0
  3988  0126C0  6DB3               	negf	___awdiv@dividend& (0+255),b
  3989  0126C2  1FB4               	comf	(___awdiv@dividend+1)& (0+255),f,b
  3990  0126C4  B0D8               	btfsc	status,0,c
  3991  0126C6  2BB4               	incf	(___awdiv@dividend+1)& (0+255),f,b
  3992                           
  3993                           ; BSR set to: 0
  3994  0126C8  0E01               	movlw	1
  3995  0126CA  1BB8               	xorwf	___awdiv@sign& (0+255),f,b
  3996  0126CC                     l2498:
  3997                           
  3998                           ; BSR set to: 0
  3999                           
  4000                           ; BSR set to: 0
  4001  0126CC  0E00               	movlw	0
  4002  0126CE  6FBA               	movwf	(___awdiv@quotient+1)& (0+255),b
  4003  0126D0  0E00               	movlw	0
  4004  0126D2  6FB9               	movwf	___awdiv@quotient& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007  0126D4  51B5               	movf	___awdiv@divisor& (0+255),w,b
  4008  0126D6  11B6               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4009  0126D8  B4D8               	btfsc	status,2,c
  4010  0126DA  D01C               	goto	l2505
  4011                           
  4012                           ; BSR set to: 0
  4013  0126DC  0E01               	movlw	1
  4014  0126DE  6FB7               	movwf	___awdiv@counter& (0+255),b
  4015  0126E0  D004               	goto	l2500
  4016  0126E2                     
  4017                           ; BSR set to: 0
  4018                           
  4019                           ; BSR set to: 0
  4020  0126E2  90D8               	bcf	status,0,c
  4021  0126E4  37B5               	rlcf	___awdiv@divisor& (0+255),f,b
  4022  0126E6  37B6               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4023  0126E8  2BB7               	incf	___awdiv@counter& (0+255),f,b
  4024  0126EA                     l2500:
  4025                           
  4026                           ; BSR set to: 0
  4027                           
  4028                           ; BSR set to: 0
  4029  0126EA  AFB6               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4030  0126EC  D7FA               	goto	l2501
  4031  0126EE                     u8190:
  4032                           
  4033                           ; BSR set to: 0
  4034                           
  4035                           ; BSR set to: 0
  4036                           
  4037                           ; BSR set to: 0
  4038  0126EE  90D8               	bcf	status,0,c
  4039  0126F0  37B9               	rlcf	___awdiv@quotient& (0+255),f,b
  4040  0126F2  37BA               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4041                           
  4042                           ; BSR set to: 0
  4043  0126F4  51B5               	movf	___awdiv@divisor& (0+255),w,b
  4044  0126F6  5DB3               	subwf	___awdiv@dividend& (0+255),w,b
  4045  0126F8  51B6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4046  0126FA  59B4               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4047  0126FC  A0D8               	btfss	status,0,c
  4048  0126FE  D005               	goto	l2504
  4049                           
  4050                           ; BSR set to: 0
  4051  012700  51B5               	movf	___awdiv@divisor& (0+255),w,b
  4052  012702  5FB3               	subwf	___awdiv@dividend& (0+255),f,b
  4053  012704  51B6               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4054  012706  5BB4               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4055                           
  4056                           ; BSR set to: 0
  4057  012708  81B9               	bsf	___awdiv@quotient& (0+255),0,b
  4058  01270A                     l2504:
  4059                           
  4060                           ; BSR set to: 0
  4061                           
  4062                           ; BSR set to: 0
  4063  01270A  90D8               	bcf	status,0,c
  4064  01270C  33B6               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4065  01270E  33B5               	rrcf	___awdiv@divisor& (0+255),f,b
  4066                           
  4067                           ; BSR set to: 0
  4068  012710  2FB7               	decfsz	___awdiv@counter& (0+255),f,b
  4069  012712  D7ED               	goto	u8190
  4070  012714                     l2505:
  4071                           
  4072                           ; BSR set to: 0
  4073                           
  4074                           ; BSR set to: 0
  4075                           
  4076                           ; BSR set to: 0
  4077  012714  51B8               	movf	___awdiv@sign& (0+255),w,b
  4078  012716  B4D8               	btfsc	status,2,c
  4079  012718  D004               	goto	l2506
  4080                           
  4081                           ; BSR set to: 0
  4082  01271A  6DB9               	negf	___awdiv@quotient& (0+255),b
  4083  01271C  1FBA               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4084  01271E  B0D8               	btfsc	status,0,c
  4085  012720  2BBA               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4086  012722                     l2506:
  4087                           
  4088                           ; BSR set to: 0
  4089                           
  4090                           ; BSR set to: 0
  4091  012722  C0B9  F0B3         	movff	___awdiv@quotient,?___awdiv
  4092  012726  C0BA  F0B4         	movff	___awdiv@quotient+1,?___awdiv+1
  4093  01272A  0012               	return	
  4094  01272C                     __end_of___awdiv:
  4095                           	opt stack 0
  4096                           tosu	equ	0xFFF
  4097                           tosh	equ	0xFFE
  4098                           tosl	equ	0xFFD
  4099                           pclath	equ	0xFFA
  4100                           tblptru	equ	0xFF8
  4101                           tblptrh	equ	0xFF7
  4102                           tblptrl	equ	0xFF6
  4103                           tablat	equ	0xFF5
  4104                           prodh	equ	0xFF4
  4105                           prodl	equ	0xFF3
  4106                           postinc0	equ	0xFEE
  4107                           wreg	equ	0xFE8
  4108                           postdec1	equ	0xFE5
  4109                           fsr1h	equ	0xFE2
  4110                           fsr1l	equ	0xFE1
  4111                           indf2	equ	0xFDF
  4112                           postinc2	equ	0xFDE
  4113                           postdec2	equ	0xFDD
  4114                           fsr2h	equ	0xFDA
  4115                           fsr2l	equ	0xFD9
  4116                           status	equ	0xFD8
  4117                           
  4118 ;; *************** function _Console_IncrementCursor *****************
  4119 ;; Defined at:
  4120 ;;		line 243 in file "Library/Console.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;		None
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      unsigned char 
  4127 ;; Registers used:
  4128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;Total ram usage:        2 bytes
  4139 ;; Hardware stack levels used:    1
  4140 ;; Hardware stack levels required when called:    8
  4141 ;; This function calls:
  4142 ;;		_Console_FormFeed
  4143 ;;		_Console_NewLine
  4144 ;; This function is called by:
  4145 ;;		_Console_Tab
  4146 ;;		_Console_PrintChar
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text6
  4151  012EEA                     __ptext6:
  4152                           	opt stack 0
  4153  012EEA                     _Console_IncrementCursor:
  4154                           	opt stack 18
  4155                           
  4156                           ;Console.c: 246: lBufferX += 1;
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;incstack = 0
  4160  012EEA  0100               	movlb	0	; () banked
  4161  012EEC  2B8F               	incf	_lBufferX& (0+255),f,b
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;Console.c: 248: gCursor.x += 6;
  4165  012EEE  0E06               	movlw	6
  4166  012EF0  2643               	addwf	_gCursor,f,c
  4167  012EF2  0E00               	movlw	0
  4168  012EF4  2244               	addwfc	_gCursor+1,f,c
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  4172  012EF6  0E06               	movlw	6
  4173  012EF8  2443               	addwf	_gCursor,w,c
  4174  012EFA  6FB7               	movwf	??_Console_IncrementCursor& (0+255),b
  4175  012EFC  0E00               	movlw	0
  4176  012EFE  2044               	addwfc	_gCursor+1,w,c
  4177  012F00  6FB8               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4178  012F02  BFB8               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4179  012F04  D007               	goto	l1004
  4180  012F06  51B8               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4181  012F08  E103               	bnz	u8100
  4182  012F0A  0E80               	movlw	128
  4183  012F0C  5DB7               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4184  012F0E  B0D8               	btfsc	status,0,c
  4185  012F10                     u8100:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;Console.c: 250: Console_NewLine();
  4189  012F10  EC17  F094         	call	_Console_NewLine	;wreg free
  4190  012F14                     l1004:
  4191                           
  4192                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  4193  012F14  0E08               	movlw	8
  4194  012F16  2445               	addwf	_gCursor+2,w,c
  4195  012F18  0100               	movlb	0	; () banked
  4196  012F1A  6FB7               	movwf	??_Console_IncrementCursor& (0+255),b
  4197  012F1C  0E00               	movlw	0
  4198  012F1E  2046               	addwfc	_gCursor+3,w,c
  4199  012F20  6FB8               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  4200  012F22  BFB8               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  4201  012F24  D00A               	goto	l1005
  4202  012F26  51B8               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  4203  012F28  E104               	bnz	u8110
  4204  012F2A  0E80               	movlw	128
  4205  012F2C  5DB7               	subwf	??_Console_IncrementCursor& (0+255),w,b
  4206  012F2E  A0D8               	btfss	status,0,c
  4207  012F30  D004               	goto	l1005
  4208  012F32                     u8110:
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;Console.c: 252: {
  4212                           ;Console.c: 253: Console_FormFeed();
  4213  012F32  EC7C  F095         	call	_Console_FormFeed	;wreg free
  4214                           
  4215                           ;Console.c: 254: return 1;
  4216  012F36  0E01               	movlw	1
  4217  012F38  0012               	return	
  4218  012F3A                     l1005:
  4219                           
  4220                           ;Console.c: 255: }
  4221                           ;Console.c: 257: return 0;
  4222  012F3A  0E00               	movlw	0
  4223  012F3C  0012               	return	
  4224  012F3E                     __end_of_Console_IncrementCursor:
  4225                           	opt stack 0
  4226                           tosu	equ	0xFFF
  4227                           tosh	equ	0xFFE
  4228                           tosl	equ	0xFFD
  4229                           pclath	equ	0xFFA
  4230                           tblptru	equ	0xFF8
  4231                           tblptrh	equ	0xFF7
  4232                           tblptrl	equ	0xFF6
  4233                           tablat	equ	0xFF5
  4234                           prodh	equ	0xFF4
  4235                           prodl	equ	0xFF3
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           postdec1	equ	0xFE5
  4239                           fsr1h	equ	0xFE2
  4240                           fsr1l	equ	0xFE1
  4241                           indf2	equ	0xFDF
  4242                           postinc2	equ	0xFDE
  4243                           postdec2	equ	0xFDD
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function _Console_NewLine *****************
  4249 ;; Defined at:
  4250 ;;		line 175 in file "Library/Console.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;		None
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;Total ram usage:        2 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    7
  4271 ;; This function calls:
  4272 ;;		Nothing
  4273 ;; This function is called by:
  4274 ;;		_Console_IncrementCursor
  4275 ;;		_Console_PrintChar
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text7
  4280  01282E                     __ptext7:
  4281                           	opt stack 0
  4282  01282E                     _Console_NewLine:
  4283                           	opt stack 18
  4284                           
  4285                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  4286                           
  4287                           ;incstack = 0
  4288  01282E  D02D               	goto	l983
  4289  012830                     
  4290                           ;Console.c: 179: {
  4291                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  4292  012830  0100               	movlb	0	; () banked
  4293  012832  518E               	movf	_lBufferY& (0+255),w,b
  4294  012834  0D14               	mullw	20
  4295  012836  0EF0               	movlw	low _lBuffer
  4296  012838  6FB3               	movwf	??_Console_NewLine& (0+255),b
  4297  01283A  0E02               	movlw	high _lBuffer
  4298  01283C  6FB4               	movwf	(??_Console_NewLine+1)& (0+255),b
  4299  01283E  50F3               	movf	prodl,w,c
  4300  012840  27B3               	addwf	??_Console_NewLine& (0+255),f,b
  4301  012842  50F4               	movf	prodh,w,c
  4302  012844  23B4               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4303  012846  518F               	movf	_lBufferX& (0+255),w,b
  4304  012848  0D01               	mullw	1
  4305  01284A  50F3               	movf	prodl,w,c
  4306  01284C  25B3               	addwf	??_Console_NewLine& (0+255),w,b
  4307  01284E  6ED9               	movwf	fsr2l,c
  4308  012850  50F4               	movf	prodh,w,c
  4309  012852  21B4               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4310  012854  6EDA               	movwf	fsr2h,c
  4311  012856  50DF               	movf	indf2,w,c
  4312  012858  B4D8               	btfsc	status,2,c
  4313  01285A  D016               	goto	l985
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  4317  01285C  0E01               	movlw	1
  4318  01285E  6FFF               	movwf	_change& (0+255),b
  4319                           
  4320                           ; BSR set to: 0
  4321  012860  518E               	movf	_lBufferY& (0+255),w,b
  4322  012862  0D14               	mullw	20
  4323  012864  0EF0               	movlw	low _lBuffer
  4324  012866  6FB3               	movwf	??_Console_NewLine& (0+255),b
  4325  012868  0E02               	movlw	high _lBuffer
  4326  01286A  6FB4               	movwf	(??_Console_NewLine+1)& (0+255),b
  4327  01286C  50F3               	movf	prodl,w,c
  4328  01286E  27B3               	addwf	??_Console_NewLine& (0+255),f,b
  4329  012870  50F4               	movf	prodh,w,c
  4330  012872  23B4               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  4331  012874  518F               	movf	_lBufferX& (0+255),w,b
  4332  012876  0D01               	mullw	1
  4333  012878  50F3               	movf	prodl,w,c
  4334  01287A  25B3               	addwf	??_Console_NewLine& (0+255),w,b
  4335  01287C  6ED9               	movwf	fsr2l,c
  4336  01287E  50F4               	movf	prodh,w,c
  4337  012880  21B4               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  4338  012882  6EDA               	movwf	fsr2h,c
  4339  012884  0E80               	movlw	128
  4340  012886  6EDF               	movwf	indf2,c
  4341  012888                     l985:
  4342                           
  4343                           ; BSR set to: 0
  4344                           ;Console.c: 182: lBufferX ++;
  4345                           
  4346                           ; BSR set to: 0
  4347  012888  2B8F               	incf	_lBufferX& (0+255),f,b
  4348  01288A                     l983:
  4349                           
  4350                           ; BSR set to: 0
  4351  01288A  0E13               	movlw	19
  4352  01288C  0100               	movlb	0	; () banked
  4353  01288E  658F               	cpfsgt	_lBufferX& (0+255),b
  4354  012890  D7CF               	goto	l984
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;Console.c: 183: }
  4358                           ;Console.c: 185: lBufferX = 0;
  4359                           
  4360                           ; BSR set to: 0
  4361  012892  0E00               	movlw	0
  4362  012894  6F8F               	movwf	_lBufferX& (0+255),b
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;Console.c: 186: lBufferY ++;
  4366  012896  2B8E               	incf	_lBufferY& (0+255),f,b
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;Console.c: 188: gCursor.y += 8;
  4370  012898  0E08               	movlw	8
  4371  01289A  2645               	addwf	_gCursor+2,f,c
  4372  01289C  0E00               	movlw	0
  4373  01289E  2246               	addwfc	_gCursor+3,f,c
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;Console.c: 189: gCursor.x = 6;
  4377  0128A0  0E00               	movlw	0
  4378  0128A2  6E44               	movwf	_gCursor+1,c
  4379  0128A4  0E06               	movlw	6
  4380  0128A6  6E43               	movwf	_gCursor,c
  4381                           
  4382                           ; BSR set to: 0
  4383  0128A8  0012               	return		;funcret
  4384  0128AA                     __end_of_Console_NewLine:
  4385                           	opt stack 0
  4386                           tosu	equ	0xFFF
  4387                           tosh	equ	0xFFE
  4388                           tosl	equ	0xFFD
  4389                           pclath	equ	0xFFA
  4390                           tblptru	equ	0xFF8
  4391                           tblptrh	equ	0xFF7
  4392                           tblptrl	equ	0xFF6
  4393                           tablat	equ	0xFF5
  4394                           prodh	equ	0xFF4
  4395                           prodl	equ	0xFF3
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           postdec1	equ	0xFE5
  4399                           fsr1h	equ	0xFE2
  4400                           fsr1l	equ	0xFE1
  4401                           indf2	equ	0xFDF
  4402                           postinc2	equ	0xFDE
  4403                           postdec2	equ	0xFDD
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _Console_FormFeed *****************
  4409 ;; Defined at:
  4410 ;;		line 192 in file "Library/Console.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;		None
  4413 ;; Auto vars:     Size  Location     Type
  4414 ;;  y               1    3[BANK0 ] unsigned char 
  4415 ;;  x               1    2[BANK0 ] unsigned char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;Total ram usage:        4 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    7
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_Console_IncrementCursor
  4436 ;;		_Console_PrintChar
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text8
  4441  012AF8                     __ptext8:
  4442                           	opt stack 0
  4443  012AF8                     _Console_FormFeed:
  4444                           	opt stack 18
  4445                           
  4446                           ;Console.c: 195: lBufferX = 0;
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;incstack = 0
  4450  012AF8  0E00               	movlw	0
  4451  012AFA  0100               	movlb	0	; () banked
  4452  012AFC  6F8F               	movwf	_lBufferX& (0+255),b
  4453                           
  4454                           ;Console.c: 196: lBufferY = 0;
  4455  012AFE  0E00               	movlw	0
  4456  012B00  6F8E               	movwf	_lBufferY& (0+255),b
  4457                           
  4458                           ;Console.c: 197: UINT8 x, y;
  4459                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  4460  012B02  0E00               	movlw	0
  4461  012B04  6FB6               	movwf	Console_FormFeed@y& (0+255),b
  4462  012B06                     l11668:
  4463                           
  4464                           ; BSR set to: 0
  4465  012B06  0E0E               	movlw	14
  4466  012B08  65B6               	cpfsgt	Console_FormFeed@y& (0+255),b
  4467  012B0A  D001               	goto	l990
  4468  012B0C  D020               	goto	u7950
  4469  012B0E                     l990:
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  4473                           
  4474                           ; BSR set to: 0
  4475  012B0E  0E00               	movlw	0
  4476  012B10  6FB5               	movwf	Console_FormFeed@x& (0+255),b
  4477  012B12                     l11674:
  4478                           
  4479                           ; BSR set to: 0
  4480  012B12  0E13               	movlw	19
  4481  012B14  65B5               	cpfsgt	Console_FormFeed@x& (0+255),b
  4482  012B16  D001               	goto	l992
  4483  012B18  D018               	goto	u7940
  4484  012B1A                     l992:
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  4488                           
  4489                           ; BSR set to: 0
  4490  012B1A  0E01               	movlw	1
  4491  012B1C  6FFF               	movwf	_change& (0+255),b
  4492                           
  4493                           ; BSR set to: 0
  4494  012B1E  51B6               	movf	Console_FormFeed@y& (0+255),w,b
  4495  012B20  0D14               	mullw	20
  4496  012B22  0EF0               	movlw	low _lBuffer
  4497  012B24  6FB3               	movwf	??_Console_FormFeed& (0+255),b
  4498  012B26  0E02               	movlw	high _lBuffer
  4499  012B28  6FB4               	movwf	(??_Console_FormFeed+1)& (0+255),b
  4500  012B2A  50F3               	movf	prodl,w,c
  4501  012B2C  27B3               	addwf	??_Console_FormFeed& (0+255),f,b
  4502  012B2E  50F4               	movf	prodh,w,c
  4503  012B30  23B4               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  4504  012B32  51B5               	movf	Console_FormFeed@x& (0+255),w,b
  4505  012B34  0D01               	mullw	1
  4506  012B36  50F3               	movf	prodl,w,c
  4507  012B38  25B3               	addwf	??_Console_FormFeed& (0+255),w,b
  4508  012B3A  6ED9               	movwf	fsr2l,c
  4509  012B3C  50F4               	movf	prodh,w,c
  4510  012B3E  21B4               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  4511  012B40  6EDA               	movwf	fsr2h,c
  4512  012B42  0E80               	movlw	128
  4513  012B44  6EDF               	movwf	indf2,c
  4514                           
  4515                           ; BSR set to: 0
  4516  012B46  2BB5               	incf	Console_FormFeed@x& (0+255),f,b
  4517  012B48  D7E4               	goto	l11674
  4518  012B4A                     u7940:
  4519                           
  4520                           ; BSR set to: 0
  4521                           
  4522                           ; BSR set to: 0
  4523  012B4A  2BB6               	incf	Console_FormFeed@y& (0+255),f,b
  4524  012B4C  D7DC               	goto	l11668
  4525  012B4E                     u7950:
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;Console.c: 204: clearall = 1;
  4529                           
  4530                           ; BSR set to: 0
  4531  012B4E  0E01               	movlw	1
  4532  012B50  6F90               	movwf	_clearall& (0+255),b
  4533                           
  4534                           ;Console.c: 205: gCursor.x = 6;
  4535  012B52  0E00               	movlw	0
  4536  012B54  6E44               	movwf	_gCursor+1,c
  4537  012B56  0E06               	movlw	6
  4538  012B58  6E43               	movwf	_gCursor,c
  4539                           
  4540                           ;Console.c: 206: gCursor.y = 6;
  4541  012B5A  0E00               	movlw	0
  4542  012B5C  6E46               	movwf	_gCursor+3,c
  4543  012B5E  0E06               	movlw	6
  4544  012B60  6E45               	movwf	_gCursor+2,c
  4545                           
  4546                           ; BSR set to: 0
  4547  012B62  0012               	return		;funcret
  4548  012B64                     __end_of_Console_FormFeed:
  4549                           	opt stack 0
  4550                           tosu	equ	0xFFF
  4551                           tosh	equ	0xFFE
  4552                           tosl	equ	0xFFD
  4553                           pclath	equ	0xFFA
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodh	equ	0xFF4
  4559                           prodl	equ	0xFF3
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           postdec1	equ	0xFE5
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           indf2	equ	0xFDF
  4566                           postinc2	equ	0xFDE
  4567                           postdec2	equ	0xFDD
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572 ;; *************** function _Console_ResetCursor *****************
  4573 ;; Defined at:
  4574 ;;		line 297 in file "Library/Console.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;		None
  4577 ;; Auto vars:     Size  Location     Type
  4578 ;;		None
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  1    wreg      void 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;Total ram usage:        0 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    7
  4595 ;; This function calls:
  4596 ;;		Nothing
  4597 ;; This function is called by:
  4598 ;;		_Console_PrintChar
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text9
  4603  0138D0                     __ptext9:
  4604                           	opt stack 0
  4605  0138D0                     _Console_ResetCursor:
  4606                           	opt stack 20
  4607                           
  4608                           ;Console.c: 299: gCursor.x = 6;
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;incstack = 0
  4612  0138D0  0E00               	movlw	0
  4613  0138D2  6E44               	movwf	_gCursor+1,c
  4614  0138D4  0E06               	movlw	6
  4615  0138D6  6E43               	movwf	_gCursor,c
  4616                           
  4617                           ;Console.c: 300: gCursor.y = 6;
  4618  0138D8  0E00               	movlw	0
  4619  0138DA  6E46               	movwf	_gCursor+3,c
  4620  0138DC  0E06               	movlw	6
  4621  0138DE  6E45               	movwf	_gCursor+2,c
  4622                           
  4623                           ;Console.c: 303: lBufferX = 0;
  4624  0138E0  0E00               	movlw	0
  4625  0138E2  0100               	movlb	0	; () banked
  4626  0138E4  6F8F               	movwf	_lBufferX& (0+255),b
  4627                           
  4628                           ;Console.c: 304: lBufferY = 0;
  4629  0138E6  0E00               	movlw	0
  4630  0138E8  6F8E               	movwf	_lBufferY& (0+255),b
  4631                           
  4632                           ; BSR set to: 0
  4633  0138EA  0012               	return		;funcret
  4634  0138EC                     __end_of_Console_ResetCursor:
  4635                           	opt stack 0
  4636                           tosu	equ	0xFFF
  4637                           tosh	equ	0xFFE
  4638                           tosl	equ	0xFFD
  4639                           pclath	equ	0xFFA
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           postdec1	equ	0xFE5
  4649                           fsr1h	equ	0xFE2
  4650                           fsr1l	equ	0xFE1
  4651                           indf2	equ	0xFDF
  4652                           postinc2	equ	0xFDE
  4653                           postdec2	equ	0xFDD
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function _Console_Backspace *****************
  4659 ;; Defined at:
  4660 ;;		line 209 in file "Library/Console.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;		None
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;		None
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4678 ;;Total ram usage:        0 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    8
  4681 ;; This function calls:
  4682 ;;		_Console_ClearCursor
  4683 ;; This function is called by:
  4684 ;;		_Console_PrintChar
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text10
  4689  0130E0                     __ptext10:
  4690                           	opt stack 0
  4691  0130E0                     _Console_Backspace:
  4692                           	opt stack 19
  4693                           
  4694                           ;Console.c: 211: if (lBufferX > 0)
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;incstack = 0
  4698  0130E0  0100               	movlb	0	; () banked
  4699  0130E2  518F               	movf	_lBufferX& (0+255),w,b
  4700  0130E4  B4D8               	btfsc	status,2,c
  4701  0130E6  D006               	goto	l997
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;Console.c: 212: {
  4705                           ;Console.c: 213: gCursor.x -= 6;
  4706  0130E8  0EFA               	movlw	250
  4707  0130EA  2643               	addwf	_gCursor,f,c
  4708  0130EC  0EFF               	movlw	255
  4709  0130EE  2244               	addwfc	_gCursor+1,f,c
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;Console.c: 216: lBufferX --;
  4713  0130F0  078F               	decf	_lBufferX& (0+255),f,b
  4714                           
  4715                           ;Console.c: 218: }
  4716  0130F2  D01B               	goto	l1000
  4717  0130F4                     l997:
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;Console.c: 219: else if (lBufferY > 0)
  4721                           
  4722                           ; BSR set to: 0
  4723  0130F4  518E               	movf	_lBufferY& (0+255),w,b
  4724  0130F6  B4D8               	btfsc	status,2,c
  4725  0130F8  D00C               	goto	l999
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;Console.c: 220: {
  4729                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  4730  0130FA  0E00               	movlw	0
  4731  0130FC  6E44               	movwf	_gCursor+1,c
  4732  0130FE  0E72               	movlw	114
  4733  013100  6E43               	movwf	_gCursor,c
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;Console.c: 222: gCursor.y -= 8;
  4737  013102  0EF8               	movlw	248
  4738  013104  2645               	addwf	_gCursor+2,f,c
  4739  013106  0EFF               	movlw	255
  4740  013108  2246               	addwfc	_gCursor+3,f,c
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  4744  01310A  0E13               	movlw	19
  4745  01310C  6F8F               	movwf	_lBufferX& (0+255),b
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;Console.c: 226: lBufferY --;
  4749  01310E  078E               	decf	_lBufferY& (0+255),f,b
  4750                           
  4751                           ;Console.c: 228: }
  4752  013110  D00C               	goto	l1000
  4753  013112                     l999:
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;Console.c: 229: else
  4757                           ;Console.c: 230: {
  4758                           ;Console.c: 231: gCursor.x = 6;
  4759                           
  4760                           ; BSR set to: 0
  4761  013112  0E00               	movlw	0
  4762  013114  6E44               	movwf	_gCursor+1,c
  4763  013116  0E06               	movlw	6
  4764  013118  6E43               	movwf	_gCursor,c
  4765                           
  4766                           ;Console.c: 232: gCursor.y = 6;
  4767  01311A  0E00               	movlw	0
  4768  01311C  6E46               	movwf	_gCursor+3,c
  4769  01311E  0E06               	movlw	6
  4770  013120  6E45               	movwf	_gCursor+2,c
  4771                           
  4772                           ;Console.c: 235: lBufferX = 0;
  4773  013122  0E00               	movlw	0
  4774  013124  6F8F               	movwf	_lBufferX& (0+255),b
  4775                           
  4776                           ;Console.c: 236: lBufferY = 0;
  4777  013126  0E00               	movlw	0
  4778  013128  6F8E               	movwf	_lBufferY& (0+255),b
  4779  01312A                     l1000:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;Console.c: 238: }
  4783                           ;Console.c: 240: Console_ClearCursor();
  4784                           
  4785                           ; BSR set to: 0
  4786                           
  4787                           ; BSR set to: 0
  4788  01312A  EC32  F09B         	call	_Console_ClearCursor	;wreg free
  4789  01312E  0012               	return		;funcret
  4790  013130                     __end_of_Console_Backspace:
  4791                           	opt stack 0
  4792                           tosu	equ	0xFFF
  4793                           tosh	equ	0xFFE
  4794                           tosl	equ	0xFFD
  4795                           pclath	equ	0xFFA
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           postinc0	equ	0xFEE
  4803                           wreg	equ	0xFE8
  4804                           postdec1	equ	0xFE5
  4805                           fsr1h	equ	0xFE2
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _Console_ClearCursor *****************
  4815 ;; Defined at:
  4816 ;;		line 308 in file "Library/Console.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      void 
  4823 ;; Registers used:
  4824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;Total ram usage:        2 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    7
  4837 ;; This function calls:
  4838 ;;		Nothing
  4839 ;; This function is called by:
  4840 ;;		_Console_Backspace
  4841 ;;		_Console_Tab
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text11
  4846  013664                     __ptext11:
  4847                           	opt stack 0
  4848  013664                     _Console_ClearCursor:
  4849                           	opt stack 19
  4850                           
  4851                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  4852                           
  4853                           ;incstack = 0
  4854  013664  0E01               	movlw	1
  4855  013666  0100               	movlb	0	; () banked
  4856  013668  6FFF               	movwf	_change& (0+255),b
  4857                           
  4858                           ; BSR set to: 0
  4859  01366A  518E               	movf	_lBufferY& (0+255),w,b
  4860  01366C  0D14               	mullw	20
  4861  01366E  0EF0               	movlw	low _lBuffer
  4862  013670  6FB3               	movwf	??_Console_ClearCursor& (0+255),b
  4863  013672  0E02               	movlw	high _lBuffer
  4864  013674  6FB4               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  4865  013676  50F3               	movf	prodl,w,c
  4866  013678  27B3               	addwf	??_Console_ClearCursor& (0+255),f,b
  4867  01367A  50F4               	movf	prodh,w,c
  4868  01367C  23B4               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  4869  01367E  518F               	movf	_lBufferX& (0+255),w,b
  4870  013680  0D01               	mullw	1
  4871  013682  50F3               	movf	prodl,w,c
  4872  013684  25B3               	addwf	??_Console_ClearCursor& (0+255),w,b
  4873  013686  6ED9               	movwf	fsr2l,c
  4874  013688  50F4               	movf	prodh,w,c
  4875  01368A  21B4               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  4876  01368C  6EDA               	movwf	fsr2h,c
  4877  01368E  0E80               	movlw	128
  4878  013690  6EDF               	movwf	indf2,c
  4879                           
  4880                           ; BSR set to: 0
  4881  013692  0012               	return		;funcret
  4882  013694                     __end_of_Console_ClearCursor:
  4883                           	opt stack 0
  4884                           tosu	equ	0xFFF
  4885                           tosh	equ	0xFFE
  4886                           tosl	equ	0xFFD
  4887                           pclath	equ	0xFFA
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           indf2	equ	0xFDF
  4900                           postinc2	equ	0xFDE
  4901                           postdec2	equ	0xFDD
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _Robot_Init *****************
  4907 ;; Defined at:
  4908 ;;		line 227 in file "main.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  1    wreg      void 
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    9
  4929 ;; This function calls:
  4930 ;;		_Robot_Stop
  4931 ;;		_UpdateDistance
  4932 ;;		_eusartSend
  4933 ;; This function is called by:
  4934 ;;		_main
  4935 ;; This function uses a non-reentrant model
  4936 ;;
  4937                           
  4938                           	psect	text12
  4939  0139CC                     __ptext12:
  4940                           	opt stack 0
  4941  0139CC                     _Robot_Init:
  4942                           	opt stack 21
  4943                           
  4944                           ;main.c: 228: eusartSend(128);
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;incstack = 0
  4948  0139CC  0E80               	movlw	128
  4949  0139CE  EC4E  F09D         	call	_eusartSend
  4950                           
  4951                           ;main.c: 229: eusartSend(132);
  4952  0139D2  0E84               	movlw	132
  4953  0139D4  EC4E  F09D         	call	_eusartSend
  4954                           
  4955                           ;main.c: 230: Robot_Stop();
  4956  0139D8  EC19  F09C         	call	_Robot_Stop	;wreg free
  4957                           
  4958                           ;main.c: 231: UpdateDistance();
  4959  0139DC  EC07  F09C         	call	_UpdateDistance	;wreg free
  4960  0139E0  0012               	return		;funcret
  4961  0139E2                     __end_of_Robot_Init:
  4962                           	opt stack 0
  4963                           tosu	equ	0xFFF
  4964                           tosh	equ	0xFFE
  4965                           tosl	equ	0xFFD
  4966                           pclath	equ	0xFFA
  4967                           tblptru	equ	0xFF8
  4968                           tblptrh	equ	0xFF7
  4969                           tblptrl	equ	0xFF6
  4970                           tablat	equ	0xFF5
  4971                           prodh	equ	0xFF4
  4972                           prodl	equ	0xFF3
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           postdec1	equ	0xFE5
  4976                           fsr1h	equ	0xFE2
  4977                           fsr1l	equ	0xFE1
  4978                           indf2	equ	0xFDF
  4979                           postinc2	equ	0xFDE
  4980                           postdec2	equ	0xFDD
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _UpdateDistance *****************
  4986 ;; Defined at:
  4987 ;;		line 175 in file "main.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  2  2161[None  ] int 
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:        0 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    8
  5008 ;; This function calls:
  5009 ;;		_eusartRec
  5010 ;;		_eusartSend
  5011 ;; This function is called by:
  5012 ;;		_Robot_Init
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text13
  5017  01380E                     __ptext13:
  5018                           	opt stack 0
  5019  01380E                     _UpdateDistance:
  5020                           	opt stack 21
  5021                           
  5022                           ;main.c: 176: eusartSend(142);
  5023                           
  5024                           ;incstack = 0
  5025  01380E  0E8E               	movlw	142
  5026  013810  EC4E  F09D         	call	_eusartSend
  5027                           
  5028                           ;main.c: 177: eusartSend(19);
  5029  013814  0E13               	movlw	19
  5030  013816  EC4E  F09D         	call	_eusartSend
  5031                           
  5032                           ;main.c: 178: Current_Dist1 = eusartRec();
  5033  01381A  EC8D  F09D         	call	_eusartRec	;wreg free
  5034  01381E  0100               	movlb	0	; () banked
  5035  013820  6F88               	movwf	_Current_Dist1& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;main.c: 179: Current_Dist2 = eusartRec();
  5039  013822  EC8D  F09D         	call	_eusartRec	;wreg free
  5040  013826  6E33               	movwf	_Current_Dist2,c
  5041                           
  5042                           ;main.c: 181: Current_Dist = Current_Dist2;
  5043  013828  C033  F126         	movff	_Current_Dist2,_Current_Dist
  5044  01382C  0101               	movlb	1	; () banked
  5045  01382E  6B27               	clrf	(_Current_Dist+1)& (0+255),b
  5046  013830  0012               	return	
  5047  013832                     __end_of_UpdateDistance:
  5048                           	opt stack 0
  5049                           tosu	equ	0xFFF
  5050                           tosh	equ	0xFFE
  5051                           tosl	equ	0xFFD
  5052                           pclath	equ	0xFFA
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           postinc0	equ	0xFEE
  5060                           wreg	equ	0xFE8
  5061                           postdec1	equ	0xFE5
  5062                           fsr1h	equ	0xFE2
  5063                           fsr1l	equ	0xFE1
  5064                           indf2	equ	0xFDF
  5065                           postinc2	equ	0xFDE
  5066                           postdec2	equ	0xFDD
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _eusartRec *****************
  5072 ;; Defined at:
  5073 ;;		line 157 in file "main.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      unsigned char 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    7
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_UpdateDistance
  5098 ;;		_Get_Sensor_State
  5099 ;;		_Turn
  5100 ;; This function uses a non-reentrant model
  5101 ;;
  5102                           
  5103                           	psect	text14
  5104  013B1A                     __ptext14:
  5105                           	opt stack 0
  5106  013B1A                     _eusartRec:
  5107                           	opt stack 21
  5108                           
  5109                           ;main.c: 158: while (!PIR1bits.RC1IF) {}
  5110                           
  5111                           ; BSR set to: 1
  5112                           ;incstack = 0
  5113  013B1A  AA9E               	btfss	3998,5,c	;volatile
  5114  013B1C  D7FE               	goto	_eusartRec
  5115                           
  5116                           ;main.c: 159: return RCREG1;
  5117  013B1E  50AF               	movf	4015,w,c	;volatile
  5118  013B20  0012               	return	
  5119  013B22                     __end_of_eusartRec:
  5120                           	opt stack 0
  5121                           tosu	equ	0xFFF
  5122                           tosh	equ	0xFFE
  5123                           tosl	equ	0xFFD
  5124                           pclath	equ	0xFFA
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           postinc0	equ	0xFEE
  5132                           wreg	equ	0xFE8
  5133                           postdec1	equ	0xFE5
  5134                           fsr1h	equ	0xFE2
  5135                           fsr1l	equ	0xFE1
  5136                           indf2	equ	0xFDF
  5137                           postinc2	equ	0xFDE
  5138                           postdec2	equ	0xFDD
  5139                           fsr2h	equ	0xFDA
  5140                           fsr2l	equ	0xFD9
  5141                           status	equ	0xFD8
  5142                           
  5143 ;; *************** function _Robot_Stop *****************
  5144 ;; Defined at:
  5145 ;;		line 162 in file "main.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;		None
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg, cstack
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;Total ram usage:        0 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    8
  5166 ;; This function calls:
  5167 ;;		_eusartSend
  5168 ;; This function is called by:
  5169 ;;		_Robot_Init
  5170 ;;		_Turn
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           	psect	text15
  5175  013832                     __ptext15:
  5176                           	opt stack 0
  5177  013832                     _Robot_Stop:
  5178                           	opt stack 21
  5179                           
  5180                           ;main.c: 163: eusartSend(137);
  5181                           
  5182                           ;incstack = 0
  5183  013832  0E89               	movlw	137
  5184  013834  EC4E  F09D         	call	_eusartSend
  5185                           
  5186                           ;main.c: 164: eusartSend(0);
  5187  013838  0E00               	movlw	0
  5188  01383A  EC4E  F09D         	call	_eusartSend
  5189                           
  5190                           ;main.c: 165: eusartSend(0);
  5191  01383E  0E00               	movlw	0
  5192  013840  EC4E  F09D         	call	_eusartSend
  5193                           
  5194                           ;main.c: 166: eusartSend(0);
  5195  013844  0E00               	movlw	0
  5196  013846  EC4E  F09D         	call	_eusartSend
  5197                           
  5198                           ;main.c: 167: eusartSend(0);
  5199  01384A  0E00               	movlw	0
  5200  01384C  EC4E  F09D         	call	_eusartSend
  5201  013850  0012               	return		;funcret
  5202  013852                     __end_of_Robot_Stop:
  5203                           	opt stack 0
  5204                           tosu	equ	0xFFF
  5205                           tosh	equ	0xFFE
  5206                           tosl	equ	0xFFD
  5207                           pclath	equ	0xFFA
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           postdec1	equ	0xFE5
  5217                           fsr1h	equ	0xFE2
  5218                           fsr1l	equ	0xFE1
  5219                           indf2	equ	0xFDF
  5220                           postinc2	equ	0xFDE
  5221                           postdec2	equ	0xFDD
  5222                           fsr2h	equ	0xFDA
  5223                           fsr2l	equ	0xFD9
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function _eusartSend *****************
  5227 ;; Defined at:
  5228 ;;		line 152 in file "main.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;  sendChar        1    wreg     unsigned char 
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;  sendChar        1    0[BANK0 ] unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;                  1    wreg      void 
  5235 ;; Registers used:
  5236 ;;		wreg
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;Total ram usage:        1 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    7
  5249 ;; This function calls:
  5250 ;;		Nothing
  5251 ;; This function is called by:
  5252 ;;		_Robot_Stop
  5253 ;;		_UpdateDistance
  5254 ;;		_Robot_Init
  5255 ;;		_Get_Sensor_State
  5256 ;;		_Drive
  5257 ;;		_Turn
  5258 ;;		_BangBang
  5259 ;;		_LEDOn
  5260 ;;		_LEDOff
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text16
  5265  013A9C                     __ptext16:
  5266                           	opt stack 0
  5267  013A9C                     _eusartSend:
  5268                           	opt stack 22
  5269                           
  5270                           ;incstack = 0
  5271                           ;eusartSend@sendChar stored from wreg
  5272  013A9C  0100               	movlb	0	; () banked
  5273  013A9E  6FB3               	movwf	eusartSend@sendChar& (0+255),b
  5274  013AA0                     
  5275                           ;main.c: 153: while (!TXSTA1bits.TRMT) {}
  5276  013AA0  A2AD               	btfss	4013,1,c	;volatile
  5277  013AA2  D7FE               	goto	l12592
  5278                           
  5279                           ;main.c: 154: TXREG1 = sendChar;
  5280  013AA4  C0B3  FFAE         	movff	eusartSend@sendChar,4014	;volatile
  5281  013AA8  0012               	return		;funcret
  5282  013AAA                     __end_of_eusartSend:
  5283                           	opt stack 0
  5284                           tosu	equ	0xFFF
  5285                           tosh	equ	0xFFE
  5286                           tosl	equ	0xFFD
  5287                           pclath	equ	0xFFA
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           postinc0	equ	0xFEE
  5295                           wreg	equ	0xFE8
  5296                           postdec1	equ	0xFE5
  5297                           fsr1h	equ	0xFE2
  5298                           fsr1l	equ	0xFE1
  5299                           indf2	equ	0xFDF
  5300                           postinc2	equ	0xFDE
  5301                           postdec2	equ	0xFDD
  5302                           fsr2h	equ	0xFDA
  5303                           fsr2l	equ	0xFD9
  5304                           status	equ	0xFD8
  5305                           
  5306 ;; *************** function _MXK_Init *****************
  5307 ;; Defined at:
  5308 ;;		line 33 in file "Library/MXK.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;		None
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;		None
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;Total ram usage:        0 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:   16
  5329 ;; This function calls:
  5330 ;;		_LED_Init
  5331 ;;		_Port_Init
  5332 ;;		_Port_SetPin
  5333 ;;		_Port_SetPinType
  5334 ;;		_Port_SetQuadType
  5335 ;;		_Port_SetType
  5336 ;;		_delay_ms
  5337 ;; This function is called by:
  5338 ;;		_main
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text17
  5343  01184E                     __ptext17:
  5344                           	opt stack 0
  5345  01184E                     _MXK_Init:
  5346                           	opt stack 14
  5347                           
  5348                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5349                           
  5350                           ;incstack = 0
  5351  01184E  0E01               	movlw	1
  5352  011850  6E4B               	movwf	_Bus_State,c
  5353                           
  5354                           ;MXK.c: 36: lQueue = (Function)0;
  5355  011852  0E00               	movlw	0
  5356  011854  0100               	movlb	0	; () banked
  5357  011856  6F63               	movwf	_lQueue& (0+255),b	;volatile
  5358  011858  0E00               	movlw	0
  5359  01185A  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
  5360  01185C  0E00               	movlw	0
  5361  01185E  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5365  011860  0EA4               	movlw	low _PortA
  5366  011862  0101               	movlb	1	; () banked
  5367  011864  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5368  011866  0E01               	movlw	high _PortA
  5369  011868  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5370  01186A  0E00               	movlw	0
  5371  01186C  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5372  01186E  EC03  F088         	call	_Port_Init	;wreg free
  5373                           
  5374                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5375  011872  0E9A               	movlw	low _PortB
  5376  011874  0101               	movlb	1	; () banked
  5377  011876  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5378  011878  0E01               	movlw	high _PortB
  5379  01187A  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5380  01187C  0E01               	movlw	1
  5381  01187E  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5382  011880  EC03  F088         	call	_Port_Init	;wreg free
  5383                           
  5384                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5385  011884  0EA5               	movlw	low _PortC
  5386  011886  0101               	movlb	1	; () banked
  5387  011888  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5388  01188A  0E00               	movlw	high _PortC
  5389  01188C  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5390  01188E  0E02               	movlw	2
  5391  011890  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5392  011892  EC03  F088         	call	_Port_Init	;wreg free
  5393                           
  5394                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5395  011896  0E9B               	movlw	low _PortD
  5396  011898  0101               	movlb	1	; () banked
  5397  01189A  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5398  01189C  0E00               	movlw	high _PortD
  5399  01189E  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5400  0118A0  0E03               	movlw	3
  5401  0118A2  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5402  0118A4  EC03  F088         	call	_Port_Init	;wreg free
  5403                           
  5404                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5405  0118A8  0E91               	movlw	low _PortE
  5406  0118AA  0101               	movlb	1	; () banked
  5407  0118AC  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5408  0118AE  0E00               	movlw	high _PortE
  5409  0118B0  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5410  0118B2  0E04               	movlw	4
  5411  0118B4  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5412  0118B6  EC03  F088         	call	_Port_Init	;wreg free
  5413                           
  5414                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5415  0118BA  0EAE               	movlw	low _PortF
  5416  0118BC  0101               	movlb	1	; () banked
  5417  0118BE  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5418  0118C0  0E01               	movlw	high _PortF
  5419  0118C2  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5420  0118C4  0E05               	movlw	5
  5421  0118C6  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5422  0118C8  EC03  F088         	call	_Port_Init	;wreg free
  5423                           
  5424                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5425  0118CC  0E90               	movlw	low _PortG
  5426  0118CE  0101               	movlb	1	; () banked
  5427  0118D0  6FD7               	movwf	Port_Init@pInput& (0+255),b
  5428  0118D2  0E01               	movlw	high _PortG
  5429  0118D4  6FD8               	movwf	(Port_Init@pInput+1)& (0+255),b
  5430  0118D6  0E06               	movlw	6
  5431  0118D8  6FD9               	movwf	Port_Init@pPort& (0+255),b
  5432  0118DA  EC03  F088         	call	_Port_Init	;wreg free
  5433                           
  5434                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5435  0118DE  0EAE               	movlw	low _PortF
  5436  0118E0  0100               	movlb	0	; () banked
  5437  0118E2  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  5438  0118E4  0E01               	movlw	high _PortF
  5439  0118E6  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5440  0118E8  0E05               	movlw	5
  5441  0118EA  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  5442  0118EC  0E00               	movlw	0
  5443  0118EE  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5444  0118F0  EC34  F087         	call	_Port_SetPinType	;wreg free
  5445                           
  5446                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5447  0118F4  0E9A               	movlw	low _PortB
  5448  0118F6  0100               	movlb	0	; () banked
  5449  0118F8  6FE9               	movwf	Port_SetQuadType@pInput& (0+255),b
  5450  0118FA  0E01               	movlw	high _PortB
  5451  0118FC  6FEA               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5452  0118FE  0E00               	movlw	0
  5453  011900  6FEB               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5454  011902  0E00               	movlw	0
  5455  011904  6FEC               	movwf	Port_SetQuadType@pType& (0+255),b
  5456  011906  EC69  F084         	call	_Port_SetQuadType	;wreg free
  5457                           
  5458                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5459  01190A  0EAE               	movlw	low _PortF
  5460  01190C  0100               	movlb	0	; () banked
  5461  01190E  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  5462  011910  0E01               	movlw	high _PortF
  5463  011912  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5464  011914  0E06               	movlw	6
  5465  011916  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  5466  011918  0E03               	movlw	3
  5467  01191A  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5468  01191C  EC34  F087         	call	_Port_SetPinType	;wreg free
  5469                           
  5470                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5471  011920  0E90               	movlw	low _PortG
  5472  011922  0100               	movlb	0	; () banked
  5473  011924  6FED               	movwf	Port_SetType@pInput& (0+255),b
  5474  011926  0E01               	movlw	high _PortG
  5475  011928  6FEE               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5476  01192A  0E03               	movlw	3
  5477  01192C  6FEF               	movwf	Port_SetType@pType& (0+255),b
  5478  01192E  EC72  F085         	call	_Port_SetType	;wreg free
  5479                           
  5480                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5481  011932  0E90               	movlw	low _PortG
  5482  011934  0100               	movlb	0	; () banked
  5483  011936  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  5484  011938  0E01               	movlw	high _PortG
  5485  01193A  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5486  01193C  0E04               	movlw	4
  5487  01193E  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  5488  011940  0E00               	movlw	0
  5489  011942  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  5490  011944  EC61  F08F         	call	_Port_SetPin	;wreg free
  5491                           
  5492                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5493  011948  0EAE               	movlw	low _PortF
  5494  01194A  0100               	movlb	0	; () banked
  5495  01194C  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  5496  01194E  0E01               	movlw	high _PortF
  5497  011950  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5498  011952  0E06               	movlw	6
  5499  011954  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  5500  011956  0E01               	movlw	1
  5501  011958  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  5502  01195A  EC61  F08F         	call	_Port_SetPin	;wreg free
  5503                           
  5504                           ;MXK.c: 55: LED_Init(eLED1);
  5505  01195E  0E00               	movlw	0
  5506  011960  EC9F  F097         	call	_LED_Init
  5507                           
  5508                           ;MXK.c: 56: LED_Init(eLED2);
  5509  011964  0E01               	movlw	1
  5510  011966  EC9F  F097         	call	_LED_Init
  5511                           
  5512                           ;MXK.c: 58: PIR1 = 0;
  5513  01196A  0E00               	movlw	0
  5514  01196C  6E9E               	movwf	3998,c	;volatile
  5515                           
  5516                           ;MXK.c: 59: PIR2 = 0;
  5517  01196E  0E00               	movlw	0
  5518  011970  6EA1               	movwf	4001,c	;volatile
  5519                           
  5520                           ;MXK.c: 60: PIR3 = 0;
  5521  011972  0E00               	movlw	0
  5522  011974  6EA4               	movwf	4004,c	;volatile
  5523                           
  5524                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5525  011976  8E9B               	bsf	3995,7,c	;volatile
  5526                           
  5527                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5528  011978  8C9B               	bsf	3995,6,c	;volatile
  5529                           
  5530                           ;MXK.c: 66: delay_ms(100);
  5531  01197A  0E00               	movlw	0
  5532  01197C  0100               	movlb	0	; () banked
  5533  01197E  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  5534  011980  0E64               	movlw	100
  5535  011982  6FB3               	movwf	delay_ms@ms& (0+255),b
  5536  011984  EC47  F097         	call	_delay_ms	;wreg free
  5537                           
  5538                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5539  011988  8ED0               	bsf	4048,7,c	;volatile
  5540  01198A  0012               	return		;funcret
  5541  01198C                     __end_of_MXK_Init:
  5542                           	opt stack 0
  5543                           tosu	equ	0xFFF
  5544                           tosh	equ	0xFFE
  5545                           tosl	equ	0xFFD
  5546                           pclath	equ	0xFFA
  5547                           tblptru	equ	0xFF8
  5548                           tblptrh	equ	0xFF7
  5549                           tblptrl	equ	0xFF6
  5550                           tablat	equ	0xFF5
  5551                           prodh	equ	0xFF4
  5552                           prodl	equ	0xFF3
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           postdec1	equ	0xFE5
  5556                           fsr1h	equ	0xFE2
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           fsr2h	equ	0xFDA
  5562                           fsr2l	equ	0xFD9
  5563                           status	equ	0xFD8
  5564                           
  5565 ;; *************** function _Port_Init *****************
  5566 ;; Defined at:
  5567 ;;		line 150 in file "Library/Port.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  pInput          2    0[BANK1 ] const PTR struct Port
  5570 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5571 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5572 ;;  pPort           1    2[BANK1 ] enum E6786
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  i               1    5[BANK1 ] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5584 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5585 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5586 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;Total ram usage:        6 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:   15
  5591 ;; This function calls:
  5592 ;;		_GetPortPORT
  5593 ;;		_GetPortProperties
  5594 ;;		_GetPortTRIS
  5595 ;;		_Port_Set
  5596 ;;		_Port_SetPinType
  5597 ;;		_Port_SetType
  5598 ;;		_Word_GetPair
  5599 ;; This function is called by:
  5600 ;;		_MXK_Init
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text18
  5605  011006                     __ptext18:
  5606                           	opt stack 0
  5607  011006                     _Port_Init:
  5608                           	opt stack 14
  5609                           
  5610                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5611                           
  5612                           ;incstack = 0
  5613  011006  0101               	movlb	1	; () banked
  5614  011008  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5615  01100A  ECCB  F092         	call	_GetPortProperties
  5616  01100E  C1D7  FFD9         	movff	Port_Init@pInput,fsr2l
  5617  011012  C1D8  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5618  011016  0100               	movlb	0	; () banked
  5619  011018  C0B3  FFDE         	movff	?_GetPortProperties,postinc2
  5620  01101C  C0B4  FFDD         	movff	?_GetPortProperties+1,postdec2
  5621                           
  5622                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5623  011020  0101               	movlb	1	; () banked
  5624  011022  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5625  011024  EC0F  F093         	call	_GetPortPORT
  5626  011028  0101               	movlb	1	; () banked
  5627  01102A  EE20 F006          	lfsr	2,6
  5628  01102E  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5629  011030  26D9               	addwf	fsr2l,f,c
  5630  011032  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5631  011034  22DA               	addwfc	fsr2h,f,c
  5632  011036  0100               	movlb	0	; () banked
  5633  011038  C0B3  FFDE         	movff	?_GetPortPORT,postinc2
  5634  01103C  C0B4  FFDD         	movff	?_GetPortPORT+1,postdec2
  5635                           
  5636                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5637  011040  0101               	movlb	1	; () banked
  5638  011042  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5639  011044  EC0F  F093         	call	_GetPortPORT
  5640  011048  0101               	movlb	1	; () banked
  5641  01104A  EE20 F004          	lfsr	2,4
  5642  01104E  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5643  011050  26D9               	addwf	fsr2l,f,c
  5644  011052  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5645  011054  22DA               	addwfc	fsr2h,f,c
  5646  011056  0100               	movlb	0	; () banked
  5647  011058  C0B3  FFDE         	movff	?_GetPortPORT,postinc2
  5648  01105C  C0B4  FFDD         	movff	?_GetPortPORT+1,postdec2
  5649                           
  5650                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5651  011060  0101               	movlb	1	; () banked
  5652  011062  51D9               	movf	Port_Init@pPort& (0+255),w,b
  5653  011064  EC87  F092         	call	_GetPortTRIS
  5654  011068  0101               	movlb	1	; () banked
  5655  01106A  EE20 F002          	lfsr	2,2
  5656  01106E  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5657  011070  26D9               	addwf	fsr2l,f,c
  5658  011072  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5659  011074  22DA               	addwfc	fsr2h,f,c
  5660  011076  0100               	movlb	0	; () banked
  5661  011078  C0B3  FFDE         	movff	?_GetPortTRIS,postinc2
  5662  01107C  C0B4  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5666  011080  0101               	movlb	1	; () banked
  5667  011082  EE20 F004          	lfsr	2,4
  5668  011086  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5669  011088  26D9               	addwf	fsr2l,f,c
  5670  01108A  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5671  01108C  22DA               	addwfc	fsr2h,f,c
  5672  01108E  CFDE F1DA          	movff	postinc2,??_Port_Init
  5673  011092  CFDD F1DB          	movff	postdec2,??_Port_Init+1
  5674  011096  C1DA  FFD9         	movff	??_Port_Init,fsr2l
  5675  01109A  C1DB  FFDA         	movff	??_Port_Init+1,fsr2h
  5676  01109E  0E00               	movlw	0
  5677  0110A0  6EDF               	movwf	indf2,c
  5678                           
  5679                           ; BSR set to: 1
  5680                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5681  0110A2  EE20 F002          	lfsr	2,2
  5682  0110A6  51D7               	movf	Port_Init@pInput& (0+255),w,b
  5683  0110A8  26D9               	addwf	fsr2l,f,c
  5684  0110AA  51D8               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5685  0110AC  22DA               	addwfc	fsr2h,f,c
  5686  0110AE  CFDE F1DA          	movff	postinc2,??_Port_Init
  5687  0110B2  CFDD F1DB          	movff	postdec2,??_Port_Init+1
  5688  0110B6  C1DA  FFD9         	movff	??_Port_Init,fsr2l
  5689  0110BA  C1DB  FFDA         	movff	??_Port_Init+1,fsr2h
  5690  0110BE  0EFF               	movlw	255
  5691  0110C0  6EDF               	movwf	indf2,c
  5692                           
  5693                           ; BSR set to: 1
  5694                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5695  0110C2  C1D7  F0ED         	movff	Port_Init@pInput,Port_SetType@pInput
  5696  0110C6  C1D8  F0EE         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5697  0110CA  0E00               	movlw	0
  5698  0110CC  0100               	movlb	0	; () banked
  5699  0110CE  6FEF               	movwf	Port_SetType@pType& (0+255),b
  5700  0110D0  EC72  F085         	call	_Port_SetType	;wreg free
  5701                           
  5702                           ;Port.c: 166: UINT8 i;
  5703                           ;Port.c: 167: for (i=0; i<8; i++)
  5704  0110D4  0E00               	movlw	0
  5705  0110D6  0101               	movlb	1	; () banked
  5706  0110D8  6FDC               	movwf	Port_Init@i& (0+255),b
  5707  0110DA                     l12792:
  5708                           
  5709                           ; BSR set to: 1
  5710  0110DA  0E07               	movlw	7
  5711  0110DC  65DC               	cpfsgt	Port_Init@i& (0+255),b
  5712  0110DE  D031               	goto	l403
  5713  0110E0  D04B               	goto	u8910
  5714  0110E2                     
  5715                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5716                           
  5717                           ; BSR set to: 1
  5718  0110E2  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5719  0110E6  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5720  0110EA  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5721  0110EE  0E03               	movlw	3
  5722  0110F0  0100               	movlb	0	; () banked
  5723  0110F2  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5724  0110F4  EC34  F087         	call	_Port_SetPinType	;wreg free
  5725                           
  5726                           ;Port.c: 173: break;
  5727  0110F8  D03C               	goto	l405
  5728  0110FA                     
  5729                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5730  0110FA  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5731  0110FE  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5732  011102  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5733  011106  0E02               	movlw	2
  5734  011108  0100               	movlb	0	; () banked
  5735  01110A  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5736  01110C  EC34  F087         	call	_Port_SetPinType	;wreg free
  5737                           
  5738                           ;Port.c: 176: break;
  5739  011110  D030               	goto	l405
  5740  011112                     
  5741                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5742  011112  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5743  011116  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5744  01111A  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5745  01111E  0E01               	movlw	1
  5746  011120  0100               	movlb	0	; () banked
  5747  011122  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5748  011124  EC34  F087         	call	_Port_SetPinType	;wreg free
  5749                           
  5750                           ;Port.c: 179: break;
  5751  011128  D024               	goto	l405
  5752  01112A                     
  5753                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5754  01112A  C1D7  F0D9         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5755  01112E  C1D8  F0DA         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5756  011132  C1DC  F0DB         	movff	Port_Init@i,Port_SetPinType@pPin
  5757  011136  0E00               	movlw	0
  5758  011138  0100               	movlb	0	; () banked
  5759  01113A  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  5760  01113C  EC34  F087         	call	_Port_SetPinType	;wreg free
  5761                           
  5762                           ;Port.c: 183: }
  5763                           
  5764                           ;Port.c: 182: break;
  5765  011140  D018               	goto	l405
  5766  011142                     l403:
  5767  011142  C1D7  FFD9         	movff	Port_Init@pInput,fsr2l
  5768  011146  C1D8  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5769  01114A  CFDE F0BF          	movff	postinc2,Word_GetPair@pInput
  5770  01114E  CFDD F0C0          	movff	postdec2,Word_GetPair@pInput+1
  5771  011152  C1DC  F0C1         	movff	Port_Init@i,Word_GetPair@pPair
  5772  011156  EC19  F09B         	call	_Word_GetPair	;wreg free
  5773                           
  5774                           ; Switch size 1, requested type "space"
  5775                           ; Number of cases is 4, Range of values is 0 to 3
  5776                           ; switch strategies available:
  5777                           ; Name         Instructions Cycles
  5778                           ; simple_byte           13     7 (average)
  5779                           ;	Chosen strategy is simple_byte
  5780  01115A  0A00               	xorlw	0	; case 0
  5781  01115C  B4D8               	btfsc	status,2,c
  5782  01115E  D7C1               	goto	l404
  5783  011160  0A01               	xorlw	1	; case 1
  5784  011162  B4D8               	btfsc	status,2,c
  5785  011164  D7D6               	goto	l407
  5786  011166  0A03               	xorlw	3	; case 2
  5787  011168  B4D8               	btfsc	status,2,c
  5788  01116A  D7C7               	goto	l406
  5789  01116C  0A01               	xorlw	1	; case 3
  5790  01116E  B4D8               	btfsc	status,2,c
  5791  011170  D7DC               	goto	l408
  5792  011172                     l405:
  5793  011172  0101               	movlb	1	; () banked
  5794  011174  2BDC               	incf	Port_Init@i& (0+255),f,b
  5795  011176  D7B1               	goto	l12792
  5796  011178                     u8910:
  5797                           
  5798                           ; BSR set to: 1
  5799                           ;Port.c: 184: }
  5800                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5801                           
  5802                           ; BSR set to: 1
  5803  011178  C1D7  F0C2         	movff	Port_Init@pInput,Port_Set@pInput
  5804  01117C  C1D8  F0C3         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5805  011180  0E00               	movlw	0
  5806  011182  0100               	movlb	0	; () banked
  5807  011184  6FC4               	movwf	Port_Set@pValue& (0+255),b
  5808  011186  ECD2  F081         	call	_Port_Set	;wreg free
  5809  01118A  0012               	return		;funcret
  5810  01118C                     __end_of_Port_Init:
  5811                           	opt stack 0
  5812                           tosu	equ	0xFFF
  5813                           tosh	equ	0xFFE
  5814                           tosl	equ	0xFFD
  5815                           pclath	equ	0xFFA
  5816                           tblptru	equ	0xFF8
  5817                           tblptrh	equ	0xFF7
  5818                           tblptrl	equ	0xFF6
  5819                           tablat	equ	0xFF5
  5820                           prodh	equ	0xFF4
  5821                           prodl	equ	0xFF3
  5822                           postinc0	equ	0xFEE
  5823                           wreg	equ	0xFE8
  5824                           postdec1	equ	0xFE5
  5825                           fsr1h	equ	0xFE2
  5826                           fsr1l	equ	0xFE1
  5827                           indf2	equ	0xFDF
  5828                           postinc2	equ	0xFDE
  5829                           postdec2	equ	0xFDD
  5830                           fsr2h	equ	0xFDA
  5831                           fsr2l	equ	0xFD9
  5832                           status	equ	0xFD8
  5833                           
  5834 ;; *************** function _Port_SetType *****************
  5835 ;; Defined at:
  5836 ;;		line 513 in file "Library/Port.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5839 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5840 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5841 ;;  pType           1   60[BANK0 ] enum E6795
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;  Output          1   63[BANK0 ] enum E6475
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      enum E6475
  5846 ;; Registers used:
  5847 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 0/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5853 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;Total ram usage:        6 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:   14
  5860 ;; This function calls:
  5861 ;;		_Port_CheckPortType
  5862 ;;		_Word_SetPair
  5863 ;; This function is called by:
  5864 ;;		_Port_Init
  5865 ;;		_MXK_Init
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text19
  5870  010AE4                     __ptext19:
  5871                           	opt stack 0
  5872  010AE4                     _Port_SetType:
  5873                           	opt stack 15
  5874                           
  5875                           ;Port.c: 515: ePinError Output = ePinErrorState;
  5876                           
  5877                           ;incstack = 0
  5878  010AE4  0E05               	movlw	5
  5879  010AE6  0100               	movlb	0	; () banked
  5880  010AE8  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5881                           
  5882                           ;Port.c: 517: switch (pType)
  5883  010AEA  D06E               	goto	l509
  5884  010AEC                     
  5885                           ; BSR set to: 0
  5886                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  5887                           
  5888                           ; BSR set to: 0
  5889  010AEC  EE20 F002          	lfsr	2,2
  5890  010AF0  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5891  010AF2  26D9               	addwf	fsr2l,f,c
  5892  010AF4  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5893  010AF6  22DA               	addwfc	fsr2h,f,c
  5894  010AF8  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5895  010AFC  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5896  010B00  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5897  010B04  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5898  010B08  0EFF               	movlw	255
  5899  010B0A  D05C               	goto	L3
  5900  010B0C                     
  5901                           ; BSR set to: 0
  5902                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  5903                           
  5904                           ; BSR set to: 0
  5905  010B0C  C0ED  F0E9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5906  010B10  C0EE  F0EA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5907  010B14  0E01               	movlw	1
  5908  010B16  6FEB               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5909  010B18  ECBD  F099         	call	_Port_CheckPortType	;wreg free
  5910  010B1C  0100               	movlb	0	; () banked
  5911  010B1E  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5912  010B20  51F2               	movf	Port_SetType@Output& (0+255),w,b
  5913  010B22  A4D8               	btfss	status,2,c
  5914  010B24  0012               	return	
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;Port.c: 527: {
  5918                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  5919  010B26  EE20 F002          	lfsr	2,2
  5920  010B2A  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5921  010B2C  26D9               	addwf	fsr2l,f,c
  5922  010B2E  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5923  010B30  22DA               	addwfc	fsr2h,f,c
  5924  010B32  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5925  010B36  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5926  010B3A  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5927  010B3E  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5928  010B42  0E00               	movlw	0
  5929  010B44  6EDF               	movwf	indf2,c
  5930                           
  5931                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  5932  010B46  EE20 F004          	lfsr	2,4
  5933  010B4A  D02F               	goto	L10
  5934  010B4C                     
  5935                           ; BSR set to: 0
  5936                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  5937                           
  5938                           ; BSR set to: 0
  5939  010B4C  C0ED  F0E9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5940  010B50  C0EE  F0EA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5941  010B54  0E02               	movlw	2
  5942  010B56  6FEB               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5943  010B58  ECBD  F099         	call	_Port_CheckPortType	;wreg free
  5944  010B5C  0100               	movlb	0	; () banked
  5945  010B5E  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5946  010B60  51F2               	movf	Port_SetType@Output& (0+255),w,b
  5947  010B62  A4D8               	btfss	status,2,c
  5948  010B64  0012               	return	
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;Port.c: 538: {
  5952                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  5953  010B66  EE20 F002          	lfsr	2,2
  5954  010B6A  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5955  010B6C  26D9               	addwf	fsr2l,f,c
  5956  010B6E  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5957  010B70  22DA               	addwfc	fsr2h,f,c
  5958  010B72  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5959  010B76  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5960  010B7A  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5961  010B7E  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5962  010B82  0EFF               	movlw	255
  5963  010B84  6EDF               	movwf	indf2,c
  5964                           
  5965                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  5966  010B86  EE20 F004          	lfsr	2,4
  5967  010B8A  D7B2               	goto	L4
  5968  010B8C                     
  5969                           ; BSR set to: 0
  5970                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  5971                           
  5972                           ; BSR set to: 0
  5973  010B8C  C0ED  F0E9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5974  010B90  C0EE  F0EA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5975  010B94  0E00               	movlw	0
  5976  010B96  6FEB               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5977  010B98  ECBD  F099         	call	_Port_CheckPortType	;wreg free
  5978  010B9C  0100               	movlb	0	; () banked
  5979  010B9E  6FF2               	movwf	Port_SetType@Output& (0+255),b
  5980  010BA0  51F2               	movf	Port_SetType@Output& (0+255),w,b
  5981  010BA2  A4D8               	btfss	status,2,c
  5982  010BA4  0012               	return	
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;Port.c: 549: {
  5986                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  5987  010BA6  EE20 F002          	lfsr	2,2
  5988  010BAA                     L10:
  5989  010BAA  51ED               	movf	Port_SetType@pInput& (0+255),w,b
  5990  010BAC  26D9               	addwf	fsr2l,f,c
  5991  010BAE  51EE               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5992  010BB0  22DA               	addwfc	fsr2h,f,c
  5993  010BB2  CFDE F0F0          	movff	postinc2,??_Port_SetType
  5994  010BB6  CFDD F0F1          	movff	postdec2,??_Port_SetType+1
  5995  010BBA  C0F0  FFD9         	movff	??_Port_SetType,fsr2l
  5996  010BBE  C0F1  FFDA         	movff	??_Port_SetType+1,fsr2h
  5997  010BC2  0E00               	movlw	0
  5998  010BC4                     L3:
  5999  010BC4  6EDF               	movwf	indf2,c
  6000                           
  6001                           ;Port.c: 552: }
  6002  010BC6  D00D               	goto	l511
  6003  010BC8                     l509:
  6004                           
  6005                           ; BSR set to: 0
  6006                           
  6007                           ; BSR set to: 0
  6008  010BC8  51EF               	movf	Port_SetType@pType& (0+255),w,b
  6009                           
  6010                           ; Switch size 1, requested type "space"
  6011                           ; Number of cases is 4, Range of values is 0 to 3
  6012                           ; switch strategies available:
  6013                           ; Name         Instructions Cycles
  6014                           ; simple_byte           13     7 (average)
  6015                           ;	Chosen strategy is simple_byte
  6016  010BCA  0A00               	xorlw	0	; case 0
  6017  010BCC  B4D8               	btfsc	status,2,c
  6018  010BCE  D78E               	goto	l510
  6019  010BD0  0A01               	xorlw	1	; case 1
  6020  010BD2  B4D8               	btfsc	status,2,c
  6021  010BD4  D79B               	goto	l512
  6022  010BD6  0A03               	xorlw	3	; case 2
  6023  010BD8  B4D8               	btfsc	status,2,c
  6024  010BDA  D7B8               	goto	l516
  6025  010BDC  0A01               	xorlw	1	; case 3
  6026  010BDE  B4D8               	btfsc	status,2,c
  6027  010BE0  D7D5               	goto	l519
  6028  010BE2                     l511:
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6032                           
  6033                           ; BSR set to: 0
  6034  010BE2  0E08               	movlw	8
  6035  010BE4  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6036  010BE6  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6037  010BE8  0E00               	movlw	0
  6038  010BEA  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6039  010BEC  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6040  010BEE  0E00               	movlw	0
  6041  010BF0  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6042  010BF2  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6043  010BF6  EC76  F09A         	call	_Word_SetPair	;wreg free
  6044                           
  6045                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6046  010BFA  0E08               	movlw	8
  6047  010BFC  0100               	movlb	0	; () banked
  6048  010BFE  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6049  010C00  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6050  010C02  0E00               	movlw	0
  6051  010C04  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6052  010C06  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6053  010C08  0E01               	movlw	1
  6054  010C0A  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6055  010C0C  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6056  010C10  EC76  F09A         	call	_Word_SetPair	;wreg free
  6057                           
  6058                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6059  010C14  0E08               	movlw	8
  6060  010C16  0100               	movlb	0	; () banked
  6061  010C18  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6062  010C1A  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6063  010C1C  0E00               	movlw	0
  6064  010C1E  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6065  010C20  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6066  010C22  0E02               	movlw	2
  6067  010C24  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6068  010C26  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6069  010C2A  EC76  F09A         	call	_Word_SetPair	;wreg free
  6070                           
  6071                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6072  010C2E  0E08               	movlw	8
  6073  010C30  0100               	movlb	0	; () banked
  6074  010C32  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6075  010C34  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6076  010C36  0E00               	movlw	0
  6077  010C38  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6078  010C3A  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6079  010C3C  0E03               	movlw	3
  6080  010C3E  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6081  010C40  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6082  010C44  EC76  F09A         	call	_Word_SetPair	;wreg free
  6083                           
  6084                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6085  010C48  0E08               	movlw	8
  6086  010C4A  0100               	movlb	0	; () banked
  6087  010C4C  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6088  010C4E  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6089  010C50  0E00               	movlw	0
  6090  010C52  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6091  010C54  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6092  010C56  0E04               	movlw	4
  6093  010C58  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6094  010C5A  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6095  010C5E  EC76  F09A         	call	_Word_SetPair	;wreg free
  6096                           
  6097                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6098  010C62  0E08               	movlw	8
  6099  010C64  0100               	movlb	0	; () banked
  6100  010C66  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6101  010C68  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6102  010C6A  0E00               	movlw	0
  6103  010C6C  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6104  010C6E  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6105  010C70  0E05               	movlw	5
  6106  010C72  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6107  010C74  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6108  010C78  EC76  F09A         	call	_Word_SetPair	;wreg free
  6109                           
  6110                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6111  010C7C  0E08               	movlw	8
  6112  010C7E  0100               	movlb	0	; () banked
  6113  010C80  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6114  010C82  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6115  010C84  0E00               	movlw	0
  6116  010C86  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6117  010C88  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6118  010C8A  0E06               	movlw	6
  6119  010C8C  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6120  010C8E  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6121  010C92  EC76  F09A         	call	_Word_SetPair	;wreg free
  6122                           
  6123                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6124  010C96  0E08               	movlw	8
  6125  010C98  0100               	movlb	0	; () banked
  6126  010C9A  25ED               	addwf	Port_SetType@pInput& (0+255),w,b
  6127  010C9C  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
  6128  010C9E  0E00               	movlw	0
  6129  010CA0  21EE               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6130  010CA2  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6131  010CA4  0E07               	movlw	7
  6132  010CA6  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
  6133  010CA8  C0EF  F0C5         	movff	Port_SetType@pType,Word_SetPair@pValue
  6134  010CAC  EC76  F09A         	call	_Word_SetPair	;wreg free
  6135  010CB0  0012               	return	
  6136  010CB2                     __end_of_Port_SetType:
  6137                           	opt stack 0
  6138                           tosu	equ	0xFFF
  6139                           tosh	equ	0xFFE
  6140                           tosl	equ	0xFFD
  6141                           pclath	equ	0xFFA
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1h	equ	0xFE2
  6152                           fsr1l	equ	0xFE1
  6153                           indf2	equ	0xFDF
  6154                           postinc2	equ	0xFDE
  6155                           postdec2	equ	0xFDD
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _Port_CheckPortType *****************
  6161 ;; Defined at:
  6162 ;;		line 138 in file "Library/Port.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6165 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6166 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6167 ;;  pDrive          1   56[BANK0 ] enum E6469
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  Output          1   57[BANK0 ] enum E6475
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      enum E6475
  6172 ;; Registers used:
  6173 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6179 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;Total ram usage:        4 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:   13
  6186 ;; This function calls:
  6187 ;;		_Port_CheckQuadType
  6188 ;; This function is called by:
  6189 ;;		_Port_SetType
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text20
  6194  01337A                     __ptext20:
  6195                           	opt stack 0
  6196  01337A                     _Port_CheckPortType:
  6197                           	opt stack 15
  6198                           
  6199                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6200                           
  6201                           ;incstack = 0
  6202  01337A  0E05               	movlw	5
  6203  01337C  0100               	movlb	0	; () banked
  6204  01337E  6FEC               	movwf	Port_CheckPortType@Output& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6208  013380  C0E9  F0E2         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6209  013384  C0EA  F0E3         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6210  013388  0E00               	movlw	0
  6211  01338A  6FE4               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6212  01338C  C0EB  F0E5         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6213  013390  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
  6214  013394  0100               	movlb	0	; () banked
  6215  013396  6FEC               	movwf	Port_CheckPortType@Output& (0+255),b
  6216  013398  51EC               	movf	Port_CheckPortType@Output& (0+255),w,b
  6217  01339A  A4D8               	btfss	status,2,c
  6218  01339C  D00C               	goto	l397
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6222  01339E  C0E9  F0E2         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6223  0133A2  C0EA  F0E3         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6224  0133A6  0E01               	movlw	1
  6225  0133A8  6FE4               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6226  0133AA  C0EB  F0E5         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6227  0133AE  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
  6228  0133B2  0100               	movlb	0	; () banked
  6229  0133B4  6FEC               	movwf	Port_CheckPortType@Output& (0+255),b
  6230  0133B6                     l397:
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;Port.c: 146: return Output;
  6234                           
  6235                           ; BSR set to: 0
  6236  0133B6  51EC               	movf	Port_CheckPortType@Output& (0+255),w,b
  6237  0133B8  0012               	return	
  6238  0133BA                     __end_of_Port_CheckPortType:
  6239                           	opt stack 0
  6240                           tosu	equ	0xFFF
  6241                           tosh	equ	0xFFE
  6242                           tosl	equ	0xFFD
  6243                           pclath	equ	0xFFA
  6244                           tblptru	equ	0xFF8
  6245                           tblptrh	equ	0xFF7
  6246                           tblptrl	equ	0xFF6
  6247                           tablat	equ	0xFF5
  6248                           prodh	equ	0xFF4
  6249                           prodl	equ	0xFF3
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           postdec1	equ	0xFE5
  6253                           fsr1h	equ	0xFE2
  6254                           fsr1l	equ	0xFE1
  6255                           indf2	equ	0xFDF
  6256                           postinc2	equ	0xFDE
  6257                           postdec2	equ	0xFDD
  6258                           fsr2h	equ	0xFDA
  6259                           fsr2l	equ	0xFD9
  6260                           status	equ	0xFD8
  6261                           
  6262 ;; *************** function _Port_Set *****************
  6263 ;; Defined at:
  6264 ;;		line 570 in file "Library/Port.c"
  6265 ;; Parameters:    Size  Location     Type
  6266 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6267 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6268 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6269 ;;  pValue          1   17[BANK0 ] unsigned char 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6272 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6273 ;;  Type            1   38[BANK0 ] enum E6795
  6274 ;; Return value:  Size  Location     Type
  6275 ;;                  1    wreg      void 
  6276 ;; Registers used:
  6277 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6278 ;; Tracked objects:
  6279 ;;		On entry : 0/0
  6280 ;;		On exit  : 0/0
  6281 ;;		Unchanged: 0/0
  6282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6283 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;Total ram usage:       24 bytes
  6288 ;; Hardware stack levels used:    1
  6289 ;; Hardware stack levels required when called:   10
  6290 ;; This function calls:
  6291 ;;		_Byte_SetByte
  6292 ;;		_Word_GetPair
  6293 ;; This function is called by:
  6294 ;;		_Port_Init
  6295 ;;		_Port_Toggle
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text21
  6300  0103A4                     __ptext21:
  6301                           	opt stack 0
  6302  0103A4                     _Port_Set:
  6303                           	opt stack 18
  6304                           
  6305                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;incstack = 0
  6309  0103A4  0E08               	movlw	8
  6310  0103A6  0100               	movlb	0	; () banked
  6311  0103A8  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6312  0103AA  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6313  0103AC  0E00               	movlw	0
  6314  0103AE  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6315  0103B0  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6316  0103B2  0E00               	movlw	0
  6317  0103B4  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6318  0103B6  EC19  F09B         	call	_Word_GetPair	;wreg free
  6319  0103BA  0100               	movlb	0	; () banked
  6320  0103BC  6FD9               	movwf	Port_Set@Type& (0+255),b
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6324  0103BE  51D9               	movf	Port_Set@Type& (0+255),w,b
  6325  0103C0  6FC5               	movwf	??_Port_Set& (0+255),b
  6326  0103C2  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6327  0103C4  0E0E               	movlw	14
  6328  0103C6                     u8505:
  6329  0103C6  90D8               	bcf	status,0,c
  6330  0103C8  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6331  0103CA  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6332  0103CC  2EE8               	decfsz	wreg,f,c
  6333  0103CE  D7FB               	goto	u8505
  6334  0103D0  51D9               	movf	Port_Set@Type& (0+255),w,b
  6335  0103D2  6FC7               	movwf	(??_Port_Set+2)& (0+255),b
  6336  0103D4  6BC8               	clrf	(??_Port_Set+3)& (0+255),b
  6337  0103D6  0E0C               	movlw	12
  6338  0103D8                     u8515:
  6339  0103D8  90D8               	bcf	status,0,c
  6340  0103DA  37C7               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6341  0103DC  37C8               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6342  0103DE  2EE8               	decfsz	wreg,f,c
  6343  0103E0  D7FB               	goto	u8515
  6344  0103E2  51D9               	movf	Port_Set@Type& (0+255),w,b
  6345  0103E4  6FC9               	movwf	(??_Port_Set+4)& (0+255),b
  6346  0103E6  6BCA               	clrf	(??_Port_Set+5)& (0+255),b
  6347  0103E8  0E0A               	movlw	10
  6348  0103EA                     u8525:
  6349  0103EA  90D8               	bcf	status,0,c
  6350  0103EC  37C9               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6351  0103EE  37CA               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6352  0103F0  2EE8               	decfsz	wreg,f,c
  6353  0103F2  D7FB               	goto	u8525
  6354  0103F4  51D9               	movf	Port_Set@Type& (0+255),w,b
  6355  0103F6  6FCC               	movwf	(??_Port_Set+7)& (0+255),b
  6356  0103F8  6BCB               	clrf	(??_Port_Set+6)& (0+255),b
  6357  0103FA  51D9               	movf	Port_Set@Type& (0+255),w,b
  6358  0103FC  6FCD               	movwf	(??_Port_Set+8)& (0+255),b
  6359  0103FE  6BCE               	clrf	(??_Port_Set+9)& (0+255),b
  6360  010400  0E06               	movlw	6
  6361  010402                     u8535:
  6362  010402  90D8               	bcf	status,0,c
  6363  010404  37CD               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6364  010406  37CE               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6365  010408  2EE8               	decfsz	wreg,f,c
  6366  01040A  D7FB               	goto	u8535
  6367  01040C  51D9               	movf	Port_Set@Type& (0+255),w,b
  6368  01040E  6FCF               	movwf	(??_Port_Set+10)& (0+255),b
  6369  010410  6BD0               	clrf	(??_Port_Set+11)& (0+255),b
  6370  010412  3BCF               	swapf	(??_Port_Set+10)& (0+255),f,b
  6371  010414  3BD0               	swapf	(??_Port_Set+11)& (0+255),f,b
  6372  010416  0EF0               	movlw	240
  6373  010418  17D0               	andwf	(??_Port_Set+11)& (0+255),f,b
  6374  01041A  51CF               	movf	(??_Port_Set+10)& (0+255),w,b
  6375  01041C  0B0F               	andlw	15
  6376  01041E  13D0               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6377  010420  0EF0               	movlw	240
  6378  010422  17CF               	andwf	(??_Port_Set+10)& (0+255),f,b
  6379  010424  51D9               	movf	Port_Set@Type& (0+255),w,b
  6380  010426  6FD1               	movwf	(??_Port_Set+12)& (0+255),b
  6381  010428  6BD2               	clrf	(??_Port_Set+13)& (0+255),b
  6382  01042A  90D8               	bcf	status,0,c
  6383  01042C  37D1               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6384  01042E  37D2               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6385  010430  90D8               	bcf	status,0,c
  6386  010432  37D1               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6387  010434  37D2               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6388  010436  51D9               	movf	Port_Set@Type& (0+255),w,b
  6389  010438  6FD3               	movwf	(??_Port_Set+14)& (0+255),b
  6390  01043A  6BD4               	clrf	(??_Port_Set+15)& (0+255),b
  6391  01043C  51D1               	movf	(??_Port_Set+12)& (0+255),w,b
  6392  01043E  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6393  010440  51D2               	movf	(??_Port_Set+13)& (0+255),w,b
  6394  010442  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6395  010444  51CF               	movf	(??_Port_Set+10)& (0+255),w,b
  6396  010446  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6397  010448  51D0               	movf	(??_Port_Set+11)& (0+255),w,b
  6398  01044A  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6399  01044C  51CD               	movf	(??_Port_Set+8)& (0+255),w,b
  6400  01044E  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6401  010450  51CE               	movf	(??_Port_Set+9)& (0+255),w,b
  6402  010452  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6403  010454  51CB               	movf	(??_Port_Set+6)& (0+255),w,b
  6404  010456  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6405  010458  51CC               	movf	(??_Port_Set+7)& (0+255),w,b
  6406  01045A  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6407  01045C  51C9               	movf	(??_Port_Set+4)& (0+255),w,b
  6408  01045E  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6409  010460  51CA               	movf	(??_Port_Set+5)& (0+255),w,b
  6410  010462  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6411  010464  51C7               	movf	(??_Port_Set+2)& (0+255),w,b
  6412  010466  13D3               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6413  010468  51C8               	movf	(??_Port_Set+3)& (0+255),w,b
  6414  01046A  13D4               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6415  01046C  51C5               	movf	??_Port_Set& (0+255),w,b
  6416  01046E  11D3               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6417  010470  6FD5               	movwf	Port_Set@TypeRequired& (0+255),b
  6418  010472  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6419  010474  11D4               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6420  010476  6FD6               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;Port.c: 574: UINT16 TypeActual = Type;
  6424  010478  C0D9  F0D7         	movff	Port_Set@Type,Port_Set@TypeActual
  6425  01047C  6BD8               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6429  01047E  0E08               	movlw	8
  6430  010480  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6431  010482  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6432  010484  0E00               	movlw	0
  6433  010486  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6434  010488  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6435  01048A  0E01               	movlw	1
  6436  01048C  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6437  01048E  EC19  F09B         	call	_Word_GetPair	;wreg free
  6438  010492  0100               	movlb	0	; () banked
  6439  010494  6FC5               	movwf	??_Port_Set& (0+255),b
  6440  010496  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6441  010498  90D8               	bcf	status,0,c
  6442  01049A  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6443  01049C  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6444  01049E  90D8               	bcf	status,0,c
  6445  0104A0  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6446  0104A2  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6447  0104A4  51C5               	movf	??_Port_Set& (0+255),w,b
  6448  0104A6  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6449  0104A8  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6450  0104AA  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6454  0104AC  0E08               	movlw	8
  6455  0104AE  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6456  0104B0  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6457  0104B2  0E00               	movlw	0
  6458  0104B4  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6459  0104B6  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6460  0104B8  0E02               	movlw	2
  6461  0104BA  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6462  0104BC  EC19  F09B         	call	_Word_GetPair	;wreg free
  6463  0104C0  0100               	movlb	0	; () banked
  6464  0104C2  6FC5               	movwf	??_Port_Set& (0+255),b
  6465  0104C4  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6466  0104C6  3BC5               	swapf	??_Port_Set& (0+255),f,b
  6467  0104C8  3BC6               	swapf	(??_Port_Set+1)& (0+255),f,b
  6468  0104CA  0EF0               	movlw	240
  6469  0104CC  17C6               	andwf	(??_Port_Set+1)& (0+255),f,b
  6470  0104CE  51C5               	movf	??_Port_Set& (0+255),w,b
  6471  0104D0  0B0F               	andlw	15
  6472  0104D2  13C6               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6473  0104D4  0EF0               	movlw	240
  6474  0104D6  17C5               	andwf	??_Port_Set& (0+255),f,b
  6475  0104D8  51C5               	movf	??_Port_Set& (0+255),w,b
  6476  0104DA  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6477  0104DC  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6478  0104DE  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6482  0104E0  0E08               	movlw	8
  6483  0104E2  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6484  0104E4  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6485  0104E6  0E00               	movlw	0
  6486  0104E8  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6487  0104EA  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6488  0104EC  0E03               	movlw	3
  6489  0104EE  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6490  0104F0  EC19  F09B         	call	_Word_GetPair	;wreg free
  6491  0104F4  0100               	movlb	0	; () banked
  6492  0104F6  6FC5               	movwf	??_Port_Set& (0+255),b
  6493  0104F8  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6494  0104FA  0E06               	movlw	6
  6495  0104FC                     u8545:
  6496  0104FC  90D8               	bcf	status,0,c
  6497  0104FE  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6498  010500  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6499  010502  2EE8               	decfsz	wreg,f,c
  6500  010504  D7FB               	goto	u8545
  6501  010506  51C5               	movf	??_Port_Set& (0+255),w,b
  6502  010508  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6503  01050A  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6504  01050C  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6508  01050E  0E08               	movlw	8
  6509  010510  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6510  010512  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6511  010514  0E00               	movlw	0
  6512  010516  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6513  010518  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6514  01051A  0E04               	movlw	4
  6515  01051C  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6516  01051E  EC19  F09B         	call	_Word_GetPair	;wreg free
  6517  010522  0100               	movlb	0	; () banked
  6518  010524  6FC5               	movwf	??_Port_Set& (0+255),b
  6519  010526  51C5               	movf	??_Port_Set& (0+255),w,b
  6520  010528  6FC7               	movwf	(??_Port_Set+2)& (0+255),b
  6521  01052A  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6522  01052C  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6523  01052E  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6524  010530  51C7               	movf	(??_Port_Set+2)& (0+255),w,b
  6525  010532  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6529  010534  0E08               	movlw	8
  6530  010536  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6531  010538  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6532  01053A  0E00               	movlw	0
  6533  01053C  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6534  01053E  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6535  010540  0E05               	movlw	5
  6536  010542  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6537  010544  EC19  F09B         	call	_Word_GetPair	;wreg free
  6538  010548  0100               	movlb	0	; () banked
  6539  01054A  6FC5               	movwf	??_Port_Set& (0+255),b
  6540  01054C  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6541  01054E  0E0A               	movlw	10
  6542  010550                     u8555:
  6543  010550  90D8               	bcf	status,0,c
  6544  010552  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6545  010554  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6546  010556  2EE8               	decfsz	wreg,f,c
  6547  010558  D7FB               	goto	u8555
  6548  01055A  51C5               	movf	??_Port_Set& (0+255),w,b
  6549  01055C  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6550  01055E  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6551  010560  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6555  010562  0E08               	movlw	8
  6556  010564  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6557  010566  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6558  010568  0E00               	movlw	0
  6559  01056A  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6560  01056C  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6561  01056E  0E06               	movlw	6
  6562  010570  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6563  010572  EC19  F09B         	call	_Word_GetPair	;wreg free
  6564  010576  0100               	movlb	0	; () banked
  6565  010578  6FC5               	movwf	??_Port_Set& (0+255),b
  6566  01057A  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6567  01057C  0E0C               	movlw	12
  6568  01057E                     u8565:
  6569  01057E  90D8               	bcf	status,0,c
  6570  010580  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6571  010582  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6572  010584  2EE8               	decfsz	wreg,f,c
  6573  010586  D7FB               	goto	u8565
  6574  010588  51C5               	movf	??_Port_Set& (0+255),w,b
  6575  01058A  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6576  01058C  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6577  01058E  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6581  010590  0E08               	movlw	8
  6582  010592  25C2               	addwf	Port_Set@pInput& (0+255),w,b
  6583  010594  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
  6584  010596  0E00               	movlw	0
  6585  010598  21C3               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6586  01059A  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6587  01059C  0E07               	movlw	7
  6588  01059E  6FC1               	movwf	Word_GetPair@pPair& (0+255),b
  6589  0105A0  EC19  F09B         	call	_Word_GetPair	;wreg free
  6590  0105A4  0100               	movlb	0	; () banked
  6591  0105A6  6FC5               	movwf	??_Port_Set& (0+255),b
  6592  0105A8  6BC6               	clrf	(??_Port_Set+1)& (0+255),b
  6593  0105AA  0E0E               	movlw	14
  6594  0105AC                     u8575:
  6595  0105AC  90D8               	bcf	status,0,c
  6596  0105AE  37C5               	rlcf	??_Port_Set& (0+255),f,b
  6597  0105B0  37C6               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6598  0105B2  2EE8               	decfsz	wreg,f,c
  6599  0105B4  D7FB               	goto	u8575
  6600  0105B6  51C5               	movf	??_Port_Set& (0+255),w,b
  6601  0105B8  13D7               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6602  0105BA  51C6               	movf	(??_Port_Set+1)& (0+255),w,b
  6603  0105BC  13D8               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6604                           
  6605                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6606  0105BE  51D7               	movf	Port_Set@TypeActual& (0+255),w,b
  6607  0105C0  19D5               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6608  0105C2  E144               	bnz	l528
  6609  0105C4  51D8               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6610  0105C6  19D6               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6611  0105C8  A4D8               	btfss	status,2,c
  6612  0105CA  0012               	return	
  6613  0105CC  D030               	goto	l526
  6614  0105CE                     
  6615                           ; BSR set to: 0
  6616                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6617                           
  6618                           ; BSR set to: 0
  6619  0105CE  EE20 F002          	lfsr	2,2
  6620  0105D2  51C2               	movf	Port_Set@pInput& (0+255),w,b
  6621  0105D4  26D9               	addwf	fsr2l,f,c
  6622  0105D6  51C3               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6623  0105D8  22DA               	addwfc	fsr2h,f,c
  6624  0105DA  CFDE F0B3          	movff	postinc2,Byte_SetByte@pInput
  6625  0105DE  CFDD F0B4          	movff	postdec2,Byte_SetByte@pInput+1
  6626  0105E2  C0C4  F0B5         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6627  0105E6  EC55  F09D         	call	_Byte_SetByte	;wreg free
  6628                           
  6629                           ;Port.c: 594: break;
  6630  0105EA  0012               	return	
  6631  0105EC                     
  6632                           ;Port.c: 597: pValue = ~pValue;
  6633  0105EC  0100               	movlb	0	; () banked
  6634  0105EE  1FC4               	comf	Port_Set@pValue& (0+255),f,b
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6638  0105F0  EE20 F002          	lfsr	2,2
  6639  0105F4  51C2               	movf	Port_Set@pInput& (0+255),w,b
  6640  0105F6  26D9               	addwf	fsr2l,f,c
  6641  0105F8  51C3               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6642  0105FA  22DA               	addwfc	fsr2h,f,c
  6643  0105FC  CFDE F0B3          	movff	postinc2,Byte_SetByte@pInput
  6644  010600  CFDD F0B4          	movff	postdec2,Byte_SetByte@pInput+1
  6645  010604  C0C4  F0B5         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6646  010608  EC55  F09D         	call	_Byte_SetByte	;wreg free
  6647                           
  6648                           ;Port.c: 599: break;
  6649  01060C  0012               	return	
  6650  01060E                     
  6651                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6652  01060E  0100               	movlb	0	; () banked
  6653  010610  EE20 F004          	lfsr	2,4
  6654  010614  51C2               	movf	Port_Set@pInput& (0+255),w,b
  6655  010616  26D9               	addwf	fsr2l,f,c
  6656  010618  51C3               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6657  01061A  22DA               	addwfc	fsr2h,f,c
  6658  01061C  CFDE F0B3          	movff	postinc2,Byte_SetByte@pInput
  6659  010620  CFDD F0B4          	movff	postdec2,Byte_SetByte@pInput+1
  6660  010624  C0C4  F0B5         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6661  010628  EC55  F09D         	call	_Byte_SetByte	;wreg free
  6662                           
  6663                           ;Port.c: 606: }
  6664                           
  6665                           ;Port.c: 605: break;
  6666                           
  6667                           ;Port.c: 604: default:
  6668                           
  6669                           ;Port.c: 603: break;
  6670  01062C  0012               	return	
  6671  01062E                     l526:
  6672  01062E  0100               	movlb	0	; () banked
  6673  010630  51D9               	movf	Port_Set@Type& (0+255),w,b
  6674                           
  6675                           ; Switch size 1, requested type "space"
  6676                           ; Number of cases is 4, Range of values is 0 to 3
  6677                           ; switch strategies available:
  6678                           ; Name         Instructions Cycles
  6679                           ; simple_byte           13     7 (average)
  6680                           ;	Chosen strategy is simple_byte
  6681  010632  0A00               	xorlw	0	; case 0
  6682  010634  B4D8               	btfsc	status,2,c
  6683  010636  0012               	return	
  6684  010638  0A01               	xorlw	1	; case 1
  6685  01063A  B4D8               	btfsc	status,2,c
  6686  01063C  D7C8               	goto	l529
  6687  01063E  0A03               	xorlw	3	; case 2
  6688  010640  B4D8               	btfsc	status,2,c
  6689  010642  D7D4               	goto	l531
  6690  010644  0A01               	xorlw	1	; case 3
  6691  010646  A4D8               	btfss	status,2,c
  6692                           
  6693                           ; BSR set to: 0
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;Port.c: 607: }
  6697  010648  0012               	return	
  6698  01064A  D7E1               	goto	l532
  6699  01064C                     l528:
  6700  01064C  0012               	return		;funcret
  6701  01064E                     __end_of_Port_Set:
  6702                           	opt stack 0
  6703                           tosu	equ	0xFFF
  6704                           tosh	equ	0xFFE
  6705                           tosl	equ	0xFFD
  6706                           pclath	equ	0xFFA
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           postinc0	equ	0xFEE
  6714                           wreg	equ	0xFE8
  6715                           postdec1	equ	0xFE5
  6716                           fsr1h	equ	0xFE2
  6717                           fsr1l	equ	0xFE1
  6718                           indf2	equ	0xFDF
  6719                           postinc2	equ	0xFDE
  6720                           postdec2	equ	0xFDD
  6721                           fsr2h	equ	0xFDA
  6722                           fsr2l	equ	0xFD9
  6723                           status	equ	0xFD8
  6724                           
  6725 ;; *************** function _Byte_SetByte *****************
  6726 ;; Defined at:
  6727 ;;		line 110 in file "Library/Types.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6730 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6731 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6732 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6733 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6734 ;;		 -> NULL(0), 
  6735 ;;  pValue          1    2[BANK0 ] unsigned char 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		fsr2l, fsr2h
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6747 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;Total ram usage:        3 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    7
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_Port_Set
  6758 ;;		_I2C_Init
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text22
  6763  013AAA                     __ptext22:
  6764                           	opt stack 0
  6765  013AAA                     _Byte_SetByte:
  6766                           	opt stack 20
  6767                           
  6768                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6769                           
  6770                           ;incstack = 0
  6771  013AAA  C0B3  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6772  013AAE  C0B4  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6773  013AB2  C0B5  FFDF         	movff	Byte_SetByte@pValue,indf2
  6774  013AB6  0012               	return		;funcret
  6775  013AB8                     __end_of_Byte_SetByte:
  6776                           	opt stack 0
  6777                           tosu	equ	0xFFF
  6778                           tosh	equ	0xFFE
  6779                           tosl	equ	0xFFD
  6780                           pclath	equ	0xFFA
  6781                           tblptru	equ	0xFF8
  6782                           tblptrh	equ	0xFF7
  6783                           tblptrl	equ	0xFF6
  6784                           tablat	equ	0xFF5
  6785                           prodh	equ	0xFF4
  6786                           prodl	equ	0xFF3
  6787                           postinc0	equ	0xFEE
  6788                           wreg	equ	0xFE8
  6789                           postdec1	equ	0xFE5
  6790                           fsr1h	equ	0xFE2
  6791                           fsr1l	equ	0xFE1
  6792                           indf2	equ	0xFDF
  6793                           postinc2	equ	0xFDE
  6794                           postdec2	equ	0xFDD
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _GetPortTRIS *****************
  6800 ;; Defined at:
  6801 ;;		line 67 in file "Library/Port.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  pInput          1    wreg     enum E6786
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  pInput          1    2[BANK0 ] enum E6786
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  2    0[BANK0 ] PTR struct Byte
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6815 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;Total ram usage:        3 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    7
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		_Port_Init
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text23
  6830  01250E                     __ptext23:
  6831                           	opt stack 0
  6832  01250E                     _GetPortTRIS:
  6833                           	opt stack 21
  6834                           
  6835                           ;incstack = 0
  6836                           ;GetPortTRIS@pInput stored from wreg
  6837  01250E  0100               	movlb	0	; () banked
  6838  012510  6FB5               	movwf	GetPortTRIS@pInput& (0+255),b
  6839                           
  6840                           ;Port.c: 69: switch (pInput)
  6841  012512  D029               	goto	l363
  6842  012514                     
  6843                           ;Port.c: 72: return (BytePtr)&TRISA;
  6844  012514  0E92               	movlw	146
  6845  012516  0100               	movlb	0	; () banked
  6846  012518  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6847  01251A  0E0F               	movlw	15
  6848  01251C  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6849                           
  6850                           ; BSR set to: 0
  6851  01251E  0012               	return	
  6852  012520                     
  6853                           ; BSR set to: 0
  6854                           ;Port.c: 74: return (BytePtr)&TRISB;
  6855                           
  6856                           ; BSR set to: 0
  6857  012520  0E93               	movlw	147
  6858  012522  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6859  012524  0E0F               	movlw	15
  6860  012526  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6861                           
  6862                           ; BSR set to: 0
  6863  012528  0012               	return	
  6864  01252A                     
  6865                           ; BSR set to: 0
  6866                           ;Port.c: 76: return (BytePtr)&TRISC;
  6867                           
  6868                           ; BSR set to: 0
  6869  01252A  0E94               	movlw	148
  6870  01252C  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6871  01252E  0E0F               	movlw	15
  6872  012530  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6873                           
  6874                           ; BSR set to: 0
  6875  012532  0012               	return	
  6876  012534                     
  6877                           ; BSR set to: 0
  6878                           ;Port.c: 78: return (BytePtr)&TRISD;
  6879                           
  6880                           ; BSR set to: 0
  6881  012534  0E95               	movlw	149
  6882  012536  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6883  012538  0E0F               	movlw	15
  6884  01253A  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6885                           
  6886                           ; BSR set to: 0
  6887  01253C  0012               	return	
  6888  01253E                     
  6889                           ; BSR set to: 0
  6890                           ;Port.c: 80: return (BytePtr)&TRISE;
  6891                           
  6892                           ; BSR set to: 0
  6893  01253E  0E96               	movlw	150
  6894  012540  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6895  012542  0E0F               	movlw	15
  6896  012544  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6897                           
  6898                           ; BSR set to: 0
  6899  012546  0012               	return	
  6900  012548                     
  6901                           ; BSR set to: 0
  6902                           ;Port.c: 82: return (BytePtr)&TRISF;
  6903                           
  6904                           ; BSR set to: 0
  6905  012548  0E97               	movlw	151
  6906  01254A  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6907  01254C  0E0F               	movlw	15
  6908  01254E  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911  012550  0012               	return	
  6912  012552                     
  6913                           ; BSR set to: 0
  6914                           ;Port.c: 84: return (BytePtr)&TRISG;
  6915                           
  6916                           ; BSR set to: 0
  6917  012552  0E98               	movlw	152
  6918  012554  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6919  012556  0E0F               	movlw	15
  6920  012558  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6921                           
  6922                           ; BSR set to: 0
  6923  01255A  0012               	return	
  6924  01255C                     
  6925                           ; BSR set to: 0
  6926                           ;Port.c: 86: return (void*)0;
  6927                           
  6928                           ; BSR set to: 0
  6929  01255C  0E00               	movlw	0
  6930  01255E  6FB3               	movwf	?_GetPortTRIS& (0+255),b
  6931  012560  0E00               	movlw	0
  6932  012562  6FB4               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;Port.c: 87: }
  6936                           
  6937                           ; BSR set to: 0
  6938  012564  0012               	return	
  6939  012566                     l363:
  6940                           
  6941                           ; BSR set to: 0
  6942  012566  0100               	movlb	0	; () banked
  6943  012568  51B5               	movf	GetPortTRIS@pInput& (0+255),w,b
  6944                           
  6945                           ; Switch size 1, requested type "space"
  6946                           ; Number of cases is 7, Range of values is 0 to 6
  6947                           ; switch strategies available:
  6948                           ; Name         Instructions Cycles
  6949                           ; simple_byte           22    12 (average)
  6950                           ;	Chosen strategy is simple_byte
  6951  01256A  0A00               	xorlw	0	; case 0
  6952  01256C  B4D8               	btfsc	status,2,c
  6953  01256E  D7D2               	goto	l364
  6954  012570  0A01               	xorlw	1	; case 1
  6955  012572  B4D8               	btfsc	status,2,c
  6956  012574  D7D5               	goto	l366
  6957  012576  0A03               	xorlw	3	; case 2
  6958  012578  B4D8               	btfsc	status,2,c
  6959  01257A  D7D7               	goto	l367
  6960  01257C  0A01               	xorlw	1	; case 3
  6961  01257E  B4D8               	btfsc	status,2,c
  6962  012580  D7D9               	goto	l368
  6963  012582  0A07               	xorlw	7	; case 4
  6964  012584  B4D8               	btfsc	status,2,c
  6965  012586  D7DB               	goto	l369
  6966  012588  0A01               	xorlw	1	; case 5
  6967  01258A  B4D8               	btfsc	status,2,c
  6968  01258C  D7DD               	goto	l370
  6969  01258E  0A03               	xorlw	3	; case 6
  6970  012590  B4D8               	btfsc	status,2,c
  6971  012592  D7DF               	goto	l371
  6972  012594  D7E3               	goto	l372
  6973  012596                     __end_of_GetPortTRIS:
  6974                           	opt stack 0
  6975                           tosu	equ	0xFFF
  6976                           tosh	equ	0xFFE
  6977                           tosl	equ	0xFFD
  6978                           pclath	equ	0xFFA
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           postinc0	equ	0xFEE
  6986                           wreg	equ	0xFE8
  6987                           postdec1	equ	0xFE5
  6988                           fsr1h	equ	0xFE2
  6989                           fsr1l	equ	0xFE1
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _GetPortProperties *****************
  6998 ;; Defined at:
  6999 ;;		line 21 in file "Library/Port.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  pInput          1    wreg     enum E6786
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  pInput          1    2[BANK0 ] enum E6786
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        3 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    7
  7020 ;; This function calls:
  7021 ;;		Nothing
  7022 ;; This function is called by:
  7023 ;;		_Port_Init
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text24
  7028  012596                     __ptext24:
  7029                           	opt stack 0
  7030  012596                     _GetPortProperties:
  7031                           	opt stack 21
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;incstack = 0
  7035                           ;GetPortProperties@pInput stored from wreg
  7036  012596  0100               	movlb	0	; () banked
  7037  012598  6FB5               	movwf	GetPortProperties@pInput& (0+255),b
  7038                           
  7039                           ;Port.c: 23: switch (pInput)
  7040  01259A  D029               	goto	l337
  7041  01259C                     
  7042                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7043  01259C  0E0F               	movlw	low _PortA_Property
  7044  01259E  0100               	movlb	0	; () banked
  7045  0125A0  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7046  0125A2  0EFF               	movlw	high _PortA_Property
  7047  0125A4  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7048                           
  7049                           ; BSR set to: 0
  7050  0125A6  0012               	return	
  7051  0125A8                     
  7052                           ; BSR set to: 0
  7053                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7054                           
  7055                           ; BSR set to: 0
  7056  0125A8  0E0D               	movlw	low _PortB_Property
  7057  0125AA  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7058  0125AC  0EFF               	movlw	high _PortB_Property
  7059  0125AE  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7060                           
  7061                           ; BSR set to: 0
  7062  0125B0  0012               	return	
  7063  0125B2                     
  7064                           ; BSR set to: 0
  7065                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7066                           
  7067                           ; BSR set to: 0
  7068  0125B2  0E0B               	movlw	low _PortC_Property
  7069  0125B4  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7070  0125B6  0EFF               	movlw	high _PortC_Property
  7071  0125B8  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7072                           
  7073                           ; BSR set to: 0
  7074  0125BA  0012               	return	
  7075  0125BC                     
  7076                           ; BSR set to: 0
  7077                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7078                           
  7079                           ; BSR set to: 0
  7080  0125BC  0E09               	movlw	low _PortD_Property
  7081  0125BE  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7082  0125C0  0EFF               	movlw	high _PortD_Property
  7083  0125C2  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7084                           
  7085                           ; BSR set to: 0
  7086  0125C4  0012               	return	
  7087  0125C6                     
  7088                           ; BSR set to: 0
  7089                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7090                           
  7091                           ; BSR set to: 0
  7092  0125C6  0E07               	movlw	low _PortE_Property
  7093  0125C8  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7094  0125CA  0EFF               	movlw	high _PortE_Property
  7095  0125CC  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7096                           
  7097                           ; BSR set to: 0
  7098  0125CE  0012               	return	
  7099  0125D0                     
  7100                           ; BSR set to: 0
  7101                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7102                           
  7103                           ; BSR set to: 0
  7104  0125D0  0E05               	movlw	low _PortF_Property
  7105  0125D2  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7106  0125D4  0EFF               	movlw	high _PortF_Property
  7107  0125D6  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7108                           
  7109                           ; BSR set to: 0
  7110  0125D8  0012               	return	
  7111  0125DA                     
  7112                           ; BSR set to: 0
  7113                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7114                           
  7115                           ; BSR set to: 0
  7116  0125DA  0E03               	movlw	low _PortG_Property
  7117  0125DC  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7118  0125DE  0EFF               	movlw	high _PortG_Property
  7119  0125E0  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7120                           
  7121                           ; BSR set to: 0
  7122  0125E2  0012               	return	
  7123  0125E4                     
  7124                           ; BSR set to: 0
  7125                           ;Port.c: 40: return (void*)0;
  7126                           
  7127                           ; BSR set to: 0
  7128  0125E4  0E00               	movlw	0
  7129  0125E6  6FB3               	movwf	?_GetPortProperties& (0+255),b
  7130  0125E8  0E00               	movlw	0
  7131  0125EA  6FB4               	movwf	(?_GetPortProperties+1)& (0+255),b
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;Port.c: 41: }
  7135                           
  7136                           ; BSR set to: 0
  7137  0125EC  0012               	return	
  7138  0125EE                     l337:
  7139                           
  7140                           ; BSR set to: 0
  7141  0125EE  0100               	movlb	0	; () banked
  7142  0125F0  51B5               	movf	GetPortProperties@pInput& (0+255),w,b
  7143                           
  7144                           ; Switch size 1, requested type "space"
  7145                           ; Number of cases is 7, Range of values is 0 to 6
  7146                           ; switch strategies available:
  7147                           ; Name         Instructions Cycles
  7148                           ; simple_byte           22    12 (average)
  7149                           ;	Chosen strategy is simple_byte
  7150  0125F2  0A00               	xorlw	0	; case 0
  7151  0125F4  B4D8               	btfsc	status,2,c
  7152  0125F6  D7D2               	goto	l338
  7153  0125F8  0A01               	xorlw	1	; case 1
  7154  0125FA  B4D8               	btfsc	status,2,c
  7155  0125FC  D7D5               	goto	l340
  7156  0125FE  0A03               	xorlw	3	; case 2
  7157  012600  B4D8               	btfsc	status,2,c
  7158  012602  D7D7               	goto	l341
  7159  012604  0A01               	xorlw	1	; case 3
  7160  012606  B4D8               	btfsc	status,2,c
  7161  012608  D7D9               	goto	l342
  7162  01260A  0A07               	xorlw	7	; case 4
  7163  01260C  B4D8               	btfsc	status,2,c
  7164  01260E  D7DB               	goto	l343
  7165  012610  0A01               	xorlw	1	; case 5
  7166  012612  B4D8               	btfsc	status,2,c
  7167  012614  D7DD               	goto	l344
  7168  012616  0A03               	xorlw	3	; case 6
  7169  012618  B4D8               	btfsc	status,2,c
  7170  01261A  D7DF               	goto	l345
  7171  01261C  D7E3               	goto	l346
  7172  01261E                     __end_of_GetPortProperties:
  7173                           	opt stack 0
  7174                           tosu	equ	0xFFF
  7175                           tosh	equ	0xFFE
  7176                           tosl	equ	0xFFD
  7177                           pclath	equ	0xFFA
  7178                           tblptru	equ	0xFF8
  7179                           tblptrh	equ	0xFF7
  7180                           tblptrl	equ	0xFF6
  7181                           tablat	equ	0xFF5
  7182                           prodh	equ	0xFF4
  7183                           prodl	equ	0xFF3
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec1	equ	0xFE5
  7187                           fsr1h	equ	0xFE2
  7188                           fsr1l	equ	0xFE1
  7189                           indf2	equ	0xFDF
  7190                           postinc2	equ	0xFDE
  7191                           postdec2	equ	0xFDD
  7192                           fsr2h	equ	0xFDA
  7193                           fsr2l	equ	0xFD9
  7194                           status	equ	0xFD8
  7195                           
  7196 ;; *************** function _GetPortPORT *****************
  7197 ;; Defined at:
  7198 ;;		line 44 in file "Library/Port.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  pInput          1    wreg     enum E6786
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  pInput          1    2[BANK0 ] enum E6786
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  2    0[BANK0 ] PTR struct Byte
  7205 ;; Registers used:
  7206 ;;		wreg, status,2, status,0
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7212 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;Total ram usage:        3 bytes
  7217 ;; Hardware stack levels used:    1
  7218 ;; Hardware stack levels required when called:    7
  7219 ;; This function calls:
  7220 ;;		Nothing
  7221 ;; This function is called by:
  7222 ;;		_Port_Init
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text25
  7227  01261E                     __ptext25:
  7228                           	opt stack 0
  7229  01261E                     _GetPortPORT:
  7230                           	opt stack 21
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;incstack = 0
  7234                           ;GetPortPORT@pInput stored from wreg
  7235  01261E  0100               	movlb	0	; () banked
  7236  012620  6FB5               	movwf	GetPortPORT@pInput& (0+255),b
  7237                           
  7238                           ;Port.c: 46: switch (pInput)
  7239  012622  D029               	goto	l350
  7240  012624                     
  7241                           ;Port.c: 49: return (BytePtr)&PORTA;
  7242  012624  0E80               	movlw	128
  7243  012626  0100               	movlb	0	; () banked
  7244  012628  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7245  01262A  0E0F               	movlw	15
  7246  01262C  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7247                           
  7248                           ; BSR set to: 0
  7249  01262E  0012               	return	
  7250  012630                     
  7251                           ; BSR set to: 0
  7252                           ;Port.c: 51: return (BytePtr)&PORTB;
  7253                           
  7254                           ; BSR set to: 0
  7255  012630  0E81               	movlw	129
  7256  012632  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7257  012634  0E0F               	movlw	15
  7258  012636  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7259                           
  7260                           ; BSR set to: 0
  7261  012638  0012               	return	
  7262  01263A                     
  7263                           ; BSR set to: 0
  7264                           ;Port.c: 53: return (BytePtr)&PORTC;
  7265                           
  7266                           ; BSR set to: 0
  7267  01263A  0E82               	movlw	130
  7268  01263C  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7269  01263E  0E0F               	movlw	15
  7270  012640  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7271                           
  7272                           ; BSR set to: 0
  7273  012642  0012               	return	
  7274  012644                     
  7275                           ; BSR set to: 0
  7276                           ;Port.c: 55: return (BytePtr)&PORTD;
  7277                           
  7278                           ; BSR set to: 0
  7279  012644  0E83               	movlw	131
  7280  012646  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7281  012648  0E0F               	movlw	15
  7282  01264A  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7283                           
  7284                           ; BSR set to: 0
  7285  01264C  0012               	return	
  7286  01264E                     
  7287                           ; BSR set to: 0
  7288                           ;Port.c: 57: return (BytePtr)&PORTE;
  7289                           
  7290                           ; BSR set to: 0
  7291  01264E  0E84               	movlw	132
  7292  012650  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7293  012652  0E0F               	movlw	15
  7294  012654  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7295                           
  7296                           ; BSR set to: 0
  7297  012656  0012               	return	
  7298  012658                     
  7299                           ; BSR set to: 0
  7300                           ;Port.c: 59: return (BytePtr)&PORTF;
  7301                           
  7302                           ; BSR set to: 0
  7303  012658  0E85               	movlw	133
  7304  01265A  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7305  01265C  0E0F               	movlw	15
  7306  01265E  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7307                           
  7308                           ; BSR set to: 0
  7309  012660  0012               	return	
  7310  012662                     
  7311                           ; BSR set to: 0
  7312                           ;Port.c: 61: return (BytePtr)&PORTG;
  7313                           
  7314                           ; BSR set to: 0
  7315  012662  0E86               	movlw	134
  7316  012664  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7317  012666  0E0F               	movlw	15
  7318  012668  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7319                           
  7320                           ; BSR set to: 0
  7321  01266A  0012               	return	
  7322  01266C                     
  7323                           ; BSR set to: 0
  7324                           ;Port.c: 63: return (void*)0;
  7325                           
  7326                           ; BSR set to: 0
  7327  01266C  0E00               	movlw	0
  7328  01266E  6FB3               	movwf	?_GetPortPORT& (0+255),b
  7329  012670  0E00               	movlw	0
  7330  012672  6FB4               	movwf	(?_GetPortPORT+1)& (0+255),b
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;Port.c: 64: }
  7334                           
  7335                           ; BSR set to: 0
  7336  012674  0012               	return	
  7337  012676                     l350:
  7338                           
  7339                           ; BSR set to: 0
  7340  012676  0100               	movlb	0	; () banked
  7341  012678  51B5               	movf	GetPortPORT@pInput& (0+255),w,b
  7342                           
  7343                           ; Switch size 1, requested type "space"
  7344                           ; Number of cases is 7, Range of values is 0 to 6
  7345                           ; switch strategies available:
  7346                           ; Name         Instructions Cycles
  7347                           ; simple_byte           22    12 (average)
  7348                           ;	Chosen strategy is simple_byte
  7349  01267A  0A00               	xorlw	0	; case 0
  7350  01267C  B4D8               	btfsc	status,2,c
  7351  01267E  D7D2               	goto	l351
  7352  012680  0A01               	xorlw	1	; case 1
  7353  012682  B4D8               	btfsc	status,2,c
  7354  012684  D7D5               	goto	l353
  7355  012686  0A03               	xorlw	3	; case 2
  7356  012688  B4D8               	btfsc	status,2,c
  7357  01268A  D7D7               	goto	l354
  7358  01268C  0A01               	xorlw	1	; case 3
  7359  01268E  B4D8               	btfsc	status,2,c
  7360  012690  D7D9               	goto	l355
  7361  012692  0A07               	xorlw	7	; case 4
  7362  012694  B4D8               	btfsc	status,2,c
  7363  012696  D7DB               	goto	l356
  7364  012698  0A01               	xorlw	1	; case 5
  7365  01269A  B4D8               	btfsc	status,2,c
  7366  01269C  D7DD               	goto	l357
  7367  01269E  0A03               	xorlw	3	; case 6
  7368  0126A0  B4D8               	btfsc	status,2,c
  7369  0126A2  D7DF               	goto	l358
  7370  0126A4  D7E3               	goto	l359
  7371  0126A6                     __end_of_GetPortPORT:
  7372                           	opt stack 0
  7373                           tosu	equ	0xFFF
  7374                           tosh	equ	0xFFE
  7375                           tosl	equ	0xFFD
  7376                           pclath	equ	0xFFA
  7377                           tblptru	equ	0xFF8
  7378                           tblptrh	equ	0xFF7
  7379                           tblptrl	equ	0xFF6
  7380                           tablat	equ	0xFF5
  7381                           prodh	equ	0xFF4
  7382                           prodl	equ	0xFF3
  7383                           postinc0	equ	0xFEE
  7384                           wreg	equ	0xFE8
  7385                           postdec1	equ	0xFE5
  7386                           fsr1h	equ	0xFE2
  7387                           fsr1l	equ	0xFE1
  7388                           indf2	equ	0xFDF
  7389                           postinc2	equ	0xFDE
  7390                           postdec2	equ	0xFDD
  7391                           fsr2h	equ	0xFDA
  7392                           fsr2l	equ	0xFD9
  7393                           status	equ	0xFD8
  7394                           
  7395 ;; *************** function _LED_Init *****************
  7396 ;; Defined at:
  7397 ;;		line 15 in file "Library/LED.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  pLED            1    wreg     enum E6739
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  pLED            1   45[BANK0 ] enum E6739
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      void 
  7404 ;; Registers used:
  7405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;Total ram usage:        1 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:   12
  7418 ;; This function calls:
  7419 ;;		_LED_Set
  7420 ;;		_Port_SetPinType
  7421 ;; This function is called by:
  7422 ;;		_MXK_Init
  7423 ;;		_main
  7424 ;; This function uses a non-reentrant model
  7425 ;;
  7426                           
  7427                           	psect	text26
  7428  012F3E                     __ptext26:
  7429                           	opt stack 0
  7430  012F3E                     _LED_Init:
  7431                           	opt stack 17
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;incstack = 0
  7435                           ;LED_Init@pLED stored from wreg
  7436  012F3E  0100               	movlb	0	; () banked
  7437  012F40  6FE0               	movwf	LED_Init@pLED& (0+255),b
  7438                           
  7439                           ;LED.c: 17: switch (pLED)
  7440  012F42  D018               	goto	l220
  7441  012F44                     
  7442                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7443  012F44  0EA5               	movlw	low _PortC
  7444  012F46  0100               	movlb	0	; () banked
  7445  012F48  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  7446  012F4A  0E00               	movlw	high _PortC
  7447  012F4C  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7448  012F4E  0E00               	movlw	0
  7449  012F50  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  7450  012F52  0E03               	movlw	3
  7451  012F54  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  7452  012F56  EC34  F087         	call	_Port_SetPinType	;wreg free
  7453                           
  7454                           ;LED.c: 21: break;
  7455  012F5A  D014               	goto	l222
  7456  012F5C                     
  7457                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7458  012F5C  0EA5               	movlw	low _PortC
  7459  012F5E  0100               	movlb	0	; () banked
  7460  012F60  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  7461  012F62  0E00               	movlw	high _PortC
  7462  012F64  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7463  012F66  0E01               	movlw	1
  7464  012F68  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  7465  012F6A  0E03               	movlw	3
  7466  012F6C  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  7467  012F6E  EC34  F087         	call	_Port_SetPinType	;wreg free
  7468                           
  7469                           ;LED.c: 25: }
  7470                           
  7471                           ;LED.c: 24: break;
  7472  012F72  D008               	goto	l222
  7473  012F74                     l220:
  7474  012F74  0100               	movlb	0	; () banked
  7475  012F76  51E0               	movf	LED_Init@pLED& (0+255),w,b
  7476                           
  7477                           ; Switch size 1, requested type "space"
  7478                           ; Number of cases is 2, Range of values is 0 to 1
  7479                           ; switch strategies available:
  7480                           ; Name         Instructions Cycles
  7481                           ; simple_byte            7     4 (average)
  7482                           ;	Chosen strategy is simple_byte
  7483  012F78  0A00               	xorlw	0	; case 0
  7484  012F7A  B4D8               	btfsc	status,2,c
  7485  012F7C  D7E3               	goto	l221
  7486  012F7E  0A01               	xorlw	1	; case 1
  7487  012F80  B4D8               	btfsc	status,2,c
  7488  012F82  D7EC               	goto	l223
  7489  012F84                     l222:
  7490                           
  7491                           ;LED.c: 26: LED_Set(pLED, 0);
  7492                           
  7493                           ; BSR set to: 0
  7494  012F84  0E00               	movlw	0
  7495  012F86  0100               	movlb	0	; () banked
  7496  012F88  6FC7               	movwf	LED_Set@pValue& (0+255),b
  7497  012F8A  51E0               	movf	LED_Init@pLED& (0+255),w,b
  7498  012F8C  EC0E  F099         	call	_LED_Set
  7499  012F90  0012               	return		;funcret
  7500  012F92                     __end_of_LED_Init:
  7501                           	opt stack 0
  7502                           tosu	equ	0xFFF
  7503                           tosh	equ	0xFFE
  7504                           tosl	equ	0xFFD
  7505                           pclath	equ	0xFFA
  7506                           tblptru	equ	0xFF8
  7507                           tblptrh	equ	0xFF7
  7508                           tblptrl	equ	0xFF6
  7509                           tablat	equ	0xFF5
  7510                           prodh	equ	0xFF4
  7511                           prodl	equ	0xFF3
  7512                           postinc0	equ	0xFEE
  7513                           wreg	equ	0xFE8
  7514                           postdec1	equ	0xFE5
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function _LED_Set *****************
  7525 ;; Defined at:
  7526 ;;		line 33 in file "Library/LED.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  pLED            1    wreg     enum E6739
  7529 ;;  pValue          1   20[BANK0 ] unsigned char 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  pLED            1   21[BANK0 ] enum E6739
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  1    wreg      void 
  7534 ;; Registers used:
  7535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7541 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;Total ram usage:        2 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:   11
  7548 ;; This function calls:
  7549 ;;		_Port_SetPin
  7550 ;; This function is called by:
  7551 ;;		_LED_Init
  7552 ;;		_SYSTEM_Initialize
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text27
  7557  01321C                     __ptext27:
  7558                           	opt stack 0
  7559  01321C                     _LED_Set:
  7560                           	opt stack 17
  7561                           
  7562                           ;incstack = 0
  7563                           ;LED_Set@pLED stored from wreg
  7564  01321C  0100               	movlb	0	; () banked
  7565  01321E  6FC8               	movwf	LED_Set@pLED& (0+255),b
  7566                           
  7567                           ;LED.c: 35: switch (pLED)
  7568  013220  D018               	goto	l227
  7569  013222                     
  7570                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7571  013222  0EA5               	movlw	low _PortC
  7572  013224  0100               	movlb	0	; () banked
  7573  013226  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7574  013228  0E00               	movlw	high _PortC
  7575  01322A  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7576  01322C  0E00               	movlw	0
  7577  01322E  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7578  013230  C0C7  F0C5         	movff	LED_Set@pValue,Port_SetPin@pValue
  7579  013234  EC61  F08F         	call	_Port_SetPin	;wreg free
  7580                           
  7581                           ;LED.c: 39: break;
  7582  013238  0012               	return	
  7583  01323A                     
  7584                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7585  01323A  0EA5               	movlw	low _PortC
  7586  01323C  0100               	movlb	0	; () banked
  7587  01323E  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7588  013240  0E00               	movlw	high _PortC
  7589  013242  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7590  013244  0E01               	movlw	1
  7591  013246  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7592  013248  C0C7  F0C5         	movff	LED_Set@pValue,Port_SetPin@pValue
  7593  01324C  EC61  F08F         	call	_Port_SetPin	;wreg free
  7594                           
  7595                           ;LED.c: 43: }
  7596                           
  7597                           ;LED.c: 42: break;
  7598  013250  0012               	return	
  7599  013252                     l227:
  7600  013252  0100               	movlb	0	; () banked
  7601  013254  51C8               	movf	LED_Set@pLED& (0+255),w,b
  7602                           
  7603                           ; Switch size 1, requested type "space"
  7604                           ; Number of cases is 2, Range of values is 0 to 1
  7605                           ; switch strategies available:
  7606                           ; Name         Instructions Cycles
  7607                           ; simple_byte            7     4 (average)
  7608                           ;	Chosen strategy is simple_byte
  7609  013256  0A00               	xorlw	0	; case 0
  7610  013258  B4D8               	btfsc	status,2,c
  7611  01325A  D7E3               	goto	l228
  7612  01325C  0A01               	xorlw	1	; case 1
  7613  01325E  A4D8               	btfss	status,2,c
  7614  013260  0012               	return	
  7615  013262  D7EB               	goto	l230
  7616  013264                     __end_of_LED_Set:
  7617                           	opt stack 0
  7618                           tosu	equ	0xFFF
  7619                           tosh	equ	0xFFE
  7620                           tosl	equ	0xFFD
  7621                           pclath	equ	0xFFA
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           postdec1	equ	0xFE5
  7631                           fsr1h	equ	0xFE2
  7632                           fsr1l	equ	0xFE1
  7633                           indf2	equ	0xFDF
  7634                           postinc2	equ	0xFDE
  7635                           postdec2	equ	0xFDD
  7636                           fsr2h	equ	0xFDA
  7637                           fsr2l	equ	0xFD9
  7638                           status	equ	0xFD8
  7639                           
  7640 ;; *************** function _MXK_Dequeue *****************
  7641 ;; Defined at:
  7642 ;;		line 153 in file "Library/MXK.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;		None
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;		None
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7660 ;;Total ram usage:        0 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:   12
  7663 ;; This function calls:
  7664 ;;		Absolute function
  7665 ;;		_Motor_Step
  7666 ;; This function is called by:
  7667 ;;		_main
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           	psect	text28
  7672  0135CA                     __ptext28:
  7673                           	opt stack 0
  7674  0135CA                     _MXK_Dequeue:
  7675                           	opt stack 18
  7676                           
  7677                           ;MXK.c: 155: if (lQueue)
  7678                           
  7679                           ;incstack = 0
  7680  0135CA  0100               	movlb	0	; () banked
  7681  0135CC  5163               	movf	_lQueue& (0+255),w,b	;volatile
  7682  0135CE  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  7683  0135D0  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  7684  0135D2  B4D8               	btfsc	status,2,c
  7685  0135D4  D00C               	goto	u10519
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;MXK.c: 156: lQueue();
  7689  0135D6  D801               	call	u10518
  7690  0135D8  D00A               	goto	u10519
  7691  0135DA                     u10518:
  7692  0135DA  0005               	push	
  7693  0135DC  6EFA               	movwf	pclath,c
  7694  0135DE  5163               	movf	_lQueue& (0+255),w,b	;volatile
  7695  0135E0  6EFD               	movwf	tosl,c
  7696  0135E2  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  7697  0135E4  6EFE               	movwf	tosh,c
  7698  0135E6  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  7699  0135E8  6EFF               	movwf	tosu,c
  7700  0135EA  50FA               	movf	pclath,w,c
  7701  0135EC  0012               	return		;indir
  7702  0135EE                     u10519:
  7703                           
  7704                           ;MXK.c: 157: lQueue = 0;
  7705  0135EE  0E00               	movlw	0
  7706  0135F0  0100               	movlb	0	; () banked
  7707  0135F2  6F63               	movwf	_lQueue& (0+255),b	;volatile
  7708  0135F4  0E00               	movlw	0
  7709  0135F6  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7710  0135F8  0E00               	movlw	0
  7711  0135FA  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7712                           
  7713                           ; BSR set to: 0
  7714  0135FC  0012               	return		;funcret
  7715  0135FE                     __end_of_MXK_Dequeue:
  7716                           	opt stack 0
  7717                           tosu	equ	0xFFF
  7718                           tosh	equ	0xFFE
  7719                           tosl	equ	0xFFD
  7720                           pclath	equ	0xFFA
  7721                           tblptru	equ	0xFF8
  7722                           tblptrh	equ	0xFF7
  7723                           tblptrl	equ	0xFF6
  7724                           tablat	equ	0xFF5
  7725                           prodh	equ	0xFF4
  7726                           prodl	equ	0xFF3
  7727                           postinc0	equ	0xFEE
  7728                           wreg	equ	0xFE8
  7729                           postdec1	equ	0xFE5
  7730                           fsr1h	equ	0xFE2
  7731                           fsr1l	equ	0xFE1
  7732                           indf2	equ	0xFDF
  7733                           postinc2	equ	0xFDE
  7734                           postdec2	equ	0xFDD
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function _Motor_Step *****************
  7740 ;; Defined at:
  7741 ;;		line 75 in file "Library/Motor.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;		None
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;		None
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      void 
  7748 ;; Registers used:
  7749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7750 ;; Tracked objects:
  7751 ;;		On entry : 0/0
  7752 ;;		On exit  : 0/0
  7753 ;;		Unchanged: 0/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;Total ram usage:        2 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:   11
  7762 ;; This function calls:
  7763 ;;		_MXK_Queue
  7764 ;;		_MXK_Release
  7765 ;;		_MXK_SwitchTo
  7766 ;;		_Port_SetPin
  7767 ;;		_Timer0_Restart
  7768 ;;		_Timer0_Stop
  7769 ;; This function is called by:
  7770 ;;		_Motor_Init
  7771 ;;		_Timer0_ISR
  7772 ;;		_MXK_Dequeue
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           	psect	text29
  7777  011BF6                     __ptext29:
  7778                           	opt stack 0
  7779  011BF6                     _Motor_Step:
  7780                           	opt stack 0
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;Skip over the trampoline to the duplicate function for level 2
  7784  011BF6  B251               	btfsc	btemp,1,c
  7785  011BF8  EF82  F08E         	goto	i2_Motor_Step
  7786  011BFC                     _Motor_Step$intlevel0:
  7787                           	opt stack 18
  7788                           
  7789                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7790                           
  7791                           ;incstack = 0
  7792  011BFC  0100               	movlb	0	; () banked
  7793  011BFE  EE20 F004          	lfsr	2,4
  7794  011C02  517B               	movf	_lMotor& (0+255),w,b
  7795  011C04  26D9               	addwf	fsr2l,f,c
  7796  011C06  517C               	movf	(_lMotor+1)& (0+255),w,b
  7797  011C08  22DA               	addwfc	fsr2h,f,c
  7798  011C0A  50DF               	movf	indf2,w,c
  7799  011C0C  EC3C  F09A         	call	_MXK_SwitchTo
  7800  011C10  0900               	iorlw	0
  7801  011C12  B4D8               	btfsc	status,2,c
  7802  011C14  D06E               	goto	l1627
  7803                           
  7804                           ;Motor.c: 78: {
  7805                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7806  011C16  C07B  FFD9         	movff	_lMotor,fsr2l
  7807  011C1A  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7808  011C1E  50DE               	movf	postinc2,w,c
  7809  011C20  10DE               	iorwf	postinc2,w,c
  7810  011C22  B4D8               	btfsc	status,2,c
  7811  011C24  D061               	goto	l1628
  7812                           
  7813                           ;Motor.c: 80: {
  7814                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7815  011C26  C07B  FFD9         	movff	_lMotor,fsr2l
  7816  011C2A  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7817  011C2E  0E01               	movlw	1
  7818  011C30  BEDB               	btfsc	plusw2,7,c
  7819  011C32  D023               	goto	l1629
  7820  011C34  0E01               	movlw	1
  7821  011C36  50DB               	movf	plusw2,w,c
  7822  011C38  E103               	bnz	u9030
  7823  011C3A  04DE               	decf	postinc2,w,c
  7824  011C3C  A0D8               	btfss	status,0,c
  7825  011C3E  D01D               	goto	l1629
  7826  011C40                     u9030:
  7827                           
  7828                           ;Motor.c: 83: {
  7829                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7830  011C40  C07B  FFD9         	movff	_lMotor,fsr2l
  7831  011C44  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7832  011C48  28DE               	incf	postinc2,w,c
  7833  011C4A  E104               	bnz	u9040
  7834  011C4C  0E7F               	movlw	127
  7835  011C4E  18DE               	xorwf	postinc2,w,c
  7836  011C50  B4D8               	btfsc	status,2,c
  7837  011C52  D007               	goto	l1630
  7838  011C54                     u9040:
  7839                           
  7840                           ;Motor.c: 85: lMotor->mDelta --;
  7841  011C54  C07B  FFD9         	movff	_lMotor,fsr2l
  7842  011C58  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7843  011C5C  06DE               	decf	postinc2,f,c
  7844  011C5E  0E00               	movlw	0
  7845  011C60  5ADD               	subwfb	postdec2,f,c
  7846  011C62                     l1630:
  7847                           
  7848                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7849  011C62  0E91               	movlw	low _PortE
  7850  011C64  0100               	movlb	0	; () banked
  7851  011C66  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7852  011C68  0E00               	movlw	high _PortE
  7853  011C6A  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7854  011C6C  0E00               	movlw	0
  7855  011C6E  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7856  011C70  0E01               	movlw	1
  7857  011C72  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7858  011C74  EC61  F08F         	call	_Port_SetPin	;wreg free
  7859                           
  7860                           ;Motor.c: 88: }
  7861  011C78  D01C               	goto	l1631
  7862  011C7A                     l1629:
  7863                           
  7864                           ;Motor.c: 89: else
  7865                           ;Motor.c: 90: {
  7866                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7867  011C7A  C07B  FFD9         	movff	_lMotor,fsr2l
  7868  011C7E  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7869  011C82  04DE               	decf	postinc2,w,c
  7870  011C84  E104               	bnz	u9050
  7871  011C86  0E80               	movlw	128
  7872  011C88  18DE               	xorwf	postinc2,w,c
  7873  011C8A  B4D8               	btfsc	status,2,c
  7874  011C8C  D007               	goto	l1632
  7875  011C8E                     u9050:
  7876                           
  7877                           ;Motor.c: 92: lMotor->mDelta ++;
  7878  011C8E  C07B  FFD9         	movff	_lMotor,fsr2l
  7879  011C92  C07C  FFDA         	movff	_lMotor+1,fsr2h
  7880  011C96  2ADE               	incf	postinc2,f,c
  7881  011C98  0E00               	movlw	0
  7882  011C9A  22DD               	addwfc	postdec2,f,c
  7883  011C9C                     l1632:
  7884                           
  7885                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7886  011C9C  0E91               	movlw	low _PortE
  7887  011C9E  0100               	movlb	0	; () banked
  7888  011CA0  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7889  011CA2  0E00               	movlw	high _PortE
  7890  011CA4  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7891  011CA6  0E00               	movlw	0
  7892  011CA8  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7893  011CAA  0E00               	movlw	0
  7894  011CAC  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7895  011CAE  EC61  F08F         	call	_Port_SetPin	;wreg free
  7896  011CB2                     l1631:
  7897                           
  7898                           ;Motor.c: 95: }
  7899                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7900  011CB2  0E91               	movlw	low _PortE
  7901  011CB4  0100               	movlb	0	; () banked
  7902  011CB6  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7903  011CB8  0E00               	movlw	high _PortE
  7904  011CBA  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7905  011CBC  0E01               	movlw	1
  7906  011CBE  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7907  011CC0  0E01               	movlw	1
  7908  011CC2  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7909  011CC4  EC61  F08F         	call	_Port_SetPin	;wreg free
  7910                           
  7911                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  7912  011CC8  0E91               	movlw	low _PortE
  7913  011CCA  0100               	movlb	0	; () banked
  7914  011CCC  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  7915  011CCE  0E00               	movlw	high _PortE
  7916  011CD0  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7917  011CD2  0E01               	movlw	1
  7918  011CD4  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  7919  011CD6  0E00               	movlw	0
  7920  011CD8  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  7921  011CDA  EC61  F08F         	call	_Port_SetPin	;wreg free
  7922                           
  7923                           ;Motor.c: 101: MXK_Release();
  7924  011CDE  EC9E  F09C         	call	_MXK_Release	;wreg free
  7925                           
  7926                           ;Motor.c: 102: Timer0_Restart();
  7927  011CE2  EC77  F09D         	call	_Timer0_Restart	;wreg free
  7928                           
  7929                           ;Motor.c: 103: return;
  7930  011CE6  0012               	return	
  7931  011CE8                     l1628:
  7932                           
  7933                           ;Motor.c: 104: }
  7934                           ;Motor.c: 105: MXK_Release();
  7935  011CE8  EC9E  F09C         	call	_MXK_Release	;wreg free
  7936                           
  7937                           ;Motor.c: 106: Timer0_Stop();
  7938  011CEC  EC95  F09D         	call	_Timer0_Stop	;wreg free
  7939                           
  7940                           ;Motor.c: 107: return;
  7941  011CF0  0012               	return	
  7942  011CF2                     l1627:
  7943                           
  7944                           ;Motor.c: 108: }
  7945                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  7946  011CF2  C066  F0B3         	movff	_lStepFunction,MXK_Queue@pCallback
  7947  011CF6  C067  F0B4         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  7948  011CFA  C068  F0B5         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  7949  011CFE  EC5C  F09D         	call	_MXK_Queue	;wreg free
  7950  011D02  0012               	return		;funcret
  7951  011D04                     __end_of_Motor_Step:
  7952                           	opt stack 0
  7953                           tosu	equ	0xFFF
  7954                           tosh	equ	0xFFE
  7955                           tosl	equ	0xFFD
  7956                           pclath	equ	0xFFA
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           postinc0	equ	0xFEE
  7964                           wreg	equ	0xFE8
  7965                           postdec1	equ	0xFE5
  7966                           fsr1h	equ	0xFE2
  7967                           fsr1l	equ	0xFE1
  7968                           indf2	equ	0xFDF
  7969                           postinc2	equ	0xFDE
  7970                           postdec2	equ	0xFDD
  7971                           plusw2	equ	0xFDB
  7972                           fsr2h	equ	0xFDA
  7973                           fsr2l	equ	0xFD9
  7974                           status	equ	0xFD8
  7975                           
  7976 ;; *************** function _Timer0_Stop *****************
  7977 ;; Defined at:
  7978 ;;		line 89 in file "Library/Timer0.c"
  7979 ;; Parameters:    Size  Location     Type
  7980 ;;		None
  7981 ;; Auto vars:     Size  Location     Type
  7982 ;;		None
  7983 ;; Return value:  Size  Location     Type
  7984 ;;                  1    wreg      void 
  7985 ;; Registers used:
  7986 ;;		None
  7987 ;; Tracked objects:
  7988 ;;		On entry : 0/0
  7989 ;;		On exit  : 0/0
  7990 ;;		Unchanged: 0/0
  7991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;Total ram usage:        0 bytes
  7997 ;; Hardware stack levels used:    1
  7998 ;; Hardware stack levels required when called:    7
  7999 ;; This function calls:
  8000 ;;		Nothing
  8001 ;; This function is called by:
  8002 ;;		_Motor_Step
  8003 ;; This function uses a non-reentrant model
  8004 ;;
  8005                           
  8006                           	psect	text30
  8007  013B2A                     __ptext30:
  8008                           	opt stack 0
  8009  013B2A                     _Timer0_Stop:
  8010                           	opt stack 21
  8011                           
  8012                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8013                           
  8014                           ;incstack = 0
  8015  013B2A  9AF2               	bcf	intcon,5,c	;volatile
  8016                           
  8017                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8018  013B2C  94F2               	bcf	intcon,2,c	;volatile
  8019  013B2E  0012               	return		;funcret
  8020  013B30                     __end_of_Timer0_Stop:
  8021                           	opt stack 0
  8022                           tosu	equ	0xFFF
  8023                           tosh	equ	0xFFE
  8024                           tosl	equ	0xFFD
  8025                           pclath	equ	0xFFA
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           intcon	equ	0xFF2
  8033                           postinc0	equ	0xFEE
  8034                           wreg	equ	0xFE8
  8035                           postdec1	equ	0xFE5
  8036                           fsr1h	equ	0xFE2
  8037                           fsr1l	equ	0xFE1
  8038                           indf2	equ	0xFDF
  8039                           postinc2	equ	0xFDE
  8040                           postdec2	equ	0xFDD
  8041                           plusw2	equ	0xFDB
  8042                           fsr2h	equ	0xFDA
  8043                           fsr2l	equ	0xFD9
  8044                           status	equ	0xFD8
  8045                           
  8046 ;; *************** function _Timer0_Restart *****************
  8047 ;; Defined at:
  8048 ;;		line 83 in file "Library/Timer0.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;		None
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		None
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;Total ram usage:        0 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    7
  8069 ;; This function calls:
  8070 ;;		Nothing
  8071 ;; This function is called by:
  8072 ;;		_Motor_Step
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text31
  8077  013AEE                     __ptext31:
  8078                           	opt stack 0
  8079  013AEE                     _Timer0_Restart:
  8080                           	opt stack 21
  8081                           
  8082                           ;Timer0.c: 85: TMR0 = COUNTER;
  8083                           
  8084                           ;incstack = 0
  8085  013AEE  C02F  FFD6         	movff	_COUNTER,4054	;volatile
  8086  013AF2  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
  8087                           
  8088                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8089  013AF6  8AF2               	bsf	intcon,5,c	;volatile
  8090  013AF8  0012               	return		;funcret
  8091  013AFA                     __end_of_Timer0_Restart:
  8092                           	opt stack 0
  8093                           tosu	equ	0xFFF
  8094                           tosh	equ	0xFFE
  8095                           tosl	equ	0xFFD
  8096                           pclath	equ	0xFFA
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           postinc0	equ	0xFEE
  8105                           wreg	equ	0xFE8
  8106                           postdec1	equ	0xFE5
  8107                           fsr1h	equ	0xFE2
  8108                           fsr1l	equ	0xFE1
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           plusw2	equ	0xFDB
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _MXK_SwitchTo *****************
  8118 ;; Defined at:
  8119 ;;		line 105 in file "Library/MXK.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  pModule         1    wreg     enum E6927
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;  pModule         1    7[BANK0 ] enum E6927
  8124 ;;  CUR             1    6[BANK0 ] unsigned char 
  8125 ;; Return value:  Size  Location     Type
  8126 ;;                  1    wreg      unsigned char 
  8127 ;; Registers used:
  8128 ;;		wreg, status,2, status,0, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8135 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;Total ram usage:        2 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    8
  8141 ;; This function calls:
  8142 ;;		_delay_us
  8143 ;; This function is called by:
  8144 ;;		_Motor_Step
  8145 ;; This function uses a non-reentrant model
  8146 ;;
  8147                           
  8148                           	psect	text32
  8149  013478                     __ptext32:
  8150                           	opt stack 0
  8151  013478                     _MXK_SwitchTo:
  8152                           	opt stack 20
  8153                           
  8154                           ;incstack = 0
  8155                           ;MXK_SwitchTo@pModule stored from wreg
  8156  013478  0100               	movlb	0	; () banked
  8157  01347A  6FBA               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8158                           
  8159                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8160  01347C  5086               	movf	3974,w,c	;volatile
  8161  01347E  0B0F               	andlw	15
  8162  013480  0100               	movlb	0	; () banked
  8163  013482  6FB9               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8167  013484  504B               	movf	_Bus_State,w,c
  8168  013486  A4D8               	btfss	status,2,c
  8169  013488  D002               	goto	l1730
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;MXK.c: 110: return 0;
  8173  01348A  0E00               	movlw	0
  8174                           
  8175                           ; BSR set to: 0
  8176  01348C  0012               	return	
  8177  01348E                     l1730:
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8181                           
  8182                           ; BSR set to: 0
  8183  01348E  0E00               	movlw	0
  8184  013490  6E4B               	movwf	_Bus_State,c
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;MXK.c: 114: if (CUR != pModule)
  8188  013492  51BA               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8189  013494  19B9               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8190  013496  B4D8               	btfsc	status,2,c
  8191  013498  D00A               	goto	l1732
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;MXK.c: 115: {
  8195                           ;MXK.c: 116: PORTG &= ~(0xF);
  8196  01349A  0EF0               	movlw	240
  8197  01349C  1686               	andwf	3974,f,c	;volatile
  8198                           
  8199                           ;MXK.c: 117: PORTG |= pModule;
  8200  01349E  51BA               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8201  0134A0  1286               	iorwf	3974,f,c	;volatile
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;MXK.c: 120: delay_us(10);
  8205  0134A2  0E00               	movlw	0
  8206  0134A4  6FB4               	movwf	(delay_us@us+1)& (0+255),b
  8207  0134A6  0E0A               	movlw	10
  8208  0134A8  6FB3               	movwf	delay_us@us& (0+255),b
  8209  0134AA  EC56  F099         	call	_delay_us	;wreg free
  8210  0134AE                     l1732:
  8211                           
  8212                           ;MXK.c: 121: }
  8213                           ;MXK.c: 122: return 1;
  8214  0134AE  0E01               	movlw	1
  8215  0134B0  0012               	return	
  8216  0134B2                     __end_of_MXK_SwitchTo:
  8217                           	opt stack 0
  8218                           tosu	equ	0xFFF
  8219                           tosh	equ	0xFFE
  8220                           tosl	equ	0xFFD
  8221                           pclath	equ	0xFFA
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           postinc0	equ	0xFEE
  8230                           wreg	equ	0xFE8
  8231                           postdec1	equ	0xFE5
  8232                           fsr1h	equ	0xFE2
  8233                           fsr1l	equ	0xFE1
  8234                           indf2	equ	0xFDF
  8235                           postinc2	equ	0xFDE
  8236                           postdec2	equ	0xFDD
  8237                           plusw2	equ	0xFDB
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _MXK_Release *****************
  8243 ;; Defined at:
  8244 ;;		line 130 in file "Library/MXK.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;		None
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;		None
  8249 ;; Return value:  Size  Location     Type
  8250 ;;                  1    wreg      unsigned char 
  8251 ;; Registers used:
  8252 ;;		wreg, status,2, status,0
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;Total ram usage:        0 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    7
  8265 ;; This function calls:
  8266 ;;		Nothing
  8267 ;; This function is called by:
  8268 ;;		_Motor_Step
  8269 ;;		_main
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text33
  8274  01393C                     __ptext33:
  8275                           	opt stack 0
  8276  01393C                     _MXK_Release:
  8277                           	opt stack 23
  8278                           
  8279                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8280                           
  8281                           ;incstack = 0
  8282  01393C  0E01               	movlw	1
  8283  01393E  6E4B               	movwf	_Bus_State,c
  8284                           
  8285                           ;MXK.c: 134: if (lQueue != 0)
  8286  013940  0100               	movlb	0	; () banked
  8287  013942  5163               	movf	_lQueue& (0+255),w,b	;volatile
  8288  013944  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  8289  013946  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  8290  013948  B4D8               	btfsc	status,2,c
  8291  01394A  D002               	goto	l1735
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;MXK.c: 135: return 1;
  8295  01394C  0E01               	movlw	1
  8296                           
  8297                           ; BSR set to: 0
  8298  01394E  0012               	return	
  8299  013950                     l1735:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;MXK.c: 137: return 0;
  8303                           
  8304                           ; BSR set to: 0
  8305  013950  0E00               	movlw	0
  8306  013952  0012               	return	
  8307  013954                     __end_of_MXK_Release:
  8308                           	opt stack 0
  8309                           tosu	equ	0xFFF
  8310                           tosh	equ	0xFFE
  8311                           tosl	equ	0xFFD
  8312                           pclath	equ	0xFFA
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           intcon	equ	0xFF2
  8320                           postinc0	equ	0xFEE
  8321                           wreg	equ	0xFE8
  8322                           postdec1	equ	0xFE5
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           plusw2	equ	0xFDB
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function _MXK_Queue *****************
  8334 ;; Defined at:
  8335 ;;		line 144 in file "Library/MXK.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8338 ;;		 -> Absolute function(1), Motor_Step(1), 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;		None
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8350 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;Total ram usage:        3 bytes
  8355 ;; Hardware stack levels used:    1
  8356 ;; Hardware stack levels required when called:    7
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		_Motor_Step
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text34
  8365  013AB8                     __ptext34:
  8366                           	opt stack 0
  8367  013AB8                     _MXK_Queue:
  8368                           	opt stack 21
  8369                           
  8370                           ;MXK.c: 146: lQueue = pCallback;
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;incstack = 0
  8374  013AB8  C0B3  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8375  013ABC  C0B4  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8376  013AC0  C0B5  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8377  013AC4  0012               	return		;funcret
  8378  013AC6                     __end_of_MXK_Queue:
  8379                           	opt stack 0
  8380                           tosu	equ	0xFFF
  8381                           tosh	equ	0xFFE
  8382                           tosl	equ	0xFFD
  8383                           pclath	equ	0xFFA
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           prodh	equ	0xFF4
  8389                           prodl	equ	0xFF3
  8390                           intcon	equ	0xFF2
  8391                           postinc0	equ	0xFEE
  8392                           wreg	equ	0xFE8
  8393                           postdec1	equ	0xFE5
  8394                           fsr1h	equ	0xFE2
  8395                           fsr1l	equ	0xFE1
  8396                           indf2	equ	0xFDF
  8397                           postinc2	equ	0xFDE
  8398                           postdec2	equ	0xFDD
  8399                           plusw2	equ	0xFDB
  8400                           fsr2h	equ	0xFDA
  8401                           fsr2l	equ	0xFD9
  8402                           status	equ	0xFD8
  8403                           
  8404 ;; *************** function _MXK_BlockSwitchTo *****************
  8405 ;; Defined at:
  8406 ;;		line 82 in file "Library/MXK.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  pModule         1    wreg     enum E6927
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;  pModule         1    7[BANK0 ] enum E6927
  8411 ;;  CUR             1    6[BANK0 ] unsigned char 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      unsigned char 
  8414 ;; Registers used:
  8415 ;;		wreg, status,2, status,0, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;Total ram usage:        2 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    8
  8428 ;; This function calls:
  8429 ;;		_delay_us
  8430 ;; This function is called by:
  8431 ;;		_main
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           	psect	text35
  8436  013526                     __ptext35:
  8437                           	opt stack 0
  8438  013526                     _MXK_BlockSwitchTo:
  8439                           	opt stack 22
  8440                           
  8441                           ;incstack = 0
  8442                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8443  013526  0100               	movlb	0	; () banked
  8444  013528  6FBA               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8445                           
  8446                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8447  01352A  5086               	movf	3974,w,c	;volatile
  8448  01352C  0B0F               	andlw	15
  8449  01352E  0100               	movlb	0	; () banked
  8450  013530  6FB9               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8451  013532                     
  8452                           ; BSR set to: 0
  8453                           
  8454                           ; BSR set to: 0
  8455  013532  504B               	movf	_Bus_State,w,c
  8456  013534  B4D8               	btfsc	status,2,c
  8457  013536  D7FD               	goto	l1724
  8458                           
  8459                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8460  013538  0E00               	movlw	0
  8461  01353A  6E4B               	movwf	_Bus_State,c
  8462                           
  8463                           ;MXK.c: 90: if (CUR != pModule)
  8464  01353C  0100               	movlb	0	; () banked
  8465  01353E  51BA               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8466  013540  19B9               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8467  013542  B4D8               	btfsc	status,2,c
  8468  013544  D00A               	goto	l1726
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;MXK.c: 91: {
  8472                           ;MXK.c: 92: PORTG &= ~(0xF);
  8473  013546  0EF0               	movlw	240
  8474  013548  1686               	andwf	3974,f,c	;volatile
  8475                           
  8476                           ;MXK.c: 93: PORTG |= pModule;
  8477  01354A  51BA               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8478  01354C  1286               	iorwf	3974,f,c	;volatile
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;MXK.c: 96: delay_us(10);
  8482  01354E  0E00               	movlw	0
  8483  013550  6FB4               	movwf	(delay_us@us+1)& (0+255),b
  8484  013552  0E0A               	movlw	10
  8485  013554  6FB3               	movwf	delay_us@us& (0+255),b
  8486  013556  EC56  F099         	call	_delay_us	;wreg free
  8487  01355A                     l1726:
  8488                           
  8489                           ;MXK.c: 97: }
  8490                           ;MXK.c: 98: return 1;
  8491  01355A  0E01               	movlw	1
  8492  01355C  0012               	return	
  8493  01355E                     __end_of_MXK_BlockSwitchTo:
  8494                           	opt stack 0
  8495                           tosu	equ	0xFFF
  8496                           tosh	equ	0xFFE
  8497                           tosl	equ	0xFFD
  8498                           pclath	equ	0xFFA
  8499                           tblptru	equ	0xFF8
  8500                           tblptrh	equ	0xFF7
  8501                           tblptrl	equ	0xFF6
  8502                           tablat	equ	0xFF5
  8503                           prodh	equ	0xFF4
  8504                           prodl	equ	0xFF3
  8505                           intcon	equ	0xFF2
  8506                           postinc0	equ	0xFEE
  8507                           wreg	equ	0xFE8
  8508                           postdec1	equ	0xFE5
  8509                           fsr1h	equ	0xFE2
  8510                           fsr1l	equ	0xFE1
  8511                           indf2	equ	0xFDF
  8512                           postinc2	equ	0xFDE
  8513                           postdec2	equ	0xFDD
  8514                           plusw2	equ	0xFDB
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _delay_us *****************
  8520 ;; Defined at:
  8521 ;;		line 255 in file "Library/Types.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;  us              2    0[BANK0 ] unsigned short 
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;  u               4    2[BANK0 ] unsigned long 
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, status,2, status,0
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8535 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8536 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8538 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8539 ;;Total ram usage:        6 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    7
  8542 ;; This function calls:
  8543 ;;		Nothing
  8544 ;; This function is called by:
  8545 ;;		_MXK_BlockSwitchTo
  8546 ;;		_MXK_SwitchTo
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text36
  8551  0132AC                     __ptext36:
  8552                           	opt stack 0
  8553  0132AC                     _delay_us:
  8554                           	opt stack 20
  8555                           
  8556                           ;Types.c: 256: unsigned long u;
  8557                           ;Types.c: 257: while (us--) {
  8558                           
  8559                           ;incstack = 0
  8560  0132AC  D018               	goto	u8410
  8561  0132AE                     l12082:
  8562                           
  8563                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8564  0132AE  0E00               	movlw	0
  8565  0132B0  0100               	movlb	0	; () banked
  8566  0132B2  6FB5               	movwf	delay_us@u& (0+255),b
  8567  0132B4  0E00               	movlw	0
  8568  0132B6  6FB6               	movwf	(delay_us@u+1)& (0+255),b
  8569  0132B8  0E00               	movlw	0
  8570  0132BA  6FB7               	movwf	(delay_us@u+2)& (0+255),b
  8571  0132BC  0E00               	movlw	0
  8572  0132BE  6FB8               	movwf	(delay_us@u+3)& (0+255),b
  8573  0132C0                     l12084:
  8574                           
  8575                           ; BSR set to: 0
  8576  0132C0  51B5               	movf	delay_us@u& (0+255),w,b
  8577  0132C2  11B6               	iorwf	(delay_us@u+1)& (0+255),w,b
  8578  0132C4  11B7               	iorwf	(delay_us@u+2)& (0+255),w,b
  8579  0132C6  11B8               	iorwf	(delay_us@u+3)& (0+255),w,b
  8580  0132C8  A4D8               	btfss	status,2,c
  8581  0132CA  D009               	goto	u8410
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  0132CC  F000               	nop		; ;# 
  8587  0132CE  0E01               	movlw	1
  8588  0132D0  0100               	movlb	0	; () banked
  8589  0132D2  27B5               	addwf	delay_us@u& (0+255),f,b
  8590  0132D4  0E00               	movlw	0
  8591  0132D6  23B6               	addwfc	(delay_us@u+1)& (0+255),f,b
  8592  0132D8  23B7               	addwfc	(delay_us@u+2)& (0+255),f,b
  8593  0132DA  23B8               	addwfc	(delay_us@u+3)& (0+255),f,b
  8594  0132DC  D7F1               	goto	l12084
  8595  0132DE                     u8410:
  8596                           
  8597                           ; BSR set to: 0
  8598                           
  8599                           ; BSR set to: 0
  8600  0132DE  0100               	movlb	0	; () banked
  8601  0132E0  07B3               	decf	delay_us@us& (0+255),f,b
  8602  0132E2  A0D8               	btfss	status,0,c
  8603  0132E4  07B4               	decf	(delay_us@us+1)& (0+255),f,b
  8604  0132E6  29B3               	incf	delay_us@us& (0+255),w,b
  8605  0132E8  E1E2               	bnz	l12082
  8606  0132EA  29B4               	incf	(delay_us@us+1)& (0+255),w,b
  8607  0132EC  B4D8               	btfsc	status,2,c
  8608  0132EE  0012               	return	
  8609  0132F0  D7DE               	goto	l832
  8610  0132F2                     __end_of_delay_us:
  8611                           	opt stack 0
  8612                           tosu	equ	0xFFF
  8613                           tosh	equ	0xFFE
  8614                           tosl	equ	0xFFD
  8615                           pclath	equ	0xFFA
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           postinc0	equ	0xFEE
  8624                           wreg	equ	0xFE8
  8625                           postdec1	equ	0xFE5
  8626                           fsr1h	equ	0xFE2
  8627                           fsr1l	equ	0xFE1
  8628                           indf2	equ	0xFDF
  8629                           postinc2	equ	0xFDE
  8630                           postdec2	equ	0xFDD
  8631                           plusw2	equ	0xFDB
  8632                           fsr2h	equ	0xFDA
  8633                           fsr2l	equ	0xFD9
  8634                           status	equ	0xFD8
  8635                           
  8636 ;; *************** function _LCD_Init *****************
  8637 ;; Defined at:
  8638 ;;		line 172 in file "Library/LCD.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;  i               2   55[BANK0 ] unsigned short 
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;Total ram usage:        4 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:   15
  8659 ;; This function calls:
  8660 ;;		_Configure_GPIOs
  8661 ;;		_LCD_Fill
  8662 ;;		_LCD_Write
  8663 ;;		_Set_Rotation
  8664 ;;		_delay_ms
  8665 ;; This function is called by:
  8666 ;;		_main
  8667 ;; This function uses a non-reentrant model
  8668 ;;
  8669                           
  8670                           	psect	text37
  8671  0115C0                     __ptext37:
  8672                           	opt stack 0
  8673  0115C0                     _LCD_Init:
  8674                           	opt stack 15
  8675                           
  8676                           ;LCD.c: 174: UINT16 i;
  8677                           ;LCD.c: 175: Configure_GPIOs();
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;incstack = 0
  8681  0115C0  EC18  F097         	call	_Configure_GPIOs	;wreg free
  8682                           
  8683                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  8684  0115C4  0E00               	movlw	0
  8685  0115C6  0100               	movlb	0	; () banked
  8686  0115C8  6FEB               	movwf	(LCD_Init@i+1)& (0+255),b
  8687  0115CA  0E00               	movlw	0
  8688  0115CC  6FEA               	movwf	LCD_Init@i& (0+255),b
  8689                           
  8690                           ; BSR set to: 0
  8691  0115CE  51EB               	movf	(LCD_Init@i+1)& (0+255),w,b
  8692  0115D0  E17D               	bnz	u9100
  8693  0115D2  0E59               	movlw	89
  8694  0115D4  5DEA               	subwf	LCD_Init@i& (0+255),w,b
  8695  0115D6  B0D8               	btfsc	status,0,c
  8696  0115D8  D079               	goto	u9100
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;LCD.c: 178: {
  8700                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  8701                           
  8702                           ; BSR set to: 0
  8703                           
  8704                           ; BSR set to: 0
  8705  0115DA  90D8               	bcf	status,0,c
  8706  0115DC  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8707  0115DE  6EF6               	movwf	tblptrl,c
  8708  0115E0  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8709  0115E2  6EF7               	movwf	tblptrh,c
  8710  0115E4  0EEB               	movlw	low _InitList
  8711  0115E6  26F6               	addwf	tblptrl,f,c
  8712  0115E8  0EFB               	movlw	high _InitList
  8713  0115EA  22F7               	addwfc	tblptrh,f,c
  8714  0115EC                     	if	1	;There are 3 active tblptr bytes
  8715  0115EC  6AF8               	clrf	tblptru,c
  8716  0115EE  0E00               	movlw	low (__mediumconst shr (0+16))
  8717  0115F0  22F8               	addwfc	tblptru,f,c
  8718  0115F2                     	endif
  8719  0115F2  0009               	tblrd		*+
  8720  0115F4  0E80               	movlw	128
  8721  0115F6  18F5               	xorwf	tablat,w,c
  8722  0115F8  0009               	tblrd		*+
  8723  0115FA  10F5               	iorwf	tablat,w,c
  8724  0115FC  A4D8               	btfss	status,2,c
  8725  0115FE  D01D               	goto	l87
  8726                           
  8727                           ; BSR set to: 0
  8728  011600  51EB               	movf	(LCD_Init@i+1)& (0+255),w,b
  8729  011602  E11B               	bnz	l12940
  8730  011604  0E58               	movlw	88
  8731  011606  5DEA               	subwf	LCD_Init@i& (0+255),w,b
  8732  011608  B0D8               	btfsc	status,0,c
  8733  01160A  D017               	goto	l87
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;LCD.c: 180: delay_ms(InitList[++i]);
  8737  01160C  4BEA               	infsnz	LCD_Init@i& (0+255),f,b
  8738  01160E  2BEB               	incf	(LCD_Init@i+1)& (0+255),f,b
  8739  011610  90D8               	bcf	status,0,c
  8740  011612  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8741  011614  6EF6               	movwf	tblptrl,c
  8742  011616  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8743  011618  6EF7               	movwf	tblptrh,c
  8744  01161A  0EEB               	movlw	low _InitList
  8745  01161C  26F6               	addwf	tblptrl,f,c
  8746  01161E  0EFB               	movlw	high _InitList
  8747  011620  22F7               	addwfc	tblptrh,f,c
  8748  011622                     	if	1	;There are 3 active tblptr bytes
  8749  011622  6AF8               	clrf	tblptru,c
  8750  011624  0E00               	movlw	low (__mediumconst shr (0+16))
  8751  011626  22F8               	addwfc	tblptru,f,c
  8752  011628                     	endif
  8753  011628  0009               	tblrd		*+
  8754  01162A  CFF5 F0B3          	movff	tablat,delay_ms@ms
  8755  01162E  000A               	tblrd		*-
  8756  011630  CFF5 F0B4          	movff	tablat,delay_ms@ms+1
  8757  011634  EC47  F097         	call	_delay_ms	;wreg free
  8758  011638  D043               	goto	l90
  8759  01163A                     l87:
  8760  01163A                     l12940:
  8761                           
  8762                           ;LCD.c: 181: else
  8763                           ;LCD.c: 182: {
  8764                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  8765  01163A  90D8               	bcf	status,0,c
  8766  01163C  0100               	movlb	0	; () banked
  8767  01163E  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8768  011640  6EF6               	movwf	tblptrl,c
  8769  011642  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8770  011644  6EF7               	movwf	tblptrh,c
  8771  011646  0EEB               	movlw	low _InitList
  8772  011648  26F6               	addwf	tblptrl,f,c
  8773  01164A  0EFB               	movlw	high _InitList
  8774  01164C  22F7               	addwfc	tblptrh,f,c
  8775  01164E                     	if	1	;There are 3 active tblptr bytes
  8776  01164E  6AF8               	clrf	tblptru,c
  8777  011650  0E00               	movlw	low (__mediumconst shr (0+16))
  8778  011652  22F8               	addwfc	tblptru,f,c
  8779  011654                     	endif
  8780  011654  0009               	tblrd		*+
  8781  011656  0E00               	movlw	0
  8782  011658  5EF5               	subwf	tablat,f,c
  8783  01165A  0009               	tblrd		*+
  8784  01165C  0E01               	movlw	1
  8785  01165E  5AF5               	subwfb	tablat,f,c
  8786  011660  A0D8               	btfss	status,0,c
  8787  011662  D01B               	goto	l89
  8788                           
  8789                           ; BSR set to: 0
  8790  011664  0E00               	movlw	0
  8791  011666  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8792  011668  90D8               	bcf	status,0,c
  8793  01166A  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8794  01166C  6EF6               	movwf	tblptrl,c
  8795  01166E  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8796  011670  6EF7               	movwf	tblptrh,c
  8797  011672  0EEB               	movlw	low _InitList
  8798  011674  26F6               	addwf	tblptrl,f,c
  8799  011676  0EFB               	movlw	high _InitList
  8800  011678  22F7               	addwfc	tblptrh,f,c
  8801  01167A                     	if	1	;There are 3 active tblptr bytes
  8802  01167A  6AF8               	clrf	tblptru,c
  8803  01167C  0E00               	movlw	low (__mediumconst shr (0+16))
  8804  01167E  22F8               	addwfc	tblptru,f,c
  8805  011680                     	endif
  8806  011680  0009               	tblrd		*+
  8807  011682  CFF5 F0E8          	movff	tablat,??_LCD_Init
  8808  011686  0009               	tblrd		*+
  8809  011688  CFF5 F0E9          	movff	tablat,??_LCD_Init+1
  8810  01168C  C0E9  F0E8         	movff	??_LCD_Init+1,??_LCD_Init
  8811  011690  6BE9               	clrf	(??_LCD_Init+1)& (0+255),b
  8812  011692  51E8               	movf	??_LCD_Init& (0+255),w,b
  8813  011694  EC49  F09C         	call	_LCD_Write
  8814  011698  D013               	goto	l90
  8815  01169A                     l89:
  8816                           
  8817                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  8818  01169A  0E01               	movlw	1
  8819  01169C  0100               	movlb	0	; () banked
  8820  01169E  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8821  0116A0  90D8               	bcf	status,0,c
  8822  0116A2  35EA               	rlcf	LCD_Init@i& (0+255),w,b
  8823  0116A4  6EF6               	movwf	tblptrl,c
  8824  0116A6  35EB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  8825  0116A8  6EF7               	movwf	tblptrh,c
  8826  0116AA  0EEB               	movlw	low _InitList
  8827  0116AC  26F6               	addwf	tblptrl,f,c
  8828  0116AE  0EFB               	movlw	high _InitList
  8829  0116B0  22F7               	addwfc	tblptrh,f,c
  8830  0116B2                     	if	1	;There are 3 active tblptr bytes
  8831  0116B2  6AF8               	clrf	tblptru,c
  8832  0116B4  0E00               	movlw	low (__mediumconst shr (0+16))
  8833  0116B6  22F8               	addwfc	tblptru,f,c
  8834  0116B8                     	endif
  8835  0116B8  0008               	tblrd		*
  8836  0116BA  50F5               	movf	tablat,w,c
  8837  0116BC  EC49  F09C         	call	_LCD_Write
  8838  0116C0                     l90:
  8839  0116C0  0100               	movlb	0	; () banked
  8840  0116C2  4BEA               	infsnz	LCD_Init@i& (0+255),f,b
  8841  0116C4  2BEB               	incf	(LCD_Init@i+1)& (0+255),f,b
  8842                           
  8843                           ; BSR set to: 0
  8844  0116C6  51EB               	movf	(LCD_Init@i+1)& (0+255),w,b
  8845  0116C8  E101               	bnz	l12950
  8846  0116CA  D783               	goto	L5
  8847  0116CC                     u9100:
  8848  0116CC                     l12950:
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;LCD.c: 185: }
  8852                           ;LCD.c: 186: }
  8853                           ;LCD.c: 187: delay_ms(100);
  8854  0116CC  0E00               	movlw	0
  8855  0116CE  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  8856  0116D0  0E64               	movlw	100
  8857  0116D2  6FB3               	movwf	delay_ms@ms& (0+255),b
  8858  0116D4  EC47  F097         	call	_delay_ms	;wreg free
  8859                           
  8860                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  8861  0116D8  0E00               	movlw	0
  8862  0116DA  0100               	movlb	0	; () banked
  8863  0116DC  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8864  0116DE  0E29               	movlw	41
  8865  0116E0  EC49  F09C         	call	_LCD_Write
  8866                           
  8867                           ;LCD.c: 189: Set_Rotation(1);
  8868  0116E4  0E01               	movlw	1
  8869  0116E6  ECF7  F091         	call	_Set_Rotation
  8870                           
  8871                           ;LCD.c: 191: delay_ms(100);
  8872  0116EA  0E00               	movlw	0
  8873  0116EC  0100               	movlb	0	; () banked
  8874  0116EE  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  8875  0116F0  0E64               	movlw	100
  8876  0116F2  6FB3               	movwf	delay_ms@ms& (0+255),b
  8877  0116F4  EC47  F097         	call	_delay_ms	;wreg free
  8878                           
  8879                           ;LCD.c: 192: LCD_Fill(0x0000);
  8880  0116F8  0E00               	movlw	0
  8881  0116FA  0100               	movlb	0	; () banked
  8882  0116FC  6FBD               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  8883  0116FE  0E00               	movlw	0
  8884  011700  6FBC               	movwf	LCD_Fill@pColour& (0+255),b
  8885  011702  EC32  F099         	call	_LCD_Fill	;wreg free
  8886  011706  0012               	return		;funcret
  8887  011708                     __end_of_LCD_Init:
  8888                           	opt stack 0
  8889                           tosu	equ	0xFFF
  8890                           tosh	equ	0xFFE
  8891                           tosl	equ	0xFFD
  8892                           pclath	equ	0xFFA
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodh	equ	0xFF4
  8898                           prodl	equ	0xFF3
  8899                           intcon	equ	0xFF2
  8900                           postinc0	equ	0xFEE
  8901                           wreg	equ	0xFE8
  8902                           postdec1	equ	0xFE5
  8903                           fsr1h	equ	0xFE2
  8904                           fsr1l	equ	0xFE1
  8905                           indf2	equ	0xFDF
  8906                           postinc2	equ	0xFDE
  8907                           postdec2	equ	0xFDD
  8908                           plusw2	equ	0xFDB
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function _Set_Rotation *****************
  8914 ;; Defined at:
  8915 ;;		line 248 in file "Library/LCD.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  m               1    wreg     unsigned char 
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;  m               1    5[BANK0 ] unsigned char 
  8920 ;;  rotation        1    6[BANK0 ] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:        2 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:    9
  8937 ;; This function calls:
  8938 ;;		_LCD_Write
  8939 ;; This function is called by:
  8940 ;;		_LCD_Init
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           	psect	text38
  8945  0123EE                     __ptext38:
  8946                           	opt stack 0
  8947  0123EE                     _Set_Rotation:
  8948                           	opt stack 20
  8949                           
  8950                           ;incstack = 0
  8951                           ;Set_Rotation@m stored from wreg
  8952  0123EE  0100               	movlb	0	; () banked
  8953  0123F0  6FB8               	movwf	Set_Rotation@m& (0+255),b
  8954                           
  8955                           ;LCD.c: 250: UINT8 rotation = 0x00;
  8956  0123F2  0E00               	movlw	0
  8957  0123F4  0100               	movlb	0	; () banked
  8958  0123F6  6FB9               	movwf	Set_Rotation@rotation& (0+255),b
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  8962  0123F8  0E00               	movlw	0
  8963  0123FA  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8964  0123FC  0E36               	movlw	54
  8965  0123FE  EC49  F09C         	call	_LCD_Write
  8966                           
  8967                           ;LCD.c: 253: rotation = (m % 4);
  8968  012402  0100               	movlb	0	; () banked
  8969  012404  51B8               	movf	Set_Rotation@m& (0+255),w,b
  8970  012406  0B03               	andlw	3
  8971  012408  6FB9               	movwf	Set_Rotation@rotation& (0+255),b
  8972                           
  8973                           ;LCD.c: 255: switch(rotation)
  8974  01240A  D02B               	goto	l117
  8975  01240C                     
  8976                           ; BSR set to: 0
  8977                           ;LCD.c: 258: {
  8978                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  8979                           
  8980                           ; BSR set to: 0
  8981  01240C  0E01               	movlw	1
  8982  01240E  6FB6               	movwf	LCD_Write@mode& (0+255),b
  8983  012410  0EC8               	movlw	200
  8984  012412  EC49  F09C         	call	_LCD_Write
  8985                           
  8986                           ;LCD.c: 260: w = 128;
  8987  012416  0E80               	movlw	128
  8988  012418  6E50               	movwf	_w,c
  8989                           
  8990                           ;LCD.c: 261: l = 128;
  8991  01241A  0E80               	movlw	128
  8992  01241C  6E4F               	movwf	_l,c
  8993                           
  8994                           ;LCD.c: 262: break;
  8995  01241E  0012               	return	
  8996  012420                     
  8997                           ;LCD.c: 265: {
  8998                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  8999  012420  0E01               	movlw	1
  9000  012422  0100               	movlb	0	; () banked
  9001  012424  6FB6               	movwf	LCD_Write@mode& (0+255),b
  9002  012426  0EA8               	movlw	168
  9003  012428  EC49  F09C         	call	_LCD_Write
  9004                           
  9005                           ;LCD.c: 267: w = 128;
  9006  01242C  0E80               	movlw	128
  9007  01242E  6E50               	movwf	_w,c
  9008                           
  9009                           ;LCD.c: 268: l = 128;
  9010  012430  0E80               	movlw	128
  9011  012432  6E4F               	movwf	_l,c
  9012                           
  9013                           ;LCD.c: 269: break;
  9014  012434  0012               	return	
  9015  012436                     
  9016                           ;LCD.c: 272: {
  9017                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9018  012436  0E01               	movlw	1
  9019  012438  0100               	movlb	0	; () banked
  9020  01243A  6FB6               	movwf	LCD_Write@mode& (0+255),b
  9021  01243C  0E08               	movlw	8
  9022  01243E  EC49  F09C         	call	_LCD_Write
  9023                           
  9024                           ;LCD.c: 274: w = 128;
  9025  012442  0E80               	movlw	128
  9026  012444  6E50               	movwf	_w,c
  9027                           
  9028                           ;LCD.c: 275: l = 128;
  9029  012446  0E80               	movlw	128
  9030  012448  6E4F               	movwf	_l,c
  9031                           
  9032                           ;LCD.c: 276: break;
  9033  01244A  0012               	return	
  9034  01244C                     
  9035                           ;LCD.c: 279: {
  9036                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9037  01244C  0E01               	movlw	1
  9038  01244E  0100               	movlb	0	; () banked
  9039  012450  6FB6               	movwf	LCD_Write@mode& (0+255),b
  9040  012452  0E68               	movlw	104
  9041  012454  EC49  F09C         	call	_LCD_Write
  9042                           
  9043                           ;LCD.c: 281: w = 128;
  9044  012458  0E80               	movlw	128
  9045  01245A  6E50               	movwf	_w,c
  9046                           
  9047                           ;LCD.c: 282: l = 128;
  9048  01245C  0E80               	movlw	128
  9049  01245E  6E4F               	movwf	_l,c
  9050                           
  9051                           ;LCD.c: 284: }
  9052                           ;LCD.c: 285: }
  9053                           
  9054                           ;LCD.c: 283: break;
  9055  012460  0012               	return	
  9056  012462                     l117:
  9057  012462  0100               	movlb	0	; () banked
  9058  012464  51B9               	movf	Set_Rotation@rotation& (0+255),w,b
  9059                           
  9060                           ; Switch size 1, requested type "space"
  9061                           ; Number of cases is 4, Range of values is 0 to 3
  9062                           ; switch strategies available:
  9063                           ; Name         Instructions Cycles
  9064                           ; simple_byte           13     7 (average)
  9065                           ;	Chosen strategy is simple_byte
  9066  012466  0A00               	xorlw	0	; case 0
  9067  012468  B4D8               	btfsc	status,2,c
  9068  01246A  D7D0               	goto	l118
  9069  01246C  0A01               	xorlw	1	; case 1
  9070  01246E  B4D8               	btfsc	status,2,c
  9071  012470  D7D7               	goto	l120
  9072  012472  0A03               	xorlw	3	; case 2
  9073  012474  B4D8               	btfsc	status,2,c
  9074  012476  D7DF               	goto	l121
  9075  012478  0A01               	xorlw	1	; case 3
  9076  01247A  A4D8               	btfss	status,2,c
  9077  01247C  0012               	return	
  9078  01247E  D7E6               	goto	l122
  9079  012480                     __end_of_Set_Rotation:
  9080                           	opt stack 0
  9081                           tosu	equ	0xFFF
  9082                           tosh	equ	0xFFE
  9083                           tosl	equ	0xFFD
  9084                           pclath	equ	0xFFA
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           postinc0	equ	0xFEE
  9093                           wreg	equ	0xFE8
  9094                           postdec1	equ	0xFE5
  9095                           fsr1h	equ	0xFE2
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           plusw2	equ	0xFDB
  9101                           fsr2h	equ	0xFDA
  9102                           fsr2l	equ	0xFD9
  9103                           status	equ	0xFD8
  9104                           
  9105 ;; *************** function _LCD_Fill *****************
  9106 ;; Defined at:
  9107 ;;		line 287 in file "Library/LCD.c"
  9108 ;; Parameters:    Size  Location     Type
  9109 ;;  pColour         2    9[BANK0 ] unsigned short 
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;  j               1   12[BANK0 ] unsigned char 
  9112 ;;  i               1   11[BANK0 ] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      void 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9122 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;Total ram usage:        4 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:   10
  9129 ;; This function calls:
  9130 ;;		_LCD_Word_Write
  9131 ;;		_Set_Addr_Window
  9132 ;; This function is called by:
  9133 ;;		_LCD_Init
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text39
  9138  013264                     __ptext39:
  9139                           	opt stack 0
  9140  013264                     _LCD_Fill:
  9141                           	opt stack 19
  9142                           
  9143                           ;LCD.c: 296: UINT8 i = 0x00;
  9144                           
  9145                           ;incstack = 0
  9146  013264  0E00               	movlw	0
  9147  013266  0100               	movlb	0	; () banked
  9148  013268  6FBE               	movwf	LCD_Fill@i& (0+255),b
  9149                           
  9150                           ;LCD.c: 297: UINT8 j = 0x00;
  9151  01326A  0E00               	movlw	0
  9152  01326C  6FBF               	movwf	LCD_Fill@j& (0+255),b
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9156  01326E  0E00               	movlw	0
  9157  013270  6FB8               	movwf	Set_Addr_Window@ys& (0+255),b
  9158  013272  0450               	decf	_w,w,c
  9159  013274  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
  9160  013276  044F               	decf	_l,w,c
  9161  013278  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
  9162  01327A  0E00               	movlw	0
  9163  01327C  EC60  F091         	call	_Set_Addr_Window
  9164                           
  9165                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9166  013280  C04F  F0BF         	movff	_l,LCD_Fill@j
  9167  013284  0100               	movlb	0	; () banked
  9168  013286  51BF               	movf	LCD_Fill@j& (0+255),w,b
  9169  013288  B4D8               	btfsc	status,2,c
  9170  01328A  0012               	return	
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9174                           
  9175                           ; BSR set to: 0
  9176  01328C  C050  F0BE         	movff	_w,LCD_Fill@i
  9177  013290                     l12712:
  9178                           
  9179                           ; BSR set to: 0
  9180  013290  51BE               	movf	LCD_Fill@i& (0+255),w,b
  9181  013292  B4D8               	btfsc	status,2,c
  9182  013294  D009               	goto	u8830
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9186                           
  9187                           ; BSR set to: 0
  9188                           
  9189                           ; BSR set to: 0
  9190  013296  C0BC  F0B8         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9191  01329A  C0BD  F0B9         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9192  01329E  EC84  F09C         	call	_LCD_Word_Write	;wreg free
  9193  0132A2  0100               	movlb	0	; () banked
  9194  0132A4  07BE               	decf	LCD_Fill@i& (0+255),f,b
  9195  0132A6  D7F4               	goto	l12712
  9196  0132A8                     u8830:
  9197                           
  9198                           ; BSR set to: 0
  9199                           
  9200                           ; BSR set to: 0
  9201  0132A8  07BF               	decf	LCD_Fill@j& (0+255),f,b
  9202  0132AA  D7ED               	goto	L6
  9203  0132AC                     __end_of_LCD_Fill:
  9204                           	opt stack 0
  9205                           tosu	equ	0xFFF
  9206                           tosh	equ	0xFFE
  9207                           tosl	equ	0xFFD
  9208                           pclath	equ	0xFFA
  9209                           tblptru	equ	0xFF8
  9210                           tblptrh	equ	0xFF7
  9211                           tblptrl	equ	0xFF6
  9212                           tablat	equ	0xFF5
  9213                           prodh	equ	0xFF4
  9214                           prodl	equ	0xFF3
  9215                           intcon	equ	0xFF2
  9216                           postinc0	equ	0xFEE
  9217                           wreg	equ	0xFE8
  9218                           postdec1	equ	0xFE5
  9219                           fsr1h	equ	0xFE2
  9220                           fsr1l	equ	0xFE1
  9221                           indf2	equ	0xFDF
  9222                           postinc2	equ	0xFDE
  9223                           postdec2	equ	0xFDD
  9224                           plusw2	equ	0xFDB
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function _Configure_GPIOs *****************
  9230 ;; Defined at:
  9231 ;;		line 46 in file "Library/LCD.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      void 
  9238 ;; Registers used:
  9239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;Total ram usage:        0 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:   14
  9252 ;; This function calls:
  9253 ;;		_LCD_Reset
  9254 ;;		_Port_SetPinType
  9255 ;;		_SPI_Init
  9256 ;;		_SPI_MaxSpeed
  9257 ;; This function is called by:
  9258 ;;		_LCD_Init
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           	psect	text40
  9263  012E30                     __ptext40:
  9264                           	opt stack 0
  9265  012E30                     _Configure_GPIOs:
  9266                           	opt stack 15
  9267                           
  9268                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;incstack = 0
  9272  012E30  0EAE               	movlw	low _PortF
  9273  012E32  0100               	movlb	0	; () banked
  9274  012E34  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  9275  012E36  0E01               	movlw	high _PortF
  9276  012E38  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9277  012E3A  0E07               	movlw	7
  9278  012E3C  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  9279  012E3E  0E03               	movlw	3
  9280  012E40  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  9281  012E42  EC34  F087         	call	_Port_SetPinType	;wreg free
  9282                           
  9283                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9284  012E46  0EAE               	movlw	low _PortF
  9285  012E48  0100               	movlb	0	; () banked
  9286  012E4A  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
  9287  012E4C  0E01               	movlw	high _PortF
  9288  012E4E  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9289  012E50  0E06               	movlw	6
  9290  012E52  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
  9291  012E54  0E03               	movlw	3
  9292  012E56  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
  9293  012E58  EC34  F087         	call	_Port_SetPinType	;wreg free
  9294                           
  9295                           ;LCD.c: 55: LCD_Reset();
  9296  012E5C  EC98  F098         	call	_LCD_Reset	;wreg free
  9297                           
  9298                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9299  012E60  0EC0               	movlw	192
  9300  012E62  0100               	movlb	0	; () banked
  9301  012E64  6FE0               	movwf	SPI_Init@pClock& (0+255),b
  9302  012E66  0EC6               	movlw	198
  9303  012E68  6FE1               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9304  012E6A  0E2D               	movlw	45
  9305  012E6C  6FE2               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9306  012E6E  0E00               	movlw	0
  9307  012E70  6FE3               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9308  012E72  0E01               	movlw	1
  9309  012E74  6FE4               	movwf	SPI_Init@pChannel& (0+255),b
  9310  012E76  0E01               	movlw	1
  9311  012E78  6FE5               	movwf	SPI_Init@pMode& (0+255),b
  9312  012E7A  EC00  F080         	call	_SPI_Init	;wreg free
  9313                           
  9314                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9315  012E7E  0E71               	movlw	low _SPI2
  9316  012E80  0100               	movlb	0	; () banked
  9317  012E82  6FC2               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9318  012E84  0E01               	movlw	high _SPI2
  9319  012E86  6FC3               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9320  012E88  EC1C  F096         	call	_SPI_MaxSpeed	;wreg free
  9321  012E8C  0012               	return		;funcret
  9322  012E8E                     __end_of_Configure_GPIOs:
  9323                           	opt stack 0
  9324                           tosu	equ	0xFFF
  9325                           tosh	equ	0xFFE
  9326                           tosl	equ	0xFFD
  9327                           pclath	equ	0xFFA
  9328                           tblptru	equ	0xFF8
  9329                           tblptrh	equ	0xFF7
  9330                           tblptrl	equ	0xFF6
  9331                           tablat	equ	0xFF5
  9332                           prodh	equ	0xFF4
  9333                           prodl	equ	0xFF3
  9334                           intcon	equ	0xFF2
  9335                           postinc0	equ	0xFEE
  9336                           wreg	equ	0xFE8
  9337                           postdec1	equ	0xFE5
  9338                           fsr1h	equ	0xFE2
  9339                           fsr1l	equ	0xFE1
  9340                           indf2	equ	0xFDF
  9341                           postinc2	equ	0xFDE
  9342                           postdec2	equ	0xFDD
  9343                           plusw2	equ	0xFDB
  9344                           fsr2h	equ	0xFDA
  9345                           fsr2l	equ	0xFD9
  9346                           status	equ	0xFD8
  9347                           
  9348 ;; *************** function _SPI_MaxSpeed *****************
  9349 ;; Defined at:
  9350 ;;		line 201 in file "Library/SPI.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9353 ;;		 -> SPI2(11), 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;		None
  9356 ;; Return value:  Size  Location     Type
  9357 ;;                  1    wreg      void 
  9358 ;; Registers used:
  9359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9369 ;;Total ram usage:        2 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    9
  9372 ;; This function calls:
  9373 ;;		_Byte_SetBit
  9374 ;;		_Byte_SetQuad
  9375 ;; This function is called by:
  9376 ;;		_Configure_GPIOs
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           	psect	text41
  9381  012C38                     __ptext41:
  9382                           	opt stack 0
  9383  012C38                     _SPI_MaxSpeed:
  9384                           	opt stack 19
  9385                           
  9386                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9387                           
  9388                           ;incstack = 0
  9389  012C38  0100               	movlb	0	; () banked
  9390  012C3A  EE20 F006          	lfsr	2,6
  9391  012C3E  51C2               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9392  012C40  26D9               	addwf	fsr2l,f,c
  9393  012C42  51C3               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9394  012C44  22DA               	addwfc	fsr2h,f,c
  9395  012C46  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
  9396  012C4A  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
  9397  012C4E  0E05               	movlw	5
  9398  012C50  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
  9399  012C52  0E00               	movlw	0
  9400  012C54  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
  9401  012C56  EC47  F098         	call	_Byte_SetBit	;wreg free
  9402                           
  9403                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9404  012C5A  0100               	movlb	0	; () banked
  9405  012C5C  EE20 F006          	lfsr	2,6
  9406  012C60  51C2               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9407  012C62  26D9               	addwf	fsr2l,f,c
  9408  012C64  51C3               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9409  012C66  22DA               	addwfc	fsr2h,f,c
  9410  012C68  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
  9411  012C6C  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
  9412  012C70  0E00               	movlw	0
  9413  012C72  6FC0               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9414  012C74  0E00               	movlw	0
  9415  012C76  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
  9416  012C78  EC39  F09C         	call	_Byte_SetQuad	;wreg free
  9417                           
  9418                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9419  012C7C  0100               	movlb	0	; () banked
  9420  012C7E  EE20 F006          	lfsr	2,6
  9421  012C82  51C2               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9422  012C84  26D9               	addwf	fsr2l,f,c
  9423  012C86  51C3               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9424  012C88  22DA               	addwfc	fsr2h,f,c
  9425  012C8A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
  9426  012C8E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
  9427  012C92  0E05               	movlw	5
  9428  012C94  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
  9429  012C96  0E01               	movlw	1
  9430  012C98  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
  9431  012C9A  EC47  F098         	call	_Byte_SetBit	;wreg free
  9432  012C9E  0012               	return		;funcret
  9433  012CA0                     __end_of_SPI_MaxSpeed:
  9434                           	opt stack 0
  9435                           tosu	equ	0xFFF
  9436                           tosh	equ	0xFFE
  9437                           tosl	equ	0xFFD
  9438                           pclath	equ	0xFFA
  9439                           tblptru	equ	0xFF8
  9440                           tblptrh	equ	0xFF7
  9441                           tblptrl	equ	0xFF6
  9442                           tablat	equ	0xFF5
  9443                           prodh	equ	0xFF4
  9444                           prodl	equ	0xFF3
  9445                           intcon	equ	0xFF2
  9446                           postinc0	equ	0xFEE
  9447                           wreg	equ	0xFE8
  9448                           postdec1	equ	0xFE5
  9449                           fsr1h	equ	0xFE2
  9450                           fsr1l	equ	0xFE1
  9451                           indf2	equ	0xFDF
  9452                           postinc2	equ	0xFDE
  9453                           postdec2	equ	0xFDD
  9454                           plusw2	equ	0xFDB
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _LCD_Reset *****************
  9460 ;; Defined at:
  9461 ;;		line 95 in file "Library/LCD.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:   13
  9482 ;; This function calls:
  9483 ;;		_LED_Toggle
  9484 ;;		_Reset_High
  9485 ;;		_Reset_Low
  9486 ;;		_delay_ms
  9487 ;; This function is called by:
  9488 ;;		_Configure_GPIOs
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text42
  9493  013130                     __ptext42:
  9494                           	opt stack 0
  9495  013130                     _LCD_Reset:
  9496                           	opt stack 15
  9497                           
  9498                           ;LCD.c: 97: Reset_High();
  9499                           
  9500                           ;incstack = 0
  9501  013130  ECB6  F09C         	call	_Reset_High	;wreg free
  9502                           
  9503                           ;LCD.c: 98: LED_Toggle(eLED2);
  9504  013134  0E01               	movlw	1
  9505  013136  ECDD  F099         	call	_LED_Toggle
  9506                           
  9507                           ;LCD.c: 99: delay_ms(0x80);
  9508  01313A  0E00               	movlw	0
  9509  01313C  0100               	movlb	0	; () banked
  9510  01313E  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  9511  013140  0E80               	movlw	128
  9512  013142  6FB3               	movwf	delay_ms@ms& (0+255),b
  9513  013144  EC47  F097         	call	_delay_ms	;wreg free
  9514                           
  9515                           ;LCD.c: 100: LED_Toggle(eLED2);
  9516  013148  0E01               	movlw	1
  9517  01314A  ECDD  F099         	call	_LED_Toggle
  9518                           
  9519                           ;LCD.c: 101: Reset_Low();
  9520  01314E  ECAA  F09C         	call	_Reset_Low	;wreg free
  9521                           
  9522                           ;LCD.c: 102: delay_ms(0x80);
  9523  013152  0E00               	movlw	0
  9524  013154  0100               	movlb	0	; () banked
  9525  013156  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  9526  013158  0E80               	movlw	128
  9527  01315A  6FB3               	movwf	delay_ms@ms& (0+255),b
  9528  01315C  EC47  F097         	call	_delay_ms	;wreg free
  9529                           
  9530                           ;LCD.c: 103: LED_Toggle(eLED2);
  9531  013160  0E01               	movlw	1
  9532  013162  ECDD  F099         	call	_LED_Toggle
  9533                           
  9534                           ;LCD.c: 104: Reset_High();
  9535  013166  ECB6  F09C         	call	_Reset_High	;wreg free
  9536                           
  9537                           ;LCD.c: 105: delay_ms(0x80);
  9538  01316A  0E00               	movlw	0
  9539  01316C  0100               	movlb	0	; () banked
  9540  01316E  6FB4               	movwf	(delay_ms@ms+1)& (0+255),b
  9541  013170  0E80               	movlw	128
  9542  013172  6FB3               	movwf	delay_ms@ms& (0+255),b
  9543  013174  EC47  F097         	call	_delay_ms	;wreg free
  9544                           
  9545                           ;LCD.c: 106: LED_Toggle(eLED2);
  9546  013178  0E01               	movlw	1
  9547  01317A  ECDD  F099         	call	_LED_Toggle
  9548  01317E  0012               	return		;funcret
  9549  013180                     __end_of_LCD_Reset:
  9550                           	opt stack 0
  9551                           tosu	equ	0xFFF
  9552                           tosh	equ	0xFFE
  9553                           tosl	equ	0xFFD
  9554                           pclath	equ	0xFFA
  9555                           tblptru	equ	0xFF8
  9556                           tblptrh	equ	0xFF7
  9557                           tblptrl	equ	0xFF6
  9558                           tablat	equ	0xFF5
  9559                           prodh	equ	0xFF4
  9560                           prodl	equ	0xFF3
  9561                           intcon	equ	0xFF2
  9562                           postinc0	equ	0xFEE
  9563                           wreg	equ	0xFE8
  9564                           postdec1	equ	0xFE5
  9565                           fsr1h	equ	0xFE2
  9566                           fsr1l	equ	0xFE1
  9567                           indf2	equ	0xFDF
  9568                           postinc2	equ	0xFDE
  9569                           postdec2	equ	0xFDD
  9570                           plusw2	equ	0xFDB
  9571                           fsr2h	equ	0xFDA
  9572                           fsr2l	equ	0xFD9
  9573                           status	equ	0xFD8
  9574                           
  9575 ;; *************** function _delay_ms *****************
  9576 ;; Defined at:
  9577 ;;		line 240 in file "Library/Types.c"
  9578 ;; Parameters:    Size  Location     Type
  9579 ;;  ms              2    0[BANK0 ] unsigned short 
  9580 ;; Auto vars:     Size  Location     Type
  9581 ;;  u               4    2[BANK0 ] volatile unsigned long 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  1    wreg      void 
  9584 ;; Registers used:
  9585 ;;		wreg, status,2, status,0
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9591 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9592 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;Total ram usage:        6 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    7
  9598 ;; This function calls:
  9599 ;;		Nothing
  9600 ;; This function is called by:
  9601 ;;		_LCD_Reset
  9602 ;;		_LCD_Init
  9603 ;;		_MXK_Init
  9604 ;;		_SteppingCCW
  9605 ;;		_SteppingCW
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           	psect	text43
  9610  012E8E                     __ptext43:
  9611                           	opt stack 0
  9612  012E8E                     _delay_ms:
  9613                           	opt stack 22
  9614                           
  9615                           ;Types.c: 242: volatile unsigned long u;
  9616                           ;Types.c: 243: while (ms--)
  9617                           
  9618                           ;incstack = 0
  9619  012E8E  D01B               	goto	u8290
  9620  012E90                     l11978:
  9621                           
  9622                           ;Types.c: 244: {
  9623                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
  9624  012E90  0E00               	movlw	0
  9625  012E92  0100               	movlb	0	; () banked
  9626  012E94  6FB5               	movwf	delay_ms@u& (0+255),b	;volatile
  9627  012E96  0E00               	movlw	0
  9628  012E98  6FB6               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  9629  012E9A  0E00               	movlw	0
  9630  012E9C  6FB7               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  9631  012E9E  0E00               	movlw	0
  9632  012EA0  6FB8               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  9633  012EA2                     l11980:
  9634                           
  9635                           ; BSR set to: 0
  9636  012EA2  51B8               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
  9637  012EA4  11B7               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
  9638  012EA6  E10F               	bnz	l11986
  9639  012EA8  0EB0               	movlw	176
  9640  012EAA  5DB5               	subwf	delay_ms@u& (0+255),w,b	;volatile
  9641  012EAC  0E04               	movlw	4
  9642  012EAE  59B6               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
  9643  012EB0  B0D8               	btfsc	status,0,c
  9644  012EB2  D009               	goto	u8290
  9645                           
  9646                           ; BSR set to: 0
  9647                           
  9648                           ; BSR set to: 0
  9649  012EB4  F000               	nop		; ;# 
  9650  012EB6  0E01               	movlw	1
  9651  012EB8  0100               	movlb	0	; () banked
  9652  012EBA  27B5               	addwf	delay_ms@u& (0+255),f,b	;volatile
  9653  012EBC  0E00               	movlw	0
  9654  012EBE  23B6               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
  9655  012EC0  23B7               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
  9656  012EC2  23B8               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
  9657  012EC4  D7EE               	goto	l11980
  9658  012EC6                     u8290:
  9659  012EC6                     l11986:
  9660  012EC6  0100               	movlb	0	; () banked
  9661  012EC8  07B3               	decf	delay_ms@ms& (0+255),f,b
  9662  012ECA  A0D8               	btfss	status,0,c
  9663  012ECC  07B4               	decf	(delay_ms@ms+1)& (0+255),f,b
  9664  012ECE  29B3               	incf	delay_ms@ms& (0+255),w,b
  9665  012ED0  E1DF               	bnz	l11978
  9666  012ED2  29B4               	incf	(delay_ms@ms+1)& (0+255),w,b
  9667  012ED4  A4D8               	btfss	status,2,c
  9668  012ED6  D7DC               	goto	l824
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;Types.c: 251: }
  9672                           ;Types.c: 252: }
  9673                           ;Types.c: 253: u = 0x8008;
  9674                           
  9675                           ; BSR set to: 0
  9676  012ED8  0E08               	movlw	8
  9677  012EDA  6FB5               	movwf	delay_ms@u& (0+255),b	;volatile
  9678  012EDC  0E80               	movlw	128
  9679  012EDE  6FB6               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
  9680  012EE0  0E00               	movlw	0
  9681  012EE2  6FB7               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
  9682  012EE4  0E00               	movlw	0
  9683  012EE6  6FB8               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
  9684                           
  9685                           ; BSR set to: 0
  9686  012EE8  0012               	return		;funcret
  9687  012EEA                     __end_of_delay_ms:
  9688                           	opt stack 0
  9689                           tosu	equ	0xFFF
  9690                           tosh	equ	0xFFE
  9691                           tosl	equ	0xFFD
  9692                           pclath	equ	0xFFA
  9693                           tblptru	equ	0xFF8
  9694                           tblptrh	equ	0xFF7
  9695                           tblptrl	equ	0xFF6
  9696                           tablat	equ	0xFF5
  9697                           prodh	equ	0xFF4
  9698                           prodl	equ	0xFF3
  9699                           intcon	equ	0xFF2
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           postdec1	equ	0xFE5
  9703                           fsr1h	equ	0xFE2
  9704                           fsr1l	equ	0xFE1
  9705                           indf2	equ	0xFDF
  9706                           postinc2	equ	0xFDE
  9707                           postdec2	equ	0xFDD
  9708                           plusw2	equ	0xFDB
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function _Reset_Low *****************
  9714 ;; Defined at:
  9715 ;;		line 32 in file "Library/LCD.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      void 
  9722 ;; Registers used:
  9723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9733 ;;Total ram usage:        0 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:   11
  9736 ;; This function calls:
  9737 ;;		_Port_SetPin
  9738 ;; This function is called by:
  9739 ;;		_LCD_Reset
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text44
  9744  013954                     __ptext44:
  9745                           	opt stack 0
  9746  013954                     _Reset_Low:
  9747                           	opt stack 16
  9748                           
  9749                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9750                           
  9751                           ; BSR set to: 0
  9752                           ;incstack = 0
  9753  013954  0EAE               	movlw	low _PortF
  9754  013956  0100               	movlb	0	; () banked
  9755  013958  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  9756  01395A  0E01               	movlw	high _PortF
  9757  01395C  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9758  01395E  0E06               	movlw	6
  9759  013960  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  9760  013962  0E01               	movlw	1
  9761  013964  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  9762  013966  EC61  F08F         	call	_Port_SetPin	;wreg free
  9763  01396A  0012               	return		;funcret
  9764  01396C                     __end_of_Reset_Low:
  9765                           	opt stack 0
  9766                           tosu	equ	0xFFF
  9767                           tosh	equ	0xFFE
  9768                           tosl	equ	0xFFD
  9769                           pclath	equ	0xFFA
  9770                           tblptru	equ	0xFF8
  9771                           tblptrh	equ	0xFF7
  9772                           tblptrl	equ	0xFF6
  9773                           tablat	equ	0xFF5
  9774                           prodh	equ	0xFF4
  9775                           prodl	equ	0xFF3
  9776                           intcon	equ	0xFF2
  9777                           postinc0	equ	0xFEE
  9778                           wreg	equ	0xFE8
  9779                           postdec1	equ	0xFE5
  9780                           fsr1h	equ	0xFE2
  9781                           fsr1l	equ	0xFE1
  9782                           indf2	equ	0xFDF
  9783                           postinc2	equ	0xFDE
  9784                           postdec2	equ	0xFDD
  9785                           plusw2	equ	0xFDB
  9786                           fsr2h	equ	0xFDA
  9787                           fsr2l	equ	0xFD9
  9788                           status	equ	0xFD8
  9789                           
  9790 ;; *************** function _Reset_High *****************
  9791 ;; Defined at:
  9792 ;;		line 36 in file "Library/LCD.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;		None
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;		None
  9797 ;; Return value:  Size  Location     Type
  9798 ;;                  1    wreg      void 
  9799 ;; Registers used:
  9800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9810 ;;Total ram usage:        0 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:   11
  9813 ;; This function calls:
  9814 ;;		_Port_SetPin
  9815 ;; This function is called by:
  9816 ;;		_LCD_Reset
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           	psect	text45
  9821  01396C                     __ptext45:
  9822                           	opt stack 0
  9823  01396C                     _Reset_High:
  9824                           	opt stack 16
  9825                           
  9826                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  9827                           
  9828                           ;incstack = 0
  9829  01396C  0EAE               	movlw	low _PortF
  9830  01396E  0100               	movlb	0	; () banked
  9831  013970  6FC2               	movwf	Port_SetPin@pInput& (0+255),b
  9832  013972  0E01               	movlw	high _PortF
  9833  013974  6FC3               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9834  013976  0E06               	movlw	6
  9835  013978  6FC4               	movwf	Port_SetPin@pPin& (0+255),b
  9836  01397A  0E00               	movlw	0
  9837  01397C  6FC5               	movwf	Port_SetPin@pValue& (0+255),b
  9838  01397E  EC61  F08F         	call	_Port_SetPin	;wreg free
  9839  013982  0012               	return		;funcret
  9840  013984                     __end_of_Reset_High:
  9841                           	opt stack 0
  9842                           tosu	equ	0xFFF
  9843                           tosh	equ	0xFFE
  9844                           tosl	equ	0xFFD
  9845                           pclath	equ	0xFFA
  9846                           tblptru	equ	0xFF8
  9847                           tblptrh	equ	0xFF7
  9848                           tblptrl	equ	0xFF6
  9849                           tablat	equ	0xFF5
  9850                           prodh	equ	0xFF4
  9851                           prodl	equ	0xFF3
  9852                           intcon	equ	0xFF2
  9853                           postinc0	equ	0xFEE
  9854                           wreg	equ	0xFE8
  9855                           postdec1	equ	0xFE5
  9856                           fsr1h	equ	0xFE2
  9857                           fsr1l	equ	0xFE1
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           postdec2	equ	0xFDD
  9861                           plusw2	equ	0xFDB
  9862                           fsr2h	equ	0xFDA
  9863                           fsr2l	equ	0xFD9
  9864                           status	equ	0xFD8
  9865                           
  9866 ;; *************** function _Init_Timer0 *****************
  9867 ;; Defined at:
  9868 ;;		line 77 in file "main.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;		None
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;		None
  9873 ;; Return value:  Size  Location     Type
  9874 ;;                  2  2120[None  ] int 
  9875 ;; Registers used:
  9876 ;;		None
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;Total ram usage:        0 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    7
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_main
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           	psect	text46
  9897  013984                     __ptext46:
  9898                           	opt stack 0
  9899  013984                     _Init_Timer0:
  9900                           	opt stack 23
  9901                           
  9902                           ;main.c: 78: T0CONbits.TMR0ON = 1;
  9903                           
  9904                           ;incstack = 0
  9905  013984  8ED5               	bsf	4053,7,c	;volatile
  9906                           
  9907                           ;main.c: 79: T0CONbits.T08BIT = 1;
  9908  013986  8CD5               	bsf	4053,6,c	;volatile
  9909                           
  9910                           ;main.c: 80: T0CONbits.T0CS = 0;
  9911  013988  9AD5               	bcf	4053,5,c	;volatile
  9912                           
  9913                           ;main.c: 81: T0CONbits.T0SE = 0;
  9914  01398A  98D5               	bcf	4053,4,c	;volatile
  9915                           
  9916                           ;main.c: 82: T0CONbits.PSA = 0;
  9917  01398C  96D5               	bcf	4053,3,c	;volatile
  9918                           
  9919                           ;main.c: 83: T0CONbits.T0PS2 = 1;
  9920  01398E  84D5               	bsf	4053,2,c	;volatile
  9921                           
  9922                           ;main.c: 84: T0CONbits.T0PS1 = 1;
  9923  013990  82D5               	bsf	4053,1,c	;volatile
  9924                           
  9925                           ;main.c: 85: T0CONbits.T0PS0 = 1;
  9926  013992  80D5               	bsf	4053,0,c	;volatile
  9927                           
  9928                           ;main.c: 86: INTCONbits.TMR0IE = 1;
  9929  013994  8AF2               	bsf	intcon,5,c	;volatile
  9930                           
  9931                           ;main.c: 87: INTCONbits.PEIE = 1;
  9932  013996  8CF2               	bsf	intcon,6,c	;volatile
  9933                           
  9934                           ;main.c: 88: INTCONbits.GIE = 1;
  9935  013998  8EF2               	bsf	intcon,7,c	;volatile
  9936  01399A  0012               	return		;funcret
  9937  01399C                     __end_of_Init_Timer0:
  9938                           	opt stack 0
  9939                           tosu	equ	0xFFF
  9940                           tosh	equ	0xFFE
  9941                           tosl	equ	0xFFD
  9942                           pclath	equ	0xFFA
  9943                           tblptru	equ	0xFF8
  9944                           tblptrh	equ	0xFF7
  9945                           tblptrl	equ	0xFF6
  9946                           tablat	equ	0xFF5
  9947                           prodh	equ	0xFF4
  9948                           prodl	equ	0xFF3
  9949                           intcon	equ	0xFF2
  9950                           postinc0	equ	0xFEE
  9951                           wreg	equ	0xFE8
  9952                           postdec1	equ	0xFE5
  9953                           fsr1h	equ	0xFE2
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           postdec2	equ	0xFDD
  9958                           plusw2	equ	0xFDB
  9959                           fsr2h	equ	0xFDA
  9960                           fsr2l	equ	0xFD9
  9961                           status	equ	0xFD8
  9962                           
  9963 ;; *************** function _InitSerialCommunication *****************
  9964 ;; Defined at:
  9965 ;;		line 136 in file "main.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      void 
  9972 ;; Registers used:
  9973 ;;		wreg, status,2
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9983 ;;Total ram usage:        0 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    7
  9986 ;; This function calls:
  9987 ;;		Nothing
  9988 ;; This function is called by:
  9989 ;;		_main
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	text47
  9994  0138B2                     __ptext47:
  9995                           	opt stack 0
  9996  0138B2                     _InitSerialCommunication:
  9997                           	opt stack 23
  9998                           
  9999                           ;main.c: 138: TRISCbits.TRISC6 = 0;
 10000                           
 10001                           ;incstack = 0
 10002  0138B2  9C94               	bcf	3988,6,c	;volatile
 10003                           
 10004                           ;main.c: 139: TRISCbits.TRISC7 = 1;
 10005  0138B4  8E94               	bsf	3988,7,c	;volatile
 10006                           
 10007                           ;main.c: 140: TXSTA1 = 0b00100100;
 10008  0138B6  0E24               	movlw	36
 10009  0138B8  6EAD               	movwf	4013,c	;volatile
 10010                           
 10011                           ;main.c: 141: RCSTA1 = 0b10010000;
 10012  0138BA  0E90               	movlw	144
 10013  0138BC  6EAC               	movwf	4012,c	;volatile
 10014                           
 10015                           ;main.c: 142: BAUDCON1bits.DTRXP = 0;
 10016  0138BE  9A7E               	bcf	3966,5,c	;volatile
 10017                           
 10018                           ;main.c: 143: BAUDCON1bits.SCKP = 0;
 10019  0138C0  987E               	bcf	3966,4,c	;volatile
 10020                           
 10021                           ;main.c: 144: BAUDCON1bits.WUE = 0;
 10022  0138C2  927E               	bcf	3966,1,c	;volatile
 10023                           
 10024                           ;main.c: 145: BAUDCON1bits.ABDEN = 0;
 10025  0138C4  907E               	bcf	3966,0,c	;volatile
 10026                           
 10027                           ;main.c: 147: TXSTA1bits.BRGH = 1;
 10028  0138C6  84AD               	bsf	4013,2,c	;volatile
 10029                           
 10030                           ;main.c: 148: BAUDCON1bits.BRG16 = 0;
 10031  0138C8  967E               	bcf	3966,3,c	;volatile
 10032                           
 10033                           ;main.c: 149: SPBRG1 = 51;
 10034  0138CA  0E33               	movlw	51
 10035  0138CC  6EB0               	movwf	4016,c	;volatile
 10036  0138CE  0012               	return		;funcret
 10037  0138D0                     __end_of_InitSerialCommunication:
 10038                           	opt stack 0
 10039                           tosu	equ	0xFFF
 10040                           tosh	equ	0xFFE
 10041                           tosl	equ	0xFFD
 10042                           pclath	equ	0xFFA
 10043                           tblptru	equ	0xFF8
 10044                           tblptrh	equ	0xFF7
 10045                           tblptrl	equ	0xFF6
 10046                           tablat	equ	0xFF5
 10047                           prodh	equ	0xFF4
 10048                           prodl	equ	0xFF3
 10049                           intcon	equ	0xFF2
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           postdec1	equ	0xFE5
 10053                           fsr1h	equ	0xFE2
 10054                           fsr1l	equ	0xFE1
 10055                           indf2	equ	0xFDF
 10056                           postinc2	equ	0xFDE
 10057                           postdec2	equ	0xFDD
 10058                           plusw2	equ	0xFDB
 10059                           fsr2h	equ	0xFDA
 10060                           fsr2l	equ	0xFD9
 10061                           status	equ	0xFD8
 10062                           
 10063 ;; *************** function _InitADC *****************
 10064 ;; Defined at:
 10065 ;;		line 91 in file "main.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      void 
 10072 ;; Registers used:
 10073 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;Total ram usage:        1 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    7
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_main
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           	psect	text48
 10094  0132F2                     __ptext48:
 10095                           	opt stack 0
 10096  0132F2                     _InitADC:
 10097                           	opt stack 23
 10098                           
 10099                           ;main.c: 93: ADCON1 = 0b10101101;
 10100                           
 10101                           ;incstack = 0
 10102  0132F2  0EAD               	movlw	173
 10103  0132F4  6EC1               	movwf	4033,c	;volatile
 10104                           
 10105                           ;main.c: 94: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 10106  0132F6  0E00               	movlw	0
 10107  0132F8  0100               	movlb	0	; () banked
 10108  0132FA  6F6C               	movwf	(_thisReading+1)& (0+255),b
 10109  0132FC  0E00               	movlw	0
 10110  0132FE  6F6B               	movwf	_thisReading& (0+255),b
 10111  013300  D00F               	goto	l2124
 10112  013302                     
 10113                           ; BSR set to: 0
 10114                           ;main.c: 95: readings[thisReading] = 0;
 10115                           
 10116                           ; BSR set to: 0
 10117  013302  90D8               	bcf	status,0,c
 10118  013304  356B               	rlcf	_thisReading& (0+255),w,b
 10119  013306  6ED9               	movwf	fsr2l,c
 10120  013308  356C               	rlcf	(_thisReading+1)& (0+255),w,b
 10121  01330A  6EDA               	movwf	fsr2h,c
 10122  01330C  0E00               	movlw	low _readings
 10123  01330E  26D9               	addwf	fsr2l,f,c
 10124  013310  0E02               	movlw	high _readings
 10125  013312  22DA               	addwfc	fsr2h,f,c
 10126  013314  0E00               	movlw	0
 10127  013316  6EDE               	movwf	postinc2,c
 10128  013318  0E00               	movlw	0
 10129  01331A  6EDD               	movwf	postdec2,c
 10130                           
 10131                           ; BSR set to: 0
 10132  01331C  4B6B               	infsnz	_thisReading& (0+255),f,b
 10133  01331E  2B6C               	incf	(_thisReading+1)& (0+255),f,b
 10134  013320                     l2124:
 10135                           
 10136                           ; BSR set to: 0
 10137                           
 10138                           ; BSR set to: 0
 10139  013320  5047               	movf	_numReadings,w,c
 10140  013322  5D6B               	subwf	_thisReading& (0+255),w,b
 10141  013324  516C               	movf	(_thisReading+1)& (0+255),w,b
 10142  013326  0A80               	xorlw	128
 10143  013328  6FB3               	movwf	??_InitADC& (0+255),b
 10144  01332A  5048               	movf	_numReadings+1,w,c
 10145  01332C  0A80               	xorlw	128
 10146  01332E  59B3               	subwfb	??_InitADC& (0+255),w,b
 10147  013330  B0D8               	btfsc	status,0,c
 10148  013332  0012               	return	
 10149  013334  D7E6               	goto	l2125
 10150  013336                     __end_of_InitADC:
 10151                           	opt stack 0
 10152                           tosu	equ	0xFFF
 10153                           tosh	equ	0xFFE
 10154                           tosl	equ	0xFFD
 10155                           pclath	equ	0xFFA
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           postinc0	equ	0xFEE
 10164                           wreg	equ	0xFE8
 10165                           postdec1	equ	0xFE5
 10166                           fsr1h	equ	0xFE2
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           plusw2	equ	0xFDB
 10172                           fsr2h	equ	0xFDA
 10173                           fsr2l	equ	0xFD9
 10174                           status	equ	0xFD8
 10175                           
 10176 ;; *************** function _ISR_Enable *****************
 10177 ;; Defined at:
 10178 ;;		line 27 in file "Library/ISR.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;		None
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;		None
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  1    wreg      void 
 10185 ;; Registers used:
 10186 ;;		None
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;Total ram usage:        0 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; Hardware stack levels required when called:    7
 10199 ;; This function calls:
 10200 ;;		Nothing
 10201 ;; This function is called by:
 10202 ;;		_main
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           	psect	text49
 10207  013B06                     __ptext49:
 10208                           	opt stack 0
 10209  013B06                     _ISR_Enable:
 10210                           	opt stack 23
 10211                           
 10212                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;incstack = 0
 10216  013B06  8CF2               	bsf	intcon,6,c	;volatile
 10217                           
 10218                           ;ISR.c: 30: INTCONbits.GIE = 1;
 10219  013B08  8EF2               	bsf	intcon,7,c	;volatile
 10220                           
 10221                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 10222  013B0A  88F2               	bsf	intcon,4,c	;volatile
 10223                           
 10224                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 10225  013B0C  92F2               	bcf	intcon,1,c	;volatile
 10226  013B0E  0012               	return		;funcret
 10227  013B10                     __end_of_ISR_Enable:
 10228                           	opt stack 0
 10229                           tosu	equ	0xFFF
 10230                           tosh	equ	0xFFE
 10231                           tosl	equ	0xFFD
 10232                           pclath	equ	0xFFA
 10233                           tblptru	equ	0xFF8
 10234                           tblptrh	equ	0xFF7
 10235                           tblptrl	equ	0xFF6
 10236                           tablat	equ	0xFF5
 10237                           prodh	equ	0xFF4
 10238                           prodl	equ	0xFF3
 10239                           intcon	equ	0xFF2
 10240                           postinc0	equ	0xFEE
 10241                           wreg	equ	0xFE8
 10242                           postdec1	equ	0xFE5
 10243                           fsr1h	equ	0xFE2
 10244                           fsr1l	equ	0xFE1
 10245                           indf2	equ	0xFDF
 10246                           postinc2	equ	0xFDE
 10247                           postdec2	equ	0xFDD
 10248                           plusw2	equ	0xFDB
 10249                           fsr2h	equ	0xFDA
 10250                           fsr2l	equ	0xFD9
 10251                           status	equ	0xFD8
 10252                           
 10253 ;; *************** function _HMI_Render *****************
 10254 ;; Defined at:
 10255 ;;		line 138 in file "HMI.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;		None
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;  a               2    8[BANK0 ] unsigned short 
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  1    wreg      void 
 10262 ;; Registers used:
 10263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;Total ram usage:        2 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    9
 10276 ;; This function calls:
 10277 ;;		_OutSeg
 10278 ;; This function is called by:
 10279 ;;		_main
 10280 ;;		_ADCAverage
 10281 ;; This function uses a non-reentrant model
 10282 ;;
 10283                           
 10284                           	psect	text50
 10285  01355E                     __ptext50:
 10286                           	opt stack 0
 10287  01355E                     _HMI_Render:
 10288                           	opt stack 21
 10289                           
 10290                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 10291                           
 10292                           ;incstack = 0
 10293  01355E  0E00               	movlw	0
 10294  013560  0100               	movlb	0	; () banked
 10295  013562  6FBC               	movwf	(HMI_Render@a+1)& (0+255),b
 10296  013564  0E00               	movlw	0
 10297  013566  6FBB               	movwf	HMI_Render@a& (0+255),b
 10298  013568                     l13184:
 10299                           
 10300                           ; BSR set to: 0
 10301  013568  51BC               	movf	(HMI_Render@a+1)& (0+255),w,b
 10302  01356A  E113               	bnz	l1158
 10303  01356C  0E08               	movlw	8
 10304  01356E  5DBB               	subwf	HMI_Render@a& (0+255),w,b
 10305  013570  B0D8               	btfsc	status,0,c
 10306  013572  0012               	return	
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 10310                           
 10311                           ; BSR set to: 0
 10312                           
 10313                           ; BSR set to: 0
 10314  013574  C0BB  F0B6         	movff	HMI_Render@a,OutSeg@pSegment
 10315  013578  0E2C               	movlw	low _HMIBoard
 10316  01357A  25BB               	addwf	HMI_Render@a& (0+255),w,b
 10317  01357C  6ED9               	movwf	fsr2l,c
 10318  01357E  0E01               	movlw	high _HMIBoard
 10319  013580  21BC               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 10320  013582  6EDA               	movwf	fsr2h,c
 10321  013584  50DF               	movf	indf2,w,c
 10322  013586  EC45  F095         	call	_OutSeg
 10323  01358A  0100               	movlb	0	; () banked
 10324  01358C  4BBB               	infsnz	HMI_Render@a& (0+255),f,b
 10325  01358E  2BBC               	incf	(HMI_Render@a+1)& (0+255),f,b
 10326  013590  D7EB               	goto	l13184
 10327  013592                     l1158:
 10328                           
 10329                           ; BSR set to: 0
 10330  013592  0012               	return		;funcret
 10331  013594                     __end_of_HMI_Render:
 10332                           	opt stack 0
 10333                           tosu	equ	0xFFF
 10334                           tosh	equ	0xFFE
 10335                           tosl	equ	0xFFD
 10336                           pclath	equ	0xFFA
 10337                           tblptru	equ	0xFF8
 10338                           tblptrh	equ	0xFF7
 10339                           tblptrl	equ	0xFF6
 10340                           tablat	equ	0xFF5
 10341                           prodh	equ	0xFF4
 10342                           prodl	equ	0xFF3
 10343                           intcon	equ	0xFF2
 10344                           postinc0	equ	0xFEE
 10345                           wreg	equ	0xFE8
 10346                           postdec1	equ	0xFE5
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           indf2	equ	0xFDF
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           plusw2	equ	0xFDB
 10353                           fsr2h	equ	0xFDA
 10354                           fsr2l	equ	0xFD9
 10355                           status	equ	0xFD8
 10356                           
 10357 ;; *************** function _OutSeg *****************
 10358 ;; Defined at:
 10359 ;;		line 54 in file "HMI.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;  pInput          1    wreg     unsigned char 
 10362 ;;  pSegment        1    3[BANK0 ] unsigned char 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  pInput          1    6[BANK0 ] unsigned char 
 10365 ;;  out             1    7[BANK0 ] volatile unsigned char 
 10366 ;; Return value:  Size  Location     Type
 10367 ;;                  1    wreg      void 
 10368 ;; Registers used:
 10369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10375 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;Total ram usage:        5 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; Hardware stack levels required when called:    8
 10382 ;; This function calls:
 10383 ;;		_SPI_Send
 10384 ;; This function is called by:
 10385 ;;		_HMI_Render
 10386 ;;		_HMI_GRender
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           	psect	text51
 10391  012A8A                     __ptext51:
 10392                           	opt stack 0
 10393  012A8A                     _OutSeg:
 10394                           	opt stack 21
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;incstack = 0
 10398                           ;OutSeg@pInput stored from wreg
 10399  012A8A  0100               	movlb	0	; () banked
 10400  012A8C  6FB9               	movwf	OutSeg@pInput& (0+255),b
 10401                           
 10402                           ;HMI.c: 58: static UINT8 cur;
 10403                           ;HMI.c: 59: volatile UINT8 out;
 10404                           ;HMI.c: 60: static UINT8 segset;
 10405                           ;HMI.c: 61: static UINT8 a;
 10406                           ;HMI.c: 83: if (pSegment <= 8)
 10407  012A8E  0E09               	movlw	9
 10408  012A90  0100               	movlb	0	; () banked
 10409  012A92  61B6               	cpfslt	OutSeg@pSegment& (0+255),b
 10410  012A94  0012               	return	
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;HMI.c: 84: {
 10414                           ;HMI.c: 85: cur = pInput;
 10415  012A96  C0B9  F03B         	movff	OutSeg@pInput,OutSeg@cur
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 10419  012A9A  0E00               	movlw	0
 10420  012A9C  6E39               	movwf	OutSeg@a,c
 10421  012A9E                     l12864:
 10422                           
 10423                           ; BSR set to: 0
 10424  012A9E  0E07               	movlw	7
 10425  012AA0  6439               	cpfsgt	OutSeg@a,c
 10426  012AA2  D001               	goto	l1146
 10427  012AA4  D01F               	goto	u9000
 10428  012AA6                     l1146:
 10429                           
 10430                           ;HMI.c: 87: {
 10431                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 10432                           
 10433                           ; BSR set to: 0
 10434  012AA6  C03B  F0B7         	movff	OutSeg@cur,??_OutSeg
 10435  012AAA  0E01               	movlw	1
 10436  012AAC  0100               	movlb	0	; () banked
 10437  012AAE  17B7               	andwf	??_OutSeg& (0+255),f,b
 10438  012AB0  0E06               	movlw	6
 10439  012AB2  6FB8               	movwf	(??_OutSeg+1)& (0+255),b
 10440  012AB4                     u8995:
 10441  012AB4  90D8               	bcf	status,0,c
 10442  012AB6  37B7               	rlcf	??_OutSeg& (0+255),f,b
 10443  012AB8  2FB8               	decfsz	(??_OutSeg+1)& (0+255),f,b
 10444  012ABA  D7FC               	goto	u8995
 10445  012ABC  51B7               	movf	??_OutSeg& (0+255),w,b
 10446  012ABE  6E3A               	movwf	OutSeg@segset,c
 10447                           
 10448                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 10449  012AC0  39B6               	swapf	OutSeg@pSegment& (0+255),w,b
 10450  012AC2  42E8               	rrncf	wreg,f,c
 10451  012AC4  0BF8               	andlw	248
 10452  012AC6  1039               	iorwf	OutSeg@a,w,c
 10453  012AC8  103A               	iorwf	OutSeg@segset,w,c
 10454  012ACA  6FBA               	movwf	OutSeg@out& (0+255),b	;volatile
 10455                           
 10456                           ;HMI.c: 90: cur >>= 1;
 10457  012ACC  90D8               	bcf	status,0,c
 10458  012ACE  323B               	rrcf	OutSeg@cur,f,c
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 10462  012AD0  0E66               	movlw	low _SPI1
 10463  012AD2  6FB3               	movwf	SPI_Send@pInput& (0+255),b
 10464  012AD4  0E01               	movlw	high _SPI1
 10465  012AD6  6FB4               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10466  012AD8  C0BA  F0B5         	movff	OutSeg@out,SPI_Send@pData	;volatile
 10467  012ADC  ECB2  F095         	call	_SPI_Send	;wreg free
 10468  012AE0  2A39               	incf	OutSeg@a,f,c
 10469  012AE2  D7DD               	goto	l12864
 10470  012AE4                     u9000:
 10471                           
 10472                           ;HMI.c: 96: }
 10473                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 10474  012AE4  0E66               	movlw	low _SPI1
 10475  012AE6  0100               	movlb	0	; () banked
 10476  012AE8  6FB3               	movwf	SPI_Send@pInput& (0+255),b
 10477  012AEA  0E01               	movlw	high _SPI1
 10478  012AEC  6FB4               	movwf	(SPI_Send@pInput+1)& (0+255),b
 10479  012AEE  0E00               	movlw	0
 10480  012AF0  6FB5               	movwf	SPI_Send@pData& (0+255),b
 10481  012AF2  ECB2  F095         	call	_SPI_Send	;wreg free
 10482  012AF6  0012               	return	
 10483  012AF8                     __end_of_OutSeg:
 10484                           	opt stack 0
 10485                           tosu	equ	0xFFF
 10486                           tosh	equ	0xFFE
 10487                           tosl	equ	0xFFD
 10488                           pclath	equ	0xFFA
 10489                           tblptru	equ	0xFF8
 10490                           tblptrh	equ	0xFF7
 10491                           tblptrl	equ	0xFF6
 10492                           tablat	equ	0xFF5
 10493                           prodh	equ	0xFF4
 10494                           prodl	equ	0xFF3
 10495                           intcon	equ	0xFF2
 10496                           postinc0	equ	0xFEE
 10497                           wreg	equ	0xFE8
 10498                           postdec1	equ	0xFE5
 10499                           fsr1h	equ	0xFE2
 10500                           fsr1l	equ	0xFE1
 10501                           indf2	equ	0xFDF
 10502                           postinc2	equ	0xFDE
 10503                           postdec2	equ	0xFDD
 10504                           plusw2	equ	0xFDB
 10505                           fsr2h	equ	0xFDA
 10506                           fsr2l	equ	0xFD9
 10507                           status	equ	0xFD8
 10508                           
 10509 ;; *************** function _HMI_Poll *****************
 10510 ;; Defined at:
 10511 ;;		line 252 in file "HMI.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;		None
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;		None
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  1    wreg      void 
 10518 ;; Registers used:
 10519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10529 ;;Total ram usage:        0 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:   15
 10532 ;; This function calls:
 10533 ;;		_Button_Poll
 10534 ;; This function is called by:
 10535 ;;		_main
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           	psect	text52
 10540  012D70                     __ptext52:
 10541                           	opt stack 0
 10542  012D70                     _HMI_Poll:
 10543                           	opt stack 15
 10544                           
 10545                           ;HMI.c: 254: TRISE = 0xFC;
 10546                           
 10547                           ;incstack = 0
 10548  012D70  0EFC               	movlw	252
 10549  012D72  6E96               	movwf	3990,c	;volatile
 10550                           
 10551                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10552  012D74  0E5C               	movlw	low (_HMIBoard+48)
 10553  012D76  0100               	movlb	0	; () banked
 10554  012D78  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10555  012D7A  0E01               	movlw	high (_HMIBoard+48)
 10556  012D7C  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10557  012D7E  0E01               	movlw	1
 10558  012D80  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10559  012D82  EC64  F08D         	call	_Button_Poll	;wreg free
 10560                           
 10561                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10562  012D86  0E3E               	movlw	low (_HMIBoard+18)
 10563  012D88  0100               	movlb	0	; () banked
 10564  012D8A  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10565  012D8C  0E01               	movlw	high (_HMIBoard+18)
 10566  012D8E  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10567  012D90  0E01               	movlw	1
 10568  012D92  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10569  012D94  EC64  F08D         	call	_Button_Poll	;wreg free
 10570                           
 10571                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10572  012D98  0E34               	movlw	low (_HMIBoard+8)
 10573  012D9A  0100               	movlb	0	; () banked
 10574  012D9C  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10575  012D9E  0E01               	movlw	high (_HMIBoard+8)
 10576  012DA0  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10577  012DA2  0E01               	movlw	1
 10578  012DA4  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10579  012DA6  EC64  F08D         	call	_Button_Poll	;wreg free
 10580                           
 10581                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10582  012DAA  0E48               	movlw	low (_HMIBoard+28)
 10583  012DAC  0100               	movlb	0	; () banked
 10584  012DAE  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10585  012DB0  0E01               	movlw	high (_HMIBoard+28)
 10586  012DB2  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10587  012DB4  0E01               	movlw	1
 10588  012DB6  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10589  012DB8  EC64  F08D         	call	_Button_Poll	;wreg free
 10590                           
 10591                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10592  012DBC  0E52               	movlw	low (_HMIBoard+38)
 10593  012DBE  0100               	movlb	0	; () banked
 10594  012DC0  6FCE               	movwf	Button_Poll@pButton& (0+255),b
 10595  012DC2  0E01               	movlw	high (_HMIBoard+38)
 10596  012DC4  6FCF               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10597  012DC6  0E01               	movlw	1
 10598  012DC8  6FD0               	movwf	Button_Poll@pIncrement& (0+255),b
 10599  012DCA  EC64  F08D         	call	_Button_Poll	;wreg free
 10600  012DCE  0012               	return		;funcret
 10601  012DD0                     __end_of_HMI_Poll:
 10602                           	opt stack 0
 10603                           tosu	equ	0xFFF
 10604                           tosh	equ	0xFFE
 10605                           tosl	equ	0xFFD
 10606                           pclath	equ	0xFFA
 10607                           tblptru	equ	0xFF8
 10608                           tblptrh	equ	0xFF7
 10609                           tblptrl	equ	0xFF6
 10610                           tablat	equ	0xFF5
 10611                           prodh	equ	0xFF4
 10612                           prodl	equ	0xFF3
 10613                           intcon	equ	0xFF2
 10614                           postinc0	equ	0xFEE
 10615                           wreg	equ	0xFE8
 10616                           postdec1	equ	0xFE5
 10617                           fsr1h	equ	0xFE2
 10618                           fsr1l	equ	0xFE1
 10619                           indf2	equ	0xFDF
 10620                           postinc2	equ	0xFDE
 10621                           postdec2	equ	0xFDD
 10622                           plusw2	equ	0xFDB
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627 ;; *************** function _Button_Poll *****************
 10628 ;; Defined at:
 10629 ;;		line 57 in file "Library/Button.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10632 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10633 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10634 ;; Auto vars:     Size  Location     Type
 10635 ;;  Pin             1   35[BANK0 ] unsigned char 
 10636 ;; Return value:  Size  Location     Type
 10637 ;;                  1    wreg      unsigned char 
 10638 ;; Registers used:
 10639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10640 ;; Tracked objects:
 10641 ;;		On entry : 0/0
 10642 ;;		On exit  : 0/0
 10643 ;;		Unchanged: 0/0
 10644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10645 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;Total ram usage:        9 bytes
 10650 ;; Hardware stack levels used:    1
 10651 ;; Hardware stack levels required when called:   14
 10652 ;; This function calls:
 10653 ;;		_Event_DIPSwitch
 10654 ;;		_Event_NULL
 10655 ;;		_Event_TestButton
 10656 ;;		_HMI_DIPSwitch
 10657 ;;		_HMI_DownSwitch
 10658 ;;		_HMI_LeftSwitch
 10659 ;;		_HMI_RightSwitch
 10660 ;;		_HMI_UpSwitch
 10661 ;;		_MXK_DIPSwitch
 10662 ;;		_MXK_TestButton
 10663 ;; This function is called by:
 10664 ;;		_HMI_Poll
 10665 ;;		_MXK_Poll
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text53
 10670  011AC8                     __ptext53:
 10671                           	opt stack 0
 10672  011AC8                     _Button_Poll:
 10673                           	opt stack 15
 10674                           
 10675                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10676                           
 10677                           ;incstack = 0
 10678  011AC8  0100               	movlb	0	; () banked
 10679  011ACA  EE20 F007          	lfsr	2,7
 10680  011ACE  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10681  011AD0  26D9               	addwf	fsr2l,f,c
 10682  011AD2  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10683  011AD4  22DA               	addwfc	fsr2h,f,c
 10684  011AD6  D801               	call	u8758
 10685  011AD8  D00A               	goto	u8759
 10686  011ADA                     u8758:
 10687  011ADA  0005               	push	
 10688  011ADC  6EFA               	movwf	pclath,c
 10689  011ADE  50DE               	movf	postinc2,w,c
 10690  011AE0  6EFD               	movwf	tosl,c
 10691  011AE2  50DE               	movf	postinc2,w,c
 10692  011AE4  6EFE               	movwf	tosh,c
 10693  011AE6  50DE               	movf	postinc2,w,c
 10694  011AE8  6EFF               	movwf	tosu,c
 10695  011AEA  50FA               	movf	pclath,w,c
 10696  011AEC  0012               	return		;indir
 10697  011AEE                     u8759:
 10698  011AEE  0100               	movlb	0	; () banked
 10699  011AF0  6FD6               	movwf	Button_Poll@Pin& (0+255),b
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;Button.c: 61: if (pButton->mState == Pin)
 10703  011AF2  C0CE  FFD9         	movff	Button_Poll@pButton,fsr2l
 10704  011AF6  C0CF  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10705  011AFA  51D6               	movf	Button_Poll@Pin& (0+255),w,b
 10706  011AFC  18DE               	xorwf	postinc2,w,c
 10707  011AFE  A4D8               	btfss	status,2,c
 10708  011B00  D01C               	goto	l11
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;Button.c: 62: {
 10712                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10713  011B02  EE20 F001          	lfsr	2,1
 10714  011B06  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10715  011B08  26D9               	addwf	fsr2l,f,c
 10716  011B0A  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10717  011B0C  22DA               	addwfc	fsr2h,f,c
 10718  011B0E  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10719  011B10  5CDE               	subwf	postinc2,w,c
 10720  011B12  B0D8               	btfsc	status,0,c
 10721  011B14  D009               	goto	l12
 10722                           
 10723                           ; BSR set to: 0
 10724                           ;Button.c: 66: pButton->mCount = 0;
 10725  011B16  EE20 F001          	lfsr	2,1
 10726  011B1A  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10727  011B1C  26D9               	addwf	fsr2l,f,c
 10728  011B1E  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10729  011B20  22DA               	addwfc	fsr2h,f,c
 10730  011B22  0E00               	movlw	0
 10731  011B24  6EDF               	movwf	indf2,c
 10732  011B26  0012               	return	
 10733  011B28                     l12:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;Button.c: 67: else
 10737                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10738                           
 10739                           ; BSR set to: 0
 10740  011B28  EE20 F001          	lfsr	2,1
 10741  011B2C  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10742  011B2E  26D9               	addwf	fsr2l,f,c
 10743  011B30  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10744  011B32  22DA               	addwfc	fsr2h,f,c
 10745  011B34  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10746  011B36  5EDF               	subwf	indf2,f,c
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;Button.c: 69: }
 10750  011B38  0012               	return	
 10751  011B3A                     l11:
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10755                           
 10756                           ; BSR set to: 0
 10757  011B3A  EE20 F001          	lfsr	2,1
 10758  011B3E  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10759  011B40  26D9               	addwf	fsr2l,f,c
 10760  011B42  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10761  011B44  22DA               	addwfc	fsr2h,f,c
 10762  011B46  50DF               	movf	indf2,w,c
 10763  011B48  6FD1               	movwf	??_Button_Poll& (0+255),b
 10764  011B4A  6BD2               	clrf	(??_Button_Poll+1)& (0+255),b
 10765  011B4C  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10766  011B4E  27D1               	addwf	??_Button_Poll& (0+255),f,b
 10767  011B50  0E00               	movlw	0
 10768  011B52  23D2               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10769  011B54  EE20 F001          	lfsr	2,1
 10770  011B58  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10771  011B5A  26D9               	addwf	fsr2l,f,c
 10772  011B5C  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10773  011B5E  22DA               	addwfc	fsr2h,f,c
 10774  011B60  50DF               	movf	indf2,w,c
 10775  011B62  6FD3               	movwf	(??_Button_Poll+2)& (0+255),b
 10776  011B64  6BD4               	clrf	(??_Button_Poll+3)& (0+255),b
 10777  011B66  51D1               	movf	??_Button_Poll& (0+255),w,b
 10778  011B68  5DD3               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10779  011B6A  51D4               	movf	(??_Button_Poll+3)& (0+255),w,b
 10780  011B6C  0A80               	xorlw	128
 10781  011B6E  6FD5               	movwf	(??_Button_Poll+4)& (0+255),b
 10782  011B70  51D2               	movf	(??_Button_Poll+1)& (0+255),w,b
 10783  011B72  0A80               	xorlw	128
 10784  011B74  59D5               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10785  011B76  B0D8               	btfsc	status,0,c
 10786  011B78  0012               	return	
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;Button.c: 73: {
 10790                           ;Button.c: 75: pButton->mCount += pIncrement;
 10791  011B7A  EE20 F001          	lfsr	2,1
 10792  011B7E  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10793  011B80  26D9               	addwf	fsr2l,f,c
 10794  011B82  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10795  011B84  22DA               	addwfc	fsr2h,f,c
 10796  011B86  51D0               	movf	Button_Poll@pIncrement& (0+255),w,b
 10797  011B88  26DF               	addwf	indf2,f,c
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10801  011B8A  EE20 F002          	lfsr	2,2
 10802  011B8E  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10803  011B90  26D9               	addwf	fsr2l,f,c
 10804  011B92  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10805  011B94  22DA               	addwfc	fsr2h,f,c
 10806  011B96  EE10 F001          	lfsr	1,1
 10807  011B9A  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10808  011B9C  26E1               	addwf	fsr1l,f,c
 10809  011B9E  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10810  011BA0  22E2               	addwfc	fsr1h,f,c
 10811  011BA2  50E7               	movf	indf1,w,c
 10812  011BA4  6FD3               	movwf	(??_Button_Poll+2)& (0+255),b
 10813  011BA6  6BD4               	clrf	(??_Button_Poll+3)& (0+255),b
 10814  011BA8  50DE               	movf	postinc2,w,c
 10815  011BAA  5DD3               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10816  011BAC  50DE               	movf	postinc2,w,c
 10817  011BAE  59D4               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10818  011BB0  A0D8               	btfss	status,0,c
 10819  011BB2  0012               	return	
 10820                           
 10821                           ; BSR set to: 0
 10822                           ;Button.c: 77: {
 10823                           ;Button.c: 79: pButton->mState = Pin;
 10824  011BB4  C0CE  FFD9         	movff	Button_Poll@pButton,fsr2l
 10825  011BB8  C0CF  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10826  011BBC  C0D6  FFDF         	movff	Button_Poll@Pin,indf2
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;Button.c: 80: pButton->mCount = 0;
 10830  011BC0  EE20 F001          	lfsr	2,1
 10831  011BC4  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10832  011BC6  26D9               	addwf	fsr2l,f,c
 10833  011BC8  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10834  011BCA  22DA               	addwfc	fsr2h,f,c
 10835  011BCC  0E00               	movlw	0
 10836  011BCE  6EDF               	movwf	indf2,c
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;Button.c: 83: pButton->mFunction(Pin);
 10840  011BD0  EE20 F004          	lfsr	2,4
 10841  011BD4  51CE               	movf	Button_Poll@pButton& (0+255),w,b
 10842  011BD6  26D9               	addwf	fsr2l,f,c
 10843  011BD8  51CF               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10844  011BDA  22DA               	addwfc	fsr2h,f,c
 10845  011BDC  D801               	call	u8808
 10846  011BDE  0012               	return	
 10847  011BE0                     u8808:
 10848  011BE0  0005               	push	
 10849  011BE2  6EFA               	movwf	pclath,c
 10850  011BE4  50DE               	movf	postinc2,w,c
 10851  011BE6  6EFD               	movwf	tosl,c
 10852  011BE8  50DE               	movf	postinc2,w,c
 10853  011BEA  6EFE               	movwf	tosh,c
 10854  011BEC  50DE               	movf	postinc2,w,c
 10855  011BEE  6EFF               	movwf	tosu,c
 10856  011BF0  50FA               	movf	pclath,w,c
 10857  011BF2  51D6               	movf	Button_Poll@Pin& (0+255),w,b
 10858  011BF4  0012               	return		;indir
 10859  011BF6                     __end_of_Button_Poll:
 10860                           	opt stack 0
 10861                           tosu	equ	0xFFF
 10862                           tosh	equ	0xFFE
 10863                           tosl	equ	0xFFD
 10864                           pclath	equ	0xFFA
 10865                           tblptru	equ	0xFF8
 10866                           tblptrh	equ	0xFF7
 10867                           tblptrl	equ	0xFF6
 10868                           tablat	equ	0xFF5
 10869                           prodh	equ	0xFF4
 10870                           prodl	equ	0xFF3
 10871                           intcon	equ	0xFF2
 10872                           postinc0	equ	0xFEE
 10873                           wreg	equ	0xFE8
 10874                           indf1	equ	0xFE7
 10875                           postdec1	equ	0xFE5
 10876                           fsr1h	equ	0xFE2
 10877                           fsr1l	equ	0xFE1
 10878                           indf2	equ	0xFDF
 10879                           postinc2	equ	0xFDE
 10880                           postdec2	equ	0xFDD
 10881                           plusw2	equ	0xFDB
 10882                           fsr2h	equ	0xFDA
 10883                           fsr2l	equ	0xFD9
 10884                           status	equ	0xFD8
 10885                           
 10886 ;; *************** function _MXK_DIPSwitch *****************
 10887 ;; Defined at:
 10888 ;;		line 24 in file "Library/MXK.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;		None
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;		None
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  1    wreg      unsigned char 
 10895 ;; Registers used:
 10896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;Total ram usage:        0 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    8
 10909 ;; This function calls:
 10910 ;;		_Port_GetQuad
 10911 ;; This function is called by:
 10912 ;;		_FunctInitButton
 10913 ;;		_Button_Poll
 10914 ;;		_main
 10915 ;; This function uses a non-reentrant model
 10916 ;;
 10917                           
 10918                           	psect	text54
 10919  0139E2                     __ptext54:
 10920                           	opt stack 0
 10921  0139E2                     _MXK_DIPSwitch:
 10922                           	opt stack 22
 10923                           
 10924                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10925                           
 10926                           ;incstack = 0
 10927  0139E2  0E9B               	movlw	low _PortD
 10928  0139E4  0100               	movlb	0	; () banked
 10929  0139E6  6FB3               	movwf	Port_GetQuad@pInput& (0+255),b
 10930  0139E8  0E00               	movlw	high _PortD
 10931  0139EA  6FB4               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10932  0139EC  0E00               	movlw	0
 10933  0139EE  6FB5               	movwf	Port_GetQuad@pQuad& (0+255),b
 10934  0139F0  EC1D  F09A         	call	_Port_GetQuad
 10935  0139F4  0012               	return	
 10936  0139F6                     __end_of_MXK_DIPSwitch:
 10937                           	opt stack 0
 10938                           tosu	equ	0xFFF
 10939                           tosh	equ	0xFFE
 10940                           tosl	equ	0xFFD
 10941                           pclath	equ	0xFFA
 10942                           tblptru	equ	0xFF8
 10943                           tblptrh	equ	0xFF7
 10944                           tblptrl	equ	0xFF6
 10945                           tablat	equ	0xFF5
 10946                           prodh	equ	0xFF4
 10947                           prodl	equ	0xFF3
 10948                           intcon	equ	0xFF2
 10949                           postinc0	equ	0xFEE
 10950                           wreg	equ	0xFE8
 10951                           indf1	equ	0xFE7
 10952                           postdec1	equ	0xFE5
 10953                           fsr1h	equ	0xFE2
 10954                           fsr1l	equ	0xFE1
 10955                           indf2	equ	0xFDF
 10956                           postinc2	equ	0xFDE
 10957                           postdec2	equ	0xFDD
 10958                           plusw2	equ	0xFDB
 10959                           fsr2h	equ	0xFDA
 10960                           fsr2l	equ	0xFD9
 10961                           status	equ	0xFD8
 10962                           
 10963 ;; *************** function _HMI_DIPSwitch *****************
 10964 ;; Defined at:
 10965 ;;		line 47 in file "HMI.c"
 10966 ;; Parameters:    Size  Location     Type
 10967 ;;		None
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;		None
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  1    wreg      unsigned char 
 10972 ;; Registers used:
 10973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;Total ram usage:        0 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    8
 10986 ;; This function calls:
 10987 ;;		_Port_GetQuad
 10988 ;; This function is called by:
 10989 ;;		_HMI_Init
 10990 ;;		_Button_Poll
 10991 ;;		_main
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           	psect	text55
 10996  0139F6                     __ptext55:
 10997                           	opt stack 0
 10998  0139F6                     _HMI_DIPSwitch:
 10999                           	opt stack 20
 11000                           
 11001                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 11002                           
 11003                           ;incstack = 0
 11004  0139F6  0E91               	movlw	low _PortE
 11005  0139F8  0100               	movlb	0	; () banked
 11006  0139FA  6FB3               	movwf	Port_GetQuad@pInput& (0+255),b
 11007  0139FC  0E00               	movlw	high _PortE
 11008  0139FE  6FB4               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 11009  013A00  0E00               	movlw	0
 11010  013A02  6FB5               	movwf	Port_GetQuad@pQuad& (0+255),b
 11011  013A04  EC1D  F09A         	call	_Port_GetQuad	;wreg free
 11012  013A08  0012               	return	
 11013  013A0A                     __end_of_HMI_DIPSwitch:
 11014                           	opt stack 0
 11015                           tosu	equ	0xFFF
 11016                           tosh	equ	0xFFE
 11017                           tosl	equ	0xFFD
 11018                           pclath	equ	0xFFA
 11019                           tblptru	equ	0xFF8
 11020                           tblptrh	equ	0xFF7
 11021                           tblptrl	equ	0xFF6
 11022                           tablat	equ	0xFF5
 11023                           prodh	equ	0xFF4
 11024                           prodl	equ	0xFF3
 11025                           intcon	equ	0xFF2
 11026                           postinc0	equ	0xFEE
 11027                           wreg	equ	0xFE8
 11028                           indf1	equ	0xFE7
 11029                           postdec1	equ	0xFE5
 11030                           fsr1h	equ	0xFE2
 11031                           fsr1l	equ	0xFE1
 11032                           indf2	equ	0xFDF
 11033                           postinc2	equ	0xFDE
 11034                           postdec2	equ	0xFDD
 11035                           plusw2	equ	0xFDB
 11036                           fsr2h	equ	0xFDA
 11037                           fsr2l	equ	0xFD9
 11038                           status	equ	0xFD8
 11039                           
 11040 ;; *************** function _HMI_DownSwitch *****************
 11041 ;; Defined at:
 11042 ;;		line 42 in file "HMI.c"
 11043 ;; Parameters:    Size  Location     Type
 11044 ;;		None
 11045 ;; Auto vars:     Size  Location     Type
 11046 ;;		None
 11047 ;; Return value:  Size  Location     Type
 11048 ;;                  1    wreg      unsigned char 
 11049 ;; Registers used:
 11050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11051 ;; Tracked objects:
 11052 ;;		On entry : 0/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11060 ;;Total ram usage:        0 bytes
 11061 ;; Hardware stack levels used:    1
 11062 ;; Hardware stack levels required when called:    8
 11063 ;; This function calls:
 11064 ;;		_Port_GetPin
 11065 ;; This function is called by:
 11066 ;;		_HMI_Init
 11067 ;;		_Button_Poll
 11068 ;;		_main
 11069 ;; This function uses a non-reentrant model
 11070 ;;
 11071                           
 11072                           	psect	text56
 11073  013A0A                     __ptext56:
 11074                           	opt stack 0
 11075  013A0A                     _HMI_DownSwitch:
 11076                           	opt stack 20
 11077                           
 11078                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 11079                           
 11080                           ;incstack = 0
 11081  013A0A  0E91               	movlw	low _PortE
 11082  013A0C  0100               	movlb	0	; () banked
 11083  013A0E  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11084  013A10  0E00               	movlw	high _PortE
 11085  013A12  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11086  013A14  0E06               	movlw	6
 11087  013A16  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11088  013A18  EC59  F09A         	call	_Port_GetPin	;wreg free
 11089  013A1C  0012               	return	
 11090  013A1E                     __end_of_HMI_DownSwitch:
 11091                           	opt stack 0
 11092                           tosu	equ	0xFFF
 11093                           tosh	equ	0xFFE
 11094                           tosl	equ	0xFFD
 11095                           pclath	equ	0xFFA
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon	equ	0xFF2
 11103                           postinc0	equ	0xFEE
 11104                           wreg	equ	0xFE8
 11105                           indf1	equ	0xFE7
 11106                           postdec1	equ	0xFE5
 11107                           fsr1h	equ	0xFE2
 11108                           fsr1l	equ	0xFE1
 11109                           indf2	equ	0xFDF
 11110                           postinc2	equ	0xFDE
 11111                           postdec2	equ	0xFDD
 11112                           plusw2	equ	0xFDB
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _HMI_UpSwitch *****************
 11118 ;; Defined at:
 11119 ;;		line 37 in file "HMI.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      unsigned char 
 11126 ;; Registers used:
 11127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;Total ram usage:        0 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    8
 11140 ;; This function calls:
 11141 ;;		_Port_GetPin
 11142 ;; This function is called by:
 11143 ;;		_HMI_Init
 11144 ;;		_Button_Poll
 11145 ;;		_main
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           	psect	text57
 11150  013A1E                     __ptext57:
 11151                           	opt stack 0
 11152  013A1E                     _HMI_UpSwitch:
 11153                           	opt stack 22
 11154                           
 11155                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11156                           
 11157                           ;incstack = 0
 11158  013A1E  0E91               	movlw	low _PortE
 11159  013A20  0100               	movlb	0	; () banked
 11160  013A22  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11161  013A24  0E00               	movlw	high _PortE
 11162  013A26  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11163  013A28  0E07               	movlw	7
 11164  013A2A  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11165  013A2C  EC59  F09A         	call	_Port_GetPin	;wreg free
 11166  013A30  0012               	return	
 11167  013A32                     __end_of_HMI_UpSwitch:
 11168                           	opt stack 0
 11169                           tosu	equ	0xFFF
 11170                           tosh	equ	0xFFE
 11171                           tosl	equ	0xFFD
 11172                           pclath	equ	0xFFA
 11173                           tblptru	equ	0xFF8
 11174                           tblptrh	equ	0xFF7
 11175                           tblptrl	equ	0xFF6
 11176                           tablat	equ	0xFF5
 11177                           prodh	equ	0xFF4
 11178                           prodl	equ	0xFF3
 11179                           intcon	equ	0xFF2
 11180                           postinc0	equ	0xFEE
 11181                           wreg	equ	0xFE8
 11182                           indf1	equ	0xFE7
 11183                           postdec1	equ	0xFE5
 11184                           fsr1h	equ	0xFE2
 11185                           fsr1l	equ	0xFE1
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           plusw2	equ	0xFDB
 11190                           fsr2h	equ	0xFDA
 11191                           fsr2l	equ	0xFD9
 11192                           status	equ	0xFD8
 11193                           
 11194 ;; *************** function _HMI_RightSwitch *****************
 11195 ;; Defined at:
 11196 ;;		line 32 in file "HMI.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;		None
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  1    wreg      unsigned char 
 11203 ;; Registers used:
 11204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;Total ram usage:        0 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; Hardware stack levels required when called:    8
 11217 ;; This function calls:
 11218 ;;		_Port_GetPin
 11219 ;; This function is called by:
 11220 ;;		_HMI_Init
 11221 ;;		_Button_Poll
 11222 ;;		_main
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           	psect	text58
 11227  013A32                     __ptext58:
 11228                           	opt stack 0
 11229  013A32                     _HMI_RightSwitch:
 11230                           	opt stack 22
 11231                           
 11232                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11233                           
 11234                           ;incstack = 0
 11235  013A32  0E91               	movlw	low _PortE
 11236  013A34  0100               	movlb	0	; () banked
 11237  013A36  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11238  013A38  0E00               	movlw	high _PortE
 11239  013A3A  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11240  013A3C  0E04               	movlw	4
 11241  013A3E  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11242  013A40  EC59  F09A         	call	_Port_GetPin	;wreg free
 11243  013A44  0012               	return	
 11244  013A46                     __end_of_HMI_RightSwitch:
 11245                           	opt stack 0
 11246                           tosu	equ	0xFFF
 11247                           tosh	equ	0xFFE
 11248                           tosl	equ	0xFFD
 11249                           pclath	equ	0xFFA
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           postinc0	equ	0xFEE
 11258                           wreg	equ	0xFE8
 11259                           indf1	equ	0xFE7
 11260                           postdec1	equ	0xFE5
 11261                           fsr1h	equ	0xFE2
 11262                           fsr1l	equ	0xFE1
 11263                           indf2	equ	0xFDF
 11264                           postinc2	equ	0xFDE
 11265                           postdec2	equ	0xFDD
 11266                           plusw2	equ	0xFDB
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271 ;; *************** function _HMI_LeftSwitch *****************
 11272 ;; Defined at:
 11273 ;;		line 27 in file "HMI.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;		None
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;		None
 11278 ;; Return value:  Size  Location     Type
 11279 ;;                  1    wreg      unsigned char 
 11280 ;; Registers used:
 11281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;Total ram usage:        0 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; Hardware stack levels required when called:    8
 11294 ;; This function calls:
 11295 ;;		_Port_GetPin
 11296 ;; This function is called by:
 11297 ;;		_HMI_Init
 11298 ;;		_Button_Poll
 11299 ;;		_main
 11300 ;; This function uses a non-reentrant model
 11301 ;;
 11302                           
 11303                           	psect	text59
 11304  013A46                     __ptext59:
 11305                           	opt stack 0
 11306  013A46                     _HMI_LeftSwitch:
 11307                           	opt stack 20
 11308                           
 11309                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11310                           
 11311                           ;incstack = 0
 11312  013A46  0E91               	movlw	low _PortE
 11313  013A48  0100               	movlb	0	; () banked
 11314  013A4A  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11315  013A4C  0E00               	movlw	high _PortE
 11316  013A4E  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11317  013A50  0E05               	movlw	5
 11318  013A52  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11319  013A54  EC59  F09A         	call	_Port_GetPin	;wreg free
 11320  013A58  0012               	return	
 11321  013A5A                     __end_of_HMI_LeftSwitch:
 11322                           	opt stack 0
 11323                           tosu	equ	0xFFF
 11324                           tosh	equ	0xFFE
 11325                           tosl	equ	0xFFD
 11326                           pclath	equ	0xFFA
 11327                           tblptru	equ	0xFF8
 11328                           tblptrh	equ	0xFF7
 11329                           tblptrl	equ	0xFF6
 11330                           tablat	equ	0xFF5
 11331                           prodh	equ	0xFF4
 11332                           prodl	equ	0xFF3
 11333                           intcon	equ	0xFF2
 11334                           postinc0	equ	0xFEE
 11335                           wreg	equ	0xFE8
 11336                           indf1	equ	0xFE7
 11337                           postdec1	equ	0xFE5
 11338                           fsr1h	equ	0xFE2
 11339                           fsr1l	equ	0xFE1
 11340                           indf2	equ	0xFDF
 11341                           postinc2	equ	0xFDE
 11342                           postdec2	equ	0xFDD
 11343                           plusw2	equ	0xFDB
 11344                           fsr2h	equ	0xFDA
 11345                           fsr2l	equ	0xFD9
 11346                           status	equ	0xFD8
 11347                           
 11348 ;; *************** function _MXK_TestButton *****************
 11349 ;; Defined at:
 11350 ;;		line 14 in file "Library/MXK.c"
 11351 ;; Parameters:    Size  Location     Type
 11352 ;;		None
 11353 ;; Auto vars:     Size  Location     Type
 11354 ;;		None
 11355 ;; Return value:  Size  Location     Type
 11356 ;;                  1    wreg      unsigned char 
 11357 ;; Registers used:
 11358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11359 ;; Tracked objects:
 11360 ;;		On entry : 0/0
 11361 ;;		On exit  : 0/0
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;Total ram usage:        0 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; Hardware stack levels required when called:    8
 11371 ;; This function calls:
 11372 ;;		_Port_GetPin
 11373 ;; This function is called by:
 11374 ;;		_FunctInitButton
 11375 ;;		_Button_Poll
 11376 ;;		_main
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           	psect	text60
 11381  013A5A                     __ptext60:
 11382                           	opt stack 0
 11383  013A5A                     _MXK_TestButton:
 11384                           	opt stack 22
 11385                           
 11386                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11387                           
 11388                           ;incstack = 0
 11389  013A5A  0E9A               	movlw	low _PortB
 11390  013A5C  0100               	movlb	0	; () banked
 11391  013A5E  6FB3               	movwf	Port_GetPin@pInput& (0+255),b
 11392  013A60  0E01               	movlw	high _PortB
 11393  013A62  6FB4               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11394  013A64  0E04               	movlw	4
 11395  013A66  6FB5               	movwf	Port_GetPin@pPin& (0+255),b
 11396  013A68  EC59  F09A         	call	_Port_GetPin	;wreg free
 11397  013A6C  0012               	return	
 11398  013A6E                     __end_of_MXK_TestButton:
 11399                           	opt stack 0
 11400                           tosu	equ	0xFFF
 11401                           tosh	equ	0xFFE
 11402                           tosl	equ	0xFFD
 11403                           pclath	equ	0xFFA
 11404                           tblptru	equ	0xFF8
 11405                           tblptrh	equ	0xFF7
 11406                           tblptrl	equ	0xFF6
 11407                           tablat	equ	0xFF5
 11408                           prodh	equ	0xFF4
 11409                           prodl	equ	0xFF3
 11410                           intcon	equ	0xFF2
 11411                           postinc0	equ	0xFEE
 11412                           wreg	equ	0xFE8
 11413                           indf1	equ	0xFE7
 11414                           postdec1	equ	0xFE5
 11415                           fsr1h	equ	0xFE2
 11416                           fsr1l	equ	0xFE1
 11417                           indf2	equ	0xFDF
 11418                           postinc2	equ	0xFDE
 11419                           postdec2	equ	0xFDD
 11420                           plusw2	equ	0xFDB
 11421                           fsr2h	equ	0xFDA
 11422                           fsr2l	equ	0xFD9
 11423                           status	equ	0xFD8
 11424                           
 11425 ;; *************** function _Port_GetQuad *****************
 11426 ;; Defined at:
 11427 ;;		line 498 in file "Library/Port.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11430 ;;		 -> PortE(10), PortD(10), 
 11431 ;;  pQuad           1    2[BANK0 ] enum E6776
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  Output          1    5[BANK0 ] unsigned char 
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  1    wreg      unsigned char 
 11436 ;; Registers used:
 11437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11443 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11446 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11447 ;;Total ram usage:        6 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    7
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_HMI_DIPSwitch
 11454 ;;		_MXK_DIPSwitch
 11455 ;;		_Port_ToggleQuad
 11456 ;; This function uses a non-reentrant model
 11457 ;;
 11458                           
 11459                           	psect	text61
 11460  01343A                     __ptext61:
 11461                           	opt stack 0
 11462  01343A                     _Port_GetQuad:
 11463                           	opt stack 22
 11464                           
 11465                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11466                           
 11467                           ;incstack = 0
 11468  01343A  0100               	movlb	0	; () banked
 11469  01343C  EE20 F006          	lfsr	2,6
 11470  013440  51B3               	movf	Port_GetQuad@pInput& (0+255),w,b
 11471  013442  26D9               	addwf	fsr2l,f,c
 11472  013444  51B4               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11473  013446  22DA               	addwfc	fsr2h,f,c
 11474  013448  CFDE F0B6          	movff	postinc2,??_Port_GetQuad
 11475  01344C  CFDD F0B7          	movff	postdec2,??_Port_GetQuad+1
 11476  013450  C0B6  FFD9         	movff	??_Port_GetQuad,fsr2l
 11477  013454  C0B7  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11478  013458  50DF               	movf	indf2,w,c
 11479  01345A  6FB8               	movwf	Port_GetQuad@Output& (0+255),b
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11483  01345C  51B5               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11484  01345E  0D04               	mullw	4
 11485  013460  28F3               	incf	prodl,w,c
 11486  013462  6FB6               	movwf	??_Port_GetQuad& (0+255),b
 11487  013464  D002               	goto	u8350
 11488  013466                     u8355:
 11489  013466  90D8               	bcf	status,0,c
 11490  013468  33B8               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11491  01346A                     u8350:
 11492  01346A  2FB6               	decfsz	??_Port_GetQuad& (0+255),f,b
 11493  01346C  D7FC               	goto	u8355
 11494                           
 11495                           ;Port.c: 502: Output &= 0xF;
 11496  01346E  0E0F               	movlw	15
 11497  013470  0100               	movlb	0	; () banked
 11498  013472  17B8               	andwf	Port_GetQuad@Output& (0+255),f,b
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;Port.c: 503: return Output;
 11502  013474  51B8               	movf	Port_GetQuad@Output& (0+255),w,b
 11503  013476  0012               	return	
 11504  013478                     __end_of_Port_GetQuad:
 11505                           	opt stack 0
 11506                           tosu	equ	0xFFF
 11507                           tosh	equ	0xFFE
 11508                           tosl	equ	0xFFD
 11509                           pclath	equ	0xFFA
 11510                           tblptru	equ	0xFF8
 11511                           tblptrh	equ	0xFF7
 11512                           tblptrl	equ	0xFF6
 11513                           tablat	equ	0xFF5
 11514                           prodh	equ	0xFF4
 11515                           prodl	equ	0xFF3
 11516                           intcon	equ	0xFF2
 11517                           postinc0	equ	0xFEE
 11518                           wreg	equ	0xFE8
 11519                           indf1	equ	0xFE7
 11520                           postdec1	equ	0xFE5
 11521                           fsr1h	equ	0xFE2
 11522                           fsr1l	equ	0xFE1
 11523                           indf2	equ	0xFDF
 11524                           postinc2	equ	0xFDE
 11525                           postdec2	equ	0xFDD
 11526                           plusw2	equ	0xFDB
 11527                           fsr2h	equ	0xFDA
 11528                           fsr2l	equ	0xFD9
 11529                           status	equ	0xFD8
 11530                           
 11531 ;; *************** function _Event_DIPSwitch *****************
 11532 ;; Defined at:
 11533 ;;		line 22 in file "Events.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;  pState          1    wreg     unsigned char 
 11536 ;; Auto vars:     Size  Location     Type
 11537 ;;  pState          1   25[BANK0 ] unsigned char 
 11538 ;;  Bar             1   26[BANK0 ] unsigned char 
 11539 ;; Return value:  Size  Location     Type
 11540 ;;                  1    wreg      void 
 11541 ;; Registers used:
 11542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11543 ;; Tracked objects:
 11544 ;;		On entry : 0/0
 11545 ;;		On exit  : 0/0
 11546 ;;		Unchanged: 0/0
 11547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;Total ram usage:        2 bytes
 11553 ;; Hardware stack levels used:    1
 11554 ;; Hardware stack levels required when called:   13
 11555 ;; This function calls:
 11556 ;;		_HMI_GetBar
 11557 ;;		_HMI_SetBar
 11558 ;;		_LED_Toggle
 11559 ;; This function is called by:
 11560 ;;		_FunctInitButton
 11561 ;;		_Button_Poll
 11562 ;; This function uses a non-reentrant model
 11563 ;;
 11564                           
 11565                           	psect	text62
 11566  0137C2                     __ptext62:
 11567                           	opt stack 0
 11568  0137C2                     _Event_DIPSwitch:
 11569                           	opt stack 15
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;incstack = 0
 11573                           ;Event_DIPSwitch@pState stored from wreg
 11574  0137C2  0100               	movlb	0	; () banked
 11575  0137C4  6FCC               	movwf	Event_DIPSwitch@pState& (0+255),b
 11576                           
 11577                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 11578  0137C6  EC98  F09D         	call	_HMI_GetBar	;wreg free
 11579  0137CA  0100               	movlb	0	; () banked
 11580  0137CC  6FCD               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;Events.c: 25: Bar &= 0x0F;
 11584  0137CE  0E0F               	movlw	15
 11585  0137D0  17CD               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;Events.c: 26: pState <<= 4;
 11589  0137D2  3BCC               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11590  0137D4  0EF0               	movlw	240
 11591  0137D6  17CC               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 11595  0137D8  51CC               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11596  0137DA  11CD               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11597  0137DC  EC88  F09D         	call	_HMI_SetBar
 11598                           
 11599                           ;Events.c: 32: LED_Toggle(eLED1);
 11600  0137E0  0E00               	movlw	0
 11601  0137E2  ECDD  F099         	call	_LED_Toggle
 11602  0137E6  0012               	return		;funcret
 11603  0137E8                     __end_of_Event_DIPSwitch:
 11604                           	opt stack 0
 11605                           tosu	equ	0xFFF
 11606                           tosh	equ	0xFFE
 11607                           tosl	equ	0xFFD
 11608                           pclath	equ	0xFFA
 11609                           tblptru	equ	0xFF8
 11610                           tblptrh	equ	0xFF7
 11611                           tblptrl	equ	0xFF6
 11612                           tablat	equ	0xFF5
 11613                           prodh	equ	0xFF4
 11614                           prodl	equ	0xFF3
 11615                           intcon	equ	0xFF2
 11616                           postinc0	equ	0xFEE
 11617                           wreg	equ	0xFE8
 11618                           indf1	equ	0xFE7
 11619                           postdec1	equ	0xFE5
 11620                           fsr1h	equ	0xFE2
 11621                           fsr1l	equ	0xFE1
 11622                           indf2	equ	0xFDF
 11623                           postinc2	equ	0xFDE
 11624                           postdec2	equ	0xFDD
 11625                           plusw2	equ	0xFDB
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _Event_NULL *****************
 11631 ;; Defined at:
 11632 ;;		line 9 in file "Events.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  pState          1    wreg     unsigned char 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  pState          1    0[COMRAM] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      void 
 11639 ;; Registers used:
 11640 ;;		wreg
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;Total ram usage:        0 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    7
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_HMI_Init
 11657 ;;		_Button_Poll
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           	psect	text63
 11662  001404                     __ptext63:
 11663                           	opt stack 0
 11664  001404                     _Event_NULL:
 11665                           	opt stack 21
 11666                           
 11667                           ;incstack = 0
 11668  001404  0012               	return		;funcret
 11669  001406                     __end_of_Event_NULL:
 11670                           	opt stack 0
 11671                           tosu	equ	0xFFF
 11672                           tosh	equ	0xFFE
 11673                           tosl	equ	0xFFD
 11674                           pclath	equ	0xFFA
 11675                           tblptru	equ	0xFF8
 11676                           tblptrh	equ	0xFF7
 11677                           tblptrl	equ	0xFF6
 11678                           tablat	equ	0xFF5
 11679                           prodh	equ	0xFF4
 11680                           prodl	equ	0xFF3
 11681                           intcon	equ	0xFF2
 11682                           postinc0	equ	0xFEE
 11683                           wreg	equ	0xFE8
 11684                           indf1	equ	0xFE7
 11685                           postdec1	equ	0xFE5
 11686                           fsr1h	equ	0xFE2
 11687                           fsr1l	equ	0xFE1
 11688                           indf2	equ	0xFDF
 11689                           postinc2	equ	0xFDE
 11690                           postdec2	equ	0xFDD
 11691                           plusw2	equ	0xFDB
 11692                           fsr2h	equ	0xFDA
 11693                           fsr2l	equ	0xFD9
 11694                           status	equ	0xFD8
 11695                           
 11696 ;; *************** function _Event_TestButton *****************
 11697 ;; Defined at:
 11698 ;;		line 52 in file "Events.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;  pState          1    wreg     unsigned char 
 11701 ;; Auto vars:     Size  Location     Type
 11702 ;;  pState          1   25[BANK0 ] unsigned char 
 11703 ;; Return value:  Size  Location     Type
 11704 ;;                  1    wreg      void 
 11705 ;; Registers used:
 11706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11707 ;; Tracked objects:
 11708 ;;		On entry : 0/0
 11709 ;;		On exit  : 0/0
 11710 ;;		Unchanged: 0/0
 11711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11715 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11716 ;;Total ram usage:        1 bytes
 11717 ;; Hardware stack levels used:    1
 11718 ;; Hardware stack levels required when called:   13
 11719 ;; This function calls:
 11720 ;;		_HMI_SetButton
 11721 ;;		_HMI_SetNumber
 11722 ;;		_LED_Toggle
 11723 ;; This function is called by:
 11724 ;;		_FunctInitButton
 11725 ;;		_Button_Poll
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           	psect	text64
 11730  0135FE                     __ptext64:
 11731                           	opt stack 0
 11732  0135FE                     _Event_TestButton:
 11733                           	opt stack 15
 11734                           
 11735                           ;incstack = 0
 11736                           ;Event_TestButton@pState stored from wreg
 11737  0135FE  0100               	movlb	0	; () banked
 11738  013600  6FCC               	movwf	Event_TestButton@pState& (0+255),b
 11739                           
 11740                           ;Events.c: 56: static UINT8 j = 0;
 11741                           ;Events.c: 60: if (pState == 0)
 11742  013602  0100               	movlb	0	; () banked
 11743  013604  51CC               	movf	Event_TestButton@pState& (0+255),w,b
 11744  013606  A4D8               	btfss	status,2,c
 11745  013608  D010               	goto	l1873
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;Events.c: 61: {
 11749                           ;Events.c: 62: j++;
 11750  01360A  2B89               	incf	Event_TestButton@j& (0+255),f,b
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;Events.c: 63: val += j;
 11754  01360C  5189               	movf	Event_TestButton@j& (0+255),w,b
 11755  01360E  2779               	addwf	_val& (0+255),f,b
 11756  013610  0E00               	movlw	0
 11757  013612  237A               	addwfc	(_val+1)& (0+255),f,b
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;Events.c: 64: HMI_SetNumber( val );
 11761  013614  C079  F0C9         	movff	_val,HMI_SetNumber@pInput
 11762  013618  C07A  F0CA         	movff	_val+1,HMI_SetNumber@pInput+1
 11763  01361C  ECF4  F09B         	call	_HMI_SetNumber	;wreg free
 11764                           
 11765                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11766  013620  0100               	movlb	0	; () banked
 11767  013622  5189               	movf	Event_TestButton@j& (0+255),w,b
 11768  013624  0B03               	andlw	3
 11769  013626  EC55  F094         	call	_HMI_SetButton
 11770  01362A                     l1873:
 11771                           
 11772                           ;Events.c: 68: }
 11773                           ;Events.c: 72: LED_Toggle(eLED1);
 11774  01362A  0E00               	movlw	0
 11775  01362C  ECDD  F099         	call	_LED_Toggle
 11776  013630  0012               	return		;funcret
 11777  013632                     __end_of_Event_TestButton:
 11778                           	opt stack 0
 11779                           tosu	equ	0xFFF
 11780                           tosh	equ	0xFFE
 11781                           tosl	equ	0xFFD
 11782                           pclath	equ	0xFFA
 11783                           tblptru	equ	0xFF8
 11784                           tblptrh	equ	0xFF7
 11785                           tblptrl	equ	0xFF6
 11786                           tablat	equ	0xFF5
 11787                           prodh	equ	0xFF4
 11788                           prodl	equ	0xFF3
 11789                           intcon	equ	0xFF2
 11790                           postinc0	equ	0xFEE
 11791                           wreg	equ	0xFE8
 11792                           indf1	equ	0xFE7
 11793                           postdec1	equ	0xFE5
 11794                           fsr1h	equ	0xFE2
 11795                           fsr1l	equ	0xFE1
 11796                           indf2	equ	0xFDF
 11797                           postinc2	equ	0xFDE
 11798                           postdec2	equ	0xFDD
 11799                           plusw2	equ	0xFDB
 11800                           fsr2h	equ	0xFDA
 11801                           fsr2l	equ	0xFD9
 11802                           status	equ	0xFD8
 11803                           
 11804 ;; *************** function _HMI_SetNumber *****************
 11805 ;; Defined at:
 11806 ;;		line 221 in file "HMI.c"
 11807 ;; Parameters:    Size  Location     Type
 11808 ;;  pInput          2   22[BANK0 ] int 
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;		None
 11811 ;; Return value:  Size  Location     Type
 11812 ;;                  1    wreg      void 
 11813 ;; Registers used:
 11814 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11815 ;; Tracked objects:
 11816 ;;		On entry : 0/0
 11817 ;;		On exit  : 0/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11820 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11823 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11824 ;;Total ram usage:        2 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    9
 11827 ;; This function calls:
 11828 ;;		_HMI_SetSegments
 11829 ;;		_itos
 11830 ;; This function is called by:
 11831 ;;		_Event_TestButton
 11832 ;;		_main
 11833 ;;		_Event_HMI_UpButton
 11834 ;;		_Event_HMI_DownButton
 11835 ;;		_ADCAverage
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	text65
 11840  0137E8                     __ptext65:
 11841                           	opt stack 0
 11842  0137E8                     _HMI_SetNumber:
 11843                           	opt stack 21
 11844                           
 11845                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 11846                           
 11847                           ;incstack = 0
 11848  0137E8  C0C9  F0BF         	movff	HMI_SetNumber@pInput,itos@input
 11849  0137EC  C0CA  F0C0         	movff	HMI_SetNumber@pInput+1,itos@input+1
 11850  0137F0  0E2C               	movlw	low _HMIBoard
 11851  0137F2  0100               	movlb	0	; () banked
 11852  0137F4  6FC1               	movwf	itos@destination& (0+255),b
 11853  0137F6  0E01               	movlw	high _HMIBoard
 11854  0137F8  6FC2               	movwf	(itos@destination+1)& (0+255),b
 11855  0137FA  EC02  F08F         	call	_itos	;wreg free
 11856                           
 11857                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 11858  0137FE  0E2C               	movlw	low _HMIBoard
 11859  013800  0100               	movlb	0	; () banked
 11860  013802  6FB4               	movwf	HMI_SetSegments@pString& (0+255),b
 11861  013804  0E01               	movlw	high _HMIBoard
 11862  013806  6FB5               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 11863  013808  EC12  F091         	call	_HMI_SetSegments	;wreg free
 11864  01380C  0012               	return		;funcret
 11865  01380E                     __end_of_HMI_SetNumber:
 11866                           	opt stack 0
 11867                           tosu	equ	0xFFF
 11868                           tosh	equ	0xFFE
 11869                           tosl	equ	0xFFD
 11870                           pclath	equ	0xFFA
 11871                           tblptru	equ	0xFF8
 11872                           tblptrh	equ	0xFF7
 11873                           tblptrl	equ	0xFF6
 11874                           tablat	equ	0xFF5
 11875                           prodh	equ	0xFF4
 11876                           prodl	equ	0xFF3
 11877                           intcon	equ	0xFF2
 11878                           postinc0	equ	0xFEE
 11879                           wreg	equ	0xFE8
 11880                           indf1	equ	0xFE7
 11881                           postdec1	equ	0xFE5
 11882                           fsr1h	equ	0xFE2
 11883                           fsr1l	equ	0xFE1
 11884                           indf2	equ	0xFDF
 11885                           postinc2	equ	0xFDE
 11886                           postdec2	equ	0xFDD
 11887                           plusw2	equ	0xFDB
 11888                           fsr2h	equ	0xFDA
 11889                           fsr2l	equ	0xFD9
 11890                           status	equ	0xFD8
 11891                           
 11892 ;; *************** function _itos *****************
 11893 ;; Defined at:
 11894 ;;		line 369 in file "Library/Types.c"
 11895 ;; Parameters:    Size  Location     Type
 11896 ;;  input           2   12[BANK0 ] unsigned short 
 11897 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 11898 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;  Out             2   20[BANK0 ] unsigned short 
 11901 ;;  Length          2   18[BANK0 ] unsigned short 
 11902 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 11903 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 11904 ;; Return value:  Size  Location     Type
 11905 ;;                  1    wreg      void 
 11906 ;; Registers used:
 11907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11908 ;; Tracked objects:
 11909 ;;		On entry : 0/0
 11910 ;;		On exit  : 0/0
 11911 ;;		Unchanged: 0/0
 11912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11914 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11917 ;;Total ram usage:       10 bytes
 11918 ;; Hardware stack levels used:    1
 11919 ;; Hardware stack levels required when called:    8
 11920 ;; This function calls:
 11921 ;;		___lwdiv
 11922 ;;		___lwmod
 11923 ;;		_reverse
 11924 ;; This function is called by:
 11925 ;;		_HMI_SetNumber
 11926 ;; This function uses a non-reentrant model
 11927 ;;
 11928                           
 11929                           	psect	text66
 11930  011E04                     __ptext66:
 11931                           	opt stack 0
 11932  011E04                     _itos:
 11933                           	opt stack 21
 11934                           
 11935                           ;Types.c: 371: UINT16 Out = input;
 11936                           
 11937                           ;incstack = 0
 11938  011E04  C0BF  F0C7         	movff	itos@input,itos@Out
 11939  011E08  C0C0  F0C8         	movff	itos@input+1,itos@Out+1
 11940                           
 11941                           ;Types.c: 372: UINT16 Length = 0;
 11942  011E0C  0E00               	movlw	0
 11943  011E0E  0100               	movlb	0	; () banked
 11944  011E10  6FC6               	movwf	(itos@Length+1)& (0+255),b
 11945  011E12  0E00               	movlw	0
 11946  011E14  6FC5               	movwf	itos@Length& (0+255),b
 11947                           
 11948                           ; BSR set to: 0
 11949                           ;Types.c: 373: char *Data = destination;
 11950  011E16  C0C1  F0C3         	movff	itos@destination,itos@Data
 11951  011E1A  C0C2  F0C4         	movff	itos@destination+1,itos@Data+1
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;Types.c: 374: if(Out == 0)
 11955  011E1E  51C7               	movf	itos@Out& (0+255),w,b
 11956  011E20  11C8               	iorwf	(itos@Out+1)& (0+255),w,b
 11957  011E22  A4D8               	btfss	status,2,c
 11958  011E24  D030               	goto	l929
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;Types.c: 375: {
 11962                           ;Types.c: 376: Data[0] = (UINT16)'0';
 11963  011E26  C0C3  FFD9         	movff	itos@Data,fsr2l
 11964  011E2A  C0C4  FFDA         	movff	itos@Data+1,fsr2h
 11965  011E2E  0E30               	movlw	48
 11966  011E30  6EDF               	movwf	indf2,c
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;Types.c: 377: Length = 1;
 11970  011E32  0E00               	movlw	0
 11971  011E34  6FC6               	movwf	(itos@Length+1)& (0+255),b
 11972  011E36  0E01               	movlw	1
 11973  011E38  6FC5               	movwf	itos@Length& (0+255),b
 11974                           
 11975                           ;Types.c: 378: }
 11976  011E3A  D039               	goto	l928
 11977  011E3C                     
 11978                           ; BSR set to: 0
 11979                           ;Types.c: 382: {
 11980                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 11981                           
 11982                           ; BSR set to: 0
 11983  011E3C  C0C7  F0BA         	movff	itos@Out,___lwmod@dividend
 11984  011E40  C0C8  F0BB         	movff	itos@Out+1,___lwmod@dividend+1
 11985  011E44  0E00               	movlw	0
 11986  011E46  6FBD               	movwf	(___lwmod@divisor+1)& (0+255),b
 11987  011E48  0E0A               	movlw	10
 11988  011E4A  6FBC               	movwf	___lwmod@divisor& (0+255),b
 11989  011E4C  EC9B  F099         	call	___lwmod	;wreg free
 11990  011E50  0100               	movlb	0	; () banked
 11991  011E52  51BA               	movf	?___lwmod& (0+255),w,b
 11992  011E54  0F30               	addlw	48
 11993  011E56  C0C3  FFD9         	movff	itos@Data,fsr2l
 11994  011E5A  C0C4  FFDA         	movff	itos@Data+1,fsr2h
 11995  011E5E  6EDF               	movwf	indf2,c
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;Types.c: 384: Out /= 10;
 11999  011E60  C0C7  F0B3         	movff	itos@Out,___lwdiv@dividend
 12000  011E64  C0C8  F0B4         	movff	itos@Out+1,___lwdiv@dividend+1
 12001  011E68  0E00               	movlw	0
 12002  011E6A  6FB6               	movwf	(___lwdiv@divisor+1)& (0+255),b
 12003  011E6C  0E0A               	movlw	10
 12004  011E6E  6FB5               	movwf	___lwdiv@divisor& (0+255),b
 12005  011E70  ECF3  F097         	call	___lwdiv	;wreg free
 12006  011E74  C0B3  F0C7         	movff	?___lwdiv,itos@Out
 12007  011E78  C0B4  F0C8         	movff	?___lwdiv+1,itos@Out+1
 12008                           
 12009                           ;Types.c: 385: Length ++;
 12010  011E7C  0100               	movlb	0	; () banked
 12011  011E7E  4BC5               	infsnz	itos@Length& (0+255),f,b
 12012  011E80  2BC6               	incf	(itos@Length+1)& (0+255),f,b
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;Types.c: 386: Data++;
 12016  011E82  4BC3               	infsnz	itos@Data& (0+255),f,b
 12017  011E84  2BC4               	incf	(itos@Data+1)& (0+255),f,b
 12018  011E86                     l929:
 12019                           
 12020                           ; BSR set to: 0
 12021                           
 12022                           ; BSR set to: 0
 12023  011E86  51C7               	movf	itos@Out& (0+255),w,b
 12024  011E88  11C8               	iorwf	(itos@Out+1)& (0+255),w,b
 12025  011E8A  B4D8               	btfsc	status,2,c
 12026  011E8C  D006               	goto	u8090
 12027                           
 12028                           ; BSR set to: 0
 12029  011E8E  51C6               	movf	(itos@Length+1)& (0+255),w,b
 12030  011E90  E104               	bnz	l11806
 12031  011E92  0E06               	movlw	6
 12032  011E94  5DC5               	subwf	itos@Length& (0+255),w,b
 12033  011E96  A0D8               	btfss	status,0,c
 12034  011E98  D7D1               	goto	l930
 12035  011E9A                     u8090:
 12036  011E9A                     l11806:
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;Types.c: 387: }
 12040                           ;Types.c: 388: reverse(destination, Length);
 12041  011E9A  C0C1  F0B3         	movff	itos@destination,reverse@input
 12042  011E9E  C0C2  F0B4         	movff	itos@destination+1,reverse@input+1
 12043  011EA2  C0C5  F0B5         	movff	itos@Length,reverse@length
 12044  011EA6  C0C6  F0B6         	movff	itos@Length+1,reverse@length+1
 12045  011EAA  ECC9  F097         	call	_reverse	;wreg free
 12046  011EAE                     l928:
 12047                           
 12048                           ;Types.c: 389: }
 12049                           ;Types.c: 390: destination[Length] = '\0';
 12050  011EAE  0100               	movlb	0	; () banked
 12051  011EB0  51C5               	movf	itos@Length& (0+255),w,b
 12052  011EB2  25C1               	addwf	itos@destination& (0+255),w,b
 12053  011EB4  6ED9               	movwf	fsr2l,c
 12054  011EB6  51C6               	movf	(itos@Length+1)& (0+255),w,b
 12055  011EB8  21C2               	addwfc	(itos@destination+1)& (0+255),w,b
 12056  011EBA  6EDA               	movwf	fsr2h,c
 12057  011EBC  0E00               	movlw	0
 12058  011EBE  6EDF               	movwf	indf2,c
 12059                           
 12060                           ; BSR set to: 0
 12061  011EC0  0012               	return		;funcret
 12062  011EC2                     __end_of_itos:
 12063                           	opt stack 0
 12064                           tosu	equ	0xFFF
 12065                           tosh	equ	0xFFE
 12066                           tosl	equ	0xFFD
 12067                           pclath	equ	0xFFA
 12068                           tblptru	equ	0xFF8
 12069                           tblptrh	equ	0xFF7
 12070                           tblptrl	equ	0xFF6
 12071                           tablat	equ	0xFF5
 12072                           prodh	equ	0xFF4
 12073                           prodl	equ	0xFF3
 12074                           intcon	equ	0xFF2
 12075                           postinc0	equ	0xFEE
 12076                           wreg	equ	0xFE8
 12077                           indf1	equ	0xFE7
 12078                           postdec1	equ	0xFE5
 12079                           fsr1h	equ	0xFE2
 12080                           fsr1l	equ	0xFE1
 12081                           indf2	equ	0xFDF
 12082                           postinc2	equ	0xFDE
 12083                           postdec2	equ	0xFDD
 12084                           plusw2	equ	0xFDB
 12085                           fsr2h	equ	0xFDA
 12086                           fsr2l	equ	0xFD9
 12087                           status	equ	0xFD8
 12088                           
 12089 ;; *************** function _reverse *****************
 12090 ;; Defined at:
 12091 ;;		line 357 in file "Library/Types.c"
 12092 ;; Parameters:    Size  Location     Type
 12093 ;;  input           2    0[BANK0 ] PTR unsigned char 
 12094 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 12095 ;;  length          2    2[BANK0 ] unsigned short 
 12096 ;; Auto vars:     Size  Location     Type
 12097 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 12098 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 12099 ;;  tempVar         1    4[BANK0 ] unsigned char 
 12100 ;; Return value:  Size  Location     Type
 12101 ;;                  1    wreg      void 
 12102 ;; Registers used:
 12103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12109 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12110 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12112 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12113 ;;Total ram usage:        7 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    7
 12116 ;; This function calls:
 12117 ;;		Nothing
 12118 ;; This function is called by:
 12119 ;;		_itos
 12120 ;; This function uses a non-reentrant model
 12121 ;;
 12122                           
 12123                           	psect	text67
 12124  012F92                     __ptext67:
 12125                           	opt stack 0
 12126  012F92                     _reverse:
 12127                           	opt stack 21
 12128                           
 12129                           ;Types.c: 359: char tempVar,
 12130                           ;Types.c: 360: *iterator = input + length;
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;incstack = 0
 12134  012F92  0100               	movlb	0	; () banked
 12135  012F94  51B5               	movf	reverse@length& (0+255),w,b
 12136  012F96  25B3               	addwf	reverse@input& (0+255),w,b
 12137  012F98  6FB8               	movwf	reverse@iterator& (0+255),b
 12138  012F9A  51B6               	movf	(reverse@length+1)& (0+255),w,b
 12139  012F9C  21B4               	addwfc	(reverse@input+1)& (0+255),w,b
 12140  012F9E  6FB9               	movwf	(reverse@iterator+1)& (0+255),b
 12141                           
 12142                           ;Types.c: 362: while ( --iterator > input )
 12143  012FA0  D018               	goto	l921
 12144  012FA2                     
 12145                           ; BSR set to: 0
 12146                           ;Types.c: 363: {
 12147                           ;Types.c: 364: tempVar = *input;
 12148                           
 12149                           ; BSR set to: 0
 12150  012FA2  C0B3  FFD9         	movff	reverse@input,fsr2l
 12151  012FA6  C0B4  FFDA         	movff	reverse@input+1,fsr2h
 12152  012FAA  50DF               	movf	indf2,w,c
 12153  012FAC  6FB7               	movwf	reverse@tempVar& (0+255),b
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;Types.c: 365: *input++=*iterator;
 12157  012FAE  C0B8  FFD9         	movff	reverse@iterator,fsr2l
 12158  012FB2  C0B9  FFDA         	movff	reverse@iterator+1,fsr2h
 12159  012FB6  C0B3  FFE1         	movff	reverse@input,fsr1l
 12160  012FBA  C0B4  FFE2         	movff	reverse@input+1,fsr1h
 12161  012FBE  CFDF FFE7          	movff	indf2,indf1
 12162                           
 12163                           ; BSR set to: 0
 12164  012FC2  4BB3               	infsnz	reverse@input& (0+255),f,b
 12165  012FC4  2BB4               	incf	(reverse@input+1)& (0+255),f,b
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;Types.c: 366: *iterator=tempVar;
 12169  012FC6  C0B8  FFD9         	movff	reverse@iterator,fsr2l
 12170  012FCA  C0B9  FFDA         	movff	reverse@iterator+1,fsr2h
 12171  012FCE  C0B7  FFDF         	movff	reverse@tempVar,indf2
 12172  012FD2                     l921:
 12173                           
 12174                           ; BSR set to: 0
 12175                           
 12176                           ; BSR set to: 0
 12177  012FD2  07B8               	decf	reverse@iterator& (0+255),f,b
 12178  012FD4  A0D8               	btfss	status,0,c
 12179  012FD6  07B9               	decf	(reverse@iterator+1)& (0+255),f,b
 12180  012FD8  51B8               	movf	reverse@iterator& (0+255),w,b
 12181  012FDA  5DB3               	subwf	reverse@input& (0+255),w,b
 12182  012FDC  51B9               	movf	(reverse@iterator+1)& (0+255),w,b
 12183  012FDE  59B4               	subwfb	(reverse@input+1)& (0+255),w,b
 12184  012FE0  B0D8               	btfsc	status,0,c
 12185  012FE2  0012               	return	
 12186  012FE4  D7DE               	goto	l922
 12187  012FE6                     __end_of_reverse:
 12188                           	opt stack 0
 12189                           tosu	equ	0xFFF
 12190                           tosh	equ	0xFFE
 12191                           tosl	equ	0xFFD
 12192                           pclath	equ	0xFFA
 12193                           tblptru	equ	0xFF8
 12194                           tblptrh	equ	0xFF7
 12195                           tblptrl	equ	0xFF6
 12196                           tablat	equ	0xFF5
 12197                           prodh	equ	0xFF4
 12198                           prodl	equ	0xFF3
 12199                           intcon	equ	0xFF2
 12200                           postinc0	equ	0xFEE
 12201                           wreg	equ	0xFE8
 12202                           indf1	equ	0xFE7
 12203                           postdec1	equ	0xFE5
 12204                           fsr1h	equ	0xFE2
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           postdec2	equ	0xFDD
 12209                           plusw2	equ	0xFDB
 12210                           fsr2h	equ	0xFDA
 12211                           fsr2l	equ	0xFD9
 12212                           status	equ	0xFD8
 12213                           
 12214 ;; *************** function ___lwmod *****************
 12215 ;; Defined at:
 12216 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;  dividend        2    7[BANK0 ] unsigned int 
 12219 ;;  divisor         2    9[BANK0 ] unsigned int 
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;  counter         1   11[BANK0 ] unsigned char 
 12222 ;; Return value:  Size  Location     Type
 12223 ;;                  2    7[BANK0 ] unsigned int 
 12224 ;; Registers used:
 12225 ;;		wreg, status,2, status,0
 12226 ;; Tracked objects:
 12227 ;;		On entry : 0/0
 12228 ;;		On exit  : 0/0
 12229 ;;		Unchanged: 0/0
 12230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12231 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12234 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12235 ;;Total ram usage:        5 bytes
 12236 ;; Hardware stack levels used:    1
 12237 ;; Hardware stack levels required when called:    7
 12238 ;; This function calls:
 12239 ;;		Nothing
 12240 ;; This function is called by:
 12241 ;;		_itos
 12242 ;;		_printf
 12243 ;; This function uses a non-reentrant model
 12244 ;;
 12245                           
 12246                           	psect	text68
 12247  013336                     __ptext68:
 12248                           	opt stack 0
 12249  013336                     ___lwmod:
 12250                           	opt stack 22
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;incstack = 0
 12254  013336  0100               	movlb	0	; () banked
 12255  013338  51BC               	movf	___lwmod@divisor& (0+255),w,b
 12256  01333A  11BD               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 12257  01333C  B4D8               	btfsc	status,2,c
 12258  01333E  D018               	goto	l2748
 12259                           
 12260                           ; BSR set to: 0
 12261  013340  0E01               	movlw	1
 12262  013342  6FBE               	movwf	___lwmod@counter& (0+255),b
 12263  013344  D004               	goto	l2743
 12264  013346                     
 12265                           ; BSR set to: 0
 12266                           
 12267                           ; BSR set to: 0
 12268  013346  90D8               	bcf	status,0,c
 12269  013348  37BC               	rlcf	___lwmod@divisor& (0+255),f,b
 12270  01334A  37BD               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 12271  01334C  2BBE               	incf	___lwmod@counter& (0+255),f,b
 12272  01334E                     l2743:
 12273                           
 12274                           ; BSR set to: 0
 12275                           
 12276                           ; BSR set to: 0
 12277  01334E  AFBD               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 12278  013350  D7FA               	goto	l2744
 12279  013352                     u8000:
 12280                           
 12281                           ; BSR set to: 0
 12282                           
 12283                           ; BSR set to: 0
 12284                           
 12285                           ; BSR set to: 0
 12286  013352  51BC               	movf	___lwmod@divisor& (0+255),w,b
 12287  013354  5DBA               	subwf	___lwmod@dividend& (0+255),w,b
 12288  013356  51BD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12289  013358  59BB               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 12290  01335A  A0D8               	btfss	status,0,c
 12291  01335C  D004               	goto	l2747
 12292                           
 12293                           ; BSR set to: 0
 12294  01335E  51BC               	movf	___lwmod@divisor& (0+255),w,b
 12295  013360  5FBA               	subwf	___lwmod@dividend& (0+255),f,b
 12296  013362  51BD               	movf	(___lwmod@divisor+1)& (0+255),w,b
 12297  013364  5BBB               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 12298  013366                     l2747:
 12299                           
 12300                           ; BSR set to: 0
 12301                           
 12302                           ; BSR set to: 0
 12303  013366  90D8               	bcf	status,0,c
 12304  013368  33BD               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 12305  01336A  33BC               	rrcf	___lwmod@divisor& (0+255),f,b
 12306                           
 12307                           ; BSR set to: 0
 12308  01336C  2FBE               	decfsz	___lwmod@counter& (0+255),f,b
 12309  01336E  D7F1               	goto	u8000
 12310  013370                     l2748:
 12311                           
 12312                           ; BSR set to: 0
 12313                           
 12314                           ; BSR set to: 0
 12315  013370  C0BA  F0BA         	movff	___lwmod@dividend,?___lwmod
 12316  013374  C0BB  F0BB         	movff	___lwmod@dividend+1,?___lwmod+1
 12317                           
 12318                           ; BSR set to: 0
 12319  013378  0012               	return		;funcret
 12320  01337A                     __end_of___lwmod:
 12321                           	opt stack 0
 12322                           tosu	equ	0xFFF
 12323                           tosh	equ	0xFFE
 12324                           tosl	equ	0xFFD
 12325                           pclath	equ	0xFFA
 12326                           tblptru	equ	0xFF8
 12327                           tblptrh	equ	0xFF7
 12328                           tblptrl	equ	0xFF6
 12329                           tablat	equ	0xFF5
 12330                           prodh	equ	0xFF4
 12331                           prodl	equ	0xFF3
 12332                           intcon	equ	0xFF2
 12333                           postinc0	equ	0xFEE
 12334                           wreg	equ	0xFE8
 12335                           indf1	equ	0xFE7
 12336                           postdec1	equ	0xFE5
 12337                           fsr1h	equ	0xFE2
 12338                           fsr1l	equ	0xFE1
 12339                           indf2	equ	0xFDF
 12340                           postinc2	equ	0xFDE
 12341                           postdec2	equ	0xFDD
 12342                           plusw2	equ	0xFDB
 12343                           fsr2h	equ	0xFDA
 12344                           fsr2l	equ	0xFD9
 12345                           status	equ	0xFD8
 12346                           
 12347 ;; *************** function ___lwdiv *****************
 12348 ;; Defined at:
 12349 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 12350 ;; Parameters:    Size  Location     Type
 12351 ;;  dividend        2    0[BANK0 ] unsigned int 
 12352 ;;  divisor         2    2[BANK0 ] unsigned int 
 12353 ;; Auto vars:     Size  Location     Type
 12354 ;;  quotient        2    5[BANK0 ] unsigned int 
 12355 ;;  counter         1    4[BANK0 ] unsigned char 
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  2    0[BANK0 ] unsigned int 
 12358 ;; Registers used:
 12359 ;;		wreg, status,2, status,0
 12360 ;; Tracked objects:
 12361 ;;		On entry : 0/0
 12362 ;;		On exit  : 0/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12365 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12366 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12368 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12369 ;;Total ram usage:        7 bytes
 12370 ;; Hardware stack levels used:    1
 12371 ;; Hardware stack levels required when called:    7
 12372 ;; This function calls:
 12373 ;;		Nothing
 12374 ;; This function is called by:
 12375 ;;		_itos
 12376 ;;		_printf
 12377 ;; This function uses a non-reentrant model
 12378 ;;
 12379                           
 12380                           	psect	text69
 12381  012FE6                     __ptext69:
 12382                           	opt stack 0
 12383  012FE6                     ___lwdiv:
 12384                           	opt stack 22
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;incstack = 0
 12388  012FE6  0E00               	movlw	0
 12389  012FE8  0100               	movlb	0	; () banked
 12390  012FEA  6FB9               	movwf	(___lwdiv@quotient+1)& (0+255),b
 12391  012FEC  0E00               	movlw	0
 12392  012FEE  6FB8               	movwf	___lwdiv@quotient& (0+255),b
 12393                           
 12394                           ; BSR set to: 0
 12395  012FF0  51B5               	movf	___lwdiv@divisor& (0+255),w,b
 12396  012FF2  11B6               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 12397  012FF4  B4D8               	btfsc	status,2,c
 12398  012FF6  D01C               	goto	l2738
 12399                           
 12400                           ; BSR set to: 0
 12401  012FF8  0E01               	movlw	1
 12402  012FFA  6FB7               	movwf	___lwdiv@counter& (0+255),b
 12403  012FFC  D004               	goto	l2733
 12404  012FFE                     
 12405                           ; BSR set to: 0
 12406                           
 12407                           ; BSR set to: 0
 12408  012FFE  90D8               	bcf	status,0,c
 12409  013000  37B5               	rlcf	___lwdiv@divisor& (0+255),f,b
 12410  013002  37B6               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 12411  013004  2BB7               	incf	___lwdiv@counter& (0+255),f,b
 12412  013006                     l2733:
 12413                           
 12414                           ; BSR set to: 0
 12415                           
 12416                           ; BSR set to: 0
 12417  013006  AFB6               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 12418  013008  D7FA               	goto	l2734
 12419  01300A                     u7970:
 12420                           
 12421                           ; BSR set to: 0
 12422                           
 12423                           ; BSR set to: 0
 12424                           
 12425                           ; BSR set to: 0
 12426  01300A  90D8               	bcf	status,0,c
 12427  01300C  37B8               	rlcf	___lwdiv@quotient& (0+255),f,b
 12428  01300E  37B9               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 12429                           
 12430                           ; BSR set to: 0
 12431  013010  51B5               	movf	___lwdiv@divisor& (0+255),w,b
 12432  013012  5DB3               	subwf	___lwdiv@dividend& (0+255),w,b
 12433  013014  51B6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12434  013016  59B4               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 12435  013018  A0D8               	btfss	status,0,c
 12436  01301A  D005               	goto	l2737
 12437                           
 12438                           ; BSR set to: 0
 12439  01301C  51B5               	movf	___lwdiv@divisor& (0+255),w,b
 12440  01301E  5FB3               	subwf	___lwdiv@dividend& (0+255),f,b
 12441  013020  51B6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 12442  013022  5BB4               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 12443                           
 12444                           ; BSR set to: 0
 12445  013024  81B8               	bsf	___lwdiv@quotient& (0+255),0,b
 12446  013026                     l2737:
 12447                           
 12448                           ; BSR set to: 0
 12449                           
 12450                           ; BSR set to: 0
 12451  013026  90D8               	bcf	status,0,c
 12452  013028  33B6               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 12453  01302A  33B5               	rrcf	___lwdiv@divisor& (0+255),f,b
 12454                           
 12455                           ; BSR set to: 0
 12456  01302C  2FB7               	decfsz	___lwdiv@counter& (0+255),f,b
 12457  01302E  D7ED               	goto	u7970
 12458  013030                     l2738:
 12459                           
 12460                           ; BSR set to: 0
 12461                           
 12462                           ; BSR set to: 0
 12463  013030  C0B8  F0B3         	movff	___lwdiv@quotient,?___lwdiv
 12464  013034  C0B9  F0B4         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12465                           
 12466                           ; BSR set to: 0
 12467  013038  0012               	return		;funcret
 12468  01303A                     __end_of___lwdiv:
 12469                           	opt stack 0
 12470                           tosu	equ	0xFFF
 12471                           tosh	equ	0xFFE
 12472                           tosl	equ	0xFFD
 12473                           pclath	equ	0xFFA
 12474                           tblptru	equ	0xFF8
 12475                           tblptrh	equ	0xFF7
 12476                           tblptrl	equ	0xFF6
 12477                           tablat	equ	0xFF5
 12478                           prodh	equ	0xFF4
 12479                           prodl	equ	0xFF3
 12480                           intcon	equ	0xFF2
 12481                           postinc0	equ	0xFEE
 12482                           wreg	equ	0xFE8
 12483                           indf1	equ	0xFE7
 12484                           postdec1	equ	0xFE5
 12485                           fsr1h	equ	0xFE2
 12486                           fsr1l	equ	0xFE1
 12487                           indf2	equ	0xFDF
 12488                           postinc2	equ	0xFDE
 12489                           postdec2	equ	0xFDD
 12490                           plusw2	equ	0xFDB
 12491                           fsr2h	equ	0xFDA
 12492                           fsr2l	equ	0xFD9
 12493                           status	equ	0xFD8
 12494                           
 12495 ;; *************** function _HMI_SetSegments *****************
 12496 ;; Defined at:
 12497 ;;		line 226 in file "HMI.c"
 12498 ;; Parameters:    Size  Location     Type
 12499 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 12500 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 12501 ;; Auto vars:     Size  Location     Type
 12502 ;;  in              2    4[BANK0 ] unsigned short 
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  1    wreg      void 
 12505 ;; Registers used:
 12506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12512 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12516 ;;Total ram usage:        5 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    8
 12519 ;; This function calls:
 12520 ;;		_ToSegment
 12521 ;; This function is called by:
 12522 ;;		_HMI_SetNumber
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           	psect	text70
 12527  012224                     __ptext70:
 12528                           	opt stack 0
 12529  012224                     _HMI_SetSegments:
 12530                           	opt stack 21
 12531                           
 12532                           ;HMI.c: 228: UINT16 in=0;
 12533                           
 12534                           ; BSR set to: 0
 12535                           ;incstack = 0
 12536  012224  0E00               	movlw	0
 12537  012226  0100               	movlb	0	; () banked
 12538  012228  6FB8               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 12539  01222A  0E00               	movlw	0
 12540  01222C  6FB7               	movwf	HMI_SetSegments@in& (0+255),b
 12541                           
 12542                           ;HMI.c: 229: while(*pString)
 12543  01222E  D02E               	goto	l1202
 12544  012230                     
 12545                           ; BSR set to: 0
 12546                           ;HMI.c: 230: {
 12547                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 12548                           
 12549                           ; BSR set to: 0
 12550  012230  0E2C               	movlw	low _HMIBoard
 12551  012232  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12552  012234  6ED9               	movwf	fsr2l,c
 12553  012236  0E01               	movlw	high _HMIBoard
 12554  012238  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12555  01223A  6EDA               	movwf	fsr2h,c
 12556  01223C  C0B4  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 12557  012240  C0B5  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 12558  012244  50E7               	movf	indf1,w,c
 12559  012246  EC27  F083         	call	_ToSegment
 12560  01224A  6EDF               	movwf	indf2,c
 12561                           
 12562                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 12563  01224C  0E2C               	movlw	low _HMIBoard
 12564  01224E  0100               	movlb	0	; () banked
 12565  012250  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12566  012252  6ED9               	movwf	fsr2l,c
 12567  012254  0E01               	movlw	high _HMIBoard
 12568  012256  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12569  012258  6EDA               	movwf	fsr2h,c
 12570  01225A  0E80               	movlw	128
 12571  01225C  18DE               	xorwf	postinc2,w,c
 12572  01225E  A4D8               	btfss	status,2,c
 12573  012260  D00B               	goto	l1201
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;HMI.c: 234: {
 12577                           ;HMI.c: 235: in--;
 12578  012262  07B7               	decf	HMI_SetSegments@in& (0+255),f,b
 12579  012264  A0D8               	btfss	status,0,c
 12580  012266  07B8               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 12584  012268  0E2C               	movlw	low _HMIBoard
 12585  01226A  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12586  01226C  6ED9               	movwf	fsr2l,c
 12587  01226E  0E01               	movlw	high _HMIBoard
 12588  012270  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12589  012272  6EDA               	movwf	fsr2h,c
 12590  012274  0E00               	movlw	0
 12591  012276  8EDB               	bsf	plusw2,7,c
 12592  012278                     l1201:
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;HMI.c: 237: }
 12596                           ;HMI.c: 239: pString++;
 12597                           
 12598                           ; BSR set to: 0
 12599  012278  4BB4               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 12600  01227A  2BB5               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;HMI.c: 240: in++;
 12604  01227C  4BB7               	infsnz	HMI_SetSegments@in& (0+255),f,b
 12605  01227E  2BB8               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;HMI.c: 241: if (in>=6)
 12609  012280  51B8               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 12610  012282  E116               	bnz	l11858
 12611  012284  0E06               	movlw	6
 12612  012286  5DB7               	subwf	HMI_SetSegments@in& (0+255),w,b
 12613  012288  B0D8               	btfsc	status,0,c
 12614  01228A  D012               	goto	l1204
 12615  01228C                     l1202:
 12616                           
 12617                           ; BSR set to: 0
 12618                           
 12619                           ; BSR set to: 0
 12620                           
 12621                           ; BSR set to: 0
 12622  01228C  C0B4  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 12623  012290  C0B5  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 12624  012294  50DF               	movf	indf2,w,c
 12625  012296  B4D8               	btfsc	status,2,c
 12626  012298  D00B               	goto	l1204
 12627  01229A  D7CA               	goto	l1200
 12628  01229C                     
 12629                           ; BSR set to: 0
 12630                           ;HMI.c: 245: {
 12631                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 12632                           
 12633                           ; BSR set to: 0
 12634  01229C  0E2C               	movlw	low _HMIBoard
 12635  01229E  25B7               	addwf	HMI_SetSegments@in& (0+255),w,b
 12636  0122A0  6ED9               	movwf	fsr2l,c
 12637  0122A2  0E01               	movlw	high _HMIBoard
 12638  0122A4  21B8               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 12639  0122A6  6EDA               	movwf	fsr2h,c
 12640  0122A8  0E00               	movlw	0
 12641  0122AA  6EDF               	movwf	indf2,c
 12642                           
 12643                           ; BSR set to: 0
 12644                           ;HMI.c: 247: in++;
 12645  0122AC  4BB7               	infsnz	HMI_SetSegments@in& (0+255),f,b
 12646  0122AE  2BB8               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 12647  0122B0                     l1204:
 12648  0122B0                     l11858:
 12649                           
 12650                           ; BSR set to: 0
 12651  0122B0  51B8               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 12652  0122B2  E105               	bnz	l1207
 12653  0122B4  0E06               	movlw	6
 12654  0122B6  5DB7               	subwf	HMI_SetSegments@in& (0+255),w,b
 12655  0122B8  B0D8               	btfsc	status,0,c
 12656  0122BA  0012               	return	
 12657  0122BC  D7EF               	goto	l1205
 12658  0122BE                     l1207:
 12659                           
 12660                           ; BSR set to: 0
 12661  0122BE  0012               	return		;funcret
 12662  0122C0                     __end_of_HMI_SetSegments:
 12663                           	opt stack 0
 12664                           tosu	equ	0xFFF
 12665                           tosh	equ	0xFFE
 12666                           tosl	equ	0xFFD
 12667                           pclath	equ	0xFFA
 12668                           tblptru	equ	0xFF8
 12669                           tblptrh	equ	0xFF7
 12670                           tblptrl	equ	0xFF6
 12671                           tablat	equ	0xFF5
 12672                           prodh	equ	0xFF4
 12673                           prodl	equ	0xFF3
 12674                           intcon	equ	0xFF2
 12675                           postinc0	equ	0xFEE
 12676                           wreg	equ	0xFE8
 12677                           indf1	equ	0xFE7
 12678                           postdec1	equ	0xFE5
 12679                           fsr1h	equ	0xFE2
 12680                           fsr1l	equ	0xFE1
 12681                           indf2	equ	0xFDF
 12682                           postinc2	equ	0xFDE
 12683                           postdec2	equ	0xFDD
 12684                           plusw2	equ	0xFDB
 12685                           fsr2h	equ	0xFDA
 12686                           fsr2l	equ	0xFD9
 12687                           status	equ	0xFD8
 12688                           
 12689 ;; *************** function _ToSegment *****************
 12690 ;; Defined at:
 12691 ;;		line 284 in file "Library/Types.c"
 12692 ;; Parameters:    Size  Location     Type
 12693 ;;  pCHR            1    wreg     unsigned char 
 12694 ;; Auto vars:     Size  Location     Type
 12695 ;;  pCHR            1    0[BANK0 ] unsigned char 
 12696 ;; Return value:  Size  Location     Type
 12697 ;;                  1    wreg      unsigned char 
 12698 ;; Registers used:
 12699 ;;		wreg, status,2, status,0
 12700 ;; Tracked objects:
 12701 ;;		On entry : 0/0
 12702 ;;		On exit  : 0/0
 12703 ;;		Unchanged: 0/0
 12704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12709 ;;Total ram usage:        1 bytes
 12710 ;; Hardware stack levels used:    1
 12711 ;; Hardware stack levels required when called:    7
 12712 ;; This function calls:
 12713 ;;		Nothing
 12714 ;; This function is called by:
 12715 ;;		_HMI_SetSegments
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text71
 12720  01064E                     __ptext71:
 12721                           	opt stack 0
 12722  01064E                     _ToSegment:
 12723                           	opt stack 21
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;incstack = 0
 12727                           ;ToSegment@pCHR stored from wreg
 12728  01064E  0100               	movlb	0	; () banked
 12729  010650  6FB3               	movwf	ToSegment@pCHR& (0+255),b
 12730                           
 12731                           ;Types.c: 286: switch(pCHR)
 12732  010652  D07E               	goto	l853
 12733  010654  0E3F               	movlw	63
 12734  010656  0012               	return	
 12735  010658  0E06               	movlw	6
 12736  01065A  0012               	return	
 12737  01065C  0E5B               	movlw	91
 12738  01065E  0012               	return	
 12739  010660  0E4F               	movlw	79
 12740  010662  0012               	return	
 12741  010664  0E66               	movlw	102
 12742  010666  0012               	return	
 12743  010668  0E6D               	movlw	109
 12744  01066A  0012               	return	
 12745  01066C  0E7D               	movlw	125
 12746  01066E  0012               	return	
 12747  010670  0E07               	movlw	7
 12748  010672  0012               	return	
 12749  010674  0E7F               	movlw	127
 12750  010676  0012               	return	
 12751  010678  0E6F               	movlw	111
 12752  01067A  0012               	return	
 12753  01067C  0E5F               	movlw	95
 12754  01067E  0012               	return	
 12755  010680  0E7C               	movlw	124
 12756  010682  0012               	return	
 12757  010684  0E58               	movlw	88
 12758  010686  0012               	return	
 12759  010688  0E5E               	movlw	94
 12760  01068A  0012               	return	
 12761  01068C  0E7B               	movlw	123
 12762  01068E  0012               	return	
 12763  010690  0E71               	movlw	113
 12764  010692  0012               	return	
 12765  010694  0E6F               	movlw	111
 12766  010696  0012               	return	
 12767  010698  0E74               	movlw	116
 12768  01069A  0012               	return	
 12769  01069C  0E04               	movlw	4
 12770  01069E  0012               	return	
 12771  0106A0  0E0E               	movlw	14
 12772  0106A2  0012               	return	
 12773  0106A4  0E7A               	movlw	122
 12774  0106A6  0012               	return	
 12775  0106A8  0E06               	movlw	6
 12776  0106AA  0012               	return	
 12777  0106AC  0E14               	movlw	20
 12778  0106AE  0012               	return	
 12779  0106B0  0E54               	movlw	84
 12780  0106B2  0012               	return	
 12781  0106B4  0E5C               	movlw	92
 12782  0106B6  0012               	return	
 12783  0106B8  0E73               	movlw	115
 12784  0106BA  0012               	return	
 12785  0106BC  0E67               	movlw	103
 12786  0106BE  0012               	return	
 12787  0106C0  0E50               	movlw	80
 12788  0106C2  0012               	return	
 12789  0106C4  0E6D               	movlw	109
 12790  0106C6  0012               	return	
 12791  0106C8  0E78               	movlw	120
 12792  0106CA  0012               	return	
 12793  0106CC  0E1C               	movlw	28
 12794  0106CE  0012               	return	
 12795  0106D0  0E62               	movlw	98
 12796  0106D2  0012               	return	
 12797  0106D4  0E2A               	movlw	42
 12798  0106D6  0012               	return	
 12799  0106D8  0E64               	movlw	100
 12800  0106DA  0012               	return	
 12801  0106DC  0E6E               	movlw	110
 12802  0106DE  0012               	return	
 12803  0106E0  0E5B               	movlw	91
 12804  0106E2  0012               	return	
 12805  0106E4  0E77               	movlw	119
 12806  0106E6  0012               	return	
 12807  0106E8  0E7F               	movlw	127
 12808  0106EA  0012               	return	
 12809  0106EC  0E39               	movlw	57
 12810  0106EE  0012               	return	
 12811  0106F0  0E3F               	movlw	63
 12812  0106F2  0012               	return	
 12813  0106F4  0E79               	movlw	121
 12814  0106F6  0012               	return	
 12815  0106F8  0E71               	movlw	113
 12816  0106FA  0012               	return	
 12817  0106FC  0E3D               	movlw	61
 12818  0106FE  0012               	return	
 12819  010700  0E76               	movlw	118
 12820  010702  0012               	return	
 12821  010704  0E06               	movlw	6
 12822  010706  0012               	return	
 12823  010708  0E1E               	movlw	30
 12824  01070A  0012               	return	
 12825  01070C  0E57               	movlw	87
 12826  01070E  0012               	return	
 12827  010710  0E38               	movlw	56
 12828  010712  0012               	return	
 12829  010714  0E76               	movlw	118
 12830  010716  0012               	return	
 12831  010718  0E76               	movlw	118
 12832  01071A  0012               	return	
 12833  01071C  0E3F               	movlw	63
 12834  01071E  0012               	return	
 12835  010720  0E73               	movlw	115
 12836  010722  0012               	return	
 12837  010724  0E3F               	movlw	63
 12838  010726  0012               	return	
 12839  010728  0E77               	movlw	119
 12840  01072A  0012               	return	
 12841  01072C  0E6D               	movlw	109
 12842  01072E  0012               	return	
 12843  010730  0E31               	movlw	49
 12844  010732  0012               	return	
 12845  010734  0E3E               	movlw	62
 12846  010736  0012               	return	
 12847  010738  0E3E               	movlw	62
 12848  01073A  0012               	return	
 12849  01073C  0E7E               	movlw	126
 12850  01073E  0012               	return	
 12851  010740  0E76               	movlw	118
 12852  010742  0012               	return	
 12853  010744  0E66               	movlw	102
 12854  010746  0012               	return	
 12855  010748  0E5B               	movlw	91
 12856  01074A  0012               	return	
 12857  01074C  0E80               	movlw	128
 12858  01074E  0012               	return	
 12859  010750                     l853:
 12860  010750  0100               	movlb	0	; () banked
 12861  010752  51B3               	movf	ToSegment@pCHR& (0+255),w,b
 12862                           
 12863                           ; Switch size 1, requested type "space"
 12864                           ; Number of cases is 63, Range of values is 46 to 122
 12865                           ; switch strategies available:
 12866                           ; Name         Instructions Cycles
 12867                           ; simple_byte          190    96 (average)
 12868                           ;	Chosen strategy is simple_byte
 12869  010754  0A2E               	xorlw	46	; case 46
 12870  010756  B4D8               	btfsc	status,2,c
 12871  010758  D7F9               	goto	l917
 12872  01075A  0A1E               	xorlw	30	; case 48
 12873  01075C  B4D8               	btfsc	status,2,c
 12874  01075E  D77A               	goto	l854
 12875  010760  0A01               	xorlw	1	; case 49
 12876  010762  B4D8               	btfsc	status,2,c
 12877  010764  D779               	goto	l856
 12878  010766  0A03               	xorlw	3	; case 50
 12879  010768  B4D8               	btfsc	status,2,c
 12880  01076A  D778               	goto	l857
 12881  01076C  0A01               	xorlw	1	; case 51
 12882  01076E  B4D8               	btfsc	status,2,c
 12883  010770  D777               	goto	l858
 12884  010772  0A07               	xorlw	7	; case 52
 12885  010774  B4D8               	btfsc	status,2,c
 12886  010776  D776               	goto	l859
 12887  010778  0A01               	xorlw	1	; case 53
 12888  01077A  B4D8               	btfsc	status,2,c
 12889  01077C  D775               	goto	l860
 12890  01077E  0A03               	xorlw	3	; case 54
 12891  010780  B4D8               	btfsc	status,2,c
 12892  010782  D774               	goto	l861
 12893  010784  0A01               	xorlw	1	; case 55
 12894  010786  B4D8               	btfsc	status,2,c
 12895  010788  D773               	goto	l862
 12896  01078A  0A0F               	xorlw	15	; case 56
 12897  01078C  B4D8               	btfsc	status,2,c
 12898  01078E  D772               	goto	l863
 12899  010790  0A01               	xorlw	1	; case 57
 12900  010792  B4D8               	btfsc	status,2,c
 12901  010794  D771               	goto	l864
 12902  010796  0A78               	xorlw	120	; case 65
 12903  010798  B4D8               	btfsc	status,2,c
 12904  01079A  D7A4               	goto	l891
 12905  01079C  0A03               	xorlw	3	; case 66
 12906  01079E  B4D8               	btfsc	status,2,c
 12907  0107A0  D7A3               	goto	l892
 12908  0107A2  0A01               	xorlw	1	; case 67
 12909  0107A4  B4D8               	btfsc	status,2,c
 12910  0107A6  D7A2               	goto	l893
 12911  0107A8  0A07               	xorlw	7	; case 68
 12912  0107AA  B4D8               	btfsc	status,2,c
 12913  0107AC  D7A1               	goto	l894
 12914  0107AE  0A01               	xorlw	1	; case 69
 12915  0107B0  B4D8               	btfsc	status,2,c
 12916  0107B2  D7A0               	goto	l895
 12917  0107B4  0A03               	xorlw	3	; case 70
 12918  0107B6  B4D8               	btfsc	status,2,c
 12919  0107B8  D79F               	goto	l896
 12920  0107BA  0A01               	xorlw	1	; case 71
 12921  0107BC  B4D8               	btfsc	status,2,c
 12922  0107BE  D79E               	goto	l897
 12923  0107C0  0A0F               	xorlw	15	; case 72
 12924  0107C2  B4D8               	btfsc	status,2,c
 12925  0107C4  D79D               	goto	l898
 12926  0107C6  0A01               	xorlw	1	; case 73
 12927  0107C8  B4D8               	btfsc	status,2,c
 12928  0107CA  D79C               	goto	l899
 12929  0107CC  0A03               	xorlw	3	; case 74
 12930  0107CE  B4D8               	btfsc	status,2,c
 12931  0107D0  D79B               	goto	l900
 12932  0107D2  0A01               	xorlw	1	; case 75
 12933  0107D4  B4D8               	btfsc	status,2,c
 12934  0107D6  D79A               	goto	l901
 12935  0107D8  0A07               	xorlw	7	; case 76
 12936  0107DA  B4D8               	btfsc	status,2,c
 12937  0107DC  D799               	goto	l902
 12938  0107DE  0A01               	xorlw	1	; case 77
 12939  0107E0  B4D8               	btfsc	status,2,c
 12940  0107E2  D798               	goto	l903
 12941  0107E4  0A03               	xorlw	3	; case 78
 12942  0107E6  B4D8               	btfsc	status,2,c
 12943  0107E8  D797               	goto	l904
 12944  0107EA  0A01               	xorlw	1	; case 79
 12945  0107EC  B4D8               	btfsc	status,2,c
 12946  0107EE  D796               	goto	l905
 12947  0107F0  0A1F               	xorlw	31	; case 80
 12948  0107F2  B4D8               	btfsc	status,2,c
 12949  0107F4  D795               	goto	l906
 12950  0107F6  0A01               	xorlw	1	; case 81
 12951  0107F8  B4D8               	btfsc	status,2,c
 12952  0107FA  D794               	goto	l907
 12953  0107FC  0A03               	xorlw	3	; case 82
 12954  0107FE  B4D8               	btfsc	status,2,c
 12955  010800  D793               	goto	l908
 12956  010802  0A01               	xorlw	1	; case 83
 12957  010804  B4D8               	btfsc	status,2,c
 12958  010806  D792               	goto	l909
 12959  010808  0A07               	xorlw	7	; case 84
 12960  01080A  B4D8               	btfsc	status,2,c
 12961  01080C  D791               	goto	l910
 12962  01080E  0A01               	xorlw	1	; case 85
 12963  010810  B4D8               	btfsc	status,2,c
 12964  010812  D790               	goto	l911
 12965  010814  0A03               	xorlw	3	; case 86
 12966  010816  B4D8               	btfsc	status,2,c
 12967  010818  D78F               	goto	l912
 12968  01081A  0A01               	xorlw	1	; case 87
 12969  01081C  B4D8               	btfsc	status,2,c
 12970  01081E  D78E               	goto	l913
 12971  010820  0A0F               	xorlw	15	; case 88
 12972  010822  B4D8               	btfsc	status,2,c
 12973  010824  D78D               	goto	l914
 12974  010826  0A01               	xorlw	1	; case 89
 12975  010828  B4D8               	btfsc	status,2,c
 12976  01082A  D78C               	goto	l915
 12977  01082C  0A03               	xorlw	3	; case 90
 12978  01082E  B4D8               	btfsc	status,2,c
 12979  010830  D78B               	goto	l916
 12980  010832  0A3B               	xorlw	59	; case 97
 12981  010834  B4D8               	btfsc	status,2,c
 12982  010836  D722               	goto	l865
 12983  010838  0A03               	xorlw	3	; case 98
 12984  01083A  B4D8               	btfsc	status,2,c
 12985  01083C  D721               	goto	l866
 12986  01083E  0A01               	xorlw	1	; case 99
 12987  010840  B4D8               	btfsc	status,2,c
 12988  010842  D720               	goto	l867
 12989  010844  0A07               	xorlw	7	; case 100
 12990  010846  B4D8               	btfsc	status,2,c
 12991  010848  D71F               	goto	l868
 12992  01084A  0A01               	xorlw	1	; case 101
 12993  01084C  B4D8               	btfsc	status,2,c
 12994  01084E  D71E               	goto	l869
 12995  010850  0A03               	xorlw	3	; case 102
 12996  010852  B4D8               	btfsc	status,2,c
 12997  010854  D71D               	goto	l870
 12998  010856  0A01               	xorlw	1	; case 103
 12999  010858  B4D8               	btfsc	status,2,c
 13000  01085A  D71C               	goto	l871
 13001  01085C  0A0F               	xorlw	15	; case 104
 13002  01085E  B4D8               	btfsc	status,2,c
 13003  010860  D71B               	goto	l872
 13004  010862  0A01               	xorlw	1	; case 105
 13005  010864  B4D8               	btfsc	status,2,c
 13006  010866  D71A               	goto	l873
 13007  010868  0A03               	xorlw	3	; case 106
 13008  01086A  B4D8               	btfsc	status,2,c
 13009  01086C  D719               	goto	l874
 13010  01086E  0A01               	xorlw	1	; case 107
 13011  010870  B4D8               	btfsc	status,2,c
 13012  010872  D718               	goto	l875
 13013  010874  0A07               	xorlw	7	; case 108
 13014  010876  B4D8               	btfsc	status,2,c
 13015  010878  D717               	goto	l876
 13016  01087A  0A01               	xorlw	1	; case 109
 13017  01087C  B4D8               	btfsc	status,2,c
 13018  01087E  D716               	goto	l877
 13019  010880  0A03               	xorlw	3	; case 110
 13020  010882  B4D8               	btfsc	status,2,c
 13021  010884  D715               	goto	l878
 13022  010886  0A01               	xorlw	1	; case 111
 13023  010888  B4D8               	btfsc	status,2,c
 13024  01088A  D714               	goto	l879
 13025  01088C  0A1F               	xorlw	31	; case 112
 13026  01088E  B4D8               	btfsc	status,2,c
 13027  010890  D713               	goto	l880
 13028  010892  0A01               	xorlw	1	; case 113
 13029  010894  B4D8               	btfsc	status,2,c
 13030  010896  D712               	goto	l881
 13031  010898  0A03               	xorlw	3	; case 114
 13032  01089A  B4D8               	btfsc	status,2,c
 13033  01089C  D711               	goto	l882
 13034  01089E  0A01               	xorlw	1	; case 115
 13035  0108A0  B4D8               	btfsc	status,2,c
 13036  0108A2  D710               	goto	l883
 13037  0108A4  0A07               	xorlw	7	; case 116
 13038  0108A6  B4D8               	btfsc	status,2,c
 13039  0108A8  D70F               	goto	l884
 13040  0108AA  0A01               	xorlw	1	; case 117
 13041  0108AC  B4D8               	btfsc	status,2,c
 13042  0108AE  D70E               	goto	l885
 13043  0108B0  0A03               	xorlw	3	; case 118
 13044  0108B2  B4D8               	btfsc	status,2,c
 13045  0108B4  D70D               	goto	l886
 13046  0108B6  0A01               	xorlw	1	; case 119
 13047  0108B8  B4D8               	btfsc	status,2,c
 13048  0108BA  D70C               	goto	l887
 13049  0108BC  0A0F               	xorlw	15	; case 120
 13050  0108BE  B4D8               	btfsc	status,2,c
 13051  0108C0  D70B               	goto	l888
 13052  0108C2  0A01               	xorlw	1	; case 121
 13053  0108C4  B4D8               	btfsc	status,2,c
 13054  0108C6  D70A               	goto	l889
 13055  0108C8  0A03               	xorlw	3	; case 122
 13056  0108CA  B4D8               	btfsc	status,2,c
 13057  0108CC  D709               	goto	l890
 13058                           
 13059                           ;Types.c: 354: return 0;
 13060                           
 13061                           ; BSR set to: 0
 13062  0108CE  0E00               	movlw	0
 13063  0108D0  0012               	return	
 13064  0108D2                     __end_of_ToSegment:
 13065                           	opt stack 0
 13066                           tosu	equ	0xFFF
 13067                           tosh	equ	0xFFE
 13068                           tosl	equ	0xFFD
 13069                           pclath	equ	0xFFA
 13070                           tblptru	equ	0xFF8
 13071                           tblptrh	equ	0xFF7
 13072                           tblptrl	equ	0xFF6
 13073                           tablat	equ	0xFF5
 13074                           prodh	equ	0xFF4
 13075                           prodl	equ	0xFF3
 13076                           intcon	equ	0xFF2
 13077                           postinc0	equ	0xFEE
 13078                           wreg	equ	0xFE8
 13079                           indf1	equ	0xFE7
 13080                           postdec1	equ	0xFE5
 13081                           fsr1h	equ	0xFE2
 13082                           fsr1l	equ	0xFE1
 13083                           indf2	equ	0xFDF
 13084                           postinc2	equ	0xFDE
 13085                           postdec2	equ	0xFDD
 13086                           plusw2	equ	0xFDB
 13087                           fsr2h	equ	0xFDA
 13088                           fsr2l	equ	0xFD9
 13089                           status	equ	0xFD8
 13090                           
 13091 ;; *************** function _HMI_SetButton *****************
 13092 ;; Defined at:
 13093 ;;		line 186 in file "HMI.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;  pValue          1    wreg     unsigned char 
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  pValue          1    6[BANK0 ] unsigned char 
 13098 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 13099 ;;  v               1    7[BANK0 ] unsigned char 
 13100 ;; Return value:  Size  Location     Type
 13101 ;;                  1    wreg      void 
 13102 ;; Registers used:
 13103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13104 ;; Tracked objects:
 13105 ;;		On entry : 0/0
 13106 ;;		On exit  : 0/0
 13107 ;;		Unchanged: 0/0
 13108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13110 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13112 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13113 ;;Total ram usage:        8 bytes
 13114 ;; Hardware stack levels used:    1
 13115 ;; Hardware stack levels required when called:    7
 13116 ;; This function calls:
 13117 ;;		Nothing
 13118 ;; This function is called by:
 13119 ;;		_Event_TestButton
 13120 ;; This function uses a non-reentrant model
 13121 ;;
 13122                           
 13123                           	psect	text72
 13124  0128AA                     __ptext72:
 13125                           	opt stack 0
 13126  0128AA                     _HMI_SetButton:
 13127                           	opt stack 20
 13128                           
 13129                           ;incstack = 0
 13130                           ;HMI_SetButton@pValue stored from wreg
 13131  0128AA  0100               	movlb	0	; () banked
 13132  0128AC  6FB9               	movwf	HMI_SetButton@pValue& (0+255),b
 13133                           
 13134                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 13135  0128AE  0ED0               	movlw	low HMI_SetButton@F7213
 13136  0128B0  6EF6               	movwf	tblptrl,c
 13137  0128B2                     	if	1	;There is more than 1 active tblptr byte
 13138  0128B2  0EFC               	movlw	high HMI_SetButton@F7213
 13139  0128B4  6EF7               	movwf	tblptrh,c
 13140  0128B6                     	endif
 13141  0128B6                     	if	1	;There are 3 active tblptr bytes
 13142  0128B6  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 13143  0128B8  6EF8               	movwf	tblptru,c
 13144  0128BA                     	endif
 13145  0128BA  0009               	tblrd		*+
 13146  0128BC  CFF5 F0B5          	movff	tablat,HMI_SetButton@reindex
 13147  0128C0  0009               	tblrd		*+
 13148  0128C2  CFF5 F0B6          	movff	tablat,HMI_SetButton@reindex+1
 13149  0128C6  0009               	tblrd		*+
 13150  0128C8  CFF5 F0B7          	movff	tablat,HMI_SetButton@reindex+2
 13151  0128CC  000A               	tblrd		*-
 13152  0128CE  CFF5 F0B8          	movff	tablat,HMI_SetButton@reindex+3
 13153                           
 13154                           ;HMI.c: 189: UINT8 v = 0b00010001;
 13155  0128D2  0E11               	movlw	17
 13156  0128D4  0100               	movlb	0	; () banked
 13157  0128D6  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;HMI.c: 190: pValue &= 3;
 13161  0128D8  0E03               	movlw	3
 13162  0128DA  17B9               	andwf	HMI_SetButton@pValue& (0+255),f,b
 13163                           
 13164                           ; BSR set to: 0
 13165                           ;HMI.c: 191: v = v << reindex[pValue];
 13166  0128DC  51B9               	movf	HMI_SetButton@pValue& (0+255),w,b
 13167  0128DE  0D01               	mullw	1
 13168  0128E0  0EB5               	movlw	low HMI_SetButton@reindex
 13169  0128E2  24F3               	addwf	prodl,w,c
 13170  0128E4  6ED9               	movwf	fsr2l,c
 13171  0128E6  0E00               	movlw	high HMI_SetButton@reindex
 13172  0128E8  20F4               	addwfc	prodh,w,c
 13173  0128EA  6EDA               	movwf	fsr2h,c
 13174  0128EC  50DF               	movf	indf2,w,c
 13175  0128EE  6FB3               	movwf	??_HMI_SetButton& (0+255),b
 13176  0128F0  C0BA  F0B4         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 13177  0128F4  2BB3               	incf	??_HMI_SetButton& (0+255),f,b
 13178  0128F6  D002               	goto	u8464
 13179  0128F8                     u8465:
 13180  0128F8  90D8               	bcf	status,0,c
 13181  0128FA  37B4               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 13182  0128FC                     u8464:
 13183  0128FC  2FB3               	decfsz	??_HMI_SetButton& (0+255),f,b
 13184  0128FE  D7FC               	goto	u8465
 13185  012900  0100               	movlb	0	; () banked
 13186  012902  51B4               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 13187  012904  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13188                           
 13189                           ; BSR set to: 0
 13190                           ;HMI.c: 192: v = v >> 4;
 13191  012906  39BA               	swapf	HMI_SetButton@v& (0+255),w,b
 13192  012908  0B0F               	andlw	15
 13193  01290A  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;HMI.c: 193: v = v & 0x0F;
 13197  01290C  51BA               	movf	HMI_SetButton@v& (0+255),w,b
 13198  01290E  0B0F               	andlw	15
 13199  012910  6FBA               	movwf	HMI_SetButton@v& (0+255),b
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;HMI.c: 194: HMIBoard.pButton = v;
 13203  012912  0101               	movlb	1	; () banked
 13204  012914  5132               	movf	(_HMIBoard+6)& (0+255),w,b
 13205  012916  0100               	movlb	0	; () banked
 13206  012918  19BA               	xorwf	HMI_SetButton@v& (0+255),w,b
 13207  01291A  0BF0               	andlw	-16
 13208  01291C  19BA               	xorwf	HMI_SetButton@v& (0+255),w,b
 13209  01291E  0101               	movlb	1	; () banked
 13210  012920  6F32               	movwf	(_HMIBoard+6)& (0+255),b
 13211                           
 13212                           ; BSR set to: 1
 13213  012922  0012               	return		;funcret
 13214  012924                     __end_of_HMI_SetButton:
 13215                           	opt stack 0
 13216                           tosu	equ	0xFFF
 13217                           tosh	equ	0xFFE
 13218                           tosl	equ	0xFFD
 13219                           pclath	equ	0xFFA
 13220                           tblptru	equ	0xFF8
 13221                           tblptrh	equ	0xFF7
 13222                           tblptrl	equ	0xFF6
 13223                           tablat	equ	0xFF5
 13224                           prodh	equ	0xFF4
 13225                           prodl	equ	0xFF3
 13226                           intcon	equ	0xFF2
 13227                           postinc0	equ	0xFEE
 13228                           wreg	equ	0xFE8
 13229                           indf1	equ	0xFE7
 13230                           postdec1	equ	0xFE5
 13231                           fsr1h	equ	0xFE2
 13232                           fsr1l	equ	0xFE1
 13233                           indf2	equ	0xFDF
 13234                           postinc2	equ	0xFDE
 13235                           postdec2	equ	0xFDD
 13236                           plusw2	equ	0xFDB
 13237                           fsr2h	equ	0xFDA
 13238                           fsr2l	equ	0xFD9
 13239                           status	equ	0xFD8
 13240                           
 13241 ;; *************** function _LED_Toggle *****************
 13242 ;; Defined at:
 13243 ;;		line 50 in file "Library/LED.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  pLED            1    wreg     enum E6739
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;  pLED            1   24[BANK0 ] enum E6739
 13248 ;; Return value:  Size  Location     Type
 13249 ;;                  1    wreg      void 
 13250 ;; Registers used:
 13251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13252 ;; Tracked objects:
 13253 ;;		On entry : 0/0
 13254 ;;		On exit  : 0/0
 13255 ;;		Unchanged: 0/0
 13256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13260 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13261 ;;Total ram usage:        1 bytes
 13262 ;; Hardware stack levels used:    1
 13263 ;; Hardware stack levels required when called:   12
 13264 ;; This function calls:
 13265 ;;		_Port_TogglePin
 13266 ;; This function is called by:
 13267 ;;		_LCD_Reset
 13268 ;;		_Event_DIPSwitch
 13269 ;;		_Event_TestButton
 13270 ;;		_Event_ADCSequenceComplete
 13271 ;;		_Event_HMI_DIPSwitch
 13272 ;;		_Event_HMI_LeftButton
 13273 ;;		_Event_HMI_RightButton
 13274 ;;		_Event_HMI_UpButton
 13275 ;;		_Event_HMI_DownButton
 13276 ;; This function uses a non-reentrant model
 13277 ;;
 13278                           
 13279                           	psect	text73
 13280  0133BA                     __ptext73:
 13281                           	opt stack 0
 13282  0133BA                     _LED_Toggle:
 13283                           	opt stack 15
 13284                           
 13285                           ; BSR set to: 1
 13286                           ;incstack = 0
 13287                           ;LED_Toggle@pLED stored from wreg
 13288  0133BA  0100               	movlb	0	; () banked
 13289  0133BC  6FCB               	movwf	LED_Toggle@pLED& (0+255),b
 13290                           
 13291                           ;LED.c: 52: switch (pLED)
 13292  0133BE  D014               	goto	l234
 13293  0133C0                     
 13294                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 13295  0133C0  0EA5               	movlw	low _PortC
 13296  0133C2  0100               	movlb	0	; () banked
 13297  0133C4  6FC7               	movwf	Port_TogglePin@pInput& (0+255),b
 13298  0133C6  0E00               	movlw	high _PortC
 13299  0133C8  6FC8               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13300  0133CA  0E00               	movlw	0
 13301  0133CC  6FC9               	movwf	Port_TogglePin@pPin& (0+255),b
 13302  0133CE  EC62  F09B         	call	_Port_TogglePin	;wreg free
 13303                           
 13304                           ;LED.c: 56: break;
 13305  0133D2  0012               	return	
 13306  0133D4                     
 13307                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 13308  0133D4  0EA5               	movlw	low _PortC
 13309  0133D6  0100               	movlb	0	; () banked
 13310  0133D8  6FC7               	movwf	Port_TogglePin@pInput& (0+255),b
 13311  0133DA  0E00               	movlw	high _PortC
 13312  0133DC  6FC8               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 13313  0133DE  0E01               	movlw	1
 13314  0133E0  6FC9               	movwf	Port_TogglePin@pPin& (0+255),b
 13315  0133E2  EC62  F09B         	call	_Port_TogglePin	;wreg free
 13316                           
 13317                           ;LED.c: 60: }
 13318                           
 13319                           ;LED.c: 59: break;
 13320  0133E6  0012               	return	
 13321  0133E8                     l234:
 13322  0133E8  0100               	movlb	0	; () banked
 13323  0133EA  51CB               	movf	LED_Toggle@pLED& (0+255),w,b
 13324                           
 13325                           ; Switch size 1, requested type "space"
 13326                           ; Number of cases is 2, Range of values is 0 to 1
 13327                           ; switch strategies available:
 13328                           ; Name         Instructions Cycles
 13329                           ; simple_byte            7     4 (average)
 13330                           ;	Chosen strategy is simple_byte
 13331  0133EC  0A00               	xorlw	0	; case 0
 13332  0133EE  B4D8               	btfsc	status,2,c
 13333  0133F0  D7E7               	goto	l235
 13334  0133F2  0A01               	xorlw	1	; case 1
 13335  0133F4  A4D8               	btfss	status,2,c
 13336  0133F6  0012               	return	
 13337  0133F8  D7ED               	goto	l237
 13338  0133FA                     __end_of_LED_Toggle:
 13339                           	opt stack 0
 13340                           tosu	equ	0xFFF
 13341                           tosh	equ	0xFFE
 13342                           tosl	equ	0xFFD
 13343                           pclath	equ	0xFFA
 13344                           tblptru	equ	0xFF8
 13345                           tblptrh	equ	0xFF7
 13346                           tblptrl	equ	0xFF6
 13347                           tablat	equ	0xFF5
 13348                           prodh	equ	0xFF4
 13349                           prodl	equ	0xFF3
 13350                           intcon	equ	0xFF2
 13351                           postinc0	equ	0xFEE
 13352                           wreg	equ	0xFE8
 13353                           indf1	equ	0xFE7
 13354                           postdec1	equ	0xFE5
 13355                           fsr1h	equ	0xFE2
 13356                           fsr1l	equ	0xFE1
 13357                           indf2	equ	0xFDF
 13358                           postinc2	equ	0xFDE
 13359                           postdec2	equ	0xFDD
 13360                           plusw2	equ	0xFDB
 13361                           fsr2h	equ	0xFDA
 13362                           fsr2l	equ	0xFD9
 13363                           status	equ	0xFD8
 13364                           
 13365 ;; *************** function _Port_TogglePin *****************
 13366 ;; Defined at:
 13367 ;;		line 278 in file "Library/Port.c"
 13368 ;; Parameters:    Size  Location     Type
 13369 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 13370 ;;		 -> PortC(10), 
 13371 ;;  pPin            1   22[BANK0 ] enum E6750
 13372 ;; Auto vars:     Size  Location     Type
 13373 ;;  Value           1   23[BANK0 ] unsigned char 
 13374 ;; Return value:  Size  Location     Type
 13375 ;;                  1    wreg      void 
 13376 ;; Registers used:
 13377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13378 ;; Tracked objects:
 13379 ;;		On entry : 0/0
 13380 ;;		On exit  : 0/0
 13381 ;;		Unchanged: 0/0
 13382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13383 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13386 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;Total ram usage:        4 bytes
 13388 ;; Hardware stack levels used:    1
 13389 ;; Hardware stack levels required when called:   11
 13390 ;; This function calls:
 13391 ;;		_Port_GetPin
 13392 ;;		_Port_SetPin
 13393 ;; This function is called by:
 13394 ;;		_LED_Toggle
 13395 ;; This function uses a non-reentrant model
 13396 ;;
 13397                           
 13398                           	psect	text74
 13399  0136C4                     __ptext74:
 13400                           	opt stack 0
 13401  0136C4                     _Port_TogglePin:
 13402                           	opt stack 15
 13403                           
 13404                           ;Port.c: 280: UINT8 Value;
 13405                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 13406                           
 13407                           ;incstack = 0
 13408  0136C4  C0C7  F0B3         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 13409  0136C8  C0C8  F0B4         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 13410  0136CC  C0C9  F0B5         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 13411  0136D0  EC59  F09A         	call	_Port_GetPin	;wreg free
 13412  0136D4  0100               	movlb	0	; () banked
 13413  0136D6  6FCA               	movwf	Port_TogglePin@Value& (0+255),b
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;Port.c: 282: Value ^= 0x01;
 13417  0136D8  0E01               	movlw	1
 13418  0136DA  1BCA               	xorwf	Port_TogglePin@Value& (0+255),f,b
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 13422  0136DC  C0C7  F0C2         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 13423  0136E0  C0C8  F0C3         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 13424  0136E4  C0C9  F0C4         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 13425  0136E8  C0CA  F0C5         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 13426  0136EC  EC61  F08F         	call	_Port_SetPin	;wreg free
 13427  0136F0  0012               	return		;funcret
 13428  0136F2                     __end_of_Port_TogglePin:
 13429                           	opt stack 0
 13430                           tosu	equ	0xFFF
 13431                           tosh	equ	0xFFE
 13432                           tosl	equ	0xFFD
 13433                           pclath	equ	0xFFA
 13434                           tblptru	equ	0xFF8
 13435                           tblptrh	equ	0xFF7
 13436                           tblptrl	equ	0xFF6
 13437                           tablat	equ	0xFF5
 13438                           prodh	equ	0xFF4
 13439                           prodl	equ	0xFF3
 13440                           intcon	equ	0xFF2
 13441                           postinc0	equ	0xFEE
 13442                           wreg	equ	0xFE8
 13443                           indf1	equ	0xFE7
 13444                           postdec1	equ	0xFE5
 13445                           fsr1h	equ	0xFE2
 13446                           fsr1l	equ	0xFE1
 13447                           indf2	equ	0xFDF
 13448                           postinc2	equ	0xFDE
 13449                           postdec2	equ	0xFDD
 13450                           plusw2	equ	0xFDB
 13451                           fsr2h	equ	0xFDA
 13452                           fsr2l	equ	0xFD9
 13453                           status	equ	0xFD8
 13454                           
 13455 ;; *************** function _Port_SetPin *****************
 13456 ;; Defined at:
 13457 ;;		line 247 in file "Library/Port.c"
 13458 ;; Parameters:    Size  Location     Type
 13459 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13460 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 13461 ;;  pPin            1   17[BANK0 ] enum E6750
 13462 ;;  pValue          1   18[BANK0 ] unsigned char 
 13463 ;; Auto vars:     Size  Location     Type
 13464 ;;  Type            1   19[BANK0 ] enum E6795
 13465 ;; Return value:  Size  Location     Type
 13466 ;;                  1    wreg      void 
 13467 ;; Registers used:
 13468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13469 ;; Tracked objects:
 13470 ;;		On entry : 0/0
 13471 ;;		On exit  : 0/0
 13472 ;;		Unchanged: 0/0
 13473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13474 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13477 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13478 ;;Total ram usage:        5 bytes
 13479 ;; Hardware stack levels used:    1
 13480 ;; Hardware stack levels required when called:   10
 13481 ;; This function calls:
 13482 ;;		_Byte_SetBit
 13483 ;;		_Word_GetPair
 13484 ;; This function is called by:
 13485 ;;		_Reset_Low
 13486 ;;		_Reset_High
 13487 ;;		_LED_Set
 13488 ;;		_Port_TogglePin
 13489 ;;		_Motor_Step
 13490 ;;		_MXK_Init
 13491 ;;		_Motor_Init
 13492 ;; This function uses a non-reentrant model
 13493 ;;
 13494                           
 13495                           	psect	text75
 13496  011EC2                     __ptext75:
 13497                           	opt stack 0
 13498  011EC2                     _Port_SetPin:
 13499                           	opt stack 19
 13500                           
 13501                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 13502                           
 13503                           ;incstack = 0
 13504  011EC2  0E08               	movlw	8
 13505  011EC4  0100               	movlb	0	; () banked
 13506  011EC6  25C2               	addwf	Port_SetPin@pInput& (0+255),w,b
 13507  011EC8  6FBF               	movwf	Word_GetPair@pInput& (0+255),b
 13508  011ECA  0E00               	movlw	0
 13509  011ECC  21C3               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 13510  011ECE  6FC0               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13511  011ED0  C0C4  F0C1         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 13512  011ED4  EC19  F09B         	call	_Word_GetPair	;wreg free
 13513  011ED8  0100               	movlb	0	; () banked
 13514  011EDA  6FC6               	movwf	Port_SetPin@Type& (0+255),b
 13515                           
 13516                           ;Port.c: 250: switch (Type)
 13517  011EDC  D03D               	goto	l427
 13518  011EDE                     
 13519                           ; BSR set to: 0
 13520                           ;Port.c: 256: pValue &= 1;
 13521                           
 13522                           ; BSR set to: 0
 13523  011EDE  0E01               	movlw	1
 13524  011EE0  17C5               	andwf	Port_SetPin@pValue& (0+255),f,b
 13525                           
 13526                           ; BSR set to: 0
 13527                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 13528  011EE2  EE20 F002          	lfsr	2,2
 13529  011EE6  51C2               	movf	Port_SetPin@pInput& (0+255),w,b
 13530  011EE8  26D9               	addwf	fsr2l,f,c
 13531  011EEA  51C3               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13532  011EEC  22DA               	addwfc	fsr2h,f,c
 13533  011EEE  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 13534  011EF2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 13535  011EF6  C0C4  F0B5         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13536  011EFA  C0C5  F0B6         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13537  011EFE  EC47  F098         	call	_Byte_SetBit	;wreg free
 13538                           
 13539                           ;Port.c: 258: break;
 13540  011F02  0012               	return	
 13541  011F04                     
 13542                           ;Port.c: 261: pValue &= 1;
 13543  011F04  0E01               	movlw	1
 13544  011F06  0100               	movlb	0	; () banked
 13545  011F08  17C5               	andwf	Port_SetPin@pValue& (0+255),f,b
 13546                           
 13547                           ;Port.c: 262: pValue ^= 1;
 13548  011F0A  0E01               	movlw	1
 13549  011F0C  1BC5               	xorwf	Port_SetPin@pValue& (0+255),f,b
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 13553  011F0E  EE20 F002          	lfsr	2,2
 13554  011F12  51C2               	movf	Port_SetPin@pInput& (0+255),w,b
 13555  011F14  26D9               	addwf	fsr2l,f,c
 13556  011F16  51C3               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13557  011F18  22DA               	addwfc	fsr2h,f,c
 13558  011F1A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 13559  011F1E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 13560  011F22  C0C4  F0B5         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13561  011F26  C0C5  F0B6         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13562  011F2A  EC47  F098         	call	_Byte_SetBit	;wreg free
 13563                           
 13564                           ;Port.c: 264: break;
 13565  011F2E  0012               	return	
 13566  011F30                     
 13567                           ;Port.c: 266: pValue &= 1;
 13568  011F30  0E01               	movlw	1
 13569  011F32  0100               	movlb	0	; () banked
 13570  011F34  17C5               	andwf	Port_SetPin@pValue& (0+255),f,b
 13571                           
 13572                           ; BSR set to: 0
 13573                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 13574  011F36  EE20 F004          	lfsr	2,4
 13575  011F3A  51C2               	movf	Port_SetPin@pInput& (0+255),w,b
 13576  011F3C  26D9               	addwf	fsr2l,f,c
 13577  011F3E  51C3               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 13578  011F40  22DA               	addwfc	fsr2h,f,c
 13579  011F42  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 13580  011F46  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 13581  011F4A  C0C4  F0B5         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 13582  011F4E  C0C5  F0B6         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 13583  011F52  EC47  F098         	call	_Byte_SetBit	;wreg free
 13584                           
 13585                           ;Port.c: 269: }
 13586                           
 13587                           ;Port.c: 268: break;
 13588  011F56  0012               	return	
 13589  011F58                     l427:
 13590  011F58  0100               	movlb	0	; () banked
 13591  011F5A  51C6               	movf	Port_SetPin@Type& (0+255),w,b
 13592                           
 13593                           ; Switch size 1, requested type "space"
 13594                           ; Number of cases is 4, Range of values is 0 to 3
 13595                           ; switch strategies available:
 13596                           ; Name         Instructions Cycles
 13597                           ; simple_byte           13     7 (average)
 13598                           ;	Chosen strategy is simple_byte
 13599  011F5C  0A00               	xorlw	0	; case 0
 13600  011F5E  B4D8               	btfsc	status,2,c
 13601  011F60  0012               	return	
 13602  011F62  0A01               	xorlw	1	; case 1
 13603  011F64  B4D8               	btfsc	status,2,c
 13604  011F66  D7BB               	goto	l430
 13605  011F68  0A03               	xorlw	3	; case 2
 13606  011F6A  B4D8               	btfsc	status,2,c
 13607  011F6C  D7CB               	goto	l432
 13608  011F6E  0A01               	xorlw	1	; case 3
 13609  011F70  A4D8               	btfss	status,2,c
 13610  011F72  0012               	return	
 13611  011F74  D7DD               	goto	l433
 13612  011F76                     __end_of_Port_SetPin:
 13613                           	opt stack 0
 13614                           tosu	equ	0xFFF
 13615                           tosh	equ	0xFFE
 13616                           tosl	equ	0xFFD
 13617                           pclath	equ	0xFFA
 13618                           tblptru	equ	0xFF8
 13619                           tblptrh	equ	0xFF7
 13620                           tblptrl	equ	0xFF6
 13621                           tablat	equ	0xFF5
 13622                           prodh	equ	0xFF4
 13623                           prodl	equ	0xFF3
 13624                           intcon	equ	0xFF2
 13625                           postinc0	equ	0xFEE
 13626                           wreg	equ	0xFE8
 13627                           indf1	equ	0xFE7
 13628                           postdec1	equ	0xFE5
 13629                           fsr1h	equ	0xFE2
 13630                           fsr1l	equ	0xFE1
 13631                           indf2	equ	0xFDF
 13632                           postinc2	equ	0xFDE
 13633                           postdec2	equ	0xFDD
 13634                           plusw2	equ	0xFDB
 13635                           fsr2h	equ	0xFDA
 13636                           fsr2l	equ	0xFD9
 13637                           status	equ	0xFD8
 13638                           
 13639 ;; *************** function _Port_GetPin *****************
 13640 ;; Defined at:
 13641 ;;		line 271 in file "Library/Port.c"
 13642 ;; Parameters:    Size  Location     Type
 13643 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13644 ;;		 -> PortB(10), PortE(10), PortC(10), 
 13645 ;;  pPin            1    2[BANK0 ] enum E6750
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;  Output          1    5[BANK0 ] unsigned char 
 13648 ;; Return value:  Size  Location     Type
 13649 ;;                  1    wreg      unsigned char 
 13650 ;; Registers used:
 13651 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13652 ;; Tracked objects:
 13653 ;;		On entry : 0/0
 13654 ;;		On exit  : 0/0
 13655 ;;		Unchanged: 0/0
 13656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13657 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;Total ram usage:        6 bytes
 13662 ;; Hardware stack levels used:    1
 13663 ;; Hardware stack levels required when called:    7
 13664 ;; This function calls:
 13665 ;;		Nothing
 13666 ;; This function is called by:
 13667 ;;		_Port_TogglePin
 13668 ;;		_HMI_LeftSwitch
 13669 ;;		_HMI_RightSwitch
 13670 ;;		_HMI_UpSwitch
 13671 ;;		_HMI_DownSwitch
 13672 ;;		_MXK_TestButton
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           	psect	text76
 13677  0134B2                     __ptext76:
 13678                           	opt stack 0
 13679  0134B2                     _Port_GetPin:
 13680                           	opt stack 22
 13681                           
 13682                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 13683                           
 13684                           ;incstack = 0
 13685  0134B2  0100               	movlb	0	; () banked
 13686  0134B4  EE20 F006          	lfsr	2,6
 13687  0134B8  51B3               	movf	Port_GetPin@pInput& (0+255),w,b
 13688  0134BA  26D9               	addwf	fsr2l,f,c
 13689  0134BC  51B4               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 13690  0134BE  22DA               	addwfc	fsr2h,f,c
 13691  0134C0  CFDE F0B6          	movff	postinc2,??_Port_GetPin
 13692  0134C4  CFDD F0B7          	movff	postdec2,??_Port_GetPin+1
 13693  0134C8  C0B6  FFD9         	movff	??_Port_GetPin,fsr2l
 13694  0134CC  C0B7  FFDA         	movff	??_Port_GetPin+1,fsr2h
 13695  0134D0  50DF               	movf	indf2,w,c
 13696  0134D2  6FB8               	movwf	Port_GetPin@Output& (0+255),b
 13697                           
 13698                           ; BSR set to: 0
 13699                           ;Port.c: 274: Output >>= (UINT8)pPin;
 13700  0134D4  29B5               	incf	Port_GetPin@pPin& (0+255),w,b
 13701  0134D6  6FB6               	movwf	??_Port_GetPin& (0+255),b
 13702  0134D8  D002               	goto	u7880
 13703  0134DA                     u7885:
 13704  0134DA  90D8               	bcf	status,0,c
 13705  0134DC  33B8               	rrcf	Port_GetPin@Output& (0+255),f,b
 13706  0134DE                     u7880:
 13707  0134DE  2FB6               	decfsz	??_Port_GetPin& (0+255),f,b
 13708  0134E0  D7FC               	goto	u7885
 13709                           
 13710                           ;Port.c: 275: Output &= 1;
 13711  0134E2  0E01               	movlw	1
 13712  0134E4  0100               	movlb	0	; () banked
 13713  0134E6  17B8               	andwf	Port_GetPin@Output& (0+255),f,b
 13714                           
 13715                           ; BSR set to: 0
 13716                           ;Port.c: 276: return Output;
 13717  0134E8  51B8               	movf	Port_GetPin@Output& (0+255),w,b
 13718  0134EA  0012               	return	
 13719  0134EC                     __end_of_Port_GetPin:
 13720                           	opt stack 0
 13721                           tosu	equ	0xFFF
 13722                           tosh	equ	0xFFE
 13723                           tosl	equ	0xFFD
 13724                           pclath	equ	0xFFA
 13725                           tblptru	equ	0xFF8
 13726                           tblptrh	equ	0xFF7
 13727                           tblptrl	equ	0xFF6
 13728                           tablat	equ	0xFF5
 13729                           prodh	equ	0xFF4
 13730                           prodl	equ	0xFF3
 13731                           intcon	equ	0xFF2
 13732                           postinc0	equ	0xFEE
 13733                           wreg	equ	0xFE8
 13734                           indf1	equ	0xFE7
 13735                           postdec1	equ	0xFE5
 13736                           fsr1h	equ	0xFE2
 13737                           fsr1l	equ	0xFE1
 13738                           indf2	equ	0xFDF
 13739                           postinc2	equ	0xFDE
 13740                           postdec2	equ	0xFDD
 13741                           plusw2	equ	0xFDB
 13742                           fsr2h	equ	0xFDA
 13743                           fsr2l	equ	0xFD9
 13744                           status	equ	0xFD8
 13745                           
 13746 ;; *************** function _HMI_SetBar *****************
 13747 ;; Defined at:
 13748 ;;		line 205 in file "HMI.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;  pValue          1    wreg     unsigned char 
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;  pValue          1    0[BANK0 ] unsigned char 
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      void 
 13755 ;; Registers used:
 13756 ;;		wreg
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13766 ;;Total ram usage:        1 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    7
 13769 ;; This function calls:
 13770 ;;		Nothing
 13771 ;; This function is called by:
 13772 ;;		_Event_DIPSwitch
 13773 ;;		_Event_HMI_DIPSwitch
 13774 ;;		_Event_HMI_LeftButton
 13775 ;;		_Event_HMI_RightButton
 13776 ;; This function uses a non-reentrant model
 13777 ;;
 13778                           
 13779                           	psect	text77
 13780  013B10                     __ptext77:
 13781                           	opt stack 0
 13782  013B10                     _HMI_SetBar:
 13783                           	opt stack 20
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;incstack = 0
 13787                           ;HMI_SetBar@pValue stored from wreg
 13788  013B10  0100               	movlb	0	; () banked
 13789  013B12  6FB3               	movwf	HMI_SetBar@pValue& (0+255),b
 13790                           
 13791                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 13792  013B14  C0B3  F133         	movff	HMI_SetBar@pValue,_HMIBoard+7
 13793  013B18  0012               	return		;funcret
 13794  013B1A                     __end_of_HMI_SetBar:
 13795                           	opt stack 0
 13796                           tosu	equ	0xFFF
 13797                           tosh	equ	0xFFE
 13798                           tosl	equ	0xFFD
 13799                           pclath	equ	0xFFA
 13800                           tblptru	equ	0xFF8
 13801                           tblptrh	equ	0xFF7
 13802                           tblptrl	equ	0xFF6
 13803                           tablat	equ	0xFF5
 13804                           prodh	equ	0xFF4
 13805                           prodl	equ	0xFF3
 13806                           intcon	equ	0xFF2
 13807                           postinc0	equ	0xFEE
 13808                           wreg	equ	0xFE8
 13809                           indf1	equ	0xFE7
 13810                           postdec1	equ	0xFE5
 13811                           fsr1h	equ	0xFE2
 13812                           fsr1l	equ	0xFE1
 13813                           indf2	equ	0xFDF
 13814                           postinc2	equ	0xFDE
 13815                           postdec2	equ	0xFDD
 13816                           plusw2	equ	0xFDB
 13817                           fsr2h	equ	0xFDA
 13818                           fsr2l	equ	0xFD9
 13819                           status	equ	0xFD8
 13820                           
 13821 ;; *************** function _HMI_GetBar *****************
 13822 ;; Defined at:
 13823 ;;		line 209 in file "HMI.c"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;		None
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;		None
 13828 ;; Return value:  Size  Location     Type
 13829 ;;                  1    wreg      unsigned char 
 13830 ;; Registers used:
 13831 ;;		wreg, status,2
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13841 ;;Total ram usage:        0 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:    7
 13844 ;; This function calls:
 13845 ;;		Nothing
 13846 ;; This function is called by:
 13847 ;;		_Event_DIPSwitch
 13848 ;;		_Event_HMI_DIPSwitch
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           	psect	text78
 13853  013B30                     __ptext78:
 13854                           	opt stack 0
 13855  013B30                     _HMI_GetBar:
 13856                           	opt stack 20
 13857                           
 13858                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 13859                           
 13860                           ;incstack = 0
 13861  013B30  0101               	movlb	1	; () banked
 13862  013B32  5133               	movf	(_HMIBoard+7)& (0+255),w,b
 13863  013B34  0012               	return	
 13864  013B36                     __end_of_HMI_GetBar:
 13865                           	opt stack 0
 13866                           tosu	equ	0xFFF
 13867                           tosh	equ	0xFFE
 13868                           tosl	equ	0xFFD
 13869                           pclath	equ	0xFFA
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           postinc0	equ	0xFEE
 13878                           wreg	equ	0xFE8
 13879                           indf1	equ	0xFE7
 13880                           postdec1	equ	0xFE5
 13881                           fsr1h	equ	0xFE2
 13882                           fsr1l	equ	0xFE1
 13883                           indf2	equ	0xFDF
 13884                           postinc2	equ	0xFDE
 13885                           postdec2	equ	0xFDD
 13886                           plusw2	equ	0xFDB
 13887                           fsr2h	equ	0xFDA
 13888                           fsr2l	equ	0xFD9
 13889                           status	equ	0xFD8
 13890                           
 13891 ;; *************** function _HMI_Init *****************
 13892 ;; Defined at:
 13893 ;;		line 104 in file "HMI.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;		None
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  in              2   59[BANK0 ] unsigned short 
 13898 ;; Return value:  Size  Location     Type
 13899 ;;                  1    wreg      void 
 13900 ;; Registers used:
 13901 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13902 ;; Tracked objects:
 13903 ;;		On entry : 0/0
 13904 ;;		On exit  : 0/0
 13905 ;;		Unchanged: 0/0
 13906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13910 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13911 ;;Total ram usage:        2 bytes
 13912 ;; Hardware stack levels used:    1
 13913 ;; Hardware stack levels required when called:   16
 13914 ;; This function calls:
 13915 ;;		_Button_Init
 13916 ;;		_SPI_Init
 13917 ;;		_SPI_MinSpeed
 13918 ;; This function is called by:
 13919 ;;		_main
 13920 ;; This function uses a non-reentrant model
 13921 ;;
 13922                           
 13923                           	psect	text79
 13924  01118C                     __ptext79:
 13925                           	opt stack 0
 13926  01118C                     _HMI_Init:
 13927                           	opt stack 14
 13928                           
 13929                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 13930                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 13931                           
 13932                           ; BSR set to: 1
 13933                           ;incstack = 0
 13934  01118C  0E5C               	movlw	low (_HMIBoard+48)
 13935  01118E  0101               	movlb	1	; () banked
 13936  011190  6FD7               	movwf	Button_Init@pInput& (0+255),b
 13937  011192  0E01               	movlw	high (_HMIBoard+48)
 13938  011194  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 13939  011196  0E00               	movlw	0
 13940  011198  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13941  01119A  0E02               	movlw	2
 13942  01119C  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 13943  01119E  0E36               	movlw	low _HMI_InitButtons
 13944  0111A0  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 13945  0111A2  0E3B               	movlw	high _HMI_InitButtons
 13946  0111A4  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13947  0111A6  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13948  0111A8  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13949  0111AA  0EF6               	movlw	low _HMI_DIPSwitch
 13950  0111AC  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 13951  0111AE  0E39               	movlw	high _HMI_DIPSwitch
 13952  0111B0  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13953  0111B2  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 13954  0111B4  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13955  0111B6  0E04               	movlw	low _Event_NULL
 13956  0111B8  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 13957  0111BA  0E14               	movlw	high _Event_NULL
 13958  0111BC  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13959  0111BE  0E00               	movlw	low (_Event_NULL shr (0+16))
 13960  0111C0  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13961  0111C2  ECBB  F08F         	call	_Button_Init	;wreg free
 13962                           
 13963                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 13964                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 13965  0111C6  0E3E               	movlw	low (_HMIBoard+18)
 13966  0111C8  0101               	movlb	1	; () banked
 13967  0111CA  6FD7               	movwf	Button_Init@pInput& (0+255),b
 13968  0111CC  0E01               	movlw	high (_HMIBoard+18)
 13969  0111CE  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 13970  0111D0  0E00               	movlw	0
 13971  0111D2  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13972  0111D4  0E02               	movlw	2
 13973  0111D6  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 13974  0111D8  0E36               	movlw	low _HMI_InitButtons
 13975  0111DA  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 13976  0111DC  0E3B               	movlw	high _HMI_InitButtons
 13977  0111DE  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13978  0111E0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13979  0111E2  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13980  0111E4  0E46               	movlw	low _HMI_LeftSwitch
 13981  0111E6  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 13982  0111E8  0E3A               	movlw	high _HMI_LeftSwitch
 13983  0111EA  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13984  0111EC  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 13985  0111EE  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13986  0111F0  0E04               	movlw	low _Event_NULL
 13987  0111F2  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 13988  0111F4  0E14               	movlw	high _Event_NULL
 13989  0111F6  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13990  0111F8  0E00               	movlw	low (_Event_NULL shr (0+16))
 13991  0111FA  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13992  0111FC  ECBB  F08F         	call	_Button_Init	;wreg free
 13993                           
 13994                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 13995                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 13996  011200  0E34               	movlw	low (_HMIBoard+8)
 13997  011202  0101               	movlb	1	; () banked
 13998  011204  6FD7               	movwf	Button_Init@pInput& (0+255),b
 13999  011206  0E01               	movlw	high (_HMIBoard+8)
 14000  011208  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 14001  01120A  0E00               	movlw	0
 14002  01120C  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14003  01120E  0E02               	movlw	2
 14004  011210  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 14005  011212  0E36               	movlw	low _HMI_InitButtons
 14006  011214  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 14007  011216  0E3B               	movlw	high _HMI_InitButtons
 14008  011218  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14009  01121A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14010  01121C  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14011  01121E  0E32               	movlw	low _HMI_RightSwitch
 14012  011220  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 14013  011222  0E3A               	movlw	high _HMI_RightSwitch
 14014  011224  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14015  011226  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 14016  011228  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14017  01122A  0E04               	movlw	low _Event_NULL
 14018  01122C  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 14019  01122E  0E14               	movlw	high _Event_NULL
 14020  011230  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14021  011232  0E00               	movlw	low (_Event_NULL shr (0+16))
 14022  011234  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14023  011236  ECBB  F08F         	call	_Button_Init	;wreg free
 14024                           
 14025                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 14026                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 14027  01123A  0E48               	movlw	low (_HMIBoard+28)
 14028  01123C  0101               	movlb	1	; () banked
 14029  01123E  6FD7               	movwf	Button_Init@pInput& (0+255),b
 14030  011240  0E01               	movlw	high (_HMIBoard+28)
 14031  011242  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 14032  011244  0E00               	movlw	0
 14033  011246  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14034  011248  0E02               	movlw	2
 14035  01124A  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 14036  01124C  0E36               	movlw	low _HMI_InitButtons
 14037  01124E  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 14038  011250  0E3B               	movlw	high _HMI_InitButtons
 14039  011252  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14040  011254  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14041  011256  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14042  011258  0E1E               	movlw	low _HMI_UpSwitch
 14043  01125A  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 14044  01125C  0E3A               	movlw	high _HMI_UpSwitch
 14045  01125E  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14046  011260  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 14047  011262  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14048  011264  0E04               	movlw	low _Event_NULL
 14049  011266  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 14050  011268  0E14               	movlw	high _Event_NULL
 14051  01126A  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14052  01126C  0E00               	movlw	low (_Event_NULL shr (0+16))
 14053  01126E  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14054  011270  ECBB  F08F         	call	_Button_Init	;wreg free
 14055                           
 14056                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 14057                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 14058  011274  0E52               	movlw	low (_HMIBoard+38)
 14059  011276  0101               	movlb	1	; () banked
 14060  011278  6FD7               	movwf	Button_Init@pInput& (0+255),b
 14061  01127A  0E01               	movlw	high (_HMIBoard+38)
 14062  01127C  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 14063  01127E  0E00               	movlw	0
 14064  011280  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14065  011282  0E02               	movlw	2
 14066  011284  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 14067  011286  0E36               	movlw	low _HMI_InitButtons
 14068  011288  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 14069  01128A  0E3B               	movlw	high _HMI_InitButtons
 14070  01128C  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14071  01128E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 14072  011290  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14073  011292  0E0A               	movlw	low _HMI_DownSwitch
 14074  011294  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 14075  011296  0E3A               	movlw	high _HMI_DownSwitch
 14076  011298  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14077  01129A  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 14078  01129C  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14079  01129E  0E04               	movlw	low _Event_NULL
 14080  0112A0  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 14081  0112A2  0E14               	movlw	high _Event_NULL
 14082  0112A4  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14083  0112A6  0E00               	movlw	low (_Event_NULL shr (0+16))
 14084  0112A8  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14085  0112AA  ECBB  F08F         	call	_Button_Init	;wreg free
 14086                           
 14087                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 14088  0112AE  0EA0               	movlw	160
 14089  0112B0  0100               	movlb	0	; () banked
 14090  0112B2  6FE0               	movwf	SPI_Init@pClock& (0+255),b
 14091  0112B4  0E86               	movlw	134
 14092  0112B6  6FE1               	movwf	(SPI_Init@pClock+1)& (0+255),b
 14093  0112B8  0E01               	movlw	1
 14094  0112BA  6FE2               	movwf	(SPI_Init@pClock+2)& (0+255),b
 14095  0112BC  0E00               	movlw	0
 14096  0112BE  6FE3               	movwf	(SPI_Init@pClock+3)& (0+255),b
 14097  0112C0  0E00               	movlw	0
 14098  0112C2  6FE4               	movwf	SPI_Init@pChannel& (0+255),b
 14099  0112C4  0E02               	movlw	2
 14100  0112C6  6FE5               	movwf	SPI_Init@pMode& (0+255),b
 14101  0112C8  EC00  F080         	call	_SPI_Init	;wreg free
 14102                           
 14103                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 14104  0112CC  0E66               	movlw	low _SPI1
 14105  0112CE  0100               	movlb	0	; () banked
 14106  0112D0  6FC2               	movwf	SPI_MinSpeed@pInput& (0+255),b
 14107  0112D2  0E01               	movlw	high _SPI1
 14108  0112D4  6FC3               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 14109  0112D6  EC50  F096         	call	_SPI_MinSpeed	;wreg free
 14110                           
 14111                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 14112  0112DA  0E00               	movlw	0
 14113  0112DC  0100               	movlb	0	; () banked
 14114  0112DE  6FEF               	movwf	(HMI_Init@in+1)& (0+255),b
 14115  0112E0  0E00               	movlw	0
 14116  0112E2  6FEE               	movwf	HMI_Init@in& (0+255),b
 14117  0112E4                     l13172:
 14118                           
 14119                           ; BSR set to: 0
 14120  0112E4  51EF               	movf	(HMI_Init@in+1)& (0+255),w,b
 14121  0112E6  E10F               	bnz	l1153
 14122  0112E8  0E08               	movlw	8
 14123  0112EA  5DEE               	subwf	HMI_Init@in& (0+255),w,b
 14124  0112EC  B0D8               	btfsc	status,0,c
 14125  0112EE  0012               	return	
 14126                           
 14127                           ; BSR set to: 0
 14128                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 14129                           
 14130                           ; BSR set to: 0
 14131                           
 14132                           ; BSR set to: 0
 14133  0112F0  0E2C               	movlw	low _HMIBoard
 14134  0112F2  25EE               	addwf	HMI_Init@in& (0+255),w,b
 14135  0112F4  6ED9               	movwf	fsr2l,c
 14136  0112F6  0E01               	movlw	high _HMIBoard
 14137  0112F8  21EF               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 14138  0112FA  6EDA               	movwf	fsr2h,c
 14139  0112FC  0E00               	movlw	0
 14140  0112FE  6EDF               	movwf	indf2,c
 14141                           
 14142                           ; BSR set to: 0
 14143  011300  4BEE               	infsnz	HMI_Init@in& (0+255),f,b
 14144  011302  2BEF               	incf	(HMI_Init@in+1)& (0+255),f,b
 14145  011304  D7EF               	goto	l13172
 14146  011306                     l1153:
 14147                           
 14148                           ; BSR set to: 0
 14149  011306  0012               	return		;funcret
 14150  011308                     __end_of_HMI_Init:
 14151                           	opt stack 0
 14152                           tosu	equ	0xFFF
 14153                           tosh	equ	0xFFE
 14154                           tosl	equ	0xFFD
 14155                           pclath	equ	0xFFA
 14156                           tblptru	equ	0xFF8
 14157                           tblptrh	equ	0xFF7
 14158                           tblptrl	equ	0xFF6
 14159                           tablat	equ	0xFF5
 14160                           prodh	equ	0xFF4
 14161                           prodl	equ	0xFF3
 14162                           intcon	equ	0xFF2
 14163                           postinc0	equ	0xFEE
 14164                           wreg	equ	0xFE8
 14165                           indf1	equ	0xFE7
 14166                           postdec1	equ	0xFE5
 14167                           fsr1h	equ	0xFE2
 14168                           fsr1l	equ	0xFE1
 14169                           indf2	equ	0xFDF
 14170                           postinc2	equ	0xFDE
 14171                           postdec2	equ	0xFDD
 14172                           plusw2	equ	0xFDB
 14173                           fsr2h	equ	0xFDA
 14174                           fsr2l	equ	0xFD9
 14175                           status	equ	0xFD8
 14176                           
 14177 ;; *************** function _SPI_MinSpeed *****************
 14178 ;; Defined at:
 14179 ;;		line 190 in file "Library/SPI.c"
 14180 ;; Parameters:    Size  Location     Type
 14181 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 14182 ;;		 -> SPI1(11), 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;		None
 14185 ;; Return value:  Size  Location     Type
 14186 ;;                  1    wreg      void 
 14187 ;; Registers used:
 14188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14194 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14198 ;;Total ram usage:        2 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; Hardware stack levels required when called:    9
 14201 ;; This function calls:
 14202 ;;		_Byte_SetBit
 14203 ;;		_Byte_SetQuad
 14204 ;; This function is called by:
 14205 ;;		_HMI_Init
 14206 ;; This function uses a non-reentrant model
 14207 ;;
 14208                           
 14209                           	psect	text80
 14210  012CA0                     __ptext80:
 14211                           	opt stack 0
 14212  012CA0                     _SPI_MinSpeed:
 14213                           	opt stack 20
 14214                           
 14215                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;incstack = 0
 14219  012CA0  0100               	movlb	0	; () banked
 14220  012CA2  EE20 F006          	lfsr	2,6
 14221  012CA6  51C2               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14222  012CA8  26D9               	addwf	fsr2l,f,c
 14223  012CAA  51C3               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14224  012CAC  22DA               	addwfc	fsr2h,f,c
 14225  012CAE  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14226  012CB2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14227  012CB6  0E05               	movlw	5
 14228  012CB8  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14229  012CBA  0E00               	movlw	0
 14230  012CBC  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14231  012CBE  EC47  F098         	call	_Byte_SetBit	;wreg free
 14232                           
 14233                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 14234  012CC2  0100               	movlb	0	; () banked
 14235  012CC4  EE20 F006          	lfsr	2,6
 14236  012CC8  51C2               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14237  012CCA  26D9               	addwf	fsr2l,f,c
 14238  012CCC  51C3               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14239  012CCE  22DA               	addwfc	fsr2h,f,c
 14240  012CD0  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 14241  012CD4  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 14242  012CD8  0E00               	movlw	0
 14243  012CDA  6FC0               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14244  012CDC  0E02               	movlw	2
 14245  012CDE  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 14246  012CE0  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 14247                           
 14248                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14249  012CE4  0100               	movlb	0	; () banked
 14250  012CE6  EE20 F006          	lfsr	2,6
 14251  012CEA  51C2               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 14252  012CEC  26D9               	addwf	fsr2l,f,c
 14253  012CEE  51C3               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 14254  012CF0  22DA               	addwfc	fsr2h,f,c
 14255  012CF2  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14256  012CF6  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14257  012CFA  0E05               	movlw	5
 14258  012CFC  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14259  012CFE  0E01               	movlw	1
 14260  012D00  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14261  012D02  EC47  F098         	call	_Byte_SetBit	;wreg free
 14262  012D06  0012               	return		;funcret
 14263  012D08                     __end_of_SPI_MinSpeed:
 14264                           	opt stack 0
 14265                           tosu	equ	0xFFF
 14266                           tosh	equ	0xFFE
 14267                           tosl	equ	0xFFD
 14268                           pclath	equ	0xFFA
 14269                           tblptru	equ	0xFF8
 14270                           tblptrh	equ	0xFF7
 14271                           tblptrl	equ	0xFF6
 14272                           tablat	equ	0xFF5
 14273                           prodh	equ	0xFF4
 14274                           prodl	equ	0xFF3
 14275                           intcon	equ	0xFF2
 14276                           postinc0	equ	0xFEE
 14277                           wreg	equ	0xFE8
 14278                           indf1	equ	0xFE7
 14279                           postdec1	equ	0xFE5
 14280                           fsr1h	equ	0xFE2
 14281                           fsr1l	equ	0xFE1
 14282                           indf2	equ	0xFDF
 14283                           postinc2	equ	0xFDE
 14284                           postdec2	equ	0xFDD
 14285                           plusw2	equ	0xFDB
 14286                           fsr2h	equ	0xFDA
 14287                           fsr2l	equ	0xFD9
 14288                           status	equ	0xFD8
 14289                           
 14290 ;; *************** function _SPI_Init *****************
 14291 ;; Defined at:
 14292 ;;		line 12 in file "Library/SPI.c"
 14293 ;; Parameters:    Size  Location     Type
 14294 ;;  pClock          4   45[BANK0 ] unsigned long 
 14295 ;;  pChannel        1   49[BANK0 ] enum E6744
 14296 ;;  pMode           1   50[BANK0 ] enum E6748
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 14299 ;;		 -> SPI1(11), SPI2(11), 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      void 
 14302 ;; Registers used:
 14303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14309 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14312 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14313 ;;Total ram usage:        8 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:   12
 14316 ;; This function calls:
 14317 ;;		_Byte_SetBit
 14318 ;;		_Byte_SetQuad
 14319 ;;		_Port_SetPinType
 14320 ;;		_SPI_DCS
 14321 ;;		_SPI_DisableISR
 14322 ;;		_Timer2_Init
 14323 ;; This function is called by:
 14324 ;;		_Configure_GPIOs
 14325 ;;		_HMI_Init
 14326 ;; This function uses a non-reentrant model
 14327 ;;
 14328                           
 14329                           	psect	text81
 14330  010000                     __ptext81:
 14331                           	opt stack 0
 14332  010000                     _SPI_Init:
 14333                           	opt stack 16
 14334                           
 14335                           ;SPI.c: 14: SPIPtr pInput;
 14336                           ;SPI.c: 16: switch (pChannel)
 14337                           
 14338                           ;incstack = 0
 14339  010000  D00A               	goto	l597
 14340  010002                     
 14341                           ;SPI.c: 19: pInput = &SPI1;
 14342  010002  0E66               	movlw	low _SPI1
 14343  010004  0100               	movlb	0	; () banked
 14344  010006  6FE6               	movwf	SPI_Init@pInput& (0+255),b
 14345  010008  0E01               	movlw	high _SPI1
 14346  01000A  D003               	goto	L7
 14347  01000C                     
 14348                           ; BSR set to: 0
 14349                           ;SPI.c: 22: pInput = &SPI2;
 14350                           
 14351                           ; BSR set to: 0
 14352  01000C  0E71               	movlw	low _SPI2
 14353  01000E  6FE6               	movwf	SPI_Init@pInput& (0+255),b
 14354  010010  0E01               	movlw	high _SPI2
 14355  010012                     L7:
 14356  010012  6FE7               	movwf	(SPI_Init@pInput+1)& (0+255),b
 14357                           
 14358                           ; BSR set to: 0
 14359                           ;SPI.c: 24: };
 14360                           
 14361                           ;SPI.c: 23: break;
 14362  010014  D008               	goto	l599
 14363  010016                     l597:
 14364                           
 14365                           ; BSR set to: 0
 14366  010016  0100               	movlb	0	; () banked
 14367  010018  51E4               	movf	SPI_Init@pChannel& (0+255),w,b
 14368                           
 14369                           ; Switch size 1, requested type "space"
 14370                           ; Number of cases is 2, Range of values is 0 to 1
 14371                           ; switch strategies available:
 14372                           ; Name         Instructions Cycles
 14373                           ; simple_byte            7     4 (average)
 14374                           ;	Chosen strategy is simple_byte
 14375  01001A  0A00               	xorlw	0	; case 0
 14376  01001C  B4D8               	btfsc	status,2,c
 14377  01001E  D7F1               	goto	l598
 14378  010020  0A01               	xorlw	1	; case 1
 14379  010022  B4D8               	btfsc	status,2,c
 14380  010024  D7F3               	goto	l600
 14381  010026                     l599:
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;SPI.c: 26: pInput->mChannel = pChannel;
 14385                           
 14386                           ; BSR set to: 0
 14387  010026  EE20 F002          	lfsr	2,2
 14388  01002A  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14389  01002C  26D9               	addwf	fsr2l,f,c
 14390  01002E  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14391  010030  22DA               	addwfc	fsr2h,f,c
 14392  010032  C0E4  FFDF         	movff	SPI_Init@pChannel,indf2
 14393                           
 14394                           ;SPI.c: 35: switch (pChannel)
 14395  010036  D093               	goto	l601
 14396  010038                     
 14397                           ; BSR set to: 0
 14398                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 14399                           
 14400                           ; BSR set to: 0
 14401  010038  0EA5               	movlw	low _PortC
 14402  01003A  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14403  01003C  0E00               	movlw	high _PortC
 14404  01003E  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14405  010040  0E02               	movlw	2
 14406  010042  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14407  010044  0E03               	movlw	3
 14408  010046  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14409  010048  EC34  F087         	call	_Port_SetPinType	;wreg free
 14410                           
 14411                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 14412  01004C  0EA5               	movlw	low _PortC
 14413  01004E  0100               	movlb	0	; () banked
 14414  010050  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14415  010052  0E00               	movlw	high _PortC
 14416  010054  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14417  010056  0E03               	movlw	3
 14418  010058  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14419  01005A  0E03               	movlw	3
 14420  01005C  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14421  01005E  EC34  F087         	call	_Port_SetPinType	;wreg free
 14422                           
 14423                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 14424  010062  0EA5               	movlw	low _PortC
 14425  010064  0100               	movlb	0	; () banked
 14426  010066  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14427  010068  0E00               	movlw	high _PortC
 14428  01006A  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14429  01006C  0E05               	movlw	5
 14430  01006E  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14431  010070  0E03               	movlw	3
 14432  010072  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14433  010074  EC34  F087         	call	_Port_SetPinType	;wreg free
 14434                           
 14435                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 14436  010078  0EA5               	movlw	low _PortC
 14437  01007A  0100               	movlb	0	; () banked
 14438  01007C  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14439  01007E  0E00               	movlw	high _PortC
 14440  010080  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14441  010082  0E04               	movlw	4
 14442  010084  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14443  010086  0E00               	movlw	0
 14444  010088  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14445  01008A  EC34  F087         	call	_Port_SetPinType	;wreg free
 14446                           
 14447                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 14448  01008E  0100               	movlb	0	; () banked
 14449  010090  EE20 F003          	lfsr	2,3
 14450  010094  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14451  010096  26D9               	addwf	fsr2l,f,c
 14452  010098  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14453  01009A  22DA               	addwfc	fsr2h,f,c
 14454  01009C  0EC7               	movlw	199
 14455  01009E  6EDE               	movwf	postinc2,c
 14456  0100A0  0E0F               	movlw	15
 14457  0100A2  6EDD               	movwf	postdec2,c
 14458                           
 14459                           ; BSR set to: 0
 14460                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 14461  0100A4  EE20 F006          	lfsr	2,6
 14462  0100A8  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14463  0100AA  26D9               	addwf	fsr2l,f,c
 14464  0100AC  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14465  0100AE  22DA               	addwfc	fsr2h,f,c
 14466  0100B0  0EC6               	movlw	198
 14467  0100B2  6EDE               	movwf	postinc2,c
 14468  0100B4  0E0F               	movlw	15
 14469  0100B6  6EDD               	movwf	postdec2,c
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 14473  0100B8  EE20 F009          	lfsr	2,9
 14474  0100BC  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14475  0100BE  26D9               	addwf	fsr2l,f,c
 14476  0100C0  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14477  0100C2  22DA               	addwfc	fsr2h,f,c
 14478  0100C4  0EC9               	movlw	201
 14479  0100C6  D047               	goto	L8
 14480  0100C8                     
 14481                           ; BSR set to: 0
 14482                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 14483                           
 14484                           ; BSR set to: 0
 14485  0100C8  0E9B               	movlw	low _PortD
 14486  0100CA  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14487  0100CC  0E00               	movlw	high _PortD
 14488  0100CE  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14489  0100D0  0E07               	movlw	7
 14490  0100D2  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14491  0100D4  0E03               	movlw	3
 14492  0100D6  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14493  0100D8  EC34  F087         	call	_Port_SetPinType	;wreg free
 14494                           
 14495                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 14496  0100DC  0E9B               	movlw	low _PortD
 14497  0100DE  0100               	movlb	0	; () banked
 14498  0100E0  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14499  0100E2  0E00               	movlw	high _PortD
 14500  0100E4  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14501  0100E6  0E06               	movlw	6
 14502  0100E8  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14503  0100EA  0E03               	movlw	3
 14504  0100EC  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14505  0100EE  EC34  F087         	call	_Port_SetPinType	;wreg free
 14506                           
 14507                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 14508  0100F2  0E9B               	movlw	low _PortD
 14509  0100F4  0100               	movlb	0	; () banked
 14510  0100F6  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14511  0100F8  0E00               	movlw	high _PortD
 14512  0100FA  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14513  0100FC  0E04               	movlw	4
 14514  0100FE  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14515  010100  0E03               	movlw	3
 14516  010102  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14517  010104  EC34  F087         	call	_Port_SetPinType	;wreg free
 14518                           
 14519                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 14520  010108  0E9B               	movlw	low _PortD
 14521  01010A  0100               	movlb	0	; () banked
 14522  01010C  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 14523  01010E  0E00               	movlw	high _PortD
 14524  010110  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14525  010112  0E05               	movlw	5
 14526  010114  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 14527  010116  0E00               	movlw	0
 14528  010118  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 14529  01011A  EC34  F087         	call	_Port_SetPinType	;wreg free
 14530                           
 14531                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 14532  01011E  0100               	movlb	0	; () banked
 14533  010120  EE20 F003          	lfsr	2,3
 14534  010124  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14535  010126  26D9               	addwf	fsr2l,f,c
 14536  010128  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14537  01012A  22DA               	addwfc	fsr2h,f,c
 14538  01012C  0E6D               	movlw	109
 14539  01012E  6EDE               	movwf	postinc2,c
 14540  010130  0E0F               	movlw	15
 14541  010132  6EDD               	movwf	postdec2,c
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 14545  010134  EE20 F006          	lfsr	2,6
 14546  010138  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14547  01013A  26D9               	addwf	fsr2l,f,c
 14548  01013C  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14549  01013E  22DA               	addwfc	fsr2h,f,c
 14550  010140  0E6C               	movlw	108
 14551  010142  6EDE               	movwf	postinc2,c
 14552  010144  0E0F               	movlw	15
 14553  010146  6EDD               	movwf	postdec2,c
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 14557  010148  EE20 F009          	lfsr	2,9
 14558  01014C  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14559  01014E  26D9               	addwf	fsr2l,f,c
 14560  010150  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14561  010152  22DA               	addwfc	fsr2h,f,c
 14562  010154  0E6F               	movlw	111
 14563  010156                     L8:
 14564  010156  6EDE               	movwf	postinc2,c
 14565  010158  0E0F               	movlw	15
 14566  01015A  6EDD               	movwf	postdec2,c
 14567                           
 14568                           ;SPI.c: 68: break;
 14569  01015C  D008               	goto	l603
 14570  01015E                     l601:
 14571                           
 14572                           ; BSR set to: 0
 14573                           
 14574                           ; BSR set to: 0
 14575  01015E  51E4               	movf	SPI_Init@pChannel& (0+255),w,b
 14576                           
 14577                           ; Switch size 1, requested type "space"
 14578                           ; Number of cases is 2, Range of values is 0 to 1
 14579                           ; switch strategies available:
 14580                           ; Name         Instructions Cycles
 14581                           ; simple_byte            7     4 (average)
 14582                           ;	Chosen strategy is simple_byte
 14583  010160  0A00               	xorlw	0	; case 0
 14584  010162  B4D8               	btfsc	status,2,c
 14585  010164  D769               	goto	l602
 14586  010166  0A01               	xorlw	1	; case 1
 14587  010168  A4D8               	btfss	status,2,c
 14588  01016A  0012               	return	
 14589  01016C  D7AD               	goto	l604
 14590  01016E                     l603:
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14594                           
 14595                           ; BSR set to: 0
 14596  01016E  EE20 F006          	lfsr	2,6
 14597  010172  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14598  010174  26D9               	addwf	fsr2l,f,c
 14599  010176  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14600  010178  22DA               	addwfc	fsr2h,f,c
 14601  01017A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14602  01017E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14603  010182  0E05               	movlw	5
 14604  010184  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14605  010186  0E00               	movlw	0
 14606  010188  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14607  01018A  EC47  F098         	call	_Byte_SetBit	;wreg free
 14608                           
 14609                           ;SPI.c: 77: switch(pMode)
 14610  01018E  D08C               	goto	l607
 14611  010190                     
 14612                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 14613  010190  0100               	movlb	0	; () banked
 14614  010192  EE20 F006          	lfsr	2,6
 14615  010196  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14616  010198  26D9               	addwf	fsr2l,f,c
 14617  01019A  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14618  01019C  22DA               	addwfc	fsr2h,f,c
 14619  01019E  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14620  0101A2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14621  0101A6  0E04               	movlw	4
 14622  0101A8  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14623  0101AA  0E00               	movlw	0
 14624  0101AC  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14625  0101AE  EC47  F098         	call	_Byte_SetBit	;wreg free
 14626                           
 14627                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 14628  0101B2  0100               	movlb	0	; () banked
 14629  0101B4  EE20 F003          	lfsr	2,3
 14630  0101B8  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14631  0101BA  26D9               	addwf	fsr2l,f,c
 14632  0101BC  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14633  0101BE  22DA               	addwfc	fsr2h,f,c
 14634  0101C0  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14635  0101C4  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14636  0101C8  0E06               	movlw	6
 14637  0101CA  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14638  0101CC  0E00               	movlw	0
 14639  0101CE  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14640  0101D0  EC47  F098         	call	_Byte_SetBit	;wreg free
 14641                           
 14642                           ;SPI.c: 82: break;
 14643  0101D4  D078               	goto	l609
 14644  0101D6                     
 14645                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 14646  0101D6  0100               	movlb	0	; () banked
 14647  0101D8  EE20 F006          	lfsr	2,6
 14648  0101DC  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14649  0101DE  26D9               	addwf	fsr2l,f,c
 14650  0101E0  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14651  0101E2  22DA               	addwfc	fsr2h,f,c
 14652  0101E4  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14653  0101E8  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14654  0101EC  0E04               	movlw	4
 14655  0101EE  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14656  0101F0  0E00               	movlw	0
 14657  0101F2  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14658  0101F4  EC47  F098         	call	_Byte_SetBit	;wreg free
 14659                           
 14660                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 14661  0101F8  0100               	movlb	0	; () banked
 14662  0101FA  EE20 F003          	lfsr	2,3
 14663  0101FE  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14664  010200  26D9               	addwf	fsr2l,f,c
 14665  010202  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14666  010204  22DA               	addwfc	fsr2h,f,c
 14667  010206  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14668  01020A  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14669  01020E  0E06               	movlw	6
 14670  010210  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14671  010212  0E01               	movlw	1
 14672  010214  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14673  010216  EC47  F098         	call	_Byte_SetBit	;wreg free
 14674                           
 14675                           ;SPI.c: 86: break;
 14676  01021A  D055               	goto	l609
 14677  01021C                     
 14678                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 14679  01021C  0100               	movlb	0	; () banked
 14680  01021E  EE20 F006          	lfsr	2,6
 14681  010222  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14682  010224  26D9               	addwf	fsr2l,f,c
 14683  010226  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14684  010228  22DA               	addwfc	fsr2h,f,c
 14685  01022A  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14686  01022E  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14687  010232  0E04               	movlw	4
 14688  010234  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14689  010236  0E01               	movlw	1
 14690  010238  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14691  01023A  EC47  F098         	call	_Byte_SetBit	;wreg free
 14692                           
 14693                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 14694  01023E  0100               	movlb	0	; () banked
 14695  010240  EE20 F003          	lfsr	2,3
 14696  010244  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14697  010246  26D9               	addwf	fsr2l,f,c
 14698  010248  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14699  01024A  22DA               	addwfc	fsr2h,f,c
 14700  01024C  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14701  010250  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14702  010254  0E06               	movlw	6
 14703  010256  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14704  010258  0E00               	movlw	0
 14705  01025A  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14706  01025C  EC47  F098         	call	_Byte_SetBit	;wreg free
 14707                           
 14708                           ;SPI.c: 90: break;
 14709  010260  D032               	goto	l609
 14710  010262                     
 14711                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 14712  010262  0100               	movlb	0	; () banked
 14713  010264  EE20 F006          	lfsr	2,6
 14714  010268  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14715  01026A  26D9               	addwf	fsr2l,f,c
 14716  01026C  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14717  01026E  22DA               	addwfc	fsr2h,f,c
 14718  010270  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14719  010274  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14720  010278  0E04               	movlw	4
 14721  01027A  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14722  01027C  0E01               	movlw	1
 14723  01027E  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14724  010280  EC47  F098         	call	_Byte_SetBit	;wreg free
 14725                           
 14726                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 14727  010284  0100               	movlb	0	; () banked
 14728  010286  EE20 F003          	lfsr	2,3
 14729  01028A  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14730  01028C  26D9               	addwf	fsr2l,f,c
 14731  01028E  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14732  010290  22DA               	addwfc	fsr2h,f,c
 14733  010292  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14734  010296  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14735  01029A  0E06               	movlw	6
 14736  01029C  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14737  01029E  0E01               	movlw	1
 14738  0102A0  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14739  0102A2  EC47  F098         	call	_Byte_SetBit	;wreg free
 14740                           
 14741                           ;SPI.c: 94: break;
 14742  0102A6  D00F               	goto	l609
 14743  0102A8                     l607:
 14744  0102A8  0100               	movlb	0	; () banked
 14745  0102AA  51E5               	movf	SPI_Init@pMode& (0+255),w,b
 14746                           
 14747                           ; Switch size 1, requested type "space"
 14748                           ; Number of cases is 4, Range of values is 0 to 3
 14749                           ; switch strategies available:
 14750                           ; Name         Instructions Cycles
 14751                           ; simple_byte           13     7 (average)
 14752                           ;	Chosen strategy is simple_byte
 14753  0102AC  0A00               	xorlw	0	; case 0
 14754  0102AE  B4D8               	btfsc	status,2,c
 14755  0102B0  D76F               	goto	l608
 14756  0102B2  0A01               	xorlw	1	; case 1
 14757  0102B4  B4D8               	btfsc	status,2,c
 14758  0102B6  D78F               	goto	l610
 14759  0102B8  0A03               	xorlw	3	; case 2
 14760  0102BA  B4D8               	btfsc	status,2,c
 14761  0102BC  D7AF               	goto	l611
 14762  0102BE  0A01               	xorlw	1	; case 3
 14763  0102C0  A4D8               	btfss	status,2,c
 14764  0102C2  0012               	return	
 14765  0102C4  D7CE               	goto	l612
 14766  0102C6                     l609:
 14767                           
 14768                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 14769                           
 14770                           ; BSR set to: 0
 14771  0102C6  0100               	movlb	0	; () banked
 14772  0102C8  EE20 F006          	lfsr	2,6
 14773  0102CC  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14774  0102CE  26D9               	addwf	fsr2l,f,c
 14775  0102D0  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14776  0102D2  22DA               	addwfc	fsr2h,f,c
 14777  0102D4  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14778  0102D8  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14779  0102DC  0E07               	movlw	7
 14780  0102DE  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14781  0102E0  0E00               	movlw	0
 14782  0102E2  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14783  0102E4  EC47  F098         	call	_Byte_SetBit	;wreg free
 14784                           
 14785                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 14786  0102E8  0100               	movlb	0	; () banked
 14787  0102EA  EE20 F006          	lfsr	2,6
 14788  0102EE  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14789  0102F0  26D9               	addwf	fsr2l,f,c
 14790  0102F2  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14791  0102F4  22DA               	addwfc	fsr2h,f,c
 14792  0102F6  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14793  0102FA  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14794  0102FE  0E06               	movlw	6
 14795  010300  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14796  010302  0E00               	movlw	0
 14797  010304  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14798  010306  EC47  F098         	call	_Byte_SetBit	;wreg free
 14799                           
 14800                           ;SPI.c: 106: Timer2_Init(pClock);
 14801  01030A  C0E0  F0C0         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 14802  01030E  C0E1  F0C1         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 14803  010312  C0E2  F0C2         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 14804  010316  C0E3  F0C3         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 14805  01031A  EC84  F08B         	call	_Timer2_Init	;wreg free
 14806                           
 14807                           ;SPI.c: 112: SPI_DisableISR(pInput);
 14808  01031E  C0E6  F0B3         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 14809  010322  C0E7  F0B4         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 14810  010326  ECA5  F09B         	call	_SPI_DisableISR	;wreg free
 14811                           
 14812                           ;SPI.c: 116: switch (pChannel)
 14813  01032A  D004               	goto	l614
 14814  01032C                     l615:
 14815                           
 14816                           ; BSR set to: 0
 14817  01032C  869F               	bsf	3999,3,c	;volatile
 14818  01032E  D00B               	goto	l616
 14819  010330                     l617:
 14820                           
 14821                           ; BSR set to: 0
 14822  010330  8EA5               	bsf	4005,7,c	;volatile
 14823  010332  D009               	goto	l616
 14824  010334                     l614:
 14825                           
 14826                           ; BSR set to: 0
 14827  010334  0100               	movlb	0	; () banked
 14828  010336  51E4               	movf	SPI_Init@pChannel& (0+255),w,b
 14829                           
 14830                           ; Switch size 1, requested type "space"
 14831                           ; Number of cases is 2, Range of values is 0 to 1
 14832                           ; switch strategies available:
 14833                           ; Name         Instructions Cycles
 14834                           ; simple_byte            7     4 (average)
 14835                           ;	Chosen strategy is simple_byte
 14836  010338  0A00               	xorlw	0	; case 0
 14837  01033A  B4D8               	btfsc	status,2,c
 14838  01033C  D7F7               	goto	l615
 14839  01033E  0A01               	xorlw	1	; case 1
 14840  010340  A4D8               	btfss	status,2,c
 14841  010342  0012               	return	
 14842  010344  D7F5               	goto	l617
 14843  010346                     l616:
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;SPI.c: 124: SPI_DCS(pInput);
 14847                           
 14848                           ; BSR set to: 0
 14849  010346  C0E6  F0B3         	movff	SPI_Init@pInput,SPI_DCS@pInput
 14850  01034A  C0E7  F0B4         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 14851  01034E  EC79  F09B         	call	_SPI_DCS	;wreg free
 14852                           
 14853                           ;SPI.c: 126: pInput->mBusy = 0;
 14854  010352  C0E6  FFD9         	movff	SPI_Init@pInput,fsr2l
 14855  010356  C0E7  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 14856  01035A  0E00               	movlw	0
 14857  01035C  6EDF               	movwf	indf2,c
 14858                           
 14859                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 14860  01035E  0100               	movlb	0	; () banked
 14861  010360  EE20 F006          	lfsr	2,6
 14862  010364  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14863  010366  26D9               	addwf	fsr2l,f,c
 14864  010368  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14865  01036A  22DA               	addwfc	fsr2h,f,c
 14866  01036C  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 14867  010370  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 14868  010374  0E00               	movlw	0
 14869  010376  6FC0               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14870  010378  0E03               	movlw	3
 14871  01037A  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 14872  01037C  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 14873                           
 14874                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14875  010380  0100               	movlb	0	; () banked
 14876  010382  EE20 F006          	lfsr	2,6
 14877  010386  51E6               	movf	SPI_Init@pInput& (0+255),w,b
 14878  010388  26D9               	addwf	fsr2l,f,c
 14879  01038A  51E7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14880  01038C  22DA               	addwfc	fsr2h,f,c
 14881  01038E  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 14882  010392  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 14883  010396  0E05               	movlw	5
 14884  010398  6FB5               	movwf	Byte_SetBit@pBit& (0+255),b
 14885  01039A  0E01               	movlw	1
 14886  01039C  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 14887  01039E  EC47  F098         	call	_Byte_SetBit	;wreg free
 14888  0103A2  0012               	return		;funcret
 14889  0103A4                     __end_of_SPI_Init:
 14890                           	opt stack 0
 14891                           tosu	equ	0xFFF
 14892                           tosh	equ	0xFFE
 14893                           tosl	equ	0xFFD
 14894                           pclath	equ	0xFFA
 14895                           tblptru	equ	0xFF8
 14896                           tblptrh	equ	0xFF7
 14897                           tblptrl	equ	0xFF6
 14898                           tablat	equ	0xFF5
 14899                           prodh	equ	0xFF4
 14900                           prodl	equ	0xFF3
 14901                           intcon	equ	0xFF2
 14902                           postinc0	equ	0xFEE
 14903                           wreg	equ	0xFE8
 14904                           indf1	equ	0xFE7
 14905                           postdec1	equ	0xFE5
 14906                           fsr1h	equ	0xFE2
 14907                           fsr1l	equ	0xFE1
 14908                           indf2	equ	0xFDF
 14909                           postinc2	equ	0xFDE
 14910                           postdec2	equ	0xFDD
 14911                           plusw2	equ	0xFDB
 14912                           fsr2h	equ	0xFDA
 14913                           fsr2l	equ	0xFD9
 14914                           status	equ	0xFD8
 14915                           
 14916 ;; *************** function _Timer2_Init *****************
 14917 ;; Defined at:
 14918 ;;		line 10 in file "Library/Timer2.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 14923 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 14924 ;;  RDIV            4   18[BANK0 ] unsigned long 
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  1    wreg      void 
 14927 ;; Registers used:
 14928 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14934 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14935 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14937 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14938 ;;Total ram usage:       17 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    8
 14941 ;; This function calls:
 14942 ;;		_Timer2_Clear
 14943 ;;		___lldiv
 14944 ;; This function is called by:
 14945 ;;		_SPI_Init
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text82
 14950  011708                     __ptext82:
 14951                           	opt stack 0
 14952  011708                     _Timer2_Init:
 14953                           	opt stack 19
 14954                           
 14955                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 14956                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 14957                           ;Timer2.c: 14: static UINT8 PRE = 0;
 14958                           ;Timer2.c: 15: static UINT32 DIV = 0;
 14959                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 14960                           
 14961                           ;incstack = 0
 14962  011708  0E00               	movlw	0
 14963  01170A  0100               	movlb	0	; () banked
 14964  01170C  6FC9               	movwf	Timer2_Init@pCPUClock& (0+255),b
 14965  01170E  0E6C               	movlw	108
 14966  011710  6FCA               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 14967  011712  0EDC               	movlw	220
 14968  011714  6FCB               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 14969  011716  0E02               	movlw	2
 14970  011718  6FCC               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 14974                           ;Timer2.c: 20: pFrequency *= 2;
 14975  01171A  90D8               	bcf	status,0,c
 14976  01171C  37C0               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 14977  01171E  37C1               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 14978  011720  37C2               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 14979  011722  37C3               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 14980                           
 14981                           ; BSR set to: 0
 14982                           ;Timer2.c: 23: pCPUClock /= 4;
 14983  011724  0E02               	movlw	2
 14984  011726  6FC4               	movwf	??_Timer2_Init& (0+255),b
 14985  011728                     u8365:
 14986  011728  90D8               	bcf	status,0,c
 14987  01172A  33CC               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 14988  01172C  33CB               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 14989  01172E  33CA               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 14990  011730  33C9               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 14991  011732  2FC4               	decfsz	??_Timer2_Init& (0+255),f,b
 14992  011734  D7F9               	goto	u8365
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 14996  011736  C0C9  F0B3         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 14997  01173A  C0CA  F0B4         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 14998  01173E  C0CB  F0B5         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 14999  011742  C0CC  F0B6         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 15000  011746  C0C0  F0B7         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 15001  01174A  C0C1  F0B8         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 15002  01174E  C0C2  F0B9         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 15003  011752  C0C3  F0BA         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 15004  011756  EC96  F093         	call	___lldiv	;wreg free
 15005  01175A  C0B3  F0CD         	movff	?___lldiv,Timer2_Init@DIVIDE
 15006  01175E  C0B4  F0CE         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 15007  011762  C0B5  F0CF         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 15008  011766  C0B6  F0D0         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 15009                           
 15010                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 15011  01176A  D00E               	goto	l1828
 15012  01176C                     l12044:
 15013                           
 15014                           ;Timer2.c: 28: {
 15015                           ;Timer2.c: 29: RDIV = 0;
 15016  01176C  0E00               	movlw	0
 15017  01176E  0100               	movlb	0	; () banked
 15018  011770  6FC5               	movwf	Timer2_Init@RDIV& (0+255),b
 15019  011772  0E00               	movlw	0
 15020  011774  6FC6               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 15021  011776  0E00               	movlw	0
 15022  011778  6FC7               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 15023  01177A  0E00               	movlw	0
 15024  01177C  6FC8               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 15025                           
 15026                           ; BSR set to: 0
 15027                           ;Timer2.c: 30: INDEX ++;
 15028  01177E  2B8D               	incf	Timer2_Init@INDEX& (0+255),f,b
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;Timer2.c: 31: if (INDEX >= 3)
 15032  011780  0E02               	movlw	2
 15033  011782  658D               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 15034  011784  D001               	goto	l1828
 15035  011786  D023               	goto	u8380
 15036  011788                     l1828:
 15037                           
 15038                           ; BSR set to: 0
 15039                           
 15040                           ; BSR set to: 0
 15041  011788  C0CD  F0B3         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 15042  01178C  C0CE  F0B4         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 15043  011790  C0CF  F0B5         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 15044  011794  C0D0  F0B6         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 15045  011798  0100               	movlb	0	; () banked
 15046  01179A  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 15047  01179C  0D01               	mullw	1
 15048  01179E  0ED4               	movlw	low Timer2_Init@PRESCALE
 15049  0117A0  24F3               	addwf	prodl,w,c
 15050  0117A2  6EF6               	movwf	tblptrl,c
 15051  0117A4  0EFC               	movlw	high Timer2_Init@PRESCALE
 15052  0117A6  20F4               	addwfc	prodh,w,c
 15053  0117A8  6EF7               	movwf	tblptrh,c
 15054  0117AA                     	if	1	;There are 3 active tblptr bytes
 15055  0117AA  6AF8               	clrf	tblptru,c
 15056  0117AC  0E00               	movlw	low (__mediumconst shr (0+16))
 15057  0117AE  22F8               	addwfc	tblptru,f,c
 15058  0117B0                     	endif
 15059  0117B0  0008               	tblrd		*
 15060  0117B2  50F5               	movf	tablat,w,c
 15061  0117B4  6FB7               	movwf	___lldiv@divisor& (0+255),b
 15062  0117B6  6BB8               	clrf	(___lldiv@divisor+1)& (0+255),b
 15063  0117B8  6BB9               	clrf	(___lldiv@divisor+2)& (0+255),b
 15064  0117BA  6BBA               	clrf	(___lldiv@divisor+3)& (0+255),b
 15065  0117BC  EC96  F093         	call	___lldiv	;wreg free
 15066  0117C0  0100               	movlb	0	; () banked
 15067  0117C2  51B6               	movf	(?___lldiv+3)& (0+255),w,b
 15068  0117C4  11B5               	iorwf	(?___lldiv+2)& (0+255),w,b
 15069  0117C6  E1D2               	bnz	l12044
 15070  0117C8  05B4               	decf	(?___lldiv+1)& (0+255),w,b
 15071  0117CA  B0D8               	btfsc	status,0,c
 15072  0117CC  D7CF               	goto	l1827
 15073  0117CE                     u8380:
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;Timer2.c: 33: }
 15077                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 15078                           
 15079                           ; BSR set to: 0
 15080  0117CE  50CA               	movf	4042,w,c	;volatile
 15081  0117D0  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 15082  0117D2  0BFC               	andlw	-4
 15083  0117D4  198D               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 15084  0117D6  6ECA               	movwf	4042,c	;volatile
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 15088  0117D8  84CA               	bsf	4042,2,c	;volatile
 15089                           
 15090                           ; BSR set to: 0
 15091                           ;Timer2.c: 44: Timer2_Clear();
 15092  0117DA  EC91  F09D         	call	_Timer2_Clear	;wreg free
 15093                           
 15094                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 15095  0117DE  0100               	movlb	0	; () banked
 15096  0117E0  518D               	movf	Timer2_Init@INDEX& (0+255),w,b
 15097  0117E2  0D01               	mullw	1
 15098  0117E4  0ED4               	movlw	low Timer2_Init@PRESCALE
 15099  0117E6  24F3               	addwf	prodl,w,c
 15100  0117E8  6EF6               	movwf	tblptrl,c
 15101  0117EA  0EFC               	movlw	high Timer2_Init@PRESCALE
 15102  0117EC  20F4               	addwfc	prodh,w,c
 15103  0117EE  6EF7               	movwf	tblptrh,c
 15104  0117F0                     	if	1	;There are 3 active tblptr bytes
 15105  0117F0  6AF8               	clrf	tblptru,c
 15106  0117F2  0E00               	movlw	low (__mediumconst shr (0+16))
 15107  0117F4  22F8               	addwfc	tblptru,f,c
 15108  0117F6                     	endif
 15109  0117F6  0008               	tblrd		*
 15110  0117F8  CFF5 F08C          	movff	tablat,Timer2_Init@PRE
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 15114  0117FC  0EFF               	movlw	255
 15115  0117FE  25CD               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 15116  011800  0101               	movlb	1	; () banked
 15117  011802  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 15118  011804  0EFF               	movlw	255
 15119  011806  0100               	movlb	0	; () banked
 15120  011808  21CE               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 15121  01180A  0101               	movlb	1	; () banked
 15122  01180C  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 15123  01180E  0EFF               	movlw	255
 15124  011810  0100               	movlb	0	; () banked
 15125  011812  21CF               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 15126  011814  0101               	movlb	1	; () banked
 15127  011816  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 15128  011818  0EFF               	movlw	255
 15129  01181A  0100               	movlb	0	; () banked
 15130  01181C  21D0               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 15131  01181E  0101               	movlb	1	; () banked
 15132  011820  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 15133                           
 15134                           ; BSR set to: 1
 15135                           ;Timer2.c: 48: INDEX = DIV/PRE;
 15136  011822  C100  F0B3         	movff	Timer2_Init@DIV,___lldiv@dividend
 15137  011826  C101  F0B4         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 15138  01182A  C102  F0B5         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 15139  01182E  C103  F0B6         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 15140  011832  0100               	movlb	0	; () banked
 15141  011834  518C               	movf	Timer2_Init@PRE& (0+255),w,b
 15142  011836  6FB7               	movwf	___lldiv@divisor& (0+255),b
 15143  011838  6BB8               	clrf	(___lldiv@divisor+1)& (0+255),b
 15144  01183A  6BB9               	clrf	(___lldiv@divisor+2)& (0+255),b
 15145  01183C  6BBA               	clrf	(___lldiv@divisor+3)& (0+255),b
 15146  01183E  EC96  F093         	call	___lldiv	;wreg free
 15147  011842  0100               	movlb	0	; () banked
 15148  011844  51B3               	movf	?___lldiv& (0+255),w,b
 15149  011846  6F8D               	movwf	Timer2_Init@INDEX& (0+255),b
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;Timer2.c: 49: PR2 = INDEX;
 15153  011848  C08D  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 15154                           
 15155                           ; BSR set to: 0
 15156  01184C  0012               	return		;funcret
 15157  01184E                     __end_of_Timer2_Init:
 15158                           	opt stack 0
 15159                           tosu	equ	0xFFF
 15160                           tosh	equ	0xFFE
 15161                           tosl	equ	0xFFD
 15162                           pclath	equ	0xFFA
 15163                           tblptru	equ	0xFF8
 15164                           tblptrh	equ	0xFF7
 15165                           tblptrl	equ	0xFF6
 15166                           tablat	equ	0xFF5
 15167                           prodh	equ	0xFF4
 15168                           prodl	equ	0xFF3
 15169                           intcon	equ	0xFF2
 15170                           postinc0	equ	0xFEE
 15171                           wreg	equ	0xFE8
 15172                           indf1	equ	0xFE7
 15173                           postdec1	equ	0xFE5
 15174                           fsr1h	equ	0xFE2
 15175                           fsr1l	equ	0xFE1
 15176                           indf2	equ	0xFDF
 15177                           postinc2	equ	0xFDE
 15178                           postdec2	equ	0xFDD
 15179                           plusw2	equ	0xFDB
 15180                           fsr2h	equ	0xFDA
 15181                           fsr2l	equ	0xFD9
 15182                           status	equ	0xFD8
 15183                           
 15184 ;; *************** function ___lldiv *****************
 15185 ;; Defined at:
 15186 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
 15187 ;; Parameters:    Size  Location     Type
 15188 ;;  dividend        4    0[BANK0 ] unsigned long 
 15189 ;;  divisor         4    4[BANK0 ] unsigned long 
 15190 ;; Auto vars:     Size  Location     Type
 15191 ;;  quotient        4    8[BANK0 ] unsigned long 
 15192 ;;  counter         1   12[BANK0 ] unsigned char 
 15193 ;; Return value:  Size  Location     Type
 15194 ;;                  4    0[BANK0 ] unsigned long 
 15195 ;; Registers used:
 15196 ;;		wreg, status,2, status,0
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15202 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15203 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15205 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15206 ;;Total ram usage:       13 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    7
 15209 ;; This function calls:
 15210 ;;		Nothing
 15211 ;; This function is called by:
 15212 ;;		_Timer2_Init
 15213 ;;		_rand_between
 15214 ;;		_I2C_Init
 15215 ;;		_Timer0_Init
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           	psect	text83
 15220  01272C                     __ptext83:
 15221                           	opt stack 0
 15222  01272C                     ___lldiv:
 15223                           	opt stack 19
 15224                           
 15225                           ; BSR set to: 0
 15226                           ;incstack = 0
 15227  01272C  0E00               	movlw	0
 15228  01272E  0100               	movlb	0	; () banked
 15229  012730  6FBB               	movwf	___lldiv@quotient& (0+255),b
 15230  012732  0E00               	movlw	0
 15231  012734  6FBC               	movwf	(___lldiv@quotient+1)& (0+255),b
 15232  012736  0E00               	movlw	0
 15233  012738  6FBD               	movwf	(___lldiv@quotient+2)& (0+255),b
 15234  01273A  0E00               	movlw	0
 15235  01273C  6FBE               	movwf	(___lldiv@quotient+3)& (0+255),b
 15236                           
 15237                           ; BSR set to: 0
 15238  01273E  51B7               	movf	___lldiv@divisor& (0+255),w,b
 15239  012740  11B8               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15240  012742  11B9               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15241  012744  11BA               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15242  012746  B4D8               	btfsc	status,2,c
 15243  012748  D02A               	goto	l2685
 15244                           
 15245                           ; BSR set to: 0
 15246  01274A  0E01               	movlw	1
 15247  01274C  6FBF               	movwf	___lldiv@counter& (0+255),b
 15248  01274E  D006               	goto	l2680
 15249  012750                     
 15250                           ; BSR set to: 0
 15251                           
 15252                           ; BSR set to: 0
 15253  012750  90D8               	bcf	status,0,c
 15254  012752  37B7               	rlcf	___lldiv@divisor& (0+255),f,b
 15255  012754  37B8               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15256  012756  37B9               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15257  012758  37BA               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15258  01275A  2BBF               	incf	___lldiv@counter& (0+255),f,b
 15259  01275C                     l2680:
 15260                           
 15261                           ; BSR set to: 0
 15262                           
 15263                           ; BSR set to: 0
 15264  01275C  AFBA               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15265  01275E  D7F8               	goto	l2681
 15266  012760                     u8230:
 15267                           
 15268                           ; BSR set to: 0
 15269                           
 15270                           ; BSR set to: 0
 15271                           
 15272                           ; BSR set to: 0
 15273  012760  90D8               	bcf	status,0,c
 15274  012762  37BB               	rlcf	___lldiv@quotient& (0+255),f,b
 15275  012764  37BC               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15276  012766  37BD               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15277  012768  37BE               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15278                           
 15279                           ; BSR set to: 0
 15280  01276A  51B7               	movf	___lldiv@divisor& (0+255),w,b
 15281  01276C  5DB3               	subwf	___lldiv@dividend& (0+255),w,b
 15282  01276E  51B8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15283  012770  59B4               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15284  012772  51B9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15285  012774  59B5               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15286  012776  51BA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15287  012778  59B6               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15288  01277A  A0D8               	btfss	status,0,c
 15289  01277C  D009               	goto	l2684
 15290                           
 15291                           ; BSR set to: 0
 15292  01277E  51B7               	movf	___lldiv@divisor& (0+255),w,b
 15293  012780  5FB3               	subwf	___lldiv@dividend& (0+255),f,b
 15294  012782  51B8               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15295  012784  5BB4               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15296  012786  51B9               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15297  012788  5BB5               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15298  01278A  51BA               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15299  01278C  5BB6               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15300                           
 15301                           ; BSR set to: 0
 15302  01278E  81BB               	bsf	___lldiv@quotient& (0+255),0,b
 15303  012790                     l2684:
 15304                           
 15305                           ; BSR set to: 0
 15306                           
 15307                           ; BSR set to: 0
 15308  012790  90D8               	bcf	status,0,c
 15309  012792  33BA               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15310  012794  33B9               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15311  012796  33B8               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15312  012798  33B7               	rrcf	___lldiv@divisor& (0+255),f,b
 15313                           
 15314                           ; BSR set to: 0
 15315  01279A  2FBF               	decfsz	___lldiv@counter& (0+255),f,b
 15316  01279C  D7E1               	goto	u8230
 15317  01279E                     l2685:
 15318                           
 15319                           ; BSR set to: 0
 15320                           
 15321                           ; BSR set to: 0
 15322  01279E  C0BB  F0B3         	movff	___lldiv@quotient,?___lldiv
 15323  0127A2  C0BC  F0B4         	movff	___lldiv@quotient+1,?___lldiv+1
 15324  0127A6  C0BD  F0B5         	movff	___lldiv@quotient+2,?___lldiv+2
 15325  0127AA  C0BE  F0B6         	movff	___lldiv@quotient+3,?___lldiv+3
 15326                           
 15327                           ; BSR set to: 0
 15328  0127AE  0012               	return		;funcret
 15329  0127B0                     __end_of___lldiv:
 15330                           	opt stack 0
 15331                           tosu	equ	0xFFF
 15332                           tosh	equ	0xFFE
 15333                           tosl	equ	0xFFD
 15334                           pclath	equ	0xFFA
 15335                           tblptru	equ	0xFF8
 15336                           tblptrh	equ	0xFF7
 15337                           tblptrl	equ	0xFF6
 15338                           tablat	equ	0xFF5
 15339                           prodh	equ	0xFF4
 15340                           prodl	equ	0xFF3
 15341                           intcon	equ	0xFF2
 15342                           postinc0	equ	0xFEE
 15343                           wreg	equ	0xFE8
 15344                           indf1	equ	0xFE7
 15345                           postdec1	equ	0xFE5
 15346                           fsr1h	equ	0xFE2
 15347                           fsr1l	equ	0xFE1
 15348                           indf2	equ	0xFDF
 15349                           postinc2	equ	0xFDE
 15350                           postdec2	equ	0xFDD
 15351                           plusw2	equ	0xFDB
 15352                           fsr2h	equ	0xFDA
 15353                           fsr2l	equ	0xFD9
 15354                           status	equ	0xFD8
 15355                           
 15356 ;; *************** function _Timer2_Clear *****************
 15357 ;; Defined at:
 15358 ;;		line 3 in file "Library/Timer2.c"
 15359 ;; Parameters:    Size  Location     Type
 15360 ;;		None
 15361 ;; Auto vars:     Size  Location     Type
 15362 ;;		None
 15363 ;; Return value:  Size  Location     Type
 15364 ;;                  1    wreg      void 
 15365 ;; Registers used:
 15366 ;;		None
 15367 ;; Tracked objects:
 15368 ;;		On entry : 0/0
 15369 ;;		On exit  : 0/0
 15370 ;;		Unchanged: 0/0
 15371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15376 ;;Total ram usage:        0 bytes
 15377 ;; Hardware stack levels used:    1
 15378 ;; Hardware stack levels required when called:    7
 15379 ;; This function calls:
 15380 ;;		Nothing
 15381 ;; This function is called by:
 15382 ;;		_Timer2_Init
 15383 ;; This function uses a non-reentrant model
 15384 ;;
 15385                           
 15386                           	psect	text84
 15387  013B22                     __ptext84:
 15388                           	opt stack 0
 15389  013B22                     _Timer2_Clear:
 15390                           	opt stack 19
 15391                           
 15392                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;incstack = 0
 15396  013B22  929E               	bcf	3998,1,c	;volatile
 15397                           
 15398                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 15399  013B24  929D               	bcf	3997,1,c	;volatile
 15400                           
 15401                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 15402  013B26  929F               	bcf	3999,1,c	;volatile
 15403  013B28  0012               	return		;funcret
 15404  013B2A                     __end_of_Timer2_Clear:
 15405                           	opt stack 0
 15406                           tosu	equ	0xFFF
 15407                           tosh	equ	0xFFE
 15408                           tosl	equ	0xFFD
 15409                           pclath	equ	0xFFA
 15410                           tblptru	equ	0xFF8
 15411                           tblptrh	equ	0xFF7
 15412                           tblptrl	equ	0xFF6
 15413                           tablat	equ	0xFF5
 15414                           prodh	equ	0xFF4
 15415                           prodl	equ	0xFF3
 15416                           intcon	equ	0xFF2
 15417                           postinc0	equ	0xFEE
 15418                           wreg	equ	0xFE8
 15419                           indf1	equ	0xFE7
 15420                           postdec1	equ	0xFE5
 15421                           fsr1h	equ	0xFE2
 15422                           fsr1l	equ	0xFE1
 15423                           indf2	equ	0xFDF
 15424                           postinc2	equ	0xFDE
 15425                           postdec2	equ	0xFDD
 15426                           plusw2	equ	0xFDB
 15427                           fsr2h	equ	0xFDA
 15428                           fsr2l	equ	0xFD9
 15429                           status	equ	0xFD8
 15430                           
 15431 ;; *************** function _SPI_DisableISR *****************
 15432 ;; Defined at:
 15433 ;;		line 181 in file "Library/SPI.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 15436 ;;		 -> SPI1(11), SPI2(11), 
 15437 ;; Auto vars:     Size  Location     Type
 15438 ;;		None
 15439 ;; Return value:  Size  Location     Type
 15440 ;;                  1    wreg      void 
 15441 ;; Registers used:
 15442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15443 ;; Tracked objects:
 15444 ;;		On entry : 0/0
 15445 ;;		On exit  : 0/0
 15446 ;;		Unchanged: 0/0
 15447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15451 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15452 ;;Total ram usage:        2 bytes
 15453 ;; Hardware stack levels used:    1
 15454 ;; Hardware stack levels required when called:    7
 15455 ;; This function calls:
 15456 ;;		Nothing
 15457 ;; This function is called by:
 15458 ;;		_SPI_Init
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           	psect	text85
 15463  01374A                     __ptext85:
 15464                           	opt stack 0
 15465  01374A                     _SPI_DisableISR:
 15466                           	opt stack 20
 15467                           
 15468                           ;SPI.c: 183: switch (pInput->mChannel)
 15469                           
 15470                           ;incstack = 0
 15471  01374A  D004               	goto	l654
 15472  01374C                     l655:
 15473                           
 15474                           ; BSR set to: 0
 15475  01374C  969D               	bcf	3997,3,c	;volatile
 15476  01374E  0012               	return	
 15477  013750                     l657:
 15478                           
 15479                           ; BSR set to: 0
 15480  013750  9EA3               	bcf	4003,7,c	;volatile
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;SPI.c: 188: };
 15484                           
 15485                           ; BSR set to: 0
 15486                           
 15487                           ;SPI.c: 187: default: return;
 15488  013752  0012               	return	
 15489  013754                     l654:
 15490                           
 15491                           ; BSR set to: 0
 15492  013754  0100               	movlb	0	; () banked
 15493  013756  EE20 F002          	lfsr	2,2
 15494  01375A  51B3               	movf	SPI_DisableISR@pInput& (0+255),w,b
 15495  01375C  26D9               	addwf	fsr2l,f,c
 15496  01375E  51B4               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 15497  013760  22DA               	addwfc	fsr2h,f,c
 15498  013762  50DF               	movf	indf2,w,c
 15499                           
 15500                           ; Switch size 1, requested type "space"
 15501                           ; Number of cases is 2, Range of values is 0 to 1
 15502                           ; switch strategies available:
 15503                           ; Name         Instructions Cycles
 15504                           ; simple_byte            7     4 (average)
 15505                           ;	Chosen strategy is simple_byte
 15506  013764  0A00               	xorlw	0	; case 0
 15507  013766  B4D8               	btfsc	status,2,c
 15508  013768  D7F1               	goto	l655
 15509  01376A  0A01               	xorlw	1	; case 1
 15510  01376C  A4D8               	btfss	status,2,c
 15511  01376E  0012               	return	
 15512  013770  D7EF               	goto	l657
 15513  013772                     __end_of_SPI_DisableISR:
 15514                           	opt stack 0
 15515                           tosu	equ	0xFFF
 15516                           tosh	equ	0xFFE
 15517                           tosl	equ	0xFFD
 15518                           pclath	equ	0xFFA
 15519                           tblptru	equ	0xFF8
 15520                           tblptrh	equ	0xFF7
 15521                           tblptrl	equ	0xFF6
 15522                           tablat	equ	0xFF5
 15523                           prodh	equ	0xFF4
 15524                           prodl	equ	0xFF3
 15525                           intcon	equ	0xFF2
 15526                           postinc0	equ	0xFEE
 15527                           wreg	equ	0xFE8
 15528                           indf1	equ	0xFE7
 15529                           postdec1	equ	0xFE5
 15530                           fsr1h	equ	0xFE2
 15531                           fsr1l	equ	0xFE1
 15532                           indf2	equ	0xFDF
 15533                           postinc2	equ	0xFDE
 15534                           postdec2	equ	0xFDD
 15535                           plusw2	equ	0xFDB
 15536                           fsr2h	equ	0xFDA
 15537                           fsr2l	equ	0xFD9
 15538                           status	equ	0xFD8
 15539                           
 15540 ;; *************** function _SPI_DCS *****************
 15541 ;; Defined at:
 15542 ;;		line 219 in file "Library/SPI.c"
 15543 ;; Parameters:    Size  Location     Type
 15544 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 15545 ;;		 -> SPI1(11), SPI2(11), 
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;		None
 15548 ;; Return value:  Size  Location     Type
 15549 ;;                  1    wreg      void 
 15550 ;; Registers used:
 15551 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15561 ;;Total ram usage:        2 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    7
 15564 ;; This function calls:
 15565 ;;		Nothing
 15566 ;; This function is called by:
 15567 ;;		_SPI_Init
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text86
 15572  0136F2                     __ptext86:
 15573                           	opt stack 0
 15574  0136F2                     _SPI_DCS:
 15575                           	opt stack 20
 15576                           
 15577                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;incstack = 0
 15581  0136F2  0100               	movlb	0	; () banked
 15582  0136F4  EE20 F002          	lfsr	2,2
 15583  0136F8  51B3               	movf	SPI_DCS@pInput& (0+255),w,b
 15584  0136FA  26D9               	addwf	fsr2l,f,c
 15585  0136FC  51B4               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 15586  0136FE  22DA               	addwfc	fsr2h,f,c
 15587  013700  50DF               	movf	indf2,w,c
 15588  013702  A4D8               	btfss	status,2,c
 15589  013704  D006               	goto	l673
 15590                           
 15591                           ; BSR set to: 0
 15592                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 15593  013706  C0A9  FFD9         	movff	_PortC+4,fsr2l
 15594  01370A  C0AA  FFDA         	movff	_PortC+5,fsr2h
 15595  01370E  84DF               	bsf	indf2,2,c
 15596  013710  0012               	return	
 15597  013712                     l673:
 15598                           
 15599                           ; BSR set to: 0
 15600                           ;SPI.c: 223: else
 15601                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 15602                           
 15603                           ; BSR set to: 0
 15604  013712  C09F  FFD9         	movff	_PortD+4,fsr2l
 15605  013716  C0A0  FFDA         	movff	_PortD+5,fsr2h
 15606  01371A  8EDF               	bsf	indf2,7,c
 15607  01371C  0012               	return	
 15608  01371E                     __end_of_SPI_DCS:
 15609                           	opt stack 0
 15610                           tosu	equ	0xFFF
 15611                           tosh	equ	0xFFE
 15612                           tosl	equ	0xFFD
 15613                           pclath	equ	0xFFA
 15614                           tblptru	equ	0xFF8
 15615                           tblptrh	equ	0xFF7
 15616                           tblptrl	equ	0xFF6
 15617                           tablat	equ	0xFF5
 15618                           prodh	equ	0xFF4
 15619                           prodl	equ	0xFF3
 15620                           intcon	equ	0xFF2
 15621                           postinc0	equ	0xFEE
 15622                           wreg	equ	0xFE8
 15623                           indf1	equ	0xFE7
 15624                           postdec1	equ	0xFE5
 15625                           fsr1h	equ	0xFE2
 15626                           fsr1l	equ	0xFE1
 15627                           indf2	equ	0xFDF
 15628                           postinc2	equ	0xFDE
 15629                           postdec2	equ	0xFDD
 15630                           plusw2	equ	0xFDB
 15631                           fsr2h	equ	0xFDA
 15632                           fsr2l	equ	0xFD9
 15633                           status	equ	0xFD8
 15634                           
 15635 ;; *************** function _FunctInitButton *****************
 15636 ;; Defined at:
 15637 ;;		line 16 in file "Functions.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;		None
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;		None
 15642 ;; Return value:  Size  Location     Type
 15643 ;;                  1    wreg      void 
 15644 ;; Registers used:
 15645 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;Total ram usage:        0 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:   16
 15658 ;; This function calls:
 15659 ;;		_Button_Init
 15660 ;; This function is called by:
 15661 ;;		_main
 15662 ;; This function uses a non-reentrant model
 15663 ;;
 15664                           
 15665                           	psect	text87
 15666  01299E                     __ptext87:
 15667                           	opt stack 0
 15668  01299E                     _FunctInitButton:
 15669                           	opt stack 14
 15670                           
 15671                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 15672                           
 15673                           ; BSR set to: 0
 15674                           ;incstack = 0
 15675  01299E  0E86               	movlw	low _TestButton
 15676  0129A0  0101               	movlb	1	; () banked
 15677  0129A2  6FD7               	movwf	Button_Init@pInput& (0+255),b
 15678  0129A4  0E01               	movlw	high _TestButton
 15679  0129A6  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 15680  0129A8  0E00               	movlw	0
 15681  0129AA  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15682  0129AC  0E02               	movlw	2
 15683  0129AE  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 15684  0129B0  0EB4               	movlw	low _MXK_InitTestButton
 15685  0129B2  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 15686  0129B4  0E39               	movlw	high _MXK_InitTestButton
 15687  0129B6  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15688  0129B8  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 15689  0129BA  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15690  0129BC  0E5A               	movlw	low _MXK_TestButton
 15691  0129BE  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 15692  0129C0  0E3A               	movlw	high _MXK_TestButton
 15693  0129C2  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15694  0129C4  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 15695  0129C6  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15696  0129C8  0EFE               	movlw	low _Event_TestButton
 15697  0129CA  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 15698  0129CC  0E35               	movlw	high _Event_TestButton
 15699  0129CE  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15700  0129D0  0E01               	movlw	low (_Event_TestButton shr (0+16))
 15701  0129D2  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15702  0129D4  ECBB  F08F         	call	_Button_Init	;wreg free
 15703                           
 15704                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 15705  0129D8  0E7C               	movlw	low _DIPSwitch
 15706  0129DA  0101               	movlb	1	; () banked
 15707  0129DC  6FD7               	movwf	Button_Init@pInput& (0+255),b
 15708  0129DE  0E01               	movlw	high _DIPSwitch
 15709  0129E0  6FD8               	movwf	(Button_Init@pInput+1)& (0+255),b
 15710  0129E2  0E00               	movlw	0
 15711  0129E4  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15712  0129E6  0E02               	movlw	2
 15713  0129E8  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 15714  0129EA  0E9C               	movlw	low _MXK_InitDIPSwitch
 15715  0129EC  6FDB               	movwf	Button_Init@pInitIO& (0+255),b
 15716  0129EE  0E39               	movlw	high _MXK_InitDIPSwitch
 15717  0129F0  6FDC               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 15718  0129F2  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 15719  0129F4  6FDD               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 15720  0129F6  0EE2               	movlw	low _MXK_DIPSwitch
 15721  0129F8  6FDE               	movwf	Button_Init@pGetState& (0+255),b
 15722  0129FA  0E39               	movlw	high _MXK_DIPSwitch
 15723  0129FC  6FDF               	movwf	(Button_Init@pGetState+1)& (0+255),b
 15724  0129FE  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 15725  012A00  6FE0               	movwf	(Button_Init@pGetState+2)& (0+255),b
 15726  012A02  0EC2               	movlw	low _Event_DIPSwitch
 15727  012A04  6FE1               	movwf	Button_Init@pFunction& (0+255),b
 15728  012A06  0E37               	movlw	high _Event_DIPSwitch
 15729  012A08  6FE2               	movwf	(Button_Init@pFunction+1)& (0+255),b
 15730  012A0A  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 15731  012A0C  6FE3               	movwf	(Button_Init@pFunction+2)& (0+255),b
 15732  012A0E  ECBB  F08F         	call	_Button_Init	;wreg free
 15733  012A12  0012               	return		;funcret
 15734  012A14                     __end_of_FunctInitButton:
 15735                           	opt stack 0
 15736                           tosu	equ	0xFFF
 15737                           tosh	equ	0xFFE
 15738                           tosl	equ	0xFFD
 15739                           pclath	equ	0xFFA
 15740                           tblptru	equ	0xFF8
 15741                           tblptrh	equ	0xFF7
 15742                           tblptrl	equ	0xFF6
 15743                           tablat	equ	0xFF5
 15744                           prodh	equ	0xFF4
 15745                           prodl	equ	0xFF3
 15746                           intcon	equ	0xFF2
 15747                           postinc0	equ	0xFEE
 15748                           wreg	equ	0xFE8
 15749                           indf1	equ	0xFE7
 15750                           postdec1	equ	0xFE5
 15751                           fsr1h	equ	0xFE2
 15752                           fsr1l	equ	0xFE1
 15753                           indf2	equ	0xFDF
 15754                           postinc2	equ	0xFDE
 15755                           postdec2	equ	0xFDD
 15756                           plusw2	equ	0xFDB
 15757                           fsr2h	equ	0xFDA
 15758                           fsr2l	equ	0xFD9
 15759                           status	equ	0xFD8
 15760                           
 15761 ;; *************** function _Button_Init *****************
 15762 ;; Defined at:
 15763 ;;		line 18 in file "Library/Button.c"
 15764 ;; Parameters:    Size  Location     Type
 15765 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 15766 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 15767 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 15768 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 15769 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 15770 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 15771 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 15772 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 15773 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 15774 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 15775 ;; Auto vars:     Size  Location     Type
 15776 ;;		None
 15777 ;; Return value:  Size  Location     Type
 15778 ;;                  1    wreg      void 
 15779 ;; Registers used:
 15780 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15781 ;; Tracked objects:
 15782 ;;		On entry : 0/0
 15783 ;;		On exit  : 0/0
 15784 ;;		Unchanged: 0/0
 15785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15786 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15789 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15790 ;;Total ram usage:       13 bytes
 15791 ;; Hardware stack levels used:    1
 15792 ;; Hardware stack levels required when called:   15
 15793 ;; This function calls:
 15794 ;;		_HMI_InitButtons
 15795 ;;		_MXK_InitDIPSwitch
 15796 ;;		_MXK_InitTestButton
 15797 ;; This function is called by:
 15798 ;;		_HMI_Init
 15799 ;;		_FunctInitButton
 15800 ;; This function uses a non-reentrant model
 15801 ;;
 15802                           
 15803                           	psect	text88
 15804  011F76                     __ptext88:
 15805                           	opt stack 0
 15806  011F76                     _Button_Init:
 15807                           	opt stack 14
 15808                           
 15809                           ;Button.c: 21: if(pInput==(void*)0)
 15810                           
 15811                           ;incstack = 0
 15812  011F76  0101               	movlb	1	; () banked
 15813  011F78  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15814  011F7A  11D8               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 15815  011F7C  B4D8               	btfsc	status,2,c
 15816  011F7E  0012               	return	
 15817                           
 15818                           ; BSR set to: 1
 15819                           ;Button.c: 23: if(pInitIO==(void*)0)
 15820                           
 15821                           ; BSR set to: 1
 15822                           
 15823                           ; BSR set to: 1
 15824                           ;Button.c: 22: return;
 15825  011F80  51DB               	movf	Button_Init@pInitIO& (0+255),w,b
 15826  011F82  11DC               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 15827  011F84  11DD               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 15828  011F86  B4D8               	btfsc	status,2,c
 15829  011F88  0012               	return	
 15830                           
 15831                           ; BSR set to: 1
 15832                           ;Button.c: 25: if(pGetState==(void*)0)
 15833                           
 15834                           ; BSR set to: 1
 15835                           
 15836                           ; BSR set to: 1
 15837                           ;Button.c: 24: return;
 15838  011F8A  51DE               	movf	Button_Init@pGetState& (0+255),w,b
 15839  011F8C  11DF               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 15840  011F8E  11E0               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 15841  011F90  B4D8               	btfsc	status,2,c
 15842  011F92  0012               	return	
 15843                           
 15844                           ; BSR set to: 1
 15845                           ;Button.c: 27: if(pFunction==(void*)0)
 15846                           
 15847                           ; BSR set to: 1
 15848                           
 15849                           ; BSR set to: 1
 15850                           ;Button.c: 26: return;
 15851  011F94  51E1               	movf	Button_Init@pFunction& (0+255),w,b
 15852  011F96  11E2               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 15853  011F98  11E3               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 15854  011F9A  B4D8               	btfsc	status,2,c
 15855  011F9C  0012               	return	
 15856                           
 15857                           ; BSR set to: 1
 15858                           ;Button.c: 30: if(pThreshold == 0)
 15859                           
 15860                           ; BSR set to: 1
 15861                           
 15862                           ; BSR set to: 1
 15863                           ;Button.c: 28: return;
 15864  011F9E  51D9               	movf	Button_Init@pThreshold& (0+255),w,b
 15865  011FA0  11DA               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 15866  011FA2  A4D8               	btfss	status,2,c
 15867  011FA4  D004               	goto	l8
 15868                           
 15869                           ; BSR set to: 1
 15870                           ;Button.c: 31: pThreshold = 1;
 15871  011FA6  0E00               	movlw	0
 15872  011FA8  6FDA               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 15873  011FAA  0E01               	movlw	1
 15874  011FAC  6FD9               	movwf	Button_Init@pThreshold& (0+255),b
 15875  011FAE                     l8:
 15876                           
 15877                           ; BSR set to: 1
 15878                           ;Button.c: 34: pInput->mState = 0;
 15879                           
 15880                           ; BSR set to: 1
 15881  011FAE  C1D7  FFD9         	movff	Button_Init@pInput,fsr2l
 15882  011FB2  C1D8  FFDA         	movff	Button_Init@pInput+1,fsr2h
 15883  011FB6  0E00               	movlw	0
 15884  011FB8  6EDF               	movwf	indf2,c
 15885                           
 15886                           ; BSR set to: 1
 15887                           ;Button.c: 35: pInput->mCount = 0;
 15888  011FBA  EE20 F001          	lfsr	2,1
 15889  011FBE  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15890  011FC0  26D9               	addwf	fsr2l,f,c
 15891  011FC2  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15892  011FC4  22DA               	addwfc	fsr2h,f,c
 15893  011FC6  0E00               	movlw	0
 15894  011FC8  6EDF               	movwf	indf2,c
 15895                           
 15896                           ; BSR set to: 1
 15897                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 15898  011FCA  EE20 F002          	lfsr	2,2
 15899  011FCE  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15900  011FD0  26D9               	addwf	fsr2l,f,c
 15901  011FD2  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15902  011FD4  22DA               	addwfc	fsr2h,f,c
 15903  011FD6  C1D9  FFDE         	movff	Button_Init@pThreshold,postinc2
 15904  011FDA  C1DA  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 15905                           
 15906                           ; BSR set to: 1
 15907                           ;Button.c: 37: pInput->mFunction = pFunction;
 15908  011FDE  EE20 F004          	lfsr	2,4
 15909  011FE2  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15910  011FE4  26D9               	addwf	fsr2l,f,c
 15911  011FE6  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15912  011FE8  22DA               	addwfc	fsr2h,f,c
 15913  011FEA  C1E1  FFDE         	movff	Button_Init@pFunction,postinc2
 15914  011FEE  C1E2  FFDE         	movff	Button_Init@pFunction+1,postinc2
 15915  011FF2  C1E3  FFDE         	movff	Button_Init@pFunction+2,postinc2
 15916                           
 15917                           ; BSR set to: 1
 15918                           ;Button.c: 38: pInput->mGetState = pGetState;
 15919  011FF6  EE20 F007          	lfsr	2,7
 15920  011FFA  51D7               	movf	Button_Init@pInput& (0+255),w,b
 15921  011FFC  26D9               	addwf	fsr2l,f,c
 15922  011FFE  51D8               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15923  012000  22DA               	addwfc	fsr2h,f,c
 15924  012002  C1DE  FFDE         	movff	Button_Init@pGetState,postinc2
 15925  012006  C1DF  FFDE         	movff	Button_Init@pGetState+1,postinc2
 15926  01200A  C1E0  FFDE         	movff	Button_Init@pGetState+2,postinc2
 15927                           
 15928                           ; BSR set to: 1
 15929                           ;Button.c: 41: pInitIO();
 15930  01200E  D801               	call	u8748
 15931  012010  0012               	return	
 15932  012012                     u8748:
 15933  012012  0005               	push	
 15934  012014  6EFA               	movwf	pclath,c
 15935  012016  51DB               	movf	Button_Init@pInitIO& (0+255),w,b
 15936  012018  6EFD               	movwf	tosl,c
 15937  01201A  51DC               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 15938  01201C  6EFE               	movwf	tosh,c
 15939  01201E  51DD               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 15940  012020  6EFF               	movwf	tosu,c
 15941  012022  50FA               	movf	pclath,w,c
 15942  012024  0012               	return		;indir
 15943  012026                     __end_of_Button_Init:
 15944                           	opt stack 0
 15945                           tosu	equ	0xFFF
 15946                           tosh	equ	0xFFE
 15947                           tosl	equ	0xFFD
 15948                           pclath	equ	0xFFA
 15949                           tblptru	equ	0xFF8
 15950                           tblptrh	equ	0xFF7
 15951                           tblptrl	equ	0xFF6
 15952                           tablat	equ	0xFF5
 15953                           prodh	equ	0xFF4
 15954                           prodl	equ	0xFF3
 15955                           intcon	equ	0xFF2
 15956                           postinc0	equ	0xFEE
 15957                           wreg	equ	0xFE8
 15958                           indf1	equ	0xFE7
 15959                           postdec1	equ	0xFE5
 15960                           fsr1h	equ	0xFE2
 15961                           fsr1l	equ	0xFE1
 15962                           indf2	equ	0xFDF
 15963                           postinc2	equ	0xFDE
 15964                           postdec2	equ	0xFDD
 15965                           plusw2	equ	0xFDB
 15966                           fsr2h	equ	0xFDA
 15967                           fsr2l	equ	0xFD9
 15968                           status	equ	0xFD8
 15969                           
 15970 ;; *************** function _MXK_InitDIPSwitch *****************
 15971 ;; Defined at:
 15972 ;;		line 20 in file "Library/MXK.c"
 15973 ;; Parameters:    Size  Location     Type
 15974 ;;		None
 15975 ;; Auto vars:     Size  Location     Type
 15976 ;;		None
 15977 ;; Return value:  Size  Location     Type
 15978 ;;                  1    wreg      void 
 15979 ;; Registers used:
 15980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15981 ;; Tracked objects:
 15982 ;;		On entry : 0/0
 15983 ;;		On exit  : 0/0
 15984 ;;		Unchanged: 0/0
 15985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15990 ;;Total ram usage:        0 bytes
 15991 ;; Hardware stack levels used:    1
 15992 ;; Hardware stack levels required when called:   14
 15993 ;; This function calls:
 15994 ;;		_Port_SetQuadType
 15995 ;; This function is called by:
 15996 ;;		_FunctInitButton
 15997 ;;		_Button_Init
 15998 ;; This function uses a non-reentrant model
 15999 ;;
 16000                           
 16001                           	psect	text89
 16002  01399C                     __ptext89:
 16003                           	opt stack 0
 16004  01399C                     _MXK_InitDIPSwitch:
 16005                           	opt stack 14
 16006                           
 16007                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 16008                           
 16009                           ;incstack = 0
 16010  01399C  0E9B               	movlw	low _PortD
 16011  01399E  0100               	movlb	0	; () banked
 16012  0139A0  6FE9               	movwf	Port_SetQuadType@pInput& (0+255),b
 16013  0139A2  0E00               	movlw	high _PortD
 16014  0139A4  6FEA               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 16015  0139A6  0E00               	movlw	0
 16016  0139A8  6FEB               	movwf	Port_SetQuadType@pQuad& (0+255),b
 16017  0139AA  0E00               	movlw	0
 16018  0139AC  6FEC               	movwf	Port_SetQuadType@pType& (0+255),b
 16019  0139AE  EC69  F084         	call	_Port_SetQuadType	;wreg free
 16020  0139B2  0012               	return		;funcret
 16021  0139B4                     __end_of_MXK_InitDIPSwitch:
 16022                           	opt stack 0
 16023                           tosu	equ	0xFFF
 16024                           tosh	equ	0xFFE
 16025                           tosl	equ	0xFFD
 16026                           pclath	equ	0xFFA
 16027                           tblptru	equ	0xFF8
 16028                           tblptrh	equ	0xFF7
 16029                           tblptrl	equ	0xFF6
 16030                           tablat	equ	0xFF5
 16031                           prodh	equ	0xFF4
 16032                           prodl	equ	0xFF3
 16033                           intcon	equ	0xFF2
 16034                           postinc0	equ	0xFEE
 16035                           wreg	equ	0xFE8
 16036                           indf1	equ	0xFE7
 16037                           postdec1	equ	0xFE5
 16038                           fsr1h	equ	0xFE2
 16039                           fsr1l	equ	0xFE1
 16040                           indf2	equ	0xFDF
 16041                           postinc2	equ	0xFDE
 16042                           postdec2	equ	0xFDD
 16043                           plusw2	equ	0xFDB
 16044                           fsr2h	equ	0xFDA
 16045                           fsr2l	equ	0xFD9
 16046                           status	equ	0xFD8
 16047                           
 16048 ;; *************** function _HMI_InitButtons *****************
 16049 ;; Defined at:
 16050 ;;		line 21 in file "HMI.c"
 16051 ;; Parameters:    Size  Location     Type
 16052 ;;		None
 16053 ;; Auto vars:     Size  Location     Type
 16054 ;;		None
 16055 ;; Return value:  Size  Location     Type
 16056 ;;                  1    wreg      void 
 16057 ;; Registers used:
 16058 ;;		wreg, status,2
 16059 ;; Tracked objects:
 16060 ;;		On entry : 0/0
 16061 ;;		On exit  : 0/0
 16062 ;;		Unchanged: 0/0
 16063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16068 ;;Total ram usage:        0 bytes
 16069 ;; Hardware stack levels used:    1
 16070 ;; Hardware stack levels required when called:    7
 16071 ;; This function calls:
 16072 ;;		Nothing
 16073 ;; This function is called by:
 16074 ;;		_HMI_Init
 16075 ;;		_Button_Init
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           	psect	text90
 16080  013B36                     __ptext90:
 16081                           	opt stack 0
 16082  013B36                     _HMI_InitButtons:
 16083                           	opt stack 21
 16084                           
 16085                           ;HMI.c: 23: TRISE = 0xFC;
 16086                           
 16087                           ;incstack = 0
 16088  013B36  0EFC               	movlw	252
 16089  013B38  6E96               	movwf	3990,c	;volatile
 16090  013B3A  0012               	return		;funcret
 16091  013B3C                     __end_of_HMI_InitButtons:
 16092                           	opt stack 0
 16093                           tosu	equ	0xFFF
 16094                           tosh	equ	0xFFE
 16095                           tosl	equ	0xFFD
 16096                           pclath	equ	0xFFA
 16097                           tblptru	equ	0xFF8
 16098                           tblptrh	equ	0xFF7
 16099                           tblptrl	equ	0xFF6
 16100                           tablat	equ	0xFF5
 16101                           prodh	equ	0xFF4
 16102                           prodl	equ	0xFF3
 16103                           intcon	equ	0xFF2
 16104                           postinc0	equ	0xFEE
 16105                           wreg	equ	0xFE8
 16106                           indf1	equ	0xFE7
 16107                           postdec1	equ	0xFE5
 16108                           fsr1h	equ	0xFE2
 16109                           fsr1l	equ	0xFE1
 16110                           indf2	equ	0xFDF
 16111                           postinc2	equ	0xFDE
 16112                           postdec2	equ	0xFDD
 16113                           plusw2	equ	0xFDB
 16114                           fsr2h	equ	0xFDA
 16115                           fsr2l	equ	0xFD9
 16116                           status	equ	0xFD8
 16117                           
 16118 ;; *************** function _MXK_InitTestButton *****************
 16119 ;; Defined at:
 16120 ;;		line 10 in file "Library/MXK.c"
 16121 ;; Parameters:    Size  Location     Type
 16122 ;;		None
 16123 ;; Auto vars:     Size  Location     Type
 16124 ;;		None
 16125 ;; Return value:  Size  Location     Type
 16126 ;;                  1    wreg      void 
 16127 ;; Registers used:
 16128 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16129 ;; Tracked objects:
 16130 ;;		On entry : 0/0
 16131 ;;		On exit  : 0/0
 16132 ;;		Unchanged: 0/0
 16133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16138 ;;Total ram usage:        0 bytes
 16139 ;; Hardware stack levels used:    1
 16140 ;; Hardware stack levels required when called:   12
 16141 ;; This function calls:
 16142 ;;		_Port_SetPinType
 16143 ;; This function is called by:
 16144 ;;		_FunctInitButton
 16145 ;;		_Button_Init
 16146 ;; This function uses a non-reentrant model
 16147 ;;
 16148                           
 16149                           	psect	text91
 16150  0139B4                     __ptext91:
 16151                           	opt stack 0
 16152  0139B4                     _MXK_InitTestButton:
 16153                           	opt stack 16
 16154                           
 16155                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 16156                           
 16157                           ;incstack = 0
 16158  0139B4  0E9A               	movlw	low _PortB
 16159  0139B6  0100               	movlb	0	; () banked
 16160  0139B8  6FD9               	movwf	Port_SetPinType@pInput& (0+255),b
 16161  0139BA  0E01               	movlw	high _PortB
 16162  0139BC  6FDA               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16163  0139BE  0E04               	movlw	4
 16164  0139C0  6FDB               	movwf	Port_SetPinType@pPin& (0+255),b
 16165  0139C2  0E00               	movlw	0
 16166  0139C4  6FDC               	movwf	Port_SetPinType@pType& (0+255),b
 16167  0139C6  EC34  F087         	call	_Port_SetPinType	;wreg free
 16168  0139CA  0012               	return		;funcret
 16169  0139CC                     __end_of_MXK_InitTestButton:
 16170                           	opt stack 0
 16171                           tosu	equ	0xFFF
 16172                           tosh	equ	0xFFE
 16173                           tosl	equ	0xFFD
 16174                           pclath	equ	0xFFA
 16175                           tblptru	equ	0xFF8
 16176                           tblptrh	equ	0xFF7
 16177                           tblptrl	equ	0xFF6
 16178                           tablat	equ	0xFF5
 16179                           prodh	equ	0xFF4
 16180                           prodl	equ	0xFF3
 16181                           intcon	equ	0xFF2
 16182                           postinc0	equ	0xFEE
 16183                           wreg	equ	0xFE8
 16184                           indf1	equ	0xFE7
 16185                           postdec1	equ	0xFE5
 16186                           fsr1h	equ	0xFE2
 16187                           fsr1l	equ	0xFE1
 16188                           indf2	equ	0xFDF
 16189                           postinc2	equ	0xFDE
 16190                           postdec2	equ	0xFDD
 16191                           plusw2	equ	0xFDB
 16192                           fsr2h	equ	0xFDA
 16193                           fsr2l	equ	0xFD9
 16194                           status	equ	0xFD8
 16195                           
 16196 ;; *************** function _Port_SetPinType *****************
 16197 ;; Defined at:
 16198 ;;		line 189 in file "Library/Port.c"
 16199 ;; Parameters:    Size  Location     Type
 16200 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16201 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16202 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16203 ;;  pPin            1   40[BANK0 ] enum E6750
 16204 ;;  pType           1   41[BANK0 ] enum E6795
 16205 ;; Auto vars:     Size  Location     Type
 16206 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 16207 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 16208 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 16209 ;;  Output          1   42[BANK0 ] enum E6475
 16210 ;; Return value:  Size  Location     Type
 16211 ;;                  1    wreg      enum E6475
 16212 ;; Registers used:
 16213 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16214 ;; Tracked objects:
 16215 ;;		On entry : 0/0
 16216 ;;		On exit  : 0/0
 16217 ;;		Unchanged: 0/0
 16218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16219 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16220 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16222 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16223 ;;Total ram usage:        7 bytes
 16224 ;; Hardware stack levels used:    1
 16225 ;; Hardware stack levels required when called:   11
 16226 ;; This function calls:
 16227 ;;		_Byte_SetBit
 16228 ;;		_PortProperty_Valid
 16229 ;;		_Word_SetPair
 16230 ;; This function is called by:
 16231 ;;		_Configure_GPIOs
 16232 ;;		_LED_Init
 16233 ;;		_Port_Init
 16234 ;;		_SPI_Init
 16235 ;;		_MXK_InitTestButton
 16236 ;;		_MXK_Init
 16237 ;;		_I2C_Init
 16238 ;;		_Motor_Init
 16239 ;; This function uses a non-reentrant model
 16240 ;;
 16241                           
 16242                           	psect	text92
 16243  010E68                     __ptext92:
 16244                           	opt stack 0
 16245  010E68                     _Port_SetPinType:
 16246                           	opt stack 18
 16247                           
 16248                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 16249                           
 16250                           ;incstack = 0
 16251  010E68  C0D9  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 16252  010E6C  C0DA  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 16253  010E70  CFDE F0DE          	movff	postinc2,Port_SetPinType@Props
 16254  010E74  CFDD F0DF          	movff	postdec2,Port_SetPinType@Props+1
 16255                           
 16256                           ;Port.c: 192: ePinError Output = ePinErrorState;
 16257  010E78  0E05               	movlw	5
 16258  010E7A  0100               	movlb	0	; () banked
 16259  010E7C  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16260                           
 16261                           ;Port.c: 193: switch (pType)
 16262  010E7E  D0A7               	goto	l412
 16263  010E80                     
 16264                           ; BSR set to: 0
 16265                           ;Port.c: 197: {
 16266                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16267                           
 16268                           ; BSR set to: 0
 16269  010E80  EE20 F002          	lfsr	2,2
 16270  010E84  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16271  010E86  26D9               	addwf	fsr2l,f,c
 16272  010E88  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16273  010E8A  22DA               	addwfc	fsr2h,f,c
 16274  010E8C  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16275  010E90  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16276  010E94  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16277  010E98  0E01               	movlw	1
 16278  010E9A  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16279  010E9C  EC47  F098         	call	_Byte_SetBit	;wreg free
 16280                           
 16281                           ;Port.c: 203: break;
 16282  010EA0  D0A4               	goto	l414
 16283  010EA2                     
 16284                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 16285  010EA2  C0DE  F0C2         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16286  010EA6  C0DF  F0C3         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16287  010EAA  0E01               	movlw	1
 16288  010EAC  0100               	movlb	0	; () banked
 16289  010EAE  6FC4               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16290  010EB0  C0DB  F0C5         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16291  010EB4  EC84  F096         	call	_PortProperty_Valid	;wreg free
 16292  010EB8  0100               	movlb	0	; () banked
 16293  010EBA  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16294  010EBC  51DD               	movf	Port_SetPinType@Output& (0+255),w,b
 16295  010EBE  A4D8               	btfss	status,2,c
 16296  010EC0  0012               	return	
 16297                           
 16298                           ; BSR set to: 0
 16299                           ;Port.c: 208: {
 16300                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 16301  010EC2  EE20 F002          	lfsr	2,2
 16302  010EC6  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16303  010EC8  26D9               	addwf	fsr2l,f,c
 16304  010ECA  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16305  010ECC  22DA               	addwfc	fsr2h,f,c
 16306  010ECE  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16307  010ED2  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16308  010ED6  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16309  010EDA  0E00               	movlw	0
 16310  010EDC  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16311  010EDE  EC47  F098         	call	_Byte_SetBit	;wreg free
 16312                           
 16313                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 16314  010EE2  0100               	movlb	0	; () banked
 16315  010EE4  EE20 F004          	lfsr	2,4
 16316  010EE8  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16317  010EEA  26D9               	addwf	fsr2l,f,c
 16318  010EEC  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16319  010EEE  22DA               	addwfc	fsr2h,f,c
 16320  010EF0  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16321  010EF4  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16322  010EF8  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16323  010EFC  0E00               	movlw	0
 16324  010EFE  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16325  010F00  EC47  F098         	call	_Byte_SetBit	;wreg free
 16326                           
 16327                           ;Port.c: 214: break;
 16328  010F04  D072               	goto	l414
 16329  010F06                     
 16330                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 16331                           
 16332                           ;Port.c: 218: case eTypeOutputOpenSource:
 16333  010F06  C0DE  F0C2         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16334  010F0A  C0DF  F0C3         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16335  010F0E  0E02               	movlw	2
 16336  010F10  0100               	movlb	0	; () banked
 16337  010F12  6FC4               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16338  010F14  C0DB  F0C5         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16339  010F18  EC84  F096         	call	_PortProperty_Valid	;wreg free
 16340  010F1C  0100               	movlb	0	; () banked
 16341  010F1E  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16342  010F20  51DD               	movf	Port_SetPinType@Output& (0+255),w,b
 16343  010F22  A4D8               	btfss	status,2,c
 16344  010F24  0012               	return	
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;Port.c: 220: {
 16348                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 16349  010F26  EE20 F002          	lfsr	2,2
 16350  010F2A  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16351  010F2C  26D9               	addwf	fsr2l,f,c
 16352  010F2E  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16353  010F30  22DA               	addwfc	fsr2h,f,c
 16354  010F32  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16355  010F36  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16356  010F3A  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16357  010F3E  0E01               	movlw	1
 16358  010F40  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16359  010F42  EC47  F098         	call	_Byte_SetBit	;wreg free
 16360                           
 16361                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 16362  010F46  0100               	movlb	0	; () banked
 16363  010F48  EE20 F004          	lfsr	2,4
 16364  010F4C  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16365  010F4E  26D9               	addwf	fsr2l,f,c
 16366  010F50  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16367  010F52  22DA               	addwfc	fsr2h,f,c
 16368  010F54  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16369  010F58  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16370  010F5C  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16371  010F60  0E01               	movlw	1
 16372  010F62  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16373  010F64  EC47  F098         	call	_Byte_SetBit	;wreg free
 16374                           
 16375                           ;Port.c: 226: break;
 16376  010F68  D040               	goto	l414
 16377  010F6A                     
 16378                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 16379                           
 16380                           ;Port.c: 230: case eTypeOutputPushPull:
 16381  010F6A  C0DE  F0C2         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 16382  010F6E  C0DF  F0C3         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 16383  010F72  0E00               	movlw	0
 16384  010F74  0100               	movlb	0	; () banked
 16385  010F76  6FC4               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 16386  010F78  C0DB  F0C5         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 16387  010F7C  EC84  F096         	call	_PortProperty_Valid	;wreg free
 16388  010F80  0100               	movlb	0	; () banked
 16389  010F82  6FDD               	movwf	Port_SetPinType@Output& (0+255),b
 16390  010F84  51DD               	movf	Port_SetPinType@Output& (0+255),w,b
 16391  010F86  A4D8               	btfss	status,2,c
 16392  010F88  0012               	return	
 16393                           
 16394                           ; BSR set to: 0
 16395                           ;Port.c: 232: {
 16396                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 16397  010F8A  EE20 F002          	lfsr	2,2
 16398  010F8E  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16399  010F90  26D9               	addwf	fsr2l,f,c
 16400  010F92  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16401  010F94  22DA               	addwfc	fsr2h,f,c
 16402  010F96  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16403  010F9A  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16404  010F9E  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16405  010FA2  0E00               	movlw	0
 16406  010FA4  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16407  010FA6  EC47  F098         	call	_Byte_SetBit	;wreg free
 16408                           
 16409                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 16410  010FAA  0100               	movlb	0	; () banked
 16411  010FAC  EE20 F004          	lfsr	2,4
 16412  010FB0  51D9               	movf	Port_SetPinType@pInput& (0+255),w,b
 16413  010FB2  26D9               	addwf	fsr2l,f,c
 16414  010FB4  51DA               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 16415  010FB6  22DA               	addwfc	fsr2h,f,c
 16416  010FB8  CFDE F0B3          	movff	postinc2,Byte_SetBit@pInput
 16417  010FBC  CFDD F0B4          	movff	postdec2,Byte_SetBit@pInput+1
 16418  010FC0  C0DB  F0B5         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 16419  010FC4  0E00               	movlw	0
 16420  010FC6  6FB6               	movwf	Byte_SetBit@pValue& (0+255),b
 16421  010FC8  EC47  F098         	call	_Byte_SetBit	;wreg free
 16422                           
 16423                           ;Port.c: 239: }
 16424                           
 16425                           ;Port.c: 238: break;
 16426  010FCC  D00E               	goto	l414
 16427  010FCE                     l412:
 16428  010FCE  0100               	movlb	0	; () banked
 16429  010FD0  51DC               	movf	Port_SetPinType@pType& (0+255),w,b
 16430                           
 16431                           ; Switch size 1, requested type "space"
 16432                           ; Number of cases is 4, Range of values is 0 to 3
 16433                           ; switch strategies available:
 16434                           ; Name         Instructions Cycles
 16435                           ; simple_byte           13     7 (average)
 16436                           ;	Chosen strategy is simple_byte
 16437  010FD2  0A00               	xorlw	0	; case 0
 16438  010FD4  B4D8               	btfsc	status,2,c
 16439  010FD6  D754               	goto	l413
 16440  010FD8  0A01               	xorlw	1	; case 1
 16441  010FDA  B4D8               	btfsc	status,2,c
 16442  010FDC  D762               	goto	l415
 16443  010FDE  0A03               	xorlw	3	; case 2
 16444  010FE0  B4D8               	btfsc	status,2,c
 16445  010FE2  D791               	goto	l417
 16446  010FE4  0A01               	xorlw	1	; case 3
 16447  010FE6  B4D8               	btfsc	status,2,c
 16448  010FE8  D7C0               	goto	l421
 16449  010FEA                     l414:
 16450                           
 16451                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 16452                           
 16453                           ; BSR set to: 0
 16454  010FEA  0E08               	movlw	8
 16455  010FEC  0100               	movlb	0	; () banked
 16456  010FEE  25D9               	addwf	Port_SetPinType@pInput& (0+255),w,b
 16457  010FF0  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16458  010FF2  0E00               	movlw	0
 16459  010FF4  21DA               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 16460  010FF6  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16461  010FF8  C0DB  F0C4         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 16462  010FFC  C0DC  F0C5         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 16463  011000  EC76  F09A         	call	_Word_SetPair	;wreg free
 16464  011004  0012               	return	
 16465  011006                     __end_of_Port_SetPinType:
 16466                           	opt stack 0
 16467                           tosu	equ	0xFFF
 16468                           tosh	equ	0xFFE
 16469                           tosl	equ	0xFFD
 16470                           pclath	equ	0xFFA
 16471                           tblptru	equ	0xFF8
 16472                           tblptrh	equ	0xFF7
 16473                           tblptrl	equ	0xFF6
 16474                           tablat	equ	0xFF5
 16475                           prodh	equ	0xFF4
 16476                           prodl	equ	0xFF3
 16477                           intcon	equ	0xFF2
 16478                           postinc0	equ	0xFEE
 16479                           wreg	equ	0xFE8
 16480                           indf1	equ	0xFE7
 16481                           postdec1	equ	0xFE5
 16482                           fsr1h	equ	0xFE2
 16483                           fsr1l	equ	0xFE1
 16484                           indf2	equ	0xFDF
 16485                           postinc2	equ	0xFDE
 16486                           postdec2	equ	0xFDD
 16487                           plusw2	equ	0xFDB
 16488                           fsr2h	equ	0xFDA
 16489                           fsr2l	equ	0xFD9
 16490                           status	equ	0xFD8
 16491                           
 16492 ;; *************** function _Byte_SetBit *****************
 16493 ;; Defined at:
 16494 ;;		line 32 in file "Library/Types.c"
 16495 ;; Parameters:    Size  Location     Type
 16496 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16497 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 16498 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 16499 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16500 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16501 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16502 ;;		 -> NULL(0), 
 16503 ;;  pBit            1    2[BANK0 ] unsigned char 
 16504 ;;  pValue          1    3[BANK0 ] unsigned char 
 16505 ;; Auto vars:     Size  Location     Type
 16506 ;;		None
 16507 ;; Return value:  Size  Location     Type
 16508 ;;                  1    wreg      void 
 16509 ;; Registers used:
 16510 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16511 ;; Tracked objects:
 16512 ;;		On entry : 0/0
 16513 ;;		On exit  : 0/0
 16514 ;;		Unchanged: 0/0
 16515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16518 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16519 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16520 ;;Total ram usage:        7 bytes
 16521 ;; Hardware stack levels used:    1
 16522 ;; Hardware stack levels required when called:    7
 16523 ;; This function calls:
 16524 ;;		Nothing
 16525 ;; This function is called by:
 16526 ;;		_Port_SetPinType
 16527 ;;		_Port_SetPin
 16528 ;;		_SPI_Init
 16529 ;;		_SPI_MinSpeed
 16530 ;;		_SPI_MaxSpeed
 16531 ;;		_Word_SetBit
 16532 ;;		_I2C_Init
 16533 ;; This function uses a non-reentrant model
 16534 ;;
 16535                           
 16536                           	psect	text93
 16537  01308E                     __ptext93:
 16538                           	opt stack 0
 16539  01308E                     _Byte_SetBit:
 16540                           	opt stack 21
 16541                           
 16542                           ;Types.c: 34: pValue &= 1;
 16543                           
 16544                           ;incstack = 0
 16545  01308E  0E01               	movlw	1
 16546  013090  0100               	movlb	0	; () banked
 16547  013092  17B6               	andwf	Byte_SetBit@pValue& (0+255),f,b
 16548                           
 16549                           ; BSR set to: 0
 16550                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 16551  013094  C0B5  F0B7         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16552  013098  0E01               	movlw	1
 16553  01309A  6FB8               	movwf	(??_Byte_SetBit+1)& (0+255),b
 16554  01309C  2BB7               	incf	??_Byte_SetBit& (0+255),f,b
 16555  01309E  D002               	goto	u7824
 16556  0130A0                     u7825:
 16557  0130A0  90D8               	bcf	status,0,c
 16558  0130A2  37B8               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16559  0130A4                     u7824:
 16560  0130A4  2FB7               	decfsz	??_Byte_SetBit& (0+255),f,b
 16561  0130A6  D7FC               	goto	u7825
 16562  0130A8  0100               	movlb	0	; () banked
 16563  0130AA  51B8               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16564  0130AC  0AFF               	xorlw	255
 16565  0130AE  6FB9               	movwf	(??_Byte_SetBit+2)& (0+255),b
 16566  0130B0  C0B3  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16567  0130B4  C0B4  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16568  0130B8  51B9               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 16569  0130BA  16DF               	andwf	indf2,f,c
 16570                           
 16571                           ; BSR set to: 0
 16572                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 16573  0130BC  C0B5  F0B7         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 16574  0130C0  C0B6  F0B8         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 16575  0130C4  2BB7               	incf	??_Byte_SetBit& (0+255),f,b
 16576  0130C6  D002               	goto	u7834
 16577  0130C8                     u7835:
 16578  0130C8  90D8               	bcf	status,0,c
 16579  0130CA  37B8               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 16580  0130CC                     u7834:
 16581  0130CC  2FB7               	decfsz	??_Byte_SetBit& (0+255),f,b
 16582  0130CE  D7FC               	goto	u7835
 16583  0130D0  C0B3  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 16584  0130D4  C0B4  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 16585  0130D8  0100               	movlb	0	; () banked
 16586  0130DA  51B8               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 16587  0130DC  12DF               	iorwf	indf2,f,c
 16588                           
 16589                           ; BSR set to: 0
 16590  0130DE  0012               	return		;funcret
 16591  0130E0                     __end_of_Byte_SetBit:
 16592                           	opt stack 0
 16593                           tosu	equ	0xFFF
 16594                           tosh	equ	0xFFE
 16595                           tosl	equ	0xFFD
 16596                           pclath	equ	0xFFA
 16597                           tblptru	equ	0xFF8
 16598                           tblptrh	equ	0xFF7
 16599                           tblptrl	equ	0xFF6
 16600                           tablat	equ	0xFF5
 16601                           prodh	equ	0xFF4
 16602                           prodl	equ	0xFF3
 16603                           intcon	equ	0xFF2
 16604                           postinc0	equ	0xFEE
 16605                           wreg	equ	0xFE8
 16606                           indf1	equ	0xFE7
 16607                           postdec1	equ	0xFE5
 16608                           fsr1h	equ	0xFE2
 16609                           fsr1l	equ	0xFE1
 16610                           indf2	equ	0xFDF
 16611                           postinc2	equ	0xFDE
 16612                           postdec2	equ	0xFDD
 16613                           plusw2	equ	0xFDB
 16614                           fsr2h	equ	0xFDA
 16615                           fsr2l	equ	0xFD9
 16616                           status	equ	0xFD8
 16617                           
 16618 ;; *************** function _Port_SetQuadType *****************
 16619 ;; Defined at:
 16620 ;;		line 399 in file "Library/Port.c"
 16621 ;; Parameters:    Size  Location     Type
 16622 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16623 ;;		 -> PortB(10), PortD(10), 
 16624 ;;  pQuad           1   56[BANK0 ] enum E6776
 16625 ;;  pType           1   57[BANK0 ] enum E6795
 16626 ;; Auto vars:     Size  Location     Type
 16627 ;;  Output          1   58[BANK0 ] enum E6475
 16628 ;; Return value:  Size  Location     Type
 16629 ;;                  1    wreg      enum E6475
 16630 ;; Registers used:
 16631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16632 ;; Tracked objects:
 16633 ;;		On entry : 0/0
 16634 ;;		On exit  : 0/0
 16635 ;;		Unchanged: 0/0
 16636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16637 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16640 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16641 ;;Total ram usage:        5 bytes
 16642 ;; Hardware stack levels used:    1
 16643 ;; Hardware stack levels required when called:   13
 16644 ;; This function calls:
 16645 ;;		_Byte_SetQuad
 16646 ;;		_Port_CheckQuadType
 16647 ;;		_Word_SetPair
 16648 ;; This function is called by:
 16649 ;;		_MXK_InitDIPSwitch
 16650 ;;		_MXK_Init
 16651 ;; This function uses a non-reentrant model
 16652 ;;
 16653                           
 16654                           	psect	text94
 16655  0108D2                     __ptext94:
 16656                           	opt stack 0
 16657  0108D2                     _Port_SetQuadType:
 16658                           	opt stack 16
 16659                           
 16660                           ;Port.c: 401: ePinError Output = ePinErrorState;
 16661                           
 16662                           ; BSR set to: 0
 16663                           ;incstack = 0
 16664  0108D2  0E05               	movlw	5
 16665  0108D4  0100               	movlb	0	; () banked
 16666  0108D6  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16667                           
 16668                           ;Port.c: 403: switch (pType)
 16669  0108D8  D0B8               	goto	l476
 16670  0108DA                     
 16671                           ; BSR set to: 0
 16672                           ;Port.c: 407: {
 16673                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 16674                           
 16675                           ; BSR set to: 0
 16676  0108DA  EE20 F002          	lfsr	2,2
 16677  0108DE  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16678  0108E0  26D9               	addwf	fsr2l,f,c
 16679  0108E2  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16680  0108E4  22DA               	addwfc	fsr2h,f,c
 16681  0108E6  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16682  0108EA  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16683  0108EE  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16684  0108F2  0E0F               	movlw	15
 16685  0108F4  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16686  0108F6  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16687                           
 16688                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16689  0108FA  0100               	movlb	0	; () banked
 16690  0108FC  EE20 F004          	lfsr	2,4
 16691  010900  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16692  010902  26D9               	addwf	fsr2l,f,c
 16693  010904  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16694  010906  22DA               	addwfc	fsr2h,f,c
 16695  010908  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16696  01090C  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16697  010910  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16698  010914  0E00               	movlw	0
 16699  010916  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16700  010918  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16701                           
 16702                           ;Port.c: 413: }
 16703                           ;Port.c: 415: break;
 16704  01091C  D0A4               	goto	l478
 16705  01091E                     
 16706                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16707  01091E  C0E9  F0E2         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16708  010922  C0EA  F0E3         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16709  010926  C0EB  F0E4         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16710  01092A  0E03               	movlw	3
 16711  01092C  0100               	movlb	0	; () banked
 16712  01092E  6FE5               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16713  010930  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
 16714  010934  0100               	movlb	0	; () banked
 16715  010936  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16716  010938  51ED               	movf	Port_SetQuadType@Output& (0+255),w,b
 16717  01093A  A4D8               	btfss	status,2,c
 16718  01093C  0012               	return	
 16719                           
 16720                           ; BSR set to: 0
 16721                           ;Port.c: 418: {
 16722                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 16723  01093E  EE20 F002          	lfsr	2,2
 16724  010942  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16725  010944  26D9               	addwf	fsr2l,f,c
 16726  010946  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16727  010948  22DA               	addwfc	fsr2h,f,c
 16728  01094A  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16729  01094E  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16730  010952  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16731  010956  0E00               	movlw	0
 16732  010958  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16733  01095A  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16734                           
 16735                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16736  01095E  0100               	movlb	0	; () banked
 16737  010960  EE20 F004          	lfsr	2,4
 16738  010964  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16739  010966  26D9               	addwf	fsr2l,f,c
 16740  010968  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16741  01096A  22DA               	addwfc	fsr2h,f,c
 16742  01096C  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16743  010970  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16744  010974  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16745  010978  0E00               	movlw	0
 16746  01097A  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16747  01097C  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16748                           
 16749                           ;Port.c: 424: }
 16750  010980  D072               	goto	l478
 16751  010982                     
 16752                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16753  010982  C0E9  F0E2         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16754  010986  C0EA  F0E3         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16755  01098A  C0EB  F0E4         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16756  01098E  0E03               	movlw	3
 16757  010990  0100               	movlb	0	; () banked
 16758  010992  6FE5               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16759  010994  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
 16760  010998  0100               	movlb	0	; () banked
 16761  01099A  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16762  01099C  51ED               	movf	Port_SetQuadType@Output& (0+255),w,b
 16763  01099E  A4D8               	btfss	status,2,c
 16764  0109A0  0012               	return	
 16765                           
 16766                           ; BSR set to: 0
 16767                           ;Port.c: 429: {
 16768                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 16769  0109A2  EE20 F002          	lfsr	2,2
 16770  0109A6  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16771  0109A8  26D9               	addwf	fsr2l,f,c
 16772  0109AA  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16773  0109AC  22DA               	addwfc	fsr2h,f,c
 16774  0109AE  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16775  0109B2  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16776  0109B6  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16777  0109BA  0E0F               	movlw	15
 16778  0109BC  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16779  0109BE  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16780                           
 16781                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 16782  0109C2  0100               	movlb	0	; () banked
 16783  0109C4  EE20 F004          	lfsr	2,4
 16784  0109C8  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16785  0109CA  26D9               	addwf	fsr2l,f,c
 16786  0109CC  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16787  0109CE  22DA               	addwfc	fsr2h,f,c
 16788  0109D0  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16789  0109D4  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16790  0109D8  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16791  0109DC  0E0F               	movlw	15
 16792  0109DE  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16793  0109E0  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16794                           
 16795                           ;Port.c: 435: }
 16796  0109E4  D040               	goto	l478
 16797  0109E6                     
 16798                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 16799  0109E6  C0E9  F0E2         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 16800  0109EA  C0EA  F0E3         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 16801  0109EE  C0EB  F0E4         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 16802  0109F2  0E03               	movlw	3
 16803  0109F4  0100               	movlb	0	; () banked
 16804  0109F6  6FE5               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 16805  0109F8  ECC0  F098         	call	_Port_CheckQuadType	;wreg free
 16806  0109FC  0100               	movlb	0	; () banked
 16807  0109FE  6FED               	movwf	Port_SetQuadType@Output& (0+255),b
 16808  010A00  51ED               	movf	Port_SetQuadType@Output& (0+255),w,b
 16809  010A02  A4D8               	btfss	status,2,c
 16810  010A04  0012               	return	
 16811                           
 16812                           ; BSR set to: 0
 16813                           ;Port.c: 440: {
 16814                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 16815  010A06  EE20 F002          	lfsr	2,2
 16816  010A0A  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16817  010A0C  26D9               	addwf	fsr2l,f,c
 16818  010A0E  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16819  010A10  22DA               	addwfc	fsr2h,f,c
 16820  010A12  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16821  010A16  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16822  010A1A  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16823  010A1E  0E00               	movlw	0
 16824  010A20  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16825  010A22  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16826                           
 16827                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 16828  010A26  0100               	movlb	0	; () banked
 16829  010A28  EE20 F004          	lfsr	2,4
 16830  010A2C  51E9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 16831  010A2E  26D9               	addwf	fsr2l,f,c
 16832  010A30  51EA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16833  010A32  22DA               	addwfc	fsr2h,f,c
 16834  010A34  CFDE F0BE          	movff	postinc2,Byte_SetQuad@pInput
 16835  010A38  CFDD F0BF          	movff	postdec2,Byte_SetQuad@pInput+1
 16836  010A3C  C0EB  F0C0         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 16837  010A40  0E00               	movlw	0
 16838  010A42  6FC1               	movwf	Byte_SetQuad@pValue& (0+255),b
 16839  010A44  EC39  F09C         	call	_Byte_SetQuad	;wreg free
 16840                           
 16841                           ;Port.c: 446: }
 16842  010A48  D00E               	goto	l478
 16843  010A4A                     l476:
 16844  010A4A  0100               	movlb	0	; () banked
 16845  010A4C  51EC               	movf	Port_SetQuadType@pType& (0+255),w,b
 16846                           
 16847                           ; Switch size 1, requested type "space"
 16848                           ; Number of cases is 4, Range of values is 0 to 3
 16849                           ; switch strategies available:
 16850                           ; Name         Instructions Cycles
 16851                           ; simple_byte           13     7 (average)
 16852                           ;	Chosen strategy is simple_byte
 16853  010A4E  0A00               	xorlw	0	; case 0
 16854  010A50  B4D8               	btfsc	status,2,c
 16855  010A52  D743               	goto	l477
 16856  010A54  0A01               	xorlw	1	; case 1
 16857  010A56  B4D8               	btfsc	status,2,c
 16858  010A58  D762               	goto	l479
 16859  010A5A  0A03               	xorlw	3	; case 2
 16860  010A5C  B4D8               	btfsc	status,2,c
 16861  010A5E  D791               	goto	l483
 16862  010A60  0A01               	xorlw	1	; case 3
 16863  010A62  B4D8               	btfsc	status,2,c
 16864  010A64  D7C0               	goto	l486
 16865  010A66                     l478:
 16866                           
 16867                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 16868                           
 16869                           ; BSR set to: 0
 16870  010A66  0E08               	movlw	8
 16871  010A68  0100               	movlb	0	; () banked
 16872  010A6A  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16873  010A6C  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16874  010A6E  0E00               	movlw	0
 16875  010A70  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16876  010A72  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16877  010A74  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16878  010A76  0D04               	mullw	4
 16879  010A78  CFF3 F0C4          	movff	prodl,Word_SetPair@pPair
 16880  010A7C  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16881  010A80  EC76  F09A         	call	_Word_SetPair	;wreg free
 16882                           
 16883                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 16884  010A84  0E08               	movlw	8
 16885  010A86  0100               	movlb	0	; () banked
 16886  010A88  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16887  010A8A  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16888  010A8C  0E00               	movlw	0
 16889  010A8E  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16890  010A90  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16891  010A92  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16892  010A94  0D04               	mullw	4
 16893  010A96  28F3               	incf	prodl,w,c
 16894  010A98  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
 16895  010A9A  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16896  010A9E  EC76  F09A         	call	_Word_SetPair	;wreg free
 16897                           
 16898                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 16899  010AA2  0E08               	movlw	8
 16900  010AA4  0100               	movlb	0	; () banked
 16901  010AA6  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16902  010AA8  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16903  010AAA  0E00               	movlw	0
 16904  010AAC  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16905  010AAE  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16906  010AB0  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16907  010AB2  0D04               	mullw	4
 16908  010AB4  50F3               	movf	prodl,w,c
 16909  010AB6  0F02               	addlw	2
 16910  010AB8  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
 16911  010ABA  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16912  010ABE  EC76  F09A         	call	_Word_SetPair	;wreg free
 16913                           
 16914                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 16915  010AC2  0E08               	movlw	8
 16916  010AC4  0100               	movlb	0	; () banked
 16917  010AC6  25E9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16918  010AC8  6FC2               	movwf	Word_SetPair@pInput& (0+255),b
 16919  010ACA  0E00               	movlw	0
 16920  010ACC  21EA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16921  010ACE  6FC3               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16922  010AD0  51EB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16923  010AD2  0D04               	mullw	4
 16924  010AD4  50F3               	movf	prodl,w,c
 16925  010AD6  0F03               	addlw	3
 16926  010AD8  6FC4               	movwf	Word_SetPair@pPair& (0+255),b
 16927  010ADA  C0EC  F0C5         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16928  010ADE  EC76  F09A         	call	_Word_SetPair	;wreg free
 16929  010AE2  0012               	return	
 16930  010AE4                     __end_of_Port_SetQuadType:
 16931                           	opt stack 0
 16932                           tosu	equ	0xFFF
 16933                           tosh	equ	0xFFE
 16934                           tosl	equ	0xFFD
 16935                           pclath	equ	0xFFA
 16936                           tblptru	equ	0xFF8
 16937                           tblptrh	equ	0xFF7
 16938                           tblptrl	equ	0xFF6
 16939                           tablat	equ	0xFF5
 16940                           prodh	equ	0xFF4
 16941                           prodl	equ	0xFF3
 16942                           intcon	equ	0xFF2
 16943                           postinc0	equ	0xFEE
 16944                           wreg	equ	0xFE8
 16945                           indf1	equ	0xFE7
 16946                           postdec1	equ	0xFE5
 16947                           fsr1h	equ	0xFE2
 16948                           fsr1l	equ	0xFE1
 16949                           indf2	equ	0xFDF
 16950                           postinc2	equ	0xFDE
 16951                           postdec2	equ	0xFDD
 16952                           plusw2	equ	0xFDB
 16953                           fsr2h	equ	0xFDA
 16954                           fsr2l	equ	0xFD9
 16955                           status	equ	0xFD8
 16956                           
 16957 ;; *************** function _Word_SetPair *****************
 16958 ;; Defined at:
 16959 ;;		line 149 in file "Library/Types.c"
 16960 ;; Parameters:    Size  Location     Type
 16961 ;;  pInput          2   15[BANK0 ] PTR struct Word
 16962 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16963 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16964 ;;  pPair           1   17[BANK0 ] unsigned char 
 16965 ;;  pValue          1   18[BANK0 ] unsigned char 
 16966 ;; Auto vars:     Size  Location     Type
 16967 ;;		None
 16968 ;; Return value:  Size  Location     Type
 16969 ;;                  1    wreg      void 
 16970 ;; Registers used:
 16971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16972 ;; Tracked objects:
 16973 ;;		On entry : 0/0
 16974 ;;		On exit  : 0/0
 16975 ;;		Unchanged: 0/0
 16976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16977 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16980 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16981 ;;Total ram usage:        4 bytes
 16982 ;; Hardware stack levels used:    1
 16983 ;; Hardware stack levels required when called:    9
 16984 ;; This function calls:
 16985 ;;		_Byte_SetPair
 16986 ;; This function is called by:
 16987 ;;		_Port_SetPinType
 16988 ;;		_Port_SetQuadType
 16989 ;;		_Port_SetType
 16990 ;;		_Port_SetPairType
 16991 ;;		_PortProperty_Init
 16992 ;; This function uses a non-reentrant model
 16993 ;;
 16994                           
 16995                           	psect	text95
 16996  0134EC                     __ptext95:
 16997                           	opt stack 0
 16998  0134EC                     _Word_SetPair:
 16999                           	opt stack 19
 17000                           
 17001                           ;Types.c: 151: if (pPair >= 4)
 17002                           
 17003                           ;incstack = 0
 17004  0134EC  0E03               	movlw	3
 17005  0134EE  0100               	movlb	0	; () banked
 17006  0134F0  65C4               	cpfsgt	Word_SetPair@pPair& (0+255),b
 17007  0134F2  D00E               	goto	l776
 17008                           
 17009                           ; BSR set to: 0
 17010                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 17011  0134F4  0E01               	movlw	1
 17012  0134F6  25C2               	addwf	Word_SetPair@pInput& (0+255),w,b
 17013  0134F8  6FBE               	movwf	Byte_SetPair@pInput& (0+255),b
 17014  0134FA  0E00               	movlw	0
 17015  0134FC  21C3               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 17016  0134FE  6FBF               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 17017  013500  51C4               	movf	Word_SetPair@pPair& (0+255),w,b
 17018  013502  0FFC               	addlw	252
 17019  013504  6FC0               	movwf	Byte_SetPair@pPair& (0+255),b
 17020  013506  C0C5  F0C1         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17021  01350A  EC29  F09C         	call	_Byte_SetPair	;wreg free
 17022  01350E  0012               	return	
 17023  013510                     l776:
 17024                           
 17025                           ;Types.c: 153: else
 17026                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 17027  013510  C0C2  F0BE         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 17028  013514  C0C3  F0BF         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 17029  013518  C0C4  F0C0         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 17030  01351C  C0C5  F0C1         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 17031  013520  EC29  F09C         	call	_Byte_SetPair	;wreg free
 17032  013524  0012               	return	
 17033  013526                     __end_of_Word_SetPair:
 17034                           	opt stack 0
 17035                           tosu	equ	0xFFF
 17036                           tosh	equ	0xFFE
 17037                           tosl	equ	0xFFD
 17038                           pclath	equ	0xFFA
 17039                           tblptru	equ	0xFF8
 17040                           tblptrh	equ	0xFF7
 17041                           tblptrl	equ	0xFF6
 17042                           tablat	equ	0xFF5
 17043                           prodh	equ	0xFF4
 17044                           prodl	equ	0xFF3
 17045                           intcon	equ	0xFF2
 17046                           postinc0	equ	0xFEE
 17047                           wreg	equ	0xFE8
 17048                           indf1	equ	0xFE7
 17049                           postdec1	equ	0xFE5
 17050                           fsr1h	equ	0xFE2
 17051                           fsr1l	equ	0xFE1
 17052                           indf2	equ	0xFDF
 17053                           postinc2	equ	0xFDE
 17054                           postdec2	equ	0xFDD
 17055                           plusw2	equ	0xFDB
 17056                           fsr2h	equ	0xFDA
 17057                           fsr2l	equ	0xFD9
 17058                           status	equ	0xFD8
 17059                           
 17060 ;; *************** function _Byte_SetPair *****************
 17061 ;; Defined at:
 17062 ;;		line 83 in file "Library/Types.c"
 17063 ;; Parameters:    Size  Location     Type
 17064 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17065 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17066 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17067 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 17068 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 17069 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 17070 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 17071 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 17072 ;;		 -> NULL(0), 
 17073 ;;  pPair           1   13[BANK0 ] unsigned char 
 17074 ;;  pValue          1   14[BANK0 ] unsigned char 
 17075 ;; Auto vars:     Size  Location     Type
 17076 ;;		None
 17077 ;; Return value:  Size  Location     Type
 17078 ;;                  1    wreg      void 
 17079 ;; Registers used:
 17080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17081 ;; Tracked objects:
 17082 ;;		On entry : 0/0
 17083 ;;		On exit  : 0/0
 17084 ;;		Unchanged: 0/0
 17085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17086 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17089 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17090 ;;Total ram usage:        4 bytes
 17091 ;; Hardware stack levels used:    1
 17092 ;; Hardware stack levels required when called:    8
 17093 ;; This function calls:
 17094 ;;		_Byte_SetZone
 17095 ;; This function is called by:
 17096 ;;		_Word_SetPair
 17097 ;;		_Port_SetPairType
 17098 ;;		_Port_SetPair
 17099 ;; This function uses a non-reentrant model
 17100 ;;
 17101                           
 17102                           	psect	text96
 17103  013852                     __ptext96:
 17104                           	opt stack 0
 17105  013852                     _Byte_SetPair:
 17106                           	opt stack 19
 17107                           
 17108                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 17109                           
 17110                           ;incstack = 0
 17111  013852  C0BE  F0B3         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 17112  013856  C0BF  F0B4         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 17113  01385A  0E04               	movlw	4
 17114  01385C  0100               	movlb	0	; () banked
 17115  01385E  6FB5               	movwf	Byte_SetZone@pMax& (0+255),b
 17116  013860  C0C0  F0B6         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 17117  013864  0E02               	movlw	2
 17118  013866  6FB7               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17119  013868  C0C1  F0B8         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 17120  01386C  EC40  F092         	call	_Byte_SetZone	;wreg free
 17121  013870  0012               	return		;funcret
 17122  013872                     __end_of_Byte_SetPair:
 17123                           	opt stack 0
 17124                           tosu	equ	0xFFF
 17125                           tosh	equ	0xFFE
 17126                           tosl	equ	0xFFD
 17127                           pclath	equ	0xFFA
 17128                           tblptru	equ	0xFF8
 17129                           tblptrh	equ	0xFF7
 17130                           tblptrl	equ	0xFF6
 17131                           tablat	equ	0xFF5
 17132                           prodh	equ	0xFF4
 17133                           prodl	equ	0xFF3
 17134                           intcon	equ	0xFF2
 17135                           postinc0	equ	0xFEE
 17136                           wreg	equ	0xFE8
 17137                           indf1	equ	0xFE7
 17138                           postdec1	equ	0xFE5
 17139                           fsr1h	equ	0xFE2
 17140                           fsr1l	equ	0xFE1
 17141                           indf2	equ	0xFDF
 17142                           postinc2	equ	0xFDE
 17143                           postdec2	equ	0xFDD
 17144                           plusw2	equ	0xFDB
 17145                           fsr2h	equ	0xFDA
 17146                           fsr2l	equ	0xFD9
 17147                           status	equ	0xFD8
 17148                           
 17149 ;; *************** function _Port_CheckQuadType *****************
 17150 ;; Defined at:
 17151 ;;		line 126 in file "Library/Port.c"
 17152 ;; Parameters:    Size  Location     Type
 17153 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 17154 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17155 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17156 ;;  pQuad           1   49[BANK0 ] enum E6776
 17157 ;;  pDrive          1   50[BANK0 ] enum E6469
 17158 ;; Auto vars:     Size  Location     Type
 17159 ;;  Output          1   53[BANK0 ] enum E6475
 17160 ;;  Pair2           1   52[BANK0 ] enum E6760
 17161 ;;  Pair1           1   51[BANK0 ] enum E6760
 17162 ;; Return value:  Size  Location     Type
 17163 ;;                  1    wreg      enum E6475
 17164 ;; Registers used:
 17165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17166 ;; Tracked objects:
 17167 ;;		On entry : 0/0
 17168 ;;		On exit  : 0/0
 17169 ;;		Unchanged: 0/0
 17170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17171 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17172 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17174 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17175 ;;Total ram usage:        7 bytes
 17176 ;; Hardware stack levels used:    1
 17177 ;; Hardware stack levels required when called:   12
 17178 ;; This function calls:
 17179 ;;		_Port_CheckPairType
 17180 ;; This function is called by:
 17181 ;;		_Port_CheckPortType
 17182 ;;		_Port_SetQuadType
 17183 ;; This function uses a non-reentrant model
 17184 ;;
 17185                           
 17186                           	psect	text97
 17187  013180                     __ptext97:
 17188                           	opt stack 0
 17189  013180                     _Port_CheckQuadType:
 17190                           	opt stack 15
 17191                           
 17192                           ;Port.c: 128: ePinError Output = ePinErrorState;
 17193                           
 17194                           ;incstack = 0
 17195  013180  0E05               	movlw	5
 17196  013182  0100               	movlb	0	; () banked
 17197  013184  6FE8               	movwf	Port_CheckQuadType@Output& (0+255),b
 17198                           
 17199                           ; BSR set to: 0
 17200                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 17201  013186  51E4               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17202  013188  0D02               	mullw	2
 17203  01318A  CFF3 F0E6          	movff	prodl,Port_CheckQuadType@Pair1
 17204                           
 17205                           ; BSR set to: 0
 17206                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 17207  01318E  51E4               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 17208  013190  0D02               	mullw	2
 17209  013192  28F3               	incf	prodl,w,c
 17210  013194  6FE7               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 17211                           
 17212                           ; BSR set to: 0
 17213                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 17214  013196  C0E2  F0D9         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17215  01319A  C0E3  F0DA         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17216  01319E  C0E6  F0DB         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 17217  0131A2  C0E5  F0DC         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17218  0131A6  ECE8  F096         	call	_Port_CheckPairType	;wreg free
 17219  0131AA  0100               	movlb	0	; () banked
 17220  0131AC  6FE8               	movwf	Port_CheckQuadType@Output& (0+255),b
 17221  0131AE  51E8               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17222  0131B0  A4D8               	btfss	status,2,c
 17223  0131B2  D00C               	goto	l393
 17224                           
 17225                           ; BSR set to: 0
 17226                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 17227  0131B4  C0E2  F0D9         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 17228  0131B8  C0E3  F0DA         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 17229  0131BC  C0E7  F0DB         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 17230  0131C0  C0E5  F0DC         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 17231  0131C4  ECE8  F096         	call	_Port_CheckPairType	;wreg free
 17232  0131C8  0100               	movlb	0	; () banked
 17233  0131CA  6FE8               	movwf	Port_CheckQuadType@Output& (0+255),b
 17234  0131CC                     l393:
 17235                           
 17236                           ; BSR set to: 0
 17237                           ;Port.c: 136: return Output;
 17238                           
 17239                           ; BSR set to: 0
 17240  0131CC  51E8               	movf	Port_CheckQuadType@Output& (0+255),w,b
 17241  0131CE  0012               	return	
 17242  0131D0                     __end_of_Port_CheckQuadType:
 17243                           	opt stack 0
 17244                           tosu	equ	0xFFF
 17245                           tosh	equ	0xFFE
 17246                           tosl	equ	0xFFD
 17247                           pclath	equ	0xFFA
 17248                           tblptru	equ	0xFF8
 17249                           tblptrh	equ	0xFF7
 17250                           tblptrl	equ	0xFF6
 17251                           tablat	equ	0xFF5
 17252                           prodh	equ	0xFF4
 17253                           prodl	equ	0xFF3
 17254                           intcon	equ	0xFF2
 17255                           postinc0	equ	0xFEE
 17256                           wreg	equ	0xFE8
 17257                           indf1	equ	0xFE7
 17258                           postdec1	equ	0xFE5
 17259                           fsr1h	equ	0xFE2
 17260                           fsr1l	equ	0xFE1
 17261                           indf2	equ	0xFDF
 17262                           postinc2	equ	0xFDE
 17263                           postdec2	equ	0xFDD
 17264                           plusw2	equ	0xFDB
 17265                           fsr2h	equ	0xFDA
 17266                           fsr2l	equ	0xFD9
 17267                           status	equ	0xFD8
 17268                           
 17269 ;; *************** function _Port_CheckPairType *****************
 17270 ;; Defined at:
 17271 ;;		line 112 in file "Library/Port.c"
 17272 ;; Parameters:    Size  Location     Type
 17273 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 17274 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17275 ;;		 -> PortD(10), PortC(10), PortF(10), 
 17276 ;;  pPair           1   40[BANK0 ] enum E6760
 17277 ;;  pDrive          1   41[BANK0 ] enum E6469
 17278 ;; Auto vars:     Size  Location     Type
 17279 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 17280 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17281 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17282 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17283 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17284 ;;  Output          1   44[BANK0 ] enum E6475
 17285 ;;  Pin2            1   43[BANK0 ] enum E6750
 17286 ;;  Pin1            1   42[BANK0 ] enum E6750
 17287 ;; Return value:  Size  Location     Type
 17288 ;;                  1    wreg      enum E6475
 17289 ;; Registers used:
 17290 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17291 ;; Tracked objects:
 17292 ;;		On entry : 0/0
 17293 ;;		On exit  : 0/0
 17294 ;;		Unchanged: 0/0
 17295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17296 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17297 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17299 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17300 ;;Total ram usage:        9 bytes
 17301 ;; Hardware stack levels used:    1
 17302 ;; Hardware stack levels required when called:   11
 17303 ;; This function calls:
 17304 ;;		_PortProperty_Valid
 17305 ;; This function is called by:
 17306 ;;		_Port_CheckQuadType
 17307 ;;		_Port_SetPairType
 17308 ;; This function uses a non-reentrant model
 17309 ;;
 17310                           
 17311                           	psect	text98
 17312  012DD0                     __ptext98:
 17313                           	opt stack 0
 17314  012DD0                     _Port_CheckPairType:
 17315                           	opt stack 15
 17316                           
 17317                           ;Port.c: 114: ePinError Output = ePinErrorState;
 17318                           
 17319                           ; BSR set to: 0
 17320                           ;incstack = 0
 17321  012DD0  0E05               	movlw	5
 17322  012DD2  0100               	movlb	0	; () banked
 17323  012DD4  6FDF               	movwf	Port_CheckPairType@Output& (0+255),b
 17324                           
 17325                           ; BSR set to: 0
 17326                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 17327  012DD6  C0D9  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 17328  012DDA  C0DA  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 17329  012DDE  CFDE F0E0          	movff	postinc2,Port_CheckPairType@Props
 17330  012DE2  CFDD F0E1          	movff	postdec2,Port_CheckPairType@Props+1
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 17334  012DE6  51DB               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17335  012DE8  0D02               	mullw	2
 17336  012DEA  CFF3 F0DD          	movff	prodl,Port_CheckPairType@Pin1
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 17340  012DEE  51DB               	movf	Port_CheckPairType@pPair& (0+255),w,b
 17341  012DF0  0D02               	mullw	2
 17342  012DF2  28F3               	incf	prodl,w,c
 17343  012DF4  6FDE               	movwf	Port_CheckPairType@Pin2& (0+255),b
 17344                           
 17345                           ; BSR set to: 0
 17346                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 17347  012DF6  C0E0  F0C2         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17348  012DFA  C0E1  F0C3         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17349  012DFE  C0DC  F0C4         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17350  012E02  C0DD  F0C5         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 17351  012E06  EC84  F096         	call	_PortProperty_Valid	;wreg free
 17352  012E0A  0100               	movlb	0	; () banked
 17353  012E0C  6FDF               	movwf	Port_CheckPairType@Output& (0+255),b
 17354  012E0E  51DF               	movf	Port_CheckPairType@Output& (0+255),w,b
 17355  012E10  A4D8               	btfss	status,2,c
 17356  012E12  D00C               	goto	l389
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 17360  012E14  C0E0  F0C2         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 17361  012E18  C0E1  F0C3         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 17362  012E1C  C0DC  F0C4         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 17363  012E20  C0DE  F0C5         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 17364  012E24  EC84  F096         	call	_PortProperty_Valid	;wreg free
 17365  012E28  0100               	movlb	0	; () banked
 17366  012E2A  6FDF               	movwf	Port_CheckPairType@Output& (0+255),b
 17367  012E2C                     l389:
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;Port.c: 124: return Output;
 17371                           
 17372                           ; BSR set to: 0
 17373  012E2C  51DF               	movf	Port_CheckPairType@Output& (0+255),w,b
 17374  012E2E  0012               	return	
 17375  012E30                     __end_of_Port_CheckPairType:
 17376                           	opt stack 0
 17377                           tosu	equ	0xFFF
 17378                           tosh	equ	0xFFE
 17379                           tosl	equ	0xFFD
 17380                           pclath	equ	0xFFA
 17381                           tblptru	equ	0xFF8
 17382                           tblptrh	equ	0xFF7
 17383                           tblptrl	equ	0xFF6
 17384                           tablat	equ	0xFF5
 17385                           prodh	equ	0xFF4
 17386                           prodl	equ	0xFF3
 17387                           intcon	equ	0xFF2
 17388                           postinc0	equ	0xFEE
 17389                           wreg	equ	0xFE8
 17390                           indf1	equ	0xFE7
 17391                           postdec1	equ	0xFE5
 17392                           fsr1h	equ	0xFE2
 17393                           fsr1l	equ	0xFE1
 17394                           indf2	equ	0xFDF
 17395                           postinc2	equ	0xFDE
 17396                           postdec2	equ	0xFDD
 17397                           plusw2	equ	0xFDB
 17398                           fsr2h	equ	0xFDA
 17399                           fsr2l	equ	0xFD9
 17400                           status	equ	0xFD8
 17401                           
 17402 ;; *************** function _PortProperty_Valid *****************
 17403 ;; Defined at:
 17404 ;;		line 220 in file "Library/Types.c"
 17405 ;; Parameters:    Size  Location     Type
 17406 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 17407 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17408 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17409 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17410 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17411 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 17412 ;;  pPin            1   18[BANK0 ] unsigned char 
 17413 ;; Auto vars:     Size  Location     Type
 17414 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 17415 ;;  Pair            1   37[BANK0 ] enum E6469
 17416 ;; Return value:  Size  Location     Type
 17417 ;;                  1    wreg      enum E6475
 17418 ;; Registers used:
 17419 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17420 ;; Tracked objects:
 17421 ;;		On entry : 0/0
 17422 ;;		On exit  : 0/0
 17423 ;;		Unchanged: 0/0
 17424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17425 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17426 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17428 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17429 ;;Total ram usage:       23 bytes
 17430 ;; Hardware stack levels used:    1
 17431 ;; Hardware stack levels required when called:   10
 17432 ;; This function calls:
 17433 ;;		_Word_GetPair
 17434 ;; This function is called by:
 17435 ;;		_Port_CheckPairType
 17436 ;;		_Port_SetPinType
 17437 ;; This function uses a non-reentrant model
 17438 ;;
 17439                           
 17440                           	psect	text99
 17441  012D08                     __ptext99:
 17442                           	opt stack 0
 17443  012D08                     _PortProperty_Valid:
 17444                           	opt stack 15
 17445                           
 17446                           ;Types.c: 222: ePinDrive Pair;
 17447                           ;Types.c: 223: const ePinError Errors[4][4] =
 17448                           ;Types.c: 224: {
 17449                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 17450                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 17451                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 17452                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 17453                           ;Types.c: 230: };
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;incstack = 0
 17457  012D08  0EAD               	movlw	low PortProperty_Valid@F6830
 17458  012D0A  6EF6               	movwf	tblptrl,c
 17459  012D0C                     	if	1	;There is more than 1 active tblptr byte
 17460  012D0C  0EFC               	movlw	high PortProperty_Valid@F6830
 17461  012D0E  6EF7               	movwf	tblptrh,c
 17462  012D10                     	endif
 17463  012D10                     	if	1	;There are 3 active tblptr bytes
 17464  012D10  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 17465  012D12  6EF8               	movwf	tblptru,c
 17466  012D14                     	endif
 17467  012D14  EE20  F0C8         	lfsr	2,PortProperty_Valid@Errors
 17468  012D18  0E0F               	movlw	15
 17469  012D1A                     u7790:
 17470  012D1A  0009               	tblrd		*+
 17471  012D1C  CFF5 FFDE          	movff	tablat,postinc2
 17472  012D20  06E8               	decf	wreg,f,c
 17473  012D22  E2FB               	bc	u7790
 17474                           
 17475                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 17476  012D24  C0C2  F0BF         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 17477  012D28  C0C3  F0C0         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 17478  012D2C  C0C5  F0C1         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 17479  012D30  EC19  F09B         	call	_Word_GetPair	;wreg free
 17480  012D34  0100               	movlb	0	; () banked
 17481  012D36  6FD8               	movwf	PortProperty_Valid@Pair& (0+255),b
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 17485  012D38  0E04               	movlw	4
 17486  012D3A  61C4               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 17487  012D3C  D017               	goto	l819
 17488                           
 17489                           ; BSR set to: 0
 17490  012D3E  0E04               	movlw	4
 17491  012D40  61D8               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 17492  012D42  D014               	goto	l819
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 17496  012D44  51C4               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 17497  012D46  0D04               	mullw	4
 17498  012D48  0EC8               	movlw	low PortProperty_Valid@Errors
 17499  012D4A  6FC6               	movwf	??_PortProperty_Valid& (0+255),b
 17500  012D4C  0E00               	movlw	high PortProperty_Valid@Errors
 17501  012D4E  6FC7               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 17502  012D50  50F3               	movf	prodl,w,c
 17503  012D52  27C6               	addwf	??_PortProperty_Valid& (0+255),f,b
 17504  012D54  50F4               	movf	prodh,w,c
 17505  012D56  23C7               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 17506  012D58  51D8               	movf	PortProperty_Valid@Pair& (0+255),w,b
 17507  012D5A  0D01               	mullw	1
 17508  012D5C  50F3               	movf	prodl,w,c
 17509  012D5E  25C6               	addwf	??_PortProperty_Valid& (0+255),w,b
 17510  012D60  6ED9               	movwf	fsr2l,c
 17511  012D62  50F4               	movf	prodh,w,c
 17512  012D64  21C7               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 17513  012D66  6EDA               	movwf	fsr2h,c
 17514  012D68  50DF               	movf	indf2,w,c
 17515                           
 17516                           ; BSR set to: 0
 17517  012D6A  0012               	return	
 17518  012D6C                     l819:
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;Types.c: 237: return ePinErrorState;
 17522                           
 17523                           ; BSR set to: 0
 17524  012D6C  0E05               	movlw	5
 17525  012D6E  0012               	return	
 17526  012D70                     __end_of_PortProperty_Valid:
 17527                           	opt stack 0
 17528                           tosu	equ	0xFFF
 17529                           tosh	equ	0xFFE
 17530                           tosl	equ	0xFFD
 17531                           pclath	equ	0xFFA
 17532                           tblptru	equ	0xFF8
 17533                           tblptrh	equ	0xFF7
 17534                           tblptrl	equ	0xFF6
 17535                           tablat	equ	0xFF5
 17536                           prodh	equ	0xFF4
 17537                           prodl	equ	0xFF3
 17538                           intcon	equ	0xFF2
 17539                           postinc0	equ	0xFEE
 17540                           wreg	equ	0xFE8
 17541                           indf1	equ	0xFE7
 17542                           postdec1	equ	0xFE5
 17543                           fsr1h	equ	0xFE2
 17544                           fsr1l	equ	0xFE1
 17545                           indf2	equ	0xFDF
 17546                           postinc2	equ	0xFDE
 17547                           postdec2	equ	0xFDD
 17548                           plusw2	equ	0xFDB
 17549                           fsr2h	equ	0xFDA
 17550                           fsr2l	equ	0xFD9
 17551                           status	equ	0xFD8
 17552                           
 17553 ;; *************** function _Word_GetPair *****************
 17554 ;; Defined at:
 17555 ;;		line 156 in file "Library/Types.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;  pInput          2   12[BANK0 ] PTR struct Word
 17558 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 17559 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 17560 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 17561 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17562 ;;  pPair           1   14[BANK0 ] unsigned char 
 17563 ;; Auto vars:     Size  Location     Type
 17564 ;;		None
 17565 ;; Return value:  Size  Location     Type
 17566 ;;                  1    wreg      unsigned char 
 17567 ;; Registers used:
 17568 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17569 ;; Tracked objects:
 17570 ;;		On entry : 0/0
 17571 ;;		On exit  : 0/0
 17572 ;;		Unchanged: 0/0
 17573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17578 ;;Total ram usage:        3 bytes
 17579 ;; Hardware stack levels used:    1
 17580 ;; Hardware stack levels required when called:    9
 17581 ;; This function calls:
 17582 ;;		_Byte_GetPair
 17583 ;; This function is called by:
 17584 ;;		_Port_Init
 17585 ;;		_Port_SetPin
 17586 ;;		_Port_Set
 17587 ;;		_PortProperty_Valid
 17588 ;;		_Port_SetPair
 17589 ;;		_Port_SetQuad
 17590 ;; This function uses a non-reentrant model
 17591 ;;
 17592                           
 17593                           	psect	text100
 17594  013632                     __ptext100:
 17595                           	opt stack 0
 17596  013632                     _Word_GetPair:
 17597                           	opt stack 15
 17598                           
 17599                           ;Types.c: 158: if (pPair >= 4)
 17600                           
 17601                           ; BSR set to: 0
 17602                           ;incstack = 0
 17603  013632  0E03               	movlw	3
 17604  013634  0100               	movlb	0	; () banked
 17605  013636  65C1               	cpfsgt	Word_GetPair@pPair& (0+255),b
 17606  013638  D00C               	goto	l781
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 17610  01363A  0E01               	movlw	1
 17611  01363C  25BF               	addwf	Word_GetPair@pInput& (0+255),w,b
 17612  01363E  6FBC               	movwf	Byte_GetPair@pInput& (0+255),b
 17613  013640  0E00               	movlw	0
 17614  013642  21C0               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 17615  013644  6FBD               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 17616  013646  51C1               	movf	Word_GetPair@pPair& (0+255),w,b
 17617  013648  0FFC               	addlw	252
 17618  01364A  6FBE               	movwf	Byte_GetPair@pPair& (0+255),b
 17619  01364C  EC76  F09C         	call	_Byte_GetPair	;wreg free
 17620  013650  0012               	return	
 17621  013652                     l781:
 17622                           
 17623                           ;Types.c: 160: else
 17624                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 17625  013652  C0BF  F0BC         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 17626  013656  C0C0  F0BD         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 17627  01365A  C0C1  F0BE         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 17628  01365E  EC76  F09C         	call	_Byte_GetPair	;wreg free
 17629  013662  0012               	return	
 17630  013664                     __end_of_Word_GetPair:
 17631                           	opt stack 0
 17632                           tosu	equ	0xFFF
 17633                           tosh	equ	0xFFE
 17634                           tosl	equ	0xFFD
 17635                           pclath	equ	0xFFA
 17636                           tblptru	equ	0xFF8
 17637                           tblptrh	equ	0xFF7
 17638                           tblptrl	equ	0xFF6
 17639                           tablat	equ	0xFF5
 17640                           prodh	equ	0xFF4
 17641                           prodl	equ	0xFF3
 17642                           intcon	equ	0xFF2
 17643                           postinc0	equ	0xFEE
 17644                           wreg	equ	0xFE8
 17645                           indf1	equ	0xFE7
 17646                           postdec1	equ	0xFE5
 17647                           fsr1h	equ	0xFE2
 17648                           fsr1l	equ	0xFE1
 17649                           indf2	equ	0xFDF
 17650                           postinc2	equ	0xFDE
 17651                           postdec2	equ	0xFDD
 17652                           plusw2	equ	0xFDB
 17653                           fsr2h	equ	0xFDA
 17654                           fsr2l	equ	0xFD9
 17655                           status	equ	0xFD8
 17656                           
 17657 ;; *************** function _Byte_GetPair *****************
 17658 ;; Defined at:
 17659 ;;		line 87 in file "Library/Types.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 17662 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 17663 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 17664 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 17665 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 17666 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 17667 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 17668 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 17669 ;;		 -> NULL(0), 
 17670 ;;  pPair           1   11[BANK0 ] unsigned char 
 17671 ;; Auto vars:     Size  Location     Type
 17672 ;;		None
 17673 ;; Return value:  Size  Location     Type
 17674 ;;                  1    wreg      unsigned char 
 17675 ;; Registers used:
 17676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17682 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17685 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17686 ;;Total ram usage:        3 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:    8
 17689 ;; This function calls:
 17690 ;;		_Byte_GetZone
 17691 ;; This function is called by:
 17692 ;;		_Word_GetPair
 17693 ;; This function uses a non-reentrant model
 17694 ;;
 17695                           
 17696                           	psect	text101
 17697  0138EC                     __ptext101:
 17698                           	opt stack 0
 17699  0138EC                     _Byte_GetPair:
 17700                           	opt stack 15
 17701                           
 17702                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 17703                           
 17704                           ;incstack = 0
 17705  0138EC  C0BC  F0B3         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 17706  0138F0  C0BD  F0B4         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 17707  0138F4  0E04               	movlw	4
 17708  0138F6  0100               	movlb	0	; () banked
 17709  0138F8  6FB5               	movwf	Byte_GetZone@pMax& (0+255),b
 17710  0138FA  C0BE  F0B6         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 17711  0138FE  0E02               	movlw	2
 17712  013900  6FB7               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 17713  013902  EC92  F094         	call	_Byte_GetZone	;wreg free
 17714  013906  0012               	return	
 17715  013908                     __end_of_Byte_GetPair:
 17716                           	opt stack 0
 17717                           tosu	equ	0xFFF
 17718                           tosh	equ	0xFFE
 17719                           tosl	equ	0xFFD
 17720                           pclath	equ	0xFFA
 17721                           tblptru	equ	0xFF8
 17722                           tblptrh	equ	0xFF7
 17723                           tblptrl	equ	0xFF6
 17724                           tablat	equ	0xFF5
 17725                           prodh	equ	0xFF4
 17726                           prodl	equ	0xFF3
 17727                           intcon	equ	0xFF2
 17728                           postinc0	equ	0xFEE
 17729                           wreg	equ	0xFE8
 17730                           indf1	equ	0xFE7
 17731                           postdec1	equ	0xFE5
 17732                           fsr1h	equ	0xFE2
 17733                           fsr1l	equ	0xFE1
 17734                           indf2	equ	0xFDF
 17735                           postinc2	equ	0xFDE
 17736                           postdec2	equ	0xFDD
 17737                           plusw2	equ	0xFDB
 17738                           fsr2h	equ	0xFDA
 17739                           fsr2l	equ	0xFD9
 17740                           status	equ	0xFD8
 17741                           
 17742 ;; *************** function _Byte_GetZone *****************
 17743 ;; Defined at:
 17744 ;;		line 64 in file "Library/Types.c"
 17745 ;; Parameters:    Size  Location     Type
 17746 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17747 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 17748 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 17749 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 17750 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 17751 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 17752 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 17753 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 17754 ;;		 -> NULL(0), 
 17755 ;;  pMax            1    2[BANK0 ] unsigned char 
 17756 ;;  pChunk          1    3[BANK0 ] unsigned char 
 17757 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 17758 ;; Auto vars:     Size  Location     Type
 17759 ;;  Output          1    8[BANK0 ] unsigned char 
 17760 ;;  Offset          1    7[BANK0 ] unsigned char 
 17761 ;;  MASK            1    6[BANK0 ] unsigned char 
 17762 ;; Return value:  Size  Location     Type
 17763 ;;                  1    wreg      unsigned char 
 17764 ;; Registers used:
 17765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 17766 ;; Tracked objects:
 17767 ;;		On entry : 0/0
 17768 ;;		On exit  : 0/0
 17769 ;;		Unchanged: 0/0
 17770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17771 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17772 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17774 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17775 ;;Total ram usage:        9 bytes
 17776 ;; Hardware stack levels used:    1
 17777 ;; Hardware stack levels required when called:    7
 17778 ;; This function calls:
 17779 ;;		Nothing
 17780 ;; This function is called by:
 17781 ;;		_Byte_GetPair
 17782 ;;		_Byte_GetTriple
 17783 ;;		_Byte_GetQuad
 17784 ;; This function uses a non-reentrant model
 17785 ;;
 17786                           
 17787                           	psect	text102
 17788  012924                     __ptext102:
 17789                           	opt stack 0
 17790  012924                     _Byte_GetZone:
 17791                           	opt stack 15
 17792                           
 17793                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 17794                           
 17795                           ;incstack = 0
 17796  012924  C0B3  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 17797  012928  C0B4  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 17798  01292C  0E00               	movlw	low (__mediumconst shr (0+16))
 17799  01292E  6EF8               	movwf	tblptru,c
 17800  012930  0E0F               	movlw	(high __ramtop+-1)
 17801  012932  64F7               	cpfsgt	tblptrh,c
 17802  012934  D003               	bra	u7757
 17803  012936  0008               	tblrd		*
 17804  012938  50F5               	movf	tablat,w,c
 17805  01293A  D005               	bra	u7750
 17806  01293C                     u7757:
 17807  01293C  CFF6 FFE9          	movff	tblptrl,fsr0l
 17808  012940  CFF7 FFEA          	movff	tblptrh,fsr0h
 17809  012944  50EF               	movf	indf0,w,c
 17810  012946                     u7750:
 17811  012946  0100               	movlb	0	; () banked
 17812  012948  6FBB               	movwf	Byte_GetZone@Output& (0+255),b
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 17816  01294A  51B7               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17817  01294C  0D01               	mullw	1
 17818  01294E  0EC7               	movlw	low _MASKS
 17819  012950  24F3               	addwf	prodl,w,c
 17820  012952  6EF6               	movwf	tblptrl,c
 17821  012954  0EFC               	movlw	high _MASKS
 17822  012956  20F4               	addwfc	prodh,w,c
 17823  012958  6EF7               	movwf	tblptrh,c
 17824  01295A                     	if	1	;There are 3 active tblptr bytes
 17825  01295A  6AF8               	clrf	tblptru,c
 17826  01295C  0E00               	movlw	low (__mediumconst shr (0+16))
 17827  01295E  22F8               	addwfc	tblptru,f,c
 17828  012960                     	endif
 17829  012960  0008               	tblrd		*
 17830  012962  CFF5 F0B9          	movff	tablat,Byte_GetZone@MASK
 17831                           
 17832                           ; BSR set to: 0
 17833                           ;Types.c: 68: UINT8 Offset = 0;
 17834  012966  0E00               	movlw	0
 17835  012968  6FBA               	movwf	Byte_GetZone@Offset& (0+255),b
 17836                           
 17837                           ;Types.c: 70: while (pChunk >= pMax)
 17838  01296A  D003               	goto	l732
 17839  01296C                     
 17840                           ; BSR set to: 0
 17841                           ;Types.c: 71: {
 17842                           ;Types.c: 72: pChunk -= pMax;
 17843                           
 17844                           ; BSR set to: 0
 17845  01296C  51B5               	movf	Byte_GetZone@pMax& (0+255),w,b
 17846  01296E  5FB6               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 17847                           
 17848                           ; BSR set to: 0
 17849                           ;Types.c: 73: Offset += 1;
 17850  012970  2BBA               	incf	Byte_GetZone@Offset& (0+255),f,b
 17851  012972                     l732:
 17852                           
 17853                           ; BSR set to: 0
 17854                           
 17855                           ; BSR set to: 0
 17856  012972  51B5               	movf	Byte_GetZone@pMax& (0+255),w,b
 17857  012974  5DB6               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 17858  012976  B0D8               	btfsc	status,0,c
 17859  012978  D7F9               	goto	l733
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;Types.c: 74: }
 17863                           ;Types.c: 75: pChunk *= pChunkSize;
 17864                           
 17865                           ; BSR set to: 0
 17866  01297A  51B7               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17867  01297C  03B6               	mulwf	Byte_GetZone@pChunk& (0+255),b
 17868  01297E  50F3               	movf	prodl,w,c
 17869  012980  6FB6               	movwf	Byte_GetZone@pChunk& (0+255),b
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;Types.c: 76: pChunk += Offset;
 17873  012982  51BA               	movf	Byte_GetZone@Offset& (0+255),w,b
 17874  012984  27B6               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;Types.c: 78: Output >>= pChunk;
 17878  012986  29B6               	incf	Byte_GetZone@pChunk& (0+255),w,b
 17879  012988  6FB8               	movwf	??_Byte_GetZone& (0+255),b
 17880  01298A  D002               	goto	u7770
 17881  01298C                     u7775:
 17882  01298C  90D8               	bcf	status,0,c
 17883  01298E  33BB               	rrcf	Byte_GetZone@Output& (0+255),f,b
 17884  012990                     u7770:
 17885  012990  2FB8               	decfsz	??_Byte_GetZone& (0+255),f,b
 17886  012992  D7FC               	goto	u7775
 17887                           
 17888                           ;Types.c: 79: Output &= MASK;
 17889  012994  0100               	movlb	0	; () banked
 17890  012996  51B9               	movf	Byte_GetZone@MASK& (0+255),w,b
 17891  012998  17BB               	andwf	Byte_GetZone@Output& (0+255),f,b
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;Types.c: 80: return Output;
 17895  01299A  51BB               	movf	Byte_GetZone@Output& (0+255),w,b
 17896  01299C  0012               	return	
 17897  01299E                     __end_of_Byte_GetZone:
 17898                           	opt stack 0
 17899                           tosu	equ	0xFFF
 17900                           tosh	equ	0xFFE
 17901                           tosl	equ	0xFFD
 17902                           pclath	equ	0xFFA
 17903                           tblptru	equ	0xFF8
 17904                           tblptrh	equ	0xFF7
 17905                           tblptrl	equ	0xFF6
 17906                           tablat	equ	0xFF5
 17907                           prodh	equ	0xFF4
 17908                           prodl	equ	0xFF3
 17909                           intcon	equ	0xFF2
 17910                           indf0	equ	0xFEF
 17911                           postinc0	equ	0xFEE
 17912                           fsr0h	equ	0xFEA
 17913                           fsr0l	equ	0xFE9
 17914                           wreg	equ	0xFE8
 17915                           indf1	equ	0xFE7
 17916                           postdec1	equ	0xFE5
 17917                           fsr1h	equ	0xFE2
 17918                           fsr1l	equ	0xFE1
 17919                           indf2	equ	0xFDF
 17920                           postinc2	equ	0xFDE
 17921                           postdec2	equ	0xFDD
 17922                           plusw2	equ	0xFDB
 17923                           fsr2h	equ	0xFDA
 17924                           fsr2l	equ	0xFD9
 17925                           status	equ	0xFD8
 17926                           
 17927 ;; *************** function _Byte_SetQuad *****************
 17928 ;; Defined at:
 17929 ;;		line 101 in file "Library/Types.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17932 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 17933 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17934 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17935 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17936 ;;		 -> NULL(0), 
 17937 ;;  pQuad           1   13[BANK0 ] unsigned char 
 17938 ;;  pValue          1   14[BANK0 ] unsigned char 
 17939 ;; Auto vars:     Size  Location     Type
 17940 ;;		None
 17941 ;; Return value:  Size  Location     Type
 17942 ;;                  1    wreg      void 
 17943 ;; Registers used:
 17944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17945 ;; Tracked objects:
 17946 ;;		On entry : 0/0
 17947 ;;		On exit  : 0/0
 17948 ;;		Unchanged: 0/0
 17949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;Total ram usage:        4 bytes
 17955 ;; Hardware stack levels used:    1
 17956 ;; Hardware stack levels required when called:    8
 17957 ;; This function calls:
 17958 ;;		_Byte_SetZone
 17959 ;; This function is called by:
 17960 ;;		_Port_SetQuadType
 17961 ;;		_SPI_Init
 17962 ;;		_SPI_MinSpeed
 17963 ;;		_SPI_MaxSpeed
 17964 ;;		_Port_SetQuad
 17965 ;;		_Word_SetQuad
 17966 ;;		_I2C_Init
 17967 ;; This function uses a non-reentrant model
 17968 ;;
 17969                           
 17970                           	psect	text103
 17971  013872                     __ptext103:
 17972                           	opt stack 0
 17973  013872                     _Byte_SetQuad:
 17974                           	opt stack 20
 17975                           
 17976                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 17977                           
 17978                           ; BSR set to: 0
 17979                           ;incstack = 0
 17980  013872  C0BE  F0B3         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 17981  013876  C0BF  F0B4         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 17982  01387A  0E02               	movlw	2
 17983  01387C  0100               	movlb	0	; () banked
 17984  01387E  6FB5               	movwf	Byte_SetZone@pMax& (0+255),b
 17985  013880  C0C0  F0B6         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 17986  013884  0E04               	movlw	4
 17987  013886  6FB7               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17988  013888  C0C1  F0B8         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 17989  01388C  EC40  F092         	call	_Byte_SetZone	;wreg free
 17990  013890  0012               	return		;funcret
 17991  013892                     __end_of_Byte_SetQuad:
 17992                           	opt stack 0
 17993                           tosu	equ	0xFFF
 17994                           tosh	equ	0xFFE
 17995                           tosl	equ	0xFFD
 17996                           pclath	equ	0xFFA
 17997                           tblptru	equ	0xFF8
 17998                           tblptrh	equ	0xFF7
 17999                           tblptrl	equ	0xFF6
 18000                           tablat	equ	0xFF5
 18001                           prodh	equ	0xFF4
 18002                           prodl	equ	0xFF3
 18003                           intcon	equ	0xFF2
 18004                           indf0	equ	0xFEF
 18005                           postinc0	equ	0xFEE
 18006                           fsr0h	equ	0xFEA
 18007                           fsr0l	equ	0xFE9
 18008                           wreg	equ	0xFE8
 18009                           indf1	equ	0xFE7
 18010                           postdec1	equ	0xFE5
 18011                           fsr1h	equ	0xFE2
 18012                           fsr1l	equ	0xFE1
 18013                           indf2	equ	0xFDF
 18014                           postinc2	equ	0xFDE
 18015                           postdec2	equ	0xFDD
 18016                           plusw2	equ	0xFDB
 18017                           fsr2h	equ	0xFDA
 18018                           fsr2l	equ	0xFD9
 18019                           status	equ	0xFD8
 18020                           
 18021 ;; *************** function _Byte_SetZone *****************
 18022 ;; Defined at:
 18023 ;;		line 47 in file "Library/Types.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18026 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 18027 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 18028 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 18029 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 18030 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18031 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18032 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18033 ;;		 -> PortC(10), PortF(10), NULL(0), 
 18034 ;;  pMax            1    2[BANK0 ] unsigned char 
 18035 ;;  pChunk          1    3[BANK0 ] unsigned char 
 18036 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 18037 ;;  pValue          1    5[BANK0 ] unsigned char 
 18038 ;; Auto vars:     Size  Location     Type
 18039 ;;  MASK            1   10[BANK0 ] unsigned char 
 18040 ;;  Offset          1    9[BANK0 ] unsigned char 
 18041 ;; Return value:  Size  Location     Type
 18042 ;;                  1    wreg      void 
 18043 ;; Registers used:
 18044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18045 ;; Tracked objects:
 18046 ;;		On entry : 0/0
 18047 ;;		On exit  : 0/0
 18048 ;;		Unchanged: 0/0
 18049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18050 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18051 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18052 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18053 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18054 ;;Total ram usage:       11 bytes
 18055 ;; Hardware stack levels used:    1
 18056 ;; Hardware stack levels required when called:    7
 18057 ;; This function calls:
 18058 ;;		Nothing
 18059 ;; This function is called by:
 18060 ;;		_Byte_SetPair
 18061 ;;		_Byte_SetQuad
 18062 ;;		_Byte_SetTriple
 18063 ;; This function uses a non-reentrant model
 18064 ;;
 18065                           
 18066                           	psect	text104
 18067  012480                     __ptext104:
 18068                           	opt stack 0
 18069  012480                     _Byte_SetZone:
 18070                           	opt stack 19
 18071                           
 18072                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 18073                           
 18074                           ;incstack = 0
 18075  012480  0100               	movlb	0	; () banked
 18076  012482  51B7               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18077  012484  0D01               	mullw	1
 18078  012486  0EC7               	movlw	low _MASKS
 18079  012488  24F3               	addwf	prodl,w,c
 18080  01248A  6EF6               	movwf	tblptrl,c
 18081  01248C  0EFC               	movlw	high _MASKS
 18082  01248E  20F4               	addwfc	prodh,w,c
 18083  012490  6EF7               	movwf	tblptrh,c
 18084  012492                     	if	1	;There are 3 active tblptr bytes
 18085  012492  6AF8               	clrf	tblptru,c
 18086  012494  0E00               	movlw	low (__mediumconst shr (0+16))
 18087  012496  22F8               	addwfc	tblptru,f,c
 18088  012498                     	endif
 18089  012498  0008               	tblrd		*
 18090  01249A  CFF5 F0BD          	movff	tablat,Byte_SetZone@MASK
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;Types.c: 50: UINT8 Offset = 0;
 18094  01249E  0E00               	movlw	0
 18095  0124A0  6FBC               	movwf	Byte_SetZone@Offset& (0+255),b
 18096                           
 18097                           ;Types.c: 52: while (pChunk >= pMax)
 18098  0124A2  D003               	goto	l726
 18099  0124A4                     
 18100                           ; BSR set to: 0
 18101                           ;Types.c: 53: {
 18102                           ;Types.c: 54: pChunk -= pMax;
 18103                           
 18104                           ; BSR set to: 0
 18105  0124A4  51B5               	movf	Byte_SetZone@pMax& (0+255),w,b
 18106  0124A6  5FB6               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;Types.c: 55: Offset += 1;
 18110  0124A8  2BBC               	incf	Byte_SetZone@Offset& (0+255),f,b
 18111  0124AA                     l726:
 18112                           
 18113                           ; BSR set to: 0
 18114                           
 18115                           ; BSR set to: 0
 18116  0124AA  51B5               	movf	Byte_SetZone@pMax& (0+255),w,b
 18117  0124AC  5DB6               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 18118  0124AE  B0D8               	btfsc	status,0,c
 18119  0124B0  D7F9               	goto	l727
 18120                           
 18121                           ; BSR set to: 0
 18122                           ;Types.c: 56: }
 18123                           ;Types.c: 57: pChunk *= pChunkSize;
 18124                           
 18125                           ; BSR set to: 0
 18126  0124B2  51B7               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 18127  0124B4  03B6               	mulwf	Byte_SetZone@pChunk& (0+255),b
 18128  0124B6  50F3               	movf	prodl,w,c
 18129  0124B8  6FB6               	movwf	Byte_SetZone@pChunk& (0+255),b
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;Types.c: 58: pChunk += Offset;
 18133  0124BA  51BC               	movf	Byte_SetZone@Offset& (0+255),w,b
 18134  0124BC  27B6               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 18135                           
 18136                           ; BSR set to: 0
 18137                           ;Types.c: 60: pValue &= MASK;
 18138  0124BE  51BD               	movf	Byte_SetZone@MASK& (0+255),w,b
 18139  0124C0  17B8               	andwf	Byte_SetZone@pValue& (0+255),f,b
 18140                           
 18141                           ; BSR set to: 0
 18142                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 18143  0124C2  C0B6  F0B9         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18144  0124C6  C0BD  F0BA         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 18145  0124CA  2BB9               	incf	??_Byte_SetZone& (0+255),f,b
 18146  0124CC  D002               	goto	u7854
 18147  0124CE                     u7855:
 18148  0124CE  90D8               	bcf	status,0,c
 18149  0124D0  37BA               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18150  0124D2                     u7854:
 18151  0124D2  2FB9               	decfsz	??_Byte_SetZone& (0+255),f,b
 18152  0124D4  D7FC               	goto	u7855
 18153  0124D6  0100               	movlb	0	; () banked
 18154  0124D8  51BA               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18155  0124DA  0AFF               	xorlw	255
 18156  0124DC  6FBB               	movwf	(??_Byte_SetZone+2)& (0+255),b
 18157  0124DE  C0B3  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18158  0124E2  C0B4  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18159  0124E6  51BB               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 18160  0124E8  16DF               	andwf	indf2,f,c
 18161                           
 18162                           ; BSR set to: 0
 18163                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 18164  0124EA  C0B6  F0B9         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 18165  0124EE  C0B8  F0BA         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 18166  0124F2  2BB9               	incf	??_Byte_SetZone& (0+255),f,b
 18167  0124F4  D002               	goto	u7864
 18168  0124F6                     u7865:
 18169  0124F6  90D8               	bcf	status,0,c
 18170  0124F8  37BA               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 18171  0124FA                     u7864:
 18172  0124FA  2FB9               	decfsz	??_Byte_SetZone& (0+255),f,b
 18173  0124FC  D7FC               	goto	u7865
 18174  0124FE  C0B3  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 18175  012502  C0B4  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 18176  012506  0100               	movlb	0	; () banked
 18177  012508  51BA               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 18178  01250A  12DF               	iorwf	indf2,f,c
 18179                           
 18180                           ; BSR set to: 0
 18181  01250C  0012               	return		;funcret
 18182  01250E                     __end_of_Byte_SetZone:
 18183                           	opt stack 0
 18184                           tosu	equ	0xFFF
 18185                           tosh	equ	0xFFE
 18186                           tosl	equ	0xFFD
 18187                           pclath	equ	0xFFA
 18188                           tblptru	equ	0xFF8
 18189                           tblptrh	equ	0xFF7
 18190                           tblptrl	equ	0xFF6
 18191                           tablat	equ	0xFF5
 18192                           prodh	equ	0xFF4
 18193                           prodl	equ	0xFF3
 18194                           intcon	equ	0xFF2
 18195                           indf0	equ	0xFEF
 18196                           postinc0	equ	0xFEE
 18197                           fsr0h	equ	0xFEA
 18198                           fsr0l	equ	0xFE9
 18199                           wreg	equ	0xFE8
 18200                           indf1	equ	0xFE7
 18201                           postdec1	equ	0xFE5
 18202                           fsr1h	equ	0xFE2
 18203                           fsr1l	equ	0xFE1
 18204                           indf2	equ	0xFDF
 18205                           postinc2	equ	0xFDE
 18206                           postdec2	equ	0xFDD
 18207                           plusw2	equ	0xFDB
 18208                           fsr2h	equ	0xFDA
 18209                           fsr2l	equ	0xFD9
 18210                           status	equ	0xFD8
 18211                           
 18212 ;; *************** function _Console_Render *****************
 18213 ;; Defined at:
 18214 ;;		line 377 in file "Library/Console.c"
 18215 ;; Parameters:    Size  Location     Type
 18216 ;;		None
 18217 ;; Auto vars:     Size  Location     Type
 18218 ;;  lCursor         4   38[BANK0 ] struct Point
 18219 ;;  y               1   43[BANK0 ] unsigned char 
 18220 ;;  x               1   42[BANK0 ] unsigned char 
 18221 ;;  temp            1   37[BANK0 ] unsigned char 
 18222 ;;  Temp            2    0        unsigned short 
 18223 ;; Return value:  Size  Location     Type
 18224 ;;                  1    wreg      void 
 18225 ;; Registers used:
 18226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18227 ;; Tracked objects:
 18228 ;;		On entry : 0/0
 18229 ;;		On exit  : 0/0
 18230 ;;		Unchanged: 0/0
 18231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18233 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18235 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18236 ;;Total ram usage:        9 bytes
 18237 ;; Hardware stack levels used:    1
 18238 ;; Hardware stack levels required when called:   11
 18239 ;; This function calls:
 18240 ;;		_Console_MakeField
 18241 ;;		_LCD_DrawField
 18242 ;;		_LCD_FillRectangle
 18243 ;; This function is called by:
 18244 ;;		_main
 18245 ;;		_Sensor_Observe2
 18246 ;;		_Closest_Object2
 18247 ;;		_Sensor_Observe
 18248 ;;		_Closest_Object
 18249 ;; This function uses a non-reentrant model
 18250 ;;
 18251                           
 18252                           	psect	text105
 18253  010CB2                     __ptext105:
 18254                           	opt stack 0
 18255  010CB2                     _Console_Render:
 18256                           	opt stack 19
 18257                           
 18258                           ;Console.c: 379: Colour Temp;
 18259                           ;Console.c: 380: if (change)
 18260                           
 18261                           ; BSR set to: 0
 18262                           ;incstack = 0
 18263  010CB2  0100               	movlb	0	; () banked
 18264  010CB4  51FF               	movf	_change& (0+255),w,b
 18265  010CB6  B4D8               	btfsc	status,2,c
 18266  010CB8  0012               	return	
 18267                           
 18268                           ; BSR set to: 0
 18269                           ;Console.c: 381: {
 18270                           ;Console.c: 382: UINT8 x, y, temp;
 18271                           ;Console.c: 383: Point lCursor = {6,6};
 18272  010CBA  C1E8  F0D9         	movff	Console_Render@F6956,Console_Render@lCursor
 18273  010CBE  C1E9  F0DA         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 18274  010CC2  C1EA  F0DB         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 18275  010CC6  C1EB  F0DC         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 18276                           
 18277                           ; BSR set to: 0
 18278                           ;Console.c: 385: if (clearall)
 18279  010CCA  5190               	movf	_clearall& (0+255),w,b
 18280  010CCC  B4D8               	btfsc	status,2,c
 18281  010CCE  D004               	goto	l1056
 18282                           
 18283                           ; BSR set to: 0
 18284                           ;Console.c: 386: {
 18285                           ;Console.c: 389: temp = lBufferY;
 18286  010CD0  C08E  F0D8         	movff	_lBufferY,Console_Render@temp
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 18290  010CD4  0E0F               	movlw	15
 18291  010CD6  6F8E               	movwf	_lBufferY& (0+255),b
 18292  010CD8                     l1056:
 18293                           
 18294                           ; BSR set to: 0
 18295                           ;Console.c: 391: }
 18296                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 18297  010CD8  0E00               	movlw	0
 18298  010CDA  6FDE               	movwf	Console_Render@y& (0+255),b
 18299  010CDC  D0B9               	goto	l1057
 18300  010CDE                     
 18301                           ; BSR set to: 0
 18302                           ;Console.c: 394: {
 18303                           ;Console.c: 395: gForecolour = lCBuffer[y];
 18304                           
 18305                           ; BSR set to: 0
 18306  010CDE  51DE               	movf	Console_Render@y& (0+255),w,b
 18307  010CE0  0D02               	mullw	2
 18308  010CE2  0E8C               	movlw	low _lCBuffer
 18309  010CE4  24F3               	addwf	prodl,w,c
 18310  010CE6  6ED9               	movwf	fsr2l,c
 18311  010CE8  0E02               	movlw	high _lCBuffer
 18312  010CEA  20F4               	addwfc	prodh,w,c
 18313  010CEC  6EDA               	movwf	fsr2h,c
 18314  010CEE  CFDE F0FD          	movff	postinc2,_gForecolour
 18315  010CF2  CFDD F0FE          	movff	postdec2,_gForecolour+1
 18316                           
 18317                           ; BSR set to: 0
 18318                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 18319  010CF6  0E00               	movlw	0
 18320  010CF8  6FDD               	movwf	Console_Render@x& (0+255),b
 18321  010CFA                     l13130:
 18322                           
 18323                           ; BSR set to: 0
 18324  010CFA  0E13               	movlw	19
 18325  010CFC  65DD               	cpfsgt	Console_Render@x& (0+255),b
 18326  010CFE  D001               	goto	l1059
 18327  010D00  D09E               	goto	u9390
 18328  010D02                     l1059:
 18329                           
 18330                           ; BSR set to: 0
 18331                           ;Console.c: 397: {
 18332                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 18333                           
 18334                           ; BSR set to: 0
 18335  010D02  51DE               	movf	Console_Render@y& (0+255),w,b
 18336  010D04  0D14               	mullw	20
 18337  010D06  0EF0               	movlw	low _lBuffer
 18338  010D08  6FD6               	movwf	??_Console_Render& (0+255),b
 18339  010D0A  0E02               	movlw	high _lBuffer
 18340  010D0C  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18341  010D0E  50F3               	movf	prodl,w,c
 18342  010D10  27D6               	addwf	??_Console_Render& (0+255),f,b
 18343  010D12  50F4               	movf	prodh,w,c
 18344  010D14  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18345  010D16  51DD               	movf	Console_Render@x& (0+255),w,b
 18346  010D18  0D01               	mullw	1
 18347  010D1A  50F3               	movf	prodl,w,c
 18348  010D1C  25D6               	addwf	??_Console_Render& (0+255),w,b
 18349  010D1E  6ED9               	movwf	fsr2l,c
 18350  010D20  50F4               	movf	prodh,w,c
 18351  010D22  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18352  010D24  6EDA               	movwf	fsr2h,c
 18353  010D26  AEDF               	btfss	indf2,7,c
 18354  010D28  D083               	goto	l1063
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;Console.c: 399: {
 18358                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 18359  010D2A  51DE               	movf	Console_Render@y& (0+255),w,b
 18360  010D2C  0D14               	mullw	20
 18361  010D2E  0EF0               	movlw	low _lBuffer
 18362  010D30  6FD6               	movwf	??_Console_Render& (0+255),b
 18363  010D32  0E02               	movlw	high _lBuffer
 18364  010D34  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18365  010D36  50F3               	movf	prodl,w,c
 18366  010D38  27D6               	addwf	??_Console_Render& (0+255),f,b
 18367  010D3A  50F4               	movf	prodh,w,c
 18368  010D3C  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18369  010D3E  51DD               	movf	Console_Render@x& (0+255),w,b
 18370  010D40  0D01               	mullw	1
 18371  010D42  50F3               	movf	prodl,w,c
 18372  010D44  25D6               	addwf	??_Console_Render& (0+255),w,b
 18373  010D46  6ED9               	movwf	fsr2l,c
 18374  010D48  50F4               	movf	prodh,w,c
 18375  010D4A  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18376  010D4C  6EDA               	movwf	fsr2h,c
 18377  010D4E  0E7F               	movlw	127
 18378  010D50  16DF               	andwf	indf2,f,c
 18379                           
 18380                           ;Console.c: 401: if (lBuffer[y][x])
 18381  010D52  51DE               	movf	Console_Render@y& (0+255),w,b
 18382  010D54  0D14               	mullw	20
 18383  010D56  0EF0               	movlw	low _lBuffer
 18384  010D58  6FD6               	movwf	??_Console_Render& (0+255),b
 18385  010D5A  0E02               	movlw	high _lBuffer
 18386  010D5C  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18387  010D5E  50F3               	movf	prodl,w,c
 18388  010D60  27D6               	addwf	??_Console_Render& (0+255),f,b
 18389  010D62  50F4               	movf	prodh,w,c
 18390  010D64  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18391  010D66  51DD               	movf	Console_Render@x& (0+255),w,b
 18392  010D68  0D01               	mullw	1
 18393  010D6A  50F3               	movf	prodl,w,c
 18394  010D6C  25D6               	addwf	??_Console_Render& (0+255),w,b
 18395  010D6E  6ED9               	movwf	fsr2l,c
 18396  010D70  50F4               	movf	prodh,w,c
 18397  010D72  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18398  010D74  6EDA               	movwf	fsr2h,c
 18399  010D76  50DF               	movf	indf2,w,c
 18400  010D78  B4D8               	btfsc	status,2,c
 18401  010D7A  D043               	goto	l1062
 18402                           
 18403                           ; BSR set to: 0
 18404                           ;Console.c: 402: {
 18405                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 18406  010D7C  C07F  F0BC         	movff	_gBackcolour,LCD_FillRectangle@pColour
 18407  010D80  C080  F0BD         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 18408  010D84  C0D9  F0BE         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 18409  010D88  C0DA  F0BF         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 18410  010D8C  C0DB  F0C0         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 18411  010D90  C0DC  F0C1         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 18412  010D94  C1F0  F0C2         	movff	_gCharSize,LCD_FillRectangle@pSize
 18413  010D98  C1F1  F0C3         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 18414  010D9C  C1F2  F0C4         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 18415  010DA0  C1F3  F0C5         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 18416  010DA4  EC1D  F098         	call	_LCD_FillRectangle	;wreg free
 18417                           
 18418                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 18419  010DA8  0100               	movlb	0	; () banked
 18420  010DAA  51DE               	movf	Console_Render@y& (0+255),w,b
 18421  010DAC  0D14               	mullw	20
 18422  010DAE  0EF0               	movlw	low _lBuffer
 18423  010DB0  6FD6               	movwf	??_Console_Render& (0+255),b
 18424  010DB2  0E02               	movlw	high _lBuffer
 18425  010DB4  6FD7               	movwf	(??_Console_Render+1)& (0+255),b
 18426  010DB6  50F3               	movf	prodl,w,c
 18427  010DB8  27D6               	addwf	??_Console_Render& (0+255),f,b
 18428  010DBA  50F4               	movf	prodh,w,c
 18429  010DBC  23D7               	addwfc	(??_Console_Render+1)& (0+255),f,b
 18430  010DBE  51DD               	movf	Console_Render@x& (0+255),w,b
 18431  010DC0  0D01               	mullw	1
 18432  010DC2  50F3               	movf	prodl,w,c
 18433  010DC4  25D6               	addwf	??_Console_Render& (0+255),w,b
 18434  010DC6  6ED9               	movwf	fsr2l,c
 18435  010DC8  50F4               	movf	prodh,w,c
 18436  010DCA  21D7               	addwfc	(??_Console_Render+1)& (0+255),w,b
 18437  010DCC  6EDA               	movwf	fsr2h,c
 18438  010DCE  50DF               	movf	indf2,w,c
 18439  010DD0  ECBF  F090         	call	_Console_MakeField
 18440  010DD4  C0B8  F0C5         	movff	?_Console_MakeField,LCD_DrawField@pField
 18441  010DD8  C0B9  F0C6         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 18442  010DDC  C0D9  F0C7         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 18443  010DE0  C0DA  F0C8         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 18444  010DE4  C0DB  F0C9         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 18445  010DE8  C0DC  F0CA         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 18446  010DEC  C1F0  F0CB         	movff	_gCharSize,LCD_DrawField@pSize
 18447  010DF0  C1F1  F0CC         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 18448  010DF4  C1F2  F0CD         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 18449  010DF8  C1F3  F0CE         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 18450  010DFC  ECD8  F093         	call	_LCD_DrawField	;wreg free
 18451                           
 18452                           ;Console.c: 405: }
 18453  010E00  D017               	goto	l1063
 18454  010E02                     l1062:
 18455                           
 18456                           ;Console.c: 406: else
 18457                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 18458  010E02  0E00               	movlw	0
 18459  010E04  0100               	movlb	0	; () banked
 18460  010E06  6FBD               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 18461  010E08  0E00               	movlw	0
 18462  010E0A  6FBC               	movwf	LCD_FillRectangle@pColour& (0+255),b
 18463  010E0C  C0D9  F0BE         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 18464  010E10  C0DA  F0BF         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 18465  010E14  C0DB  F0C0         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 18466  010E18  C0DC  F0C1         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 18467  010E1C  C1F0  F0C2         	movff	_gCharSize,LCD_FillRectangle@pSize
 18468  010E20  C1F1  F0C3         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 18469  010E24  C1F2  F0C4         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 18470  010E28  C1F3  F0C5         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 18471  010E2C  EC1D  F098         	call	_LCD_FillRectangle	;wreg free
 18472  010E30                     l1063:
 18473                           
 18474                           ;Console.c: 408: }
 18475                           ;Console.c: 409: lCursor.x += (5 + 1);
 18476  010E30  0E06               	movlw	6
 18477  010E32  0100               	movlb	0	; () banked
 18478  010E34  27D9               	addwf	Console_Render@lCursor& (0+255),f,b
 18479  010E36  0E00               	movlw	0
 18480  010E38  23DA               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 18481                           
 18482                           ; BSR set to: 0
 18483  010E3A  2BDD               	incf	Console_Render@x& (0+255),f,b
 18484  010E3C  D75E               	goto	l13130
 18485  010E3E                     u9390:
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;Console.c: 410: }
 18489                           ;Console.c: 411: lCursor.y += (7 + 1);
 18490                           
 18491                           ; BSR set to: 0
 18492  010E3E  0E08               	movlw	8
 18493  010E40  27DB               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 18494  010E42  0E00               	movlw	0
 18495  010E44  23DC               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 18496                           
 18497                           ; BSR set to: 0
 18498                           ;Console.c: 412: lCursor.x = 6;
 18499  010E46  0E00               	movlw	0
 18500  010E48  6FDA               	movwf	(Console_Render@lCursor+1)& (0+255),b
 18501  010E4A  0E06               	movlw	6
 18502  010E4C  6FD9               	movwf	Console_Render@lCursor& (0+255),b
 18503                           
 18504                           ; BSR set to: 0
 18505  010E4E  2BDE               	incf	Console_Render@y& (0+255),f,b
 18506  010E50                     l1057:
 18507                           
 18508                           ; BSR set to: 0
 18509                           
 18510                           ; BSR set to: 0
 18511  010E50  51DE               	movf	Console_Render@y& (0+255),w,b
 18512  010E52  5D8E               	subwf	_lBufferY& (0+255),w,b
 18513  010E54  B0D8               	btfsc	status,0,c
 18514  010E56  D743               	goto	l1058
 18515                           
 18516                           ; BSR set to: 0
 18517                           ;Console.c: 413: }
 18518                           ;Console.c: 415: if (clearall)
 18519                           
 18520                           ; BSR set to: 0
 18521  010E58  5190               	movf	_clearall& (0+255),w,b
 18522  010E5A  B4D8               	btfsc	status,2,c
 18523  010E5C  0012               	return	
 18524                           
 18525                           ; BSR set to: 0
 18526                           ;Console.c: 416: {
 18527                           ;Console.c: 417: clearall = 0;
 18528  010E5E  0E00               	movlw	0
 18529  010E60  6F90               	movwf	_clearall& (0+255),b
 18530                           
 18531                           ; BSR set to: 0
 18532                           ;Console.c: 418: lBufferY = temp;
 18533  010E62  C0D8  F08E         	movff	Console_Render@temp,_lBufferY
 18534                           
 18535                           ; BSR set to: 0
 18536  010E66  0012               	return	
 18537  010E68                     __end_of_Console_Render:
 18538                           	opt stack 0
 18539                           tosu	equ	0xFFF
 18540                           tosh	equ	0xFFE
 18541                           tosl	equ	0xFFD
 18542                           pclath	equ	0xFFA
 18543                           tblptru	equ	0xFF8
 18544                           tblptrh	equ	0xFF7
 18545                           tblptrl	equ	0xFF6
 18546                           tablat	equ	0xFF5
 18547                           prodh	equ	0xFF4
 18548                           prodl	equ	0xFF3
 18549                           intcon	equ	0xFF2
 18550                           indf0	equ	0xFEF
 18551                           postinc0	equ	0xFEE
 18552                           fsr0h	equ	0xFEA
 18553                           fsr0l	equ	0xFE9
 18554                           wreg	equ	0xFE8
 18555                           indf1	equ	0xFE7
 18556                           postdec1	equ	0xFE5
 18557                           fsr1h	equ	0xFE2
 18558                           fsr1l	equ	0xFE1
 18559                           indf2	equ	0xFDF
 18560                           postinc2	equ	0xFDE
 18561                           postdec2	equ	0xFDD
 18562                           plusw2	equ	0xFDB
 18563                           fsr2h	equ	0xFDA
 18564                           fsr2l	equ	0xFD9
 18565                           status	equ	0xFD8
 18566                           
 18567 ;; *************** function _LCD_FillRectangle *****************
 18568 ;; Defined at:
 18569 ;;		line 318 in file "Library/LCD.c"
 18570 ;; Parameters:    Size  Location     Type
 18571 ;;  pColour         2    9[BANK0 ] unsigned short 
 18572 ;;  pPoint          4   11[BANK0 ] struct Point
 18573 ;;  pSize           4   15[BANK0 ] struct Point
 18574 ;; Auto vars:     Size  Location     Type
 18575 ;;  j               1   22[BANK0 ] unsigned char 
 18576 ;;  i               1   21[BANK0 ] unsigned char 
 18577 ;; Return value:  Size  Location     Type
 18578 ;;                  1    wreg      void 
 18579 ;; Registers used:
 18580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18581 ;; Tracked objects:
 18582 ;;		On entry : 0/0
 18583 ;;		On exit  : 0/0
 18584 ;;		Unchanged: 0/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18586 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18589 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18590 ;;Total ram usage:       14 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; Hardware stack levels required when called:   10
 18593 ;; This function calls:
 18594 ;;		_LCD_Word_Write
 18595 ;;		_Set_Addr_Window
 18596 ;; This function is called by:
 18597 ;;		_Console_Render
 18598 ;;		_Console_ClearLine
 18599 ;; This function uses a non-reentrant model
 18600 ;;
 18601                           
 18602                           	psect	text106
 18603  01303A                     __ptext106:
 18604                           	opt stack 0
 18605  01303A                     _LCD_FillRectangle:
 18606                           	opt stack 19
 18607                           
 18608                           ;LCD.c: 320: UINT8 i = 0x00;
 18609                           
 18610                           ; BSR set to: 0
 18611                           ;incstack = 0
 18612  01303A  0E00               	movlw	0
 18613  01303C  0100               	movlb	0	; () banked
 18614  01303E  6FC8               	movwf	LCD_FillRectangle@i& (0+255),b
 18615                           
 18616                           ;LCD.c: 321: UINT8 j = 0x00;
 18617  013040  0E00               	movlw	0
 18618  013042  6FC9               	movwf	LCD_FillRectangle@j& (0+255),b
 18619                           
 18620                           ; BSR set to: 0
 18621                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 18622  013044  C0C0  F0B8         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 18623  013048  51BE               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 18624  01304A  25C2               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 18625  01304C  6FC6               	movwf	??_LCD_FillRectangle& (0+255),b
 18626  01304E  05C6               	decf	??_LCD_FillRectangle& (0+255),w,b
 18627  013050  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
 18628  013052  51C0               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 18629  013054  25C4               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 18630  013056  6FC7               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 18631  013058  05C7               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 18632  01305A  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
 18633  01305C  51BE               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 18634  01305E  EC60  F091         	call	_Set_Addr_Window
 18635                           
 18636                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 18637  013062  C0C4  F0C9         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 18638  013066  0100               	movlb	0	; () banked
 18639  013068  51C9               	movf	LCD_FillRectangle@j& (0+255),w,b
 18640  01306A  B4D8               	btfsc	status,2,c
 18641  01306C  0012               	return	
 18642                           
 18643                           ; BSR set to: 0
 18644                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 18645                           
 18646                           ; BSR set to: 0
 18647  01306E  C0C2  F0C8         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 18648  013072                     l12736:
 18649                           
 18650                           ; BSR set to: 0
 18651  013072  51C8               	movf	LCD_FillRectangle@i& (0+255),w,b
 18652  013074  B4D8               	btfsc	status,2,c
 18653  013076  D009               	goto	u8870
 18654                           
 18655                           ; BSR set to: 0
 18656                           ;LCD.c: 333: LCD_Word_Write(pColour);
 18657                           
 18658                           ; BSR set to: 0
 18659                           
 18660                           ; BSR set to: 0
 18661  013078  C0BC  F0B8         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 18662  01307C  C0BD  F0B9         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 18663  013080  EC84  F09C         	call	_LCD_Word_Write	;wreg free
 18664  013084  0100               	movlb	0	; () banked
 18665  013086  07C8               	decf	LCD_FillRectangle@i& (0+255),f,b
 18666  013088  D7F4               	goto	l12736
 18667  01308A                     u8870:
 18668                           
 18669                           ; BSR set to: 0
 18670                           
 18671                           ; BSR set to: 0
 18672  01308A  07C9               	decf	LCD_FillRectangle@j& (0+255),f,b
 18673  01308C  D7ED               	goto	L9
 18674  01308E                     __end_of_LCD_FillRectangle:
 18675                           	opt stack 0
 18676                           tosu	equ	0xFFF
 18677                           tosh	equ	0xFFE
 18678                           tosl	equ	0xFFD
 18679                           pclath	equ	0xFFA
 18680                           tblptru	equ	0xFF8
 18681                           tblptrh	equ	0xFF7
 18682                           tblptrl	equ	0xFF6
 18683                           tablat	equ	0xFF5
 18684                           prodh	equ	0xFF4
 18685                           prodl	equ	0xFF3
 18686                           intcon	equ	0xFF2
 18687                           indf0	equ	0xFEF
 18688                           postinc0	equ	0xFEE
 18689                           fsr0h	equ	0xFEA
 18690                           fsr0l	equ	0xFE9
 18691                           wreg	equ	0xFE8
 18692                           indf1	equ	0xFE7
 18693                           postdec1	equ	0xFE5
 18694                           fsr1h	equ	0xFE2
 18695                           fsr1l	equ	0xFE1
 18696                           indf2	equ	0xFDF
 18697                           postinc2	equ	0xFDE
 18698                           postdec2	equ	0xFDD
 18699                           plusw2	equ	0xFDB
 18700                           fsr2h	equ	0xFDA
 18701                           fsr2l	equ	0xFD9
 18702                           status	equ	0xFD8
 18703                           
 18704 ;; *************** function _LCD_DrawField *****************
 18705 ;; Defined at:
 18706 ;;		line 393 in file "Library/LCD.c"
 18707 ;; Parameters:    Size  Location     Type
 18708 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 18709 ;;		 -> Console_MakeField@Fill(70), 
 18710 ;;  pPoint          4   20[BANK0 ] struct Point
 18711 ;;  pSize           4   24[BANK0 ] struct Point
 18712 ;; Auto vars:     Size  Location     Type
 18713 ;;  count           2   30[BANK0 ] unsigned short 
 18714 ;;  i               1   34[BANK0 ] unsigned char 
 18715 ;;  ymax            1   33[BANK0 ] unsigned char 
 18716 ;;  xmax            1   32[BANK0 ] unsigned char 
 18717 ;; Return value:  Size  Location     Type
 18718 ;;                  1    wreg      void 
 18719 ;; Registers used:
 18720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18721 ;; Tracked objects:
 18722 ;;		On entry : 0/0
 18723 ;;		On exit  : 0/0
 18724 ;;		Unchanged: 0/0
 18725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18726 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18729 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18730 ;;Total ram usage:       17 bytes
 18731 ;; Hardware stack levels used:    1
 18732 ;; Hardware stack levels required when called:   10
 18733 ;; This function calls:
 18734 ;;		_LCD_Word_Write
 18735 ;;		_Set_Addr_Window
 18736 ;;		___wmul
 18737 ;; This function is called by:
 18738 ;;		_Console_Render
 18739 ;; This function uses a non-reentrant model
 18740 ;;
 18741                           
 18742                           	psect	text107
 18743  0127B0                     __ptext107:
 18744                           	opt stack 0
 18745  0127B0                     _LCD_DrawField:
 18746                           	opt stack 19
 18747                           
 18748                           ;LCD.c: 396: UINT8 i = 0x00;
 18749                           
 18750                           ; BSR set to: 0
 18751                           ;incstack = 0
 18752  0127B0  0E00               	movlw	0
 18753  0127B2  0100               	movlb	0	; () banked
 18754  0127B4  6FD5               	movwf	LCD_DrawField@i& (0+255),b
 18755                           
 18756                           ; BSR set to: 0
 18757                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 18758  0127B6  51C7               	movf	LCD_DrawField@pPoint& (0+255),w,b
 18759  0127B8  25CB               	addwf	LCD_DrawField@pSize& (0+255),w,b
 18760  0127BA  6FD3               	movwf	LCD_DrawField@xmax& (0+255),b
 18761                           
 18762                           ; BSR set to: 0
 18763                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 18764  0127BC  51C9               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 18765  0127BE  25CD               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 18766  0127C0  6FD4               	movwf	LCD_DrawField@ymax& (0+255),b
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 18770  0127C2  C0CD  F0B3         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 18771  0127C6  C0CE  F0B4         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 18772  0127CA  C0CB  F0B5         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 18773  0127CE  C0CC  F0B6         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 18774  0127D2  ECB9  F09B         	call	___wmul	;wreg free
 18775  0127D6  C0B3  F0D1         	movff	?___wmul,LCD_DrawField@count
 18776  0127DA  C0B4  F0D2         	movff	?___wmul+1,LCD_DrawField@count+1
 18777                           
 18778                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 18779  0127DE  C0C9  F0B8         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 18780  0127E2  0100               	movlb	0	; () banked
 18781  0127E4  05D3               	decf	LCD_DrawField@xmax& (0+255),w,b
 18782  0127E6  6FB9               	movwf	Set_Addr_Window@xe& (0+255),b
 18783  0127E8  05D4               	decf	LCD_DrawField@ymax& (0+255),w,b
 18784  0127EA  6FBA               	movwf	Set_Addr_Window@ye& (0+255),b
 18785  0127EC  51C7               	movf	LCD_DrawField@pPoint& (0+255),w,b
 18786  0127EE  EC60  F091         	call	_Set_Addr_Window
 18787                           
 18788                           ;LCD.c: 403: for(i = 0; i < count; i++)
 18789  0127F2  0E00               	movlw	0
 18790  0127F4  0100               	movlb	0	; () banked
 18791  0127F6  6FD5               	movwf	LCD_DrawField@i& (0+255),b
 18792  0127F8  D010               	goto	l183
 18793  0127FA                     
 18794                           ; BSR set to: 0
 18795                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 18796                           
 18797                           ; BSR set to: 0
 18798  0127FA  51D5               	movf	LCD_DrawField@i& (0+255),w,b
 18799  0127FC  0D02               	mullw	2
 18800  0127FE  50F3               	movf	prodl,w,c
 18801  012800  25C5               	addwf	LCD_DrawField@pField& (0+255),w,b
 18802  012802  6ED9               	movwf	fsr2l,c
 18803  012804  50F4               	movf	prodh,w,c
 18804  012806  21C6               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 18805  012808  6EDA               	movwf	fsr2h,c
 18806  01280A  CFDE F0B8          	movff	postinc2,LCD_Word_Write@value
 18807  01280E  CFDD F0B9          	movff	postdec2,LCD_Word_Write@value+1
 18808  012812  EC84  F09C         	call	_LCD_Word_Write	;wreg free
 18809  012816  0100               	movlb	0	; () banked
 18810  012818  2BD5               	incf	LCD_DrawField@i& (0+255),f,b
 18811  01281A                     l183:
 18812                           
 18813                           ; BSR set to: 0
 18814                           
 18815                           ; BSR set to: 0
 18816  01281A  51D5               	movf	LCD_DrawField@i& (0+255),w,b
 18817  01281C  6FCF               	movwf	??_LCD_DrawField& (0+255),b
 18818  01281E  6BD0               	clrf	(??_LCD_DrawField+1)& (0+255),b
 18819  012820  51D1               	movf	LCD_DrawField@count& (0+255),w,b
 18820  012822  5DCF               	subwf	??_LCD_DrawField& (0+255),w,b
 18821  012824  51D2               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 18822  012826  59D0               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 18823  012828  B0D8               	btfsc	status,0,c
 18824  01282A  0012               	return	
 18825  01282C  D7E6               	goto	l184
 18826  01282E                     __end_of_LCD_DrawField:
 18827                           	opt stack 0
 18828                           tosu	equ	0xFFF
 18829                           tosh	equ	0xFFE
 18830                           tosl	equ	0xFFD
 18831                           pclath	equ	0xFFA
 18832                           tblptru	equ	0xFF8
 18833                           tblptrh	equ	0xFF7
 18834                           tblptrl	equ	0xFF6
 18835                           tablat	equ	0xFF5
 18836                           prodh	equ	0xFF4
 18837                           prodl	equ	0xFF3
 18838                           intcon	equ	0xFF2
 18839                           indf0	equ	0xFEF
 18840                           postinc0	equ	0xFEE
 18841                           fsr0h	equ	0xFEA
 18842                           fsr0l	equ	0xFE9
 18843                           wreg	equ	0xFE8
 18844                           indf1	equ	0xFE7
 18845                           postdec1	equ	0xFE5
 18846                           fsr1h	equ	0xFE2
 18847                           fsr1l	equ	0xFE1
 18848                           indf2	equ	0xFDF
 18849                           postinc2	equ	0xFDE
 18850                           postdec2	equ	0xFDD
 18851                           plusw2	equ	0xFDB
 18852                           fsr2h	equ	0xFDA
 18853                           fsr2l	equ	0xFD9
 18854                           status	equ	0xFD8
 18855                           
 18856 ;; *************** function ___wmul *****************
 18857 ;; Defined at:
 18858 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 18859 ;; Parameters:    Size  Location     Type
 18860 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18861 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18862 ;; Auto vars:     Size  Location     Type
 18863 ;;  product         2    4[BANK0 ] unsigned int 
 18864 ;; Return value:  Size  Location     Type
 18865 ;;                  2    0[BANK0 ] unsigned int 
 18866 ;; Registers used:
 18867 ;;		wreg, status,2, status,0, prodl, prodh
 18868 ;; Tracked objects:
 18869 ;;		On entry : 0/0
 18870 ;;		On exit  : 0/0
 18871 ;;		Unchanged: 0/0
 18872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18873 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18876 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18877 ;;Total ram usage:        6 bytes
 18878 ;; Hardware stack levels used:    1
 18879 ;; Hardware stack levels required when called:    7
 18880 ;; This function calls:
 18881 ;;		Nothing
 18882 ;; This function is called by:
 18883 ;;		_LCD_DrawField
 18884 ;;		_ADCAverage
 18885 ;; This function uses a non-reentrant model
 18886 ;;
 18887                           
 18888                           	psect	text108
 18889  013772                     __ptext108:
 18890                           	opt stack 0
 18891  013772                     ___wmul:
 18892                           	opt stack 21
 18893                           
 18894                           ; BSR set to: 0
 18895                           ;incstack = 0
 18896  013772  0100               	movlb	0	; () banked
 18897  013774  51B3               	movf	___wmul@multiplier& (0+255),w,b
 18898  013776  03B5               	mulwf	___wmul@multiplicand& (0+255),b
 18899  013778  CFF3 F0B7          	movff	prodl,___wmul@product
 18900  01377C  CFF4 F0B8          	movff	prodh,___wmul@product+1
 18901  013780  51B3               	movf	___wmul@multiplier& (0+255),w,b
 18902  013782  03B6               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18903  013784  50F3               	movf	prodl,w,c
 18904  013786  27B8               	addwf	(___wmul@product+1)& (0+255),f,b
 18905  013788  51B4               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18906  01378A  03B5               	mulwf	___wmul@multiplicand& (0+255),b
 18907  01378C  50F3               	movf	prodl,w,c
 18908  01378E  27B8               	addwf	(___wmul@product+1)& (0+255),f,b
 18909                           
 18910                           ; BSR set to: 0
 18911  013790  C0B7  F0B3         	movff	___wmul@product,?___wmul
 18912  013794  C0B8  F0B4         	movff	___wmul@product+1,?___wmul+1
 18913  013798  0012               	return	
 18914  01379A                     __end_of___wmul:
 18915                           	opt stack 0
 18916                           tosu	equ	0xFFF
 18917                           tosh	equ	0xFFE
 18918                           tosl	equ	0xFFD
 18919                           pclath	equ	0xFFA
 18920                           tblptru	equ	0xFF8
 18921                           tblptrh	equ	0xFF7
 18922                           tblptrl	equ	0xFF6
 18923                           tablat	equ	0xFF5
 18924                           prodh	equ	0xFF4
 18925                           prodl	equ	0xFF3
 18926                           intcon	equ	0xFF2
 18927                           indf0	equ	0xFEF
 18928                           postinc0	equ	0xFEE
 18929                           fsr0h	equ	0xFEA
 18930                           fsr0l	equ	0xFE9
 18931                           wreg	equ	0xFE8
 18932                           indf1	equ	0xFE7
 18933                           postdec1	equ	0xFE5
 18934                           fsr1h	equ	0xFE2
 18935                           fsr1l	equ	0xFE1
 18936                           indf2	equ	0xFDF
 18937                           postinc2	equ	0xFDE
 18938                           postdec2	equ	0xFDD
 18939                           plusw2	equ	0xFDB
 18940                           fsr2h	equ	0xFDA
 18941                           fsr2l	equ	0xFD9
 18942                           status	equ	0xFD8
 18943                           
 18944 ;; *************** function _Set_Addr_Window *****************
 18945 ;; Defined at:
 18946 ;;		line 214 in file "Library/LCD.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;  xs              1    wreg     unsigned char 
 18949 ;;  ys              1    5[BANK0 ] unsigned char 
 18950 ;;  xe              1    6[BANK0 ] unsigned char 
 18951 ;;  ye              1    7[BANK0 ] unsigned char 
 18952 ;; Auto vars:     Size  Location     Type
 18953 ;;  xs              1    8[BANK0 ] unsigned char 
 18954 ;; Return value:  Size  Location     Type
 18955 ;;                  1    wreg      void 
 18956 ;; Registers used:
 18957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18958 ;; Tracked objects:
 18959 ;;		On entry : 0/0
 18960 ;;		On exit  : 0/0
 18961 ;;		Unchanged: 0/0
 18962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18963 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;Total ram usage:        4 bytes
 18968 ;; Hardware stack levels used:    1
 18969 ;; Hardware stack levels required when called:    9
 18970 ;; This function calls:
 18971 ;;		_LCD_Write
 18972 ;; This function is called by:
 18973 ;;		_LCD_Fill
 18974 ;;		_LCD_FillRectangle
 18975 ;;		_LCD_DrawField
 18976 ;;		_RAM_Address_Set
 18977 ;;		_LCD_DrawPixel
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981                           	psect	text109
 18982  0122C0                     __ptext109:
 18983                           	opt stack 0
 18984  0122C0                     _Set_Addr_Window:
 18985                           	opt stack 19
 18986                           
 18987                           ; BSR set to: 0
 18988                           ;incstack = 0
 18989                           ;Set_Addr_Window@xs stored from wreg
 18990  0122C0  0100               	movlb	0	; () banked
 18991  0122C2  6FBB               	movwf	Set_Addr_Window@xs& (0+255),b
 18992                           
 18993                           ;LCD.c: 216: ys+=2;
 18994  0122C4  0E02               	movlw	2
 18995  0122C6  0100               	movlb	0	; () banked
 18996  0122C8  27B8               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18997                           
 18998                           ;LCD.c: 217: ye+=2;
 18999  0122CA  0E02               	movlw	2
 19000  0122CC  27BA               	addwf	Set_Addr_Window@ye& (0+255),f,b
 19001                           
 19002                           ;LCD.c: 218: xs+=3;
 19003  0122CE  0E03               	movlw	3
 19004  0122D0  27BB               	addwf	Set_Addr_Window@xs& (0+255),f,b
 19005                           
 19006                           ;LCD.c: 219: xe+=3;
 19007  0122D2  0E03               	movlw	3
 19008  0122D4  27B9               	addwf	Set_Addr_Window@xe& (0+255),f,b
 19009                           
 19010                           ; BSR set to: 0
 19011                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 19012  0122D6  0E00               	movlw	0
 19013  0122D8  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19014  0122DA  0E2A               	movlw	42
 19015  0122DC  EC49  F09C         	call	_LCD_Write
 19016                           
 19017                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 19018  0122E0  0E01               	movlw	1
 19019  0122E2  0100               	movlb	0	; () banked
 19020  0122E4  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19021  0122E6  0E00               	movlw	0
 19022  0122E8  EC49  F09C         	call	_LCD_Write
 19023                           
 19024                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 19025  0122EC  0E01               	movlw	1
 19026  0122EE  0100               	movlb	0	; () banked
 19027  0122F0  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19028  0122F2  51BB               	movf	Set_Addr_Window@xs& (0+255),w,b
 19029  0122F4  EC49  F09C         	call	_LCD_Write
 19030                           
 19031                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 19032  0122F8  0E01               	movlw	1
 19033  0122FA  0100               	movlb	0	; () banked
 19034  0122FC  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19035  0122FE  0E00               	movlw	0
 19036  012300  EC49  F09C         	call	_LCD_Write
 19037                           
 19038                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 19039  012304  0E01               	movlw	1
 19040  012306  0100               	movlb	0	; () banked
 19041  012308  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19042  01230A  51B9               	movf	Set_Addr_Window@xe& (0+255),w,b
 19043  01230C  EC49  F09C         	call	_LCD_Write
 19044                           
 19045                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 19046  012310  0E00               	movlw	0
 19047  012312  0100               	movlb	0	; () banked
 19048  012314  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19049  012316  0E2B               	movlw	43
 19050  012318  EC49  F09C         	call	_LCD_Write
 19051                           
 19052                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 19053  01231C  0E01               	movlw	1
 19054  01231E  0100               	movlb	0	; () banked
 19055  012320  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19056  012322  0E00               	movlw	0
 19057  012324  EC49  F09C         	call	_LCD_Write
 19058                           
 19059                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 19060  012328  0E01               	movlw	1
 19061  01232A  0100               	movlb	0	; () banked
 19062  01232C  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19063  01232E  51B8               	movf	Set_Addr_Window@ys& (0+255),w,b
 19064  012330  EC49  F09C         	call	_LCD_Write
 19065                           
 19066                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 19067  012334  0E01               	movlw	1
 19068  012336  0100               	movlb	0	; () banked
 19069  012338  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19070  01233A  0E00               	movlw	0
 19071  01233C  EC49  F09C         	call	_LCD_Write
 19072                           
 19073                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 19074  012340  0E01               	movlw	1
 19075  012342  0100               	movlb	0	; () banked
 19076  012344  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19077  012346  51BA               	movf	Set_Addr_Window@ye& (0+255),w,b
 19078  012348  EC49  F09C         	call	_LCD_Write
 19079                           
 19080                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 19081  01234C  0E00               	movlw	0
 19082  01234E  0100               	movlb	0	; () banked
 19083  012350  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19084  012352  0E2C               	movlw	44
 19085  012354  EC49  F09C         	call	_LCD_Write
 19086  012358  0012               	return		;funcret
 19087  01235A                     __end_of_Set_Addr_Window:
 19088                           	opt stack 0
 19089                           tosu	equ	0xFFF
 19090                           tosh	equ	0xFFE
 19091                           tosl	equ	0xFFD
 19092                           pclath	equ	0xFFA
 19093                           tblptru	equ	0xFF8
 19094                           tblptrh	equ	0xFF7
 19095                           tblptrl	equ	0xFF6
 19096                           tablat	equ	0xFF5
 19097                           prodh	equ	0xFF4
 19098                           prodl	equ	0xFF3
 19099                           intcon	equ	0xFF2
 19100                           indf0	equ	0xFEF
 19101                           postinc0	equ	0xFEE
 19102                           fsr0h	equ	0xFEA
 19103                           fsr0l	equ	0xFE9
 19104                           wreg	equ	0xFE8
 19105                           indf1	equ	0xFE7
 19106                           postdec1	equ	0xFE5
 19107                           fsr1h	equ	0xFE2
 19108                           fsr1l	equ	0xFE1
 19109                           indf2	equ	0xFDF
 19110                           postinc2	equ	0xFDE
 19111                           postdec2	equ	0xFDD
 19112                           plusw2	equ	0xFDB
 19113                           fsr2h	equ	0xFDA
 19114                           fsr2l	equ	0xFD9
 19115                           status	equ	0xFD8
 19116                           
 19117 ;; *************** function _LCD_Word_Write *****************
 19118 ;; Defined at:
 19119 ;;		line 198 in file "Library/LCD.c"
 19120 ;; Parameters:    Size  Location     Type
 19121 ;;  value           2    5[BANK0 ] unsigned short 
 19122 ;; Auto vars:     Size  Location     Type
 19123 ;;		None
 19124 ;; Return value:  Size  Location     Type
 19125 ;;                  1    wreg      void 
 19126 ;; Registers used:
 19127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19128 ;; Tracked objects:
 19129 ;;		On entry : 0/0
 19130 ;;		On exit  : 0/0
 19131 ;;		Unchanged: 0/0
 19132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19133 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19137 ;;Total ram usage:        2 bytes
 19138 ;; Hardware stack levels used:    1
 19139 ;; Hardware stack levels required when called:    9
 19140 ;; This function calls:
 19141 ;;		_LCD_Write
 19142 ;; This function is called by:
 19143 ;;		_LCD_Fill
 19144 ;;		_LCD_FillRectangle
 19145 ;;		_LCD_DrawField
 19146 ;;		_LCD_DrawPixel
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           	psect	text110
 19151  013908                     __ptext110:
 19152                           	opt stack 0
 19153  013908                     _LCD_Word_Write:
 19154                           	opt stack 19
 19155                           
 19156                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 19157                           
 19158                           ;incstack = 0
 19159  013908  0E01               	movlw	1
 19160  01390A  0100               	movlb	0	; () banked
 19161  01390C  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19162  01390E  51B9               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 19163  013910  EC49  F09C         	call	_LCD_Write
 19164                           
 19165                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 19166  013914  0E01               	movlw	1
 19167  013916  0100               	movlb	0	; () banked
 19168  013918  6FB6               	movwf	LCD_Write@mode& (0+255),b
 19169  01391A  51B8               	movf	LCD_Word_Write@value& (0+255),w,b
 19170  01391C  EC49  F09C         	call	_LCD_Write
 19171  013920  0012               	return		;funcret
 19172  013922                     __end_of_LCD_Word_Write:
 19173                           	opt stack 0
 19174                           tosu	equ	0xFFF
 19175                           tosh	equ	0xFFE
 19176                           tosl	equ	0xFFD
 19177                           pclath	equ	0xFFA
 19178                           tblptru	equ	0xFF8
 19179                           tblptrh	equ	0xFF7
 19180                           tblptrl	equ	0xFF6
 19181                           tablat	equ	0xFF5
 19182                           prodh	equ	0xFF4
 19183                           prodl	equ	0xFF3
 19184                           intcon	equ	0xFF2
 19185                           indf0	equ	0xFEF
 19186                           postinc0	equ	0xFEE
 19187                           fsr0h	equ	0xFEA
 19188                           fsr0l	equ	0xFE9
 19189                           wreg	equ	0xFE8
 19190                           indf1	equ	0xFE7
 19191                           postdec1	equ	0xFE5
 19192                           fsr1h	equ	0xFE2
 19193                           fsr1l	equ	0xFE1
 19194                           indf2	equ	0xFDF
 19195                           postinc2	equ	0xFDE
 19196                           postdec2	equ	0xFDD
 19197                           plusw2	equ	0xFDB
 19198                           fsr2h	equ	0xFDA
 19199                           fsr2l	equ	0xFD9
 19200                           status	equ	0xFD8
 19201                           
 19202 ;; *************** function _LCD_Write *****************
 19203 ;; Defined at:
 19204 ;;		line 67 in file "Library/LCD.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;  value           1    wreg     unsigned char 
 19207 ;;  mode            1    3[BANK0 ] enum E6761
 19208 ;; Auto vars:     Size  Location     Type
 19209 ;;  value           1    4[BANK0 ] unsigned char 
 19210 ;; Return value:  Size  Location     Type
 19211 ;;                  1    wreg      void 
 19212 ;; Registers used:
 19213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19214 ;; Tracked objects:
 19215 ;;		On entry : 0/0
 19216 ;;		On exit  : 0/0
 19217 ;;		Unchanged: 0/0
 19218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19219 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19223 ;;Total ram usage:        2 bytes
 19224 ;; Hardware stack levels used:    1
 19225 ;; Hardware stack levels required when called:    8
 19226 ;; This function calls:
 19227 ;;		_Mode_Set
 19228 ;;		_SPI_Send
 19229 ;; This function is called by:
 19230 ;;		_LCD_Init
 19231 ;;		_LCD_Word_Write
 19232 ;;		_Set_Addr_Window
 19233 ;;		_Set_Rotation
 19234 ;;		_LCD_WriteCMD
 19235 ;;		_LCD_WriteData
 19236 ;;		_LCD_Data_Write
 19237 ;;		_LCD_Data_Write_4k
 19238 ;;		_Invert_Display
 19239 ;; This function uses a non-reentrant model
 19240 ;;
 19241                           
 19242                           	psect	text111
 19243  013892                     __ptext111:
 19244                           	opt stack 0
 19245  013892                     _LCD_Write:
 19246                           	opt stack 20
 19247                           
 19248                           ;incstack = 0
 19249                           ;LCD_Write@value stored from wreg
 19250  013892  0100               	movlb	0	; () banked
 19251  013894  6FB7               	movwf	LCD_Write@value& (0+255),b
 19252                           
 19253                           ;LCD.c: 89: Mode_Set(mode);
 19254  013896  0100               	movlb	0	; () banked
 19255  013898  51B6               	movf	LCD_Write@mode& (0+255),w,b
 19256  01389A  EC37  F09D         	call	_Mode_Set
 19257                           
 19258                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 19259  01389E  0E71               	movlw	low _SPI2
 19260  0138A0  0100               	movlb	0	; () banked
 19261  0138A2  6FB3               	movwf	SPI_Send@pInput& (0+255),b
 19262  0138A4  0E01               	movlw	high _SPI2
 19263  0138A6  6FB4               	movwf	(SPI_Send@pInput+1)& (0+255),b
 19264  0138A8  C0B7  F0B5         	movff	LCD_Write@value,SPI_Send@pData
 19265  0138AC  ECB2  F095         	call	_SPI_Send	;wreg free
 19266  0138B0  0012               	return		;funcret
 19267  0138B2                     __end_of_LCD_Write:
 19268                           	opt stack 0
 19269                           tosu	equ	0xFFF
 19270                           tosh	equ	0xFFE
 19271                           tosl	equ	0xFFD
 19272                           pclath	equ	0xFFA
 19273                           tblptru	equ	0xFF8
 19274                           tblptrh	equ	0xFF7
 19275                           tblptrl	equ	0xFF6
 19276                           tablat	equ	0xFF5
 19277                           prodh	equ	0xFF4
 19278                           prodl	equ	0xFF3
 19279                           intcon	equ	0xFF2
 19280                           indf0	equ	0xFEF
 19281                           postinc0	equ	0xFEE
 19282                           fsr0h	equ	0xFEA
 19283                           fsr0l	equ	0xFE9
 19284                           wreg	equ	0xFE8
 19285                           indf1	equ	0xFE7
 19286                           postdec1	equ	0xFE5
 19287                           fsr1h	equ	0xFE2
 19288                           fsr1l	equ	0xFE1
 19289                           indf2	equ	0xFDF
 19290                           postinc2	equ	0xFDE
 19291                           postdec2	equ	0xFDD
 19292                           plusw2	equ	0xFDB
 19293                           fsr2h	equ	0xFDA
 19294                           fsr2l	equ	0xFD9
 19295                           status	equ	0xFD8
 19296                           
 19297 ;; *************** function _SPI_Send *****************
 19298 ;; Defined at:
 19299 ;;		line 226 in file "Library/SPI.c"
 19300 ;; Parameters:    Size  Location     Type
 19301 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19302 ;;		 -> SPI1(11), SPI2(11), 
 19303 ;;  pData           1    2[BANK0 ] unsigned char 
 19304 ;; Auto vars:     Size  Location     Type
 19305 ;;		None
 19306 ;; Return value:  Size  Location     Type
 19307 ;;                  1    wreg      unsigned char 
 19308 ;; Registers used:
 19309 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19310 ;; Tracked objects:
 19311 ;;		On entry : 0/0
 19312 ;;		On exit  : 0/0
 19313 ;;		Unchanged: 0/0
 19314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19315 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19318 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19319 ;;Total ram usage:        3 bytes
 19320 ;; Hardware stack levels used:    1
 19321 ;; Hardware stack levels required when called:    7
 19322 ;; This function calls:
 19323 ;;		Nothing
 19324 ;; This function is called by:
 19325 ;;		_LCD_Write
 19326 ;;		_OutSeg
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           	psect	text112
 19331  012B64                     __ptext112:
 19332                           	opt stack 0
 19333  012B64                     _SPI_Send:
 19334                           	opt stack 20
 19335                           
 19336                           ;SPI.c: 253: switch (pInput->mChannel)
 19337                           
 19338                           ;incstack = 0
 19339  012B64  D025               	goto	l678
 19340  012B66                     
 19341                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19342  012B66  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19343  012B6A  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19344  012B6E  0100               	movlb	0	; () banked
 19345  012B70  94DF               	bcf	indf2,2,c
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;SPI.c: 257: SSP1BUF = pData;
 19349  012B72  C0B5  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19350  012B76                     
 19351                           ; BSR set to: 0
 19352  012B76  A0C7               	btfss	4039,0,c	;volatile
 19353  012B78  D7FE               	goto	l681
 19354                           
 19355                           ;SPI.c: 259: pData = SSP1BUF;
 19356  012B7A  CFC9 F0B5          	movff	4041,SPI_Send@pData	;volatile
 19357                           
 19358                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19359  012B7E  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19360  012B82  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19361  012B86  0100               	movlb	0	; () banked
 19362  012B88  84DF               	bsf	indf2,2,c
 19363                           
 19364                           ; BSR set to: 0
 19365                           ;SPI.c: 261: return pData;
 19366                           ;	Return value of _SPI_Send is never used
 19367  012B8A  0012               	return	
 19368  012B8C                     
 19369                           ; BSR set to: 0
 19370                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 19371                           
 19372                           ; BSR set to: 0
 19373  012B8C  C09F  FFD9         	movff	_PortD+4,fsr2l
 19374  012B90  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19375  012B94  9EDF               	bcf	indf2,7,c
 19376                           
 19377                           ; BSR set to: 0
 19378                           ;SPI.c: 264: SSP2BUF = pData;
 19379  012B96  C0B5  FF6F         	movff	SPI_Send@pData,3951	;volatile
 19380  012B9A                     
 19381                           ; BSR set to: 0
 19382  012B9A  A06D               	btfss	3949,0,c	;volatile
 19383  012B9C  D7FE               	goto	l686
 19384                           
 19385                           ;SPI.c: 266: pData = SSP2BUF;
 19386  012B9E  CF6F F0B5          	movff	3951,SPI_Send@pData	;volatile
 19387                           
 19388                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 19389  012BA2  C09F  FFD9         	movff	_PortD+4,fsr2l
 19390  012BA6  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19391  012BAA  0100               	movlb	0	; () banked
 19392  012BAC  8EDF               	bsf	indf2,7,c
 19393                           
 19394                           ; BSR set to: 0
 19395                           ;SPI.c: 269: };
 19396                           
 19397                           ; BSR set to: 0
 19398                           ;SPI.c: 268: return pData;
 19399                           ;	Return value of _SPI_Send is never used
 19400  012BAE  0012               	return	
 19401  012BB0                     l678:
 19402                           
 19403                           ; BSR set to: 0
 19404  012BB0  0100               	movlb	0	; () banked
 19405  012BB2  EE20 F002          	lfsr	2,2
 19406  012BB6  51B3               	movf	SPI_Send@pInput& (0+255),w,b
 19407  012BB8  26D9               	addwf	fsr2l,f,c
 19408  012BBA  51B4               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 19409  012BBC  22DA               	addwfc	fsr2h,f,c
 19410  012BBE  50DF               	movf	indf2,w,c
 19411                           
 19412                           ; Switch size 1, requested type "space"
 19413                           ; Number of cases is 2, Range of values is 0 to 1
 19414                           ; switch strategies available:
 19415                           ; Name         Instructions Cycles
 19416                           ; simple_byte            7     4 (average)
 19417                           ;	Chosen strategy is simple_byte
 19418  012BC0  0A00               	xorlw	0	; case 0
 19419  012BC2  B4D8               	btfsc	status,2,c
 19420  012BC4  D7D0               	goto	l679
 19421  012BC6  0A01               	xorlw	1	; case 1
 19422  012BC8  A4D8               	btfss	status,2,c
 19423  012BCA  0012               	return	
 19424  012BCC  D7DF               	goto	l684
 19425  012BCE                     __end_of_SPI_Send:
 19426                           	opt stack 0
 19427                           tosu	equ	0xFFF
 19428                           tosh	equ	0xFFE
 19429                           tosl	equ	0xFFD
 19430                           pclath	equ	0xFFA
 19431                           tblptru	equ	0xFF8
 19432                           tblptrh	equ	0xFF7
 19433                           tblptrl	equ	0xFF6
 19434                           tablat	equ	0xFF5
 19435                           prodh	equ	0xFF4
 19436                           prodl	equ	0xFF3
 19437                           intcon	equ	0xFF2
 19438                           indf0	equ	0xFEF
 19439                           postinc0	equ	0xFEE
 19440                           fsr0h	equ	0xFEA
 19441                           fsr0l	equ	0xFE9
 19442                           wreg	equ	0xFE8
 19443                           indf1	equ	0xFE7
 19444                           postdec1	equ	0xFE5
 19445                           fsr1h	equ	0xFE2
 19446                           fsr1l	equ	0xFE1
 19447                           indf2	equ	0xFDF
 19448                           postinc2	equ	0xFDE
 19449                           postdec2	equ	0xFDD
 19450                           plusw2	equ	0xFDB
 19451                           fsr2h	equ	0xFDA
 19452                           fsr2l	equ	0xFD9
 19453                           status	equ	0xFD8
 19454                           
 19455 ;; *************** function _Mode_Set *****************
 19456 ;; Defined at:
 19457 ;;		line 40 in file "Library/LCD.c"
 19458 ;; Parameters:    Size  Location     Type
 19459 ;;  pMode           1    wreg     enum E6761
 19460 ;; Auto vars:     Size  Location     Type
 19461 ;;  pMode           1    0[BANK0 ] enum E6761
 19462 ;; Return value:  Size  Location     Type
 19463 ;;                  1    wreg      void 
 19464 ;; Registers used:
 19465 ;;		wreg
 19466 ;; Tracked objects:
 19467 ;;		On entry : 0/0
 19468 ;;		On exit  : 0/0
 19469 ;;		Unchanged: 0/0
 19470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19475 ;;Total ram usage:        1 bytes
 19476 ;; Hardware stack levels used:    1
 19477 ;; Hardware stack levels required when called:    7
 19478 ;; This function calls:
 19479 ;;		Nothing
 19480 ;; This function is called by:
 19481 ;;		_LCD_Write
 19482 ;; This function uses a non-reentrant model
 19483 ;;
 19484                           
 19485                           	psect	text113
 19486  013A6E                     __ptext113:
 19487                           	opt stack 0
 19488  013A6E                     _Mode_Set:
 19489                           	opt stack 20
 19490                           
 19491                           ; BSR set to: 0
 19492                           ;incstack = 0
 19493                           ;Mode_Set@pMode stored from wreg
 19494  013A6E  0100               	movlb	0	; () banked
 19495  013A70  6FB3               	movwf	Mode_Set@pMode& (0+255),b
 19496                           
 19497                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19498  013A72  0100               	movlb	0	; () banked
 19499  013A74  B1B3               	btfsc	Mode_Set@pMode& (0+255),0,b
 19500  013A76  D002               	bra	u8025
 19501  013A78  9E85               	bcf	3973,7,c	;volatile
 19502  013A7A  D001               	bra	u8026
 19503  013A7C                     u8025:
 19504  013A7C  8E85               	bsf	3973,7,c	;volatile
 19505  013A7E                     u8026:
 19506  013A7E  0012               	return		;funcret
 19507  013A80                     __end_of_Mode_Set:
=======
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   150                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text138,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text139,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text140,global,reloc=2,class=CODE,delta=1
   160                           	psect	text141,global,reloc=2,class=CODE,delta=1
   161                           	psect	text142,global,reloc=2,class=CODE,delta=1
   162                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text145,global,reloc=2,class=CODE,delta=1
   165                           	psect	text146,global,reloc=2,class=CODE,delta=1
   166                           	psect	text147,global,reloc=2,class=CODE,delta=1
   167                           	psect	text148,global,reloc=2,class=CODE,delta=1
   168                           	psect	text149,global,reloc=2,class=CODE,delta=1
   169                           	psect	text150,global,reloc=2,class=CODE,delta=1
   170                           	psect	text151,global,reloc=2,class=CODE,delta=1
   171                           	psect	text152,global,reloc=2,class=CODE,delta=1
   172                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   173                           	psect	text154,global,reloc=2,class=CODE,delta=1
   174                           	psect	text155,global,reloc=2,class=CODE,delta=1
   175                           	psect	text156,global,reloc=2,class=CODE,delta=1
   176                           	psect	text157,global,reloc=2,class=CODE,delta=1
   177                           	psect	text158,global,reloc=2,class=CODE,delta=1
   178                           	psect	text159,global,reloc=2,class=CODE,delta=1
   179                           	psect	text160,global,reloc=2,class=CODE,delta=1
   180                           	psect	text161,global,reloc=2,class=CODE,delta=1,inline
   181                           	psect	text162,global,reloc=2,class=CODE,delta=1
   182                           	psect	text163,global,reloc=2,class=CODE,delta=1
   183                           	psect	text164,global,reloc=2,class=CODE,delta=1
   184                           	psect	text165,global,reloc=2,class=CODE,delta=1
   185                           	psect	text166,global,reloc=2,class=CODE,delta=1
   186                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   187                           	psect	text167,global,reloc=2,class=CODE,delta=1
   188                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   189                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   190  0000                     
   191                           ; Version 1.45
   192                           ; Generated 16/11/2017 GMT
   193                           ; 
   194                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   195                           ; All rights reserved.
   196                           ; 
   197                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   198                           ; 
   199                           ; Redistribution and use in source and binary forms, with or without modification, are
   200                           ; permitted provided that the following conditions are met:
   201                           ; 
   202                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   203                           ;        conditions and the following disclaimer.
   204                           ; 
   205                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   206                           ;        of conditions and the following disclaimer in the documentation and/or other
   207                           ;        materials provided with the distribution.
   208                           ; 
   209                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   210                           ;        software without specific prior written permission.
   211                           ; 
   212                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   213                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   214                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   215                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   216                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   217                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   218                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   219                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   220                           ; 
   221                           ; 
   222                           ; Code-generator required, PIC18F67J50 Definitions
   223                           ; 
   224                           ; SFR Addresses
   225  0000                     
   226                           	psect	idataCOMRAM
   227  016046                     __pidataCOMRAM:
   228                           	opt stack 0
   229                           
   230                           ;initializer for _gCursor
   231  016046  0006               	dw	6
   232  016048  0006               	dw	6
   233                           
   234                           ;initializer for _Low_Sensor
   235  01604A  2710               	dw	10000
   236                           
   237                           ;initializer for _Bus_State
   238  01604C  01                 	db	1
   239                           
   240                           ;initializer for _change
   241  01604D  01                 	db	1
   242                           
   243                           ;initializer for _zero
   244  01604E  30                 	db	48
   245                           
   246                           ;initializer for _l
   247  01604F  80                 	db	128
   248                           
   249                           ;initializer for _w
   250  016050  80                 	db	128
   251                           
   252                           	psect	idataBANK1
   253  015F0C                     __pidataBANK1:
   254                           	opt stack 0
   255                           
   256                           ;initializer for Console_Render@F6956
   257  015F0C  0006               	dw	6
   258  015F0E  0006               	dw	6
   259                           
   260                           ;initializer for _gLineSize
   261  015F10  0080               	dw	128
   262  015F12  0007               	dw	7
   263                           
   264                           ;initializer for _gCharSize
   265  015F14  0005               	dw	5
   266  015F16  0007               	dw	7
   267                           
   268                           ;initializer for _countOff
   269  015F18  00F8               	dw	248
   270                           
   271                           ;initializer for _countOn
   272  015F1A  007C               	dw	124
   273                           
   274                           ;initializer for _numReadings
   275  015F1C  0032               	dw	50
   276                           
   277                           ;initializer for _gForecolour
   278  015F1E  FFFF               	dw	65535
   279                           
   280                           ;initializer for _A
   281  015F20  41                 	db	65
   282                           
   283                           ;initializer for _a
   284  015F21  61                 	db	97
   285                           
   286                           	psect	mediumconst
   287  00FB56                     __pmediumconst:
   288                           	opt stack 0
   289  00FB56  00                 	db	0
   290  00FB57                     _InitList:
   291                           	opt stack 0
   292  00FB57  1100               	dw	4352
   293  00FB59  0080               	dw	128
   294  00FB5B  012C               	dw	300
   295  00FB5D  B100               	dw	45312
   296  00FB5F  0002               	dw	2
   297  00FB61  0035               	dw	53
   298  00FB63  0036               	dw	54
   299  00FB65  B200               	dw	45568
   300  00FB67  0002               	dw	2
   301  00FB69  0035               	dw	53
   302  00FB6B  0036               	dw	54
   303  00FB6D  B300               	dw	45824
   304  00FB6F  0002               	dw	2
   305  00FB71  0035               	dw	53
   306  00FB73  0036               	dw	54
   307  00FB75  0002               	dw	2
   308  00FB77  0035               	dw	53
   309  00FB79  0036               	dw	54
   310  00FB7B  B400               	dw	46080
   311  00FB7D  0000               	dw	0
   312  00FB7F  C000               	dw	49152
   313  00FB81  00A2               	dw	162
   314  00FB83  0002               	dw	2
   315  00FB85  0084               	dw	132
   316  00FB87  C100               	dw	49408
   317  00FB89  00C5               	dw	197
   318  00FB8B  C200               	dw	49664
   319  00FB8D  000D               	dw	13
   320  00FB8F  0000               	dw	0
   321  00FB91  C300               	dw	49920
   322  00FB93  008D               	dw	141
   323  00FB95  002A               	dw	42
   324  00FB97  C400               	dw	50176
   325  00FB99  008D               	dw	141
   326  00FB9B  00EE               	dw	238
   327  00FB9D  C500               	dw	50432
   328  00FB9F  000A               	dw	10
   329  00FBA1  3600               	dw	13824
   330  00FBA3  00C8               	dw	200
   331  00FBA5  E000               	dw	57344
   332  00FBA7  0012               	dw	18
   333  00FBA9  001C               	dw	28
   334  00FBAB  0010               	dw	16
   335  00FBAD  0018               	dw	24
   336  00FBAF  0033               	dw	51
   337  00FBB1  002C               	dw	44
   338  00FBB3  0025               	dw	37
   339  00FBB5  0028               	dw	40
   340  00FBB7  0028               	dw	40
   341  00FBB9  0027               	dw	39
   342  00FBBB  002F               	dw	47
   343  00FBBD  003C               	dw	60
   344  00FBBF  0000               	dw	0
   345  00FBC1  0003               	dw	3
   346  00FBC3  0003               	dw	3
   347  00FBC5  0010               	dw	16
   348  00FBC7  0080               	dw	128
   349  00FBC9  0078               	dw	120
   350  00FBCB  E100               	dw	57600
   351  00FBCD  0012               	dw	18
   352  00FBCF  001C               	dw	28
   353  00FBD1  0010               	dw	16
   354  00FBD3  0018               	dw	24
   355  00FBD5  002D               	dw	45
   356  00FBD7  0028               	dw	40
   357  00FBD9  0023               	dw	35
   358  00FBDB  0028               	dw	40
   359  00FBDD  0028               	dw	40
   360  00FBDF  0026               	dw	38
   361  00FBE1  002F               	dw	47
   362  00FBE3  003B               	dw	59
   363  00FBE5  0000               	dw	0
   364  00FBE7  0003               	dw	3
   365  00FBE9  0003               	dw	3
   366  00FBEB  0010               	dw	16
   367  00FBED  3A00               	dw	14848
   368  00FBEF  0005               	dw	5
   369  00FBF1  2A00               	dw	10752
   370  00FBF3  0000               	dw	0
   371  00FBF5  0002               	dw	2
   372  00FBF7  0000               	dw	0
   373  00FBF9  0081               	dw	129
   374  00FBFB  2B00               	dw	11008
   375  00FBFD  0000               	dw	0
   376  00FBFF  0003               	dw	3
   377  00FC01  0000               	dw	0
   378  00FC03  00A2               	dw	162
   379  00FC05  2900               	dw	10496
   380  00FC07  2C00               	dw	11264
   381  00FC09                     __end_of_InitList:
   382                           	opt stack 0
   383  00FC09                     Timer0_Init@PRESCALE:
   384                           	opt stack 0
   385  00FC09  0002               	dw	2
   386  00FC0B  0004               	dw	4
   387  00FC0D  0008               	dw	8
   388  00FC0F  0010               	dw	16
   389  00FC11  0020               	dw	32
   390  00FC13  0040               	dw	64
   391  00FC15  0080               	dw	128
   392  00FC17  0100               	dw	256
   393  00FC19                     __end_ofTimer0_Init@PRESCALE:
   394                           	opt stack 0
   395  00FC19                     PortProperty_Valid@F6830:
   396                           	opt stack 0
   397  00FC19  00                 	db	0
   398  00FC1A  01                 	db	1
   399  00FC1B  02                 	db	2
   400  00FC1C  00                 	db	0
   401  00FC1D  01                 	db	1
   402  00FC1E  00                 	db	0
   403  00FC1F  01                 	db	1
   404  00FC20  00                 	db	0
   405  00FC21  02                 	db	2
   406  00FC22  02                 	db	2
   407  00FC23  00                 	db	0
   408  00FC24  00                 	db	0
   409  00FC25  03                 	db	3
   410  00FC26  03                 	db	3
   411  00FC27  03                 	db	3
   412  00FC28  00                 	db	0
   413  00FC29                     __end_ofPortProperty_Valid@F6830:
   414                           	opt stack 0
   415  00FC29                     _dpowers:
   416                           	opt stack 0
   417  00FC29  0001               	dw	1
   418  00FC2B  000A               	dw	10
   419  00FC2D  0064               	dw	100
   420  00FC2F  03E8               	dw	1000
   421  00FC31  2710               	dw	10000
   422  00FC33                     __end_of_dpowers:
   423                           	opt stack 0
   424  00FC33                     _MASKS:
   425                           	opt stack 0
   426  00FC33  00                 	db	0
   427  00FC34  01                 	db	1
   428  00FC35  03                 	db	3
   429  00FC36  07                 	db	7
   430  00FC37  0F                 	db	15
   431  00FC38  1F                 	db	31
   432  00FC39  3F                 	db	63
   433  00FC3A  7F                 	db	127
   434  00FC3B  FF                 	db	255
   435  00FC3C                     __end_of_MASKS:
   436                           	opt stack 0
   437  00FC3C                     HMI_SetButton@F7213:
   438                           	opt stack 0
   439  00FC3C  00                 	db	0
   440  00FC3D  02                 	db	2
   441  00FC3E  01                 	db	1
   442  00FC3F  03                 	db	3
   443  00FC40                     __end_ofHMI_SetButton@F7213:
   444                           	opt stack 0
   445  00FC40                     Timer2_Init@PRESCALE:
   446                           	opt stack 0
   447  00FC40  01                 	db	1
   448  00FC41  04                 	db	4
   449  00FC42  10                 	db	16
   450  00FC43                     __end_ofTimer2_Init@PRESCALE:
   451                           	opt stack 0
   452  00FC43                     _Font5x7:
   453                           	opt stack 0
   454  00FC43  00                 	db	0
   455  00FC44  00                 	db	0
   456  00FC45  00                 	db	0
   457  00FC46  00                 	db	0
   458  00FC47  00                 	db	0
   459  00FC48  00                 	db	0
   460  00FC49  00                 	db	0
   461  00FC4A  5F                 	db	95
   462  00FC4B  00                 	db	0
   463  00FC4C  00                 	db	0
   464  00FC4D  00                 	db	0
   465  00FC4E  07                 	db	7
   466  00FC4F  00                 	db	0
   467  00FC50  07                 	db	7
   468  00FC51  00                 	db	0
   469  00FC52  14                 	db	20
   470  00FC53  7F                 	db	127
   471  00FC54  14                 	db	20
   472  00FC55  7F                 	db	127
   473  00FC56  14                 	db	20
   474  00FC57  24                 	db	36
   475  00FC58  2A                 	db	42
   476  00FC59  7F                 	db	127
   477  00FC5A  2A                 	db	42
   478  00FC5B  12                 	db	18
   479  00FC5C  23                 	db	35
   480  00FC5D  13                 	db	19
   481  00FC5E  08                 	db	8
   482  00FC5F  64                 	db	100
   483  00FC60  62                 	db	98
   484  00FC61  36                 	db	54
   485  00FC62  49                 	db	73
   486  00FC63  55                 	db	85
   487  00FC64  22                 	db	34
   488  00FC65  50                 	db	80
   489  00FC66  00                 	db	0
   490  00FC67  05                 	db	5
   491  00FC68  03                 	db	3
   492  00FC69  00                 	db	0
   493  00FC6A  00                 	db	0
   494  00FC6B  00                 	db	0
   495  00FC6C  1C                 	db	28
   496  00FC6D  22                 	db	34
   497  00FC6E  41                 	db	65
   498  00FC6F  00                 	db	0
   499  00FC70  00                 	db	0
   500  00FC71  41                 	db	65
   501  00FC72  22                 	db	34
   502  00FC73  1C                 	db	28
   503  00FC74  00                 	db	0
   504  00FC75  08                 	db	8
   505  00FC76  2A                 	db	42
   506  00FC77  1C                 	db	28
   507  00FC78  2A                 	db	42
   508  00FC79  08                 	db	8
   509  00FC7A  08                 	db	8
   510  00FC7B  08                 	db	8
   511  00FC7C  3E                 	db	62
   512  00FC7D  08                 	db	8
   513  00FC7E  08                 	db	8
   514  00FC7F  00                 	db	0
   515  00FC80  50                 	db	80
   516  00FC81  30                 	db	48
   517  00FC82  00                 	db	0
   518  00FC83  00                 	db	0
   519  00FC84  08                 	db	8
   520  00FC85  08                 	db	8
   521  00FC86  08                 	db	8
   522  00FC87  08                 	db	8
   523  00FC88  08                 	db	8
   524  00FC89  00                 	db	0
   525  00FC8A  60                 	db	96
   526  00FC8B  60                 	db	96
   527  00FC8C  00                 	db	0
   528  00FC8D  00                 	db	0
   529  00FC8E  20                 	db	32
   530  00FC8F  10                 	db	16
   531  00FC90  08                 	db	8
   532  00FC91  04                 	db	4
   533  00FC92  02                 	db	2
   534  00FC93  3E                 	db	62
   535  00FC94  51                 	db	81
   536  00FC95  49                 	db	73
   537  00FC96  45                 	db	69
   538  00FC97  3E                 	db	62
   539  00FC98  00                 	db	0
   540  00FC99  42                 	db	66
   541  00FC9A  7F                 	db	127
   542  00FC9B  40                 	db	64
   543  00FC9C  00                 	db	0
   544  00FC9D  42                 	db	66
   545  00FC9E  61                 	db	97
   546  00FC9F  51                 	db	81
   547  00FCA0  49                 	db	73
   548  00FCA1  46                 	db	70
   549  00FCA2  21                 	db	33
   550  00FCA3  41                 	db	65
   551  00FCA4  45                 	db	69
   552  00FCA5  4B                 	db	75
   553  00FCA6  31                 	db	49
   554  00FCA7  18                 	db	24
   555  00FCA8  14                 	db	20
   556  00FCA9  12                 	db	18
   557  00FCAA  7F                 	db	127
   558  00FCAB  10                 	db	16
   559  00FCAC  27                 	db	39
   560  00FCAD  45                 	db	69
   561  00FCAE  45                 	db	69
   562  00FCAF  45                 	db	69
   563  00FCB0  39                 	db	57
   564  00FCB1  3C                 	db	60
   565  00FCB2  4A                 	db	74
   566  00FCB3  49                 	db	73
   567  00FCB4  49                 	db	73
   568  00FCB5  30                 	db	48
   569  00FCB6  01                 	db	1
   570  00FCB7  71                 	db	113
   571  00FCB8  09                 	db	9
   572  00FCB9  05                 	db	5
   573  00FCBA  03                 	db	3
   574  00FCBB  36                 	db	54
   575  00FCBC  49                 	db	73
   576  00FCBD  49                 	db	73
   577  00FCBE  49                 	db	73
   578  00FCBF  36                 	db	54
   579  00FCC0  06                 	db	6
   580  00FCC1  49                 	db	73
   581  00FCC2  49                 	db	73
   582  00FCC3  29                 	db	41
   583  00FCC4  1E                 	db	30
   584  00FCC5  00                 	db	0
   585  00FCC6  36                 	db	54
   586  00FCC7  36                 	db	54
   587  00FCC8  00                 	db	0
   588  00FCC9  00                 	db	0
   589  00FCCA  00                 	db	0
   590  00FCCB  56                 	db	86
   591  00FCCC  36                 	db	54
   592  00FCCD  00                 	db	0
   593  00FCCE  00                 	db	0
   594  00FCCF  00                 	db	0
   595  00FCD0  08                 	db	8
   596  00FCD1  14                 	db	20
   597  00FCD2  22                 	db	34
   598  00FCD3  41                 	db	65
   599  00FCD4  14                 	db	20
   600  00FCD5  14                 	db	20
   601  00FCD6  14                 	db	20
   602  00FCD7  14                 	db	20
   603  00FCD8  14                 	db	20
   604  00FCD9  41                 	db	65
   605  00FCDA  22                 	db	34
   606  00FCDB  14                 	db	20
   607  00FCDC  08                 	db	8
   608  00FCDD  00                 	db	0
   609  00FCDE  02                 	db	2
   610  00FCDF  01                 	db	1
   611  00FCE0  51                 	db	81
   612  00FCE1  09                 	db	9
   613  00FCE2  06                 	db	6
   614  00FCE3  32                 	db	50
   615  00FCE4  49                 	db	73
   616  00FCE5  79                 	db	121
   617  00FCE6  41                 	db	65
   618  00FCE7  3E                 	db	62
   619  00FCE8  7E                 	db	126
   620  00FCE9  11                 	db	17
   621  00FCEA  11                 	db	17
   622  00FCEB  11                 	db	17
   623  00FCEC  7E                 	db	126
   624  00FCED  7F                 	db	127
   625  00FCEE  49                 	db	73
   626  00FCEF  49                 	db	73
   627  00FCF0  49                 	db	73
   628  00FCF1  36                 	db	54
   629  00FCF2  3E                 	db	62
   630  00FCF3  41                 	db	65
   631  00FCF4  41                 	db	65
   632  00FCF5  41                 	db	65
   633  00FCF6  22                 	db	34
   634  00FCF7  7F                 	db	127
   635  00FCF8  41                 	db	65
   636  00FCF9  41                 	db	65
   637  00FCFA  22                 	db	34
   638  00FCFB  1C                 	db	28
   639  00FCFC  7F                 	db	127
   640  00FCFD  49                 	db	73
   641  00FCFE  49                 	db	73
   642  00FCFF  49                 	db	73
   643  00FD00  41                 	db	65
   644  00FD01  7F                 	db	127
   645  00FD02  09                 	db	9
   646  00FD03  09                 	db	9
   647  00FD04  01                 	db	1
   648  00FD05  01                 	db	1
   649  00FD06  3E                 	db	62
   650  00FD07  41                 	db	65
   651  00FD08  41                 	db	65
   652  00FD09  51                 	db	81
   653  00FD0A  32                 	db	50
   654  00FD0B  7F                 	db	127
   655  00FD0C  08                 	db	8
   656  00FD0D  08                 	db	8
   657  00FD0E  08                 	db	8
   658  00FD0F  7F                 	db	127
   659  00FD10  00                 	db	0
   660  00FD11  41                 	db	65
   661  00FD12  7F                 	db	127
   662  00FD13  41                 	db	65
   663  00FD14  00                 	db	0
   664  00FD15  20                 	db	32
   665  00FD16  40                 	db	64
   666  00FD17  41                 	db	65
   667  00FD18  3F                 	db	63
   668  00FD19  01                 	db	1
   669  00FD1A  7F                 	db	127
   670  00FD1B  08                 	db	8
   671  00FD1C  14                 	db	20
   672  00FD1D  22                 	db	34
   673  00FD1E  41                 	db	65
   674  00FD1F  7F                 	db	127
   675  00FD20  40                 	db	64
   676  00FD21  40                 	db	64
   677  00FD22  40                 	db	64
   678  00FD23  40                 	db	64
   679  00FD24  7F                 	db	127
   680  00FD25  02                 	db	2
   681  00FD26  04                 	db	4
   682  00FD27  02                 	db	2
   683  00FD28  7F                 	db	127
   684  00FD29  7F                 	db	127
   685  00FD2A  04                 	db	4
   686  00FD2B  08                 	db	8
   687  00FD2C  10                 	db	16
   688  00FD2D  7F                 	db	127
   689  00FD2E  3E                 	db	62
   690  00FD2F  41                 	db	65
   691  00FD30  41                 	db	65
   692  00FD31  41                 	db	65
   693  00FD32  3E                 	db	62
   694  00FD33  7F                 	db	127
   695  00FD34  09                 	db	9
   696  00FD35  09                 	db	9
   697  00FD36  09                 	db	9
   698  00FD37  06                 	db	6
   699  00FD38  3E                 	db	62
   700  00FD39  41                 	db	65
   701  00FD3A  51                 	db	81
   702  00FD3B  21                 	db	33
   703  00FD3C  5E                 	db	94
   704  00FD3D  7F                 	db	127
   705  00FD3E  09                 	db	9
   706  00FD3F  19                 	db	25
   707  00FD40  29                 	db	41
   708  00FD41  46                 	db	70
   709  00FD42  46                 	db	70
   710  00FD43  49                 	db	73
   711  00FD44  49                 	db	73
   712  00FD45  49                 	db	73
   713  00FD46  31                 	db	49
   714  00FD47  01                 	db	1
   715  00FD48  01                 	db	1
   716  00FD49  7F                 	db	127
   717  00FD4A  01                 	db	1
   718  00FD4B  01                 	db	1
   719  00FD4C  3F                 	db	63
   720  00FD4D  40                 	db	64
   721  00FD4E  40                 	db	64
   722  00FD4F  40                 	db	64
   723  00FD50  3F                 	db	63
   724  00FD51  1F                 	db	31
   725  00FD52  20                 	db	32
   726  00FD53  40                 	db	64
   727  00FD54  20                 	db	32
   728  00FD55  1F                 	db	31
   729  00FD56  7F                 	db	127
   730  00FD57  20                 	db	32
   731  00FD58  18                 	db	24
   732  00FD59  20                 	db	32
   733  00FD5A  7F                 	db	127
   734  00FD5B  63                 	db	99
   735  00FD5C  14                 	db	20
   736  00FD5D  08                 	db	8
   737  00FD5E  14                 	db	20
   738  00FD5F  63                 	db	99
   739  00FD60  03                 	db	3
   740  00FD61  04                 	db	4
   741  00FD62  78                 	db	120
   742  00FD63  04                 	db	4
   743  00FD64  03                 	db	3
   744  00FD65  61                 	db	97
   745  00FD66  51                 	db	81
   746  00FD67  49                 	db	73
   747  00FD68  45                 	db	69
   748  00FD69  43                 	db	67
   749  00FD6A  00                 	db	0
   750  00FD6B  00                 	db	0
   751  00FD6C  7F                 	db	127
   752  00FD6D  41                 	db	65
   753  00FD6E  41                 	db	65
   754  00FD6F  02                 	db	2
   755  00FD70  04                 	db	4
   756  00FD71  08                 	db	8
   757  00FD72  10                 	db	16
   758  00FD73  20                 	db	32
   759  00FD74  41                 	db	65
   760  00FD75  41                 	db	65
   761  00FD76  7F                 	db	127
   762  00FD77  00                 	db	0
   763  00FD78  00                 	db	0
   764  00FD79  04                 	db	4
   765  00FD7A  02                 	db	2
   766  00FD7B  01                 	db	1
   767  00FD7C  02                 	db	2
   768  00FD7D  04                 	db	4
   769  00FD7E  40                 	db	64
   770  00FD7F  40                 	db	64
   771  00FD80  40                 	db	64
   772  00FD81  40                 	db	64
   773  00FD82  40                 	db	64
   774  00FD83  00                 	db	0
   775  00FD84  01                 	db	1
   776  00FD85  02                 	db	2
   777  00FD86  04                 	db	4
   778  00FD87  00                 	db	0
   779  00FD88  20                 	db	32
   780  00FD89  54                 	db	84
   781  00FD8A  54                 	db	84
   782  00FD8B  54                 	db	84
   783  00FD8C  78                 	db	120
   784  00FD8D  7F                 	db	127
   785  00FD8E  48                 	db	72
   786  00FD8F  44                 	db	68
   787  00FD90  44                 	db	68
   788  00FD91  38                 	db	56
   789  00FD92  38                 	db	56
   790  00FD93  44                 	db	68
   791  00FD94  44                 	db	68
   792  00FD95  44                 	db	68
   793  00FD96  20                 	db	32
   794  00FD97  38                 	db	56
   795  00FD98  44                 	db	68
   796  00FD99  44                 	db	68
   797  00FD9A  48                 	db	72
   798  00FD9B  7F                 	db	127
   799  00FD9C  38                 	db	56
   800  00FD9D  54                 	db	84
   801  00FD9E  54                 	db	84
   802  00FD9F  54                 	db	84
   803  00FDA0  18                 	db	24
   804  00FDA1  08                 	db	8
   805  00FDA2  7E                 	db	126
   806  00FDA3  09                 	db	9
   807  00FDA4  01                 	db	1
   808  00FDA5  02                 	db	2
   809  00FDA6  08                 	db	8
   810  00FDA7  14                 	db	20
   811  00FDA8  54                 	db	84
   812  00FDA9  54                 	db	84
   813  00FDAA  3C                 	db	60
   814  00FDAB  7F                 	db	127
   815  00FDAC  08                 	db	8
   816  00FDAD  04                 	db	4
   817  00FDAE  04                 	db	4
   818  00FDAF  78                 	db	120
   819  00FDB0  00                 	db	0
   820  00FDB1  44                 	db	68
   821  00FDB2  7D                 	db	125
   822  00FDB3  40                 	db	64
   823  00FDB4  00                 	db	0
   824  00FDB5  20                 	db	32
   825  00FDB6  40                 	db	64
   826  00FDB7  44                 	db	68
   827  00FDB8  3D                 	db	61
   828  00FDB9  00                 	db	0
   829  00FDBA  00                 	db	0
   830  00FDBB  7F                 	db	127
   831  00FDBC  10                 	db	16
   832  00FDBD  28                 	db	40
   833  00FDBE  44                 	db	68
   834  00FDBF  00                 	db	0
   835  00FDC0  41                 	db	65
   836  00FDC1  7F                 	db	127
   837  00FDC2  40                 	db	64
   838  00FDC3  00                 	db	0
   839  00FDC4  7C                 	db	124
   840  00FDC5  04                 	db	4
   841  00FDC6  18                 	db	24
   842  00FDC7  04                 	db	4
   843  00FDC8  78                 	db	120
   844  00FDC9  7C                 	db	124
   845  00FDCA  08                 	db	8
   846  00FDCB  04                 	db	4
   847  00FDCC  04                 	db	4
   848  00FDCD  78                 	db	120
   849  00FDCE  38                 	db	56
   850  00FDCF  44                 	db	68
   851  00FDD0  44                 	db	68
   852  00FDD1  44                 	db	68
   853  00FDD2  38                 	db	56
   854  00FDD3  7C                 	db	124
   855  00FDD4  14                 	db	20
   856  00FDD5  14                 	db	20
   857  00FDD6  14                 	db	20
   858  00FDD7  08                 	db	8
   859  00FDD8  08                 	db	8
   860  00FDD9  14                 	db	20
   861  00FDDA  14                 	db	20
   862  00FDDB  18                 	db	24
   863  00FDDC  7C                 	db	124
   864  00FDDD  7C                 	db	124
   865  00FDDE  08                 	db	8
   866  00FDDF  04                 	db	4
   867  00FDE0  04                 	db	4
   868  00FDE1  08                 	db	8
   869  00FDE2  48                 	db	72
   870  00FDE3  54                 	db	84
   871  00FDE4  54                 	db	84
   872  00FDE5  54                 	db	84
   873  00FDE6  20                 	db	32
   874  00FDE7  04                 	db	4
   875  00FDE8  3F                 	db	63
   876  00FDE9  44                 	db	68
   877  00FDEA  40                 	db	64
   878  00FDEB  20                 	db	32
   879  00FDEC  3C                 	db	60
   880  00FDED  40                 	db	64
   881  00FDEE  40                 	db	64
   882  00FDEF  20                 	db	32
   883  00FDF0  7C                 	db	124
   884  00FDF1  1C                 	db	28
   885  00FDF2  20                 	db	32
   886  00FDF3  40                 	db	64
   887  00FDF4  20                 	db	32
   888  00FDF5  1C                 	db	28
   889  00FDF6  3C                 	db	60
   890  00FDF7  40                 	db	64
   891  00FDF8  30                 	db	48
   892  00FDF9  40                 	db	64
   893  00FDFA  3C                 	db	60
   894  00FDFB  44                 	db	68
   895  00FDFC  28                 	db	40
   896  00FDFD  10                 	db	16
   897  00FDFE  28                 	db	40
   898  00FDFF  44                 	db	68
   899  00FE00  0C                 	db	12
   900  00FE01  50                 	db	80
   901  00FE02  50                 	db	80
   902  00FE03  50                 	db	80
   903  00FE04  3C                 	db	60
   904  00FE05  44                 	db	68
   905  00FE06  64                 	db	100
   906  00FE07  54                 	db	84
   907  00FE08  4C                 	db	76
   908  00FE09  44                 	db	68
   909  00FE0A  00                 	db	0
   910  00FE0B  08                 	db	8
   911  00FE0C  36                 	db	54
   912  00FE0D  41                 	db	65
   913  00FE0E  00                 	db	0
   914  00FE0F  00                 	db	0
   915  00FE10  00                 	db	0
   916  00FE11  7F                 	db	127
   917  00FE12  00                 	db	0
   918  00FE13  00                 	db	0
   919  00FE14  00                 	db	0
   920  00FE15  41                 	db	65
   921  00FE16  36                 	db	54
   922  00FE17  08                 	db	8
   923  00FE18  00                 	db	0
   924  00FE19  08                 	db	8
   925  00FE1A  08                 	db	8
   926  00FE1B  2A                 	db	42
   927  00FE1C  1C                 	db	28
   928  00FE1D  08                 	db	8
   929  00FE1E  08                 	db	8
   930  00FE1F  1C                 	db	28
   931  00FE20  2A                 	db	42
   932  00FE21  08                 	db	8
   933  00FE22  08                 	db	8
   934  00FE23                     __end_of_Font5x7:
   935                           	opt stack 0
   936  00FE23                     exp@coeff:
   937                           	opt stack 0
   938  00FE23  0000               	dw	0
   939  00FE25  3F80               	dw	16256
   940  00FE27  7218               	dw	29208
   941  00FE29  3F31               	dw	16177
   942  00FE2B  FDF0               	dw	65008
   943  00FE2D  3E75               	dw	15989
   944  00FE2F  5847               	dw	22599
   945  00FE31  3D63               	dw	15715
   946  00FE33  9558               	dw	38232
   947  00FE35  3C1D               	dw	15389
   948  00FE37  C482               	dw	50306
   949  00FE39  3AAE               	dw	15022
   950  00FE3B  78A8               	dw	30888
   951  00FE3D  3921               	dw	14625
   952  00FE3F  93EF               	dw	37871
   953  00FE41  3780               	dw	14208
   954  00FE43  92A0               	dw	37536
   955  00FE45  35A7               	dw	13735
   956  00FE47  5646               	dw	22086
   957  00FE49  3415               	dw	13333
   958  00FE4B                     __end_ofexp@coeff:
   959                           	opt stack 0
   960  00FE4B                     log@coeff:
   961                           	opt stack 0
   962  00FE4B  0000               	dw	0
   963  00FE4D  0000               	dw	0
   964  00FE4F  FFC4               	dw	65476
   965  00FE51  3F7F               	dw	16255
   966  00FE53  EF80               	dw	61312
   967  00FE55  BEFF               	dw	48895
   968  00FE57  E190               	dw	57744
   969  00FE59  3EA9               	dw	16041
   970  00FE5B  82EC               	dw	33516
   971  00FE5D  BE76               	dw	48758
   972  00FE5F  AD82               	dw	44418
   973  00FE61  3E2B               	dw	15915
   974  00FE63  3C0E               	dw	15374
   975  00FE65  BDC3               	dw	48579
   976  00FE67  D187               	dw	53639
   977  00FE69  3D13               	dw	15635
   978  00FE6B  7841               	dw	30785
   979  00FE6D  BBD3               	dw	48083
   980  00FE6F                     __end_oflog@coeff:
   981                           	opt stack 0
   982  00FE6F                     _PortG_Property:
   983                           	opt stack 0
   984  00FE6F  FC00               	dw	64512
   985  00FE71                     __end_of_PortG_Property:
   986                           	opt stack 0
   987  00FE71                     _PortF_Property:
   988                           	opt stack 0
   989  00FE71  0FFF               	dw	4095
   990  00FE73                     __end_of_PortF_Property:
   991                           	opt stack 0
   992  00FE73                     _PortE_Property:
   993                           	opt stack 0
   994  00FE73  0000               	dw	0
   995  00FE75                     __end_of_PortE_Property:
   996                           	opt stack 0
   997  00FE75                     _PortD_Property:
   998                           	opt stack 0
   999  00FE75  FFFF               	dw	65535
  1000  00FE77                     __end_of_PortD_Property:
  1001                           	opt stack 0
  1002  00FE77                     _PortC_Property:
  1003                           	opt stack 0
  1004  00FE77  FFF0               	dw	65520
  1005  00FE79                     __end_of_PortC_Property:
  1006                           	opt stack 0
  1007  00FE79                     _PortB_Property:
  1008                           	opt stack 0
  1009  00FE79  FF00               	dw	65280
  1010  00FE7B                     __end_of_PortB_Property:
  1011                           	opt stack 0
  1012  00FE7B                     _PortA_Property:
  1013                           	opt stack 0
  1014  00FE7B  00FF               	dw	255
  1015  00FE7D                     __end_of_PortA_Property:
  1016                           	opt stack 0
  1017  0000                     _ADRES	set	4035
  1018  0000                     _TMR0	set	4054
  1019  0000                     _RCREG1	set	4015
  1020  0000                     _TXREG1	set	4014
  1021  0000                     _SPBRG1	set	4016
  1022  0000                     _TXSTA1bits	set	4013
  1023  0000                     _BAUDCON1bits	set	3966
  1024  0000                     _RCSTA1	set	4012
  1025  0000                     _TXSTA1	set	4013
  1026  0000                     _TRISCbits	set	3988
  1027  0000                     _ADCON0	set	4034
  1028  0000                     _ADCON1	set	4033
  1029  0000                     _PR2	set	4043
  1030  0000                     _T2CONbits	set	4042
  1031  0000                     _T0CONbits	set	4053
  1032  0000                     _RCONbits	set	4048
  1033  0000                     _OSCTUNEbits	set	3995
  1034  0000                     _PIR3	set	4004
  1035  0000                     _PIR2	set	4001
  1036  0000                     _PIR1	set	3998
  1037  0000                     _INTCONbits	set	4082
  1038  0000                     _SSP2CON2bits	set	3947
  1039  0000                     _SSP1CON2bits	set	4037
  1040  0000                     _SSP1ADD	set	4040
  1041  0000                     _ANCON0	set	4033
  1042  0000                     _ADRESL	set	4035
  1043  0000                     _ADRESH	set	4036
  1044  0000                     _ADCON1bits	set	4033
  1045  0000                     _ADCON0bits	set	4034
  1046  0000                     _SSP2CON1bits	set	3948
  1047  0000                     _SSP1CON1bits	set	4038
  1048  0000                     _SSP2STATbits	set	3949
  1049  0000                     _SSP1STATbits	set	4039
  1050  0000                     _PIE3bits	set	4003
  1051  0000                     _PIE1bits	set	3997
  1052  0000                     _PIR3bits	set	4004
  1053  0000                     _PIR1bits	set	3998
  1054  0000                     _IPR3bits	set	4005
  1055  0000                     _IPR1bits	set	3999
  1056  0000                     _PORTFbits	set	3973
  1057  0000                     _SSP2CON2	set	3947
  1058  0000                     _SSP1CON2	set	4037
  1059  0000                     _SSP2BUF	set	3951
  1060  0000                     _SSP2CON1	set	3948
  1061  0000                     _SSP2STAT	set	3949
  1062  0000                     _SSP1BUF	set	4041
  1063  0000                     _SSP1CON1	set	4038
  1064  0000                     _SSP1STAT	set	4039
  1065  0000                     _LATG	set	3983
  1066  0000                     _LATF	set	3982
  1067  0000                     _LATE	set	3981
  1068  0000                     _LATD	set	3980
  1069  0000                     _LATC	set	3979
  1070  0000                     _LATB	set	3978
  1071  0000                     _LATA	set	3977
  1072  0000                     _TRISG	set	3992
  1073  0000                     _TRISF	set	3991
  1074  0000                     _TRISE	set	3990
  1075  0000                     _TRISD	set	3989
  1076  0000                     _TRISC	set	3988
  1077  0000                     _TRISB	set	3987
  1078  0000                     _TRISA	set	3986
  1079  0000                     _PORTG	set	3974
  1080  0000                     _PORTF	set	3973
  1081  0000                     _PORTE	set	3972
  1082  0000                     _PORTD	set	3971
  1083  0000                     _PORTC	set	3970
  1084  0000                     _PORTB	set	3969
  1085  0000                     _PORTA	set	3968
  1086  0000                     _RA3	set	31747
  1087  0000                     _RA2	set	31746
  1088  0000                     _RD7	set	31775
  1089  0000                     _RD5	set	31773
  1090  0000                     _TRISD7	set	31919
  1091  0000                     _TRISD5	set	31917
  1092  0000                     _TRISA3	set	31891
  1093  0000                     _TRISA2	set	31890
  1094  0000                     _GODONE	set	32273
  1095  0000                     _ADON	set	32272
  1096  00FE7D                     STR_33:
  1097  00FE7D  50                 	db	80	;'P'
  1098  00FE7E  72                 	db	114	;'r'
  1099  00FE7F  65                 	db	101	;'e'
  1100  00FE80  73                 	db	115	;'s'
  1101  00FE81  73                 	db	115	;'s'
  1102  00FE82  20                 	db	32
  1103  00FE83  64                 	db	100	;'d'
  1104  00FE84  6F                 	db	111	;'o'
  1105  00FE85  77                 	db	119	;'w'
  1106  00FE86  6E                 	db	110	;'n'
  1107  00FE87  20                 	db	32
  1108  00FE88  66                 	db	102	;'f'
  1109  00FE89  6F                 	db	111	;'o'
  1110  00FE8A  72                 	db	114	;'r'
  1111  00FE8B  0A                 	db	10
  1112  00FE8C  73                 	db	115	;'s'
  1113  00FE8D  71                 	db	113	;'q'
  1114  00FE8E  75                 	db	117	;'u'
  1115  00FE8F  61                 	db	97	;'a'
  1116  00FE90  72                 	db	114	;'r'
  1117  00FE91  65                 	db	101	;'e'
  1118  00FE92  20                 	db	32
  1119  00FE93  64                 	db	100	;'d'
  1120  00FE94  72                 	db	114	;'r'
  1121  00FE95  69                 	db	105	;'i'
  1122  00FE96  76                 	db	118	;'v'
  1123  00FE97  65                 	db	101	;'e'
  1124  00FE98  2C                 	db	44
  1125  00FE99  0A                 	db	10
  1126  00FE9A  00                 	db	0
  1127  00FE9B                     STR_34:
  1128  00FE9B  50                 	db	80	;'P'
  1129  00FE9C  72                 	db	114	;'r'
  1130  00FE9D  65                 	db	101	;'e'
  1131  00FE9E  73                 	db	115	;'s'
  1132  00FE9F  73                 	db	115	;'s'
  1133  00FEA0  20                 	db	32
  1134  00FEA1  75                 	db	117	;'u'
  1135  00FEA2  70                 	db	112	;'p'
  1136  00FEA3  20                 	db	32
  1137  00FEA4  66                 	db	102	;'f'
  1138  00FEA5  6F                 	db	111	;'o'
  1139  00FEA6  72                 	db	114	;'r'
  1140  00FEA7  20                 	db	32
  1141  00FEA8  49                 	db	73	;'I'
  1142  00FEA9  52                 	db	82	;'R'
  1143  00FEAA  20                 	db	32
  1144  00FEAB  73                 	db	115	;'s'
  1145  00FEAC  63                 	db	99	;'c'
  1146  00FEAD  61                 	db	97	;'a'
  1147  00FEAE  6E                 	db	110	;'n'
  1148  00FEAF  20                 	db	32
  1149  00FEB0  6D                 	db	109	;'m'
  1150  00FEB1  6F                 	db	111	;'o'
  1151  00FEB2  64                 	db	100	;'d'
  1152  00FEB3  65                 	db	101	;'e'
  1153  00FEB4  2C                 	db	44
  1154  00FEB5  0A                 	db	10
  1155  00FEB6  00                 	db	0
  1156  00FEB7                     STR_32:
  1157  00FEB7  50                 	db	80	;'P'
  1158  00FEB8  72                 	db	114	;'r'
  1159  00FEB9  65                 	db	101	;'e'
  1160  00FEBA  73                 	db	115	;'s'
  1161  00FEBB  73                 	db	115	;'s'
  1162  00FEBC  20                 	db	32
  1163  00FEBD  72                 	db	114	;'r'
  1164  00FEBE  69                 	db	105	;'i'
  1165  00FEBF  67                 	db	103	;'g'
  1166  00FEC0  68                 	db	104	;'h'
  1167  00FEC1  74                 	db	116	;'t'
  1168  00FEC2  20                 	db	32
  1169  00FEC3  66                 	db	102	;'f'
  1170  00FEC4  6F                 	db	111	;'o'
  1171  00FEC5  72                 	db	114	;'r'
  1172  00FEC6  20                 	db	32
  1173  00FEC7  35                 	db	53	;'5'
  1174  00FEC8  6D                 	db	109	;'m'
  1175  00FEC9  0A                 	db	10
  1176  00FECA  20                 	db	32
  1177  00FECB  64                 	db	100	;'d'
  1178  00FECC  72                 	db	114	;'r'
  1179  00FECD  69                 	db	105	;'i'
  1180  00FECE  76                 	db	118	;'v'
  1181  00FECF  65                 	db	101	;'e'
  1182  00FED0  2C                 	db	44
  1183  00FED1  0A                 	db	10
  1184  00FED2  00                 	db	0
  1185  00FED3                     STR_62:
  1186  00FED3  54                 	db	84	;'T'
  1187  00FED4  68                 	db	104	;'h'
  1188  00FED5  65                 	db	101	;'e'
  1189  00FED6  20                 	db	32
  1190  00FED7  74                 	db	116	;'t'
  1191  00FED8  61                 	db	97	;'a'
  1192  00FED9  72                 	db	114	;'r'
  1193  00FEDA  67                 	db	103	;'g'
  1194  00FEDB  65                 	db	101	;'e'
  1195  00FEDC  74                 	db	116	;'t'
  1196  00FEDD  20                 	db	32
  1197  00FEDE  64                 	db	100	;'d'
  1198  00FEDF  69                 	db	105	;'i'
  1199  00FEE0  73                 	db	115	;'s'
  1200  00FEE1  74                 	db	116	;'t'
  1201  00FEE2  61                 	db	97	;'a'
  1202  00FEE3  6E                 	db	110	;'n'
  1203  00FEE4  63                 	db	99	;'c'
  1204  00FEE5  65                 	db	101	;'e'
  1205  00FEE6  20                 	db	32
  1206  00FEE7  69                 	db	105	;'i'
  1207  00FEE8  73                 	db	115	;'s'
  1208  00FEE9  3A                 	db	58	;':'
  1209  00FEEA  20                 	db	32
  1210  00FEEB  25                 	db	37
  1211  00FEEC  64                 	db	100	;'d'
  1212  00FEED  0A                 	db	10
  1213  00FEEE  00                 	db	0
  1214  00FEEF                     STR_35:
  1215  00FEEF  50                 	db	80	;'P'
  1216  00FEF0  72                 	db	114	;'r'
  1217  00FEF1  65                 	db	101	;'e'
  1218  00FEF2  73                 	db	115	;'s'
  1219  00FEF3  73                 	db	115	;'s'
  1220  00FEF4  20                 	db	32
  1221  00FEF5  6C                 	db	108	;'l'
  1222  00FEF6  65                 	db	101	;'e'
  1223  00FEF7  66                 	db	102	;'f'
  1224  00FEF8  74                 	db	116	;'t'
  1225  00FEF9  20                 	db	32
  1226  00FEFA  66                 	db	102	;'f'
  1227  00FEFB  6F                 	db	111	;'o'
  1228  00FEFC  72                 	db	114	;'r'
  1229  00FEFD  20                 	db	32
  1230  00FEFE  77                 	db	119	;'w'
  1231  00FEFF  61                 	db	97	;'a'
  1232  00FF00  6C                 	db	108	;'l'
  1233  00FF01  6C                 	db	108	;'l'
  1234  00FF02  20                 	db	32
  1235  00FF03  66                 	db	102	;'f'
  1236  00FF04  6F                 	db	111	;'o'
  1237  00FF05  6C                 	db	108	;'l'
  1238  00FF06  6C                 	db	108	;'l'
  1239  00FF07  6F                 	db	111	;'o'
  1240  00FF08  77                 	db	119	;'w'
  1241  00FF09  0A                 	db	10
  1242  00FF0A  00                 	db	0
  1243  00FF0B                     STR_13:
  1244  00FF0B  0A                 	db	10
  1245  00FF0C  54                 	db	84	;'T'
  1246  00FF0D  68                 	db	104	;'h'
  1247  00FF0E  65                 	db	101	;'e'
  1248  00FF0F  20                 	db	32
  1249  00FF10  43                 	db	67	;'C'
  1250  00FF11  6C                 	db	108	;'l'
  1251  00FF12  6F                 	db	111	;'o'
  1252  00FF13  73                 	db	115	;'s'
  1253  00FF14  65                 	db	101	;'e'
  1254  00FF15  73                 	db	115	;'s'
  1255  00FF16  20                 	db	32
  1256  00FF17  6F                 	db	111	;'o'
  1257  00FF18  62                 	db	98	;'b'
  1258  00FF19  6A                 	db	106	;'j'
  1259  00FF1A  65                 	db	101	;'e'
  1260  00FF1B  63                 	db	99	;'c'
  1261  00FF1C  74                 	db	116	;'t'
  1262  00FF1D  20                 	db	32
  1263  00FF1E  28                 	db	40
  1264  00FF1F  6D                 	db	109	;'m'
  1265  00FF20  6D                 	db	109	;'m'
  1266  00FF21  29                 	db	41
  1267  00FF22  3A                 	db	58	;':'
  1268  00FF23  20                 	db	32
  1269  00FF24  25                 	db	37
  1270  00FF25  64                 	db	100	;'d'
  1271  00FF26  00                 	db	0
  1272  00FF27                     STR_51:
  1273  00FF27  53                 	db	83	;'S'
  1274  00FF28  51                 	db	81	;'Q'
  1275  00FF29  55                 	db	85	;'U'
  1276  00FF2A  41                 	db	65	;'A'
  1277  00FF2B  52                 	db	82	;'R'
  1278  00FF2C  45                 	db	69	;'E'
  1279  00FF2D  20                 	db	32
  1280  00FF2E  44                 	db	68	;'D'
  1281  00FF2F  52                 	db	82	;'R'
  1282  00FF30  49                 	db	73	;'I'
  1283  00FF31  56                 	db	86	;'V'
  1284  00FF32  45                 	db	69	;'E'
  1285  00FF33  20                 	db	32
  1286  00FF34  4D                 	db	77	;'M'
  1287  00FF35  4F                 	db	79	;'O'
  1288  00FF36  44                 	db	68	;'D'
  1289  00FF37  45                 	db	69	;'E'
  1290  00FF38  20                 	db	32
  1291  00FF39  33                 	db	51	;'3'
  1292  00FF3A  21                 	db	33
  1293  00FF3B  20                 	db	32
  1294  00FF3C  0A                 	db	10
  1295  00FF3D  00                 	db	0
  1296  00FF3E                     STR_41:
  1297  00FF3E  54                 	db	84	;'T'
  1298  00FF3F  72                 	db	114	;'r'
  1299  00FF40  61                 	db	97	;'a'
  1300  00FF41  76                 	db	118	;'v'
  1301  00FF42  65                 	db	101	;'e'
  1302  00FF43  6C                 	db	108	;'l'
  1303  00FF44  65                 	db	101	;'e'
  1304  00FF45  64                 	db	100	;'d'
  1305  00FF46  20                 	db	32
  1306  00FF47  44                 	db	68	;'D'
  1307  00FF48  69                 	db	105	;'i'
  1308  00FF49  73                 	db	115	;'s'
  1309  00FF4A  74                 	db	116	;'t'
  1310  00FF4B  61                 	db	97	;'a'
  1311  00FF4C  6E                 	db	110	;'n'
  1312  00FF4D  63                 	db	99	;'c'
  1313  00FF4E  65                 	db	101	;'e'
  1314  00FF4F  3A                 	db	58	;':'
  1315  00FF50  0A                 	db	10
  1316  00FF51  25                 	db	37
  1317  00FF52  64                 	db	100	;'d'
  1318  00FF53  00                 	db	0
  1319  00FF54                     STR_29:
  1320  00FF54  0A                 	db	10
  1321  00FF55  53                 	db	83	;'S'
  1322  00FF56  74                 	db	116	;'t'
  1323  00FF57  65                 	db	101	;'e'
  1324  00FF58  70                 	db	112	;'p'
  1325  00FF59  73                 	db	115	;'s'
  1326  00FF5A  20                 	db	32
  1327  00FF5B  54                 	db	84	;'T'
  1328  00FF5C  72                 	db	114	;'r'
  1329  00FF5D  61                 	db	97	;'a'
  1330  00FF5E  76                 	db	118	;'v'
  1331  00FF5F  65                 	db	101	;'e'
  1332  00FF60  6C                 	db	108	;'l'
  1333  00FF61  6C                 	db	108	;'l'
  1334  00FF62  65                 	db	101	;'e'
  1335  00FF63  64                 	db	100	;'d'
  1336  00FF64  3A                 	db	58	;':'
  1337  00FF65  20                 	db	32
  1338  00FF66  25                 	db	37
  1339  00FF67  64                 	db	100	;'d'
  1340  00FF68  00                 	db	0
  1341  00FF69                     STR_12:
  1342  00FF69  53                 	db	83	;'S'
  1343  00FF6A  74                 	db	116	;'t'
  1344  00FF6B  65                 	db	101	;'e'
  1345  00FF6C  70                 	db	112	;'p'
  1346  00FF6D  70                 	db	112	;'p'
  1347  00FF6E  65                 	db	101	;'e'
  1348  00FF6F  64                 	db	100	;'d'
  1349  00FF70  20                 	db	32
  1350  00FF71  33                 	db	51	;'3'
  1351  00FF72  36                 	db	54	;'6'
  1352  00FF73  30                 	db	48	;'0'
  1353  00FF74  20                 	db	32
  1354  00FF75  64                 	db	100	;'d'
  1355  00FF76  65                 	db	101	;'e'
  1356  00FF77  67                 	db	103	;'g'
  1357  00FF78  72                 	db	114	;'r'
  1358  00FF79  65                 	db	101	;'e'
  1359  00FF7A  65                 	db	101	;'e'
  1360  00FF7B  73                 	db	115	;'s'
  1361  00FF7C  00                 	db	0
  1362  00FF7D                     STR_2:
  1363  00FF7D  20                 	db	32
  1364  00FF7E  20                 	db	32
  1365  00FF7F  20                 	db	32
  1366  00FF80  20                 	db	32
  1367  00FF81  20                 	db	32
  1368  00FF82  20                 	db	32
  1369  00FF83  20                 	db	32
  1370  00FF84  20                 	db	32
  1371  00FF85  20                 	db	32
  1372  00FF86  20                 	db	32
  1373  00FF87  20                 	db	32
  1374  00FF88  20                 	db	32
  1375  00FF89  20                 	db	32
  1376  00FF8A  20                 	db	32
  1377  00FF8B  20                 	db	32
  1378  00FF8C  20                 	db	32
  1379  00FF8D  20                 	db	32
  1380  00FF8E  0A                 	db	10
  1381  00FF8F  00                 	db	0
  1382  00FF90                     STR_17:
  1383  00FF90  53                 	db	83	;'S'
  1384  00FF91  65                 	db	101	;'e'
  1385  00FF92  6E                 	db	110	;'n'
  1386  00FF93  73                 	db	115	;'s'
  1387  00FF94  6F                 	db	111	;'o'
  1388  00FF95  72                 	db	114	;'r'
  1389  00FF96  20                 	db	32
  1390  00FF97  4D                 	db	77	;'M'
  1391  00FF98  6F                 	db	111	;'o'
  1392  00FF99  76                 	db	118	;'v'
  1393  00FF9A  69                 	db	105	;'i'
  1394  00FF9B  6E                 	db	110	;'n'
  1395  00FF9C  67                 	db	103	;'g'
  1396  00FF9D  21                 	db	33
  1397  00FF9E  20                 	db	32
  1398  00FF9F  20                 	db	32
  1399  00FFA0  20                 	db	32
  1400  00FFA1  0A                 	db	10
  1401  00FFA2  00                 	db	0
  1402  00FFA3                     STR_14:
  1403  00FFA3  0A                 	db	10
  1404  00FFA4  47                 	db	71	;'G'
  1405  00FFA5  6F                 	db	111	;'o'
  1406  00FFA6  69                 	db	105	;'i'
  1407  00FFA7  6E                 	db	110	;'n'
  1408  00FFA8  67                 	db	103	;'g'
  1409  00FFA9  20                 	db	32
  1410  00FFAA  62                 	db	98	;'b'
  1411  00FFAB  61                 	db	97	;'a'
  1412  00FFAC  63                 	db	99	;'c'
  1413  00FFAD  6B                 	db	107	;'k'
  1414  00FFAE  20                 	db	32
  1415  00FFAF  74                 	db	116	;'t'
  1416  00FFB0  6F                 	db	111	;'o'
  1417  00FFB1  3A                 	db	58	;':'
  1418  00FFB2  20                 	db	32
  1419  00FFB3  25                 	db	37
  1420  00FFB4  64                 	db	100	;'d'
  1421  00FFB5  00                 	db	0
  1422  00FFB6                     STR_3:
  1423  00FFB6  53                 	db	83	;'S'
  1424  00FFB7  65                 	db	101	;'e'
  1425  00FFB8  6E                 	db	110	;'n'
  1426  00FFB9  73                 	db	115	;'s'
  1427  00FFBA  6F                 	db	111	;'o'
  1428  00FFBB  72                 	db	114	;'r'
  1429  00FFBC  20                 	db	32
  1430  00FFBD  4D                 	db	77	;'M'
  1431  00FFBE  6F                 	db	111	;'o'
  1432  00FFBF  76                 	db	118	;'v'
  1433  00FFC0  69                 	db	105	;'i'
  1434  00FFC1  6E                 	db	110	;'n'
  1435  00FFC2  67                 	db	103	;'g'
  1436  00FFC3  21                 	db	33
  1437  00FFC4  0A                 	db	10
  1438  00FFC5  00                 	db	0
  1439  00FFC6                     STR_63:
  1440  00FFC6  41                 	db	65	;'A'
  1441  00FFC7  44                 	db	68	;'D'
  1442  00FFC8  43                 	db	67	;'C'
  1443  00FFC9  20                 	db	32
  1444  00FFCA  41                 	db	65	;'A'
  1445  00FFCB  56                 	db	86	;'V'
  1446  00FFCC  45                 	db	69	;'E'
  1447  00FFCD  52                 	db	82	;'R'
  1448  00FFCE  41                 	db	65	;'A'
  1449  00FFCF  47                 	db	71	;'G'
  1450  00FFD0  45                 	db	69	;'E'
  1451  00FFD1  20                 	db	32
  1452  00FFD2  25                 	db	37
  1453  00FFD3  64                 	db	100	;'d'
  1454  00FFD4  0A                 	db	10
  1455  00FFD5  00                 	db	0
  1456  00FFD6                     STR_31:
  1457  00FFD6  52                 	db	82	;'R'
  1458  00FFD7  6F                 	db	111	;'o'
  1459  00FFD8  62                 	db	98	;'b'
  1460  00FFD9  6F                 	db	111	;'o'
  1461  00FFDA  74                 	db	116	;'t'
  1462  00FFDB  20                 	db	32
  1463  00FFDC  52                 	db	82	;'R'
  1464  00FFDD  65                 	db	101	;'e'
  1465  00FFDE  61                 	db	97	;'a'
  1466  00FFDF  64                 	db	100	;'d'
  1467  00FFE0  79                 	db	121	;'y'
  1468  00FFE1  21                 	db	33
  1469  00FFE2  20                 	db	32
  1470  00FFE3  0A                 	db	10
  1471  00FFE4  00                 	db	0
  1472  00FFE5                     STR_72:
  1473  00FFE5  42                 	db	66	;'B'
  1474  00FFE6  65                 	db	101	;'e'
  1475  00FFE7  73                 	db	115	;'s'
  1476  00FFE8  6E                 	db	110	;'n'
  1477  00FFE9  65                 	db	101	;'e'
  1478  00FFEA  6F                 	db	111	;'o'
  1479  00FFEB  72                 	db	114	;'r'
  1480  00FFEC  3A                 	db	58	;':'
  1481  00FFED  20                 	db	32
  1482  00FFEE  25                 	db	37
  1483  00FFEF  64                 	db	100	;'d'
  1484  00FFF0  00                 	db	0
  1485  00FFF1                     STR_52:
  1486  00FFF1  54                 	db	84	;'T'
  1487  00FFF2  6F                 	db	111	;'o'
  1488  00FFF3  74                 	db	116	;'t'
  1489  00FFF4  61                 	db	97	;'a'
  1490  00FFF5  6C                 	db	108	;'l'
  1491  00FFF6  3A                 	db	58	;':'
  1492  00FFF7  20                 	db	32
  1493  00FFF8  25                 	db	37
  1494  00FFF9  64                 	db	100	;'d'
  1495  00FFFA  0A                 	db	10
  1496  00FFFB  00                 	db	0
  1497  00FFFC                     STR_1:
  1498  00FFFC  25                 	db	37
  1499  00FFFD  63                 	db	99	;'c'
  1500  00FFFE  00                 	db	0
  1501  0000                     
  1502                           ; #config settings
  1503  00FFFF  00                 	db	0	; dummy byte at the end
  1504  0000                     
  1505                           	psect	cinit
  1506  0145D2                     __pcinit:
  1507                           	opt stack 0
  1508  0145D2                     start_initialization:
  1509                           	opt stack 0
  1510  0145D2                     __initialization:
  1511                           	opt stack 0
  1512                           
  1513                           ; Initialize objects allocated to BANK1 (22 bytes)
  1514                           ; load TBLPTR registers with __pidataBANK1
  1515  0145D2  0E0C               	movlw	low __pidataBANK1
  1516  0145D4  6EF6               	movwf	tblptrl,c
  1517  0145D6  0E5F               	movlw	high __pidataBANK1
  1518  0145D8  6EF7               	movwf	tblptrh,c
  1519  0145DA  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1520  0145DC  6EF8               	movwf	tblptru,c
  1521  0145DE  EE01  F0E1         	lfsr	0,__pdataBANK1
  1522  0145E2  EE10 F016          	lfsr	1,22
  1523  0145E6                     copy_data0:
  1524  0145E6  0009               	tblrd		*+
  1525  0145E8  CFF5 FFEE          	movff	tablat,postinc0
  1526  0145EC  50E5               	movf	postdec1,w,c
  1527  0145EE  50E1               	movf	fsr1l,w,c
  1528  0145F0  E1FA               	bnz	copy_data0
  1529                           
  1530                           ; Initialize objects allocated to COMRAM (11 bytes)
  1531                           ; load TBLPTR registers with __pidataCOMRAM
  1532  0145F2  0E46               	movlw	low __pidataCOMRAM
  1533  0145F4  6EF6               	movwf	tblptrl,c
  1534  0145F6  0E60               	movlw	high __pidataCOMRAM
  1535  0145F8  6EF7               	movwf	tblptrh,c
  1536  0145FA  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1537  0145FC  6EF8               	movwf	tblptru,c
  1538  0145FE  EE00  F046         	lfsr	0,__pdataCOMRAM
  1539  014602  EE10 F00B          	lfsr	1,11
  1540  014606                     copy_data1:
  1541  014606  0009               	tblrd		*+
  1542  014608  CFF5 FFEE          	movff	tablat,postinc0
  1543  01460C  50E5               	movf	postdec1,w,c
  1544  01460E  50E1               	movf	fsr1l,w,c
  1545  014610  E1FA               	bnz	copy_data1
  1546                           
  1547                           ; Clear objects allocated to BIGRAM (300 bytes)
  1548  014612  EE03  F018         	lfsr	0,__pbssBIGRAM
  1549  014616  EE11 F02C          	lfsr	1,300
  1550  01461A                     clear_0:
  1551  01461A  6AEE               	clrf	postinc0,c
  1552  01461C  50E5               	movf	postdec1,w,c
  1553  01461E  50E1               	movf	fsr1l,w,c
  1554  014620  E1FC               	bnz	clear_0
  1555  014622  50E2               	movf	fsr1h,w,c
  1556  014624  E1FA               	bnz	clear_0
  1557                           
  1558                           ; Clear objects allocated to BANK2 (251 bytes)
  1559  014626  EE02  F000         	lfsr	0,__pbssBANK2
  1560  01462A  0EFB               	movlw	251
  1561  01462C                     clear_1:
  1562  01462C  6AEE               	clrf	postinc0,c
  1563  01462E  06E8               	decf	wreg,f,c
  1564  014630  E1FD               	bnz	clear_1
  1565                           
  1566                           ; Clear objects allocated to BANK1 (225 bytes)
  1567  014632  EE01  F000         	lfsr	0,__pbssBANK1
  1568  014636  0EE1               	movlw	225
  1569  014638                     clear_2:
  1570  014638  6AEE               	clrf	postinc0,c
  1571  01463A  06E8               	decf	wreg,f,c
  1572  01463C  E1FD               	bnz	clear_2
  1573                           
  1574                           ; Clear objects allocated to BANK0 (16 bytes)
  1575  01463E  EE00  F0E6         	lfsr	0,__pbssBANK0
  1576  014642  0E10               	movlw	16
  1577  014644                     clear_3:
  1578  014644  6AEE               	clrf	postinc0,c
  1579  014646  06E8               	decf	wreg,f,c
  1580  014648  E1FD               	bnz	clear_3
  1581                           
  1582                           ; Clear objects allocated to COMRAM (29 bytes)
  1583  01464A  EE00  F029         	lfsr	0,__pbssCOMRAM
  1584  01464E  0E1D               	movlw	29
  1585  014650                     clear_4:
  1586  014650  6AEE               	clrf	postinc0,c
  1587  014652  06E8               	decf	wreg,f,c
  1588  014654  E1FD               	bnz	clear_4
  1589  014656                     end_of_initialization:
  1590                           	opt stack 0
  1591  014656                     __end_of__initialization:
  1592                           	opt stack 0
  1593  014656  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1594  014658  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1595  01465A  0100               	movlb	0
  1596  01465C  EF00  F080         	goto	_main	;jump to C main() function
  1597                           tblptru	equ	0xFF8
  1598                           tblptrh	equ	0xFF7
  1599                           tblptrl	equ	0xFF6
  1600                           tablat	equ	0xFF5
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           postdec1	equ	0xFE5
  1604                           fsr1h	equ	0xFE2
  1605                           fsr1l	equ	0xFE1
  1606                           
  1607                           	psect	bssCOMRAM
  1608  000029                     __pbssCOMRAM:
  1609                           	opt stack 0
  1610  000029                     _readIndex:
  1611                           	opt stack 0
  1612  000029                     	ds	2
  1613  00002B                     _Close_Pos:
  1614                           	opt stack 0
  1615  00002B                     	ds	2
  1616  00002D                     _Motor_Count:
  1617                           	opt stack 0
  1618  00002D                     	ds	2
  1619  00002F                     _T_VAR:
  1620                           	opt stack 0
  1621  00002F                     	ds	2
  1622  000031                     _mode:
  1623                           	opt stack 0
  1624  000031                     	ds	2
  1625  000033                     _COUNTER:
  1626                           	opt stack 0
  1627  000033                     	ds	2
  1628  000035                     _gBackcolour:
  1629                           	opt stack 0
  1630  000035                     	ds	2
  1631  000037                     _Current_Dist2:
  1632                           	opt stack 0
  1633  000037                     	ds	1
  1634  000038                     Event_TestButton@j:
  1635                           	opt stack 0
  1636  000038                     	ds	1
  1637  000039                     Timer2_Init@PRE:
  1638                           	opt stack 0
  1639  000039                     	ds	1
  1640  00003A                     Timer0_Init@PRE:
  1641                           	opt stack 0
  1642  00003A                     	ds	1
  1643  00003B                     _INDEX:
  1644                           	opt stack 0
  1645  00003B                     	ds	1
  1646  00003C                     rand@screw:
  1647                           	opt stack 0
  1648  00003C                     	ds	1
  1649  00003D                     OutSeg@a:
  1650                           	opt stack 0
  1651  00003D                     	ds	1
  1652  00003E                     OutSeg@segset:
  1653                           	opt stack 0
  1654  00003E                     	ds	1
  1655  00003F                     OutSeg@cur:
  1656                           	opt stack 0
  1657  00003F                     	ds	1
  1658  000040                     _I2C1T:
  1659                           	opt stack 0
  1660  000040                     	ds	6
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           postdec1	equ	0xFE5
  1668                           fsr1h	equ	0xFE2
  1669                           fsr1l	equ	0xFE1
  1670                           
  1671                           	psect	dataCOMRAM
  1672  000046                     __pdataCOMRAM:
  1673                           	opt stack 0
  1674  000046                     _gCursor:
  1675                           	opt stack 0
  1676  000046                     	ds	4
  1677  00004A                     _Low_Sensor:
  1678                           	opt stack 0
  1679  00004A                     	ds	2
  1680  00004C                     _Bus_State:
  1681                           	opt stack 0
  1682  00004C                     	ds	1
  1683  00004D                     _change:
  1684                           	opt stack 0
  1685  00004D                     	ds	1
  1686  00004E                     	ds	1
  1687  00004F                     _l:
  1688                           	opt stack 0
  1689  00004F                     	ds	1
  1690  000050                     _w:
  1691                           	opt stack 0
  1692  000050                     	ds	1
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           postinc0	equ	0xFEE
  1698                           wreg	equ	0xFE8
  1699                           postdec1	equ	0xFE5
  1700                           fsr1h	equ	0xFE2
  1701                           fsr1l	equ	0xFE1
  1702                           
  1703                           	psect	bssBANK0
  1704  0000E6                     __pbssBANK0:
  1705                           	opt stack 0
  1706  0000E6                     _lQueue:
  1707                           	opt stack 0
  1708  0000E6                     	ds	3
  1709  0000E9                     _average:
  1710                           	opt stack 0
  1711  0000E9                     	ds	2
  1712  0000EB                     _pShiftVal:
  1713                           	opt stack 0
  1714  0000EB                     	ds	2
  1715  0000ED                     _lMotor:
  1716                           	opt stack 0
  1717  0000ED                     	ds	2
  1718  0000EF                     _lCurrent:
  1719                           	opt stack 0
  1720  0000EF                     	ds	2
  1721  0000F1                     _BumpSensor:
  1722                           	opt stack 0
  1723  0000F1                     	ds	1
  1724  0000F2                     Timer2_Init@INDEX:
  1725                           	opt stack 0
  1726  0000F2                     	ds	1
  1727  0000F3                     _lBufferY:
  1728                           	opt stack 0
  1729  0000F3                     	ds	1
  1730  0000F4                     _lBufferX:
  1731                           	opt stack 0
  1732  0000F4                     	ds	1
  1733  0000F5                     _clearall:
  1734                           	opt stack 0
  1735  0000F5                     	ds	1
  1736                           tblptru	equ	0xFF8
  1737                           tblptrh	equ	0xFF7
  1738                           tblptrl	equ	0xFF6
  1739                           tablat	equ	0xFF5
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1h	equ	0xFE2
  1744                           fsr1l	equ	0xFE1
  1745                           
  1746                           	psect	bssBANK1
  1747  000100                     __pbssBANK1:
  1748                           	opt stack 0
  1749  000100                     Timer2_Init@DIV:
  1750                           	opt stack 0
  1751  000100                     	ds	4
  1752  000104                     Timer0_Init@DIV:
  1753                           	opt stack 0
  1754  000104                     	ds	4
  1755  000108                     _gISR:
  1756                           	opt stack 0
  1757  000108                     	ds	3
  1758  00010B                     _lStepFunction:
  1759                           	opt stack 0
  1760  00010B                     	ds	3
  1761  00010E                     _I2C2_More:
  1762                           	opt stack 0
  1763  00010E                     	ds	3
  1764  000111                     _I2C1_More:
  1765                           	opt stack 0
  1766  000111                     	ds	3
  1767  000114                     _I2C2_Done:
  1768                           	opt stack 0
  1769  000114                     	ds	3
  1770  000117                     _I2C1_Done:
  1771                           	opt stack 0
  1772  000117                     	ds	3
  1773  00011A                     _errno:
  1774                           	opt stack 0
  1775  00011A                     	ds	2
  1776  00011C                     _test:
  1777                           	opt stack 0
  1778  00011C                     	ds	2
  1779  00011E                     _timercount:
  1780                           	opt stack 0
  1781  00011E                     	ds	2
  1782  000120                     _x:
  1783                           	opt stack 0
  1784  000120                     	ds	2
  1785  000122                     _total:
  1786                           	opt stack 0
  1787  000122                     	ds	2
  1788  000124                     _thisReading:
  1789                           	opt stack 0
  1790  000124                     	ds	2
  1791  000126                     _Sensor_Observe_Fin:
  1792                           	opt stack 0
  1793  000126                     	ds	2
  1794  000128                     _CW_Count:
  1795                           	opt stack 0
  1796  000128                     	ds	2
  1797  00012A                     _CCW_Count:
  1798                           	opt stack 0
  1799  00012A                     	ds	2
  1800  00012C                     _count:
  1801                           	opt stack 0
  1802  00012C                     	ds	2
  1803  00012E                     _ADC_Reading:
  1804                           	opt stack 0
  1805  00012E                     	ds	2
  1806  000130                     _BumpState:
  1807                           	opt stack 0
  1808  000130                     	ds	2
  1809  000132                     _mod:
  1810                           	opt stack 0
  1811  000132                     	ds	2
  1812  000134                     _Square_Dist:
  1813                           	opt stack 0
  1814  000134                     	ds	2
  1815  000136                     _Current_Dist:
  1816                           	opt stack 0
  1817  000136                     	ds	2
  1818  000138                     _val:
  1819                           	opt stack 0
  1820  000138                     	ds	2
  1821  00013A                     HMI_GRender@a:
  1822                           	opt stack 0
  1823  00013A                     	ds	2
  1824  00013C                     SPI_Send9@dat:
  1825                           	opt stack 0
  1826  00013C                     	ds	2
  1827  00013E                     _Cliff_Left:
  1828                           	opt stack 0
  1829  00013E                     	ds	1
  1830  00013F                     _Cliff_Right:
  1831                           	opt stack 0
  1832  00013F                     	ds	1
  1833  000140                     _Cliff_FLeft:
  1834                           	opt stack 0
  1835  000140                     	ds	1
  1836  000141                     _Cliff_FRight:
  1837                           	opt stack 0
  1838  000141                     	ds	1
  1839  000142                     _Vitual_Wall_Sensor:
  1840                           	opt stack 0
  1841  000142                     	ds	1
  1842  000143                     _Current_Dist1:
  1843                           	opt stack 0
  1844  000143                     	ds	1
  1845  000144                     _u:
  1846                           	opt stack 0
  1847  000144                     	ds	1
  1848  000145                     _j:
  1849                           	opt stack 0
  1850  000145                     	ds	1
  1851  000146                     _i:
  1852                           	opt stack 0
  1853  000146                     	ds	1
  1854  000147                     _ADC_Initialised:
  1855                           	opt stack 0
  1856  000147                     	ds	1
  1857  000148                     _HMIBoard:
  1858                           	opt stack 0
  1859  000148                     	ds	58
  1860  000182                     _SPI2:
  1861                           	opt stack 0
  1862  000182                     	ds	11
  1863  00018D                     _PortE:
  1864                           	opt stack 0
  1865  00018D                     	ds	10
  1866  000197                     _PortD:
  1867                           	opt stack 0
  1868  000197                     	ds	10
  1869  0001A1                     _PortB:
  1870                           	opt stack 0
  1871  0001A1                     	ds	10
  1872  0001AB                     _PortC:
  1873                           	opt stack 0
  1874  0001AB                     	ds	10
  1875  0001B5                     _PortF:
  1876                           	opt stack 0
  1877  0001B5                     	ds	10
  1878  0001BF                     _I2C2T:
  1879                           	opt stack 0
  1880  0001BF                     	ds	6
  1881  0001C5                     _ADC_AN3:
  1882                           	opt stack 0
  1883  0001C5                     	ds	5
  1884  0001CA                     _ADC_AN2:
  1885                           	opt stack 0
  1886  0001CA                     	ds	5
  1887  0001CF                     _ADC_AN1:
  1888                           	opt stack 0
  1889  0001CF                     	ds	5
  1890  0001D4                     _ADC_AN0:
  1891                           	opt stack 0
  1892  0001D4                     	ds	5
  1893  0001D9                     LCD_DrawRectangle@p4:
  1894                           	opt stack 0
  1895  0001D9                     	ds	4
  1896  0001DD                     LCD_DrawRectangle@p2:
  1897                           	opt stack 0
  1898  0001DD                     	ds	4
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1h	equ	0xFE2
  1907                           fsr1l	equ	0xFE1
  1908                           
  1909                           	psect	dataBANK1
  1910  0001E1                     __pdataBANK1:
  1911                           	opt stack 0
  1912  0001E1                     Console_Render@F6956:
  1913                           	opt stack 0
  1914  0001E1                     	ds	4
  1915  0001E5                     _gLineSize:
  1916                           	opt stack 0
  1917  0001E5                     	ds	4
  1918  0001E9                     _gCharSize:
  1919                           	opt stack 0
  1920  0001E9                     	ds	4
  1921  0001ED                     _countOff:
  1922                           	opt stack 0
  1923  0001ED                     	ds	2
  1924  0001EF                     _countOn:
  1925                           	opt stack 0
  1926  0001EF                     	ds	2
  1927  0001F1                     _numReadings:
  1928                           	opt stack 0
  1929  0001F1                     	ds	2
  1930  0001F3                     _gForecolour:
  1931                           	opt stack 0
  1932  0001F3                     	ds	2
  1933  0001F5                     	ds	1
  1934  0001F6                     	ds	1
  1935                           tblptru	equ	0xFF8
  1936                           tblptrh	equ	0xFF7
  1937                           tblptrl	equ	0xFF6
  1938                           tablat	equ	0xFF5
  1939                           postinc0	equ	0xFEE
  1940                           wreg	equ	0xFE8
  1941                           postdec1	equ	0xFE5
  1942                           fsr1h	equ	0xFE2
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	bssBANK2
  1946  000200                     __pbssBANK2:
  1947                           	opt stack 0
  1948  000200                     _readings:
  1949                           	opt stack 0
  1950  000200                     	ds	100
  1951  000264                     _lCBuffer:
  1952                           	opt stack 0
  1953  000264                     	ds	30
  1954  000282                     Console_MakeField@Fill:
  1955                           	opt stack 0
  1956  000282                     	ds	70
  1957  0002C8                     _SPI1:
  1958                           	opt stack 0
  1959  0002C8                     	ds	11
  1960  0002D3                     _DIPSwitch:
  1961                           	opt stack 0
  1962  0002D3                     	ds	10
  1963  0002DD                     _TestButton:
  1964                           	opt stack 0
  1965  0002DD                     	ds	10
  1966  0002E7                     _PortG:
  1967                           	opt stack 0
  1968  0002E7                     	ds	10
  1969  0002F1                     _PortA:
  1970                           	opt stack 0
  1971  0002F1                     	ds	10
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1h	equ	0xFE2
  1980                           fsr1l	equ	0xFE1
  1981                           
  1982                           	psect	bssBIGRAM
  1983  000318                     __pbssBIGRAM:
  1984                           	opt stack 0
  1985  000318                     _lBuffer:
  1986                           	opt stack 0
  1987  000318                     	ds	300
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           fsr1h	equ	0xFE2
  1996                           fsr1l	equ	0xFE1
  1997                           
  1998                           	psect	cstackBANK3
  1999  000300                     __pcstackBANK3:
  2000                           	opt stack 0
  2001  000300                     _ADCAverage$15663:
  2002                           	opt stack 0
  2003                           
  2004                           ; 4 bytes @ 0x0
  2005  000300                     	ds	4
  2006  000304                     _ADCAverage$15664:
  2007                           	opt stack 0
  2008                           
  2009                           ; 4 bytes @ 0x4
  2010  000304                     	ds	4
  2011  000308                     _ADCAverage$15665:
  2012                           	opt stack 0
  2013                           
  2014                           ; 4 bytes @ 0x8
  2015  000308                     	ds	4
  2016  00030C                     _ADCAverage$15666:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0xC
  2020  00030C                     	ds	4
  2021  000310                     _ADCAverage$15667:
  2022                           	opt stack 0
  2023                           
  2024                           ; 4 bytes @ 0x10
  2025  000310                     	ds	4
  2026  000314                     _ADCAverage$15668:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x14
  2030  000314                     	ds	4
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           postinc0	equ	0xFEE
  2036                           wreg	equ	0xFE8
  2037                           postdec1	equ	0xFE5
  2038                           fsr1h	equ	0xFE2
  2039                           fsr1l	equ	0xFE1
  2040                           
  2041                           	psect	cstackBANK0
  2042  000060                     __pcstackBANK0:
  2043                           	opt stack 0
  2044  000060                     ??_Console_ClearCursor:
  2045  000060                     ??_Console_Init:
  2046  000060                     ??_Console_NewLine:
  2047  000060                     ??_Console_FormFeed:
  2048  000060                     ??_HMI_SetButton:
  2049  000060                     ??_InitADC:
  2050  000060                     ?_GetPortProperties:
  2051                           	opt stack 0
  2052  000060                     ?_GetPortPORT:
  2053                           	opt stack 0
  2054  000060                     ?_GetPortTRIS:
  2055                           	opt stack 0
  2056  000060                     ?_FunctReadADC:
  2057                           	opt stack 0
  2058  000060                     ?___wmul:
  2059                           	opt stack 0
  2060  000060                     ?___awdiv:
  2061                           	opt stack 0
  2062  000060                     ?___lwdiv:
  2063                           	opt stack 0
  2064  000060                     ?___fldiv:
  2065                           	opt stack 0
  2066  000060                     ?_frexp:
  2067                           	opt stack 0
  2068  000060                     ?___lldiv:
  2069                           	opt stack 0
  2070  000060                     ?___xxtofl:
  2071                           	opt stack 0
  2072  000060                     Mode_Set@pMode:
  2073                           	opt stack 0
  2074  000060                     ToSegment@pCHR:
  2075                           	opt stack 0
  2076  000060                     HMI_SetBar@pValue:
  2077                           	opt stack 0
  2078  000060                     eusartSend@sendChar:
  2079                           	opt stack 0
  2080  000060                     Port_GetPin@pInput:
  2081                           	opt stack 0
  2082  000060                     Port_GetQuad@pInput:
  2083                           	opt stack 0
  2084  000060                     SPI_DisableISR@pInput:
  2085                           	opt stack 0
  2086  000060                     SPI_DCS@pInput:
  2087                           	opt stack 0
  2088  000060                     SPI_Send@pInput:
  2089                           	opt stack 0
  2090  000060                     Byte_SetBit@pInput:
  2091                           	opt stack 0
  2092  000060                     Byte_GetBit@pInput:
  2093                           	opt stack 0
  2094  000060                     Byte_SetZone@pInput:
  2095                           	opt stack 0
  2096  000060                     Byte_GetZone@pInput:
  2097                           	opt stack 0
  2098  000060                     Byte_SetByte@pInput:
  2099                           	opt stack 0
  2100  000060                     delay_ms@ms:
  2101                           	opt stack 0
  2102  000060                     delay_us@us:
  2103                           	opt stack 0
  2104  000060                     reverse@input:
  2105                           	opt stack 0
  2106  000060                     FunctReadADC@channel:
  2107                           	opt stack 0
  2108  000060                     ___wmul@multiplier:
  2109                           	opt stack 0
  2110  000060                     ___awdiv@dividend:
  2111                           	opt stack 0
  2112  000060                     ___lwdiv@dividend:
  2113                           	opt stack 0
  2114  000060                     MXK_Queue@pCallback:
  2115                           	opt stack 0
  2116  000060                     ___flge@ff1:
  2117                           	opt stack 0
  2118  000060                     ___lldiv@dividend:
  2119                           	opt stack 0
  2120  000060                     ___fldiv@b:
  2121                           	opt stack 0
  2122  000060                     ___xxtofl@val:
  2123                           	opt stack 0
  2124  000060                     frexp@value:
  2125                           	opt stack 0
  2126                           
  2127                           ; 4 bytes @ 0x0
  2128  000060                     	ds	1
  2129  000061                     ?_UpdateDistance:
  2130                           	opt stack 0
  2131  000061                     HMI_SetSegments@pString:
  2132                           	opt stack 0
  2133  000061                     Drive@Speed:
  2134                           	opt stack 0
  2135  000061                     Turn@Angle:
  2136                           	opt stack 0
  2137  000061                     BangBang@RSpeedH:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x1
  2141  000061                     	ds	1
  2142  000062                     GetPortProperties@pInput:
  2143                           	opt stack 0
  2144  000062                     GetPortPORT@pInput:
  2145                           	opt stack 0
  2146  000062                     GetPortTRIS@pInput:
  2147                           	opt stack 0
  2148  000062                     Port_GetPin@pPin:
  2149                           	opt stack 0
  2150  000062                     Port_GetQuad@pQuad:
  2151                           	opt stack 0
  2152  000062                     SPI_Send@pData:
  2153                           	opt stack 0
  2154  000062                     Byte_SetBit@pBit:
  2155                           	opt stack 0
  2156  000062                     Byte_GetBit@pBit:
  2157                           	opt stack 0
  2158  000062                     Byte_SetZone@pMax:
  2159                           	opt stack 0
  2160  000062                     Byte_GetZone@pMax:
  2161                           	opt stack 0
  2162  000062                     Byte_SetByte@pValue:
  2163                           	opt stack 0
  2164  000062                     Console_Init@x:
  2165                           	opt stack 0
  2166  000062                     Console_FormFeed@x:
  2167                           	opt stack 0
  2168  000062                     reverse@length:
  2169                           	opt stack 0
  2170  000062                     ___wmul@multiplicand:
  2171                           	opt stack 0
  2172  000062                     ___awdiv@divisor:
  2173                           	opt stack 0
  2174  000062                     ___lwdiv@divisor:
  2175                           	opt stack 0
  2176  000062                     delay_ms@u:
  2177                           	opt stack 0
  2178  000062                     delay_us@u:
  2179                           	opt stack 0
  2180  000062                     HMI_SetButton@reindex:
  2181                           	opt stack 0
  2182                           
  2183                           ; 4 bytes @ 0x2
  2184  000062                     	ds	1
  2185  000063                     ??_Port_GetPin:
  2186  000063                     ??_Port_GetQuad:
  2187  000063                     ??_Byte_GetBit:
  2188  000063                     LCD_Write@mode:
  2189                           	opt stack 0
  2190  000063                     Byte_SetBit@pValue:
  2191                           	opt stack 0
  2192  000063                     Byte_SetZone@pChunk:
  2193                           	opt stack 0
  2194  000063                     Byte_GetZone@pChunk:
  2195                           	opt stack 0
  2196  000063                     Console_Init@y:
  2197                           	opt stack 0
  2198  000063                     Console_FormFeed@y:
  2199                           	opt stack 0
  2200  000063                     OutSeg@pSegment:
  2201                           	opt stack 0
  2202  000063                     Drive@Rad:
  2203                           	opt stack 0
  2204  000063                     Turn@Speed:
  2205                           	opt stack 0
  2206  000063                     BangBang@RSpeedL:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x3
  2210  000063                     	ds	1
  2211  000064                     ??_Byte_SetBit:
  2212  000064                     ??_Console_IncrementCursor:
  2213  000064                     ??_OutSeg:
  2214  000064                     ??___xxtofl:
  2215  000064                     LCD_Write@value:
  2216                           	opt stack 0
  2217  000064                     Byte_GetBit@Output:
  2218                           	opt stack 0
  2219  000064                     Byte_SetZone@pChunkSize:
  2220                           	opt stack 0
  2221  000064                     Byte_GetZone@pChunkSize:
  2222                           	opt stack 0
  2223  000064                     reverse@tempVar:
  2224                           	opt stack 0
  2225  000064                     ___awdiv@counter:
  2226                           	opt stack 0
  2227  000064                     ___lwdiv@counter:
  2228                           	opt stack 0
  2229  000064                     HMI_SetSegments@in:
  2230                           	opt stack 0
  2231  000064                     ___wmul@product:
  2232                           	opt stack 0
  2233  000064                     frexp@eptr:
  2234                           	opt stack 0
  2235  000064                     ___flge@ff2:
  2236                           	opt stack 0
  2237  000064                     ___lldiv@divisor:
  2238                           	opt stack 0
  2239  000064                     ___fldiv@a:
  2240                           	opt stack 0
  2241                           
  2242                           ; 4 bytes @ 0x4
  2243  000064                     	ds	1
  2244  000065                     ??_Byte_GetZone:
  2245  000065                     ?_Console_MakeField:
  2246                           	opt stack 0
  2247  000065                     Set_Addr_Window@ys:
  2248                           	opt stack 0
  2249  000065                     Set_Rotation@m:
  2250                           	opt stack 0
  2251  000065                     Port_GetPin@Output:
  2252                           	opt stack 0
  2253  000065                     Port_GetQuad@Output:
  2254                           	opt stack 0
  2255  000065                     Byte_SetZone@pValue:
  2256                           	opt stack 0
  2257  000065                     ___awdiv@sign:
  2258                           	opt stack 0
  2259  000065                     LCD_Word_Write@value:
  2260                           	opt stack 0
  2261  000065                     reverse@iterator:
  2262                           	opt stack 0
  2263  000065                     Turn@C_Angle:
  2264                           	opt stack 0
  2265  000065                     BangBang@LSpeedH:
  2266                           	opt stack 0
  2267  000065                     ___lwdiv@quotient:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x5
  2271  000065                     	ds	1
  2272  000066                     ??_frexp:
  2273  000066                     ??_Byte_SetZone:
  2274  000066                     Set_Addr_Window@xe:
  2275                           	opt stack 0
  2276  000066                     Set_Rotation@rotation:
  2277                           	opt stack 0
  2278  000066                     Byte_GetZone@MASK:
  2279                           	opt stack 0
  2280  000066                     OutSeg@pInput:
  2281                           	opt stack 0
  2282  000066                     HMI_SetButton@pValue:
  2283                           	opt stack 0
  2284  000066                     MXK_BlockSwitchTo@CUR:
  2285                           	opt stack 0
  2286  000066                     MXK_SwitchTo@CUR:
  2287                           	opt stack 0
  2288  000066                     ___awdiv@quotient:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x6
  2292  000066                     	ds	1
  2293  000067                     ??_Console_MakeField:
  2294  000067                     ?___lwmod:
  2295                           	opt stack 0
  2296  000067                     Set_Addr_Window@ye:
  2297                           	opt stack 0
  2298  000067                     Byte_GetZone@Offset:
  2299                           	opt stack 0
  2300  000067                     OutSeg@out:
  2301                           	opt stack 0
  2302  000067                     HMI_SetButton@v:
  2303                           	opt stack 0
  2304  000067                     MXK_BlockSwitchTo@pModule:
  2305                           	opt stack 0
  2306  000067                     MXK_SwitchTo@pModule:
  2307                           	opt stack 0
  2308  000067                     BangBang@LSpeedL:
  2309                           	opt stack 0
  2310  000067                     ___lwmod@dividend:
  2311                           	opt stack 0
  2312                           
  2313                           ; 2 bytes @ 0x7
  2314  000067                     	ds	1
  2315  000068                     ??___fldiv:
  2316  000068                     ??_Console_Tab:
  2317  000068                     ??___flge:
  2318  000068                     Set_Addr_Window@xs:
  2319                           	opt stack 0
  2320  000068                     Byte_GetZone@Output:
  2321                           	opt stack 0
  2322  000068                     ___xxtofl@sign:
  2323                           	opt stack 0
  2324  000068                     HMI_Render@a:
  2325                           	opt stack 0
  2326  000068                     ___lldiv@quotient:
  2327                           	opt stack 0
  2328                           
  2329                           ; 4 bytes @ 0x8
  2330  000068                     	ds	1
  2331  000069                     Byte_SetZone@Offset:
  2332                           	opt stack 0
  2333  000069                     ___xxtofl@exp:
  2334                           	opt stack 0
  2335  000069                     LCD_Fill@pColour:
  2336                           	opt stack 0
  2337  000069                     LCD_FillRectangle@pColour:
  2338                           	opt stack 0
  2339  000069                     Byte_GetPair@pInput:
  2340                           	opt stack 0
  2341  000069                     Console_MakeField@Index:
  2342                           	opt stack 0
  2343  000069                     ___lwmod@divisor:
  2344                           	opt stack 0
  2345                           
  2346                           ; 2 bytes @ 0x9
  2347  000069                     	ds	1
  2348  00006A                     Byte_SetZone@MASK:
  2349                           	opt stack 0
  2350  00006A                     ___xxtofl@arg:
  2351                           	opt stack 0
  2352                           
  2353                           ; 4 bytes @ 0xA
  2354  00006A                     	ds	1
  2355  00006B                     LCD_Fill@i:
  2356                           	opt stack 0
  2357  00006B                     Byte_GetPair@pPair:
  2358                           	opt stack 0
  2359  00006B                     Console_MakeField@pInput:
  2360                           	opt stack 0
  2361  00006B                     ___lwmod@counter:
  2362                           	opt stack 0
  2363  00006B                     Byte_SetPair@pInput:
  2364                           	opt stack 0
  2365  00006B                     Byte_SetQuad@pInput:
  2366                           	opt stack 0
  2367  00006B                     LCD_FillRectangle@pPoint:
  2368                           	opt stack 0
  2369                           
  2370                           ; 4 bytes @ 0xB
  2371  00006B                     	ds	1
  2372  00006C                     LCD_Fill@j:
  2373                           	opt stack 0
  2374  00006C                     ___lldiv@counter:
  2375                           	opt stack 0
  2376  00006C                     ___fldiv@sign:
  2377                           	opt stack 0
  2378  00006C                     Word_GetPair@pInput:
  2379                           	opt stack 0
  2380  00006C                     itos@input:
  2381                           	opt stack 0
  2382  00006C                     Console_MakeField@Column:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0xC
  2386  00006C                     	ds	1
  2387  00006D                     Byte_SetPair@pPair:
  2388                           	opt stack 0
  2389  00006D                     Byte_SetQuad@pQuad:
  2390                           	opt stack 0
  2391  00006D                     Console_Tab@t:
  2392                           	opt stack 0
  2393  00006D                     Timer2_Init@pFrequency:
  2394                           	opt stack 0
  2395  00006D                     ___fldiv@rem:
  2396                           	opt stack 0
  2397                           
  2398                           ; 4 bytes @ 0xD
  2399  00006D                     	ds	1
  2400  00006E                     ?___flmul:
  2401                           	opt stack 0
  2402  00006E                     Byte_SetPair@pValue:
  2403                           	opt stack 0
  2404  00006E                     Byte_SetQuad@pValue:
  2405                           	opt stack 0
  2406  00006E                     Word_GetPair@pPair:
  2407                           	opt stack 0
  2408  00006E                     Console_Tab@i:
  2409                           	opt stack 0
  2410  00006E                     itos@destination:
  2411                           	opt stack 0
  2412  00006E                     _Console_MakeField$10974:
  2413                           	opt stack 0
  2414  00006E                     ___flmul@b:
  2415                           	opt stack 0
  2416                           
  2417                           ; 4 bytes @ 0xE
  2418  00006E                     	ds	1
  2419  00006F                     Console_Tab@c:
  2420                           	opt stack 0
  2421  00006F                     Port_SetPin@pInput:
  2422                           	opt stack 0
  2423  00006F                     Port_Set@pInput:
  2424                           	opt stack 0
  2425  00006F                     SPI_MinSpeed@pInput:
  2426                           	opt stack 0
  2427  00006F                     SPI_MaxSpeed@pInput:
  2428                           	opt stack 0
  2429  00006F                     Word_SetPair@pInput:
  2430                           	opt stack 0
  2431  00006F                     PortProperty_Valid@pInput:
  2432                           	opt stack 0
  2433  00006F                     LCD_FillRectangle@pSize:
  2434                           	opt stack 0
  2435                           
  2436                           ; 4 bytes @ 0xF
  2437  00006F                     	ds	1
  2438  000070                     ??_Console_PrintChar:
  2439  000070                     Console_MakeField@x:
  2440                           	opt stack 0
  2441  000070                     itos@Data:
  2442                           	opt stack 0
  2443                           
  2444                           ; 2 bytes @ 0x10
  2445  000070                     	ds	1
  2446  000071                     ??_Timer2_Init:
  2447  000071                     Port_SetPin@pPin:
  2448                           	opt stack 0
  2449  000071                     Port_Set@pValue:
  2450                           	opt stack 0
  2451  000071                     Word_SetPair@pPair:
  2452                           	opt stack 0
  2453  000071                     PortProperty_Valid@pPinDrive:
  2454                           	opt stack 0
  2455  000071                     Console_MakeField@y:
  2456                           	opt stack 0
  2457  000071                     ___fldiv@new_exp:
  2458                           	opt stack 0
  2459                           
  2460                           ; 2 bytes @ 0x11
  2461  000071                     	ds	1
  2462  000072                     ??_Port_Set:
  2463  000072                     Port_SetPin@pValue:
  2464                           	opt stack 0
  2465  000072                     Word_SetPair@pValue:
  2466                           	opt stack 0
  2467  000072                     PortProperty_Valid@pPin:
  2468                           	opt stack 0
  2469  000072                     LCD_DrawField@pField:
  2470                           	opt stack 0
  2471  000072                     itos@Length:
  2472                           	opt stack 0
  2473  000072                     Timer2_Init@RDIV:
  2474                           	opt stack 0
  2475  000072                     ___flmul@a:
  2476                           	opt stack 0
  2477                           
  2478                           ; 4 bytes @ 0x12
  2479  000072                     	ds	1
  2480  000073                     ??_PortProperty_Valid:
  2481  000073                     ??_LCD_FillRectangle:
  2482  000073                     Port_SetPin@Type:
  2483                           	opt stack 0
  2484  000073                     Console_PrintChar@pInput:
  2485                           	opt stack 0
  2486  000073                     ___fldiv@grs:
  2487                           	opt stack 0
  2488                           
  2489                           ; 4 bytes @ 0x13
  2490  000073                     	ds	1
  2491  000074                     LED_Set@pValue:
  2492                           	opt stack 0
  2493  000074                     putch@c:
  2494                           	opt stack 0
  2495  000074                     Port_TogglePin@pInput:
  2496                           	opt stack 0
  2497  000074                     itos@Out:
  2498                           	opt stack 0
  2499  000074                     LCD_DrawField@pPoint:
  2500                           	opt stack 0
  2501                           
  2502                           ; 4 bytes @ 0x14
  2503  000074                     	ds	1
  2504  000075                     ?_printf:
  2505                           	opt stack 0
  2506  000075                     LCD_FillRectangle@i:
  2507                           	opt stack 0
  2508  000075                     LED_Set@pLED:
  2509                           	opt stack 0
  2510  000075                     printf@f:
  2511                           	opt stack 0
  2512  000075                     PortProperty_Valid@Errors:
  2513                           	opt stack 0
  2514                           
  2515                           ; 16 bytes @ 0x15
  2516  000075                     	ds	1
  2517  000076                     ??___flmul:
  2518  000076                     LCD_FillRectangle@j:
  2519                           	opt stack 0
  2520  000076                     Port_TogglePin@pPin:
  2521                           	opt stack 0
  2522  000076                     HMI_SetNumber@pInput:
  2523                           	opt stack 0
  2524  000076                     Timer2_Init@pCPUClock:
  2525                           	opt stack 0
  2526                           
  2527                           ; 4 bytes @ 0x16
  2528  000076                     	ds	1
  2529  000077                     Port_TogglePin@Value:
  2530                           	opt stack 0
  2531  000077                     ___fldiv@bexp:
  2532                           	opt stack 0
  2533                           
  2534                           ; 1 bytes @ 0x17
  2535  000077                     	ds	1
  2536  000078                     LED_Toggle@pLED:
  2537                           	opt stack 0
  2538  000078                     ___fldiv@aexp:
  2539                           	opt stack 0
  2540  000078                     LCD_DrawField@pSize:
  2541                           	opt stack 0
  2542                           
  2543                           ; 4 bytes @ 0x18
  2544  000078                     	ds	1
  2545  000079                     ??_printf:
  2546  000079                     Event_DIPSwitch@pState:
  2547                           	opt stack 0
  2548  000079                     Event_TestButton@pState:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x19
  2552  000079                     	ds	1
  2553  00007A                     Event_DIPSwitch@Bar:
  2554                           	opt stack 0
  2555  00007A                     printf@flag:
  2556                           	opt stack 0
  2557  00007A                     ___flmul@sign:
  2558                           	opt stack 0
  2559  00007A                     Timer2_Init@DIVIDE:
  2560                           	opt stack 0
  2561                           
  2562                           ; 4 bytes @ 0x1A
  2563  00007A                     	ds	1
  2564  00007B                     printf@prec:
  2565                           	opt stack 0
  2566  00007B                     ___flmul@aexp:
  2567                           	opt stack 0
  2568  00007B                     Button_Poll@pButton:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x1B
  2572  00007B                     	ds	1
  2573  00007C                     ??_LCD_DrawField:
  2574  00007C                     printf@ap:
  2575                           	opt stack 0
  2576  00007C                     ___flmul@grs:
  2577                           	opt stack 0
  2578                           
  2579                           ; 4 bytes @ 0x1C
  2580  00007C                     	ds	1
  2581  00007D                     Button_Poll@pIncrement:
  2582                           	opt stack 0
  2583                           
  2584                           ; 1 bytes @ 0x1D
  2585  00007D                     	ds	1
  2586  00007E                     ??_Button_Poll:
  2587  00007E                     LCD_DrawField@count:
  2588                           	opt stack 0
  2589  00007E                     printf@val:
  2590                           	opt stack 0
  2591                           
  2592                           ; 2 bytes @ 0x1E
  2593  00007E                     	ds	2
  2594  000080                     LCD_DrawField@xmax:
  2595                           	opt stack 0
  2596  000080                     printf@c:
  2597                           	opt stack 0
  2598  000080                     ___flmul@bexp:
  2599                           	opt stack 0
  2600                           
  2601                           ; 1 bytes @ 0x20
  2602  000080                     	ds	1
  2603  000081                     LCD_DrawField@ymax:
  2604                           	opt stack 0
  2605  000081                     ___flmul@prod:
  2606                           	opt stack 0
  2607                           
  2608                           ; 4 bytes @ 0x21
  2609  000081                     	ds	1
  2610  000082                     LCD_DrawField@i:
  2611                           	opt stack 0
  2612  000082                     Port_Set@TypeRequired:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x22
  2616  000082                     	ds	1
  2617  000083                     ??_Console_Render:
  2618  000083                     Button_Poll@Pin:
  2619                           	opt stack 0
  2620                           
  2621                           ; 1 bytes @ 0x23
  2622  000083                     	ds	1
  2623  000084                     Port_Set@TypeActual:
  2624                           	opt stack 0
  2625                           
  2626                           ; 2 bytes @ 0x24
  2627  000084                     	ds	1
  2628  000085                     PortProperty_Valid@Pair:
  2629                           	opt stack 0
  2630  000085                     Console_Render@temp:
  2631                           	opt stack 0
  2632  000085                     ___flmul@temp:
  2633                           	opt stack 0
  2634                           
  2635                           ; 2 bytes @ 0x25
  2636  000085                     	ds	1
  2637  000086                     Port_Set@Type:
  2638                           	opt stack 0
  2639  000086                     Port_CheckPairType@pInput:
  2640                           	opt stack 0
  2641  000086                     Port_SetPinType@pInput:
  2642                           	opt stack 0
  2643  000086                     Console_Render@lCursor:
  2644                           	opt stack 0
  2645                           
  2646                           ; 4 bytes @ 0x26
  2647  000086                     	ds	1
  2648  000087                     ?___flneg:
  2649                           	opt stack 0
  2650  000087                     ___flneg@f1:
  2651                           	opt stack 0
  2652                           
  2653                           ; 4 bytes @ 0x27
  2654  000087                     	ds	1
  2655  000088                     Port_CheckPairType@pPair:
  2656                           	opt stack 0
  2657  000088                     Port_SetPinType@pPin:
  2658                           	opt stack 0
  2659                           
  2660                           ; 1 bytes @ 0x28
  2661  000088                     	ds	1
  2662  000089                     Port_CheckPairType@pDrive:
  2663                           	opt stack 0
  2664  000089                     Port_SetPinType@pType:
  2665                           	opt stack 0
  2666                           
  2667                           ; 1 bytes @ 0x29
  2668  000089                     	ds	1
  2669  00008A                     Port_CheckPairType@Pin1:
  2670                           	opt stack 0
  2671  00008A                     Port_SetPinType@Output:
  2672                           	opt stack 0
  2673  00008A                     Console_Render@x:
  2674                           	opt stack 0
  2675                           
  2676                           ; 1 bytes @ 0x2A
  2677  00008A                     	ds	1
  2678  00008B                     ?___fladd:
  2679                           	opt stack 0
  2680  00008B                     Port_CheckPairType@Pin2:
  2681                           	opt stack 0
  2682  00008B                     Console_Render@y:
  2683                           	opt stack 0
  2684  00008B                     Port_SetPinType@Props:
  2685                           	opt stack 0
  2686  00008B                     ___fladd@b:
  2687                           	opt stack 0
  2688                           
  2689                           ; 4 bytes @ 0x2B
  2690  00008B                     	ds	1
  2691  00008C                     Port_CheckPairType@Output:
  2692                           	opt stack 0
  2693                           
  2694                           ; 1 bytes @ 0x2C
  2695  00008C                     	ds	1
  2696  00008D                     LED_Init@pLED:
  2697                           	opt stack 0
  2698  00008D                     Port_CheckPairType@Props:
  2699                           	opt stack 0
  2700  00008D                     SPI_Init@pClock:
  2701                           	opt stack 0
  2702                           
  2703                           ; 4 bytes @ 0x2D
  2704  00008D                     	ds	2
  2705  00008F                     Port_CheckQuadType@pInput:
  2706                           	opt stack 0
  2707  00008F                     ___fladd@a:
  2708                           	opt stack 0
  2709                           
  2710                           ; 4 bytes @ 0x2F
  2711  00008F                     	ds	2
  2712  000091                     Port_CheckQuadType@pQuad:
  2713                           	opt stack 0
  2714  000091                     SPI_Init@pChannel:
  2715                           	opt stack 0
  2716                           
  2717                           ; 1 bytes @ 0x31
  2718  000091                     	ds	1
  2719  000092                     Port_CheckQuadType@pDrive:
  2720                           	opt stack 0
  2721  000092                     SPI_Init@pMode:
  2722                           	opt stack 0
  2723                           
  2724                           ; 1 bytes @ 0x32
  2725  000092                     	ds	1
  2726  000093                     ??___fladd:
  2727  000093                     Port_CheckQuadType@Pair1:
  2728                           	opt stack 0
  2729  000093                     SPI_Init@pInput:
  2730                           	opt stack 0
  2731                           
  2732                           ; 2 bytes @ 0x33
  2733  000093                     	ds	1
  2734  000094                     Port_CheckQuadType@Pair2:
  2735                           	opt stack 0
  2736                           
  2737                           ; 1 bytes @ 0x34
  2738  000094                     	ds	1
  2739  000095                     ??_LCD_Init:
  2740  000095                     Port_CheckQuadType@Output:
  2741                           	opt stack 0
  2742                           
  2743                           ; 1 bytes @ 0x35
  2744  000095                     	ds	1
  2745  000096                     Port_CheckPortType@pInput:
  2746                           	opt stack 0
  2747  000096                     Port_SetQuadType@pInput:
  2748                           	opt stack 0
  2749                           
  2750                           ; 2 bytes @ 0x36
  2751  000096                     	ds	1
  2752  000097                     LCD_Init@i:
  2753                           	opt stack 0
  2754                           
  2755                           ; 2 bytes @ 0x37
  2756  000097                     	ds	1
  2757  000098                     Port_CheckPortType@pDrive:
  2758                           	opt stack 0
  2759  000098                     Port_SetQuadType@pQuad:
  2760                           	opt stack 0
  2761                           
  2762                           ; 1 bytes @ 0x38
  2763  000098                     	ds	1
  2764  000099                     Port_CheckPortType@Output:
  2765                           	opt stack 0
  2766  000099                     Port_SetQuadType@pType:
  2767                           	opt stack 0
  2768                           
  2769                           ; 1 bytes @ 0x39
  2770  000099                     	ds	1
  2771  00009A                     Port_SetQuadType@Output:
  2772                           	opt stack 0
  2773  00009A                     Port_SetType@pInput:
  2774                           	opt stack 0
  2775                           
  2776                           ; 2 bytes @ 0x3A
  2777  00009A                     	ds	1
  2778  00009B                     ___fladd@signs:
  2779                           	opt stack 0
  2780  00009B                     Button_Init@pInput:
  2781                           	opt stack 0
  2782                           
  2783                           ; 2 bytes @ 0x3B
  2784  00009B                     	ds	1
  2785  00009C                     Port_SetType@pType:
  2786                           	opt stack 0
  2787  00009C                     ___fladd@aexp:
  2788                           	opt stack 0
  2789                           
  2790                           ; 1 bytes @ 0x3C
  2791  00009C                     	ds	1
  2792  00009D                     ??_Port_SetType:
  2793  00009D                     ___fladd@bexp:
  2794                           	opt stack 0
  2795  00009D                     Button_Init@pThreshold:
  2796                           	opt stack 0
  2797                           
  2798                           ; 2 bytes @ 0x3D
  2799  00009D                     	ds	1
  2800  00009E                     ___fladd@grs:
  2801                           	opt stack 0
  2802                           
  2803                           ; 1 bytes @ 0x3E
  2804  00009E                     	ds	1
  2805  00009F                     ?___flsub:
  2806                           	opt stack 0
  2807  00009F                     ?_eval_poly:
  2808                           	opt stack 0
  2809  00009F                     ?___fltol:
  2810                           	opt stack 0
  2811  00009F                     Port_SetType@Output:
  2812                           	opt stack 0
  2813  00009F                     Button_Init@pInitIO:
  2814                           	opt stack 0
  2815  00009F                     ___fltol@f1:
  2816                           	opt stack 0
  2817  00009F                     ___flsub@b:
  2818                           	opt stack 0
  2819  00009F                     eval_poly@x:
  2820                           	opt stack 0
  2821                           
  2822                           ; 4 bytes @ 0x3F
  2823  00009F                     	ds	1
  2824  0000A0                     Port_Init@pInput:
  2825                           	opt stack 0
  2826                           
  2827                           ; 2 bytes @ 0x40
  2828  0000A0                     	ds	2
  2829  0000A2                     Port_Init@pPort:
  2830                           	opt stack 0
  2831  0000A2                     Button_Init@pGetState:
  2832                           	opt stack 0
  2833                           
  2834                           ; 3 bytes @ 0x42
  2835  0000A2                     	ds	1
  2836  0000A3                     ??_Port_Init:
  2837  0000A3                     ??___fltol:
  2838  0000A3                     eval_poly@d:
  2839                           	opt stack 0
  2840  0000A3                     ___flsub@a:
  2841                           	opt stack 0
  2842                           
  2843                           ; 4 bytes @ 0x43
  2844  0000A3                     	ds	2
  2845  0000A5                     Port_Init@i:
  2846                           	opt stack 0
  2847  0000A5                     eval_poly@n:
  2848                           	opt stack 0
  2849  0000A5                     Button_Init@pFunction:
  2850                           	opt stack 0
  2851                           
  2852                           ; 3 bytes @ 0x45
  2853  0000A5                     	ds	1
  2854  0000A6                     
  2855                           ; 1 bytes @ 0x46
  2856  0000A6                     	ds	1
  2857  0000A7                     ??_eval_poly:
  2858  0000A7                     ___fltol@sign1:
  2859                           	opt stack 0
  2860                           
  2861                           ; 1 bytes @ 0x47
  2862  0000A7                     	ds	1
  2863  0000A8                     ___fltol@exp1:
  2864                           	opt stack 0
  2865  0000A8                     HMI_Init@in:
  2866                           	opt stack 0
  2867                           
  2868                           ; 2 bytes @ 0x48
  2869  0000A8                     	ds	1
  2870  0000A9                     ?_floor:
  2871                           	opt stack 0
  2872  0000A9                     floor@x:
  2873                           	opt stack 0
  2874                           
  2875                           ; 4 bytes @ 0x49
  2876  0000A9                     	ds	2
  2877  0000AB                     eval_poly@res:
  2878                           	opt stack 0
  2879                           
  2880                           ; 4 bytes @ 0x4B
  2881  0000AB                     	ds	2
  2882  0000AD                     floor@i:
  2883                           	opt stack 0
  2884                           
  2885                           ; 4 bytes @ 0x4D
  2886  0000AD                     	ds	2
  2887  0000AF                     ?_log:
  2888                           	opt stack 0
  2889  0000AF                     ?_ldexp:
  2890                           	opt stack 0
  2891  0000AF                     ldexp@value:
  2892                           	opt stack 0
  2893  0000AF                     log@x:
  2894                           	opt stack 0
  2895                           
  2896                           ; 4 bytes @ 0x4F
  2897  0000AF                     	ds	2
  2898  0000B1                     floor@expon:
  2899                           	opt stack 0
  2900                           
  2901                           ; 2 bytes @ 0x51
  2902  0000B1                     	ds	2
  2903  0000B3                     ldexp@newexp:
  2904                           	opt stack 0
  2905  0000B3                     log@exponent:
  2906                           	opt stack 0
  2907                           
  2908                           ; 2 bytes @ 0x53
  2909  0000B3                     	ds	2
  2910  0000B5                     ??_ldexp:
  2911                           
  2912                           ; 1 bytes @ 0x55
  2913  0000B5                     	ds	2
  2914  0000B7                     ?_exp:
  2915                           	opt stack 0
  2916  0000B7                     exp@x:
  2917                           	opt stack 0
  2918                           
  2919                           ; 4 bytes @ 0x57
  2920  0000B7                     	ds	4
  2921  0000BB                     _exp$15671:
  2922                           	opt stack 0
  2923                           
  2924                           ; 4 bytes @ 0x5B
  2925  0000BB                     	ds	4
  2926  0000BF                     exp@exponent:
  2927                           	opt stack 0
  2928                           
  2929                           ; 2 bytes @ 0x5F
  2930  0000BF                     	ds	2
  2931  0000C1                     exp@sign:
  2932                           	opt stack 0
  2933                           
  2934                           ; 1 bytes @ 0x61
  2935  0000C1                     	ds	1
  2936  0000C2                     ?_pow:
  2937                           	opt stack 0
  2938  0000C2                     pow@x:
  2939                           	opt stack 0
  2940                           
  2941                           ; 4 bytes @ 0x62
  2942  0000C2                     	ds	4
  2943  0000C6                     pow@y:
  2944                           	opt stack 0
  2945                           
  2946                           ; 4 bytes @ 0x66
  2947  0000C6                     	ds	4
  2948  0000CA                     _pow$15669:
  2949                           	opt stack 0
  2950                           
  2951                           ; 4 bytes @ 0x6A
  2952  0000CA                     	ds	4
  2953  0000CE                     _pow$15670:
  2954                           	opt stack 0
  2955                           
  2956                           ; 4 bytes @ 0x6E
  2957  0000CE                     	ds	4
  2958  0000D2                     pow@sign:
  2959                           	opt stack 0
  2960                           
  2961                           ; 1 bytes @ 0x72
  2962  0000D2                     	ds	1
  2963  0000D3                     pow@yi:
  2964                           	opt stack 0
  2965                           
  2966                           ; 4 bytes @ 0x73
  2967  0000D3                     	ds	4
  2968  0000D7                     ??_ADCAverage:
  2969                           
  2970                           ; 1 bytes @ 0x77
  2971  0000D7                     	ds	2
  2972  0000D9                     ??_Sensor_Observe2:
  2973  0000D9                     ??_Sensor_Observe:
  2974  0000D9                     
  2975                           ; 1 bytes @ 0x79
  2976  0000D9                     	ds	2
  2977  0000DB                     ??_main:
  2978                           
  2979                           ; 1 bytes @ 0x7B
  2980  0000DB                     	ds	5
  2981  0000E0                     main@down:
  2982                           	opt stack 0
  2983                           
  2984                           ; 1 bytes @ 0x80
  2985  0000E0                     	ds	1
  2986  0000E1                     main@right:
  2987                           	opt stack 0
  2988                           
  2989                           ; 1 bytes @ 0x81
  2990  0000E1                     	ds	1
  2991  0000E2                     main@left:
  2992                           	opt stack 0
  2993                           
  2994                           ; 1 bytes @ 0x82
  2995  0000E2                     	ds	1
  2996  0000E3                     main@up:
  2997                           	opt stack 0
  2998                           
  2999                           ; 1 bytes @ 0x83
  3000  0000E3                     	ds	1
  3001  0000E4                     main@Target_Distance:
  3002                           	opt stack 0
  3003                           
  3004                           ; 2 bytes @ 0x84
  3005  0000E4                     	ds	2
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           postdec1	equ	0xFE5
  3013                           fsr1h	equ	0xFE2
  3014                           fsr1l	equ	0xFE1
  3015                           
  3016                           	psect	cstackCOMRAM
  3017  000001                     __pcstackCOMRAM:
  3018                           	opt stack 0
  3019  000001                     i2Byte_SetBit@pInput:
  3020                           	opt stack 0
  3021  000001                     i2Byte_GetZone@pInput:
  3022                           	opt stack 0
  3023  000001                     i2delay_us@us:
  3024                           	opt stack 0
  3025  000001                     i2MXK_Queue@pCallback:
  3026                           	opt stack 0
  3027                           
  3028                           ; 3 bytes @ 0x0
  3029  000001                     	ds	2
  3030  000003                     i2Byte_SetBit@pBit:
  3031                           	opt stack 0
  3032  000003                     i2Byte_GetZone@pMax:
  3033                           	opt stack 0
  3034  000003                     i2delay_us@u:
  3035                           	opt stack 0
  3036                           
  3037                           ; 4 bytes @ 0x2
  3038  000003                     	ds	1
  3039  000004                     i2Byte_SetBit@pValue:
  3040                           	opt stack 0
  3041  000004                     i2Byte_GetZone@pChunk:
  3042                           	opt stack 0
  3043                           
  3044                           ; 1 bytes @ 0x3
  3045  000004                     	ds	1
  3046  000005                     ??i2_Byte_SetBit:
  3047  000005                     i2Byte_GetZone@pChunkSize:
  3048                           	opt stack 0
  3049                           
  3050                           ; 1 bytes @ 0x4
  3051  000005                     	ds	1
  3052  000006                     ??i2_Byte_GetZone:
  3053                           
  3054                           ; 1 bytes @ 0x5
  3055  000006                     	ds	1
  3056  000007                     i2Byte_GetZone@MASK:
  3057                           	opt stack 0
  3058  000007                     i2MXK_SwitchTo@CUR:
  3059                           	opt stack 0
  3060                           
  3061                           ; 1 bytes @ 0x6
  3062  000007                     	ds	1
  3063  000008                     i2Byte_GetZone@Offset:
  3064                           	opt stack 0
  3065  000008                     i2MXK_SwitchTo@pModule:
  3066                           	opt stack 0
  3067                           
  3068                           ; 1 bytes @ 0x7
  3069  000008                     	ds	1
  3070  000009                     i2Byte_GetZone@Output:
  3071                           	opt stack 0
  3072                           
  3073                           ; 1 bytes @ 0x8
  3074  000009                     	ds	1
  3075  00000A                     i2Byte_GetPair@pInput:
  3076                           	opt stack 0
  3077                           
  3078                           ; 2 bytes @ 0x9
  3079  00000A                     	ds	2
  3080  00000C                     i2Byte_GetPair@pPair:
  3081                           	opt stack 0
  3082                           
  3083                           ; 1 bytes @ 0xB
  3084  00000C                     	ds	1
  3085  00000D                     i2Word_GetPair@pInput:
  3086                           	opt stack 0
  3087                           
  3088                           ; 2 bytes @ 0xC
  3089  00000D                     	ds	2
  3090  00000F                     i2Word_GetPair@pPair:
  3091                           	opt stack 0
  3092                           
  3093                           ; 1 bytes @ 0xE
  3094  00000F                     	ds	1
  3095  000010                     i2Port_SetPin@pInput:
  3096                           	opt stack 0
  3097                           
  3098                           ; 2 bytes @ 0xF
  3099  000010                     	ds	2
  3100  000012                     i2Port_SetPin@pPin:
  3101                           	opt stack 0
  3102                           
  3103                           ; 1 bytes @ 0x11
  3104  000012                     	ds	1
  3105  000013                     i2Port_SetPin@pValue:
  3106                           	opt stack 0
  3107                           
  3108                           ; 1 bytes @ 0x12
  3109  000013                     	ds	1
  3110  000014                     i2Port_SetPin@Type:
  3111                           	opt stack 0
  3112                           
  3113                           ; 1 bytes @ 0x13
  3114  000014                     	ds	1
  3115  000015                     
  3116                           ; 1 bytes @ 0x14
  3117  000015                     	ds	2
  3118  000017                     ??_ISR_Function:
  3119                           
  3120                           ; 1 bytes @ 0x16
  3121  000017                     	ds	18
  3122                           tblptru	equ	0xFF8
  3123                           tblptrh	equ	0xFF7
  3124                           tblptrl	equ	0xFF6
  3125                           tablat	equ	0xFF5
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           postdec1	equ	0xFE5
  3129                           fsr1h	equ	0xFE2
  3130                           fsr1l	equ	0xFE1
  3131                           
  3132 ;;
  3133 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  3134 ;;
  3135 ;; *************** function _main *****************
  3136 ;; Defined at:
  3137 ;;		line 438 in file "main.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  Target_Dista    2  132[BANK0 ] int 
  3142 ;;  up              1  131[BANK0 ] unsigned char 
  3143 ;;  left            1  130[BANK0 ] unsigned char 
  3144 ;;  right           1  129[BANK0 ] unsigned char 
  3145 ;;  down            1  128[BANK0 ] unsigned char 
  3146 ;; Return value:  Size  Location     Type
  3147 ;;                  1    wreg      void 
  3148 ;; Registers used:
  3149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3150 ;; Tracked objects:
  3151 ;;		On entry : 0/0
  3152 ;;		On exit  : 0/0
  3153 ;;		Unchanged: 0/0
  3154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3156 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;Total ram usage:       11 bytes
  3160 ;; Hardware stack levels required when called:   17
  3161 ;; This function calls:
  3162 ;;		_ADCAverage
  3163 ;;		_BangBang
  3164 ;;		_Closest_Object
  3165 ;;		_Closest_Object2
  3166 ;;		_Console_Init
  3167 ;;		_Console_Render
  3168 ;;		_Drive
  3169 ;;		_FunctInitButton
  3170 ;;		_Get_Sensor_State
  3171 ;;		_HMI_DIPSwitch
  3172 ;;		_HMI_DownSwitch
  3173 ;;		_HMI_Init
  3174 ;;		_HMI_LeftSwitch
  3175 ;;		_HMI_Poll
  3176 ;;		_HMI_Render
  3177 ;;		_HMI_RightSwitch
  3178 ;;		_HMI_SetNumber
  3179 ;;		_HMI_UpSwitch
  3180 ;;		_ISR_Enable
  3181 ;;		_InitADC
  3182 ;;		_InitSerialCommunication
  3183 ;;		_Init_Timer0
  3184 ;;		_LCD_Init
  3185 ;;		_LEDToggle
  3186 ;;		_LED_Init
  3187 ;;		_LED_Set
  3188 ;;		_MXK_BlockSwitchTo
  3189 ;;		_MXK_DIPSwitch
  3190 ;;		_MXK_Dequeue
  3191 ;;		_MXK_Init
  3192 ;;		_MXK_Release
  3193 ;;		_MXK_TestButton
  3194 ;;		_Reset_variables
  3195 ;;		_Robot_Init
  3196 ;;		_Robot_Stop
  3197 ;;		_Sensor_Observe
  3198 ;;		_Sensor_Observe2
  3199 ;;		_Turn
  3200 ;;		_UpdateDistance
  3201 ;;		_delay_ms
  3202 ;;		_printf
  3203 ;; This function is called by:
  3204 ;;		Startup code after reset
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           	psect	text0
  3209  010000                     __ptext0:
  3210                           	opt stack 0
  3211  010000                     _main:
  3212                           	opt stack 14
  3213                           
  3214                           ;main.c: 440: MXK_Init();
  3215                           
  3216                           ;incstack = 0
  3217  010000  EC98  F099         	call	_MXK_Init	;wreg free
  3218                           
  3219                           ;main.c: 441: Init_Timer0();
  3220  010004  EC56  F0AF         	call	_Init_Timer0	;wreg free
  3221                           
  3222                           ;main.c: 442: InitSerialCommunication();
  3223  010008  ECD3  F0AE         	call	_InitSerialCommunication	;wreg free
  3224                           
  3225                           ;main.c: 443: Robot_Init();
  3226  01000C  EC91  F0AF         	call	_Robot_Init	;wreg free
  3227                           
  3228                           ;main.c: 444: ISR_Enable();
  3229  010010  EC29  F0B0         	call	_ISR_Enable	;wreg free
  3230                           
  3231                           ;main.c: 445: FunctInitButton();
  3232  010014  ECFC  F0A5         	call	_FunctInitButton	;wreg free
  3233                           
  3234                           ;main.c: 446: InitADC();
  3235  010018  EC68  F0AA         	call	_InitADC	;wreg free
  3236                           
  3237                           ;main.c: 447: LED_Init(eLED2);
  3238  01001C  0E01               	movlw	1
  3239  01001E  ECCF  F0A8         	call	_LED_Init
  3240                           
  3241                           ;main.c: 449: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3242  010022  0E01               	movlw	1
  3243  010024  ECC2  F0AC         	call	_MXK_BlockSwitchTo
  3244  010028  0900               	iorlw	0
  3245  01002A  B4D8               	btfsc	status,2,c
  3246  01002C  D00C               	goto	l2239
  3247                           
  3248                           ;main.c: 450: HMI_Init();
  3249  01002E  EC19  F094         	call	_HMI_Init	;wreg free
  3250                           
  3251                           ;main.c: 451: LCD_Init();
  3252  010032  EC51  F098         	call	_LCD_Init	;wreg free
  3253                           
  3254                           ;main.c: 452: Console_Init();
  3255  010036  EC15  F0A7         	call	_Console_Init	;wreg free
  3256                           
  3257                           ;main.c: 453: if (MXK_Release())
  3258  01003A  EC32  F0AF         	call	_MXK_Release	;wreg free
  3259  01003E  0900               	iorlw	0
  3260  010040  A4D8               	btfss	status,2,c
  3261                           
  3262                           ;main.c: 454: MXK_Dequeue();
  3263  010042  EC14  F0AD         	call	_MXK_Dequeue	;wreg free
  3264  010046                     l2239:
  3265                           
  3266                           ;main.c: 459: LEDToggle();
  3267                           
  3268                           ;main.c: 455: }
  3269                           ;main.c: 457: for(;;) {
  3270  010046  EC0F  F0AC         	call	_LEDToggle	;wreg free
  3271                           
  3272                           ;main.c: 460: ADCAverage();
  3273  01004A  ECE1  F088         	call	_ADCAverage	;wreg free
  3274                           
  3275                           ;main.c: 462: HMI_SetNumber(average);
  3276  01004E  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  3277  010052  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3278  010056  EC80  F0AE         	call	_HMI_SetNumber	;wreg free
  3279                           
  3280                           ;main.c: 463: HMI_Render();
  3281  01005A  ECDE  F0AC         	call	_HMI_Render	;wreg free
  3282                           
  3283                           ;main.c: 464: HMI_Poll();
  3284  01005E  ECE6  F0A7         	call	_HMI_Poll	;wreg free
  3285                           
  3286                           ;main.c: 466: bool down = HMIBoard.mDown.mGetState();
  3287  010062  EE21  F075         	lfsr	2,_HMIBoard+45
  3288  010066  D801               	call	u14218
  3289  010068  D00A               	goto	u14219
  3290  01006A                     u14218:
  3291  01006A  0005               	push	
  3292  01006C  6EFA               	movwf	pclath,c
  3293  01006E  50DE               	movf	postinc2,w,c
  3294  010070  6EFD               	movwf	tosl,c
  3295  010072  50DE               	movf	postinc2,w,c
  3296  010074  6EFE               	movwf	tosh,c
  3297  010076  50DE               	movf	postinc2,w,c
  3298  010078  6EFF               	movwf	tosu,c
  3299  01007A  50FA               	movf	pclath,w,c
  3300  01007C  0012               	return		;indir
  3301  01007E                     u14219:
  3302  01007E  0100               	movlb	0	; () banked
  3303  010080  6FE0               	movwf	main@down& (0+255),b
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;main.c: 467: bool right = HMIBoard.mRight.mGetState();
  3307  010082  EE21  F057         	lfsr	2,_HMIBoard+15
  3308  010086  D801               	call	u14228
  3309  010088  D00A               	goto	u14229
  3310  01008A                     u14228:
  3311  01008A  0005               	push	
  3312  01008C  6EFA               	movwf	pclath,c
  3313  01008E  50DE               	movf	postinc2,w,c
  3314  010090  6EFD               	movwf	tosl,c
  3315  010092  50DE               	movf	postinc2,w,c
  3316  010094  6EFE               	movwf	tosh,c
  3317  010096  50DE               	movf	postinc2,w,c
  3318  010098  6EFF               	movwf	tosu,c
  3319  01009A  50FA               	movf	pclath,w,c
  3320  01009C  0012               	return		;indir
  3321  01009E                     u14229:
  3322  01009E  0100               	movlb	0	; () banked
  3323  0100A0  6FE1               	movwf	main@right& (0+255),b
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 468: bool up = HMIBoard.mUp.mGetState();
  3327  0100A2  EE21  F06B         	lfsr	2,_HMIBoard+35
  3328  0100A6  D801               	call	u14238
  3329  0100A8  D00A               	goto	u14239
  3330  0100AA                     u14238:
  3331  0100AA  0005               	push	
  3332  0100AC  6EFA               	movwf	pclath,c
  3333  0100AE  50DE               	movf	postinc2,w,c
  3334  0100B0  6EFD               	movwf	tosl,c
  3335  0100B2  50DE               	movf	postinc2,w,c
  3336  0100B4  6EFE               	movwf	tosh,c
  3337  0100B6  50DE               	movf	postinc2,w,c
  3338  0100B8  6EFF               	movwf	tosu,c
  3339  0100BA  50FA               	movf	pclath,w,c
  3340  0100BC  0012               	return		;indir
  3341  0100BE                     u14239:
  3342  0100BE  0100               	movlb	0	; () banked
  3343  0100C0  6FE3               	movwf	main@up& (0+255),b
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;main.c: 469: bool left = HMIBoard.mLeft.mGetState();
  3347  0100C2  EE21  F061         	lfsr	2,_HMIBoard+25
  3348  0100C6  D801               	call	u14248
  3349  0100C8  D00A               	goto	u14249
  3350  0100CA                     u14248:
  3351  0100CA  0005               	push	
  3352  0100CC  6EFA               	movwf	pclath,c
  3353  0100CE  50DE               	movf	postinc2,w,c
  3354  0100D0  6EFD               	movwf	tosl,c
  3355  0100D2  50DE               	movf	postinc2,w,c
  3356  0100D4  6EFE               	movwf	tosh,c
  3357  0100D6  50DE               	movf	postinc2,w,c
  3358  0100D8  6EFF               	movwf	tosu,c
  3359  0100DA  50FA               	movf	pclath,w,c
  3360  0100DC  0012               	return		;indir
  3361  0100DE                     u14249:
  3362  0100DE  0100               	movlb	0	; () banked
  3363  0100E0  6FE2               	movwf	main@left& (0+255),b
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;main.c: 471: if (down) {
  3367  0100E2  51E0               	movf	main@down& (0+255),w,b
  3368  0100E4  B4D8               	btfsc	status,2,c
  3369  0100E6  D004               	goto	l2241
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 472: mode = 3;
  3373  0100E8  0E00               	movlw	0
  3374  0100EA  6E32               	movwf	_mode+1,c
  3375  0100EC  0E03               	movlw	3
  3376  0100EE  6E31               	movwf	_mode,c
  3377  0100F0                     l2241:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;main.c: 473: }
  3381                           ;main.c: 474: if (right) {
  3382  0100F0  51E1               	movf	main@right& (0+255),w,b
  3383  0100F2  B4D8               	btfsc	status,2,c
  3384  0100F4  D004               	goto	l2242
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;main.c: 475: mode = 1;
  3388  0100F6  0E00               	movlw	0
  3389  0100F8  6E32               	movwf	_mode+1,c
  3390  0100FA  0E01               	movlw	1
  3391  0100FC  6E31               	movwf	_mode,c
  3392  0100FE                     l2242:
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;main.c: 476: }
  3396                           ;main.c: 477: if (up) {
  3397  0100FE  51E3               	movf	main@up& (0+255),w,b
  3398  010100  B4D8               	btfsc	status,2,c
  3399  010102  D004               	goto	l2243
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;main.c: 478: mode = 2;
  3403  010104  0E00               	movlw	0
  3404  010106  6E32               	movwf	_mode+1,c
  3405  010108  0E02               	movlw	2
  3406  01010A  6E31               	movwf	_mode,c
  3407  01010C                     l2243:
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;main.c: 479: }
  3411                           ;main.c: 480: if (left) {
  3412  01010C  51E2               	movf	main@left& (0+255),w,b
  3413  01010E  B4D8               	btfsc	status,2,c
  3414  010110  D004               	goto	l2244
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 481: mode = 4;
  3418  010112  0E00               	movlw	0
  3419  010114  6E32               	movwf	_mode+1,c
  3420  010116  0E04               	movlw	4
  3421  010118  6E31               	movwf	_mode,c
  3422  01011A                     l2244:
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;main.c: 482: }
  3426                           ;main.c: 487: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3427                           
  3428                           ; BSR set to: 0
  3429  01011A  0E01               	movlw	1
  3430  01011C  ECC2  F0AC         	call	_MXK_BlockSwitchTo
  3431  010120  0900               	iorlw	0
  3432  010122  B4D8               	btfsc	status,2,c
  3433  010124  D790               	goto	l2239
  3434                           
  3435                           ;main.c: 489: if (mode == 0) {
  3436  010126  5031               	movf	_mode,w,c
  3437  010128  1032               	iorwf	_mode+1,w,c
  3438  01012A  A4D8               	btfss	status,2,c
  3439  01012C  D057               	goto	l2246
  3440                           
  3441                           ;main.c: 490: LED_Set(eLED2, 0);
  3442  01012E  0E00               	movlw	0
  3443  010130  0100               	movlb	0	; () banked
  3444  010132  6F74               	movwf	LED_Set@pValue& (0+255),b
  3445  010134  0E01               	movlw	1
  3446  010136  ECFE  F0AA         	call	_LED_Set
  3447                           
  3448                           ;main.c: 491: Robot_Stop();
  3449  01013A  EC93  F0AE         	call	_Robot_Stop	;wreg free
  3450                           
  3451                           ;main.c: 492: Reset_variables();
  3452  01013E  EC42  F0AA         	call	_Reset_variables	;wreg free
  3453                           
  3454                           ;main.c: 494: printf("%c", (char)35);
  3455  010142  0EFC               	movlw	low STR_1
  3456  010144  0100               	movlb	0	; () banked
  3457  010146  6F75               	movwf	printf@f& (0+255),b
  3458  010148  0EFF               	movlw	high STR_1
  3459  01014A  6F76               	movwf	(printf@f+1)& (0+255),b
  3460  01014C  0E00               	movlw	0
  3461  01014E  6F78               	movwf	(?_printf+3)& (0+255),b
  3462  010150  0E23               	movlw	35
  3463  010152  6F77               	movwf	(?_printf+2)& (0+255),b
  3464  010154  EC4B  F096         	call	_printf	;wreg free
  3465                           
  3466                           ;main.c: 495: printf("Robot Ready! \n");
  3467  010158  0ED6               	movlw	low STR_31
  3468  01015A  0100               	movlb	0	; () banked
  3469  01015C  6F75               	movwf	printf@f& (0+255),b
  3470  01015E  0EFF               	movlw	high STR_31
  3471  010160  6F76               	movwf	(printf@f+1)& (0+255),b
  3472  010162  EC4B  F096         	call	_printf	;wreg free
  3473                           
  3474                           ;main.c: 496: printf("Press right for 5m\n drive,\n");
  3475  010166  0EB7               	movlw	low STR_32
  3476  010168  0100               	movlb	0	; () banked
  3477  01016A  6F75               	movwf	printf@f& (0+255),b
  3478  01016C  0EFE               	movlw	high STR_32
  3479  01016E  6F76               	movwf	(printf@f+1)& (0+255),b
  3480  010170  EC4B  F096         	call	_printf	;wreg free
  3481                           
  3482                           ;main.c: 497: printf("Press down for\nsquare drive,\n");
  3483  010174  0E7D               	movlw	low STR_33
  3484  010176  0100               	movlb	0	; () banked
  3485  010178  6F75               	movwf	printf@f& (0+255),b
  3486  01017A  0EFE               	movlw	high STR_33
  3487  01017C  6F76               	movwf	(printf@f+1)& (0+255),b
  3488  01017E  EC4B  F096         	call	_printf	;wreg free
  3489                           
  3490                           ;main.c: 498: printf("Press up for IR scan mode,\n");
  3491  010182  0E9B               	movlw	low STR_34
  3492  010184  0100               	movlb	0	; () banked
  3493  010186  6F75               	movwf	printf@f& (0+255),b
  3494  010188  0EFE               	movlw	high STR_34
  3495  01018A  6F76               	movwf	(printf@f+1)& (0+255),b
  3496  01018C  EC4B  F096         	call	_printf	;wreg free
  3497                           
  3498                           ;main.c: 499: printf("Press left for wall follow\n");
  3499  010190  0EEF               	movlw	low STR_35
  3500  010192  0100               	movlb	0	; () banked
  3501  010194  6F75               	movwf	printf@f& (0+255),b
  3502  010196  0EFE               	movlw	high STR_35
  3503  010198  6F76               	movwf	(printf@f+1)& (0+255),b
  3504  01019A  EC4B  F096         	call	_printf	;wreg free
  3505                           
  3506                           ;main.c: 501: printf("                 \n");
  3507  01019E  0E7D               	movlw	low STR_2
  3508  0101A0  0100               	movlb	0	; () banked
  3509  0101A2  6F75               	movwf	printf@f& (0+255),b
  3510  0101A4  0EFF               	movlw	high STR_2
  3511  0101A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3512  0101A8  EC4B  F096         	call	_printf	;wreg free
  3513                           
  3514                           ;main.c: 502: printf("                 \n");
  3515  0101AC  0E7D               	movlw	low STR_2
  3516  0101AE  0100               	movlb	0	; () banked
  3517  0101B0  6F75               	movwf	printf@f& (0+255),b
  3518  0101B2  0EFF               	movlw	high STR_2
  3519  0101B4  6F76               	movwf	(printf@f+1)& (0+255),b
  3520  0101B6  EC4B  F096         	call	_printf	;wreg free
  3521                           
  3522                           ;main.c: 503: printf("                 \n");
  3523  0101BA  0E7D               	movlw	low STR_2
  3524  0101BC  0100               	movlb	0	; () banked
  3525  0101BE  6F75               	movwf	printf@f& (0+255),b
  3526  0101C0  0EFF               	movlw	high STR_2
  3527  0101C2  6F76               	movwf	(printf@f+1)& (0+255),b
  3528  0101C4  EC4B  F096         	call	_printf	;wreg free
  3529                           
  3530                           ;main.c: 504: printf("                 \n");
  3531  0101C8  0E7D               	movlw	low STR_2
  3532  0101CA  0100               	movlb	0	; () banked
  3533  0101CC  6F75               	movwf	printf@f& (0+255),b
  3534  0101CE  0EFF               	movlw	high STR_2
  3535  0101D0  6F76               	movwf	(printf@f+1)& (0+255),b
  3536  0101D2  EC4B  F096         	call	_printf	;wreg free
  3537                           
  3538                           ;main.c: 505: Console_Render();
  3539  0101D6  EC6F  F092         	call	_Console_Render	;wreg free
  3540                           
  3541                           ;main.c: 506: }
  3542  0101DA  D2CF               	goto	l2257
  3543  0101DC                     l2246:
  3544                           
  3545                           ;main.c: 507: else if (mode == 1) {
  3546  0101DC  0431               	decf	_mode,w,c
  3547  0101DE  1032               	iorwf	_mode+1,w,c
  3548  0101E0  A4D8               	btfss	status,2,c
  3549  0101E2  D06E               	goto	l2248
  3550                           
  3551                           ;main.c: 508: LED_Set(eLED2, 1);
  3552  0101E4  0E01               	movlw	1
  3553  0101E6  0100               	movlb	0	; () banked
  3554  0101E8  6F74               	movwf	LED_Set@pValue& (0+255),b
  3555  0101EA  0E01               	movlw	1
  3556  0101EC  ECFE  F0AA         	call	_LED_Set
  3557                           
  3558                           ;main.c: 509: Drive(200);
  3559  0101F0  0E00               	movlw	0
  3560  0101F2  0100               	movlb	0	; () banked
  3561  0101F4  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3562  0101F6  0EC8               	movlw	200
  3563  0101F8  6F61               	movwf	Drive@Speed& (0+255),b
  3564  0101FA  EC61  F0AD         	call	_Drive	;wreg free
  3565                           
  3566                           ;main.c: 510: T_VAR += UpdateDistance();
  3567  0101FE  ECF1  F0AD         	call	_UpdateDistance	;wreg free
  3568  010202  0100               	movlb	0	; () banked
  3569  010204  5161               	movf	?_UpdateDistance& (0+255),w,b
  3570  010206  262F               	addwf	_T_VAR,f,c
  3571  010208  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3572  01020A  2230               	addwfc	_T_VAR+1,f,c
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;main.c: 511: printf("%c", (char)35);
  3576  01020C  0EFC               	movlw	low STR_1
  3577  01020E  6F75               	movwf	printf@f& (0+255),b
  3578  010210  0EFF               	movlw	high STR_1
  3579  010212  6F76               	movwf	(printf@f+1)& (0+255),b
  3580  010214  0E00               	movlw	0
  3581  010216  6F78               	movwf	(?_printf+3)& (0+255),b
  3582  010218  0E23               	movlw	35
  3583  01021A  6F77               	movwf	(?_printf+2)& (0+255),b
  3584  01021C  EC4B  F096         	call	_printf	;wreg free
  3585                           
  3586                           ;main.c: 512: printf("Traveled Distance:\n%d", T_VAR);
  3587  010220  0E3E               	movlw	low STR_41
  3588  010222  0100               	movlb	0	; () banked
  3589  010224  6F75               	movwf	printf@f& (0+255),b
  3590  010226  0EFF               	movlw	high STR_41
  3591  010228  6F76               	movwf	(printf@f+1)& (0+255),b
  3592  01022A  C02F  F077         	movff	_T_VAR,?_printf+2
  3593  01022E  C030  F078         	movff	_T_VAR+1,?_printf+3
  3594  010232  EC4B  F096         	call	_printf	;wreg free
  3595                           
  3596                           ;main.c: 513: printf("                 \n");
  3597  010236  0E7D               	movlw	low STR_2
  3598  010238  0100               	movlb	0	; () banked
  3599  01023A  6F75               	movwf	printf@f& (0+255),b
  3600  01023C  0EFF               	movlw	high STR_2
  3601  01023E  6F76               	movwf	(printf@f+1)& (0+255),b
  3602  010240  EC4B  F096         	call	_printf	;wreg free
  3603                           
  3604                           ;main.c: 514: printf("                 \n");
  3605  010244  0E7D               	movlw	low STR_2
  3606  010246  0100               	movlb	0	; () banked
  3607  010248  6F75               	movwf	printf@f& (0+255),b
  3608  01024A  0EFF               	movlw	high STR_2
  3609  01024C  6F76               	movwf	(printf@f+1)& (0+255),b
  3610  01024E  EC4B  F096         	call	_printf	;wreg free
  3611                           
  3612                           ;main.c: 515: printf("                 \n");
  3613  010252  0E7D               	movlw	low STR_2
  3614  010254  0100               	movlb	0	; () banked
  3615  010256  6F75               	movwf	printf@f& (0+255),b
  3616  010258  0EFF               	movlw	high STR_2
  3617  01025A  6F76               	movwf	(printf@f+1)& (0+255),b
  3618  01025C  EC4B  F096         	call	_printf	;wreg free
  3619                           
  3620                           ;main.c: 516: printf("                 \n");
  3621  010260  0E7D               	movlw	low STR_2
  3622  010262  0100               	movlb	0	; () banked
  3623  010264  6F75               	movwf	printf@f& (0+255),b
  3624  010266  0EFF               	movlw	high STR_2
  3625  010268  6F76               	movwf	(printf@f+1)& (0+255),b
  3626  01026A  EC4B  F096         	call	_printf	;wreg free
  3627                           
  3628                           ;main.c: 517: printf("                 \n");
  3629  01026E  0E7D               	movlw	low STR_2
  3630  010270  0100               	movlb	0	; () banked
  3631  010272  6F75               	movwf	printf@f& (0+255),b
  3632  010274  0EFF               	movlw	high STR_2
  3633  010276  6F76               	movwf	(printf@f+1)& (0+255),b
  3634  010278  EC4B  F096         	call	_printf	;wreg free
  3635                           
  3636                           ;main.c: 518: printf("                 \n");
  3637  01027C  0E7D               	movlw	low STR_2
  3638  01027E  0100               	movlb	0	; () banked
  3639  010280  6F75               	movwf	printf@f& (0+255),b
  3640  010282  0EFF               	movlw	high STR_2
  3641  010284  6F76               	movwf	(printf@f+1)& (0+255),b
  3642  010286  EC4B  F096         	call	_printf	;wreg free
  3643                           
  3644                           ;main.c: 519: printf("                 \n");
  3645  01028A  0E7D               	movlw	low STR_2
  3646  01028C  0100               	movlb	0	; () banked
  3647  01028E  6F75               	movwf	printf@f& (0+255),b
  3648  010290  0EFF               	movlw	high STR_2
  3649  010292  6F76               	movwf	(printf@f+1)& (0+255),b
  3650  010294  EC4B  F096         	call	_printf	;wreg free
  3651                           
  3652                           ;main.c: 520: printf("                 \n");
  3653  010298  0E7D               	movlw	low STR_2
  3654  01029A  0100               	movlb	0	; () banked
  3655  01029C  6F75               	movwf	printf@f& (0+255),b
  3656  01029E  0EFF               	movlw	high STR_2
  3657  0102A0  6F76               	movwf	(printf@f+1)& (0+255),b
  3658  0102A2  EC4B  F096         	call	_printf	;wreg free
  3659                           
  3660                           ;main.c: 521: Console_Render();
  3661  0102A6  EC6F  F092         	call	_Console_Render	;wreg free
  3662                           
  3663                           ;main.c: 522: if (T_VAR >= 5000) {
  3664  0102AA  BE30               	btfsc	_T_VAR+1,7,c
  3665  0102AC  D266               	goto	l2257
  3666  0102AE  0E88               	movlw	136
  3667  0102B0  5C2F               	subwf	_T_VAR,w,c
  3668  0102B2  0E13               	movlw	19
  3669  0102B4  5830               	subwfb	_T_VAR+1,w,c
  3670  0102B6  A0D8               	btfss	status,0,c
  3671  0102B8  D260               	goto	l2257
  3672                           
  3673                           ;main.c: 523: Robot_Stop();
  3674  0102BA  EC93  F0AE         	call	_Robot_Stop	;wreg free
  3675  0102BE  D259               	goto	u14500
  3676  0102C0                     l2248:
  3677                           
  3678                           ;main.c: 527: else if (mode == 2) {
  3679  0102C0  0E02               	movlw	2
  3680  0102C2  1831               	xorwf	_mode,w,c
  3681  0102C4  1032               	iorwf	_mode+1,w,c
  3682  0102C6  A4D8               	btfss	status,2,c
  3683  0102C8  D012               	goto	l2251
  3684                           
  3685                           ;main.c: 528: LED_Set(eLED2, 1);
  3686  0102CA  0E01               	movlw	1
  3687  0102CC  0100               	movlb	0	; () banked
  3688  0102CE  6F74               	movwf	LED_Set@pValue& (0+255),b
  3689  0102D0  0E01               	movlw	1
  3690  0102D2  ECFE  F0AA         	call	_LED_Set
  3691                           
  3692                           ;main.c: 529: Sensor_Observe();
  3693  0102D6  ECFB  F09C         	call	_Sensor_Observe	;wreg free
  3694                           
  3695                           ;main.c: 531: Closest_Object();
  3696  0102DA  EC6F  F0A0         	call	_Closest_Object	;wreg free
  3697                           
  3698                           ;main.c: 532: delay_ms(2000);
  3699  0102DE  0E07               	movlw	7
  3700  0102E0  0100               	movlb	0	; () banked
  3701  0102E2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3702  0102E4  0ED0               	movlw	208
  3703  0102E6  6F60               	movwf	delay_ms@ms& (0+255),b
  3704  0102E8  EC75  F0A8         	call	_delay_ms	;wreg free
  3705  0102EC  D242               	goto	u14500
  3706  0102EE                     l2251:
  3707                           
  3708                           ;main.c: 535: else if (mode == 3) {
  3709  0102EE  0E03               	movlw	3
  3710  0102F0  1831               	xorwf	_mode,w,c
  3711  0102F2  1032               	iorwf	_mode+1,w,c
  3712  0102F4  A4D8               	btfss	status,2,c
  3713  0102F6  D0A1               	goto	l2253
  3714                           
  3715                           ;main.c: 536: Drive(250);
  3716  0102F8  0E00               	movlw	0
  3717  0102FA  0100               	movlb	0	; () banked
  3718  0102FC  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3719  0102FE  0EFA               	movlw	250
  3720  010300  6F61               	movwf	Drive@Speed& (0+255),b
  3721  010302  EC61  F0AD         	call	_Drive	;wreg free
  3722                           
  3723                           ;main.c: 537: LED_Set(eLED2, 1);
  3724  010306  0E01               	movlw	1
  3725  010308  0100               	movlb	0	; () banked
  3726  01030A  6F74               	movwf	LED_Set@pValue& (0+255),b
  3727  01030C  0E01               	movlw	1
  3728  01030E  ECFE  F0AA         	call	_LED_Set
  3729                           
  3730                           ;main.c: 538: T_VAR += UpdateDistance();
  3731  010312  ECF1  F0AD         	call	_UpdateDistance	;wreg free
  3732  010316  0100               	movlb	0	; () banked
  3733  010318  5161               	movf	?_UpdateDistance& (0+255),w,b
  3734  01031A  262F               	addwf	_T_VAR,f,c
  3735  01031C  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3736  01031E  2230               	addwfc	_T_VAR+1,f,c
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;main.c: 540: Square_Dist = T_VAR + mod;
  3740  010320  0101               	movlb	1	; () banked
  3741  010322  5132               	movf	_mod& (0+255),w,b
  3742  010324  242F               	addwf	_T_VAR,w,c
  3743  010326  6F34               	movwf	_Square_Dist& (0+255),b
  3744  010328  5133               	movf	(_mod+1)& (0+255),w,b
  3745  01032A  2030               	addwfc	_T_VAR+1,w,c
  3746  01032C  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  3747                           
  3748                           ; BSR set to: 1
  3749                           ;main.c: 541: printf("%c", (char)35);
  3750  01032E  0EFC               	movlw	low STR_1
  3751  010330  0100               	movlb	0	; () banked
  3752  010332  6F75               	movwf	printf@f& (0+255),b
  3753  010334  0EFF               	movlw	high STR_1
  3754  010336  6F76               	movwf	(printf@f+1)& (0+255),b
  3755  010338  0E00               	movlw	0
  3756  01033A  6F78               	movwf	(?_printf+3)& (0+255),b
  3757  01033C  0E23               	movlw	35
  3758  01033E  6F77               	movwf	(?_printf+2)& (0+255),b
  3759  010340  EC4B  F096         	call	_printf	;wreg free
  3760                           
  3761                           ;main.c: 542: printf("SQUARE DRIVE MODE 3! \n");
  3762  010344  0E27               	movlw	low STR_51
  3763  010346  0100               	movlb	0	; () banked
  3764  010348  6F75               	movwf	printf@f& (0+255),b
  3765  01034A  0EFF               	movlw	high STR_51
  3766  01034C  6F76               	movwf	(printf@f+1)& (0+255),b
  3767  01034E  EC4B  F096         	call	_printf	;wreg free
  3768                           
  3769                           ;main.c: 543: printf("Total: %d\n", Square_Dist);
  3770  010352  0EF1               	movlw	low STR_52
  3771  010354  0100               	movlb	0	; () banked
  3772  010356  6F75               	movwf	printf@f& (0+255),b
  3773  010358  0EFF               	movlw	high STR_52
  3774  01035A  6F76               	movwf	(printf@f+1)& (0+255),b
  3775  01035C  C134  F077         	movff	_Square_Dist,?_printf+2
  3776  010360  C135  F078         	movff	_Square_Dist+1,?_printf+3
  3777  010364  EC4B  F096         	call	_printf	;wreg free
  3778                           
  3779                           ;main.c: 544: printf("                 \n");
  3780  010368  0E7D               	movlw	low STR_2
  3781  01036A  0100               	movlb	0	; () banked
  3782  01036C  6F75               	movwf	printf@f& (0+255),b
  3783  01036E  0EFF               	movlw	high STR_2
  3784  010370  6F76               	movwf	(printf@f+1)& (0+255),b
  3785  010372  EC4B  F096         	call	_printf	;wreg free
  3786                           
  3787                           ;main.c: 545: printf("                 \n");
  3788  010376  0E7D               	movlw	low STR_2
  3789  010378  0100               	movlb	0	; () banked
  3790  01037A  6F75               	movwf	printf@f& (0+255),b
  3791  01037C  0EFF               	movlw	high STR_2
  3792  01037E  6F76               	movwf	(printf@f+1)& (0+255),b
  3793  010380  EC4B  F096         	call	_printf	;wreg free
  3794                           
  3795                           ;main.c: 546: printf("                 \n");
  3796  010384  0E7D               	movlw	low STR_2
  3797  010386  0100               	movlb	0	; () banked
  3798  010388  6F75               	movwf	printf@f& (0+255),b
  3799  01038A  0EFF               	movlw	high STR_2
  3800  01038C  6F76               	movwf	(printf@f+1)& (0+255),b
  3801  01038E  EC4B  F096         	call	_printf	;wreg free
  3802                           
  3803                           ;main.c: 547: printf("                 \n");
  3804  010392  0E7D               	movlw	low STR_2
  3805  010394  0100               	movlb	0	; () banked
  3806  010396  6F75               	movwf	printf@f& (0+255),b
  3807  010398  0EFF               	movlw	high STR_2
  3808  01039A  6F76               	movwf	(printf@f+1)& (0+255),b
  3809  01039C  EC4B  F096         	call	_printf	;wreg free
  3810                           
  3811                           ;main.c: 548: printf("                 \n");
  3812  0103A0  0E7D               	movlw	low STR_2
  3813  0103A2  0100               	movlb	0	; () banked
  3814  0103A4  6F75               	movwf	printf@f& (0+255),b
  3815  0103A6  0EFF               	movlw	high STR_2
  3816  0103A8  6F76               	movwf	(printf@f+1)& (0+255),b
  3817  0103AA  EC4B  F096         	call	_printf	;wreg free
  3818                           
  3819                           ;main.c: 549: printf("                 \n");
  3820  0103AE  0E7D               	movlw	low STR_2
  3821  0103B0  0100               	movlb	0	; () banked
  3822  0103B2  6F75               	movwf	printf@f& (0+255),b
  3823  0103B4  0EFF               	movlw	high STR_2
  3824  0103B6  6F76               	movwf	(printf@f+1)& (0+255),b
  3825  0103B8  EC4B  F096         	call	_printf	;wreg free
  3826                           
  3827                           ;main.c: 550: printf("                 \n");
  3828  0103BC  0E7D               	movlw	low STR_2
  3829  0103BE  0100               	movlb	0	; () banked
  3830  0103C0  6F75               	movwf	printf@f& (0+255),b
  3831  0103C2  0EFF               	movlw	high STR_2
  3832  0103C4  6F76               	movwf	(printf@f+1)& (0+255),b
  3833  0103C6  EC4B  F096         	call	_printf	;wreg free
  3834                           
  3835                           ;main.c: 551: printf("                 \n");
  3836  0103CA  0E7D               	movlw	low STR_2
  3837  0103CC  0100               	movlb	0	; () banked
  3838  0103CE  6F75               	movwf	printf@f& (0+255),b
  3839  0103D0  0EFF               	movlw	high STR_2
  3840  0103D2  6F76               	movwf	(printf@f+1)& (0+255),b
  3841  0103D4  EC4B  F096         	call	_printf	;wreg free
  3842                           
  3843                           ;main.c: 552: Console_Render();
  3844  0103D8  EC6F  F092         	call	_Console_Render	;wreg free
  3845                           
  3846                           ;main.c: 554: if (T_VAR >= 1000) {
  3847  0103DC  BE30               	btfsc	_T_VAR+1,7,c
  3848  0103DE  D01A               	goto	l2254
  3849  0103E0  0EE8               	movlw	232
  3850  0103E2  5C2F               	subwf	_T_VAR,w,c
  3851  0103E4  0E03               	movlw	3
  3852  0103E6  5830               	subwfb	_T_VAR+1,w,c
  3853  0103E8  A0D8               	btfss	status,0,c
  3854  0103EA  D014               	goto	l2254
  3855                           
  3856                           ;main.c: 555: Turn(82, 100);
  3857  0103EC  0E00               	movlw	0
  3858  0103EE  0100               	movlb	0	; () banked
  3859  0103F0  6F62               	movwf	(Turn@Angle+1)& (0+255),b
  3860  0103F2  0E52               	movlw	82
  3861  0103F4  6F61               	movwf	Turn@Angle& (0+255),b
  3862  0103F6  0E00               	movlw	0
  3863  0103F8  6F64               	movwf	(Turn@Speed+1)& (0+255),b
  3864  0103FA  0E64               	movlw	100
  3865  0103FC  6F63               	movwf	Turn@Speed& (0+255),b
  3866  0103FE  ECA3  F0A8         	call	_Turn	;wreg free
  3867                           
  3868                           ;main.c: 556: T_VAR = 0;
  3869  010402  0E00               	movlw	0
  3870  010404  6E30               	movwf	_T_VAR+1,c
  3871  010406  0E00               	movlw	0
  3872  010408  6E2F               	movwf	_T_VAR,c
  3873                           
  3874                           ;main.c: 557: mod += 1000;
  3875  01040A  0101               	movlb	1	; () banked
  3876  01040C  0EE8               	movlw	232
  3877  01040E  2732               	addwf	_mod& (0+255),f,b
  3878  010410  0E03               	movlw	3
  3879  010412  2333               	addwfc	(_mod+1)& (0+255),f,b
  3880  010414                     l2254:
  3881                           
  3882                           ;main.c: 558: }
  3883                           ;main.c: 560: if (Square_Dist >= 4000) {
  3884                           
  3885                           ; BSR set to: 1
  3886  010414  0101               	movlb	1	; () banked
  3887  010416  BF35               	btfsc	(_Square_Dist+1)& (0+255),7,b
  3888  010418  D1B0               	goto	l2257
  3889  01041A  0EA0               	movlw	160
  3890  01041C  5D34               	subwf	_Square_Dist& (0+255),w,b
  3891  01041E  0E0F               	movlw	15
  3892  010420  5935               	subwfb	(_Square_Dist+1)& (0+255),w,b
  3893  010422  A0D8               	btfss	status,0,c
  3894  010424  D1AA               	goto	l2257
  3895                           
  3896                           ; BSR set to: 1
  3897                           ;main.c: 562: Robot_Stop();
  3898  010426  EC93  F0AE         	call	_Robot_Stop	;wreg free
  3899                           
  3900                           ;main.c: 563: delay_ms(500);
  3901  01042A  0E01               	movlw	1
  3902  01042C  0100               	movlb	0	; () banked
  3903  01042E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3904  010430  0EF4               	movlw	244
  3905  010432  6F60               	movwf	delay_ms@ms& (0+255),b
  3906  010434  EC75  F0A8         	call	_delay_ms	;wreg free
  3907  010438  D19C               	goto	u14500
  3908  01043A                     l2253:
  3909  01043A  0E04               	movlw	4
  3910  01043C  1831               	xorwf	_mode,w,c
  3911  01043E  1032               	iorwf	_mode+1,w,c
  3912  010440  A4D8               	btfss	status,2,c
  3913  010442  D19B               	goto	l2257
  3914                           
  3915                           ;main.c: 568: Sensor_Observe2();
  3916  010444  EC5E  F09B         	call	_Sensor_Observe2	;wreg free
  3917                           
  3918                           ;main.c: 569: Closest_Object2();
  3919  010448  ECBF  F0A5         	call	_Closest_Object2	;wreg free
  3920                           
  3921                           ;main.c: 571: int Target_Distance = Low_Sensor;
  3922  01044C  C04A  F0E4         	movff	_Low_Sensor,main@Target_Distance
  3923  010450  C04B  F0E5         	movff	_Low_Sensor+1,main@Target_Distance+1
  3924                           
  3925                           ;main.c: 572: LED_Set(eLED2, 1);
  3926  010454  0E01               	movlw	1
  3927  010456  0100               	movlb	0	; () banked
  3928  010458  6F74               	movwf	LED_Set@pValue& (0+255),b
  3929  01045A  0E01               	movlw	1
  3930  01045C  ECFE  F0AA         	call	_LED_Set
  3931                           
  3932                           ;main.c: 573: Get_Sensor_State();
  3933  010460  EC62  F0AF         	call	_Get_Sensor_State	;wreg free
  3934                           
  3935                           ;main.c: 574: if (test > 0) {
  3936  010464  0101               	movlb	1	; () banked
  3937  010466  BF1D               	btfsc	(_test+1)& (0+255),7,b
  3938  010468  D180               	goto	l2270
  3939  01046A  511D               	movf	(_test+1)& (0+255),w,b
  3940  01046C  E103               	bnz	u14380
  3941  01046E  051C               	decf	_test& (0+255),w,b
  3942  010470  A0D8               	btfss	status,0,c
  3943  010472  D17B               	goto	l2270
  3944  010474                     u14380:
  3945                           
  3946                           ; BSR set to: 1
  3947                           ;main.c: 575: mode = 0;
  3948  010474  0E00               	movlw	0
  3949  010476  6E32               	movwf	_mode+1,c
  3950  010478  0E00               	movlw	0
  3951  01047A  6E31               	movwf	_mode,c
  3952                           
  3953                           ; BSR set to: 1
  3954                           ;main.c: 576: }
  3955                           ;main.c: 578: while (BumpSensor == 0) {
  3956  01047C  D176               	goto	l2270
  3957  01047E                     
  3958                           ;main.c: 579: ADCAverage();
  3959                           
  3960                           ; BSR set to: 1
  3961  01047E  ECE1  F088         	call	_ADCAverage	;wreg free
  3962                           
  3963                           ;main.c: 580: printf("%c", (char)35);
  3964  010482  0EFC               	movlw	low STR_1
  3965  010484  0100               	movlb	0	; () banked
  3966  010486  6F75               	movwf	printf@f& (0+255),b
  3967  010488  0EFF               	movlw	high STR_1
  3968  01048A  6F76               	movwf	(printf@f+1)& (0+255),b
  3969  01048C  0E00               	movlw	0
  3970  01048E  6F78               	movwf	(?_printf+3)& (0+255),b
  3971  010490  0E23               	movlw	35
  3972  010492  6F77               	movwf	(?_printf+2)& (0+255),b
  3973  010494  EC4B  F096         	call	_printf	;wreg free
  3974                           
  3975                           ;main.c: 581: printf("The target distance is: %d\n", Target_Distance);
  3976  010498  0ED3               	movlw	low STR_62
  3977  01049A  0100               	movlb	0	; () banked
  3978  01049C  6F75               	movwf	printf@f& (0+255),b
  3979  01049E  0EFE               	movlw	high STR_62
  3980  0104A0  6F76               	movwf	(printf@f+1)& (0+255),b
  3981  0104A2  C0E4  F077         	movff	main@Target_Distance,?_printf+2
  3982  0104A6  C0E5  F078         	movff	main@Target_Distance+1,?_printf+3
  3983  0104AA  EC4B  F096         	call	_printf	;wreg free
  3984                           
  3985                           ;main.c: 582: printf("ADC AVERAGE %d\n", average);
  3986  0104AE  0EC6               	movlw	low STR_63
  3987  0104B0  0100               	movlb	0	; () banked
  3988  0104B2  6F75               	movwf	printf@f& (0+255),b
  3989  0104B4  0EFF               	movlw	high STR_63
  3990  0104B6  6F76               	movwf	(printf@f+1)& (0+255),b
  3991  0104B8  C0E9  F077         	movff	_average,?_printf+2
  3992  0104BC  C0EA  F078         	movff	_average+1,?_printf+3
  3993  0104C0  EC4B  F096         	call	_printf	;wreg free
  3994                           
  3995                           ;main.c: 583: printf("                 \n");
  3996  0104C4  0E7D               	movlw	low STR_2
  3997  0104C6  0100               	movlb	0	; () banked
  3998  0104C8  6F75               	movwf	printf@f& (0+255),b
  3999  0104CA  0EFF               	movlw	high STR_2
  4000  0104CC  6F76               	movwf	(printf@f+1)& (0+255),b
  4001  0104CE  EC4B  F096         	call	_printf	;wreg free
  4002                           
  4003                           ;main.c: 584: printf("                 \n");
  4004  0104D2  0E7D               	movlw	low STR_2
  4005  0104D4  0100               	movlb	0	; () banked
  4006  0104D6  6F75               	movwf	printf@f& (0+255),b
  4007  0104D8  0EFF               	movlw	high STR_2
  4008  0104DA  6F76               	movwf	(printf@f+1)& (0+255),b
  4009  0104DC  EC4B  F096         	call	_printf	;wreg free
  4010                           
  4011                           ;main.c: 585: printf("                 \n");
  4012  0104E0  0E7D               	movlw	low STR_2
  4013  0104E2  0100               	movlb	0	; () banked
  4014  0104E4  6F75               	movwf	printf@f& (0+255),b
  4015  0104E6  0EFF               	movlw	high STR_2
  4016  0104E8  6F76               	movwf	(printf@f+1)& (0+255),b
  4017  0104EA  EC4B  F096         	call	_printf	;wreg free
  4018                           
  4019                           ;main.c: 586: printf("                 \n");
  4020  0104EE  0E7D               	movlw	low STR_2
  4021  0104F0  0100               	movlb	0	; () banked
  4022  0104F2  6F75               	movwf	printf@f& (0+255),b
  4023  0104F4  0EFF               	movlw	high STR_2
  4024  0104F6  6F76               	movwf	(printf@f+1)& (0+255),b
  4025  0104F8  EC4B  F096         	call	_printf	;wreg free
  4026                           
  4027                           ;main.c: 587: printf("                 \n");
  4028  0104FC  0E7D               	movlw	low STR_2
  4029  0104FE  0100               	movlb	0	; () banked
  4030  010500  6F75               	movwf	printf@f& (0+255),b
  4031  010502  0EFF               	movlw	high STR_2
  4032  010504  6F76               	movwf	(printf@f+1)& (0+255),b
  4033  010506  EC4B  F096         	call	_printf	;wreg free
  4034                           
  4035                           ;main.c: 588: printf("                 \n");
  4036  01050A  0E7D               	movlw	low STR_2
  4037  01050C  0100               	movlb	0	; () banked
  4038  01050E  6F75               	movwf	printf@f& (0+255),b
  4039  010510  0EFF               	movlw	high STR_2
  4040  010512  6F76               	movwf	(printf@f+1)& (0+255),b
  4041  010514  EC4B  F096         	call	_printf	;wreg free
  4042                           
  4043                           ;main.c: 589: printf("                 \n");
  4044  010518  0E7D               	movlw	low STR_2
  4045  01051A  0100               	movlb	0	; () banked
  4046  01051C  6F75               	movwf	printf@f& (0+255),b
  4047  01051E  0EFF               	movlw	high STR_2
  4048  010520  6F76               	movwf	(printf@f+1)& (0+255),b
  4049  010522  EC4B  F096         	call	_printf	;wreg free
  4050                           
  4051                           ;main.c: 590: printf("                 \n");
  4052  010526  0E7D               	movlw	low STR_2
  4053  010528  0100               	movlb	0	; () banked
  4054  01052A  6F75               	movwf	printf@f& (0+255),b
  4055  01052C  0EFF               	movlw	high STR_2
  4056  01052E  6F76               	movwf	(printf@f+1)& (0+255),b
  4057  010530  EC4B  F096         	call	_printf	;wreg free
  4058                           
  4059                           ;main.c: 591: Console_Render();
  4060  010534  EC6F  F092         	call	_Console_Render	;wreg free
  4061                           
  4062                           ;main.c: 592: HMI_SetNumber(average);
  4063  010538  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  4064  01053C  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  4065  010540  EC80  F0AE         	call	_HMI_SetNumber	;wreg free
  4066                           
  4067                           ;main.c: 594: HMI_Render();
  4068  010544  ECDE  F0AC         	call	_HMI_Render	;wreg free
  4069                           
  4070                           ;main.c: 596: HMI_Poll();
  4071  010548  ECE6  F0A7         	call	_HMI_Poll	;wreg free
  4072                           
  4073                           ;main.c: 597: if (Target_Distance <= average + 2 || Target_Distance >= average - 2) {
  4074  01054C  0E02               	movlw	2
  4075  01054E  0100               	movlb	0	; () banked
  4076  010550  25E9               	addwf	_average& (0+255),w,b
  4077  010552  6FDB               	movwf	??_main& (0+255),b
  4078  010554  0E00               	movlw	0
  4079  010556  21EA               	addwfc	(_average+1)& (0+255),w,b
  4080  010558  6FDC               	movwf	(??_main+1)& (0+255),b
  4081  01055A  51E4               	movf	main@Target_Distance& (0+255),w,b
  4082  01055C  5DDB               	subwf	??_main& (0+255),w,b
  4083  01055E  51DC               	movf	(??_main+1)& (0+255),w,b
  4084  010560  0A80               	xorlw	128
  4085  010562  6FDD               	movwf	(??_main+2)& (0+255),b
  4086  010564  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4087  010566  0A80               	xorlw	128
  4088  010568  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4089  01056A  B0D8               	btfsc	status,0,c
  4090  01056C  D016               	goto	u14400
  4091                           
  4092                           ; BSR set to: 0
  4093  01056E  0EFE               	movlw	254
  4094  010570  6FDB               	movwf	??_main& (0+255),b
  4095  010572  0EFF               	movlw	255
  4096  010574  6FDC               	movwf	(??_main+1)& (0+255),b
  4097  010576  C0E9  F0DD         	movff	_average,??_main+2
  4098  01057A  C0EA  F0DE         	movff	_average+1,??_main+3
  4099  01057E  51DB               	movf	??_main& (0+255),w,b
  4100  010580  27DD               	addwf	(??_main+2)& (0+255),f,b
  4101  010582  51DC               	movf	(??_main+1)& (0+255),w,b
  4102  010584  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4103  010586  51DD               	movf	(??_main+2)& (0+255),w,b
  4104  010588  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4105  01058A  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4106  01058C  0A80               	xorlw	128
  4107  01058E  6FDF               	movwf	(??_main+4)& (0+255),b
  4108  010590  51DE               	movf	(??_main+3)& (0+255),w,b
  4109  010592  0A80               	xorlw	128
  4110  010594  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4111  010596  A0D8               	btfss	status,0,c
  4112  010598  D012               	goto	l2261
  4113  01059A                     u14400:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;main.c: 598: BangBang(50, 50, 50, 50);
  4117                           
  4118                           ; BSR set to: 0
  4119  01059A  0E00               	movlw	0
  4120  01059C  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4121  01059E  0E32               	movlw	50
  4122  0105A0  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4123  0105A2  0E00               	movlw	0
  4124  0105A4  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4125  0105A6  0E32               	movlw	50
  4126  0105A8  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4127  0105AA  0E00               	movlw	0
  4128  0105AC  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4129  0105AE  0E32               	movlw	50
  4130  0105B0  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4131  0105B2  0E00               	movlw	0
  4132  0105B4  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4133  0105B6  0E32               	movlw	50
  4134  0105B8  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4135  0105BA  EC45  F0AE         	call	_BangBang	;wreg free
  4136  0105BE                     l2261:
  4137                           
  4138                           ;main.c: 599: }
  4139                           ;main.c: 600: if (Target_Distance > average + 2) {
  4140  0105BE  0E02               	movlw	2
  4141  0105C0  0100               	movlb	0	; () banked
  4142  0105C2  25E9               	addwf	_average& (0+255),w,b
  4143  0105C4  6FDB               	movwf	??_main& (0+255),b
  4144  0105C6  0E00               	movlw	0
  4145  0105C8  21EA               	addwfc	(_average+1)& (0+255),w,b
  4146  0105CA  6FDC               	movwf	(??_main+1)& (0+255),b
  4147  0105CC  51E4               	movf	main@Target_Distance& (0+255),w,b
  4148  0105CE  5DDB               	subwf	??_main& (0+255),w,b
  4149  0105D0  51DC               	movf	(??_main+1)& (0+255),w,b
  4150  0105D2  0A80               	xorlw	128
  4151  0105D4  6FDD               	movwf	(??_main+2)& (0+255),b
  4152  0105D6  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4153  0105D8  0A80               	xorlw	128
  4154  0105DA  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4155  0105DC  B0D8               	btfsc	status,0,c
  4156  0105DE  D012               	goto	l2264
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;main.c: 601: BangBang(50, 50, 40, 40);
  4160  0105E0  0E00               	movlw	0
  4161  0105E2  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4162  0105E4  0E32               	movlw	50
  4163  0105E6  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4164  0105E8  0E00               	movlw	0
  4165  0105EA  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4166  0105EC  0E32               	movlw	50
  4167  0105EE  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4168  0105F0  0E00               	movlw	0
  4169  0105F2  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4170  0105F4  0E28               	movlw	40
  4171  0105F6  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4172  0105F8  0E00               	movlw	0
  4173  0105FA  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4174  0105FC  0E28               	movlw	40
  4175  0105FE  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4176  010600  EC45  F0AE         	call	_BangBang	;wreg free
  4177  010604                     l2264:
  4178                           
  4179                           ;main.c: 602: }
  4180                           ;main.c: 604: if (Target_Distance < average - 2) {
  4181  010604  0EFE               	movlw	254
  4182  010606  0100               	movlb	0	; () banked
  4183  010608  6FDB               	movwf	??_main& (0+255),b
  4184  01060A  0EFF               	movlw	255
  4185  01060C  6FDC               	movwf	(??_main+1)& (0+255),b
  4186  01060E  C0E9  F0DD         	movff	_average,??_main+2
  4187  010612  C0EA  F0DE         	movff	_average+1,??_main+3
  4188  010616  51DB               	movf	??_main& (0+255),w,b
  4189  010618  27DD               	addwf	(??_main+2)& (0+255),f,b
  4190  01061A  51DC               	movf	(??_main+1)& (0+255),w,b
  4191  01061C  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4192  01061E  51DD               	movf	(??_main+2)& (0+255),w,b
  4193  010620  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4194  010622  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4195  010624  0A80               	xorlw	128
  4196  010626  6FDF               	movwf	(??_main+4)& (0+255),b
  4197  010628  51DE               	movf	(??_main+3)& (0+255),w,b
  4198  01062A  0A80               	xorlw	128
  4199  01062C  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4200  01062E  B0D8               	btfsc	status,0,c
  4201  010630  D012               	goto	l2265
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;main.c: 605: BangBang(40, 40, 50, 50);
  4205  010632  0E00               	movlw	0
  4206  010634  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4207  010636  0E28               	movlw	40
  4208  010638  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4209  01063A  0E00               	movlw	0
  4210  01063C  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4211  01063E  0E28               	movlw	40
  4212  010640  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4213  010642  0E00               	movlw	0
  4214  010644  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4215  010646  0E32               	movlw	50
  4216  010648  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4217  01064A  0E00               	movlw	0
  4218  01064C  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4219  01064E  0E32               	movlw	50
  4220  010650  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4221  010652  EC45  F0AE         	call	_BangBang	;wreg free
  4222  010656                     l2265:
  4223                           
  4224                           ;main.c: 606: }
  4225                           ;main.c: 608: if (Target_Distance > average + 5) {
  4226  010656  0E05               	movlw	5
  4227  010658  0100               	movlb	0	; () banked
  4228  01065A  25E9               	addwf	_average& (0+255),w,b
  4229  01065C  6FDB               	movwf	??_main& (0+255),b
  4230  01065E  0E00               	movlw	0
  4231  010660  21EA               	addwfc	(_average+1)& (0+255),w,b
  4232  010662  6FDC               	movwf	(??_main+1)& (0+255),b
  4233  010664  51E4               	movf	main@Target_Distance& (0+255),w,b
  4234  010666  5DDB               	subwf	??_main& (0+255),w,b
  4235  010668  51DC               	movf	(??_main+1)& (0+255),w,b
  4236  01066A  0A80               	xorlw	128
  4237  01066C  6FDD               	movwf	(??_main+2)& (0+255),b
  4238  01066E  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4239  010670  0A80               	xorlw	128
  4240  010672  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4241  010674  B0D8               	btfsc	status,0,c
  4242  010676  D012               	goto	l2266
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;main.c: 609: BangBang(50, 50, 30, 30);
  4246  010678  0E00               	movlw	0
  4247  01067A  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4248  01067C  0E32               	movlw	50
  4249  01067E  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4250  010680  0E00               	movlw	0
  4251  010682  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4252  010684  0E32               	movlw	50
  4253  010686  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4254  010688  0E00               	movlw	0
  4255  01068A  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4256  01068C  0E1E               	movlw	30
  4257  01068E  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4258  010690  0E00               	movlw	0
  4259  010692  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4260  010694  0E1E               	movlw	30
  4261  010696  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4262  010698  EC45  F0AE         	call	_BangBang	;wreg free
  4263  01069C                     l2266:
  4264                           
  4265                           ;main.c: 610: }
  4266                           ;main.c: 612: if (Target_Distance < average - 5) {
  4267  01069C  0EFB               	movlw	251
  4268  01069E  0100               	movlb	0	; () banked
  4269  0106A0  6FDB               	movwf	??_main& (0+255),b
  4270  0106A2  0EFF               	movlw	255
  4271  0106A4  6FDC               	movwf	(??_main+1)& (0+255),b
  4272  0106A6  C0E9  F0DD         	movff	_average,??_main+2
  4273  0106AA  C0EA  F0DE         	movff	_average+1,??_main+3
  4274  0106AE  51DB               	movf	??_main& (0+255),w,b
  4275  0106B0  27DD               	addwf	(??_main+2)& (0+255),f,b
  4276  0106B2  51DC               	movf	(??_main+1)& (0+255),w,b
  4277  0106B4  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4278  0106B6  51DD               	movf	(??_main+2)& (0+255),w,b
  4279  0106B8  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4280  0106BA  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4281  0106BC  0A80               	xorlw	128
  4282  0106BE  6FDF               	movwf	(??_main+4)& (0+255),b
  4283  0106C0  51DE               	movf	(??_main+3)& (0+255),w,b
  4284  0106C2  0A80               	xorlw	128
  4285  0106C4  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4286  0106C6  B0D8               	btfsc	status,0,c
  4287  0106C8  D012               	goto	l2267
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;main.c: 613: BangBang(30, 30, 50, 50);
  4291  0106CA  0E00               	movlw	0
  4292  0106CC  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4293  0106CE  0E1E               	movlw	30
  4294  0106D0  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4295  0106D2  0E00               	movlw	0
  4296  0106D4  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4297  0106D6  0E1E               	movlw	30
  4298  0106D8  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4299  0106DA  0E00               	movlw	0
  4300  0106DC  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4301  0106DE  0E32               	movlw	50
  4302  0106E0  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4303  0106E2  0E00               	movlw	0
  4304  0106E4  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4305  0106E6  0E32               	movlw	50
  4306  0106E8  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4307  0106EA  EC45  F0AE         	call	_BangBang	;wreg free
  4308  0106EE                     l2267:
  4309                           
  4310                           ;main.c: 614: }
  4311                           ;main.c: 616: Get_Sensor_State();
  4312  0106EE  EC62  F0AF         	call	_Get_Sensor_State	;wreg free
  4313                           
  4314                           ;main.c: 617: printf("Besneor: %d", BumpSensor);
  4315  0106F2  0EE5               	movlw	low STR_72
  4316  0106F4  0100               	movlb	0	; () banked
  4317  0106F6  6F75               	movwf	printf@f& (0+255),b
  4318  0106F8  0EFF               	movlw	high STR_72
  4319  0106FA  6F76               	movwf	(printf@f+1)& (0+255),b
  4320  0106FC  C0F1  F077         	movff	_BumpSensor,?_printf+2
  4321  010700  6B78               	clrf	(?_printf+3)& (0+255),b
  4322  010702  EC4B  F096         	call	_printf	;wreg free
  4323                           
  4324                           ;main.c: 618: if (BumpSensor > 0) {
  4325  010706  0100               	movlb	0	; () banked
  4326  010708  51F1               	movf	_BumpSensor& (0+255),w,b
  4327  01070A  B4D8               	btfsc	status,2,c
  4328  01070C  D005               	goto	l2268
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;main.c: 619: Target_Distance = 0;
  4332  01070E  0E00               	movlw	0
  4333  010710  6FE5               	movwf	(main@Target_Distance+1)& (0+255),b
  4334  010712  0E00               	movlw	0
  4335  010714  6FE4               	movwf	main@Target_Distance& (0+255),b
  4336                           
  4337                           ;main.c: 620: break;
  4338  010716  D02D               	goto	u14500
  4339  010718                     l2268:
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;main.c: 621: }
  4343                           ;main.c: 623: if (HMIBoard.mUp.mGetState()) {
  4344                           
  4345                           ; BSR set to: 0
  4346  010718  EE21  F06B         	lfsr	2,_HMIBoard+35
  4347  01071C  D801               	call	u14468
  4348  01071E  D00A               	goto	u14469
  4349  010720                     u14468:
  4350  010720  0005               	push	
  4351  010722  6EFA               	movwf	pclath,c
  4352  010724  50DE               	movf	postinc2,w,c
  4353  010726  6EFD               	movwf	tosl,c
  4354  010728  50DE               	movf	postinc2,w,c
  4355  01072A  6EFE               	movwf	tosh,c
  4356  01072C  50DE               	movf	postinc2,w,c
  4357  01072E  6EFF               	movwf	tosu,c
  4358  010730  50FA               	movf	pclath,w,c
  4359  010732  0012               	return		;indir
  4360  010734                     u14469:
  4361  010734  0900               	iorlw	0
  4362  010736  B4D8               	btfsc	status,2,c
  4363  010738  D018               	goto	l2270
  4364                           
  4365                           ;main.c: 624: up = HMIBoard.mUp.mGetState();
  4366  01073A  EE21  F06B         	lfsr	2,_HMIBoard+35
  4367  01073E  D801               	call	u14488
  4368  010740  D00A               	goto	u14489
  4369  010742                     u14488:
  4370  010742  0005               	push	
  4371  010744  6EFA               	movwf	pclath,c
  4372  010746  50DE               	movf	postinc2,w,c
  4373  010748  6EFD               	movwf	tosl,c
  4374  01074A  50DE               	movf	postinc2,w,c
  4375  01074C  6EFE               	movwf	tosh,c
  4376  01074E  50DE               	movf	postinc2,w,c
  4377  010750  6EFF               	movwf	tosu,c
  4378  010752  50FA               	movf	pclath,w,c
  4379  010754  0012               	return		;indir
  4380  010756                     u14489:
  4381  010756  0100               	movlb	0	; () banked
  4382  010758  6FE3               	movwf	main@up& (0+255),b
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;main.c: 625: if (up) {
  4386  01075A  51E3               	movf	main@up& (0+255),w,b
  4387  01075C  B4D8               	btfsc	status,2,c
  4388  01075E  D009               	goto	u14500
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;main.c: 626: mode = 0;
  4392  010760  0E00               	movlw	0
  4393  010762  6E32               	movwf	_mode+1,c
  4394  010764  0E00               	movlw	0
  4395  010766  6E31               	movwf	_mode,c
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;main.c: 627: }
  4399                           ;main.c: 628: break;
  4400  010768  D004               	goto	u14500
  4401  01076A                     l2270:
  4402                           
  4403                           ; BSR set to: 0
  4404                           
  4405                           ; BSR set to: 0
  4406  01076A  0100               	movlb	0	; () banked
  4407  01076C  51F1               	movf	_BumpSensor& (0+255),w,b
  4408  01076E  B4D8               	btfsc	status,2,c
  4409  010770  D686               	goto	l2260
  4410  010772                     u14500:
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;main.c: 629: }
  4414                           ;main.c: 630: }
  4415                           ;main.c: 631: mode = 0;
  4416                           
  4417                           ; BSR set to: 0
  4418  010772  0E00               	movlw	0
  4419  010774  6E32               	movwf	_mode+1,c
  4420  010776  0E00               	movlw	0
  4421  010778  6E31               	movwf	_mode,c
  4422  01077A                     l2257:
  4423                           
  4424                           ;main.c: 632: }
  4425                           ;main.c: 633: Console_Render();
  4426                           
  4427                           ; BSR set to: 0
  4428                           
  4429                           ; BSR set to: 0
  4430                           
  4431                           ; BSR set to: 0
  4432                           
  4433                           ; BSR set to: 0
  4434                           
  4435                           ; BSR set to: 0
  4436  01077A  EC6F  F092         	call	_Console_Render	;wreg free
  4437                           
  4438                           ;main.c: 634: if (MXK_Release())
  4439  01077E  EC32  F0AF         	call	_MXK_Release	;wreg free
  4440  010782  0900               	iorlw	0
  4441  010784  B4D8               	btfsc	status,2,c
  4442  010786  D45F               	goto	l2239
  4443                           
  4444                           ;main.c: 635: MXK_Dequeue();
  4445  010788  EC14  F0AD         	call	_MXK_Dequeue	;wreg free
  4446                           
  4447                           ;main.c: 636: }
  4448                           ;main.c: 637: }
  4449  01078C  D45C               	goto	l2239
  4450  01078E                     __end_of_main:
  4451                           	opt stack 0
  4452                           tosu	equ	0xFFF
  4453                           tosh	equ	0xFFE
  4454                           tosl	equ	0xFFD
  4455                           pclath	equ	0xFFA
  4456                           tblptru	equ	0xFF8
  4457                           tblptrh	equ	0xFF7
  4458                           tblptrl	equ	0xFF6
  4459                           tablat	equ	0xFF5
  4460                           postinc0	equ	0xFEE
  4461                           wreg	equ	0xFE8
  4462                           postdec1	equ	0xFE5
  4463                           fsr1h	equ	0xFE2
  4464                           fsr1l	equ	0xFE1
  4465                           postinc2	equ	0xFDE
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function _Turn *****************
  4469 ;; Defined at:
  4470 ;;		line 198 in file "main.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  Angle           2    1[BANK0 ] int 
  4473 ;;  Speed           2    3[BANK0 ] int 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  C_Angle         2    5[BANK0 ] int 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  2    1[BANK0 ] int 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;Total ram usage:        6 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:    9
  4492 ;; This function calls:
  4493 ;;		_Robot_Stop
  4494 ;;		_eusartRec
  4495 ;;		_eusartSend
  4496 ;; This function is called by:
  4497 ;;		_main
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text1
  4502  015146                     __ptext1:
  4503                           	opt stack 0
  4504  015146                     _Turn:
  4505                           	opt stack 21
  4506                           
  4507                           ;main.c: 199: eusartSend(137);
  4508                           
  4509                           ;incstack = 0
  4510  015146  0E89               	movlw	137
  4511  015148  EC09  F0B0         	call	_eusartSend
  4512                           
  4513                           ;main.c: 200: eusartSend((((Speed)>>8) & 255));
  4514  01514C  0100               	movlb	0	; () banked
  4515  01514E  5164               	movf	(Turn@Speed+1)& (0+255),w,b
  4516  015150  EC09  F0B0         	call	_eusartSend
  4517                           
  4518                           ;main.c: 201: eusartSend(((Speed) & 255));
  4519  015154  0100               	movlb	0	; () banked
  4520  015156  5163               	movf	Turn@Speed& (0+255),w,b
  4521  015158  EC09  F0B0         	call	_eusartSend
  4522                           
  4523                           ;main.c: 202: eusartSend((((0)>>8) & 255));
  4524  01515C  0E00               	movlw	0
  4525  01515E  EC09  F0B0         	call	_eusartSend
  4526                           
  4527                           ;main.c: 203: eusartSend(((1) & 255));
  4528  015162  0E01               	movlw	1
  4529  015164  EC09  F0B0         	call	_eusartSend
  4530                           
  4531                           ;main.c: 204: int C_Angle = 0;
  4532  015168  0E00               	movlw	0
  4533  01516A  0100               	movlb	0	; () banked
  4534  01516C  6F66               	movwf	(Turn@C_Angle+1)& (0+255),b
  4535  01516E  0E00               	movlw	0
  4536  015170  6F65               	movwf	Turn@C_Angle& (0+255),b
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;main.c: 205: eusartSend(157);
  4540  015172  0E9D               	movlw	157
  4541  015174  EC09  F0B0         	call	_eusartSend
  4542                           
  4543                           ;main.c: 206: eusartSend((((Angle)>>8) & 255));
  4544  015178  0100               	movlb	0	; () banked
  4545  01517A  5162               	movf	(Turn@Angle+1)& (0+255),w,b
  4546  01517C  EC09  F0B0         	call	_eusartSend
  4547                           
  4548                           ;main.c: 207: eusartSend(((Angle) & 255));
  4549  015180  0100               	movlb	0	; () banked
  4550  015182  5161               	movf	Turn@Angle& (0+255),w,b
  4551  015184  EC09  F0B0         	call	_eusartSend
  4552                           
  4553                           ;main.c: 209: Robot_Stop();
  4554  015188  EC93  F0AE         	call	_Robot_Stop	;wreg free
  4555                           
  4556                           ;main.c: 211: eusartSend(142);
  4557  01518C  0E8E               	movlw	142
  4558  01518E  EC09  F0B0         	call	_eusartSend
  4559                           
  4560                           ;main.c: 212: eusartSend(7);
  4561  015192  0E07               	movlw	7
  4562  015194  EC09  F0B0         	call	_eusartSend
  4563                           
  4564                           ;main.c: 213: eusartRec();
  4565  015198  EC37  F0B0         	call	_eusartRec	;wreg free
  4566  01519C  0012               	return		;funcret
  4567  01519E                     __end_of_Turn:
  4568                           	opt stack 0
  4569                           tosu	equ	0xFFF
  4570                           tosh	equ	0xFFE
  4571                           tosl	equ	0xFFD
  4572                           pclath	equ	0xFFA
  4573                           tblptru	equ	0xFF8
  4574                           tblptrh	equ	0xFF7
  4575                           tblptrl	equ	0xFF6
  4576                           tablat	equ	0xFF5
  4577                           postinc0	equ	0xFEE
  4578                           wreg	equ	0xFE8
  4579                           postdec1	equ	0xFE5
  4580                           fsr1h	equ	0xFE2
  4581                           fsr1l	equ	0xFE1
  4582                           postinc2	equ	0xFDE
  4583                           status	equ	0xFD8
  4584                           
  4585 ;; *************** function _Sensor_Observe2 *****************
  4586 ;; Defined at:
  4587 ;;		line 318 in file "main.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;Total ram usage:        2 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:   13
  4608 ;; This function calls:
  4609 ;;		_ADCAverage
  4610 ;;		_Console_Render
  4611 ;;		_SteppingCCW
  4612 ;;		_printf
  4613 ;; This function is called by:
  4614 ;;		_main
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           	psect	text2
  4619  0136BC                     __ptext2:
  4620                           	opt stack 0
  4621  0136BC                     _Sensor_Observe2:
  4622                           	opt stack 17
  4623                           
  4624                           ;main.c: 319: printf("%c", (char)35);
  4625                           
  4626                           ;incstack = 0
  4627  0136BC  0EFC               	movlw	low STR_1
  4628  0136BE  0100               	movlb	0	; () banked
  4629  0136C0  6F75               	movwf	printf@f& (0+255),b
  4630  0136C2  0EFF               	movlw	high STR_1
  4631  0136C4  6F76               	movwf	(printf@f+1)& (0+255),b
  4632  0136C6  0E00               	movlw	0
  4633  0136C8  6F78               	movwf	(?_printf+3)& (0+255),b
  4634  0136CA  0E23               	movlw	35
  4635  0136CC  6F77               	movwf	(?_printf+2)& (0+255),b
  4636  0136CE  EC4B  F096         	call	_printf	;wreg free
  4637                           
  4638                           ;main.c: 320: printf("                 \n");
  4639  0136D2  0E7D               	movlw	low STR_2
  4640  0136D4  0100               	movlb	0	; () banked
  4641  0136D6  6F75               	movwf	printf@f& (0+255),b
  4642  0136D8  0EFF               	movlw	high STR_2
  4643  0136DA  6F76               	movwf	(printf@f+1)& (0+255),b
  4644  0136DC  EC4B  F096         	call	_printf	;wreg free
  4645                           
  4646                           ;main.c: 321: printf("Sensor Moving!\n");
  4647  0136E0  0EB6               	movlw	low STR_3
  4648  0136E2  0100               	movlb	0	; () banked
  4649  0136E4  6F75               	movwf	printf@f& (0+255),b
  4650  0136E6  0EFF               	movlw	high STR_3
  4651  0136E8  6F76               	movwf	(printf@f+1)& (0+255),b
  4652  0136EA  EC4B  F096         	call	_printf	;wreg free
  4653                           
  4654                           ;main.c: 322: printf("                 \n");
  4655  0136EE  0E7D               	movlw	low STR_2
  4656  0136F0  0100               	movlb	0	; () banked
  4657  0136F2  6F75               	movwf	printf@f& (0+255),b
  4658  0136F4  0EFF               	movlw	high STR_2
  4659  0136F6  6F76               	movwf	(printf@f+1)& (0+255),b
  4660  0136F8  EC4B  F096         	call	_printf	;wreg free
  4661                           
  4662                           ;main.c: 323: printf("                 \n");
  4663  0136FC  0E7D               	movlw	low STR_2
  4664  0136FE  0100               	movlb	0	; () banked
  4665  013700  6F75               	movwf	printf@f& (0+255),b
  4666  013702  0EFF               	movlw	high STR_2
  4667  013704  6F76               	movwf	(printf@f+1)& (0+255),b
  4668  013706  EC4B  F096         	call	_printf	;wreg free
  4669                           
  4670                           ;main.c: 324: printf("                 \n");
  4671  01370A  0E7D               	movlw	low STR_2
  4672  01370C  0100               	movlb	0	; () banked
  4673  01370E  6F75               	movwf	printf@f& (0+255),b
  4674  013710  0EFF               	movlw	high STR_2
  4675  013712  6F76               	movwf	(printf@f+1)& (0+255),b
  4676  013714  EC4B  F096         	call	_printf	;wreg free
  4677                           
  4678                           ;main.c: 325: printf("                 \n");
  4679  013718  0E7D               	movlw	low STR_2
  4680  01371A  0100               	movlb	0	; () banked
  4681  01371C  6F75               	movwf	printf@f& (0+255),b
  4682  01371E  0EFF               	movlw	high STR_2
  4683  013720  6F76               	movwf	(printf@f+1)& (0+255),b
  4684  013722  EC4B  F096         	call	_printf	;wreg free
  4685                           
  4686                           ;main.c: 326: printf("                 \n");
  4687  013726  0E7D               	movlw	low STR_2
  4688  013728  0100               	movlb	0	; () banked
  4689  01372A  6F75               	movwf	printf@f& (0+255),b
  4690  01372C  0EFF               	movlw	high STR_2
  4691  01372E  6F76               	movwf	(printf@f+1)& (0+255),b
  4692  013730  EC4B  F096         	call	_printf	;wreg free
  4693                           
  4694                           ;main.c: 327: printf("                 \n");
  4695  013734  0E7D               	movlw	low STR_2
  4696  013736  0100               	movlb	0	; () banked
  4697  013738  6F75               	movwf	printf@f& (0+255),b
  4698  01373A  0EFF               	movlw	high STR_2
  4699  01373C  6F76               	movwf	(printf@f+1)& (0+255),b
  4700  01373E  EC4B  F096         	call	_printf	;wreg free
  4701                           
  4702                           ;main.c: 328: printf("                 \n");
  4703  013742  0E7D               	movlw	low STR_2
  4704  013744  0100               	movlb	0	; () banked
  4705  013746  6F75               	movwf	printf@f& (0+255),b
  4706  013748  0EFF               	movlw	high STR_2
  4707  01374A  6F76               	movwf	(printf@f+1)& (0+255),b
  4708  01374C  EC4B  F096         	call	_printf	;wreg free
  4709                           
  4710                           ;main.c: 329: Console_Render();
  4711  013750  EC6F  F092         	call	_Console_Render	;wreg free
  4712                           
  4713                           ;main.c: 330: while (Motor_Count <= 512) {
  4714  013754  D019               	goto	l2207
  4715  013756                     
  4716                           ;main.c: 331: Motor_Count++;
  4717  013756  4A2D               	infsnz	_Motor_Count,f,c
  4718  013758  2A2E               	incf	_Motor_Count+1,f,c
  4719                           
  4720                           ;main.c: 332: ADCAverage();
  4721  01375A  ECE1  F088         	call	_ADCAverage	;wreg free
  4722                           
  4723                           ;main.c: 333: if (Low_Sensor > average) {
  4724  01375E  504A               	movf	_Low_Sensor,w,c
  4725  013760  0100               	movlb	0	; () banked
  4726  013762  5DE9               	subwf	_average& (0+255),w,b
  4727  013764  51EA               	movf	(_average+1)& (0+255),w,b
  4728  013766  0A80               	xorlw	128
  4729  013768  6FD9               	movwf	??_Sensor_Observe2& (0+255),b
  4730  01376A  504B               	movf	_Low_Sensor+1,w,c
  4731  01376C  0A80               	xorlw	128
  4732  01376E  59D9               	subwfb	??_Sensor_Observe2& (0+255),w,b
  4733  013770  B0D8               	btfsc	status,0,c
  4734  013772  D008               	goto	l2209
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;main.c: 334: Low_Sensor = average;
  4738  013774  C0E9  F04A         	movff	_average,_Low_Sensor
  4739  013778  C0EA  F04B         	movff	_average+1,_Low_Sensor+1
  4740                           
  4741                           ;main.c: 335: Close_Pos = Motor_Count;
  4742  01377C  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  4743  013780  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  4744  013784                     l2209:
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;main.c: 336: }
  4748                           ;main.c: 337: SteppingCCW();
  4749                           
  4750                           ; BSR set to: 0
  4751  013784  ECD9  F0AA         	call	_SteppingCCW	;wreg free
  4752  013788                     l2207:
  4753  013788  BE2E               	btfsc	_Motor_Count+1,7,c
  4754  01378A  D7E5               	goto	l2208
  4755  01378C  042D               	decf	_Motor_Count,w,c
  4756  01378E  0E02               	movlw	2
  4757  013790  582E               	subwfb	_Motor_Count+1,w,c
  4758  013792  A0D8               	btfss	status,0,c
  4759  013794  D7E0               	goto	l2208
  4760                           
  4761                           ;main.c: 338: }
  4762                           ;main.c: 340: Console_Render();
  4763  013796  EC6F  F092         	call	_Console_Render	;wreg free
  4764                           
  4765                           ;main.c: 341: RD5 = 0;
  4766  01379A  9A83               	bcf	3971,5,c	;volatile
  4767                           
  4768                           ;main.c: 342: RD7 = 0;
  4769  01379C  9E83               	bcf	3971,7,c	;volatile
  4770                           
  4771                           ;main.c: 343: RA2 = 0;
  4772  01379E  9480               	bcf	3968,2,c	;volatile
  4773                           
  4774                           ;main.c: 344: RA3 = 0;
  4775  0137A0  9680               	bcf	3968,3,c	;volatile
  4776                           
  4777                           ;main.c: 345: Sensor_Observe_Fin = 1;
  4778  0137A2  0E00               	movlw	0
  4779  0137A4  0101               	movlb	1	; () banked
  4780  0137A6  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  4781  0137A8  0E01               	movlw	1
  4782  0137AA  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  4783                           
  4784                           ; BSR set to: 1
  4785                           ;main.c: 347: CW_Count = 512 - Close_Pos;
  4786  0137AC  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe2
  4787  0137B0  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe2+1
  4788  0137B4  0100               	movlb	0	; () banked
  4789  0137B6  1FD9               	comf	??_Sensor_Observe2& (0+255),f,b
  4790  0137B8  1FDA               	comf	(??_Sensor_Observe2+1)& (0+255),f,b
  4791  0137BA  4BD9               	infsnz	??_Sensor_Observe2& (0+255),f,b
  4792  0137BC  2BDA               	incf	(??_Sensor_Observe2+1)& (0+255),f,b
  4793  0137BE  0E00               	movlw	0
  4794  0137C0  25D9               	addwf	??_Sensor_Observe2& (0+255),w,b
  4795  0137C2  0101               	movlb	1	; () banked
  4796  0137C4  6F28               	movwf	_CW_Count& (0+255),b
  4797  0137C6  0E02               	movlw	2
  4798  0137C8  0100               	movlb	0	; () banked
  4799  0137CA  21DA               	addwfc	(??_Sensor_Observe2+1)& (0+255),w,b
  4800  0137CC  0101               	movlb	1	; () banked
  4801  0137CE  6F29               	movwf	(_CW_Count+1)& (0+255),b
  4802  0137D0  0012               	return	
  4803  0137D2                     __end_of_Sensor_Observe2:
  4804                           	opt stack 0
  4805                           tosu	equ	0xFFF
  4806                           tosh	equ	0xFFE
  4807                           tosl	equ	0xFFD
  4808                           pclath	equ	0xFFA
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           postdec1	equ	0xFE5
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           postinc2	equ	0xFDE
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _Sensor_Observe *****************
  4822 ;; Defined at:
  4823 ;;		line 369 in file "main.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;		None
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:        2 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:   13
  4844 ;; This function calls:
  4845 ;;		_ADCAverage
  4846 ;;		_Console_Render
  4847 ;;		_SteppingCW
  4848 ;;		_printf
  4849 ;; This function is called by:
  4850 ;;		_main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text3
  4855  0139F6                     __ptext3:
  4856                           	opt stack 0
  4857  0139F6                     _Sensor_Observe:
  4858                           	opt stack 17
  4859                           
  4860                           ;main.c: 370: printf("%c", (char)35);
  4861                           
  4862                           ; BSR set to: 1
  4863                           ;incstack = 0
  4864  0139F6  0EFC               	movlw	low STR_1
  4865  0139F8  0100               	movlb	0	; () banked
  4866  0139FA  6F75               	movwf	printf@f& (0+255),b
  4867  0139FC  0EFF               	movlw	high STR_1
  4868  0139FE  6F76               	movwf	(printf@f+1)& (0+255),b
  4869  013A00  0E00               	movlw	0
  4870  013A02  6F78               	movwf	(?_printf+3)& (0+255),b
  4871  013A04  0E23               	movlw	35
  4872  013A06  6F77               	movwf	(?_printf+2)& (0+255),b
  4873  013A08  EC4B  F096         	call	_printf	;wreg free
  4874                           
  4875                           ;main.c: 371: printf("                 \n");
  4876  013A0C  0E7D               	movlw	low STR_2
  4877  013A0E  0100               	movlb	0	; () banked
  4878  013A10  6F75               	movwf	printf@f& (0+255),b
  4879  013A12  0EFF               	movlw	high STR_2
  4880  013A14  6F76               	movwf	(printf@f+1)& (0+255),b
  4881  013A16  EC4B  F096         	call	_printf	;wreg free
  4882                           
  4883                           ;main.c: 372: printf("Sensor Moving!   \n");
  4884  013A1A  0E90               	movlw	low STR_17
  4885  013A1C  0100               	movlb	0	; () banked
  4886  013A1E  6F75               	movwf	printf@f& (0+255),b
  4887  013A20  0EFF               	movlw	high STR_17
  4888  013A22  6F76               	movwf	(printf@f+1)& (0+255),b
  4889  013A24  EC4B  F096         	call	_printf	;wreg free
  4890                           
  4891                           ;main.c: 373: printf("                 \n");
  4892  013A28  0E7D               	movlw	low STR_2
  4893  013A2A  0100               	movlb	0	; () banked
  4894  013A2C  6F75               	movwf	printf@f& (0+255),b
  4895  013A2E  0EFF               	movlw	high STR_2
  4896  013A30  6F76               	movwf	(printf@f+1)& (0+255),b
  4897  013A32  EC4B  F096         	call	_printf	;wreg free
  4898                           
  4899                           ;main.c: 374: printf("                 \n");
  4900  013A36  0E7D               	movlw	low STR_2
  4901  013A38  0100               	movlb	0	; () banked
  4902  013A3A  6F75               	movwf	printf@f& (0+255),b
  4903  013A3C  0EFF               	movlw	high STR_2
  4904  013A3E  6F76               	movwf	(printf@f+1)& (0+255),b
  4905  013A40  EC4B  F096         	call	_printf	;wreg free
  4906                           
  4907                           ;main.c: 375: printf("                 \n");
  4908  013A44  0E7D               	movlw	low STR_2
  4909  013A46  0100               	movlb	0	; () banked
  4910  013A48  6F75               	movwf	printf@f& (0+255),b
  4911  013A4A  0EFF               	movlw	high STR_2
  4912  013A4C  6F76               	movwf	(printf@f+1)& (0+255),b
  4913  013A4E  EC4B  F096         	call	_printf	;wreg free
  4914                           
  4915                           ;main.c: 376: printf("                 \n");
  4916  013A52  0E7D               	movlw	low STR_2
  4917  013A54  0100               	movlb	0	; () banked
  4918  013A56  6F75               	movwf	printf@f& (0+255),b
  4919  013A58  0EFF               	movlw	high STR_2
  4920  013A5A  6F76               	movwf	(printf@f+1)& (0+255),b
  4921  013A5C  EC4B  F096         	call	_printf	;wreg free
  4922                           
  4923                           ;main.c: 377: printf("                 \n");
  4924  013A60  0E7D               	movlw	low STR_2
  4925  013A62  0100               	movlb	0	; () banked
  4926  013A64  6F75               	movwf	printf@f& (0+255),b
  4927  013A66  0EFF               	movlw	high STR_2
  4928  013A68  6F76               	movwf	(printf@f+1)& (0+255),b
  4929  013A6A  EC4B  F096         	call	_printf	;wreg free
  4930                           
  4931                           ;main.c: 378: printf("                 \n");
  4932  013A6E  0E7D               	movlw	low STR_2
  4933  013A70  0100               	movlb	0	; () banked
  4934  013A72  6F75               	movwf	printf@f& (0+255),b
  4935  013A74  0EFF               	movlw	high STR_2
  4936  013A76  6F76               	movwf	(printf@f+1)& (0+255),b
  4937  013A78  EC4B  F096         	call	_printf	;wreg free
  4938                           
  4939                           ;main.c: 379: Console_Render();
  4940  013A7C  EC6F  F092         	call	_Console_Render	;wreg free
  4941                           
  4942                           ;main.c: 380: while (Motor_Count <= 512) {
  4943  013A80  D019               	goto	l2220
  4944  013A82                     
  4945                           ;main.c: 381: Motor_Count++;
  4946  013A82  4A2D               	infsnz	_Motor_Count,f,c
  4947  013A84  2A2E               	incf	_Motor_Count+1,f,c
  4948                           
  4949                           ;main.c: 382: ADCAverage();
  4950  013A86  ECE1  F088         	call	_ADCAverage	;wreg free
  4951                           
  4952                           ;main.c: 383: if (Low_Sensor > average) {
  4953  013A8A  504A               	movf	_Low_Sensor,w,c
  4954  013A8C  0100               	movlb	0	; () banked
  4955  013A8E  5DE9               	subwf	_average& (0+255),w,b
  4956  013A90  51EA               	movf	(_average+1)& (0+255),w,b
  4957  013A92  0A80               	xorlw	128
  4958  013A94  6FD9               	movwf	??_Sensor_Observe& (0+255),b
  4959  013A96  504B               	movf	_Low_Sensor+1,w,c
  4960  013A98  0A80               	xorlw	128
  4961  013A9A  59D9               	subwfb	??_Sensor_Observe& (0+255),w,b
  4962  013A9C  B0D8               	btfsc	status,0,c
  4963  013A9E  D008               	goto	l2222
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;main.c: 384: Low_Sensor = average;
  4967  013AA0  C0E9  F04A         	movff	_average,_Low_Sensor
  4968  013AA4  C0EA  F04B         	movff	_average+1,_Low_Sensor+1
  4969                           
  4970                           ;main.c: 385: Close_Pos = Motor_Count;
  4971  013AA8  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  4972  013AAC  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  4973  013AB0                     l2222:
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;main.c: 386: }
  4977                           ;main.c: 387: SteppingCW();
  4978                           
  4979                           ; BSR set to: 0
  4980  013AB0  ECB4  F0AA         	call	_SteppingCW	;wreg free
  4981  013AB4                     l2220:
  4982  013AB4  BE2E               	btfsc	_Motor_Count+1,7,c
  4983  013AB6  D7E5               	goto	l2221
  4984  013AB8  042D               	decf	_Motor_Count,w,c
  4985  013ABA  0E02               	movlw	2
  4986  013ABC  582E               	subwfb	_Motor_Count+1,w,c
  4987  013ABE  A0D8               	btfss	status,0,c
  4988  013AC0  D7E0               	goto	l2221
  4989                           
  4990                           ;main.c: 388: }
  4991                           ;main.c: 389: RD5 = 0;
  4992  013AC2  9A83               	bcf	3971,5,c	;volatile
  4993                           
  4994                           ;main.c: 390: RD7 = 0;
  4995  013AC4  9E83               	bcf	3971,7,c	;volatile
  4996                           
  4997                           ;main.c: 391: RA2 = 0;
  4998  013AC6  9480               	bcf	3968,2,c	;volatile
  4999                           
  5000                           ;main.c: 392: RA3 = 0;
  5001  013AC8  9680               	bcf	3968,3,c	;volatile
  5002                           
  5003                           ;main.c: 393: Sensor_Observe_Fin = 1;
  5004  013ACA  0E00               	movlw	0
  5005  013ACC  0101               	movlb	1	; () banked
  5006  013ACE  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5007  013AD0  0E01               	movlw	1
  5008  013AD2  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5009                           
  5010                           ; BSR set to: 1
  5011                           ;main.c: 395: CCW_Count = 512 - Close_Pos;
  5012  013AD4  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe
  5013  013AD8  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe+1
  5014  013ADC  0100               	movlb	0	; () banked
  5015  013ADE  1FD9               	comf	??_Sensor_Observe& (0+255),f,b
  5016  013AE0  1FDA               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  5017  013AE2  4BD9               	infsnz	??_Sensor_Observe& (0+255),f,b
  5018  013AE4  2BDA               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  5019  013AE6  0E00               	movlw	0
  5020  013AE8  25D9               	addwf	??_Sensor_Observe& (0+255),w,b
  5021  013AEA  0101               	movlb	1	; () banked
  5022  013AEC  6F2A               	movwf	_CCW_Count& (0+255),b
  5023  013AEE  0E02               	movlw	2
  5024  013AF0  0100               	movlb	0	; () banked
  5025  013AF2  21DA               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  5026  013AF4  0101               	movlb	1	; () banked
  5027  013AF6  6F2B               	movwf	(_CCW_Count+1)& (0+255),b
  5028  013AF8  0012               	return	
  5029  013AFA                     __end_of_Sensor_Observe:
  5030                           	opt stack 0
  5031                           tosu	equ	0xFFF
  5032                           tosh	equ	0xFFE
  5033                           tosl	equ	0xFFD
  5034                           pclath	equ	0xFFA
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           postdec1	equ	0xFE5
  5042                           fsr1h	equ	0xFE2
  5043                           fsr1l	equ	0xFE1
  5044                           postinc2	equ	0xFDE
  5045                           status	equ	0xFD8
  5046                           
  5047 ;; *************** function _Robot_Init *****************
  5048 ;; Defined at:
  5049 ;;		line 228 in file "main.c"
  5050 ;; Parameters:    Size  Location     Type
  5051 ;;		None
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;		None
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  1    wreg      void 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, cstack
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;Total ram usage:        0 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; Hardware stack levels required when called:    9
  5070 ;; This function calls:
  5071 ;;		_Robot_Stop
  5072 ;;		_UpdateDistance
  5073 ;;		_eusartSend
  5074 ;; This function is called by:
  5075 ;;		_main
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text4
  5080  015F22                     __ptext4:
  5081                           	opt stack 0
  5082  015F22                     _Robot_Init:
  5083                           	opt stack 21
  5084                           
  5085                           ;main.c: 229: eusartSend(128);
  5086                           
  5087                           ; BSR set to: 1
  5088                           ;incstack = 0
  5089  015F22  0E80               	movlw	128
  5090  015F24  EC09  F0B0         	call	_eusartSend
  5091                           
  5092                           ;main.c: 230: eusartSend(132);
  5093  015F28  0E84               	movlw	132
  5094  015F2A  EC09  F0B0         	call	_eusartSend
  5095                           
  5096                           ;main.c: 231: Robot_Stop();
  5097  015F2E  EC93  F0AE         	call	_Robot_Stop	;wreg free
  5098                           
  5099                           ;main.c: 232: UpdateDistance();
  5100  015F32  ECF1  F0AD         	call	_UpdateDistance	;wreg free
  5101  015F36  0012               	return		;funcret
  5102  015F38                     __end_of_Robot_Init:
  5103                           	opt stack 0
  5104                           tosu	equ	0xFFF
  5105                           tosh	equ	0xFFE
  5106                           tosl	equ	0xFFD
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           postinc0	equ	0xFEE
  5113                           wreg	equ	0xFE8
  5114                           postdec1	equ	0xFE5
  5115                           fsr1h	equ	0xFE2
  5116                           fsr1l	equ	0xFE1
  5117                           postinc2	equ	0xFDE
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function _UpdateDistance *****************
  5121 ;; Defined at:
  5122 ;;		line 176 in file "main.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;		None
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;		None
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  2    1[BANK0 ] int 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5136 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;Total ram usage:        2 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    8
  5143 ;; This function calls:
  5144 ;;		_eusartRec
  5145 ;;		_eusartSend
  5146 ;; This function is called by:
  5147 ;;		_Robot_Init
  5148 ;;		_main
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           	psect	text5
  5153  015BE2                     __ptext5:
  5154                           	opt stack 0
  5155  015BE2                     _UpdateDistance:
  5156                           	opt stack 22
  5157                           
  5158                           ;main.c: 177: eusartSend(142);
  5159                           
  5160                           ;incstack = 0
  5161  015BE2  0E8E               	movlw	142
  5162  015BE4  EC09  F0B0         	call	_eusartSend
  5163                           
  5164                           ;main.c: 178: eusartSend(19);
  5165  015BE8  0E13               	movlw	19
  5166  015BEA  EC09  F0B0         	call	_eusartSend
  5167                           
  5168                           ;main.c: 179: Current_Dist1 = eusartRec();
  5169  015BEE  EC37  F0B0         	call	_eusartRec	;wreg free
  5170  015BF2  0101               	movlb	1	; () banked
  5171  015BF4  6F43               	movwf	_Current_Dist1& (0+255),b
  5172                           
  5173                           ; BSR set to: 1
  5174                           ;main.c: 180: Current_Dist2 = eusartRec();
  5175  015BF6  EC37  F0B0         	call	_eusartRec	;wreg free
  5176  015BFA  6E37               	movwf	_Current_Dist2,c
  5177                           
  5178                           ;main.c: 182: Current_Dist = Current_Dist2;
  5179  015BFC  C037  F136         	movff	_Current_Dist2,_Current_Dist
  5180  015C00  0101               	movlb	1	; () banked
  5181  015C02  6B37               	clrf	(_Current_Dist+1)& (0+255),b
  5182                           
  5183                           ; BSR set to: 1
  5184                           ;main.c: 185: return Current_Dist;
  5185  015C04  C136  F061         	movff	_Current_Dist,?_UpdateDistance
  5186  015C08  C137  F062         	movff	_Current_Dist+1,?_UpdateDistance+1
  5187  015C0C  0012               	return	
  5188  015C0E                     __end_of_UpdateDistance:
  5189                           	opt stack 0
  5190                           tosu	equ	0xFFF
  5191                           tosh	equ	0xFFE
  5192                           tosl	equ	0xFFD
  5193                           pclath	equ	0xFFA
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           postinc0	equ	0xFEE
  5199                           wreg	equ	0xFE8
  5200                           postdec1	equ	0xFE5
  5201                           fsr1h	equ	0xFE2
  5202                           fsr1l	equ	0xFE1
  5203                           postinc2	equ	0xFDE
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function _Robot_Stop *****************
  5207 ;; Defined at:
  5208 ;;		line 157 in file "main.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;		None
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 0/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5226 ;;Total ram usage:        0 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    8
  5229 ;; This function calls:
  5230 ;;		_eusartSend
  5231 ;; This function is called by:
  5232 ;;		_Turn
  5233 ;;		_Robot_Init
  5234 ;;		_main
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text6
  5239  015D26                     __ptext6:
  5240                           	opt stack 0
  5241  015D26                     _Robot_Stop:
  5242                           	opt stack 21
  5243                           
  5244                           ;main.c: 158: eusartSend(137);
  5245                           
  5246                           ; BSR set to: 1
  5247                           ;incstack = 0
  5248  015D26  0E89               	movlw	137
  5249  015D28  EC09  F0B0         	call	_eusartSend
  5250                           
  5251                           ;main.c: 159: eusartSend(0);
  5252  015D2C  0E00               	movlw	0
  5253  015D2E  EC09  F0B0         	call	_eusartSend
  5254                           
  5255                           ;main.c: 160: eusartSend(0);
  5256  015D32  0E00               	movlw	0
  5257  015D34  EC09  F0B0         	call	_eusartSend
  5258                           
  5259                           ;main.c: 161: eusartSend(0);
  5260  015D38  0E00               	movlw	0
  5261  015D3A  EC09  F0B0         	call	_eusartSend
  5262                           
  5263                           ;main.c: 162: eusartSend(0);
  5264  015D3E  0E00               	movlw	0
  5265  015D40  EC09  F0B0         	call	_eusartSend
  5266  015D44  0012               	return		;funcret
  5267  015D46                     __end_of_Robot_Stop:
  5268                           	opt stack 0
  5269                           tosu	equ	0xFFF
  5270                           tosh	equ	0xFFE
  5271                           tosl	equ	0xFFD
  5272                           pclath	equ	0xFFA
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           postdec1	equ	0xFE5
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           postinc2	equ	0xFDE
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function _Reset_variables *****************
  5286 ;; Defined at:
  5287 ;;		line 421 in file "main.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, status,2
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;Total ram usage:        0 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    7
  5308 ;; This function calls:
  5309 ;;		Nothing
  5310 ;; This function is called by:
  5311 ;;		_main
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text7
  5316  015484                     __ptext7:
  5317                           	opt stack 0
  5318  015484                     _Reset_variables:
  5319                           	opt stack 23
  5320                           
  5321                           ;main.c: 423: Square_Dist = 0;
  5322                           
  5323                           ;incstack = 0
  5324  015484  0E00               	movlw	0
  5325  015486  0101               	movlb	1	; () banked
  5326  015488  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  5327  01548A  0E00               	movlw	0
  5328  01548C  6F34               	movwf	_Square_Dist& (0+255),b
  5329                           
  5330                           ;main.c: 424: Sensor_Observe_Fin = 0;
  5331  01548E  0E00               	movlw	0
  5332  015490  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5333  015492  0E00               	movlw	0
  5334  015494  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5335                           
  5336                           ;main.c: 425: Motor_Count = 0;
  5337  015496  0E00               	movlw	0
  5338  015498  6E2E               	movwf	_Motor_Count+1,c
  5339  01549A  0E00               	movlw	0
  5340  01549C  6E2D               	movwf	_Motor_Count,c
  5341                           
  5342                           ;main.c: 426: Low_Sensor = 10000;
  5343  01549E  0E27               	movlw	39
  5344  0154A0  6E4B               	movwf	_Low_Sensor+1,c
  5345  0154A2  0E10               	movlw	16
  5346  0154A4  6E4A               	movwf	_Low_Sensor,c
  5347                           
  5348                           ;main.c: 427: ADC_Reading = 0;
  5349  0154A6  0E00               	movlw	0
  5350  0154A8  6F2F               	movwf	(_ADC_Reading+1)& (0+255),b
  5351  0154AA  0E00               	movlw	0
  5352  0154AC  6F2E               	movwf	_ADC_Reading& (0+255),b
  5353                           
  5354                           ;main.c: 428: Close_Pos = 0;
  5355  0154AE  0E00               	movlw	0
  5356  0154B0  6E2C               	movwf	_Close_Pos+1,c
  5357  0154B2  0E00               	movlw	0
  5358  0154B4  6E2B               	movwf	_Close_Pos,c
  5359                           
  5360                           ;main.c: 429: count = 0;
  5361  0154B6  0E00               	movlw	0
  5362  0154B8  6F2D               	movwf	(_count+1)& (0+255),b
  5363  0154BA  0E00               	movlw	0
  5364  0154BC  6F2C               	movwf	_count& (0+255),b
  5365                           
  5366                           ;main.c: 430: T_VAR = 0;
  5367  0154BE  0E00               	movlw	0
  5368  0154C0  6E30               	movwf	_T_VAR+1,c
  5369  0154C2  0E00               	movlw	0
  5370  0154C4  6E2F               	movwf	_T_VAR,c
  5371                           
  5372                           ;main.c: 431: mod = 0;
  5373  0154C6  0E00               	movlw	0
  5374  0154C8  6F33               	movwf	(_mod+1)& (0+255),b
  5375  0154CA  0E00               	movlw	0
  5376  0154CC  6F32               	movwf	_mod& (0+255),b
  5377  0154CE  0012               	return	
  5378  0154D0                     __end_of_Reset_variables:
  5379                           	opt stack 0
  5380                           tosu	equ	0xFFF
  5381                           tosh	equ	0xFFE
  5382                           tosl	equ	0xFFD
  5383                           pclath	equ	0xFFA
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           postinc0	equ	0xFEE
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           fsr1h	equ	0xFE2
  5392                           fsr1l	equ	0xFE1
  5393                           postinc2	equ	0xFDE
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function _MXK_Init *****************
  5397 ;; Defined at:
  5398 ;;		line 33 in file "Library/MXK.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;Total ram usage:        0 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:   16
  5419 ;; This function calls:
  5420 ;;		_LED_Init
  5421 ;;		_Port_Init
  5422 ;;		_Port_SetPin
  5423 ;;		_Port_SetPinType
  5424 ;;		_Port_SetQuadType
  5425 ;;		_Port_SetType
  5426 ;;		_delay_ms
  5427 ;; This function is called by:
  5428 ;;		_main
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text8
  5433  013330                     __ptext8:
  5434                           	opt stack 0
  5435  013330                     _MXK_Init:
  5436                           	opt stack 14
  5437                           
  5438                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5439                           
  5440                           ; BSR set to: 1
  5441                           ;incstack = 0
  5442  013330  0E01               	movlw	1
  5443  013332  6E4C               	movwf	_Bus_State,c
  5444                           
  5445                           ;MXK.c: 36: lQueue = (Function)0;
  5446  013334  0E00               	movlw	0
  5447  013336  0100               	movlb	0	; () banked
  5448  013338  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  5449  01333A  0E00               	movlw	0
  5450  01333C  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  5451  01333E  0E00               	movlw	0
  5452  013340  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5456  013342  0EF1               	movlw	low _PortA
  5457  013344  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5458  013346  0E02               	movlw	high _PortA
  5459  013348  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5460  01334A  0E00               	movlw	0
  5461  01334C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5462  01334E  ECD7  F094         	call	_Port_Init	;wreg free
  5463                           
  5464                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5465  013352  0EA1               	movlw	low _PortB
  5466  013354  0100               	movlb	0	; () banked
  5467  013356  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5468  013358  0E01               	movlw	high _PortB
  5469  01335A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5470  01335C  0E01               	movlw	1
  5471  01335E  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5472  013360  ECD7  F094         	call	_Port_Init	;wreg free
  5473                           
  5474                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5475  013364  0EAB               	movlw	low _PortC
  5476  013366  0100               	movlb	0	; () banked
  5477  013368  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5478  01336A  0E01               	movlw	high _PortC
  5479  01336C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5480  01336E  0E02               	movlw	2
  5481  013370  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5482  013372  ECD7  F094         	call	_Port_Init	;wreg free
  5483                           
  5484                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5485  013376  0E97               	movlw	low _PortD
  5486  013378  0100               	movlb	0	; () banked
  5487  01337A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5488  01337C  0E01               	movlw	high _PortD
  5489  01337E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5490  013380  0E03               	movlw	3
  5491  013382  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5492  013384  ECD7  F094         	call	_Port_Init	;wreg free
  5493                           
  5494                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5495  013388  0E8D               	movlw	low _PortE
  5496  01338A  0100               	movlb	0	; () banked
  5497  01338C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5498  01338E  0E01               	movlw	high _PortE
  5499  013390  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5500  013392  0E04               	movlw	4
  5501  013394  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5502  013396  ECD7  F094         	call	_Port_Init	;wreg free
  5503                           
  5504                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5505  01339A  0EB5               	movlw	low _PortF
  5506  01339C  0100               	movlb	0	; () banked
  5507  01339E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5508  0133A0  0E01               	movlw	high _PortF
  5509  0133A2  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5510  0133A4  0E05               	movlw	5
  5511  0133A6  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5512  0133A8  ECD7  F094         	call	_Port_Init	;wreg free
  5513                           
  5514                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5515  0133AC  0EE7               	movlw	low _PortG
  5516  0133AE  0100               	movlb	0	; () banked
  5517  0133B0  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5518  0133B2  0E02               	movlw	high _PortG
  5519  0133B4  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5520  0133B6  0E06               	movlw	6
  5521  0133B8  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5522  0133BA  ECD7  F094         	call	_Port_Init	;wreg free
  5523                           
  5524                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5525  0133BE  0EB5               	movlw	low _PortF
  5526  0133C0  0100               	movlb	0	; () banked
  5527  0133C2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5528  0133C4  0E01               	movlw	high _PortF
  5529  0133C6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5530  0133C8  0E05               	movlw	5
  5531  0133CA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5532  0133CC  0E00               	movlw	0
  5533  0133CE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5534  0133D0  EC4A  F093         	call	_Port_SetPinType	;wreg free
  5535                           
  5536                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5537  0133D4  0EA1               	movlw	low _PortB
  5538  0133D6  0100               	movlb	0	; () banked
  5539  0133D8  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  5540  0133DA  0E01               	movlw	high _PortB
  5541  0133DC  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5542  0133DE  0E00               	movlw	0
  5543  0133E0  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5544  0133E2  0E00               	movlw	0
  5545  0133E4  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  5546  0133E6  EC94  F08F         	call	_Port_SetQuadType	;wreg free
  5547                           
  5548                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5549  0133EA  0EB5               	movlw	low _PortF
  5550  0133EC  0100               	movlb	0	; () banked
  5551  0133EE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5552  0133F0  0E01               	movlw	high _PortF
  5553  0133F2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5554  0133F4  0E06               	movlw	6
  5555  0133F6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5556  0133F8  0E03               	movlw	3
  5557  0133FA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5558  0133FC  EC4A  F093         	call	_Port_SetPinType	;wreg free
  5559                           
  5560                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5561  013400  0EE7               	movlw	low _PortG
  5562  013402  0100               	movlb	0	; () banked
  5563  013404  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  5564  013406  0E02               	movlw	high _PortG
  5565  013408  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5566  01340A  0E03               	movlw	3
  5567  01340C  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5568  01340E  EC88  F091         	call	_Port_SetType	;wreg free
  5569                           
  5570                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5571  013412  0EE7               	movlw	low _PortG
  5572  013414  0100               	movlb	0	; () banked
  5573  013416  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5574  013418  0E02               	movlw	high _PortG
  5575  01341A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5576  01341C  0E04               	movlw	4
  5577  01341E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5578  013420  0E00               	movlw	0
  5579  013422  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5580  013424  ECBD  F09F         	call	_Port_SetPin	;wreg free
  5581                           
  5582                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5583  013428  0EB5               	movlw	low _PortF
  5584  01342A  0100               	movlb	0	; () banked
  5585  01342C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5586  01342E  0E01               	movlw	high _PortF
  5587  013430  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5588  013432  0E06               	movlw	6
  5589  013434  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5590  013436  0E01               	movlw	1
  5591  013438  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5592  01343A  ECBD  F09F         	call	_Port_SetPin	;wreg free
  5593                           
  5594                           ;MXK.c: 55: LED_Init(eLED1);
  5595  01343E  0E00               	movlw	0
  5596  013440  ECCF  F0A8         	call	_LED_Init
  5597                           
  5598                           ;MXK.c: 56: LED_Init(eLED2);
  5599  013444  0E01               	movlw	1
  5600  013446  ECCF  F0A8         	call	_LED_Init
  5601                           
  5602                           ;MXK.c: 58: PIR1 = 0;
  5603  01344A  0E00               	movlw	0
  5604  01344C  6E9E               	movwf	3998,c	;volatile
  5605                           
  5606                           ;MXK.c: 59: PIR2 = 0;
  5607  01344E  0E00               	movlw	0
  5608  013450  6EA1               	movwf	4001,c	;volatile
  5609                           
  5610                           ;MXK.c: 60: PIR3 = 0;
  5611  013452  0E00               	movlw	0
  5612  013454  6EA4               	movwf	4004,c	;volatile
  5613                           
  5614                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5615  013456  8E9B               	bsf	3995,7,c	;volatile
  5616                           
  5617                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5618  013458  8C9B               	bsf	3995,6,c	;volatile
  5619                           
  5620                           ;MXK.c: 66: delay_ms(100);
  5621  01345A  0E00               	movlw	0
  5622  01345C  0100               	movlb	0	; () banked
  5623  01345E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  5624  013460  0E64               	movlw	100
  5625  013462  6F60               	movwf	delay_ms@ms& (0+255),b
  5626  013464  EC75  F0A8         	call	_delay_ms	;wreg free
  5627                           
  5628                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5629  013468  8ED0               	bsf	4048,7,c	;volatile
  5630  01346A  0012               	return		;funcret
  5631  01346C                     __end_of_MXK_Init:
  5632                           	opt stack 0
  5633                           tosu	equ	0xFFF
  5634                           tosh	equ	0xFFE
  5635                           tosl	equ	0xFFD
  5636                           pclath	equ	0xFFA
  5637                           tblptru	equ	0xFF8
  5638                           tblptrh	equ	0xFF7
  5639                           tblptrl	equ	0xFF6
  5640                           tablat	equ	0xFF5
  5641                           postinc0	equ	0xFEE
  5642                           wreg	equ	0xFE8
  5643                           postdec1	equ	0xFE5
  5644                           fsr1h	equ	0xFE2
  5645                           fsr1l	equ	0xFE1
  5646                           postinc2	equ	0xFDE
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _Port_Init *****************
  5650 ;; Defined at:
  5651 ;;		line 150 in file "Library/Port.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  5654 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5655 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5656 ;;  pPort           1   66[BANK0 ] enum E6786
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  i               1   69[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5668 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;Total ram usage:        6 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:   15
  5675 ;; This function calls:
  5676 ;;		_GetPortPORT
  5677 ;;		_GetPortProperties
  5678 ;;		_GetPortTRIS
  5679 ;;		_Port_Set
  5680 ;;		_Port_SetPinType
  5681 ;;		_Port_SetType
  5682 ;;		_Word_GetPair
  5683 ;; This function is called by:
  5684 ;;		_MXK_Init
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text9
  5689  0129AE                     __ptext9:
  5690                           	opt stack 0
  5691  0129AE                     _Port_Init:
  5692                           	opt stack 14
  5693                           
  5694                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5695                           
  5696                           ;incstack = 0
  5697  0129AE  0100               	movlb	0	; () banked
  5698  0129B0  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5699  0129B2  ECBB  F0A3         	call	_GetPortProperties
  5700  0129B6  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5701  0129BA  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5702  0129BE  0100               	movlb	0	; () banked
  5703  0129C0  C060  FFDE         	movff	?_GetPortProperties,postinc2
  5704  0129C4  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  5705                           
  5706                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5707  0129C8  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5708  0129CA  ECFF  F0A3         	call	_GetPortPORT
  5709  0129CE  0100               	movlb	0	; () banked
  5710  0129D0  EE20 F006          	lfsr	2,6
  5711  0129D4  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5712  0129D6  26D9               	addwf	fsr2l,f,c
  5713  0129D8  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5714  0129DA  22DA               	addwfc	fsr2h,f,c
  5715  0129DC  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5716  0129E0  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5717                           
  5718                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5719  0129E4  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5720  0129E6  ECFF  F0A3         	call	_GetPortPORT
  5721  0129EA  0100               	movlb	0	; () banked
  5722  0129EC  EE20 F004          	lfsr	2,4
  5723  0129F0  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5724  0129F2  26D9               	addwf	fsr2l,f,c
  5725  0129F4  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5726  0129F6  22DA               	addwfc	fsr2h,f,c
  5727  0129F8  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5728  0129FC  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5729                           
  5730                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5731  012A00  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5732  012A02  EC77  F0A3         	call	_GetPortTRIS
  5733  012A06  0100               	movlb	0	; () banked
  5734  012A08  EE20 F002          	lfsr	2,2
  5735  012A0C  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5736  012A0E  26D9               	addwf	fsr2l,f,c
  5737  012A10  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5738  012A12  22DA               	addwfc	fsr2h,f,c
  5739  012A14  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  5740  012A18  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5744  012A1C  EE20 F004          	lfsr	2,4
  5745  012A20  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5746  012A22  26D9               	addwf	fsr2l,f,c
  5747  012A24  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5748  012A26  22DA               	addwfc	fsr2h,f,c
  5749  012A28  CFDE F0A3          	movff	postinc2,??_Port_Init
  5750  012A2C  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5751  012A30  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5752  012A34  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5753  012A38  0E00               	movlw	0
  5754  012A3A  6EDF               	movwf	indf2,c
  5755                           
  5756                           ; BSR set to: 0
  5757                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5758  012A3C  EE20 F002          	lfsr	2,2
  5759  012A40  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5760  012A42  26D9               	addwf	fsr2l,f,c
  5761  012A44  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5762  012A46  22DA               	addwfc	fsr2h,f,c
  5763  012A48  CFDE F0A3          	movff	postinc2,??_Port_Init
  5764  012A4C  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5765  012A50  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5766  012A54  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5767  012A58  0EFF               	movlw	255
  5768  012A5A  6EDF               	movwf	indf2,c
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5772  012A5C  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  5773  012A60  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5774  012A64  0E00               	movlw	0
  5775  012A66  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5776  012A68  EC88  F091         	call	_Port_SetType	;wreg free
  5777                           
  5778                           ;Port.c: 166: UINT8 i;
  5779                           ;Port.c: 167: for (i=0; i<8; i++)
  5780  012A6C  0E00               	movlw	0
  5781  012A6E  0100               	movlb	0	; () banked
  5782  012A70  6FA5               	movwf	Port_Init@i& (0+255),b
  5783  012A72                     l14800:
  5784                           
  5785                           ; BSR set to: 0
  5786  012A72  0E07               	movlw	7
  5787  012A74  65A5               	cpfsgt	Port_Init@i& (0+255),b
  5788  012A76  D031               	goto	l403
  5789  012A78  D04B               	goto	u12020
  5790  012A7A                     
  5791                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5792                           
  5793                           ; BSR set to: 0
  5794  012A7A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5795  012A7E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5796  012A82  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5797  012A86  0E03               	movlw	3
  5798  012A88  0100               	movlb	0	; () banked
  5799  012A8A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5800  012A8C  EC4A  F093         	call	_Port_SetPinType	;wreg free
  5801                           
  5802                           ;Port.c: 173: break;
  5803  012A90  D03C               	goto	l405
  5804  012A92                     
  5805                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5806  012A92  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5807  012A96  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5808  012A9A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5809  012A9E  0E02               	movlw	2
  5810  012AA0  0100               	movlb	0	; () banked
  5811  012AA2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5812  012AA4  EC4A  F093         	call	_Port_SetPinType	;wreg free
  5813                           
  5814                           ;Port.c: 176: break;
  5815  012AA8  D030               	goto	l405
  5816  012AAA                     
  5817                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5818  012AAA  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5819  012AAE  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5820  012AB2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5821  012AB6  0E01               	movlw	1
  5822  012AB8  0100               	movlb	0	; () banked
  5823  012ABA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5824  012ABC  EC4A  F093         	call	_Port_SetPinType	;wreg free
  5825                           
  5826                           ;Port.c: 179: break;
  5827  012AC0  D024               	goto	l405
  5828  012AC2                     
  5829                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5830  012AC2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5831  012AC6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5832  012ACA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5833  012ACE  0E00               	movlw	0
  5834  012AD0  0100               	movlb	0	; () banked
  5835  012AD2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5836  012AD4  EC4A  F093         	call	_Port_SetPinType	;wreg free
  5837                           
  5838                           ;Port.c: 183: }
  5839                           
  5840                           ;Port.c: 182: break;
  5841  012AD8  D018               	goto	l405
  5842  012ADA                     l403:
  5843  012ADA  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5844  012ADE  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5845  012AE2  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  5846  012AE6  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  5847  012AEA  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  5848  012AEE  EC48  F0AD         	call	_Word_GetPair	;wreg free
  5849                           
  5850                           ; Switch size 1, requested type "space"
  5851                           ; Number of cases is 4, Range of values is 0 to 3
  5852                           ; switch strategies available:
  5853                           ; Name         Instructions Cycles
  5854                           ; simple_byte           13     7 (average)
  5855                           ;	Chosen strategy is simple_byte
  5856  012AF2  0A00               	xorlw	0	; case 0
  5857  012AF4  B4D8               	btfsc	status,2,c
  5858  012AF6  D7C1               	goto	l404
  5859  012AF8  0A01               	xorlw	1	; case 1
  5860  012AFA  B4D8               	btfsc	status,2,c
  5861  012AFC  D7D6               	goto	l407
  5862  012AFE  0A03               	xorlw	3	; case 2
  5863  012B00  B4D8               	btfsc	status,2,c
  5864  012B02  D7C7               	goto	l406
  5865  012B04  0A01               	xorlw	1	; case 3
  5866  012B06  B4D8               	btfsc	status,2,c
  5867  012B08  D7DC               	goto	l408
  5868  012B0A                     l405:
  5869  012B0A  0100               	movlb	0	; () banked
  5870  012B0C  2BA5               	incf	Port_Init@i& (0+255),f,b
  5871  012B0E  D7B1               	goto	l14800
  5872  012B10                     u12020:
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;Port.c: 184: }
  5876                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5877                           
  5878                           ; BSR set to: 0
  5879  012B10  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  5880  012B14  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5881  012B18  0E00               	movlw	0
  5882  012B1A  6F71               	movwf	Port_Set@pValue& (0+255),b
  5883  012B1C  ECC3  F08B         	call	_Port_Set	;wreg free
  5884  012B20  0012               	return		;funcret
  5885  012B22                     __end_of_Port_Init:
  5886                           	opt stack 0
  5887                           tosu	equ	0xFFF
  5888                           tosh	equ	0xFFE
  5889                           tosl	equ	0xFFD
  5890                           pclath	equ	0xFFA
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           postinc0	equ	0xFEE
  5896                           wreg	equ	0xFE8
  5897                           postdec1	equ	0xFE5
  5898                           fsr1h	equ	0xFE2
  5899                           fsr1l	equ	0xFE1
  5900                           indf2	equ	0xFDF
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           fsr2h	equ	0xFDA
  5904                           fsr2l	equ	0xFD9
  5905                           status	equ	0xFD8
  5906                           
  5907 ;; *************** function _Port_SetType *****************
  5908 ;; Defined at:
  5909 ;;		line 513 in file "Library/Port.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5912 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5913 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5914 ;;  pType           1   60[BANK0 ] enum E6795
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;  Output          1   63[BANK0 ] enum E6475
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  1    wreg      enum E6475
  5919 ;; Registers used:
  5920 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5926 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;Total ram usage:        6 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:   14
  5933 ;; This function calls:
  5934 ;;		_Port_CheckPortType
  5935 ;;		_Word_SetPair
  5936 ;; This function is called by:
  5937 ;;		_Port_Init
  5938 ;;		_MXK_Init
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text10
  5943  012310                     __ptext10:
  5944                           	opt stack 0
  5945  012310                     _Port_SetType:
  5946                           	opt stack 15
  5947                           
  5948                           ;Port.c: 515: ePinError Output = ePinErrorState;
  5949                           
  5950                           ;incstack = 0
  5951  012310  0E05               	movlw	5
  5952  012312  0100               	movlb	0	; () banked
  5953  012314  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5954                           
  5955                           ;Port.c: 517: switch (pType)
  5956  012316  D06E               	goto	l509
  5957  012318                     
  5958                           ; BSR set to: 0
  5959                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  5960                           
  5961                           ; BSR set to: 0
  5962  012318  EE20 F002          	lfsr	2,2
  5963  01231C  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5964  01231E  26D9               	addwf	fsr2l,f,c
  5965  012320  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5966  012322  22DA               	addwfc	fsr2h,f,c
  5967  012324  CFDE F09D          	movff	postinc2,??_Port_SetType
  5968  012328  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5969  01232C  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  5970  012330  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  5971  012334  0EFF               	movlw	255
  5972  012336  D05C               	goto	L3
  5973  012338                     
  5974                           ; BSR set to: 0
  5975                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  5976                           
  5977                           ; BSR set to: 0
  5978  012338  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  5979  01233C  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  5980  012340  0E01               	movlw	1
  5981  012342  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  5982  012344  ECAF  F0AB         	call	_Port_CheckPortType	;wreg free
  5983  012348  0100               	movlb	0	; () banked
  5984  01234A  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5985  01234C  519F               	movf	Port_SetType@Output& (0+255),w,b
  5986  01234E  A4D8               	btfss	status,2,c
  5987  012350  0012               	return	
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;Port.c: 527: {
  5991                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  5992  012352  EE20 F002          	lfsr	2,2
  5993  012356  519A               	movf	Port_SetType@pInput& (0+255),w,b
  5994  012358  26D9               	addwf	fsr2l,f,c
  5995  01235A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  5996  01235C  22DA               	addwfc	fsr2h,f,c
  5997  01235E  CFDE F09D          	movff	postinc2,??_Port_SetType
  5998  012362  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  5999  012366  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6000  01236A  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6001  01236E  0E00               	movlw	0
  6002  012370  6EDF               	movwf	indf2,c
  6003                           
  6004                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  6005  012372  EE20 F004          	lfsr	2,4
  6006  012376  D02F               	goto	L17
  6007  012378                     
  6008                           ; BSR set to: 0
  6009                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  6010                           
  6011                           ; BSR set to: 0
  6012  012378  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6013  01237C  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6014  012380  0E02               	movlw	2
  6015  012382  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6016  012384  ECAF  F0AB         	call	_Port_CheckPortType	;wreg free
  6017  012388  0100               	movlb	0	; () banked
  6018  01238A  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6019  01238C  519F               	movf	Port_SetType@Output& (0+255),w,b
  6020  01238E  A4D8               	btfss	status,2,c
  6021  012390  0012               	return	
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;Port.c: 538: {
  6025                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  6026  012392  EE20 F002          	lfsr	2,2
  6027  012396  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6028  012398  26D9               	addwf	fsr2l,f,c
  6029  01239A  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6030  01239C  22DA               	addwfc	fsr2h,f,c
  6031  01239E  CFDE F09D          	movff	postinc2,??_Port_SetType
  6032  0123A2  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6033  0123A6  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6034  0123AA  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6035  0123AE  0EFF               	movlw	255
  6036  0123B0  6EDF               	movwf	indf2,c
  6037                           
  6038                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  6039  0123B2  EE20 F004          	lfsr	2,4
  6040  0123B6  D7B2               	goto	L4
  6041  0123B8                     
  6042                           ; BSR set to: 0
  6043                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  6044                           
  6045                           ; BSR set to: 0
  6046  0123B8  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6047  0123BC  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6048  0123C0  0E00               	movlw	0
  6049  0123C2  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6050  0123C4  ECAF  F0AB         	call	_Port_CheckPortType	;wreg free
  6051  0123C8  0100               	movlb	0	; () banked
  6052  0123CA  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6053  0123CC  519F               	movf	Port_SetType@Output& (0+255),w,b
  6054  0123CE  A4D8               	btfss	status,2,c
  6055  0123D0  0012               	return	
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;Port.c: 549: {
  6059                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  6060  0123D2  EE20 F002          	lfsr	2,2
  6061  0123D6                     L17:
  6062  0123D6  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6063  0123D8  26D9               	addwf	fsr2l,f,c
  6064  0123DA  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6065  0123DC  22DA               	addwfc	fsr2h,f,c
  6066  0123DE  CFDE F09D          	movff	postinc2,??_Port_SetType
  6067  0123E2  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6068  0123E6  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6069  0123EA  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6070  0123EE  0E00               	movlw	0
  6071  0123F0                     L3:
  6072  0123F0  6EDF               	movwf	indf2,c
  6073                           
  6074                           ;Port.c: 552: }
  6075  0123F2  D00D               	goto	l511
  6076  0123F4                     l509:
  6077                           
  6078                           ; BSR set to: 0
  6079                           
  6080                           ; BSR set to: 0
  6081  0123F4  519C               	movf	Port_SetType@pType& (0+255),w,b
  6082                           
  6083                           ; Switch size 1, requested type "space"
  6084                           ; Number of cases is 4, Range of values is 0 to 3
  6085                           ; switch strategies available:
  6086                           ; Name         Instructions Cycles
  6087                           ; simple_byte           13     7 (average)
  6088                           ;	Chosen strategy is simple_byte
  6089  0123F6  0A00               	xorlw	0	; case 0
  6090  0123F8  B4D8               	btfsc	status,2,c
  6091  0123FA  D78E               	goto	l510
  6092  0123FC  0A01               	xorlw	1	; case 1
  6093  0123FE  B4D8               	btfsc	status,2,c
  6094  012400  D79B               	goto	l512
  6095  012402  0A03               	xorlw	3	; case 2
  6096  012404  B4D8               	btfsc	status,2,c
  6097  012406  D7B8               	goto	l516
  6098  012408  0A01               	xorlw	1	; case 3
  6099  01240A  B4D8               	btfsc	status,2,c
  6100  01240C  D7D5               	goto	l519
  6101  01240E                     l511:
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6105                           
  6106                           ; BSR set to: 0
  6107  01240E  0E08               	movlw	8
  6108  012410  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6109  012412  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6110  012414  0E00               	movlw	0
  6111  012416  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6112  012418  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6113  01241A  0E00               	movlw	0
  6114  01241C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6115  01241E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6116  012422  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6117                           
  6118                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6119  012426  0E08               	movlw	8
  6120  012428  0100               	movlb	0	; () banked
  6121  01242A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6122  01242C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6123  01242E  0E00               	movlw	0
  6124  012430  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6125  012432  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6126  012434  0E01               	movlw	1
  6127  012436  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6128  012438  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6129  01243C  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6130                           
  6131                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6132  012440  0E08               	movlw	8
  6133  012442  0100               	movlb	0	; () banked
  6134  012444  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6135  012446  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6136  012448  0E00               	movlw	0
  6137  01244A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6138  01244C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6139  01244E  0E02               	movlw	2
  6140  012450  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6141  012452  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6142  012456  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6143                           
  6144                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6145  01245A  0E08               	movlw	8
  6146  01245C  0100               	movlb	0	; () banked
  6147  01245E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6148  012460  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6149  012462  0E00               	movlw	0
  6150  012464  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6151  012466  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6152  012468  0E03               	movlw	3
  6153  01246A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6154  01246C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6155  012470  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6156                           
  6157                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6158  012474  0E08               	movlw	8
  6159  012476  0100               	movlb	0	; () banked
  6160  012478  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6161  01247A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6162  01247C  0E00               	movlw	0
  6163  01247E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6164  012480  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6165  012482  0E04               	movlw	4
  6166  012484  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6167  012486  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6168  01248A  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6169                           
  6170                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6171  01248E  0E08               	movlw	8
  6172  012490  0100               	movlb	0	; () banked
  6173  012492  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6174  012494  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6175  012496  0E00               	movlw	0
  6176  012498  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6177  01249A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6178  01249C  0E05               	movlw	5
  6179  01249E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6180  0124A0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6181  0124A4  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6182                           
  6183                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6184  0124A8  0E08               	movlw	8
  6185  0124AA  0100               	movlb	0	; () banked
  6186  0124AC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6187  0124AE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6188  0124B0  0E00               	movlw	0
  6189  0124B2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6190  0124B4  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6191  0124B6  0E06               	movlw	6
  6192  0124B8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6193  0124BA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6194  0124BE  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6195                           
  6196                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6197  0124C2  0E08               	movlw	8
  6198  0124C4  0100               	movlb	0	; () banked
  6199  0124C6  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6200  0124C8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6201  0124CA  0E00               	movlw	0
  6202  0124CC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6203  0124CE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6204  0124D0  0E07               	movlw	7
  6205  0124D2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6206  0124D4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6207  0124D8  ECA5  F0AC         	call	_Word_SetPair	;wreg free
  6208  0124DC  0012               	return	
  6209  0124DE                     __end_of_Port_SetType:
  6210                           	opt stack 0
  6211                           tosu	equ	0xFFF
  6212                           tosh	equ	0xFFE
  6213                           tosl	equ	0xFFD
  6214                           pclath	equ	0xFFA
  6215                           tblptru	equ	0xFF8
  6216                           tblptrh	equ	0xFF7
  6217                           tblptrl	equ	0xFF6
  6218                           tablat	equ	0xFF5
  6219                           postinc0	equ	0xFEE
  6220                           wreg	equ	0xFE8
  6221                           postdec1	equ	0xFE5
  6222                           fsr1h	equ	0xFE2
  6223                           fsr1l	equ	0xFE1
  6224                           indf2	equ	0xFDF
  6225                           postinc2	equ	0xFDE
  6226                           postdec2	equ	0xFDD
  6227                           fsr2h	equ	0xFDA
  6228                           fsr2l	equ	0xFD9
  6229                           status	equ	0xFD8
  6230                           
  6231 ;; *************** function _Port_CheckPortType *****************
  6232 ;; Defined at:
  6233 ;;		line 138 in file "Library/Port.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6236 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6237 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6238 ;;  pDrive          1   56[BANK0 ] enum E6469
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;  Output          1   57[BANK0 ] enum E6475
  6241 ;; Return value:  Size  Location     Type
  6242 ;;                  1    wreg      enum E6475
  6243 ;; Registers used:
  6244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6250 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6254 ;;Total ram usage:        4 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:   13
  6257 ;; This function calls:
  6258 ;;		_Port_CheckQuadType
  6259 ;; This function is called by:
  6260 ;;		_Port_SetType
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text11
  6265  01575E                     __ptext11:
  6266                           	opt stack 0
  6267  01575E                     _Port_CheckPortType:
  6268                           	opt stack 15
  6269                           
  6270                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6271                           
  6272                           ;incstack = 0
  6273  01575E  0E05               	movlw	5
  6274  015760  0100               	movlb	0	; () banked
  6275  015762  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6279  015764  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6280  015768  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6281  01576C  0E00               	movlw	0
  6282  01576E  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6283  015770  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6284  015774  ECF2  F0A9         	call	_Port_CheckQuadType	;wreg free
  6285  015778  0100               	movlb	0	; () banked
  6286  01577A  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6287  01577C  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6288  01577E  A4D8               	btfss	status,2,c
  6289  015780  D00C               	goto	l397
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6293  015782  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6294  015786  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6295  01578A  0E01               	movlw	1
  6296  01578C  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6297  01578E  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6298  015792  ECF2  F0A9         	call	_Port_CheckQuadType	;wreg free
  6299  015796  0100               	movlb	0	; () banked
  6300  015798  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6301  01579A                     l397:
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;Port.c: 146: return Output;
  6305                           
  6306                           ; BSR set to: 0
  6307  01579A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6308  01579C  0012               	return	
  6309  01579E                     __end_of_Port_CheckPortType:
  6310                           	opt stack 0
  6311                           tosu	equ	0xFFF
  6312                           tosh	equ	0xFFE
  6313                           tosl	equ	0xFFD
  6314                           pclath	equ	0xFFA
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           postinc0	equ	0xFEE
  6320                           wreg	equ	0xFE8
  6321                           postdec1	equ	0xFE5
  6322                           fsr1h	equ	0xFE2
  6323                           fsr1l	equ	0xFE1
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _Port_Set *****************
  6332 ;; Defined at:
  6333 ;;		line 570 in file "Library/Port.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6336 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6337 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6338 ;;  pValue          1   17[BANK0 ] unsigned char 
  6339 ;; Auto vars:     Size  Location     Type
  6340 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6341 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6342 ;;  Type            1   38[BANK0 ] enum E6795
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  1    wreg      void 
  6345 ;; Registers used:
  6346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6352 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6356 ;;Total ram usage:       24 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:   10
  6359 ;; This function calls:
  6360 ;;		_Byte_SetByte
  6361 ;;		_Word_GetPair
  6362 ;; This function is called by:
  6363 ;;		_Port_Init
  6364 ;;		_Port_Toggle
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text12
  6369  011786                     __ptext12:
  6370                           	opt stack 0
  6371  011786                     _Port_Set:
  6372                           	opt stack 18
  6373                           
  6374                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;incstack = 0
  6378  011786  0E08               	movlw	8
  6379  011788  0100               	movlb	0	; () banked
  6380  01178A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6381  01178C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6382  01178E  0E00               	movlw	0
  6383  011790  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6384  011792  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6385  011794  0E00               	movlw	0
  6386  011796  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6387  011798  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6388  01179C  0100               	movlb	0	; () banked
  6389  01179E  6F86               	movwf	Port_Set@Type& (0+255),b
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6393  0117A0  5186               	movf	Port_Set@Type& (0+255),w,b
  6394  0117A2  6F72               	movwf	??_Port_Set& (0+255),b
  6395  0117A4  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6396  0117A6  0E0E               	movlw	14
  6397  0117A8                     u11555:
  6398  0117A8  90D8               	bcf	status,0,c
  6399  0117AA  3772               	rlcf	??_Port_Set& (0+255),f,b
  6400  0117AC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6401  0117AE  2EE8               	decfsz	wreg,f,c
  6402  0117B0  D7FB               	goto	u11555
  6403  0117B2  5186               	movf	Port_Set@Type& (0+255),w,b
  6404  0117B4  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6405  0117B6  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  6406  0117B8  0E0C               	movlw	12
  6407  0117BA                     u11565:
  6408  0117BA  90D8               	bcf	status,0,c
  6409  0117BC  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6410  0117BE  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6411  0117C0  2EE8               	decfsz	wreg,f,c
  6412  0117C2  D7FB               	goto	u11565
  6413  0117C4  5186               	movf	Port_Set@Type& (0+255),w,b
  6414  0117C6  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  6415  0117C8  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  6416  0117CA  0E0A               	movlw	10
  6417  0117CC                     u11575:
  6418  0117CC  90D8               	bcf	status,0,c
  6419  0117CE  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6420  0117D0  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6421  0117D2  2EE8               	decfsz	wreg,f,c
  6422  0117D4  D7FB               	goto	u11575
  6423  0117D6  5186               	movf	Port_Set@Type& (0+255),w,b
  6424  0117D8  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  6425  0117DA  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  6426  0117DC  5186               	movf	Port_Set@Type& (0+255),w,b
  6427  0117DE  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  6428  0117E0  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  6429  0117E2  0E06               	movlw	6
  6430  0117E4                     u11585:
  6431  0117E4  90D8               	bcf	status,0,c
  6432  0117E6  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6433  0117E8  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6434  0117EA  2EE8               	decfsz	wreg,f,c
  6435  0117EC  D7FB               	goto	u11585
  6436  0117EE  5186               	movf	Port_Set@Type& (0+255),w,b
  6437  0117F0  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  6438  0117F2  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  6439  0117F4  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  6440  0117F6  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  6441  0117F8  0EF0               	movlw	240
  6442  0117FA  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  6443  0117FC  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6444  0117FE  0B0F               	andlw	15
  6445  011800  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6446  011802  0EF0               	movlw	240
  6447  011804  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  6448  011806  5186               	movf	Port_Set@Type& (0+255),w,b
  6449  011808  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  6450  01180A  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  6451  01180C  90D8               	bcf	status,0,c
  6452  01180E  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6453  011810  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6454  011812  90D8               	bcf	status,0,c
  6455  011814  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6456  011816  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6457  011818  5186               	movf	Port_Set@Type& (0+255),w,b
  6458  01181A  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  6459  01181C  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  6460  01181E  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  6461  011820  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6462  011822  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  6463  011824  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6464  011826  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6465  011828  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6466  01182A  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  6467  01182C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6468  01182E  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  6469  011830  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6470  011832  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  6471  011834  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6472  011836  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  6473  011838  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6474  01183A  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  6475  01183C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6476  01183E  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  6477  011840  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6478  011842  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  6479  011844  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6480  011846  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6481  011848  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6482  01184A  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  6483  01184C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6484  01184E  5172               	movf	??_Port_Set& (0+255),w,b
  6485  011850  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6486  011852  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  6487  011854  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6488  011856  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6489  011858  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;Port.c: 574: UINT16 TypeActual = Type;
  6493  01185A  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  6494  01185E  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6498  011860  0E08               	movlw	8
  6499  011862  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6500  011864  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6501  011866  0E00               	movlw	0
  6502  011868  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6503  01186A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6504  01186C  0E01               	movlw	1
  6505  01186E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6506  011870  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6507  011874  0100               	movlb	0	; () banked
  6508  011876  6F72               	movwf	??_Port_Set& (0+255),b
  6509  011878  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6510  01187A  90D8               	bcf	status,0,c
  6511  01187C  3772               	rlcf	??_Port_Set& (0+255),f,b
  6512  01187E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6513  011880  90D8               	bcf	status,0,c
  6514  011882  3772               	rlcf	??_Port_Set& (0+255),f,b
  6515  011884  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6516  011886  5172               	movf	??_Port_Set& (0+255),w,b
  6517  011888  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6518  01188A  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6519  01188C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6523  01188E  0E08               	movlw	8
  6524  011890  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6525  011892  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6526  011894  0E00               	movlw	0
  6527  011896  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6528  011898  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6529  01189A  0E02               	movlw	2
  6530  01189C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6531  01189E  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6532  0118A2  0100               	movlb	0	; () banked
  6533  0118A4  6F72               	movwf	??_Port_Set& (0+255),b
  6534  0118A6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6535  0118A8  3B72               	swapf	??_Port_Set& (0+255),f,b
  6536  0118AA  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  6537  0118AC  0EF0               	movlw	240
  6538  0118AE  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  6539  0118B0  5172               	movf	??_Port_Set& (0+255),w,b
  6540  0118B2  0B0F               	andlw	15
  6541  0118B4  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6542  0118B6  0EF0               	movlw	240
  6543  0118B8  1772               	andwf	??_Port_Set& (0+255),f,b
  6544  0118BA  5172               	movf	??_Port_Set& (0+255),w,b
  6545  0118BC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6546  0118BE  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6547  0118C0  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6551  0118C2  0E08               	movlw	8
  6552  0118C4  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6553  0118C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6554  0118C8  0E00               	movlw	0
  6555  0118CA  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6556  0118CC  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6557  0118CE  0E03               	movlw	3
  6558  0118D0  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6559  0118D2  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6560  0118D6  0100               	movlb	0	; () banked
  6561  0118D8  6F72               	movwf	??_Port_Set& (0+255),b
  6562  0118DA  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6563  0118DC  0E06               	movlw	6
  6564  0118DE                     u11595:
  6565  0118DE  90D8               	bcf	status,0,c
  6566  0118E0  3772               	rlcf	??_Port_Set& (0+255),f,b
  6567  0118E2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6568  0118E4  2EE8               	decfsz	wreg,f,c
  6569  0118E6  D7FB               	goto	u11595
  6570  0118E8  5172               	movf	??_Port_Set& (0+255),w,b
  6571  0118EA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6572  0118EC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6573  0118EE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6577  0118F0  0E08               	movlw	8
  6578  0118F2  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6579  0118F4  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6580  0118F6  0E00               	movlw	0
  6581  0118F8  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6582  0118FA  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6583  0118FC  0E04               	movlw	4
  6584  0118FE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6585  011900  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6586  011904  0100               	movlb	0	; () banked
  6587  011906  6F72               	movwf	??_Port_Set& (0+255),b
  6588  011908  5172               	movf	??_Port_Set& (0+255),w,b
  6589  01190A  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6590  01190C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6591  01190E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6592  011910  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6593  011912  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6594  011914  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6598  011916  0E08               	movlw	8
  6599  011918  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6600  01191A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6601  01191C  0E00               	movlw	0
  6602  01191E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6603  011920  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6604  011922  0E05               	movlw	5
  6605  011924  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6606  011926  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6607  01192A  0100               	movlb	0	; () banked
  6608  01192C  6F72               	movwf	??_Port_Set& (0+255),b
  6609  01192E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6610  011930  0E0A               	movlw	10
  6611  011932                     u11605:
  6612  011932  90D8               	bcf	status,0,c
  6613  011934  3772               	rlcf	??_Port_Set& (0+255),f,b
  6614  011936  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6615  011938  2EE8               	decfsz	wreg,f,c
  6616  01193A  D7FB               	goto	u11605
  6617  01193C  5172               	movf	??_Port_Set& (0+255),w,b
  6618  01193E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6619  011940  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6620  011942  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6624  011944  0E08               	movlw	8
  6625  011946  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6626  011948  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6627  01194A  0E00               	movlw	0
  6628  01194C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6629  01194E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6630  011950  0E06               	movlw	6
  6631  011952  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6632  011954  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6633  011958  0100               	movlb	0	; () banked
  6634  01195A  6F72               	movwf	??_Port_Set& (0+255),b
  6635  01195C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6636  01195E  0E0C               	movlw	12
  6637  011960                     u11615:
  6638  011960  90D8               	bcf	status,0,c
  6639  011962  3772               	rlcf	??_Port_Set& (0+255),f,b
  6640  011964  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6641  011966  2EE8               	decfsz	wreg,f,c
  6642  011968  D7FB               	goto	u11615
  6643  01196A  5172               	movf	??_Port_Set& (0+255),w,b
  6644  01196C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6645  01196E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6646  011970  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6650  011972  0E08               	movlw	8
  6651  011974  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6652  011976  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6653  011978  0E00               	movlw	0
  6654  01197A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6655  01197C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6656  01197E  0E07               	movlw	7
  6657  011980  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6658  011982  EC48  F0AD         	call	_Word_GetPair	;wreg free
  6659  011986  0100               	movlb	0	; () banked
  6660  011988  6F72               	movwf	??_Port_Set& (0+255),b
  6661  01198A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6662  01198C  0E0E               	movlw	14
  6663  01198E                     u11625:
  6664  01198E  90D8               	bcf	status,0,c
  6665  011990  3772               	rlcf	??_Port_Set& (0+255),f,b
  6666  011992  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6667  011994  2EE8               	decfsz	wreg,f,c
  6668  011996  D7FB               	goto	u11625
  6669  011998  5172               	movf	??_Port_Set& (0+255),w,b
  6670  01199A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6671  01199C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6672  01199E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6673                           
  6674                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6675  0119A0  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  6676  0119A2  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6677  0119A4  E144               	bnz	l528
  6678  0119A6  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6679  0119A8  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6680  0119AA  A4D8               	btfss	status,2,c
  6681  0119AC  0012               	return	
  6682  0119AE  D030               	goto	l526
  6683  0119B0                     
  6684                           ; BSR set to: 0
  6685                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6686                           
  6687                           ; BSR set to: 0
  6688  0119B0  EE20 F002          	lfsr	2,2
  6689  0119B4  516F               	movf	Port_Set@pInput& (0+255),w,b
  6690  0119B6  26D9               	addwf	fsr2l,f,c
  6691  0119B8  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6692  0119BA  22DA               	addwfc	fsr2h,f,c
  6693  0119BC  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6694  0119C0  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6695  0119C4  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6696  0119C8  ECF4  F0AF         	call	_Byte_SetByte	;wreg free
  6697                           
  6698                           ;Port.c: 594: break;
  6699  0119CC  0012               	return	
  6700  0119CE                     
  6701                           ;Port.c: 597: pValue = ~pValue;
  6702  0119CE  0100               	movlb	0	; () banked
  6703  0119D0  1F71               	comf	Port_Set@pValue& (0+255),f,b
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6707  0119D2  EE20 F002          	lfsr	2,2
  6708  0119D6  516F               	movf	Port_Set@pInput& (0+255),w,b
  6709  0119D8  26D9               	addwf	fsr2l,f,c
  6710  0119DA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6711  0119DC  22DA               	addwfc	fsr2h,f,c
  6712  0119DE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6713  0119E2  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6714  0119E6  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6715  0119EA  ECF4  F0AF         	call	_Byte_SetByte	;wreg free
  6716                           
  6717                           ;Port.c: 599: break;
  6718  0119EE  0012               	return	
  6719  0119F0                     
  6720                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6721  0119F0  0100               	movlb	0	; () banked
  6722  0119F2  EE20 F004          	lfsr	2,4
  6723  0119F6  516F               	movf	Port_Set@pInput& (0+255),w,b
  6724  0119F8  26D9               	addwf	fsr2l,f,c
  6725  0119FA  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6726  0119FC  22DA               	addwfc	fsr2h,f,c
  6727  0119FE  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6728  011A02  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6729  011A06  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6730  011A0A  ECF4  F0AF         	call	_Byte_SetByte	;wreg free
  6731                           
  6732                           ;Port.c: 606: }
  6733                           
  6734                           ;Port.c: 605: break;
  6735                           
  6736                           ;Port.c: 604: default:
  6737                           
  6738                           ;Port.c: 603: break;
  6739  011A0E  0012               	return	
  6740  011A10                     l526:
  6741  011A10  0100               	movlb	0	; () banked
  6742  011A12  5186               	movf	Port_Set@Type& (0+255),w,b
  6743                           
  6744                           ; Switch size 1, requested type "space"
  6745                           ; Number of cases is 4, Range of values is 0 to 3
  6746                           ; switch strategies available:
  6747                           ; Name         Instructions Cycles
  6748                           ; simple_byte           13     7 (average)
  6749                           ;	Chosen strategy is simple_byte
  6750  011A14  0A00               	xorlw	0	; case 0
  6751  011A16  B4D8               	btfsc	status,2,c
  6752  011A18  0012               	return	
  6753  011A1A  0A01               	xorlw	1	; case 1
  6754  011A1C  B4D8               	btfsc	status,2,c
  6755  011A1E  D7C8               	goto	l529
  6756  011A20  0A03               	xorlw	3	; case 2
  6757  011A22  B4D8               	btfsc	status,2,c
  6758  011A24  D7D4               	goto	l531
  6759  011A26  0A01               	xorlw	1	; case 3
  6760  011A28  A4D8               	btfss	status,2,c
  6761                           
  6762                           ; BSR set to: 0
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;Port.c: 607: }
  6766  011A2A  0012               	return	
  6767  011A2C  D7E1               	goto	l532
  6768  011A2E                     l528:
  6769  011A2E  0012               	return		;funcret
  6770  011A30                     __end_of_Port_Set:
  6771                           	opt stack 0
  6772                           tosu	equ	0xFFF
  6773                           tosh	equ	0xFFE
  6774                           tosl	equ	0xFFD
  6775                           pclath	equ	0xFFA
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           postinc0	equ	0xFEE
  6781                           wreg	equ	0xFE8
  6782                           postdec1	equ	0xFE5
  6783                           fsr1h	equ	0xFE2
  6784                           fsr1l	equ	0xFE1
  6785                           indf2	equ	0xFDF
  6786                           postinc2	equ	0xFDE
  6787                           postdec2	equ	0xFDD
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function _Byte_SetByte *****************
  6793 ;; Defined at:
  6794 ;;		line 110 in file "Library/Types.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6797 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6798 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6799 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6800 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6801 ;;		 -> NULL(0), 
  6802 ;;  pValue          1    2[BANK0 ] unsigned char 
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;		None
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		fsr2l, fsr2h
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6814 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;Total ram usage:        3 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    7
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_Port_Set
  6825 ;;		_I2C_Init
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text13
  6830  015FE8                     __ptext13:
  6831                           	opt stack 0
  6832  015FE8                     _Byte_SetByte:
  6833                           	opt stack 20
  6834                           
  6835                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6836                           
  6837                           ;incstack = 0
  6838  015FE8  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6839  015FEC  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6840  015FF0  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  6841  015FF4  0012               	return		;funcret
  6842  015FF6                     __end_of_Byte_SetByte:
  6843                           	opt stack 0
  6844                           tosu	equ	0xFFF
  6845                           tosh	equ	0xFFE
  6846                           tosl	equ	0xFFD
  6847                           pclath	equ	0xFFA
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           postinc0	equ	0xFEE
  6853                           wreg	equ	0xFE8
  6854                           postdec1	equ	0xFE5
  6855                           fsr1h	equ	0xFE2
  6856                           fsr1l	equ	0xFE1
  6857                           indf2	equ	0xFDF
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _GetPortTRIS *****************
  6865 ;; Defined at:
  6866 ;;		line 67 in file "Library/Port.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  pInput          1    wreg     enum E6786
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;  pInput          1    2[BANK0 ] enum E6786
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  2    0[BANK0 ] PTR struct Byte
  6873 ;; Registers used:
  6874 ;;		wreg, status,2, status,0
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6880 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;Total ram usage:        3 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    7
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_Port_Init
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text14
  6895  0146EE                     __ptext14:
  6896                           	opt stack 0
  6897  0146EE                     _GetPortTRIS:
  6898                           	opt stack 21
  6899                           
  6900                           ;incstack = 0
  6901                           ;GetPortTRIS@pInput stored from wreg
  6902  0146EE  0100               	movlb	0	; () banked
  6903  0146F0  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  6904                           
  6905                           ;Port.c: 69: switch (pInput)
  6906  0146F2  D029               	goto	l363
  6907  0146F4                     
  6908                           ;Port.c: 72: return (BytePtr)&TRISA;
  6909  0146F4  0E92               	movlw	146
  6910  0146F6  0100               	movlb	0	; () banked
  6911  0146F8  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6912  0146FA  0E0F               	movlw	15
  6913  0146FC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6914                           
  6915                           ; BSR set to: 0
  6916  0146FE  0012               	return	
  6917  014700                     
  6918                           ; BSR set to: 0
  6919                           ;Port.c: 74: return (BytePtr)&TRISB;
  6920                           
  6921                           ; BSR set to: 0
  6922  014700  0E93               	movlw	147
  6923  014702  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6924  014704  0E0F               	movlw	15
  6925  014706  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6926                           
  6927                           ; BSR set to: 0
  6928  014708  0012               	return	
  6929  01470A                     
  6930                           ; BSR set to: 0
  6931                           ;Port.c: 76: return (BytePtr)&TRISC;
  6932                           
  6933                           ; BSR set to: 0
  6934  01470A  0E94               	movlw	148
  6935  01470C  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6936  01470E  0E0F               	movlw	15
  6937  014710  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6938                           
  6939                           ; BSR set to: 0
  6940  014712  0012               	return	
  6941  014714                     
  6942                           ; BSR set to: 0
  6943                           ;Port.c: 78: return (BytePtr)&TRISD;
  6944                           
  6945                           ; BSR set to: 0
  6946  014714  0E95               	movlw	149
  6947  014716  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6948  014718  0E0F               	movlw	15
  6949  01471A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6950                           
  6951                           ; BSR set to: 0
  6952  01471C  0012               	return	
  6953  01471E                     
  6954                           ; BSR set to: 0
  6955                           ;Port.c: 80: return (BytePtr)&TRISE;
  6956                           
  6957                           ; BSR set to: 0
  6958  01471E  0E96               	movlw	150
  6959  014720  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6960  014722  0E0F               	movlw	15
  6961  014724  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6962                           
  6963                           ; BSR set to: 0
  6964  014726  0012               	return	
  6965  014728                     
  6966                           ; BSR set to: 0
  6967                           ;Port.c: 82: return (BytePtr)&TRISF;
  6968                           
  6969                           ; BSR set to: 0
  6970  014728  0E97               	movlw	151
  6971  01472A  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6972  01472C  0E0F               	movlw	15
  6973  01472E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6974                           
  6975                           ; BSR set to: 0
  6976  014730  0012               	return	
  6977  014732                     
  6978                           ; BSR set to: 0
  6979                           ;Port.c: 84: return (BytePtr)&TRISG;
  6980                           
  6981                           ; BSR set to: 0
  6982  014732  0E98               	movlw	152
  6983  014734  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6984  014736  0E0F               	movlw	15
  6985  014738  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6986                           
  6987                           ; BSR set to: 0
  6988  01473A  0012               	return	
  6989  01473C                     
  6990                           ; BSR set to: 0
  6991                           ;Port.c: 86: return (void*)0;
  6992                           
  6993                           ; BSR set to: 0
  6994  01473C  0E00               	movlw	0
  6995  01473E  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6996  014740  0E00               	movlw	0
  6997  014742  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;Port.c: 87: }
  7001                           
  7002                           ; BSR set to: 0
  7003  014744  0012               	return	
  7004  014746                     l363:
  7005                           
  7006                           ; BSR set to: 0
  7007  014746  0100               	movlb	0	; () banked
  7008  014748  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  7009                           
  7010                           ; Switch size 1, requested type "space"
  7011                           ; Number of cases is 7, Range of values is 0 to 6
  7012                           ; switch strategies available:
  7013                           ; Name         Instructions Cycles
  7014                           ; simple_byte           22    12 (average)
  7015                           ;	Chosen strategy is simple_byte
  7016  01474A  0A00               	xorlw	0	; case 0
  7017  01474C  B4D8               	btfsc	status,2,c
  7018  01474E  D7D2               	goto	l364
  7019  014750  0A01               	xorlw	1	; case 1
  7020  014752  B4D8               	btfsc	status,2,c
  7021  014754  D7D5               	goto	l366
  7022  014756  0A03               	xorlw	3	; case 2
  7023  014758  B4D8               	btfsc	status,2,c
  7024  01475A  D7D7               	goto	l367
  7025  01475C  0A01               	xorlw	1	; case 3
  7026  01475E  B4D8               	btfsc	status,2,c
  7027  014760  D7D9               	goto	l368
  7028  014762  0A07               	xorlw	7	; case 4
  7029  014764  B4D8               	btfsc	status,2,c
  7030  014766  D7DB               	goto	l369
  7031  014768  0A01               	xorlw	1	; case 5
  7032  01476A  B4D8               	btfsc	status,2,c
  7033  01476C  D7DD               	goto	l370
  7034  01476E  0A03               	xorlw	3	; case 6
  7035  014770  B4D8               	btfsc	status,2,c
  7036  014772  D7DF               	goto	l371
  7037  014774  D7E3               	goto	l372
  7038  014776                     __end_of_GetPortTRIS:
  7039                           	opt stack 0
  7040                           tosu	equ	0xFFF
  7041                           tosh	equ	0xFFE
  7042                           tosl	equ	0xFFD
  7043                           pclath	equ	0xFFA
  7044                           tblptru	equ	0xFF8
  7045                           tblptrh	equ	0xFF7
  7046                           tblptrl	equ	0xFF6
  7047                           tablat	equ	0xFF5
  7048                           postinc0	equ	0xFEE
  7049                           wreg	equ	0xFE8
  7050                           postdec1	equ	0xFE5
  7051                           fsr1h	equ	0xFE2
  7052                           fsr1l	equ	0xFE1
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           fsr2h	equ	0xFDA
  7057                           fsr2l	equ	0xFD9
  7058                           status	equ	0xFD8
  7059                           
  7060 ;; *************** function _GetPortProperties *****************
  7061 ;; Defined at:
  7062 ;;		line 21 in file "Library/Port.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  pInput          1    wreg     enum E6786
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  pInput          1    2[BANK0 ] enum E6786
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;Total ram usage:        3 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    7
  7083 ;; This function calls:
  7084 ;;		Nothing
  7085 ;; This function is called by:
  7086 ;;		_Port_Init
  7087 ;; This function uses a non-reentrant model
  7088 ;;
  7089                           
  7090                           	psect	text15
  7091  014776                     __ptext15:
  7092                           	opt stack 0
  7093  014776                     _GetPortProperties:
  7094                           	opt stack 21
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;incstack = 0
  7098                           ;GetPortProperties@pInput stored from wreg
  7099  014776  0100               	movlb	0	; () banked
  7100  014778  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  7101                           
  7102                           ;Port.c: 23: switch (pInput)
  7103  01477A  D029               	goto	l337
  7104  01477C                     
  7105                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7106  01477C  0E7B               	movlw	low _PortA_Property
  7107  01477E  0100               	movlb	0	; () banked
  7108  014780  6F60               	movwf	?_GetPortProperties& (0+255),b
  7109  014782  0EFE               	movlw	high _PortA_Property
  7110  014784  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7111                           
  7112                           ; BSR set to: 0
  7113  014786  0012               	return	
  7114  014788                     
  7115                           ; BSR set to: 0
  7116                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7117                           
  7118                           ; BSR set to: 0
  7119  014788  0E79               	movlw	low _PortB_Property
  7120  01478A  6F60               	movwf	?_GetPortProperties& (0+255),b
  7121  01478C  0EFE               	movlw	high _PortB_Property
  7122  01478E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7123                           
  7124                           ; BSR set to: 0
  7125  014790  0012               	return	
  7126  014792                     
  7127                           ; BSR set to: 0
  7128                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7129                           
  7130                           ; BSR set to: 0
  7131  014792  0E77               	movlw	low _PortC_Property
  7132  014794  6F60               	movwf	?_GetPortProperties& (0+255),b
  7133  014796  0EFE               	movlw	high _PortC_Property
  7134  014798  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7135                           
  7136                           ; BSR set to: 0
  7137  01479A  0012               	return	
  7138  01479C                     
  7139                           ; BSR set to: 0
  7140                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7141                           
  7142                           ; BSR set to: 0
  7143  01479C  0E75               	movlw	low _PortD_Property
  7144  01479E  6F60               	movwf	?_GetPortProperties& (0+255),b
  7145  0147A0  0EFE               	movlw	high _PortD_Property
  7146  0147A2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7147                           
  7148                           ; BSR set to: 0
  7149  0147A4  0012               	return	
  7150  0147A6                     
  7151                           ; BSR set to: 0
  7152                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7153                           
  7154                           ; BSR set to: 0
  7155  0147A6  0E73               	movlw	low _PortE_Property
  7156  0147A8  6F60               	movwf	?_GetPortProperties& (0+255),b
  7157  0147AA  0EFE               	movlw	high _PortE_Property
  7158  0147AC  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7159                           
  7160                           ; BSR set to: 0
  7161  0147AE  0012               	return	
  7162  0147B0                     
  7163                           ; BSR set to: 0
  7164                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7165                           
  7166                           ; BSR set to: 0
  7167  0147B0  0E71               	movlw	low _PortF_Property
  7168  0147B2  6F60               	movwf	?_GetPortProperties& (0+255),b
  7169  0147B4  0EFE               	movlw	high _PortF_Property
  7170  0147B6  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7171                           
  7172                           ; BSR set to: 0
  7173  0147B8  0012               	return	
  7174  0147BA                     
  7175                           ; BSR set to: 0
  7176                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7177                           
  7178                           ; BSR set to: 0
  7179  0147BA  0E6F               	movlw	low _PortG_Property
  7180  0147BC  6F60               	movwf	?_GetPortProperties& (0+255),b
  7181  0147BE  0EFE               	movlw	high _PortG_Property
  7182  0147C0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7183                           
  7184                           ; BSR set to: 0
  7185  0147C2  0012               	return	
  7186  0147C4                     
  7187                           ; BSR set to: 0
  7188                           ;Port.c: 40: return (void*)0;
  7189                           
  7190                           ; BSR set to: 0
  7191  0147C4  0E00               	movlw	0
  7192  0147C6  6F60               	movwf	?_GetPortProperties& (0+255),b
  7193  0147C8  0E00               	movlw	0
  7194  0147CA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;Port.c: 41: }
  7198                           
  7199                           ; BSR set to: 0
  7200  0147CC  0012               	return	
  7201  0147CE                     l337:
  7202                           
  7203                           ; BSR set to: 0
  7204  0147CE  0100               	movlb	0	; () banked
  7205  0147D0  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  7206                           
  7207                           ; Switch size 1, requested type "space"
  7208                           ; Number of cases is 7, Range of values is 0 to 6
  7209                           ; switch strategies available:
  7210                           ; Name         Instructions Cycles
  7211                           ; simple_byte           22    12 (average)
  7212                           ;	Chosen strategy is simple_byte
  7213  0147D2  0A00               	xorlw	0	; case 0
  7214  0147D4  B4D8               	btfsc	status,2,c
  7215  0147D6  D7D2               	goto	l338
  7216  0147D8  0A01               	xorlw	1	; case 1
  7217  0147DA  B4D8               	btfsc	status,2,c
  7218  0147DC  D7D5               	goto	l340
  7219  0147DE  0A03               	xorlw	3	; case 2
  7220  0147E0  B4D8               	btfsc	status,2,c
  7221  0147E2  D7D7               	goto	l341
  7222  0147E4  0A01               	xorlw	1	; case 3
  7223  0147E6  B4D8               	btfsc	status,2,c
  7224  0147E8  D7D9               	goto	l342
  7225  0147EA  0A07               	xorlw	7	; case 4
  7226  0147EC  B4D8               	btfsc	status,2,c
  7227  0147EE  D7DB               	goto	l343
  7228  0147F0  0A01               	xorlw	1	; case 5
  7229  0147F2  B4D8               	btfsc	status,2,c
  7230  0147F4  D7DD               	goto	l344
  7231  0147F6  0A03               	xorlw	3	; case 6
  7232  0147F8  B4D8               	btfsc	status,2,c
  7233  0147FA  D7DF               	goto	l345
  7234  0147FC  D7E3               	goto	l346
  7235  0147FE                     __end_of_GetPortProperties:
  7236                           	opt stack 0
  7237                           tosu	equ	0xFFF
  7238                           tosh	equ	0xFFE
  7239                           tosl	equ	0xFFD
  7240                           pclath	equ	0xFFA
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           postinc0	equ	0xFEE
  7246                           wreg	equ	0xFE8
  7247                           postdec1	equ	0xFE5
  7248                           fsr1h	equ	0xFE2
  7249                           fsr1l	equ	0xFE1
  7250                           indf2	equ	0xFDF
  7251                           postinc2	equ	0xFDE
  7252                           postdec2	equ	0xFDD
  7253                           fsr2h	equ	0xFDA
  7254                           fsr2l	equ	0xFD9
  7255                           status	equ	0xFD8
  7256                           
  7257 ;; *************** function _GetPortPORT *****************
  7258 ;; Defined at:
  7259 ;;		line 44 in file "Library/Port.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  pInput          1    wreg     enum E6786
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;  pInput          1    2[BANK0 ] enum E6786
  7264 ;; Return value:  Size  Location     Type
  7265 ;;                  2    0[BANK0 ] PTR struct Byte
  7266 ;; Registers used:
  7267 ;;		wreg, status,2, status,0
  7268 ;; Tracked objects:
  7269 ;;		On entry : 0/0
  7270 ;;		On exit  : 0/0
  7271 ;;		Unchanged: 0/0
  7272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7276 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7277 ;;Total ram usage:        3 bytes
  7278 ;; Hardware stack levels used:    1
  7279 ;; Hardware stack levels required when called:    7
  7280 ;; This function calls:
  7281 ;;		Nothing
  7282 ;; This function is called by:
  7283 ;;		_Port_Init
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           	psect	text16
  7288  0147FE                     __ptext16:
  7289                           	opt stack 0
  7290  0147FE                     _GetPortPORT:
  7291                           	opt stack 21
  7292                           
  7293                           ; BSR set to: 0
  7294                           ;incstack = 0
  7295                           ;GetPortPORT@pInput stored from wreg
  7296  0147FE  0100               	movlb	0	; () banked
  7297  014800  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  7298                           
  7299                           ;Port.c: 46: switch (pInput)
  7300  014802  D029               	goto	l350
  7301  014804                     
  7302                           ;Port.c: 49: return (BytePtr)&PORTA;
  7303  014804  0E80               	movlw	128
  7304  014806  0100               	movlb	0	; () banked
  7305  014808  6F60               	movwf	?_GetPortPORT& (0+255),b
  7306  01480A  0E0F               	movlw	15
  7307  01480C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7308                           
  7309                           ; BSR set to: 0
  7310  01480E  0012               	return	
  7311  014810                     
  7312                           ; BSR set to: 0
  7313                           ;Port.c: 51: return (BytePtr)&PORTB;
  7314                           
  7315                           ; BSR set to: 0
  7316  014810  0E81               	movlw	129
  7317  014812  6F60               	movwf	?_GetPortPORT& (0+255),b
  7318  014814  0E0F               	movlw	15
  7319  014816  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7320                           
  7321                           ; BSR set to: 0
  7322  014818  0012               	return	
  7323  01481A                     
  7324                           ; BSR set to: 0
  7325                           ;Port.c: 53: return (BytePtr)&PORTC;
  7326                           
  7327                           ; BSR set to: 0
  7328  01481A  0E82               	movlw	130
  7329  01481C  6F60               	movwf	?_GetPortPORT& (0+255),b
  7330  01481E  0E0F               	movlw	15
  7331  014820  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7332                           
  7333                           ; BSR set to: 0
  7334  014822  0012               	return	
  7335  014824                     
  7336                           ; BSR set to: 0
  7337                           ;Port.c: 55: return (BytePtr)&PORTD;
  7338                           
  7339                           ; BSR set to: 0
  7340  014824  0E83               	movlw	131
  7341  014826  6F60               	movwf	?_GetPortPORT& (0+255),b
  7342  014828  0E0F               	movlw	15
  7343  01482A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7344                           
  7345                           ; BSR set to: 0
  7346  01482C  0012               	return	
  7347  01482E                     
  7348                           ; BSR set to: 0
  7349                           ;Port.c: 57: return (BytePtr)&PORTE;
  7350                           
  7351                           ; BSR set to: 0
  7352  01482E  0E84               	movlw	132
  7353  014830  6F60               	movwf	?_GetPortPORT& (0+255),b
  7354  014832  0E0F               	movlw	15
  7355  014834  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7356                           
  7357                           ; BSR set to: 0
  7358  014836  0012               	return	
  7359  014838                     
  7360                           ; BSR set to: 0
  7361                           ;Port.c: 59: return (BytePtr)&PORTF;
  7362                           
  7363                           ; BSR set to: 0
  7364  014838  0E85               	movlw	133
  7365  01483A  6F60               	movwf	?_GetPortPORT& (0+255),b
  7366  01483C  0E0F               	movlw	15
  7367  01483E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7368                           
  7369                           ; BSR set to: 0
  7370  014840  0012               	return	
  7371  014842                     
  7372                           ; BSR set to: 0
  7373                           ;Port.c: 61: return (BytePtr)&PORTG;
  7374                           
  7375                           ; BSR set to: 0
  7376  014842  0E86               	movlw	134
  7377  014844  6F60               	movwf	?_GetPortPORT& (0+255),b
  7378  014846  0E0F               	movlw	15
  7379  014848  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7380                           
  7381                           ; BSR set to: 0
  7382  01484A  0012               	return	
  7383  01484C                     
  7384                           ; BSR set to: 0
  7385                           ;Port.c: 63: return (void*)0;
  7386                           
  7387                           ; BSR set to: 0
  7388  01484C  0E00               	movlw	0
  7389  01484E  6F60               	movwf	?_GetPortPORT& (0+255),b
  7390  014850  0E00               	movlw	0
  7391  014852  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;Port.c: 64: }
  7395                           
  7396                           ; BSR set to: 0
  7397  014854  0012               	return	
  7398  014856                     l350:
  7399                           
  7400                           ; BSR set to: 0
  7401  014856  0100               	movlb	0	; () banked
  7402  014858  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  7403                           
  7404                           ; Switch size 1, requested type "space"
  7405                           ; Number of cases is 7, Range of values is 0 to 6
  7406                           ; switch strategies available:
  7407                           ; Name         Instructions Cycles
  7408                           ; simple_byte           22    12 (average)
  7409                           ;	Chosen strategy is simple_byte
  7410  01485A  0A00               	xorlw	0	; case 0
  7411  01485C  B4D8               	btfsc	status,2,c
  7412  01485E  D7D2               	goto	l351
  7413  014860  0A01               	xorlw	1	; case 1
  7414  014862  B4D8               	btfsc	status,2,c
  7415  014864  D7D5               	goto	l353
  7416  014866  0A03               	xorlw	3	; case 2
  7417  014868  B4D8               	btfsc	status,2,c
  7418  01486A  D7D7               	goto	l354
  7419  01486C  0A01               	xorlw	1	; case 3
  7420  01486E  B4D8               	btfsc	status,2,c
  7421  014870  D7D9               	goto	l355
  7422  014872  0A07               	xorlw	7	; case 4
  7423  014874  B4D8               	btfsc	status,2,c
  7424  014876  D7DB               	goto	l356
  7425  014878  0A01               	xorlw	1	; case 5
  7426  01487A  B4D8               	btfsc	status,2,c
  7427  01487C  D7DD               	goto	l357
  7428  01487E  0A03               	xorlw	3	; case 6
  7429  014880  B4D8               	btfsc	status,2,c
  7430  014882  D7DF               	goto	l358
  7431  014884  D7E3               	goto	l359
  7432  014886                     __end_of_GetPortPORT:
  7433                           	opt stack 0
  7434                           tosu	equ	0xFFF
  7435                           tosh	equ	0xFFE
  7436                           tosl	equ	0xFFD
  7437                           pclath	equ	0xFFA
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           postinc0	equ	0xFEE
  7443                           wreg	equ	0xFE8
  7444                           postdec1	equ	0xFE5
  7445                           fsr1h	equ	0xFE2
  7446                           fsr1l	equ	0xFE1
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           fsr2h	equ	0xFDA
  7451                           fsr2l	equ	0xFD9
  7452                           status	equ	0xFD8
  7453                           
  7454 ;; *************** function _LED_Init *****************
  7455 ;; Defined at:
  7456 ;;		line 15 in file "Library/LED.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  pLED            1    wreg     enum E6739
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  pLED            1   45[BANK0 ] enum E6739
  7461 ;; Return value:  Size  Location     Type
  7462 ;;                  1    wreg      void 
  7463 ;; Registers used:
  7464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7465 ;; Tracked objects:
  7466 ;;		On entry : 0/0
  7467 ;;		On exit  : 0/0
  7468 ;;		Unchanged: 0/0
  7469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;Total ram usage:        1 bytes
  7475 ;; Hardware stack levels used:    1
  7476 ;; Hardware stack levels required when called:   12
  7477 ;; This function calls:
  7478 ;;		_LED_Set
  7479 ;;		_Port_SetPinType
  7480 ;; This function is called by:
  7481 ;;		_MXK_Init
  7482 ;;		_main
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text17
  7487  01519E                     __ptext17:
  7488                           	opt stack 0
  7489  01519E                     _LED_Init:
  7490                           	opt stack 17
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;incstack = 0
  7494                           ;LED_Init@pLED stored from wreg
  7495  01519E  0100               	movlb	0	; () banked
  7496  0151A0  6F8D               	movwf	LED_Init@pLED& (0+255),b
  7497                           
  7498                           ;LED.c: 17: switch (pLED)
  7499  0151A2  D018               	goto	l220
  7500  0151A4                     
  7501                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7502  0151A4  0EAB               	movlw	low _PortC
  7503  0151A6  0100               	movlb	0	; () banked
  7504  0151A8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7505  0151AA  0E01               	movlw	high _PortC
  7506  0151AC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7507  0151AE  0E00               	movlw	0
  7508  0151B0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7509  0151B2  0E03               	movlw	3
  7510  0151B4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7511  0151B6  EC4A  F093         	call	_Port_SetPinType	;wreg free
  7512                           
  7513                           ;LED.c: 21: break;
  7514  0151BA  D014               	goto	l222
  7515  0151BC                     
  7516                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7517  0151BC  0EAB               	movlw	low _PortC
  7518  0151BE  0100               	movlb	0	; () banked
  7519  0151C0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7520  0151C2  0E01               	movlw	high _PortC
  7521  0151C4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7522  0151C6  0E01               	movlw	1
  7523  0151C8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7524  0151CA  0E03               	movlw	3
  7525  0151CC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7526  0151CE  EC4A  F093         	call	_Port_SetPinType	;wreg free
  7527                           
  7528                           ;LED.c: 25: }
  7529                           
  7530                           ;LED.c: 24: break;
  7531  0151D2  D008               	goto	l222
  7532  0151D4                     l220:
  7533  0151D4  0100               	movlb	0	; () banked
  7534  0151D6  518D               	movf	LED_Init@pLED& (0+255),w,b
  7535                           
  7536                           ; Switch size 1, requested type "space"
  7537                           ; Number of cases is 2, Range of values is 0 to 1
  7538                           ; switch strategies available:
  7539                           ; Name         Instructions Cycles
  7540                           ; simple_byte            7     4 (average)
  7541                           ;	Chosen strategy is simple_byte
  7542  0151D8  0A00               	xorlw	0	; case 0
  7543  0151DA  B4D8               	btfsc	status,2,c
  7544  0151DC  D7E3               	goto	l221
  7545  0151DE  0A01               	xorlw	1	; case 1
  7546  0151E0  B4D8               	btfsc	status,2,c
  7547  0151E2  D7EC               	goto	l223
  7548  0151E4                     l222:
  7549                           
  7550                           ;LED.c: 26: LED_Set(pLED, 0);
  7551                           
  7552                           ; BSR set to: 0
  7553  0151E4  0E00               	movlw	0
  7554  0151E6  0100               	movlb	0	; () banked
  7555  0151E8  6F74               	movwf	LED_Set@pValue& (0+255),b
  7556  0151EA  518D               	movf	LED_Init@pLED& (0+255),w,b
  7557  0151EC  ECFE  F0AA         	call	_LED_Set
  7558  0151F0  0012               	return		;funcret
  7559  0151F2                     __end_of_LED_Init:
  7560                           	opt stack 0
  7561                           tosu	equ	0xFFF
  7562                           tosh	equ	0xFFE
  7563                           tosl	equ	0xFFD
  7564                           pclath	equ	0xFFA
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           postinc0	equ	0xFEE
  7570                           wreg	equ	0xFE8
  7571                           postdec1	equ	0xFE5
  7572                           fsr1h	equ	0xFE2
  7573                           fsr1l	equ	0xFE1
  7574                           indf2	equ	0xFDF
  7575                           postinc2	equ	0xFDE
  7576                           postdec2	equ	0xFDD
  7577                           fsr2h	equ	0xFDA
  7578                           fsr2l	equ	0xFD9
  7579                           status	equ	0xFD8
  7580                           
  7581 ;; *************** function _LED_Set *****************
  7582 ;; Defined at:
  7583 ;;		line 33 in file "Library/LED.c"
  7584 ;; Parameters:    Size  Location     Type
  7585 ;;  pLED            1    wreg     enum E6739
  7586 ;;  pValue          1   20[BANK0 ] unsigned char 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;  pLED            1   21[BANK0 ] enum E6739
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      void 
  7591 ;; Registers used:
  7592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7598 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7602 ;;Total ram usage:        2 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:   11
  7605 ;; This function calls:
  7606 ;;		_Port_SetPin
  7607 ;; This function is called by:
  7608 ;;		_LED_Init
  7609 ;;		_main
  7610 ;;		_SYSTEM_Initialize
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614                           	psect	text18
  7615  0155FC                     __ptext18:
  7616                           	opt stack 0
  7617  0155FC                     _LED_Set:
  7618                           	opt stack 17
  7619                           
  7620                           ;incstack = 0
  7621                           ;LED_Set@pLED stored from wreg
  7622  0155FC  0100               	movlb	0	; () banked
  7623  0155FE  6F75               	movwf	LED_Set@pLED& (0+255),b
  7624                           
  7625                           ;LED.c: 35: switch (pLED)
  7626  015600  D018               	goto	l227
  7627  015602                     
  7628                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7629  015602  0EAB               	movlw	low _PortC
  7630  015604  0100               	movlb	0	; () banked
  7631  015606  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7632  015608  0E01               	movlw	high _PortC
  7633  01560A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7634  01560C  0E00               	movlw	0
  7635  01560E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7636  015610  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7637  015614  ECBD  F09F         	call	_Port_SetPin	;wreg free
  7638                           
  7639                           ;LED.c: 39: break;
  7640  015618  0012               	return	
  7641  01561A                     
  7642                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7643  01561A  0EAB               	movlw	low _PortC
  7644  01561C  0100               	movlb	0	; () banked
  7645  01561E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7646  015620  0E01               	movlw	high _PortC
  7647  015622  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7648  015624  0E01               	movlw	1
  7649  015626  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7650  015628  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7651  01562C  ECBD  F09F         	call	_Port_SetPin	;wreg free
  7652                           
  7653                           ;LED.c: 43: }
  7654                           
  7655                           ;LED.c: 42: break;
  7656  015630  0012               	return	
  7657  015632                     l227:
  7658  015632  0100               	movlb	0	; () banked
  7659  015634  5175               	movf	LED_Set@pLED& (0+255),w,b
  7660                           
  7661                           ; Switch size 1, requested type "space"
  7662                           ; Number of cases is 2, Range of values is 0 to 1
  7663                           ; switch strategies available:
  7664                           ; Name         Instructions Cycles
  7665                           ; simple_byte            7     4 (average)
  7666                           ;	Chosen strategy is simple_byte
  7667  015636  0A00               	xorlw	0	; case 0
  7668  015638  B4D8               	btfsc	status,2,c
  7669  01563A  D7E3               	goto	l228
  7670  01563C  0A01               	xorlw	1	; case 1
  7671  01563E  A4D8               	btfss	status,2,c
  7672  015640  0012               	return	
  7673  015642  D7EB               	goto	l230
  7674  015644                     __end_of_LED_Set:
  7675                           	opt stack 0
  7676                           tosu	equ	0xFFF
  7677                           tosh	equ	0xFFE
  7678                           tosl	equ	0xFFD
  7679                           pclath	equ	0xFFA
  7680                           tblptru	equ	0xFF8
  7681                           tblptrh	equ	0xFF7
  7682                           tblptrl	equ	0xFF6
  7683                           tablat	equ	0xFF5
  7684                           postinc0	equ	0xFEE
  7685                           wreg	equ	0xFE8
  7686                           postdec1	equ	0xFE5
  7687                           fsr1h	equ	0xFE2
  7688                           fsr1l	equ	0xFE1
  7689                           indf2	equ	0xFDF
  7690                           postinc2	equ	0xFDE
  7691                           postdec2	equ	0xFDD
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function _MXK_Dequeue *****************
  7697 ;; Defined at:
  7698 ;;		line 153 in file "Library/MXK.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;		None
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      void 
  7705 ;; Registers used:
  7706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;Total ram usage:        0 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:   12
  7719 ;; This function calls:
  7720 ;;		Absolute function
  7721 ;;		_Motor_Step
  7722 ;; This function is called by:
  7723 ;;		_main
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text19
  7728  015A28                     __ptext19:
  7729                           	opt stack 0
  7730  015A28                     _MXK_Dequeue:
  7731                           	opt stack 18
  7732                           
  7733                           ;MXK.c: 155: if (lQueue)
  7734                           
  7735                           ;incstack = 0
  7736  015A28  0100               	movlb	0	; () banked
  7737  015A2A  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7738  015A2C  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  7739  015A2E  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  7740  015A30  B4D8               	btfsc	status,2,c
  7741  015A32  D00C               	goto	u14169
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;MXK.c: 156: lQueue();
  7745  015A34  D801               	call	u14168
  7746  015A36  D00A               	goto	u14169
  7747  015A38                     u14168:
  7748  015A38  0005               	push	
  7749  015A3A  6EFA               	movwf	pclath,c
  7750  015A3C  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7751  015A3E  6EFD               	movwf	tosl,c
  7752  015A40  51E7               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  7753  015A42  6EFE               	movwf	tosh,c
  7754  015A44  51E8               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  7755  015A46  6EFF               	movwf	tosu,c
  7756  015A48  50FA               	movf	pclath,w,c
  7757  015A4A  0012               	return		;indir
  7758  015A4C                     u14169:
  7759                           
  7760                           ;MXK.c: 157: lQueue = 0;
  7761  015A4C  0E00               	movlw	0
  7762  015A4E  0100               	movlb	0	; () banked
  7763  015A50  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  7764  015A52  0E00               	movlw	0
  7765  015A54  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7766  015A56  0E00               	movlw	0
  7767  015A58  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7768                           
  7769                           ; BSR set to: 0
  7770  015A5A  0012               	return		;funcret
  7771  015A5C                     __end_of_MXK_Dequeue:
  7772                           	opt stack 0
  7773                           tosu	equ	0xFFF
  7774                           tosh	equ	0xFFE
  7775                           tosl	equ	0xFFD
  7776                           pclath	equ	0xFFA
  7777                           tblptru	equ	0xFF8
  7778                           tblptrh	equ	0xFF7
  7779                           tblptrl	equ	0xFF6
  7780                           tablat	equ	0xFF5
  7781                           postinc0	equ	0xFEE
  7782                           wreg	equ	0xFE8
  7783                           postdec1	equ	0xFE5
  7784                           fsr1h	equ	0xFE2
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           fsr2h	equ	0xFDA
  7790                           fsr2l	equ	0xFD9
  7791                           status	equ	0xFD8
  7792                           
  7793 ;; *************** function _Motor_Step *****************
  7794 ;; Defined at:
  7795 ;;		line 75 in file "Library/Motor.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;		None
  7798 ;; Auto vars:     Size  Location     Type
  7799 ;;		None
  7800 ;; Return value:  Size  Location     Type
  7801 ;;                  1    wreg      void 
  7802 ;; Registers used:
  7803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7804 ;; Tracked objects:
  7805 ;;		On entry : 0/0
  7806 ;;		On exit  : 0/0
  7807 ;;		Unchanged: 0/0
  7808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;Total ram usage:        2 bytes
  7814 ;; Hardware stack levels used:    1
  7815 ;; Hardware stack levels required when called:   11
  7816 ;; This function calls:
  7817 ;;		_MXK_Queue
  7818 ;;		_MXK_Release
  7819 ;;		_MXK_SwitchTo
  7820 ;;		_Port_SetPin
  7821 ;;		_Timer0_Restart
  7822 ;;		_Timer0_Stop
  7823 ;; This function is called by:
  7824 ;;		_Motor_Init
  7825 ;;		_Timer0_ISR
  7826 ;;		_MXK_Dequeue
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           	psect	text20
  7831  0138E8                     __ptext20:
  7832                           	opt stack 0
  7833  0138E8                     _Motor_Step:
  7834                           	opt stack 0
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;Skip over the trampoline to the duplicate function for level 2
  7838  0138E8  B251               	btfsc	btemp,1,c
  7839  0138EA  EFFD  F09D         	goto	i2_Motor_Step
  7840  0138EE                     _Motor_Step$intlevel0:
  7841                           	opt stack 18
  7842                           
  7843                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7844                           
  7845                           ;incstack = 0
  7846  0138EE  0100               	movlb	0	; () banked
  7847  0138F0  EE20 F004          	lfsr	2,4
  7848  0138F4  51ED               	movf	_lMotor& (0+255),w,b
  7849  0138F6  26D9               	addwf	fsr2l,f,c
  7850  0138F8  51EE               	movf	(_lMotor+1)& (0+255),w,b
  7851  0138FA  22DA               	addwfc	fsr2h,f,c
  7852  0138FC  50DF               	movf	indf2,w,c
  7853  0138FE  EC6B  F0AC         	call	_MXK_SwitchTo
  7854  013902  0900               	iorlw	0
  7855  013904  B4D8               	btfsc	status,2,c
  7856  013906  D06E               	goto	l1627
  7857                           
  7858                           ;Motor.c: 78: {
  7859                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7860  013908  C0ED  FFD9         	movff	_lMotor,fsr2l
  7861  01390C  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7862  013910  50DE               	movf	postinc2,w,c
  7863  013912  10DE               	iorwf	postinc2,w,c
  7864  013914  B4D8               	btfsc	status,2,c
  7865  013916  D061               	goto	l1628
  7866                           
  7867                           ;Motor.c: 80: {
  7868                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7869  013918  C0ED  FFD9         	movff	_lMotor,fsr2l
  7870  01391C  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7871  013920  0E01               	movlw	1
  7872  013922  BEDB               	btfsc	plusw2,7,c
  7873  013924  D023               	goto	l1629
  7874  013926  0E01               	movlw	1
  7875  013928  50DB               	movf	plusw2,w,c
  7876  01392A  E103               	bnz	u12130
  7877  01392C  04DE               	decf	postinc2,w,c
  7878  01392E  A0D8               	btfss	status,0,c
  7879  013930  D01D               	goto	l1629
  7880  013932                     u12130:
  7881                           
  7882                           ;Motor.c: 83: {
  7883                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7884  013932  C0ED  FFD9         	movff	_lMotor,fsr2l
  7885  013936  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7886  01393A  28DE               	incf	postinc2,w,c
  7887  01393C  E104               	bnz	u12140
  7888  01393E  0E7F               	movlw	127
  7889  013940  18DE               	xorwf	postinc2,w,c
  7890  013942  B4D8               	btfsc	status,2,c
  7891  013944  D007               	goto	l1630
  7892  013946                     u12140:
  7893                           
  7894                           ;Motor.c: 85: lMotor->mDelta --;
  7895  013946  C0ED  FFD9         	movff	_lMotor,fsr2l
  7896  01394A  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7897  01394E  06DE               	decf	postinc2,f,c
  7898  013950  0E00               	movlw	0
  7899  013952  5ADD               	subwfb	postdec2,f,c
  7900  013954                     l1630:
  7901                           
  7902                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7903  013954  0E8D               	movlw	low _PortE
  7904  013956  0100               	movlb	0	; () banked
  7905  013958  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7906  01395A  0E01               	movlw	high _PortE
  7907  01395C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7908  01395E  0E00               	movlw	0
  7909  013960  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7910  013962  0E01               	movlw	1
  7911  013964  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7912  013966  ECBD  F09F         	call	_Port_SetPin	;wreg free
  7913                           
  7914                           ;Motor.c: 88: }
  7915  01396A  D01C               	goto	l1631
  7916  01396C                     l1629:
  7917                           
  7918                           ;Motor.c: 89: else
  7919                           ;Motor.c: 90: {
  7920                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7921  01396C  C0ED  FFD9         	movff	_lMotor,fsr2l
  7922  013970  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7923  013974  04DE               	decf	postinc2,w,c
  7924  013976  E104               	bnz	u12150
  7925  013978  0E80               	movlw	128
  7926  01397A  18DE               	xorwf	postinc2,w,c
  7927  01397C  B4D8               	btfsc	status,2,c
  7928  01397E  D007               	goto	l1632
  7929  013980                     u12150:
  7930                           
  7931                           ;Motor.c: 92: lMotor->mDelta ++;
  7932  013980  C0ED  FFD9         	movff	_lMotor,fsr2l
  7933  013984  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7934  013988  2ADE               	incf	postinc2,f,c
  7935  01398A  0E00               	movlw	0
  7936  01398C  22DD               	addwfc	postdec2,f,c
  7937  01398E                     l1632:
  7938                           
  7939                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7940  01398E  0E8D               	movlw	low _PortE
  7941  013990  0100               	movlb	0	; () banked
  7942  013992  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7943  013994  0E01               	movlw	high _PortE
  7944  013996  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7945  013998  0E00               	movlw	0
  7946  01399A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7947  01399C  0E00               	movlw	0
  7948  01399E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7949  0139A0  ECBD  F09F         	call	_Port_SetPin	;wreg free
  7950  0139A4                     l1631:
  7951                           
  7952                           ;Motor.c: 95: }
  7953                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7954  0139A4  0E8D               	movlw	low _PortE
  7955  0139A6  0100               	movlb	0	; () banked
  7956  0139A8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7957  0139AA  0E01               	movlw	high _PortE
  7958  0139AC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7959  0139AE  0E01               	movlw	1
  7960  0139B0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7961  0139B2  0E01               	movlw	1
  7962  0139B4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7963  0139B6  ECBD  F09F         	call	_Port_SetPin	;wreg free
  7964                           
  7965                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  7966  0139BA  0E8D               	movlw	low _PortE
  7967  0139BC  0100               	movlb	0	; () banked
  7968  0139BE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7969  0139C0  0E01               	movlw	high _PortE
  7970  0139C2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7971  0139C4  0E01               	movlw	1
  7972  0139C6  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7973  0139C8  0E00               	movlw	0
  7974  0139CA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7975  0139CC  ECBD  F09F         	call	_Port_SetPin	;wreg free
  7976                           
  7977                           ;Motor.c: 101: MXK_Release();
  7978  0139D0  EC32  F0AF         	call	_MXK_Release	;wreg free
  7979                           
  7980                           ;Motor.c: 102: Timer0_Restart();
  7981  0139D4  EC17  F0B0         	call	_Timer0_Restart	;wreg free
  7982                           
  7983                           ;Motor.c: 103: return;
  7984  0139D8  0012               	return	
  7985  0139DA                     l1628:
  7986                           
  7987                           ;Motor.c: 104: }
  7988                           ;Motor.c: 105: MXK_Release();
  7989  0139DA  EC32  F0AF         	call	_MXK_Release	;wreg free
  7990                           
  7991                           ;Motor.c: 106: Timer0_Stop();
  7992  0139DE  EC4B  F0B0         	call	_Timer0_Stop	;wreg free
  7993                           
  7994                           ;Motor.c: 107: return;
  7995  0139E2  0012               	return	
  7996  0139E4                     l1627:
  7997                           
  7998                           ;Motor.c: 108: }
  7999                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  8000  0139E4  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
  8001  0139E8  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  8002  0139EC  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  8003  0139F0  ECFB  F0AF         	call	_MXK_Queue	;wreg free
  8004  0139F4  0012               	return		;funcret
  8005  0139F6                     __end_of_Motor_Step:
  8006                           	opt stack 0
  8007                           tosu	equ	0xFFF
  8008                           tosh	equ	0xFFE
  8009                           tosl	equ	0xFFD
  8010                           pclath	equ	0xFFA
  8011                           tblptru	equ	0xFF8
  8012                           tblptrh	equ	0xFF7
  8013                           tblptrl	equ	0xFF6
  8014                           tablat	equ	0xFF5
  8015                           postinc0	equ	0xFEE
  8016                           wreg	equ	0xFE8
  8017                           postdec1	equ	0xFE5
  8018                           fsr1h	equ	0xFE2
  8019                           fsr1l	equ	0xFE1
  8020                           indf2	equ	0xFDF
  8021                           postinc2	equ	0xFDE
  8022                           postdec2	equ	0xFDD
  8023                           plusw2	equ	0xFDB
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function _Timer0_Stop *****************
  8029 ;; Defined at:
  8030 ;;		line 89 in file "Library/Timer0.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;		None
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		None
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8048 ;;Total ram usage:        0 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    7
  8051 ;; This function calls:
  8052 ;;		Nothing
  8053 ;; This function is called by:
  8054 ;;		_Motor_Step
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text21
  8059  016096                     __ptext21:
  8060                           	opt stack 0
  8061  016096                     _Timer0_Stop:
  8062                           	opt stack 21
  8063                           
  8064                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8065                           
  8066                           ;incstack = 0
  8067  016096  9AF2               	bcf	intcon,5,c	;volatile
  8068                           
  8069                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8070  016098  94F2               	bcf	intcon,2,c	;volatile
  8071  01609A  0012               	return		;funcret
  8072  01609C                     __end_of_Timer0_Stop:
  8073                           	opt stack 0
  8074                           tosu	equ	0xFFF
  8075                           tosh	equ	0xFFE
  8076                           tosl	equ	0xFFD
  8077                           pclath	equ	0xFFA
  8078                           tblptru	equ	0xFF8
  8079                           tblptrh	equ	0xFF7
  8080                           tblptrl	equ	0xFF6
  8081                           tablat	equ	0xFF5
  8082                           intcon	equ	0xFF2
  8083                           postinc0	equ	0xFEE
  8084                           wreg	equ	0xFE8
  8085                           postdec1	equ	0xFE5
  8086                           fsr1h	equ	0xFE2
  8087                           fsr1l	equ	0xFE1
  8088                           indf2	equ	0xFDF
  8089                           postinc2	equ	0xFDE
  8090                           postdec2	equ	0xFDD
  8091                           plusw2	equ	0xFDB
  8092                           fsr2h	equ	0xFDA
  8093                           fsr2l	equ	0xFD9
  8094                           status	equ	0xFD8
  8095                           
  8096 ;; *************** function _Timer0_Restart *****************
  8097 ;; Defined at:
  8098 ;;		line 83 in file "Library/Timer0.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;		None
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      void 
  8105 ;; Registers used:
  8106 ;;		None
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;Total ram usage:        0 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; Hardware stack levels required when called:    7
  8119 ;; This function calls:
  8120 ;;		Nothing
  8121 ;; This function is called by:
  8122 ;;		_Motor_Step
  8123 ;; This function uses a non-reentrant model
  8124 ;;
  8125                           
  8126                           	psect	text22
  8127  01602E                     __ptext22:
  8128                           	opt stack 0
  8129  01602E                     _Timer0_Restart:
  8130                           	opt stack 21
  8131                           
  8132                           ;Timer0.c: 85: TMR0 = COUNTER;
  8133                           
  8134                           ;incstack = 0
  8135  01602E  C033  FFD6         	movff	_COUNTER,4054	;volatile
  8136  016032  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
  8137                           
  8138                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8139  016036  8AF2               	bsf	intcon,5,c	;volatile
  8140  016038  0012               	return		;funcret
  8141  01603A                     __end_of_Timer0_Restart:
  8142                           	opt stack 0
  8143                           tosu	equ	0xFFF
  8144                           tosh	equ	0xFFE
  8145                           tosl	equ	0xFFD
  8146                           pclath	equ	0xFFA
  8147                           tblptru	equ	0xFF8
  8148                           tblptrh	equ	0xFF7
  8149                           tblptrl	equ	0xFF6
  8150                           tablat	equ	0xFF5
  8151                           intcon	equ	0xFF2
  8152                           postinc0	equ	0xFEE
  8153                           wreg	equ	0xFE8
  8154                           postdec1	equ	0xFE5
  8155                           fsr1h	equ	0xFE2
  8156                           fsr1l	equ	0xFE1
  8157                           indf2	equ	0xFDF
  8158                           postinc2	equ	0xFDE
  8159                           postdec2	equ	0xFDD
  8160                           plusw2	equ	0xFDB
  8161                           fsr2h	equ	0xFDA
  8162                           fsr2l	equ	0xFD9
  8163                           status	equ	0xFD8
  8164                           
  8165 ;; *************** function _MXK_SwitchTo *****************
  8166 ;; Defined at:
  8167 ;;		line 105 in file "Library/MXK.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  pModule         1    wreg     enum E6927
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;  pModule         1    7[BANK0 ] enum E6927
  8172 ;;  CUR             1    6[BANK0 ] unsigned char 
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      unsigned char 
  8175 ;; Registers used:
  8176 ;;		wreg, status,2, status,0, cstack
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8186 ;;Total ram usage:        2 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; Hardware stack levels required when called:    8
  8189 ;; This function calls:
  8190 ;;		_delay_us
  8191 ;; This function is called by:
  8192 ;;		_Motor_Step
  8193 ;; This function uses a non-reentrant model
  8194 ;;
  8195                           
  8196                           	psect	text23
  8197  0158D6                     __ptext23:
  8198                           	opt stack 0
  8199  0158D6                     _MXK_SwitchTo:
  8200                           	opt stack 20
  8201                           
  8202                           ;incstack = 0
  8203                           ;MXK_SwitchTo@pModule stored from wreg
  8204  0158D6  0100               	movlb	0	; () banked
  8205  0158D8  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8206                           
  8207                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8208  0158DA  5086               	movf	3974,w,c	;volatile
  8209  0158DC  0B0F               	andlw	15
  8210  0158DE  0100               	movlb	0	; () banked
  8211  0158E0  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8215  0158E2  504C               	movf	_Bus_State,w,c
  8216  0158E4  A4D8               	btfss	status,2,c
  8217  0158E6  D002               	goto	l1730
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;MXK.c: 110: return 0;
  8221  0158E8  0E00               	movlw	0
  8222                           
  8223                           ; BSR set to: 0
  8224  0158EA  0012               	return	
  8225  0158EC                     l1730:
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8229                           
  8230                           ; BSR set to: 0
  8231  0158EC  0E00               	movlw	0
  8232  0158EE  6E4C               	movwf	_Bus_State,c
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;MXK.c: 114: if (CUR != pModule)
  8236  0158F0  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8237  0158F2  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8238  0158F4  B4D8               	btfsc	status,2,c
  8239  0158F6  D00A               	goto	l1732
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;MXK.c: 115: {
  8243                           ;MXK.c: 116: PORTG &= ~(0xF);
  8244  0158F8  0EF0               	movlw	240
  8245  0158FA  1686               	andwf	3974,f,c	;volatile
  8246                           
  8247                           ;MXK.c: 117: PORTG |= pModule;
  8248  0158FC  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8249  0158FE  1286               	iorwf	3974,f,c	;volatile
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;MXK.c: 120: delay_us(10);
  8253  015900  0E00               	movlw	0
  8254  015902  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8255  015904  0E0A               	movlw	10
  8256  015906  6F60               	movwf	delay_us@us& (0+255),b
  8257  015908  EC6A  F0AB         	call	_delay_us	;wreg free
  8258  01590C                     l1732:
  8259                           
  8260                           ;MXK.c: 121: }
  8261                           ;MXK.c: 122: return 1;
  8262  01590C  0E01               	movlw	1
  8263  01590E  0012               	return	
  8264  015910                     __end_of_MXK_SwitchTo:
  8265                           	opt stack 0
  8266                           tosu	equ	0xFFF
  8267                           tosh	equ	0xFFE
  8268                           tosl	equ	0xFFD
  8269                           pclath	equ	0xFFA
  8270                           tblptru	equ	0xFF8
  8271                           tblptrh	equ	0xFF7
  8272                           tblptrl	equ	0xFF6
  8273                           tablat	equ	0xFF5
  8274                           intcon	equ	0xFF2
  8275                           postinc0	equ	0xFEE
  8276                           wreg	equ	0xFE8
  8277                           postdec1	equ	0xFE5
  8278                           fsr1h	equ	0xFE2
  8279                           fsr1l	equ	0xFE1
  8280                           indf2	equ	0xFDF
  8281                           postinc2	equ	0xFDE
  8282                           postdec2	equ	0xFDD
  8283                           plusw2	equ	0xFDB
  8284                           fsr2h	equ	0xFDA
  8285                           fsr2l	equ	0xFD9
  8286                           status	equ	0xFD8
  8287                           
  8288 ;; *************** function _MXK_Release *****************
  8289 ;; Defined at:
  8290 ;;		line 130 in file "Library/MXK.c"
  8291 ;; Parameters:    Size  Location     Type
  8292 ;;		None
  8293 ;; Auto vars:     Size  Location     Type
  8294 ;;		None
  8295 ;; Return value:  Size  Location     Type
  8296 ;;                  1    wreg      unsigned char 
  8297 ;; Registers used:
  8298 ;;		wreg, status,2, status,0
  8299 ;; Tracked objects:
  8300 ;;		On entry : 0/0
  8301 ;;		On exit  : 0/0
  8302 ;;		Unchanged: 0/0
  8303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;Total ram usage:        0 bytes
  8309 ;; Hardware stack levels used:    1
  8310 ;; Hardware stack levels required when called:    7
  8311 ;; This function calls:
  8312 ;;		Nothing
  8313 ;; This function is called by:
  8314 ;;		_Motor_Step
  8315 ;;		_main
  8316 ;; This function uses a non-reentrant model
  8317 ;;
  8318                           
  8319                           	psect	text24
  8320  015E64                     __ptext24:
  8321                           	opt stack 0
  8322  015E64                     _MXK_Release:
  8323                           	opt stack 23
  8324                           
  8325                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8326                           
  8327                           ;incstack = 0
  8328  015E64  0E01               	movlw	1
  8329  015E66  6E4C               	movwf	_Bus_State,c
  8330                           
  8331                           ;MXK.c: 134: if (lQueue != 0)
  8332  015E68  0100               	movlb	0	; () banked
  8333  015E6A  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  8334  015E6C  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  8335  015E6E  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  8336  015E70  B4D8               	btfsc	status,2,c
  8337  015E72  D002               	goto	l1735
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;MXK.c: 135: return 1;
  8341  015E74  0E01               	movlw	1
  8342                           
  8343                           ; BSR set to: 0
  8344  015E76  0012               	return	
  8345  015E78                     l1735:
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;MXK.c: 137: return 0;
  8349                           
  8350                           ; BSR set to: 0
  8351  015E78  0E00               	movlw	0
  8352  015E7A  0012               	return	
  8353  015E7C                     __end_of_MXK_Release:
  8354                           	opt stack 0
  8355                           tosu	equ	0xFFF
  8356                           tosh	equ	0xFFE
  8357                           tosl	equ	0xFFD
  8358                           pclath	equ	0xFFA
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           intcon	equ	0xFF2
  8364                           postinc0	equ	0xFEE
  8365                           wreg	equ	0xFE8
  8366                           postdec1	equ	0xFE5
  8367                           fsr1h	equ	0xFE2
  8368                           fsr1l	equ	0xFE1
  8369                           indf2	equ	0xFDF
  8370                           postinc2	equ	0xFDE
  8371                           postdec2	equ	0xFDD
  8372                           plusw2	equ	0xFDB
  8373                           fsr2h	equ	0xFDA
  8374                           fsr2l	equ	0xFD9
  8375                           status	equ	0xFD8
  8376                           
  8377 ;; *************** function _MXK_Queue *****************
  8378 ;; Defined at:
  8379 ;;		line 144 in file "Library/MXK.c"
  8380 ;; Parameters:    Size  Location     Type
  8381 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8382 ;;		 -> Absolute function(1), Motor_Step(1), 
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;		None
  8385 ;; Return value:  Size  Location     Type
  8386 ;;                  1    wreg      void 
  8387 ;; Registers used:
  8388 ;;		wreg, status,2, status,0
  8389 ;; Tracked objects:
  8390 ;;		On entry : 0/0
  8391 ;;		On exit  : 0/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8394 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8397 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;Total ram usage:        3 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    7
  8401 ;; This function calls:
  8402 ;;		Nothing
  8403 ;; This function is called by:
  8404 ;;		_Motor_Step
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           	psect	text25
  8409  015FF6                     __ptext25:
  8410                           	opt stack 0
  8411  015FF6                     _MXK_Queue:
  8412                           	opt stack 21
  8413                           
  8414                           ;MXK.c: 146: lQueue = pCallback;
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;incstack = 0
  8418  015FF6  C060  F0E6         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8419  015FFA  C061  F0E7         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8420  015FFE  C062  F0E8         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8421  016002  0012               	return		;funcret
  8422  016004                     __end_of_MXK_Queue:
  8423                           	opt stack 0
  8424                           tosu	equ	0xFFF
  8425                           tosh	equ	0xFFE
  8426                           tosl	equ	0xFFD
  8427                           pclath	equ	0xFFA
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           intcon	equ	0xFF2
  8433                           postinc0	equ	0xFEE
  8434                           wreg	equ	0xFE8
  8435                           postdec1	equ	0xFE5
  8436                           fsr1h	equ	0xFE2
  8437                           fsr1l	equ	0xFE1
  8438                           indf2	equ	0xFDF
  8439                           postinc2	equ	0xFDE
  8440                           postdec2	equ	0xFDD
  8441                           plusw2	equ	0xFDB
  8442                           fsr2h	equ	0xFDA
  8443                           fsr2l	equ	0xFD9
  8444                           status	equ	0xFD8
  8445                           
  8446 ;; *************** function _MXK_BlockSwitchTo *****************
  8447 ;; Defined at:
  8448 ;;		line 82 in file "Library/MXK.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  pModule         1    wreg     enum E6927
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  pModule         1    7[BANK0 ] enum E6927
  8453 ;;  CUR             1    6[BANK0 ] unsigned char 
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  1    wreg      unsigned char 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 0/0
  8460 ;;		On exit  : 0/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;Total ram usage:        2 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    8
  8470 ;; This function calls:
  8471 ;;		_delay_us
  8472 ;; This function is called by:
  8473 ;;		_main
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           	psect	text26
  8478  015984                     __ptext26:
  8479                           	opt stack 0
  8480  015984                     _MXK_BlockSwitchTo:
  8481                           	opt stack 22
  8482                           
  8483                           ;incstack = 0
  8484                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8485  015984  0100               	movlb	0	; () banked
  8486  015986  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8487                           
  8488                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8489  015988  5086               	movf	3974,w,c	;volatile
  8490  01598A  0B0F               	andlw	15
  8491  01598C  0100               	movlb	0	; () banked
  8492  01598E  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8493  015990                     
  8494                           ; BSR set to: 0
  8495                           
  8496                           ; BSR set to: 0
  8497  015990  504C               	movf	_Bus_State,w,c
  8498  015992  B4D8               	btfsc	status,2,c
  8499  015994  D7FD               	goto	l1724
  8500                           
  8501                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8502  015996  0E00               	movlw	0
  8503  015998  6E4C               	movwf	_Bus_State,c
  8504                           
  8505                           ;MXK.c: 90: if (CUR != pModule)
  8506  01599A  0100               	movlb	0	; () banked
  8507  01599C  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8508  01599E  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8509  0159A0  B4D8               	btfsc	status,2,c
  8510  0159A2  D00A               	goto	l1726
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;MXK.c: 91: {
  8514                           ;MXK.c: 92: PORTG &= ~(0xF);
  8515  0159A4  0EF0               	movlw	240
  8516  0159A6  1686               	andwf	3974,f,c	;volatile
  8517                           
  8518                           ;MXK.c: 93: PORTG |= pModule;
  8519  0159A8  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8520  0159AA  1286               	iorwf	3974,f,c	;volatile
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;MXK.c: 96: delay_us(10);
  8524  0159AC  0E00               	movlw	0
  8525  0159AE  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8526  0159B0  0E0A               	movlw	10
  8527  0159B2  6F60               	movwf	delay_us@us& (0+255),b
  8528  0159B4  EC6A  F0AB         	call	_delay_us	;wreg free
  8529  0159B8                     l1726:
  8530                           
  8531                           ;MXK.c: 97: }
  8532                           ;MXK.c: 98: return 1;
  8533  0159B8  0E01               	movlw	1
  8534  0159BA  0012               	return	
  8535  0159BC                     __end_of_MXK_BlockSwitchTo:
  8536                           	opt stack 0
  8537                           tosu	equ	0xFFF
  8538                           tosh	equ	0xFFE
  8539                           tosl	equ	0xFFD
  8540                           pclath	equ	0xFFA
  8541                           tblptru	equ	0xFF8
  8542                           tblptrh	equ	0xFF7
  8543                           tblptrl	equ	0xFF6
  8544                           tablat	equ	0xFF5
  8545                           intcon	equ	0xFF2
  8546                           postinc0	equ	0xFEE
  8547                           wreg	equ	0xFE8
  8548                           postdec1	equ	0xFE5
  8549                           fsr1h	equ	0xFE2
  8550                           fsr1l	equ	0xFE1
  8551                           indf2	equ	0xFDF
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           plusw2	equ	0xFDB
  8555                           fsr2h	equ	0xFDA
  8556                           fsr2l	equ	0xFD9
  8557                           status	equ	0xFD8
  8558                           
  8559 ;; *************** function _delay_us *****************
  8560 ;; Defined at:
  8561 ;;		line 255 in file "Library/Types.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;  us              2    0[BANK0 ] unsigned short 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  u               4    2[BANK0 ] unsigned long 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      void 
  8568 ;; Registers used:
  8569 ;;		wreg, status,2, status,0
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8575 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;Total ram usage:        6 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    7
  8582 ;; This function calls:
  8583 ;;		Nothing
  8584 ;; This function is called by:
  8585 ;;		_MXK_BlockSwitchTo
  8586 ;;		_MXK_SwitchTo
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text27
  8591  0156D4                     __ptext27:
  8592                           	opt stack 0
  8593  0156D4                     _delay_us:
  8594                           	opt stack 20
  8595                           
  8596                           ;Types.c: 256: unsigned long u;
  8597                           ;Types.c: 257: while (us--) {
  8598                           
  8599                           ;incstack = 0
  8600  0156D4  D018               	goto	u11270
  8601  0156D6                     l13950:
  8602                           
  8603                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8604  0156D6  0E00               	movlw	0
  8605  0156D8  0100               	movlb	0	; () banked
  8606  0156DA  6F62               	movwf	delay_us@u& (0+255),b
  8607  0156DC  0E00               	movlw	0
  8608  0156DE  6F63               	movwf	(delay_us@u+1)& (0+255),b
  8609  0156E0  0E00               	movlw	0
  8610  0156E2  6F64               	movwf	(delay_us@u+2)& (0+255),b
  8611  0156E4  0E00               	movlw	0
  8612  0156E6  6F65               	movwf	(delay_us@u+3)& (0+255),b
  8613  0156E8                     l13952:
  8614                           
  8615                           ; BSR set to: 0
  8616  0156E8  5162               	movf	delay_us@u& (0+255),w,b
  8617  0156EA  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
  8618  0156EC  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
  8619  0156EE  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
  8620  0156F0  A4D8               	btfss	status,2,c
  8621  0156F2  D009               	goto	u11270
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626  0156F4  F000               	nop		; ;# 
  8627  0156F6  0E01               	movlw	1
  8628  0156F8  0100               	movlb	0	; () banked
  8629  0156FA  2762               	addwf	delay_us@u& (0+255),f,b
  8630  0156FC  0E00               	movlw	0
  8631  0156FE  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
  8632  015700  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
  8633  015702  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
  8634  015704  D7F1               	goto	l13952
  8635  015706                     u11270:
  8636                           
  8637                           ; BSR set to: 0
  8638                           
  8639                           ; BSR set to: 0
  8640  015706  0100               	movlb	0	; () banked
  8641  015708  0760               	decf	delay_us@us& (0+255),f,b
  8642  01570A  A0D8               	btfss	status,0,c
  8643  01570C  0761               	decf	(delay_us@us+1)& (0+255),f,b
  8644  01570E  2960               	incf	delay_us@us& (0+255),w,b
  8645  015710  E1E2               	bnz	l13950
  8646  015712  2961               	incf	(delay_us@us+1)& (0+255),w,b
  8647  015714  B4D8               	btfsc	status,2,c
  8648  015716  0012               	return	
  8649  015718  D7DE               	goto	l832
  8650  01571A                     __end_of_delay_us:
  8651                           	opt stack 0
  8652                           tosu	equ	0xFFF
  8653                           tosh	equ	0xFFE
  8654                           tosl	equ	0xFFD
  8655                           pclath	equ	0xFFA
  8656                           tblptru	equ	0xFF8
  8657                           tblptrh	equ	0xFF7
  8658                           tblptrl	equ	0xFF6
  8659                           tablat	equ	0xFF5
  8660                           intcon	equ	0xFF2
  8661                           postinc0	equ	0xFEE
  8662                           wreg	equ	0xFE8
  8663                           postdec1	equ	0xFE5
  8664                           fsr1h	equ	0xFE2
  8665                           fsr1l	equ	0xFE1
  8666                           indf2	equ	0xFDF
  8667                           postinc2	equ	0xFDE
  8668                           postdec2	equ	0xFDD
  8669                           plusw2	equ	0xFDB
  8670                           fsr2h	equ	0xFDA
  8671                           fsr2l	equ	0xFD9
  8672                           status	equ	0xFD8
  8673                           
  8674 ;; *************** function _LEDToggle *****************
  8675 ;; Defined at:
  8676 ;;		line 249 in file "main.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      void 
  8683 ;; Registers used:
  8684 ;;		wreg, status,2, status,0, cstack
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8694 ;;Total ram usage:        0 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    9
  8697 ;; This function calls:
  8698 ;;		_LEDOff
  8699 ;;		_LEDOn
  8700 ;; This function is called by:
  8701 ;;		_main
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text28
  8706  01581E                     __ptext28:
  8707                           	opt stack 0
  8708  01581E                     _LEDToggle:
  8709                           	opt stack 21
  8710                           
  8711                           ;main.c: 251: if (INTCONbits.TMR0IF == 1) {
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;incstack = 0
  8715  01581E  A4F2               	btfss	intcon,2,c	;volatile
  8716  015820  0012               	return	
  8717                           
  8718                           ;main.c: 252: INTCONbits.TMR0IF = 0;
  8719  015822  94F2               	bcf	intcon,2,c	;volatile
  8720                           
  8721                           ;main.c: 253: timercount++;
  8722  015824  0101               	movlb	1	; () banked
  8723  015826  4B1E               	infsnz	_timercount& (0+255),f,b
  8724  015828  2B1F               	incf	(_timercount+1)& (0+255),f,b
  8725                           
  8726                           ; BSR set to: 1
  8727                           ;main.c: 254: if (timercount == countOn) {
  8728  01582A  51EF               	movf	_countOn& (0+255),w,b
  8729  01582C  191E               	xorwf	_timercount& (0+255),w,b
  8730  01582E  E105               	bnz	l15436
  8731  015830  51F0               	movf	(_countOn+1)& (0+255),w,b
  8732  015832  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8733  015834  B4D8               	btfsc	status,2,c
  8734                           
  8735                           ; BSR set to: 1
  8736                           ;main.c: 255: LEDOn();
  8737  015836  ECFE  F0AE         	call	_LEDOn	;wreg free
  8738  01583A                     l15436:
  8739                           
  8740                           ;main.c: 256: }
  8741                           ;main.c: 257: if (timercount == countOff) {
  8742  01583A  0101               	movlb	1	; () banked
  8743  01583C  51ED               	movf	_countOff& (0+255),w,b
  8744  01583E  191E               	xorwf	_timercount& (0+255),w,b
  8745  015840  E10C               	bnz	l2183
  8746  015842  51EE               	movf	(_countOff+1)& (0+255),w,b
  8747  015844  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8748  015846  A4D8               	btfss	status,2,c
  8749  015848  0012               	return	
  8750                           
  8751                           ; BSR set to: 1
  8752                           ;main.c: 258: LEDOff();
  8753  01584A  EC0B  F0AF         	call	_LEDOff	;wreg free
  8754                           
  8755                           ;main.c: 259: timercount = 0;
  8756  01584E  0E00               	movlw	0
  8757  015850  0101               	movlb	1	; () banked
  8758  015852  6F1F               	movwf	(_timercount+1)& (0+255),b
  8759  015854  0E00               	movlw	0
  8760  015856  6F1E               	movwf	_timercount& (0+255),b
  8761                           
  8762                           ; BSR set to: 1
  8763  015858  0012               	return	
  8764  01585A                     l2183:
  8765  01585A  0012               	return		;funcret
  8766  01585C                     __end_of_LEDToggle:
  8767                           	opt stack 0
  8768                           tosu	equ	0xFFF
  8769                           tosh	equ	0xFFE
  8770                           tosl	equ	0xFFD
  8771                           pclath	equ	0xFFA
  8772                           tblptru	equ	0xFF8
  8773                           tblptrh	equ	0xFF7
  8774                           tblptrl	equ	0xFF6
  8775                           tablat	equ	0xFF5
  8776                           intcon	equ	0xFF2
  8777                           postinc0	equ	0xFEE
  8778                           wreg	equ	0xFE8
  8779                           postdec1	equ	0xFE5
  8780                           fsr1h	equ	0xFE2
  8781                           fsr1l	equ	0xFE1
  8782                           indf2	equ	0xFDF
  8783                           postinc2	equ	0xFDE
  8784                           postdec2	equ	0xFDD
  8785                           plusw2	equ	0xFDB
  8786                           fsr2h	equ	0xFDA
  8787                           fsr2l	equ	0xFD9
  8788                           status	equ	0xFD8
  8789                           
  8790 ;; *************** function _LEDOn *****************
  8791 ;; Defined at:
  8792 ;;		line 235 in file "main.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;		None
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;		None
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  1    wreg      void 
  8799 ;; Registers used:
  8800 ;;		wreg, cstack
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8810 ;;Total ram usage:        0 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    8
  8813 ;; This function calls:
  8814 ;;		_eusartSend
  8815 ;; This function is called by:
  8816 ;;		_LEDToggle
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           	psect	text29
  8821  015DFC                     __ptext29:
  8822                           	opt stack 0
  8823  015DFC                     _LEDOn:
  8824                           	opt stack 21
  8825                           
  8826                           ;main.c: 236: eusartSend(139);
  8827                           
  8828                           ;incstack = 0
  8829  015DFC  0E8B               	movlw	139
  8830  015DFE  EC09  F0B0         	call	_eusartSend
  8831                           
  8832                           ;main.c: 237: eusartSend(10);
  8833  015E02  0E0A               	movlw	10
  8834  015E04  EC09  F0B0         	call	_eusartSend
  8835                           
  8836                           ;main.c: 238: eusartSend(255);
  8837  015E08  0EFF               	movlw	255
  8838  015E0A  EC09  F0B0         	call	_eusartSend
  8839                           
  8840                           ;main.c: 239: eusartSend(255);
  8841  015E0E  0EFF               	movlw	255
  8842  015E10  EC09  F0B0         	call	_eusartSend
  8843  015E14  0012               	return		;funcret
  8844  015E16                     __end_of_LEDOn:
  8845                           	opt stack 0
  8846                           tosu	equ	0xFFF
  8847                           tosh	equ	0xFFE
  8848                           tosl	equ	0xFFD
  8849                           pclath	equ	0xFFA
  8850                           tblptru	equ	0xFF8
  8851                           tblptrh	equ	0xFF7
  8852                           tblptrl	equ	0xFF6
  8853                           tablat	equ	0xFF5
  8854                           intcon	equ	0xFF2
  8855                           postinc0	equ	0xFEE
  8856                           wreg	equ	0xFE8
  8857                           postdec1	equ	0xFE5
  8858                           fsr1h	equ	0xFE2
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           plusw2	equ	0xFDB
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function _LEDOff *****************
  8869 ;; Defined at:
  8870 ;;		line 242 in file "main.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;		None
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      void 
  8877 ;; Registers used:
  8878 ;;		wreg, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;Total ram usage:        0 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    8
  8891 ;; This function calls:
  8892 ;;		_eusartSend
  8893 ;; This function is called by:
  8894 ;;		_LEDToggle
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text30
  8899  015E16                     __ptext30:
  8900                           	opt stack 0
  8901  015E16                     _LEDOff:
  8902                           	opt stack 21
  8903                           
  8904                           ;main.c: 243: eusartSend(139);
  8905                           
  8906                           ;incstack = 0
  8907  015E16  0E8B               	movlw	139
  8908  015E18  EC09  F0B0         	call	_eusartSend
  8909                           
  8910                           ;main.c: 244: eusartSend(10);
  8911  015E1C  0E0A               	movlw	10
  8912  015E1E  EC09  F0B0         	call	_eusartSend
  8913                           
  8914                           ;main.c: 245: eusartSend(0);
  8915  015E22  0E00               	movlw	0
  8916  015E24  EC09  F0B0         	call	_eusartSend
  8917                           
  8918                           ;main.c: 246: eusartSend(0);
  8919  015E28  0E00               	movlw	0
  8920  015E2A  EC09  F0B0         	call	_eusartSend
  8921  015E2E  0012               	return		;funcret
  8922  015E30                     __end_of_LEDOff:
  8923                           	opt stack 0
  8924                           tosu	equ	0xFFF
  8925                           tosh	equ	0xFFE
  8926                           tosl	equ	0xFFD
  8927                           pclath	equ	0xFFA
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           intcon	equ	0xFF2
  8933                           postinc0	equ	0xFEE
  8934                           wreg	equ	0xFE8
  8935                           postdec1	equ	0xFE5
  8936                           fsr1h	equ	0xFE2
  8937                           fsr1l	equ	0xFE1
  8938                           indf2	equ	0xFDF
  8939                           postinc2	equ	0xFDE
  8940                           postdec2	equ	0xFDD
  8941                           plusw2	equ	0xFDB
  8942                           fsr2h	equ	0xFDA
  8943                           fsr2l	equ	0xFD9
  8944                           status	equ	0xFD8
  8945                           
  8946 ;; *************** function _LCD_Init *****************
  8947 ;; Defined at:
  8948 ;;		line 172 in file "Library/LCD.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;		None
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  i               2   55[BANK0 ] unsigned short 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;                  1    wreg      void 
  8955 ;; Registers used:
  8956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : 0/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8963 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8965 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8966 ;;Total ram usage:        4 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:   15
  8969 ;; This function calls:
  8970 ;;		_Configure_GPIOs
  8971 ;;		_LCD_Fill
  8972 ;;		_LCD_Write
  8973 ;;		_Set_Rotation
  8974 ;;		_delay_ms
  8975 ;; This function is called by:
  8976 ;;		_main
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	text31
  8981  0130A2                     __ptext31:
  8982                           	opt stack 0
  8983  0130A2                     _LCD_Init:
  8984                           	opt stack 15
  8985                           
  8986                           ;LCD.c: 174: UINT16 i;
  8987                           ;LCD.c: 175: Configure_GPIOs();
  8988                           
  8989                           ;incstack = 0
  8990  0130A2  EC46  F0A8         	call	_Configure_GPIOs	;wreg free
  8991                           
  8992                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  8993  0130A6  0E00               	movlw	0
  8994  0130A8  0100               	movlb	0	; () banked
  8995  0130AA  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
  8996  0130AC  0E00               	movlw	0
  8997  0130AE  6F97               	movwf	LCD_Init@i& (0+255),b
  8998                           
  8999                           ; BSR set to: 0
  9000  0130B0  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9001  0130B2  E17D               	bnz	u12290
  9002  0130B4  0E59               	movlw	89
  9003  0130B6  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9004  0130B8  B0D8               	btfsc	status,0,c
  9005  0130BA  D079               	goto	u12290
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;LCD.c: 178: {
  9009                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  9010                           
  9011                           ; BSR set to: 0
  9012                           
  9013                           ; BSR set to: 0
  9014  0130BC  90D8               	bcf	status,0,c
  9015  0130BE  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9016  0130C0  6EF6               	movwf	tblptrl,c
  9017  0130C2  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9018  0130C4  6EF7               	movwf	tblptrh,c
  9019  0130C6  0E57               	movlw	low _InitList
  9020  0130C8  26F6               	addwf	tblptrl,f,c
  9021  0130CA  0EFB               	movlw	high _InitList
  9022  0130CC  22F7               	addwfc	tblptrh,f,c
  9023  0130CE                     	if	1	;There are 3 active tblptr bytes
  9024  0130CE  6AF8               	clrf	tblptru,c
  9025  0130D0  0E00               	movlw	low (__mediumconst shr (0+16))
  9026  0130D2  22F8               	addwfc	tblptru,f,c
  9027  0130D4                     	endif
  9028  0130D4  0009               	tblrd		*+
  9029  0130D6  0E80               	movlw	128
  9030  0130D8  18F5               	xorwf	tablat,w,c
  9031  0130DA  0009               	tblrd		*+
  9032  0130DC  10F5               	iorwf	tablat,w,c
  9033  0130DE  A4D8               	btfss	status,2,c
  9034  0130E0  D01D               	goto	l87
  9035                           
  9036                           ; BSR set to: 0
  9037  0130E2  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9038  0130E4  E11B               	bnz	l15060
  9039  0130E6  0E58               	movlw	88
  9040  0130E8  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9041  0130EA  B0D8               	btfsc	status,0,c
  9042  0130EC  D017               	goto	l87
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;LCD.c: 180: delay_ms(InitList[++i]);
  9046  0130EE  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9047  0130F0  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9048  0130F2  90D8               	bcf	status,0,c
  9049  0130F4  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9050  0130F6  6EF6               	movwf	tblptrl,c
  9051  0130F8  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9052  0130FA  6EF7               	movwf	tblptrh,c
  9053  0130FC  0E57               	movlw	low _InitList
  9054  0130FE  26F6               	addwf	tblptrl,f,c
  9055  013100  0EFB               	movlw	high _InitList
  9056  013102  22F7               	addwfc	tblptrh,f,c
  9057  013104                     	if	1	;There are 3 active tblptr bytes
  9058  013104  6AF8               	clrf	tblptru,c
  9059  013106  0E00               	movlw	low (__mediumconst shr (0+16))
  9060  013108  22F8               	addwfc	tblptru,f,c
  9061  01310A                     	endif
  9062  01310A  0009               	tblrd		*+
  9063  01310C  CFF5 F060          	movff	tablat,delay_ms@ms
  9064  013110  000A               	tblrd		*-
  9065  013112  CFF5 F061          	movff	tablat,delay_ms@ms+1
  9066  013116  EC75  F0A8         	call	_delay_ms	;wreg free
  9067  01311A  D043               	goto	l90
  9068  01311C                     l87:
  9069  01311C                     l15060:
  9070                           
  9071                           ;LCD.c: 181: else
  9072                           ;LCD.c: 182: {
  9073                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  9074  01311C  90D8               	bcf	status,0,c
  9075  01311E  0100               	movlb	0	; () banked
  9076  013120  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9077  013122  6EF6               	movwf	tblptrl,c
  9078  013124  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9079  013126  6EF7               	movwf	tblptrh,c
  9080  013128  0E57               	movlw	low _InitList
  9081  01312A  26F6               	addwf	tblptrl,f,c
  9082  01312C  0EFB               	movlw	high _InitList
  9083  01312E  22F7               	addwfc	tblptrh,f,c
  9084  013130                     	if	1	;There are 3 active tblptr bytes
  9085  013130  6AF8               	clrf	tblptru,c
  9086  013132  0E00               	movlw	low (__mediumconst shr (0+16))
  9087  013134  22F8               	addwfc	tblptru,f,c
  9088  013136                     	endif
  9089  013136  0009               	tblrd		*+
  9090  013138  0E00               	movlw	0
  9091  01313A  5EF5               	subwf	tablat,f,c
  9092  01313C  0009               	tblrd		*+
  9093  01313E  0E01               	movlw	1
  9094  013140  5AF5               	subwfb	tablat,f,c
  9095  013142  A0D8               	btfss	status,0,c
  9096  013144  D01B               	goto	l89
  9097                           
  9098                           ; BSR set to: 0
  9099  013146  0E00               	movlw	0
  9100  013148  6F63               	movwf	LCD_Write@mode& (0+255),b
  9101  01314A  90D8               	bcf	status,0,c
  9102  01314C  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9103  01314E  6EF6               	movwf	tblptrl,c
  9104  013150  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9105  013152  6EF7               	movwf	tblptrh,c
  9106  013154  0E57               	movlw	low _InitList
  9107  013156  26F6               	addwf	tblptrl,f,c
  9108  013158  0EFB               	movlw	high _InitList
  9109  01315A  22F7               	addwfc	tblptrh,f,c
  9110  01315C                     	if	1	;There are 3 active tblptr bytes
  9111  01315C  6AF8               	clrf	tblptru,c
  9112  01315E  0E00               	movlw	low (__mediumconst shr (0+16))
  9113  013160  22F8               	addwfc	tblptru,f,c
  9114  013162                     	endif
  9115  013162  0009               	tblrd		*+
  9116  013164  CFF5 F095          	movff	tablat,??_LCD_Init
  9117  013168  0009               	tblrd		*+
  9118  01316A  CFF5 F096          	movff	tablat,??_LCD_Init+1
  9119  01316E  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
  9120  013172  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
  9121  013174  5195               	movf	??_LCD_Init& (0+255),w,b
  9122  013176  ECC3  F0AE         	call	_LCD_Write
  9123  01317A  D013               	goto	l90
  9124  01317C                     l89:
  9125                           
  9126                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  9127  01317C  0E01               	movlw	1
  9128  01317E  0100               	movlb	0	; () banked
  9129  013180  6F63               	movwf	LCD_Write@mode& (0+255),b
  9130  013182  90D8               	bcf	status,0,c
  9131  013184  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9132  013186  6EF6               	movwf	tblptrl,c
  9133  013188  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9134  01318A  6EF7               	movwf	tblptrh,c
  9135  01318C  0E57               	movlw	low _InitList
  9136  01318E  26F6               	addwf	tblptrl,f,c
  9137  013190  0EFB               	movlw	high _InitList
  9138  013192  22F7               	addwfc	tblptrh,f,c
  9139  013194                     	if	1	;There are 3 active tblptr bytes
  9140  013194  6AF8               	clrf	tblptru,c
  9141  013196  0E00               	movlw	low (__mediumconst shr (0+16))
  9142  013198  22F8               	addwfc	tblptru,f,c
  9143  01319A                     	endif
  9144  01319A  0008               	tblrd		*
  9145  01319C  50F5               	movf	tablat,w,c
  9146  01319E  ECC3  F0AE         	call	_LCD_Write
  9147  0131A2                     l90:
  9148  0131A2  0100               	movlb	0	; () banked
  9149  0131A4  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9150  0131A6  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9151                           
  9152                           ; BSR set to: 0
  9153  0131A8  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9154  0131AA  E101               	bnz	l15070
  9155  0131AC  D783               	goto	L5
  9156  0131AE                     u12290:
  9157  0131AE                     l15070:
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;LCD.c: 185: }
  9161                           ;LCD.c: 186: }
  9162                           ;LCD.c: 187: delay_ms(100);
  9163  0131AE  0E00               	movlw	0
  9164  0131B0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9165  0131B2  0E64               	movlw	100
  9166  0131B4  6F60               	movwf	delay_ms@ms& (0+255),b
  9167  0131B6  EC75  F0A8         	call	_delay_ms	;wreg free
  9168                           
  9169                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  9170  0131BA  0E00               	movlw	0
  9171  0131BC  0100               	movlb	0	; () banked
  9172  0131BE  6F63               	movwf	LCD_Write@mode& (0+255),b
  9173  0131C0  0E29               	movlw	41
  9174  0131C2  ECC3  F0AE         	call	_LCD_Write
  9175                           
  9176                           ;LCD.c: 189: Set_Rotation(1);
  9177  0131C6  0E01               	movlw	1
  9178  0131C8  ECA0  F0A2         	call	_Set_Rotation
  9179                           
  9180                           ;LCD.c: 191: delay_ms(100);
  9181  0131CC  0E00               	movlw	0
  9182  0131CE  0100               	movlb	0	; () banked
  9183  0131D0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9184  0131D2  0E64               	movlw	100
  9185  0131D4  6F60               	movwf	delay_ms@ms& (0+255),b
  9186  0131D6  EC75  F0A8         	call	_delay_ms	;wreg free
  9187                           
  9188                           ;LCD.c: 192: LCD_Fill(0x0000);
  9189  0131DA  0E00               	movlw	0
  9190  0131DC  0100               	movlb	0	; () banked
  9191  0131DE  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  9192  0131E0  0E00               	movlw	0
  9193  0131E2  6F69               	movwf	LCD_Fill@pColour& (0+255),b
  9194  0131E4  EC22  F0AB         	call	_LCD_Fill	;wreg free
  9195  0131E8  0012               	return		;funcret
  9196  0131EA                     __end_of_LCD_Init:
  9197                           	opt stack 0
  9198                           tosu	equ	0xFFF
  9199                           tosh	equ	0xFFE
  9200                           tosl	equ	0xFFD
  9201                           pclath	equ	0xFFA
  9202                           tblptru	equ	0xFF8
  9203                           tblptrh	equ	0xFF7
  9204                           tblptrl	equ	0xFF6
  9205                           tablat	equ	0xFF5
  9206                           intcon	equ	0xFF2
  9207                           postinc0	equ	0xFEE
  9208                           wreg	equ	0xFE8
  9209                           postdec1	equ	0xFE5
  9210                           fsr1h	equ	0xFE2
  9211                           fsr1l	equ	0xFE1
  9212                           indf2	equ	0xFDF
  9213                           postinc2	equ	0xFDE
  9214                           postdec2	equ	0xFDD
  9215                           plusw2	equ	0xFDB
  9216                           fsr2h	equ	0xFDA
  9217                           fsr2l	equ	0xFD9
  9218                           status	equ	0xFD8
  9219                           
  9220 ;; *************** function _Set_Rotation *****************
  9221 ;; Defined at:
  9222 ;;		line 248 in file "Library/LCD.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;  m               1    wreg     unsigned char 
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;  m               1    5[BANK0 ] unsigned char 
  9227 ;;  rotation        1    6[BANK0 ] unsigned char 
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      void 
  9230 ;; Registers used:
  9231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9232 ;; Tracked objects:
  9233 ;;		On entry : 0/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;Total ram usage:        2 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    9
  9244 ;; This function calls:
  9245 ;;		_LCD_Write
  9246 ;; This function is called by:
  9247 ;;		_LCD_Init
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text32
  9252  014540                     __ptext32:
  9253                           	opt stack 0
  9254  014540                     _Set_Rotation:
  9255                           	opt stack 20
  9256                           
  9257                           ;incstack = 0
  9258                           ;Set_Rotation@m stored from wreg
  9259  014540  0100               	movlb	0	; () banked
  9260  014542  6F65               	movwf	Set_Rotation@m& (0+255),b
  9261                           
  9262                           ;LCD.c: 250: UINT8 rotation = 0x00;
  9263  014544  0E00               	movlw	0
  9264  014546  0100               	movlb	0	; () banked
  9265  014548  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  9269  01454A  0E00               	movlw	0
  9270  01454C  6F63               	movwf	LCD_Write@mode& (0+255),b
  9271  01454E  0E36               	movlw	54
  9272  014550  ECC3  F0AE         	call	_LCD_Write
  9273                           
  9274                           ;LCD.c: 253: rotation = (m % 4);
  9275  014554  0100               	movlb	0	; () banked
  9276  014556  5165               	movf	Set_Rotation@m& (0+255),w,b
  9277  014558  0B03               	andlw	3
  9278  01455A  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9279                           
  9280                           ;LCD.c: 255: switch(rotation)
  9281  01455C  D02B               	goto	l117
  9282  01455E                     
  9283                           ; BSR set to: 0
  9284                           ;LCD.c: 258: {
  9285                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  9286                           
  9287                           ; BSR set to: 0
  9288  01455E  0E01               	movlw	1
  9289  014560  6F63               	movwf	LCD_Write@mode& (0+255),b
  9290  014562  0EC8               	movlw	200
  9291  014564  ECC3  F0AE         	call	_LCD_Write
  9292                           
  9293                           ;LCD.c: 260: w = 128;
  9294  014568  0E80               	movlw	128
  9295  01456A  6E50               	movwf	_w,c
  9296                           
  9297                           ;LCD.c: 261: l = 128;
  9298  01456C  0E80               	movlw	128
  9299  01456E  6E4F               	movwf	_l,c
  9300                           
  9301                           ;LCD.c: 262: break;
  9302  014570  0012               	return	
  9303  014572                     
  9304                           ;LCD.c: 265: {
  9305                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  9306  014572  0E01               	movlw	1
  9307  014574  0100               	movlb	0	; () banked
  9308  014576  6F63               	movwf	LCD_Write@mode& (0+255),b
  9309  014578  0EA8               	movlw	168
  9310  01457A  ECC3  F0AE         	call	_LCD_Write
  9311                           
  9312                           ;LCD.c: 267: w = 128;
  9313  01457E  0E80               	movlw	128
  9314  014580  6E50               	movwf	_w,c
  9315                           
  9316                           ;LCD.c: 268: l = 128;
  9317  014582  0E80               	movlw	128
  9318  014584  6E4F               	movwf	_l,c
  9319                           
  9320                           ;LCD.c: 269: break;
  9321  014586  0012               	return	
  9322  014588                     
  9323                           ;LCD.c: 272: {
  9324                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9325  014588  0E01               	movlw	1
  9326  01458A  0100               	movlb	0	; () banked
  9327  01458C  6F63               	movwf	LCD_Write@mode& (0+255),b
  9328  01458E  0E08               	movlw	8
  9329  014590  ECC3  F0AE         	call	_LCD_Write
  9330                           
  9331                           ;LCD.c: 274: w = 128;
  9332  014594  0E80               	movlw	128
  9333  014596  6E50               	movwf	_w,c
  9334                           
  9335                           ;LCD.c: 275: l = 128;
  9336  014598  0E80               	movlw	128
  9337  01459A  6E4F               	movwf	_l,c
  9338                           
  9339                           ;LCD.c: 276: break;
  9340  01459C  0012               	return	
  9341  01459E                     
  9342                           ;LCD.c: 279: {
  9343                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9344  01459E  0E01               	movlw	1
  9345  0145A0  0100               	movlb	0	; () banked
  9346  0145A2  6F63               	movwf	LCD_Write@mode& (0+255),b
  9347  0145A4  0E68               	movlw	104
  9348  0145A6  ECC3  F0AE         	call	_LCD_Write
  9349                           
  9350                           ;LCD.c: 281: w = 128;
  9351  0145AA  0E80               	movlw	128
  9352  0145AC  6E50               	movwf	_w,c
  9353                           
  9354                           ;LCD.c: 282: l = 128;
  9355  0145AE  0E80               	movlw	128
  9356  0145B0  6E4F               	movwf	_l,c
  9357                           
  9358                           ;LCD.c: 284: }
  9359                           ;LCD.c: 285: }
  9360                           
  9361                           ;LCD.c: 283: break;
  9362  0145B2  0012               	return	
  9363  0145B4                     l117:
  9364  0145B4  0100               	movlb	0	; () banked
  9365  0145B6  5166               	movf	Set_Rotation@rotation& (0+255),w,b
  9366                           
  9367                           ; Switch size 1, requested type "space"
  9368                           ; Number of cases is 4, Range of values is 0 to 3
  9369                           ; switch strategies available:
  9370                           ; Name         Instructions Cycles
  9371                           ; simple_byte           13     7 (average)
  9372                           ;	Chosen strategy is simple_byte
  9373  0145B8  0A00               	xorlw	0	; case 0
  9374  0145BA  B4D8               	btfsc	status,2,c
  9375  0145BC  D7D0               	goto	l118
  9376  0145BE  0A01               	xorlw	1	; case 1
  9377  0145C0  B4D8               	btfsc	status,2,c
  9378  0145C2  D7D7               	goto	l120
  9379  0145C4  0A03               	xorlw	3	; case 2
  9380  0145C6  B4D8               	btfsc	status,2,c
  9381  0145C8  D7DF               	goto	l121
  9382  0145CA  0A01               	xorlw	1	; case 3
  9383  0145CC  A4D8               	btfss	status,2,c
  9384  0145CE  0012               	return	
  9385  0145D0  D7E6               	goto	l122
  9386  0145D2                     __end_of_Set_Rotation:
  9387                           	opt stack 0
  9388                           tosu	equ	0xFFF
  9389                           tosh	equ	0xFFE
  9390                           tosl	equ	0xFFD
  9391                           pclath	equ	0xFFA
  9392                           tblptru	equ	0xFF8
  9393                           tblptrh	equ	0xFF7
  9394                           tblptrl	equ	0xFF6
  9395                           tablat	equ	0xFF5
  9396                           intcon	equ	0xFF2
  9397                           postinc0	equ	0xFEE
  9398                           wreg	equ	0xFE8
  9399                           postdec1	equ	0xFE5
  9400                           fsr1h	equ	0xFE2
  9401                           fsr1l	equ	0xFE1
  9402                           indf2	equ	0xFDF
  9403                           postinc2	equ	0xFDE
  9404                           postdec2	equ	0xFDD
  9405                           plusw2	equ	0xFDB
  9406                           fsr2h	equ	0xFDA
  9407                           fsr2l	equ	0xFD9
  9408                           status	equ	0xFD8
  9409                           
  9410 ;; *************** function _LCD_Fill *****************
  9411 ;; Defined at:
  9412 ;;		line 287 in file "Library/LCD.c"
  9413 ;; Parameters:    Size  Location     Type
  9414 ;;  pColour         2    9[BANK0 ] unsigned short 
  9415 ;; Auto vars:     Size  Location     Type
  9416 ;;  j               1   12[BANK0 ] unsigned char 
  9417 ;;  i               1   11[BANK0 ] unsigned char 
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  1    wreg      void 
  9420 ;; Registers used:
  9421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9427 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9430 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9431 ;;Total ram usage:        4 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:   10
  9434 ;; This function calls:
  9435 ;;		_LCD_Word_Write
  9436 ;;		_Set_Addr_Window
  9437 ;; This function is called by:
  9438 ;;		_LCD_Init
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           	psect	text33
  9443  015644                     __ptext33:
  9444                           	opt stack 0
  9445  015644                     _LCD_Fill:
  9446                           	opt stack 19
  9447                           
  9448                           ;LCD.c: 296: UINT8 i = 0x00;
  9449                           
  9450                           ;incstack = 0
  9451  015644  0E00               	movlw	0
  9452  015646  0100               	movlb	0	; () banked
  9453  015648  6F6B               	movwf	LCD_Fill@i& (0+255),b
  9454                           
  9455                           ;LCD.c: 297: UINT8 j = 0x00;
  9456  01564A  0E00               	movlw	0
  9457  01564C  6F6C               	movwf	LCD_Fill@j& (0+255),b
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9461  01564E  0E00               	movlw	0
  9462  015650  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
  9463  015652  0450               	decf	_w,w,c
  9464  015654  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9465  015656  044F               	decf	_l,w,c
  9466  015658  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9467  01565A  0E00               	movlw	0
  9468  01565C  EC09  F0A2         	call	_Set_Addr_Window
  9469                           
  9470                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9471  015660  C04F  F06C         	movff	_l,LCD_Fill@j
  9472  015664  0100               	movlb	0	; () banked
  9473  015666  516C               	movf	LCD_Fill@j& (0+255),w,b
  9474  015668  B4D8               	btfsc	status,2,c
  9475  01566A  0012               	return	
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9479                           
  9480                           ; BSR set to: 0
  9481  01566C  C050  F06B         	movff	_w,LCD_Fill@i
  9482  015670                     l14762:
  9483                           
  9484                           ; BSR set to: 0
  9485  015670  516B               	movf	LCD_Fill@i& (0+255),w,b
  9486  015672  B4D8               	btfsc	status,2,c
  9487  015674  D009               	goto	u11990
  9488                           
  9489                           ; BSR set to: 0
  9490                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9491                           
  9492                           ; BSR set to: 0
  9493                           
  9494                           ; BSR set to: 0
  9495  015676  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9496  01567A  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9497  01567E  EC18  F0AF         	call	_LCD_Word_Write	;wreg free
  9498  015682  0100               	movlb	0	; () banked
  9499  015684  076B               	decf	LCD_Fill@i& (0+255),f,b
  9500  015686  D7F4               	goto	l14762
  9501  015688                     u11990:
  9502                           
  9503                           ; BSR set to: 0
  9504                           
  9505                           ; BSR set to: 0
  9506  015688  076C               	decf	LCD_Fill@j& (0+255),f,b
  9507  01568A  D7ED               	goto	L6
  9508  01568C                     __end_of_LCD_Fill:
  9509                           	opt stack 0
  9510                           tosu	equ	0xFFF
  9511                           tosh	equ	0xFFE
  9512                           tosl	equ	0xFFD
  9513                           pclath	equ	0xFFA
  9514                           tblptru	equ	0xFF8
  9515                           tblptrh	equ	0xFF7
  9516                           tblptrl	equ	0xFF6
  9517                           tablat	equ	0xFF5
  9518                           intcon	equ	0xFF2
  9519                           postinc0	equ	0xFEE
  9520                           wreg	equ	0xFE8
  9521                           postdec1	equ	0xFE5
  9522                           fsr1h	equ	0xFE2
  9523                           fsr1l	equ	0xFE1
  9524                           indf2	equ	0xFDF
  9525                           postinc2	equ	0xFDE
  9526                           postdec2	equ	0xFDD
  9527                           plusw2	equ	0xFDB
  9528                           fsr2h	equ	0xFDA
  9529                           fsr2l	equ	0xFD9
  9530                           status	equ	0xFD8
  9531                           
  9532 ;; *************** function _Configure_GPIOs *****************
  9533 ;; Defined at:
  9534 ;;		line 46 in file "Library/LCD.c"
  9535 ;; Parameters:    Size  Location     Type
  9536 ;;		None
  9537 ;; Auto vars:     Size  Location     Type
  9538 ;;		None
  9539 ;; Return value:  Size  Location     Type
  9540 ;;                  1    wreg      void 
  9541 ;; Registers used:
  9542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9543 ;; Tracked objects:
  9544 ;;		On entry : 0/0
  9545 ;;		On exit  : 0/0
  9546 ;;		Unchanged: 0/0
  9547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9552 ;;Total ram usage:        0 bytes
  9553 ;; Hardware stack levels used:    1
  9554 ;; Hardware stack levels required when called:   14
  9555 ;; This function calls:
  9556 ;;		_LCD_Reset
  9557 ;;		_Port_SetPinType
  9558 ;;		_SPI_Init
  9559 ;;		_SPI_MaxSpeed
  9560 ;; This function is called by:
  9561 ;;		_LCD_Init
  9562 ;; This function uses a non-reentrant model
  9563 ;;
  9564                           
  9565                           	psect	text34
  9566  01508C                     __ptext34:
  9567                           	opt stack 0
  9568  01508C                     _Configure_GPIOs:
  9569                           	opt stack 15
  9570                           
  9571                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;incstack = 0
  9575  01508C  0EB5               	movlw	low _PortF
  9576  01508E  0100               	movlb	0	; () banked
  9577  015090  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9578  015092  0E01               	movlw	high _PortF
  9579  015094  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9580  015096  0E07               	movlw	7
  9581  015098  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9582  01509A  0E03               	movlw	3
  9583  01509C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9584  01509E  EC4A  F093         	call	_Port_SetPinType	;wreg free
  9585                           
  9586                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9587  0150A2  0EB5               	movlw	low _PortF
  9588  0150A4  0100               	movlb	0	; () banked
  9589  0150A6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9590  0150A8  0E01               	movlw	high _PortF
  9591  0150AA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9592  0150AC  0E06               	movlw	6
  9593  0150AE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9594  0150B0  0E03               	movlw	3
  9595  0150B2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9596  0150B4  EC4A  F093         	call	_Port_SetPinType	;wreg free
  9597                           
  9598                           ;LCD.c: 55: LCD_Reset();
  9599  0150B8  ECCA  F0A9         	call	_LCD_Reset	;wreg free
  9600                           
  9601                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9602  0150BC  0EC0               	movlw	192
  9603  0150BE  0100               	movlb	0	; () banked
  9604  0150C0  6F8D               	movwf	SPI_Init@pClock& (0+255),b
  9605  0150C2  0EC6               	movlw	198
  9606  0150C4  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9607  0150C6  0E2D               	movlw	45
  9608  0150C8  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9609  0150CA  0E00               	movlw	0
  9610  0150CC  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9611  0150CE  0E01               	movlw	1
  9612  0150D0  6F91               	movwf	SPI_Init@pChannel& (0+255),b
  9613  0150D2  0E01               	movlw	1
  9614  0150D4  6F92               	movwf	SPI_Init@pMode& (0+255),b
  9615  0150D6  ECC7  F083         	call	_SPI_Init	;wreg free
  9616                           
  9617                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9618  0150DA  0E82               	movlw	low _SPI2
  9619  0150DC  0100               	movlb	0	; () banked
  9620  0150DE  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9621  0150E0  0E01               	movlw	high _SPI2
  9622  0150E2  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9623  0150E4  EC4A  F0A7         	call	_SPI_MaxSpeed	;wreg free
  9624  0150E8  0012               	return		;funcret
  9625  0150EA                     __end_of_Configure_GPIOs:
  9626                           	opt stack 0
  9627                           tosu	equ	0xFFF
  9628                           tosh	equ	0xFFE
  9629                           tosl	equ	0xFFD
  9630                           pclath	equ	0xFFA
  9631                           tblptru	equ	0xFF8
  9632                           tblptrh	equ	0xFF7
  9633                           tblptrl	equ	0xFF6
  9634                           tablat	equ	0xFF5
  9635                           intcon	equ	0xFF2
  9636                           postinc0	equ	0xFEE
  9637                           wreg	equ	0xFE8
  9638                           postdec1	equ	0xFE5
  9639                           fsr1h	equ	0xFE2
  9640                           fsr1l	equ	0xFE1
  9641                           indf2	equ	0xFDF
  9642                           postinc2	equ	0xFDE
  9643                           postdec2	equ	0xFDD
  9644                           plusw2	equ	0xFDB
  9645                           fsr2h	equ	0xFDA
  9646                           fsr2l	equ	0xFD9
  9647                           status	equ	0xFD8
  9648                           
  9649 ;; *************** function _SPI_MaxSpeed *****************
  9650 ;; Defined at:
  9651 ;;		line 201 in file "Library/SPI.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9654 ;;		 -> SPI2(11), 
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;		None
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  1    wreg      void 
  9659 ;; Registers used:
  9660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9666 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9669 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9670 ;;Total ram usage:        2 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    9
  9673 ;; This function calls:
  9674 ;;		_Byte_SetBit
  9675 ;;		_Byte_SetQuad
  9676 ;; This function is called by:
  9677 ;;		_Configure_GPIOs
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           	psect	text35
  9682  014E94                     __ptext35:
  9683                           	opt stack 0
  9684  014E94                     _SPI_MaxSpeed:
  9685                           	opt stack 19
  9686                           
  9687                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9688                           
  9689                           ;incstack = 0
  9690  014E94  0100               	movlb	0	; () banked
  9691  014E96  EE20 F006          	lfsr	2,6
  9692  014E9A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9693  014E9C  26D9               	addwf	fsr2l,f,c
  9694  014E9E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9695  014EA0  22DA               	addwfc	fsr2h,f,c
  9696  014EA2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9697  014EA6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9698  014EAA  0E05               	movlw	5
  9699  014EAC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9700  014EAE  0E00               	movlw	0
  9701  014EB0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9702  014EB2  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
  9703                           
  9704                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9705  014EB6  0100               	movlb	0	; () banked
  9706  014EB8  EE20 F006          	lfsr	2,6
  9707  014EBC  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9708  014EBE  26D9               	addwf	fsr2l,f,c
  9709  014EC0  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9710  014EC2  22DA               	addwfc	fsr2h,f,c
  9711  014EC4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
  9712  014EC8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
  9713  014ECC  0E00               	movlw	0
  9714  014ECE  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9715  014ED0  0E00               	movlw	0
  9716  014ED2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
  9717  014ED4  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
  9718                           
  9719                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9720  014ED8  0100               	movlb	0	; () banked
  9721  014EDA  EE20 F006          	lfsr	2,6
  9722  014EDE  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9723  014EE0  26D9               	addwf	fsr2l,f,c
  9724  014EE2  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9725  014EE4  22DA               	addwfc	fsr2h,f,c
  9726  014EE6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9727  014EEA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9728  014EEE  0E05               	movlw	5
  9729  014EF0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9730  014EF2  0E01               	movlw	1
  9731  014EF4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9732  014EF6  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
  9733  014EFA  0012               	return		;funcret
  9734  014EFC                     __end_of_SPI_MaxSpeed:
  9735                           	opt stack 0
  9736                           tosu	equ	0xFFF
  9737                           tosh	equ	0xFFE
  9738                           tosl	equ	0xFFD
  9739                           pclath	equ	0xFFA
  9740                           tblptru	equ	0xFF8
  9741                           tblptrh	equ	0xFF7
  9742                           tblptrl	equ	0xFF6
  9743                           tablat	equ	0xFF5
  9744                           intcon	equ	0xFF2
  9745                           postinc0	equ	0xFEE
  9746                           wreg	equ	0xFE8
  9747                           postdec1	equ	0xFE5
  9748                           fsr1h	equ	0xFE2
  9749                           fsr1l	equ	0xFE1
  9750                           indf2	equ	0xFDF
  9751                           postinc2	equ	0xFDE
  9752                           postdec2	equ	0xFDD
  9753                           plusw2	equ	0xFDB
  9754                           fsr2h	equ	0xFDA
  9755                           fsr2l	equ	0xFD9
  9756                           status	equ	0xFD8
  9757                           
  9758 ;; *************** function _LCD_Reset *****************
  9759 ;; Defined at:
  9760 ;;		line 95 in file "Library/LCD.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;		None
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;		None
  9765 ;; Return value:  Size  Location     Type
  9766 ;;                  1    wreg      void 
  9767 ;; Registers used:
  9768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9778 ;;Total ram usage:        0 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:   13
  9781 ;; This function calls:
  9782 ;;		_LED_Toggle
  9783 ;;		_Reset_High
  9784 ;;		_Reset_Low
  9785 ;;		_delay_ms
  9786 ;; This function is called by:
  9787 ;;		_Configure_GPIOs
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text36
  9792  015394                     __ptext36:
  9793                           	opt stack 0
  9794  015394                     _LCD_Reset:
  9795                           	opt stack 15
  9796                           
  9797                           ;LCD.c: 97: Reset_High();
  9798                           
  9799                           ;incstack = 0
  9800  015394  EC4A  F0AF         	call	_Reset_High	;wreg free
  9801                           
  9802                           ;LCD.c: 98: LED_Toggle(eLED2);
  9803  015398  0E01               	movlw	1
  9804  01539A  ECCF  F0AB         	call	_LED_Toggle
  9805                           
  9806                           ;LCD.c: 99: delay_ms(0x80);
  9807  01539E  0E00               	movlw	0
  9808  0153A0  0100               	movlb	0	; () banked
  9809  0153A2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9810  0153A4  0E80               	movlw	128
  9811  0153A6  6F60               	movwf	delay_ms@ms& (0+255),b
  9812  0153A8  EC75  F0A8         	call	_delay_ms	;wreg free
  9813                           
  9814                           ;LCD.c: 100: LED_Toggle(eLED2);
  9815  0153AC  0E01               	movlw	1
  9816  0153AE  ECCF  F0AB         	call	_LED_Toggle
  9817                           
  9818                           ;LCD.c: 101: Reset_Low();
  9819  0153B2  EC3E  F0AF         	call	_Reset_Low	;wreg free
  9820                           
  9821                           ;LCD.c: 102: delay_ms(0x80);
  9822  0153B6  0E00               	movlw	0
  9823  0153B8  0100               	movlb	0	; () banked
  9824  0153BA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9825  0153BC  0E80               	movlw	128
  9826  0153BE  6F60               	movwf	delay_ms@ms& (0+255),b
  9827  0153C0  EC75  F0A8         	call	_delay_ms	;wreg free
  9828                           
  9829                           ;LCD.c: 103: LED_Toggle(eLED2);
  9830  0153C4  0E01               	movlw	1
  9831  0153C6  ECCF  F0AB         	call	_LED_Toggle
  9832                           
  9833                           ;LCD.c: 104: Reset_High();
  9834  0153CA  EC4A  F0AF         	call	_Reset_High	;wreg free
  9835                           
  9836                           ;LCD.c: 105: delay_ms(0x80);
  9837  0153CE  0E00               	movlw	0
  9838  0153D0  0100               	movlb	0	; () banked
  9839  0153D2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9840  0153D4  0E80               	movlw	128
  9841  0153D6  6F60               	movwf	delay_ms@ms& (0+255),b
  9842  0153D8  EC75  F0A8         	call	_delay_ms	;wreg free
  9843                           
  9844                           ;LCD.c: 106: LED_Toggle(eLED2);
  9845  0153DC  0E01               	movlw	1
  9846  0153DE  ECCF  F0AB         	call	_LED_Toggle
  9847  0153E2  0012               	return		;funcret
  9848  0153E4                     __end_of_LCD_Reset:
  9849                           	opt stack 0
  9850                           tosu	equ	0xFFF
  9851                           tosh	equ	0xFFE
  9852                           tosl	equ	0xFFD
  9853                           pclath	equ	0xFFA
  9854                           tblptru	equ	0xFF8
  9855                           tblptrh	equ	0xFF7
  9856                           tblptrl	equ	0xFF6
  9857                           tablat	equ	0xFF5
  9858                           intcon	equ	0xFF2
  9859                           postinc0	equ	0xFEE
  9860                           wreg	equ	0xFE8
  9861                           postdec1	equ	0xFE5
  9862                           fsr1h	equ	0xFE2
  9863                           fsr1l	equ	0xFE1
  9864                           indf2	equ	0xFDF
  9865                           postinc2	equ	0xFDE
  9866                           postdec2	equ	0xFDD
  9867                           plusw2	equ	0xFDB
  9868                           fsr2h	equ	0xFDA
  9869                           fsr2l	equ	0xFD9
  9870                           status	equ	0xFD8
  9871                           
  9872 ;; *************** function _Reset_Low *****************
  9873 ;; Defined at:
  9874 ;;		line 32 in file "Library/LCD.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;		None
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;		None
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  1    wreg      void 
  9881 ;; Registers used:
  9882 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;Total ram usage:        0 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:   11
  9895 ;; This function calls:
  9896 ;;		_Port_SetPin
  9897 ;; This function is called by:
  9898 ;;		_LCD_Reset
  9899 ;; This function uses a non-reentrant model
  9900 ;;
  9901                           
  9902                           	psect	text37
  9903  015E7C                     __ptext37:
  9904                           	opt stack 0
  9905  015E7C                     _Reset_Low:
  9906                           	opt stack 16
  9907                           
  9908                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9909                           
  9910                           ;incstack = 0
  9911  015E7C  0EB5               	movlw	low _PortF
  9912  015E7E  0100               	movlb	0	; () banked
  9913  015E80  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9914  015E82  0E01               	movlw	high _PortF
  9915  015E84  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9916  015E86  0E06               	movlw	6
  9917  015E88  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9918  015E8A  0E01               	movlw	1
  9919  015E8C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9920  015E8E  ECBD  F09F         	call	_Port_SetPin	;wreg free
  9921  015E92  0012               	return		;funcret
  9922  015E94                     __end_of_Reset_Low:
  9923                           	opt stack 0
  9924                           tosu	equ	0xFFF
  9925                           tosh	equ	0xFFE
  9926                           tosl	equ	0xFFD
  9927                           pclath	equ	0xFFA
  9928                           tblptru	equ	0xFF8
  9929                           tblptrh	equ	0xFF7
  9930                           tblptrl	equ	0xFF6
  9931                           tablat	equ	0xFF5
  9932                           intcon	equ	0xFF2
  9933                           postinc0	equ	0xFEE
  9934                           wreg	equ	0xFE8
  9935                           postdec1	equ	0xFE5
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           postdec2	equ	0xFDD
  9941                           plusw2	equ	0xFDB
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           
  9946 ;; *************** function _Reset_High *****************
  9947 ;; Defined at:
  9948 ;;		line 36 in file "Library/LCD.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;		None
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;		None
  9953 ;; Return value:  Size  Location     Type
  9954 ;;                  1    wreg      void 
  9955 ;; Registers used:
  9956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9957 ;; Tracked objects:
  9958 ;;		On entry : 0/0
  9959 ;;		On exit  : 0/0
  9960 ;;		Unchanged: 0/0
  9961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;Total ram usage:        0 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; Hardware stack levels required when called:   11
  9969 ;; This function calls:
  9970 ;;		_Port_SetPin
  9971 ;; This function is called by:
  9972 ;;		_LCD_Reset
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           	psect	text38
  9977  015E94                     __ptext38:
  9978                           	opt stack 0
  9979  015E94                     _Reset_High:
  9980                           	opt stack 16
  9981                           
  9982                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
  9983                           
  9984                           ;incstack = 0
  9985  015E94  0EB5               	movlw	low _PortF
  9986  015E96  0100               	movlb	0	; () banked
  9987  015E98  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9988  015E9A  0E01               	movlw	high _PortF
  9989  015E9C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9990  015E9E  0E06               	movlw	6
  9991  015EA0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9992  015EA2  0E00               	movlw	0
  9993  015EA4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9994  015EA6  ECBD  F09F         	call	_Port_SetPin	;wreg free
  9995  015EAA  0012               	return		;funcret
  9996  015EAC                     __end_of_Reset_High:
  9997                           	opt stack 0
  9998                           tosu	equ	0xFFF
  9999                           tosh	equ	0xFFE
 10000                           tosl	equ	0xFFD
 10001                           pclath	equ	0xFFA
 10002                           tblptru	equ	0xFF8
 10003                           tblptrh	equ	0xFF7
 10004                           tblptrl	equ	0xFF6
 10005                           tablat	equ	0xFF5
 10006                           intcon	equ	0xFF2
 10007                           postinc0	equ	0xFEE
 10008                           wreg	equ	0xFE8
 10009                           postdec1	equ	0xFE5
 10010                           fsr1h	equ	0xFE2
 10011                           fsr1l	equ	0xFE1
 10012                           indf2	equ	0xFDF
 10013                           postinc2	equ	0xFDE
 10014                           postdec2	equ	0xFDD
 10015                           plusw2	equ	0xFDB
 10016                           fsr2h	equ	0xFDA
 10017                           fsr2l	equ	0xFD9
 10018                           status	equ	0xFD8
 10019                           
 10020 ;; *************** function _Init_Timer0 *****************
 10021 ;; Defined at:
 10022 ;;		line 72 in file "main.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;		None
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;		None
 10027 ;; Return value:  Size  Location     Type
 10028 ;;                  2  2114[None  ] int 
 10029 ;; Registers used:
 10030 ;;		None
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;Total ram usage:        0 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    7
 10043 ;; This function calls:
 10044 ;;		Nothing
 10045 ;; This function is called by:
 10046 ;;		_main
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           	psect	text39
 10051  015EAC                     __ptext39:
 10052                           	opt stack 0
 10053  015EAC                     _Init_Timer0:
 10054                           	opt stack 23
 10055                           
 10056                           ;main.c: 73: T0CONbits.TMR0ON = 1;
 10057                           
 10058                           ;incstack = 0
 10059  015EAC  8ED5               	bsf	4053,7,c	;volatile
 10060                           
 10061                           ;main.c: 74: T0CONbits.T08BIT = 1;
 10062  015EAE  8CD5               	bsf	4053,6,c	;volatile
 10063                           
 10064                           ;main.c: 75: T0CONbits.T0CS = 0;
 10065  015EB0  9AD5               	bcf	4053,5,c	;volatile
 10066                           
 10067                           ;main.c: 76: T0CONbits.T0SE = 0;
 10068  015EB2  98D5               	bcf	4053,4,c	;volatile
 10069                           
 10070                           ;main.c: 77: T0CONbits.PSA = 0;
 10071  015EB4  96D5               	bcf	4053,3,c	;volatile
 10072                           
 10073                           ;main.c: 78: T0CONbits.T0PS2 = 1;
 10074  015EB6  84D5               	bsf	4053,2,c	;volatile
 10075                           
 10076                           ;main.c: 79: T0CONbits.T0PS1 = 1;
 10077  015EB8  82D5               	bsf	4053,1,c	;volatile
 10078                           
 10079                           ;main.c: 80: T0CONbits.T0PS0 = 1;
 10080  015EBA  80D5               	bsf	4053,0,c	;volatile
 10081                           
 10082                           ;main.c: 81: INTCONbits.TMR0IE = 1;
 10083  015EBC  8AF2               	bsf	intcon,5,c	;volatile
 10084                           
 10085                           ;main.c: 82: INTCONbits.PEIE = 1;
 10086  015EBE  8CF2               	bsf	intcon,6,c	;volatile
 10087                           
 10088                           ;main.c: 83: INTCONbits.GIE = 1;
 10089  015EC0  8EF2               	bsf	intcon,7,c	;volatile
 10090  015EC2  0012               	return		;funcret
 10091  015EC4                     __end_of_Init_Timer0:
 10092                           	opt stack 0
 10093                           tosu	equ	0xFFF
 10094                           tosh	equ	0xFFE
 10095                           tosl	equ	0xFFD
 10096                           pclath	equ	0xFFA
 10097                           tblptru	equ	0xFF8
 10098                           tblptrh	equ	0xFF7
 10099                           tblptrl	equ	0xFF6
 10100                           tablat	equ	0xFF5
 10101                           intcon	equ	0xFF2
 10102                           postinc0	equ	0xFEE
 10103                           wreg	equ	0xFE8
 10104                           postdec1	equ	0xFE5
 10105                           fsr1h	equ	0xFE2
 10106                           fsr1l	equ	0xFE1
 10107                           indf2	equ	0xFDF
 10108                           postinc2	equ	0xFDE
 10109                           postdec2	equ	0xFDD
 10110                           plusw2	equ	0xFDB
 10111                           fsr2h	equ	0xFDA
 10112                           fsr2l	equ	0xFD9
 10113                           status	equ	0xFD8
 10114                           
 10115 ;; *************** function _InitSerialCommunication *****************
 10116 ;; Defined at:
 10117 ;;		line 131 in file "main.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;		None
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;		None
 10122 ;; Return value:  Size  Location     Type
 10123 ;;                  1    wreg      void 
 10124 ;; Registers used:
 10125 ;;		wreg, status,2
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10135 ;;Total ram usage:        0 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    7
 10138 ;; This function calls:
 10139 ;;		Nothing
 10140 ;; This function is called by:
 10141 ;;		_main
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text40
 10146  015DA6                     __ptext40:
 10147                           	opt stack 0
 10148  015DA6                     _InitSerialCommunication:
 10149                           	opt stack 23
 10150                           
 10151                           ;main.c: 133: TRISCbits.TRISC6 = 0;
 10152                           
 10153                           ;incstack = 0
 10154  015DA6  9C94               	bcf	3988,6,c	;volatile
 10155                           
 10156                           ;main.c: 134: TRISCbits.TRISC7 = 1;
 10157  015DA8  8E94               	bsf	3988,7,c	;volatile
 10158                           
 10159                           ;main.c: 135: TXSTA1 = 0b00100100;
 10160  015DAA  0E24               	movlw	36
 10161  015DAC  6EAD               	movwf	4013,c	;volatile
 10162                           
 10163                           ;main.c: 136: RCSTA1 = 0b10010000;
 10164  015DAE  0E90               	movlw	144
 10165  015DB0  6EAC               	movwf	4012,c	;volatile
 10166                           
 10167                           ;main.c: 137: BAUDCON1bits.DTRXP = 0;
 10168  015DB2  9A7E               	bcf	3966,5,c	;volatile
 10169                           
 10170                           ;main.c: 138: BAUDCON1bits.SCKP = 0;
 10171  015DB4  987E               	bcf	3966,4,c	;volatile
 10172                           
 10173                           ;main.c: 139: BAUDCON1bits.WUE = 0;
 10174  015DB6  927E               	bcf	3966,1,c	;volatile
 10175                           
 10176                           ;main.c: 140: BAUDCON1bits.ABDEN = 0;
 10177  015DB8  907E               	bcf	3966,0,c	;volatile
 10178                           
 10179                           ;main.c: 142: TXSTA1bits.BRGH = 1;
 10180  015DBA  84AD               	bsf	4013,2,c	;volatile
 10181                           
 10182                           ;main.c: 143: BAUDCON1bits.BRG16 = 0;
 10183  015DBC  967E               	bcf	3966,3,c	;volatile
 10184                           
 10185                           ;main.c: 144: SPBRG1 = 51;
 10186  015DBE  0E33               	movlw	51
 10187  015DC0  6EB0               	movwf	4016,c	;volatile
 10188  015DC2  0012               	return		;funcret
 10189  015DC4                     __end_of_InitSerialCommunication:
 10190                           	opt stack 0
 10191                           tosu	equ	0xFFF
 10192                           tosh	equ	0xFFE
 10193                           tosl	equ	0xFFD
 10194                           pclath	equ	0xFFA
 10195                           tblptru	equ	0xFF8
 10196                           tblptrh	equ	0xFF7
 10197                           tblptrl	equ	0xFF6
 10198                           tablat	equ	0xFF5
 10199                           intcon	equ	0xFF2
 10200                           postinc0	equ	0xFEE
 10201                           wreg	equ	0xFE8
 10202                           postdec1	equ	0xFE5
 10203                           fsr1h	equ	0xFE2
 10204                           fsr1l	equ	0xFE1
 10205                           indf2	equ	0xFDF
 10206                           postinc2	equ	0xFDE
 10207                           postdec2	equ	0xFDD
 10208                           plusw2	equ	0xFDB
 10209                           fsr2h	equ	0xFDA
 10210                           fsr2l	equ	0xFD9
 10211                           status	equ	0xFD8
 10212                           
 10213 ;; *************** function _InitADC *****************
 10214 ;; Defined at:
 10215 ;;		line 86 in file "main.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;		None
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;		None
 10220 ;; Return value:  Size  Location     Type
 10221 ;;                  1    wreg      void 
 10222 ;; Registers used:
 10223 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;Total ram usage:        1 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    7
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_main
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           	psect	text41
 10244  0154D0                     __ptext41:
 10245                           	opt stack 0
 10246  0154D0                     _InitADC:
 10247                           	opt stack 23
 10248                           
 10249                           ;main.c: 88: ADCON1 = 0b10101101;
 10250                           
 10251                           ;incstack = 0
 10252  0154D0  0EAD               	movlw	173
 10253  0154D2  6EC1               	movwf	4033,c	;volatile
 10254                           
 10255                           ;main.c: 89: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 10256  0154D4  0E00               	movlw	0
 10257  0154D6  0101               	movlb	1	; () banked
 10258  0154D8  6F25               	movwf	(_thisReading+1)& (0+255),b
 10259  0154DA  0E00               	movlw	0
 10260  0154DC  6F24               	movwf	_thisReading& (0+255),b
 10261  0154DE  D010               	goto	l2118
 10262  0154E0                     
 10263                           ;main.c: 90: readings[thisReading] = 0;
 10264                           
 10265                           ; BSR set to: 1
 10266  0154E0  90D8               	bcf	status,0,c
 10267  0154E2  0101               	movlb	1	; () banked
 10268  0154E4  3524               	rlcf	_thisReading& (0+255),w,b
 10269  0154E6  6ED9               	movwf	fsr2l,c
 10270  0154E8  3525               	rlcf	(_thisReading+1)& (0+255),w,b
 10271  0154EA  6EDA               	movwf	fsr2h,c
 10272  0154EC  0E00               	movlw	low _readings
 10273  0154EE  26D9               	addwf	fsr2l,f,c
 10274  0154F0  0E02               	movlw	high _readings
 10275  0154F2  22DA               	addwfc	fsr2h,f,c
 10276  0154F4  0E00               	movlw	0
 10277  0154F6  6EDE               	movwf	postinc2,c
 10278  0154F8  0E00               	movlw	0
 10279  0154FA  6EDD               	movwf	postdec2,c
 10280                           
 10281                           ; BSR set to: 1
 10282  0154FC  4B24               	infsnz	_thisReading& (0+255),f,b
 10283  0154FE  2B25               	incf	(_thisReading+1)& (0+255),f,b
 10284  015500                     l2118:
 10285                           
 10286                           ; BSR set to: 1
 10287                           
 10288                           ; BSR set to: 1
 10289  015500  51F1               	movf	_numReadings& (0+255),w,b
 10290  015502  5D24               	subwf	_thisReading& (0+255),w,b
 10291  015504  5125               	movf	(_thisReading+1)& (0+255),w,b
 10292  015506  0A80               	xorlw	128
 10293  015508  0100               	movlb	0	; () banked
 10294  01550A  6F60               	movwf	??_InitADC& (0+255),b
 10295  01550C  0101               	movlb	1	; () banked
 10296  01550E  51F2               	movf	(_numReadings+1)& (0+255),w,b
 10297  015510  0A80               	xorlw	128
 10298  015512  0100               	movlb	0	; () banked
 10299  015514  5960               	subwfb	??_InitADC& (0+255),w,b
 10300  015516  B0D8               	btfsc	status,0,c
 10301  015518  0012               	return	
 10302  01551A  D7E2               	goto	l2119
 10303  01551C                     __end_of_InitADC:
 10304                           	opt stack 0
 10305                           tosu	equ	0xFFF
 10306                           tosh	equ	0xFFE
 10307                           tosl	equ	0xFFD
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           intcon	equ	0xFF2
 10314                           postinc0	equ	0xFEE
 10315                           wreg	equ	0xFE8
 10316                           postdec1	equ	0xFE5
 10317                           fsr1h	equ	0xFE2
 10318                           fsr1l	equ	0xFE1
 10319                           indf2	equ	0xFDF
 10320                           postinc2	equ	0xFDE
 10321                           postdec2	equ	0xFDD
 10322                           plusw2	equ	0xFDB
 10323                           fsr2h	equ	0xFDA
 10324                           fsr2l	equ	0xFD9
 10325                           status	equ	0xFD8
 10326                           
 10327 ;; *************** function _ISR_Enable *****************
 10328 ;; Defined at:
 10329 ;;		line 27 in file "Library/ISR.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;		None
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;		None
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  1    wreg      void 
 10336 ;; Registers used:
 10337 ;;		None
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;Total ram usage:        0 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    7
 10350 ;; This function calls:
 10351 ;;		Nothing
 10352 ;; This function is called by:
 10353 ;;		_main
 10354 ;; This function uses a non-reentrant model
 10355 ;;
 10356                           
 10357                           	psect	text42
 10358  016052                     __ptext42:
 10359                           	opt stack 0
 10360  016052                     _ISR_Enable:
 10361                           	opt stack 23
 10362                           
 10363                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 10364                           
 10365                           ; BSR set to: 0
 10366                           ;incstack = 0
 10367  016052  8CF2               	bsf	intcon,6,c	;volatile
 10368                           
 10369                           ;ISR.c: 30: INTCONbits.GIE = 1;
 10370  016054  8EF2               	bsf	intcon,7,c	;volatile
 10371                           
 10372                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 10373  016056  88F2               	bsf	intcon,4,c	;volatile
 10374                           
 10375                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 10376  016058  92F2               	bcf	intcon,1,c	;volatile
 10377  01605A  0012               	return		;funcret
 10378  01605C                     __end_of_ISR_Enable:
 10379                           	opt stack 0
 10380                           tosu	equ	0xFFF
 10381                           tosh	equ	0xFFE
 10382                           tosl	equ	0xFFD
 10383                           pclath	equ	0xFFA
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           intcon	equ	0xFF2
 10389                           postinc0	equ	0xFEE
 10390                           wreg	equ	0xFE8
 10391                           postdec1	equ	0xFE5
 10392                           fsr1h	equ	0xFE2
 10393                           fsr1l	equ	0xFE1
 10394                           indf2	equ	0xFDF
 10395                           postinc2	equ	0xFDE
 10396                           postdec2	equ	0xFDD
 10397                           plusw2	equ	0xFDB
 10398                           fsr2h	equ	0xFDA
 10399                           fsr2l	equ	0xFD9
 10400                           status	equ	0xFD8
 10401                           
 10402 ;; *************** function _HMI_Poll *****************
 10403 ;; Defined at:
 10404 ;;		line 252 in file "HMI.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;		None
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;		None
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  1    wreg      void 
 10411 ;; Registers used:
 10412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10422 ;;Total ram usage:        0 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:   15
 10425 ;; This function calls:
 10426 ;;		_Button_Poll
 10427 ;; This function is called by:
 10428 ;;		_main
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           	psect	text43
 10433  014FCC                     __ptext43:
 10434                           	opt stack 0
 10435  014FCC                     _HMI_Poll:
 10436                           	opt stack 15
 10437                           
 10438                           ;HMI.c: 254: TRISE = 0xFC;
 10439                           
 10440                           ;incstack = 0
 10441  014FCC  0EFC               	movlw	252
 10442  014FCE  6E96               	movwf	3990,c	;volatile
 10443                           
 10444                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10445  014FD0  0E78               	movlw	low (_HMIBoard+48)
 10446  014FD2  0100               	movlb	0	; () banked
 10447  014FD4  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10448  014FD6  0E01               	movlw	high (_HMIBoard+48)
 10449  014FD8  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10450  014FDA  0E01               	movlw	1
 10451  014FDC  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10452  014FDE  EC36  F09A         	call	_Button_Poll	;wreg free
 10453                           
 10454                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10455  014FE2  0E5A               	movlw	low (_HMIBoard+18)
 10456  014FE4  0100               	movlb	0	; () banked
 10457  014FE6  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10458  014FE8  0E01               	movlw	high (_HMIBoard+18)
 10459  014FEA  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10460  014FEC  0E01               	movlw	1
 10461  014FEE  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10462  014FF0  EC36  F09A         	call	_Button_Poll	;wreg free
 10463                           
 10464                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10465  014FF4  0E50               	movlw	low (_HMIBoard+8)
 10466  014FF6  0100               	movlb	0	; () banked
 10467  014FF8  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10468  014FFA  0E01               	movlw	high (_HMIBoard+8)
 10469  014FFC  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10470  014FFE  0E01               	movlw	1
 10471  015000  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10472  015002  EC36  F09A         	call	_Button_Poll	;wreg free
 10473                           
 10474                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10475  015006  0E64               	movlw	low (_HMIBoard+28)
 10476  015008  0100               	movlb	0	; () banked
 10477  01500A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10478  01500C  0E01               	movlw	high (_HMIBoard+28)
 10479  01500E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10480  015010  0E01               	movlw	1
 10481  015012  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10482  015014  EC36  F09A         	call	_Button_Poll	;wreg free
 10483                           
 10484                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10485  015018  0E6E               	movlw	low (_HMIBoard+38)
 10486  01501A  0100               	movlb	0	; () banked
 10487  01501C  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10488  01501E  0E01               	movlw	high (_HMIBoard+38)
 10489  015020  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10490  015022  0E01               	movlw	1
 10491  015024  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10492  015026  EC36  F09A         	call	_Button_Poll	;wreg free
 10493  01502A  0012               	return		;funcret
 10494  01502C                     __end_of_HMI_Poll:
 10495                           	opt stack 0
 10496                           tosu	equ	0xFFF
 10497                           tosh	equ	0xFFE
 10498                           tosl	equ	0xFFD
 10499                           pclath	equ	0xFFA
 10500                           tblptru	equ	0xFF8
 10501                           tblptrh	equ	0xFF7
 10502                           tblptrl	equ	0xFF6
 10503                           tablat	equ	0xFF5
 10504                           intcon	equ	0xFF2
 10505                           postinc0	equ	0xFEE
 10506                           wreg	equ	0xFE8
 10507                           postdec1	equ	0xFE5
 10508                           fsr1h	equ	0xFE2
 10509                           fsr1l	equ	0xFE1
 10510                           indf2	equ	0xFDF
 10511                           postinc2	equ	0xFDE
 10512                           postdec2	equ	0xFDD
 10513                           plusw2	equ	0xFDB
 10514                           fsr2h	equ	0xFDA
 10515                           fsr2l	equ	0xFD9
 10516                           status	equ	0xFD8
 10517                           
 10518 ;; *************** function _Button_Poll *****************
 10519 ;; Defined at:
 10520 ;;		line 57 in file "Library/Button.c"
 10521 ;; Parameters:    Size  Location     Type
 10522 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10523 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10524 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  Pin             1   35[BANK0 ] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;                  1    wreg      unsigned char 
 10529 ;; Registers used:
 10530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10536 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;Total ram usage:        9 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:   14
 10543 ;; This function calls:
 10544 ;;		_Event_DIPSwitch
 10545 ;;		_Event_NULL
 10546 ;;		_Event_TestButton
 10547 ;;		_HMI_DIPSwitch
 10548 ;;		_HMI_DownSwitch
 10549 ;;		_HMI_LeftSwitch
 10550 ;;		_HMI_RightSwitch
 10551 ;;		_HMI_UpSwitch
 10552 ;;		_MXK_DIPSwitch
 10553 ;;		_MXK_TestButton
 10554 ;; This function is called by:
 10555 ;;		_HMI_Poll
 10556 ;;		_MXK_Poll
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text44
 10561  01346C                     __ptext44:
 10562                           	opt stack 0
 10563  01346C                     _Button_Poll:
 10564                           	opt stack 15
 10565                           
 10566                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10567                           
 10568                           ;incstack = 0
 10569  01346C  0100               	movlb	0	; () banked
 10570  01346E  EE20 F007          	lfsr	2,7
 10571  013472  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10572  013474  26D9               	addwf	fsr2l,f,c
 10573  013476  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10574  013478  22DA               	addwfc	fsr2h,f,c
 10575  01347A  D801               	call	u11918
 10576  01347C  D00A               	goto	u11919
 10577  01347E                     u11918:
 10578  01347E  0005               	push	
 10579  013480  6EFA               	movwf	pclath,c
 10580  013482  50DE               	movf	postinc2,w,c
 10581  013484  6EFD               	movwf	tosl,c
 10582  013486  50DE               	movf	postinc2,w,c
 10583  013488  6EFE               	movwf	tosh,c
 10584  01348A  50DE               	movf	postinc2,w,c
 10585  01348C  6EFF               	movwf	tosu,c
 10586  01348E  50FA               	movf	pclath,w,c
 10587  013490  0012               	return		;indir
 10588  013492                     u11919:
 10589  013492  0100               	movlb	0	; () banked
 10590  013494  6F83               	movwf	Button_Poll@Pin& (0+255),b
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;Button.c: 61: if (pButton->mState == Pin)
 10594  013496  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10595  01349A  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10596  01349E  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10597  0134A0  18DE               	xorwf	postinc2,w,c
 10598  0134A2  A4D8               	btfss	status,2,c
 10599  0134A4  D01C               	goto	l11
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;Button.c: 62: {
 10603                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10604  0134A6  EE20 F001          	lfsr	2,1
 10605  0134AA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10606  0134AC  26D9               	addwf	fsr2l,f,c
 10607  0134AE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10608  0134B0  22DA               	addwfc	fsr2h,f,c
 10609  0134B2  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10610  0134B4  5CDE               	subwf	postinc2,w,c
 10611  0134B6  B0D8               	btfsc	status,0,c
 10612  0134B8  D009               	goto	l12
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;Button.c: 66: pButton->mCount = 0;
 10616  0134BA  EE20 F001          	lfsr	2,1
 10617  0134BE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10618  0134C0  26D9               	addwf	fsr2l,f,c
 10619  0134C2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10620  0134C4  22DA               	addwfc	fsr2h,f,c
 10621  0134C6  0E00               	movlw	0
 10622  0134C8  6EDF               	movwf	indf2,c
 10623  0134CA  0012               	return	
 10624  0134CC                     l12:
 10625                           
 10626                           ; BSR set to: 0
 10627                           ;Button.c: 67: else
 10628                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10629                           
 10630                           ; BSR set to: 0
 10631  0134CC  EE20 F001          	lfsr	2,1
 10632  0134D0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10633  0134D2  26D9               	addwf	fsr2l,f,c
 10634  0134D4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10635  0134D6  22DA               	addwfc	fsr2h,f,c
 10636  0134D8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10637  0134DA  5EDF               	subwf	indf2,f,c
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;Button.c: 69: }
 10641  0134DC  0012               	return	
 10642  0134DE                     l11:
 10643                           
 10644                           ; BSR set to: 0
 10645                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10646                           
 10647                           ; BSR set to: 0
 10648  0134DE  EE20 F001          	lfsr	2,1
 10649  0134E2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10650  0134E4  26D9               	addwf	fsr2l,f,c
 10651  0134E6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10652  0134E8  22DA               	addwfc	fsr2h,f,c
 10653  0134EA  50DF               	movf	indf2,w,c
 10654  0134EC  6F7E               	movwf	??_Button_Poll& (0+255),b
 10655  0134EE  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 10656  0134F0  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10657  0134F2  277E               	addwf	??_Button_Poll& (0+255),f,b
 10658  0134F4  0E00               	movlw	0
 10659  0134F6  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10660  0134F8  EE20 F001          	lfsr	2,1
 10661  0134FC  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10662  0134FE  26D9               	addwf	fsr2l,f,c
 10663  013500  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10664  013502  22DA               	addwfc	fsr2h,f,c
 10665  013504  50DF               	movf	indf2,w,c
 10666  013506  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10667  013508  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10668  01350A  517E               	movf	??_Button_Poll& (0+255),w,b
 10669  01350C  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10670  01350E  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 10671  013510  0A80               	xorlw	128
 10672  013512  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 10673  013514  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 10674  013516  0A80               	xorlw	128
 10675  013518  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10676  01351A  B0D8               	btfsc	status,0,c
 10677  01351C  0012               	return	
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;Button.c: 73: {
 10681                           ;Button.c: 75: pButton->mCount += pIncrement;
 10682  01351E  EE20 F001          	lfsr	2,1
 10683  013522  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10684  013524  26D9               	addwf	fsr2l,f,c
 10685  013526  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10686  013528  22DA               	addwfc	fsr2h,f,c
 10687  01352A  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10688  01352C  26DF               	addwf	indf2,f,c
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10692  01352E  EE20 F002          	lfsr	2,2
 10693  013532  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10694  013534  26D9               	addwf	fsr2l,f,c
 10695  013536  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10696  013538  22DA               	addwfc	fsr2h,f,c
 10697  01353A  EE10 F001          	lfsr	1,1
 10698  01353E  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10699  013540  26E1               	addwf	fsr1l,f,c
 10700  013542  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10701  013544  22E2               	addwfc	fsr1h,f,c
 10702  013546  50E7               	movf	indf1,w,c
 10703  013548  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10704  01354A  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10705  01354C  50DE               	movf	postinc2,w,c
 10706  01354E  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10707  013550  50DE               	movf	postinc2,w,c
 10708  013552  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10709  013554  A0D8               	btfss	status,0,c
 10710  013556  0012               	return	
 10711                           
 10712                           ; BSR set to: 0
 10713                           ;Button.c: 77: {
 10714                           ;Button.c: 79: pButton->mState = Pin;
 10715  013558  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10716  01355C  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10717  013560  C083  FFDF         	movff	Button_Poll@Pin,indf2
 10718                           
 10719                           ; BSR set to: 0
 10720                           ;Button.c: 80: pButton->mCount = 0;
 10721  013564  EE20 F001          	lfsr	2,1
 10722  013568  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10723  01356A  26D9               	addwf	fsr2l,f,c
 10724  01356C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10725  01356E  22DA               	addwfc	fsr2h,f,c
 10726  013570  0E00               	movlw	0
 10727  013572  6EDF               	movwf	indf2,c
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;Button.c: 83: pButton->mFunction(Pin);
 10731  013574  EE20 F004          	lfsr	2,4
 10732  013578  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10733  01357A  26D9               	addwf	fsr2l,f,c
 10734  01357C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10735  01357E  22DA               	addwfc	fsr2h,f,c
 10736  013580  D801               	call	u11968
 10737  013582  0012               	return	
 10738  013584                     u11968:
 10739  013584  0005               	push	
 10740  013586  6EFA               	movwf	pclath,c
 10741  013588  50DE               	movf	postinc2,w,c
 10742  01358A  6EFD               	movwf	tosl,c
 10743  01358C  50DE               	movf	postinc2,w,c
 10744  01358E  6EFE               	movwf	tosh,c
 10745  013590  50DE               	movf	postinc2,w,c
 10746  013592  6EFF               	movwf	tosu,c
 10747  013594  50FA               	movf	pclath,w,c
 10748  013596  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10749  013598  0012               	return		;indir
 10750  01359A                     __end_of_Button_Poll:
 10751                           	opt stack 0
 10752                           tosu	equ	0xFFF
 10753                           tosh	equ	0xFFE
 10754                           tosl	equ	0xFFD
 10755                           pclath	equ	0xFFA
 10756                           tblptru	equ	0xFF8
 10757                           tblptrh	equ	0xFF7
 10758                           tblptrl	equ	0xFF6
 10759                           tablat	equ	0xFF5
 10760                           intcon	equ	0xFF2
 10761                           postinc0	equ	0xFEE
 10762                           wreg	equ	0xFE8
 10763                           indf1	equ	0xFE7
 10764                           postdec1	equ	0xFE5
 10765                           fsr1h	equ	0xFE2
 10766                           fsr1l	equ	0xFE1
 10767                           indf2	equ	0xFDF
 10768                           postinc2	equ	0xFDE
 10769                           postdec2	equ	0xFDD
 10770                           plusw2	equ	0xFDB
 10771                           fsr2h	equ	0xFDA
 10772                           fsr2l	equ	0xFD9
 10773                           status	equ	0xFD8
 10774                           
 10775 ;; *************** function _MXK_DIPSwitch *****************
 10776 ;; Defined at:
 10777 ;;		line 24 in file "Library/MXK.c"
 10778 ;; Parameters:    Size  Location     Type
 10779 ;;		None
 10780 ;; Auto vars:     Size  Location     Type
 10781 ;;		None
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  1    wreg      unsigned char 
 10784 ;; Registers used:
 10785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10786 ;; Tracked objects:
 10787 ;;		On entry : 0/0
 10788 ;;		On exit  : 0/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;Total ram usage:        0 bytes
 10796 ;; Hardware stack levels used:    1
 10797 ;; Hardware stack levels required when called:    8
 10798 ;; This function calls:
 10799 ;;		_Port_GetQuad
 10800 ;; This function is called by:
 10801 ;;		_FunctInitButton
 10802 ;;		_Button_Poll
 10803 ;;		_main
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           	psect	text45
 10808  015F38                     __ptext45:
 10809                           	opt stack 0
 10810  015F38                     _MXK_DIPSwitch:
 10811                           	opt stack 22
 10812                           
 10813                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10814                           
 10815                           ;incstack = 0
 10816  015F38  0E97               	movlw	low _PortD
 10817  015F3A  0100               	movlb	0	; () banked
 10818  015F3C  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10819  015F3E  0E01               	movlw	high _PortD
 10820  015F40  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10821  015F42  0E00               	movlw	0
 10822  015F44  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10823  015F46  EC2E  F0AC         	call	_Port_GetQuad
 10824  015F4A  0012               	return	
 10825  015F4C                     __end_of_MXK_DIPSwitch:
 10826                           	opt stack 0
 10827                           tosu	equ	0xFFF
 10828                           tosh	equ	0xFFE
 10829                           tosl	equ	0xFFD
 10830                           pclath	equ	0xFFA
 10831                           tblptru	equ	0xFF8
 10832                           tblptrh	equ	0xFF7
 10833                           tblptrl	equ	0xFF6
 10834                           tablat	equ	0xFF5
 10835                           intcon	equ	0xFF2
 10836                           postinc0	equ	0xFEE
 10837                           wreg	equ	0xFE8
 10838                           indf1	equ	0xFE7
 10839                           postdec1	equ	0xFE5
 10840                           fsr1h	equ	0xFE2
 10841                           fsr1l	equ	0xFE1
 10842                           indf2	equ	0xFDF
 10843                           postinc2	equ	0xFDE
 10844                           postdec2	equ	0xFDD
 10845                           plusw2	equ	0xFDB
 10846                           fsr2h	equ	0xFDA
 10847                           fsr2l	equ	0xFD9
 10848                           status	equ	0xFD8
 10849                           
 10850 ;; *************** function _HMI_DIPSwitch *****************
 10851 ;; Defined at:
 10852 ;;		line 47 in file "HMI.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;		None
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;		None
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      unsigned char 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;Total ram usage:        0 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    8
 10873 ;; This function calls:
 10874 ;;		_Port_GetQuad
 10875 ;; This function is called by:
 10876 ;;		_HMI_Init
 10877 ;;		_Button_Poll
 10878 ;;		_main
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text46
 10883  015F4C                     __ptext46:
 10884                           	opt stack 0
 10885  015F4C                     _HMI_DIPSwitch:
 10886                           	opt stack 20
 10887                           
 10888                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 10889                           
 10890                           ;incstack = 0
 10891  015F4C  0E8D               	movlw	low _PortE
 10892  015F4E  0100               	movlb	0	; () banked
 10893  015F50  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10894  015F52  0E01               	movlw	high _PortE
 10895  015F54  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10896  015F56  0E00               	movlw	0
 10897  015F58  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10898  015F5A  EC2E  F0AC         	call	_Port_GetQuad	;wreg free
 10899  015F5E  0012               	return	
 10900  015F60                     __end_of_HMI_DIPSwitch:
 10901                           	opt stack 0
 10902                           tosu	equ	0xFFF
 10903                           tosh	equ	0xFFE
 10904                           tosl	equ	0xFFD
 10905                           pclath	equ	0xFFA
 10906                           tblptru	equ	0xFF8
 10907                           tblptrh	equ	0xFF7
 10908                           tblptrl	equ	0xFF6
 10909                           tablat	equ	0xFF5
 10910                           intcon	equ	0xFF2
 10911                           postinc0	equ	0xFEE
 10912                           wreg	equ	0xFE8
 10913                           indf1	equ	0xFE7
 10914                           postdec1	equ	0xFE5
 10915                           fsr1h	equ	0xFE2
 10916                           fsr1l	equ	0xFE1
 10917                           indf2	equ	0xFDF
 10918                           postinc2	equ	0xFDE
 10919                           postdec2	equ	0xFDD
 10920                           plusw2	equ	0xFDB
 10921                           fsr2h	equ	0xFDA
 10922                           fsr2l	equ	0xFD9
 10923                           status	equ	0xFD8
 10924                           
 10925 ;; *************** function _HMI_DownSwitch *****************
 10926 ;; Defined at:
 10927 ;;		line 42 in file "HMI.c"
 10928 ;; Parameters:    Size  Location     Type
 10929 ;;		None
 10930 ;; Auto vars:     Size  Location     Type
 10931 ;;		None
 10932 ;; Return value:  Size  Location     Type
 10933 ;;                  1    wreg      unsigned char 
 10934 ;; Registers used:
 10935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10936 ;; Tracked objects:
 10937 ;;		On entry : 0/0
 10938 ;;		On exit  : 0/0
 10939 ;;		Unchanged: 0/0
 10940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10945 ;;Total ram usage:        0 bytes
 10946 ;; Hardware stack levels used:    1
 10947 ;; Hardware stack levels required when called:    8
 10948 ;; This function calls:
 10949 ;;		_Port_GetPin
 10950 ;; This function is called by:
 10951 ;;		_HMI_Init
 10952 ;;		_Button_Poll
 10953 ;;		_main
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           	psect	text47
 10958  015F60                     __ptext47:
 10959                           	opt stack 0
 10960  015F60                     _HMI_DownSwitch:
 10961                           	opt stack 20
 10962                           
 10963                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 10964                           
 10965                           ;incstack = 0
 10966  015F60  0E8D               	movlw	low _PortE
 10967  015F62  0100               	movlb	0	; () banked
 10968  015F64  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 10969  015F66  0E01               	movlw	high _PortE
 10970  015F68  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 10971  015F6A  0E06               	movlw	6
 10972  015F6C  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 10973  015F6E  EC88  F0AC         	call	_Port_GetPin	;wreg free
 10974  015F72  0012               	return	
 10975  015F74                     __end_of_HMI_DownSwitch:
 10976                           	opt stack 0
 10977                           tosu	equ	0xFFF
 10978                           tosh	equ	0xFFE
 10979                           tosl	equ	0xFFD
 10980                           pclath	equ	0xFFA
 10981                           tblptru	equ	0xFF8
 10982                           tblptrh	equ	0xFF7
 10983                           tblptrl	equ	0xFF6
 10984                           tablat	equ	0xFF5
 10985                           intcon	equ	0xFF2
 10986                           postinc0	equ	0xFEE
 10987                           wreg	equ	0xFE8
 10988                           indf1	equ	0xFE7
 10989                           postdec1	equ	0xFE5
 10990                           fsr1h	equ	0xFE2
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           postdec2	equ	0xFDD
 10995                           plusw2	equ	0xFDB
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function _HMI_UpSwitch *****************
 11001 ;; Defined at:
 11002 ;;		line 37 in file "HMI.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;		None
 11007 ;; Return value:  Size  Location     Type
 11008 ;;                  1    wreg      unsigned char 
 11009 ;; Registers used:
 11010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11020 ;;Total ram usage:        0 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:    8
 11023 ;; This function calls:
 11024 ;;		_Port_GetPin
 11025 ;; This function is called by:
 11026 ;;		_HMI_Init
 11027 ;;		_Button_Poll
 11028 ;;		_main
 11029 ;; This function uses a non-reentrant model
 11030 ;;
 11031                           
 11032                           	psect	text48
 11033  015F74                     __ptext48:
 11034                           	opt stack 0
 11035  015F74                     _HMI_UpSwitch:
 11036                           	opt stack 22
 11037                           
 11038                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11039                           
 11040                           ;incstack = 0
 11041  015F74  0E8D               	movlw	low _PortE
 11042  015F76  0100               	movlb	0	; () banked
 11043  015F78  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11044  015F7A  0E01               	movlw	high _PortE
 11045  015F7C  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11046  015F7E  0E07               	movlw	7
 11047  015F80  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11048  015F82  EC88  F0AC         	call	_Port_GetPin	;wreg free
 11049  015F86  0012               	return	
 11050  015F88                     __end_of_HMI_UpSwitch:
 11051                           	opt stack 0
 11052                           tosu	equ	0xFFF
 11053                           tosh	equ	0xFFE
 11054                           tosl	equ	0xFFD
 11055                           pclath	equ	0xFFA
 11056                           tblptru	equ	0xFF8
 11057                           tblptrh	equ	0xFF7
 11058                           tblptrl	equ	0xFF6
 11059                           tablat	equ	0xFF5
 11060                           intcon	equ	0xFF2
 11061                           postinc0	equ	0xFEE
 11062                           wreg	equ	0xFE8
 11063                           indf1	equ	0xFE7
 11064                           postdec1	equ	0xFE5
 11065                           fsr1h	equ	0xFE2
 11066                           fsr1l	equ	0xFE1
 11067                           indf2	equ	0xFDF
 11068                           postinc2	equ	0xFDE
 11069                           postdec2	equ	0xFDD
 11070                           plusw2	equ	0xFDB
 11071                           fsr2h	equ	0xFDA
 11072                           fsr2l	equ	0xFD9
 11073                           status	equ	0xFD8
 11074                           
 11075 ;; *************** function _HMI_RightSwitch *****************
 11076 ;; Defined at:
 11077 ;;		line 32 in file "HMI.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;		None
 11080 ;; Auto vars:     Size  Location     Type
 11081 ;;		None
 11082 ;; Return value:  Size  Location     Type
 11083 ;;                  1    wreg      unsigned char 
 11084 ;; Registers used:
 11085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11086 ;; Tracked objects:
 11087 ;;		On entry : 0/0
 11088 ;;		On exit  : 0/0
 11089 ;;		Unchanged: 0/0
 11090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;Total ram usage:        0 bytes
 11096 ;; Hardware stack levels used:    1
 11097 ;; Hardware stack levels required when called:    8
 11098 ;; This function calls:
 11099 ;;		_Port_GetPin
 11100 ;; This function is called by:
 11101 ;;		_HMI_Init
 11102 ;;		_Button_Poll
 11103 ;;		_main
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           	psect	text49
 11108  015F88                     __ptext49:
 11109                           	opt stack 0
 11110  015F88                     _HMI_RightSwitch:
 11111                           	opt stack 22
 11112                           
 11113                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11114                           
 11115                           ;incstack = 0
 11116  015F88  0E8D               	movlw	low _PortE
 11117  015F8A  0100               	movlb	0	; () banked
 11118  015F8C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11119  015F8E  0E01               	movlw	high _PortE
 11120  015F90  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11121  015F92  0E04               	movlw	4
 11122  015F94  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11123  015F96  EC88  F0AC         	call	_Port_GetPin	;wreg free
 11124  015F9A  0012               	return	
 11125  015F9C                     __end_of_HMI_RightSwitch:
 11126                           	opt stack 0
 11127                           tosu	equ	0xFFF
 11128                           tosh	equ	0xFFE
 11129                           tosl	equ	0xFFD
 11130                           pclath	equ	0xFFA
 11131                           tblptru	equ	0xFF8
 11132                           tblptrh	equ	0xFF7
 11133                           tblptrl	equ	0xFF6
 11134                           tablat	equ	0xFF5
 11135                           intcon	equ	0xFF2
 11136                           postinc0	equ	0xFEE
 11137                           wreg	equ	0xFE8
 11138                           indf1	equ	0xFE7
 11139                           postdec1	equ	0xFE5
 11140                           fsr1h	equ	0xFE2
 11141                           fsr1l	equ	0xFE1
 11142                           indf2	equ	0xFDF
 11143                           postinc2	equ	0xFDE
 11144                           postdec2	equ	0xFDD
 11145                           plusw2	equ	0xFDB
 11146                           fsr2h	equ	0xFDA
 11147                           fsr2l	equ	0xFD9
 11148                           status	equ	0xFD8
 11149                           
 11150 ;; *************** function _HMI_LeftSwitch *****************
 11151 ;; Defined at:
 11152 ;;		line 27 in file "HMI.c"
 11153 ;; Parameters:    Size  Location     Type
 11154 ;;		None
 11155 ;; Auto vars:     Size  Location     Type
 11156 ;;		None
 11157 ;; Return value:  Size  Location     Type
 11158 ;;                  1    wreg      unsigned char 
 11159 ;; Registers used:
 11160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11161 ;; Tracked objects:
 11162 ;;		On entry : 0/0
 11163 ;;		On exit  : 0/0
 11164 ;;		Unchanged: 0/0
 11165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;Total ram usage:        0 bytes
 11171 ;; Hardware stack levels used:    1
 11172 ;; Hardware stack levels required when called:    8
 11173 ;; This function calls:
 11174 ;;		_Port_GetPin
 11175 ;; This function is called by:
 11176 ;;		_HMI_Init
 11177 ;;		_Button_Poll
 11178 ;;		_main
 11179 ;; This function uses a non-reentrant model
 11180 ;;
 11181                           
 11182                           	psect	text50
 11183  015F9C                     __ptext50:
 11184                           	opt stack 0
 11185  015F9C                     _HMI_LeftSwitch:
 11186                           	opt stack 20
 11187                           
 11188                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11189                           
 11190                           ;incstack = 0
 11191  015F9C  0E8D               	movlw	low _PortE
 11192  015F9E  0100               	movlb	0	; () banked
 11193  015FA0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11194  015FA2  0E01               	movlw	high _PortE
 11195  015FA4  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11196  015FA6  0E05               	movlw	5
 11197  015FA8  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11198  015FAA  EC88  F0AC         	call	_Port_GetPin	;wreg free
 11199  015FAE  0012               	return	
 11200  015FB0                     __end_of_HMI_LeftSwitch:
 11201                           	opt stack 0
 11202                           tosu	equ	0xFFF
 11203                           tosh	equ	0xFFE
 11204                           tosl	equ	0xFFD
 11205                           pclath	equ	0xFFA
 11206                           tblptru	equ	0xFF8
 11207                           tblptrh	equ	0xFF7
 11208                           tblptrl	equ	0xFF6
 11209                           tablat	equ	0xFF5
 11210                           intcon	equ	0xFF2
 11211                           postinc0	equ	0xFEE
 11212                           wreg	equ	0xFE8
 11213                           indf1	equ	0xFE7
 11214                           postdec1	equ	0xFE5
 11215                           fsr1h	equ	0xFE2
 11216                           fsr1l	equ	0xFE1
 11217                           indf2	equ	0xFDF
 11218                           postinc2	equ	0xFDE
 11219                           postdec2	equ	0xFDD
 11220                           plusw2	equ	0xFDB
 11221                           fsr2h	equ	0xFDA
 11222                           fsr2l	equ	0xFD9
 11223                           status	equ	0xFD8
 11224                           
 11225 ;; *************** function _MXK_TestButton *****************
 11226 ;; Defined at:
 11227 ;;		line 14 in file "Library/MXK.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;		None
 11230 ;; Auto vars:     Size  Location     Type
 11231 ;;		None
 11232 ;; Return value:  Size  Location     Type
 11233 ;;                  1    wreg      unsigned char 
 11234 ;; Registers used:
 11235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11245 ;;Total ram usage:        0 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; Hardware stack levels required when called:    8
 11248 ;; This function calls:
 11249 ;;		_Port_GetPin
 11250 ;; This function is called by:
 11251 ;;		_FunctInitButton
 11252 ;;		_Button_Poll
 11253 ;;		_main
 11254 ;; This function uses a non-reentrant model
 11255 ;;
 11256                           
 11257                           	psect	text51
 11258  015FB0                     __ptext51:
 11259                           	opt stack 0
 11260  015FB0                     _MXK_TestButton:
 11261                           	opt stack 22
 11262                           
 11263                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11264                           
 11265                           ;incstack = 0
 11266  015FB0  0EA1               	movlw	low _PortB
 11267  015FB2  0100               	movlb	0	; () banked
 11268  015FB4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11269  015FB6  0E01               	movlw	high _PortB
 11270  015FB8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11271  015FBA  0E04               	movlw	4
 11272  015FBC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11273  015FBE  EC88  F0AC         	call	_Port_GetPin	;wreg free
 11274  015FC2  0012               	return	
 11275  015FC4                     __end_of_MXK_TestButton:
 11276                           	opt stack 0
 11277                           tosu	equ	0xFFF
 11278                           tosh	equ	0xFFE
 11279                           tosl	equ	0xFFD
 11280                           pclath	equ	0xFFA
 11281                           tblptru	equ	0xFF8
 11282                           tblptrh	equ	0xFF7
 11283                           tblptrl	equ	0xFF6
 11284                           tablat	equ	0xFF5
 11285                           intcon	equ	0xFF2
 11286                           postinc0	equ	0xFEE
 11287                           wreg	equ	0xFE8
 11288                           indf1	equ	0xFE7
 11289                           postdec1	equ	0xFE5
 11290                           fsr1h	equ	0xFE2
 11291                           fsr1l	equ	0xFE1
 11292                           indf2	equ	0xFDF
 11293                           postinc2	equ	0xFDE
 11294                           postdec2	equ	0xFDD
 11295                           plusw2	equ	0xFDB
 11296                           fsr2h	equ	0xFDA
 11297                           fsr2l	equ	0xFD9
 11298                           status	equ	0xFD8
 11299                           
 11300 ;; *************** function _Port_GetQuad *****************
 11301 ;; Defined at:
 11302 ;;		line 498 in file "Library/Port.c"
 11303 ;; Parameters:    Size  Location     Type
 11304 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11305 ;;		 -> PortE(10), PortD(10), 
 11306 ;;  pQuad           1    2[BANK0 ] enum E6776
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;  Output          1    5[BANK0 ] unsigned char 
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  1    wreg      unsigned char 
 11311 ;; Registers used:
 11312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11318 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;Total ram usage:        6 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    7
 11325 ;; This function calls:
 11326 ;;		Nothing
 11327 ;; This function is called by:
 11328 ;;		_HMI_DIPSwitch
 11329 ;;		_MXK_DIPSwitch
 11330 ;;		_Port_ToggleQuad
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           	psect	text52
 11335  01585C                     __ptext52:
 11336                           	opt stack 0
 11337  01585C                     _Port_GetQuad:
 11338                           	opt stack 22
 11339                           
 11340                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11341                           
 11342                           ;incstack = 0
 11343  01585C  0100               	movlb	0	; () banked
 11344  01585E  EE20 F006          	lfsr	2,6
 11345  015862  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 11346  015864  26D9               	addwf	fsr2l,f,c
 11347  015866  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11348  015868  22DA               	addwfc	fsr2h,f,c
 11349  01586A  CFDE F063          	movff	postinc2,??_Port_GetQuad
 11350  01586E  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 11351  015872  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 11352  015876  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11353  01587A  50DF               	movf	indf2,w,c
 11354  01587C  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11358  01587E  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11359  015880  0D04               	mullw	4
 11360  015882  28F3               	incf	prodl,w,c
 11361  015884  6F63               	movwf	??_Port_GetQuad& (0+255),b
 11362  015886  D002               	goto	u11200
 11363  015888                     u11205:
 11364  015888  90D8               	bcf	status,0,c
 11365  01588A  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11366  01588C                     u11200:
 11367  01588C  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 11368  01588E  D7FC               	goto	u11205
 11369                           
 11370                           ;Port.c: 502: Output &= 0xF;
 11371  015890  0E0F               	movlw	15
 11372  015892  0100               	movlb	0	; () banked
 11373  015894  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;Port.c: 503: return Output;
 11377  015896  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 11378  015898  0012               	return	
 11379  01589A                     __end_of_Port_GetQuad:
 11380                           	opt stack 0
 11381                           tosu	equ	0xFFF
 11382                           tosh	equ	0xFFE
 11383                           tosl	equ	0xFFD
 11384                           pclath	equ	0xFFA
 11385                           tblptru	equ	0xFF8
 11386                           tblptrh	equ	0xFF7
 11387                           tblptrl	equ	0xFF6
 11388                           tablat	equ	0xFF5
 11389                           prodl	equ	0xFF3
 11390                           intcon	equ	0xFF2
 11391                           postinc0	equ	0xFEE
 11392                           wreg	equ	0xFE8
 11393                           indf1	equ	0xFE7
 11394                           postdec1	equ	0xFE5
 11395                           fsr1h	equ	0xFE2
 11396                           fsr1l	equ	0xFE1
 11397                           indf2	equ	0xFDF
 11398                           postinc2	equ	0xFDE
 11399                           postdec2	equ	0xFDD
 11400                           plusw2	equ	0xFDB
 11401                           fsr2h	equ	0xFDA
 11402                           fsr2l	equ	0xFD9
 11403                           status	equ	0xFD8
 11404                           
 11405 ;; *************** function _Event_DIPSwitch *****************
 11406 ;; Defined at:
 11407 ;;		line 22 in file "Events.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;  pState          1    wreg     unsigned char 
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;  pState          1   25[BANK0 ] unsigned char 
 11412 ;;  Bar             1   26[BANK0 ] unsigned char 
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  1    wreg      void 
 11415 ;; Registers used:
 11416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11426 ;;Total ram usage:        2 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:   13
 11429 ;; This function calls:
 11430 ;;		_HMI_GetBar
 11431 ;;		_HMI_SetBar
 11432 ;;		_LED_Toggle
 11433 ;; This function is called by:
 11434 ;;		_FunctInitButton
 11435 ;;		_Button_Poll
 11436 ;; This function uses a non-reentrant model
 11437 ;;
 11438                           
 11439                           	psect	text53
 11440  015CDA                     __ptext53:
 11441                           	opt stack 0
 11442  015CDA                     _Event_DIPSwitch:
 11443                           	opt stack 15
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;incstack = 0
 11447                           ;Event_DIPSwitch@pState stored from wreg
 11448  015CDA  0100               	movlb	0	; () banked
 11449  015CDC  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 11450                           
 11451                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 11452  015CDE  EC4E  F0B0         	call	_HMI_GetBar	;wreg free
 11453  015CE2  0100               	movlb	0	; () banked
 11454  015CE4  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;Events.c: 25: Bar &= 0x0F;
 11458  015CE6  0E0F               	movlw	15
 11459  015CE8  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;Events.c: 26: pState <<= 4;
 11463  015CEA  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11464  015CEC  0EF0               	movlw	240
 11465  015CEE  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 11469  015CF0  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11470  015CF2  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11471  015CF4  EC2E  F0B0         	call	_HMI_SetBar
 11472                           
 11473                           ;Events.c: 32: LED_Toggle(eLED1);
 11474  015CF8  0E00               	movlw	0
 11475  015CFA  ECCF  F0AB         	call	_LED_Toggle
 11476  015CFE  0012               	return		;funcret
 11477  015D00                     __end_of_Event_DIPSwitch:
 11478                           	opt stack 0
 11479                           tosu	equ	0xFFF
 11480                           tosh	equ	0xFFE
 11481                           tosl	equ	0xFFD
 11482                           pclath	equ	0xFFA
 11483                           tblptru	equ	0xFF8
 11484                           tblptrh	equ	0xFF7
 11485                           tblptrl	equ	0xFF6
 11486                           tablat	equ	0xFF5
 11487                           prodl	equ	0xFF3
 11488                           intcon	equ	0xFF2
 11489                           postinc0	equ	0xFEE
 11490                           wreg	equ	0xFE8
 11491                           indf1	equ	0xFE7
 11492                           postdec1	equ	0xFE5
 11493                           fsr1h	equ	0xFE2
 11494                           fsr1l	equ	0xFE1
 11495                           indf2	equ	0xFDF
 11496                           postinc2	equ	0xFDE
 11497                           postdec2	equ	0xFDD
 11498                           plusw2	equ	0xFDB
 11499                           fsr2h	equ	0xFDA
 11500                           fsr2l	equ	0xFD9
 11501                           status	equ	0xFD8
 11502                           
 11503 ;; *************** function _Event_NULL *****************
 11504 ;; Defined at:
 11505 ;;		line 9 in file "Events.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;  pState          1    wreg     unsigned char 
 11508 ;; Auto vars:     Size  Location     Type
 11509 ;;  pState          1    0[COMRAM] unsigned char 
 11510 ;; Return value:  Size  Location     Type
 11511 ;;                  1    wreg      void 
 11512 ;; Registers used:
 11513 ;;		wreg
 11514 ;; Tracked objects:
 11515 ;;		On entry : 0/0
 11516 ;;		On exit  : 0/0
 11517 ;;		Unchanged: 0/0
 11518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11523 ;;Total ram usage:        0 bytes
 11524 ;; Hardware stack levels used:    1
 11525 ;; Hardware stack levels required when called:    7
 11526 ;; This function calls:
 11527 ;;		Nothing
 11528 ;; This function is called by:
 11529 ;;		_HMI_Init
 11530 ;;		_Button_Poll
 11531 ;; This function uses a non-reentrant model
 11532 ;;
 11533                           
 11534                           	psect	text54
 11535  001404                     __ptext54:
 11536                           	opt stack 0
 11537  001404                     _Event_NULL:
 11538                           	opt stack 21
 11539                           
 11540                           ;incstack = 0
 11541  001404  0012               	return		;funcret
 11542  001406                     __end_of_Event_NULL:
 11543                           	opt stack 0
 11544                           tosu	equ	0xFFF
 11545                           tosh	equ	0xFFE
 11546                           tosl	equ	0xFFD
 11547                           pclath	equ	0xFFA
 11548                           tblptru	equ	0xFF8
 11549                           tblptrh	equ	0xFF7
 11550                           tblptrl	equ	0xFF6
 11551                           tablat	equ	0xFF5
 11552                           prodl	equ	0xFF3
 11553                           intcon	equ	0xFF2
 11554                           postinc0	equ	0xFEE
 11555                           wreg	equ	0xFE8
 11556                           indf1	equ	0xFE7
 11557                           postdec1	equ	0xFE5
 11558                           fsr1h	equ	0xFE2
 11559                           fsr1l	equ	0xFE1
 11560                           indf2	equ	0xFDF
 11561                           postinc2	equ	0xFDE
 11562                           postdec2	equ	0xFDD
 11563                           plusw2	equ	0xFDB
 11564                           fsr2h	equ	0xFDA
 11565                           fsr2l	equ	0xFD9
 11566                           status	equ	0xFD8
 11567                           
 11568 ;; *************** function _Event_TestButton *****************
 11569 ;; Defined at:
 11570 ;;		line 52 in file "Events.c"
 11571 ;; Parameters:    Size  Location     Type
 11572 ;;  pState          1    wreg     unsigned char 
 11573 ;; Auto vars:     Size  Location     Type
 11574 ;;  pState          1   25[BANK0 ] unsigned char 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  1    wreg      void 
 11577 ;; Registers used:
 11578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;Total ram usage:        1 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; Hardware stack levels required when called:   13
 11591 ;; This function calls:
 11592 ;;		_HMI_SetButton
 11593 ;;		_HMI_SetNumber
 11594 ;;		_LED_Toggle
 11595 ;; This function is called by:
 11596 ;;		_FunctInitButton
 11597 ;;		_Button_Poll
 11598 ;; This function uses a non-reentrant model
 11599 ;;
 11600                           
 11601                           	psect	text55
 11602  015A5C                     __ptext55:
 11603                           	opt stack 0
 11604  015A5C                     _Event_TestButton:
 11605                           	opt stack 15
 11606                           
 11607                           ;incstack = 0
 11608                           ;Event_TestButton@pState stored from wreg
 11609  015A5C  0100               	movlb	0	; () banked
 11610  015A5E  6F79               	movwf	Event_TestButton@pState& (0+255),b
 11611                           
 11612                           ;Events.c: 56: static UINT8 j = 0;
 11613                           ;Events.c: 60: if (pState == 0)
 11614  015A60  0100               	movlb	0	; () banked
 11615  015A62  5179               	movf	Event_TestButton@pState& (0+255),w,b
 11616  015A64  A4D8               	btfss	status,2,c
 11617  015A66  D010               	goto	l1873
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;Events.c: 61: {
 11621                           ;Events.c: 62: j++;
 11622  015A68  2A38               	incf	Event_TestButton@j,f,c
 11623                           
 11624                           ; BSR set to: 0
 11625                           ;Events.c: 63: val += j;
 11626  015A6A  5038               	movf	Event_TestButton@j,w,c
 11627  015A6C  0101               	movlb	1	; () banked
 11628  015A6E  2738               	addwf	_val& (0+255),f,b
 11629  015A70  0E00               	movlw	0
 11630  015A72  2339               	addwfc	(_val+1)& (0+255),f,b
 11631                           
 11632                           ; BSR set to: 1
 11633                           ;Events.c: 64: HMI_SetNumber( val );
 11634  015A74  C138  F076         	movff	_val,HMI_SetNumber@pInput
 11635  015A78  C139  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 11636  015A7C  EC80  F0AE         	call	_HMI_SetNumber	;wreg free
 11637                           
 11638                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11639  015A80  5038               	movf	Event_TestButton@j,w,c
 11640  015A82  0B03               	andlw	3
 11641  015A84  EC45  F0A5         	call	_HMI_SetButton
 11642  015A88                     l1873:
 11643                           
 11644                           ;Events.c: 68: }
 11645                           ;Events.c: 72: LED_Toggle(eLED1);
 11646  015A88  0E00               	movlw	0
 11647  015A8A  ECCF  F0AB         	call	_LED_Toggle
 11648  015A8E  0012               	return		;funcret
 11649  015A90                     __end_of_Event_TestButton:
 11650                           	opt stack 0
 11651                           tosu	equ	0xFFF
 11652                           tosh	equ	0xFFE
 11653                           tosl	equ	0xFFD
 11654                           pclath	equ	0xFFA
 11655                           tblptru	equ	0xFF8
 11656                           tblptrh	equ	0xFF7
 11657                           tblptrl	equ	0xFF6
 11658                           tablat	equ	0xFF5
 11659                           prodl	equ	0xFF3
 11660                           intcon	equ	0xFF2
 11661                           postinc0	equ	0xFEE
 11662                           wreg	equ	0xFE8
 11663                           indf1	equ	0xFE7
 11664                           postdec1	equ	0xFE5
 11665                           fsr1h	equ	0xFE2
 11666                           fsr1l	equ	0xFE1
 11667                           indf2	equ	0xFDF
 11668                           postinc2	equ	0xFDE
 11669                           postdec2	equ	0xFDD
 11670                           plusw2	equ	0xFDB
 11671                           fsr2h	equ	0xFDA
 11672                           fsr2l	equ	0xFD9
 11673                           status	equ	0xFD8
 11674                           
 11675 ;; *************** function _HMI_SetButton *****************
 11676 ;; Defined at:
 11677 ;;		line 186 in file "HMI.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;  pValue          1    wreg     unsigned char 
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;  pValue          1    6[BANK0 ] unsigned char 
 11682 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11683 ;;  v               1    7[BANK0 ] unsigned char 
 11684 ;; Return value:  Size  Location     Type
 11685 ;;                  1    wreg      void 
 11686 ;; Registers used:
 11687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11688 ;; Tracked objects:
 11689 ;;		On entry : 0/0
 11690 ;;		On exit  : 0/0
 11691 ;;		Unchanged: 0/0
 11692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11694 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11696 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11697 ;;Total ram usage:        8 bytes
 11698 ;; Hardware stack levels used:    1
 11699 ;; Hardware stack levels required when called:    7
 11700 ;; This function calls:
 11701 ;;		Nothing
 11702 ;; This function is called by:
 11703 ;;		_Event_TestButton
 11704 ;; This function uses a non-reentrant model
 11705 ;;
 11706                           
 11707                           	psect	text56
 11708  014A8A                     __ptext56:
 11709                           	opt stack 0
 11710  014A8A                     _HMI_SetButton:
 11711                           	opt stack 20
 11712                           
 11713                           ;incstack = 0
 11714                           ;HMI_SetButton@pValue stored from wreg
 11715  014A8A  0100               	movlb	0	; () banked
 11716  014A8C  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11717                           
 11718                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11719  014A8E  0E3C               	movlw	low HMI_SetButton@F7213
 11720  014A90  6EF6               	movwf	tblptrl,c
 11721  014A92                     	if	1	;There is more than 1 active tblptr byte
 11722  014A92  0EFC               	movlw	high HMI_SetButton@F7213
 11723  014A94  6EF7               	movwf	tblptrh,c
 11724  014A96                     	endif
 11725  014A96                     	if	1	;There are 3 active tblptr bytes
 11726  014A96  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11727  014A98  6EF8               	movwf	tblptru,c
 11728  014A9A                     	endif
 11729  014A9A  0009               	tblrd		*+
 11730  014A9C  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11731  014AA0  0009               	tblrd		*+
 11732  014AA2  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11733  014AA6  0009               	tblrd		*+
 11734  014AA8  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11735  014AAC  000A               	tblrd		*-
 11736  014AAE  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11737                           
 11738                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11739  014AB2  0E11               	movlw	17
 11740  014AB4  0100               	movlb	0	; () banked
 11741  014AB6  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;HMI.c: 190: pValue &= 3;
 11745  014AB8  0E03               	movlw	3
 11746  014ABA  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;HMI.c: 191: v = v << reindex[pValue];
 11750  014ABC  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11751  014ABE  0D01               	mullw	1
 11752  014AC0  0E62               	movlw	low HMI_SetButton@reindex
 11753  014AC2  24F3               	addwf	prodl,w,c
 11754  014AC4  6ED9               	movwf	fsr2l,c
 11755  014AC6  0E00               	movlw	high HMI_SetButton@reindex
 11756  014AC8  20F4               	addwfc	prodh,w,c
 11757  014ACA  6EDA               	movwf	fsr2h,c
 11758  014ACC  50DF               	movf	indf2,w,c
 11759  014ACE  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11760  014AD0  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11761  014AD4  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11762  014AD6  D002               	goto	u11364
 11763  014AD8                     u11365:
 11764  014AD8  90D8               	bcf	status,0,c
 11765  014ADA  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11766  014ADC                     u11364:
 11767  014ADC  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11768  014ADE  D7FC               	goto	u11365
 11769  014AE0  0100               	movlb	0	; () banked
 11770  014AE2  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11771  014AE4  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;HMI.c: 192: v = v >> 4;
 11775  014AE6  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11776  014AE8  0B0F               	andlw	15
 11777  014AEA  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;HMI.c: 193: v = v & 0x0F;
 11781  014AEC  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11782  014AEE  0B0F               	andlw	15
 11783  014AF0  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;HMI.c: 194: HMIBoard.pButton = v;
 11787  014AF2  0101               	movlb	1	; () banked
 11788  014AF4  514E               	movf	(_HMIBoard+6)& (0+255),w,b
 11789  014AF6  0100               	movlb	0	; () banked
 11790  014AF8  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11791  014AFA  0BF0               	andlw	-16
 11792  014AFC  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11793  014AFE  0101               	movlb	1	; () banked
 11794  014B00  6F4E               	movwf	(_HMIBoard+6)& (0+255),b
 11795                           
 11796                           ; BSR set to: 1
 11797  014B02  0012               	return		;funcret
 11798  014B04                     __end_of_HMI_SetButton:
 11799                           	opt stack 0
 11800                           tosu	equ	0xFFF
 11801                           tosh	equ	0xFFE
 11802                           tosl	equ	0xFFD
 11803                           pclath	equ	0xFFA
 11804                           tblptru	equ	0xFF8
 11805                           tblptrh	equ	0xFF7
 11806                           tblptrl	equ	0xFF6
 11807                           tablat	equ	0xFF5
 11808                           prodh	equ	0xFF4
 11809                           prodl	equ	0xFF3
 11810                           intcon	equ	0xFF2
 11811                           postinc0	equ	0xFEE
 11812                           wreg	equ	0xFE8
 11813                           indf1	equ	0xFE7
 11814                           postdec1	equ	0xFE5
 11815                           fsr1h	equ	0xFE2
 11816                           fsr1l	equ	0xFE1
 11817                           indf2	equ	0xFDF
 11818                           postinc2	equ	0xFDE
 11819                           postdec2	equ	0xFDD
 11820                           plusw2	equ	0xFDB
 11821                           fsr2h	equ	0xFDA
 11822                           fsr2l	equ	0xFD9
 11823                           status	equ	0xFD8
 11824                           
 11825 ;; *************** function _LED_Toggle *****************
 11826 ;; Defined at:
 11827 ;;		line 50 in file "Library/LED.c"
 11828 ;; Parameters:    Size  Location     Type
 11829 ;;  pLED            1    wreg     enum E6739
 11830 ;; Auto vars:     Size  Location     Type
 11831 ;;  pLED            1   24[BANK0 ] enum E6739
 11832 ;; Return value:  Size  Location     Type
 11833 ;;                  1    wreg      void 
 11834 ;; Registers used:
 11835 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11836 ;; Tracked objects:
 11837 ;;		On entry : 0/0
 11838 ;;		On exit  : 0/0
 11839 ;;		Unchanged: 0/0
 11840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11844 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11845 ;;Total ram usage:        1 bytes
 11846 ;; Hardware stack levels used:    1
 11847 ;; Hardware stack levels required when called:   12
 11848 ;; This function calls:
 11849 ;;		_Port_TogglePin
 11850 ;; This function is called by:
 11851 ;;		_LCD_Reset
 11852 ;;		_Event_DIPSwitch
 11853 ;;		_Event_TestButton
 11854 ;;		_Event_ADCSequenceComplete
 11855 ;;		_Event_HMI_DIPSwitch
 11856 ;;		_Event_HMI_LeftButton
 11857 ;;		_Event_HMI_RightButton
 11858 ;;		_Event_HMI_UpButton
 11859 ;;		_Event_HMI_DownButton
 11860 ;; This function uses a non-reentrant model
 11861 ;;
 11862                           
 11863                           	psect	text57
 11864  01579E                     __ptext57:
 11865                           	opt stack 0
 11866  01579E                     _LED_Toggle:
 11867                           	opt stack 15
 11868                           
 11869                           ; BSR set to: 1
 11870                           ;incstack = 0
 11871                           ;LED_Toggle@pLED stored from wreg
 11872  01579E  0100               	movlb	0	; () banked
 11873  0157A0  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 11874                           
 11875                           ;LED.c: 52: switch (pLED)
 11876  0157A2  D014               	goto	l234
 11877  0157A4                     
 11878                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 11879  0157A4  0EAB               	movlw	low _PortC
 11880  0157A6  0100               	movlb	0	; () banked
 11881  0157A8  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11882  0157AA  0E01               	movlw	high _PortC
 11883  0157AC  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11884  0157AE  0E00               	movlw	0
 11885  0157B0  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11886  0157B2  ECDA  F0AD         	call	_Port_TogglePin	;wreg free
 11887                           
 11888                           ;LED.c: 56: break;
 11889  0157B6  0012               	return	
 11890  0157B8                     
 11891                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 11892  0157B8  0EAB               	movlw	low _PortC
 11893  0157BA  0100               	movlb	0	; () banked
 11894  0157BC  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11895  0157BE  0E01               	movlw	high _PortC
 11896  0157C0  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11897  0157C2  0E01               	movlw	1
 11898  0157C4  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11899  0157C6  ECDA  F0AD         	call	_Port_TogglePin	;wreg free
 11900                           
 11901                           ;LED.c: 60: }
 11902                           
 11903                           ;LED.c: 59: break;
 11904  0157CA  0012               	return	
 11905  0157CC                     l234:
 11906  0157CC  0100               	movlb	0	; () banked
 11907  0157CE  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 11908                           
 11909                           ; Switch size 1, requested type "space"
 11910                           ; Number of cases is 2, Range of values is 0 to 1
 11911                           ; switch strategies available:
 11912                           ; Name         Instructions Cycles
 11913                           ; simple_byte            7     4 (average)
 11914                           ;	Chosen strategy is simple_byte
 11915  0157D0  0A00               	xorlw	0	; case 0
 11916  0157D2  B4D8               	btfsc	status,2,c
 11917  0157D4  D7E7               	goto	l235
 11918  0157D6  0A01               	xorlw	1	; case 1
 11919  0157D8  A4D8               	btfss	status,2,c
 11920  0157DA  0012               	return	
 11921  0157DC  D7ED               	goto	l237
 11922  0157DE                     __end_of_LED_Toggle:
 11923                           	opt stack 0
 11924                           tosu	equ	0xFFF
 11925                           tosh	equ	0xFFE
 11926                           tosl	equ	0xFFD
 11927                           pclath	equ	0xFFA
 11928                           tblptru	equ	0xFF8
 11929                           tblptrh	equ	0xFF7
 11930                           tblptrl	equ	0xFF6
 11931                           tablat	equ	0xFF5
 11932                           prodh	equ	0xFF4
 11933                           prodl	equ	0xFF3
 11934                           intcon	equ	0xFF2
 11935                           postinc0	equ	0xFEE
 11936                           wreg	equ	0xFE8
 11937                           indf1	equ	0xFE7
 11938                           postdec1	equ	0xFE5
 11939                           fsr1h	equ	0xFE2
 11940                           fsr1l	equ	0xFE1
 11941                           indf2	equ	0xFDF
 11942                           postinc2	equ	0xFDE
 11943                           postdec2	equ	0xFDD
 11944                           plusw2	equ	0xFDB
 11945                           fsr2h	equ	0xFDA
 11946                           fsr2l	equ	0xFD9
 11947                           status	equ	0xFD8
 11948                           
 11949 ;; *************** function _Port_TogglePin *****************
 11950 ;; Defined at:
 11951 ;;		line 278 in file "Library/Port.c"
 11952 ;; Parameters:    Size  Location     Type
 11953 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 11954 ;;		 -> PortC(10), 
 11955 ;;  pPin            1   22[BANK0 ] enum E6750
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  Value           1   23[BANK0 ] unsigned char 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;                  1    wreg      void 
 11960 ;; Registers used:
 11961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11967 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11971 ;;Total ram usage:        4 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; Hardware stack levels required when called:   11
 11974 ;; This function calls:
 11975 ;;		_Port_GetPin
 11976 ;;		_Port_SetPin
 11977 ;; This function is called by:
 11978 ;;		_LED_Toggle
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           	psect	text58
 11983  015BB4                     __ptext58:
 11984                           	opt stack 0
 11985  015BB4                     _Port_TogglePin:
 11986                           	opt stack 15
 11987                           
 11988                           ;Port.c: 280: UINT8 Value;
 11989                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 11990                           
 11991                           ;incstack = 0
 11992  015BB4  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 11993  015BB8  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 11994  015BBC  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 11995  015BC0  EC88  F0AC         	call	_Port_GetPin	;wreg free
 11996  015BC4  0100               	movlb	0	; () banked
 11997  015BC6  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;Port.c: 282: Value ^= 0x01;
 12001  015BC8  0E01               	movlw	1
 12002  015BCA  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 12006  015BCC  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 12007  015BD0  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 12008  015BD4  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 12009  015BD8  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 12010  015BDC  ECBD  F09F         	call	_Port_SetPin	;wreg free
 12011  015BE0  0012               	return		;funcret
 12012  015BE2                     __end_of_Port_TogglePin:
 12013                           	opt stack 0
 12014                           tosu	equ	0xFFF
 12015                           tosh	equ	0xFFE
 12016                           tosl	equ	0xFFD
 12017                           pclath	equ	0xFFA
 12018                           tblptru	equ	0xFF8
 12019                           tblptrh	equ	0xFF7
 12020                           tblptrl	equ	0xFF6
 12021                           tablat	equ	0xFF5
 12022                           prodh	equ	0xFF4
 12023                           prodl	equ	0xFF3
 12024                           intcon	equ	0xFF2
 12025                           postinc0	equ	0xFEE
 12026                           wreg	equ	0xFE8
 12027                           indf1	equ	0xFE7
 12028                           postdec1	equ	0xFE5
 12029                           fsr1h	equ	0xFE2
 12030                           fsr1l	equ	0xFE1
 12031                           indf2	equ	0xFDF
 12032                           postinc2	equ	0xFDE
 12033                           postdec2	equ	0xFDD
 12034                           plusw2	equ	0xFDB
 12035                           fsr2h	equ	0xFDA
 12036                           fsr2l	equ	0xFD9
 12037                           status	equ	0xFD8
 12038                           
 12039 ;; *************** function _Port_SetPin *****************
 12040 ;; Defined at:
 12041 ;;		line 247 in file "Library/Port.c"
 12042 ;; Parameters:    Size  Location     Type
 12043 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 12044 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 12045 ;;  pPin            1   17[BANK0 ] enum E6750
 12046 ;;  pValue          1   18[BANK0 ] unsigned char 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  Type            1   19[BANK0 ] enum E6795
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  1    wreg      void 
 12051 ;; Registers used:
 12052 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12058 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12061 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12062 ;;Total ram usage:        5 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:   10
 12065 ;; This function calls:
 12066 ;;		_Byte_SetBit
 12067 ;;		_Word_GetPair
 12068 ;; This function is called by:
 12069 ;;		_Reset_Low
 12070 ;;		_Reset_High
 12071 ;;		_LED_Set
 12072 ;;		_Port_TogglePin
 12073 ;;		_Motor_Step
 12074 ;;		_MXK_Init
 12075 ;;		_Motor_Init
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           	psect	text59
 12080  013F7A                     __ptext59:
 12081                           	opt stack 0
 12082  013F7A                     _Port_SetPin:
 12083                           	opt stack 19
 12084                           
 12085                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 12086                           
 12087                           ;incstack = 0
 12088  013F7A  0E08               	movlw	8
 12089  013F7C  0100               	movlb	0	; () banked
 12090  013F7E  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 12091  013F80  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12092  013F82  0E00               	movlw	0
 12093  013F84  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 12094  013F86  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12095  013F88  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 12096  013F8C  EC48  F0AD         	call	_Word_GetPair	;wreg free
 12097  013F90  0100               	movlb	0	; () banked
 12098  013F92  6F73               	movwf	Port_SetPin@Type& (0+255),b
 12099                           
 12100                           ;Port.c: 250: switch (Type)
 12101  013F94  D03D               	goto	l427
 12102  013F96                     
 12103                           ; BSR set to: 0
 12104                           ;Port.c: 256: pValue &= 1;
 12105                           
 12106                           ; BSR set to: 0
 12107  013F96  0E01               	movlw	1
 12108  013F98  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12112  013F9A  EE20 F002          	lfsr	2,2
 12113  013F9E  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12114  013FA0  26D9               	addwf	fsr2l,f,c
 12115  013FA2  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12116  013FA4  22DA               	addwfc	fsr2h,f,c
 12117  013FA6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12118  013FAA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12119  013FAE  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12120  013FB2  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12121  013FB6  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 12122                           
 12123                           ;Port.c: 258: break;
 12124  013FBA  0012               	return	
 12125  013FBC                     
 12126                           ;Port.c: 261: pValue &= 1;
 12127  013FBC  0E01               	movlw	1
 12128  013FBE  0100               	movlb	0	; () banked
 12129  013FC0  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12130                           
 12131                           ;Port.c: 262: pValue ^= 1;
 12132  013FC2  0E01               	movlw	1
 12133  013FC4  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 12134                           
 12135                           ; BSR set to: 0
 12136                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12137  013FC6  EE20 F002          	lfsr	2,2
 12138  013FCA  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12139  013FCC  26D9               	addwf	fsr2l,f,c
 12140  013FCE  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12141  013FD0  22DA               	addwfc	fsr2h,f,c
 12142  013FD2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12143  013FD6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12144  013FDA  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12145  013FDE  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12146  013FE2  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 12147                           
 12148                           ;Port.c: 264: break;
 12149  013FE6  0012               	return	
 12150  013FE8                     
 12151                           ;Port.c: 266: pValue &= 1;
 12152  013FE8  0E01               	movlw	1
 12153  013FEA  0100               	movlb	0	; () banked
 12154  013FEC  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 12158  013FEE  EE20 F004          	lfsr	2,4
 12159  013FF2  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12160  013FF4  26D9               	addwf	fsr2l,f,c
 12161  013FF6  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12162  013FF8  22DA               	addwfc	fsr2h,f,c
 12163  013FFA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12164  013FFE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12165  014002  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12166  014006  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12167  01400A  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 12168                           
 12169                           ;Port.c: 269: }
 12170                           
 12171                           ;Port.c: 268: break;
 12172  01400E  0012               	return	
 12173  014010                     l427:
 12174  014010  0100               	movlb	0	; () banked
 12175  014012  5173               	movf	Port_SetPin@Type& (0+255),w,b
 12176                           
 12177                           ; Switch size 1, requested type "space"
 12178                           ; Number of cases is 4, Range of values is 0 to 3
 12179                           ; switch strategies available:
 12180                           ; Name         Instructions Cycles
 12181                           ; simple_byte           13     7 (average)
 12182                           ;	Chosen strategy is simple_byte
 12183  014014  0A00               	xorlw	0	; case 0
 12184  014016  B4D8               	btfsc	status,2,c
 12185  014018  0012               	return	
 12186  01401A  0A01               	xorlw	1	; case 1
 12187  01401C  B4D8               	btfsc	status,2,c
 12188  01401E  D7BB               	goto	l430
 12189  014020  0A03               	xorlw	3	; case 2
 12190  014022  B4D8               	btfsc	status,2,c
 12191  014024  D7CB               	goto	l432
 12192  014026  0A01               	xorlw	1	; case 3
 12193  014028  A4D8               	btfss	status,2,c
 12194  01402A  0012               	return	
 12195  01402C  D7DD               	goto	l433
 12196  01402E                     __end_of_Port_SetPin:
 12197                           	opt stack 0
 12198                           tosu	equ	0xFFF
 12199                           tosh	equ	0xFFE
 12200                           tosl	equ	0xFFD
 12201                           pclath	equ	0xFFA
 12202                           tblptru	equ	0xFF8
 12203                           tblptrh	equ	0xFF7
 12204                           tblptrl	equ	0xFF6
 12205                           tablat	equ	0xFF5
 12206                           prodh	equ	0xFF4
 12207                           prodl	equ	0xFF3
 12208                           intcon	equ	0xFF2
 12209                           postinc0	equ	0xFEE
 12210                           wreg	equ	0xFE8
 12211                           indf1	equ	0xFE7
 12212                           postdec1	equ	0xFE5
 12213                           fsr1h	equ	0xFE2
 12214                           fsr1l	equ	0xFE1
 12215                           indf2	equ	0xFDF
 12216                           postinc2	equ	0xFDE
 12217                           postdec2	equ	0xFDD
 12218                           plusw2	equ	0xFDB
 12219                           fsr2h	equ	0xFDA
 12220                           fsr2l	equ	0xFD9
 12221                           status	equ	0xFD8
 12222                           
 12223 ;; *************** function _Port_GetPin *****************
 12224 ;; Defined at:
 12225 ;;		line 271 in file "Library/Port.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 12228 ;;		 -> PortB(10), PortE(10), PortC(10), 
 12229 ;;  pPin            1    2[BANK0 ] enum E6750
 12230 ;; Auto vars:     Size  Location     Type
 12231 ;;  Output          1    5[BANK0 ] unsigned char 
 12232 ;; Return value:  Size  Location     Type
 12233 ;;                  1    wreg      unsigned char 
 12234 ;; Registers used:
 12235 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12236 ;; Tracked objects:
 12237 ;;		On entry : 0/0
 12238 ;;		On exit  : 0/0
 12239 ;;		Unchanged: 0/0
 12240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12241 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12242 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12243 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12244 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12245 ;;Total ram usage:        6 bytes
 12246 ;; Hardware stack levels used:    1
 12247 ;; Hardware stack levels required when called:    7
 12248 ;; This function calls:
 12249 ;;		Nothing
 12250 ;; This function is called by:
 12251 ;;		_Port_TogglePin
 12252 ;;		_HMI_LeftSwitch
 12253 ;;		_HMI_RightSwitch
 12254 ;;		_HMI_UpSwitch
 12255 ;;		_HMI_DownSwitch
 12256 ;;		_MXK_TestButton
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260                           	psect	text60
 12261  015910                     __ptext60:
 12262                           	opt stack 0
 12263  015910                     _Port_GetPin:
 12264                           	opt stack 22
 12265                           
 12266                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 12267                           
 12268                           ;incstack = 0
 12269  015910  0100               	movlb	0	; () banked
 12270  015912  EE20 F006          	lfsr	2,6
 12271  015916  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 12272  015918  26D9               	addwf	fsr2l,f,c
 12273  01591A  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 12274  01591C  22DA               	addwfc	fsr2h,f,c
 12275  01591E  CFDE F063          	movff	postinc2,??_Port_GetPin
 12276  015922  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 12277  015926  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 12278  01592A  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 12279  01592E  50DF               	movf	indf2,w,c
 12280  015930  6F65               	movwf	Port_GetPin@Output& (0+255),b
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;Port.c: 274: Output >>= (UINT8)pPin;
 12284  015932  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 12285  015934  6F63               	movwf	??_Port_GetPin& (0+255),b
 12286  015936  D002               	goto	u9630
 12287  015938                     u9635:
 12288  015938  90D8               	bcf	status,0,c
 12289  01593A  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 12290  01593C                     u9630:
 12291  01593C  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 12292  01593E  D7FC               	goto	u9635
 12293                           
 12294                           ;Port.c: 275: Output &= 1;
 12295  015940  0E01               	movlw	1
 12296  015942  0100               	movlb	0	; () banked
 12297  015944  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;Port.c: 276: return Output;
 12301  015946  5165               	movf	Port_GetPin@Output& (0+255),w,b
 12302  015948  0012               	return	
 12303  01594A                     __end_of_Port_GetPin:
 12304                           	opt stack 0
 12305                           tosu	equ	0xFFF
 12306                           tosh	equ	0xFFE
 12307                           tosl	equ	0xFFD
 12308                           pclath	equ	0xFFA
 12309                           tblptru	equ	0xFF8
 12310                           tblptrh	equ	0xFF7
 12311                           tblptrl	equ	0xFF6
 12312                           tablat	equ	0xFF5
 12313                           prodh	equ	0xFF4
 12314                           prodl	equ	0xFF3
 12315                           intcon	equ	0xFF2
 12316                           postinc0	equ	0xFEE
 12317                           wreg	equ	0xFE8
 12318                           indf1	equ	0xFE7
 12319                           postdec1	equ	0xFE5
 12320                           fsr1h	equ	0xFE2
 12321                           fsr1l	equ	0xFE1
 12322                           indf2	equ	0xFDF
 12323                           postinc2	equ	0xFDE
 12324                           postdec2	equ	0xFDD
 12325                           plusw2	equ	0xFDB
 12326                           fsr2h	equ	0xFDA
 12327                           fsr2l	equ	0xFD9
 12328                           status	equ	0xFD8
 12329                           
 12330 ;; *************** function _HMI_SetBar *****************
 12331 ;; Defined at:
 12332 ;;		line 205 in file "HMI.c"
 12333 ;; Parameters:    Size  Location     Type
 12334 ;;  pValue          1    wreg     unsigned char 
 12335 ;; Auto vars:     Size  Location     Type
 12336 ;;  pValue          1    0[BANK0 ] unsigned char 
 12337 ;; Return value:  Size  Location     Type
 12338 ;;                  1    wreg      void 
 12339 ;; Registers used:
 12340 ;;		wreg
 12341 ;; Tracked objects:
 12342 ;;		On entry : 0/0
 12343 ;;		On exit  : 0/0
 12344 ;;		Unchanged: 0/0
 12345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12347 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12349 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12350 ;;Total ram usage:        1 bytes
 12351 ;; Hardware stack levels used:    1
 12352 ;; Hardware stack levels required when called:    7
 12353 ;; This function calls:
 12354 ;;		Nothing
 12355 ;; This function is called by:
 12356 ;;		_Event_DIPSwitch
 12357 ;;		_Event_HMI_DIPSwitch
 12358 ;;		_Event_HMI_LeftButton
 12359 ;;		_Event_HMI_RightButton
 12360 ;; This function uses a non-reentrant model
 12361 ;;
 12362                           
 12363                           	psect	text61
 12364  01605C                     __ptext61:
 12365                           	opt stack 0
 12366  01605C                     _HMI_SetBar:
 12367                           	opt stack 20
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;incstack = 0
 12371                           ;HMI_SetBar@pValue stored from wreg
 12372  01605C  0100               	movlb	0	; () banked
 12373  01605E  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 12374                           
 12375                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 12376  016060  C060  F14F         	movff	HMI_SetBar@pValue,_HMIBoard+7
 12377  016064  0012               	return		;funcret
 12378  016066                     __end_of_HMI_SetBar:
 12379                           	opt stack 0
 12380                           tosu	equ	0xFFF
 12381                           tosh	equ	0xFFE
 12382                           tosl	equ	0xFFD
 12383                           pclath	equ	0xFFA
 12384                           tblptru	equ	0xFF8
 12385                           tblptrh	equ	0xFF7
 12386                           tblptrl	equ	0xFF6
 12387                           tablat	equ	0xFF5
 12388                           prodh	equ	0xFF4
 12389                           prodl	equ	0xFF3
 12390                           intcon	equ	0xFF2
 12391                           postinc0	equ	0xFEE
 12392                           wreg	equ	0xFE8
 12393                           indf1	equ	0xFE7
 12394                           postdec1	equ	0xFE5
 12395                           fsr1h	equ	0xFE2
 12396                           fsr1l	equ	0xFE1
 12397                           indf2	equ	0xFDF
 12398                           postinc2	equ	0xFDE
 12399                           postdec2	equ	0xFDD
 12400                           plusw2	equ	0xFDB
 12401                           fsr2h	equ	0xFDA
 12402                           fsr2l	equ	0xFD9
 12403                           status	equ	0xFD8
 12404                           
 12405 ;; *************** function _HMI_GetBar *****************
 12406 ;; Defined at:
 12407 ;;		line 209 in file "HMI.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;		None
 12410 ;; Auto vars:     Size  Location     Type
 12411 ;;		None
 12412 ;; Return value:  Size  Location     Type
 12413 ;;                  1    wreg      unsigned char 
 12414 ;; Registers used:
 12415 ;;		wreg, status,2
 12416 ;; Tracked objects:
 12417 ;;		On entry : 0/0
 12418 ;;		On exit  : 0/0
 12419 ;;		Unchanged: 0/0
 12420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12425 ;;Total ram usage:        0 bytes
 12426 ;; Hardware stack levels used:    1
 12427 ;; Hardware stack levels required when called:    7
 12428 ;; This function calls:
 12429 ;;		Nothing
 12430 ;; This function is called by:
 12431 ;;		_Event_DIPSwitch
 12432 ;;		_Event_HMI_DIPSwitch
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text62
 12437  01609C                     __ptext62:
 12438                           	opt stack 0
 12439  01609C                     _HMI_GetBar:
 12440                           	opt stack 20
 12441                           
 12442                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 12443                           
 12444                           ;incstack = 0
 12445  01609C  0101               	movlb	1	; () banked
 12446  01609E  514F               	movf	(_HMIBoard+7)& (0+255),w,b
 12447  0160A0  0012               	return	
 12448  0160A2                     __end_of_HMI_GetBar:
 12449                           	opt stack 0
 12450                           tosu	equ	0xFFF
 12451                           tosh	equ	0xFFE
 12452                           tosl	equ	0xFFD
 12453                           pclath	equ	0xFFA
 12454                           tblptru	equ	0xFF8
 12455                           tblptrh	equ	0xFF7
 12456                           tblptrl	equ	0xFF6
 12457                           tablat	equ	0xFF5
 12458                           prodh	equ	0xFF4
 12459                           prodl	equ	0xFF3
 12460                           intcon	equ	0xFF2
 12461                           postinc0	equ	0xFEE
 12462                           wreg	equ	0xFE8
 12463                           indf1	equ	0xFE7
 12464                           postdec1	equ	0xFE5
 12465                           fsr1h	equ	0xFE2
 12466                           fsr1l	equ	0xFE1
 12467                           indf2	equ	0xFDF
 12468                           postinc2	equ	0xFDE
 12469                           postdec2	equ	0xFDD
 12470                           plusw2	equ	0xFDB
 12471                           fsr2h	equ	0xFDA
 12472                           fsr2l	equ	0xFD9
 12473                           status	equ	0xFD8
 12474                           
 12475 ;; *************** function _HMI_Init *****************
 12476 ;; Defined at:
 12477 ;;		line 104 in file "HMI.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;		None
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;  in              2   72[BANK0 ] unsigned short 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  1    wreg      void 
 12484 ;; Registers used:
 12485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12494 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12495 ;;Total ram usage:        2 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:   16
 12498 ;; This function calls:
 12499 ;;		_Button_Init
 12500 ;;		_SPI_Init
 12501 ;;		_SPI_MinSpeed
 12502 ;; This function is called by:
 12503 ;;		_main
 12504 ;; This function uses a non-reentrant model
 12505 ;;
 12506                           
 12507                           	psect	text63
 12508  012832                     __ptext63:
 12509                           	opt stack 0
 12510  012832                     _HMI_Init:
 12511                           	opt stack 14
 12512                           
 12513                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 12514                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 12515                           
 12516                           ; BSR set to: 1
 12517                           ;incstack = 0
 12518  012832  0E78               	movlw	low (_HMIBoard+48)
 12519  012834  0100               	movlb	0	; () banked
 12520  012836  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12521  012838  0E01               	movlw	high (_HMIBoard+48)
 12522  01283A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12523  01283C  0E00               	movlw	0
 12524  01283E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12525  012840  0E02               	movlw	2
 12526  012842  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12527  012844  0EA2               	movlw	low _HMI_InitButtons
 12528  012846  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12529  012848  0E60               	movlw	high _HMI_InitButtons
 12530  01284A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12531  01284C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12532  01284E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12533  012850  0E4C               	movlw	low _HMI_DIPSwitch
 12534  012852  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12535  012854  0E5F               	movlw	high _HMI_DIPSwitch
 12536  012856  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12537  012858  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 12538  01285A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12539  01285C  0E04               	movlw	low _Event_NULL
 12540  01285E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12541  012860  0E14               	movlw	high _Event_NULL
 12542  012862  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12543  012864  0E00               	movlw	low (_Event_NULL shr (0+16))
 12544  012866  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12545  012868  EC17  F0A0         	call	_Button_Init	;wreg free
 12546                           
 12547                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 12548                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 12549  01286C  0E5A               	movlw	low (_HMIBoard+18)
 12550  01286E  0100               	movlb	0	; () banked
 12551  012870  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12552  012872  0E01               	movlw	high (_HMIBoard+18)
 12553  012874  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12554  012876  0E00               	movlw	0
 12555  012878  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12556  01287A  0E02               	movlw	2
 12557  01287C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12558  01287E  0EA2               	movlw	low _HMI_InitButtons
 12559  012880  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12560  012882  0E60               	movlw	high _HMI_InitButtons
 12561  012884  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12562  012886  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12563  012888  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12564  01288A  0E9C               	movlw	low _HMI_LeftSwitch
 12565  01288C  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12566  01288E  0E5F               	movlw	high _HMI_LeftSwitch
 12567  012890  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12568  012892  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 12569  012894  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12570  012896  0E04               	movlw	low _Event_NULL
 12571  012898  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12572  01289A  0E14               	movlw	high _Event_NULL
 12573  01289C  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12574  01289E  0E00               	movlw	low (_Event_NULL shr (0+16))
 12575  0128A0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12576  0128A2  EC17  F0A0         	call	_Button_Init	;wreg free
 12577                           
 12578                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 12579                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 12580  0128A6  0E50               	movlw	low (_HMIBoard+8)
 12581  0128A8  0100               	movlb	0	; () banked
 12582  0128AA  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12583  0128AC  0E01               	movlw	high (_HMIBoard+8)
 12584  0128AE  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12585  0128B0  0E00               	movlw	0
 12586  0128B2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12587  0128B4  0E02               	movlw	2
 12588  0128B6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12589  0128B8  0EA2               	movlw	low _HMI_InitButtons
 12590  0128BA  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12591  0128BC  0E60               	movlw	high _HMI_InitButtons
 12592  0128BE  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12593  0128C0  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12594  0128C2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12595  0128C4  0E88               	movlw	low _HMI_RightSwitch
 12596  0128C6  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12597  0128C8  0E5F               	movlw	high _HMI_RightSwitch
 12598  0128CA  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12599  0128CC  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 12600  0128CE  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12601  0128D0  0E04               	movlw	low _Event_NULL
 12602  0128D2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12603  0128D4  0E14               	movlw	high _Event_NULL
 12604  0128D6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12605  0128D8  0E00               	movlw	low (_Event_NULL shr (0+16))
 12606  0128DA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12607  0128DC  EC17  F0A0         	call	_Button_Init	;wreg free
 12608                           
 12609                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 12610                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 12611  0128E0  0E64               	movlw	low (_HMIBoard+28)
 12612  0128E2  0100               	movlb	0	; () banked
 12613  0128E4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12614  0128E6  0E01               	movlw	high (_HMIBoard+28)
 12615  0128E8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12616  0128EA  0E00               	movlw	0
 12617  0128EC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12618  0128EE  0E02               	movlw	2
 12619  0128F0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12620  0128F2  0EA2               	movlw	low _HMI_InitButtons
 12621  0128F4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12622  0128F6  0E60               	movlw	high _HMI_InitButtons
 12623  0128F8  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12624  0128FA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12625  0128FC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12626  0128FE  0E74               	movlw	low _HMI_UpSwitch
 12627  012900  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12628  012902  0E5F               	movlw	high _HMI_UpSwitch
 12629  012904  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12630  012906  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 12631  012908  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12632  01290A  0E04               	movlw	low _Event_NULL
 12633  01290C  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12634  01290E  0E14               	movlw	high _Event_NULL
 12635  012910  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12636  012912  0E00               	movlw	low (_Event_NULL shr (0+16))
 12637  012914  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12638  012916  EC17  F0A0         	call	_Button_Init	;wreg free
 12639                           
 12640                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 12641                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 12642  01291A  0E6E               	movlw	low (_HMIBoard+38)
 12643  01291C  0100               	movlb	0	; () banked
 12644  01291E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12645  012920  0E01               	movlw	high (_HMIBoard+38)
 12646  012922  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12647  012924  0E00               	movlw	0
 12648  012926  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12649  012928  0E02               	movlw	2
 12650  01292A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12651  01292C  0EA2               	movlw	low _HMI_InitButtons
 12652  01292E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12653  012930  0E60               	movlw	high _HMI_InitButtons
 12654  012932  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12655  012934  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12656  012936  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12657  012938  0E60               	movlw	low _HMI_DownSwitch
 12658  01293A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12659  01293C  0E5F               	movlw	high _HMI_DownSwitch
 12660  01293E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12661  012940  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 12662  012942  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12663  012944  0E04               	movlw	low _Event_NULL
 12664  012946  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12665  012948  0E14               	movlw	high _Event_NULL
 12666  01294A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12667  01294C  0E00               	movlw	low (_Event_NULL shr (0+16))
 12668  01294E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12669  012950  EC17  F0A0         	call	_Button_Init	;wreg free
 12670                           
 12671                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 12672  012954  0EA0               	movlw	160
 12673  012956  0100               	movlb	0	; () banked
 12674  012958  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 12675  01295A  0E86               	movlw	134
 12676  01295C  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 12677  01295E  0E01               	movlw	1
 12678  012960  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 12679  012962  0E00               	movlw	0
 12680  012964  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 12681  012966  0E00               	movlw	0
 12682  012968  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 12683  01296A  0E02               	movlw	2
 12684  01296C  6F92               	movwf	SPI_Init@pMode& (0+255),b
 12685  01296E  ECC7  F083         	call	_SPI_Init	;wreg free
 12686                           
 12687                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 12688  012972  0EC8               	movlw	low _SPI1
 12689  012974  0100               	movlb	0	; () banked
 12690  012976  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 12691  012978  0E02               	movlw	high _SPI1
 12692  01297A  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 12693  01297C  EC7E  F0A7         	call	_SPI_MinSpeed	;wreg free
 12694                           
 12695                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 12696  012980  0E00               	movlw	0
 12697  012982  0100               	movlb	0	; () banked
 12698  012984  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 12699  012986  0E00               	movlw	0
 12700  012988  6FA8               	movwf	HMI_Init@in& (0+255),b
 12701  01298A                     l15244:
 12702                           
 12703                           ; BSR set to: 0
 12704  01298A  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 12705  01298C  E10F               	bnz	l1153
 12706  01298E  0E08               	movlw	8
 12707  012990  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 12708  012992  B0D8               	btfsc	status,0,c
 12709  012994  0012               	return	
 12710                           
 12711                           ; BSR set to: 0
 12712                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 12713                           
 12714                           ; BSR set to: 0
 12715                           
 12716                           ; BSR set to: 0
 12717  012996  0E48               	movlw	low _HMIBoard
 12718  012998  25A8               	addwf	HMI_Init@in& (0+255),w,b
 12719  01299A  6ED9               	movwf	fsr2l,c
 12720  01299C  0E01               	movlw	high _HMIBoard
 12721  01299E  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 12722  0129A0  6EDA               	movwf	fsr2h,c
 12723  0129A2  0E00               	movlw	0
 12724  0129A4  6EDF               	movwf	indf2,c
 12725                           
 12726                           ; BSR set to: 0
 12727  0129A6  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 12728  0129A8  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 12729  0129AA  D7EF               	goto	l15244
 12730  0129AC                     l1153:
 12731                           
 12732                           ; BSR set to: 0
 12733  0129AC  0012               	return		;funcret
 12734  0129AE                     __end_of_HMI_Init:
 12735                           	opt stack 0
 12736                           tosu	equ	0xFFF
 12737                           tosh	equ	0xFFE
 12738                           tosl	equ	0xFFD
 12739                           pclath	equ	0xFFA
 12740                           tblptru	equ	0xFF8
 12741                           tblptrh	equ	0xFF7
 12742                           tblptrl	equ	0xFF6
 12743                           tablat	equ	0xFF5
 12744                           prodh	equ	0xFF4
 12745                           prodl	equ	0xFF3
 12746                           intcon	equ	0xFF2
 12747                           postinc0	equ	0xFEE
 12748                           wreg	equ	0xFE8
 12749                           indf1	equ	0xFE7
 12750                           postdec1	equ	0xFE5
 12751                           fsr1h	equ	0xFE2
 12752                           fsr1l	equ	0xFE1
 12753                           indf2	equ	0xFDF
 12754                           postinc2	equ	0xFDE
 12755                           postdec2	equ	0xFDD
 12756                           plusw2	equ	0xFDB
 12757                           fsr2h	equ	0xFDA
 12758                           fsr2l	equ	0xFD9
 12759                           status	equ	0xFD8
 12760                           
 12761 ;; *************** function _SPI_MinSpeed *****************
 12762 ;; Defined at:
 12763 ;;		line 190 in file "Library/SPI.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 12766 ;;		 -> SPI1(11), 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;		None
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  1    wreg      void 
 12771 ;; Registers used:
 12772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12778 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;Total ram usage:        2 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:    9
 12785 ;; This function calls:
 12786 ;;		_Byte_SetBit
 12787 ;;		_Byte_SetQuad
 12788 ;; This function is called by:
 12789 ;;		_HMI_Init
 12790 ;; This function uses a non-reentrant model
 12791 ;;
 12792                           
 12793                           	psect	text64
 12794  014EFC                     __ptext64:
 12795                           	opt stack 0
 12796  014EFC                     _SPI_MinSpeed:
 12797                           	opt stack 20
 12798                           
 12799                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;incstack = 0
 12803  014EFC  0100               	movlb	0	; () banked
 12804  014EFE  EE20 F006          	lfsr	2,6
 12805  014F02  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12806  014F04  26D9               	addwf	fsr2l,f,c
 12807  014F06  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12808  014F08  22DA               	addwfc	fsr2h,f,c
 12809  014F0A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12810  014F0E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12811  014F12  0E05               	movlw	5
 12812  014F14  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12813  014F16  0E00               	movlw	0
 12814  014F18  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12815  014F1A  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 12816                           
 12817                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 12818  014F1E  0100               	movlb	0	; () banked
 12819  014F20  EE20 F006          	lfsr	2,6
 12820  014F24  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12821  014F26  26D9               	addwf	fsr2l,f,c
 12822  014F28  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12823  014F2A  22DA               	addwfc	fsr2h,f,c
 12824  014F2C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12825  014F30  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12826  014F34  0E00               	movlw	0
 12827  014F36  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12828  014F38  0E02               	movlw	2
 12829  014F3A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12830  014F3C  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 12831                           
 12832                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12833  014F40  0100               	movlb	0	; () banked
 12834  014F42  EE20 F006          	lfsr	2,6
 12835  014F46  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12836  014F48  26D9               	addwf	fsr2l,f,c
 12837  014F4A  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12838  014F4C  22DA               	addwfc	fsr2h,f,c
 12839  014F4E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12840  014F52  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12841  014F56  0E05               	movlw	5
 12842  014F58  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12843  014F5A  0E01               	movlw	1
 12844  014F5C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12845  014F5E  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 12846  014F62  0012               	return		;funcret
 12847  014F64                     __end_of_SPI_MinSpeed:
 12848                           	opt stack 0
 12849                           tosu	equ	0xFFF
 12850                           tosh	equ	0xFFE
 12851                           tosl	equ	0xFFD
 12852                           pclath	equ	0xFFA
 12853                           tblptru	equ	0xFF8
 12854                           tblptrh	equ	0xFF7
 12855                           tblptrl	equ	0xFF6
 12856                           tablat	equ	0xFF5
 12857                           prodh	equ	0xFF4
 12858                           prodl	equ	0xFF3
 12859                           intcon	equ	0xFF2
 12860                           postinc0	equ	0xFEE
 12861                           wreg	equ	0xFE8
 12862                           indf1	equ	0xFE7
 12863                           postdec1	equ	0xFE5
 12864                           fsr1h	equ	0xFE2
 12865                           fsr1l	equ	0xFE1
 12866                           indf2	equ	0xFDF
 12867                           postinc2	equ	0xFDE
 12868                           postdec2	equ	0xFDD
 12869                           plusw2	equ	0xFDB
 12870                           fsr2h	equ	0xFDA
 12871                           fsr2l	equ	0xFD9
 12872                           status	equ	0xFD8
 12873                           
 12874 ;; *************** function _SPI_Init *****************
 12875 ;; Defined at:
 12876 ;;		line 12 in file "Library/SPI.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;  pClock          4   45[BANK0 ] unsigned long 
 12879 ;;  pChannel        1   49[BANK0 ] enum E6744
 12880 ;;  pMode           1   50[BANK0 ] enum E6748
 12881 ;; Auto vars:     Size  Location     Type
 12882 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 12883 ;;		 -> SPI1(11), SPI2(11), 
 12884 ;; Return value:  Size  Location     Type
 12885 ;;                  1    wreg      void 
 12886 ;; Registers used:
 12887 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12888 ;; Tracked objects:
 12889 ;;		On entry : 0/0
 12890 ;;		On exit  : 0/0
 12891 ;;		Unchanged: 0/0
 12892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12893 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12896 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12897 ;;Total ram usage:        8 bytes
 12898 ;; Hardware stack levels used:    1
 12899 ;; Hardware stack levels required when called:   12
 12900 ;; This function calls:
 12901 ;;		_Byte_SetBit
 12902 ;;		_Byte_SetQuad
 12903 ;;		_Port_SetPinType
 12904 ;;		_SPI_DCS
 12905 ;;		_SPI_DisableISR
 12906 ;;		_Timer2_Init
 12907 ;; This function is called by:
 12908 ;;		_Configure_GPIOs
 12909 ;;		_HMI_Init
 12910 ;; This function uses a non-reentrant model
 12911 ;;
 12912                           
 12913                           	psect	text65
 12914  01078E                     __ptext65:
 12915                           	opt stack 0
 12916  01078E                     _SPI_Init:
 12917                           	opt stack 16
 12918                           
 12919                           ;SPI.c: 14: SPIPtr pInput;
 12920                           ;SPI.c: 16: switch (pChannel)
 12921                           
 12922                           ;incstack = 0
 12923  01078E  D00A               	goto	l597
 12924  010790                     
 12925                           ;SPI.c: 19: pInput = &SPI1;
 12926  010790  0EC8               	movlw	low _SPI1
 12927  010792  0100               	movlb	0	; () banked
 12928  010794  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12929  010796  0E02               	movlw	high _SPI1
 12930  010798  D003               	goto	L7
 12931  01079A                     
 12932                           ; BSR set to: 0
 12933                           ;SPI.c: 22: pInput = &SPI2;
 12934                           
 12935                           ; BSR set to: 0
 12936  01079A  0E82               	movlw	low _SPI2
 12937  01079C  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12938  01079E  0E01               	movlw	high _SPI2
 12939  0107A0                     L7:
 12940  0107A0  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;SPI.c: 24: };
 12944                           
 12945                           ;SPI.c: 23: break;
 12946  0107A2  D008               	goto	l599
 12947  0107A4                     l597:
 12948                           
 12949                           ; BSR set to: 0
 12950  0107A4  0100               	movlb	0	; () banked
 12951  0107A6  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12952                           
 12953                           ; Switch size 1, requested type "space"
 12954                           ; Number of cases is 2, Range of values is 0 to 1
 12955                           ; switch strategies available:
 12956                           ; Name         Instructions Cycles
 12957                           ; simple_byte            7     4 (average)
 12958                           ;	Chosen strategy is simple_byte
 12959  0107A8  0A00               	xorlw	0	; case 0
 12960  0107AA  B4D8               	btfsc	status,2,c
 12961  0107AC  D7F1               	goto	l598
 12962  0107AE  0A01               	xorlw	1	; case 1
 12963  0107B0  B4D8               	btfsc	status,2,c
 12964  0107B2  D7F3               	goto	l600
 12965  0107B4                     l599:
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;SPI.c: 26: pInput->mChannel = pChannel;
 12969                           
 12970                           ; BSR set to: 0
 12971  0107B4  EE20 F002          	lfsr	2,2
 12972  0107B8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 12973  0107BA  26D9               	addwf	fsr2l,f,c
 12974  0107BC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 12975  0107BE  22DA               	addwfc	fsr2h,f,c
 12976  0107C0  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 12977                           
 12978                           ;SPI.c: 35: switch (pChannel)
 12979  0107C4  D093               	goto	l601
 12980  0107C6                     
 12981                           ; BSR set to: 0
 12982                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 12983                           
 12984                           ; BSR set to: 0
 12985  0107C6  0EAB               	movlw	low _PortC
 12986  0107C8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12987  0107CA  0E01               	movlw	high _PortC
 12988  0107CC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12989  0107CE  0E02               	movlw	2
 12990  0107D0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12991  0107D2  0E03               	movlw	3
 12992  0107D4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12993  0107D6  EC4A  F093         	call	_Port_SetPinType	;wreg free
 12994                           
 12995                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 12996  0107DA  0EAB               	movlw	low _PortC
 12997  0107DC  0100               	movlb	0	; () banked
 12998  0107DE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12999  0107E0  0E01               	movlw	high _PortC
 13000  0107E2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13001  0107E4  0E03               	movlw	3
 13002  0107E6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13003  0107E8  0E03               	movlw	3
 13004  0107EA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13005  0107EC  EC4A  F093         	call	_Port_SetPinType	;wreg free
 13006                           
 13007                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 13008  0107F0  0EAB               	movlw	low _PortC
 13009  0107F2  0100               	movlb	0	; () banked
 13010  0107F4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13011  0107F6  0E01               	movlw	high _PortC
 13012  0107F8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13013  0107FA  0E05               	movlw	5
 13014  0107FC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13015  0107FE  0E03               	movlw	3
 13016  010800  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13017  010802  EC4A  F093         	call	_Port_SetPinType	;wreg free
 13018                           
 13019                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 13020  010806  0EAB               	movlw	low _PortC
 13021  010808  0100               	movlb	0	; () banked
 13022  01080A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13023  01080C  0E01               	movlw	high _PortC
 13024  01080E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13025  010810  0E04               	movlw	4
 13026  010812  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13027  010814  0E00               	movlw	0
 13028  010816  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13029  010818  EC4A  F093         	call	_Port_SetPinType	;wreg free
 13030                           
 13031                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 13032  01081C  0100               	movlb	0	; () banked
 13033  01081E  EE20 F003          	lfsr	2,3
 13034  010822  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13035  010824  26D9               	addwf	fsr2l,f,c
 13036  010826  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13037  010828  22DA               	addwfc	fsr2h,f,c
 13038  01082A  0EC7               	movlw	199
 13039  01082C  6EDE               	movwf	postinc2,c
 13040  01082E  0E0F               	movlw	15
 13041  010830  6EDD               	movwf	postdec2,c
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 13045  010832  EE20 F006          	lfsr	2,6
 13046  010836  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13047  010838  26D9               	addwf	fsr2l,f,c
 13048  01083A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13049  01083C  22DA               	addwfc	fsr2h,f,c
 13050  01083E  0EC6               	movlw	198
 13051  010840  6EDE               	movwf	postinc2,c
 13052  010842  0E0F               	movlw	15
 13053  010844  6EDD               	movwf	postdec2,c
 13054                           
 13055                           ; BSR set to: 0
 13056                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 13057  010846  EE20 F009          	lfsr	2,9
 13058  01084A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13059  01084C  26D9               	addwf	fsr2l,f,c
 13060  01084E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13061  010850  22DA               	addwfc	fsr2h,f,c
 13062  010852  0EC9               	movlw	201
 13063  010854  D047               	goto	L8
 13064  010856                     
 13065                           ; BSR set to: 0
 13066                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 13067                           
 13068                           ; BSR set to: 0
 13069  010856  0E97               	movlw	low _PortD
 13070  010858  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13071  01085A  0E01               	movlw	high _PortD
 13072  01085C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13073  01085E  0E07               	movlw	7
 13074  010860  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13075  010862  0E03               	movlw	3
 13076  010864  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13077  010866  EC4A  F093         	call	_Port_SetPinType	;wreg free
 13078                           
 13079                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 13080  01086A  0E97               	movlw	low _PortD
 13081  01086C  0100               	movlb	0	; () banked
 13082  01086E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13083  010870  0E01               	movlw	high _PortD
 13084  010872  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13085  010874  0E06               	movlw	6
 13086  010876  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13087  010878  0E03               	movlw	3
 13088  01087A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13089  01087C  EC4A  F093         	call	_Port_SetPinType	;wreg free
 13090                           
 13091                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 13092  010880  0E97               	movlw	low _PortD
 13093  010882  0100               	movlb	0	; () banked
 13094  010884  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13095  010886  0E01               	movlw	high _PortD
 13096  010888  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13097  01088A  0E04               	movlw	4
 13098  01088C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13099  01088E  0E03               	movlw	3
 13100  010890  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13101  010892  EC4A  F093         	call	_Port_SetPinType	;wreg free
 13102                           
 13103                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 13104  010896  0E97               	movlw	low _PortD
 13105  010898  0100               	movlb	0	; () banked
 13106  01089A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13107  01089C  0E01               	movlw	high _PortD
 13108  01089E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13109  0108A0  0E05               	movlw	5
 13110  0108A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13111  0108A4  0E00               	movlw	0
 13112  0108A6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13113  0108A8  EC4A  F093         	call	_Port_SetPinType	;wreg free
 13114                           
 13115                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 13116  0108AC  0100               	movlb	0	; () banked
 13117  0108AE  EE20 F003          	lfsr	2,3
 13118  0108B2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13119  0108B4  26D9               	addwf	fsr2l,f,c
 13120  0108B6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13121  0108B8  22DA               	addwfc	fsr2h,f,c
 13122  0108BA  0E6D               	movlw	109
 13123  0108BC  6EDE               	movwf	postinc2,c
 13124  0108BE  0E0F               	movlw	15
 13125  0108C0  6EDD               	movwf	postdec2,c
 13126                           
 13127                           ; BSR set to: 0
 13128                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 13129  0108C2  EE20 F006          	lfsr	2,6
 13130  0108C6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13131  0108C8  26D9               	addwf	fsr2l,f,c
 13132  0108CA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13133  0108CC  22DA               	addwfc	fsr2h,f,c
 13134  0108CE  0E6C               	movlw	108
 13135  0108D0  6EDE               	movwf	postinc2,c
 13136  0108D2  0E0F               	movlw	15
 13137  0108D4  6EDD               	movwf	postdec2,c
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 13141  0108D6  EE20 F009          	lfsr	2,9
 13142  0108DA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13143  0108DC  26D9               	addwf	fsr2l,f,c
 13144  0108DE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13145  0108E0  22DA               	addwfc	fsr2h,f,c
 13146  0108E2  0E6F               	movlw	111
 13147  0108E4                     L8:
 13148  0108E4  6EDE               	movwf	postinc2,c
 13149  0108E6  0E0F               	movlw	15
 13150  0108E8  6EDD               	movwf	postdec2,c
 13151                           
 13152                           ;SPI.c: 68: break;
 13153  0108EA  D008               	goto	l603
 13154  0108EC                     l601:
 13155                           
 13156                           ; BSR set to: 0
 13157                           
 13158                           ; BSR set to: 0
 13159  0108EC  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13160                           
 13161                           ; Switch size 1, requested type "space"
 13162                           ; Number of cases is 2, Range of values is 0 to 1
 13163                           ; switch strategies available:
 13164                           ; Name         Instructions Cycles
 13165                           ; simple_byte            7     4 (average)
 13166                           ;	Chosen strategy is simple_byte
 13167  0108EE  0A00               	xorlw	0	; case 0
 13168  0108F0  B4D8               	btfsc	status,2,c
 13169  0108F2  D769               	goto	l602
 13170  0108F4  0A01               	xorlw	1	; case 1
 13171  0108F6  A4D8               	btfss	status,2,c
 13172  0108F8  0012               	return	
 13173  0108FA  D7AD               	goto	l604
 13174  0108FC                     l603:
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13178                           
 13179                           ; BSR set to: 0
 13180  0108FC  EE20 F006          	lfsr	2,6
 13181  010900  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13182  010902  26D9               	addwf	fsr2l,f,c
 13183  010904  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13184  010906  22DA               	addwfc	fsr2h,f,c
 13185  010908  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13186  01090C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13187  010910  0E05               	movlw	5
 13188  010912  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13189  010914  0E00               	movlw	0
 13190  010916  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13191  010918  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13192                           
 13193                           ;SPI.c: 77: switch(pMode)
 13194  01091C  D08C               	goto	l607
 13195  01091E                     
 13196                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13197  01091E  0100               	movlb	0	; () banked
 13198  010920  EE20 F006          	lfsr	2,6
 13199  010924  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13200  010926  26D9               	addwf	fsr2l,f,c
 13201  010928  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13202  01092A  22DA               	addwfc	fsr2h,f,c
 13203  01092C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13204  010930  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13205  010934  0E04               	movlw	4
 13206  010936  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13207  010938  0E00               	movlw	0
 13208  01093A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13209  01093C  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13210                           
 13211                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13212  010940  0100               	movlb	0	; () banked
 13213  010942  EE20 F003          	lfsr	2,3
 13214  010946  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13215  010948  26D9               	addwf	fsr2l,f,c
 13216  01094A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13217  01094C  22DA               	addwfc	fsr2h,f,c
 13218  01094E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13219  010952  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13220  010956  0E06               	movlw	6
 13221  010958  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13222  01095A  0E00               	movlw	0
 13223  01095C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13224  01095E  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13225                           
 13226                           ;SPI.c: 82: break;
 13227  010962  D078               	goto	l609
 13228  010964                     
 13229                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13230  010964  0100               	movlb	0	; () banked
 13231  010966  EE20 F006          	lfsr	2,6
 13232  01096A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13233  01096C  26D9               	addwf	fsr2l,f,c
 13234  01096E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13235  010970  22DA               	addwfc	fsr2h,f,c
 13236  010972  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13237  010976  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13238  01097A  0E04               	movlw	4
 13239  01097C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13240  01097E  0E00               	movlw	0
 13241  010980  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13242  010982  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13243                           
 13244                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13245  010986  0100               	movlb	0	; () banked
 13246  010988  EE20 F003          	lfsr	2,3
 13247  01098C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13248  01098E  26D9               	addwf	fsr2l,f,c
 13249  010990  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13250  010992  22DA               	addwfc	fsr2h,f,c
 13251  010994  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13252  010998  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13253  01099C  0E06               	movlw	6
 13254  01099E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13255  0109A0  0E01               	movlw	1
 13256  0109A2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13257  0109A4  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13258                           
 13259                           ;SPI.c: 86: break;
 13260  0109A8  D055               	goto	l609
 13261  0109AA                     
 13262                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13263  0109AA  0100               	movlb	0	; () banked
 13264  0109AC  EE20 F006          	lfsr	2,6
 13265  0109B0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13266  0109B2  26D9               	addwf	fsr2l,f,c
 13267  0109B4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13268  0109B6  22DA               	addwfc	fsr2h,f,c
 13269  0109B8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13270  0109BC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13271  0109C0  0E04               	movlw	4
 13272  0109C2  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13273  0109C4  0E01               	movlw	1
 13274  0109C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13275  0109C8  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13276                           
 13277                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13278  0109CC  0100               	movlb	0	; () banked
 13279  0109CE  EE20 F003          	lfsr	2,3
 13280  0109D2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13281  0109D4  26D9               	addwf	fsr2l,f,c
 13282  0109D6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13283  0109D8  22DA               	addwfc	fsr2h,f,c
 13284  0109DA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13285  0109DE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13286  0109E2  0E06               	movlw	6
 13287  0109E4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13288  0109E6  0E00               	movlw	0
 13289  0109E8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13290  0109EA  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13291                           
 13292                           ;SPI.c: 90: break;
 13293  0109EE  D032               	goto	l609
 13294  0109F0                     
 13295                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13296  0109F0  0100               	movlb	0	; () banked
 13297  0109F2  EE20 F006          	lfsr	2,6
 13298  0109F6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13299  0109F8  26D9               	addwf	fsr2l,f,c
 13300  0109FA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13301  0109FC  22DA               	addwfc	fsr2h,f,c
 13302  0109FE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13303  010A02  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13304  010A06  0E04               	movlw	4
 13305  010A08  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13306  010A0A  0E01               	movlw	1
 13307  010A0C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13308  010A0E  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13309                           
 13310                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13311  010A12  0100               	movlb	0	; () banked
 13312  010A14  EE20 F003          	lfsr	2,3
 13313  010A18  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13314  010A1A  26D9               	addwf	fsr2l,f,c
 13315  010A1C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13316  010A1E  22DA               	addwfc	fsr2h,f,c
 13317  010A20  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13318  010A24  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13319  010A28  0E06               	movlw	6
 13320  010A2A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13321  010A2C  0E01               	movlw	1
 13322  010A2E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13323  010A30  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13324                           
 13325                           ;SPI.c: 94: break;
 13326  010A34  D00F               	goto	l609
 13327  010A36                     l607:
 13328  010A36  0100               	movlb	0	; () banked
 13329  010A38  5192               	movf	SPI_Init@pMode& (0+255),w,b
 13330                           
 13331                           ; Switch size 1, requested type "space"
 13332                           ; Number of cases is 4, Range of values is 0 to 3
 13333                           ; switch strategies available:
 13334                           ; Name         Instructions Cycles
 13335                           ; simple_byte           13     7 (average)
 13336                           ;	Chosen strategy is simple_byte
 13337  010A3A  0A00               	xorlw	0	; case 0
 13338  010A3C  B4D8               	btfsc	status,2,c
 13339  010A3E  D76F               	goto	l608
 13340  010A40  0A01               	xorlw	1	; case 1
 13341  010A42  B4D8               	btfsc	status,2,c
 13342  010A44  D78F               	goto	l610
 13343  010A46  0A03               	xorlw	3	; case 2
 13344  010A48  B4D8               	btfsc	status,2,c
 13345  010A4A  D7AF               	goto	l611
 13346  010A4C  0A01               	xorlw	1	; case 3
 13347  010A4E  A4D8               	btfss	status,2,c
 13348  010A50  0012               	return	
 13349  010A52  D7CE               	goto	l612
 13350  010A54                     l609:
 13351                           
 13352                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 13353                           
 13354                           ; BSR set to: 0
 13355  010A54  0100               	movlb	0	; () banked
 13356  010A56  EE20 F006          	lfsr	2,6
 13357  010A5A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13358  010A5C  26D9               	addwf	fsr2l,f,c
 13359  010A5E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13360  010A60  22DA               	addwfc	fsr2h,f,c
 13361  010A62  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13362  010A66  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13363  010A6A  0E07               	movlw	7
 13364  010A6C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13365  010A6E  0E00               	movlw	0
 13366  010A70  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13367  010A72  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13368                           
 13369                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 13370  010A76  0100               	movlb	0	; () banked
 13371  010A78  EE20 F006          	lfsr	2,6
 13372  010A7C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13373  010A7E  26D9               	addwf	fsr2l,f,c
 13374  010A80  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13375  010A82  22DA               	addwfc	fsr2h,f,c
 13376  010A84  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13377  010A88  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13378  010A8C  0E06               	movlw	6
 13379  010A8E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13380  010A90  0E00               	movlw	0
 13381  010A92  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13382  010A94  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13383                           
 13384                           ;SPI.c: 106: Timer2_Init(pClock);
 13385  010A98  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 13386  010A9C  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 13387  010AA0  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 13388  010AA4  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 13389  010AA8  ECF5  F098         	call	_Timer2_Init	;wreg free
 13390                           
 13391                           ;SPI.c: 112: SPI_DisableISR(pInput);
 13392  010AAC  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 13393  010AB0  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 13394  010AB4  EC1D  F0AE         	call	_SPI_DisableISR	;wreg free
 13395                           
 13396                           ;SPI.c: 116: switch (pChannel)
 13397  010AB8  D004               	goto	l614
 13398  010ABA                     l615:
 13399                           
 13400                           ; BSR set to: 0
 13401  010ABA  869F               	bsf	3999,3,c	;volatile
 13402  010ABC  D00B               	goto	l616
 13403  010ABE                     l617:
 13404                           
 13405                           ; BSR set to: 0
 13406  010ABE  8EA5               	bsf	4005,7,c	;volatile
 13407  010AC0  D009               	goto	l616
 13408  010AC2                     l614:
 13409                           
 13410                           ; BSR set to: 0
 13411  010AC2  0100               	movlb	0	; () banked
 13412  010AC4  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13413                           
 13414                           ; Switch size 1, requested type "space"
 13415                           ; Number of cases is 2, Range of values is 0 to 1
 13416                           ; switch strategies available:
 13417                           ; Name         Instructions Cycles
 13418                           ; simple_byte            7     4 (average)
 13419                           ;	Chosen strategy is simple_byte
 13420  010AC6  0A00               	xorlw	0	; case 0
 13421  010AC8  B4D8               	btfsc	status,2,c
 13422  010ACA  D7F7               	goto	l615
 13423  010ACC  0A01               	xorlw	1	; case 1
 13424  010ACE  A4D8               	btfss	status,2,c
 13425  010AD0  0012               	return	
 13426  010AD2  D7F5               	goto	l617
 13427  010AD4                     l616:
 13428                           
 13429                           ; BSR set to: 0
 13430                           ;SPI.c: 124: SPI_DCS(pInput);
 13431                           
 13432                           ; BSR set to: 0
 13433  010AD4  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 13434  010AD8  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 13435  010ADC  EC7A  F0AD         	call	_SPI_DCS	;wreg free
 13436                           
 13437                           ;SPI.c: 126: pInput->mBusy = 0;
 13438  010AE0  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 13439  010AE4  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 13440  010AE8  0E00               	movlw	0
 13441  010AEA  6EDF               	movwf	indf2,c
 13442                           
 13443                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 13444  010AEC  0100               	movlb	0	; () banked
 13445  010AEE  EE20 F006          	lfsr	2,6
 13446  010AF2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13447  010AF4  26D9               	addwf	fsr2l,f,c
 13448  010AF6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13449  010AF8  22DA               	addwfc	fsr2h,f,c
 13450  010AFA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 13451  010AFE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 13452  010B02  0E00               	movlw	0
 13453  010B04  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13454  010B06  0E03               	movlw	3
 13455  010B08  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 13456  010B0A  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 13457                           
 13458                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13459  010B0E  0100               	movlb	0	; () banked
 13460  010B10  EE20 F006          	lfsr	2,6
 13461  010B14  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13462  010B16  26D9               	addwf	fsr2l,f,c
 13463  010B18  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13464  010B1A  22DA               	addwfc	fsr2h,f,c
 13465  010B1C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13466  010B20  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13467  010B24  0E05               	movlw	5
 13468  010B26  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13469  010B28  0E01               	movlw	1
 13470  010B2A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13471  010B2C  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 13472  010B30  0012               	return		;funcret
 13473  010B32                     __end_of_SPI_Init:
 13474                           	opt stack 0
 13475                           tosu	equ	0xFFF
 13476                           tosh	equ	0xFFE
 13477                           tosl	equ	0xFFD
 13478                           pclath	equ	0xFFA
 13479                           tblptru	equ	0xFF8
 13480                           tblptrh	equ	0xFF7
 13481                           tblptrl	equ	0xFF6
 13482                           tablat	equ	0xFF5
 13483                           prodh	equ	0xFF4
 13484                           prodl	equ	0xFF3
 13485                           intcon	equ	0xFF2
 13486                           postinc0	equ	0xFEE
 13487                           wreg	equ	0xFE8
 13488                           indf1	equ	0xFE7
 13489                           postdec1	equ	0xFE5
 13490                           fsr1h	equ	0xFE2
 13491                           fsr1l	equ	0xFE1
 13492                           indf2	equ	0xFDF
 13493                           postinc2	equ	0xFDE
 13494                           postdec2	equ	0xFDD
 13495                           plusw2	equ	0xFDB
 13496                           fsr2h	equ	0xFDA
 13497                           fsr2l	equ	0xFD9
 13498                           status	equ	0xFD8
 13499                           
 13500 ;; *************** function _Timer2_Init *****************
 13501 ;; Defined at:
 13502 ;;		line 10 in file "Library/Timer2.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 13507 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 13508 ;;  RDIV            4   18[BANK0 ] unsigned long 
 13509 ;; Return value:  Size  Location     Type
 13510 ;;                  1    wreg      void 
 13511 ;; Registers used:
 13512 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13519 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13521 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13522 ;;Total ram usage:       17 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    8
 13525 ;; This function calls:
 13526 ;;		_Timer2_Clear
 13527 ;;		___lldiv
 13528 ;; This function is called by:
 13529 ;;		_SPI_Init
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           	psect	text66
 13534  0131EA                     __ptext66:
 13535                           	opt stack 0
 13536  0131EA                     _Timer2_Init:
 13537                           	opt stack 19
 13538                           
 13539                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 13540                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 13541                           ;Timer2.c: 14: static UINT8 PRE = 0;
 13542                           ;Timer2.c: 15: static UINT32 DIV = 0;
 13543                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 13544                           
 13545                           ;incstack = 0
 13546  0131EA  0E00               	movlw	0
 13547  0131EC  0100               	movlb	0	; () banked
 13548  0131EE  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 13549  0131F0  0E6C               	movlw	108
 13550  0131F2  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 13551  0131F4  0EDC               	movlw	220
 13552  0131F6  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 13553  0131F8  0E02               	movlw	2
 13554  0131FA  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 13555                           
 13556                           ; BSR set to: 0
 13557                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 13558                           ;Timer2.c: 20: pFrequency *= 2;
 13559  0131FC  90D8               	bcf	status,0,c
 13560  0131FE  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 13561  013200  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 13562  013202  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 13563  013204  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;Timer2.c: 23: pCPUClock /= 4;
 13567  013206  0E02               	movlw	2
 13568  013208  6F71               	movwf	??_Timer2_Init& (0+255),b
 13569  01320A                     u11215:
 13570  01320A  90D8               	bcf	status,0,c
 13571  01320C  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 13572  01320E  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 13573  013210  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 13574  013212  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 13575  013214  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 13576  013216  D7F9               	goto	u11215
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 13580  013218  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 13581  01321C  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 13582  013220  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 13583  013224  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 13584  013228  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 13585  01322C  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 13586  013230  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 13587  013234  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 13588  013238  EC86  F0A4         	call	___lldiv	;wreg free
 13589  01323C  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 13590  013240  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 13591  013244  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 13592  013248  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 13593                           
 13594                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 13595  01324C  D00E               	goto	l1828
 13596  01324E                     l13902:
 13597                           
 13598                           ;Timer2.c: 28: {
 13599                           ;Timer2.c: 29: RDIV = 0;
 13600  01324E  0E00               	movlw	0
 13601  013250  0100               	movlb	0	; () banked
 13602  013252  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 13603  013254  0E00               	movlw	0
 13604  013256  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 13605  013258  0E00               	movlw	0
 13606  01325A  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 13607  01325C  0E00               	movlw	0
 13608  01325E  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;Timer2.c: 30: INDEX ++;
 13612  013260  2BF2               	incf	Timer2_Init@INDEX& (0+255),f,b
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;Timer2.c: 31: if (INDEX >= 3)
 13616  013262  0E02               	movlw	2
 13617  013264  65F2               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 13618  013266  D001               	goto	l1828
 13619  013268  D023               	goto	u11230
 13620  01326A                     l1828:
 13621                           
 13622                           ; BSR set to: 0
 13623                           
 13624                           ; BSR set to: 0
 13625  01326A  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 13626  01326E  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 13627  013272  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 13628  013276  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 13629  01327A  0100               	movlb	0	; () banked
 13630  01327C  51F2               	movf	Timer2_Init@INDEX& (0+255),w,b
 13631  01327E  0D01               	mullw	1
 13632  013280  0E40               	movlw	low Timer2_Init@PRESCALE
 13633  013282  24F3               	addwf	prodl,w,c
 13634  013284  6EF6               	movwf	tblptrl,c
 13635  013286  0EFC               	movlw	high Timer2_Init@PRESCALE
 13636  013288  20F4               	addwfc	prodh,w,c
 13637  01328A  6EF7               	movwf	tblptrh,c
 13638  01328C                     	if	1	;There are 3 active tblptr bytes
 13639  01328C  6AF8               	clrf	tblptru,c
 13640  01328E  0E00               	movlw	low (__mediumconst shr (0+16))
 13641  013290  22F8               	addwfc	tblptru,f,c
 13642  013292                     	endif
 13643  013292  0008               	tblrd		*
 13644  013294  50F5               	movf	tablat,w,c
 13645  013296  6F64               	movwf	___lldiv@divisor& (0+255),b
 13646  013298  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13647  01329A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13648  01329C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13649  01329E  EC86  F0A4         	call	___lldiv	;wreg free
 13650  0132A2  0100               	movlb	0	; () banked
 13651  0132A4  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13652  0132A6  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 13653  0132A8  E1D2               	bnz	l13902
 13654  0132AA  0561               	decf	(?___lldiv+1)& (0+255),w,b
 13655  0132AC  B0D8               	btfsc	status,0,c
 13656  0132AE  D7CF               	goto	l1827
 13657  0132B0                     u11230:
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;Timer2.c: 33: }
 13661                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 13662                           
 13663                           ; BSR set to: 0
 13664  0132B0  50CA               	movf	4042,w,c	;volatile
 13665  0132B2  19F2               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13666  0132B4  0BFC               	andlw	-4
 13667  0132B6  19F2               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13668  0132B8  6ECA               	movwf	4042,c	;volatile
 13669                           
 13670                           ; BSR set to: 0
 13671                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 13672  0132BA  84CA               	bsf	4042,2,c	;volatile
 13673                           
 13674                           ; BSR set to: 0
 13675                           ;Timer2.c: 44: Timer2_Clear();
 13676  0132BC  EC33  F0B0         	call	_Timer2_Clear	;wreg free
 13677                           
 13678                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 13679  0132C0  0100               	movlb	0	; () banked
 13680  0132C2  51F2               	movf	Timer2_Init@INDEX& (0+255),w,b
 13681  0132C4  0D01               	mullw	1
 13682  0132C6  0E40               	movlw	low Timer2_Init@PRESCALE
 13683  0132C8  24F3               	addwf	prodl,w,c
 13684  0132CA  6EF6               	movwf	tblptrl,c
 13685  0132CC  0EFC               	movlw	high Timer2_Init@PRESCALE
 13686  0132CE  20F4               	addwfc	prodh,w,c
 13687  0132D0  6EF7               	movwf	tblptrh,c
 13688  0132D2                     	if	1	;There are 3 active tblptr bytes
 13689  0132D2  6AF8               	clrf	tblptru,c
 13690  0132D4  0E00               	movlw	low (__mediumconst shr (0+16))
 13691  0132D6  22F8               	addwfc	tblptru,f,c
 13692  0132D8                     	endif
 13693  0132D8  0008               	tblrd		*
 13694  0132DA  CFF5 F039          	movff	tablat,Timer2_Init@PRE
 13695                           
 13696                           ; BSR set to: 0
 13697                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 13698  0132DE  0EFF               	movlw	255
 13699  0132E0  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 13700  0132E2  0101               	movlb	1	; () banked
 13701  0132E4  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 13702  0132E6  0EFF               	movlw	255
 13703  0132E8  0100               	movlb	0	; () banked
 13704  0132EA  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 13705  0132EC  0101               	movlb	1	; () banked
 13706  0132EE  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 13707  0132F0  0EFF               	movlw	255
 13708  0132F2  0100               	movlb	0	; () banked
 13709  0132F4  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 13710  0132F6  0101               	movlb	1	; () banked
 13711  0132F8  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 13712  0132FA  0EFF               	movlw	255
 13713  0132FC  0100               	movlb	0	; () banked
 13714  0132FE  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 13715  013300  0101               	movlb	1	; () banked
 13716  013302  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 13717                           
 13718                           ; BSR set to: 1
 13719                           ;Timer2.c: 48: INDEX = DIV/PRE;
 13720  013304  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 13721  013308  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 13722  01330C  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 13723  013310  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 13724  013314  5039               	movf	Timer2_Init@PRE,w,c
 13725  013316  0100               	movlb	0	; () banked
 13726  013318  6F64               	movwf	___lldiv@divisor& (0+255),b
 13727  01331A  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13728  01331C  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13729  01331E  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13730  013320  EC86  F0A4         	call	___lldiv	;wreg free
 13731  013324  0100               	movlb	0	; () banked
 13732  013326  5160               	movf	?___lldiv& (0+255),w,b
 13733  013328  6FF2               	movwf	Timer2_Init@INDEX& (0+255),b
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;Timer2.c: 49: PR2 = INDEX;
 13737  01332A  C0F2  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 13738                           
 13739                           ; BSR set to: 0
 13740  01332E  0012               	return		;funcret
 13741  013330                     __end_of_Timer2_Init:
 13742                           	opt stack 0
 13743                           tosu	equ	0xFFF
 13744                           tosh	equ	0xFFE
 13745                           tosl	equ	0xFFD
 13746                           pclath	equ	0xFFA
 13747                           tblptru	equ	0xFF8
 13748                           tblptrh	equ	0xFF7
 13749                           tblptrl	equ	0xFF6
 13750                           tablat	equ	0xFF5
 13751                           prodh	equ	0xFF4
 13752                           prodl	equ	0xFF3
 13753                           intcon	equ	0xFF2
 13754                           postinc0	equ	0xFEE
 13755                           wreg	equ	0xFE8
 13756                           indf1	equ	0xFE7
 13757                           postdec1	equ	0xFE5
 13758                           fsr1h	equ	0xFE2
 13759                           fsr1l	equ	0xFE1
 13760                           indf2	equ	0xFDF
 13761                           postinc2	equ	0xFDE
 13762                           postdec2	equ	0xFDD
 13763                           plusw2	equ	0xFDB
 13764                           fsr2h	equ	0xFDA
 13765                           fsr2l	equ	0xFD9
 13766                           status	equ	0xFD8
 13767                           
 13768 ;; *************** function ___lldiv *****************
 13769 ;; Defined at:
 13770 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13771 ;; Parameters:    Size  Location     Type
 13772 ;;  dividend        4    0[BANK0 ] unsigned long 
 13773 ;;  divisor         4    4[BANK0 ] unsigned long 
 13774 ;; Auto vars:     Size  Location     Type
 13775 ;;  quotient        4    8[BANK0 ] unsigned long 
 13776 ;;  counter         1   12[BANK0 ] unsigned char 
 13777 ;; Return value:  Size  Location     Type
 13778 ;;                  4    0[BANK0 ] unsigned long 
 13779 ;; Registers used:
 13780 ;;		wreg, status,2, status,0
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13786 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13787 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13789 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13790 ;;Total ram usage:       13 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    7
 13793 ;; This function calls:
 13794 ;;		Nothing
 13795 ;; This function is called by:
 13796 ;;		_Timer2_Init
 13797 ;;		_rand_between
 13798 ;;		_I2C_Init
 13799 ;;		_Timer0_Init
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           	psect	text67
 13804  01490C                     __ptext67:
 13805                           	opt stack 0
 13806  01490C                     ___lldiv:
 13807                           	opt stack 19
 13808                           
 13809                           ; BSR set to: 0
 13810                           ;incstack = 0
 13811  01490C  0E00               	movlw	0
 13812  01490E  0100               	movlb	0	; () banked
 13813  014910  6F68               	movwf	___lldiv@quotient& (0+255),b
 13814  014912  0E00               	movlw	0
 13815  014914  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 13816  014916  0E00               	movlw	0
 13817  014918  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 13818  01491A  0E00               	movlw	0
 13819  01491C  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 13820                           
 13821                           ; BSR set to: 0
 13822  01491E  5164               	movf	___lldiv@divisor& (0+255),w,b
 13823  014920  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13824  014922  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13825  014924  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13826  014926  B4D8               	btfsc	status,2,c
 13827  014928  D02A               	goto	l2661
 13828                           
 13829                           ; BSR set to: 0
 13830  01492A  0E01               	movlw	1
 13831  01492C  6F6C               	movwf	___lldiv@counter& (0+255),b
 13832  01492E  D006               	goto	l2656
 13833  014930                     
 13834                           ; BSR set to: 0
 13835                           
 13836                           ; BSR set to: 0
 13837  014930  90D8               	bcf	status,0,c
 13838  014932  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 13839  014934  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13840  014936  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13841  014938  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13842  01493A  2B6C               	incf	___lldiv@counter& (0+255),f,b
 13843  01493C                     l2656:
 13844                           
 13845                           ; BSR set to: 0
 13846                           
 13847                           ; BSR set to: 0
 13848  01493C  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 13849  01493E  D7F8               	goto	l2657
 13850  014940                     u10980:
 13851                           
 13852                           ; BSR set to: 0
 13853                           
 13854                           ; BSR set to: 0
 13855                           
 13856                           ; BSR set to: 0
 13857  014940  90D8               	bcf	status,0,c
 13858  014942  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 13859  014944  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13860  014946  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13861  014948  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13862                           
 13863                           ; BSR set to: 0
 13864  01494A  5164               	movf	___lldiv@divisor& (0+255),w,b
 13865  01494C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 13866  01494E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13867  014950  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 13868  014952  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13869  014954  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 13870  014956  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13871  014958  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 13872  01495A  A0D8               	btfss	status,0,c
 13873  01495C  D009               	goto	l2660
 13874                           
 13875                           ; BSR set to: 0
 13876  01495E  5164               	movf	___lldiv@divisor& (0+255),w,b
 13877  014960  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 13878  014962  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13879  014964  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 13880  014966  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13881  014968  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 13882  01496A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13883  01496C  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 13884                           
 13885                           ; BSR set to: 0
 13886  01496E  8168               	bsf	___lldiv@quotient& (0+255),0,b
 13887  014970                     l2660:
 13888                           
 13889                           ; BSR set to: 0
 13890                           
 13891                           ; BSR set to: 0
 13892  014970  90D8               	bcf	status,0,c
 13893  014972  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 13894  014974  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 13895  014976  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 13896  014978  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 13897                           
 13898                           ; BSR set to: 0
 13899  01497A  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 13900  01497C  D7E1               	goto	u10980
 13901  01497E                     l2661:
 13902                           
 13903                           ; BSR set to: 0
 13904                           
 13905                           ; BSR set to: 0
 13906  01497E  C068  F060         	movff	___lldiv@quotient,?___lldiv
 13907  014982  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13908  014986  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13909  01498A  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13910                           
 13911                           ; BSR set to: 0
 13912  01498E  0012               	return		;funcret
 13913  014990                     __end_of___lldiv:
 13914                           	opt stack 0
 13915                           tosu	equ	0xFFF
 13916                           tosh	equ	0xFFE
 13917                           tosl	equ	0xFFD
 13918                           pclath	equ	0xFFA
 13919                           tblptru	equ	0xFF8
 13920                           tblptrh	equ	0xFF7
 13921                           tblptrl	equ	0xFF6
 13922                           tablat	equ	0xFF5
 13923                           prodh	equ	0xFF4
 13924                           prodl	equ	0xFF3
 13925                           intcon	equ	0xFF2
 13926                           postinc0	equ	0xFEE
 13927                           wreg	equ	0xFE8
 13928                           indf1	equ	0xFE7
 13929                           postdec1	equ	0xFE5
 13930                           fsr1h	equ	0xFE2
 13931                           fsr1l	equ	0xFE1
 13932                           indf2	equ	0xFDF
 13933                           postinc2	equ	0xFDE
 13934                           postdec2	equ	0xFDD
 13935                           plusw2	equ	0xFDB
 13936                           fsr2h	equ	0xFDA
 13937                           fsr2l	equ	0xFD9
 13938                           status	equ	0xFD8
 13939                           
 13940 ;; *************** function _Timer2_Clear *****************
 13941 ;; Defined at:
 13942 ;;		line 3 in file "Library/Timer2.c"
 13943 ;; Parameters:    Size  Location     Type
 13944 ;;		None
 13945 ;; Auto vars:     Size  Location     Type
 13946 ;;		None
 13947 ;; Return value:  Size  Location     Type
 13948 ;;                  1    wreg      void 
 13949 ;; Registers used:
 13950 ;;		None
 13951 ;; Tracked objects:
 13952 ;;		On entry : 0/0
 13953 ;;		On exit  : 0/0
 13954 ;;		Unchanged: 0/0
 13955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13960 ;;Total ram usage:        0 bytes
 13961 ;; Hardware stack levels used:    1
 13962 ;; Hardware stack levels required when called:    7
 13963 ;; This function calls:
 13964 ;;		Nothing
 13965 ;; This function is called by:
 13966 ;;		_Timer2_Init
 13967 ;; This function uses a non-reentrant model
 13968 ;;
 13969                           
 13970                           	psect	text68
 13971  016066                     __ptext68:
 13972                           	opt stack 0
 13973  016066                     _Timer2_Clear:
 13974                           	opt stack 19
 13975                           
 13976                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 13977                           
 13978                           ; BSR set to: 0
 13979                           ;incstack = 0
 13980  016066  929E               	bcf	3998,1,c	;volatile
 13981                           
 13982                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 13983  016068  929D               	bcf	3997,1,c	;volatile
 13984                           
 13985                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 13986  01606A  929F               	bcf	3999,1,c	;volatile
 13987  01606C  0012               	return		;funcret
 13988  01606E                     __end_of_Timer2_Clear:
 13989                           	opt stack 0
 13990                           tosu	equ	0xFFF
 13991                           tosh	equ	0xFFE
 13992                           tosl	equ	0xFFD
 13993                           pclath	equ	0xFFA
 13994                           tblptru	equ	0xFF8
 13995                           tblptrh	equ	0xFF7
 13996                           tblptrl	equ	0xFF6
 13997                           tablat	equ	0xFF5
 13998                           prodh	equ	0xFF4
 13999                           prodl	equ	0xFF3
 14000                           intcon	equ	0xFF2
 14001                           postinc0	equ	0xFEE
 14002                           wreg	equ	0xFE8
 14003                           indf1	equ	0xFE7
 14004                           postdec1	equ	0xFE5
 14005                           fsr1h	equ	0xFE2
 14006                           fsr1l	equ	0xFE1
 14007                           indf2	equ	0xFDF
 14008                           postinc2	equ	0xFDE
 14009                           postdec2	equ	0xFDD
 14010                           plusw2	equ	0xFDB
 14011                           fsr2h	equ	0xFDA
 14012                           fsr2l	equ	0xFD9
 14013                           status	equ	0xFD8
 14014                           
 14015 ;; *************** function _SPI_DisableISR *****************
 14016 ;; Defined at:
 14017 ;;		line 181 in file "Library/SPI.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14020 ;;		 -> SPI1(11), SPI2(11), 
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;		None
 14023 ;; Return value:  Size  Location     Type
 14024 ;;                  1    wreg      void 
 14025 ;; Registers used:
 14026 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14032 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14036 ;;Total ram usage:        2 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    7
 14039 ;; This function calls:
 14040 ;;		Nothing
 14041 ;; This function is called by:
 14042 ;;		_SPI_Init
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           	psect	text69
 14047  015C3A                     __ptext69:
 14048                           	opt stack 0
 14049  015C3A                     _SPI_DisableISR:
 14050                           	opt stack 20
 14051                           
 14052                           ;SPI.c: 183: switch (pInput->mChannel)
 14053                           
 14054                           ;incstack = 0
 14055  015C3A  D004               	goto	l654
 14056  015C3C                     l655:
 14057                           
 14058                           ; BSR set to: 0
 14059  015C3C  969D               	bcf	3997,3,c	;volatile
 14060  015C3E  0012               	return	
 14061  015C40                     l657:
 14062                           
 14063                           ; BSR set to: 0
 14064  015C40  9EA3               	bcf	4003,7,c	;volatile
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;SPI.c: 188: };
 14068                           
 14069                           ; BSR set to: 0
 14070                           
 14071                           ;SPI.c: 187: default: return;
 14072  015C42  0012               	return	
 14073  015C44                     l654:
 14074                           
 14075                           ; BSR set to: 0
 14076  015C44  0100               	movlb	0	; () banked
 14077  015C46  EE20 F002          	lfsr	2,2
 14078  015C4A  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 14079  015C4C  26D9               	addwf	fsr2l,f,c
 14080  015C4E  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 14081  015C50  22DA               	addwfc	fsr2h,f,c
 14082  015C52  50DF               	movf	indf2,w,c
 14083                           
 14084                           ; Switch size 1, requested type "space"
 14085                           ; Number of cases is 2, Range of values is 0 to 1
 14086                           ; switch strategies available:
 14087                           ; Name         Instructions Cycles
 14088                           ; simple_byte            7     4 (average)
 14089                           ;	Chosen strategy is simple_byte
 14090  015C54  0A00               	xorlw	0	; case 0
 14091  015C56  B4D8               	btfsc	status,2,c
 14092  015C58  D7F1               	goto	l655
 14093  015C5A  0A01               	xorlw	1	; case 1
 14094  015C5C  A4D8               	btfss	status,2,c
 14095  015C5E  0012               	return	
 14096  015C60  D7EF               	goto	l657
 14097  015C62                     __end_of_SPI_DisableISR:
 14098                           	opt stack 0
 14099                           tosu	equ	0xFFF
 14100                           tosh	equ	0xFFE
 14101                           tosl	equ	0xFFD
 14102                           pclath	equ	0xFFA
 14103                           tblptru	equ	0xFF8
 14104                           tblptrh	equ	0xFF7
 14105                           tblptrl	equ	0xFF6
 14106                           tablat	equ	0xFF5
 14107                           prodh	equ	0xFF4
 14108                           prodl	equ	0xFF3
 14109                           intcon	equ	0xFF2
 14110                           postinc0	equ	0xFEE
 14111                           wreg	equ	0xFE8
 14112                           indf1	equ	0xFE7
 14113                           postdec1	equ	0xFE5
 14114                           fsr1h	equ	0xFE2
 14115                           fsr1l	equ	0xFE1
 14116                           indf2	equ	0xFDF
 14117                           postinc2	equ	0xFDE
 14118                           postdec2	equ	0xFDD
 14119                           plusw2	equ	0xFDB
 14120                           fsr2h	equ	0xFDA
 14121                           fsr2l	equ	0xFD9
 14122                           status	equ	0xFD8
 14123                           
 14124 ;; *************** function _SPI_DCS *****************
 14125 ;; Defined at:
 14126 ;;		line 219 in file "Library/SPI.c"
 14127 ;; Parameters:    Size  Location     Type
 14128 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14129 ;;		 -> SPI1(11), SPI2(11), 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;		None
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      void 
 14134 ;; Registers used:
 14135 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14141 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14145 ;;Total ram usage:        2 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    7
 14148 ;; This function calls:
 14149 ;;		Nothing
 14150 ;; This function is called by:
 14151 ;;		_SPI_Init
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text70
 14156  015AF4                     __ptext70:
 14157                           	opt stack 0
 14158  015AF4                     _SPI_DCS:
 14159                           	opt stack 20
 14160                           
 14161                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 14162                           
 14163                           ; BSR set to: 0
 14164                           ;incstack = 0
 14165  015AF4  0100               	movlb	0	; () banked
 14166  015AF6  EE20 F002          	lfsr	2,2
 14167  015AFA  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 14168  015AFC  26D9               	addwf	fsr2l,f,c
 14169  015AFE  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 14170  015B00  22DA               	addwfc	fsr2h,f,c
 14171  015B02  50DF               	movf	indf2,w,c
 14172  015B04  A4D8               	btfss	status,2,c
 14173  015B06  D007               	goto	l673
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 14177  015B08  C1AF  FFD9         	movff	_PortC+4,fsr2l
 14178  015B0C  C1B0  FFDA         	movff	_PortC+5,fsr2h
 14179  015B10  0101               	movlb	1	; () banked
 14180  015B12  84DF               	bsf	indf2,2,c
 14181  015B14  0012               	return	
 14182  015B16                     l673:
 14183                           
 14184                           ;SPI.c: 223: else
 14185                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 14186                           
 14187                           ; BSR set to: 1
 14188  015B16  C19B  FFD9         	movff	_PortD+4,fsr2l
 14189  015B1A  C19C  FFDA         	movff	_PortD+5,fsr2h
 14190  015B1E  0101               	movlb	1	; () banked
 14191  015B20  8EDF               	bsf	indf2,7,c
 14192  015B22  0012               	return	
 14193  015B24                     __end_of_SPI_DCS:
 14194                           	opt stack 0
 14195                           tosu	equ	0xFFF
 14196                           tosh	equ	0xFFE
 14197                           tosl	equ	0xFFD
 14198                           pclath	equ	0xFFA
 14199                           tblptru	equ	0xFF8
 14200                           tblptrh	equ	0xFF7
 14201                           tblptrl	equ	0xFF6
 14202                           tablat	equ	0xFF5
 14203                           prodh	equ	0xFF4
 14204                           prodl	equ	0xFF3
 14205                           intcon	equ	0xFF2
 14206                           postinc0	equ	0xFEE
 14207                           wreg	equ	0xFE8
 14208                           indf1	equ	0xFE7
 14209                           postdec1	equ	0xFE5
 14210                           fsr1h	equ	0xFE2
 14211                           fsr1l	equ	0xFE1
 14212                           indf2	equ	0xFDF
 14213                           postinc2	equ	0xFDE
 14214                           postdec2	equ	0xFDD
 14215                           plusw2	equ	0xFDB
 14216                           fsr2h	equ	0xFDA
 14217                           fsr2l	equ	0xFD9
 14218                           status	equ	0xFD8
 14219                           
 14220 ;; *************** function _Get_Sensor_State *****************
 14221 ;; Defined at:
 14222 ;;		line 164 in file "main.c"
 14223 ;; Parameters:    Size  Location     Type
 14224 ;;		None
 14225 ;; Auto vars:     Size  Location     Type
 14226 ;;		None
 14227 ;; Return value:  Size  Location     Type
 14228 ;;                  1    wreg      void 
 14229 ;; Registers used:
 14230 ;;		wreg, status,2, status,0, cstack
 14231 ;; Tracked objects:
 14232 ;;		On entry : 0/0
 14233 ;;		On exit  : 0/0
 14234 ;;		Unchanged: 0/0
 14235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14240 ;;Total ram usage:        0 bytes
 14241 ;; Hardware stack levels used:    1
 14242 ;; Hardware stack levels required when called:    8
 14243 ;; This function calls:
 14244 ;;		_eusartRec
 14245 ;;		_eusartSend
 14246 ;; This function is called by:
 14247 ;;		_main
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           	psect	text71
 14252  015EC4                     __ptext71:
 14253                           	opt stack 0
 14254  015EC4                     _Get_Sensor_State:
 14255                           	opt stack 22
 14256                           
 14257                           ;main.c: 165: eusartSend(142);
 14258                           
 14259                           ; BSR set to: 1
 14260                           ;incstack = 0
 14261  015EC4  0E8E               	movlw	142
 14262  015EC6  EC09  F0B0         	call	_eusartSend
 14263                           
 14264                           ;main.c: 166: eusartSend(7);
 14265  015ECA  0E07               	movlw	7
 14266  015ECC  EC09  F0B0         	call	_eusartSend
 14267                           
 14268                           ;main.c: 167: BumpSensor = (eusartRec() & 0b00000011);
 14269  015ED0  EC37  F0B0         	call	_eusartRec	;wreg free
 14270  015ED4  0B03               	andlw	3
 14271  015ED6  0100               	movlb	0	; () banked
 14272  015ED8  6FF1               	movwf	_BumpSensor& (0+255),b
 14273                           
 14274                           ; BSR set to: 0
 14275  015EDA  0012               	return		;funcret
 14276  015EDC                     __end_of_Get_Sensor_State:
 14277                           	opt stack 0
 14278                           tosu	equ	0xFFF
 14279                           tosh	equ	0xFFE
 14280                           tosl	equ	0xFFD
 14281                           pclath	equ	0xFFA
 14282                           tblptru	equ	0xFF8
 14283                           tblptrh	equ	0xFF7
 14284                           tblptrl	equ	0xFF6
 14285                           tablat	equ	0xFF5
 14286                           prodh	equ	0xFF4
 14287                           prodl	equ	0xFF3
 14288                           intcon	equ	0xFF2
 14289                           postinc0	equ	0xFEE
 14290                           wreg	equ	0xFE8
 14291                           indf1	equ	0xFE7
 14292                           postdec1	equ	0xFE5
 14293                           fsr1h	equ	0xFE2
 14294                           fsr1l	equ	0xFE1
 14295                           indf2	equ	0xFDF
 14296                           postinc2	equ	0xFDE
 14297                           postdec2	equ	0xFDD
 14298                           plusw2	equ	0xFDB
 14299                           fsr2h	equ	0xFDA
 14300                           fsr2l	equ	0xFD9
 14301                           status	equ	0xFD8
 14302                           
 14303 ;; *************** function _eusartRec *****************
 14304 ;; Defined at:
 14305 ;;		line 152 in file "main.c"
 14306 ;; Parameters:    Size  Location     Type
 14307 ;;		None
 14308 ;; Auto vars:     Size  Location     Type
 14309 ;;		None
 14310 ;; Return value:  Size  Location     Type
 14311 ;;                  1    wreg      unsigned char 
 14312 ;; Registers used:
 14313 ;;		wreg, status,2
 14314 ;; Tracked objects:
 14315 ;;		On entry : 0/0
 14316 ;;		On exit  : 0/0
 14317 ;;		Unchanged: 0/0
 14318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14323 ;;Total ram usage:        0 bytes
 14324 ;; Hardware stack levels used:    1
 14325 ;; Hardware stack levels required when called:    7
 14326 ;; This function calls:
 14327 ;;		Nothing
 14328 ;; This function is called by:
 14329 ;;		_Get_Sensor_State
 14330 ;;		_UpdateDistance
 14331 ;;		_Turn
 14332 ;;		_Get_VirtualWall_State
 14333 ;; This function uses a non-reentrant model
 14334 ;;
 14335                           
 14336                           	psect	text72
 14337  01606E                     __ptext72:
 14338                           	opt stack 0
 14339  01606E                     _eusartRec:
 14340                           	opt stack 22
 14341                           
 14342                           ;main.c: 153: while (!PIR1bits.RC1IF) {}
 14343                           
 14344                           ; BSR set to: 0
 14345                           ;incstack = 0
 14346  01606E  AA9E               	btfss	3998,5,c	;volatile
 14347  016070  D7FE               	goto	_eusartRec
 14348                           
 14349                           ;main.c: 154: return RCREG1;
 14350  016072  50AF               	movf	4015,w,c	;volatile
 14351  016074  0012               	return	
 14352  016076                     __end_of_eusartRec:
 14353                           	opt stack 0
 14354                           tosu	equ	0xFFF
 14355                           tosh	equ	0xFFE
 14356                           tosl	equ	0xFFD
 14357                           pclath	equ	0xFFA
 14358                           tblptru	equ	0xFF8
 14359                           tblptrh	equ	0xFF7
 14360                           tblptrl	equ	0xFF6
 14361                           tablat	equ	0xFF5
 14362                           prodh	equ	0xFF4
 14363                           prodl	equ	0xFF3
 14364                           intcon	equ	0xFF2
 14365                           postinc0	equ	0xFEE
 14366                           wreg	equ	0xFE8
 14367                           indf1	equ	0xFE7
 14368                           postdec1	equ	0xFE5
 14369                           fsr1h	equ	0xFE2
 14370                           fsr1l	equ	0xFE1
 14371                           indf2	equ	0xFDF
 14372                           postinc2	equ	0xFDE
 14373                           postdec2	equ	0xFDD
 14374                           plusw2	equ	0xFDB
 14375                           fsr2h	equ	0xFDA
 14376                           fsr2l	equ	0xFD9
 14377                           status	equ	0xFD8
 14378                           
 14379 ;; *************** function _FunctInitButton *****************
 14380 ;; Defined at:
 14381 ;;		line 16 in file "Functions.c"
 14382 ;; Parameters:    Size  Location     Type
 14383 ;;		None
 14384 ;; Auto vars:     Size  Location     Type
 14385 ;;		None
 14386 ;; Return value:  Size  Location     Type
 14387 ;;                  1    wreg      void 
 14388 ;; Registers used:
 14389 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14390 ;; Tracked objects:
 14391 ;;		On entry : 0/0
 14392 ;;		On exit  : 0/0
 14393 ;;		Unchanged: 0/0
 14394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14399 ;;Total ram usage:        0 bytes
 14400 ;; Hardware stack levels used:    1
 14401 ;; Hardware stack levels required when called:   16
 14402 ;; This function calls:
 14403 ;;		_Button_Init
 14404 ;; This function is called by:
 14405 ;;		_main
 14406 ;; This function uses a non-reentrant model
 14407 ;;
 14408                           
 14409                           	psect	text73
 14410  014BF8                     __ptext73:
 14411                           	opt stack 0
 14412  014BF8                     _FunctInitButton:
 14413                           	opt stack 14
 14414                           
 14415                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 14416                           
 14417                           ;incstack = 0
 14418  014BF8  0EDD               	movlw	low _TestButton
 14419  014BFA  0100               	movlb	0	; () banked
 14420  014BFC  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14421  014BFE  0E02               	movlw	high _TestButton
 14422  014C00  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14423  014C02  0E00               	movlw	0
 14424  014C04  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14425  014C06  0E02               	movlw	2
 14426  014C08  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14427  014C0A  0EF4               	movlw	low _MXK_InitTestButton
 14428  014C0C  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14429  014C0E  0E5E               	movlw	high _MXK_InitTestButton
 14430  014C10  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14431  014C12  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 14432  014C14  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14433  014C16  0EB0               	movlw	low _MXK_TestButton
 14434  014C18  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14435  014C1A  0E5F               	movlw	high _MXK_TestButton
 14436  014C1C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14437  014C1E  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 14438  014C20  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14439  014C22  0E5C               	movlw	low _Event_TestButton
 14440  014C24  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14441  014C26  0E5A               	movlw	high _Event_TestButton
 14442  014C28  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14443  014C2A  0E01               	movlw	low (_Event_TestButton shr (0+16))
 14444  014C2C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14445  014C2E  EC17  F0A0         	call	_Button_Init	;wreg free
 14446                           
 14447                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 14448  014C32  0ED3               	movlw	low _DIPSwitch
 14449  014C34  0100               	movlb	0	; () banked
 14450  014C36  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14451  014C38  0E02               	movlw	high _DIPSwitch
 14452  014C3A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14453  014C3C  0E00               	movlw	0
 14454  014C3E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14455  014C40  0E02               	movlw	2
 14456  014C42  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14457  014C44  0EDC               	movlw	low _MXK_InitDIPSwitch
 14458  014C46  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14459  014C48  0E5E               	movlw	high _MXK_InitDIPSwitch
 14460  014C4A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14461  014C4C  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 14462  014C4E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14463  014C50  0E38               	movlw	low _MXK_DIPSwitch
 14464  014C52  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14465  014C54  0E5F               	movlw	high _MXK_DIPSwitch
 14466  014C56  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14467  014C58  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 14468  014C5A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14469  014C5C  0EDA               	movlw	low _Event_DIPSwitch
 14470  014C5E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14471  014C60  0E5C               	movlw	high _Event_DIPSwitch
 14472  014C62  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14473  014C64  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 14474  014C66  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14475  014C68  EC17  F0A0         	call	_Button_Init	;wreg free
 14476  014C6C  0012               	return		;funcret
 14477  014C6E                     __end_of_FunctInitButton:
 14478                           	opt stack 0
 14479                           tosu	equ	0xFFF
 14480                           tosh	equ	0xFFE
 14481                           tosl	equ	0xFFD
 14482                           pclath	equ	0xFFA
 14483                           tblptru	equ	0xFF8
 14484                           tblptrh	equ	0xFF7
 14485                           tblptrl	equ	0xFF6
 14486                           tablat	equ	0xFF5
 14487                           prodh	equ	0xFF4
 14488                           prodl	equ	0xFF3
 14489                           intcon	equ	0xFF2
 14490                           postinc0	equ	0xFEE
 14491                           wreg	equ	0xFE8
 14492                           indf1	equ	0xFE7
 14493                           postdec1	equ	0xFE5
 14494                           fsr1h	equ	0xFE2
 14495                           fsr1l	equ	0xFE1
 14496                           indf2	equ	0xFDF
 14497                           postinc2	equ	0xFDE
 14498                           postdec2	equ	0xFDD
 14499                           plusw2	equ	0xFDB
 14500                           fsr2h	equ	0xFDA
 14501                           fsr2l	equ	0xFD9
 14502                           status	equ	0xFD8
 14503                           
 14504 ;; *************** function _Button_Init *****************
 14505 ;; Defined at:
 14506 ;;		line 18 in file "Library/Button.c"
 14507 ;; Parameters:    Size  Location     Type
 14508 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 14509 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 14510 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 14511 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 14512 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 14513 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 14514 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 14515 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 14516 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 14517 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 14518 ;; Auto vars:     Size  Location     Type
 14519 ;;		None
 14520 ;; Return value:  Size  Location     Type
 14521 ;;                  1    wreg      void 
 14522 ;; Registers used:
 14523 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14524 ;; Tracked objects:
 14525 ;;		On entry : 0/0
 14526 ;;		On exit  : 0/0
 14527 ;;		Unchanged: 0/0
 14528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14529 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14532 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14533 ;;Total ram usage:       13 bytes
 14534 ;; Hardware stack levels used:    1
 14535 ;; Hardware stack levels required when called:   15
 14536 ;; This function calls:
 14537 ;;		_HMI_InitButtons
 14538 ;;		_MXK_InitDIPSwitch
 14539 ;;		_MXK_InitTestButton
 14540 ;; This function is called by:
 14541 ;;		_HMI_Init
 14542 ;;		_FunctInitButton
 14543 ;; This function uses a non-reentrant model
 14544 ;;
 14545                           
 14546                           	psect	text74
 14547  01402E                     __ptext74:
 14548                           	opt stack 0
 14549  01402E                     _Button_Init:
 14550                           	opt stack 14
 14551                           
 14552                           ;Button.c: 21: if(pInput==(void*)0)
 14553                           
 14554                           ;incstack = 0
 14555  01402E  0100               	movlb	0	; () banked
 14556  014030  519B               	movf	Button_Init@pInput& (0+255),w,b
 14557  014032  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 14558  014034  B4D8               	btfsc	status,2,c
 14559  014036  0012               	return	
 14560                           
 14561                           ; BSR set to: 0
 14562                           ;Button.c: 23: if(pInitIO==(void*)0)
 14563                           
 14564                           ; BSR set to: 0
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;Button.c: 22: return;
 14568  014038  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14569  01403A  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 14570  01403C  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 14571  01403E  B4D8               	btfsc	status,2,c
 14572  014040  0012               	return	
 14573                           
 14574                           ; BSR set to: 0
 14575                           ;Button.c: 25: if(pGetState==(void*)0)
 14576                           
 14577                           ; BSR set to: 0
 14578                           
 14579                           ; BSR set to: 0
 14580                           ;Button.c: 24: return;
 14581  014042  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 14582  014044  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 14583  014046  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 14584  014048  B4D8               	btfsc	status,2,c
 14585  01404A  0012               	return	
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;Button.c: 27: if(pFunction==(void*)0)
 14589                           
 14590                           ; BSR set to: 0
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;Button.c: 26: return;
 14594  01404C  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 14595  01404E  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 14596  014050  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 14597  014052  B4D8               	btfsc	status,2,c
 14598  014054  0012               	return	
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;Button.c: 30: if(pThreshold == 0)
 14602                           
 14603                           ; BSR set to: 0
 14604                           
 14605                           ; BSR set to: 0
 14606                           ;Button.c: 28: return;
 14607  014056  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 14608  014058  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 14609  01405A  A4D8               	btfss	status,2,c
 14610  01405C  D004               	goto	l8
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;Button.c: 31: pThreshold = 1;
 14614  01405E  0E00               	movlw	0
 14615  014060  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14616  014062  0E01               	movlw	1
 14617  014064  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14618  014066                     l8:
 14619                           
 14620                           ; BSR set to: 0
 14621                           ;Button.c: 34: pInput->mState = 0;
 14622                           
 14623                           ; BSR set to: 0
 14624  014066  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 14625  01406A  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 14626  01406E  0E00               	movlw	0
 14627  014070  6EDF               	movwf	indf2,c
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;Button.c: 35: pInput->mCount = 0;
 14631  014072  EE20 F001          	lfsr	2,1
 14632  014076  519B               	movf	Button_Init@pInput& (0+255),w,b
 14633  014078  26D9               	addwf	fsr2l,f,c
 14634  01407A  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14635  01407C  22DA               	addwfc	fsr2h,f,c
 14636  01407E  0E00               	movlw	0
 14637  014080  6EDF               	movwf	indf2,c
 14638                           
 14639                           ; BSR set to: 0
 14640                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 14641  014082  EE20 F002          	lfsr	2,2
 14642  014086  519B               	movf	Button_Init@pInput& (0+255),w,b
 14643  014088  26D9               	addwf	fsr2l,f,c
 14644  01408A  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14645  01408C  22DA               	addwfc	fsr2h,f,c
 14646  01408E  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 14647  014092  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 14648                           
 14649                           ; BSR set to: 0
 14650                           ;Button.c: 37: pInput->mFunction = pFunction;
 14651  014096  EE20 F004          	lfsr	2,4
 14652  01409A  519B               	movf	Button_Init@pInput& (0+255),w,b
 14653  01409C  26D9               	addwf	fsr2l,f,c
 14654  01409E  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14655  0140A0  22DA               	addwfc	fsr2h,f,c
 14656  0140A2  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 14657  0140A6  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 14658  0140AA  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;Button.c: 38: pInput->mGetState = pGetState;
 14662  0140AE  EE20 F007          	lfsr	2,7
 14663  0140B2  519B               	movf	Button_Init@pInput& (0+255),w,b
 14664  0140B4  26D9               	addwf	fsr2l,f,c
 14665  0140B6  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14666  0140B8  22DA               	addwfc	fsr2h,f,c
 14667  0140BA  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 14668  0140BE  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 14669  0140C2  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 14670                           
 14671                           ; BSR set to: 0
 14672                           ;Button.c: 41: pInitIO();
 14673  0140C6  D801               	call	u11908
 14674  0140C8  0012               	return	
 14675  0140CA                     u11908:
 14676  0140CA  0005               	push	
 14677  0140CC  6EFA               	movwf	pclath,c
 14678  0140CE  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14679  0140D0  6EFD               	movwf	tosl,c
 14680  0140D2  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 14681  0140D4  6EFE               	movwf	tosh,c
 14682  0140D6  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 14683  0140D8  6EFF               	movwf	tosu,c
 14684  0140DA  50FA               	movf	pclath,w,c
 14685  0140DC  0012               	return		;indir
 14686  0140DE                     __end_of_Button_Init:
 14687                           	opt stack 0
 14688                           tosu	equ	0xFFF
 14689                           tosh	equ	0xFFE
 14690                           tosl	equ	0xFFD
 14691                           pclath	equ	0xFFA
 14692                           tblptru	equ	0xFF8
 14693                           tblptrh	equ	0xFF7
 14694                           tblptrl	equ	0xFF6
 14695                           tablat	equ	0xFF5
 14696                           prodh	equ	0xFF4
 14697                           prodl	equ	0xFF3
 14698                           intcon	equ	0xFF2
 14699                           postinc0	equ	0xFEE
 14700                           wreg	equ	0xFE8
 14701                           indf1	equ	0xFE7
 14702                           postdec1	equ	0xFE5
 14703                           fsr1h	equ	0xFE2
 14704                           fsr1l	equ	0xFE1
 14705                           indf2	equ	0xFDF
 14706                           postinc2	equ	0xFDE
 14707                           postdec2	equ	0xFDD
 14708                           plusw2	equ	0xFDB
 14709                           fsr2h	equ	0xFDA
 14710                           fsr2l	equ	0xFD9
 14711                           status	equ	0xFD8
 14712                           
 14713 ;; *************** function _MXK_InitDIPSwitch *****************
 14714 ;; Defined at:
 14715 ;;		line 20 in file "Library/MXK.c"
 14716 ;; Parameters:    Size  Location     Type
 14717 ;;		None
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;		None
 14720 ;; Return value:  Size  Location     Type
 14721 ;;                  1    wreg      void 
 14722 ;; Registers used:
 14723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14724 ;; Tracked objects:
 14725 ;;		On entry : 0/0
 14726 ;;		On exit  : 0/0
 14727 ;;		Unchanged: 0/0
 14728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14733 ;;Total ram usage:        0 bytes
 14734 ;; Hardware stack levels used:    1
 14735 ;; Hardware stack levels required when called:   14
 14736 ;; This function calls:
 14737 ;;		_Port_SetQuadType
 14738 ;; This function is called by:
 14739 ;;		_FunctInitButton
 14740 ;;		_Button_Init
 14741 ;; This function uses a non-reentrant model
 14742 ;;
 14743                           
 14744                           	psect	text75
 14745  015EDC                     __ptext75:
 14746                           	opt stack 0
 14747  015EDC                     _MXK_InitDIPSwitch:
 14748                           	opt stack 14
 14749                           
 14750                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 14751                           
 14752                           ;incstack = 0
 14753  015EDC  0E97               	movlw	low _PortD
 14754  015EDE  0100               	movlb	0	; () banked
 14755  015EE0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 14756  015EE2  0E01               	movlw	high _PortD
 14757  015EE4  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14758  015EE6  0E00               	movlw	0
 14759  015EE8  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14760  015EEA  0E00               	movlw	0
 14761  015EEC  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 14762  015EEE  EC94  F08F         	call	_Port_SetQuadType	;wreg free
 14763  015EF2  0012               	return		;funcret
 14764  015EF4                     __end_of_MXK_InitDIPSwitch:
 14765                           	opt stack 0
 14766                           tosu	equ	0xFFF
 14767                           tosh	equ	0xFFE
 14768                           tosl	equ	0xFFD
 14769                           pclath	equ	0xFFA
 14770                           tblptru	equ	0xFF8
 14771                           tblptrh	equ	0xFF7
 14772                           tblptrl	equ	0xFF6
 14773                           tablat	equ	0xFF5
 14774                           prodh	equ	0xFF4
 14775                           prodl	equ	0xFF3
 14776                           intcon	equ	0xFF2
 14777                           postinc0	equ	0xFEE
 14778                           wreg	equ	0xFE8
 14779                           indf1	equ	0xFE7
 14780                           postdec1	equ	0xFE5
 14781                           fsr1h	equ	0xFE2
 14782                           fsr1l	equ	0xFE1
 14783                           indf2	equ	0xFDF
 14784                           postinc2	equ	0xFDE
 14785                           postdec2	equ	0xFDD
 14786                           plusw2	equ	0xFDB
 14787                           fsr2h	equ	0xFDA
 14788                           fsr2l	equ	0xFD9
 14789                           status	equ	0xFD8
 14790                           
 14791 ;; *************** function _HMI_InitButtons *****************
 14792 ;; Defined at:
 14793 ;;		line 21 in file "HMI.c"
 14794 ;; Parameters:    Size  Location     Type
 14795 ;;		None
 14796 ;; Auto vars:     Size  Location     Type
 14797 ;;		None
 14798 ;; Return value:  Size  Location     Type
 14799 ;;                  1    wreg      void 
 14800 ;; Registers used:
 14801 ;;		wreg, status,2
 14802 ;; Tracked objects:
 14803 ;;		On entry : 0/0
 14804 ;;		On exit  : 0/0
 14805 ;;		Unchanged: 0/0
 14806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;Total ram usage:        0 bytes
 14812 ;; Hardware stack levels used:    1
 14813 ;; Hardware stack levels required when called:    7
 14814 ;; This function calls:
 14815 ;;		Nothing
 14816 ;; This function is called by:
 14817 ;;		_HMI_Init
 14818 ;;		_Button_Init
 14819 ;; This function uses a non-reentrant model
 14820 ;;
 14821                           
 14822                           	psect	text76
 14823  0160A2                     __ptext76:
 14824                           	opt stack 0
 14825  0160A2                     _HMI_InitButtons:
 14826                           	opt stack 21
 14827                           
 14828                           ;HMI.c: 23: TRISE = 0xFC;
 14829                           
 14830                           ;incstack = 0
 14831  0160A2  0EFC               	movlw	252
 14832  0160A4  6E96               	movwf	3990,c	;volatile
 14833  0160A6  0012               	return		;funcret
 14834  0160A8                     __end_of_HMI_InitButtons:
 14835                           	opt stack 0
 14836                           tosu	equ	0xFFF
 14837                           tosh	equ	0xFFE
 14838                           tosl	equ	0xFFD
 14839                           pclath	equ	0xFFA
 14840                           tblptru	equ	0xFF8
 14841                           tblptrh	equ	0xFF7
 14842                           tblptrl	equ	0xFF6
 14843                           tablat	equ	0xFF5
 14844                           prodh	equ	0xFF4
 14845                           prodl	equ	0xFF3
 14846                           intcon	equ	0xFF2
 14847                           postinc0	equ	0xFEE
 14848                           wreg	equ	0xFE8
 14849                           indf1	equ	0xFE7
 14850                           postdec1	equ	0xFE5
 14851                           fsr1h	equ	0xFE2
 14852                           fsr1l	equ	0xFE1
 14853                           indf2	equ	0xFDF
 14854                           postinc2	equ	0xFDE
 14855                           postdec2	equ	0xFDD
 14856                           plusw2	equ	0xFDB
 14857                           fsr2h	equ	0xFDA
 14858                           fsr2l	equ	0xFD9
 14859                           status	equ	0xFD8
 14860                           
 14861 ;; *************** function _MXK_InitTestButton *****************
 14862 ;; Defined at:
 14863 ;;		line 10 in file "Library/MXK.c"
 14864 ;; Parameters:    Size  Location     Type
 14865 ;;		None
 14866 ;; Auto vars:     Size  Location     Type
 14867 ;;		None
 14868 ;; Return value:  Size  Location     Type
 14869 ;;                  1    wreg      void 
 14870 ;; Registers used:
 14871 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14872 ;; Tracked objects:
 14873 ;;		On entry : 0/0
 14874 ;;		On exit  : 0/0
 14875 ;;		Unchanged: 0/0
 14876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14881 ;;Total ram usage:        0 bytes
 14882 ;; Hardware stack levels used:    1
 14883 ;; Hardware stack levels required when called:   12
 14884 ;; This function calls:
 14885 ;;		_Port_SetPinType
 14886 ;; This function is called by:
 14887 ;;		_FunctInitButton
 14888 ;;		_Button_Init
 14889 ;; This function uses a non-reentrant model
 14890 ;;
 14891                           
 14892                           	psect	text77
 14893  015EF4                     __ptext77:
 14894                           	opt stack 0
 14895  015EF4                     _MXK_InitTestButton:
 14896                           	opt stack 16
 14897                           
 14898                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 14899                           
 14900                           ;incstack = 0
 14901  015EF4  0EA1               	movlw	low _PortB
 14902  015EF6  0100               	movlb	0	; () banked
 14903  015EF8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14904  015EFA  0E01               	movlw	high _PortB
 14905  015EFC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14906  015EFE  0E04               	movlw	4
 14907  015F00  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14908  015F02  0E00               	movlw	0
 14909  015F04  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14910  015F06  EC4A  F093         	call	_Port_SetPinType	;wreg free
 14911  015F0A  0012               	return		;funcret
 14912  015F0C                     __end_of_MXK_InitTestButton:
 14913                           	opt stack 0
 14914                           tosu	equ	0xFFF
 14915                           tosh	equ	0xFFE
 14916                           tosl	equ	0xFFD
 14917                           pclath	equ	0xFFA
 14918                           tblptru	equ	0xFF8
 14919                           tblptrh	equ	0xFF7
 14920                           tblptrl	equ	0xFF6
 14921                           tablat	equ	0xFF5
 14922                           prodh	equ	0xFF4
 14923                           prodl	equ	0xFF3
 14924                           intcon	equ	0xFF2
 14925                           postinc0	equ	0xFEE
 14926                           wreg	equ	0xFE8
 14927                           indf1	equ	0xFE7
 14928                           postdec1	equ	0xFE5
 14929                           fsr1h	equ	0xFE2
 14930                           fsr1l	equ	0xFE1
 14931                           indf2	equ	0xFDF
 14932                           postinc2	equ	0xFDE
 14933                           postdec2	equ	0xFDD
 14934                           plusw2	equ	0xFDB
 14935                           fsr2h	equ	0xFDA
 14936                           fsr2l	equ	0xFD9
 14937                           status	equ	0xFD8
 14938                           
 14939 ;; *************** function _Port_SetPinType *****************
 14940 ;; Defined at:
 14941 ;;		line 189 in file "Library/Port.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 14944 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14945 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14946 ;;  pPin            1   40[BANK0 ] enum E6750
 14947 ;;  pType           1   41[BANK0 ] enum E6795
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 14950 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 14951 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 14952 ;;  Output          1   42[BANK0 ] enum E6475
 14953 ;; Return value:  Size  Location     Type
 14954 ;;                  1    wreg      enum E6475
 14955 ;; Registers used:
 14956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14957 ;; Tracked objects:
 14958 ;;		On entry : 0/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14962 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14963 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14965 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14966 ;;Total ram usage:        7 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:   11
 14969 ;; This function calls:
 14970 ;;		_Byte_SetBit
 14971 ;;		_PortProperty_Valid
 14972 ;;		_Word_SetPair
 14973 ;; This function is called by:
 14974 ;;		_Configure_GPIOs
 14975 ;;		_LED_Init
 14976 ;;		_Port_Init
 14977 ;;		_SPI_Init
 14978 ;;		_MXK_InitTestButton
 14979 ;;		_MXK_Init
 14980 ;;		_I2C_Init
 14981 ;;		_Motor_Init
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           	psect	text78
 14986  012694                     __ptext78:
 14987                           	opt stack 0
 14988  012694                     _Port_SetPinType:
 14989                           	opt stack 18
 14990                           
 14991                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 14992                           
 14993                           ;incstack = 0
 14994  012694  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 14995  012698  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 14996  01269C  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 14997  0126A0  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 14998                           
 14999                           ;Port.c: 192: ePinError Output = ePinErrorState;
 15000  0126A4  0E05               	movlw	5
 15001  0126A6  0100               	movlb	0	; () banked
 15002  0126A8  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15003                           
 15004                           ;Port.c: 193: switch (pType)
 15005  0126AA  D0A7               	goto	l412
 15006  0126AC                     
 15007                           ; BSR set to: 0
 15008                           ;Port.c: 197: {
 15009                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15010                           
 15011                           ; BSR set to: 0
 15012  0126AC  EE20 F002          	lfsr	2,2
 15013  0126B0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15014  0126B2  26D9               	addwf	fsr2l,f,c
 15015  0126B4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15016  0126B6  22DA               	addwfc	fsr2h,f,c
 15017  0126B8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15018  0126BC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15019  0126C0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15020  0126C4  0E01               	movlw	1
 15021  0126C6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15022  0126C8  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 15023                           
 15024                           ;Port.c: 203: break;
 15025  0126CC  D0A4               	goto	l414
 15026  0126CE                     
 15027                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 15028  0126CE  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15029  0126D2  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15030  0126D6  0E01               	movlw	1
 15031  0126D8  0100               	movlb	0	; () banked
 15032  0126DA  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15033  0126DC  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15034  0126E0  ECB2  F0A7         	call	_PortProperty_Valid	;wreg free
 15035  0126E4  0100               	movlb	0	; () banked
 15036  0126E6  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15037  0126E8  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15038  0126EA  A4D8               	btfss	status,2,c
 15039  0126EC  0012               	return	
 15040                           
 15041                           ; BSR set to: 0
 15042                           ;Port.c: 208: {
 15043                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15044  0126EE  EE20 F002          	lfsr	2,2
 15045  0126F2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15046  0126F4  26D9               	addwf	fsr2l,f,c
 15047  0126F6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15048  0126F8  22DA               	addwfc	fsr2h,f,c
 15049  0126FA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15050  0126FE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15051  012702  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15052  012706  0E00               	movlw	0
 15053  012708  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15054  01270A  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 15055                           
 15056                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15057  01270E  0100               	movlb	0	; () banked
 15058  012710  EE20 F004          	lfsr	2,4
 15059  012714  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15060  012716  26D9               	addwf	fsr2l,f,c
 15061  012718  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15062  01271A  22DA               	addwfc	fsr2h,f,c
 15063  01271C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15064  012720  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15065  012724  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15066  012728  0E00               	movlw	0
 15067  01272A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15068  01272C  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 15069                           
 15070                           ;Port.c: 214: break;
 15071  012730  D072               	goto	l414
 15072  012732                     
 15073                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 15074                           
 15075                           ;Port.c: 218: case eTypeOutputOpenSource:
 15076  012732  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15077  012736  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15078  01273A  0E02               	movlw	2
 15079  01273C  0100               	movlb	0	; () banked
 15080  01273E  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15081  012740  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15082  012744  ECB2  F0A7         	call	_PortProperty_Valid	;wreg free
 15083  012748  0100               	movlb	0	; () banked
 15084  01274A  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15085  01274C  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15086  01274E  A4D8               	btfss	status,2,c
 15087  012750  0012               	return	
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;Port.c: 220: {
 15091                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15092  012752  EE20 F002          	lfsr	2,2
 15093  012756  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15094  012758  26D9               	addwf	fsr2l,f,c
 15095  01275A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15096  01275C  22DA               	addwfc	fsr2h,f,c
 15097  01275E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15098  012762  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15099  012766  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15100  01276A  0E01               	movlw	1
 15101  01276C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15102  01276E  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 15103                           
 15104                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 15105  012772  0100               	movlb	0	; () banked
 15106  012774  EE20 F004          	lfsr	2,4
 15107  012778  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15108  01277A  26D9               	addwf	fsr2l,f,c
 15109  01277C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15110  01277E  22DA               	addwfc	fsr2h,f,c
 15111  012780  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15112  012784  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15113  012788  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15114  01278C  0E01               	movlw	1
 15115  01278E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15116  012790  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 15117                           
 15118                           ;Port.c: 226: break;
 15119  012794  D040               	goto	l414
 15120  012796                     
 15121                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 15122                           
 15123                           ;Port.c: 230: case eTypeOutputPushPull:
 15124  012796  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15125  01279A  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15126  01279E  0E00               	movlw	0
 15127  0127A0  0100               	movlb	0	; () banked
 15128  0127A2  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15129  0127A4  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15130  0127A8  ECB2  F0A7         	call	_PortProperty_Valid	;wreg free
 15131  0127AC  0100               	movlb	0	; () banked
 15132  0127AE  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15133  0127B0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15134  0127B2  A4D8               	btfss	status,2,c
 15135  0127B4  0012               	return	
 15136                           
 15137                           ; BSR set to: 0
 15138                           ;Port.c: 232: {
 15139                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15140  0127B6  EE20 F002          	lfsr	2,2
 15141  0127BA  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15142  0127BC  26D9               	addwf	fsr2l,f,c
 15143  0127BE  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15144  0127C0  22DA               	addwfc	fsr2h,f,c
 15145  0127C2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15146  0127C6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15147  0127CA  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15148  0127CE  0E00               	movlw	0
 15149  0127D0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15150  0127D2  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 15151                           
 15152                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15153  0127D6  0100               	movlb	0	; () banked
 15154  0127D8  EE20 F004          	lfsr	2,4
 15155  0127DC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15156  0127DE  26D9               	addwf	fsr2l,f,c
 15157  0127E0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15158  0127E2  22DA               	addwfc	fsr2h,f,c
 15159  0127E4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15160  0127E8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15161  0127EC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15162  0127F0  0E00               	movlw	0
 15163  0127F2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15164  0127F4  ECA1  F0A9         	call	_Byte_SetBit	;wreg free
 15165                           
 15166                           ;Port.c: 239: }
 15167                           
 15168                           ;Port.c: 238: break;
 15169  0127F8  D00E               	goto	l414
 15170  0127FA                     l412:
 15171  0127FA  0100               	movlb	0	; () banked
 15172  0127FC  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 15173                           
 15174                           ; Switch size 1, requested type "space"
 15175                           ; Number of cases is 4, Range of values is 0 to 3
 15176                           ; switch strategies available:
 15177                           ; Name         Instructions Cycles
 15178                           ; simple_byte           13     7 (average)
 15179                           ;	Chosen strategy is simple_byte
 15180  0127FE  0A00               	xorlw	0	; case 0
 15181  012800  B4D8               	btfsc	status,2,c
 15182  012802  D754               	goto	l413
 15183  012804  0A01               	xorlw	1	; case 1
 15184  012806  B4D8               	btfsc	status,2,c
 15185  012808  D762               	goto	l415
 15186  01280A  0A03               	xorlw	3	; case 2
 15187  01280C  B4D8               	btfsc	status,2,c
 15188  01280E  D791               	goto	l417
 15189  012810  0A01               	xorlw	1	; case 3
 15190  012812  B4D8               	btfsc	status,2,c
 15191  012814  D7C0               	goto	l421
 15192  012816                     l414:
 15193                           
 15194                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 15195                           
 15196                           ; BSR set to: 0
 15197  012816  0E08               	movlw	8
 15198  012818  0100               	movlb	0	; () banked
 15199  01281A  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 15200  01281C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15201  01281E  0E00               	movlw	0
 15202  012820  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 15203  012822  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15204  012824  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 15205  012828  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 15206  01282C  ECA5  F0AC         	call	_Word_SetPair	;wreg free
 15207  012830  0012               	return	
 15208  012832                     __end_of_Port_SetPinType:
 15209                           	opt stack 0
 15210                           tosu	equ	0xFFF
 15211                           tosh	equ	0xFFE
 15212                           tosl	equ	0xFFD
 15213                           pclath	equ	0xFFA
 15214                           tblptru	equ	0xFF8
 15215                           tblptrh	equ	0xFF7
 15216                           tblptrl	equ	0xFF6
 15217                           tablat	equ	0xFF5
 15218                           prodh	equ	0xFF4
 15219                           prodl	equ	0xFF3
 15220                           intcon	equ	0xFF2
 15221                           postinc0	equ	0xFEE
 15222                           wreg	equ	0xFE8
 15223                           indf1	equ	0xFE7
 15224                           postdec1	equ	0xFE5
 15225                           fsr1h	equ	0xFE2
 15226                           fsr1l	equ	0xFE1
 15227                           indf2	equ	0xFDF
 15228                           postinc2	equ	0xFDE
 15229                           postdec2	equ	0xFDD
 15230                           plusw2	equ	0xFDB
 15231                           fsr2h	equ	0xFDA
 15232                           fsr2l	equ	0xFD9
 15233                           status	equ	0xFD8
 15234                           
 15235 ;; *************** function _Byte_SetBit *****************
 15236 ;; Defined at:
 15237 ;;		line 32 in file "Library/Types.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15240 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 15241 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 15242 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15243 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15244 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15245 ;;		 -> NULL(0), 
 15246 ;;  pBit            1    2[BANK0 ] unsigned char 
 15247 ;;  pValue          1    3[BANK0 ] unsigned char 
 15248 ;; Auto vars:     Size  Location     Type
 15249 ;;		None
 15250 ;; Return value:  Size  Location     Type
 15251 ;;                  1    wreg      void 
 15252 ;; Registers used:
 15253 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15254 ;; Tracked objects:
 15255 ;;		On entry : 0/0
 15256 ;;		On exit  : 0/0
 15257 ;;		Unchanged: 0/0
 15258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15259 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15261 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15262 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15263 ;;Total ram usage:        7 bytes
 15264 ;; Hardware stack levels used:    1
 15265 ;; Hardware stack levels required when called:    7
 15266 ;; This function calls:
 15267 ;;		Nothing
 15268 ;; This function is called by:
 15269 ;;		_Port_SetPinType
 15270 ;;		_Port_SetPin
 15271 ;;		_SPI_Init
 15272 ;;		_SPI_MinSpeed
 15273 ;;		_SPI_MaxSpeed
 15274 ;;		_Word_SetBit
 15275 ;;		_I2C_Init
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text79
 15280  015342                     __ptext79:
 15281                           	opt stack 0
 15282  015342                     _Byte_SetBit:
 15283                           	opt stack 21
 15284                           
 15285                           ;Types.c: 34: pValue &= 1;
 15286                           
 15287                           ;incstack = 0
 15288  015342  0E01               	movlw	1
 15289  015344  0100               	movlb	0	; () banked
 15290  015346  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 15294  015348  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15295  01534C  0E01               	movlw	1
 15296  01534E  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 15297  015350  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15298  015352  D002               	goto	u9484
 15299  015354                     u9485:
 15300  015354  90D8               	bcf	status,0,c
 15301  015356  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15302  015358                     u9484:
 15303  015358  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15304  01535A  D7FC               	goto	u9485
 15305  01535C  0100               	movlb	0	; () banked
 15306  01535E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15307  015360  0AFF               	xorlw	255
 15308  015362  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 15309  015364  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15310  015368  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15311  01536C  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 15312  01536E  16DF               	andwf	indf2,f,c
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 15316  015370  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15317  015374  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 15318  015378  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15319  01537A  D002               	goto	u9494
 15320  01537C                     u9495:
 15321  01537C  90D8               	bcf	status,0,c
 15322  01537E  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15323  015380                     u9494:
 15324  015380  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15325  015382  D7FC               	goto	u9495
 15326  015384  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15327  015388  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15328  01538C  0100               	movlb	0	; () banked
 15329  01538E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15330  015390  12DF               	iorwf	indf2,f,c
 15331                           
 15332                           ; BSR set to: 0
 15333  015392  0012               	return		;funcret
 15334  015394                     __end_of_Byte_SetBit:
 15335                           	opt stack 0
 15336                           tosu	equ	0xFFF
 15337                           tosh	equ	0xFFE
 15338                           tosl	equ	0xFFD
 15339                           pclath	equ	0xFFA
 15340                           tblptru	equ	0xFF8
 15341                           tblptrh	equ	0xFF7
 15342                           tblptrl	equ	0xFF6
 15343                           tablat	equ	0xFF5
 15344                           prodh	equ	0xFF4
 15345                           prodl	equ	0xFF3
 15346                           intcon	equ	0xFF2
 15347                           postinc0	equ	0xFEE
 15348                           wreg	equ	0xFE8
 15349                           indf1	equ	0xFE7
 15350                           postdec1	equ	0xFE5
 15351                           fsr1h	equ	0xFE2
 15352                           fsr1l	equ	0xFE1
 15353                           indf2	equ	0xFDF
 15354                           postinc2	equ	0xFDE
 15355                           postdec2	equ	0xFDD
 15356                           plusw2	equ	0xFDB
 15357                           fsr2h	equ	0xFDA
 15358                           fsr2l	equ	0xFD9
 15359                           status	equ	0xFD8
 15360                           
 15361 ;; *************** function _Port_SetQuadType *****************
 15362 ;; Defined at:
 15363 ;;		line 399 in file "Library/Port.c"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15366 ;;		 -> PortB(10), PortD(10), 
 15367 ;;  pQuad           1   56[BANK0 ] enum E6776
 15368 ;;  pType           1   57[BANK0 ] enum E6795
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;  Output          1   58[BANK0 ] enum E6475
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  1    wreg      enum E6475
 15373 ;; Registers used:
 15374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15383 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15384 ;;Total ram usage:        5 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; Hardware stack levels required when called:   13
 15387 ;; This function calls:
 15388 ;;		_Byte_SetQuad
 15389 ;;		_Port_CheckQuadType
 15390 ;;		_Word_SetPair
 15391 ;; This function is called by:
 15392 ;;		_MXK_InitDIPSwitch
 15393 ;;		_MXK_Init
 15394 ;; This function uses a non-reentrant model
 15395 ;;
 15396                           
 15397                           	psect	text80
 15398  011F28                     __ptext80:
 15399                           	opt stack 0
 15400  011F28                     _Port_SetQuadType:
 15401                           	opt stack 16
 15402                           
 15403                           ;Port.c: 401: ePinError Output = ePinErrorState;
 15404                           
 15405                           ; BSR set to: 0
 15406                           ;incstack = 0
 15407  011F28  0E05               	movlw	5
 15408  011F2A  0100               	movlb	0	; () banked
 15409  011F2C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15410                           
 15411                           ;Port.c: 403: switch (pType)
 15412  011F2E  D0B8               	goto	l476
 15413  011F30                     
 15414                           ; BSR set to: 0
 15415                           ;Port.c: 407: {
 15416                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15417                           
 15418                           ; BSR set to: 0
 15419  011F30  EE20 F002          	lfsr	2,2
 15420  011F34  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15421  011F36  26D9               	addwf	fsr2l,f,c
 15422  011F38  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15423  011F3A  22DA               	addwfc	fsr2h,f,c
 15424  011F3C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15425  011F40  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15426  011F44  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15427  011F48  0E0F               	movlw	15
 15428  011F4A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15429  011F4C  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15430                           
 15431                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15432  011F50  0100               	movlb	0	; () banked
 15433  011F52  EE20 F004          	lfsr	2,4
 15434  011F56  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15435  011F58  26D9               	addwf	fsr2l,f,c
 15436  011F5A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15437  011F5C  22DA               	addwfc	fsr2h,f,c
 15438  011F5E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15439  011F62  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15440  011F66  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15441  011F6A  0E00               	movlw	0
 15442  011F6C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15443  011F6E  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15444                           
 15445                           ;Port.c: 413: }
 15446                           ;Port.c: 415: break;
 15447  011F72  D0A4               	goto	l478
 15448  011F74                     
 15449                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15450  011F74  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15451  011F78  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15452  011F7C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15453  011F80  0E03               	movlw	3
 15454  011F82  0100               	movlb	0	; () banked
 15455  011F84  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15456  011F86  ECF2  F0A9         	call	_Port_CheckQuadType	;wreg free
 15457  011F8A  0100               	movlb	0	; () banked
 15458  011F8C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15459  011F8E  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15460  011F90  A4D8               	btfss	status,2,c
 15461  011F92  0012               	return	
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;Port.c: 418: {
 15465                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15466  011F94  EE20 F002          	lfsr	2,2
 15467  011F98  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15468  011F9A  26D9               	addwf	fsr2l,f,c
 15469  011F9C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15470  011F9E  22DA               	addwfc	fsr2h,f,c
 15471  011FA0  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15472  011FA4  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15473  011FA8  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15474  011FAC  0E00               	movlw	0
 15475  011FAE  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15476  011FB0  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15477                           
 15478                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15479  011FB4  0100               	movlb	0	; () banked
 15480  011FB6  EE20 F004          	lfsr	2,4
 15481  011FBA  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15482  011FBC  26D9               	addwf	fsr2l,f,c
 15483  011FBE  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15484  011FC0  22DA               	addwfc	fsr2h,f,c
 15485  011FC2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15486  011FC6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15487  011FCA  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15488  011FCE  0E00               	movlw	0
 15489  011FD0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15490  011FD2  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15491                           
 15492                           ;Port.c: 424: }
 15493  011FD6  D072               	goto	l478
 15494  011FD8                     
 15495                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15496  011FD8  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15497  011FDC  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15498  011FE0  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15499  011FE4  0E03               	movlw	3
 15500  011FE6  0100               	movlb	0	; () banked
 15501  011FE8  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15502  011FEA  ECF2  F0A9         	call	_Port_CheckQuadType	;wreg free
 15503  011FEE  0100               	movlb	0	; () banked
 15504  011FF0  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15505  011FF2  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15506  011FF4  A4D8               	btfss	status,2,c
 15507  011FF6  0012               	return	
 15508                           
 15509                           ; BSR set to: 0
 15510                           ;Port.c: 429: {
 15511                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15512  011FF8  EE20 F002          	lfsr	2,2
 15513  011FFC  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15514  011FFE  26D9               	addwf	fsr2l,f,c
 15515  012000  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15516  012002  22DA               	addwfc	fsr2h,f,c
 15517  012004  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15518  012008  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15519  01200C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15520  012010  0E0F               	movlw	15
 15521  012012  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15522  012014  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15523                           
 15524                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 15525  012018  0100               	movlb	0	; () banked
 15526  01201A  EE20 F004          	lfsr	2,4
 15527  01201E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15528  012020  26D9               	addwf	fsr2l,f,c
 15529  012022  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15530  012024  22DA               	addwfc	fsr2h,f,c
 15531  012026  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15532  01202A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15533  01202E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15534  012032  0E0F               	movlw	15
 15535  012034  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15536  012036  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15537                           
 15538                           ;Port.c: 435: }
 15539  01203A  D040               	goto	l478
 15540  01203C                     
 15541                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15542  01203C  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15543  012040  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15544  012044  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15545  012048  0E03               	movlw	3
 15546  01204A  0100               	movlb	0	; () banked
 15547  01204C  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15548  01204E  ECF2  F0A9         	call	_Port_CheckQuadType	;wreg free
 15549  012052  0100               	movlb	0	; () banked
 15550  012054  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15551  012056  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15552  012058  A4D8               	btfss	status,2,c
 15553  01205A  0012               	return	
 15554                           
 15555                           ; BSR set to: 0
 15556                           ;Port.c: 440: {
 15557                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15558  01205C  EE20 F002          	lfsr	2,2
 15559  012060  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15560  012062  26D9               	addwf	fsr2l,f,c
 15561  012064  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15562  012066  22DA               	addwfc	fsr2h,f,c
 15563  012068  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15564  01206C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15565  012070  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15566  012074  0E00               	movlw	0
 15567  012076  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15568  012078  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15569                           
 15570                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15571  01207C  0100               	movlb	0	; () banked
 15572  01207E  EE20 F004          	lfsr	2,4
 15573  012082  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15574  012084  26D9               	addwf	fsr2l,f,c
 15575  012086  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15576  012088  22DA               	addwfc	fsr2h,f,c
 15577  01208A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15578  01208E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15579  012092  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15580  012096  0E00               	movlw	0
 15581  012098  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15582  01209A  ECB3  F0AE         	call	_Byte_SetQuad	;wreg free
 15583                           
 15584                           ;Port.c: 446: }
 15585  01209E  D00E               	goto	l478
 15586  0120A0                     l476:
 15587  0120A0  0100               	movlb	0	; () banked
 15588  0120A2  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 15589                           
 15590                           ; Switch size 1, requested type "space"
 15591                           ; Number of cases is 4, Range of values is 0 to 3
 15592                           ; switch strategies available:
 15593                           ; Name         Instructions Cycles
 15594                           ; simple_byte           13     7 (average)
 15595                           ;	Chosen strategy is simple_byte
 15596  0120A4  0A00               	xorlw	0	; case 0
 15597  0120A6  B4D8               	btfsc	status,2,c
 15598  0120A8  D743               	goto	l477
 15599  0120AA  0A01               	xorlw	1	; case 1
 15600  0120AC  B4D8               	btfsc	status,2,c
 15601  0120AE  D762               	goto	l479
 15602  0120B0  0A03               	xorlw	3	; case 2
 15603  0120B2  B4D8               	btfsc	status,2,c
 15604  0120B4  D791               	goto	l483
 15605  0120B6  0A01               	xorlw	1	; case 3
 15606  0120B8  B4D8               	btfsc	status,2,c
 15607  0120BA  D7C0               	goto	l486
 15608  0120BC                     l478:
 15609                           
 15610                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 15611                           
 15612                           ; BSR set to: 0
 15613  0120BC  0E08               	movlw	8
 15614  0120BE  0100               	movlb	0	; () banked
 15615  0120C0  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15616  0120C2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15617  0120C4  0E00               	movlw	0
 15618  0120C6  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15619  0120C8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15620  0120CA  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15621  0120CC  0D04               	mullw	4
 15622  0120CE  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 15623  0120D2  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15624  0120D6  ECA5  F0AC         	call	_Word_SetPair	;wreg free
 15625                           
 15626                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 15627  0120DA  0E08               	movlw	8
 15628  0120DC  0100               	movlb	0	; () banked
 15629  0120DE  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15630  0120E0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15631  0120E2  0E00               	movlw	0
 15632  0120E4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15633  0120E6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15634  0120E8  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15635  0120EA  0D04               	mullw	4
 15636  0120EC  28F3               	incf	prodl,w,c
 15637  0120EE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15638  0120F0  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15639  0120F4  ECA5  F0AC         	call	_Word_SetPair	;wreg free
 15640                           
 15641                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 15642  0120F8  0E08               	movlw	8
 15643  0120FA  0100               	movlb	0	; () banked
 15644  0120FC  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15645  0120FE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15646  012100  0E00               	movlw	0
 15647  012102  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15648  012104  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15649  012106  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15650  012108  0D04               	mullw	4
 15651  01210A  50F3               	movf	prodl,w,c
 15652  01210C  0F02               	addlw	2
 15653  01210E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15654  012110  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15655  012114  ECA5  F0AC         	call	_Word_SetPair	;wreg free
 15656                           
 15657                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 15658  012118  0E08               	movlw	8
 15659  01211A  0100               	movlb	0	; () banked
 15660  01211C  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15661  01211E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15662  012120  0E00               	movlw	0
 15663  012122  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15664  012124  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15665  012126  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15666  012128  0D04               	mullw	4
 15667  01212A  50F3               	movf	prodl,w,c
 15668  01212C  0F03               	addlw	3
 15669  01212E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15670  012130  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15671  012134  ECA5  F0AC         	call	_Word_SetPair	;wreg free
 15672  012138  0012               	return	
 15673  01213A                     __end_of_Port_SetQuadType:
 15674                           	opt stack 0
 15675                           tosu	equ	0xFFF
 15676                           tosh	equ	0xFFE
 15677                           tosl	equ	0xFFD
 15678                           pclath	equ	0xFFA
 15679                           tblptru	equ	0xFF8
 15680                           tblptrh	equ	0xFF7
 15681                           tblptrl	equ	0xFF6
 15682                           tablat	equ	0xFF5
 15683                           prodh	equ	0xFF4
 15684                           prodl	equ	0xFF3
 15685                           intcon	equ	0xFF2
 15686                           postinc0	equ	0xFEE
 15687                           wreg	equ	0xFE8
 15688                           indf1	equ	0xFE7
 15689                           postdec1	equ	0xFE5
 15690                           fsr1h	equ	0xFE2
 15691                           fsr1l	equ	0xFE1
 15692                           indf2	equ	0xFDF
 15693                           postinc2	equ	0xFDE
 15694                           postdec2	equ	0xFDD
 15695                           plusw2	equ	0xFDB
 15696                           fsr2h	equ	0xFDA
 15697                           fsr2l	equ	0xFD9
 15698                           status	equ	0xFD8
 15699                           
 15700 ;; *************** function _Word_SetPair *****************
 15701 ;; Defined at:
 15702 ;;		line 149 in file "Library/Types.c"
 15703 ;; Parameters:    Size  Location     Type
 15704 ;;  pInput          2   15[BANK0 ] PTR struct Word
 15705 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15706 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15707 ;;  pPair           1   17[BANK0 ] unsigned char 
 15708 ;;  pValue          1   18[BANK0 ] unsigned char 
 15709 ;; Auto vars:     Size  Location     Type
 15710 ;;		None
 15711 ;; Return value:  Size  Location     Type
 15712 ;;                  1    wreg      void 
 15713 ;; Registers used:
 15714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15720 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15724 ;;Total ram usage:        4 bytes
 15725 ;; Hardware stack levels used:    1
 15726 ;; Hardware stack levels required when called:    9
 15727 ;; This function calls:
 15728 ;;		_Byte_SetPair
 15729 ;; This function is called by:
 15730 ;;		_Port_SetPinType
 15731 ;;		_Port_SetQuadType
 15732 ;;		_Port_SetType
 15733 ;;		_Port_SetPairType
 15734 ;;		_PortProperty_Init
 15735 ;; This function uses a non-reentrant model
 15736 ;;
 15737                           
 15738                           	psect	text81
 15739  01594A                     __ptext81:
 15740                           	opt stack 0
 15741  01594A                     _Word_SetPair:
 15742                           	opt stack 19
 15743                           
 15744                           ;Types.c: 151: if (pPair >= 4)
 15745                           
 15746                           ;incstack = 0
 15747  01594A  0E03               	movlw	3
 15748  01594C  0100               	movlb	0	; () banked
 15749  01594E  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 15750  015950  D00E               	goto	l776
 15751                           
 15752                           ; BSR set to: 0
 15753                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 15754  015952  0E01               	movlw	1
 15755  015954  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 15756  015956  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 15757  015958  0E00               	movlw	0
 15758  01595A  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 15759  01595C  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 15760  01595E  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 15761  015960  0FFC               	addlw	252
 15762  015962  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 15763  015964  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15764  015968  ECA3  F0AE         	call	_Byte_SetPair	;wreg free
 15765  01596C  0012               	return	
 15766  01596E                     l776:
 15767                           
 15768                           ;Types.c: 153: else
 15769                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 15770  01596E  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 15771  015972  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 15772  015976  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 15773  01597A  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15774  01597E  ECA3  F0AE         	call	_Byte_SetPair	;wreg free
 15775  015982  0012               	return	
 15776  015984                     __end_of_Word_SetPair:
 15777                           	opt stack 0
 15778                           tosu	equ	0xFFF
 15779                           tosh	equ	0xFFE
 15780                           tosl	equ	0xFFD
 15781                           pclath	equ	0xFFA
 15782                           tblptru	equ	0xFF8
 15783                           tblptrh	equ	0xFF7
 15784                           tblptrl	equ	0xFF6
 15785                           tablat	equ	0xFF5
 15786                           prodh	equ	0xFF4
 15787                           prodl	equ	0xFF3
 15788                           intcon	equ	0xFF2
 15789                           postinc0	equ	0xFEE
 15790                           wreg	equ	0xFE8
 15791                           indf1	equ	0xFE7
 15792                           postdec1	equ	0xFE5
 15793                           fsr1h	equ	0xFE2
 15794                           fsr1l	equ	0xFE1
 15795                           indf2	equ	0xFDF
 15796                           postinc2	equ	0xFDE
 15797                           postdec2	equ	0xFDD
 15798                           plusw2	equ	0xFDB
 15799                           fsr2h	equ	0xFDA
 15800                           fsr2l	equ	0xFD9
 15801                           status	equ	0xFD8
 15802                           
 15803 ;; *************** function _Byte_SetPair *****************
 15804 ;; Defined at:
 15805 ;;		line 83 in file "Library/Types.c"
 15806 ;; Parameters:    Size  Location     Type
 15807 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 15808 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 15809 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 15810 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 15811 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 15812 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 15813 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 15814 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 15815 ;;		 -> NULL(0), 
 15816 ;;  pPair           1   13[BANK0 ] unsigned char 
 15817 ;;  pValue          1   14[BANK0 ] unsigned char 
 15818 ;; Auto vars:     Size  Location     Type
 15819 ;;		None
 15820 ;; Return value:  Size  Location     Type
 15821 ;;                  1    wreg      void 
 15822 ;; Registers used:
 15823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15824 ;; Tracked objects:
 15825 ;;		On entry : 0/0
 15826 ;;		On exit  : 0/0
 15827 ;;		Unchanged: 0/0
 15828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15829 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15832 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15833 ;;Total ram usage:        4 bytes
 15834 ;; Hardware stack levels used:    1
 15835 ;; Hardware stack levels required when called:    8
 15836 ;; This function calls:
 15837 ;;		_Byte_SetZone
 15838 ;; This function is called by:
 15839 ;;		_Word_SetPair
 15840 ;;		_Port_SetPairType
 15841 ;;		_Port_SetPair
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845                           	psect	text82
 15846  015D46                     __ptext82:
 15847                           	opt stack 0
 15848  015D46                     _Byte_SetPair:
 15849                           	opt stack 19
 15850                           
 15851                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 15852                           
 15853                           ;incstack = 0
 15854  015D46  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 15855  015D4A  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 15856  015D4E  0E04               	movlw	4
 15857  015D50  0100               	movlb	0	; () banked
 15858  015D52  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 15859  015D54  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 15860  015D58  0E02               	movlw	2
 15861  015D5A  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 15862  015D5C  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 15863  015D60  EC30  F0A3         	call	_Byte_SetZone	;wreg free
 15864  015D64  0012               	return		;funcret
 15865  015D66                     __end_of_Byte_SetPair:
 15866                           	opt stack 0
 15867                           tosu	equ	0xFFF
 15868                           tosh	equ	0xFFE
 15869                           tosl	equ	0xFFD
 15870                           pclath	equ	0xFFA
 15871                           tblptru	equ	0xFF8
 15872                           tblptrh	equ	0xFF7
 15873                           tblptrl	equ	0xFF6
 15874                           tablat	equ	0xFF5
 15875                           prodh	equ	0xFF4
 15876                           prodl	equ	0xFF3
 15877                           intcon	equ	0xFF2
 15878                           postinc0	equ	0xFEE
 15879                           wreg	equ	0xFE8
 15880                           indf1	equ	0xFE7
 15881                           postdec1	equ	0xFE5
 15882                           fsr1h	equ	0xFE2
 15883                           fsr1l	equ	0xFE1
 15884                           indf2	equ	0xFDF
 15885                           postinc2	equ	0xFDE
 15886                           postdec2	equ	0xFDD
 15887                           plusw2	equ	0xFDB
 15888                           fsr2h	equ	0xFDA
 15889                           fsr2l	equ	0xFD9
 15890                           status	equ	0xFD8
 15891                           
 15892 ;; *************** function _Port_CheckQuadType *****************
 15893 ;; Defined at:
 15894 ;;		line 126 in file "Library/Port.c"
 15895 ;; Parameters:    Size  Location     Type
 15896 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 15897 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15898 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15899 ;;  pQuad           1   49[BANK0 ] enum E6776
 15900 ;;  pDrive          1   50[BANK0 ] enum E6469
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;  Output          1   53[BANK0 ] enum E6475
 15903 ;;  Pair2           1   52[BANK0 ] enum E6760
 15904 ;;  Pair1           1   51[BANK0 ] enum E6760
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  1    wreg      enum E6475
 15907 ;; Registers used:
 15908 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15915 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15917 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15918 ;;Total ram usage:        7 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; Hardware stack levels required when called:   12
 15921 ;; This function calls:
 15922 ;;		_Port_CheckPairType
 15923 ;; This function is called by:
 15924 ;;		_Port_CheckPortType
 15925 ;;		_Port_SetQuadType
 15926 ;; This function uses a non-reentrant model
 15927 ;;
 15928                           
 15929                           	psect	text83
 15930  0153E4                     __ptext83:
 15931                           	opt stack 0
 15932  0153E4                     _Port_CheckQuadType:
 15933                           	opt stack 15
 15934                           
 15935                           ;Port.c: 128: ePinError Output = ePinErrorState;
 15936                           
 15937                           ;incstack = 0
 15938  0153E4  0E05               	movlw	5
 15939  0153E6  0100               	movlb	0	; () banked
 15940  0153E8  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15941                           
 15942                           ; BSR set to: 0
 15943                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 15944  0153EA  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 15945  0153EC  0D02               	mullw	2
 15946  0153EE  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 15947                           
 15948                           ; BSR set to: 0
 15949                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 15950  0153F2  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 15951  0153F4  0D02               	mullw	2
 15952  0153F6  28F3               	incf	prodl,w,c
 15953  0153F8  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 15954                           
 15955                           ; BSR set to: 0
 15956                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 15957  0153FA  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 15958  0153FE  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 15959  015402  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 15960  015406  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 15961  01540A  EC16  F0A8         	call	_Port_CheckPairType	;wreg free
 15962  01540E  0100               	movlb	0	; () banked
 15963  015410  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15964  015412  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 15965  015414  A4D8               	btfss	status,2,c
 15966  015416  D00C               	goto	l393
 15967                           
 15968                           ; BSR set to: 0
 15969                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 15970  015418  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 15971  01541C  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 15972  015420  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 15973  015424  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 15974  015428  EC16  F0A8         	call	_Port_CheckPairType	;wreg free
 15975  01542C  0100               	movlb	0	; () banked
 15976  01542E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15977  015430                     l393:
 15978                           
 15979                           ; BSR set to: 0
 15980                           ;Port.c: 136: return Output;
 15981                           
 15982                           ; BSR set to: 0
 15983  015430  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 15984  015432  0012               	return	
 15985  015434                     __end_of_Port_CheckQuadType:
 15986                           	opt stack 0
 15987                           tosu	equ	0xFFF
 15988                           tosh	equ	0xFFE
 15989                           tosl	equ	0xFFD
 15990                           pclath	equ	0xFFA
 15991                           tblptru	equ	0xFF8
 15992                           tblptrh	equ	0xFF7
 15993                           tblptrl	equ	0xFF6
 15994                           tablat	equ	0xFF5
 15995                           prodh	equ	0xFF4
 15996                           prodl	equ	0xFF3
 15997                           intcon	equ	0xFF2
 15998                           postinc0	equ	0xFEE
 15999                           wreg	equ	0xFE8
 16000                           indf1	equ	0xFE7
 16001                           postdec1	equ	0xFE5
 16002                           fsr1h	equ	0xFE2
 16003                           fsr1l	equ	0xFE1
 16004                           indf2	equ	0xFDF
 16005                           postinc2	equ	0xFDE
 16006                           postdec2	equ	0xFDD
 16007                           plusw2	equ	0xFDB
 16008                           fsr2h	equ	0xFDA
 16009                           fsr2l	equ	0xFD9
 16010                           status	equ	0xFD8
 16011                           
 16012 ;; *************** function _Port_CheckPairType *****************
 16013 ;; Defined at:
 16014 ;;		line 112 in file "Library/Port.c"
 16015 ;; Parameters:    Size  Location     Type
 16016 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16017 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16018 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16019 ;;  pPair           1   40[BANK0 ] enum E6760
 16020 ;;  pDrive          1   41[BANK0 ] enum E6469
 16021 ;; Auto vars:     Size  Location     Type
 16022 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 16023 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16024 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16025 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16026 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16027 ;;  Output          1   44[BANK0 ] enum E6475
 16028 ;;  Pin2            1   43[BANK0 ] enum E6750
 16029 ;;  Pin1            1   42[BANK0 ] enum E6750
 16030 ;; Return value:  Size  Location     Type
 16031 ;;                  1    wreg      enum E6475
 16032 ;; Registers used:
 16033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16034 ;; Tracked objects:
 16035 ;;		On entry : 0/0
 16036 ;;		On exit  : 0/0
 16037 ;;		Unchanged: 0/0
 16038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16039 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16040 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16042 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16043 ;;Total ram usage:        9 bytes
 16044 ;; Hardware stack levels used:    1
 16045 ;; Hardware stack levels required when called:   11
 16046 ;; This function calls:
 16047 ;;		_PortProperty_Valid
 16048 ;; This function is called by:
 16049 ;;		_Port_CheckQuadType
 16050 ;;		_Port_SetPairType
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054                           	psect	text84
 16055  01502C                     __ptext84:
 16056                           	opt stack 0
 16057  01502C                     _Port_CheckPairType:
 16058                           	opt stack 15
 16059                           
 16060                           ;Port.c: 114: ePinError Output = ePinErrorState;
 16061                           
 16062                           ; BSR set to: 0
 16063                           ;incstack = 0
 16064  01502C  0E05               	movlw	5
 16065  01502E  0100               	movlb	0	; () banked
 16066  015030  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16067                           
 16068                           ; BSR set to: 0
 16069                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 16070  015032  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 16071  015036  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 16072  01503A  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 16073  01503E  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 16077  015042  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16078  015044  0D02               	mullw	2
 16079  015046  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 16080                           
 16081                           ; BSR set to: 0
 16082                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 16083  01504A  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16084  01504C  0D02               	mullw	2
 16085  01504E  28F3               	incf	prodl,w,c
 16086  015050  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 16087                           
 16088                           ; BSR set to: 0
 16089                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 16090  015052  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16091  015056  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16092  01505A  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16093  01505E  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 16094  015062  ECB2  F0A7         	call	_PortProperty_Valid	;wreg free
 16095  015066  0100               	movlb	0	; () banked
 16096  015068  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16097  01506A  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16098  01506C  A4D8               	btfss	status,2,c
 16099  01506E  D00C               	goto	l389
 16100                           
 16101                           ; BSR set to: 0
 16102                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 16103  015070  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16104  015074  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16105  015078  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16106  01507C  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 16107  015080  ECB2  F0A7         	call	_PortProperty_Valid	;wreg free
 16108  015084  0100               	movlb	0	; () banked
 16109  015086  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16110  015088                     l389:
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;Port.c: 124: return Output;
 16114                           
 16115                           ; BSR set to: 0
 16116  015088  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16117  01508A  0012               	return	
 16118  01508C                     __end_of_Port_CheckPairType:
 16119                           	opt stack 0
 16120                           tosu	equ	0xFFF
 16121                           tosh	equ	0xFFE
 16122                           tosl	equ	0xFFD
 16123                           pclath	equ	0xFFA
 16124                           tblptru	equ	0xFF8
 16125                           tblptrh	equ	0xFF7
 16126                           tblptrl	equ	0xFF6
 16127                           tablat	equ	0xFF5
 16128                           prodh	equ	0xFF4
 16129                           prodl	equ	0xFF3
 16130                           intcon	equ	0xFF2
 16131                           postinc0	equ	0xFEE
 16132                           wreg	equ	0xFE8
 16133                           indf1	equ	0xFE7
 16134                           postdec1	equ	0xFE5
 16135                           fsr1h	equ	0xFE2
 16136                           fsr1l	equ	0xFE1
 16137                           indf2	equ	0xFDF
 16138                           postinc2	equ	0xFDE
 16139                           postdec2	equ	0xFDD
 16140                           plusw2	equ	0xFDB
 16141                           fsr2h	equ	0xFDA
 16142                           fsr2l	equ	0xFD9
 16143                           status	equ	0xFD8
 16144                           
 16145 ;; *************** function _PortProperty_Valid *****************
 16146 ;; Defined at:
 16147 ;;		line 220 in file "Library/Types.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 16150 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16151 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16152 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16153 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16154 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 16155 ;;  pPin            1   18[BANK0 ] unsigned char 
 16156 ;; Auto vars:     Size  Location     Type
 16157 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 16158 ;;  Pair            1   37[BANK0 ] enum E6469
 16159 ;; Return value:  Size  Location     Type
 16160 ;;                  1    wreg      enum E6475
 16161 ;; Registers used:
 16162 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16163 ;; Tracked objects:
 16164 ;;		On entry : 0/0
 16165 ;;		On exit  : 0/0
 16166 ;;		Unchanged: 0/0
 16167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16168 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16169 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16170 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16171 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16172 ;;Total ram usage:       23 bytes
 16173 ;; Hardware stack levels used:    1
 16174 ;; Hardware stack levels required when called:   10
 16175 ;; This function calls:
 16176 ;;		_Word_GetPair
 16177 ;; This function is called by:
 16178 ;;		_Port_CheckPairType
 16179 ;;		_Port_SetPinType
 16180 ;; This function uses a non-reentrant model
 16181 ;;
 16182                           
 16183                           	psect	text85
 16184  014F64                     __ptext85:
 16185                           	opt stack 0
 16186  014F64                     _PortProperty_Valid:
 16187                           	opt stack 15
 16188                           
 16189                           ;Types.c: 222: ePinDrive Pair;
 16190                           ;Types.c: 223: const ePinError Errors[4][4] =
 16191                           ;Types.c: 224: {
 16192                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 16193                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 16194                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 16195                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 16196                           ;Types.c: 230: };
 16197                           
 16198                           ; BSR set to: 0
 16199                           ;incstack = 0
 16200  014F64  0E19               	movlw	low PortProperty_Valid@F6830
 16201  014F66  6EF6               	movwf	tblptrl,c
 16202  014F68                     	if	1	;There is more than 1 active tblptr byte
 16203  014F68  0EFC               	movlw	high PortProperty_Valid@F6830
 16204  014F6A  6EF7               	movwf	tblptrh,c
 16205  014F6C                     	endif
 16206  014F6C                     	if	1	;There are 3 active tblptr bytes
 16207  014F6C  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 16208  014F6E  6EF8               	movwf	tblptru,c
 16209  014F70                     	endif
 16210  014F70  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 16211  014F74  0E0F               	movlw	15
 16212  014F76                     u9450:
 16213  014F76  0009               	tblrd		*+
 16214  014F78  CFF5 FFDE          	movff	tablat,postinc2
 16215  014F7C  06E8               	decf	wreg,f,c
 16216  014F7E  E2FB               	bc	u9450
 16217                           
 16218                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 16219  014F80  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 16220  014F84  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 16221  014F88  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 16222  014F8C  EC48  F0AD         	call	_Word_GetPair	;wreg free
 16223  014F90  0100               	movlb	0	; () banked
 16224  014F92  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 16225                           
 16226                           ; BSR set to: 0
 16227                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 16228  014F94  0E04               	movlw	4
 16229  014F96  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 16230  014F98  D017               	goto	l819
 16231                           
 16232                           ; BSR set to: 0
 16233  014F9A  0E04               	movlw	4
 16234  014F9C  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 16235  014F9E  D014               	goto	l819
 16236                           
 16237                           ; BSR set to: 0
 16238                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 16239  014FA0  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 16240  014FA2  0D04               	mullw	4
 16241  014FA4  0E75               	movlw	low PortProperty_Valid@Errors
 16242  014FA6  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 16243  014FA8  0E00               	movlw	high PortProperty_Valid@Errors
 16244  014FAA  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 16245  014FAC  50F3               	movf	prodl,w,c
 16246  014FAE  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 16247  014FB0  50F4               	movf	prodh,w,c
 16248  014FB2  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 16249  014FB4  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 16250  014FB6  0D01               	mullw	1
 16251  014FB8  50F3               	movf	prodl,w,c
 16252  014FBA  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 16253  014FBC  6ED9               	movwf	fsr2l,c
 16254  014FBE  50F4               	movf	prodh,w,c
 16255  014FC0  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 16256  014FC2  6EDA               	movwf	fsr2h,c
 16257  014FC4  50DF               	movf	indf2,w,c
 16258                           
 16259                           ; BSR set to: 0
 16260  014FC6  0012               	return	
 16261  014FC8                     l819:
 16262                           
 16263                           ; BSR set to: 0
 16264                           ;Types.c: 237: return ePinErrorState;
 16265                           
 16266                           ; BSR set to: 0
 16267  014FC8  0E05               	movlw	5
 16268  014FCA  0012               	return	
 16269  014FCC                     __end_of_PortProperty_Valid:
 16270                           	opt stack 0
 16271                           tosu	equ	0xFFF
 16272                           tosh	equ	0xFFE
 16273                           tosl	equ	0xFFD
 16274                           pclath	equ	0xFFA
 16275                           tblptru	equ	0xFF8
 16276                           tblptrh	equ	0xFF7
 16277                           tblptrl	equ	0xFF6
 16278                           tablat	equ	0xFF5
 16279                           prodh	equ	0xFF4
 16280                           prodl	equ	0xFF3
 16281                           intcon	equ	0xFF2
 16282                           postinc0	equ	0xFEE
 16283                           wreg	equ	0xFE8
 16284                           indf1	equ	0xFE7
 16285                           postdec1	equ	0xFE5
 16286                           fsr1h	equ	0xFE2
 16287                           fsr1l	equ	0xFE1
 16288                           indf2	equ	0xFDF
 16289                           postinc2	equ	0xFDE
 16290                           postdec2	equ	0xFDD
 16291                           plusw2	equ	0xFDB
 16292                           fsr2h	equ	0xFDA
 16293                           fsr2l	equ	0xFD9
 16294                           status	equ	0xFD8
 16295                           
 16296 ;; *************** function _Word_GetPair *****************
 16297 ;; Defined at:
 16298 ;;		line 156 in file "Library/Types.c"
 16299 ;; Parameters:    Size  Location     Type
 16300 ;;  pInput          2   12[BANK0 ] PTR struct Word
 16301 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16302 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16303 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16304 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16305 ;;  pPair           1   14[BANK0 ] unsigned char 
 16306 ;; Auto vars:     Size  Location     Type
 16307 ;;		None
 16308 ;; Return value:  Size  Location     Type
 16309 ;;                  1    wreg      unsigned char 
 16310 ;; Registers used:
 16311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16312 ;; Tracked objects:
 16313 ;;		On entry : 0/0
 16314 ;;		On exit  : 0/0
 16315 ;;		Unchanged: 0/0
 16316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16317 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16320 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16321 ;;Total ram usage:        3 bytes
 16322 ;; Hardware stack levels used:    1
 16323 ;; Hardware stack levels required when called:    9
 16324 ;; This function calls:
 16325 ;;		_Byte_GetPair
 16326 ;; This function is called by:
 16327 ;;		_Port_Init
 16328 ;;		_Port_SetPin
 16329 ;;		_Port_Set
 16330 ;;		_PortProperty_Valid
 16331 ;;		_Port_SetPair
 16332 ;;		_Port_SetQuad
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           	psect	text86
 16337  015A90                     __ptext86:
 16338                           	opt stack 0
 16339  015A90                     _Word_GetPair:
 16340                           	opt stack 15
 16341                           
 16342                           ;Types.c: 158: if (pPair >= 4)
 16343                           
 16344                           ; BSR set to: 0
 16345                           ;incstack = 0
 16346  015A90  0E03               	movlw	3
 16347  015A92  0100               	movlb	0	; () banked
 16348  015A94  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 16349  015A96  D00C               	goto	l781
 16350                           
 16351                           ; BSR set to: 0
 16352                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16353  015A98  0E01               	movlw	1
 16354  015A9A  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 16355  015A9C  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 16356  015A9E  0E00               	movlw	0
 16357  015AA0  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 16358  015AA2  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 16359  015AA4  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 16360  015AA6  0FFC               	addlw	252
 16361  015AA8  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 16362  015AAA  ECE2  F0AE         	call	_Byte_GetPair	;wreg free
 16363  015AAE  0012               	return	
 16364  015AB0                     l781:
 16365                           
 16366                           ;Types.c: 160: else
 16367                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16368  015AB0  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 16369  015AB4  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 16370  015AB8  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 16371  015ABC  ECE2  F0AE         	call	_Byte_GetPair	;wreg free
 16372  015AC0  0012               	return	
 16373  015AC2                     __end_of_Word_GetPair:
 16374                           	opt stack 0
 16375                           tosu	equ	0xFFF
 16376                           tosh	equ	0xFFE
 16377                           tosl	equ	0xFFD
 16378                           pclath	equ	0xFFA
 16379                           tblptru	equ	0xFF8
 16380                           tblptrh	equ	0xFF7
 16381                           tblptrl	equ	0xFF6
 16382                           tablat	equ	0xFF5
 16383                           prodh	equ	0xFF4
 16384                           prodl	equ	0xFF3
 16385                           intcon	equ	0xFF2
 16386                           postinc0	equ	0xFEE
 16387                           wreg	equ	0xFE8
 16388                           indf1	equ	0xFE7
 16389                           postdec1	equ	0xFE5
 16390                           fsr1h	equ	0xFE2
 16391                           fsr1l	equ	0xFE1
 16392                           indf2	equ	0xFDF
 16393                           postinc2	equ	0xFDE
 16394                           postdec2	equ	0xFDD
 16395                           plusw2	equ	0xFDB
 16396                           fsr2h	equ	0xFDA
 16397                           fsr2l	equ	0xFD9
 16398                           status	equ	0xFD8
 16399                           
 16400 ;; *************** function _Byte_GetPair *****************
 16401 ;; Defined at:
 16402 ;;		line 87 in file "Library/Types.c"
 16403 ;; Parameters:    Size  Location     Type
 16404 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 16405 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16406 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16407 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16408 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16409 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16410 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16411 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16412 ;;		 -> NULL(0), 
 16413 ;;  pPair           1   11[BANK0 ] unsigned char 
 16414 ;; Auto vars:     Size  Location     Type
 16415 ;;		None
 16416 ;; Return value:  Size  Location     Type
 16417 ;;                  1    wreg      unsigned char 
 16418 ;; Registers used:
 16419 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16420 ;; Tracked objects:
 16421 ;;		On entry : 0/0
 16422 ;;		On exit  : 0/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16425 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16428 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16429 ;;Total ram usage:        3 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; Hardware stack levels required when called:    8
 16432 ;; This function calls:
 16433 ;;		_Byte_GetZone
 16434 ;; This function is called by:
 16435 ;;		_Word_GetPair
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           	psect	text87
 16440  015DC4                     __ptext87:
 16441                           	opt stack 0
 16442  015DC4                     _Byte_GetPair:
 16443                           	opt stack 15
 16444                           
 16445                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16446                           
 16447                           ;incstack = 0
 16448  015DC4  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 16449  015DC8  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 16450  015DCC  0E04               	movlw	4
 16451  015DCE  0100               	movlb	0	; () banked
 16452  015DD0  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 16453  015DD2  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 16454  015DD6  0E02               	movlw	2
 16455  015DD8  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 16456  015DDA  EC82  F0A5         	call	_Byte_GetZone	;wreg free
 16457  015DDE  0012               	return	
 16458  015DE0                     __end_of_Byte_GetPair:
 16459                           	opt stack 0
 16460                           tosu	equ	0xFFF
 16461                           tosh	equ	0xFFE
 16462                           tosl	equ	0xFFD
 16463                           pclath	equ	0xFFA
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           postinc0	equ	0xFEE
 16472                           wreg	equ	0xFE8
 16473                           indf1	equ	0xFE7
 16474                           postdec1	equ	0xFE5
 16475                           fsr1h	equ	0xFE2
 16476                           fsr1l	equ	0xFE1
 16477                           indf2	equ	0xFDF
 16478                           postinc2	equ	0xFDE
 16479                           postdec2	equ	0xFDD
 16480                           plusw2	equ	0xFDB
 16481                           fsr2h	equ	0xFDA
 16482                           fsr2l	equ	0xFD9
 16483                           status	equ	0xFD8
 16484                           
 16485 ;; *************** function _Byte_GetZone *****************
 16486 ;; Defined at:
 16487 ;;		line 64 in file "Library/Types.c"
 16488 ;; Parameters:    Size  Location     Type
 16489 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16490 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16491 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16492 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16493 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16494 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16495 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16496 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16497 ;;		 -> NULL(0), 
 16498 ;;  pMax            1    2[BANK0 ] unsigned char 
 16499 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16500 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;  Output          1    8[BANK0 ] unsigned char 
 16503 ;;  Offset          1    7[BANK0 ] unsigned char 
 16504 ;;  MASK            1    6[BANK0 ] unsigned char 
 16505 ;; Return value:  Size  Location     Type
 16506 ;;                  1    wreg      unsigned char 
 16507 ;; Registers used:
 16508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16509 ;; Tracked objects:
 16510 ;;		On entry : 0/0
 16511 ;;		On exit  : 0/0
 16512 ;;		Unchanged: 0/0
 16513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16514 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16515 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16517 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16518 ;;Total ram usage:        9 bytes
 16519 ;; Hardware stack levels used:    1
 16520 ;; Hardware stack levels required when called:    7
 16521 ;; This function calls:
 16522 ;;		Nothing
 16523 ;; This function is called by:
 16524 ;;		_Byte_GetPair
 16525 ;;		_Byte_GetTriple
 16526 ;;		_Byte_GetQuad
 16527 ;; This function uses a non-reentrant model
 16528 ;;
 16529                           
 16530                           	psect	text88
 16531  014B04                     __ptext88:
 16532                           	opt stack 0
 16533  014B04                     _Byte_GetZone:
 16534                           	opt stack 15
 16535                           
 16536                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 16537                           
 16538                           ;incstack = 0
 16539  014B04  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 16540  014B08  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 16541  014B0C  0E00               	movlw	low (__mediumconst shr (0+16))
 16542  014B0E  6EF8               	movwf	tblptru,c
 16543  014B10  0E0F               	movlw	(high __ramtop+-1)
 16544  014B12  64F7               	cpfsgt	tblptrh,c
 16545  014B14  D003               	bra	u9417
 16546  014B16  0008               	tblrd		*
 16547  014B18  50F5               	movf	tablat,w,c
 16548  014B1A  D005               	bra	u9410
 16549  014B1C                     u9417:
 16550  014B1C  CFF6 FFE9          	movff	tblptrl,fsr0l
 16551  014B20  CFF7 FFEA          	movff	tblptrh,fsr0h
 16552  014B24  50EF               	movf	indf0,w,c
 16553  014B26                     u9410:
 16554  014B26  0100               	movlb	0	; () banked
 16555  014B28  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 16556                           
 16557                           ; BSR set to: 0
 16558                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 16559  014B2A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16560  014B2C  0D01               	mullw	1
 16561  014B2E  0E33               	movlw	low _MASKS
 16562  014B30  24F3               	addwf	prodl,w,c
 16563  014B32  6EF6               	movwf	tblptrl,c
 16564  014B34  0EFC               	movlw	high _MASKS
 16565  014B36  20F4               	addwfc	prodh,w,c
 16566  014B38  6EF7               	movwf	tblptrh,c
 16567  014B3A                     	if	1	;There are 3 active tblptr bytes
 16568  014B3A  6AF8               	clrf	tblptru,c
 16569  014B3C  0E00               	movlw	low (__mediumconst shr (0+16))
 16570  014B3E  22F8               	addwfc	tblptru,f,c
 16571  014B40                     	endif
 16572  014B40  0008               	tblrd		*
 16573  014B42  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;Types.c: 68: UINT8 Offset = 0;
 16577  014B46  0E00               	movlw	0
 16578  014B48  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 16579                           
 16580                           ;Types.c: 70: while (pChunk >= pMax)
 16581  014B4A  D003               	goto	l732
 16582  014B4C                     
 16583                           ; BSR set to: 0
 16584                           ;Types.c: 71: {
 16585                           ;Types.c: 72: pChunk -= pMax;
 16586                           
 16587                           ; BSR set to: 0
 16588  014B4C  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16589  014B4E  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;Types.c: 73: Offset += 1;
 16593  014B50  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 16594  014B52                     l732:
 16595                           
 16596                           ; BSR set to: 0
 16597                           
 16598                           ; BSR set to: 0
 16599  014B52  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16600  014B54  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 16601  014B56  B0D8               	btfsc	status,0,c
 16602  014B58  D7F9               	goto	l733
 16603                           
 16604                           ; BSR set to: 0
 16605                           ;Types.c: 74: }
 16606                           ;Types.c: 75: pChunk *= pChunkSize;
 16607                           
 16608                           ; BSR set to: 0
 16609  014B5A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16610  014B5C  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 16611  014B5E  50F3               	movf	prodl,w,c
 16612  014B60  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 16613                           
 16614                           ; BSR set to: 0
 16615                           ;Types.c: 76: pChunk += Offset;
 16616  014B62  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 16617  014B64  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 16618                           
 16619                           ; BSR set to: 0
 16620                           ;Types.c: 78: Output >>= pChunk;
 16621  014B66  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 16622  014B68  6F65               	movwf	??_Byte_GetZone& (0+255),b
 16623  014B6A  D002               	goto	u9430
 16624  014B6C                     u9435:
 16625  014B6C  90D8               	bcf	status,0,c
 16626  014B6E  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 16627  014B70                     u9430:
 16628  014B70  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 16629  014B72  D7FC               	goto	u9435
 16630                           
 16631                           ;Types.c: 79: Output &= MASK;
 16632  014B74  0100               	movlb	0	; () banked
 16633  014B76  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 16634  014B78  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 16635                           
 16636                           ; BSR set to: 0
 16637                           ;Types.c: 80: return Output;
 16638  014B7A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 16639  014B7C  0012               	return	
 16640  014B7E                     __end_of_Byte_GetZone:
 16641                           	opt stack 0
 16642                           tosu	equ	0xFFF
 16643                           tosh	equ	0xFFE
 16644                           tosl	equ	0xFFD
 16645                           pclath	equ	0xFFA
 16646                           tblptru	equ	0xFF8
 16647                           tblptrh	equ	0xFF7
 16648                           tblptrl	equ	0xFF6
 16649                           tablat	equ	0xFF5
 16650                           prodh	equ	0xFF4
 16651                           prodl	equ	0xFF3
 16652                           intcon	equ	0xFF2
 16653                           indf0	equ	0xFEF
 16654                           postinc0	equ	0xFEE
 16655                           fsr0h	equ	0xFEA
 16656                           fsr0l	equ	0xFE9
 16657                           wreg	equ	0xFE8
 16658                           indf1	equ	0xFE7
 16659                           postdec1	equ	0xFE5
 16660                           fsr1h	equ	0xFE2
 16661                           fsr1l	equ	0xFE1
 16662                           indf2	equ	0xFDF
 16663                           postinc2	equ	0xFDE
 16664                           postdec2	equ	0xFDD
 16665                           plusw2	equ	0xFDB
 16666                           fsr2h	equ	0xFDA
 16667                           fsr2l	equ	0xFD9
 16668                           status	equ	0xFD8
 16669                           
 16670 ;; *************** function _Byte_SetQuad *****************
 16671 ;; Defined at:
 16672 ;;		line 101 in file "Library/Types.c"
 16673 ;; Parameters:    Size  Location     Type
 16674 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 16675 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 16676 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16677 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16678 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16679 ;;		 -> NULL(0), 
 16680 ;;  pQuad           1   13[BANK0 ] unsigned char 
 16681 ;;  pValue          1   14[BANK0 ] unsigned char 
 16682 ;; Auto vars:     Size  Location     Type
 16683 ;;		None
 16684 ;; Return value:  Size  Location     Type
 16685 ;;                  1    wreg      void 
 16686 ;; Registers used:
 16687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16688 ;; Tracked objects:
 16689 ;;		On entry : 0/0
 16690 ;;		On exit  : 0/0
 16691 ;;		Unchanged: 0/0
 16692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16693 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16696 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16697 ;;Total ram usage:        4 bytes
 16698 ;; Hardware stack levels used:    1
 16699 ;; Hardware stack levels required when called:    8
 16700 ;; This function calls:
 16701 ;;		_Byte_SetZone
 16702 ;; This function is called by:
 16703 ;;		_Port_SetQuadType
 16704 ;;		_SPI_Init
 16705 ;;		_SPI_MinSpeed
 16706 ;;		_SPI_MaxSpeed
 16707 ;;		_Port_SetQuad
 16708 ;;		_Word_SetQuad
 16709 ;;		_I2C_Init
 16710 ;; This function uses a non-reentrant model
 16711 ;;
 16712                           
 16713                           	psect	text89
 16714  015D66                     __ptext89:
 16715                           	opt stack 0
 16716  015D66                     _Byte_SetQuad:
 16717                           	opt stack 20
 16718                           
 16719                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 16720                           
 16721                           ; BSR set to: 0
 16722                           ;incstack = 0
 16723  015D66  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 16724  015D6A  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 16725  015D6E  0E02               	movlw	2
 16726  015D70  0100               	movlb	0	; () banked
 16727  015D72  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 16728  015D74  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 16729  015D78  0E04               	movlw	4
 16730  015D7A  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 16731  015D7C  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 16732  015D80  EC30  F0A3         	call	_Byte_SetZone	;wreg free
 16733  015D84  0012               	return		;funcret
 16734  015D86                     __end_of_Byte_SetQuad:
 16735                           	opt stack 0
 16736                           tosu	equ	0xFFF
 16737                           tosh	equ	0xFFE
 16738                           tosl	equ	0xFFD
 16739                           pclath	equ	0xFFA
 16740                           tblptru	equ	0xFF8
 16741                           tblptrh	equ	0xFF7
 16742                           tblptrl	equ	0xFF6
 16743                           tablat	equ	0xFF5
 16744                           prodh	equ	0xFF4
 16745                           prodl	equ	0xFF3
 16746                           intcon	equ	0xFF2
 16747                           indf0	equ	0xFEF
 16748                           postinc0	equ	0xFEE
 16749                           fsr0h	equ	0xFEA
 16750                           fsr0l	equ	0xFE9
 16751                           wreg	equ	0xFE8
 16752                           indf1	equ	0xFE7
 16753                           postdec1	equ	0xFE5
 16754                           fsr1h	equ	0xFE2
 16755                           fsr1l	equ	0xFE1
 16756                           indf2	equ	0xFDF
 16757                           postinc2	equ	0xFDE
 16758                           postdec2	equ	0xFDD
 16759                           plusw2	equ	0xFDB
 16760                           fsr2h	equ	0xFDA
 16761                           fsr2l	equ	0xFD9
 16762                           status	equ	0xFD8
 16763                           
 16764 ;; *************** function _Byte_SetZone *****************
 16765 ;; Defined at:
 16766 ;;		line 47 in file "Library/Types.c"
 16767 ;; Parameters:    Size  Location     Type
 16768 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16769 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 16770 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 16771 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 16772 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 16773 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16774 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16775 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16776 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16777 ;;  pMax            1    2[BANK0 ] unsigned char 
 16778 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16779 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16780 ;;  pValue          1    5[BANK0 ] unsigned char 
 16781 ;; Auto vars:     Size  Location     Type
 16782 ;;  MASK            1   10[BANK0 ] unsigned char 
 16783 ;;  Offset          1    9[BANK0 ] unsigned char 
 16784 ;; Return value:  Size  Location     Type
 16785 ;;                  1    wreg      void 
 16786 ;; Registers used:
 16787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16788 ;; Tracked objects:
 16789 ;;		On entry : 0/0
 16790 ;;		On exit  : 0/0
 16791 ;;		Unchanged: 0/0
 16792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16793 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16794 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16795 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16796 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16797 ;;Total ram usage:       11 bytes
 16798 ;; Hardware stack levels used:    1
 16799 ;; Hardware stack levels required when called:    7
 16800 ;; This function calls:
 16801 ;;		Nothing
 16802 ;; This function is called by:
 16803 ;;		_Byte_SetPair
 16804 ;;		_Byte_SetQuad
 16805 ;;		_Byte_SetTriple
 16806 ;; This function uses a non-reentrant model
 16807 ;;
 16808                           
 16809                           	psect	text90
 16810  014660                     __ptext90:
 16811                           	opt stack 0
 16812  014660                     _Byte_SetZone:
 16813                           	opt stack 19
 16814                           
 16815                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 16816                           
 16817                           ;incstack = 0
 16818  014660  0100               	movlb	0	; () banked
 16819  014662  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16820  014664  0D01               	mullw	1
 16821  014666  0E33               	movlw	low _MASKS
 16822  014668  24F3               	addwf	prodl,w,c
 16823  01466A  6EF6               	movwf	tblptrl,c
 16824  01466C  0EFC               	movlw	high _MASKS
 16825  01466E  20F4               	addwfc	prodh,w,c
 16826  014670  6EF7               	movwf	tblptrh,c
 16827  014672                     	if	1	;There are 3 active tblptr bytes
 16828  014672  6AF8               	clrf	tblptru,c
 16829  014674  0E00               	movlw	low (__mediumconst shr (0+16))
 16830  014676  22F8               	addwfc	tblptru,f,c
 16831  014678                     	endif
 16832  014678  0008               	tblrd		*
 16833  01467A  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 16834                           
 16835                           ; BSR set to: 0
 16836                           ;Types.c: 50: UINT8 Offset = 0;
 16837  01467E  0E00               	movlw	0
 16838  014680  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 16839                           
 16840                           ;Types.c: 52: while (pChunk >= pMax)
 16841  014682  D003               	goto	l726
 16842  014684                     
 16843                           ; BSR set to: 0
 16844                           ;Types.c: 53: {
 16845                           ;Types.c: 54: pChunk -= pMax;
 16846                           
 16847                           ; BSR set to: 0
 16848  014684  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16849  014686  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 16850                           
 16851                           ; BSR set to: 0
 16852                           ;Types.c: 55: Offset += 1;
 16853  014688  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 16854  01468A                     l726:
 16855                           
 16856                           ; BSR set to: 0
 16857                           
 16858                           ; BSR set to: 0
 16859  01468A  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16860  01468C  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 16861  01468E  B0D8               	btfsc	status,0,c
 16862  014690  D7F9               	goto	l727
 16863                           
 16864                           ; BSR set to: 0
 16865                           ;Types.c: 56: }
 16866                           ;Types.c: 57: pChunk *= pChunkSize;
 16867                           
 16868                           ; BSR set to: 0
 16869  014692  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16870  014694  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 16871  014696  50F3               	movf	prodl,w,c
 16872  014698  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;Types.c: 58: pChunk += Offset;
 16876  01469A  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 16877  01469C  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 16878                           
 16879                           ; BSR set to: 0
 16880                           ;Types.c: 60: pValue &= MASK;
 16881  01469E  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 16882  0146A0  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 16883                           
 16884                           ; BSR set to: 0
 16885                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 16886  0146A2  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16887  0146A6  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 16888  0146AA  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16889  0146AC  D002               	goto	u9514
 16890  0146AE                     u9515:
 16891  0146AE  90D8               	bcf	status,0,c
 16892  0146B0  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16893  0146B2                     u9514:
 16894  0146B2  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16895  0146B4  D7FC               	goto	u9515
 16896  0146B6  0100               	movlb	0	; () banked
 16897  0146B8  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16898  0146BA  0AFF               	xorlw	255
 16899  0146BC  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 16900  0146BE  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16901  0146C2  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16902  0146C6  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 16903  0146C8  16DF               	andwf	indf2,f,c
 16904                           
 16905                           ; BSR set to: 0
 16906                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 16907  0146CA  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16908  0146CE  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 16909  0146D2  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16910  0146D4  D002               	goto	u9524
 16911  0146D6                     u9525:
 16912  0146D6  90D8               	bcf	status,0,c
 16913  0146D8  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16914  0146DA                     u9524:
 16915  0146DA  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16916  0146DC  D7FC               	goto	u9525
 16917  0146DE  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16918  0146E2  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16919  0146E6  0100               	movlb	0	; () banked
 16920  0146E8  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16921  0146EA  12DF               	iorwf	indf2,f,c
 16922                           
 16923                           ; BSR set to: 0
 16924  0146EC  0012               	return		;funcret
 16925  0146EE                     __end_of_Byte_SetZone:
 16926                           	opt stack 0
 16927                           tosu	equ	0xFFF
 16928                           tosh	equ	0xFFE
 16929                           tosl	equ	0xFFD
 16930                           pclath	equ	0xFFA
 16931                           tblptru	equ	0xFF8
 16932                           tblptrh	equ	0xFF7
 16933                           tblptrl	equ	0xFF6
 16934                           tablat	equ	0xFF5
 16935                           prodh	equ	0xFF4
 16936                           prodl	equ	0xFF3
 16937                           intcon	equ	0xFF2
 16938                           indf0	equ	0xFEF
 16939                           postinc0	equ	0xFEE
 16940                           fsr0h	equ	0xFEA
 16941                           fsr0l	equ	0xFE9
 16942                           wreg	equ	0xFE8
 16943                           indf1	equ	0xFE7
 16944                           postdec1	equ	0xFE5
 16945                           fsr1h	equ	0xFE2
 16946                           fsr1l	equ	0xFE1
 16947                           indf2	equ	0xFDF
 16948                           postinc2	equ	0xFDE
 16949                           postdec2	equ	0xFDD
 16950                           plusw2	equ	0xFDB
 16951                           fsr2h	equ	0xFDA
 16952                           fsr2l	equ	0xFD9
 16953                           status	equ	0xFD8
 16954                           
 16955 ;; *************** function _Drive *****************
 16956 ;; Defined at:
 16957 ;;		line 189 in file "main.c"
 16958 ;; Parameters:    Size  Location     Type
 16959 ;;  Speed           2    1[BANK0 ] int 
 16960 ;; Auto vars:     Size  Location     Type
 16961 ;;  Rad             2    3[BANK0 ] int 
 16962 ;; Return value:  Size  Location     Type
 16963 ;;                  1    wreg      void 
 16964 ;; Registers used:
 16965 ;;		wreg, status,2, cstack
 16966 ;; Tracked objects:
 16967 ;;		On entry : 0/0
 16968 ;;		On exit  : 0/0
 16969 ;;		Unchanged: 0/0
 16970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16971 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16972 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16974 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16975 ;;Total ram usage:        4 bytes
 16976 ;; Hardware stack levels used:    1
 16977 ;; Hardware stack levels required when called:    8
 16978 ;; This function calls:
 16979 ;;		_eusartSend
 16980 ;; This function is called by:
 16981 ;;		_main
 16982 ;; This function uses a non-reentrant model
 16983 ;;
 16984                           
 16985                           	psect	text91
 16986  015AC2                     __ptext91:
 16987                           	opt stack 0
 16988  015AC2                     _Drive:
 16989                           	opt stack 22
 16990                           
 16991                           ;main.c: 190: int Rad = 32768;
 16992                           
 16993                           ; BSR set to: 0
 16994                           ;incstack = 0
 16995  015AC2  0E80               	movlw	128
 16996  015AC4  0100               	movlb	0	; () banked
 16997  015AC6  6F64               	movwf	(Drive@Rad+1)& (0+255),b
 16998  015AC8  0E00               	movlw	0
 16999  015ACA  6F63               	movwf	Drive@Rad& (0+255),b
 17000                           
 17001                           ; BSR set to: 0
 17002                           ;main.c: 191: eusartSend(137);
 17003  015ACC  0E89               	movlw	137
 17004  015ACE  EC09  F0B0         	call	_eusartSend
 17005                           
 17006                           ;main.c: 192: eusartSend((((Speed)>>8) & 255));
 17007  015AD2  0100               	movlb	0	; () banked
 17008  015AD4  5162               	movf	(Drive@Speed+1)& (0+255),w,b
 17009  015AD6  EC09  F0B0         	call	_eusartSend
 17010                           
 17011                           ;main.c: 193: eusartSend(((Speed) & 255));
 17012  015ADA  0100               	movlb	0	; () banked
 17013  015ADC  5161               	movf	Drive@Speed& (0+255),w,b
 17014  015ADE  EC09  F0B0         	call	_eusartSend
 17015                           
 17016                           ;main.c: 194: eusartSend((((Rad)>>8) & 255));
 17017  015AE2  0100               	movlb	0	; () banked
 17018  015AE4  5164               	movf	(Drive@Rad+1)& (0+255),w,b
 17019  015AE6  EC09  F0B0         	call	_eusartSend
 17020                           
 17021                           ;main.c: 195: eusartSend(((Rad) & 255));
 17022  015AEA  0100               	movlb	0	; () banked
 17023  015AEC  5163               	movf	Drive@Rad& (0+255),w,b
 17024  015AEE  EC09  F0B0         	call	_eusartSend
 17025  015AF2  0012               	return		;funcret
 17026  015AF4                     __end_of_Drive:
 17027                           	opt stack 0
 17028                           tosu	equ	0xFFF
 17029                           tosh	equ	0xFFE
 17030                           tosl	equ	0xFFD
 17031                           pclath	equ	0xFFA
 17032                           tblptru	equ	0xFF8
 17033                           tblptrh	equ	0xFF7
 17034                           tblptrl	equ	0xFF6
 17035                           tablat	equ	0xFF5
 17036                           prodh	equ	0xFF4
 17037                           prodl	equ	0xFF3
 17038                           intcon	equ	0xFF2
 17039                           indf0	equ	0xFEF
 17040                           postinc0	equ	0xFEE
 17041                           fsr0h	equ	0xFEA
 17042                           fsr0l	equ	0xFE9
 17043                           wreg	equ	0xFE8
 17044                           indf1	equ	0xFE7
 17045                           postdec1	equ	0xFE5
 17046                           fsr1h	equ	0xFE2
 17047                           fsr1l	equ	0xFE1
 17048                           indf2	equ	0xFDF
 17049                           postinc2	equ	0xFDE
 17050                           postdec2	equ	0xFDD
 17051                           plusw2	equ	0xFDB
 17052                           fsr2h	equ	0xFDA
 17053                           fsr2l	equ	0xFD9
 17054                           status	equ	0xFD8
 17055                           
 17056 ;; *************** function _Console_Init *****************
 17057 ;; Defined at:
 17058 ;;		line 157 in file "Library/Console.c"
 17059 ;; Parameters:    Size  Location     Type
 17060 ;;		None
 17061 ;; Auto vars:     Size  Location     Type
 17062 ;;  y               1    3[BANK0 ] unsigned char 
 17063 ;;  x               1    2[BANK0 ] unsigned char 
 17064 ;; Return value:  Size  Location     Type
 17065 ;;                  1    wreg      void 
 17066 ;; Registers used:
 17067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17068 ;; Tracked objects:
 17069 ;;		On entry : 0/0
 17070 ;;		On exit  : 0/0
 17071 ;;		Unchanged: 0/0
 17072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17076 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17077 ;;Total ram usage:        4 bytes
 17078 ;; Hardware stack levels used:    1
 17079 ;; Hardware stack levels required when called:    7
 17080 ;; This function calls:
 17081 ;;		Nothing
 17082 ;; This function is called by:
 17083 ;;		_main
 17084 ;; This function uses a non-reentrant model
 17085 ;;
 17086                           
 17087                           	psect	text92
 17088  014E2A                     __ptext92:
 17089                           	opt stack 0
 17090  014E2A                     _Console_Init:
 17091                           	opt stack 23
 17092                           
 17093                           ;Console.c: 160: lBufferX = 0;
 17094                           
 17095                           ;incstack = 0
 17096  014E2A  0E00               	movlw	0
 17097  014E2C  0100               	movlb	0	; () banked
 17098  014E2E  6FF4               	movwf	_lBufferX& (0+255),b
 17099                           
 17100                           ;Console.c: 161: lBufferY = 0;
 17101  014E30  0E00               	movlw	0
 17102  014E32  6FF3               	movwf	_lBufferY& (0+255),b
 17103                           
 17104                           ;Console.c: 163: UINT8 x, y;
 17105                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 17106  014E34  0E00               	movlw	0
 17107  014E36  6F62               	movwf	Console_Init@x& (0+255),b
 17108  014E38                     l15216:
 17109                           
 17110                           ; BSR set to: 0
 17111  014E38  0E13               	movlw	19
 17112  014E3A  6562               	cpfsgt	Console_Init@x& (0+255),b
 17113  014E3C  D001               	goto	l976
 17114  014E3E  0012               	return	
 17115  014E40                     l976:
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;Console.c: 165: {
 17119                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 17120                           
 17121                           ; BSR set to: 0
 17122  014E40  0E00               	movlw	0
 17123  014E42  6F63               	movwf	Console_Init@y& (0+255),b
 17124  014E44                     l15222:
 17125                           
 17126                           ; BSR set to: 0
 17127  014E44  0E0E               	movlw	14
 17128  014E46  6563               	cpfsgt	Console_Init@y& (0+255),b
 17129  014E48  D001               	goto	l978
 17130  014E4A  D022               	goto	u12510
 17131  014E4C                     l978:
 17132                           
 17133                           ; BSR set to: 0
 17134                           ;Console.c: 167: {
 17135                           ;Console.c: 168: lBuffer[y][x] = '\0';
 17136                           
 17137                           ; BSR set to: 0
 17138  014E4C  5163               	movf	Console_Init@y& (0+255),w,b
 17139  014E4E  0D14               	mullw	20
 17140  014E50  0E18               	movlw	low _lBuffer
 17141  014E52  6F60               	movwf	??_Console_Init& (0+255),b
 17142  014E54  0E03               	movlw	high _lBuffer
 17143  014E56  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 17144  014E58  50F3               	movf	prodl,w,c
 17145  014E5A  2760               	addwf	??_Console_Init& (0+255),f,b
 17146  014E5C  50F4               	movf	prodh,w,c
 17147  014E5E  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 17148  014E60  5162               	movf	Console_Init@x& (0+255),w,b
 17149  014E62  0D01               	mullw	1
 17150  014E64  50F3               	movf	prodl,w,c
 17151  014E66  2560               	addwf	??_Console_Init& (0+255),w,b
 17152  014E68  6ED9               	movwf	fsr2l,c
 17153  014E6A  50F4               	movf	prodh,w,c
 17154  014E6C  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 17155  014E6E  6EDA               	movwf	fsr2h,c
 17156  014E70  0E00               	movlw	0
 17157  014E72  6EDF               	movwf	indf2,c
 17158                           
 17159                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 17160  014E74  5163               	movf	Console_Init@y& (0+255),w,b
 17161  014E76  0D02               	mullw	2
 17162  014E78  0E64               	movlw	low _lCBuffer
 17163  014E7A  24F3               	addwf	prodl,w,c
 17164  014E7C  6ED9               	movwf	fsr2l,c
 17165  014E7E  0E02               	movlw	high _lCBuffer
 17166  014E80  20F4               	addwfc	prodh,w,c
 17167  014E82  6EDA               	movwf	fsr2h,c
 17168  014E84  0EFF               	movlw	255
 17169  014E86  6EDE               	movwf	postinc2,c
 17170  014E88  0EFF               	movlw	255
 17171  014E8A  6EDD               	movwf	postdec2,c
 17172                           
 17173                           ; BSR set to: 0
 17174  014E8C  2B63               	incf	Console_Init@y& (0+255),f,b
 17175  014E8E  D7DA               	goto	l15222
 17176  014E90                     u12510:
 17177                           
 17178                           ; BSR set to: 0
 17179                           
 17180                           ; BSR set to: 0
 17181  014E90  2B62               	incf	Console_Init@x& (0+255),f,b
 17182  014E92  D7D2               	goto	l15216
 17183  014E94                     __end_of_Console_Init:
 17184                           	opt stack 0
 17185                           tosu	equ	0xFFF
 17186                           tosh	equ	0xFFE
 17187                           tosl	equ	0xFFD
 17188                           pclath	equ	0xFFA
 17189                           tblptru	equ	0xFF8
 17190                           tblptrh	equ	0xFF7
 17191                           tblptrl	equ	0xFF6
 17192                           tablat	equ	0xFF5
 17193                           prodh	equ	0xFF4
 17194                           prodl	equ	0xFF3
 17195                           intcon	equ	0xFF2
 17196                           indf0	equ	0xFEF
 17197                           postinc0	equ	0xFEE
 17198                           fsr0h	equ	0xFEA
 17199                           fsr0l	equ	0xFE9
 17200                           wreg	equ	0xFE8
 17201                           indf1	equ	0xFE7
 17202                           postdec1	equ	0xFE5
 17203                           fsr1h	equ	0xFE2
 17204                           fsr1l	equ	0xFE1
 17205                           indf2	equ	0xFDF
 17206                           postinc2	equ	0xFDE
 17207                           postdec2	equ	0xFDD
 17208                           plusw2	equ	0xFDB
 17209                           fsr2h	equ	0xFDA
 17210                           fsr2l	equ	0xFD9
 17211                           status	equ	0xFD8
 17212                           
 17213 ;; *************** function _Closest_Object2 *****************
 17214 ;; Defined at:
 17215 ;;		line 351 in file "main.c"
 17216 ;; Parameters:    Size  Location     Type
 17217 ;;		None
 17218 ;; Auto vars:     Size  Location     Type
 17219 ;;		None
 17220 ;; Return value:  Size  Location     Type
 17221 ;;                  1    wreg      void 
 17222 ;; Registers used:
 17223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17224 ;; Tracked objects:
 17225 ;;		On entry : 0/0
 17226 ;;		On exit  : 0/0
 17227 ;;		Unchanged: 0/0
 17228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17233 ;;Total ram usage:        0 bytes
 17234 ;; Hardware stack levels used:    1
 17235 ;; Hardware stack levels required when called:   13
 17236 ;; This function calls:
 17237 ;;		_ADCAverage
 17238 ;;		_Console_Render
 17239 ;;		_SteppingCW
 17240 ;;		_printf
 17241 ;; This function is called by:
 17242 ;;		_main
 17243 ;; This function uses a non-reentrant model
 17244 ;;
 17245                           
 17246                           	psect	text93
 17247  014B7E                     __ptext93:
 17248                           	opt stack 0
 17249  014B7E                     _Closest_Object2:
 17250                           	opt stack 17
 17251                           
 17252                           ;main.c: 352: while (!CW_Count <= 0) {
 17253                           
 17254                           ; BSR set to: 0
 17255                           ;incstack = 0
 17256  014B7E  D032               	goto	l2214
 17257  014B80                     
 17258                           ;main.c: 353: CW_Count--;
 17259  014B80  0101               	movlb	1	; () banked
 17260  014B82  0728               	decf	_CW_Count& (0+255),f,b
 17261  014B84  A0D8               	btfss	status,0,c
 17262  014B86  0729               	decf	(_CW_Count+1)& (0+255),f,b
 17263                           
 17264                           ; BSR set to: 1
 17265                           ;main.c: 354: printf("%c", (char)35);
 17266  014B88  0EFC               	movlw	low STR_1
 17267  014B8A  0100               	movlb	0	; () banked
 17268  014B8C  6F75               	movwf	printf@f& (0+255),b
 17269  014B8E  0EFF               	movlw	high STR_1
 17270  014B90  6F76               	movwf	(printf@f+1)& (0+255),b
 17271  014B92  0E00               	movlw	0
 17272  014B94  6F78               	movwf	(?_printf+3)& (0+255),b
 17273  014B96  0E23               	movlw	35
 17274  014B98  6F77               	movwf	(?_printf+2)& (0+255),b
 17275  014B9A  EC4B  F096         	call	_printf	;wreg free
 17276                           
 17277                           ;main.c: 355: printf("Stepped 360 degrees");
 17278  014B9E  0E69               	movlw	low STR_12
 17279  014BA0  0100               	movlb	0	; () banked
 17280  014BA2  6F75               	movwf	printf@f& (0+255),b
 17281  014BA4  0EFF               	movlw	high STR_12
 17282  014BA6  6F76               	movwf	(printf@f+1)& (0+255),b
 17283  014BA8  EC4B  F096         	call	_printf	;wreg free
 17284                           
 17285                           ;main.c: 356: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17286  014BAC  0E0B               	movlw	low STR_13
 17287  014BAE  0100               	movlb	0	; () banked
 17288  014BB0  6F75               	movwf	printf@f& (0+255),b
 17289  014BB2  0EFF               	movlw	high STR_13
 17290  014BB4  6F76               	movwf	(printf@f+1)& (0+255),b
 17291  014BB6  C04A  F077         	movff	_Low_Sensor,?_printf+2
 17292  014BBA  C04B  F078         	movff	_Low_Sensor+1,?_printf+3
 17293  014BBE  EC4B  F096         	call	_printf	;wreg free
 17294                           
 17295                           ;main.c: 357: printf("\nGoing back to: %d", Close_Pos);
 17296  014BC2  0EA3               	movlw	low STR_14
 17297  014BC4  0100               	movlb	0	; () banked
 17298  014BC6  6F75               	movwf	printf@f& (0+255),b
 17299  014BC8  0EFF               	movlw	high STR_14
 17300  014BCA  6F76               	movwf	(printf@f+1)& (0+255),b
 17301  014BCC  C02B  F077         	movff	_Close_Pos,?_printf+2
 17302  014BD0  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17303  014BD4  EC4B  F096         	call	_printf	;wreg free
 17304                           
 17305                           ;main.c: 358: Console_Render();
 17306  014BD8  EC6F  F092         	call	_Console_Render	;wreg free
 17307                           
 17308                           ;main.c: 359: ADCAverage();
 17309  014BDC  ECE1  F088         	call	_ADCAverage	;wreg free
 17310                           
 17311                           ;main.c: 360: SteppingCW();
 17312  014BE0  ECB4  F0AA         	call	_SteppingCW	;wreg free
 17313  014BE4                     l2214:
 17314  014BE4  0101               	movlb	1	; () banked
 17315  014BE6  5128               	movf	_CW_Count& (0+255),w,b
 17316  014BE8  1129               	iorwf	(_CW_Count+1)& (0+255),w,b
 17317  014BEA  A4D8               	btfss	status,2,c
 17318  014BEC  D7C9               	goto	l2215
 17319                           
 17320                           ; BSR set to: 1
 17321                           ;main.c: 361: }
 17322                           ;main.c: 362: RD5 = 0;
 17323  014BEE  9A83               	bcf	3971,5,c	;volatile
 17324                           
 17325                           ;main.c: 363: RD7 = 0;
 17326  014BF0  9E83               	bcf	3971,7,c	;volatile
 17327                           
 17328                           ;main.c: 364: RA2 = 0;
 17329  014BF2  9480               	bcf	3968,2,c	;volatile
 17330                           
 17331                           ;main.c: 365: RA3 = 0;
 17332  014BF4  9680               	bcf	3968,3,c	;volatile
 17333                           
 17334                           ; BSR set to: 1
 17335                           
 17336                           ;main.c: 366: return;
 17337  014BF6  0012               	return		;funcret
 17338  014BF8                     __end_of_Closest_Object2:
 17339                           	opt stack 0
 17340                           tosu	equ	0xFFF
 17341                           tosh	equ	0xFFE
 17342                           tosl	equ	0xFFD
 17343                           pclath	equ	0xFFA
 17344                           tblptru	equ	0xFF8
 17345                           tblptrh	equ	0xFF7
 17346                           tblptrl	equ	0xFF6
 17347                           tablat	equ	0xFF5
 17348                           prodh	equ	0xFF4
 17349                           prodl	equ	0xFF3
 17350                           intcon	equ	0xFF2
 17351                           indf0	equ	0xFEF
 17352                           postinc0	equ	0xFEE
 17353                           fsr0h	equ	0xFEA
 17354                           fsr0l	equ	0xFE9
 17355                           wreg	equ	0xFE8
 17356                           indf1	equ	0xFE7
 17357                           postdec1	equ	0xFE5
 17358                           fsr1h	equ	0xFE2
 17359                           fsr1l	equ	0xFE1
 17360                           indf2	equ	0xFDF
 17361                           postinc2	equ	0xFDE
 17362                           postdec2	equ	0xFDD
 17363                           plusw2	equ	0xFDB
 17364                           fsr2h	equ	0xFDA
 17365                           fsr2l	equ	0xFD9
 17366                           status	equ	0xFD8
 17367                           
 17368 ;; *************** function _SteppingCW *****************
 17369 ;; Defined at:
 17370 ;;		line 286 in file "main.c"
 17371 ;; Parameters:    Size  Location     Type
 17372 ;;		None
 17373 ;; Auto vars:     Size  Location     Type
 17374 ;;		None
 17375 ;; Return value:  Size  Location     Type
 17376 ;;                  2  2191[None  ] int 
 17377 ;; Registers used:
 17378 ;;		wreg, status,2, status,0, cstack
 17379 ;; Tracked objects:
 17380 ;;		On entry : 0/0
 17381 ;;		On exit  : 0/0
 17382 ;;		Unchanged: 0/0
 17383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17388 ;;Total ram usage:        0 bytes
 17389 ;; Hardware stack levels used:    1
 17390 ;; Hardware stack levels required when called:    9
 17391 ;; This function calls:
 17392 ;;		_STP1
 17393 ;;		_STP2
 17394 ;;		_STP3
 17395 ;;		_STP4
 17396 ;;		_delay_ms
 17397 ;; This function is called by:
 17398 ;;		_Closest_Object2
 17399 ;;		_Sensor_Observe
 17400 ;; This function uses a non-reentrant model
 17401 ;;
 17402                           
 17403                           	psect	text94
 17404  015568                     __ptext94:
 17405                           	opt stack 0
 17406  015568                     _SteppingCW:
 17407                           	opt stack 20
 17408                           
 17409                           ;main.c: 287: STP1();
 17410                           
 17411                           ; BSR set to: 1
 17412                           ;incstack = 0
 17413  015568  EC47  F0B0         	call	_STP1	;wreg free
 17414                           
 17415                           ;main.c: 288: delay_ms(2);
 17416  01556C  0E00               	movlw	0
 17417  01556E  0100               	movlb	0	; () banked
 17418  015570  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17419  015572  0E02               	movlw	2
 17420  015574  6F60               	movwf	delay_ms@ms& (0+255),b
 17421  015576  EC75  F0A8         	call	_delay_ms	;wreg free
 17422                           
 17423                           ;main.c: 289: STP2();
 17424  01557A  EC43  F0B0         	call	_STP2	;wreg free
 17425                           
 17426                           ;main.c: 290: delay_ms(2);
 17427  01557E  0E00               	movlw	0
 17428  015580  0100               	movlb	0	; () banked
 17429  015582  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17430  015584  0E02               	movlw	2
 17431  015586  6F60               	movwf	delay_ms@ms& (0+255),b
 17432  015588  EC75  F0A8         	call	_delay_ms	;wreg free
 17433                           
 17434                           ;main.c: 291: STP3();
 17435  01558C  EC3F  F0B0         	call	_STP3	;wreg free
 17436                           
 17437                           ;main.c: 292: delay_ms(2);
 17438  015590  0E00               	movlw	0
 17439  015592  0100               	movlb	0	; () banked
 17440  015594  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17441  015596  0E02               	movlw	2
 17442  015598  6F60               	movwf	delay_ms@ms& (0+255),b
 17443  01559A  EC75  F0A8         	call	_delay_ms	;wreg free
 17444                           
 17445                           ;main.c: 293: STP4();
 17446  01559E  EC3B  F0B0         	call	_STP4	;wreg free
 17447                           
 17448                           ;main.c: 294: delay_ms(2);
 17449  0155A2  0E00               	movlw	0
 17450  0155A4  0100               	movlb	0	; () banked
 17451  0155A6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17452  0155A8  0E02               	movlw	2
 17453  0155AA  6F60               	movwf	delay_ms@ms& (0+255),b
 17454  0155AC  EC75  F0A8         	call	_delay_ms	;wreg free
 17455  0155B0  0012               	return		;funcret
 17456  0155B2                     __end_of_SteppingCW:
 17457                           	opt stack 0
 17458                           tosu	equ	0xFFF
 17459                           tosh	equ	0xFFE
 17460                           tosl	equ	0xFFD
 17461                           pclath	equ	0xFFA
 17462                           tblptru	equ	0xFF8
 17463                           tblptrh	equ	0xFF7
 17464                           tblptrl	equ	0xFF6
 17465                           tablat	equ	0xFF5
 17466                           prodh	equ	0xFF4
 17467                           prodl	equ	0xFF3
 17468                           intcon	equ	0xFF2
 17469                           indf0	equ	0xFEF
 17470                           postinc0	equ	0xFEE
 17471                           fsr0h	equ	0xFEA
 17472                           fsr0l	equ	0xFE9
 17473                           wreg	equ	0xFE8
 17474                           indf1	equ	0xFE7
 17475                           postdec1	equ	0xFE5
 17476                           fsr1h	equ	0xFE2
 17477                           fsr1l	equ	0xFE1
 17478                           indf2	equ	0xFDF
 17479                           postinc2	equ	0xFDE
 17480                           postdec2	equ	0xFDD
 17481                           plusw2	equ	0xFDB
 17482                           fsr2h	equ	0xFDA
 17483                           fsr2l	equ	0xFD9
 17484                           status	equ	0xFD8
 17485                           
 17486 ;; *************** function _Closest_Object *****************
 17487 ;; Defined at:
 17488 ;;		line 399 in file "main.c"
 17489 ;; Parameters:    Size  Location     Type
 17490 ;;		None
 17491 ;; Auto vars:     Size  Location     Type
 17492 ;;		None
 17493 ;; Return value:  Size  Location     Type
 17494 ;;                  1    wreg      void 
 17495 ;; Registers used:
 17496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17506 ;;Total ram usage:        0 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:   13
 17509 ;; This function calls:
 17510 ;;		_ADCAverage
 17511 ;;		_Console_Render
 17512 ;;		_SteppingCCW
 17513 ;;		_printf
 17514 ;; This function is called by:
 17515 ;;		_main
 17516 ;; This function uses a non-reentrant model
 17517 ;;
 17518                           
 17519                           	psect	text95
 17520  0140DE                     __ptext95:
 17521                           	opt stack 0
 17522  0140DE                     _Closest_Object:
 17523                           	opt stack 17
 17524                           
 17525                           ;main.c: 400: printf("%c", (char)35);
 17526                           
 17527                           ;incstack = 0
 17528  0140DE  0EFC               	movlw	low STR_1
 17529  0140E0  0100               	movlb	0	; () banked
 17530  0140E2  6F75               	movwf	printf@f& (0+255),b
 17531  0140E4  0EFF               	movlw	high STR_1
 17532  0140E6  6F76               	movwf	(printf@f+1)& (0+255),b
 17533  0140E8  0E00               	movlw	0
 17534  0140EA  6F78               	movwf	(?_printf+3)& (0+255),b
 17535  0140EC  0E23               	movlw	35
 17536  0140EE  6F77               	movwf	(?_printf+2)& (0+255),b
 17537  0140F0  EC4B  F096         	call	_printf	;wreg free
 17538                           
 17539                           ;main.c: 401: printf("Stepped 360 degrees");
 17540  0140F4  0E69               	movlw	low STR_12
 17541  0140F6  0100               	movlb	0	; () banked
 17542  0140F8  6F75               	movwf	printf@f& (0+255),b
 17543  0140FA  0EFF               	movlw	high STR_12
 17544  0140FC  6F76               	movwf	(printf@f+1)& (0+255),b
 17545  0140FE  EC4B  F096         	call	_printf	;wreg free
 17546                           
 17547                           ;main.c: 402: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17548  014102  0E0B               	movlw	low STR_13
 17549  014104  0100               	movlb	0	; () banked
 17550  014106  6F75               	movwf	printf@f& (0+255),b
 17551  014108  0EFF               	movlw	high STR_13
 17552  01410A  6F76               	movwf	(printf@f+1)& (0+255),b
 17553  01410C  C04A  F077         	movff	_Low_Sensor,?_printf+2
 17554  014110  C04B  F078         	movff	_Low_Sensor+1,?_printf+3
 17555  014114  EC4B  F096         	call	_printf	;wreg free
 17556                           
 17557                           ;main.c: 403: printf("\nGoing back to: %d", Close_Pos);
 17558  014118  0EA3               	movlw	low STR_14
 17559  01411A  0100               	movlb	0	; () banked
 17560  01411C  6F75               	movwf	printf@f& (0+255),b
 17561  01411E  0EFF               	movlw	high STR_14
 17562  014120  6F76               	movwf	(printf@f+1)& (0+255),b
 17563  014122  C02B  F077         	movff	_Close_Pos,?_printf+2
 17564  014126  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17565  01412A  EC4B  F096         	call	_printf	;wreg free
 17566                           
 17567                           ;main.c: 404: Console_Render();
 17568  01412E  EC6F  F092         	call	_Console_Render	;wreg free
 17569                           
 17570                           ;main.c: 405: while (!CCW_Count <= 0) {
 17571  014132  D020               	goto	l2227
 17572  014134                     
 17573                           ;main.c: 406: CCW_Count--;
 17574  014134  0101               	movlb	1	; () banked
 17575  014136  072A               	decf	_CCW_Count& (0+255),f,b
 17576  014138  A0D8               	btfss	status,0,c
 17577  01413A  072B               	decf	(_CCW_Count+1)& (0+255),f,b
 17578                           
 17579                           ; BSR set to: 1
 17580                           ;main.c: 407: printf("%c", (char)35);
 17581  01413C  0EFC               	movlw	low STR_1
 17582  01413E  0100               	movlb	0	; () banked
 17583  014140  6F75               	movwf	printf@f& (0+255),b
 17584  014142  0EFF               	movlw	high STR_1
 17585  014144  6F76               	movwf	(printf@f+1)& (0+255),b
 17586  014146  0E00               	movlw	0
 17587  014148  6F78               	movwf	(?_printf+3)& (0+255),b
 17588  01414A  0E23               	movlw	35
 17589  01414C  6F77               	movwf	(?_printf+2)& (0+255),b
 17590  01414E  EC4B  F096         	call	_printf	;wreg free
 17591                           
 17592                           ;main.c: 408: printf("\nSteps Travelled: %d", CCW_Count);
 17593  014152  0E54               	movlw	low STR_29
 17594  014154  0100               	movlb	0	; () banked
 17595  014156  6F75               	movwf	printf@f& (0+255),b
 17596  014158  0EFF               	movlw	high STR_29
 17597  01415A  6F76               	movwf	(printf@f+1)& (0+255),b
 17598  01415C  C12A  F077         	movff	_CCW_Count,?_printf+2
 17599  014160  C12B  F078         	movff	_CCW_Count+1,?_printf+3
 17600  014164  EC4B  F096         	call	_printf	;wreg free
 17601                           
 17602                           ;main.c: 409: Console_Render();
 17603  014168  EC6F  F092         	call	_Console_Render	;wreg free
 17604                           
 17605                           ;main.c: 410: ADCAverage();
 17606  01416C  ECE1  F088         	call	_ADCAverage	;wreg free
 17607                           
 17608                           ;main.c: 411: SteppingCCW();
 17609  014170  ECD9  F0AA         	call	_SteppingCCW	;wreg free
 17610  014174                     l2227:
 17611  014174  0101               	movlb	1	; () banked
 17612  014176  512A               	movf	_CCW_Count& (0+255),w,b
 17613  014178  112B               	iorwf	(_CCW_Count+1)& (0+255),w,b
 17614  01417A  A4D8               	btfss	status,2,c
 17615  01417C  D7DB               	goto	l2228
 17616                           
 17617                           ; BSR set to: 1
 17618                           ;main.c: 412: }
 17619                           ;main.c: 413: RD5 = 0;
 17620  01417E  9A83               	bcf	3971,5,c	;volatile
 17621                           
 17622                           ;main.c: 414: RD7 = 0;
 17623  014180  9E83               	bcf	3971,7,c	;volatile
 17624                           
 17625                           ;main.c: 415: RA2 = 0;
 17626  014182  9480               	bcf	3968,2,c	;volatile
 17627                           
 17628                           ;main.c: 416: RA3 = 0;
 17629  014184  9680               	bcf	3968,3,c	;volatile
 17630                           
 17631                           ; BSR set to: 1
 17632  014186  0012               	return		;funcret
 17633  014188                     __end_of_Closest_Object:
 17634                           	opt stack 0
 17635                           tosu	equ	0xFFF
 17636                           tosh	equ	0xFFE
 17637                           tosl	equ	0xFFD
 17638                           pclath	equ	0xFFA
 17639                           tblptru	equ	0xFF8
 17640                           tblptrh	equ	0xFF7
 17641                           tblptrl	equ	0xFF6
 17642                           tablat	equ	0xFF5
 17643                           prodh	equ	0xFF4
 17644                           prodl	equ	0xFF3
 17645                           intcon	equ	0xFF2
 17646                           indf0	equ	0xFEF
 17647                           postinc0	equ	0xFEE
 17648                           fsr0h	equ	0xFEA
 17649                           fsr0l	equ	0xFE9
 17650                           wreg	equ	0xFE8
 17651                           indf1	equ	0xFE7
 17652                           postdec1	equ	0xFE5
 17653                           fsr1h	equ	0xFE2
 17654                           fsr1l	equ	0xFE1
 17655                           indf2	equ	0xFDF
 17656                           postinc2	equ	0xFDE
 17657                           postdec2	equ	0xFDD
 17658                           plusw2	equ	0xFDB
 17659                           fsr2h	equ	0xFDA
 17660                           fsr2l	equ	0xFD9
 17661                           status	equ	0xFD8
 17662                           
 17663 ;; *************** function _printf *****************
 17664 ;; Defined at:
 17665 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 17666 ;; Parameters:    Size  Location     Type
 17667 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 17668 ;;		 -> STR_72(12), STR_71(19), STR_70(19), STR_69(19), 
 17669 ;;		 -> STR_68(19), STR_67(19), STR_66(19), STR_65(19), 
 17670 ;;		 -> STR_64(19), STR_63(16), STR_62(28), STR_61(3), 
 17671 ;;		 -> STR_60(19), STR_59(19), STR_58(19), STR_57(19), 
 17672 ;;		 -> STR_56(19), STR_55(19), STR_54(19), STR_53(19), 
 17673 ;;		 -> STR_52(11), STR_51(23), STR_50(3), STR_49(19), 
 17674 ;;		 -> STR_48(19), STR_47(19), STR_46(19), STR_45(19), 
 17675 ;;		 -> STR_44(19), STR_43(19), STR_42(19), STR_41(22), 
 17676 ;;		 -> STR_40(3), STR_39(19), STR_38(19), STR_37(19), 
 17677 ;;		 -> STR_36(19), STR_35(28), STR_34(28), STR_33(30), 
 17678 ;;		 -> STR_32(28), STR_31(15), STR_30(3), STR_29(21), 
 17679 ;;		 -> STR_28(3), STR_27(19), STR_26(28), STR_25(20), 
 17680 ;;		 -> STR_24(3), STR_23(19), STR_22(19), STR_21(19), 
 17681 ;;		 -> STR_20(19), STR_19(19), STR_18(19), STR_17(19), 
 17682 ;;		 -> STR_16(19), STR_15(3), STR_14(19), STR_13(28), 
 17683 ;;		 -> STR_12(20), STR_11(3), STR_10(19), STR_9(19), 
 17684 ;;		 -> STR_8(19), STR_7(19), STR_6(19), STR_5(19), 
 17685 ;;		 -> STR_4(19), STR_3(16), STR_2(19), STR_1(3), 
 17686 ;; Auto vars:     Size  Location     Type
 17687 ;;  tmpval          4    0        struct .
 17688 ;;  cp              3    0        PTR const unsigned char 
 17689 ;;  val             2   30[BANK0 ] unsigned int 
 17690 ;;  ap              2   28[BANK0 ] PTR void [1]
 17691 ;;		 -> ?_printf(2), 
 17692 ;;  len             2    0        unsigned int 
 17693 ;;  c               1   32[BANK0 ] char 
 17694 ;;  prec            1   27[BANK0 ] char 
 17695 ;;  flag            1   26[BANK0 ] unsigned char 
 17696 ;; Return value:  Size  Location     Type
 17697 ;;                  2   21[BANK0 ] int 
 17698 ;; Registers used:
 17699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17700 ;; Tracked objects:
 17701 ;;		On entry : 0/0
 17702 ;;		On exit  : 0/0
 17703 ;;		Unchanged: 0/0
 17704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17705 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17706 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17708 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17709 ;;Total ram usage:       12 bytes
 17710 ;; Hardware stack levels used:    1
 17711 ;; Hardware stack levels required when called:   12
 17712 ;; This function calls:
 17713 ;;		___lwdiv
 17714 ;;		___lwmod
 17715 ;;		_putch
 17716 ;; This function is called by:
 17717 ;;		_Sensor_Observe2
 17718 ;;		_Closest_Object2
 17719 ;;		_Sensor_Observe
 17720 ;;		_Closest_Object
 17721 ;;		_main
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           	psect	text96
 17726  012C96                     __ptext96:
 17727                           	opt stack 0
 17728  012C96                     _printf:
 17729                           	opt stack 18
 17730                           
 17731                           ;doprnt.c: 466: va_list ap;
 17732                           ;doprnt.c: 499: signed char c;
 17733                           ;doprnt.c: 506: signed char prec;
 17734                           ;doprnt.c: 508: unsigned char flag;
 17735                           ;doprnt.c: 523: union {
 17736                           ;doprnt.c: 524: unsigned long vd;
 17737                           ;doprnt.c: 525: double integ;
 17738                           ;doprnt.c: 526: } tmpval;
 17739                           ;doprnt.c: 528: unsigned int val;
 17740                           ;doprnt.c: 529: unsigned len;
 17741                           ;doprnt.c: 530: const char * cp;
 17742                           ;doprnt.c: 533: *ap = __va_start();
 17743                           
 17744                           ; BSR set to: 1
 17745                           ;incstack = 0
 17746  012C96  0E77               	movlw	low (?_printf+2)
 17747  012C98  0100               	movlb	0	; () banked
 17748  012C9A  6F7C               	movwf	printf@ap& (0+255),b
 17749  012C9C  0E00               	movlw	high (?_printf+2)
 17750  012C9E  6F7D               	movwf	(printf@ap+1)& (0+255),b
 17751                           
 17752                           ;doprnt.c: 536: while(c = *f++) {
 17753  012CA0  D09E               	goto	u12230
 17754  012CA2                     
 17755                           ; BSR set to: 0
 17756                           ;doprnt.c: 538: if(c != '%')
 17757                           
 17758                           ; BSR set to: 0
 17759  012CA2  0E25               	movlw	37
 17760  012CA4  1980               	xorwf	printf@c& (0+255),w,b
 17761  012CA6  B4D8               	btfsc	status,2,c
 17762  012CA8  D004               	goto	l2287
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;doprnt.c: 540: {
 17766                           ;doprnt.c: 541: (putch(c) );
 17767  012CAA  5180               	movf	printf@c& (0+255),w,b
 17768  012CAC  EC02  F0B0         	call	_putch
 17769                           
 17770                           ;doprnt.c: 542: continue;
 17771  012CB0  D096               	goto	u12230
 17772  012CB2                     l2287:
 17773                           
 17774                           ;doprnt.c: 543: }
 17775                           ;doprnt.c: 548: flag = 0;
 17776  012CB2  0E00               	movlw	0
 17777  012CB4  0100               	movlb	0	; () banked
 17778  012CB6  6F7A               	movwf	printf@flag& (0+255),b
 17779                           
 17780                           ;doprnt.c: 635: switch(c = *f++) {
 17781  012CB8  D00E               	goto	l2288
 17782  012CBA                     
 17783                           ; BSR set to: 0
 17784                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17785                           
 17786                           ; BSR set to: 0
 17787  012CBA  C07C  FFD9         	movff	printf@ap,fsr2l
 17788  012CBE  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17789  012CC2  50DF               	movf	indf2,w,c
 17790  012CC4  6F80               	movwf	printf@c& (0+255),b
 17791                           
 17792                           ; BSR set to: 0
 17793  012CC6  0E02               	movlw	2
 17794  012CC8  277C               	addwf	printf@ap& (0+255),f,b
 17795  012CCA  0E00               	movlw	0
 17796  012CCC  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17797  012CCE                     
 17798                           ; BSR set to: 0
 17799                           ;doprnt.c: 809: (putch(c) );
 17800                           
 17801                           ; BSR set to: 0
 17802  012CCE  5180               	movf	printf@c& (0+255),w,b
 17803  012CD0  EC02  F0B0         	call	_putch
 17804                           
 17805                           ;doprnt.c: 810: continue;
 17806  012CD4  D084               	goto	u12230
 17807  012CD6                     l2288:
 17808  012CD6  C075  FFF6         	movff	printf@f,tblptrl
 17809  012CDA  C076  FFF7         	movff	printf@f+1,tblptrh
 17810  012CDE  0100               	movlb	0	; () banked
 17811  012CE0  4B75               	infsnz	printf@f& (0+255),f,b
 17812  012CE2  2B76               	incf	(printf@f+1)& (0+255),f,b
 17813  012CE4                     	if	0	;tblptru may be non-zero
 17814  012CE4                     	endif
 17815  012CE4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 17816  012CE4  0E00               	movlw	low (__mediumconst shr (0+16))
 17817  012CE6  6EF8               	movwf	tblptru,c
 17818  012CE8                     	endif
 17819  012CE8  0008               	tblrd		*
 17820  012CEA  CFF5 F080          	movff	tablat,printf@c
 17821  012CEE  5180               	movf	printf@c& (0+255),w,b
 17822                           
 17823                           ; Switch size 1, requested type "space"
 17824                           ; Number of cases is 4, Range of values is 0 to 105
 17825                           ; switch strategies available:
 17826                           ; Name         Instructions Cycles
 17827                           ; simple_byte           13     7 (average)
 17828                           ;	Chosen strategy is simple_byte
 17829  012CF0  0A00               	xorlw	0	; case 0
 17830  012CF2  B4D8               	btfsc	status,2,c
 17831  012CF4  0012               	return	
 17832  012CF6  0A63               	xorlw	99	; case 99
 17833  012CF8  B4D8               	btfsc	status,2,c
 17834  012CFA  D7DF               	goto	l2294
 17835  012CFC  0A07               	xorlw	7	; case 100
 17836  012CFE  B4D8               	btfsc	status,2,c
 17837  012D00  D003               	goto	l2293
 17838  012D02  0A0D               	xorlw	13	; case 105
 17839  012D04  A4D8               	btfss	status,2,c
 17840  012D06  D7E3               	goto	l2295
 17841  012D08                     l2293:
 17842                           
 17843                           ;doprnt.c: 1253: {
 17844                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17845                           
 17846                           ; BSR set to: 0
 17847  012D08  C07C  FFD9         	movff	printf@ap,fsr2l
 17848  012D0C  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17849  012D10  CFDE F07E          	movff	postinc2,printf@val
 17850  012D14  CFDD F07F          	movff	postdec2,printf@val+1
 17851  012D18  0E02               	movlw	2
 17852  012D1A  0100               	movlb	0	; () banked
 17853  012D1C  277C               	addwf	printf@ap& (0+255),f,b
 17854  012D1E  0E00               	movlw	0
 17855  012D20  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;doprnt.c: 1261: if((int)val < 0) {
 17859  012D22  AF7F               	btfss	(printf@val+1)& (0+255),7,b
 17860  012D24  D006               	goto	l2296
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;doprnt.c: 1262: flag |= 0x03;
 17864  012D26  0E03               	movlw	3
 17865  012D28  137A               	iorwf	printf@flag& (0+255),f,b
 17866                           
 17867                           ; BSR set to: 0
 17868                           ;doprnt.c: 1263: val = -val;
 17869  012D2A  6D7E               	negf	printf@val& (0+255),b
 17870  012D2C  1F7F               	comf	(printf@val+1)& (0+255),f,b
 17871  012D2E  B0D8               	btfsc	status,0,c
 17872  012D30  2B7F               	incf	(printf@val+1)& (0+255),f,b
 17873  012D32                     l2296:
 17874                           
 17875                           ; BSR set to: 0
 17876                           ;doprnt.c: 1264: }
 17877                           ;doprnt.c: 1266: }
 17878                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17879                           
 17880                           ; BSR set to: 0
 17881  012D32  0E01               	movlw	1
 17882  012D34  6F80               	movwf	printf@c& (0+255),b
 17883  012D36                     l15020:
 17884                           
 17885                           ; BSR set to: 0
 17886  012D36  0E05               	movlw	5
 17887  012D38  1980               	xorwf	printf@c& (0+255),w,b
 17888  012D3A  B4D8               	btfsc	status,2,c
 17889  012D3C  D015               	goto	u12210
 17890                           
 17891                           ; BSR set to: 0
 17892                           ;doprnt.c: 1306: if(val < dpowers[c])
 17893                           
 17894                           ; BSR set to: 0
 17895                           
 17896                           ; BSR set to: 0
 17897  012D3E  5180               	movf	printf@c& (0+255),w,b
 17898  012D40  0D02               	mullw	2
 17899  012D42  0E29               	movlw	low _dpowers
 17900  012D44  24F3               	addwf	prodl,w,c
 17901  012D46  6EF6               	movwf	tblptrl,c
 17902  012D48  0EFC               	movlw	high _dpowers
 17903  012D4A  20F4               	addwfc	prodh,w,c
 17904  012D4C  6EF7               	movwf	tblptrh,c
 17905  012D4E                     	if	1	;There are 3 active tblptr bytes
 17906  012D4E  6AF8               	clrf	tblptru,c
 17907  012D50  0E00               	movlw	low (__mediumconst shr (0+16))
 17908  012D52  22F8               	addwfc	tblptru,f,c
 17909  012D54                     	endif
 17910  012D54  0009               	tblrd		*+
 17911  012D56  50F5               	movf	tablat,w,c
 17912  012D58  5D7E               	subwf	printf@val& (0+255),w,b
 17913  012D5A  0009               	tblrd		*+
 17914  012D5C  50F5               	movf	tablat,w,c
 17915  012D5E  597F               	subwfb	(printf@val+1)& (0+255),w,b
 17916  012D60  A0D8               	btfss	status,0,c
 17917  012D62  D002               	goto	u12210
 17918                           
 17919                           ; BSR set to: 0
 17920                           
 17921                           ; BSR set to: 0
 17922                           
 17923                           ; BSR set to: 0
 17924                           ;doprnt.c: 1307: break;
 17925  012D64  2B80               	incf	printf@c& (0+255),f,b
 17926  012D66  D7E7               	goto	l15020
 17927  012D68                     u12210:
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;doprnt.c: 1422: {
 17931                           ;doprnt.c: 1438: if(flag & 0x03)
 17932                           
 17933                           ; BSR set to: 0
 17934  012D68  C07A  F079         	movff	printf@flag,??_printf
 17935  012D6C  0E03               	movlw	3
 17936  012D6E  1779               	andwf	??_printf& (0+255),f,b
 17937  012D70  B4D8               	btfsc	status,2,c
 17938  012D72  D003               	goto	l2300
 17939                           
 17940                           ; BSR set to: 0
 17941                           ;doprnt.c: 1439: (putch('-') );
 17942  012D74  0E2D               	movlw	45
 17943  012D76  EC02  F0B0         	call	_putch
 17944  012D7A                     l2300:
 17945                           
 17946                           ;doprnt.c: 1469: }
 17947                           ;doprnt.c: 1472: prec = c;
 17948  012D7A  C080  F07B         	movff	printf@c,printf@prec
 17949                           
 17950                           ;doprnt.c: 1474: while(prec--) {
 17951  012D7E  D02A               	goto	l2301
 17952  012D80                     
 17953                           ;doprnt.c: 1478: {
 17954                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 17955  012D80  0100               	movlb	0	; () banked
 17956  012D82  517B               	movf	printf@prec& (0+255),w,b
 17957  012D84  0D02               	mullw	2
 17958  012D86  0E29               	movlw	low _dpowers
 17959  012D88  24F3               	addwf	prodl,w,c
 17960  012D8A  6EF6               	movwf	tblptrl,c
 17961  012D8C  0EFC               	movlw	high _dpowers
 17962  012D8E  20F4               	addwfc	prodh,w,c
 17963  012D90  6EF7               	movwf	tblptrh,c
 17964  012D92                     	if	1	;There are 3 active tblptr bytes
 17965  012D92  6AF8               	clrf	tblptru,c
 17966  012D94  0E00               	movlw	low (__mediumconst shr (0+16))
 17967  012D96  22F8               	addwfc	tblptru,f,c
 17968  012D98                     	endif
 17969  012D98  0009               	tblrd		*+
 17970  012D9A  CFF5 F062          	movff	tablat,___lwdiv@divisor
 17971  012D9E  000A               	tblrd		*-
 17972  012DA0  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 17973  012DA4  C07E  F060         	movff	printf@val,___lwdiv@dividend
 17974  012DA8  C07F  F061         	movff	printf@val+1,___lwdiv@dividend+1
 17975  012DAC  EC77  F0A9         	call	___lwdiv	;wreg free
 17976  012DB0  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 17977  012DB4  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 17978  012DB8  0E00               	movlw	0
 17979  012DBA  0100               	movlb	0	; () banked
 17980  012DBC  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 17981  012DBE  0E0A               	movlw	10
 17982  012DC0  6F69               	movwf	___lwmod@divisor& (0+255),b
 17983  012DC2  EC8D  F0AB         	call	___lwmod	;wreg free
 17984  012DC6  0100               	movlb	0	; () banked
 17985  012DC8  5167               	movf	?___lwmod& (0+255),w,b
 17986  012DCA  0F30               	addlw	48
 17987  012DCC  6F80               	movwf	printf@c& (0+255),b
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;doprnt.c: 1523: }
 17991                           ;doprnt.c: 1524: (putch(c) );
 17992  012DCE  5180               	movf	printf@c& (0+255),w,b
 17993  012DD0  EC02  F0B0         	call	_putch
 17994  012DD4                     l2301:
 17995  012DD4  0100               	movlb	0	; () banked
 17996  012DD6  077B               	decf	printf@prec& (0+255),f,b
 17997  012DD8  297B               	incf	printf@prec& (0+255),w,b
 17998  012DDA  A4D8               	btfss	status,2,c
 17999  012DDC  D7D1               	goto	l2302
 18000  012DDE                     u12230:
 18001                           
 18002                           ; BSR set to: 0
 18003                           
 18004                           ; BSR set to: 0
 18005  012DDE  C075  FFF6         	movff	printf@f,tblptrl
 18006  012DE2  C076  FFF7         	movff	printf@f+1,tblptrh
 18007  012DE6  0100               	movlb	0	; () banked
 18008  012DE8  4B75               	infsnz	printf@f& (0+255),f,b
 18009  012DEA  2B76               	incf	(printf@f+1)& (0+255),f,b
 18010  012DEC                     	if	0	;tblptru may be non-zero
 18011  012DEC                     	endif
 18012  012DEC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 18013  012DEC  0E00               	movlw	low (__mediumconst shr (0+16))
 18014  012DEE  6EF8               	movwf	tblptru,c
 18015  012DF0                     	endif
 18016  012DF0  0008               	tblrd		*
 18017  012DF2  CFF5 F080          	movff	tablat,printf@c
 18018  012DF6  5180               	movf	printf@c& (0+255),w,b
 18019  012DF8  B4D8               	btfsc	status,2,c
 18020  012DFA  0012               	return	
 18021  012DFC  D752               	goto	l2286
 18022  012DFE                     __end_of_printf:
 18023                           	opt stack 0
 18024                           tosu	equ	0xFFF
 18025                           tosh	equ	0xFFE
 18026                           tosl	equ	0xFFD
 18027                           pclath	equ	0xFFA
 18028                           tblptru	equ	0xFF8
 18029                           tblptrh	equ	0xFF7
 18030                           tblptrl	equ	0xFF6
 18031                           tablat	equ	0xFF5
 18032                           prodh	equ	0xFF4
 18033                           prodl	equ	0xFF3
 18034                           intcon	equ	0xFF2
 18035                           indf0	equ	0xFEF
 18036                           postinc0	equ	0xFEE
 18037                           fsr0h	equ	0xFEA
 18038                           fsr0l	equ	0xFE9
 18039                           wreg	equ	0xFE8
 18040                           indf1	equ	0xFE7
 18041                           postdec1	equ	0xFE5
 18042                           fsr1h	equ	0xFE2
 18043                           fsr1l	equ	0xFE1
 18044                           indf2	equ	0xFDF
 18045                           postinc2	equ	0xFDE
 18046                           postdec2	equ	0xFDD
 18047                           plusw2	equ	0xFDB
 18048                           fsr2h	equ	0xFDA
 18049                           fsr2l	equ	0xFD9
 18050                           status	equ	0xFD8
 18051                           
 18052 ;; *************** function _putch *****************
 18053 ;; Defined at:
 18054 ;;		line 454 in file "Library/Console.c"
 18055 ;; Parameters:    Size  Location     Type
 18056 ;;  c               1    wreg     unsigned char 
 18057 ;; Auto vars:     Size  Location     Type
 18058 ;;  c               1   20[BANK0 ] unsigned char 
 18059 ;; Return value:  Size  Location     Type
 18060 ;;                  1    wreg      void 
 18061 ;; Registers used:
 18062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18063 ;; Tracked objects:
 18064 ;;		On entry : 0/0
 18065 ;;		On exit  : 0/0
 18066 ;;		Unchanged: 0/0
 18067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18071 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18072 ;;Total ram usage:        1 bytes
 18073 ;; Hardware stack levels used:    1
 18074 ;; Hardware stack levels required when called:   11
 18075 ;; This function calls:
 18076 ;;		_Console_PrintChar
 18077 ;; This function is called by:
 18078 ;;		_printf
 18079 ;; This function uses a non-reentrant model
 18080 ;;
 18081                           
 18082                           	psect	text97
 18083  016004                     __ptext97:
 18084                           	opt stack 0
 18085  016004                     _putch:
 18086                           	opt stack 18
 18087                           
 18088                           ; BSR set to: 0
 18089                           ;incstack = 0
 18090                           ;putch@c stored from wreg
 18091  016004  0100               	movlb	0	; () banked
 18092  016006  6F74               	movwf	putch@c& (0+255),b
 18093                           
 18094                           ;Console.c: 456: Console_PrintChar(c);
 18095  016008  0100               	movlb	0	; () banked
 18096  01600A  5174               	movf	putch@c& (0+255),w,b
 18097  01600C  ECA9  F097         	call	_Console_PrintChar
 18098  016010  0012               	return		;funcret
 18099  016012                     __end_of_putch:
 18100                           	opt stack 0
 18101                           tosu	equ	0xFFF
 18102                           tosh	equ	0xFFE
 18103                           tosl	equ	0xFFD
 18104                           pclath	equ	0xFFA
 18105                           tblptru	equ	0xFF8
 18106                           tblptrh	equ	0xFF7
 18107                           tblptrl	equ	0xFF6
 18108                           tablat	equ	0xFF5
 18109                           prodh	equ	0xFF4
 18110                           prodl	equ	0xFF3
 18111                           intcon	equ	0xFF2
 18112                           indf0	equ	0xFEF
 18113                           postinc0	equ	0xFEE
 18114                           fsr0h	equ	0xFEA
 18115                           fsr0l	equ	0xFE9
 18116                           wreg	equ	0xFE8
 18117                           indf1	equ	0xFE7
 18118                           postdec1	equ	0xFE5
 18119                           fsr1h	equ	0xFE2
 18120                           fsr1l	equ	0xFE1
 18121                           indf2	equ	0xFDF
 18122                           postinc2	equ	0xFDE
 18123                           postdec2	equ	0xFDD
 18124                           plusw2	equ	0xFDB
 18125                           fsr2h	equ	0xFDA
 18126                           fsr2l	equ	0xFD9
 18127                           status	equ	0xFD8
 18128                           
 18129 ;; *************** function _Console_PrintChar *****************
 18130 ;; Defined at:
 18131 ;;		line 322 in file "Library/Console.c"
 18132 ;; Parameters:    Size  Location     Type
 18133 ;;  pInput          1    wreg     unsigned char 
 18134 ;; Auto vars:     Size  Location     Type
 18135 ;;  pInput          1   19[BANK0 ] unsigned char 
 18136 ;; Return value:  Size  Location     Type
 18137 ;;                  1    wreg      void 
 18138 ;; Registers used:
 18139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18140 ;; Tracked objects:
 18141 ;;		On entry : 0/0
 18142 ;;		On exit  : 0/0
 18143 ;;		Unchanged: 0/0
 18144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18147 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18148 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18149 ;;Total ram usage:        4 bytes
 18150 ;; Hardware stack levels used:    1
 18151 ;; Hardware stack levels required when called:   10
 18152 ;; This function calls:
 18153 ;;		_Console_Backspace
 18154 ;;		_Console_FormFeed
 18155 ;;		_Console_IncrementCursor
 18156 ;;		_Console_NewLine
 18157 ;;		_Console_ResetCursor
 18158 ;;		_Console_Tab
 18159 ;; This function is called by:
 18160 ;;		_putch
 18161 ;;		_Console_PrintString
 18162 ;; This function uses a non-reentrant model
 18163 ;;
 18164                           
 18165                           	psect	text98
 18166  012F52                     __ptext98:
 18167                           	opt stack 0
 18168  012F52                     _Console_PrintChar:
 18169                           	opt stack 18
 18170                           
 18171                           ;incstack = 0
 18172                           ;Console_PrintChar@pInput stored from wreg
 18173  012F52  0100               	movlb	0	; () banked
 18174  012F54  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
 18175                           
 18176                           ;Console.c: 324: switch(pInput)
 18177  012F56  D08A               	goto	l1036
 18178  012F58                     
 18179                           ;Console.c: 327: case '\n':
 18180                           ;Console.c: 328: Console_NewLine();
 18181  012F58  EC07  F0A5         	call	_Console_NewLine	;wreg free
 18182                           
 18183                           ;Console.c: 329: return;
 18184  012F5C  0012               	return	
 18185  012F5E                     
 18186                           ;Console.c: 331: Console_Backspace();
 18187  012F5E  EC1A  F0AA         	call	_Console_Backspace	;wreg free
 18188                           
 18189                           ;Console.c: 332: return;
 18190  012F62  0012               	return	
 18191  012F64                     
 18192                           ;Console.c: 334: Console_FormFeed();
 18193  012F64  ECA9  F0A6         	call	_Console_FormFeed	;wreg free
 18194                           
 18195                           ;Console.c: 335: return;
 18196  012F68  0012               	return	
 18197  012F6A                     
 18198                           ;Console.c: 337: Console_Tab();
 18199  012F6A  EC56  F0A2         	call	_Console_Tab	;wreg free
 18200                           
 18201                           ;Console.c: 338: return;
 18202  012F6E  0012               	return	
 18203  012F70                     
 18204                           ;Console.c: 340: Console_IncrementCursor();
 18205  012F70  ECF9  F0A8         	call	_Console_IncrementCursor	;wreg free
 18206                           
 18207                           ;Console.c: 341: return;
 18208  012F74  0012               	return	
 18209  012F76                     
 18210                           ;Console.c: 343: Console_ResetCursor();
 18211  012F76  ECF0  F0AE         	call	_Console_ResetCursor	;wreg free
 18212                           
 18213                           ;Console.c: 344: return;
 18214  012F7A  0012               	return	
 18215  012F7C                     
 18216                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18217                           
 18218                           ;Console.c: 349: default:
 18219  012F7C  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18220  012F80  0E7F               	movlw	127
 18221  012F82  0100               	movlb	0	; () banked
 18222  012F84  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18223  012F86  51F3               	movf	_lBufferY& (0+255),w,b
 18224  012F88  0D14               	mullw	20
 18225  012F8A  0E18               	movlw	low _lBuffer
 18226  012F8C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18227  012F8E  0E03               	movlw	high _lBuffer
 18228  012F90  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18229  012F92  50F3               	movf	prodl,w,c
 18230  012F94  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18231  012F96  50F4               	movf	prodh,w,c
 18232  012F98  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18233  012F9A  51F4               	movf	_lBufferX& (0+255),w,b
 18234  012F9C  0D01               	mullw	1
 18235  012F9E  50F3               	movf	prodl,w,c
 18236  012FA0  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18237  012FA2  6ED9               	movwf	fsr2l,c
 18238  012FA4  50F4               	movf	prodh,w,c
 18239  012FA6  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18240  012FA8  6EDA               	movwf	fsr2h,c
 18241  012FAA  50DF               	movf	indf2,w,c
 18242  012FAC  0B7F               	andlw	127
 18243  012FAE  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18244  012FB0  B4D8               	btfsc	status,2,c
 18245  012FB2  D023               	goto	l1047
 18246                           
 18247                           ; BSR set to: 0
 18248                           ;Console.c: 351: {
 18249                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18250  012FB4  0E01               	movlw	1
 18251  012FB6  6E4D               	movwf	_change,c
 18252                           
 18253                           ; BSR set to: 0
 18254  012FB8  51F3               	movf	_lBufferY& (0+255),w,b
 18255  012FBA  0D14               	mullw	20
 18256  012FBC  0E18               	movlw	low _lBuffer
 18257  012FBE  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18258  012FC0  0E03               	movlw	high _lBuffer
 18259  012FC2  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18260  012FC4  50F3               	movf	prodl,w,c
 18261  012FC6  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18262  012FC8  50F4               	movf	prodh,w,c
 18263  012FCA  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18264  012FCC  51F4               	movf	_lBufferX& (0+255),w,b
 18265  012FCE  0D01               	mullw	1
 18266  012FD0  50F3               	movf	prodl,w,c
 18267  012FD2  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18268  012FD4  6ED9               	movwf	fsr2l,c
 18269  012FD6  50F4               	movf	prodh,w,c
 18270  012FD8  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18271  012FDA  6EDA               	movwf	fsr2h,c
 18272  012FDC  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18273  012FDE  0980               	iorlw	128
 18274  012FE0  6EDF               	movwf	indf2,c
 18275                           
 18276                           ; BSR set to: 0
 18277                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 18278  012FE2  51F3               	movf	_lBufferY& (0+255),w,b
 18279  012FE4  0D02               	mullw	2
 18280  012FE6  0E64               	movlw	low _lCBuffer
 18281  012FE8  24F3               	addwf	prodl,w,c
 18282  012FEA  6ED9               	movwf	fsr2l,c
 18283  012FEC  0E02               	movlw	high _lCBuffer
 18284  012FEE  20F4               	addwfc	prodh,w,c
 18285  012FF0  6EDA               	movwf	fsr2h,c
 18286  012FF2  C1F3  FFDE         	movff	_gForecolour,postinc2
 18287  012FF6  C1F4  FFDD         	movff	_gForecolour+1,postdec2
 18288  012FFA                     l1047:
 18289                           
 18290                           ; BSR set to: 0
 18291                           ;Console.c: 354: }
 18292                           ;Console.c: 368: if(Console_IncrementCursor())
 18293                           
 18294                           ; BSR set to: 0
 18295  012FFA  ECF9  F0A8         	call	_Console_IncrementCursor	;wreg free
 18296  012FFE  0900               	iorlw	0
 18297  013000  B4D8               	btfsc	status,2,c
 18298  013002  0012               	return	
 18299                           
 18300                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18301  013004  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18302  013008  0E7F               	movlw	127
 18303  01300A  0100               	movlb	0	; () banked
 18304  01300C  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18305  01300E  51F3               	movf	_lBufferY& (0+255),w,b
 18306  013010  0D14               	mullw	20
 18307  013012  0E18               	movlw	low _lBuffer
 18308  013014  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18309  013016  0E03               	movlw	high _lBuffer
 18310  013018  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18311  01301A  50F3               	movf	prodl,w,c
 18312  01301C  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18313  01301E  50F4               	movf	prodh,w,c
 18314  013020  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18315  013022  51F4               	movf	_lBufferX& (0+255),w,b
 18316  013024  0D01               	mullw	1
 18317  013026  50F3               	movf	prodl,w,c
 18318  013028  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18319  01302A  6ED9               	movwf	fsr2l,c
 18320  01302C  50F4               	movf	prodh,w,c
 18321  01302E  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18322  013030  6EDA               	movwf	fsr2h,c
 18323  013032  50DF               	movf	indf2,w,c
 18324  013034  0B7F               	andlw	127
 18325  013036  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18326  013038  B4D8               	btfsc	status,2,c
 18327  01303A  0012               	return	
 18328                           
 18329                           ; BSR set to: 0
 18330                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18331  01303C  0E01               	movlw	1
 18332  01303E  6E4D               	movwf	_change,c
 18333                           
 18334                           ; BSR set to: 0
 18335  013040  51F3               	movf	_lBufferY& (0+255),w,b
 18336  013042  0D14               	mullw	20
 18337  013044  0E18               	movlw	low _lBuffer
 18338  013046  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18339  013048  0E03               	movlw	high _lBuffer
 18340  01304A  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18341  01304C  50F3               	movf	prodl,w,c
 18342  01304E  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18343  013050  50F4               	movf	prodh,w,c
 18344  013052  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18345  013054  51F4               	movf	_lBufferX& (0+255),w,b
 18346  013056  0D01               	mullw	1
 18347  013058  50F3               	movf	prodl,w,c
 18348  01305A  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18349  01305C  6ED9               	movwf	fsr2l,c
 18350  01305E  50F4               	movf	prodh,w,c
 18351  013060  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18352  013062  6EDA               	movwf	fsr2h,c
 18353  013064  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18354  013066  0980               	iorlw	128
 18355  013068  6EDF               	movwf	indf2,c
 18356                           
 18357                           ; BSR set to: 0
 18358                           ;Console.c: 372: };
 18359                           
 18360                           ; BSR set to: 0
 18361                           ;Console.c: 371: return;
 18362                           
 18363                           ; BSR set to: 0
 18364                           
 18365                           ; BSR set to: 0
 18366  01306A  0012               	return	
 18367  01306C                     l1036:
 18368                           
 18369                           ; BSR set to: 0
 18370  01306C  0100               	movlb	0	; () banked
 18371  01306E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18372                           
 18373                           ; Switch size 1, requested type "space"
 18374                           ; Number of cases is 8, Range of values is 7 to 35
 18375                           ; switch strategies available:
 18376                           ; Name         Instructions Cycles
 18377                           ; simple_byte           25    13 (average)
 18378                           ;	Chosen strategy is simple_byte
 18379  013070  0A07               	xorlw	7	; case 7
 18380  013072  B4D8               	btfsc	status,2,c
 18381  013074  D77D               	goto	l1043
 18382  013076  0A0F               	xorlw	15	; case 8
 18383  013078  B4D8               	btfsc	status,2,c
 18384  01307A  D771               	goto	l1040
 18385  01307C  0A01               	xorlw	1	; case 9
 18386  01307E  B4D8               	btfsc	status,2,c
 18387  013080  D774               	goto	l1042
 18388  013082  0A03               	xorlw	3	; case 10
 18389  013084  B4D8               	btfsc	status,2,c
 18390  013086  D768               	goto	l1037
 18391  013088  0A06               	xorlw	6	; case 12
 18392  01308A  B4D8               	btfsc	status,2,c
 18393  01308C  D76B               	goto	l1041
 18394  01308E  0A01               	xorlw	1	; case 13
 18395  013090  B4D8               	btfsc	status,2,c
 18396  013092  D762               	goto	l1037
 18397  013094  0A2D               	xorlw	45	; case 32
 18398  013096  B4D8               	btfsc	status,2,c
 18399  013098  D771               	goto	l1045
 18400  01309A  0A03               	xorlw	3	; case 35
 18401  01309C  B4D8               	btfsc	status,2,c
 18402  01309E  D76B               	goto	l1044
 18403  0130A0  D76D               	goto	l1045
 18404  0130A2                     __end_of_Console_PrintChar:
 18405                           	opt stack 0
 18406                           tosu	equ	0xFFF
 18407                           tosh	equ	0xFFE
 18408                           tosl	equ	0xFFD
 18409                           pclath	equ	0xFFA
 18410                           tblptru	equ	0xFF8
 18411                           tblptrh	equ	0xFF7
 18412                           tblptrl	equ	0xFF6
 18413                           tablat	equ	0xFF5
 18414                           prodh	equ	0xFF4
 18415                           prodl	equ	0xFF3
 18416                           intcon	equ	0xFF2
 18417                           indf0	equ	0xFEF
 18418                           postinc0	equ	0xFEE
 18419                           fsr0h	equ	0xFEA
 18420                           fsr0l	equ	0xFE9
 18421                           wreg	equ	0xFE8
 18422                           indf1	equ	0xFE7
 18423                           postdec1	equ	0xFE5
 18424                           fsr1h	equ	0xFE2
 18425                           fsr1l	equ	0xFE1
 18426                           indf2	equ	0xFDF
 18427                           postinc2	equ	0xFDE
 18428                           postdec2	equ	0xFDD
 18429                           plusw2	equ	0xFDB
 18430                           fsr2h	equ	0xFDA
 18431                           fsr2l	equ	0xFD9
 18432                           status	equ	0xFD8
 18433                           
 18434 ;; *************** function _Console_Tab *****************
 18435 ;; Defined at:
 18436 ;;		line 260 in file "Library/Console.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;		None
 18439 ;; Auto vars:     Size  Location     Type
 18440 ;;  c               1   15[BANK0 ] unsigned char 
 18441 ;;  i               1   14[BANK0 ] unsigned char 
 18442 ;;  t               1   13[BANK0 ] unsigned char 
 18443 ;; Return value:  Size  Location     Type
 18444 ;;                  1    wreg      void 
 18445 ;; Registers used:
 18446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18447 ;; Tracked objects:
 18448 ;;		On entry : 0/0
 18449 ;;		On exit  : 0/0
 18450 ;;		Unchanged: 0/0
 18451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18453 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18454 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18455 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18456 ;;Total ram usage:        8 bytes
 18457 ;; Hardware stack levels used:    1
 18458 ;; Hardware stack levels required when called:    9
 18459 ;; This function calls:
 18460 ;;		_Console_ClearCursor
 18461 ;;		_Console_IncrementCursor
 18462 ;;		___awdiv
 18463 ;; This function is called by:
 18464 ;;		_Console_PrintChar
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468                           	psect	text99
 18469  0144AC                     __ptext99:
 18470                           	opt stack 0
 18471  0144AC                     _Console_Tab:
 18472                           	opt stack 18
 18473                           
 18474                           ;Console.c: 262: UINT8 i = 0;
 18475                           
 18476                           ;incstack = 0
 18477  0144AC  0E00               	movlw	0
 18478  0144AE  0100               	movlb	0	; () banked
 18479  0144B0  6F6E               	movwf	Console_Tab@i& (0+255),b
 18480                           
 18481                           ; BSR set to: 0
 18482                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 18483  0144B2  0EFA               	movlw	250
 18484  0144B4  2446               	addwf	_gCursor,w,c
 18485  0144B6  6F60               	movwf	___awdiv@dividend& (0+255),b
 18486  0144B8  0EFF               	movlw	255
 18487  0144BA  2047               	addwfc	_gCursor+1,w,c
 18488  0144BC  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
 18489  0144BE  0E00               	movlw	0
 18490  0144C0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18491  0144C2  0E06               	movlw	6
 18492  0144C4  6F62               	movwf	___awdiv@divisor& (0+255),b
 18493  0144C6  EC43  F0A4         	call	___awdiv	;wreg free
 18494  0144CA  0100               	movlb	0	; () banked
 18495  0144CC  5160               	movf	?___awdiv& (0+255),w,b
 18496  0144CE  6F6F               	movwf	Console_Tab@c& (0+255),b
 18497                           
 18498                           ; BSR set to: 0
 18499                           ;Console.c: 264: UINT8 t = c/4;
 18500  0144D0  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
 18501  0144D4  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
 18502  0144D6  0E00               	movlw	0
 18503  0144D8  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18504  0144DA  0E04               	movlw	4
 18505  0144DC  6F62               	movwf	___awdiv@divisor& (0+255),b
 18506  0144DE  EC43  F0A4         	call	___awdiv	;wreg free
 18507  0144E2  0100               	movlb	0	; () banked
 18508  0144E4  5160               	movf	?___awdiv& (0+255),w,b
 18509  0144E6  6F6D               	movwf	Console_Tab@t& (0+255),b
 18510                           
 18511                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 18512  0144E8  0E00               	movlw	0
 18513  0144EA  6F6E               	movwf	Console_Tab@i& (0+255),b
 18514  0144EC  D006               	goto	l1009
 18515  0144EE                     
 18516                           ; BSR set to: 0
 18517                           ;Console.c: 266: {
 18518                           ;Console.c: 267: Console_ClearCursor();
 18519                           
 18520                           ; BSR set to: 0
 18521  0144EE  EC92  F0AD         	call	_Console_ClearCursor	;wreg free
 18522                           
 18523                           ;Console.c: 268: Console_IncrementCursor();
 18524  0144F2  ECF9  F0A8         	call	_Console_IncrementCursor	;wreg free
 18525  0144F6  0100               	movlb	0	; () banked
 18526  0144F8  2B6E               	incf	Console_Tab@i& (0+255),f,b
 18527  0144FA                     l1009:
 18528                           
 18529                           ; BSR set to: 0
 18530                           
 18531                           ; BSR set to: 0
 18532  0144FA  516D               	movf	Console_Tab@t& (0+255),w,b
 18533  0144FC  0D04               	mullw	4
 18534  0144FE  1EF3               	comf	prodl,f,c
 18535  014500  1EF4               	comf	prodh,f,c
 18536  014502  4AF3               	infsnz	prodl,f,c
 18537  014504  2AF4               	incf	prodh,f,c
 18538  014506  516F               	movf	Console_Tab@c& (0+255),w,b
 18539  014508  6F68               	movwf	??_Console_Tab& (0+255),b
 18540  01450A  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
 18541  01450C  50F3               	movf	prodl,w,c
 18542  01450E  2768               	addwf	??_Console_Tab& (0+255),f,b
 18543  014510  50F4               	movf	prodh,w,c
 18544  014512  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18545  014514  1F68               	comf	??_Console_Tab& (0+255),f,b
 18546  014516  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
 18547  014518  4B68               	infsnz	??_Console_Tab& (0+255),f,b
 18548  01451A  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
 18549  01451C  0E04               	movlw	4
 18550  01451E  2768               	addwf	??_Console_Tab& (0+255),f,b
 18551  014520  0E00               	movlw	0
 18552  014522  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18553  014524  516E               	movf	Console_Tab@i& (0+255),w,b
 18554  014526  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
 18555  014528  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
 18556  01452A  5168               	movf	??_Console_Tab& (0+255),w,b
 18557  01452C  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
 18558  01452E  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
 18559  014530  0A80               	xorlw	128
 18560  014532  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
 18561  014534  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
 18562  014536  0A80               	xorlw	128
 18563  014538  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 18564  01453A  B0D8               	btfsc	status,0,c
 18565  01453C  0012               	return	
 18566  01453E  D7D7               	goto	l1010
 18567  014540                     __end_of_Console_Tab:
 18568                           	opt stack 0
 18569                           tosu	equ	0xFFF
 18570                           tosh	equ	0xFFE
 18571                           tosl	equ	0xFFD
 18572                           pclath	equ	0xFFA
 18573                           tblptru	equ	0xFF8
 18574                           tblptrh	equ	0xFF7
 18575                           tblptrl	equ	0xFF6
 18576                           tablat	equ	0xFF5
 18577                           prodh	equ	0xFF4
 18578                           prodl	equ	0xFF3
 18579                           intcon	equ	0xFF2
 18580                           indf0	equ	0xFEF
 18581                           postinc0	equ	0xFEE
 18582                           fsr0h	equ	0xFEA
 18583                           fsr0l	equ	0xFE9
 18584                           wreg	equ	0xFE8
 18585                           indf1	equ	0xFE7
 18586                           postdec1	equ	0xFE5
 18587                           fsr1h	equ	0xFE2
 18588                           fsr1l	equ	0xFE1
 18589                           indf2	equ	0xFDF
 18590                           postinc2	equ	0xFDE
 18591                           postdec2	equ	0xFDD
 18592                           plusw2	equ	0xFDB
 18593                           fsr2h	equ	0xFDA
 18594                           fsr2l	equ	0xFD9
 18595                           status	equ	0xFD8
 18596                           
 18597 ;; *************** function _Console_IncrementCursor *****************
 18598 ;; Defined at:
 18599 ;;		line 243 in file "Library/Console.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;		None
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;		None
 18604 ;; Return value:  Size  Location     Type
 18605 ;;                  1    wreg      unsigned char 
 18606 ;; Registers used:
 18607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18608 ;; Tracked objects:
 18609 ;;		On entry : 0/0
 18610 ;;		On exit  : 0/0
 18611 ;;		Unchanged: 0/0
 18612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18615 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18617 ;;Total ram usage:        2 bytes
 18618 ;; Hardware stack levels used:    1
 18619 ;; Hardware stack levels required when called:    8
 18620 ;; This function calls:
 18621 ;;		_Console_FormFeed
 18622 ;;		_Console_NewLine
 18623 ;; This function is called by:
 18624 ;;		_Console_Tab
 18625 ;;		_Console_PrintChar
 18626 ;; This function uses a non-reentrant model
 18627 ;;
 18628                           
 18629                           	psect	text100
 18630  0151F2                     __ptext100:
 18631                           	opt stack 0
 18632  0151F2                     _Console_IncrementCursor:
 18633                           	opt stack 18
 18634                           
 18635                           ;Console.c: 246: lBufferX += 1;
 18636                           
 18637                           ; BSR set to: 0
 18638                           ;incstack = 0
 18639  0151F2  0100               	movlb	0	; () banked
 18640  0151F4  2BF4               	incf	_lBufferX& (0+255),f,b
 18641                           
 18642                           ; BSR set to: 0
 18643                           ;Console.c: 248: gCursor.x += 6;
 18644  0151F6  0E06               	movlw	6
 18645  0151F8  2646               	addwf	_gCursor,f,c
 18646  0151FA  0E00               	movlw	0
 18647  0151FC  2247               	addwfc	_gCursor+1,f,c
 18648                           
 18649                           ; BSR set to: 0
 18650                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 18651  0151FE  0E06               	movlw	6
 18652  015200  2446               	addwf	_gCursor,w,c
 18653  015202  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18654  015204  0E00               	movlw	0
 18655  015206  2047               	addwfc	_gCursor+1,w,c
 18656  015208  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18657  01520A  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18658  01520C  D007               	goto	l1004
 18659  01520E  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18660  015210  E103               	bnz	u9650
 18661  015212  0E80               	movlw	128
 18662  015214  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18663  015216  B0D8               	btfsc	status,0,c
 18664  015218                     u9650:
 18665                           
 18666                           ; BSR set to: 0
 18667                           ;Console.c: 250: Console_NewLine();
 18668  015218  EC07  F0A5         	call	_Console_NewLine	;wreg free
 18669  01521C                     l1004:
 18670                           
 18671                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 18672  01521C  0E08               	movlw	8
 18673  01521E  2448               	addwf	_gCursor+2,w,c
 18674  015220  0100               	movlb	0	; () banked
 18675  015222  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18676  015224  0E00               	movlw	0
 18677  015226  2049               	addwfc	_gCursor+3,w,c
 18678  015228  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18679  01522A  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18680  01522C  D00A               	goto	l1005
 18681  01522E  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18682  015230  E104               	bnz	u9660
 18683  015232  0E80               	movlw	128
 18684  015234  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18685  015236  A0D8               	btfss	status,0,c
 18686  015238  D004               	goto	l1005
 18687  01523A                     u9660:
 18688                           
 18689                           ; BSR set to: 0
 18690                           ;Console.c: 252: {
 18691                           ;Console.c: 253: Console_FormFeed();
 18692  01523A  ECA9  F0A6         	call	_Console_FormFeed	;wreg free
 18693                           
 18694                           ;Console.c: 254: return 1;
 18695  01523E  0E01               	movlw	1
 18696  015240  0012               	return	
 18697  015242                     l1005:
 18698                           
 18699                           ;Console.c: 255: }
 18700                           ;Console.c: 257: return 0;
 18701  015242  0E00               	movlw	0
 18702  015244  0012               	return	
 18703  015246                     __end_of_Console_IncrementCursor:
 18704                           	opt stack 0
 18705                           tosu	equ	0xFFF
 18706                           tosh	equ	0xFFE
 18707                           tosl	equ	0xFFD
 18708                           pclath	equ	0xFFA
 18709                           tblptru	equ	0xFF8
 18710                           tblptrh	equ	0xFF7
 18711                           tblptrl	equ	0xFF6
 18712                           tablat	equ	0xFF5
 18713                           prodh	equ	0xFF4
 18714                           prodl	equ	0xFF3
 18715                           intcon	equ	0xFF2
 18716                           indf0	equ	0xFEF
 18717                           postinc0	equ	0xFEE
 18718                           fsr0h	equ	0xFEA
 18719                           fsr0l	equ	0xFE9
 18720                           wreg	equ	0xFE8
 18721                           indf1	equ	0xFE7
 18722                           postdec1	equ	0xFE5
 18723                           fsr1h	equ	0xFE2
 18724                           fsr1l	equ	0xFE1
 18725                           indf2	equ	0xFDF
 18726                           postinc2	equ	0xFDE
 18727                           postdec2	equ	0xFDD
 18728                           plusw2	equ	0xFDB
 18729                           fsr2h	equ	0xFDA
 18730                           fsr2l	equ	0xFD9
 18731                           status	equ	0xFD8
 18732                           
 18733 ;; *************** function _Console_NewLine *****************
 18734 ;; Defined at:
 18735 ;;		line 175 in file "Library/Console.c"
 18736 ;; Parameters:    Size  Location     Type
 18737 ;;		None
 18738 ;; Auto vars:     Size  Location     Type
 18739 ;;		None
 18740 ;; Return value:  Size  Location     Type
 18741 ;;                  1    wreg      void 
 18742 ;; Registers used:
 18743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18744 ;; Tracked objects:
 18745 ;;		On entry : 0/0
 18746 ;;		On exit  : 0/0
 18747 ;;		Unchanged: 0/0
 18748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18753 ;;Total ram usage:        2 bytes
 18754 ;; Hardware stack levels used:    1
 18755 ;; Hardware stack levels required when called:    7
 18756 ;; This function calls:
 18757 ;;		Nothing
 18758 ;; This function is called by:
 18759 ;;		_Console_IncrementCursor
 18760 ;;		_Console_PrintChar
 18761 ;; This function uses a non-reentrant model
 18762 ;;
 18763                           
 18764                           	psect	text101
 18765  014A0E                     __ptext101:
 18766                           	opt stack 0
 18767  014A0E                     _Console_NewLine:
 18768                           	opt stack 18
 18769                           
 18770                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 18771                           
 18772                           ;incstack = 0
 18773  014A0E  D02D               	goto	l983
 18774  014A10                     
 18775                           ;Console.c: 179: {
 18776                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 18777  014A10  0100               	movlb	0	; () banked
 18778  014A12  51F3               	movf	_lBufferY& (0+255),w,b
 18779  014A14  0D14               	mullw	20
 18780  014A16  0E18               	movlw	low _lBuffer
 18781  014A18  6F60               	movwf	??_Console_NewLine& (0+255),b
 18782  014A1A  0E03               	movlw	high _lBuffer
 18783  014A1C  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18784  014A1E  50F3               	movf	prodl,w,c
 18785  014A20  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18786  014A22  50F4               	movf	prodh,w,c
 18787  014A24  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18788  014A26  51F4               	movf	_lBufferX& (0+255),w,b
 18789  014A28  0D01               	mullw	1
 18790  014A2A  50F3               	movf	prodl,w,c
 18791  014A2C  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18792  014A2E  6ED9               	movwf	fsr2l,c
 18793  014A30  50F4               	movf	prodh,w,c
 18794  014A32  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18795  014A34  6EDA               	movwf	fsr2h,c
 18796  014A36  50DF               	movf	indf2,w,c
 18797  014A38  B4D8               	btfsc	status,2,c
 18798  014A3A  D016               	goto	l985
 18799                           
 18800                           ; BSR set to: 0
 18801                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 18802  014A3C  0E01               	movlw	1
 18803  014A3E  6E4D               	movwf	_change,c
 18804                           
 18805                           ; BSR set to: 0
 18806  014A40  51F3               	movf	_lBufferY& (0+255),w,b
 18807  014A42  0D14               	mullw	20
 18808  014A44  0E18               	movlw	low _lBuffer
 18809  014A46  6F60               	movwf	??_Console_NewLine& (0+255),b
 18810  014A48  0E03               	movlw	high _lBuffer
 18811  014A4A  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18812  014A4C  50F3               	movf	prodl,w,c
 18813  014A4E  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18814  014A50  50F4               	movf	prodh,w,c
 18815  014A52  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18816  014A54  51F4               	movf	_lBufferX& (0+255),w,b
 18817  014A56  0D01               	mullw	1
 18818  014A58  50F3               	movf	prodl,w,c
 18819  014A5A  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18820  014A5C  6ED9               	movwf	fsr2l,c
 18821  014A5E  50F4               	movf	prodh,w,c
 18822  014A60  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18823  014A62  6EDA               	movwf	fsr2h,c
 18824  014A64  0E80               	movlw	128
 18825  014A66  6EDF               	movwf	indf2,c
 18826  014A68                     l985:
 18827                           
 18828                           ; BSR set to: 0
 18829                           ;Console.c: 182: lBufferX ++;
 18830                           
 18831                           ; BSR set to: 0
 18832  014A68  2BF4               	incf	_lBufferX& (0+255),f,b
 18833  014A6A                     l983:
 18834                           
 18835                           ; BSR set to: 0
 18836  014A6A  0E13               	movlw	19
 18837  014A6C  0100               	movlb	0	; () banked
 18838  014A6E  65F4               	cpfsgt	_lBufferX& (0+255),b
 18839  014A70  D7CF               	goto	l984
 18840                           
 18841                           ; BSR set to: 0
 18842                           ;Console.c: 183: }
 18843                           ;Console.c: 185: lBufferX = 0;
 18844                           
 18845                           ; BSR set to: 0
 18846  014A72  0E00               	movlw	0
 18847  014A74  6FF4               	movwf	_lBufferX& (0+255),b
 18848                           
 18849                           ; BSR set to: 0
 18850                           ;Console.c: 186: lBufferY ++;
 18851  014A76  2BF3               	incf	_lBufferY& (0+255),f,b
 18852                           
 18853                           ; BSR set to: 0
 18854                           ;Console.c: 188: gCursor.y += 8;
 18855  014A78  0E08               	movlw	8
 18856  014A7A  2648               	addwf	_gCursor+2,f,c
 18857  014A7C  0E00               	movlw	0
 18858  014A7E  2249               	addwfc	_gCursor+3,f,c
 18859                           
 18860                           ; BSR set to: 0
 18861                           ;Console.c: 189: gCursor.x = 6;
 18862  014A80  0E00               	movlw	0
 18863  014A82  6E47               	movwf	_gCursor+1,c
 18864  014A84  0E06               	movlw	6
 18865  014A86  6E46               	movwf	_gCursor,c
 18866                           
 18867                           ; BSR set to: 0
 18868  014A88  0012               	return		;funcret
 18869  014A8A                     __end_of_Console_NewLine:
 18870                           	opt stack 0
 18871                           tosu	equ	0xFFF
 18872                           tosh	equ	0xFFE
 18873                           tosl	equ	0xFFD
 18874                           pclath	equ	0xFFA
 18875                           tblptru	equ	0xFF8
 18876                           tblptrh	equ	0xFF7
 18877                           tblptrl	equ	0xFF6
 18878                           tablat	equ	0xFF5
 18879                           prodh	equ	0xFF4
 18880                           prodl	equ	0xFF3
 18881                           intcon	equ	0xFF2
 18882                           indf0	equ	0xFEF
 18883                           postinc0	equ	0xFEE
 18884                           fsr0h	equ	0xFEA
 18885                           fsr0l	equ	0xFE9
 18886                           wreg	equ	0xFE8
 18887                           indf1	equ	0xFE7
 18888                           postdec1	equ	0xFE5
 18889                           fsr1h	equ	0xFE2
 18890                           fsr1l	equ	0xFE1
 18891                           indf2	equ	0xFDF
 18892                           postinc2	equ	0xFDE
 18893                           postdec2	equ	0xFDD
 18894                           plusw2	equ	0xFDB
 18895                           fsr2h	equ	0xFDA
 18896                           fsr2l	equ	0xFD9
 18897                           status	equ	0xFD8
 18898                           
 18899 ;; *************** function _Console_FormFeed *****************
 18900 ;; Defined at:
 18901 ;;		line 192 in file "Library/Console.c"
 18902 ;; Parameters:    Size  Location     Type
 18903 ;;		None
 18904 ;; Auto vars:     Size  Location     Type
 18905 ;;  y               1    3[BANK0 ] unsigned char 
 18906 ;;  x               1    2[BANK0 ] unsigned char 
 18907 ;; Return value:  Size  Location     Type
 18908 ;;                  1    wreg      void 
 18909 ;; Registers used:
 18910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18911 ;; Tracked objects:
 18912 ;;		On entry : 0/0
 18913 ;;		On exit  : 0/0
 18914 ;;		Unchanged: 0/0
 18915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18919 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18920 ;;Total ram usage:        4 bytes
 18921 ;; Hardware stack levels used:    1
 18922 ;; Hardware stack levels required when called:    7
 18923 ;; This function calls:
 18924 ;;		Nothing
 18925 ;; This function is called by:
 18926 ;;		_Console_IncrementCursor
 18927 ;;		_Console_PrintChar
 18928 ;; This function uses a non-reentrant model
 18929 ;;
 18930                           
 18931                           	psect	text102
 18932  014D52                     __ptext102:
 18933                           	opt stack 0
 18934  014D52                     _Console_FormFeed:
 18935                           	opt stack 18
 18936                           
 18937                           ;Console.c: 195: lBufferX = 0;
 18938                           
 18939                           ; BSR set to: 0
 18940                           ;incstack = 0
 18941  014D52  0E00               	movlw	0
 18942  014D54  0100               	movlb	0	; () banked
 18943  014D56  6FF4               	movwf	_lBufferX& (0+255),b
 18944                           
 18945                           ;Console.c: 196: lBufferY = 0;
 18946  014D58  0E00               	movlw	0
 18947  014D5A  6FF3               	movwf	_lBufferY& (0+255),b
 18948                           
 18949                           ;Console.c: 197: UINT8 x, y;
 18950                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 18951  014D5C  0E00               	movlw	0
 18952  014D5E  6F63               	movwf	Console_FormFeed@y& (0+255),b
 18953  014D60                     l12470:
 18954                           
 18955                           ; BSR set to: 0
 18956  014D60  0E0E               	movlw	14
 18957  014D62  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 18958  014D64  D001               	goto	l990
 18959  014D66  D020               	goto	u9580
 18960  014D68                     l990:
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 18964                           
 18965                           ; BSR set to: 0
 18966  014D68  0E00               	movlw	0
 18967  014D6A  6F62               	movwf	Console_FormFeed@x& (0+255),b
 18968  014D6C                     l12476:
 18969                           
 18970                           ; BSR set to: 0
 18971  014D6C  0E13               	movlw	19
 18972  014D6E  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 18973  014D70  D001               	goto	l992
 18974  014D72  D018               	goto	u9570
 18975  014D74                     l992:
 18976                           
 18977                           ; BSR set to: 0
 18978                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 18979                           
 18980                           ; BSR set to: 0
 18981  014D74  0E01               	movlw	1
 18982  014D76  6E4D               	movwf	_change,c
 18983                           
 18984                           ; BSR set to: 0
 18985  014D78  5163               	movf	Console_FormFeed@y& (0+255),w,b
 18986  014D7A  0D14               	mullw	20
 18987  014D7C  0E18               	movlw	low _lBuffer
 18988  014D7E  6F60               	movwf	??_Console_FormFeed& (0+255),b
 18989  014D80  0E03               	movlw	high _lBuffer
 18990  014D82  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 18991  014D84  50F3               	movf	prodl,w,c
 18992  014D86  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 18993  014D88  50F4               	movf	prodh,w,c
 18994  014D8A  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 18995  014D8C  5162               	movf	Console_FormFeed@x& (0+255),w,b
 18996  014D8E  0D01               	mullw	1
 18997  014D90  50F3               	movf	prodl,w,c
 18998  014D92  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 18999  014D94  6ED9               	movwf	fsr2l,c
 19000  014D96  50F4               	movf	prodh,w,c
 19001  014D98  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 19002  014D9A  6EDA               	movwf	fsr2h,c
 19003  014D9C  0E80               	movlw	128
 19004  014D9E  6EDF               	movwf	indf2,c
 19005                           
 19006                           ; BSR set to: 0
 19007  014DA0  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 19008  014DA2  D7E4               	goto	l12476
 19009  014DA4                     u9570:
 19010                           
 19011                           ; BSR set to: 0
 19012                           
 19013                           ; BSR set to: 0
 19014  014DA4  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 19015  014DA6  D7DC               	goto	l12470
 19016  014DA8                     u9580:
 19017                           
 19018                           ; BSR set to: 0
 19019                           ;Console.c: 204: clearall = 1;
 19020                           
 19021                           ; BSR set to: 0
 19022  014DA8  0E01               	movlw	1
 19023  014DAA  6FF5               	movwf	_clearall& (0+255),b
 19024                           
 19025                           ;Console.c: 205: gCursor.x = 6;
 19026  014DAC  0E00               	movlw	0
 19027  014DAE  6E47               	movwf	_gCursor+1,c
 19028  014DB0  0E06               	movlw	6
 19029  014DB2  6E46               	movwf	_gCursor,c
 19030                           
 19031                           ;Console.c: 206: gCursor.y = 6;
 19032  014DB4  0E00               	movlw	0
 19033  014DB6  6E49               	movwf	_gCursor+3,c
 19034  014DB8  0E06               	movlw	6
 19035  014DBA  6E48               	movwf	_gCursor+2,c
 19036                           
 19037                           ; BSR set to: 0
 19038  014DBC  0012               	return		;funcret
 19039  014DBE                     __end_of_Console_FormFeed:
 19040                           	opt stack 0
 19041                           tosu	equ	0xFFF
 19042                           tosh	equ	0xFFE
 19043                           tosl	equ	0xFFD
 19044                           pclath	equ	0xFFA
 19045                           tblptru	equ	0xFF8
 19046                           tblptrh	equ	0xFF7
 19047                           tblptrl	equ	0xFF6
 19048                           tablat	equ	0xFF5
 19049                           prodh	equ	0xFF4
 19050                           prodl	equ	0xFF3
 19051                           intcon	equ	0xFF2
 19052                           indf0	equ	0xFEF
 19053                           postinc0	equ	0xFEE
 19054                           fsr0h	equ	0xFEA
 19055                           fsr0l	equ	0xFE9
 19056                           wreg	equ	0xFE8
 19057                           indf1	equ	0xFE7
 19058                           postdec1	equ	0xFE5
 19059                           fsr1h	equ	0xFE2
 19060                           fsr1l	equ	0xFE1
 19061                           indf2	equ	0xFDF
 19062                           postinc2	equ	0xFDE
 19063                           postdec2	equ	0xFDD
 19064                           plusw2	equ	0xFDB
 19065                           fsr2h	equ	0xFDA
 19066                           fsr2l	equ	0xFD9
 19067                           status	equ	0xFD8
 19068                           
 19069 ;; *************** function _Console_ResetCursor *****************
 19070 ;; Defined at:
 19071 ;;		line 297 in file "Library/Console.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;		None
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;                  1    wreg      void 
 19078 ;; Registers used:
 19079 ;;		wreg, status,2
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;Total ram usage:        0 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    7
 19092 ;; This function calls:
 19093 ;;		Nothing
 19094 ;; This function is called by:
 19095 ;;		_Console_PrintChar
 19096 ;; This function uses a non-reentrant model
 19097 ;;
 19098                           
 19099                           	psect	text103
 19100  015DE0                     __ptext103:
 19101                           	opt stack 0
 19102  015DE0                     _Console_ResetCursor:
 19103                           	opt stack 20
 19104                           
 19105                           ;Console.c: 299: gCursor.x = 6;
 19106                           
 19107                           ; BSR set to: 0
 19108                           ;incstack = 0
 19109  015DE0  0E00               	movlw	0
 19110  015DE2  6E47               	movwf	_gCursor+1,c
 19111  015DE4  0E06               	movlw	6
 19112  015DE6  6E46               	movwf	_gCursor,c
 19113                           
 19114                           ;Console.c: 300: gCursor.y = 6;
 19115  015DE8  0E00               	movlw	0
 19116  015DEA  6E49               	movwf	_gCursor+3,c
 19117  015DEC  0E06               	movlw	6
 19118  015DEE  6E48               	movwf	_gCursor+2,c
 19119                           
 19120                           ;Console.c: 303: lBufferX = 0;
 19121  015DF0  0E00               	movlw	0
 19122  015DF2  0100               	movlb	0	; () banked
 19123  015DF4  6FF4               	movwf	_lBufferX& (0+255),b
 19124                           
 19125                           ;Console.c: 304: lBufferY = 0;
 19126  015DF6  0E00               	movlw	0
 19127  015DF8  6FF3               	movwf	_lBufferY& (0+255),b
 19128                           
 19129                           ; BSR set to: 0
 19130  015DFA  0012               	return		;funcret
 19131  015DFC                     __end_of_Console_ResetCursor:
 19132                           	opt stack 0
 19133                           tosu	equ	0xFFF
 19134                           tosh	equ	0xFFE
 19135                           tosl	equ	0xFFD
 19136                           pclath	equ	0xFFA
 19137                           tblptru	equ	0xFF8
 19138                           tblptrh	equ	0xFF7
 19139                           tblptrl	equ	0xFF6
 19140                           tablat	equ	0xFF5
 19141                           prodh	equ	0xFF4
 19142                           prodl	equ	0xFF3
 19143                           intcon	equ	0xFF2
 19144                           indf0	equ	0xFEF
 19145                           postinc0	equ	0xFEE
 19146                           fsr0h	equ	0xFEA
 19147                           fsr0l	equ	0xFE9
 19148                           wreg	equ	0xFE8
 19149                           indf1	equ	0xFE7
 19150                           postdec1	equ	0xFE5
 19151                           fsr1h	equ	0xFE2
 19152                           fsr1l	equ	0xFE1
 19153                           indf2	equ	0xFDF
 19154                           postinc2	equ	0xFDE
 19155                           postdec2	equ	0xFDD
 19156                           plusw2	equ	0xFDB
 19157                           fsr2h	equ	0xFDA
 19158                           fsr2l	equ	0xFD9
 19159                           status	equ	0xFD8
 19160                           
 19161 ;; *************** function _Console_Backspace *****************
 19162 ;; Defined at:
 19163 ;;		line 209 in file "Library/Console.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;		None
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;		None
 19168 ;; Return value:  Size  Location     Type
 19169 ;;                  1    wreg      void 
 19170 ;; Registers used:
 19171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19172 ;; Tracked objects:
 19173 ;;		On entry : 0/0
 19174 ;;		On exit  : 0/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;Total ram usage:        0 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; Hardware stack levels required when called:    8
 19184 ;; This function calls:
 19185 ;;		_Console_ClearCursor
 19186 ;; This function is called by:
 19187 ;;		_Console_PrintChar
 19188 ;; This function uses a non-reentrant model
 19189 ;;
 19190                           
 19191                           	psect	text104
 19192  015434                     __ptext104:
 19193                           	opt stack 0
 19194  015434                     _Console_Backspace:
 19195                           	opt stack 19
 19196                           
 19197                           ;Console.c: 211: if (lBufferX > 0)
 19198                           
 19199                           ; BSR set to: 0
 19200                           ;incstack = 0
 19201  015434  0100               	movlb	0	; () banked
 19202  015436  51F4               	movf	_lBufferX& (0+255),w,b
 19203  015438  B4D8               	btfsc	status,2,c
 19204  01543A  D006               	goto	l997
 19205                           
 19206                           ; BSR set to: 0
 19207                           ;Console.c: 212: {
 19208                           ;Console.c: 213: gCursor.x -= 6;
 19209  01543C  0EFA               	movlw	250
 19210  01543E  2646               	addwf	_gCursor,f,c
 19211  015440  0EFF               	movlw	255
 19212  015442  2247               	addwfc	_gCursor+1,f,c
 19213                           
 19214                           ; BSR set to: 0
 19215                           ;Console.c: 216: lBufferX --;
 19216  015444  07F4               	decf	_lBufferX& (0+255),f,b
 19217                           
 19218                           ;Console.c: 218: }
 19219  015446  D01B               	goto	l1000
 19220  015448                     l997:
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;Console.c: 219: else if (lBufferY > 0)
 19224                           
 19225                           ; BSR set to: 0
 19226  015448  51F3               	movf	_lBufferY& (0+255),w,b
 19227  01544A  B4D8               	btfsc	status,2,c
 19228  01544C  D00C               	goto	l999
 19229                           
 19230                           ; BSR set to: 0
 19231                           ;Console.c: 220: {
 19232                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 19233  01544E  0E00               	movlw	0
 19234  015450  6E47               	movwf	_gCursor+1,c
 19235  015452  0E72               	movlw	114
 19236  015454  6E46               	movwf	_gCursor,c
 19237                           
 19238                           ; BSR set to: 0
 19239                           ;Console.c: 222: gCursor.y -= 8;
 19240  015456  0EF8               	movlw	248
 19241  015458  2648               	addwf	_gCursor+2,f,c
 19242  01545A  0EFF               	movlw	255
 19243  01545C  2249               	addwfc	_gCursor+3,f,c
 19244                           
 19245                           ; BSR set to: 0
 19246                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 19247  01545E  0E13               	movlw	19
 19248  015460  6FF4               	movwf	_lBufferX& (0+255),b
 19249                           
 19250                           ; BSR set to: 0
 19251                           ;Console.c: 226: lBufferY --;
 19252  015462  07F3               	decf	_lBufferY& (0+255),f,b
 19253                           
 19254                           ;Console.c: 228: }
 19255  015464  D00C               	goto	l1000
 19256  015466                     l999:
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;Console.c: 229: else
 19260                           ;Console.c: 230: {
 19261                           ;Console.c: 231: gCursor.x = 6;
 19262                           
 19263                           ; BSR set to: 0
 19264  015466  0E00               	movlw	0
 19265  015468  6E47               	movwf	_gCursor+1,c
 19266  01546A  0E06               	movlw	6
 19267  01546C  6E46               	movwf	_gCursor,c
 19268                           
 19269                           ;Console.c: 232: gCursor.y = 6;
 19270  01546E  0E00               	movlw	0
 19271  015470  6E49               	movwf	_gCursor+3,c
 19272  015472  0E06               	movlw	6
 19273  015474  6E48               	movwf	_gCursor+2,c
 19274                           
 19275                           ;Console.c: 235: lBufferX = 0;
 19276  015476  0E00               	movlw	0
 19277  015478  6FF4               	movwf	_lBufferX& (0+255),b
 19278                           
 19279                           ;Console.c: 236: lBufferY = 0;
 19280  01547A  0E00               	movlw	0
 19281  01547C  6FF3               	movwf	_lBufferY& (0+255),b
 19282  01547E                     l1000:
 19283                           
 19284                           ; BSR set to: 0
 19285                           ;Console.c: 238: }
 19286                           ;Console.c: 240: Console_ClearCursor();
 19287                           
 19288                           ; BSR set to: 0
 19289                           
 19290                           ; BSR set to: 0
 19291  01547E  EC92  F0AD         	call	_Console_ClearCursor	;wreg free
 19292  015482  0012               	return		;funcret
 19293  015484                     __end_of_Console_Backspace:
 19294                           	opt stack 0
 19295                           tosu	equ	0xFFF
 19296                           tosh	equ	0xFFE
 19297                           tosl	equ	0xFFD
 19298                           pclath	equ	0xFFA
 19299                           tblptru	equ	0xFF8
 19300                           tblptrh	equ	0xFF7
 19301                           tblptrl	equ	0xFF6
 19302                           tablat	equ	0xFF5
 19303                           prodh	equ	0xFF4
 19304                           prodl	equ	0xFF3
 19305                           intcon	equ	0xFF2
 19306                           indf0	equ	0xFEF
 19307                           postinc0	equ	0xFEE
 19308                           fsr0h	equ	0xFEA
 19309                           fsr0l	equ	0xFE9
 19310                           wreg	equ	0xFE8
 19311                           indf1	equ	0xFE7
 19312                           postdec1	equ	0xFE5
 19313                           fsr1h	equ	0xFE2
 19314                           fsr1l	equ	0xFE1
 19315                           indf2	equ	0xFDF
 19316                           postinc2	equ	0xFDE
 19317                           postdec2	equ	0xFDD
 19318                           plusw2	equ	0xFDB
 19319                           fsr2h	equ	0xFDA
 19320                           fsr2l	equ	0xFD9
 19321                           status	equ	0xFD8
 19322                           
 19323 ;; *************** function _Console_ClearCursor *****************
 19324 ;; Defined at:
 19325 ;;		line 308 in file "Library/Console.c"
 19326 ;; Parameters:    Size  Location     Type
 19327 ;;		None
 19328 ;; Auto vars:     Size  Location     Type
 19329 ;;		None
 19330 ;; Return value:  Size  Location     Type
 19331 ;;                  1    wreg      void 
 19332 ;; Registers used:
 19333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19334 ;; Tracked objects:
 19335 ;;		On entry : 0/0
 19336 ;;		On exit  : 0/0
 19337 ;;		Unchanged: 0/0
 19338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19341 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19343 ;;Total ram usage:        2 bytes
 19344 ;; Hardware stack levels used:    1
 19345 ;; Hardware stack levels required when called:    7
 19346 ;; This function calls:
 19347 ;;		Nothing
 19348 ;; This function is called by:
 19349 ;;		_Console_Backspace
 19350 ;;		_Console_Tab
 19351 ;; This function uses a non-reentrant model
 19352 ;;
 19353                           
 19354                           	psect	text105
 19355  015B24                     __ptext105:
 19356                           	opt stack 0
 19357  015B24                     _Console_ClearCursor:
 19358                           	opt stack 19
 19359                           
 19360                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 19361                           
 19362                           ;incstack = 0
 19363  015B24  0E01               	movlw	1
 19364  015B26  6E4D               	movwf	_change,c
 19365  015B28  0100               	movlb	0	; () banked
 19366  015B2A  51F3               	movf	_lBufferY& (0+255),w,b
 19367  015B2C  0D14               	mullw	20
 19368  015B2E  0E18               	movlw	low _lBuffer
 19369  015B30  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 19370  015B32  0E03               	movlw	high _lBuffer
 19371  015B34  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 19372  015B36  50F3               	movf	prodl,w,c
 19373  015B38  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 19374  015B3A  50F4               	movf	prodh,w,c
 19375  015B3C  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 19376  015B3E  51F4               	movf	_lBufferX& (0+255),w,b
 19377  015B40  0D01               	mullw	1
 19378  015B42  50F3               	movf	prodl,w,c
 19379  015B44  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 19380  015B46  6ED9               	movwf	fsr2l,c
 19381  015B48  50F4               	movf	prodh,w,c
 19382  015B4A  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 19383  015B4C  6EDA               	movwf	fsr2h,c
 19384  015B4E  0E80               	movlw	128
 19385  015B50  6EDF               	movwf	indf2,c
 19386                           
 19387                           ; BSR set to: 0
 19388  015B52  0012               	return		;funcret
 19389  015B54                     __end_of_Console_ClearCursor:
 19390                           	opt stack 0
 19391                           tosu	equ	0xFFF
 19392                           tosh	equ	0xFFE
 19393                           tosl	equ	0xFFD
 19394                           pclath	equ	0xFFA
 19395                           tblptru	equ	0xFF8
 19396                           tblptrh	equ	0xFF7
 19397                           tblptrl	equ	0xFF6
 19398                           tablat	equ	0xFF5
 19399                           prodh	equ	0xFF4
 19400                           prodl	equ	0xFF3
 19401                           intcon	equ	0xFF2
 19402                           indf0	equ	0xFEF
 19403                           postinc0	equ	0xFEE
 19404                           fsr0h	equ	0xFEA
 19405                           fsr0l	equ	0xFE9
 19406                           wreg	equ	0xFE8
 19407                           indf1	equ	0xFE7
 19408                           postdec1	equ	0xFE5
 19409                           fsr1h	equ	0xFE2
 19410                           fsr1l	equ	0xFE1
 19411                           indf2	equ	0xFDF
 19412                           postinc2	equ	0xFDE
 19413                           postdec2	equ	0xFDD
 19414                           plusw2	equ	0xFDB
 19415                           fsr2h	equ	0xFDA
 19416                           fsr2l	equ	0xFD9
 19417                           status	equ	0xFD8
 19418                           
 19419 ;; *************** function _SteppingCCW *****************
 19420 ;; Defined at:
 19421 ;;		line 275 in file "main.c"
 19422 ;; Parameters:    Size  Location     Type
 19423 ;;		None
 19424 ;; Auto vars:     Size  Location     Type
 19425 ;;		None
 19426 ;; Return value:  Size  Location     Type
 19427 ;;                  2  2188[None  ] int 
 19428 ;; Registers used:
 19429 ;;		wreg, status,2, status,0, cstack
 19430 ;; Tracked objects:
 19431 ;;		On entry : 0/0
 19432 ;;		On exit  : 0/0
 19433 ;;		Unchanged: 0/0
 19434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19439 ;;Total ram usage:        0 bytes
 19440 ;; Hardware stack levels used:    1
 19441 ;; Hardware stack levels required when called:    9
 19442 ;; This function calls:
 19443 ;;		_STP1
 19444 ;;		_STP2
 19445 ;;		_STP3
 19446 ;;		_STP4
 19447 ;;		_delay_ms
 19448 ;; This function is called by:
 19449 ;;		_Sensor_Observe2
 19450 ;;		_Closest_Object
 19451 ;; This function uses a non-reentrant model
 19452 ;;
 19453                           
 19454                           	psect	text106
 19455  0155B2                     __ptext106:
 19456                           	opt stack 0
 19457  0155B2                     _SteppingCCW:
 19458                           	opt stack 20
 19459                           
 19460                           ;main.c: 276: STP4();
 19461                           
 19462                           ; BSR set to: 0
 19463                           ;incstack = 0
 19464  0155B2  EC3B  F0B0         	call	_STP4	;wreg free
 19465                           
 19466                           ;main.c: 277: delay_ms(2);
 19467  0155B6  0E00               	movlw	0
 19468  0155B8  0100               	movlb	0	; () banked
 19469  0155BA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19470  0155BC  0E02               	movlw	2
 19471  0155BE  6F60               	movwf	delay_ms@ms& (0+255),b
 19472  0155C0  EC75  F0A8         	call	_delay_ms	;wreg free
 19473                           
 19474                           ;main.c: 278: STP3();
 19475  0155C4  EC3F  F0B0         	call	_STP3	;wreg free
 19476                           
 19477                           ;main.c: 279: delay_ms(2);
 19478  0155C8  0E00               	movlw	0
 19479  0155CA  0100               	movlb	0	; () banked
 19480  0155CC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19481  0155CE  0E02               	movlw	2
 19482  0155D0  6F60               	movwf	delay_ms@ms& (0+255),b
 19483  0155D2  EC75  F0A8         	call	_delay_ms	;wreg free
 19484                           
 19485                           ;main.c: 280: STP2();
 19486  0155D6  EC43  F0B0         	call	_STP2	;wreg free
 19487                           
 19488                           ;main.c: 281: delay_ms(2);
 19489  0155DA  0E00               	movlw	0
 19490  0155DC  0100               	movlb	0	; () banked
 19491  0155DE  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19492  0155E0  0E02               	movlw	2
 19493  0155E2  6F60               	movwf	delay_ms@ms& (0+255),b
 19494  0155E4  EC75  F0A8         	call	_delay_ms	;wreg free
 19495                           
 19496                           ;main.c: 282: STP1();
 19497  0155E8  EC47  F0B0         	call	_STP1	;wreg free
 19498                           
 19499                           ;main.c: 283: delay_ms(2);
 19500  0155EC  0E00               	movlw	0
 19501  0155EE  0100               	movlb	0	; () banked
 19502  0155F0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19503  0155F2  0E02               	movlw	2
 19504  0155F4  6F60               	movwf	delay_ms@ms& (0+255),b
 19505  0155F6  EC75  F0A8         	call	_delay_ms	;wreg free
 19506  0155FA  0012               	return		;funcret
 19507  0155FC                     __end_of_SteppingCCW:
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
 19508                           	opt stack 0
 19509                           tosu	equ	0xFFF
 19510                           tosh	equ	0xFFE
 19511                           tosl	equ	0xFFD
 19512                           pclath	equ	0xFFA
 19513                           tblptru	equ	0xFF8
 19514                           tblptrh	equ	0xFF7
 19515                           tblptrl	equ	0xFF6
 19516                           tablat	equ	0xFF5
 19517                           prodh	equ	0xFF4
 19518                           prodl	equ	0xFF3
 19519                           intcon	equ	0xFF2
 19520                           indf0	equ	0xFEF
 19521                           postinc0	equ	0xFEE
 19522                           fsr0h	equ	0xFEA
 19523                           fsr0l	equ	0xFE9
 19524                           wreg	equ	0xFE8
 19525                           indf1	equ	0xFE7
 19526                           postdec1	equ	0xFE5
 19527                           fsr1h	equ	0xFE2
 19528                           fsr1l	equ	0xFE1
 19529                           indf2	equ	0xFDF
 19530                           postinc2	equ	0xFDE
 19531                           postdec2	equ	0xFDD
 19532                           plusw2	equ	0xFDB
 19533                           fsr2h	equ	0xFDA
 19534                           fsr2l	equ	0xFD9
 19535                           status	equ	0xFD8
 19536                           
<<<<<<< HEAD
 19537 ;; *************** function _Console_MakeField *****************
 19538 ;; Defined at:
 19539 ;;		line 435 in file "Library/Console.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;  pInput          1    wreg     unsigned char 
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;  pInput          1   11[BANK0 ] unsigned char 
 19544 ;;  y               1   17[BANK0 ] unsigned char 
 19545 ;;  x               1   16[BANK0 ] unsigned char 
 19546 ;;  Column          2   12[BANK0 ] PTR struct Byte
 19547 ;;		 -> Font5x7(480), 
 19548 ;;  Index           2    9[BANK0 ] unsigned short 
 19549 ;; Return value:  Size  Location     Type
 19550 ;;                  2    5[BANK0 ] PTR unsigned short 
 19551 ;; Registers used:
 19552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19553 ;; Tracked objects:
 19554 ;;		On entry : 0/0
 19555 ;;		On exit  : 0/0
 19556 ;;		Unchanged: 0/0
 19557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19558 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19559 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19561 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19562 ;;Total ram usage:       13 bytes
 19563 ;; Hardware stack levels used:    1
 19564 ;; Hardware stack levels required when called:    8
 19565 ;; This function calls:
 19566 ;;		_Byte_GetBit
 19567 ;; This function is called by:
 19568 ;;		_Console_Render
 19569 ;; This function uses a non-reentrant model
 19570 ;;
 19571                           
 19572                           	psect	text114
 19573  01217E                     __ptext114:
 19574                           	opt stack 0
 19575  01217E                     _Console_MakeField:
 19576                           	opt stack 21
 19577                           
 19578                           ;incstack = 0
 19579                           ;Console_MakeField@pInput stored from wreg
 19580  01217E  0100               	movlb	0	; () banked
 19581  012180  6FBE               	movwf	Console_MakeField@pInput& (0+255),b
 19582                           
 19583                           ;Console.c: 437: static Colour Fill[7][5];
 19584                           ;Console.c: 438: pInput -= 32;
 19585  012182  0E20               	movlw	32
 19586  012184  0100               	movlb	0	; () banked
 19587  012186  5FBE               	subwf	Console_MakeField@pInput& (0+255),f,b
 19588                           
 19589                           ; BSR set to: 0
 19590                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 19591  012188  51BE               	movf	Console_MakeField@pInput& (0+255),w,b
 19592  01218A  0D05               	mullw	5
 19593  01218C  CFF3 F0BC          	movff	prodl,Console_MakeField@Index
 19594  012190  CFF4 F0BD          	movff	prodh,Console_MakeField@Index+1
 19595                           
 19596                           ; BSR set to: 0
 19597                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 19598  012194  0ED7               	movlw	low _Font5x7
 19599  012196  25BC               	addwf	Console_MakeField@Index& (0+255),w,b
 19600  012198  6FBF               	movwf	Console_MakeField@Column& (0+255),b
 19601  01219A  0EFC               	movlw	high _Font5x7
 19602  01219C  21BD               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 19603  01219E  6FC0               	movwf	(Console_MakeField@Column+1)& (0+255),b
 19604                           
 19605                           ; BSR set to: 0
 19606                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 19607  0121A0  0E00               	movlw	0
 19608  0121A2  6FC3               	movwf	Console_MakeField@x& (0+255),b
 19609  0121A4                     l12828:
 19610                           
 19611                           ; BSR set to: 0
 19612  0121A4  0E04               	movlw	4
 19613  0121A6  65C3               	cpfsgt	Console_MakeField@x& (0+255),b
 19614  0121A8  D001               	goto	l1077
 19615  0121AA  D037               	goto	u8960
 19616  0121AC                     l1077:
 19617                           
 19618                           ; BSR set to: 0
 19619                           ;Console.c: 444: {
 19620                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 19621                           
 19622                           ; BSR set to: 0
 19623  0121AC  0E00               	movlw	0
 19624  0121AE  6FC4               	movwf	Console_MakeField@y& (0+255),b
 19625  0121B0                     l12834:
 19626                           
 19627                           ; BSR set to: 0
 19628  0121B0  0E06               	movlw	6
 19629  0121B2  65C4               	cpfsgt	Console_MakeField@y& (0+255),b
 19630  0121B4  D001               	goto	l1079
 19631  0121B6  D02D               	goto	u8950
 19632  0121B8                     l1079:
 19633                           
 19634                           ; BSR set to: 0
 19635                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 19636                           
 19637                           ; BSR set to: 0
 19638  0121B8  C0BF  F0B3         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 19639  0121BC  C0C0  F0B4         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 19640  0121C0  C0C4  F0B5         	movff	Console_MakeField@y,Byte_GetBit@pBit
 19641  0121C4  EC8F  F09B         	call	_Byte_GetBit	;wreg free
 19642  0121C8  0900               	iorlw	0
 19643  0121CA  A4D8               	btfss	status,2,c
 19644  0121CC  D005               	goto	l1082
 19645  0121CE  C07F  F0C1         	movff	_gBackcolour,_Console_MakeField$10974
 19646  0121D2  C080  F0C2         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 19647  0121D6  D004               	goto	l1084
 19648  0121D8                     l1082:
 19649  0121D8  C0FD  F0C1         	movff	_gForecolour,_Console_MakeField$10974
 19650  0121DC  C0FE  F0C2         	movff	_gForecolour+1,_Console_MakeField$10974+1
 19651  0121E0                     l1084:
 19652  0121E0  0100               	movlb	0	; () banked
 19653  0121E2  51C4               	movf	Console_MakeField@y& (0+255),w,b
 19654  0121E4  0D0A               	mullw	10
 19655  0121E6  0EAA               	movlw	low Console_MakeField@Fill
 19656  0121E8  6FBA               	movwf	??_Console_MakeField& (0+255),b
 19657  0121EA  0E02               	movlw	high Console_MakeField@Fill
 19658  0121EC  6FBB               	movwf	(??_Console_MakeField+1)& (0+255),b
 19659  0121EE  50F3               	movf	prodl,w,c
 19660  0121F0  27BA               	addwf	??_Console_MakeField& (0+255),f,b
 19661  0121F2  50F4               	movf	prodh,w,c
 19662  0121F4  23BB               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 19663  0121F6  51C3               	movf	Console_MakeField@x& (0+255),w,b
 19664  0121F8  0D02               	mullw	2
 19665  0121FA  50F3               	movf	prodl,w,c
 19666  0121FC  25BA               	addwf	??_Console_MakeField& (0+255),w,b
 19667  0121FE  6ED9               	movwf	fsr2l,c
 19668  012200  50F4               	movf	prodh,w,c
 19669  012202  21BB               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 19670  012204  6EDA               	movwf	fsr2h,c
 19671  012206  C0C1  FFDE         	movff	_Console_MakeField$10974,postinc2
 19672  01220A  C0C2  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 19673                           
 19674                           ; BSR set to: 0
 19675  01220E  2BC4               	incf	Console_MakeField@y& (0+255),f,b
 19676  012210  D7CF               	goto	l12834
 19677  012212                     u8950:
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;Console.c: 447: Column += 1;
 19681                           
 19682                           ; BSR set to: 0
 19683  012212  4BBF               	infsnz	Console_MakeField@Column& (0+255),f,b
 19684  012214  2BC0               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 19685  012216  2BC3               	incf	Console_MakeField@x& (0+255),f,b
 19686  012218  D7C5               	goto	l12828
 19687  01221A                     u8960:
 19688                           
 19689                           ; BSR set to: 0
 19690                           ;Console.c: 448: }
 19691                           ;Console.c: 449: return (ColourPtr)Fill;
 19692                           
 19693                           ; BSR set to: 0
 19694  01221A  0EAA               	movlw	low Console_MakeField@Fill
 19695  01221C  6FB8               	movwf	?_Console_MakeField& (0+255),b
 19696  01221E  0E02               	movlw	high Console_MakeField@Fill
 19697  012220  6FB9               	movwf	(?_Console_MakeField+1)& (0+255),b
 19698  012222  0012               	return	
 19699  012224                     __end_of_Console_MakeField:
 19700                           	opt stack 0
 19701                           tosu	equ	0xFFF
 19702                           tosh	equ	0xFFE
 19703                           tosl	equ	0xFFD
 19704                           pclath	equ	0xFFA
 19705                           tblptru	equ	0xFF8
 19706                           tblptrh	equ	0xFF7
 19707                           tblptrl	equ	0xFF6
 19708                           tablat	equ	0xFF5
 19709                           prodh	equ	0xFF4
 19710                           prodl	equ	0xFF3
 19711                           intcon	equ	0xFF2
 19712                           indf0	equ	0xFEF
 19713                           postinc0	equ	0xFEE
 19714                           fsr0h	equ	0xFEA
 19715                           fsr0l	equ	0xFE9
 19716                           wreg	equ	0xFE8
 19717                           indf1	equ	0xFE7
 19718                           postdec1	equ	0xFE5
 19719                           fsr1h	equ	0xFE2
 19720                           fsr1l	equ	0xFE1
 19721                           indf2	equ	0xFDF
 19722                           postinc2	equ	0xFDE
 19723                           postdec2	equ	0xFDD
 19724                           plusw2	equ	0xFDB
 19725                           fsr2h	equ	0xFDA
 19726                           fsr2l	equ	0xFD9
 19727                           status	equ	0xFD8
 19728                           
 19729 ;; *************** function _Byte_GetBit *****************
 19730 ;; Defined at:
 19731 ;;		line 38 in file "Library/Types.c"
 19732 ;; Parameters:    Size  Location     Type
 19733 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19734 ;;		 -> Font5x7(480), 
 19735 ;;  pBit            1    2[BANK0 ] unsigned char 
 19736 ;; Auto vars:     Size  Location     Type
 19737 ;;  Output          1    4[BANK0 ] unsigned char 
 19738 ;; Return value:  Size  Location     Type
 19739 ;;                  1    wreg      unsigned char 
 19740 ;; Registers used:
 19741 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 19742 ;; Tracked objects:
 19743 ;;		On entry : 0/0
 19744 ;;		On exit  : 0/0
 19745 ;;		Unchanged: 0/0
 19746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19747 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19751 ;;Total ram usage:        5 bytes
 19752 ;; Hardware stack levels used:    1
 19753 ;; Hardware stack levels required when called:    7
 19754 ;; This function calls:
 19755 ;;		Nothing
 19756 ;; This function is called by:
 19757 ;;		_Console_MakeField
 19758 ;;		_Word_GetBit
 19759 ;; This function uses a non-reentrant model
 19760 ;;
 19761                           
 19762                           	psect	text115
 19763  01371E                     __ptext115:
 19764                           	opt stack 0
 19765  01371E                     _Byte_GetBit:
 19766                           	opt stack 21
 19767                           
 19768                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;incstack = 0
 19772  01371E  C0B3  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 19773  013722  C0B4  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 19774  013726                     	if	0	;tblptru may be non-zero
 19775  013726                     	endif
 19776  013726                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 19777  013726  0E00               	movlw	low (__mediumconst shr (0+16))
 19778  013728  6EF8               	movwf	tblptru,c
 19779  01372A                     	endif
 19780  01372A  0008               	tblrd		*
 19781  01372C  CFF5 F0B7          	movff	tablat,Byte_GetBit@Output
 19782                           
 19783                           ;Types.c: 42: Output >>= pBit;
 19784  013730  0100               	movlb	0	; () banked
 19785  013732  29B5               	incf	Byte_GetBit@pBit& (0+255),w,b
 19786  013734  6FB6               	movwf	??_Byte_GetBit& (0+255),b
 19787  013736  D002               	goto	u8590
 19788  013738                     u8595:
 19789  013738  90D8               	bcf	status,0,c
 19790  01373A  33B7               	rrcf	Byte_GetBit@Output& (0+255),f,b
 19791  01373C                     u8590:
 19792  01373C  2FB6               	decfsz	??_Byte_GetBit& (0+255),f,b
 19793  01373E  D7FC               	goto	u8595
 19794                           
 19795                           ;Types.c: 43: Output &= 1;
 19796  013740  0E01               	movlw	1
 19797  013742  0100               	movlb	0	; () banked
 19798  013744  17B7               	andwf	Byte_GetBit@Output& (0+255),f,b
 19799                           
 19800                           ; BSR set to: 0
 19801                           ;Types.c: 44: return Output;
 19802  013746  51B7               	movf	Byte_GetBit@Output& (0+255),w,b
 19803  013748  0012               	return	
 19804  01374A                     __end_of_Byte_GetBit:
 19805                           	opt stack 0
 19806                           tosu	equ	0xFFF
 19807                           tosh	equ	0xFFE
 19808                           tosl	equ	0xFFD
 19809                           pclath	equ	0xFFA
 19810                           tblptru	equ	0xFF8
 19811                           tblptrh	equ	0xFF7
 19812                           tblptrl	equ	0xFF6
 19813                           tablat	equ	0xFF5
 19814                           prodh	equ	0xFF4
 19815                           prodl	equ	0xFF3
 19816                           intcon	equ	0xFF2
 19817                           indf0	equ	0xFEF
 19818                           postinc0	equ	0xFEE
 19819                           fsr0h	equ	0xFEA
 19820                           fsr0l	equ	0xFE9
 19821                           wreg	equ	0xFE8
 19822                           indf1	equ	0xFE7
 19823                           postdec1	equ	0xFE5
 19824                           fsr1h	equ	0xFE2
 19825                           fsr1l	equ	0xFE1
 19826                           indf2	equ	0xFDF
 19827                           postinc2	equ	0xFDE
 19828                           postdec2	equ	0xFDD
 19829                           plusw2	equ	0xFDB
 19830                           fsr2h	equ	0xFDA
 19831                           fsr2l	equ	0xFD9
 19832                           status	equ	0xFD8
 19833                           
 19834 ;; *************** function _Console_Init *****************
 19835 ;; Defined at:
 19836 ;;		line 157 in file "Library/Console.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;		None
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;  y               1    3[BANK0 ] unsigned char 
 19841 ;;  x               1    2[BANK0 ] unsigned char 
 19842 ;; Return value:  Size  Location     Type
 19843 ;;                  1    wreg      void 
 19844 ;; Registers used:
 19845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19846 ;; Tracked objects:
 19847 ;;		On entry : 0/0
 19848 ;;		On exit  : 0/0
 19849 ;;		Unchanged: 0/0
 19850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19852 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19853 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;Total ram usage:        4 bytes
 19856 ;; Hardware stack levels used:    1
 19857 ;; Hardware stack levels required when called:    7
 19858 ;; This function calls:
 19859 ;;		Nothing
 19860 ;; This function is called by:
 19861 ;;		_main
 19862 ;; This function uses a non-reentrant model
 19863 ;;
 19864                           
 19865                           	psect	text116
 19866  012BCE                     __ptext116:
 19867                           	opt stack 0
 19868  012BCE                     _Console_Init:
 19869                           	opt stack 23
 19870                           
 19871                           ;Console.c: 160: lBufferX = 0;
 19872                           
 19873                           ; BSR set to: 0
 19874                           ;incstack = 0
 19875  012BCE  0E00               	movlw	0
 19876  012BD0  0100               	movlb	0	; () banked
 19877  012BD2  6F8F               	movwf	_lBufferX& (0+255),b
 19878                           
 19879                           ;Console.c: 161: lBufferY = 0;
 19880  012BD4  0E00               	movlw	0
 19881  012BD6  6F8E               	movwf	_lBufferY& (0+255),b
 19882                           
 19883                           ;Console.c: 163: UINT8 x, y;
 19884                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19885  012BD8  0E00               	movlw	0
 19886  012BDA  6FB5               	movwf	Console_Init@x& (0+255),b
 19887  012BDC                     l13096:
 19888                           
 19889                           ; BSR set to: 0
 19890  012BDC  0E13               	movlw	19
 19891  012BDE  65B5               	cpfsgt	Console_Init@x& (0+255),b
 19892  012BE0  D001               	goto	l976
 19893  012BE2  0012               	return	
 19894  012BE4                     l976:
 19895                           
 19896                           ; BSR set to: 0
 19897                           ;Console.c: 165: {
 19898                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 19899                           
 19900                           ; BSR set to: 0
 19901  012BE4  0E00               	movlw	0
 19902  012BE6  6FB6               	movwf	Console_Init@y& (0+255),b
 19903  012BE8                     l13102:
 19904                           
 19905                           ; BSR set to: 0
 19906  012BE8  0E0E               	movlw	14
 19907  012BEA  65B6               	cpfsgt	Console_Init@y& (0+255),b
 19908  012BEC  D001               	goto	l978
 19909  012BEE  D022               	goto	u9320
 19910  012BF0                     l978:
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;Console.c: 167: {
 19914                           ;Console.c: 168: lBuffer[y][x] = '\0';
 19915                           
 19916                           ; BSR set to: 0
 19917  012BF0  51B6               	movf	Console_Init@y& (0+255),w,b
 19918  012BF2  0D14               	mullw	20
 19919  012BF4  0EF0               	movlw	low _lBuffer
 19920  012BF6  6FB3               	movwf	??_Console_Init& (0+255),b
 19921  012BF8  0E02               	movlw	high _lBuffer
 19922  012BFA  6FB4               	movwf	(??_Console_Init+1)& (0+255),b
 19923  012BFC  50F3               	movf	prodl,w,c
 19924  012BFE  27B3               	addwf	??_Console_Init& (0+255),f,b
 19925  012C00  50F4               	movf	prodh,w,c
 19926  012C02  23B4               	addwfc	(??_Console_Init+1)& (0+255),f,b
 19927  012C04  51B5               	movf	Console_Init@x& (0+255),w,b
 19928  012C06  0D01               	mullw	1
 19929  012C08  50F3               	movf	prodl,w,c
 19930  012C0A  25B3               	addwf	??_Console_Init& (0+255),w,b
 19931  012C0C  6ED9               	movwf	fsr2l,c
 19932  012C0E  50F4               	movf	prodh,w,c
 19933  012C10  21B4               	addwfc	(??_Console_Init+1)& (0+255),w,b
 19934  012C12  6EDA               	movwf	fsr2h,c
 19935  012C14  0E00               	movlw	0
 19936  012C16  6EDF               	movwf	indf2,c
 19937                           
 19938                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 19939  012C18  51B6               	movf	Console_Init@y& (0+255),w,b
 19940  012C1A  0D02               	mullw	2
 19941  012C1C  0E8C               	movlw	low _lCBuffer
 19942  012C1E  24F3               	addwf	prodl,w,c
 19943  012C20  6ED9               	movwf	fsr2l,c
 19944  012C22  0E02               	movlw	high _lCBuffer
 19945  012C24  20F4               	addwfc	prodh,w,c
 19946  012C26  6EDA               	movwf	fsr2h,c
 19947  012C28  0EFF               	movlw	255
 19948  012C2A  6EDE               	movwf	postinc2,c
 19949  012C2C  0EFF               	movlw	255
 19950  012C2E  6EDD               	movwf	postdec2,c
 19951                           
 19952                           ; BSR set to: 0
 19953  012C30  2BB6               	incf	Console_Init@y& (0+255),f,b
 19954  012C32  D7DA               	goto	l13102
 19955  012C34                     u9320:
 19956                           
 19957                           ; BSR set to: 0
 19958                           
 19959                           ; BSR set to: 0
 19960  012C34  2BB5               	incf	Console_Init@x& (0+255),f,b
 19961  012C36  D7D2               	goto	l13096
 19962  012C38                     __end_of_Console_Init:
 19963                           	opt stack 0
 19964                           tosu	equ	0xFFF
 19965                           tosh	equ	0xFFE
 19966                           tosl	equ	0xFFD
 19967                           pclath	equ	0xFFA
 19968                           tblptru	equ	0xFF8
 19969                           tblptrh	equ	0xFF7
 19970                           tblptrl	equ	0xFF6
 19971                           tablat	equ	0xFF5
 19972                           prodh	equ	0xFF4
 19973                           prodl	equ	0xFF3
 19974                           intcon	equ	0xFF2
 19975                           indf0	equ	0xFEF
 19976                           postinc0	equ	0xFEE
 19977                           fsr0h	equ	0xFEA
 19978                           fsr0l	equ	0xFE9
 19979                           wreg	equ	0xFE8
 19980                           indf1	equ	0xFE7
 19981                           postdec1	equ	0xFE5
 19982                           fsr1h	equ	0xFE2
 19983                           fsr1l	equ	0xFE1
 19984                           indf2	equ	0xFDF
 19985                           postinc2	equ	0xFDE
 19986                           postdec2	equ	0xFDD
 19987                           plusw2	equ	0xFDB
 19988                           fsr2h	equ	0xFDA
 19989                           fsr2l	equ	0xFD9
 19990                           status	equ	0xFD8
 19991                           
 19992 ;; *************** function _ISR_Function *****************
 19993 ;; Defined at:
 19994 ;;		line 38 in file "Library/ISR.c"
 19995 ;; Parameters:    Size  Location     Type
 19996 ;;		None
 19997 ;; Auto vars:     Size  Location     Type
 19998 ;;		None
 19999 ;; Return value:  Size  Location     Type
 20000 ;;                  1    wreg      void 
 20001 ;; Registers used:
 20002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20003 ;; Tracked objects:
 20004 ;;		On entry : 0/0
 20005 ;;		On exit  : 0/0
 20006 ;;		Unchanged: 0/0
 20007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20010 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20011 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20012 ;;Total ram usage:       18 bytes
 20013 ;; Hardware stack levels used:    1
 20014 ;; Hardware stack levels required when called:    6
 20015 ;; This function calls:
 20016 ;;		_Timer0_ISR
 20017 ;; This function is called by:
 20018 ;;		Interrupt level 2
 20019 ;; This function uses a non-reentrant model
 20020 ;;
 20021                           
 20022                           	psect	intcode
 20023  001408                     __pintcode:
 20024                           	opt stack 0
 20025  001408                     _ISR_Function:
 20026                           	opt stack 14
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;incstack = 0
 20030  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20031  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 20032  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 20033  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 20034  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 20035  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 20036  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 20037  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 20038  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 20039  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 20040  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 20041  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 20042  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 20043  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 20044  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 20045  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 20046  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 20047  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 20048  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 20049                           
 20050                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 20051  001452  92F2               	bcf	intcon,1,c	;volatile
 20052                           
 20053                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 20054  001454  B4F2               	btfsc	intcon,2,c	;volatile
 20055  001456  AAF2               	btfss	intcon,5,c	;volatile
 20056  001458  D002               	goto	i2l1590
 20057                           
 20058                           ;ISR.c: 68: Timer0_ISR();
 20059  00145A  ECCD  F09B         	call	_Timer0_ISR	;wreg free
 20060  00145E                     i2l1590:
 20061  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 20062  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 20063  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 20064  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 20065  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 20066  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 20067  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 20068  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 20069  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 20070  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 20071  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 20072  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 20073  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 20074  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 20075  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 20076  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 20077  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 20078  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 20079  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20080  0014A8  0011               	retfie		f
 20081  0014AA                     __end_of_ISR_Function:
 20082                           	opt stack 0
 20083                           tosu	equ	0xFFF
 20084                           tosh	equ	0xFFE
 20085                           tosl	equ	0xFFD
 20086                           pclatu	equ	0xFFB
 20087                           pclath	equ	0xFFA
 20088                           tblptru	equ	0xFF8
 20089                           tblptrh	equ	0xFF7
 20090                           tblptrl	equ	0xFF6
 20091                           tablat	equ	0xFF5
 20092                           prodh	equ	0xFF4
 20093                           prodl	equ	0xFF3
 20094                           intcon	equ	0xFF2
 20095                           indf0	equ	0xFEF
 20096                           postinc0	equ	0xFEE
 20097                           fsr0h	equ	0xFEA
 20098                           fsr0l	equ	0xFE9
 20099                           wreg	equ	0xFE8
 20100                           indf1	equ	0xFE7
 20101                           postdec1	equ	0xFE5
 20102                           fsr1h	equ	0xFE2
 20103                           fsr1l	equ	0xFE1
 20104                           indf2	equ	0xFDF
 20105                           postinc2	equ	0xFDE
 20106                           postdec2	equ	0xFDD
 20107                           plusw2	equ	0xFDB
 20108                           fsr2h	equ	0xFDA
 20109                           fsr2l	equ	0xFD9
 20110                           status	equ	0xFD8
 20111                           
 20112 ;; *************** function _Timer0_ISR *****************
 20113 ;; Defined at:
 20114 ;;		line 94 in file "Library/Timer0.c"
 20115 ;; Parameters:    Size  Location     Type
 20116 ;;		None
 20117 ;; Auto vars:     Size  Location     Type
 20118 ;;		None
 20119 ;; Return value:  Size  Location     Type
 20120 ;;                  1    wreg      void 
 20121 ;; Registers used:
 20122 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20123 ;; Tracked objects:
 20124 ;;		On entry : 0/0
 20125 ;;		On exit  : 0/0
 20126 ;;		Unchanged: 0/0
 20127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20132 ;;Total ram usage:        0 bytes
 20133 ;; Hardware stack levels used:    1
 20134 ;; Hardware stack levels required when called:    5
 20135 ;; This function calls:
 20136 ;;		Absolute function
 20137 ;;		i2_Motor_Step
 20138 ;;		i2_Timer0_Stop
 20139 ;; This function is called by:
 20140 ;;		_ISR_Function
 20141 ;; This function uses a non-reentrant model
 20142 ;;
 20143                           
 20144                           	psect	text118
 20145  01379A                     __ptext118:
 20146                           	opt stack 0
 20147  01379A                     _Timer0_ISR:
 20148                           	opt stack 14
 20149                           
 20150                           ;Timer0.c: 96: Timer0_Stop();
 20151                           
 20152                           ;incstack = 0
 20153  01379A  EC9E  F09D         	call	i2_Timer0_Stop	;wreg free
 20154                           
 20155                           ;Timer0.c: 99: if (gISR != 0)
 20156  01379E  0100               	movlb	0	; () banked
 20157  0137A0  5160               	movf	_gISR& (0+255),w,b
 20158  0137A2  1161               	iorwf	(_gISR+1)& (0+255),w,b
 20159  0137A4  1162               	iorwf	(_gISR+2)& (0+255),w,b
 20160  0137A6  B4D8               	btfsc	status,2,c
 20161  0137A8  0012               	return	
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;Timer0.c: 100: gISR();
 20165  0137AA  D801               	call	i2u1049_48
 20166  0137AC  0012               	return	
 20167  0137AE                     i2u1049_48:
 20168  0137AE  0005               	push	
 20169  0137B0  6EFA               	movwf	pclath,c
 20170  0137B2  5160               	movf	_gISR& (0+255),w,b
 20171  0137B4  6EFD               	movwf	tosl,c
 20172  0137B6  5161               	movf	(_gISR+1)& (0+255),w,b
 20173  0137B8  6EFE               	movwf	tosh,c
 20174  0137BA  5162               	movf	(_gISR+2)& (0+255),w,b
 20175  0137BC  6EFF               	movwf	tosu,c
 20176  0137BE  50FA               	movf	pclath,w,c
 20177  0137C0  0012               	return		;indir
 20178  0137C2                     __end_of_Timer0_ISR:
 20179                           	opt stack 0
 20180                           tosu	equ	0xFFF
 20181                           tosh	equ	0xFFE
 20182                           tosl	equ	0xFFD
 20183                           pclatu	equ	0xFFB
 20184                           pclath	equ	0xFFA
 20185                           tblptru	equ	0xFF8
 20186                           tblptrh	equ	0xFF7
 20187                           tblptrl	equ	0xFF6
 20188                           tablat	equ	0xFF5
 20189                           prodh	equ	0xFF4
 20190                           prodl	equ	0xFF3
 20191                           intcon	equ	0xFF2
 20192                           indf0	equ	0xFEF
 20193                           postinc0	equ	0xFEE
 20194                           fsr0h	equ	0xFEA
 20195                           fsr0l	equ	0xFE9
 20196                           wreg	equ	0xFE8
 20197                           indf1	equ	0xFE7
 20198                           postdec1	equ	0xFE5
 20199                           fsr1h	equ	0xFE2
 20200                           fsr1l	equ	0xFE1
 20201                           indf2	equ	0xFDF
 20202                           postinc2	equ	0xFDE
 20203                           postdec2	equ	0xFDD
 20204                           plusw2	equ	0xFDB
 20205                           fsr2h	equ	0xFDA
 20206                           fsr2l	equ	0xFD9
 20207                           status	equ	0xFD8
 20208                           
 20209 ;; *************** function i2_Motor_Step *****************
 20210 ;; Defined at:
 20211 ;;		line 75 in file "Library/Motor.c"
 20212 ;; Parameters:    Size  Location     Type
 20213 ;;		None
 20214 ;; Auto vars:     Size  Location     Type
 20215 ;;		None
 20216 ;; Return value:  Size  Location     Type
 20217 ;;                  1    wreg      void 
 20218 ;; Registers used:
 20219 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20220 ;; Tracked objects:
 20221 ;;		On entry : 0/0
 20222 ;;		On exit  : 0/0
 20223 ;;		Unchanged: 0/0
 20224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20229 ;;Total ram usage:        2 bytes
 20230 ;; Hardware stack levels used:    1
 20231 ;; Hardware stack levels required when called:    4
 20232 ;; This function calls:
 20233 ;;		i2_MXK_Queue
 20234 ;;		i2_MXK_Release
 20235 ;;		i2_MXK_SwitchTo
 20236 ;;		i2_Port_SetPin
 20237 ;;		i2_Timer0_Restart
 20238 ;;		i2_Timer0_Stop
 20239 ;; This function is called by:
 20240 ;; This function uses a non-reentrant model
 20241 ;;
 20242                           
 20243                           	psect	text119
 20244  011D04                     __ptext119:
 20245                           	opt stack 0
 20246  011D04                     i2_Motor_Step:
 20247                           	opt stack 14
 20248                           
 20249                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 20250                           
 20251                           ;incstack = 0
 20252  011D04  0100               	movlb	0	; () banked
 20253  011D06  EE20 F004          	lfsr	2,4
 20254  011D0A  517B               	movf	_lMotor& (0+255),w,b
 20255  011D0C  26D9               	addwf	fsr2l,f,c
 20256  011D0E  517C               	movf	(_lMotor+1)& (0+255),w,b
 20257  011D10  22DA               	addwfc	fsr2h,f,c
 20258  011D12  50DF               	movf	indf2,w,c
 20259  011D14  ECCA  F09A         	call	i2_MXK_SwitchTo
 20260  011D18  0900               	iorlw	0
 20261  011D1A  B4D8               	btfsc	status,2,c
 20262  011D1C  D06A               	goto	i2l1627
 20263                           
 20264                           ;Motor.c: 78: {
 20265                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 20266  011D1E  C07B  FFD9         	movff	_lMotor,fsr2l
 20267  011D22  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20268  011D26  50DE               	movf	postinc2,w,c
 20269  011D28  10DE               	iorwf	postinc2,w,c
 20270  011D2A  B4D8               	btfsc	status,2,c
 20271  011D2C  D05D               	goto	i2l1628
 20272                           
 20273                           ;Motor.c: 80: {
 20274                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 20275  011D2E  C07B  FFD9         	movff	_lMotor,fsr2l
 20276  011D32  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20277  011D36  0E01               	movlw	1
 20278  011D38  BEDB               	btfsc	plusw2,7,c
 20279  011D3A  D022               	goto	i2l1629
 20280  011D3C  0E01               	movlw	1
 20281  011D3E  50DB               	movf	plusw2,w,c
 20282  011D40  E103               	bnz	i2u494_40
 20283  011D42  04DE               	decf	postinc2,w,c
 20284  011D44  A0D8               	btfss	status,0,c
 20285  011D46  D01C               	goto	i2l1629
 20286  011D48                     i2u494_40:
 20287                           
 20288                           ;Motor.c: 83: {
 20289                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 20290  011D48  C07B  FFD9         	movff	_lMotor,fsr2l
 20291  011D4C  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20292  011D50  28DE               	incf	postinc2,w,c
 20293  011D52  E104               	bnz	i2u495_40
 20294  011D54  0E7F               	movlw	127
 20295  011D56  18DE               	xorwf	postinc2,w,c
 20296  011D58  B4D8               	btfsc	status,2,c
 20297  011D5A  D007               	goto	i2l1630
 20298  011D5C                     i2u495_40:
 20299                           
 20300                           ;Motor.c: 85: lMotor->mDelta --;
 20301  011D5C  C07B  FFD9         	movff	_lMotor,fsr2l
 20302  011D60  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20303  011D64  06DE               	decf	postinc2,f,c
 20304  011D66  0E00               	movlw	0
 20305  011D68  5ADD               	subwfb	postdec2,f,c
 20306  011D6A                     i2l1630:
 20307                           
 20308                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 20309  011D6A  0E91               	movlw	low _PortE
 20310  011D6C  6E10               	movwf	i2Port_SetPin@pInput,c
 20311  011D6E  0E00               	movlw	high _PortE
 20312  011D70  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20313  011D72  0E00               	movlw	0
 20314  011D74  6E12               	movwf	i2Port_SetPin@pPin,c
 20315  011D76  0E01               	movlw	1
 20316  011D78  6E13               	movwf	i2Port_SetPin@pValue,c
 20317  011D7A  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20318                           
 20319                           ;Motor.c: 88: }
 20320  011D7E  D01B               	goto	i2l1631
 20321  011D80                     i2l1629:
 20322                           
 20323                           ;Motor.c: 89: else
 20324                           ;Motor.c: 90: {
 20325                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 20326  011D80  C07B  FFD9         	movff	_lMotor,fsr2l
 20327  011D84  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20328  011D88  04DE               	decf	postinc2,w,c
 20329  011D8A  E104               	bnz	i2u496_40
 20330  011D8C  0E80               	movlw	128
 20331  011D8E  18DE               	xorwf	postinc2,w,c
 20332  011D90  B4D8               	btfsc	status,2,c
 20333  011D92  D007               	goto	i2l1632
 20334  011D94                     i2u496_40:
 20335                           
 20336                           ;Motor.c: 92: lMotor->mDelta ++;
 20337  011D94  C07B  FFD9         	movff	_lMotor,fsr2l
 20338  011D98  C07C  FFDA         	movff	_lMotor+1,fsr2h
 20339  011D9C  2ADE               	incf	postinc2,f,c
 20340  011D9E  0E00               	movlw	0
 20341  011DA0  22DD               	addwfc	postdec2,f,c
 20342  011DA2                     i2l1632:
 20343                           
 20344                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 20345  011DA2  0E91               	movlw	low _PortE
 20346  011DA4  6E10               	movwf	i2Port_SetPin@pInput,c
 20347  011DA6  0E00               	movlw	high _PortE
 20348  011DA8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20349  011DAA  0E00               	movlw	0
 20350  011DAC  6E12               	movwf	i2Port_SetPin@pPin,c
 20351  011DAE  0E00               	movlw	0
 20352  011DB0  6E13               	movwf	i2Port_SetPin@pValue,c
 20353  011DB2  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20354  011DB6                     i2l1631:
 20355                           
 20356                           ;Motor.c: 95: }
 20357                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 20358  011DB6  0E91               	movlw	low _PortE
 20359  011DB8  6E10               	movwf	i2Port_SetPin@pInput,c
 20360  011DBA  0E00               	movlw	high _PortE
 20361  011DBC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20362  011DBE  0E01               	movlw	1
 20363  011DC0  6E12               	movwf	i2Port_SetPin@pPin,c
 20364  011DC2  0E01               	movlw	1
 20365  011DC4  6E13               	movwf	i2Port_SetPin@pValue,c
 20366  011DC6  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20367                           
 20368                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 20369  011DCA  0E91               	movlw	low _PortE
 20370  011DCC  6E10               	movwf	i2Port_SetPin@pInput,c
 20371  011DCE  0E00               	movlw	high _PortE
 20372  011DD0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 20373  011DD2  0E01               	movlw	1
 20374  011DD4  6E12               	movwf	i2Port_SetPin@pPin,c
 20375  011DD6  0E00               	movlw	0
 20376  011DD8  6E13               	movwf	i2Port_SetPin@pValue,c
 20377  011DDA  EC6A  F090         	call	i2_Port_SetPin	;wreg free
 20378                           
 20379                           ;Motor.c: 101: MXK_Release();
 20380  011DDE  ECA1  F09D         	call	i2_MXK_Release	;wreg free
 20381                           
 20382                           ;Motor.c: 102: Timer0_Restart();
 20383  011DE2  EC7D  F09D         	call	i2_Timer0_Restart	;wreg free
 20384                           
 20385                           ;Motor.c: 103: return;
 20386  011DE6  0012               	return	
 20387  011DE8                     i2l1628:
 20388                           
 20389                           ;Motor.c: 104: }
 20390                           ;Motor.c: 105: MXK_Release();
 20391  011DE8  ECA1  F09D         	call	i2_MXK_Release	;wreg free
 20392                           
 20393                           ;Motor.c: 106: Timer0_Stop();
 20394  011DEC  EC9E  F09D         	call	i2_Timer0_Stop	;wreg free
 20395                           
 20396                           ;Motor.c: 107: return;
 20397  011DF0  0012               	return	
 20398  011DF2                     i2l1627:
 20399                           
 20400                           ;Motor.c: 108: }
 20401                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 20402  011DF2  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 20403  011DF6  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 20404  011DFA  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 20405  011DFE  EC63  F09D         	call	i2_MXK_Queue	;wreg free
 20406  011E02  0012               	return		;funcret
 20407  011E04                     __end_ofi2_Motor_Step:
 20408                           	opt stack 0
 20409                           tosu	equ	0xFFF
 20410                           tosh	equ	0xFFE
 20411                           tosl	equ	0xFFD
 20412                           pclatu	equ	0xFFB
 20413                           pclath	equ	0xFFA
 20414                           tblptru	equ	0xFF8
 20415                           tblptrh	equ	0xFF7
 20416                           tblptrl	equ	0xFF6
 20417                           tablat	equ	0xFF5
 20418                           prodh	equ	0xFF4
 20419                           prodl	equ	0xFF3
 20420                           intcon	equ	0xFF2
 20421                           indf0	equ	0xFEF
 20422                           postinc0	equ	0xFEE
 20423                           fsr0h	equ	0xFEA
 20424                           fsr0l	equ	0xFE9
 20425                           wreg	equ	0xFE8
 20426                           indf1	equ	0xFE7
 20427                           postdec1	equ	0xFE5
 20428                           fsr1h	equ	0xFE2
 20429                           fsr1l	equ	0xFE1
 20430                           indf2	equ	0xFDF
 20431                           postinc2	equ	0xFDE
 20432                           postdec2	equ	0xFDD
 20433                           plusw2	equ	0xFDB
 20434                           fsr2h	equ	0xFDA
 20435                           fsr2l	equ	0xFD9
 20436                           status	equ	0xFD8
 20437                           
 20438 ;; *************** function i2_Timer0_Stop *****************
 20439 ;; Defined at:
 20440 ;;		line 89 in file "Library/Timer0.c"
 20441 ;; Parameters:    Size  Location     Type
 20442 ;;		None
 20443 ;; Auto vars:     Size  Location     Type
 20444 ;;		None
 20445 ;; Return value:  Size  Location     Type
 20446 ;;                  1    wreg      void 
 20447 ;; Registers used:
 20448 ;;		None
 20449 ;; Tracked objects:
 20450 ;;		On entry : 0/0
 20451 ;;		On exit  : 0/0
 20452 ;;		Unchanged: 0/0
 20453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20458 ;;Total ram usage:        0 bytes
 20459 ;; Hardware stack levels used:    1
 20460 ;; This function calls:
 20461 ;;		Nothing
 20462 ;; This function is called by:
 20463 ;;		_Timer0_ISR
 20464 ;;		i2_Motor_Step
 20465 ;; This function uses a non-reentrant model
 20466 ;;
 20467                           
 20468                           	psect	text120
 20469  013B3C                     __ptext120:
 20470                           	opt stack 0
 20471  013B3C                     i2_Timer0_Stop:
 20472                           	opt stack 18
 20473                           
 20474                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 20475                           
 20476                           ;incstack = 0
 20477  013B3C  9AF2               	bcf	intcon,5,c	;volatile
 20478                           
 20479                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 20480  013B3E  94F2               	bcf	intcon,2,c	;volatile
 20481  013B40  0012               	return		;funcret
 20482  013B42                     __end_ofi2_Timer0_Stop:
 20483                           	opt stack 0
 20484                           tosu	equ	0xFFF
 20485                           tosh	equ	0xFFE
 20486                           tosl	equ	0xFFD
 20487                           pclatu	equ	0xFFB
 20488                           pclath	equ	0xFFA
 20489                           tblptru	equ	0xFF8
 20490                           tblptrh	equ	0xFF7
 20491                           tblptrl	equ	0xFF6
 20492                           tablat	equ	0xFF5
 20493                           prodh	equ	0xFF4
 20494                           prodl	equ	0xFF3
 20495                           intcon	equ	0xFF2
 20496                           indf0	equ	0xFEF
 20497                           postinc0	equ	0xFEE
 20498                           fsr0h	equ	0xFEA
 20499                           fsr0l	equ	0xFE9
 20500                           wreg	equ	0xFE8
 20501                           indf1	equ	0xFE7
 20502                           postdec1	equ	0xFE5
 20503                           fsr1h	equ	0xFE2
 20504                           fsr1l	equ	0xFE1
 20505                           indf2	equ	0xFDF
 20506                           postinc2	equ	0xFDE
 20507                           postdec2	equ	0xFDD
 20508                           plusw2	equ	0xFDB
 20509                           fsr2h	equ	0xFDA
 20510                           fsr2l	equ	0xFD9
 20511                           status	equ	0xFD8
 20512                           
 20513 ;; *************** function i2_Timer0_Restart *****************
 20514 ;; Defined at:
 20515 ;;		line 83 in file "Library/Timer0.c"
 20516 ;; Parameters:    Size  Location     Type
 20517 ;;		None
 20518 ;; Auto vars:     Size  Location     Type
 20519 ;;		None
 20520 ;; Return value:  Size  Location     Type
 20521 ;;                  1    wreg      void 
 20522 ;; Registers used:
 20523 ;;		None
 20524 ;; Tracked objects:
 20525 ;;		On entry : 0/0
 20526 ;;		On exit  : 0/0
 20527 ;;		Unchanged: 0/0
 20528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20533 ;;Total ram usage:        0 bytes
 20534 ;; Hardware stack levels used:    1
 20535 ;; This function calls:
 20536 ;;		Nothing
 20537 ;; This function is called by:
 20538 ;;		i2_Motor_Step
 20539 ;; This function uses a non-reentrant model
 20540 ;;
 20541                           
 20542                           	psect	text121
 20543  013AFA                     __ptext121:
 20544                           	opt stack 0
 20545  013AFA                     i2_Timer0_Restart:
 20546                           	opt stack 17
 20547                           
 20548                           ;Timer0.c: 85: TMR0 = COUNTER;
 20549                           
 20550                           ;incstack = 0
 20551  013AFA  C02F  FFD6         	movff	_COUNTER,4054	;volatile
 20552  013AFE  C030  FFD7         	movff	_COUNTER+1,4055	;volatile
 20553                           
 20554                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 20555  013B02  8AF2               	bsf	intcon,5,c	;volatile
 20556  013B04  0012               	return		;funcret
 20557  013B06                     __end_ofi2_Timer0_Restart:
 20558                           	opt stack 0
 20559                           tosu	equ	0xFFF
 20560                           tosh	equ	0xFFE
 20561                           tosl	equ	0xFFD
 20562                           pclatu	equ	0xFFB
 20563                           pclath	equ	0xFFA
 20564                           tblptru	equ	0xFF8
 20565                           tblptrh	equ	0xFF7
 20566                           tblptrl	equ	0xFF6
 20567                           tablat	equ	0xFF5
 20568                           prodh	equ	0xFF4
 20569                           prodl	equ	0xFF3
 20570                           intcon	equ	0xFF2
 20571                           indf0	equ	0xFEF
 20572                           postinc0	equ	0xFEE
 20573                           fsr0h	equ	0xFEA
 20574                           fsr0l	equ	0xFE9
 20575                           wreg	equ	0xFE8
 20576                           indf1	equ	0xFE7
 20577                           postdec1	equ	0xFE5
 20578                           fsr1h	equ	0xFE2
 20579                           fsr1l	equ	0xFE1
 20580                           indf2	equ	0xFDF
 20581                           postinc2	equ	0xFDE
 20582                           postdec2	equ	0xFDD
 20583                           plusw2	equ	0xFDB
 20584                           fsr2h	equ	0xFDA
 20585                           fsr2l	equ	0xFD9
 20586                           status	equ	0xFD8
 20587                           
 20588 ;; *************** function i2_Port_SetPin *****************
 20589 ;; Defined at:
 20590 ;;		line 247 in file "Library/Port.c"
 20591 ;; Parameters:    Size  Location     Type
 20592 ;;  pInput          2   15[COMRAM] const PTR struct Port
 20593 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 20594 ;;  pPin            1   17[COMRAM] enum E6750
 20595 ;;  pValue          1   18[COMRAM] unsigned char 
 20596 ;; Auto vars:     Size  Location     Type
 20597 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 20598 ;; Return value:  Size  Location     Type
 20599 ;;                  1    wreg      void 
 20600 ;; Registers used:
 20601 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20602 ;; Tracked objects:
 20603 ;;		On entry : 0/0
 20604 ;;		On exit  : 0/0
 20605 ;;		Unchanged: 0/0
 20606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20608 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20610 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20611 ;;Total ram usage:        5 bytes
 20612 ;; Hardware stack levels used:    1
 20613 ;; Hardware stack levels required when called:    3
 20614 ;; This function calls:
 20615 ;;		i2_Byte_SetBit
 20616 ;;		i2_Word_GetPair
 20617 ;; This function is called by:
 20618 ;;		i2_Motor_Step
 20619 ;; This function uses a non-reentrant model
 20620 ;;
 20621                           
 20622                           	psect	text122
 20623  0120D4                     __ptext122:
 20624                           	opt stack 0
 20625  0120D4                     i2_Port_SetPin:
 20626                           	opt stack 14
 20627                           
 20628                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 20629                           
 20630                           ;incstack = 0
 20631  0120D4  0E08               	movlw	8
 20632  0120D6  2410               	addwf	i2Port_SetPin@pInput,w,c
 20633  0120D8  6E0D               	movwf	i2Word_GetPair@pInput,c
 20634  0120DA  0E00               	movlw	0
 20635  0120DC  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 20636  0120DE  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 20637  0120E0  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 20638  0120E4  EC4A  F09B         	call	i2_Word_GetPair	;wreg free
 20639  0120E8  6E14               	movwf	i2Port_SetPin@Type,c
 20640                           
 20641                           ;Port.c: 250: switch (Type)
 20642  0120EA  D03B               	goto	i2l427
 20643  0120EC                     
 20644                           ;Port.c: 256: pValue &= 1;
 20645  0120EC  0E01               	movlw	1
 20646  0120EE  1613               	andwf	i2Port_SetPin@pValue,f,c
 20647                           
 20648                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 20649  0120F0  EE20 F002          	lfsr	2,2
 20650  0120F4  5010               	movf	i2Port_SetPin@pInput,w,c
 20651  0120F6  26D9               	addwf	fsr2l,f,c
 20652  0120F8  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20653  0120FA  22DA               	addwfc	fsr2h,f,c
 20654  0120FC  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20655  012100  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20656  012104  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20657  012108  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20658  01210C  ECE8  F098         	call	i2_Byte_SetBit	;wreg free
 20659                           
 20660                           ;Port.c: 258: break;
 20661  012110  0012               	return	
 20662  012112                     
 20663                           ;Port.c: 261: pValue &= 1;
 20664  012112  0E01               	movlw	1
 20665  012114  1613               	andwf	i2Port_SetPin@pValue,f,c
 20666                           
 20667                           ;Port.c: 262: pValue ^= 1;
 20668  012116  0E01               	movlw	1
 20669  012118  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 20670                           
 20671                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 20672  01211A  EE20 F002          	lfsr	2,2
 20673  01211E  5010               	movf	i2Port_SetPin@pInput,w,c
 20674  012120  26D9               	addwf	fsr2l,f,c
 20675  012122  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20676  012124  22DA               	addwfc	fsr2h,f,c
 20677  012126  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20678  01212A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20679  01212E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20680  012132  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20681  012136  ECE8  F098         	call	i2_Byte_SetBit	;wreg free
 20682                           
 20683                           ;Port.c: 264: break;
 20684  01213A  0012               	return	
 20685  01213C                     
 20686                           ;Port.c: 266: pValue &= 1;
 20687  01213C  0E01               	movlw	1
 20688  01213E  1613               	andwf	i2Port_SetPin@pValue,f,c
 20689                           
 20690                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 20691  012140  EE20 F004          	lfsr	2,4
 20692  012144  5010               	movf	i2Port_SetPin@pInput,w,c
 20693  012146  26D9               	addwf	fsr2l,f,c
 20694  012148  5011               	movf	i2Port_SetPin@pInput+1,w,c
 20695  01214A  22DA               	addwfc	fsr2h,f,c
 20696  01214C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 20697  012150  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 20698  012154  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 20699  012158  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 20700  01215C  ECE8  F098         	call	i2_Byte_SetBit	;wreg free
 20701                           
 20702                           ;Port.c: 269: }
 20703                           
 20704                           ;Port.c: 268: break;
 20705  012160  0012               	return	
 20706  012162                     i2l427:
 20707  012162  5014               	movf	i2Port_SetPin@Type,w,c
 20708                           
 20709                           ; Switch size 1, requested type "space"
 20710                           ; Number of cases is 4, Range of values is 0 to 3
 20711                           ; switch strategies available:
 20712                           ; Name         Instructions Cycles
 20713                           ; simple_byte           13     7 (average)
 20714                           ;	Chosen strategy is simple_byte
 20715  012164  0A00               	xorlw	0	; case 0
 20716  012166  B4D8               	btfsc	status,2,c
 20717  012168  0012               	return	
 20718  01216A  0A01               	xorlw	1	; case 1
 20719  01216C  B4D8               	btfsc	status,2,c
 20720  01216E  D7BE               	goto	i2l430
 20721  012170  0A03               	xorlw	3	; case 2
 20722  012172  B4D8               	btfsc	status,2,c
 20723  012174  D7CE               	goto	i2l432
 20724  012176  0A01               	xorlw	1	; case 3
 20725  012178  A4D8               	btfss	status,2,c
 20726  01217A  0012               	return	
 20727  01217C  D7DF               	goto	i2l433
 20728  01217E                     __end_ofi2_Port_SetPin:
 20729                           	opt stack 0
 20730                           tosu	equ	0xFFF
 20731                           tosh	equ	0xFFE
 20732                           tosl	equ	0xFFD
 20733                           pclatu	equ	0xFFB
 20734                           pclath	equ	0xFFA
 20735                           tblptru	equ	0xFF8
 20736                           tblptrh	equ	0xFF7
 20737                           tblptrl	equ	0xFF6
 20738                           tablat	equ	0xFF5
 20739                           prodh	equ	0xFF4
 20740                           prodl	equ	0xFF3
 20741                           intcon	equ	0xFF2
 20742                           indf0	equ	0xFEF
 20743                           postinc0	equ	0xFEE
 20744                           fsr0h	equ	0xFEA
 20745                           fsr0l	equ	0xFE9
 20746                           wreg	equ	0xFE8
 20747                           indf1	equ	0xFE7
 20748                           postdec1	equ	0xFE5
 20749                           fsr1h	equ	0xFE2
 20750                           fsr1l	equ	0xFE1
 20751                           indf2	equ	0xFDF
 20752                           postinc2	equ	0xFDE
 20753                           postdec2	equ	0xFDD
 20754                           plusw2	equ	0xFDB
 20755                           fsr2h	equ	0xFDA
 20756                           fsr2l	equ	0xFD9
 20757                           status	equ	0xFD8
 20758                           
 20759 ;; *************** function i2_Word_GetPair *****************
 20760 ;; Defined at:
 20761 ;;		line 156 in file "Library/Types.c"
 20762 ;; Parameters:    Size  Location     Type
 20763 ;;  pInput          2   12[COMRAM] PTR struct Word
 20764 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20765 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20766 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20767 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20768 ;;  pPair           1   14[COMRAM] unsigned char 
 20769 ;; Auto vars:     Size  Location     Type
 20770 ;;		None
 20771 ;; Return value:  Size  Location     Type
 20772 ;;                  1    wreg      unsigned char 
 20773 ;; Registers used:
 20774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20775 ;; Tracked objects:
 20776 ;;		On entry : 0/0
 20777 ;;		On exit  : 0/0
 20778 ;;		Unchanged: 0/0
 20779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20780 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20783 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20784 ;;Total ram usage:        3 bytes
 20785 ;; Hardware stack levels used:    1
 20786 ;; Hardware stack levels required when called:    2
 20787 ;; This function calls:
 20788 ;;		i2_Byte_GetPair
 20789 ;; This function is called by:
 20790 ;;		i2_Port_SetPin
 20791 ;; This function uses a non-reentrant model
 20792 ;;
 20793                           
 20794                           	psect	text123
 20795  013694                     __ptext123:
 20796                           	opt stack 0
 20797  013694                     i2_Word_GetPair:
 20798                           	opt stack 14
 20799                           
 20800                           ;Types.c: 158: if (pPair >= 4)
 20801                           
 20802                           ;incstack = 0
 20803  013694  0E03               	movlw	3
 20804  013696  640F               	cpfsgt	i2Word_GetPair@pPair,c
 20805  013698  D00C               	goto	i2l781
 20806                           
 20807                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 20808  01369A  0E01               	movlw	1
 20809  01369C  240D               	addwf	i2Word_GetPair@pInput,w,c
 20810  01369E  6E0A               	movwf	i2Byte_GetPair@pInput,c
 20811  0136A0  0E00               	movlw	0
 20812  0136A2  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 20813  0136A4  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 20814  0136A6  500F               	movf	i2Word_GetPair@pPair,w,c
 20815  0136A8  0FFC               	addlw	252
 20816  0136AA  6E0C               	movwf	i2Byte_GetPair@pPair,c
 20817  0136AC  EC91  F09C         	call	i2_Byte_GetPair	;wreg free
 20818  0136B0  0012               	return	
 20819  0136B2                     i2l781:
 20820                           
 20821                           ;Types.c: 160: else
 20822                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 20823  0136B2  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 20824  0136B6  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 20825  0136BA  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 20826  0136BE  EC91  F09C         	call	i2_Byte_GetPair	;wreg free
 20827  0136C2  0012               	return	
 20828  0136C4                     __end_ofi2_Word_GetPair:
 20829                           	opt stack 0
 20830                           tosu	equ	0xFFF
 20831                           tosh	equ	0xFFE
 20832                           tosl	equ	0xFFD
 20833                           pclatu	equ	0xFFB
 20834                           pclath	equ	0xFFA
 20835                           tblptru	equ	0xFF8
 20836                           tblptrh	equ	0xFF7
 20837                           tblptrl	equ	0xFF6
 20838                           tablat	equ	0xFF5
 20839                           prodh	equ	0xFF4
 20840                           prodl	equ	0xFF3
 20841                           intcon	equ	0xFF2
 20842                           indf0	equ	0xFEF
 20843                           postinc0	equ	0xFEE
 20844                           fsr0h	equ	0xFEA
 20845                           fsr0l	equ	0xFE9
 20846                           wreg	equ	0xFE8
 20847                           indf1	equ	0xFE7
 20848                           postdec1	equ	0xFE5
 20849                           fsr1h	equ	0xFE2
 20850                           fsr1l	equ	0xFE1
 20851                           indf2	equ	0xFDF
 20852                           postinc2	equ	0xFDE
 20853                           postdec2	equ	0xFDD
 20854                           plusw2	equ	0xFDB
 20855                           fsr2h	equ	0xFDA
 20856                           fsr2l	equ	0xFD9
 20857                           status	equ	0xFD8
 20858                           
 20859 ;; *************** function i2_Byte_GetPair *****************
 20860 ;; Defined at:
 20861 ;;		line 87 in file "Library/Types.c"
 20862 ;; Parameters:    Size  Location     Type
 20863 ;;  pInput          2    9[COMRAM] PTR struct Byte
 20864 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20865 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20866 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20867 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20868 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20869 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20870 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20871 ;;		 -> NULL(0), 
 20872 ;;  pPair           1   11[COMRAM] unsigned char 
 20873 ;; Auto vars:     Size  Location     Type
 20874 ;;		None
 20875 ;; Return value:  Size  Location     Type
 20876 ;;                  1    wreg      unsigned char 
 20877 ;; Registers used:
 20878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20879 ;; Tracked objects:
 20880 ;;		On entry : 0/0
 20881 ;;		On exit  : 0/0
 20882 ;;		Unchanged: 0/0
 20883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20884 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20887 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20888 ;;Total ram usage:        3 bytes
 20889 ;; Hardware stack levels used:    1
 20890 ;; Hardware stack levels required when called:    1
 20891 ;; This function calls:
 20892 ;;		i2_Byte_GetZone
 20893 ;; This function is called by:
 20894 ;;		i2_Word_GetPair
 20895 ;; This function uses a non-reentrant model
 20896 ;;
 20897                           
 20898                           	psect	text124
 20899  013922                     __ptext124:
 20900                           	opt stack 0
 20901  013922                     i2_Byte_GetPair:
 20902                           	opt stack 14
 20903                           
 20904                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 20905                           
 20906                           ;incstack = 0
 20907  013922  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 20908  013926  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 20909  01392A  0E04               	movlw	4
 20910  01392C  6E03               	movwf	i2Byte_GetZone@pMax,c
 20911  01392E  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 20912  013932  0E02               	movlw	2
 20913  013934  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 20914  013936  EC0A  F095         	call	i2_Byte_GetZone	;wreg free
 20915  01393A  0012               	return	
 20916  01393C                     __end_ofi2_Byte_GetPair:
 20917                           	opt stack 0
 20918                           tosu	equ	0xFFF
 20919                           tosh	equ	0xFFE
 20920                           tosl	equ	0xFFD
 20921                           pclatu	equ	0xFFB
 20922                           pclath	equ	0xFFA
 20923                           tblptru	equ	0xFF8
 20924                           tblptrh	equ	0xFF7
 20925                           tblptrl	equ	0xFF6
 20926                           tablat	equ	0xFF5
 20927                           prodh	equ	0xFF4
 20928                           prodl	equ	0xFF3
 20929                           intcon	equ	0xFF2
 20930                           indf0	equ	0xFEF
 20931                           postinc0	equ	0xFEE
 20932                           fsr0h	equ	0xFEA
 20933                           fsr0l	equ	0xFE9
 20934                           wreg	equ	0xFE8
 20935                           indf1	equ	0xFE7
 20936                           postdec1	equ	0xFE5
 20937                           fsr1h	equ	0xFE2
 20938                           fsr1l	equ	0xFE1
 20939                           indf2	equ	0xFDF
 20940                           postinc2	equ	0xFDE
 20941                           postdec2	equ	0xFDD
 20942                           plusw2	equ	0xFDB
 20943                           fsr2h	equ	0xFDA
 20944                           fsr2l	equ	0xFD9
 20945                           status	equ	0xFD8
 20946                           
 20947 ;; *************** function i2_Byte_GetZone *****************
 20948 ;; Defined at:
 20949 ;;		line 64 in file "Library/Types.c"
 20950 ;; Parameters:    Size  Location     Type
 20951 ;;  pInput          2    0[COMRAM] PTR struct Byte
 20952 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20953 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20954 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20955 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20956 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20957 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20958 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20959 ;;		 -> NULL(0), 
 20960 ;;  pMax            1    2[COMRAM] unsigned char 
 20961 ;;  pChunk          1    3[COMRAM] unsigned char 
 20962 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 20963 ;; Auto vars:     Size  Location     Type
 20964 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 20965 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 20966 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 20967 ;; Return value:  Size  Location     Type
 20968 ;;                  1    wreg      unsigned char 
 20969 ;; Registers used:
 20970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20971 ;; Tracked objects:
 20972 ;;		On entry : 0/0
 20973 ;;		On exit  : 0/0
 20974 ;;		Unchanged: 0/0
 20975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20976 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20977 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20979 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20980 ;;Total ram usage:        9 bytes
 20981 ;; Hardware stack levels used:    1
 20982 ;; This function calls:
 20983 ;;		Nothing
 20984 ;; This function is called by:
 20985 ;;		i2_Byte_GetPair
 20986 ;; This function uses a non-reentrant model
 20987 ;;
 20988                           
 20989                           	psect	text125
 20990  012A14                     __ptext125:
 20991                           	opt stack 0
 20992  012A14                     i2_Byte_GetZone:
 20993                           	opt stack 14
 20994                           
 20995                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20996                           
 20997                           ;incstack = 0
 20998  012A14  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 20999  012A18  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 21000  012A1C  0E00               	movlw	low (__mediumconst shr (0+16))
 21001  012A1E  6EF8               	movwf	tblptru,c
 21002  012A20  0E0F               	movlw	(high __ramtop+-1)
 21003  012A22  64F7               	cpfsgt	tblptrh,c
 21004  012A24  D003               	bra	i2u353_47
 21005  012A26  0008               	tblrd		*
 21006  012A28  50F5               	movf	tablat,w,c
 21007  012A2A  D005               	bra	i2u353_40
 21008  012A2C                     i2u353_47:
 21009  012A2C  CFF6 FFE9          	movff	tblptrl,fsr0l
 21010  012A30  CFF7 FFEA          	movff	tblptrh,fsr0h
 21011  012A34  50EF               	movf	indf0,w,c
 21012  012A36                     i2u353_40:
 21013  012A36  6E09               	movwf	i2Byte_GetZone@Output,c
 21014                           
 21015                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 21016  012A38  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 21017  012A3A  0D01               	mullw	1
 21018  012A3C  0EC7               	movlw	low _MASKS
 21019  012A3E  24F3               	addwf	prodl,w,c
 21020  012A40  6EF6               	movwf	tblptrl,c
 21021  012A42  0EFC               	movlw	high _MASKS
 21022  012A44  20F4               	addwfc	prodh,w,c
 21023  012A46  6EF7               	movwf	tblptrh,c
 21024  012A48                     	if	1	;There are 3 active tblptr bytes
 21025  012A48  6AF8               	clrf	tblptru,c
 21026  012A4A  0E00               	movlw	low (__mediumconst shr (0+16))
 21027  012A4C  22F8               	addwfc	tblptru,f,c
 21028  012A4E                     	endif
 21029  012A4E  0008               	tblrd		*
 21030  012A50  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 21031                           
 21032                           ;Types.c: 68: UINT8 Offset = 0;
 21033  012A54  0E00               	movlw	0
 21034  012A56  6E08               	movwf	i2Byte_GetZone@Offset,c
 21035                           
 21036                           ;Types.c: 70: while (pChunk >= pMax)
 21037  012A58  D003               	goto	i2l732
 21038  012A5A                     
 21039                           ;Types.c: 71: {
 21040                           ;Types.c: 72: pChunk -= pMax;
 21041  012A5A  5003               	movf	i2Byte_GetZone@pMax,w,c
 21042  012A5C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 21043                           
 21044                           ;Types.c: 73: Offset += 1;
 21045  012A5E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 21046  012A60                     i2l732:
 21047  012A60  5003               	movf	i2Byte_GetZone@pMax,w,c
 21048  012A62  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 21049  012A64  B0D8               	btfsc	status,0,c
 21050  012A66  D7F9               	goto	i2l733
 21051                           
 21052                           ;Types.c: 74: }
 21053                           ;Types.c: 75: pChunk *= pChunkSize;
 21054  012A68  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 21055  012A6A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 21056  012A6C  50F3               	movf	prodl,w,c
 21057  012A6E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 21058                           
 21059                           ;Types.c: 76: pChunk += Offset;
 21060  012A70  5008               	movf	i2Byte_GetZone@Offset,w,c
 21061  012A72  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 21062                           
 21063                           ;Types.c: 78: Output >>= pChunk;
 21064  012A74  2804               	incf	i2Byte_GetZone@pChunk,w,c
 21065  012A76  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 21066  012A78  D002               	goto	i2u355_40
 21067  012A7A                     i2u355_45:
 21068  012A7A  90D8               	bcf	status,0,c
 21069  012A7C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 21070  012A7E                     i2u355_40:
 21071  012A7E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 21072  012A80  D7FC               	goto	i2u355_45
 21073                           
 21074                           ;Types.c: 79: Output &= MASK;
 21075  012A82  5007               	movf	i2Byte_GetZone@MASK,w,c
 21076  012A84  1609               	andwf	i2Byte_GetZone@Output,f,c
 21077                           
 21078                           ;Types.c: 80: return Output;
 21079  012A86  5009               	movf	i2Byte_GetZone@Output,w,c
 21080  012A88  0012               	return	
 21081  012A8A                     __end_ofi2_Byte_GetZone:
 21082                           	opt stack 0
 21083                           tosu	equ	0xFFF
 21084                           tosh	equ	0xFFE
 21085                           tosl	equ	0xFFD
 21086                           pclatu	equ	0xFFB
 21087                           pclath	equ	0xFFA
 21088                           tblptru	equ	0xFF8
 21089                           tblptrh	equ	0xFF7
 21090                           tblptrl	equ	0xFF6
 21091                           tablat	equ	0xFF5
 21092                           prodh	equ	0xFF4
 21093                           prodl	equ	0xFF3
 21094                           intcon	equ	0xFF2
 21095                           indf0	equ	0xFEF
 21096                           postinc0	equ	0xFEE
 21097                           fsr0h	equ	0xFEA
 21098                           fsr0l	equ	0xFE9
 21099                           wreg	equ	0xFE8
 21100                           indf1	equ	0xFE7
 21101                           postdec1	equ	0xFE5
 21102                           fsr1h	equ	0xFE2
 21103                           fsr1l	equ	0xFE1
 21104                           indf2	equ	0xFDF
 21105                           postinc2	equ	0xFDE
 21106                           postdec2	equ	0xFDD
 21107                           plusw2	equ	0xFDB
 21108                           fsr2h	equ	0xFDA
 21109                           fsr2l	equ	0xFD9
 21110                           status	equ	0xFD8
 21111                           
 21112 ;; *************** function i2_Byte_SetBit *****************
 21113 ;; Defined at:
 21114 ;;		line 32 in file "Library/Types.c"
 21115 ;; Parameters:    Size  Location     Type
 21116 ;;  pInput          2    0[COMRAM] PTR struct Byte
 21117 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 21118 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 21119 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 21120 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 21121 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 21122 ;;		 -> NULL(0), 
 21123 ;;  pBit            1    2[COMRAM] unsigned char 
 21124 ;;  pValue          1    3[COMRAM] unsigned char 
 21125 ;; Auto vars:     Size  Location     Type
 21126 ;;		None
 21127 ;; Return value:  Size  Location     Type
 21128 ;;                  1    wreg      void 
 21129 ;; Registers used:
 21130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21131 ;; Tracked objects:
 21132 ;;		On entry : 0/0
 21133 ;;		On exit  : 0/0
 21134 ;;		Unchanged: 0/0
 21135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21138 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21139 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21140 ;;Total ram usage:        7 bytes
 21141 ;; Hardware stack levels used:    1
 21142 ;; This function calls:
 21143 ;;		Nothing
 21144 ;; This function is called by:
 21145 ;;		i2_Port_SetPin
 21146 ;; This function uses a non-reentrant model
 21147 ;;
 21148                           
 21149                           	psect	text126
 21150  0131D0                     __ptext126:
 21151                           	opt stack 0
 21152  0131D0                     i2_Byte_SetBit:
 21153                           	opt stack 16
 21154                           
 21155                           ;Types.c: 34: pValue &= 1;
 21156                           
 21157                           ;incstack = 0
 21158  0131D0  0E01               	movlw	1
 21159  0131D2  1604               	andwf	i2Byte_SetBit@pValue,f,c
 21160                           
 21161                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 21162  0131D4  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 21163  0131D8  0E01               	movlw	1
 21164  0131DA  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 21165  0131DC  2A05               	incf	??i2_Byte_SetBit,f,c
 21166  0131DE  D002               	goto	i2u401_44
 21167  0131E0                     i2u401_45:
 21168  0131E0  90D8               	bcf	status,0,c
 21169  0131E2  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 21170  0131E4                     i2u401_44:
 21171  0131E4  2E05               	decfsz	??i2_Byte_SetBit,f,c
 21172  0131E6  D7FC               	goto	i2u401_45
 21173  0131E8  5006               	movf	??i2_Byte_SetBit+1,w,c
 21174  0131EA  0AFF               	xorlw	255
 21175  0131EC  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 21176  0131EE  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 21177  0131F2  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 21178  0131F6  5007               	movf	??i2_Byte_SetBit+2,w,c
 21179  0131F8  16DF               	andwf	indf2,f,c
 21180                           
 21181                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 21182  0131FA  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 21183  0131FE  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 21184  013202  2A05               	incf	??i2_Byte_SetBit,f,c
 21185  013204  D002               	goto	i2u402_44
 21186  013206                     i2u402_45:
 21187  013206  90D8               	bcf	status,0,c
 21188  013208  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 21189  01320A                     i2u402_44:
 21190  01320A  2E05               	decfsz	??i2_Byte_SetBit,f,c
 21191  01320C  D7FC               	goto	i2u402_45
 21192  01320E  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 21193  013212  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 21194  013216  5006               	movf	??i2_Byte_SetBit+1,w,c
 21195  013218  12DF               	iorwf	indf2,f,c
 21196  01321A  0012               	return		;funcret
 21197  01321C                     __end_ofi2_Byte_SetBit:
 21198                           	opt stack 0
 21199                           tosu	equ	0xFFF
 21200                           tosh	equ	0xFFE
 21201                           tosl	equ	0xFFD
 21202                           pclatu	equ	0xFFB
 21203                           pclath	equ	0xFFA
 21204                           tblptru	equ	0xFF8
 21205                           tblptrh	equ	0xFF7
 21206                           tblptrl	equ	0xFF6
 21207                           tablat	equ	0xFF5
 21208                           prodh	equ	0xFF4
 21209                           prodl	equ	0xFF3
 21210                           intcon	equ	0xFF2
 21211                           indf0	equ	0xFEF
 21212                           postinc0	equ	0xFEE
 21213                           fsr0h	equ	0xFEA
 21214                           fsr0l	equ	0xFE9
 21215                           wreg	equ	0xFE8
 21216                           indf1	equ	0xFE7
 21217                           postdec1	equ	0xFE5
 21218                           fsr1h	equ	0xFE2
 21219                           fsr1l	equ	0xFE1
 21220                           indf2	equ	0xFDF
 21221                           postinc2	equ	0xFDE
 21222                           postdec2	equ	0xFDD
 21223                           plusw2	equ	0xFDB
 21224                           fsr2h	equ	0xFDA
 21225                           fsr2l	equ	0xFD9
 21226                           status	equ	0xFD8
 21227                           
 21228 ;; *************** function i2_MXK_SwitchTo *****************
 21229 ;; Defined at:
 21230 ;;		line 105 in file "Library/MXK.c"
 21231 ;; Parameters:    Size  Location     Type
 21232 ;;  pModule         1    wreg     enum E6927
 21233 ;; Auto vars:     Size  Location     Type
 21234 ;;  pModule         1    7[COMRAM] enum E6927
 21235 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 21236 ;; Return value:  Size  Location     Type
 21237 ;;                  1    wreg      unsigned char 
 21238 ;; Registers used:
 21239 ;;		wreg, status,2, status,0, cstack
 21240 ;; Tracked objects:
 21241 ;;		On entry : 0/0
 21242 ;;		On exit  : 0/0
 21243 ;;		Unchanged: 0/0
 21244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21248 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21249 ;;Total ram usage:        2 bytes
 21250 ;; Hardware stack levels used:    1
 21251 ;; Hardware stack levels required when called:    1
 21252 ;; This function calls:
 21253 ;;		i2_delay_us
 21254 ;; This function is called by:
 21255 ;;		i2_Motor_Step
 21256 ;; This function uses a non-reentrant model
 21257 ;;
 21258                           
 21259                           	psect	text127
 21260  013594                     __ptext127:
 21261                           	opt stack 0
 21262  013594                     i2_MXK_SwitchTo:
 21263                           	opt stack 16
 21264                           
 21265                           ;incstack = 0
 21266                           ;i2MXK_SwitchTo@pModule stored from wreg
 21267  013594  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 21268                           
 21269                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 21270  013596  5086               	movf	3974,w,c	;volatile
 21271  013598  0B0F               	andlw	15
 21272  01359A  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 21273                           
 21274                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 21275  01359C  504B               	movf	_Bus_State,w,c
 21276  01359E  A4D8               	btfss	status,2,c
 21277  0135A0  D002               	goto	i2l1730
 21278                           
 21279                           ;MXK.c: 110: return 0;
 21280  0135A2  0E00               	movlw	0
 21281  0135A4  0012               	return	
 21282  0135A6                     i2l1730:
 21283                           
 21284                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 21285  0135A6  0E00               	movlw	0
 21286  0135A8  6E4B               	movwf	_Bus_State,c
 21287                           
 21288                           ;MXK.c: 114: if (CUR != pModule)
 21289  0135AA  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 21290  0135AC  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 21291  0135AE  B4D8               	btfsc	status,2,c
 21292  0135B0  D00A               	goto	i2l1732
 21293                           
 21294                           ;MXK.c: 115: {
 21295                           ;MXK.c: 116: PORTG &= ~(0xF);
 21296  0135B2  0EF0               	movlw	240
 21297  0135B4  1686               	andwf	3974,f,c	;volatile
 21298                           
 21299                           ;MXK.c: 117: PORTG |= pModule;
 21300  0135B6  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 21301  0135B8  1286               	iorwf	3974,f,c	;volatile
 21302                           
 21303                           ;MXK.c: 120: delay_us(10);
 21304  0135BA  0E00               	movlw	0
 21305  0135BC  6E02               	movwf	i2delay_us@us+1,c
 21306  0135BE  0E0A               	movlw	10
 21307  0135C0  6E01               	movwf	i2delay_us@us,c
 21308  0135C2  ECFD  F099         	call	i2_delay_us	;wreg free
 21309  0135C6                     i2l1732:
 21310                           
 21311                           ;MXK.c: 121: }
 21312                           ;MXK.c: 122: return 1;
 21313  0135C6  0E01               	movlw	1
 21314  0135C8  0012               	return	
 21315  0135CA                     __end_ofi2_MXK_SwitchTo:
 21316                           	opt stack 0
 21317                           tosu	equ	0xFFF
 21318                           tosh	equ	0xFFE
 21319                           tosl	equ	0xFFD
 21320                           pclatu	equ	0xFFB
 21321                           pclath	equ	0xFFA
 21322                           tblptru	equ	0xFF8
 21323                           tblptrh	equ	0xFF7
 21324                           tblptrl	equ	0xFF6
 21325                           tablat	equ	0xFF5
 21326                           prodh	equ	0xFF4
 21327                           prodl	equ	0xFF3
 21328                           intcon	equ	0xFF2
 21329                           indf0	equ	0xFEF
 21330                           postinc0	equ	0xFEE
 21331                           fsr0h	equ	0xFEA
 21332                           fsr0l	equ	0xFE9
 21333                           wreg	equ	0xFE8
 21334                           indf1	equ	0xFE7
 21335                           postdec1	equ	0xFE5
 21336                           fsr1h	equ	0xFE2
 21337                           fsr1l	equ	0xFE1
 21338                           indf2	equ	0xFDF
 21339                           postinc2	equ	0xFDE
 21340                           postdec2	equ	0xFDD
 21341                           plusw2	equ	0xFDB
 21342                           fsr2h	equ	0xFDA
 21343                           fsr2l	equ	0xFD9
 21344                           status	equ	0xFD8
 21345                           
 21346 ;; *************** function i2_delay_us *****************
 21347 ;; Defined at:
 21348 ;;		line 255 in file "Library/Types.c"
 21349 ;; Parameters:    Size  Location     Type
 21350 ;;  us              2    0[COMRAM] unsigned short 
 21351 ;; Auto vars:     Size  Location     Type
 21352 ;;  delay_us        4    2[COMRAM] unsigned long 
 21353 ;; Return value:  Size  Location     Type
 21354 ;;                  1    wreg      void 
 21355 ;; Registers used:
 21356 ;;		wreg, status,2, status,0
 21357 ;; Tracked objects:
 21358 ;;		On entry : 0/0
 21359 ;;		On exit  : 0/0
 21360 ;;		Unchanged: 0/0
 21361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21362 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21363 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21365 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21366 ;;Total ram usage:        6 bytes
 21367 ;; Hardware stack levels used:    1
 21368 ;; This function calls:
 21369 ;;		Nothing
 21370 ;; This function is called by:
 21371 ;;		i2_MXK_SwitchTo
 21372 ;; This function uses a non-reentrant model
 21373 ;;
 21374                           
 21375                           	psect	text128
 21376  0133FA                     __ptext128:
 21377                           	opt stack 0
 21378  0133FA                     i2_delay_us:
 21379                           	opt stack 16
 21380                           
 21381                           ;Types.c: 256: unsigned long u;
 21382                           ;Types.c: 257: while (us--) {
 21383                           
 21384                           ;incstack = 0
 21385  0133FA  D016               	goto	i2u405_40
 21386  0133FC                     i2l7806:
 21387                           
 21388                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 21389  0133FC  0E00               	movlw	0
 21390  0133FE  6E03               	movwf	i2delay_us@u,c
 21391  013400  0E00               	movlw	0
 21392  013402  6E04               	movwf	i2delay_us@u+1,c
 21393  013404  0E00               	movlw	0
 21394  013406  6E05               	movwf	i2delay_us@u+2,c
 21395  013408  0E00               	movlw	0
 21396  01340A  6E06               	movwf	i2delay_us@u+3,c
 21397  01340C                     i2l7808:
 21398  01340C  5003               	movf	i2delay_us@u,w,c
 21399  01340E  1004               	iorwf	i2delay_us@u+1,w,c
 21400  013410  1005               	iorwf	i2delay_us@u+2,w,c
 21401  013412  1006               	iorwf	i2delay_us@u+3,w,c
 21402  013414  A4D8               	btfss	status,2,c
 21403  013416  D008               	goto	i2u405_40
 21404  013418  F000               	nop		; ;# 
 21405  01341A  0E01               	movlw	1
 21406  01341C  2603               	addwf	i2delay_us@u,f,c
 21407  01341E  0E00               	movlw	0
 21408  013420  2204               	addwfc	i2delay_us@u+1,f,c
 21409  013422  2205               	addwfc	i2delay_us@u+2,f,c
 21410  013424  2206               	addwfc	i2delay_us@u+3,f,c
 21411  013426  D7F2               	goto	i2l7808
 21412  013428                     i2u405_40:
 21413  013428  0601               	decf	i2delay_us@us,f,c
 21414  01342A  A0D8               	btfss	status,0,c
 21415  01342C  0602               	decf	i2delay_us@us+1,f,c
 21416  01342E  2801               	incf	i2delay_us@us,w,c
 21417  013430  E1E5               	bnz	i2l7806
 21418  013432  2802               	incf	i2delay_us@us+1,w,c
 21419  013434  B4D8               	btfsc	status,2,c
 21420  013436  0012               	return	
 21421  013438  D7E1               	goto	i2l832
 21422  01343A                     __end_ofi2_delay_us:
 21423                           	opt stack 0
 21424                           tosu	equ	0xFFF
 21425                           tosh	equ	0xFFE
 21426                           tosl	equ	0xFFD
 21427                           pclatu	equ	0xFFB
 21428                           pclath	equ	0xFFA
 21429                           tblptru	equ	0xFF8
 21430                           tblptrh	equ	0xFF7
 21431                           tblptrl	equ	0xFF6
 21432                           tablat	equ	0xFF5
 21433                           prodh	equ	0xFF4
 21434                           prodl	equ	0xFF3
 21435                           intcon	equ	0xFF2
 21436                           indf0	equ	0xFEF
 21437                           postinc0	equ	0xFEE
 21438                           fsr0h	equ	0xFEA
 21439                           fsr0l	equ	0xFE9
 21440                           wreg	equ	0xFE8
 21441                           indf1	equ	0xFE7
 21442                           postdec1	equ	0xFE5
 21443                           fsr1h	equ	0xFE2
 21444                           fsr1l	equ	0xFE1
 21445                           indf2	equ	0xFDF
 21446                           postinc2	equ	0xFDE
 21447                           postdec2	equ	0xFDD
 21448                           plusw2	equ	0xFDB
 21449                           fsr2h	equ	0xFDA
 21450                           fsr2l	equ	0xFD9
 21451                           status	equ	0xFD8
 21452                           
 21453 ;; *************** function i2_MXK_Release *****************
 21454 ;; Defined at:
 21455 ;;		line 130 in file "Library/MXK.c"
 21456 ;; Parameters:    Size  Location     Type
 21457 ;;		None
 21458 ;; Auto vars:     Size  Location     Type
 21459 ;;		None
 21460 ;; Return value:  Size  Location     Type
 21461 ;;                  1    wreg      unsigned char 
 21462 ;; Registers used:
 21463 ;;		wreg, status,2, status,0
 21464 ;; Tracked objects:
 21465 ;;		On entry : 0/0
 21466 ;;		On exit  : 0/0
 21467 ;;		Unchanged: 0/0
 21468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21473 ;;Total ram usage:        0 bytes
 21474 ;; Hardware stack levels used:    1
 21475 ;; This function calls:
 21476 ;;		Nothing
 21477 ;; This function is called by:
 21478 ;;		i2_Motor_Step
 21479 ;; This function uses a non-reentrant model
 21480 ;;
 21481                           
 21482                           	psect	text129
 21483  013B42                     __ptext129:
 21484                           	opt stack 0
 21485  013B42                     i2_MXK_Release:
 21486                           	opt stack 17
 21487                           
 21488                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 21489                           
 21490                           ;incstack = 0
 21491  013B42  0E01               	movlw	1
 21492  013B44  6E4B               	movwf	_Bus_State,c
 21493                           
 21494                           ;MXK.c: 135: return 1;
 21495                           ;	Return value of i2_MXK_Release is never used
 21496  013B46  0012               	return	
 21497  013B48                     __end_ofi2_MXK_Release:
 21498                           	opt stack 0
 21499                           tosu	equ	0xFFF
 21500                           tosh	equ	0xFFE
 21501                           tosl	equ	0xFFD
 21502                           pclatu	equ	0xFFB
 21503                           pclath	equ	0xFFA
 21504                           tblptru	equ	0xFF8
 21505                           tblptrh	equ	0xFF7
 21506                           tblptrl	equ	0xFF6
 21507                           tablat	equ	0xFF5
 21508                           prodh	equ	0xFF4
 21509                           prodl	equ	0xFF3
 21510                           intcon	equ	0xFF2
 21511                           indf0	equ	0xFEF
 21512                           postinc0	equ	0xFEE
 21513                           fsr0h	equ	0xFEA
 21514                           fsr0l	equ	0xFE9
 21515                           wreg	equ	0xFE8
 21516                           indf1	equ	0xFE7
 21517                           postdec1	equ	0xFE5
 21518                           fsr1h	equ	0xFE2
 21519                           fsr1l	equ	0xFE1
 21520                           indf2	equ	0xFDF
 21521                           postinc2	equ	0xFDE
 21522                           postdec2	equ	0xFDD
 21523                           plusw2	equ	0xFDB
 21524                           fsr2h	equ	0xFDA
 21525                           fsr2l	equ	0xFD9
 21526                           status	equ	0xFD8
 21527                           
 21528 ;; *************** function i2_MXK_Queue *****************
 21529 ;; Defined at:
 21530 ;;		line 144 in file "Library/MXK.c"
 21531 ;; Parameters:    Size  Location     Type
 21532 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 21533 ;;		 -> Absolute function(1), Motor_Step(1), 
 21534 ;; Auto vars:     Size  Location     Type
 21535 ;;		None
 21536 ;; Return value:  Size  Location     Type
 21537 ;;                  1    wreg      void 
 21538 ;; Registers used:
 21539 ;;		wreg, status,2, status,0
 21540 ;; Tracked objects:
 21541 ;;		On entry : 0/0
 21542 ;;		On exit  : 0/0
 21543 ;;		Unchanged: 0/0
 21544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21545 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21548 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21549 ;;Total ram usage:        3 bytes
 21550 ;; Hardware stack levels used:    1
 21551 ;; This function calls:
 21552 ;;		Nothing
 21553 ;; This function is called by:
 21554 ;;		i2_Motor_Step
 21555 ;; This function uses a non-reentrant model
 21556 ;;
 21557                           
 21558                           	psect	text130
 21559  013AC6                     __ptext130:
 21560                           	opt stack 0
 21561  013AC6                     i2_MXK_Queue:
 21562                           	opt stack 17
 21563                           
 21564                           ;MXK.c: 146: lQueue = pCallback;
 21565                           
 21566                           ;incstack = 0
 21567  013AC6  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 21568  013ACA  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 21569  013ACE  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 21570  013AD2  0012               	return		;funcret
 21571  013AD4                     __end_ofi2_MXK_Queue:
 21572                           	opt stack 0
 21573                           tosu	equ	0xFFF
 21574                           tosh	equ	0xFFE
 21575                           tosl	equ	0xFFD
 21576                           pclatu	equ	0xFFB
 21577                           pclath	equ	0xFFA
 21578                           tblptru	equ	0xFF8
 21579                           tblptrh	equ	0xFF7
 21580                           tblptrl	equ	0xFF6
 21581                           tablat	equ	0xFF5
 21582                           prodh	equ	0xFF4
 21583                           prodl	equ	0xFF3
 21584                           intcon	equ	0xFF2
 21585                           indf0	equ	0xFEF
 21586                           postinc0	equ	0xFEE
 21587                           fsr0h	equ	0xFEA
 21588                           fsr0l	equ	0xFE9
 21589                           wreg	equ	0xFE8
 21590                           indf1	equ	0xFE7
 21591                           postdec1	equ	0xFE5
 21592                           fsr1h	equ	0xFE2
 21593                           fsr1l	equ	0xFE1
 21594                           indf2	equ	0xFDF
 21595                           postinc2	equ	0xFDE
 21596                           postdec2	equ	0xFDD
 21597                           plusw2	equ	0xFDB
 21598                           fsr2h	equ	0xFDA
 21599                           fsr2l	equ	0xFD9
 21600                           status	equ	0xFD8
 21601                           tosu	equ	0xFFF
 21602                           tosh	equ	0xFFE
 21603                           tosl	equ	0xFFD
 21604                           pclatu	equ	0xFFB
 21605                           pclath	equ	0xFFA
 21606                           tblptru	equ	0xFF8
 21607                           tblptrh	equ	0xFF7
 21608                           tblptrl	equ	0xFF6
 21609                           tablat	equ	0xFF5
 21610                           prodh	equ	0xFF4
 21611                           prodl	equ	0xFF3
 21612                           intcon	equ	0xFF2
 21613                           indf0	equ	0xFEF
 21614                           postinc0	equ	0xFEE
 21615                           fsr0h	equ	0xFEA
 21616                           fsr0l	equ	0xFE9
 21617                           wreg	equ	0xFE8
 21618                           indf1	equ	0xFE7
 21619                           postdec1	equ	0xFE5
 21620                           fsr1h	equ	0xFE2
 21621                           fsr1l	equ	0xFE1
 21622                           indf2	equ	0xFDF
 21623                           postinc2	equ	0xFDE
 21624                           postdec2	equ	0xFDD
 21625                           plusw2	equ	0xFDB
 21626                           fsr2h	equ	0xFDA
 21627                           fsr2l	equ	0xFD9
 21628                           status	equ	0xFD8
 21629                           
 21630                           	psect	text131
 21631  000000                     __ptext131:
 21632                           	opt stack 0
 21633                           tosu	equ	0xFFF
 21634                           tosh	equ	0xFFE
 21635                           tosl	equ	0xFFD
 21636                           pclatu	equ	0xFFB
 21637                           pclath	equ	0xFFA
 21638                           tblptru	equ	0xFF8
 21639                           tblptrh	equ	0xFF7
 21640                           tblptrl	equ	0xFF6
 21641                           tablat	equ	0xFF5
 21642                           prodh	equ	0xFF4
 21643                           prodl	equ	0xFF3
 21644                           intcon	equ	0xFF2
 21645                           indf0	equ	0xFEF
 21646                           postinc0	equ	0xFEE
 21647                           fsr0h	equ	0xFEA
 21648                           fsr0l	equ	0xFE9
 21649                           wreg	equ	0xFE8
 21650                           indf1	equ	0xFE7
 21651                           postdec1	equ	0xFE5
 21652                           fsr1h	equ	0xFE2
 21653                           fsr1l	equ	0xFE1
 21654                           indf2	equ	0xFDF
 21655                           postinc2	equ	0xFDE
 21656                           postdec2	equ	0xFDD
 21657                           plusw2	equ	0xFDB
 21658                           fsr2h	equ	0xFDA
 21659                           fsr2l	equ	0xFD9
 21660                           status	equ	0xFD8
 21661                           
 21662                           	psect	rparam
 21663  0000                     tosu	equ	0xFFF
 21664                           tosh	equ	0xFFE
 21665                           tosl	equ	0xFFD
 21666                           pclatu	equ	0xFFB
 21667                           pclath	equ	0xFFA
 21668                           tblptru	equ	0xFF8
 21669                           tblptrh	equ	0xFF7
 21670                           tblptrl	equ	0xFF6
 21671                           tablat	equ	0xFF5
 21672                           prodh	equ	0xFF4
 21673                           prodl	equ	0xFF3
 21674                           intcon	equ	0xFF2
 21675                           indf0	equ	0xFEF
 21676                           postinc0	equ	0xFEE
 21677                           fsr0h	equ	0xFEA
 21678                           fsr0l	equ	0xFE9
 21679                           wreg	equ	0xFE8
 21680                           indf1	equ	0xFE7
 21681                           postdec1	equ	0xFE5
 21682                           fsr1h	equ	0xFE2
 21683                           fsr1l	equ	0xFE1
 21684                           indf2	equ	0xFDF
 21685                           postinc2	equ	0xFDE
 21686                           postdec2	equ	0xFDD
 21687                           plusw2	equ	0xFDB
 21688                           fsr2h	equ	0xFDA
 21689                           fsr2l	equ	0xFD9
 21690                           status	equ	0xFD8
 21691                           
 21692                           	psect	temp
 21693  000051                     btemp:
 21694                           	opt stack 0
 21695  000051                     	ds	1
 21696  0000                     int$flags	set	btemp
 21697  0000                     wtemp6	set	btemp+1
 21698                           tosu	equ	0xFFF
 21699                           tosh	equ	0xFFE
 21700                           tosl	equ	0xFFD
 21701                           pclatu	equ	0xFFB
 21702                           pclath	equ	0xFFA
 21703                           tblptru	equ	0xFF8
 21704                           tblptrh	equ	0xFF7
 21705                           tblptrl	equ	0xFF6
 21706                           tablat	equ	0xFF5
 21707                           prodh	equ	0xFF4
 21708                           prodl	equ	0xFF3
 21709                           intcon	equ	0xFF2
 21710                           indf0	equ	0xFEF
 21711                           postinc0	equ	0xFEE
 21712                           fsr0h	equ	0xFEA
 21713                           fsr0l	equ	0xFE9
 21714                           wreg	equ	0xFE8
 21715                           indf1	equ	0xFE7
 21716                           postdec1	equ	0xFE5
 21717                           fsr1h	equ	0xFE2
 21718                           fsr1l	equ	0xFE1
 21719                           indf2	equ	0xFDF
 21720                           postinc2	equ	0xFDE
 21721                           postdec2	equ	0xFDD
 21722                           plusw2	equ	0xFDB
 21723                           fsr2h	equ	0xFDA
 21724                           fsr2l	equ	0xFD9
 21725                           status	equ	0xFD8


Data Sizes:
    Strings     237
    Constant    806
    Data        39
    BSS         864
=======
 19537 ;; *************** function _delay_ms *****************
 19538 ;; Defined at:
 19539 ;;		line 240 in file "Library/Types.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;  ms              2    0[BANK0 ] unsigned short 
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19544 ;; Return value:  Size  Location     Type
 19545 ;;                  1    wreg      void 
 19546 ;; Registers used:
 19547 ;;		wreg, status,2, status,0
 19548 ;; Tracked objects:
 19549 ;;		On entry : 0/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19553 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19554 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19556 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19557 ;;Total ram usage:        6 bytes
 19558 ;; Hardware stack levels used:    1
 19559 ;; Hardware stack levels required when called:    7
 19560 ;; This function calls:
 19561 ;;		Nothing
 19562 ;; This function is called by:
 19563 ;;		_LCD_Reset
 19564 ;;		_LCD_Init
 19565 ;;		_MXK_Init
 19566 ;;		_SteppingCCW
 19567 ;;		_SteppingCW
 19568 ;;		_main
 19569 ;; This function uses a non-reentrant model
 19570 ;;
 19571                           
 19572                           	psect	text107
 19573  0150EA                     __ptext107:
 19574                           	opt stack 0
 19575  0150EA                     _delay_ms:
 19576                           	opt stack 23
 19577                           
 19578                           ;Types.c: 242: volatile unsigned long u;
 19579                           ;Types.c: 243: while (ms--)
 19580                           
 19581                           ;incstack = 0
 19582  0150EA  D01B               	goto	u11140
 19583  0150EC                     l13810:
 19584                           
 19585                           ;Types.c: 244: {
 19586                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19587  0150EC  0E00               	movlw	0
 19588  0150EE  0100               	movlb	0	; () banked
 19589  0150F0  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19590  0150F2  0E00               	movlw	0
 19591  0150F4  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19592  0150F6  0E00               	movlw	0
 19593  0150F8  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19594  0150FA  0E00               	movlw	0
 19595  0150FC  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19596  0150FE                     l13812:
 19597                           
 19598                           ; BSR set to: 0
 19599  0150FE  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19600  015100  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19601  015102  E10F               	bnz	l13818
 19602  015104  0EB0               	movlw	176
 19603  015106  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19604  015108  0E04               	movlw	4
 19605  01510A  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19606  01510C  B0D8               	btfsc	status,0,c
 19607  01510E  D009               	goto	u11140
 19608                           
 19609                           ; BSR set to: 0
 19610                           
 19611                           ; BSR set to: 0
 19612  015110  F000               	nop		; ;# 
 19613  015112  0E01               	movlw	1
 19614  015114  0100               	movlb	0	; () banked
 19615  015116  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19616  015118  0E00               	movlw	0
 19617  01511A  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19618  01511C  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19619  01511E  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19620  015120  D7EE               	goto	l13812
 19621  015122                     u11140:
 19622  015122                     l13818:
 19623  015122  0100               	movlb	0	; () banked
 19624  015124  0760               	decf	delay_ms@ms& (0+255),f,b
 19625  015126  A0D8               	btfss	status,0,c
 19626  015128  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 19627  01512A  2960               	incf	delay_ms@ms& (0+255),w,b
 19628  01512C  E1DF               	bnz	l13810
 19629  01512E  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 19630  015130  A4D8               	btfss	status,2,c
 19631  015132  D7DC               	goto	l824
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;Types.c: 251: }
 19635                           ;Types.c: 252: }
 19636                           ;Types.c: 253: u = 0x8008;
 19637                           
 19638                           ; BSR set to: 0
 19639  015134  0E08               	movlw	8
 19640  015136  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19641  015138  0E80               	movlw	128
 19642  01513A  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19643  01513C  0E00               	movlw	0
 19644  01513E  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19645  015140  0E00               	movlw	0
 19646  015142  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19647                           
 19648                           ; BSR set to: 0
 19649  015144  0012               	return		;funcret
 19650  015146                     __end_of_delay_ms:
 19651                           	opt stack 0
 19652                           tosu	equ	0xFFF
 19653                           tosh	equ	0xFFE
 19654                           tosl	equ	0xFFD
 19655                           pclath	equ	0xFFA
 19656                           tblptru	equ	0xFF8
 19657                           tblptrh	equ	0xFF7
 19658                           tblptrl	equ	0xFF6
 19659                           tablat	equ	0xFF5
 19660                           prodh	equ	0xFF4
 19661                           prodl	equ	0xFF3
 19662                           intcon	equ	0xFF2
 19663                           indf0	equ	0xFEF
 19664                           postinc0	equ	0xFEE
 19665                           fsr0h	equ	0xFEA
 19666                           fsr0l	equ	0xFE9
 19667                           wreg	equ	0xFE8
 19668                           indf1	equ	0xFE7
 19669                           postdec1	equ	0xFE5
 19670                           fsr1h	equ	0xFE2
 19671                           fsr1l	equ	0xFE1
 19672                           indf2	equ	0xFDF
 19673                           postinc2	equ	0xFDE
 19674                           postdec2	equ	0xFDD
 19675                           plusw2	equ	0xFDB
 19676                           fsr2h	equ	0xFDA
 19677                           fsr2l	equ	0xFD9
 19678                           status	equ	0xFD8
 19679                           
 19680 ;; *************** function _STP4 *****************
 19681 ;; Defined at:
 19682 ;;		line 313 in file "main.c"
 19683 ;; Parameters:    Size  Location     Type
 19684 ;;		None
 19685 ;; Auto vars:     Size  Location     Type
 19686 ;;		None
 19687 ;; Return value:  Size  Location     Type
 19688 ;;                  2  2008[None  ] int 
 19689 ;; Registers used:
 19690 ;;		cstack
 19691 ;; Tracked objects:
 19692 ;;		On entry : 0/0
 19693 ;;		On exit  : 0/0
 19694 ;;		Unchanged: 0/0
 19695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19700 ;;Total ram usage:        0 bytes
 19701 ;; Hardware stack levels used:    1
 19702 ;; Hardware stack levels required when called:    8
 19703 ;; This function calls:
 19704 ;;		_Coil_Setup
 19705 ;; This function is called by:
 19706 ;;		_SteppingCCW
 19707 ;;		_SteppingCW
 19708 ;; This function uses a non-reentrant model
 19709 ;;
 19710                           
 19711                           	psect	text108
 19712  016076                     __ptext108:
 19713                           	opt stack 0
 19714  016076                     _STP4:
 19715                           	opt stack 20
 19716                           
 19717                           ;main.c: 314: Coil_Setup();
 19718                           
 19719                           ; BSR set to: 0
 19720                           ;incstack = 0
 19721  016076  ECE2  F0AF         	call	_Coil_Setup	;wreg free
 19722                           
 19723                           ;main.c: 315: RD7 = 1;
 19724  01607A  8E83               	bsf	3971,7,c	;volatile
 19725  01607C  0012               	return		;funcret
 19726  01607E                     __end_of_STP4:
 19727                           	opt stack 0
 19728                           tosu	equ	0xFFF
 19729                           tosh	equ	0xFFE
 19730                           tosl	equ	0xFFD
 19731                           pclath	equ	0xFFA
 19732                           tblptru	equ	0xFF8
 19733                           tblptrh	equ	0xFF7
 19734                           tblptrl	equ	0xFF6
 19735                           tablat	equ	0xFF5
 19736                           prodh	equ	0xFF4
 19737                           prodl	equ	0xFF3
 19738                           intcon	equ	0xFF2
 19739                           indf0	equ	0xFEF
 19740                           postinc0	equ	0xFEE
 19741                           fsr0h	equ	0xFEA
 19742                           fsr0l	equ	0xFE9
 19743                           wreg	equ	0xFE8
 19744                           indf1	equ	0xFE7
 19745                           postdec1	equ	0xFE5
 19746                           fsr1h	equ	0xFE2
 19747                           fsr1l	equ	0xFE1
 19748                           indf2	equ	0xFDF
 19749                           postinc2	equ	0xFDE
 19750                           postdec2	equ	0xFDD
 19751                           plusw2	equ	0xFDB
 19752                           fsr2h	equ	0xFDA
 19753                           fsr2l	equ	0xFD9
 19754                           status	equ	0xFD8
 19755                           
 19756 ;; *************** function _STP3 *****************
 19757 ;; Defined at:
 19758 ;;		line 308 in file "main.c"
 19759 ;; Parameters:    Size  Location     Type
 19760 ;;		None
 19761 ;; Auto vars:     Size  Location     Type
 19762 ;;		None
 19763 ;; Return value:  Size  Location     Type
 19764 ;;                  2  2012[None  ] int 
 19765 ;; Registers used:
 19766 ;;		cstack
 19767 ;; Tracked objects:
 19768 ;;		On entry : 0/0
 19769 ;;		On exit  : 0/0
 19770 ;;		Unchanged: 0/0
 19771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19776 ;;Total ram usage:        0 bytes
 19777 ;; Hardware stack levels used:    1
 19778 ;; Hardware stack levels required when called:    8
 19779 ;; This function calls:
 19780 ;;		_Coil_Setup
 19781 ;; This function is called by:
 19782 ;;		_SteppingCCW
 19783 ;;		_SteppingCW
 19784 ;; This function uses a non-reentrant model
 19785 ;;
 19786                           
 19787                           	psect	text109
 19788  01607E                     __ptext109:
 19789                           	opt stack 0
 19790  01607E                     _STP3:
 19791                           	opt stack 20
 19792                           
 19793                           ;main.c: 309: Coil_Setup();
 19794                           
 19795                           ;incstack = 0
 19796  01607E  ECE2  F0AF         	call	_Coil_Setup	;wreg free
 19797                           
 19798                           ;main.c: 310: RD5 = 1;
 19799  016082  8A83               	bsf	3971,5,c	;volatile
 19800  016084  0012               	return		;funcret
 19801  016086                     __end_of_STP3:
 19802                           	opt stack 0
 19803                           tosu	equ	0xFFF
 19804                           tosh	equ	0xFFE
 19805                           tosl	equ	0xFFD
 19806                           pclath	equ	0xFFA
 19807                           tblptru	equ	0xFF8
 19808                           tblptrh	equ	0xFF7
 19809                           tblptrl	equ	0xFF6
 19810                           tablat	equ	0xFF5
 19811                           prodh	equ	0xFF4
 19812                           prodl	equ	0xFF3
 19813                           intcon	equ	0xFF2
 19814                           indf0	equ	0xFEF
 19815                           postinc0	equ	0xFEE
 19816                           fsr0h	equ	0xFEA
 19817                           fsr0l	equ	0xFE9
 19818                           wreg	equ	0xFE8
 19819                           indf1	equ	0xFE7
 19820                           postdec1	equ	0xFE5
 19821                           fsr1h	equ	0xFE2
 19822                           fsr1l	equ	0xFE1
 19823                           indf2	equ	0xFDF
 19824                           postinc2	equ	0xFDE
 19825                           postdec2	equ	0xFDD
 19826                           plusw2	equ	0xFDB
 19827                           fsr2h	equ	0xFDA
 19828                           fsr2l	equ	0xFD9
 19829                           status	equ	0xFD8
 19830                           
 19831 ;; *************** function _STP2 *****************
 19832 ;; Defined at:
 19833 ;;		line 303 in file "main.c"
 19834 ;; Parameters:    Size  Location     Type
 19835 ;;		None
 19836 ;; Auto vars:     Size  Location     Type
 19837 ;;		None
 19838 ;; Return value:  Size  Location     Type
 19839 ;;                  2  2014[None  ] int 
 19840 ;; Registers used:
 19841 ;;		cstack
 19842 ;; Tracked objects:
 19843 ;;		On entry : 0/0
 19844 ;;		On exit  : 0/0
 19845 ;;		Unchanged: 0/0
 19846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;Total ram usage:        0 bytes
 19852 ;; Hardware stack levels used:    1
 19853 ;; Hardware stack levels required when called:    8
 19854 ;; This function calls:
 19855 ;;		_Coil_Setup
 19856 ;; This function is called by:
 19857 ;;		_SteppingCCW
 19858 ;;		_SteppingCW
 19859 ;; This function uses a non-reentrant model
 19860 ;;
 19861                           
 19862                           	psect	text110
 19863  016086                     __ptext110:
 19864                           	opt stack 0
 19865  016086                     _STP2:
 19866                           	opt stack 20
 19867                           
 19868                           ;main.c: 304: Coil_Setup();
 19869                           
 19870                           ;incstack = 0
 19871  016086  ECE2  F0AF         	call	_Coil_Setup	;wreg free
 19872                           
 19873                           ;main.c: 305: RA3 = 1;
 19874  01608A  8680               	bsf	3968,3,c	;volatile
 19875  01608C  0012               	return		;funcret
 19876  01608E                     __end_of_STP2:
 19877                           	opt stack 0
 19878                           tosu	equ	0xFFF
 19879                           tosh	equ	0xFFE
 19880                           tosl	equ	0xFFD
 19881                           pclath	equ	0xFFA
 19882                           tblptru	equ	0xFF8
 19883                           tblptrh	equ	0xFF7
 19884                           tblptrl	equ	0xFF6
 19885                           tablat	equ	0xFF5
 19886                           prodh	equ	0xFF4
 19887                           prodl	equ	0xFF3
 19888                           intcon	equ	0xFF2
 19889                           indf0	equ	0xFEF
 19890                           postinc0	equ	0xFEE
 19891                           fsr0h	equ	0xFEA
 19892                           fsr0l	equ	0xFE9
 19893                           wreg	equ	0xFE8
 19894                           indf1	equ	0xFE7
 19895                           postdec1	equ	0xFE5
 19896                           fsr1h	equ	0xFE2
 19897                           fsr1l	equ	0xFE1
 19898                           indf2	equ	0xFDF
 19899                           postinc2	equ	0xFDE
 19900                           postdec2	equ	0xFDD
 19901                           plusw2	equ	0xFDB
 19902                           fsr2h	equ	0xFDA
 19903                           fsr2l	equ	0xFD9
 19904                           status	equ	0xFD8
 19905                           
 19906 ;; *************** function _STP1 *****************
 19907 ;; Defined at:
 19908 ;;		line 298 in file "main.c"
 19909 ;; Parameters:    Size  Location     Type
 19910 ;;		None
 19911 ;; Auto vars:     Size  Location     Type
 19912 ;;		None
 19913 ;; Return value:  Size  Location     Type
 19914 ;;                  2  2016[None  ] int 
 19915 ;; Registers used:
 19916 ;;		cstack
 19917 ;; Tracked objects:
 19918 ;;		On entry : 0/0
 19919 ;;		On exit  : 0/0
 19920 ;;		Unchanged: 0/0
 19921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19926 ;;Total ram usage:        0 bytes
 19927 ;; Hardware stack levels used:    1
 19928 ;; Hardware stack levels required when called:    8
 19929 ;; This function calls:
 19930 ;;		_Coil_Setup
 19931 ;; This function is called by:
 19932 ;;		_SteppingCCW
 19933 ;;		_SteppingCW
 19934 ;; This function uses a non-reentrant model
 19935 ;;
 19936                           
 19937                           	psect	text111
 19938  01608E                     __ptext111:
 19939                           	opt stack 0
 19940  01608E                     _STP1:
 19941                           	opt stack 20
 19942                           
 19943                           ;main.c: 299: Coil_Setup();
 19944                           
 19945                           ;incstack = 0
 19946  01608E  ECE2  F0AF         	call	_Coil_Setup	;wreg free
 19947                           
 19948                           ;main.c: 300: RA2 = 1;
 19949  016092  8480               	bsf	3968,2,c	;volatile
 19950  016094  0012               	return		;funcret
 19951  016096                     __end_of_STP1:
 19952                           	opt stack 0
 19953                           tosu	equ	0xFFF
 19954                           tosh	equ	0xFFE
 19955                           tosl	equ	0xFFD
 19956                           pclath	equ	0xFFA
 19957                           tblptru	equ	0xFF8
 19958                           tblptrh	equ	0xFF7
 19959                           tblptrl	equ	0xFF6
 19960                           tablat	equ	0xFF5
 19961                           prodh	equ	0xFF4
 19962                           prodl	equ	0xFF3
 19963                           intcon	equ	0xFF2
 19964                           indf0	equ	0xFEF
 19965                           postinc0	equ	0xFEE
 19966                           fsr0h	equ	0xFEA
 19967                           fsr0l	equ	0xFE9
 19968                           wreg	equ	0xFE8
 19969                           indf1	equ	0xFE7
 19970                           postdec1	equ	0xFE5
 19971                           fsr1h	equ	0xFE2
 19972                           fsr1l	equ	0xFE1
 19973                           indf2	equ	0xFDF
 19974                           postinc2	equ	0xFDE
 19975                           postdec2	equ	0xFDD
 19976                           plusw2	equ	0xFDB
 19977                           fsr2h	equ	0xFDA
 19978                           fsr2l	equ	0xFD9
 19979                           status	equ	0xFD8
 19980                           
 19981 ;; *************** function _Coil_Setup *****************
 19982 ;; Defined at:
 19983 ;;		line 264 in file "main.c"
 19984 ;; Parameters:    Size  Location     Type
 19985 ;;		None
 19986 ;; Auto vars:     Size  Location     Type
 19987 ;;		None
 19988 ;; Return value:  Size  Location     Type
 19989 ;;                  1    wreg      void 
 19990 ;; Registers used:
 19991 ;;		None
 19992 ;; Tracked objects:
 19993 ;;		On entry : 0/0
 19994 ;;		On exit  : 0/0
 19995 ;;		Unchanged: 0/0
 19996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20001 ;;Total ram usage:        0 bytes
 20002 ;; Hardware stack levels used:    1
 20003 ;; Hardware stack levels required when called:    7
 20004 ;; This function calls:
 20005 ;;		Nothing
 20006 ;; This function is called by:
 20007 ;;		_STP1
 20008 ;;		_STP2
 20009 ;;		_STP3
 20010 ;;		_STP4
 20011 ;; This function uses a non-reentrant model
 20012 ;;
 20013                           
 20014                           	psect	text112
 20015  015FC4                     __ptext112:
 20016                           	opt stack 0
 20017  015FC4                     _Coil_Setup:
 20018                           	opt stack 20
 20019                           
 20020                           ;main.c: 265: TRISA2 = 0;
 20021                           
 20022                           ;incstack = 0
 20023  015FC4  9492               	bcf	3986,2,c	;volatile
 20024                           
 20025                           ;main.c: 266: TRISA3 = 0;
 20026  015FC6  9692               	bcf	3986,3,c	;volatile
 20027                           
 20028                           ;main.c: 267: TRISD5 = 0;
 20029  015FC8  9A95               	bcf	3989,5,c	;volatile
 20030                           
 20031                           ;main.c: 268: TRISD7 = 0;
 20032  015FCA  9E95               	bcf	3989,7,c	;volatile
 20033                           
 20034                           ;main.c: 269: RD5 = 0;
 20035  015FCC  9A83               	bcf	3971,5,c	;volatile
 20036                           
 20037                           ;main.c: 270: RD7 = 0;
 20038  015FCE  9E83               	bcf	3971,7,c	;volatile
 20039                           
 20040                           ;main.c: 271: RA2 = 0;
 20041  015FD0  9480               	bcf	3968,2,c	;volatile
 20042                           
 20043                           ;main.c: 272: RA3 = 0;
 20044  015FD2  9680               	bcf	3968,3,c	;volatile
 20045  015FD4  0012               	return		;funcret
 20046  015FD6                     __end_of_Coil_Setup:
 20047                           	opt stack 0
 20048                           tosu	equ	0xFFF
 20049                           tosh	equ	0xFFE
 20050                           tosl	equ	0xFFD
 20051                           pclath	equ	0xFFA
 20052                           tblptru	equ	0xFF8
 20053                           tblptrh	equ	0xFF7
 20054                           tblptrl	equ	0xFF6
 20055                           tablat	equ	0xFF5
 20056                           prodh	equ	0xFF4
 20057                           prodl	equ	0xFF3
 20058                           intcon	equ	0xFF2
 20059                           indf0	equ	0xFEF
 20060                           postinc0	equ	0xFEE
 20061                           fsr0h	equ	0xFEA
 20062                           fsr0l	equ	0xFE9
 20063                           wreg	equ	0xFE8
 20064                           indf1	equ	0xFE7
 20065                           postdec1	equ	0xFE5
 20066                           fsr1h	equ	0xFE2
 20067                           fsr1l	equ	0xFE1
 20068                           indf2	equ	0xFDF
 20069                           postinc2	equ	0xFDE
 20070                           postdec2	equ	0xFDD
 20071                           plusw2	equ	0xFDB
 20072                           fsr2h	equ	0xFDA
 20073                           fsr2l	equ	0xFD9
 20074                           status	equ	0xFD8
 20075                           
 20076 ;; *************** function _Console_Render *****************
 20077 ;; Defined at:
 20078 ;;		line 377 in file "Library/Console.c"
 20079 ;; Parameters:    Size  Location     Type
 20080 ;;		None
 20081 ;; Auto vars:     Size  Location     Type
 20082 ;;  lCursor         4   38[BANK0 ] struct Point
 20083 ;;  y               1   43[BANK0 ] unsigned char 
 20084 ;;  x               1   42[BANK0 ] unsigned char 
 20085 ;;  temp            1   37[BANK0 ] unsigned char 
 20086 ;;  Temp            2    0        unsigned short 
 20087 ;; Return value:  Size  Location     Type
 20088 ;;                  1    wreg      void 
 20089 ;; Registers used:
 20090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20091 ;; Tracked objects:
 20092 ;;		On entry : 0/0
 20093 ;;		On exit  : 0/0
 20094 ;;		Unchanged: 0/0
 20095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20097 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20098 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20099 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20100 ;;Total ram usage:        9 bytes
 20101 ;; Hardware stack levels used:    1
 20102 ;; Hardware stack levels required when called:   11
 20103 ;; This function calls:
 20104 ;;		_Console_MakeField
 20105 ;;		_LCD_DrawField
 20106 ;;		_LCD_FillRectangle
 20107 ;; This function is called by:
 20108 ;;		_Sensor_Observe2
 20109 ;;		_Closest_Object2
 20110 ;;		_Sensor_Observe
 20111 ;;		_Closest_Object
 20112 ;;		_main
 20113 ;; This function uses a non-reentrant model
 20114 ;;
 20115                           
 20116                           	psect	text113
 20117  0124DE                     __ptext113:
 20118                           	opt stack 0
 20119  0124DE                     _Console_Render:
 20120                           	opt stack 18
 20121                           
 20122                           ;Console.c: 379: Colour Temp;
 20123                           ;Console.c: 380: if (change)
 20124                           
 20125                           ;incstack = 0
 20126  0124DE  504D               	movf	_change,w,c
 20127  0124E0  B4D8               	btfsc	status,2,c
 20128  0124E2  0012               	return	
 20129                           
 20130                           ;Console.c: 381: {
 20131                           ;Console.c: 382: UINT8 x, y, temp;
 20132                           ;Console.c: 383: Point lCursor = {6,6};
 20133  0124E4  C1E1  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 20134  0124E8  C1E2  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 20135  0124EC  C1E3  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 20136  0124F0  C1E4  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 20137                           
 20138                           ;Console.c: 385: if (clearall)
 20139  0124F4  0100               	movlb	0	; () banked
 20140  0124F6  51F5               	movf	_clearall& (0+255),w,b
 20141  0124F8  B4D8               	btfsc	status,2,c
 20142  0124FA  D004               	goto	l1056
 20143                           
 20144                           ; BSR set to: 0
 20145                           ;Console.c: 386: {
 20146                           ;Console.c: 389: temp = lBufferY;
 20147  0124FC  C0F3  F085         	movff	_lBufferY,Console_Render@temp
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 20151  012500  0E0F               	movlw	15
 20152  012502  6FF3               	movwf	_lBufferY& (0+255),b
 20153  012504                     l1056:
 20154                           
 20155                           ; BSR set to: 0
 20156                           ;Console.c: 391: }
 20157                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 20158  012504  0E00               	movlw	0
 20159  012506  6F8B               	movwf	Console_Render@y& (0+255),b
 20160  012508  D0B9               	goto	l1057
 20161  01250A                     
 20162                           ; BSR set to: 0
 20163                           ;Console.c: 394: {
 20164                           ;Console.c: 395: gForecolour = lCBuffer[y];
 20165                           
 20166                           ; BSR set to: 0
 20167  01250A  518B               	movf	Console_Render@y& (0+255),w,b
 20168  01250C  0D02               	mullw	2
 20169  01250E  0E64               	movlw	low _lCBuffer
 20170  012510  24F3               	addwf	prodl,w,c
 20171  012512  6ED9               	movwf	fsr2l,c
 20172  012514  0E02               	movlw	high _lCBuffer
 20173  012516  20F4               	addwfc	prodh,w,c
 20174  012518  6EDA               	movwf	fsr2h,c
 20175  01251A  CFDE F1F3          	movff	postinc2,_gForecolour
 20176  01251E  CFDD F1F4          	movff	postdec2,_gForecolour+1
 20177                           
 20178                           ; BSR set to: 0
 20179                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 20180  012522  0E00               	movlw	0
 20181  012524  6F8A               	movwf	Console_Render@x& (0+255),b
 20182  012526                     l14842:
 20183                           
 20184                           ; BSR set to: 0
 20185  012526  0E13               	movlw	19
 20186  012528  658A               	cpfsgt	Console_Render@x& (0+255),b
 20187  01252A  D001               	goto	l1059
 20188  01252C  D09E               	goto	u12080
 20189  01252E                     l1059:
 20190                           
 20191                           ; BSR set to: 0
 20192                           ;Console.c: 397: {
 20193                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 20194                           
 20195                           ; BSR set to: 0
 20196  01252E  518B               	movf	Console_Render@y& (0+255),w,b
 20197  012530  0D14               	mullw	20
 20198  012532  0E18               	movlw	low _lBuffer
 20199  012534  6F83               	movwf	??_Console_Render& (0+255),b
 20200  012536  0E03               	movlw	high _lBuffer
 20201  012538  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20202  01253A  50F3               	movf	prodl,w,c
 20203  01253C  2783               	addwf	??_Console_Render& (0+255),f,b
 20204  01253E  50F4               	movf	prodh,w,c
 20205  012540  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20206  012542  518A               	movf	Console_Render@x& (0+255),w,b
 20207  012544  0D01               	mullw	1
 20208  012546  50F3               	movf	prodl,w,c
 20209  012548  2583               	addwf	??_Console_Render& (0+255),w,b
 20210  01254A  6ED9               	movwf	fsr2l,c
 20211  01254C  50F4               	movf	prodh,w,c
 20212  01254E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20213  012550  6EDA               	movwf	fsr2h,c
 20214  012552  AEDF               	btfss	indf2,7,c
 20215  012554  D083               	goto	l1063
 20216                           
 20217                           ; BSR set to: 0
 20218                           ;Console.c: 399: {
 20219                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 20220  012556  518B               	movf	Console_Render@y& (0+255),w,b
 20221  012558  0D14               	mullw	20
 20222  01255A  0E18               	movlw	low _lBuffer
 20223  01255C  6F83               	movwf	??_Console_Render& (0+255),b
 20224  01255E  0E03               	movlw	high _lBuffer
 20225  012560  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20226  012562  50F3               	movf	prodl,w,c
 20227  012564  2783               	addwf	??_Console_Render& (0+255),f,b
 20228  012566  50F4               	movf	prodh,w,c
 20229  012568  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20230  01256A  518A               	movf	Console_Render@x& (0+255),w,b
 20231  01256C  0D01               	mullw	1
 20232  01256E  50F3               	movf	prodl,w,c
 20233  012570  2583               	addwf	??_Console_Render& (0+255),w,b
 20234  012572  6ED9               	movwf	fsr2l,c
 20235  012574  50F4               	movf	prodh,w,c
 20236  012576  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20237  012578  6EDA               	movwf	fsr2h,c
 20238  01257A  0E7F               	movlw	127
 20239  01257C  16DF               	andwf	indf2,f,c
 20240                           
 20241                           ;Console.c: 401: if (lBuffer[y][x])
 20242  01257E  518B               	movf	Console_Render@y& (0+255),w,b
 20243  012580  0D14               	mullw	20
 20244  012582  0E18               	movlw	low _lBuffer
 20245  012584  6F83               	movwf	??_Console_Render& (0+255),b
 20246  012586  0E03               	movlw	high _lBuffer
 20247  012588  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20248  01258A  50F3               	movf	prodl,w,c
 20249  01258C  2783               	addwf	??_Console_Render& (0+255),f,b
 20250  01258E  50F4               	movf	prodh,w,c
 20251  012590  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20252  012592  518A               	movf	Console_Render@x& (0+255),w,b
 20253  012594  0D01               	mullw	1
 20254  012596  50F3               	movf	prodl,w,c
 20255  012598  2583               	addwf	??_Console_Render& (0+255),w,b
 20256  01259A  6ED9               	movwf	fsr2l,c
 20257  01259C  50F4               	movf	prodh,w,c
 20258  01259E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20259  0125A0  6EDA               	movwf	fsr2h,c
 20260  0125A2  50DF               	movf	indf2,w,c
 20261  0125A4  B4D8               	btfsc	status,2,c
 20262  0125A6  D043               	goto	l1062
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;Console.c: 402: {
 20266                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20267  0125A8  C035  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20268  0125AC  C036  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20269  0125B0  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20270  0125B4  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20271  0125B8  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20272  0125BC  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20273  0125C0  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20274  0125C4  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20275  0125C8  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20276  0125CC  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20277  0125D0  EC23  F0A9         	call	_LCD_FillRectangle	;wreg free
 20278                           
 20279                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20280  0125D4  0100               	movlb	0	; () banked
 20281  0125D6  518B               	movf	Console_Render@y& (0+255),w,b
 20282  0125D8  0D14               	mullw	20
 20283  0125DA  0E18               	movlw	low _lBuffer
 20284  0125DC  6F83               	movwf	??_Console_Render& (0+255),b
 20285  0125DE  0E03               	movlw	high _lBuffer
 20286  0125E0  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20287  0125E2  50F3               	movf	prodl,w,c
 20288  0125E4  2783               	addwf	??_Console_Render& (0+255),f,b
 20289  0125E6  50F4               	movf	prodh,w,c
 20290  0125E8  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20291  0125EA  518A               	movf	Console_Render@x& (0+255),w,b
 20292  0125EC  0D01               	mullw	1
 20293  0125EE  50F3               	movf	prodl,w,c
 20294  0125F0  2583               	addwf	??_Console_Render& (0+255),w,b
 20295  0125F2  6ED9               	movwf	fsr2l,c
 20296  0125F4  50F4               	movf	prodh,w,c
 20297  0125F6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20298  0125F8  6EDA               	movwf	fsr2h,c
 20299  0125FA  50DF               	movf	indf2,w,c
 20300  0125FC  EC19  F0A1         	call	_Console_MakeField
 20301  012600  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 20302  012604  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20303  012608  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20304  01260C  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20305  012610  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20306  012614  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20307  012618  C1E9  F078         	movff	_gCharSize,LCD_DrawField@pSize
 20308  01261C  C1EA  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20309  012620  C1EB  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20310  012624  C1EC  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20311  012628  ECC8  F0A4         	call	_LCD_DrawField	;wreg free
 20312                           
 20313                           ;Console.c: 405: }
 20314  01262C  D017               	goto	l1063
 20315  01262E                     l1062:
 20316                           
 20317                           ;Console.c: 406: else
 20318                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20319  01262E  0E00               	movlw	0
 20320  012630  0100               	movlb	0	; () banked
 20321  012632  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20322  012634  0E00               	movlw	0
 20323  012636  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20324  012638  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20325  01263C  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20326  012640  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20327  012644  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20328  012648  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20329  01264C  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20330  012650  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20331  012654  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20332  012658  EC23  F0A9         	call	_LCD_FillRectangle	;wreg free
 20333  01265C                     l1063:
 20334                           
 20335                           ;Console.c: 408: }
 20336                           ;Console.c: 409: lCursor.x += (5 + 1);
 20337  01265C  0E06               	movlw	6
 20338  01265E  0100               	movlb	0	; () banked
 20339  012660  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 20340  012662  0E00               	movlw	0
 20341  012664  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20342                           
 20343                           ; BSR set to: 0
 20344  012666  2B8A               	incf	Console_Render@x& (0+255),f,b
 20345  012668  D75E               	goto	l14842
 20346  01266A                     u12080:
 20347                           
 20348                           ; BSR set to: 0
 20349                           ;Console.c: 410: }
 20350                           ;Console.c: 411: lCursor.y += (7 + 1);
 20351                           
 20352                           ; BSR set to: 0
 20353  01266A  0E08               	movlw	8
 20354  01266C  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20355  01266E  0E00               	movlw	0
 20356  012670  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20357                           
 20358                           ; BSR set to: 0
 20359                           ;Console.c: 412: lCursor.x = 6;
 20360  012672  0E00               	movlw	0
 20361  012674  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20362  012676  0E06               	movlw	6
 20363  012678  6F86               	movwf	Console_Render@lCursor& (0+255),b
 20364                           
 20365                           ; BSR set to: 0
 20366  01267A  2B8B               	incf	Console_Render@y& (0+255),f,b
 20367  01267C                     l1057:
 20368                           
 20369                           ; BSR set to: 0
 20370                           
 20371                           ; BSR set to: 0
 20372  01267C  518B               	movf	Console_Render@y& (0+255),w,b
 20373  01267E  5DF3               	subwf	_lBufferY& (0+255),w,b
 20374  012680  B0D8               	btfsc	status,0,c
 20375  012682  D743               	goto	l1058
 20376                           
 20377                           ; BSR set to: 0
 20378                           ;Console.c: 413: }
 20379                           ;Console.c: 415: if (clearall)
 20380                           
 20381                           ; BSR set to: 0
 20382  012684  51F5               	movf	_clearall& (0+255),w,b
 20383  012686  B4D8               	btfsc	status,2,c
 20384  012688  0012               	return	
 20385                           
 20386                           ; BSR set to: 0
 20387                           ;Console.c: 416: {
 20388                           ;Console.c: 417: clearall = 0;
 20389  01268A  0E00               	movlw	0
 20390  01268C  6FF5               	movwf	_clearall& (0+255),b
 20391                           
 20392                           ; BSR set to: 0
 20393                           ;Console.c: 418: lBufferY = temp;
 20394  01268E  C085  F0F3         	movff	Console_Render@temp,_lBufferY
 20395                           
 20396                           ; BSR set to: 0
 20397  012692  0012               	return	
 20398  012694                     __end_of_Console_Render:
 20399                           	opt stack 0
 20400                           tosu	equ	0xFFF
 20401                           tosh	equ	0xFFE
 20402                           tosl	equ	0xFFD
 20403                           pclath	equ	0xFFA
 20404                           tblptru	equ	0xFF8
 20405                           tblptrh	equ	0xFF7
 20406                           tblptrl	equ	0xFF6
 20407                           tablat	equ	0xFF5
 20408                           prodh	equ	0xFF4
 20409                           prodl	equ	0xFF3
 20410                           intcon	equ	0xFF2
 20411                           indf0	equ	0xFEF
 20412                           postinc0	equ	0xFEE
 20413                           fsr0h	equ	0xFEA
 20414                           fsr0l	equ	0xFE9
 20415                           wreg	equ	0xFE8
 20416                           indf1	equ	0xFE7
 20417                           postdec1	equ	0xFE5
 20418                           fsr1h	equ	0xFE2
 20419                           fsr1l	equ	0xFE1
 20420                           indf2	equ	0xFDF
 20421                           postinc2	equ	0xFDE
 20422                           postdec2	equ	0xFDD
 20423                           plusw2	equ	0xFDB
 20424                           fsr2h	equ	0xFDA
 20425                           fsr2l	equ	0xFD9
 20426                           status	equ	0xFD8
 20427                           
 20428 ;; *************** function _LCD_FillRectangle *****************
 20429 ;; Defined at:
 20430 ;;		line 318 in file "Library/LCD.c"
 20431 ;; Parameters:    Size  Location     Type
 20432 ;;  pColour         2    9[BANK0 ] unsigned short 
 20433 ;;  pPoint          4   11[BANK0 ] struct Point
 20434 ;;  pSize           4   15[BANK0 ] struct Point
 20435 ;; Auto vars:     Size  Location     Type
 20436 ;;  j               1   22[BANK0 ] unsigned char 
 20437 ;;  i               1   21[BANK0 ] unsigned char 
 20438 ;; Return value:  Size  Location     Type
 20439 ;;                  1    wreg      void 
 20440 ;; Registers used:
 20441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20442 ;; Tracked objects:
 20443 ;;		On entry : 0/0
 20444 ;;		On exit  : 0/0
 20445 ;;		Unchanged: 0/0
 20446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20447 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20450 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20451 ;;Total ram usage:       14 bytes
 20452 ;; Hardware stack levels used:    1
 20453 ;; Hardware stack levels required when called:   10
 20454 ;; This function calls:
 20455 ;;		_LCD_Word_Write
 20456 ;;		_Set_Addr_Window
 20457 ;; This function is called by:
 20458 ;;		_Console_Render
 20459 ;;		_Console_ClearLine
 20460 ;; This function uses a non-reentrant model
 20461 ;;
 20462                           
 20463                           	psect	text114
 20464  015246                     __ptext114:
 20465                           	opt stack 0
 20466  015246                     _LCD_FillRectangle:
 20467                           	opt stack 18
 20468                           
 20469                           ;LCD.c: 320: UINT8 i = 0x00;
 20470                           
 20471                           ;incstack = 0
 20472  015246  0E00               	movlw	0
 20473  015248  0100               	movlb	0	; () banked
 20474  01524A  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 20475                           
 20476                           ;LCD.c: 321: UINT8 j = 0x00;
 20477  01524C  0E00               	movlw	0
 20478  01524E  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 20479                           
 20480                           ; BSR set to: 0
 20481                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20482  015250  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20483  015254  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20484  015256  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20485  015258  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 20486  01525A  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 20487  01525C  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20488  01525E  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 20489  015260  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 20490  015262  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 20491  015264  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 20492  015266  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20493  015268  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20494  01526A  EC09  F0A2         	call	_Set_Addr_Window
 20495                           
 20496                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 20497  01526E  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 20498  015272  0100               	movlb	0	; () banked
 20499  015274  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 20500  015276  B4D8               	btfsc	status,2,c
 20501  015278  0012               	return	
 20502                           
 20503                           ; BSR set to: 0
 20504                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 20505                           
 20506                           ; BSR set to: 0
 20507  01527A  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 20508  01527E                     l14220:
 20509                           
 20510                           ; BSR set to: 0
 20511  01527E  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 20512  015280  B4D8               	btfsc	status,2,c
 20513  015282  D009               	goto	u11490
 20514                           
 20515                           ; BSR set to: 0
 20516                           ;LCD.c: 333: LCD_Word_Write(pColour);
 20517                           
 20518                           ; BSR set to: 0
 20519                           
 20520                           ; BSR set to: 0
 20521  015284  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 20522  015288  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 20523  01528C  EC18  F0AF         	call	_LCD_Word_Write	;wreg free
 20524  015290  0100               	movlb	0	; () banked
 20525  015292  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 20526  015294  D7F4               	goto	l14220
 20527  015296                     u11490:
 20528                           
 20529                           ; BSR set to: 0
 20530                           
 20531                           ; BSR set to: 0
 20532  015296  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 20533  015298  D7ED               	goto	L9
 20534  01529A                     __end_of_LCD_FillRectangle:
 20535                           	opt stack 0
 20536                           tosu	equ	0xFFF
 20537                           tosh	equ	0xFFE
 20538                           tosl	equ	0xFFD
 20539                           pclath	equ	0xFFA
 20540                           tblptru	equ	0xFF8
 20541                           tblptrh	equ	0xFF7
 20542                           tblptrl	equ	0xFF6
 20543                           tablat	equ	0xFF5
 20544                           prodh	equ	0xFF4
 20545                           prodl	equ	0xFF3
 20546                           intcon	equ	0xFF2
 20547                           indf0	equ	0xFEF
 20548                           postinc0	equ	0xFEE
 20549                           fsr0h	equ	0xFEA
 20550                           fsr0l	equ	0xFE9
 20551                           wreg	equ	0xFE8
 20552                           indf1	equ	0xFE7
 20553                           postdec1	equ	0xFE5
 20554                           fsr1h	equ	0xFE2
 20555                           fsr1l	equ	0xFE1
 20556                           indf2	equ	0xFDF
 20557                           postinc2	equ	0xFDE
 20558                           postdec2	equ	0xFDD
 20559                           plusw2	equ	0xFDB
 20560                           fsr2h	equ	0xFDA
 20561                           fsr2l	equ	0xFD9
 20562                           status	equ	0xFD8
 20563                           
 20564 ;; *************** function _LCD_DrawField *****************
 20565 ;; Defined at:
 20566 ;;		line 393 in file "Library/LCD.c"
 20567 ;; Parameters:    Size  Location     Type
 20568 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 20569 ;;		 -> Console_MakeField@Fill(70), 
 20570 ;;  pPoint          4   20[BANK0 ] struct Point
 20571 ;;  pSize           4   24[BANK0 ] struct Point
 20572 ;; Auto vars:     Size  Location     Type
 20573 ;;  count           2   30[BANK0 ] unsigned short 
 20574 ;;  i               1   34[BANK0 ] unsigned char 
 20575 ;;  ymax            1   33[BANK0 ] unsigned char 
 20576 ;;  xmax            1   32[BANK0 ] unsigned char 
 20577 ;; Return value:  Size  Location     Type
 20578 ;;                  1    wreg      void 
 20579 ;; Registers used:
 20580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20581 ;; Tracked objects:
 20582 ;;		On entry : 0/0
 20583 ;;		On exit  : 0/0
 20584 ;;		Unchanged: 0/0
 20585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20586 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20587 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20589 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20590 ;;Total ram usage:       17 bytes
 20591 ;; Hardware stack levels used:    1
 20592 ;; Hardware stack levels required when called:   10
 20593 ;; This function calls:
 20594 ;;		_LCD_Word_Write
 20595 ;;		_Set_Addr_Window
 20596 ;;		___wmul
 20597 ;; This function is called by:
 20598 ;;		_Console_Render
 20599 ;; This function uses a non-reentrant model
 20600 ;;
 20601                           
 20602                           	psect	text115
 20603  014990                     __ptext115:
 20604                           	opt stack 0
 20605  014990                     _LCD_DrawField:
 20606                           	opt stack 18
 20607                           
 20608                           ;LCD.c: 396: UINT8 i = 0x00;
 20609                           
 20610                           ; BSR set to: 0
 20611                           ;incstack = 0
 20612  014990  0E00               	movlw	0
 20613  014992  0100               	movlb	0	; () banked
 20614  014994  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20615                           
 20616                           ; BSR set to: 0
 20617                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 20618  014996  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20619  014998  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 20620  01499A  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 20621                           
 20622                           ; BSR set to: 0
 20623                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 20624  01499C  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 20625  01499E  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 20626  0149A0  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 20627                           
 20628                           ; BSR set to: 0
 20629                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 20630  0149A2  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 20631  0149A6  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 20632  0149AA  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 20633  0149AE  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 20634  0149B2  EC31  F0AE         	call	___wmul	;wreg free
 20635  0149B6  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 20636  0149BA  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 20637                           
 20638                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 20639  0149BE  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 20640  0149C2  0100               	movlb	0	; () banked
 20641  0149C4  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 20642  0149C6  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20643  0149C8  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 20644  0149CA  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20645  0149CC  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20646  0149CE  EC09  F0A2         	call	_Set_Addr_Window
 20647                           
 20648                           ;LCD.c: 403: for(i = 0; i < count; i++)
 20649  0149D2  0E00               	movlw	0
 20650  0149D4  0100               	movlb	0	; () banked
 20651  0149D6  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20652  0149D8  D010               	goto	l183
 20653  0149DA                     
 20654                           ; BSR set to: 0
 20655                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 20656                           
 20657                           ; BSR set to: 0
 20658  0149DA  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20659  0149DC  0D02               	mullw	2
 20660  0149DE  50F3               	movf	prodl,w,c
 20661  0149E0  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 20662  0149E2  6ED9               	movwf	fsr2l,c
 20663  0149E4  50F4               	movf	prodh,w,c
 20664  0149E6  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 20665  0149E8  6EDA               	movwf	fsr2h,c
 20666  0149EA  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 20667  0149EE  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 20668  0149F2  EC18  F0AF         	call	_LCD_Word_Write	;wreg free
 20669  0149F6  0100               	movlb	0	; () banked
 20670  0149F8  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 20671  0149FA                     l183:
 20672                           
 20673                           ; BSR set to: 0
 20674                           
 20675                           ; BSR set to: 0
 20676  0149FA  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20677  0149FC  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 20678  0149FE  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 20679  014A00  517E               	movf	LCD_DrawField@count& (0+255),w,b
 20680  014A02  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 20681  014A04  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 20682  014A06  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 20683  014A08  B0D8               	btfsc	status,0,c
 20684  014A0A  0012               	return	
 20685  014A0C  D7E6               	goto	l184
 20686  014A0E                     __end_of_LCD_DrawField:
 20687                           	opt stack 0
 20688                           tosu	equ	0xFFF
 20689                           tosh	equ	0xFFE
 20690                           tosl	equ	0xFFD
 20691                           pclath	equ	0xFFA
 20692                           tblptru	equ	0xFF8
 20693                           tblptrh	equ	0xFF7
 20694                           tblptrl	equ	0xFF6
 20695                           tablat	equ	0xFF5
 20696                           prodh	equ	0xFF4
 20697                           prodl	equ	0xFF3
 20698                           intcon	equ	0xFF2
 20699                           indf0	equ	0xFEF
 20700                           postinc0	equ	0xFEE
 20701                           fsr0h	equ	0xFEA
 20702                           fsr0l	equ	0xFE9
 20703                           wreg	equ	0xFE8
 20704                           indf1	equ	0xFE7
 20705                           postdec1	equ	0xFE5
 20706                           fsr1h	equ	0xFE2
 20707                           fsr1l	equ	0xFE1
 20708                           indf2	equ	0xFDF
 20709                           postinc2	equ	0xFDE
 20710                           postdec2	equ	0xFDD
 20711                           plusw2	equ	0xFDB
 20712                           fsr2h	equ	0xFDA
 20713                           fsr2l	equ	0xFD9
 20714                           status	equ	0xFD8
 20715                           
 20716 ;; *************** function _Set_Addr_Window *****************
 20717 ;; Defined at:
 20718 ;;		line 214 in file "Library/LCD.c"
 20719 ;; Parameters:    Size  Location     Type
 20720 ;;  xs              1    wreg     unsigned char 
 20721 ;;  ys              1    5[BANK0 ] unsigned char 
 20722 ;;  xe              1    6[BANK0 ] unsigned char 
 20723 ;;  ye              1    7[BANK0 ] unsigned char 
 20724 ;; Auto vars:     Size  Location     Type
 20725 ;;  xs              1    8[BANK0 ] unsigned char 
 20726 ;; Return value:  Size  Location     Type
 20727 ;;                  1    wreg      void 
 20728 ;; Registers used:
 20729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20730 ;; Tracked objects:
 20731 ;;		On entry : 0/0
 20732 ;;		On exit  : 0/0
 20733 ;;		Unchanged: 0/0
 20734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20735 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20738 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20739 ;;Total ram usage:        4 bytes
 20740 ;; Hardware stack levels used:    1
 20741 ;; Hardware stack levels required when called:    9
 20742 ;; This function calls:
 20743 ;;		_LCD_Write
 20744 ;; This function is called by:
 20745 ;;		_LCD_Fill
 20746 ;;		_LCD_FillRectangle
 20747 ;;		_LCD_DrawField
 20748 ;;		_RAM_Address_Set
 20749 ;;		_LCD_DrawPixel
 20750 ;; This function uses a non-reentrant model
 20751 ;;
 20752                           
 20753                           	psect	text116
 20754  014412                     __ptext116:
 20755                           	opt stack 0
 20756  014412                     _Set_Addr_Window:
 20757                           	opt stack 18
 20758                           
 20759                           ; BSR set to: 0
 20760                           ;incstack = 0
 20761                           ;Set_Addr_Window@xs stored from wreg
 20762  014412  0100               	movlb	0	; () banked
 20763  014414  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20764                           
 20765                           ;LCD.c: 216: ys+=2;
 20766  014416  0E02               	movlw	2
 20767  014418  0100               	movlb	0	; () banked
 20768  01441A  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20769                           
 20770                           ;LCD.c: 217: ye+=2;
 20771  01441C  0E02               	movlw	2
 20772  01441E  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20773                           
 20774                           ;LCD.c: 218: xs+=3;
 20775  014420  0E03               	movlw	3
 20776  014422  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20777                           
 20778                           ;LCD.c: 219: xe+=3;
 20779  014424  0E03               	movlw	3
 20780  014426  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20781                           
 20782                           ; BSR set to: 0
 20783                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20784  014428  0E00               	movlw	0
 20785  01442A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20786  01442C  0E2A               	movlw	42
 20787  01442E  ECC3  F0AE         	call	_LCD_Write
 20788                           
 20789                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20790  014432  0E01               	movlw	1
 20791  014434  0100               	movlb	0	; () banked
 20792  014436  6F63               	movwf	LCD_Write@mode& (0+255),b
 20793  014438  0E00               	movlw	0
 20794  01443A  ECC3  F0AE         	call	_LCD_Write
 20795                           
 20796                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20797  01443E  0E01               	movlw	1
 20798  014440  0100               	movlb	0	; () banked
 20799  014442  6F63               	movwf	LCD_Write@mode& (0+255),b
 20800  014444  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20801  014446  ECC3  F0AE         	call	_LCD_Write
 20802                           
 20803                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20804  01444A  0E01               	movlw	1
 20805  01444C  0100               	movlb	0	; () banked
 20806  01444E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20807  014450  0E00               	movlw	0
 20808  014452  ECC3  F0AE         	call	_LCD_Write
 20809                           
 20810                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20811  014456  0E01               	movlw	1
 20812  014458  0100               	movlb	0	; () banked
 20813  01445A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20814  01445C  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20815  01445E  ECC3  F0AE         	call	_LCD_Write
 20816                           
 20817                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20818  014462  0E00               	movlw	0
 20819  014464  0100               	movlb	0	; () banked
 20820  014466  6F63               	movwf	LCD_Write@mode& (0+255),b
 20821  014468  0E2B               	movlw	43
 20822  01446A  ECC3  F0AE         	call	_LCD_Write
 20823                           
 20824                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20825  01446E  0E01               	movlw	1
 20826  014470  0100               	movlb	0	; () banked
 20827  014472  6F63               	movwf	LCD_Write@mode& (0+255),b
 20828  014474  0E00               	movlw	0
 20829  014476  ECC3  F0AE         	call	_LCD_Write
 20830                           
 20831                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20832  01447A  0E01               	movlw	1
 20833  01447C  0100               	movlb	0	; () banked
 20834  01447E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20835  014480  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20836  014482  ECC3  F0AE         	call	_LCD_Write
 20837                           
 20838                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20839  014486  0E01               	movlw	1
 20840  014488  0100               	movlb	0	; () banked
 20841  01448A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20842  01448C  0E00               	movlw	0
 20843  01448E  ECC3  F0AE         	call	_LCD_Write
 20844                           
 20845                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20846  014492  0E01               	movlw	1
 20847  014494  0100               	movlb	0	; () banked
 20848  014496  6F63               	movwf	LCD_Write@mode& (0+255),b
 20849  014498  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20850  01449A  ECC3  F0AE         	call	_LCD_Write
 20851                           
 20852                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20853  01449E  0E00               	movlw	0
 20854  0144A0  0100               	movlb	0	; () banked
 20855  0144A2  6F63               	movwf	LCD_Write@mode& (0+255),b
 20856  0144A4  0E2C               	movlw	44
 20857  0144A6  ECC3  F0AE         	call	_LCD_Write
 20858  0144AA  0012               	return		;funcret
 20859  0144AC                     __end_of_Set_Addr_Window:
 20860                           	opt stack 0
 20861                           tosu	equ	0xFFF
 20862                           tosh	equ	0xFFE
 20863                           tosl	equ	0xFFD
 20864                           pclath	equ	0xFFA
 20865                           tblptru	equ	0xFF8
 20866                           tblptrh	equ	0xFF7
 20867                           tblptrl	equ	0xFF6
 20868                           tablat	equ	0xFF5
 20869                           prodh	equ	0xFF4
 20870                           prodl	equ	0xFF3
 20871                           intcon	equ	0xFF2
 20872                           indf0	equ	0xFEF
 20873                           postinc0	equ	0xFEE
 20874                           fsr0h	equ	0xFEA
 20875                           fsr0l	equ	0xFE9
 20876                           wreg	equ	0xFE8
 20877                           indf1	equ	0xFE7
 20878                           postdec1	equ	0xFE5
 20879                           fsr1h	equ	0xFE2
 20880                           fsr1l	equ	0xFE1
 20881                           indf2	equ	0xFDF
 20882                           postinc2	equ	0xFDE
 20883                           postdec2	equ	0xFDD
 20884                           plusw2	equ	0xFDB
 20885                           fsr2h	equ	0xFDA
 20886                           fsr2l	equ	0xFD9
 20887                           status	equ	0xFD8
 20888                           
 20889 ;; *************** function _LCD_Word_Write *****************
 20890 ;; Defined at:
 20891 ;;		line 198 in file "Library/LCD.c"
 20892 ;; Parameters:    Size  Location     Type
 20893 ;;  value           2    5[BANK0 ] unsigned short 
 20894 ;; Auto vars:     Size  Location     Type
 20895 ;;		None
 20896 ;; Return value:  Size  Location     Type
 20897 ;;                  1    wreg      void 
 20898 ;; Registers used:
 20899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20900 ;; Tracked objects:
 20901 ;;		On entry : 0/0
 20902 ;;		On exit  : 0/0
 20903 ;;		Unchanged: 0/0
 20904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20909 ;;Total ram usage:        2 bytes
 20910 ;; Hardware stack levels used:    1
 20911 ;; Hardware stack levels required when called:    9
 20912 ;; This function calls:
 20913 ;;		_LCD_Write
 20914 ;; This function is called by:
 20915 ;;		_LCD_Fill
 20916 ;;		_LCD_FillRectangle
 20917 ;;		_LCD_DrawField
 20918 ;;		_LCD_DrawPixel
 20919 ;; This function uses a non-reentrant model
 20920 ;;
 20921                           
 20922                           	psect	text117
 20923  015E30                     __ptext117:
 20924                           	opt stack 0
 20925  015E30                     _LCD_Word_Write:
 20926                           	opt stack 18
 20927                           
 20928                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20929                           
 20930                           ;incstack = 0
 20931  015E30  0E01               	movlw	1
 20932  015E32  0100               	movlb	0	; () banked
 20933  015E34  6F63               	movwf	LCD_Write@mode& (0+255),b
 20934  015E36  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20935  015E38  ECC3  F0AE         	call	_LCD_Write
 20936                           
 20937                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20938  015E3C  0E01               	movlw	1
 20939  015E3E  0100               	movlb	0	; () banked
 20940  015E40  6F63               	movwf	LCD_Write@mode& (0+255),b
 20941  015E42  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 20942  015E44  ECC3  F0AE         	call	_LCD_Write
 20943  015E48  0012               	return		;funcret
 20944  015E4A                     __end_of_LCD_Word_Write:
 20945                           	opt stack 0
 20946                           tosu	equ	0xFFF
 20947                           tosh	equ	0xFFE
 20948                           tosl	equ	0xFFD
 20949                           pclath	equ	0xFFA
 20950                           tblptru	equ	0xFF8
 20951                           tblptrh	equ	0xFF7
 20952                           tblptrl	equ	0xFF6
 20953                           tablat	equ	0xFF5
 20954                           prodh	equ	0xFF4
 20955                           prodl	equ	0xFF3
 20956                           intcon	equ	0xFF2
 20957                           indf0	equ	0xFEF
 20958                           postinc0	equ	0xFEE
 20959                           fsr0h	equ	0xFEA
 20960                           fsr0l	equ	0xFE9
 20961                           wreg	equ	0xFE8
 20962                           indf1	equ	0xFE7
 20963                           postdec1	equ	0xFE5
 20964                           fsr1h	equ	0xFE2
 20965                           fsr1l	equ	0xFE1
 20966                           indf2	equ	0xFDF
 20967                           postinc2	equ	0xFDE
 20968                           postdec2	equ	0xFDD
 20969                           plusw2	equ	0xFDB
 20970                           fsr2h	equ	0xFDA
 20971                           fsr2l	equ	0xFD9
 20972                           status	equ	0xFD8
 20973                           
 20974 ;; *************** function _LCD_Write *****************
 20975 ;; Defined at:
 20976 ;;		line 67 in file "Library/LCD.c"
 20977 ;; Parameters:    Size  Location     Type
 20978 ;;  value           1    wreg     unsigned char 
 20979 ;;  mode            1    3[BANK0 ] enum E6761
 20980 ;; Auto vars:     Size  Location     Type
 20981 ;;  value           1    4[BANK0 ] unsigned char 
 20982 ;; Return value:  Size  Location     Type
 20983 ;;                  1    wreg      void 
 20984 ;; Registers used:
 20985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20986 ;; Tracked objects:
 20987 ;;		On entry : 0/0
 20988 ;;		On exit  : 0/0
 20989 ;;		Unchanged: 0/0
 20990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20991 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20994 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20995 ;;Total ram usage:        2 bytes
 20996 ;; Hardware stack levels used:    1
 20997 ;; Hardware stack levels required when called:    8
 20998 ;; This function calls:
 20999 ;;		_Mode_Set
 21000 ;;		_SPI_Send
 21001 ;; This function is called by:
 21002 ;;		_LCD_Init
 21003 ;;		_LCD_Word_Write
 21004 ;;		_Set_Addr_Window
 21005 ;;		_Set_Rotation
 21006 ;;		_LCD_WriteCMD
 21007 ;;		_LCD_WriteData
 21008 ;;		_LCD_Data_Write
 21009 ;;		_LCD_Data_Write_4k
 21010 ;;		_Invert_Display
 21011 ;; This function uses a non-reentrant model
 21012 ;;
 21013                           
 21014                           	psect	text118
 21015  015D86                     __ptext118:
 21016                           	opt stack 0
 21017  015D86                     _LCD_Write:
 21018                           	opt stack 18
 21019                           
 21020                           ;incstack = 0
 21021                           ;LCD_Write@value stored from wreg
 21022  015D86  0100               	movlb	0	; () banked
 21023  015D88  6F64               	movwf	LCD_Write@value& (0+255),b
 21024                           
 21025                           ;LCD.c: 89: Mode_Set(mode);
 21026  015D8A  0100               	movlb	0	; () banked
 21027  015D8C  5163               	movf	LCD_Write@mode& (0+255),w,b
 21028  015D8E  ECEB  F0AF         	call	_Mode_Set
 21029                           
 21030                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 21031  015D92  0E82               	movlw	low _SPI2
 21032  015D94  0100               	movlb	0	; () banked
 21033  015D96  6F60               	movwf	SPI_Send@pInput& (0+255),b
 21034  015D98  0E01               	movlw	high _SPI2
 21035  015D9A  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 21036  015D9C  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 21037  015DA0  ECDF  F0A6         	call	_SPI_Send	;wreg free
 21038  015DA4  0012               	return		;funcret
 21039  015DA6                     __end_of_LCD_Write:
 21040                           	opt stack 0
 21041                           tosu	equ	0xFFF
 21042                           tosh	equ	0xFFE
 21043                           tosl	equ	0xFFD
 21044                           pclath	equ	0xFFA
 21045                           tblptru	equ	0xFF8
 21046                           tblptrh	equ	0xFF7
 21047                           tblptrl	equ	0xFF6
 21048                           tablat	equ	0xFF5
 21049                           prodh	equ	0xFF4
 21050                           prodl	equ	0xFF3
 21051                           intcon	equ	0xFF2
 21052                           indf0	equ	0xFEF
 21053                           postinc0	equ	0xFEE
 21054                           fsr0h	equ	0xFEA
 21055                           fsr0l	equ	0xFE9
 21056                           wreg	equ	0xFE8
 21057                           indf1	equ	0xFE7
 21058                           postdec1	equ	0xFE5
 21059                           fsr1h	equ	0xFE2
 21060                           fsr1l	equ	0xFE1
 21061                           indf2	equ	0xFDF
 21062                           postinc2	equ	0xFDE
 21063                           postdec2	equ	0xFDD
 21064                           plusw2	equ	0xFDB
 21065                           fsr2h	equ	0xFDA
 21066                           fsr2l	equ	0xFD9
 21067                           status	equ	0xFD8
 21068                           
 21069 ;; *************** function _Mode_Set *****************
 21070 ;; Defined at:
 21071 ;;		line 40 in file "Library/LCD.c"
 21072 ;; Parameters:    Size  Location     Type
 21073 ;;  pMode           1    wreg     enum E6761
 21074 ;; Auto vars:     Size  Location     Type
 21075 ;;  pMode           1    0[BANK0 ] enum E6761
 21076 ;; Return value:  Size  Location     Type
 21077 ;;                  1    wreg      void 
 21078 ;; Registers used:
 21079 ;;		wreg
 21080 ;; Tracked objects:
 21081 ;;		On entry : 0/0
 21082 ;;		On exit  : 0/0
 21083 ;;		Unchanged: 0/0
 21084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21089 ;;Total ram usage:        1 bytes
 21090 ;; Hardware stack levels used:    1
 21091 ;; Hardware stack levels required when called:    7
 21092 ;; This function calls:
 21093 ;;		Nothing
 21094 ;; This function is called by:
 21095 ;;		_LCD_Write
 21096 ;; This function uses a non-reentrant model
 21097 ;;
 21098                           
 21099                           	psect	text119
 21100  015FD6                     __ptext119:
 21101                           	opt stack 0
 21102  015FD6                     _Mode_Set:
 21103                           	opt stack 18
 21104                           
 21105                           ;incstack = 0
 21106                           ;Mode_Set@pMode stored from wreg
 21107  015FD6  0100               	movlb	0	; () banked
 21108  015FD8  6F60               	movwf	Mode_Set@pMode& (0+255),b
 21109                           
 21110                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21111  015FDA  0100               	movlb	0	; () banked
 21112  015FDC  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 21113  015FDE  D002               	bra	u9595
 21114  015FE0  9E85               	bcf	3973,7,c	;volatile
 21115  015FE2  D001               	bra	u9596
 21116  015FE4                     u9595:
 21117  015FE4  8E85               	bsf	3973,7,c	;volatile
 21118  015FE6                     u9596:
 21119  015FE6  0012               	return		;funcret
 21120  015FE8                     __end_of_Mode_Set:
 21121                           	opt stack 0
 21122                           tosu	equ	0xFFF
 21123                           tosh	equ	0xFFE
 21124                           tosl	equ	0xFFD
 21125                           pclath	equ	0xFFA
 21126                           tblptru	equ	0xFF8
 21127                           tblptrh	equ	0xFF7
 21128                           tblptrl	equ	0xFF6
 21129                           tablat	equ	0xFF5
 21130                           prodh	equ	0xFF4
 21131                           prodl	equ	0xFF3
 21132                           intcon	equ	0xFF2
 21133                           indf0	equ	0xFEF
 21134                           postinc0	equ	0xFEE
 21135                           fsr0h	equ	0xFEA
 21136                           fsr0l	equ	0xFE9
 21137                           wreg	equ	0xFE8
 21138                           indf1	equ	0xFE7
 21139                           postdec1	equ	0xFE5
 21140                           fsr1h	equ	0xFE2
 21141                           fsr1l	equ	0xFE1
 21142                           indf2	equ	0xFDF
 21143                           postinc2	equ	0xFDE
 21144                           postdec2	equ	0xFDD
 21145                           plusw2	equ	0xFDB
 21146                           fsr2h	equ	0xFDA
 21147                           fsr2l	equ	0xFD9
 21148                           status	equ	0xFD8
 21149                           
 21150 ;; *************** function _Console_MakeField *****************
 21151 ;; Defined at:
 21152 ;;		line 435 in file "Library/Console.c"
 21153 ;; Parameters:    Size  Location     Type
 21154 ;;  pInput          1    wreg     unsigned char 
 21155 ;; Auto vars:     Size  Location     Type
 21156 ;;  pInput          1   11[BANK0 ] unsigned char 
 21157 ;;  y               1   17[BANK0 ] unsigned char 
 21158 ;;  x               1   16[BANK0 ] unsigned char 
 21159 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21160 ;;		 -> Font5x7(480), 
 21161 ;;  Index           2    9[BANK0 ] unsigned short 
 21162 ;; Return value:  Size  Location     Type
 21163 ;;                  2    5[BANK0 ] PTR unsigned short 
 21164 ;; Registers used:
 21165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21166 ;; Tracked objects:
 21167 ;;		On entry : 0/0
 21168 ;;		On exit  : 0/0
 21169 ;;		Unchanged: 0/0
 21170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21171 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21172 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21173 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21174 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21175 ;;Total ram usage:       13 bytes
 21176 ;; Hardware stack levels used:    1
 21177 ;; Hardware stack levels required when called:    8
 21178 ;; This function calls:
 21179 ;;		_Byte_GetBit
 21180 ;; This function is called by:
 21181 ;;		_Console_Render
 21182 ;; This function uses a non-reentrant model
 21183 ;;
 21184                           
 21185                           	psect	text120
 21186  014232                     __ptext120:
 21187                           	opt stack 0
 21188  014232                     _Console_MakeField:
 21189                           	opt stack 20
 21190                           
 21191                           ;incstack = 0
 21192                           ;Console_MakeField@pInput stored from wreg
 21193  014232  0100               	movlb	0	; () banked
 21194  014234  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 21195                           
 21196                           ;Console.c: 437: static Colour Fill[7][5];
 21197                           ;Console.c: 438: pInput -= 32;
 21198  014236  0E20               	movlw	32
 21199  014238  0100               	movlb	0	; () banked
 21200  01423A  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 21201                           
 21202                           ; BSR set to: 0
 21203                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 21204  01423C  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 21205  01423E  0D05               	mullw	5
 21206  014240  CFF3 F069          	movff	prodl,Console_MakeField@Index
 21207  014244  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 21208                           
 21209                           ; BSR set to: 0
 21210                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 21211  014248  0E43               	movlw	low _Font5x7
 21212  01424A  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 21213  01424C  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 21214  01424E  0EFC               	movlw	high _Font5x7
 21215  014250  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 21216  014252  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 21217                           
 21218                           ; BSR set to: 0
 21219                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 21220  014254  0E00               	movlw	0
 21221  014256  6F70               	movwf	Console_MakeField@x& (0+255),b
 21222  014258                     l14442:
 21223                           
 21224                           ; BSR set to: 0
 21225  014258  0E04               	movlw	4
 21226  01425A  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 21227  01425C  D001               	goto	l1077
 21228  01425E  D037               	goto	u11680
 21229  014260                     l1077:
 21230                           
 21231                           ; BSR set to: 0
 21232                           ;Console.c: 444: {
 21233                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 21234                           
 21235                           ; BSR set to: 0
 21236  014260  0E00               	movlw	0
 21237  014262  6F71               	movwf	Console_MakeField@y& (0+255),b
 21238  014264                     l14448:
 21239                           
 21240                           ; BSR set to: 0
 21241  014264  0E06               	movlw	6
 21242  014266  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 21243  014268  D001               	goto	l1079
 21244  01426A  D02D               	goto	u11670
 21245  01426C                     l1079:
 21246                           
 21247                           ; BSR set to: 0
 21248                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 21249                           
 21250                           ; BSR set to: 0
 21251  01426C  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 21252  014270  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 21253  014274  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 21254  014278  EC07  F0AE         	call	_Byte_GetBit	;wreg free
 21255  01427C  0900               	iorlw	0
 21256  01427E  A4D8               	btfss	status,2,c
 21257  014280  D005               	goto	l1082
 21258  014282  C035  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 21259  014286  C036  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 21260  01428A  D004               	goto	l1084
 21261  01428C                     l1082:
 21262  01428C  C1F3  F06E         	movff	_gForecolour,_Console_MakeField$10974
 21263  014290  C1F4  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 21264  014294                     l1084:
 21265  014294  0100               	movlb	0	; () banked
 21266  014296  5171               	movf	Console_MakeField@y& (0+255),w,b
 21267  014298  0D0A               	mullw	10
 21268  01429A  0E82               	movlw	low Console_MakeField@Fill
 21269  01429C  6F67               	movwf	??_Console_MakeField& (0+255),b
 21270  01429E  0E02               	movlw	high Console_MakeField@Fill
 21271  0142A0  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 21272  0142A2  50F3               	movf	prodl,w,c
 21273  0142A4  2767               	addwf	??_Console_MakeField& (0+255),f,b
 21274  0142A6  50F4               	movf	prodh,w,c
 21275  0142A8  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 21276  0142AA  5170               	movf	Console_MakeField@x& (0+255),w,b
 21277  0142AC  0D02               	mullw	2
 21278  0142AE  50F3               	movf	prodl,w,c
 21279  0142B0  2567               	addwf	??_Console_MakeField& (0+255),w,b
 21280  0142B2  6ED9               	movwf	fsr2l,c
 21281  0142B4  50F4               	movf	prodh,w,c
 21282  0142B6  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 21283  0142B8  6EDA               	movwf	fsr2h,c
 21284  0142BA  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 21285  0142BE  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 21286                           
 21287                           ; BSR set to: 0
 21288  0142C2  2B71               	incf	Console_MakeField@y& (0+255),f,b
 21289  0142C4  D7CF               	goto	l14448
 21290  0142C6                     u11670:
 21291                           
 21292                           ; BSR set to: 0
 21293                           ;Console.c: 447: Column += 1;
 21294                           
 21295                           ; BSR set to: 0
 21296  0142C6  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 21297  0142C8  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 21298  0142CA  2B70               	incf	Console_MakeField@x& (0+255),f,b
 21299  0142CC  D7C5               	goto	l14442
 21300  0142CE                     u11680:
 21301                           
 21302                           ; BSR set to: 0
 21303                           ;Console.c: 448: }
 21304                           ;Console.c: 449: return (ColourPtr)Fill;
 21305                           
 21306                           ; BSR set to: 0
 21307  0142CE  0E82               	movlw	low Console_MakeField@Fill
 21308  0142D0  6F65               	movwf	?_Console_MakeField& (0+255),b
 21309  0142D2  0E02               	movlw	high Console_MakeField@Fill
 21310  0142D4  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 21311  0142D6  0012               	return	
 21312  0142D8                     __end_of_Console_MakeField:
 21313                           	opt stack 0
 21314                           tosu	equ	0xFFF
 21315                           tosh	equ	0xFFE
 21316                           tosl	equ	0xFFD
 21317                           pclath	equ	0xFFA
 21318                           tblptru	equ	0xFF8
 21319                           tblptrh	equ	0xFF7
 21320                           tblptrl	equ	0xFF6
 21321                           tablat	equ	0xFF5
 21322                           prodh	equ	0xFF4
 21323                           prodl	equ	0xFF3
 21324                           intcon	equ	0xFF2
 21325                           indf0	equ	0xFEF
 21326                           postinc0	equ	0xFEE
 21327                           fsr0h	equ	0xFEA
 21328                           fsr0l	equ	0xFE9
 21329                           wreg	equ	0xFE8
 21330                           indf1	equ	0xFE7
 21331                           postdec1	equ	0xFE5
 21332                           fsr1h	equ	0xFE2
 21333                           fsr1l	equ	0xFE1
 21334                           indf2	equ	0xFDF
 21335                           postinc2	equ	0xFDE
 21336                           postdec2	equ	0xFDD
 21337                           plusw2	equ	0xFDB
 21338                           fsr2h	equ	0xFDA
 21339                           fsr2l	equ	0xFD9
 21340                           status	equ	0xFD8
 21341                           
 21342 ;; *************** function _Byte_GetBit *****************
 21343 ;; Defined at:
 21344 ;;		line 38 in file "Library/Types.c"
 21345 ;; Parameters:    Size  Location     Type
 21346 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21347 ;;		 -> Font5x7(480), 
 21348 ;;  pBit            1    2[BANK0 ] unsigned char 
 21349 ;; Auto vars:     Size  Location     Type
 21350 ;;  Output          1    4[BANK0 ] unsigned char 
 21351 ;; Return value:  Size  Location     Type
 21352 ;;                  1    wreg      unsigned char 
 21353 ;; Registers used:
 21354 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 21355 ;; Tracked objects:
 21356 ;;		On entry : 0/0
 21357 ;;		On exit  : 0/0
 21358 ;;		Unchanged: 0/0
 21359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21360 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21363 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21364 ;;Total ram usage:        5 bytes
 21365 ;; Hardware stack levels used:    1
 21366 ;; Hardware stack levels required when called:    7
 21367 ;; This function calls:
 21368 ;;		Nothing
 21369 ;; This function is called by:
 21370 ;;		_Console_MakeField
 21371 ;;		_Word_GetBit
 21372 ;; This function uses a non-reentrant model
 21373 ;;
 21374                           
 21375                           	psect	text121
 21376  015C0E                     __ptext121:
 21377                           	opt stack 0
 21378  015C0E                     _Byte_GetBit:
 21379                           	opt stack 20
 21380                           
 21381                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 21382                           
 21383                           ; BSR set to: 0
 21384                           ;incstack = 0
 21385  015C0E  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 21386  015C12  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 21387  015C16                     	if	0	;tblptru may be non-zero
 21388  015C16                     	endif
 21389  015C16                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21390  015C16  0E00               	movlw	low (__mediumconst shr (0+16))
 21391  015C18  6EF8               	movwf	tblptru,c
 21392  015C1A                     	endif
 21393  015C1A  0008               	tblrd		*
 21394  015C1C  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 21395                           
 21396                           ;Types.c: 42: Output >>= pBit;
 21397  015C20  0100               	movlb	0	; () banked
 21398  015C22  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 21399  015C24  6F63               	movwf	??_Byte_GetBit& (0+255),b
 21400  015C26  D002               	goto	u11250
 21401  015C28                     u11255:
 21402  015C28  90D8               	bcf	status,0,c
 21403  015C2A  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 21404  015C2C                     u11250:
 21405  015C2C  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 21406  015C2E  D7FC               	goto	u11255
 21407                           
 21408                           ;Types.c: 43: Output &= 1;
 21409  015C30  0E01               	movlw	1
 21410  015C32  0100               	movlb	0	; () banked
 21411  015C34  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 21412                           
 21413                           ; BSR set to: 0
 21414                           ;Types.c: 44: return Output;
 21415  015C36  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 21416  015C38  0012               	return	
 21417  015C3A                     __end_of_Byte_GetBit:
 21418                           	opt stack 0
 21419                           tosu	equ	0xFFF
 21420                           tosh	equ	0xFFE
 21421                           tosl	equ	0xFFD
 21422                           pclath	equ	0xFFA
 21423                           tblptru	equ	0xFF8
 21424                           tblptrh	equ	0xFF7
 21425                           tblptrl	equ	0xFF6
 21426                           tablat	equ	0xFF5
 21427                           prodh	equ	0xFF4
 21428                           prodl	equ	0xFF3
 21429                           intcon	equ	0xFF2
 21430                           indf0	equ	0xFEF
 21431                           postinc0	equ	0xFEE
 21432                           fsr0h	equ	0xFEA
 21433                           fsr0l	equ	0xFE9
 21434                           wreg	equ	0xFE8
 21435                           indf1	equ	0xFE7
 21436                           postdec1	equ	0xFE5
 21437                           fsr1h	equ	0xFE2
 21438                           fsr1l	equ	0xFE1
 21439                           indf2	equ	0xFDF
 21440                           postinc2	equ	0xFDE
 21441                           postdec2	equ	0xFDD
 21442                           plusw2	equ	0xFDB
 21443                           fsr2h	equ	0xFDA
 21444                           fsr2l	equ	0xFD9
 21445                           status	equ	0xFD8
 21446                           
 21447 ;; *************** function _ADCAverage *****************
 21448 ;; Defined at:
 21449 ;;		line 106 in file "main.c"
 21450 ;; Parameters:    Size  Location     Type
 21451 ;;		None
 21452 ;; Auto vars:     Size  Location     Type
 21453 ;;		None
 21454 ;; Return value:  Size  Location     Type
 21455 ;;                  2  2130[None  ] int 
 21456 ;; Registers used:
 21457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21458 ;; Tracked objects:
 21459 ;;		On entry : 0/0
 21460 ;;		On exit  : 0/0
 21461 ;;		Unchanged: 0/0
 21462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21464 ;;      Locals:         0       0       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21466 ;;      Totals:         0       2       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21467 ;;Total ram usage:       26 bytes
 21468 ;; Hardware stack levels used:    1
 21469 ;; Hardware stack levels required when called:   11
 21470 ;; This function calls:
 21471 ;;		_FunctReadADC
 21472 ;;		_HMI_Render
 21473 ;;		_HMI_SetNumber
 21474 ;;		___awdiv
 21475 ;;		___fladd
 21476 ;;		___flmul
 21477 ;;		___flneg
 21478 ;;		___fltol
 21479 ;;		___wmul
 21480 ;;		___xxtofl
 21481 ;;		_pow
 21482 ;; This function is called by:
 21483 ;;		_Sensor_Observe2
 21484 ;;		_Closest_Object2
 21485 ;;		_Sensor_Observe
 21486 ;;		_Closest_Object
 21487 ;;		_main
 21488 ;; This function uses a non-reentrant model
 21489 ;;
 21490                           
 21491                           	psect	text122
 21492  0111C2                     __ptext122:
 21493                           	opt stack 0
 21494  0111C2                     _ADCAverage:
 21495                           	opt stack 18
 21496                           
 21497                           ;main.c: 108: total = total - readings[readIndex];
 21498                           
 21499                           ; BSR set to: 0
 21500                           ;incstack = 0
 21501  0111C2  90D8               	bcf	status,0,c
 21502  0111C4  3429               	rlcf	_readIndex,w,c
 21503  0111C6  6ED9               	movwf	fsr2l,c
 21504  0111C8  342A               	rlcf	_readIndex+1,w,c
 21505  0111CA  6EDA               	movwf	fsr2h,c
 21506  0111CC  0E00               	movlw	low _readings
 21507  0111CE  26D9               	addwf	fsr2l,f,c
 21508  0111D0  0E02               	movlw	high _readings
 21509  0111D2  22DA               	addwfc	fsr2h,f,c
 21510  0111D4  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21511  0111D8  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21512  0111DC  0100               	movlb	0	; () banked
 21513  0111DE  1FD7               	comf	??_ADCAverage& (0+255),f,b
 21514  0111E0  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 21515  0111E2  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 21516  0111E4  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 21517  0111E6  0101               	movlb	1	; () banked
 21518  0111E8  5122               	movf	_total& (0+255),w,b
 21519  0111EA  0100               	movlb	0	; () banked
 21520  0111EC  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21521  0111EE  0101               	movlb	1	; () banked
 21522  0111F0  6F22               	movwf	_total& (0+255),b
 21523  0111F2  5123               	movf	(_total+1)& (0+255),w,b
 21524  0111F4  0100               	movlb	0	; () banked
 21525  0111F6  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21526  0111F8  0101               	movlb	1	; () banked
 21527  0111FA  6F23               	movwf	(_total+1)& (0+255),b
 21528                           
 21529                           ; BSR set to: 1
 21530                           ;main.c: 110: readings[readIndex] = (FunctReadADC(0));
 21531  0111FC  0E00               	movlw	0
 21532  0111FE  0100               	movlb	0	; () banked
 21533  011200  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 21534  011202  0E00               	movlw	0
 21535  011204  6F60               	movwf	FunctReadADC@channel& (0+255),b
 21536  011206  EC4D  F0AC         	call	_FunctReadADC	;wreg free
 21537  01120A  90D8               	bcf	status,0,c
 21538  01120C  3429               	rlcf	_readIndex,w,c
 21539  01120E  6ED9               	movwf	fsr2l,c
 21540  011210  342A               	rlcf	_readIndex+1,w,c
 21541  011212  6EDA               	movwf	fsr2h,c
 21542  011214  0E00               	movlw	low _readings
 21543  011216  26D9               	addwf	fsr2l,f,c
 21544  011218  0E02               	movlw	high _readings
 21545  01121A  22DA               	addwfc	fsr2h,f,c
 21546  01121C  0100               	movlb	0	; () banked
 21547  01121E  C060  FFDE         	movff	?_FunctReadADC,postinc2
 21548  011222  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 21549                           
 21550                           ; BSR set to: 0
 21551                           ;main.c: 112: total = total + readings[readIndex];
 21552  011226  90D8               	bcf	status,0,c
 21553  011228  3429               	rlcf	_readIndex,w,c
 21554  01122A  6ED9               	movwf	fsr2l,c
 21555  01122C  342A               	rlcf	_readIndex+1,w,c
 21556  01122E  6EDA               	movwf	fsr2h,c
 21557  011230  0E00               	movlw	low _readings
 21558  011232  26D9               	addwf	fsr2l,f,c
 21559  011234  0E02               	movlw	high _readings
 21560  011236  22DA               	addwfc	fsr2h,f,c
 21561  011238  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21562  01123C  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21563  011240  0101               	movlb	1	; () banked
 21564  011242  5122               	movf	_total& (0+255),w,b
 21565  011244  0100               	movlb	0	; () banked
 21566  011246  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21567  011248  0101               	movlb	1	; () banked
 21568  01124A  6F22               	movwf	_total& (0+255),b
 21569  01124C  5123               	movf	(_total+1)& (0+255),w,b
 21570  01124E  0100               	movlb	0	; () banked
 21571  011250  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21572  011252  0101               	movlb	1	; () banked
 21573  011254  6F23               	movwf	(_total+1)& (0+255),b
 21574                           
 21575                           ; BSR set to: 1
 21576                           ;main.c: 114: readIndex++;
 21577  011256  4A29               	infsnz	_readIndex,f,c
 21578  011258  2A2A               	incf	_readIndex+1,f,c
 21579                           
 21580                           ; BSR set to: 1
 21581                           ;main.c: 116: if (readIndex >= numReadings) {
 21582  01125A  51F1               	movf	_numReadings& (0+255),w,b
 21583  01125C  5C29               	subwf	_readIndex,w,c
 21584  01125E  502A               	movf	_readIndex+1,w,c
 21585  011260  0A80               	xorlw	128
 21586  011262  0100               	movlb	0	; () banked
 21587  011264  6FD7               	movwf	??_ADCAverage& (0+255),b
 21588  011266  0101               	movlb	1	; () banked
 21589  011268  51F2               	movf	(_numReadings+1)& (0+255),w,b
 21590  01126A  0A80               	xorlw	128
 21591  01126C  0100               	movlb	0	; () banked
 21592  01126E  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 21593  011270  A0D8               	btfss	status,0,c
 21594  011272  D004               	goto	l2131
 21595                           
 21596                           ; BSR set to: 0
 21597                           ;main.c: 118: readIndex = 0;
 21598  011274  0E00               	movlw	0
 21599  011276  6E2A               	movwf	_readIndex+1,c
 21600  011278  0E00               	movlw	0
 21601  01127A  6E29               	movwf	_readIndex,c
 21602  01127C                     l2131:
 21603                           
 21604                           ; BSR set to: 0
 21605                           ;main.c: 119: }
 21606                           ;main.c: 121: average = total / numReadings;
 21607                           
 21608                           ; BSR set to: 0
 21609  01127C  C122  F060         	movff	_total,___awdiv@dividend
 21610  011280  C123  F061         	movff	_total+1,___awdiv@dividend+1
 21611  011284  C1F1  F062         	movff	_numReadings,___awdiv@divisor
 21612  011288  C1F2  F063         	movff	_numReadings+1,___awdiv@divisor+1
 21613  01128C  EC43  F0A4         	call	___awdiv	;wreg free
 21614  011290  C060  F0E9         	movff	?___awdiv,_average
 21615  011294  C061  F0EA         	movff	?___awdiv+1,_average+1
 21616                           
 21617                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21618  011298  C0E9  F060         	movff	_average,___xxtofl@val
 21619  01129C  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21620  0112A0  0100               	movlb	0	; () banked
 21621  0112A2  0E00               	movlw	0
 21622  0112A4  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21623  0112A6  0EFF               	movlw	-1
 21624  0112A8  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21625  0112AA  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21626  0112AC  0E01               	movlw	1
 21627  0112AE  ECFF  F096         	call	___xxtofl
 21628  0112B2  C060  F300         	movff	?___xxtofl,_ADCAverage$15663
 21629  0112B6  C061  F301         	movff	?___xxtofl+1,_ADCAverage$15663+1
 21630  0112BA  C062  F302         	movff	?___xxtofl+2,_ADCAverage$15663+2
 21631  0112BE  C063  F303         	movff	?___xxtofl+3,_ADCAverage$15663+3
 21632                           
 21633                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21634  0112C2  0E00               	movlw	0
 21635  0112C4  0100               	movlb	0	; () banked
 21636  0112C6  6FC6               	movwf	pow@y& (0+255),b
 21637  0112C8  0E00               	movlw	0
 21638  0112CA  6FC7               	movwf	(pow@y+1)& (0+255),b
 21639  0112CC  0E00               	movlw	0
 21640  0112CE  6FC8               	movwf	(pow@y+2)& (0+255),b
 21641  0112D0  0E40               	movlw	64
 21642  0112D2  6FC9               	movwf	(pow@y+3)& (0+255),b
 21643  0112D4  C300  F0C2         	movff	_ADCAverage$15663,pow@x
 21644  0112D8  C301  F0C3         	movff	_ADCAverage$15663+1,pow@x+1
 21645  0112DC  C302  F0C4         	movff	_ADCAverage$15663+2,pow@x+2
 21646  0112E0  C303  F0C5         	movff	_ADCAverage$15663+3,pow@x+3
 21647  0112E4  EC9D  F090         	call	_pow	;wreg free
 21648  0112E8  C0C2  F304         	movff	?_pow,_ADCAverage$15664
 21649  0112EC  C0C3  F305         	movff	?_pow+1,_ADCAverage$15664+1
 21650  0112F0  C0C4  F306         	movff	?_pow+2,_ADCAverage$15664+2
 21651  0112F4  C0C5  F307         	movff	?_pow+3,_ADCAverage$15664+3
 21652                           
 21653                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21654  0112F8  C0E9  F060         	movff	_average,___xxtofl@val
 21655  0112FC  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21656  011300  0100               	movlb	0	; () banked
 21657  011302  0E00               	movlw	0
 21658  011304  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21659  011306  0EFF               	movlw	-1
 21660  011308  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21661  01130A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21662  01130C  0E01               	movlw	1
 21663  01130E  ECFF  F096         	call	___xxtofl
 21664  011312  C060  F308         	movff	?___xxtofl,_ADCAverage$15665
 21665  011316  C061  F309         	movff	?___xxtofl+1,_ADCAverage$15665+1
 21666  01131A  C062  F30A         	movff	?___xxtofl+2,_ADCAverage$15665+2
 21667  01131E  C063  F30B         	movff	?___xxtofl+3,_ADCAverage$15665+3
 21668                           
 21669                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21670  011322  0E00               	movlw	0
 21671  011324  0100               	movlb	0	; () banked
 21672  011326  6FC6               	movwf	pow@y& (0+255),b
 21673  011328  0E00               	movlw	0
 21674  01132A  6FC7               	movwf	(pow@y+1)& (0+255),b
 21675  01132C  0E40               	movlw	64
 21676  01132E  6FC8               	movwf	(pow@y+2)& (0+255),b
 21677  011330  0E40               	movlw	64
 21678  011332  6FC9               	movwf	(pow@y+3)& (0+255),b
 21679  011334  C308  F0C2         	movff	_ADCAverage$15665,pow@x
 21680  011338  C309  F0C3         	movff	_ADCAverage$15665+1,pow@x+1
 21681  01133C  C30A  F0C4         	movff	_ADCAverage$15665+2,pow@x+2
 21682  011340  C30B  F0C5         	movff	_ADCAverage$15665+3,pow@x+3
 21683  011344  EC9D  F090         	call	_pow	;wreg free
 21684  011348  C0C2  F30C         	movff	?_pow,_ADCAverage$15666
 21685  01134C  C0C3  F30D         	movff	?_pow+1,_ADCAverage$15666+1
 21686  011350  C0C4  F30E         	movff	?_pow+2,_ADCAverage$15666+2
 21687  011354  C0C5  F30F         	movff	?_pow+3,_ADCAverage$15666+3
 21688                           
 21689                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21690  011358  0EA6               	movlw	166
 21691  01135A  0100               	movlb	0	; () banked
 21692  01135C  6F72               	movwf	___flmul@a& (0+255),b
 21693  01135E  0E9B               	movlw	155
 21694  011360  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21695  011362  0EC4               	movlw	196
 21696  011364  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21697  011366  0E3A               	movlw	58
 21698  011368  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21699  01136A  C304  F06E         	movff	_ADCAverage$15664,___flmul@b
 21700  01136E  C305  F06F         	movff	_ADCAverage$15664+1,___flmul@b+1
 21701  011372  C306  F070         	movff	_ADCAverage$15664+2,___flmul@b+2
 21702  011376  C307  F071         	movff	_ADCAverage$15664+3,___flmul@b+3
 21703  01137A  EC99  F085         	call	___flmul	;wreg free
 21704  01137E  C06E  F08F         	movff	?___flmul,___fladd@a
 21705  011382  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 21706  011386  C070  F091         	movff	?___flmul+2,___fladd@a+2
 21707  01138A  C071  F092         	movff	?___flmul+3,___fladd@a+3
 21708  01138E  0E87               	movlw	135
 21709  011390  0100               	movlb	0	; () banked
 21710  011392  6F72               	movwf	___flmul@a& (0+255),b
 21711  011394  0E97               	movlw	151
 21712  011396  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21713  011398  0E71               	movlw	113
 21714  01139A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21715  01139C  0EB5               	movlw	181
 21716  01139E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21717  0113A0  C30C  F06E         	movff	_ADCAverage$15666,___flmul@b
 21718  0113A4  C30D  F06F         	movff	_ADCAverage$15666+1,___flmul@b+1
 21719  0113A8  C30E  F070         	movff	_ADCAverage$15666+2,___flmul@b+2
 21720  0113AC  C30F  F071         	movff	_ADCAverage$15666+3,___flmul@b+3
 21721  0113B0  EC99  F085         	call	___flmul	;wreg free
 21722  0113B4  C06E  F08B         	movff	?___flmul,___fladd@b
 21723  0113B8  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 21724  0113BC  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 21725  0113C0  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 21726  0113C4  EC42  F087         	call	___fladd	;wreg free
 21727  0113C8  C08B  F310         	movff	?___fladd,_ADCAverage$15667
 21728  0113CC  C08C  F311         	movff	?___fladd+1,_ADCAverage$15667+1
 21729  0113D0  C08D  F312         	movff	?___fladd+2,_ADCAverage$15667+2
 21730  0113D4  C08E  F313         	movff	?___fladd+3,_ADCAverage$15667+3
 21731                           
 21732                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21733  0113D8  0E8C               	movlw	140
 21734  0113DA  0100               	movlb	0	; () banked
 21735  0113DC  6F72               	movwf	___flmul@a& (0+255),b
 21736  0113DE  0EB9               	movlw	185
 21737  0113E0  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21738  0113E2  0E6B               	movlw	107
 21739  0113E4  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21740  0113E6  0E3F               	movlw	63
 21741  0113E8  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21742  0113EA  C0E9  F060         	movff	_average,___xxtofl@val
 21743  0113EE  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21744  0113F2  0E00               	movlw	0
 21745  0113F4  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21746  0113F6  0EFF               	movlw	-1
 21747  0113F8  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21748  0113FA  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21749  0113FC  0E01               	movlw	1
 21750  0113FE  ECFF  F096         	call	___xxtofl
 21751  011402  C060  F06E         	movff	?___xxtofl,___flmul@b
 21752  011406  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 21753  01140A  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 21754  01140E  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 21755  011412  EC99  F085         	call	___flmul	;wreg free
 21756  011416  C06E  F087         	movff	?___flmul,___flneg@f1
 21757  01141A  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 21758  01141E  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 21759  011422  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 21760  011426  ECAA  F0AD         	call	___flneg	;wreg free
 21761  01142A  C087  F08F         	movff	?___flneg,___fladd@a
 21762  01142E  C088  F090         	movff	?___flneg+1,___fladd@a+1
 21763  011432  C089  F091         	movff	?___flneg+2,___fladd@a+2
 21764  011436  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 21765  01143A  C310  F08B         	movff	_ADCAverage$15667,___fladd@b
 21766  01143E  C311  F08C         	movff	_ADCAverage$15667+1,___fladd@b+1
 21767  011442  C312  F08D         	movff	_ADCAverage$15667+2,___fladd@b+2
 21768  011446  C313  F08E         	movff	_ADCAverage$15667+3,___fladd@b+3
 21769  01144A  EC42  F087         	call	___fladd	;wreg free
 21770  01144E  C08B  F314         	movff	?___fladd,_ADCAverage$15668
 21771  011452  C08C  F315         	movff	?___fladd+1,_ADCAverage$15668+1
 21772  011456  C08D  F316         	movff	?___fladd+2,_ADCAverage$15668+2
 21773  01145A  C08E  F317         	movff	?___fladd+3,_ADCAverage$15668+3
 21774                           
 21775                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21776  01145E  0E7B               	movlw	123
 21777  011460  0100               	movlb	0	; () banked
 21778  011462  6F8F               	movwf	___fladd@a& (0+255),b
 21779  011464  0E54               	movlw	84
 21780  011466  6F90               	movwf	(___fladd@a+1)& (0+255),b
 21781  011468  0E63               	movlw	99
 21782  01146A  6F91               	movwf	(___fladd@a+2)& (0+255),b
 21783  01146C  0E43               	movlw	67
 21784  01146E  6F92               	movwf	(___fladd@a+3)& (0+255),b
 21785  011470  C314  F08B         	movff	_ADCAverage$15668,___fladd@b
 21786  011474  C315  F08C         	movff	_ADCAverage$15668+1,___fladd@b+1
 21787  011478  C316  F08D         	movff	_ADCAverage$15668+2,___fladd@b+2
 21788  01147C  C317  F08E         	movff	_ADCAverage$15668+3,___fladd@b+3
 21789  011480  EC42  F087         	call	___fladd	;wreg free
 21790  011484  C08B  F09F         	movff	?___fladd,___fltol@f1
 21791  011488  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 21792  01148C  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 21793  011490  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 21794  011494  ECEF  F09E         	call	___fltol	;wreg free
 21795  011498  C09F  F0E9         	movff	?___fltol,_average
 21796  01149C  C0A0  F0EA         	movff	?___fltol+1,_average+1
 21797                           
 21798                           ;main.c: 124: average *= 10;
 21799  0114A0  C0E9  F060         	movff	_average,___wmul@multiplier
 21800  0114A4  C0EA  F061         	movff	_average+1,___wmul@multiplier+1
 21801  0114A8  0E00               	movlw	0
 21802  0114AA  0100               	movlb	0	; () banked
 21803  0114AC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21804  0114AE  0E0A               	movlw	10
 21805  0114B0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21806  0114B2  EC31  F0AE         	call	___wmul	;wreg free
 21807  0114B6  C060  F0E9         	movff	?___wmul,_average
 21808  0114BA  C061  F0EA         	movff	?___wmul+1,_average+1
 21809                           
 21810                           ;main.c: 126: HMI_SetNumber(average);
 21811  0114BE  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
 21812  0114C2  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 21813  0114C6  EC80  F0AE         	call	_HMI_SetNumber	;wreg free
 21814                           
 21815                           ;main.c: 127: HMI_Render();
 21816  0114CA  ECDE  F0AC         	call	_HMI_Render	;wreg free
 21817  0114CE  0012               	return	
 21818  0114D0                     __end_of_ADCAverage:
 21819                           	opt stack 0
 21820                           tosu	equ	0xFFF
 21821                           tosh	equ	0xFFE
 21822                           tosl	equ	0xFFD
 21823                           pclath	equ	0xFFA
 21824                           tblptru	equ	0xFF8
 21825                           tblptrh	equ	0xFF7
 21826                           tblptrl	equ	0xFF6
 21827                           tablat	equ	0xFF5
 21828                           prodh	equ	0xFF4
 21829                           prodl	equ	0xFF3
 21830                           intcon	equ	0xFF2
 21831                           indf0	equ	0xFEF
 21832                           postinc0	equ	0xFEE
 21833                           fsr0h	equ	0xFEA
 21834                           fsr0l	equ	0xFE9
 21835                           wreg	equ	0xFE8
 21836                           indf1	equ	0xFE7
 21837                           postdec1	equ	0xFE5
 21838                           fsr1h	equ	0xFE2
 21839                           fsr1l	equ	0xFE1
 21840                           indf2	equ	0xFDF
 21841                           postinc2	equ	0xFDE
 21842                           postdec2	equ	0xFDD
 21843                           plusw2	equ	0xFDB
 21844                           fsr2h	equ	0xFDA
 21845                           fsr2l	equ	0xFD9
 21846                           status	equ	0xFD8
 21847                           
 21848 ;; *************** function _pow *****************
 21849 ;; Defined at:
 21850 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 21851 ;; Parameters:    Size  Location     Type
 21852 ;;  x               4   98[BANK0 ] int 
 21853 ;;  y               4  102[BANK0 ] int 
 21854 ;; Auto vars:     Size  Location     Type
 21855 ;;  yi              4  115[BANK0 ] unsigned long 
 21856 ;;  sign            1  114[BANK0 ] unsigned char 
 21857 ;; Return value:  Size  Location     Type
 21858 ;;                  4   98[BANK0 ] unsigned char 
 21859 ;; Registers used:
 21860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21861 ;; Tracked objects:
 21862 ;;		On entry : 0/0
 21863 ;;		On exit  : 0/0
 21864 ;;		Unchanged: 0/0
 21865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21866 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21867 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21869 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21870 ;;Total ram usage:       21 bytes
 21871 ;; Hardware stack levels used:    1
 21872 ;; Hardware stack levels required when called:   10
 21873 ;; This function calls:
 21874 ;;		___flge
 21875 ;;		___flmul
 21876 ;;		___flneg
 21877 ;;		___fltol
 21878 ;;		___xxtofl
 21879 ;;		_exp
 21880 ;;		_log
 21881 ;; This function is called by:
 21882 ;;		_ADCAverage
 21883 ;; This function uses a non-reentrant model
 21884 ;;
 21885                           
 21886                           	psect	text123
 21887  01213A                     __ptext123:
 21888                           	opt stack 0
 21889  01213A                     _pow:
 21890                           	opt stack 18
 21891                           
 21892                           ;incstack = 0
 21893  01213A  0E00               	movlw	0
 21894  01213C  0100               	movlb	0	; () banked
 21895  01213E  6FD2               	movwf	pow@sign& (0+255),b
 21896                           
 21897                           ; BSR set to: 0
 21898  012140  51C2               	movf	pow@x& (0+255),w,b
 21899  012142  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 21900  012144  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 21901  012146  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 21902  012148  A4D8               	btfss	status,2,c
 21903  01214A  D024               	goto	l2739
 21904                           
 21905                           ; BSR set to: 0
 21906  01214C  0E00               	movlw	0
 21907  01214E  6F60               	movwf	___flge@ff1& (0+255),b
 21908  012150  0E00               	movlw	0
 21909  012152  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 21910  012154  0E00               	movlw	0
 21911  012156  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 21912  012158  0E00               	movlw	0
 21913  01215A  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 21914  01215C  C0C6  F064         	movff	pow@y,___flge@ff2
 21915  012160  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 21916  012164  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 21917  012168  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 21918  01216C  ECCD  F09A         	call	___flge	;wreg free
 21919  012170  0100               	movlb	0	; () banked
 21920  012172  A0D8               	btfss	status,0,c
 21921  012174  D005               	goto	l2740
 21922                           
 21923                           ; BSR set to: 0
 21924  012176  0E00               	movlw	0
 21925  012178  0101               	movlb	1	; () banked
 21926  01217A  6F1B               	movwf	(_errno+1)& (0+255),b
 21927  01217C  0E21               	movlw	33
 21928  01217E  6F1A               	movwf	_errno& (0+255),b
 21929  012180                     l2740:
 21930  012180  0E00               	movlw	0
 21931  012182  0100               	movlb	0	; () banked
 21932  012184  6FC2               	movwf	?_pow& (0+255),b
 21933  012186  0E00               	movlw	0
 21934  012188  6FC3               	movwf	(?_pow+1)& (0+255),b
 21935  01218A  0E00               	movlw	0
 21936  01218C  6FC4               	movwf	(?_pow+2)& (0+255),b
 21937  01218E  0E00               	movlw	0
 21938  012190  6FC5               	movwf	(?_pow+3)& (0+255),b
 21939                           
 21940                           ; BSR set to: 0
 21941  012192  0012               	return	
 21942  012194                     l2739:
 21943                           
 21944                           ; BSR set to: 0
 21945                           
 21946                           ; BSR set to: 0
 21947  012194  51C6               	movf	pow@y& (0+255),w,b
 21948  012196  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 21949  012198  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 21950  01219A  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 21951  01219C  A4D8               	btfss	status,2,c
 21952  01219E  D009               	goto	l2742
 21953                           
 21954                           ; BSR set to: 0
 21955  0121A0  0E00               	movlw	0
 21956  0121A2  6FC2               	movwf	?_pow& (0+255),b
 21957  0121A4  0E00               	movlw	0
 21958  0121A6  6FC3               	movwf	(?_pow+1)& (0+255),b
 21959  0121A8  0E80               	movlw	128
 21960  0121AA  6FC4               	movwf	(?_pow+2)& (0+255),b
 21961  0121AC  0E3F               	movlw	63
 21962  0121AE  6FC5               	movwf	(?_pow+3)& (0+255),b
 21963                           
 21964                           ; BSR set to: 0
 21965  0121B0  0012               	return	
 21966  0121B2                     l2742:
 21967                           
 21968                           ; BSR set to: 0
 21969                           
 21970                           ; BSR set to: 0
 21971  0121B2  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 21972  0121B4  D04F               	goto	l2743
 21973                           
 21974                           ; BSR set to: 0
 21975  0121B6  C0C6  F09F         	movff	pow@y,___fltol@f1
 21976  0121BA  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 21977  0121BE  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 21978  0121C2  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 21979  0121C6  ECEF  F09E         	call	___fltol	;wreg free
 21980  0121CA  C09F  F0D3         	movff	?___fltol,pow@yi
 21981  0121CE  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 21982  0121D2  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 21983  0121D6  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 21984  0121DA  C0D3  F060         	movff	pow@yi,___xxtofl@val
 21985  0121DE  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 21986  0121E2  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 21987  0121E6  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 21988  0121EA  0E00               	movlw	0
 21989  0121EC  ECFF  F096         	call	___xxtofl
 21990  0121F0  0100               	movlb	0	; () banked
 21991  0121F2  51C6               	movf	pow@y& (0+255),w,b
 21992  0121F4  1960               	xorwf	?___xxtofl& (0+255),w,b
 21993  0121F6  E10A               	bnz	u11810
 21994  0121F8  51C7               	movf	(pow@y+1)& (0+255),w,b
 21995  0121FA  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 21996  0121FC  E107               	bnz	u11810
 21997  0121FE  51C8               	movf	(pow@y+2)& (0+255),w,b
 21998  012200  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 21999  012202  E104               	bnz	u11810
 22000  012204  51C9               	movf	(pow@y+3)& (0+255),w,b
 22001  012206  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 22002  012208  B4D8               	btfsc	status,2,c
 22003  01220A  D00F               	goto	l2744
 22004  01220C                     u11810:
 22005                           
 22006                           ; BSR set to: 0
 22007  01220C  0E00               	movlw	0
 22008  01220E  0101               	movlb	1	; () banked
 22009  012210  6F1B               	movwf	(_errno+1)& (0+255),b
 22010  012212  0E21               	movlw	33
 22011  012214  6F1A               	movwf	_errno& (0+255),b
 22012  012216  0E00               	movlw	0
 22013  012218  0100               	movlb	0	; () banked
 22014  01221A  6FC2               	movwf	?_pow& (0+255),b
 22015  01221C  0E00               	movlw	0
 22016  01221E  6FC3               	movwf	(?_pow+1)& (0+255),b
 22017  012220  0E00               	movlw	0
 22018  012222  6FC4               	movwf	(?_pow+2)& (0+255),b
 22019  012224  0E00               	movlw	0
 22020  012226  6FC5               	movwf	(?_pow+3)& (0+255),b
 22021                           
 22022                           ; BSR set to: 0
 22023  012228  0012               	return	
 22024  01222A                     l2744:
 22025                           
 22026                           ; BSR set to: 0
 22027                           
 22028                           ; BSR set to: 0
 22029  01222A  51D3               	movf	pow@yi& (0+255),w,b
 22030  01222C  0B01               	andlw	1
 22031  01222E  6FD2               	movwf	pow@sign& (0+255),b
 22032                           
 22033                           ; BSR set to: 0
 22034  012230  C0C2  F087         	movff	pow@x,___flneg@f1
 22035  012234  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22036  012238  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22037  01223C  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22038  012240  ECAA  F0AD         	call	___flneg	;wreg free
 22039  012244  C087  F0C2         	movff	?___flneg,pow@x
 22040  012248  C088  F0C3         	movff	?___flneg+1,pow@x+1
 22041  01224C  C089  F0C4         	movff	?___flneg+2,pow@x+2
 22042  012250  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 22043  012254                     l2743:
 22044  012254  C0C2  F0AF         	movff	pow@x,log@x
 22045  012258  C0C3  F0B0         	movff	pow@x+1,log@x+1
 22046  01225C  C0C4  F0B1         	movff	pow@x+2,log@x+2
 22047  012260  C0C5  F0B2         	movff	pow@x+3,log@x+3
 22048  012264  EC91  F095         	call	_log	;wreg free
 22049  012268  C0AF  F0CA         	movff	?_log,_pow$15669
 22050  01226C  C0B0  F0CB         	movff	?_log+1,_pow$15669+1
 22051  012270  C0B1  F0CC         	movff	?_log+2,_pow$15669+2
 22052  012274  C0B2  F0CD         	movff	?_log+3,_pow$15669+3
 22053  012278  C0CA  F06E         	movff	_pow$15669,___flmul@b
 22054  01227C  C0CB  F06F         	movff	_pow$15669+1,___flmul@b+1
 22055  012280  C0CC  F070         	movff	_pow$15669+2,___flmul@b+2
 22056  012284  C0CD  F071         	movff	_pow$15669+3,___flmul@b+3
 22057  012288  C0C6  F072         	movff	pow@y,___flmul@a
 22058  01228C  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 22059  012290  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 22060  012294  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 22061  012298  EC99  F085         	call	___flmul	;wreg free
 22062  01229C  C06E  F0CE         	movff	?___flmul,_pow$15670
 22063  0122A0  C06F  F0CF         	movff	?___flmul+1,_pow$15670+1
 22064  0122A4  C070  F0D0         	movff	?___flmul+2,_pow$15670+2
 22065  0122A8  C071  F0D1         	movff	?___flmul+3,_pow$15670+3
 22066  0122AC  C0CE  F0B7         	movff	_pow$15670,exp@x
 22067  0122B0  C0CF  F0B8         	movff	_pow$15670+1,exp@x+1
 22068  0122B4  C0D0  F0B9         	movff	_pow$15670+2,exp@x+2
 22069  0122B8  C0D1  F0BA         	movff	_pow$15670+3,exp@x+3
 22070  0122BC  EC5A  F08E         	call	_exp	;wreg free
 22071  0122C0  C0B7  F0C2         	movff	?_exp,pow@x
 22072  0122C4  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 22073  0122C8  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 22074  0122CC  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 22075  0122D0  0100               	movlb	0	; () banked
 22076  0122D2  51D2               	movf	pow@sign& (0+255),w,b
 22077  0122D4  B4D8               	btfsc	status,2,c
 22078  0122D6  D013               	goto	l2745
 22079                           
 22080                           ; BSR set to: 0
 22081  0122D8  C0C2  F087         	movff	pow@x,___flneg@f1
 22082  0122DC  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22083  0122E0  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22084  0122E4  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22085  0122E8  ECAA  F0AD         	call	___flneg	;wreg free
 22086  0122EC  C087  F0C2         	movff	?___flneg,?_pow
 22087  0122F0  C088  F0C3         	movff	?___flneg+1,?_pow+1
 22088  0122F4  C089  F0C4         	movff	?___flneg+2,?_pow+2
 22089  0122F8  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 22090  0122FC  0012               	return	
 22091  0122FE                     l2745:
 22092                           
 22093                           ; BSR set to: 0
 22094  0122FE  C0C2  F0C2         	movff	pow@x,?_pow
 22095  012302  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 22096  012306  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 22097  01230A  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 22098  01230E  0012               	return		;funcret
 22099  012310                     __end_of_pow:
 22100                           	opt stack 0
 22101                           tosu	equ	0xFFF
 22102                           tosh	equ	0xFFE
 22103                           tosl	equ	0xFFD
 22104                           pclath	equ	0xFFA
 22105                           tblptru	equ	0xFF8
 22106                           tblptrh	equ	0xFF7
 22107                           tblptrl	equ	0xFF6
 22108                           tablat	equ	0xFF5
 22109                           prodh	equ	0xFF4
 22110                           prodl	equ	0xFF3
 22111                           intcon	equ	0xFF2
 22112                           indf0	equ	0xFEF
 22113                           postinc0	equ	0xFEE
 22114                           fsr0h	equ	0xFEA
 22115                           fsr0l	equ	0xFE9
 22116                           wreg	equ	0xFE8
 22117                           indf1	equ	0xFE7
 22118                           postdec1	equ	0xFE5
 22119                           fsr1h	equ	0xFE2
 22120                           fsr1l	equ	0xFE1
 22121                           indf2	equ	0xFDF
 22122                           postinc2	equ	0xFDE
 22123                           postdec2	equ	0xFDD
 22124                           plusw2	equ	0xFDB
 22125                           fsr2h	equ	0xFDA
 22126                           fsr2l	equ	0xFD9
 22127                           status	equ	0xFD8
 22128                           
 22129 ;; *************** function _log *****************
 22130 ;; Defined at:
 22131 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 22132 ;; Parameters:    Size  Location     Type
 22133 ;;  x               4   79[BANK0 ] unsigned char 
 22134 ;; Auto vars:     Size  Location     Type
 22135 ;;  exponent        2   83[BANK0 ] int 
 22136 ;; Return value:  Size  Location     Type
 22137 ;;                  4   79[BANK0 ] int 
 22138 ;; Registers used:
 22139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22140 ;; Tracked objects:
 22141 ;;		On entry : 0/0
 22142 ;;		On exit  : 0/0
 22143 ;;		Unchanged: 0/0
 22144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22145 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22148 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22149 ;;Total ram usage:        6 bytes
 22150 ;; Hardware stack levels used:    1
 22151 ;; Hardware stack levels required when called:    9
 22152 ;; This function calls:
 22153 ;;		___fladd
 22154 ;;		___flmul
 22155 ;;		___xxtofl
 22156 ;;		_eval_poly
 22157 ;;		_frexp
 22158 ;; This function is called by:
 22159 ;;		_pow
 22160 ;; This function uses a non-reentrant model
 22161 ;;
 22162                           
 22163                           	psect	text124
 22164  012B22                     __ptext124:
 22165                           	opt stack 0
 22166  012B22                     _log:
 22167                           	opt stack 18
 22168                           
 22169                           ;incstack = 0
 22170  012B22  0100               	movlb	0	; () banked
 22171  012B24  AFB2               	btfss	(log@x+3)& (0+255),7,b
 22172  012B26  D00F               	goto	l2941
 22173                           
 22174                           ; BSR set to: 0
 22175  012B28  0E00               	movlw	0
 22176  012B2A  0101               	movlb	1	; () banked
 22177  012B2C  6F1B               	movwf	(_errno+1)& (0+255),b
 22178  012B2E  0E21               	movlw	33
 22179  012B30  6F1A               	movwf	_errno& (0+255),b
 22180  012B32  0E00               	movlw	0
 22181  012B34  0100               	movlb	0	; () banked
 22182  012B36  6FAF               	movwf	?_log& (0+255),b
 22183  012B38  0E00               	movlw	0
 22184  012B3A  6FB0               	movwf	(?_log+1)& (0+255),b
 22185  012B3C  0E00               	movlw	0
 22186  012B3E  6FB1               	movwf	(?_log+2)& (0+255),b
 22187  012B40  0E00               	movlw	0
 22188  012B42  6FB2               	movwf	(?_log+3)& (0+255),b
 22189                           
 22190                           ; BSR set to: 0
 22191  012B44  0012               	return	
 22192  012B46                     l2941:
 22193                           
 22194                           ; BSR set to: 0
 22195                           
 22196                           ; BSR set to: 0
 22197  012B46  51AF               	movf	log@x& (0+255),w,b
 22198  012B48  11B0               	iorwf	(log@x+1)& (0+255),w,b
 22199  012B4A  11B1               	iorwf	(log@x+2)& (0+255),w,b
 22200  012B4C  11B2               	iorwf	(log@x+3)& (0+255),w,b
 22201  012B4E  A4D8               	btfss	status,2,c
 22202  012B50  D00F               	goto	l2943
 22203                           
 22204                           ; BSR set to: 0
 22205  012B52  0E00               	movlw	0
 22206  012B54  0101               	movlb	1	; () banked
 22207  012B56  6F1B               	movwf	(_errno+1)& (0+255),b
 22208  012B58  0E22               	movlw	34
 22209  012B5A  6F1A               	movwf	_errno& (0+255),b
 22210  012B5C  0E00               	movlw	0
 22211  012B5E  0100               	movlb	0	; () banked
 22212  012B60  6FAF               	movwf	?_log& (0+255),b
 22213  012B62  0E00               	movlw	0
 22214  012B64  6FB0               	movwf	(?_log+1)& (0+255),b
 22215  012B66  0E00               	movlw	0
 22216  012B68  6FB1               	movwf	(?_log+2)& (0+255),b
 22217  012B6A  0E00               	movlw	0
 22218  012B6C  6FB2               	movwf	(?_log+3)& (0+255),b
 22219                           
 22220                           ; BSR set to: 0
 22221  012B6E  0012               	return	
 22222  012B70                     l2943:
 22223                           
 22224                           ; BSR set to: 0
 22225                           
 22226                           ; BSR set to: 0
 22227  012B70  0E00               	movlw	0
 22228  012B72  6F72               	movwf	___flmul@a& (0+255),b
 22229  012B74  0E00               	movlw	0
 22230  012B76  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22231  012B78  0E00               	movlw	0
 22232  012B7A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22233  012B7C  0E40               	movlw	64
 22234  012B7E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22235  012B80  0EB3               	movlw	low log@exponent
 22236  012B82  6F64               	movwf	frexp@eptr& (0+255),b
 22237  012B84  0E00               	movlw	high log@exponent
 22238  012B86  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 22239  012B88  C0AF  F060         	movff	log@x,frexp@value
 22240  012B8C  C0B0  F061         	movff	log@x+1,frexp@value+1
 22241  012B90  C0B1  F062         	movff	log@x+2,frexp@value+2
 22242  012B94  C0B2  F063         	movff	log@x+3,frexp@value+3
 22243  012B98  EC6C  F0A1         	call	_frexp	;wreg free
 22244  012B9C  C060  F06E         	movff	?_frexp,___flmul@b
 22245  012BA0  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 22246  012BA4  C062  F070         	movff	?_frexp+2,___flmul@b+2
 22247  012BA8  C063  F071         	movff	?_frexp+3,___flmul@b+3
 22248  012BAC  EC99  F085         	call	___flmul	;wreg free
 22249  012BB0  C06E  F08B         	movff	?___flmul,___fladd@b
 22250  012BB4  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22251  012BB8  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22252  012BBC  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22253  012BC0  0E00               	movlw	0
 22254  012BC2  0100               	movlb	0	; () banked
 22255  012BC4  6F8F               	movwf	___fladd@a& (0+255),b
 22256  012BC6  0E00               	movlw	0
 22257  012BC8  6F90               	movwf	(___fladd@a+1)& (0+255),b
 22258  012BCA  0E80               	movlw	128
 22259  012BCC  6F91               	movwf	(___fladd@a+2)& (0+255),b
 22260  012BCE  0EBF               	movlw	191
 22261  012BD0  6F92               	movwf	(___fladd@a+3)& (0+255),b
 22262  012BD2  EC42  F087         	call	___fladd	;wreg free
 22263  012BD6  C08B  F0AF         	movff	?___fladd,log@x
 22264  012BDA  C08C  F0B0         	movff	?___fladd+1,log@x+1
 22265  012BDE  C08D  F0B1         	movff	?___fladd+2,log@x+2
 22266  012BE2  C08E  F0B2         	movff	?___fladd+3,log@x+3
 22267  012BE6  0100               	movlb	0	; () banked
 22268  012BE8  07B3               	decf	log@exponent& (0+255),f,b
 22269  012BEA  A0D8               	btfss	status,0,c
 22270  012BEC  07B4               	decf	(log@exponent+1)& (0+255),f,b
 22271                           
 22272                           ; BSR set to: 0
 22273  012BEE  C0AF  F09F         	movff	log@x,eval_poly@x
 22274  012BF2  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 22275  012BF6  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 22276  012BFA  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 22277  012BFE  0E4B               	movlw	low log@coeff
 22278  012C00  6FA3               	movwf	eval_poly@d& (0+255),b
 22279  012C02  0EFE               	movlw	high log@coeff
 22280  012C04  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22281  012C06  0E00               	movlw	0
 22282  012C08  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22283  012C0A  0E08               	movlw	8
 22284  012C0C  6FA5               	movwf	eval_poly@n& (0+255),b
 22285  012C0E  EC7D  F09D         	call	_eval_poly	;wreg free
 22286  012C12  C09F  F0AF         	movff	?_eval_poly,log@x
 22287  012C16  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 22288  012C1A  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 22289  012C1E  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 22290  012C22  0E18               	movlw	24
 22291  012C24  0100               	movlb	0	; () banked
 22292  012C26  6F72               	movwf	___flmul@a& (0+255),b
 22293  012C28  0E72               	movlw	114
 22294  012C2A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22295  012C2C  0E31               	movlw	49
 22296  012C2E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22297  012C30  0E3F               	movlw	63
 22298  012C32  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22299  012C34  C0B3  F060         	movff	log@exponent,___xxtofl@val
 22300  012C38  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 22301  012C3C  0E00               	movlw	0
 22302  012C3E  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22303  012C40  0EFF               	movlw	-1
 22304  012C42  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22305  012C44  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22306  012C46  0E01               	movlw	1
 22307  012C48  ECFF  F096         	call	___xxtofl
 22308  012C4C  C060  F06E         	movff	?___xxtofl,___flmul@b
 22309  012C50  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 22310  012C54  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 22311  012C58  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 22312  012C5C  EC99  F085         	call	___flmul	;wreg free
 22313  012C60  C06E  F08B         	movff	?___flmul,___fladd@b
 22314  012C64  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22315  012C68  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22316  012C6C  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22317  012C70  C0AF  F08F         	movff	log@x,___fladd@a
 22318  012C74  C0B0  F090         	movff	log@x+1,___fladd@a+1
 22319  012C78  C0B1  F091         	movff	log@x+2,___fladd@a+2
 22320  012C7C  C0B2  F092         	movff	log@x+3,___fladd@a+3
 22321  012C80  EC42  F087         	call	___fladd	;wreg free
 22322  012C84  C08B  F0AF         	movff	?___fladd,?_log
 22323  012C88  C08C  F0B0         	movff	?___fladd+1,?_log+1
 22324  012C8C  C08D  F0B1         	movff	?___fladd+2,?_log+2
 22325  012C90  C08E  F0B2         	movff	?___fladd+3,?_log+3
 22326  012C94  0012               	return	
 22327  012C96                     __end_of_log:
 22328                           	opt stack 0
 22329                           tosu	equ	0xFFF
 22330                           tosh	equ	0xFFE
 22331                           tosl	equ	0xFFD
 22332                           pclath	equ	0xFFA
 22333                           tblptru	equ	0xFF8
 22334                           tblptrh	equ	0xFF7
 22335                           tblptrl	equ	0xFF6
 22336                           tablat	equ	0xFF5
 22337                           prodh	equ	0xFF4
 22338                           prodl	equ	0xFF3
 22339                           intcon	equ	0xFF2
 22340                           indf0	equ	0xFEF
 22341                           postinc0	equ	0xFEE
 22342                           fsr0h	equ	0xFEA
 22343                           fsr0l	equ	0xFE9
 22344                           wreg	equ	0xFE8
 22345                           indf1	equ	0xFE7
 22346                           postdec1	equ	0xFE5
 22347                           fsr1h	equ	0xFE2
 22348                           fsr1l	equ	0xFE1
 22349                           indf2	equ	0xFDF
 22350                           postinc2	equ	0xFDE
 22351                           postdec2	equ	0xFDD
 22352                           plusw2	equ	0xFDB
 22353                           fsr2h	equ	0xFDA
 22354                           fsr2l	equ	0xFD9
 22355                           status	equ	0xFD8
 22356                           
 22357 ;; *************** function _exp *****************
 22358 ;; Defined at:
 22359 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 22360 ;; Parameters:    Size  Location     Type
 22361 ;;  x               4   87[BANK0 ] int 
 22362 ;; Auto vars:     Size  Location     Type
 22363 ;;  exponent        2   95[BANK0 ] int 
 22364 ;;  sign            1   97[BANK0 ] unsigned char 
 22365 ;; Return value:  Size  Location     Type
 22366 ;;                  4   87[BANK0 ] unsigned char 
 22367 ;; Registers used:
 22368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22369 ;; Tracked objects:
 22370 ;;		On entry : 0/0
 22371 ;;		On exit  : 0/0
 22372 ;;		Unchanged: 0/0
 22373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22375 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22377 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22378 ;;Total ram usage:       11 bytes
 22379 ;; Hardware stack levels used:    1
 22380 ;; Hardware stack levels required when called:    9
 22381 ;; This function calls:
 22382 ;;		___fldiv
 22383 ;;		___flge
 22384 ;;		___flmul
 22385 ;;		___flneg
 22386 ;;		___flsub
 22387 ;;		___fltol
 22388 ;;		___xxtofl
 22389 ;;		_eval_poly
 22390 ;;		_floor
 22391 ;;		_ldexp
 22392 ;; This function is called by:
 22393 ;;		_pow
 22394 ;; This function uses a non-reentrant model
 22395 ;;
 22396                           
 22397                           	psect	text125
 22398  011CB4                     __ptext125:
 22399                           	opt stack 0
 22400  011CB4                     _exp:
 22401                           	opt stack 18
 22402                           
 22403                           ;incstack = 0
 22404  011CB4  0100               	movlb	0	; () banked
 22405  011CB6  51B7               	movf	exp@x& (0+255),w,b
 22406  011CB8  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 22407  011CBA  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 22408  011CBC  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 22409  011CBE  A4D8               	btfss	status,2,c
 22410  011CC0  D009               	goto	l2899
 22411                           
 22412                           ; BSR set to: 0
 22413  011CC2  0E00               	movlw	0
 22414  011CC4  6FB7               	movwf	?_exp& (0+255),b
 22415  011CC6  0E00               	movlw	0
 22416  011CC8  6FB8               	movwf	(?_exp+1)& (0+255),b
 22417  011CCA  0E80               	movlw	128
 22418  011CCC  6FB9               	movwf	(?_exp+2)& (0+255),b
 22419  011CCE  0E3F               	movlw	63
 22420  011CD0  6FBA               	movwf	(?_exp+3)& (0+255),b
 22421                           
 22422                           ; BSR set to: 0
 22423  011CD2  0012               	return	
 22424  011CD4                     l2899:
 22425                           
 22426                           ; BSR set to: 0
 22427                           
 22428                           ; BSR set to: 0
 22429  011CD4  0E18               	movlw	24
 22430  011CD6  6F60               	movwf	___flge@ff1& (0+255),b
 22431  011CD8  0E72               	movlw	114
 22432  011CDA  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22433  011CDC  0E31               	movlw	49
 22434  011CDE  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22435  011CE0  0E44               	movlw	68
 22436  011CE2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22437  011CE4  C0B7  F064         	movff	exp@x,___flge@ff2
 22438  011CE8  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 22439  011CEC  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 22440  011CF0  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 22441  011CF4  ECCD  F09A         	call	___flge	;wreg free
 22442  011CF8  0100               	movlb	0	; () banked
 22443  011CFA  B0D8               	btfsc	status,0,c
 22444  011CFC  D00F               	goto	l2901
 22445                           
 22446                           ; BSR set to: 0
 22447  011CFE  0E00               	movlw	0
 22448  011D00  0101               	movlb	1	; () banked
 22449  011D02  6F1B               	movwf	(_errno+1)& (0+255),b
 22450  011D04  0E22               	movlw	34
 22451  011D06  6F1A               	movwf	_errno& (0+255),b
 22452  011D08  0EFF               	movlw	255
 22453  011D0A  0100               	movlb	0	; () banked
 22454  011D0C  6FB7               	movwf	?_exp& (0+255),b
 22455  011D0E  0EFF               	movlw	255
 22456  011D10  6FB8               	movwf	(?_exp+1)& (0+255),b
 22457  011D12  0E7F               	movlw	127
 22458  011D14  6FB9               	movwf	(?_exp+2)& (0+255),b
 22459  011D16  0E7F               	movlw	127
 22460  011D18  6FBA               	movwf	(?_exp+3)& (0+255),b
 22461                           
 22462                           ; BSR set to: 0
 22463  011D1A  0012               	return	
 22464  011D1C                     l2901:
 22465                           
 22466                           ; BSR set to: 0
 22467                           
 22468                           ; BSR set to: 0
 22469  011D1C  C0B7  F060         	movff	exp@x,___flge@ff1
 22470  011D20  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 22471  011D24  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 22472  011D28  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 22473  011D2C  0E87               	movlw	135
 22474  011D2E  6F64               	movwf	___flge@ff2& (0+255),b
 22475  011D30  0E48               	movlw	72
 22476  011D32  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22477  011D34  0E3A               	movlw	58
 22478  011D36  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22479  011D38  0EC4               	movlw	196
 22480  011D3A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22481  011D3C  ECCD  F09A         	call	___flge	;wreg free
 22482  011D40  0100               	movlb	0	; () banked
 22483  011D42  B0D8               	btfsc	status,0,c
 22484  011D44  D00F               	goto	l2902
 22485                           
 22486                           ; BSR set to: 0
 22487  011D46  0E00               	movlw	0
 22488  011D48  0101               	movlb	1	; () banked
 22489  011D4A  6F1B               	movwf	(_errno+1)& (0+255),b
 22490  011D4C  0E22               	movlw	34
 22491  011D4E  6F1A               	movwf	_errno& (0+255),b
 22492  011D50  0E00               	movlw	0
 22493  011D52  0100               	movlb	0	; () banked
 22494  011D54  6FB7               	movwf	?_exp& (0+255),b
 22495  011D56  0E00               	movlw	0
 22496  011D58  6FB8               	movwf	(?_exp+1)& (0+255),b
 22497  011D5A  0E00               	movlw	0
 22498  011D5C  6FB9               	movwf	(?_exp+2)& (0+255),b
 22499  011D5E  0E00               	movlw	0
 22500  011D60  6FBA               	movwf	(?_exp+3)& (0+255),b
 22501                           
 22502                           ; BSR set to: 0
 22503  011D62  0012               	return	
 22504  011D64                     l2902:
 22505                           
 22506                           ; BSR set to: 0
 22507                           
 22508                           ; BSR set to: 0
 22509  011D64  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 22510  011D66  D002               	goto	u11420
 22511  011D68  0E01               	movlw	1
 22512  011D6A  D001               	goto	u11430
 22513  011D6C                     u11420:
 22514  011D6C  0E00               	movlw	0
 22515  011D6E                     u11430:
 22516  011D6E  6FC1               	movwf	exp@sign& (0+255),b
 22517                           
 22518                           ; BSR set to: 0
 22519  011D70  51C1               	movf	exp@sign& (0+255),w,b
 22520  011D72  B4D8               	btfsc	status,2,c
 22521  011D74  D012               	goto	l2903
 22522                           
 22523                           ; BSR set to: 0
 22524  011D76  C0B7  F087         	movff	exp@x,___flneg@f1
 22525  011D7A  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 22526  011D7E  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 22527  011D82  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 22528  011D86  ECAA  F0AD         	call	___flneg	;wreg free
 22529  011D8A  C087  F0B7         	movff	?___flneg,exp@x
 22530  011D8E  C088  F0B8         	movff	?___flneg+1,exp@x+1
 22531  011D92  C089  F0B9         	movff	?___flneg+2,exp@x+2
 22532  011D96  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 22533  011D9A                     l2903:
 22534  011D9A  C0B7  F06E         	movff	exp@x,___flmul@b
 22535  011D9E  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 22536  011DA2  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 22537  011DA6  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 22538  011DAA  0E3B               	movlw	59
 22539  011DAC  0100               	movlb	0	; () banked
 22540  011DAE  6F72               	movwf	___flmul@a& (0+255),b
 22541  011DB0  0EAA               	movlw	170
 22542  011DB2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22543  011DB4  0EB8               	movlw	184
 22544  011DB6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22545  011DB8  0E3F               	movlw	63
 22546  011DBA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22547  011DBC  EC99  F085         	call	___flmul	;wreg free
 22548  011DC0  C06E  F0B7         	movff	?___flmul,exp@x
 22549  011DC4  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 22550  011DC8  C070  F0B9         	movff	?___flmul+2,exp@x+2
 22551  011DCC  C071  F0BA         	movff	?___flmul+3,exp@x+3
 22552  011DD0  C0B7  F0A9         	movff	exp@x,floor@x
 22553  011DD4  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 22554  011DD8  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 22555  011DDC  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 22556  011DE0  ECE9  F09B         	call	_floor	;wreg free
 22557  011DE4  C0A9  F0BB         	movff	?_floor,_exp$15671
 22558  011DE8  C0AA  F0BC         	movff	?_floor+1,_exp$15671+1
 22559  011DEC  C0AB  F0BD         	movff	?_floor+2,_exp$15671+2
 22560  011DF0  C0AC  F0BE         	movff	?_floor+3,_exp$15671+3
 22561  011DF4  C0BB  F09F         	movff	_exp$15671,___fltol@f1
 22562  011DF8  C0BC  F0A0         	movff	_exp$15671+1,___fltol@f1+1
 22563  011DFC  C0BD  F0A1         	movff	_exp$15671+2,___fltol@f1+2
 22564  011E00  C0BE  F0A2         	movff	_exp$15671+3,___fltol@f1+3
 22565  011E04  ECEF  F09E         	call	___fltol	;wreg free
 22566  011E08  C09F  F0BF         	movff	?___fltol,exp@exponent
 22567  011E0C  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 22568  011E10  C0B7  F09F         	movff	exp@x,___flsub@b
 22569  011E14  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 22570  011E18  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 22571  011E1C  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 22572  011E20  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 22573  011E24  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 22574  011E28  0100               	movlb	0	; () banked
 22575  011E2A  0E00               	movlw	0
 22576  011E2C  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22577  011E2E  0EFF               	movlw	-1
 22578  011E30  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22579  011E32  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22580  011E34  0E01               	movlw	1
 22581  011E36  ECFF  F096         	call	___xxtofl
 22582  011E3A  C060  F0A3         	movff	?___xxtofl,___flsub@a
 22583  011E3E  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 22584  011E42  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 22585  011E46  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 22586  011E4A  EC46  F0AB         	call	___flsub	;wreg free
 22587  011E4E  C09F  F0B7         	movff	?___flsub,exp@x
 22588  011E52  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 22589  011E56  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 22590  011E5A  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 22591  011E5E  C0B7  F09F         	movff	exp@x,eval_poly@x
 22592  011E62  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 22593  011E66  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 22594  011E6A  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 22595  011E6E  0E23               	movlw	low exp@coeff
 22596  011E70  0100               	movlb	0	; () banked
 22597  011E72  6FA3               	movwf	eval_poly@d& (0+255),b
 22598  011E74  0EFE               	movlw	high exp@coeff
 22599  011E76  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22600  011E78  0E00               	movlw	0
 22601  011E7A  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22602  011E7C  0E09               	movlw	9
 22603  011E7E  6FA5               	movwf	eval_poly@n& (0+255),b
 22604  011E80  EC7D  F09D         	call	_eval_poly	;wreg free
 22605  011E84  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 22606  011E88  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 22607  011E8C  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 22608  011E90  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 22609  011E94  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 22610  011E98  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 22611  011E9C  EC7D  F09E         	call	_ldexp	;wreg free
 22612  011EA0  C0AF  F0B7         	movff	?_ldexp,exp@x
 22613  011EA4  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 22614  011EA8  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 22615  011EAC  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 22616  011EB0  0100               	movlb	0	; () banked
 22617  011EB2  51C1               	movf	exp@sign& (0+255),w,b
 22618  011EB4  B4D8               	btfsc	status,2,c
 22619  011EB6  D02F               	goto	l2904
 22620                           
 22621                           ; BSR set to: 0
 22622  011EB8  29B7               	incf	exp@x& (0+255),w,b
 22623  011EBA  E112               	bnz	l14122
 22624  011EBC  29B8               	incf	(exp@x+1)& (0+255),w,b
 22625  011EBE  E110               	bnz	l14122
 22626  011EC0  0E7F               	movlw	127
 22627  011EC2  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 22628  011EC4  E10D               	bnz	l14122
 22629  011EC6  0E7F               	movlw	127
 22630  011EC8  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 22631  011ECA  A4D8               	btfss	status,2,c
 22632  011ECC  D009               	goto	l2905
 22633                           
 22634                           ; BSR set to: 0
 22635  011ECE  0E00               	movlw	0
 22636  011ED0  6FB7               	movwf	?_exp& (0+255),b
 22637  011ED2  0E00               	movlw	0
 22638  011ED4  6FB8               	movwf	(?_exp+1)& (0+255),b
 22639  011ED6  0E00               	movlw	0
 22640  011ED8  6FB9               	movwf	(?_exp+2)& (0+255),b
 22641  011EDA  0E00               	movlw	0
 22642  011EDC  6FBA               	movwf	(?_exp+3)& (0+255),b
 22643                           
 22644                           ; BSR set to: 0
 22645  011EDE  0012               	return	
 22646  011EE0                     l2905:
 22647  011EE0                     l14122:
 22648                           
 22649                           ; BSR set to: 0
 22650  011EE0  0E00               	movlw	0
 22651  011EE2  6F60               	movwf	___fldiv@b& (0+255),b
 22652  011EE4  0E00               	movlw	0
 22653  011EE6  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 22654  011EE8  0E80               	movlw	128
 22655  011EEA  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 22656  011EEC  0E3F               	movlw	63
 22657  011EEE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22658  011EF0  C0B7  F064         	movff	exp@x,___fldiv@a
 22659  011EF4  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 22660  011EF8  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 22661  011EFC  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 22662  011F00  EC68  F08A         	call	___fldiv	;wreg free
 22663  011F04  C060  F0B7         	movff	?___fldiv,?_exp
 22664  011F08  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 22665  011F0C  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 22666  011F10  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 22667  011F14  0012               	return	
 22668  011F16                     l2904:
 22669                           
 22670                           ; BSR set to: 0
 22671  011F16  C0B7  F0B7         	movff	exp@x,?_exp
 22672  011F1A  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 22673  011F1E  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 22674  011F22  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 22675  011F26  0012               	return		;funcret
 22676  011F28                     __end_of_exp:
 22677                           	opt stack 0
 22678                           tosu	equ	0xFFF
 22679                           tosh	equ	0xFFE
 22680                           tosl	equ	0xFFD
 22681                           pclath	equ	0xFFA
 22682                           tblptru	equ	0xFF8
 22683                           tblptrh	equ	0xFF7
 22684                           tblptrl	equ	0xFF6
 22685                           tablat	equ	0xFF5
 22686                           prodh	equ	0xFF4
 22687                           prodl	equ	0xFF3
 22688                           intcon	equ	0xFF2
 22689                           indf0	equ	0xFEF
 22690                           postinc0	equ	0xFEE
 22691                           fsr0h	equ	0xFEA
 22692                           fsr0l	equ	0xFE9
 22693                           wreg	equ	0xFE8
 22694                           indf1	equ	0xFE7
 22695                           postdec1	equ	0xFE5
 22696                           fsr1h	equ	0xFE2
 22697                           fsr1l	equ	0xFE1
 22698                           indf2	equ	0xFDF
 22699                           postinc2	equ	0xFDE
 22700                           postdec2	equ	0xFDD
 22701                           plusw2	equ	0xFDB
 22702                           fsr2h	equ	0xFDA
 22703                           fsr2l	equ	0xFD9
 22704                           status	equ	0xFD8
 22705                           
 22706 ;; *************** function _ldexp *****************
 22707 ;; Defined at:
 22708 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 22709 ;; Parameters:    Size  Location     Type
 22710 ;;  value           4   79[BANK0 ] unsigned char 
 22711 ;;  newexp          2   83[BANK0 ] int 
 22712 ;; Auto vars:     Size  Location     Type
 22713 ;;		None
 22714 ;; Return value:  Size  Location     Type
 22715 ;;                  4   79[BANK0 ] int 
 22716 ;; Registers used:
 22717 ;;		wreg, status,2, status,0
 22718 ;; Tracked objects:
 22719 ;;		On entry : 0/0
 22720 ;;		On exit  : 0/0
 22721 ;;		Unchanged: 0/0
 22722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22723 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22726 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22727 ;;Total ram usage:        8 bytes
 22728 ;; Hardware stack levels used:    1
 22729 ;; Hardware stack levels required when called:    7
 22730 ;; This function calls:
 22731 ;;		Nothing
 22732 ;; This function is called by:
 22733 ;;		_exp
 22734 ;; This function uses a non-reentrant model
 22735 ;;
 22736                           
 22737                           	psect	text126
 22738  013CFA                     __ptext126:
 22739                           	opt stack 0
 22740  013CFA                     _ldexp:
 22741                           	opt stack 19
 22742                           
 22743                           ;incstack = 0
 22744  013CFA  0100               	movlb	0	; () banked
 22745  013CFC  51AF               	movf	ldexp@value& (0+255),w,b
 22746  013CFE  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 22747  013D00  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 22748  013D02  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 22749  013D04  A4D8               	btfss	status,2,c
 22750  013D06  D009               	goto	l2923
 22751                           
 22752                           ; BSR set to: 0
 22753  013D08  0E00               	movlw	0
 22754  013D0A  6FAF               	movwf	?_ldexp& (0+255),b
 22755  013D0C  0E00               	movlw	0
 22756  013D0E  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22757  013D10  0E00               	movlw	0
 22758  013D12  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22759  013D14  0E00               	movlw	0
 22760  013D16  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22761                           
 22762                           ; BSR set to: 0
 22763  013D18  0012               	return	
 22764  013D1A                     l2923:
 22765                           
 22766                           ; BSR set to: 0
 22767                           
 22768                           ; BSR set to: 0
 22769  013D1A  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22770  013D1C  0B7F               	andlw	127
 22771  013D1E  6FB5               	movwf	??_ldexp& (0+255),b
 22772  013D20  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 22773  013D22  90D8               	bcf	status,0,c
 22774  013D24  37B5               	rlcf	??_ldexp& (0+255),f,b
 22775  013D26  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 22776  013D28  51B5               	movf	??_ldexp& (0+255),w,b
 22777  013D2A  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22778  013D2C  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 22779  013D2E  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22780  013D30  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 22781  013D32  D003               	goto	u11060
 22782  013D34  6BB5               	clrf	??_ldexp& (0+255),b
 22783  013D36  2BB5               	incf	??_ldexp& (0+255),f,b
 22784  013D38  D002               	goto	u11068
 22785  013D3A                     u11060:
 22786  013D3A  0100               	movlb	0	; () banked
 22787  013D3C  6BB5               	clrf	??_ldexp& (0+255),b
 22788  013D3E                     u11068:
 22789  013D3E  51B5               	movf	??_ldexp& (0+255),w,b
 22790  013D40  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22791  013D42  0E00               	movlw	0
 22792  013D44  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22793  013D46  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 22794  013D48  D00F               	goto	l2925
 22795                           
 22796                           ; BSR set to: 0
 22797  013D4A  0E00               	movlw	0
 22798  013D4C  0101               	movlb	1	; () banked
 22799  013D4E  6F1B               	movwf	(_errno+1)& (0+255),b
 22800  013D50  0E22               	movlw	34
 22801  013D52  6F1A               	movwf	_errno& (0+255),b
 22802  013D54  0E00               	movlw	0
 22803  013D56  0100               	movlb	0	; () banked
 22804  013D58  6FAF               	movwf	?_ldexp& (0+255),b
 22805  013D5A  0E00               	movlw	0
 22806  013D5C  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22807  013D5E  0E00               	movlw	0
 22808  013D60  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22809  013D62  0E00               	movlw	0
 22810  013D64                     L10:
 22811  013D64  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22812                           
 22813                           ; BSR set to: 0
 22814  013D66  0012               	return	
 22815  013D68                     l2925:
 22816                           
 22817                           ; BSR set to: 0
 22818                           
 22819                           ; BSR set to: 0
 22820  013D68  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 22821  013D6A  D01B               	goto	l2927
 22822  013D6C  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 22823  013D6E  A0D8               	btfss	status,0,c
 22824  013D70  D018               	goto	l2927
 22825                           
 22826                           ; BSR set to: 0
 22827  013D72  0E00               	movlw	0
 22828  013D74  0101               	movlb	1	; () banked
 22829  013D76  6F1B               	movwf	(_errno+1)& (0+255),b
 22830  013D78  0E22               	movlw	34
 22831  013D7A  6F1A               	movwf	_errno& (0+255),b
 22832                           
 22833                           ; BSR set to: 1
 22834  013D7C  0100               	movlb	0	; () banked
 22835  013D7E  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 22836  013D80  D008               	goto	l2928
 22837                           
 22838                           ; BSR set to: 0
 22839  013D82  0EFF               	movlw	255
 22840  013D84  6FAF               	movwf	?_ldexp& (0+255),b
 22841  013D86  0EFF               	movlw	255
 22842  013D88  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22843  013D8A  0E7F               	movlw	127
 22844  013D8C  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22845  013D8E  0EFF               	movlw	255
 22846  013D90  D7E9               	goto	L10
 22847  013D92                     l2928:
 22848                           
 22849                           ; BSR set to: 0
 22850                           
 22851                           ; BSR set to: 0
 22852  013D92  0EFF               	movlw	255
 22853  013D94  6FAF               	movwf	?_ldexp& (0+255),b
 22854  013D96  0EFF               	movlw	255
 22855  013D98  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22856  013D9A  0E7F               	movlw	127
 22857  013D9C  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22858  013D9E  0E7F               	movlw	127
 22859  013DA0  D7E1               	goto	L10
 22860  013DA2                     l2927:
 22861                           
 22862                           ; BSR set to: 0
 22863                           
 22864                           ; BSR set to: 0
 22865  013DA2  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 22866  013DA4  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 22867  013DA6  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 22868  013DA8  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 22869  013DAA  6FB5               	movwf	??_ldexp& (0+255),b
 22870  013DAC  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22871  013DAE  19B5               	xorwf	??_ldexp& (0+255),w,b
 22872  013DB0  0B80               	andlw	-128
 22873  013DB2  19B5               	xorwf	??_ldexp& (0+255),w,b
 22874  013DB4  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 22875  013DB6  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 22876  013DBA  0E01               	movlw	1
 22877  013DBC  17B5               	andwf	??_ldexp& (0+255),f,b
 22878  013DBE  33B5               	rrcf	??_ldexp& (0+255),f,b
 22879  013DC0  33B5               	rrcf	??_ldexp& (0+255),f,b
 22880  013DC2  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 22881  013DC4  19B5               	xorwf	??_ldexp& (0+255),w,b
 22882  013DC6  0B7F               	andlw	-129
 22883  013DC8  19B5               	xorwf	??_ldexp& (0+255),w,b
 22884  013DCA  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 22885                           
 22886                           ; BSR set to: 0
 22887                           
 22888                           ; BSR set to: 0
 22889                           
 22890                           ; BSR set to: 0
 22891  013DCC  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 22892  013DD0  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 22893  013DD4  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 22894  013DD8  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 22895  013DDC  0012               	return	
 22896  013DDE                     __end_of_ldexp:
 22897                           	opt stack 0
 22898                           tosu	equ	0xFFF
 22899                           tosh	equ	0xFFE
 22900                           tosl	equ	0xFFD
 22901                           pclath	equ	0xFFA
 22902                           tblptru	equ	0xFF8
 22903                           tblptrh	equ	0xFF7
 22904                           tblptrl	equ	0xFF6
 22905                           tablat	equ	0xFF5
 22906                           prodh	equ	0xFF4
 22907                           prodl	equ	0xFF3
 22908                           intcon	equ	0xFF2
 22909                           indf0	equ	0xFEF
 22910                           postinc0	equ	0xFEE
 22911                           fsr0h	equ	0xFEA
 22912                           fsr0l	equ	0xFE9
 22913                           wreg	equ	0xFE8
 22914                           indf1	equ	0xFE7
 22915                           postdec1	equ	0xFE5
 22916                           fsr1h	equ	0xFE2
 22917                           fsr1l	equ	0xFE1
 22918                           indf2	equ	0xFDF
 22919                           postinc2	equ	0xFDE
 22920                           postdec2	equ	0xFDD
 22921                           plusw2	equ	0xFDB
 22922                           fsr2h	equ	0xFDA
 22923                           fsr2l	equ	0xFD9
 22924                           status	equ	0xFD8
 22925                           
 22926 ;; *************** function _floor *****************
 22927 ;; Defined at:
 22928 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 22929 ;; Parameters:    Size  Location     Type
 22930 ;;  x               4   73[BANK0 ] int 
 22931 ;; Auto vars:     Size  Location     Type
 22932 ;;  i               4   77[BANK0 ] int 
 22933 ;;  expon           2   81[BANK0 ] int 
 22934 ;; Return value:  Size  Location     Type
 22935 ;;                  4   73[BANK0 ] int 
 22936 ;; Registers used:
 22937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22938 ;; Tracked objects:
 22939 ;;		On entry : 0/0
 22940 ;;		On exit  : 0/0
 22941 ;;		Unchanged: 0/0
 22942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22944 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22946 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22947 ;;Total ram usage:       10 bytes
 22948 ;; Hardware stack levels used:    1
 22949 ;; Hardware stack levels required when called:    8
 22950 ;; This function calls:
 22951 ;;		___fladd
 22952 ;;		___flge
 22953 ;;		___fltol
 22954 ;;		___xxtofl
 22955 ;;		_frexp
 22956 ;; This function is called by:
 22957 ;;		_exp
 22958 ;; This function uses a non-reentrant model
 22959 ;;
 22960                           
 22961                           	psect	text127
 22962  0137D2                     __ptext127:
 22963                           	opt stack 0
 22964  0137D2                     _floor:
 22965                           	opt stack 18
 22966                           
 22967                           ; BSR set to: 0
 22968                           ;incstack = 0
 22969  0137D2  C0A9  F060         	movff	floor@x,frexp@value
 22970  0137D6  C0AA  F061         	movff	floor@x+1,frexp@value+1
 22971  0137DA  C0AB  F062         	movff	floor@x+2,frexp@value+2
 22972  0137DE  C0AC  F063         	movff	floor@x+3,frexp@value+3
 22973  0137E2  0EB1               	movlw	low floor@expon
 22974  0137E4  0100               	movlb	0	; () banked
 22975  0137E6  6F64               	movwf	frexp@eptr& (0+255),b
 22976  0137E8  0E00               	movlw	high floor@expon
 22977  0137EA  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 22978  0137EC  EC6C  F0A1         	call	_frexp	;wreg free
 22979  0137F0  0100               	movlb	0	; () banked
 22980  0137F2  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 22981  0137F4  D014               	goto	l2910
 22982                           
 22983                           ; BSR set to: 0
 22984  0137F6  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 22985  0137F8  D009               	goto	l2911
 22986                           
 22987                           ; BSR set to: 0
 22988  0137FA  0E00               	movlw	0
 22989  0137FC  6FA9               	movwf	?_floor& (0+255),b
 22990  0137FE  0E00               	movlw	0
 22991  013800  6FAA               	movwf	(?_floor+1)& (0+255),b
 22992  013802  0E80               	movlw	128
 22993  013804  6FAB               	movwf	(?_floor+2)& (0+255),b
 22994  013806  0EBF               	movlw	191
 22995  013808  6FAC               	movwf	(?_floor+3)& (0+255),b
 22996                           
 22997                           ; BSR set to: 0
 22998  01380A  0012               	return	
 22999  01380C                     l2911:
 23000                           
 23001                           ; BSR set to: 0
 23002                           
 23003                           ; BSR set to: 0
 23004  01380C  0E00               	movlw	0
 23005  01380E  6FA9               	movwf	?_floor& (0+255),b
 23006  013810  0E00               	movlw	0
 23007  013812  6FAA               	movwf	(?_floor+1)& (0+255),b
 23008  013814  0E00               	movlw	0
 23009  013816  6FAB               	movwf	(?_floor+2)& (0+255),b
 23010  013818  0E00               	movlw	0
 23011  01381A  6FAC               	movwf	(?_floor+3)& (0+255),b
 23012                           
 23013                           ; BSR set to: 0
 23014  01381C  0012               	return	
 23015  01381E                     l2910:
 23016                           
 23017                           ; BSR set to: 0
 23018                           
 23019                           ; BSR set to: 0
 23020  01381E  51B2               	movf	(floor@expon+1)& (0+255),w,b
 23021  013820  E104               	bnz	u11020
 23022  013822  0E1D               	movlw	29
 23023  013824  5DB1               	subwf	floor@expon& (0+255),w,b
 23024  013826  A0D8               	btfss	status,0,c
 23025  013828  D009               	goto	l2913
 23026  01382A                     u11020:
 23027                           
 23028                           ; BSR set to: 0
 23029  01382A  C0A9  F0A9         	movff	floor@x,?_floor
 23030  01382E  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 23031  013832  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 23032  013836  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 23033  01383A  0012               	return	
 23034  01383C                     l2913:
 23035                           
 23036                           ; BSR set to: 0
 23037                           
 23038                           ; BSR set to: 0
 23039  01383C  C0A9  F09F         	movff	floor@x,___fltol@f1
 23040  013840  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 23041  013844  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 23042  013848  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 23043  01384C  ECEF  F09E         	call	___fltol	;wreg free
 23044  013850  C09F  F060         	movff	?___fltol,___xxtofl@val
 23045  013854  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 23046  013858  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 23047  01385C  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 23048  013860  0E01               	movlw	1
 23049  013862  ECFF  F096         	call	___xxtofl
 23050  013866  C060  F0AD         	movff	?___xxtofl,floor@i
 23051  01386A  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 23052  01386E  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 23053  013872  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 23054  013876  C0A9  F060         	movff	floor@x,___flge@ff1
 23055  01387A  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 23056  01387E  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 23057  013882  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 23058  013886  C0AD  F064         	movff	floor@i,___flge@ff2
 23059  01388A  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 23060  01388E  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 23061  013892  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 23062  013896  ECCD  F09A         	call	___flge	;wreg free
 23063  01389A  0100               	movlb	0	; () banked
 23064  01389C  B0D8               	btfsc	status,0,c
 23065  01389E  D01B               	goto	l2914
 23066                           
 23067                           ; BSR set to: 0
 23068  0138A0  C0AD  F08B         	movff	floor@i,___fladd@b
 23069  0138A4  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 23070  0138A8  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 23071  0138AC  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 23072  0138B0  0E00               	movlw	0
 23073  0138B2  6F8F               	movwf	___fladd@a& (0+255),b
 23074  0138B4  0E00               	movlw	0
 23075  0138B6  6F90               	movwf	(___fladd@a+1)& (0+255),b
 23076  0138B8  0E80               	movlw	128
 23077  0138BA  6F91               	movwf	(___fladd@a+2)& (0+255),b
 23078  0138BC  0EBF               	movlw	191
 23079  0138BE  6F92               	movwf	(___fladd@a+3)& (0+255),b
 23080  0138C0  EC42  F087         	call	___fladd	;wreg free
 23081  0138C4  C08B  F0A9         	movff	?___fladd,?_floor
 23082  0138C8  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 23083  0138CC  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 23084  0138D0  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 23085  0138D4  0012               	return	
 23086  0138D6                     l2914:
 23087                           
 23088                           ; BSR set to: 0
 23089  0138D6  C0AD  F0A9         	movff	floor@i,?_floor
 23090  0138DA  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 23091  0138DE  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 23092  0138E2  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 23093  0138E6  0012               	return		;funcret
 23094  0138E8                     __end_of_floor:
 23095                           	opt stack 0
 23096                           tosu	equ	0xFFF
 23097                           tosh	equ	0xFFE
 23098                           tosl	equ	0xFFD
 23099                           pclath	equ	0xFFA
 23100                           tblptru	equ	0xFF8
 23101                           tblptrh	equ	0xFF7
 23102                           tblptrl	equ	0xFF6
 23103                           tablat	equ	0xFF5
 23104                           prodh	equ	0xFF4
 23105                           prodl	equ	0xFF3
 23106                           intcon	equ	0xFF2
 23107                           indf0	equ	0xFEF
 23108                           postinc0	equ	0xFEE
 23109                           fsr0h	equ	0xFEA
 23110                           fsr0l	equ	0xFE9
 23111                           wreg	equ	0xFE8
 23112                           indf1	equ	0xFE7
 23113                           postdec1	equ	0xFE5
 23114                           fsr1h	equ	0xFE2
 23115                           fsr1l	equ	0xFE1
 23116                           indf2	equ	0xFDF
 23117                           postinc2	equ	0xFDE
 23118                           postdec2	equ	0xFDD
 23119                           plusw2	equ	0xFDB
 23120                           fsr2h	equ	0xFDA
 23121                           fsr2l	equ	0xFD9
 23122                           status	equ	0xFD8
 23123                           
 23124 ;; *************** function _frexp *****************
 23125 ;; Defined at:
 23126 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 23127 ;; Parameters:    Size  Location     Type
 23128 ;;  value           4    0[BANK0 ] int 
 23129 ;;  eptr            2    4[BANK0 ] PTR int 
 23130 ;;		 -> log@exponent(2), floor@expon(2), 
 23131 ;; Auto vars:     Size  Location     Type
 23132 ;;		None
 23133 ;; Return value:  Size  Location     Type
 23134 ;;                  4    0[BANK0 ] PTR int 
 23135 ;; Registers used:
 23136 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23137 ;; Tracked objects:
 23138 ;;		On entry : 0/0
 23139 ;;		On exit  : 0/0
 23140 ;;		Unchanged: 0/0
 23141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23142 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23144 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23145 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23146 ;;Total ram usage:        8 bytes
 23147 ;; Hardware stack levels used:    1
 23148 ;; Hardware stack levels required when called:    7
 23149 ;; This function calls:
 23150 ;;		Nothing
 23151 ;; This function is called by:
 23152 ;;		_floor
 23153 ;;		_log
 23154 ;; This function uses a non-reentrant model
 23155 ;;
 23156                           
 23157                           	psect	text128
 23158  0142D8                     __ptext128:
 23159                           	opt stack 0
 23160  0142D8                     _frexp:
 23161                           	opt stack 19
 23162                           
 23163                           ;incstack = 0
 23164  0142D8  0100               	movlb	0	; () banked
 23165  0142DA  5160               	movf	frexp@value& (0+255),w,b
 23166  0142DC  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 23167  0142DE  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 23168  0142E0  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 23169  0142E2  A4D8               	btfss	status,2,c
 23170  0142E4  D011               	goto	l2919
 23171                           
 23172                           ; BSR set to: 0
 23173  0142E6  C064  FFD9         	movff	frexp@eptr,fsr2l
 23174  0142EA  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23175  0142EE  0E00               	movlw	0
 23176  0142F0  6EDE               	movwf	postinc2,c
 23177  0142F2  0E00               	movlw	0
 23178  0142F4  6EDD               	movwf	postdec2,c
 23179                           
 23180                           ; BSR set to: 0
 23181  0142F6  0E00               	movlw	0
 23182  0142F8  6F60               	movwf	?_frexp& (0+255),b
 23183  0142FA  0E00               	movlw	0
 23184  0142FC  6F61               	movwf	(?_frexp+1)& (0+255),b
 23185  0142FE  0E00               	movlw	0
 23186  014300  6F62               	movwf	(?_frexp+2)& (0+255),b
 23187  014302  0E00               	movlw	0
 23188  014304  6F63               	movwf	(?_frexp+3)& (0+255),b
 23189                           
 23190                           ; BSR set to: 0
 23191  014306  0012               	return	
 23192  014308                     l2919:
 23193                           
 23194                           ; BSR set to: 0
 23195                           
 23196                           ; BSR set to: 0
 23197  014308  5163               	movf	(frexp@value+3)& (0+255),w,b
 23198  01430A  0B7F               	andlw	127
 23199  01430C  6F66               	movwf	??_frexp& (0+255),b
 23200  01430E  6B67               	clrf	(??_frexp+1)& (0+255),b
 23201  014310  90D8               	bcf	status,0,c
 23202  014312  3766               	rlcf	??_frexp& (0+255),f,b
 23203  014314  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 23204  014316  C064  FFD9         	movff	frexp@eptr,fsr2l
 23205  01431A  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23206  01431E  C066  FFDE         	movff	??_frexp,postinc2
 23207  014322  C067  FFDD         	movff	??_frexp+1,postdec2
 23208  014326  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 23209  014328  D003               	goto	u10600
 23210  01432A  6B66               	clrf	??_frexp& (0+255),b
 23211  01432C  2B66               	incf	??_frexp& (0+255),f,b
 23212  01432E  D002               	goto	u10608
 23213  014330                     u10600:
 23214  014330  0100               	movlb	0	; () banked
 23215  014332  6B66               	clrf	??_frexp& (0+255),b
 23216  014334                     u10608:
 23217  014334  5166               	movf	??_frexp& (0+255),w,b
 23218  014336  C064  FFD9         	movff	frexp@eptr,fsr2l
 23219  01433A  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23220  01433E  12DE               	iorwf	postinc2,f,c
 23221  014340  0E00               	movlw	0
 23222  014342  12DD               	iorwf	postdec2,f,c
 23223                           
 23224                           ; BSR set to: 0
 23225  014344  C064  FFD9         	movff	frexp@eptr,fsr2l
 23226  014348  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23227  01434C  0E82               	movlw	130
 23228  01434E  26DE               	addwf	postinc2,f,c
 23229  014350  0EFF               	movlw	255
 23230  014352  22DD               	addwfc	postdec2,f,c
 23231                           
 23232                           ; BSR set to: 0
 23233  014354  8163               	bsf	(frexp@value+3)& (0+255),0,b
 23234  014356  8363               	bsf	(frexp@value+3)& (0+255),1,b
 23235  014358  8563               	bsf	(frexp@value+3)& (0+255),2,b
 23236  01435A  8763               	bsf	(frexp@value+3)& (0+255),3,b
 23237  01435C  8963               	bsf	(frexp@value+3)& (0+255),4,b
 23238  01435E  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 23239  014360  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 23240                           
 23241                           ; BSR set to: 0
 23242  014362  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 23243                           
 23244                           ; BSR set to: 0
 23245  014364  C060  F060         	movff	frexp@value,?_frexp
 23246  014368  C061  F061         	movff	frexp@value+1,?_frexp+1
 23247  01436C  C062  F062         	movff	frexp@value+2,?_frexp+2
 23248  014370  C063  F063         	movff	frexp@value+3,?_frexp+3
 23249  014374  0012               	return	
 23250  014376                     __end_of_frexp:
 23251                           	opt stack 0
 23252                           tosu	equ	0xFFF
 23253                           tosh	equ	0xFFE
 23254                           tosl	equ	0xFFD
 23255                           pclath	equ	0xFFA
 23256                           tblptru	equ	0xFF8
 23257                           tblptrh	equ	0xFF7
 23258                           tblptrl	equ	0xFF6
 23259                           tablat	equ	0xFF5
 23260                           prodh	equ	0xFF4
 23261                           prodl	equ	0xFF3
 23262                           intcon	equ	0xFF2
 23263                           indf0	equ	0xFEF
 23264                           postinc0	equ	0xFEE
 23265                           fsr0h	equ	0xFEA
 23266                           fsr0l	equ	0xFE9
 23267                           wreg	equ	0xFE8
 23268                           indf1	equ	0xFE7
 23269                           postdec1	equ	0xFE5
 23270                           fsr1h	equ	0xFE2
 23271                           fsr1l	equ	0xFE1
 23272                           indf2	equ	0xFDF
 23273                           postinc2	equ	0xFDE
 23274                           postdec2	equ	0xFDD
 23275                           plusw2	equ	0xFDB
 23276                           fsr2h	equ	0xFDA
 23277                           fsr2l	equ	0xFD9
 23278                           status	equ	0xFD8
 23279                           
 23280 ;; *************** function ___xxtofl *****************
 23281 ;; Defined at:
 23282 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 23283 ;; Parameters:    Size  Location     Type
 23284 ;;  sign            1    wreg     unsigned char 
 23285 ;;  val             4    0[BANK0 ] long 
 23286 ;; Auto vars:     Size  Location     Type
 23287 ;;  sign            1    8[BANK0 ] unsigned char 
 23288 ;;  arg             4   10[BANK0 ] unsigned long 
 23289 ;;  exp             1    9[BANK0 ] unsigned char 
 23290 ;; Return value:  Size  Location     Type
 23291 ;;                  4    0[BANK0 ] unsigned char 
 23292 ;; Registers used:
 23293 ;;		wreg, status,2, status,0
 23294 ;; Tracked objects:
 23295 ;;		On entry : 0/0
 23296 ;;		On exit  : 0/0
 23297 ;;		Unchanged: 0/0
 23298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23299 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23300 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23301 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23302 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23303 ;;Total ram usage:       14 bytes
 23304 ;; Hardware stack levels used:    1
 23305 ;; Hardware stack levels required when called:    7
 23306 ;; This function calls:
 23307 ;;		Nothing
 23308 ;; This function is called by:
 23309 ;;		_ADCAverage
 23310 ;;		_pow
 23311 ;;		_exp
 23312 ;;		_floor
 23313 ;;		_log
 23314 ;;		_ADC_Voltage
 23315 ;; This function uses a non-reentrant model
 23316 ;;
 23317                           
 23318                           	psect	text129
 23319  012DFE                     __ptext129:
 23320                           	opt stack 0
 23321  012DFE                     ___xxtofl:
 23322                           	opt stack 19
 23323                           
 23324                           ; BSR set to: 0
 23325                           ;incstack = 0
 23326                           ;___xxtofl@sign stored from wreg
 23327  012DFE  0100               	movlb	0	; () banked
 23328  012E00  6F68               	movwf	___xxtofl@sign& (0+255),b
 23329  012E02  0100               	movlb	0	; () banked
 23330  012E04  5168               	movf	___xxtofl@sign& (0+255),w,b
 23331  012E06  A4D8               	btfss	status,2,c
 23332                           
 23333                           ; BSR set to: 0
 23334  012E08  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23335  012E0A  D01A               	goto	l2868
 23336                           
 23337                           ; BSR set to: 0
 23338  012E0C  C060  F064         	movff	___xxtofl@val,??___xxtofl
 23339  012E10  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 23340  012E14  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 23341  012E18  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 23342  012E1C  1F64               	comf	??___xxtofl& (0+255),f,b
 23343  012E1E  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 23344  012E20  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 23345  012E22  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 23346  012E24  2B64               	incf	??___xxtofl& (0+255),f,b
 23347  012E26  0E00               	movlw	0
 23348  012E28  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 23349  012E2A  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 23350  012E2C  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 23351  012E2E  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 23352  012E32  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 23353  012E36  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 23354  012E3A  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 23355  012E3E  D008               	goto	l2869
 23356  012E40                     l2868:
 23357                           
 23358                           ; BSR set to: 0
 23359  012E40  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 23360  012E44  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 23361  012E48  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 23362  012E4C  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 23363  012E50                     l2869:
 23364                           
 23365                           ; BSR set to: 0
 23366                           
 23367                           ; BSR set to: 0
 23368  012E50  5160               	movf	___xxtofl@val& (0+255),w,b
 23369  012E52  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 23370  012E54  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 23371  012E56  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 23372  012E58  A4D8               	btfss	status,2,c
 23373  012E5A  D009               	goto	l2870
 23374                           
 23375                           ; BSR set to: 0
 23376  012E5C  0E00               	movlw	0
 23377  012E5E  6F60               	movwf	?___xxtofl& (0+255),b
 23378  012E60  0E00               	movlw	0
 23379  012E62  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 23380  012E64  0E00               	movlw	0
 23381  012E66  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 23382  012E68  0E00               	movlw	0
 23383  012E6A  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 23384                           
 23385                           ; BSR set to: 0
 23386  012E6C  0012               	return	
 23387  012E6E                     l2870:
 23388                           
 23389                           ; BSR set to: 0
 23390                           
 23391                           ; BSR set to: 0
 23392  012E6E  0E96               	movlw	150
 23393  012E70  6F69               	movwf	___xxtofl@exp& (0+255),b
 23394  012E72  D006               	goto	l2872
 23395  012E74                     
 23396                           ; BSR set to: 0
 23397                           
 23398                           ; BSR set to: 0
 23399  012E74  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23400  012E76  90D8               	bcf	status,0,c
 23401  012E78  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23402  012E7A  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23403  012E7C  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23404  012E7E  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23405  012E80                     l2872:
 23406                           
 23407                           ; BSR set to: 0
 23408                           
 23409                           ; BSR set to: 0
 23410  012E80  0E00               	movlw	0
 23411  012E82  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23412  012E84  6F64               	movwf	??___xxtofl& (0+255),b
 23413  012E86  0E00               	movlw	0
 23414  012E88  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23415  012E8A  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23416  012E8C  0E00               	movlw	0
 23417  012E8E  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23418  012E90  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23419  012E92  0EFE               	movlw	254
 23420  012E94  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23421  012E96  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23422  012E98  5164               	movf	??___xxtofl& (0+255),w,b
 23423  012E9A  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23424  012E9C  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23425  012E9E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23426  012EA0  B4D8               	btfsc	status,2,c
 23427  012EA2  D00D               	goto	l2875
 23428  012EA4  D7E7               	goto	l2873
 23429  012EA6                     
 23430                           ; BSR set to: 0
 23431                           
 23432                           ; BSR set to: 0
 23433  012EA6  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23434                           
 23435                           ; BSR set to: 0
 23436  012EA8  0E01               	movlw	1
 23437  012EAA  276A               	addwf	___xxtofl@arg& (0+255),f,b
 23438  012EAC  0E00               	movlw	0
 23439  012EAE  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 23440  012EB0  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 23441  012EB2  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 23442                           
 23443                           ; BSR set to: 0
 23444  012EB4  90D8               	bcf	status,0,c
 23445  012EB6  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23446  012EB8  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23447  012EBA  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23448  012EBC  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23449  012EBE                     l2875:
 23450                           
 23451                           ; BSR set to: 0
 23452  012EBE  0E00               	movlw	0
 23453  012EC0  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23454  012EC2  6F64               	movwf	??___xxtofl& (0+255),b
 23455  012EC4  0E00               	movlw	0
 23456  012EC6  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23457  012EC8  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23458  012ECA  0E00               	movlw	0
 23459  012ECC  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23460  012ECE  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23461  012ED0  0EFF               	movlw	255
 23462  012ED2  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23463  012ED4  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23464  012ED6  5164               	movf	??___xxtofl& (0+255),w,b
 23465  012ED8  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23466  012EDA  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23467  012EDC  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23468  012EDE  B4D8               	btfsc	status,2,c
 23469  012EE0  D007               	goto	l2878
 23470  012EE2  D7E1               	goto	l2876
 23471  012EE4                     
 23472                           ; BSR set to: 0
 23473                           
 23474                           ; BSR set to: 0
 23475  012EE4  0769               	decf	___xxtofl@exp& (0+255),f,b
 23476  012EE6  90D8               	bcf	status,0,c
 23477  012EE8  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 23478  012EEA  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 23479  012EEC  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 23480  012EEE  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 23481  012EF0                     l2878:
 23482                           
 23483                           ; BSR set to: 0
 23484                           
 23485                           ; BSR set to: 0
 23486  012EF0  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 23487  012EF2  D003               	goto	u10550
 23488                           
 23489                           ; BSR set to: 0
 23490  012EF4  0E02               	movlw	2
 23491  012EF6  6169               	cpfslt	___xxtofl@exp& (0+255),b
 23492  012EF8  D7F5               	goto	l2879
 23493  012EFA                     u10550:
 23494                           
 23495                           ; BSR set to: 0
 23496                           
 23497                           ; BSR set to: 0
 23498  012EFA  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 23499  012EFC  D008               	goto	l2883
 23500                           
 23501                           ; BSR set to: 0
 23502  012EFE  0EFF               	movlw	255
 23503  012F00  176A               	andwf	___xxtofl@arg& (0+255),f,b
 23504  012F02  0EFF               	movlw	255
 23505  012F04  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 23506  012F06  0E7F               	movlw	127
 23507  012F08  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 23508  012F0A  0EFF               	movlw	255
 23509  012F0C  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 23510  012F0E                     l2883:
 23511                           
 23512                           ; BSR set to: 0
 23513  012F0E  90D8               	bcf	status,0,c
 23514  012F10  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 23515  012F12  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 23516  012F16  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23517  012F18  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23518  012F1A  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 23519  012F1C  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 23520  012F20  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23521  012F22  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23522  012F24  6B64               	clrf	??___xxtofl& (0+255),b
 23523  012F26  5164               	movf	??___xxtofl& (0+255),w,b
 23524  012F28  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 23525  012F2A  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 23526  012F2C  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 23527  012F2E  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 23528  012F30  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 23529  012F32  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 23530  012F34  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 23531                           
 23532                           ; BSR set to: 0
 23533  012F36  5168               	movf	___xxtofl@sign& (0+255),w,b
 23534  012F38  A4D8               	btfss	status,2,c
 23535                           
 23536                           ; BSR set to: 0
 23537  012F3A  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23538  012F3C  D001               	goto	l2884
 23539                           
 23540                           ; BSR set to: 0
 23541  012F3E  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 23542  012F40                     l2884:
 23543                           
 23544                           ; BSR set to: 0
 23545                           
 23546                           ; BSR set to: 0
 23547  012F40  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 23548  012F44  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 23549  012F48  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 23550  012F4C  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 23551  012F50  0012               	return	
 23552  012F52                     __end_of___xxtofl:
 23553                           	opt stack 0
 23554                           tosu	equ	0xFFF
 23555                           tosh	equ	0xFFE
 23556                           tosl	equ	0xFFD
 23557                           pclath	equ	0xFFA
 23558                           tblptru	equ	0xFF8
 23559                           tblptrh	equ	0xFF7
 23560                           tblptrl	equ	0xFF6
 23561                           tablat	equ	0xFF5
 23562                           prodh	equ	0xFF4
 23563                           prodl	equ	0xFF3
 23564                           intcon	equ	0xFF2
 23565                           indf0	equ	0xFEF
 23566                           postinc0	equ	0xFEE
 23567                           fsr0h	equ	0xFEA
 23568                           fsr0l	equ	0xFE9
 23569                           wreg	equ	0xFE8
 23570                           indf1	equ	0xFE7
 23571                           postdec1	equ	0xFE5
 23572                           fsr1h	equ	0xFE2
 23573                           fsr1l	equ	0xFE1
 23574                           indf2	equ	0xFDF
 23575                           postinc2	equ	0xFDE
 23576                           postdec2	equ	0xFDD
 23577                           plusw2	equ	0xFDB
 23578                           fsr2h	equ	0xFDA
 23579                           fsr2l	equ	0xFD9
 23580                           status	equ	0xFD8
 23581                           
 23582 ;; *************** function ___fltol *****************
 23583 ;; Defined at:
 23584 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 23585 ;; Parameters:    Size  Location     Type
 23586 ;;  f1              4   63[BANK0 ] unsigned char 
 23587 ;; Auto vars:     Size  Location     Type
 23588 ;;  exp1            1   72[BANK0 ] unsigned char 
 23589 ;;  sign1           1   71[BANK0 ] unsigned char 
 23590 ;; Return value:  Size  Location     Type
 23591 ;;                  4   63[BANK0 ] long 
 23592 ;; Registers used:
 23593 ;;		wreg, status,2, status,0
 23594 ;; Tracked objects:
 23595 ;;		On entry : 0/0
 23596 ;;		On exit  : 0/0
 23597 ;;		Unchanged: 0/0
 23598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23599 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23600 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23601 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23602 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23603 ;;Total ram usage:       10 bytes
 23604 ;; Hardware stack levels used:    1
 23605 ;; Hardware stack levels required when called:    7
 23606 ;; This function calls:
 23607 ;;		Nothing
 23608 ;; This function is called by:
 23609 ;;		_ADCAverage
 23610 ;;		_pow
 23611 ;;		_exp
 23612 ;;		_floor
 23613 ;; This function uses a non-reentrant model
 23614 ;;
 23615                           
 23616                           	psect	text130
 23617  013DDE                     __ptext130:
 23618                           	opt stack 0
 23619  013DDE                     ___fltol:
 23620                           	opt stack 18
 23621                           
 23622                           ; BSR set to: 0
 23623                           ;incstack = 0
 23624  013DDE  0100               	movlb	0	; () banked
 23625  013DE0  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 23626  013DE2  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 23627  013DE4  6FA8               	movwf	___fltol@exp1& (0+255),b
 23628  013DE6  51A8               	movf	___fltol@exp1& (0+255),w,b
 23629  013DE8  A4D8               	btfss	status,2,c
 23630  013DEA  D009               	goto	l2535
 23631                           
 23632                           ; BSR set to: 0
 23633  013DEC  0E00               	movlw	0
 23634  013DEE  6F9F               	movwf	?___fltol& (0+255),b
 23635  013DF0  0E00               	movlw	0
 23636  013DF2  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23637  013DF4  0E00               	movlw	0
 23638  013DF6  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23639  013DF8  0E00               	movlw	0
 23640  013DFA  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23641                           
 23642                           ; BSR set to: 0
 23643  013DFC  0012               	return	
 23644  013DFE                     l2535:
 23645                           
 23646                           ; BSR set to: 0
 23647                           
 23648                           ; BSR set to: 0
 23649  013DFE  C09F  F0A3         	movff	___fltol@f1,??___fltol
 23650  013E02  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 23651  013E06  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 23652  013E0A  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 23653  013E0E  0E20               	movlw	32
 23654  013E10  D005               	goto	u10370
 23655  013E12                     u10375:
 23656  013E12  90D8               	bcf	status,0,c
 23657  013E14  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 23658  013E16  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 23659  013E18  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 23660  013E1A  33A3               	rrcf	??___fltol& (0+255),f,b
 23661  013E1C                     u10370:
 23662  013E1C  2EE8               	decfsz	wreg,f,c
 23663  013E1E  D7F9               	goto	u10375
 23664  013E20  51A3               	movf	??___fltol& (0+255),w,b
 23665  013E22  6FA7               	movwf	___fltol@sign1& (0+255),b
 23666                           
 23667                           ; BSR set to: 0
 23668  013E24  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 23669                           
 23670                           ; BSR set to: 0
 23671  013E26  0EFF               	movlw	255
 23672  013E28  179F               	andwf	___fltol@f1& (0+255),f,b
 23673  013E2A  0EFF               	movlw	255
 23674  013E2C  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 23675  013E2E  0EFF               	movlw	255
 23676  013E30  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 23677  013E32  0E00               	movlw	0
 23678  013E34  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 23679                           
 23680                           ; BSR set to: 0
 23681  013E36  0E96               	movlw	150
 23682  013E38  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 23683                           
 23684                           ; BSR set to: 0
 23685  013E3A  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 23686  013E3C  D016               	goto	l2537
 23687                           
 23688                           ; BSR set to: 0
 23689  013E3E  51A8               	movf	___fltol@exp1& (0+255),w,b
 23690  013E40  0A80               	xorlw	128
 23691  013E42  0F97               	addlw	151
 23692  013E44  B0D8               	btfsc	status,0,c
 23693  013E46  D009               	goto	l2538
 23694                           
 23695                           ; BSR set to: 0
 23696  013E48  0E00               	movlw	0
 23697  013E4A  6F9F               	movwf	?___fltol& (0+255),b
 23698  013E4C  0E00               	movlw	0
 23699  013E4E  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23700  013E50  0E00               	movlw	0
 23701  013E52  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23702  013E54  0E00               	movlw	0
 23703  013E56  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23704                           
 23705                           ; BSR set to: 0
 23706  013E58  0012               	return	
 23707  013E5A                     l2538:
 23708                           
 23709                           ; BSR set to: 0
 23710                           
 23711                           ; BSR set to: 0
 23712                           
 23713                           ; BSR set to: 0
 23714  013E5A  90D8               	bcf	status,0,c
 23715  013E5C  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 23716  013E5E  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 23717  013E60  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 23718  013E62  339F               	rrcf	___fltol@f1& (0+255),f,b
 23719                           
 23720                           ; BSR set to: 0
 23721  013E64  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 23722  013E66  D7F9               	goto	l2538
 23723                           
 23724                           ; BSR set to: 0
 23725  013E68  D015               	goto	u10410
 23726  013E6A                     l2537:
 23727                           
 23728                           ; BSR set to: 0
 23729                           
 23730                           ; BSR set to: 0
 23731  013E6A  0E1F               	movlw	31
 23732  013E6C  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 23733  013E6E  D00F               	goto	l2543
 23734                           
 23735                           ; BSR set to: 0
 23736  013E70  0E00               	movlw	0
 23737  013E72  6F9F               	movwf	?___fltol& (0+255),b
 23738  013E74  0E00               	movlw	0
 23739  013E76  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23740  013E78  0E00               	movlw	0
 23741  013E7A  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23742  013E7C  0E00               	movlw	0
 23743  013E7E  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23744                           
 23745                           ; BSR set to: 0
 23746  013E80  0012               	return	
 23747  013E82                     
 23748                           ; BSR set to: 0
 23749                           
 23750                           ; BSR set to: 0
 23751  013E82  90D8               	bcf	status,0,c
 23752  013E84  379F               	rlcf	___fltol@f1& (0+255),f,b
 23753  013E86  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 23754  013E88  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 23755  013E8A  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 23756  013E8C  07A8               	decf	___fltol@exp1& (0+255),f,b
 23757  013E8E                     l2543:
 23758                           
 23759                           ; BSR set to: 0
 23760                           
 23761                           ; BSR set to: 0
 23762  013E8E  51A8               	movf	___fltol@exp1& (0+255),w,b
 23763  013E90  A4D8               	btfss	status,2,c
 23764  013E92  D7F7               	goto	l2544
 23765  013E94                     u10410:
 23766                           
 23767                           ; BSR set to: 0
 23768                           
 23769                           ; BSR set to: 0
 23770                           
 23771                           ; BSR set to: 0
 23772  013E94  51A7               	movf	___fltol@sign1& (0+255),w,b
 23773  013E96  B4D8               	btfsc	status,2,c
 23774  013E98  D008               	goto	l2546
 23775                           
 23776                           ; BSR set to: 0
 23777  013E9A  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 23778  013E9C  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 23779  013E9E  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 23780  013EA0  6D9F               	negf	___fltol@f1& (0+255),b
 23781  013EA2  0E00               	movlw	0
 23782  013EA4  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 23783  013EA6  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 23784  013EA8  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 23785  013EAA                     l2546:
 23786                           
 23787                           ; BSR set to: 0
 23788                           
 23789                           ; BSR set to: 0
 23790  013EAA  C09F  F09F         	movff	___fltol@f1,?___fltol
 23791  013EAE  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 23792  013EB2  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 23793  013EB6  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 23794  013EBA  0012               	return	
 23795  013EBC                     __end_of___fltol:
 23796                           	opt stack 0
 23797                           tosu	equ	0xFFF
 23798                           tosh	equ	0xFFE
 23799                           tosl	equ	0xFFD
 23800                           pclath	equ	0xFFA
 23801                           tblptru	equ	0xFF8
 23802                           tblptrh	equ	0xFF7
 23803                           tblptrl	equ	0xFF6
 23804                           tablat	equ	0xFF5
 23805                           prodh	equ	0xFF4
 23806                           prodl	equ	0xFF3
 23807                           intcon	equ	0xFF2
 23808                           indf0	equ	0xFEF
 23809                           postinc0	equ	0xFEE
 23810                           fsr0h	equ	0xFEA
 23811                           fsr0l	equ	0xFE9
 23812                           wreg	equ	0xFE8
 23813                           indf1	equ	0xFE7
 23814                           postdec1	equ	0xFE5
 23815                           fsr1h	equ	0xFE2
 23816                           fsr1l	equ	0xFE1
 23817                           indf2	equ	0xFDF
 23818                           postinc2	equ	0xFDE
 23819                           postdec2	equ	0xFDD
 23820                           plusw2	equ	0xFDB
 23821                           fsr2h	equ	0xFDA
 23822                           fsr2l	equ	0xFD9
 23823                           status	equ	0xFD8
 23824                           
 23825 ;; *************** function ___flge *****************
 23826 ;; Defined at:
 23827 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
 23828 ;; Parameters:    Size  Location     Type
 23829 ;;  ff1             4    0[BANK0 ] long 
 23830 ;;  ff2             4    4[BANK0 ] long 
 23831 ;; Auto vars:     Size  Location     Type
 23832 ;;		None
 23833 ;; Return value:  Size  Location     Type
 23834 ;;		None               void
 23835 ;; Registers used:
 23836 ;;		wreg, status,2, status,0
 23837 ;; Tracked objects:
 23838 ;;		On entry : 0/0
 23839 ;;		On exit  : 0/0
 23840 ;;		Unchanged: 0/0
 23841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23842 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23844 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23845 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23846 ;;Total ram usage:       12 bytes
 23847 ;; Hardware stack levels used:    1
 23848 ;; Hardware stack levels required when called:    7
 23849 ;; This function calls:
 23850 ;;		Nothing
 23851 ;; This function is called by:
 23852 ;;		_pow
 23853 ;;		_exp
 23854 ;;		_floor
 23855 ;; This function uses a non-reentrant model
 23856 ;;
 23857                           
 23858                           	psect	text131
 23859  01359A                     __ptext131:
 23860                           	opt stack 0
 23861  01359A                     ___flge:
 23862                           	opt stack 18
 23863                           
 23864                           ; BSR set to: 0
 23865                           ;incstack = 0
 23866  01359A  0E00               	movlw	0
 23867  01359C  0100               	movlb	0	; () banked
 23868  01359E  1560               	andwf	___flge@ff1& (0+255),w,b
 23869  0135A0  6F68               	movwf	??___flge& (0+255),b
 23870  0135A2  0E00               	movlw	0
 23871  0135A4  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 23872  0135A6  6F69               	movwf	(??___flge+1)& (0+255),b
 23873  0135A8  0E80               	movlw	128
 23874  0135AA  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 23875  0135AC  6F6A               	movwf	(??___flge+2)& (0+255),b
 23876  0135AE  0E7F               	movlw	127
 23877  0135B0  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 23878  0135B2  6F6B               	movwf	(??___flge+3)& (0+255),b
 23879  0135B4  5168               	movf	??___flge& (0+255),w,b
 23880  0135B6  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23881  0135B8  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23882  0135BA  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23883  0135BC  A4D8               	btfss	status,2,c
 23884  0135BE  D008               	goto	l2505
 23885                           
 23886                           ; BSR set to: 0
 23887  0135C0  0E00               	movlw	0
 23888  0135C2  6F60               	movwf	___flge@ff1& (0+255),b
 23889  0135C4  0E00               	movlw	0
 23890  0135C6  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 23891  0135C8  0E00               	movlw	0
 23892  0135CA  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 23893  0135CC  0E00               	movlw	0
 23894  0135CE  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 23895  0135D0                     l2505:
 23896                           
 23897                           ; BSR set to: 0
 23898                           
 23899                           ; BSR set to: 0
 23900  0135D0  0E00               	movlw	0
 23901  0135D2  1564               	andwf	___flge@ff2& (0+255),w,b
 23902  0135D4  6F68               	movwf	??___flge& (0+255),b
 23903  0135D6  0E00               	movlw	0
 23904  0135D8  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 23905  0135DA  6F69               	movwf	(??___flge+1)& (0+255),b
 23906  0135DC  0E80               	movlw	128
 23907  0135DE  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 23908  0135E0  6F6A               	movwf	(??___flge+2)& (0+255),b
 23909  0135E2  0E7F               	movlw	127
 23910  0135E4  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 23911  0135E6  6F6B               	movwf	(??___flge+3)& (0+255),b
 23912  0135E8  5168               	movf	??___flge& (0+255),w,b
 23913  0135EA  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23914  0135EC  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23915  0135EE  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23916  0135F0  A4D8               	btfss	status,2,c
 23917  0135F2  D008               	goto	l2506
 23918                           
 23919                           ; BSR set to: 0
 23920  0135F4  0E00               	movlw	0
 23921  0135F6  6F64               	movwf	___flge@ff2& (0+255),b
 23922  0135F8  0E00               	movlw	0
 23923  0135FA  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 23924  0135FC  0E00               	movlw	0
 23925  0135FE  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 23926  013600  0E00               	movlw	0
 23927  013602  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 23928  013604                     l2506:
 23929                           
 23930                           ; BSR set to: 0
 23931                           
 23932                           ; BSR set to: 0
 23933  013604  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 23934  013606  D01D               	goto	l2507
 23935                           
 23936                           ; BSR set to: 0
 23937  013608  C060  F068         	movff	___flge@ff1,??___flge
 23938  01360C  C061  F069         	movff	___flge@ff1+1,??___flge+1
 23939  013610  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 23940  013614  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 23941  013618  1F68               	comf	??___flge& (0+255),f,b
 23942  01361A  1F69               	comf	(??___flge+1)& (0+255),f,b
 23943  01361C  1F6A               	comf	(??___flge+2)& (0+255),f,b
 23944  01361E  1F6B               	comf	(??___flge+3)& (0+255),f,b
 23945  013620  2B68               	incf	??___flge& (0+255),f,b
 23946  013622  0E00               	movlw	0
 23947  013624  2369               	addwfc	(??___flge+1)& (0+255),f,b
 23948  013626  236A               	addwfc	(??___flge+2)& (0+255),f,b
 23949  013628  236B               	addwfc	(??___flge+3)& (0+255),f,b
 23950  01362A  0E00               	movlw	0
 23951  01362C  2568               	addwf	??___flge& (0+255),w,b
 23952  01362E  6F60               	movwf	___flge@ff1& (0+255),b
 23953  013630  0E00               	movlw	0
 23954  013632  2169               	addwfc	(??___flge+1)& (0+255),w,b
 23955  013634  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 23956  013636  0E00               	movlw	0
 23957  013638  216A               	addwfc	(??___flge+2)& (0+255),w,b
 23958  01363A  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 23959  01363C  0E80               	movlw	128
 23960  01363E  216B               	addwfc	(??___flge+3)& (0+255),w,b
 23961  013640  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 23962  013642                     l2507:
 23963                           
 23964                           ; BSR set to: 0
 23965                           
 23966                           ; BSR set to: 0
 23967  013642  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 23968  013644  D01D               	goto	l2508
 23969                           
 23970                           ; BSR set to: 0
 23971  013646  C064  F068         	movff	___flge@ff2,??___flge
 23972  01364A  C065  F069         	movff	___flge@ff2+1,??___flge+1
 23973  01364E  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 23974  013652  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 23975  013656  1F68               	comf	??___flge& (0+255),f,b
 23976  013658  1F69               	comf	(??___flge+1)& (0+255),f,b
 23977  01365A  1F6A               	comf	(??___flge+2)& (0+255),f,b
 23978  01365C  1F6B               	comf	(??___flge+3)& (0+255),f,b
 23979  01365E  2B68               	incf	??___flge& (0+255),f,b
 23980  013660  0E00               	movlw	0
 23981  013662  2369               	addwfc	(??___flge+1)& (0+255),f,b
 23982  013664  236A               	addwfc	(??___flge+2)& (0+255),f,b
 23983  013666  236B               	addwfc	(??___flge+3)& (0+255),f,b
 23984  013668  0E00               	movlw	0
 23985  01366A  2568               	addwf	??___flge& (0+255),w,b
 23986  01366C  6F64               	movwf	___flge@ff2& (0+255),b
 23987  01366E  0E00               	movlw	0
 23988  013670  2169               	addwfc	(??___flge+1)& (0+255),w,b
 23989  013672  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 23990  013674  0E00               	movlw	0
 23991  013676  216A               	addwfc	(??___flge+2)& (0+255),w,b
 23992  013678  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 23993  01367A  0E80               	movlw	128
 23994  01367C  216B               	addwfc	(??___flge+3)& (0+255),w,b
 23995  01367E  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 23996  013680                     l2508:
 23997                           
 23998                           ; BSR set to: 0
 23999  013680  0E00               	movlw	0
 24000  013682  1B60               	xorwf	___flge@ff1& (0+255),f,b
 24001  013684  0E00               	movlw	0
 24002  013686  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 24003  013688  0E00               	movlw	0
 24004  01368A  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 24005  01368C  0E80               	movlw	128
 24006  01368E  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 24007  013690  0E00               	movlw	0
 24008  013692  1B64               	xorwf	___flge@ff2& (0+255),f,b
 24009  013694  0E00               	movlw	0
 24010  013696  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 24011  013698  0E00               	movlw	0
 24012  01369A  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 24013  01369C  0E80               	movlw	128
 24014  01369E  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 24015  0136A0  5164               	movf	___flge@ff2& (0+255),w,b
 24016  0136A2  5D60               	subwf	___flge@ff1& (0+255),w,b
 24017  0136A4  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 24018  0136A6  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 24019  0136A8  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 24020  0136AA  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 24021  0136AC  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 24022  0136AE  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 24023  0136B0  B0D8               	btfsc	status,0,c
 24024  0136B2  D002               	goto	l12362
 24025                           
 24026                           ; BSR set to: 0
 24027  0136B4  90D8               	bcf	status,0,c
 24028  0136B6  0012               	return	
 24029  0136B8                     l12362:
 24030                           
 24031                           ; BSR set to: 0
 24032                           
 24033                           ; BSR set to: 0
 24034  0136B8  80D8               	bsf	status,0,c
 24035                           
 24036                           ; BSR set to: 0
 24037  0136BA  0012               	return	
 24038  0136BC                     __end_of___flge:
 24039                           	opt stack 0
 24040                           tosu	equ	0xFFF
 24041                           tosh	equ	0xFFE
 24042                           tosl	equ	0xFFD
 24043                           pclath	equ	0xFFA
 24044                           tblptru	equ	0xFF8
 24045                           tblptrh	equ	0xFF7
 24046                           tblptrl	equ	0xFF6
 24047                           tablat	equ	0xFF5
 24048                           prodh	equ	0xFF4
 24049                           prodl	equ	0xFF3
 24050                           intcon	equ	0xFF2
 24051                           indf0	equ	0xFEF
 24052                           postinc0	equ	0xFEE
 24053                           fsr0h	equ	0xFEA
 24054                           fsr0l	equ	0xFE9
 24055                           wreg	equ	0xFE8
 24056                           indf1	equ	0xFE7
 24057                           postdec1	equ	0xFE5
 24058                           fsr1h	equ	0xFE2
 24059                           fsr1l	equ	0xFE1
 24060                           indf2	equ	0xFDF
 24061                           postinc2	equ	0xFDE
 24062                           postdec2	equ	0xFDD
 24063                           plusw2	equ	0xFDB
 24064                           fsr2h	equ	0xFDA
 24065                           fsr2l	equ	0xFD9
 24066                           status	equ	0xFD8
 24067                           
 24068 ;; *************** function _eval_poly *****************
 24069 ;; Defined at:
 24070 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 24071 ;; Parameters:    Size  Location     Type
 24072 ;;  x               4   63[BANK0 ] long 
 24073 ;;  d               2   67[BANK0 ] PTR const 
 24074 ;;		 -> log@coeff(36), exp@coeff(40), 
 24075 ;;  n               2   69[BANK0 ] int 
 24076 ;; Auto vars:     Size  Location     Type
 24077 ;;  res             4   75[BANK0 ] int 
 24078 ;; Return value:  Size  Location     Type
 24079 ;;                  4   63[BANK0 ] int 
 24080 ;; Registers used:
 24081 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24082 ;; Tracked objects:
 24083 ;;		On entry : 0/0
 24084 ;;		On exit  : 0/0
 24085 ;;		Unchanged: 0/0
 24086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24087 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24088 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24089 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24090 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24091 ;;Total ram usage:       16 bytes
 24092 ;; Hardware stack levels used:    1
 24093 ;; Hardware stack levels required when called:    8
 24094 ;; This function calls:
 24095 ;;		___fladd
 24096 ;;		___flmul
 24097 ;; This function is called by:
 24098 ;;		_exp
 24099 ;;		_log
 24100 ;; This function uses a non-reentrant model
 24101 ;;
 24102                           
 24103                           	psect	text132
 24104  013AFA                     __ptext132:
 24105                           	opt stack 0
 24106  013AFA                     _eval_poly:
 24107                           	opt stack 18
 24108                           
 24109                           ; BSR set to: 0
 24110                           ;incstack = 0
 24111  013AFA  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24112  013AFE  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24113  013B02  0100               	movlb	0	; () banked
 24114  013B04  90D8               	bcf	status,0,c
 24115  013B06  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24116  013B08  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24117  013B0A  90D8               	bcf	status,0,c
 24118  013B0C  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24119  013B0E  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24120  013B10  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24121  013B14  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24122  013B18  51A7               	movf	??_eval_poly& (0+255),w,b
 24123  013B1A  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24124  013B1C  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24125  013B1E  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24126  013B20  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24127  013B24  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24128  013B28                     	if	0	;tblptru may be non-zero
 24129  013B28                     	endif
 24130  013B28                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24131  013B28  0E00               	movlw	low (__mediumconst shr (0+16))
 24132  013B2A  6EF8               	movwf	tblptru,c
 24133  013B2C                     	endif
 24134  013B2C  0009               	tblrd		*+
 24135  013B2E  CFF5 F0AB          	movff	tablat,eval_poly@res
 24136  013B32  0009               	tblrd		*+
 24137  013B34  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 24138  013B38  0009               	tblrd		*+
 24139  013B3A  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 24140  013B3E  000A               	tblrd		*-
 24141  013B40  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 24142  013B44  D04C               	goto	l2949
 24143  013B46                     
 24144                           ; BSR set to: 0
 24145                           
 24146                           ; BSR set to: 0
 24147  013B46  C0AB  F072         	movff	eval_poly@res,___flmul@a
 24148  013B4A  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 24149  013B4E  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 24150  013B52  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 24151  013B56  C09F  F06E         	movff	eval_poly@x,___flmul@b
 24152  013B5A  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 24153  013B5E  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 24154  013B62  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 24155  013B66  EC99  F085         	call	___flmul	;wreg free
 24156  013B6A  C06E  F08B         	movff	?___flmul,___fladd@b
 24157  013B6E  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 24158  013B72  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 24159  013B76  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 24160  013B7A  0100               	movlb	0	; () banked
 24161  013B7C  07A5               	decf	eval_poly@n& (0+255),f,b
 24162  013B7E  A0D8               	btfss	status,0,c
 24163  013B80  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 24164  013B82  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24165  013B86  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24166  013B8A  90D8               	bcf	status,0,c
 24167  013B8C  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24168  013B8E  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24169  013B90  90D8               	bcf	status,0,c
 24170  013B92  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24171  013B94  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24172  013B96  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24173  013B9A  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24174  013B9E  51A7               	movf	??_eval_poly& (0+255),w,b
 24175  013BA0  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24176  013BA2  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24177  013BA4  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24178  013BA6  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24179  013BAA  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24180  013BAE                     	if	0	;tblptru may be non-zero
 24181  013BAE                     	endif
 24182  013BAE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24183  013BAE  0E00               	movlw	low (__mediumconst shr (0+16))
 24184  013BB0  6EF8               	movwf	tblptru,c
 24185  013BB2                     	endif
 24186  013BB2  0009               	tblrd		*+
 24187  013BB4  CFF5 F08F          	movff	tablat,___fladd@a
 24188  013BB8  0009               	tblrd		*+
 24189  013BBA  CFF5 F090          	movff	tablat,___fladd@a+1
 24190  013BBE  0009               	tblrd		*+
 24191  013BC0  CFF5 F091          	movff	tablat,___fladd@a+2
 24192  013BC4  000A               	tblrd		*-
 24193  013BC6  CFF5 F092          	movff	tablat,___fladd@a+3
 24194  013BCA  EC42  F087         	call	___fladd	;wreg free
 24195  013BCE  C08B  F0AB         	movff	?___fladd,eval_poly@res
 24196  013BD2  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 24197  013BD6  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 24198  013BDA  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 24199  013BDE                     l2949:
 24200  013BDE  0100               	movlb	0	; () banked
 24201  013BE0  51A5               	movf	eval_poly@n& (0+255),w,b
 24202  013BE2  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 24203  013BE4  A4D8               	btfss	status,2,c
 24204  013BE6  D7AF               	goto	l2950
 24205                           
 24206                           ; BSR set to: 0
 24207  013BE8  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 24208  013BEC  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 24209  013BF0  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 24210  013BF4  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 24211                           
 24212                           ; BSR set to: 0
 24213  013BF8  0012               	return		;funcret
 24214  013BFA                     __end_of_eval_poly:
 24215                           	opt stack 0
 24216                           tosu	equ	0xFFF
 24217                           tosh	equ	0xFFE
 24218                           tosl	equ	0xFFD
 24219                           pclath	equ	0xFFA
 24220                           tblptru	equ	0xFF8
 24221                           tblptrh	equ	0xFF7
 24222                           tblptrl	equ	0xFF6
 24223                           tablat	equ	0xFF5
 24224                           prodh	equ	0xFF4
 24225                           prodl	equ	0xFF3
 24226                           intcon	equ	0xFF2
 24227                           indf0	equ	0xFEF
 24228                           postinc0	equ	0xFEE
 24229                           fsr0h	equ	0xFEA
 24230                           fsr0l	equ	0xFE9
 24231                           wreg	equ	0xFE8
 24232                           indf1	equ	0xFE7
 24233                           postdec1	equ	0xFE5
 24234                           fsr1h	equ	0xFE2
 24235                           fsr1l	equ	0xFE1
 24236                           indf2	equ	0xFDF
 24237                           postinc2	equ	0xFDE
 24238                           postdec2	equ	0xFDD
 24239                           plusw2	equ	0xFDB
 24240                           fsr2h	equ	0xFDA
 24241                           fsr2l	equ	0xFD9
 24242                           status	equ	0xFD8
 24243                           
 24244 ;; *************** function ___flmul *****************
 24245 ;; Defined at:
 24246 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 24247 ;; Parameters:    Size  Location     Type
 24248 ;;  b               4   14[BANK0 ] int 
 24249 ;;  a               4   18[BANK0 ] int 
 24250 ;; Auto vars:     Size  Location     Type
 24251 ;;  prod            4   33[BANK0 ] struct .
 24252 ;;  grs             4   28[BANK0 ] unsigned long 
 24253 ;;  temp            2   37[BANK0 ] struct .
 24254 ;;  bexp            1   32[BANK0 ] unsigned char 
 24255 ;;  aexp            1   27[BANK0 ] unsigned char 
 24256 ;;  sign            1   26[BANK0 ] unsigned char 
 24257 ;; Return value:  Size  Location     Type
 24258 ;;                  4   14[BANK0 ] unsigned char 
 24259 ;; Registers used:
 24260 ;;		wreg, status,2, status,0, prodl, prodh
 24261 ;; Tracked objects:
 24262 ;;		On entry : 0/0
 24263 ;;		On exit  : 0/0
 24264 ;;		Unchanged: 0/0
 24265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24266 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24267 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24268 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24269 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24270 ;;Total ram usage:       25 bytes
 24271 ;; Hardware stack levels used:    1
 24272 ;; Hardware stack levels required when called:    7
 24273 ;; This function calls:
 24274 ;;		Nothing
 24275 ;; This function is called by:
 24276 ;;		_ADCAverage
 24277 ;;		_pow
 24278 ;;		_exp
 24279 ;;		_log
 24280 ;;		_eval_poly
 24281 ;;		_ADC_Voltage
 24282 ;; This function uses a non-reentrant model
 24283 ;;
 24284                           
 24285                           	psect	text133
 24286  010B32                     __ptext133:
 24287                           	opt stack 0
 24288  010B32                     ___flmul:
 24289                           	opt stack 18
 24290                           
 24291                           ; BSR set to: 0
 24292                           ;incstack = 0
 24293  010B32  0100               	movlb	0	; () banked
 24294  010B34  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24295  010B36  0B80               	andlw	128
 24296  010B38  6F7A               	movwf	___flmul@sign& (0+255),b
 24297  010B3A  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24298  010B3C  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 24299  010B3E  6F80               	movwf	___flmul@bexp& (0+255),b
 24300                           
 24301                           ; BSR set to: 0
 24302  010B40  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 24303                           
 24304                           ; BSR set to: 0
 24305  010B42  8180               	bsf	___flmul@bexp& (0+255),0,b
 24306                           
 24307                           ; BSR set to: 0
 24308                           
 24309                           ; BSR set to: 0
 24310  010B44  5180               	movf	___flmul@bexp& (0+255),w,b
 24311  010B46  B4D8               	btfsc	status,2,c
 24312  010B48  D00D               	goto	l2840
 24313                           
 24314                           ; BSR set to: 0
 24315  010B4A  2980               	incf	___flmul@bexp& (0+255),w,b
 24316  010B4C  A4D8               	btfss	status,2,c
 24317  010B4E  D008               	goto	l2841
 24318                           
 24319                           ; BSR set to: 0
 24320  010B50  0E00               	movlw	0
 24321  010B52  6F6E               	movwf	___flmul@b& (0+255),b
 24322  010B54  0E00               	movlw	0
 24323  010B56  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24324  010B58  0E00               	movlw	0
 24325  010B5A  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24326  010B5C  0E00               	movlw	0
 24327  010B5E  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24328  010B60                     l2841:
 24329                           
 24330                           ; BSR set to: 0
 24331                           
 24332                           ; BSR set to: 0
 24333  010B60  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 24334  010B62  D008               	goto	l2842
 24335  010B64                     l2840:
 24336                           
 24337                           ; BSR set to: 0
 24338                           
 24339                           ; BSR set to: 0
 24340  010B64  0E00               	movlw	0
 24341  010B66  6F6E               	movwf	___flmul@b& (0+255),b
 24342  010B68  0E00               	movlw	0
 24343  010B6A  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24344  010B6C  0E00               	movlw	0
 24345  010B6E  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24346  010B70  0E00               	movlw	0
 24347  010B72  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24348  010B74                     l2842:
 24349                           
 24350                           ; BSR set to: 0
 24351                           
 24352                           ; BSR set to: 0
 24353  010B74  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24354  010B76  0B80               	andlw	128
 24355  010B78  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 24356                           
 24357                           ; BSR set to: 0
 24358  010B7A  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24359  010B7C  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 24360  010B7E  6F7B               	movwf	___flmul@aexp& (0+255),b
 24361                           
 24362                           ; BSR set to: 0
 24363  010B80  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 24364                           
 24365                           ; BSR set to: 0
 24366  010B82  817B               	bsf	___flmul@aexp& (0+255),0,b
 24367                           
 24368                           ; BSR set to: 0
 24369                           
 24370                           ; BSR set to: 0
 24371  010B84  517B               	movf	___flmul@aexp& (0+255),w,b
 24372  010B86  B4D8               	btfsc	status,2,c
 24373  010B88  D00D               	goto	l2844
 24374                           
 24375                           ; BSR set to: 0
 24376  010B8A  297B               	incf	___flmul@aexp& (0+255),w,b
 24377  010B8C  A4D8               	btfss	status,2,c
 24378  010B8E  D008               	goto	l2845
 24379                           
 24380                           ; BSR set to: 0
 24381  010B90  0E00               	movlw	0
 24382  010B92  6F72               	movwf	___flmul@a& (0+255),b
 24383  010B94  0E00               	movlw	0
 24384  010B96  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24385  010B98  0E00               	movlw	0
 24386  010B9A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24387  010B9C  0E00               	movlw	0
 24388  010B9E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24389  010BA0                     l2845:
 24390                           
 24391                           ; BSR set to: 0
 24392                           
 24393                           ; BSR set to: 0
 24394  010BA0  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 24395  010BA2  D008               	goto	l2846
 24396  010BA4                     l2844:
 24397                           
 24398                           ; BSR set to: 0
 24399                           
 24400                           ; BSR set to: 0
 24401  010BA4  0E00               	movlw	0
 24402  010BA6  6F72               	movwf	___flmul@a& (0+255),b
 24403  010BA8  0E00               	movlw	0
 24404  010BAA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24405  010BAC  0E00               	movlw	0
 24406  010BAE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24407  010BB0  0E00               	movlw	0
 24408  010BB2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24409  010BB4                     l2846:
 24410                           
 24411                           ; BSR set to: 0
 24412  010BB4  517B               	movf	___flmul@aexp& (0+255),w,b
 24413  010BB6  B4D8               	btfsc	status,2,c
 24414  010BB8  D003               	goto	u10130
 24415                           
 24416                           ; BSR set to: 0
 24417  010BBA  5180               	movf	___flmul@bexp& (0+255),w,b
 24418  010BBC  A4D8               	btfss	status,2,c
 24419  010BBE  D009               	goto	l2847
 24420  010BC0                     u10130:
 24421                           
 24422                           ; BSR set to: 0
 24423                           
 24424                           ; BSR set to: 0
 24425  010BC0  0E00               	movlw	0
 24426  010BC2  6F6E               	movwf	?___flmul& (0+255),b
 24427  010BC4  0E00               	movlw	0
 24428  010BC6  6F6F               	movwf	(?___flmul+1)& (0+255),b
 24429  010BC8  0E00               	movlw	0
 24430  010BCA  6F70               	movwf	(?___flmul+2)& (0+255),b
 24431  010BCC  0E00               	movlw	0
 24432  010BCE  6F71               	movwf	(?___flmul+3)& (0+255),b
 24433                           
 24434                           ; BSR set to: 0
 24435  010BD0  0012               	return	
 24436  010BD2                     l2847:
 24437                           
 24438                           ; BSR set to: 0
 24439                           
 24440                           ; BSR set to: 0
 24441  010BD2  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24442  010BD4  036E               	mulwf	___flmul@b& (0+255),b
 24443  010BD6  CFF3 F085          	movff	prodl,___flmul@temp
 24444  010BDA  CFF4 F086          	movff	prodh,___flmul@temp+1
 24445                           
 24446                           ; BSR set to: 0
 24447  010BDE  5185               	movf	___flmul@temp& (0+255),w,b
 24448  010BE0  6F7C               	movwf	___flmul@grs& (0+255),b
 24449  010BE2  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 24450  010BE4  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 24451  010BE6  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 24452                           
 24453                           ; BSR set to: 0
 24454  010BE8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24455  010BEA  6F81               	movwf	___flmul@prod& (0+255),b
 24456  010BEC  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 24457  010BEE  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 24458  010BF0  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 24459  010BF2  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24460  010BF4  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24461  010BF6  CFF3 F085          	movff	prodl,___flmul@temp
 24462  010BFA  CFF4 F086          	movff	prodh,___flmul@temp+1
 24463                           
 24464                           ; BSR set to: 0
 24465  010BFE  5185               	movf	___flmul@temp& (0+255),w,b
 24466  010C00  277C               	addwf	___flmul@grs& (0+255),f,b
 24467  010C02  0E00               	movlw	0
 24468  010C04  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24469  010C06  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24470  010C08  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24471                           
 24472                           ; BSR set to: 0
 24473  010C0A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24474  010C0C  2781               	addwf	___flmul@prod& (0+255),f,b
 24475  010C0E  0E00               	movlw	0
 24476  010C10  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24477  010C12  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24478  010C14  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24479  010C16  5172               	movf	___flmul@a& (0+255),w,b
 24480  010C18  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24481  010C1A  CFF3 F085          	movff	prodl,___flmul@temp
 24482  010C1E  CFF4 F086          	movff	prodh,___flmul@temp+1
 24483                           
 24484                           ; BSR set to: 0
 24485  010C22  5185               	movf	___flmul@temp& (0+255),w,b
 24486  010C24  277C               	addwf	___flmul@grs& (0+255),f,b
 24487  010C26  0E00               	movlw	0
 24488  010C28  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24489  010C2A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24490  010C2C  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24491                           
 24492                           ; BSR set to: 0
 24493  010C2E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24494  010C30  2781               	addwf	___flmul@prod& (0+255),f,b
 24495  010C32  0E00               	movlw	0
 24496  010C34  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24497  010C36  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24498  010C38  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24499                           
 24500                           ; BSR set to: 0
 24501  010C3A  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24502  010C3E  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24503  010C42  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24504  010C46  6B7C               	clrf	___flmul@grs& (0+255),b
 24505                           
 24506                           ; BSR set to: 0
 24507  010C48  5172               	movf	___flmul@a& (0+255),w,b
 24508  010C4A  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24509  010C4C  CFF3 F085          	movff	prodl,___flmul@temp
 24510  010C50  CFF4 F086          	movff	prodh,___flmul@temp+1
 24511                           
 24512                           ; BSR set to: 0
 24513  010C54  5185               	movf	___flmul@temp& (0+255),w,b
 24514  010C56  277C               	addwf	___flmul@grs& (0+255),f,b
 24515  010C58  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24516  010C5A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24517  010C5C  0E00               	movlw	0
 24518  010C5E  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24519  010C60  0E00               	movlw	0
 24520  010C62  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24521                           
 24522                           ; BSR set to: 0
 24523  010C64  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24524  010C66  036E               	mulwf	___flmul@b& (0+255),b
 24525  010C68  CFF3 F085          	movff	prodl,___flmul@temp
 24526  010C6C  CFF4 F086          	movff	prodh,___flmul@temp+1
 24527                           
 24528                           ; BSR set to: 0
 24529  010C70  5185               	movf	___flmul@temp& (0+255),w,b
 24530  010C72  277C               	addwf	___flmul@grs& (0+255),f,b
 24531  010C74  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24532  010C76  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24533  010C78  0E00               	movlw	0
 24534  010C7A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24535  010C7C  0E00               	movlw	0
 24536  010C7E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24537                           
 24538                           ; BSR set to: 0
 24539  010C80  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24540  010C84  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24541  010C88  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24542  010C8C  6B7C               	clrf	___flmul@grs& (0+255),b
 24543  010C8E  5172               	movf	___flmul@a& (0+255),w,b
 24544  010C90  036E               	mulwf	___flmul@b& (0+255),b
 24545  010C92  CFF3 F085          	movff	prodl,___flmul@temp
 24546  010C96  CFF4 F086          	movff	prodh,___flmul@temp+1
 24547                           
 24548                           ; BSR set to: 0
 24549  010C9A  5185               	movf	___flmul@temp& (0+255),w,b
 24550  010C9C  277C               	addwf	___flmul@grs& (0+255),f,b
 24551  010C9E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24552  010CA0  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24553  010CA2  0E00               	movlw	0
 24554  010CA4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24555  010CA6  0E00               	movlw	0
 24556  010CA8  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24557                           
 24558                           ; BSR set to: 0
 24559  010CAA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24560  010CAC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24561  010CAE  CFF3 F085          	movff	prodl,___flmul@temp
 24562  010CB2  CFF4 F086          	movff	prodh,___flmul@temp+1
 24563  010CB6  5185               	movf	___flmul@temp& (0+255),w,b
 24564  010CB8  2781               	addwf	___flmul@prod& (0+255),f,b
 24565  010CBA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24566  010CBC  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24567  010CBE  0E00               	movlw	0
 24568  010CC0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24569  010CC2  0E00               	movlw	0
 24570  010CC4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24571                           
 24572                           ; BSR set to: 0
 24573  010CC6  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24574  010CC8  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24575  010CCA  CFF3 F085          	movff	prodl,___flmul@temp
 24576  010CCE  CFF4 F086          	movff	prodh,___flmul@temp+1
 24577                           
 24578                           ; BSR set to: 0
 24579  010CD2  5185               	movf	___flmul@temp& (0+255),w,b
 24580  010CD4  2781               	addwf	___flmul@prod& (0+255),f,b
 24581  010CD6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24582  010CD8  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24583  010CDA  0E00               	movlw	0
 24584  010CDC  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24585  010CDE  0E00               	movlw	0
 24586  010CE0  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24587  010CE2  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24588  010CE4  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24589  010CE6  CFF3 F085          	movff	prodl,___flmul@temp
 24590  010CEA  CFF4 F086          	movff	prodh,___flmul@temp+1
 24591                           
 24592                           ; BSR set to: 0
 24593  010CEE  5185               	movf	___flmul@temp& (0+255),w,b
 24594  010CF0  6F76               	movwf	??___flmul& (0+255),b
 24595  010CF2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24596  010CF4  6F77               	movwf	(??___flmul+1)& (0+255),b
 24597  010CF6  6B78               	clrf	(??___flmul+2)& (0+255),b
 24598  010CF8  6B79               	clrf	(??___flmul+3)& (0+255),b
 24599  010CFA  C078  F079         	movff	??___flmul+2,??___flmul+3
 24600  010CFE  C077  F078         	movff	??___flmul+1,??___flmul+2
 24601  010D02  C076  F077         	movff	??___flmul,??___flmul+1
 24602  010D06  6B76               	clrf	??___flmul& (0+255),b
 24603  010D08  5176               	movf	??___flmul& (0+255),w,b
 24604  010D0A  2781               	addwf	___flmul@prod& (0+255),f,b
 24605  010D0C  5177               	movf	(??___flmul+1)& (0+255),w,b
 24606  010D0E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24607  010D10  5178               	movf	(??___flmul+2)& (0+255),w,b
 24608  010D12  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24609  010D14  5179               	movf	(??___flmul+3)& (0+255),w,b
 24610  010D16  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24611                           
 24612                           ; BSR set to: 0
 24613  010D18  C07C  F076         	movff	___flmul@grs,??___flmul
 24614  010D1C  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 24615  010D20  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 24616  010D24  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 24617  010D28  0E19               	movlw	25
 24618  010D2A  D005               	goto	u10140
 24619  010D2C                     u10145:
 24620  010D2C  90D8               	bcf	status,0,c
 24621  010D2E  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24622  010D30  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24623  010D32  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24624  010D34  3376               	rrcf	??___flmul& (0+255),f,b
 24625  010D36                     u10140:
 24626  010D36  2EE8               	decfsz	wreg,f,c
 24627  010D38  D7F9               	goto	u10145
 24628  010D3A  5176               	movf	??___flmul& (0+255),w,b
 24629  010D3C  2781               	addwf	___flmul@prod& (0+255),f,b
 24630  010D3E  5177               	movf	(??___flmul+1)& (0+255),w,b
 24631  010D40  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24632  010D42  5178               	movf	(??___flmul+2)& (0+255),w,b
 24633  010D44  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24634  010D46  5179               	movf	(??___flmul+3)& (0+255),w,b
 24635  010D48  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24636                           
 24637                           ; BSR set to: 0
 24638  010D4A  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24639  010D4E  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24640  010D52  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24641  010D56  6B7C               	clrf	___flmul@grs& (0+255),b
 24642                           
 24643                           ; BSR set to: 0
 24644  010D58  517B               	movf	___flmul@aexp& (0+255),w,b
 24645  010D5A  C080  F076         	movff	___flmul@bexp,??___flmul
 24646  010D5E  6B77               	clrf	(??___flmul+1)& (0+255),b
 24647  010D60  2776               	addwf	??___flmul& (0+255),f,b
 24648  010D62  0E00               	movlw	0
 24649  010D64  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 24650  010D66  0E82               	movlw	130
 24651  010D68  2576               	addwf	??___flmul& (0+255),w,b
 24652  010D6A  6F85               	movwf	___flmul@temp& (0+255),b
 24653  010D6C  0EFF               	movlw	255
 24654  010D6E  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 24655  010D70  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 24656  010D72  D00F               	goto	l2851
 24657  010D74                     
 24658                           ; BSR set to: 0
 24659                           
 24660                           ; BSR set to: 0
 24661  010D74  90D8               	bcf	status,0,c
 24662  010D76  3781               	rlcf	___flmul@prod& (0+255),f,b
 24663  010D78  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 24664  010D7A  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 24665  010D7C  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 24666                           
 24667                           ; BSR set to: 0
 24668  010D7E  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 24669                           
 24670                           ; BSR set to: 0
 24671  010D80  8181               	bsf	___flmul@prod& (0+255),0,b
 24672                           
 24673                           ; BSR set to: 0
 24674  010D82  90D8               	bcf	status,0,c
 24675  010D84  377C               	rlcf	___flmul@grs& (0+255),f,b
 24676  010D86  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 24677  010D88  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 24678  010D8A  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 24679  010D8C  0785               	decf	___flmul@temp& (0+255),f,b
 24680  010D8E  A0D8               	btfss	status,0,c
 24681  010D90  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 24682  010D92                     l2851:
 24683                           
 24684                           ; BSR set to: 0
 24685                           
 24686                           ; BSR set to: 0
 24687  010D92  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 24688  010D94  D7EF               	goto	l2852
 24689                           
 24690                           ; BSR set to: 0
 24691                           
 24692                           ; BSR set to: 0
 24693  010D96  0E00               	movlw	0
 24694  010D98  6F7B               	movwf	___flmul@aexp& (0+255),b
 24695                           
 24696                           ; BSR set to: 0
 24697  010D9A  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 24698  010D9C  D016               	goto	l2858
 24699                           
 24700                           ; BSR set to: 0
 24701  010D9E  0EFF               	movlw	255
 24702  010DA0  157C               	andwf	___flmul@grs& (0+255),w,b
 24703  010DA2  6F76               	movwf	??___flmul& (0+255),b
 24704  010DA4  0EFF               	movlw	255
 24705  010DA6  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 24706  010DA8  6F77               	movwf	(??___flmul+1)& (0+255),b
 24707  010DAA  0EFF               	movlw	255
 24708  010DAC  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 24709  010DAE  6F78               	movwf	(??___flmul+2)& (0+255),b
 24710  010DB0  0E7F               	movlw	127
 24711  010DB2  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 24712  010DB4  6F79               	movwf	(??___flmul+3)& (0+255),b
 24713  010DB6  5176               	movf	??___flmul& (0+255),w,b
 24714  010DB8  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 24715  010DBA  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 24716  010DBC  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 24717  010DBE  A4D8               	btfss	status,2,c
 24718  010DC0  D002               	goto	u10190
 24719                           
 24720                           ; BSR set to: 0
 24721                           
 24722                           ; BSR set to: 0
 24723  010DC2  A181               	btfss	___flmul@prod& (0+255),0,b
 24724  010DC4  D002               	goto	l2858
 24725  010DC6                     u10190:
 24726                           
 24727                           ; BSR set to: 0
 24728  010DC6  0E01               	movlw	1
 24729  010DC8  6F7B               	movwf	___flmul@aexp& (0+255),b
 24730  010DCA                     l2858:
 24731                           
 24732                           ; BSR set to: 0
 24733                           
 24734                           ; BSR set to: 0
 24735                           
 24736                           ; BSR set to: 0
 24737  010DCA  517B               	movf	___flmul@aexp& (0+255),w,b
 24738  010DCC  B4D8               	btfsc	status,2,c
 24739  010DCE  D01F               	goto	l2860
 24740                           
 24741                           ; BSR set to: 0
 24742  010DD0  0E01               	movlw	1
 24743  010DD2  2781               	addwf	___flmul@prod& (0+255),f,b
 24744  010DD4  0E00               	movlw	0
 24745  010DD6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24746  010DD8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24747  010DDA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24748                           
 24749                           ; BSR set to: 0
 24750  010DDC  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 24751  010DDE  D017               	goto	l2860
 24752                           
 24753                           ; BSR set to: 0
 24754  010DE0  C081  F076         	movff	___flmul@prod,??___flmul
 24755  010DE4  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 24756  010DE8  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 24757  010DEC  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 24758  010DF0  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 24759  010DF2  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24760  010DF4  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24761  010DF6  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24762  010DF8  3376               	rrcf	??___flmul& (0+255),f,b
 24763  010DFA  C076  F081         	movff	??___flmul,___flmul@prod
 24764  010DFE  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 24765  010E02  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 24766  010E06  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 24767                           
 24768                           ; BSR set to: 0
 24769  010E0A  4B85               	infsnz	___flmul@temp& (0+255),f,b
 24770  010E0C  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 24771  010E0E                     l2860:
 24772                           
 24773                           ; BSR set to: 0
 24774                           
 24775                           ; BSR set to: 0
 24776                           
 24777                           ; BSR set to: 0
 24778  010E0E  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24779  010E10  D00D               	goto	l2861
 24780  010E12  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24781  010E14  E103               	bnz	u10220
 24782  010E16  2985               	incf	___flmul@temp& (0+255),w,b
 24783  010E18  A0D8               	btfss	status,0,c
 24784  010E1A  D008               	goto	l2861
 24785  010E1C                     u10220:
 24786                           
 24787                           ; BSR set to: 0
 24788  010E1C  0E00               	movlw	0
 24789  010E1E  6F81               	movwf	___flmul@prod& (0+255),b
 24790  010E20  0E00               	movlw	0
 24791  010E22  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24792  010E24  0E80               	movlw	128
 24793  010E26  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24794  010E28  0E7F               	movlw	127
 24795  010E2A  D020               	goto	L11
 24796  010E2C                     l2861:
 24797                           
 24798                           ; BSR set to: 0
 24799                           
 24800                           ; BSR set to: 0
 24801  010E2C  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24802  010E2E  D005               	goto	u10230
 24803  010E30  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24804  010E32  E10E               	bnz	l2863
 24805  010E34  0585               	decf	___flmul@temp& (0+255),w,b
 24806  010E36  B0D8               	btfsc	status,0,c
 24807  010E38  D00B               	goto	l2863
 24808  010E3A                     u10230:
 24809                           
 24810                           ; BSR set to: 0
 24811  010E3A  0E00               	movlw	0
 24812  010E3C  6F81               	movwf	___flmul@prod& (0+255),b
 24813  010E3E  0E00               	movlw	0
 24814  010E40  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24815  010E42  0E00               	movlw	0
 24816  010E44  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24817  010E46  0E00               	movlw	0
 24818  010E48  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24819  010E4A  0E00               	movlw	0
 24820  010E4C  6F7A               	movwf	___flmul@sign& (0+255),b
 24821  010E4E  D00F               	goto	l2864
 24822  010E50                     l2863:
 24823                           
 24824                           ; BSR set to: 0
 24825  010E50  C085  F080         	movff	___flmul@temp,___flmul@bexp
 24826                           
 24827                           ; BSR set to: 0
 24828  010E54  0EFF               	movlw	255
 24829  010E56  1781               	andwf	___flmul@prod& (0+255),f,b
 24830  010E58  0EFF               	movlw	255
 24831  010E5A  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 24832  010E5C  0E7F               	movlw	127
 24833  010E5E  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 24834  010E60  0E00               	movlw	0
 24835  010E62  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 24836                           
 24837                           ; BSR set to: 0
 24838  010E64  B180               	btfsc	___flmul@bexp& (0+255),0,b
 24839                           
 24840                           ; BSR set to: 0
 24841  010E66  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 24842                           
 24843                           ; BSR set to: 0
 24844                           
 24845                           ; BSR set to: 0
 24846  010E68  90D8               	bcf	status,0,c
 24847  010E6A  3180               	rrcf	___flmul@bexp& (0+255),w,b
 24848  010E6C                     L11:
 24849  010E6C  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24850  010E6E                     l2864:
 24851                           
 24852                           ; BSR set to: 0
 24853                           
 24854                           ; BSR set to: 0
 24855                           
 24856                           ; BSR set to: 0
 24857  010E6E  517A               	movf	___flmul@sign& (0+255),w,b
 24858  010E70  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 24859                           
 24860                           ; BSR set to: 0
 24861  010E72  C081  F06E         	movff	___flmul@prod,?___flmul
 24862  010E76  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 24863  010E7A  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 24864  010E7E  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 24865  010E82  0012               	return	
 24866  010E84                     __end_of___flmul:
 24867                           	opt stack 0
 24868                           tosu	equ	0xFFF
 24869                           tosh	equ	0xFFE
 24870                           tosl	equ	0xFFD
 24871                           pclath	equ	0xFFA
 24872                           tblptru	equ	0xFF8
 24873                           tblptrh	equ	0xFF7
 24874                           tblptrl	equ	0xFF6
 24875                           tablat	equ	0xFF5
 24876                           prodh	equ	0xFF4
 24877                           prodl	equ	0xFF3
 24878                           intcon	equ	0xFF2
 24879                           indf0	equ	0xFEF
 24880                           postinc0	equ	0xFEE
 24881                           fsr0h	equ	0xFEA
 24882                           fsr0l	equ	0xFE9
 24883                           wreg	equ	0xFE8
 24884                           indf1	equ	0xFE7
 24885                           postdec1	equ	0xFE5
 24886                           fsr1h	equ	0xFE2
 24887                           fsr1l	equ	0xFE1
 24888                           indf2	equ	0xFDF
 24889                           postinc2	equ	0xFDE
 24890                           postdec2	equ	0xFDD
 24891                           plusw2	equ	0xFDB
 24892                           fsr2h	equ	0xFDA
 24893                           fsr2l	equ	0xFD9
 24894                           status	equ	0xFD8
 24895                           
 24896 ;; *************** function ___flsub *****************
 24897 ;; Defined at:
 24898 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 24899 ;; Parameters:    Size  Location     Type
 24900 ;;  b               4   63[BANK0 ] unsigned char 
 24901 ;;  a               4   67[BANK0 ] unsigned char 
 24902 ;; Auto vars:     Size  Location     Type
 24903 ;;		None
 24904 ;; Return value:  Size  Location     Type
 24905 ;;                  4   63[BANK0 ] unsigned char 
 24906 ;; Registers used:
 24907 ;;		wreg, status,2, status,0, cstack
 24908 ;; Tracked objects:
 24909 ;;		On entry : 0/0
 24910 ;;		On exit  : 0/0
 24911 ;;		Unchanged: 0/0
 24912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24913 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24916 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24917 ;;Total ram usage:        8 bytes
 24918 ;; Hardware stack levels used:    1
 24919 ;; Hardware stack levels required when called:    8
 24920 ;; This function calls:
 24921 ;;		___fladd
 24922 ;; This function is called by:
 24923 ;;		_exp
 24924 ;; This function uses a non-reentrant model
 24925 ;;
 24926                           
 24927                           	psect	text134
 24928  01568C                     __ptext134:
 24929                           	opt stack 0
 24930  01568C                     ___flsub:
 24931                           	opt stack 18
 24932                           
 24933                           ; BSR set to: 0
 24934                           ;incstack = 0
 24935  01568C  0E00               	movlw	0
 24936  01568E  0100               	movlb	0	; () banked
 24937  015690  1BA3               	xorwf	___flsub@a& (0+255),f,b
 24938  015692  0E00               	movlw	0
 24939  015694  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 24940  015696  0E00               	movlw	0
 24941  015698  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 24942  01569A  0E80               	movlw	128
 24943  01569C  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 24944                           
 24945                           ; BSR set to: 0
 24946  01569E  C09F  F08B         	movff	___flsub@b,___fladd@b
 24947  0156A2  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 24948  0156A6  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 24949  0156AA  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 24950  0156AE  C0A3  F08F         	movff	___flsub@a,___fladd@a
 24951  0156B2  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 24952  0156B6  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 24953  0156BA  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 24954  0156BE  EC42  F087         	call	___fladd	;wreg free
 24955  0156C2  C08B  F09F         	movff	?___fladd,?___flsub
 24956  0156C6  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 24957  0156CA  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 24958  0156CE  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 24959  0156D2  0012               	return	
 24960  0156D4                     __end_of___flsub:
 24961                           	opt stack 0
 24962                           tosu	equ	0xFFF
 24963                           tosh	equ	0xFFE
 24964                           tosl	equ	0xFFD
 24965                           pclath	equ	0xFFA
 24966                           tblptru	equ	0xFF8
 24967                           tblptrh	equ	0xFF7
 24968                           tblptrl	equ	0xFF6
 24969                           tablat	equ	0xFF5
 24970                           prodh	equ	0xFF4
 24971                           prodl	equ	0xFF3
 24972                           intcon	equ	0xFF2
 24973                           indf0	equ	0xFEF
 24974                           postinc0	equ	0xFEE
 24975                           fsr0h	equ	0xFEA
 24976                           fsr0l	equ	0xFE9
 24977                           wreg	equ	0xFE8
 24978                           indf1	equ	0xFE7
 24979                           postdec1	equ	0xFE5
 24980                           fsr1h	equ	0xFE2
 24981                           fsr1l	equ	0xFE1
 24982                           indf2	equ	0xFDF
 24983                           postinc2	equ	0xFDE
 24984                           postdec2	equ	0xFDD
 24985                           plusw2	equ	0xFDB
 24986                           fsr2h	equ	0xFDA
 24987                           fsr2l	equ	0xFD9
 24988                           status	equ	0xFD8
 24989                           
 24990 ;; *************** function ___fladd *****************
 24991 ;; Defined at:
 24992 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 24993 ;; Parameters:    Size  Location     Type
 24994 ;;  b               4   43[BANK0 ] unsigned char 
 24995 ;;  a               4   47[BANK0 ] unsigned char 
 24996 ;; Auto vars:     Size  Location     Type
 24997 ;;  grs             1   62[BANK0 ] unsigned char 
 24998 ;;  bexp            1   61[BANK0 ] unsigned char 
 24999 ;;  aexp            1   60[BANK0 ] unsigned char 
 25000 ;;  signs           1   59[BANK0 ] unsigned char 
 25001 ;; Return value:  Size  Location     Type
 25002 ;;                  4   43[BANK0 ] unsigned char 
 25003 ;; Registers used:
 25004 ;;		wreg, status,2, status,0
 25005 ;; Tracked objects:
 25006 ;;		On entry : 0/0
 25007 ;;		On exit  : 0/0
 25008 ;;		Unchanged: 0/0
 25009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25010 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25011 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25012 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25013 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25014 ;;Total ram usage:       20 bytes
 25015 ;; Hardware stack levels used:    1
 25016 ;; Hardware stack levels required when called:    7
 25017 ;; This function calls:
 25018 ;;		Nothing
 25019 ;; This function is called by:
 25020 ;;		_ADCAverage
 25021 ;;		___flsub
 25022 ;;		_floor
 25023 ;;		_log
 25024 ;;		_eval_poly
 25025 ;; This function uses a non-reentrant model
 25026 ;;
 25027                           
 25028                           	psect	text135
 25029  010E84                     __ptext135:
 25030                           	opt stack 0
 25031  010E84                     ___fladd:
 25032                           	opt stack 18
 25033                           
 25034                           ;incstack = 0
 25035  010E84  0100               	movlb	0	; () banked
 25036  010E86  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25037  010E88  0B80               	andlw	128
 25038  010E8A  6F9B               	movwf	___fladd@signs& (0+255),b
 25039  010E8C  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25040  010E8E  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 25041  010E90  6F9D               	movwf	___fladd@bexp& (0+255),b
 25042                           
 25043                           ; BSR set to: 0
 25044  010E92  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 25045                           
 25046                           ; BSR set to: 0
 25047  010E94  819D               	bsf	___fladd@bexp& (0+255),0,b
 25048                           
 25049                           ; BSR set to: 0
 25050                           
 25051                           ; BSR set to: 0
 25052  010E96  519D               	movf	___fladd@bexp& (0+255),w,b
 25053  010E98  B4D8               	btfsc	status,2,c
 25054  010E9A  D00D               	goto	l2749
 25055                           
 25056                           ; BSR set to: 0
 25057  010E9C  299D               	incf	___fladd@bexp& (0+255),w,b
 25058  010E9E  A4D8               	btfss	status,2,c
 25059  010EA0  D008               	goto	l2750
 25060                           
 25061                           ; BSR set to: 0
 25062  010EA2  0E00               	movlw	0
 25063  010EA4  6F8B               	movwf	___fladd@b& (0+255),b
 25064  010EA6  0E00               	movlw	0
 25065  010EA8  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25066  010EAA  0E00               	movlw	0
 25067  010EAC  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25068  010EAE  0E00               	movlw	0
 25069  010EB0  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25070  010EB2                     l2750:
 25071                           
 25072                           ; BSR set to: 0
 25073                           
 25074                           ; BSR set to: 0
 25075  010EB2  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25076  010EB4  D006               	goto	L12
 25077  010EB6                     l2749:
 25078                           
 25079                           ; BSR set to: 0
 25080                           
 25081                           ; BSR set to: 0
 25082  010EB6  0E00               	movlw	0
 25083  010EB8  6F8B               	movwf	___fladd@b& (0+255),b
 25084  010EBA  0E00               	movlw	0
 25085  010EBC  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25086  010EBE  0E00               	movlw	0
 25087  010EC0  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25088  010EC2                     L12:
 25089  010EC2  0E00               	movlw	0
 25090  010EC4  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25091                           
 25092                           ; BSR set to: 0
 25093                           
 25094                           ; BSR set to: 0
 25095  010EC6  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25096  010EC8  0B80               	andlw	128
 25097  010ECA  6F9C               	movwf	___fladd@aexp& (0+255),b
 25098                           
 25099                           ; BSR set to: 0
 25100  010ECC  519B               	movf	___fladd@signs& (0+255),w,b
 25101  010ECE  199C               	xorwf	___fladd@aexp& (0+255),w,b
 25102  010ED0  A4D8               	btfss	status,2,c
 25103                           
 25104                           ; BSR set to: 0
 25105  010ED2  8D9B               	bsf	___fladd@signs& (0+255),6,b
 25106                           
 25107                           ; BSR set to: 0
 25108                           
 25109                           ; BSR set to: 0
 25110  010ED4  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25111  010ED6  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 25112  010ED8  6F9C               	movwf	___fladd@aexp& (0+255),b
 25113                           
 25114                           ; BSR set to: 0
 25115  010EDA  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 25116                           
 25117                           ; BSR set to: 0
 25118  010EDC  819C               	bsf	___fladd@aexp& (0+255),0,b
 25119                           
 25120                           ; BSR set to: 0
 25121                           
 25122                           ; BSR set to: 0
 25123  010EDE  519C               	movf	___fladd@aexp& (0+255),w,b
 25124  010EE0  B4D8               	btfsc	status,2,c
 25125  010EE2  D00D               	goto	l2754
 25126                           
 25127                           ; BSR set to: 0
 25128  010EE4  299C               	incf	___fladd@aexp& (0+255),w,b
 25129  010EE6  A4D8               	btfss	status,2,c
 25130  010EE8  D008               	goto	l2755
 25131                           
 25132                           ; BSR set to: 0
 25133  010EEA  0E00               	movlw	0
 25134  010EEC  6F8F               	movwf	___fladd@a& (0+255),b
 25135  010EEE  0E00               	movlw	0
 25136  010EF0  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25137  010EF2  0E00               	movlw	0
 25138  010EF4  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25139  010EF6  0E00               	movlw	0
 25140  010EF8  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25141  010EFA                     l2755:
 25142                           
 25143                           ; BSR set to: 0
 25144                           
 25145                           ; BSR set to: 0
 25146  010EFA  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 25147  010EFC  D006               	goto	L13
 25148  010EFE                     l2754:
 25149                           
 25150                           ; BSR set to: 0
 25151                           
 25152                           ; BSR set to: 0
 25153  010EFE  0E00               	movlw	0
 25154  010F00  6F8F               	movwf	___fladd@a& (0+255),b
 25155  010F02  0E00               	movlw	0
 25156  010F04  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25157  010F06  0E00               	movlw	0
 25158  010F08  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25159  010F0A                     L13:
 25160  010F0A  0E00               	movlw	0
 25161  010F0C  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25162                           
 25163                           ; BSR set to: 0
 25164                           
 25165                           ; BSR set to: 0
 25166  010F0E  519D               	movf	___fladd@bexp& (0+255),w,b
 25167  010F10  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 25168  010F12  B0D8               	btfsc	status,0,c
 25169  010F14  D022               	goto	l2757
 25170                           
 25171                           ; BSR set to: 0
 25172  010F16  AD9B               	btfss	___fladd@signs& (0+255),6,b
 25173  010F18  D002               	goto	l2758
 25174                           
 25175                           ; BSR set to: 0
 25176  010F1A  0E80               	movlw	128
 25177  010F1C  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25178  010F1E                     l2758:
 25179                           
 25180                           ; BSR set to: 0
 25181                           
 25182                           ; BSR set to: 0
 25183  010F1E  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 25184                           
 25185                           ; BSR set to: 0
 25186  010F22  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25187                           
 25188                           ; BSR set to: 0
 25189  010F26  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 25190                           
 25191                           ; BSR set to: 0
 25192  010F2A  C08B  F09E         	movff	___fladd@b,___fladd@grs
 25193                           
 25194                           ; BSR set to: 0
 25195  010F2E  C08F  F08B         	movff	___fladd@a,___fladd@b
 25196                           
 25197                           ; BSR set to: 0
 25198  010F32  C09E  F08F         	movff	___fladd@grs,___fladd@a
 25199                           
 25200                           ; BSR set to: 0
 25201  010F36  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 25202                           
 25203                           ; BSR set to: 0
 25204  010F3A  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 25205                           
 25206                           ; BSR set to: 0
 25207  010F3E  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 25208                           
 25209                           ; BSR set to: 0
 25210  010F42  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 25211                           
 25212                           ; BSR set to: 0
 25213  010F46  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 25214                           
 25215                           ; BSR set to: 0
 25216  010F4A  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 25217                           
 25218                           ; BSR set to: 0
 25219  010F4E  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 25220                           
 25221                           ; BSR set to: 0
 25222  010F52  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 25223                           
 25224                           ; BSR set to: 0
 25225  010F56  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 25226  010F5A                     l2757:
 25227                           
 25228                           ; BSR set to: 0
 25229                           
 25230                           ; BSR set to: 0
 25231  010F5A  0E00               	movlw	0
 25232  010F5C  6F9E               	movwf	___fladd@grs& (0+255),b
 25233                           
 25234                           ; BSR set to: 0
 25235  010F5E  519D               	movf	___fladd@bexp& (0+255),w,b
 25236  010F60  6F93               	movwf	??___fladd& (0+255),b
 25237  010F62  6B94               	clrf	(??___fladd+1)& (0+255),b
 25238  010F64  1F93               	comf	??___fladd& (0+255),f,b
 25239  010F66  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25240  010F68  4B93               	infsnz	??___fladd& (0+255),f,b
 25241  010F6A  2B94               	incf	(??___fladd+1)& (0+255),f,b
 25242  010F6C  519C               	movf	___fladd@aexp& (0+255),w,b
 25243  010F6E  6F95               	movwf	(??___fladd+2)& (0+255),b
 25244  010F70  6B96               	clrf	(??___fladd+3)& (0+255),b
 25245  010F72  5193               	movf	??___fladd& (0+255),w,b
 25246  010F74  2795               	addwf	(??___fladd+2)& (0+255),f,b
 25247  010F76  5194               	movf	(??___fladd+1)& (0+255),w,b
 25248  010F78  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25249  010F7A  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 25250  010F7C  D02C               	goto	l2761
 25251  010F7E  5196               	movf	(??___fladd+3)& (0+255),w,b
 25252  010F80  E104               	bnz	u9760
 25253  010F82  0E1A               	movlw	26
 25254  010F84  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 25255  010F86  A0D8               	btfss	status,0,c
 25256  010F88  D026               	goto	l2761
 25257  010F8A                     u9760:
 25258                           
 25259                           ; BSR set to: 0
 25260  010F8A  518B               	movf	___fladd@b& (0+255),w,b
 25261  010F8C  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25262  010F8E  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25263  010F90  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25264  010F92  B4D8               	btfsc	status,2,c
 25265  010F94  D002               	goto	u9770
 25266  010F96  0E01               	movlw	1
 25267  010F98  D001               	goto	u9780
 25268  010F9A                     u9770:
 25269  010F9A  0E00               	movlw	0
 25270  010F9C                     u9780:
 25271  010F9C  6F9E               	movwf	___fladd@grs& (0+255),b
 25272                           
 25273                           ; BSR set to: 0
 25274  010F9E  0E00               	movlw	0
 25275  010FA0  6F8B               	movwf	___fladd@b& (0+255),b
 25276  010FA2  0E00               	movlw	0
 25277  010FA4  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25278  010FA6  0E00               	movlw	0
 25279  010FA8  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25280  010FAA  0E00               	movlw	0
 25281  010FAC  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25282                           
 25283                           ; BSR set to: 0
 25284  010FAE  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25285  010FB2  D015               	goto	u9810
 25286  010FB4                     l2762:
 25287                           
 25288                           ; BSR set to: 0
 25289  010FB4  A19E               	btfss	___fladd@grs& (0+255),0,b
 25290  010FB6  D005               	goto	l2763
 25291                           
 25292                           ; BSR set to: 0
 25293  010FB8  90D8               	bcf	status,0,c
 25294  010FBA  319E               	rrcf	___fladd@grs& (0+255),w,b
 25295  010FBC  0901               	iorlw	1
 25296  010FBE  6F9E               	movwf	___fladd@grs& (0+255),b
 25297  010FC0  D002               	goto	l2764
 25298  010FC2                     l2763:
 25299                           
 25300                           ; BSR set to: 0
 25301                           
 25302                           ; BSR set to: 0
 25303  010FC2  90D8               	bcf	status,0,c
 25304  010FC4  339E               	rrcf	___fladd@grs& (0+255),f,b
 25305  010FC6                     l2764:
 25306                           
 25307                           ; BSR set to: 0
 25308                           
 25309                           ; BSR set to: 0
 25310  010FC6  B18B               	btfsc	___fladd@b& (0+255),0,b
 25311                           
 25312                           ; BSR set to: 0
 25313  010FC8  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25314                           
 25315                           ; BSR set to: 0
 25316                           
 25317                           ; BSR set to: 0
 25318  010FCA  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25319  010FCC  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25320  010FCE  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25321  010FD0  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25322  010FD2  338B               	rrcf	___fladd@b& (0+255),f,b
 25323                           
 25324                           ; BSR set to: 0
 25325  010FD4  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25326  010FD6                     l2761:
 25327                           
 25328                           ; BSR set to: 0
 25329  010FD6  519C               	movf	___fladd@aexp& (0+255),w,b
 25330  010FD8  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 25331  010FDA  A0D8               	btfss	status,0,c
 25332  010FDC  D7EB               	goto	l2762
 25333  010FDE                     u9810:
 25334                           
 25335                           ; BSR set to: 0
 25336                           
 25337                           ; BSR set to: 0
 25338  010FDE  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 25339  010FE0  D029               	goto	l2767
 25340                           
 25341                           ; BSR set to: 0
 25342  010FE2  519D               	movf	___fladd@bexp& (0+255),w,b
 25343  010FE4  A4D8               	btfss	status,2,c
 25344  010FE6  D009               	goto	l2768
 25345                           
 25346                           ; BSR set to: 0
 25347  010FE8  0E00               	movlw	0
 25348  010FEA  6F8B               	movwf	?___fladd& (0+255),b
 25349  010FEC  0E00               	movlw	0
 25350  010FEE  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25351  010FF0  0E00               	movlw	0
 25352  010FF2  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25353  010FF4  0E00               	movlw	0
 25354  010FF6  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25355                           
 25356                           ; BSR set to: 0
 25357  010FF8  0012               	return	
 25358  010FFA                     l2768:
 25359                           
 25360                           ; BSR set to: 0
 25361                           
 25362                           ; BSR set to: 0
 25363  010FFA  518F               	movf	___fladd@a& (0+255),w,b
 25364  010FFC  278B               	addwf	___fladd@b& (0+255),f,b
 25365  010FFE  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25366  011000  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25367  011002  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25368  011004  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25369  011006  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25370  011008  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25371                           
 25372                           ; BSR set to: 0
 25373  01100A  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25374  01100C  D083               	goto	u9940
 25375                           
 25376                           ; BSR set to: 0
 25377  01100E  A19E               	btfss	___fladd@grs& (0+255),0,b
 25378  011010  D006               	goto	l2771
 25379                           
 25380                           ; BSR set to: 0
 25381  011012  90D8               	bcf	status,0,c
 25382  011014  339E               	rrcf	___fladd@grs& (0+255),f,b
 25383  011016  519E               	movf	___fladd@grs& (0+255),w,b
 25384  011018  0901               	iorlw	1
 25385  01101A  6F9E               	movwf	___fladd@grs& (0+255),b
 25386  01101C  D002               	goto	l2772
 25387  01101E                     l2771:
 25388                           
 25389                           ; BSR set to: 0
 25390                           
 25391                           ; BSR set to: 0
 25392  01101E  90D8               	bcf	status,0,c
 25393  011020  339E               	rrcf	___fladd@grs& (0+255),f,b
 25394  011022                     l2772:
 25395                           
 25396                           ; BSR set to: 0
 25397                           
 25398                           ; BSR set to: 0
 25399  011022  B18B               	btfsc	___fladd@b& (0+255),0,b
 25400                           
 25401                           ; BSR set to: 0
 25402  011024  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25403                           
 25404                           ; BSR set to: 0
 25405                           
 25406                           ; BSR set to: 0
 25407  011026  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25408  011028  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25409  01102A  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25410  01102C  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25411  01102E  338B               	rrcf	___fladd@b& (0+255),f,b
 25412                           
 25413                           ; BSR set to: 0
 25414  011030  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25415                           
 25416                           ; BSR set to: 0
 25417  011032  D070               	goto	u9940
 25418  011034                     l2767:
 25419                           
 25420                           ; BSR set to: 0
 25421                           
 25422                           ; BSR set to: 0
 25423  011034  518F               	movf	___fladd@a& (0+255),w,b
 25424  011036  5D8B               	subwf	___fladd@b& (0+255),w,b
 25425  011038  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25426  01103A  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 25427  01103C  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25428  01103E  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 25429  011040  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25430  011042  0A80               	xorlw	128
 25431  011044  6F93               	movwf	??___fladd& (0+255),b
 25432  011046  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25433  011048  0A80               	xorlw	128
 25434  01104A  5993               	subwfb	??___fladd& (0+255),w,b
 25435  01104C  B0D8               	btfsc	status,0,c
 25436  01104E  D036               	goto	l2775
 25437                           
 25438                           ; BSR set to: 0
 25439  011050  C08B  F093         	movff	___fladd@b,??___fladd
 25440  011054  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25441  011058  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25442  01105C  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25443  011060  1F93               	comf	??___fladd& (0+255),f,b
 25444  011062  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25445  011064  1F95               	comf	(??___fladd+2)& (0+255),f,b
 25446  011066  1F96               	comf	(??___fladd+3)& (0+255),f,b
 25447  011068  2B93               	incf	??___fladd& (0+255),f,b
 25448  01106A  0E00               	movlw	0
 25449  01106C  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 25450  01106E  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 25451  011070  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25452  011072  518F               	movf	___fladd@a& (0+255),w,b
 25453  011074  2593               	addwf	??___fladd& (0+255),w,b
 25454  011076  6F97               	movwf	(??___fladd+4)& (0+255),b
 25455  011078  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25456  01107A  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 25457  01107C  6F98               	movwf	(??___fladd+5)& (0+255),b
 25458  01107E  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25459  011080  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 25460  011082  6F99               	movwf	(??___fladd+6)& (0+255),b
 25461  011084  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25462  011086  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 25463  011088  6F9A               	movwf	(??___fladd+7)& (0+255),b
 25464  01108A  0EFF               	movlw	255
 25465  01108C  2597               	addwf	(??___fladd+4)& (0+255),w,b
 25466  01108E  6F8B               	movwf	___fladd@b& (0+255),b
 25467  011090  0EFF               	movlw	255
 25468  011092  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 25469  011094  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25470  011096  0EFF               	movlw	255
 25471  011098  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 25472  01109A  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25473  01109C  0EFF               	movlw	255
 25474  01109E  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 25475  0110A0  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25476  0110A2  0E80               	movlw	128
 25477  0110A4  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25478                           
 25479                           ; BSR set to: 0
 25480  0110A6  6D9E               	negf	___fladd@grs& (0+255),b
 25481                           
 25482                           ; BSR set to: 0
 25483  0110A8  519E               	movf	___fladd@grs& (0+255),w,b
 25484  0110AA  A4D8               	btfss	status,2,c
 25485  0110AC  D00F               	goto	l2777
 25486                           
 25487                           ; BSR set to: 0
 25488  0110AE  0E01               	movlw	1
 25489  0110B0  278B               	addwf	___fladd@b& (0+255),f,b
 25490  0110B2  0E00               	movlw	0
 25491  0110B4  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25492  0110B6  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25493  0110B8  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25494                           
 25495                           ; BSR set to: 0
 25496  0110BA  D008               	goto	l2777
 25497  0110BC                     l2775:
 25498                           
 25499                           ; BSR set to: 0
 25500                           
 25501                           ; BSR set to: 0
 25502  0110BC  518F               	movf	___fladd@a& (0+255),w,b
 25503  0110BE  5F8B               	subwf	___fladd@b& (0+255),f,b
 25504  0110C0  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25505  0110C2  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 25506  0110C4  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25507  0110C6  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 25508  0110C8  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25509  0110CA  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 25510  0110CC                     l2777:
 25511                           
 25512                           ; BSR set to: 0
 25513  0110CC  518B               	movf	___fladd@b& (0+255),w,b
 25514  0110CE  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25515  0110D0  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25516  0110D2  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25517  0110D4  A4D8               	btfss	status,2,c
 25518  0110D6  D01C               	goto	l2784
 25519                           
 25520                           ; BSR set to: 0
 25521  0110D8  519E               	movf	___fladd@grs& (0+255),w,b
 25522  0110DA  A4D8               	btfss	status,2,c
 25523  0110DC  D019               	goto	l2784
 25524                           
 25525                           ; BSR set to: 0
 25526  0110DE  0E00               	movlw	0
 25527  0110E0  6F8B               	movwf	?___fladd& (0+255),b
 25528  0110E2  0E00               	movlw	0
 25529  0110E4  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25530  0110E6  0E00               	movlw	0
 25531  0110E8  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25532  0110EA  0E00               	movlw	0
 25533  0110EC  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25534                           
 25535                           ; BSR set to: 0
 25536  0110EE  0012               	return	
 25537  0110F0                     
 25538                           ; BSR set to: 0
 25539                           
 25540                           ; BSR set to: 0
 25541  0110F0  90D8               	bcf	status,0,c
 25542  0110F2  378B               	rlcf	___fladd@b& (0+255),f,b
 25543  0110F4  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 25544  0110F6  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 25545  0110F8  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 25546                           
 25547                           ; BSR set to: 0
 25548  0110FA  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 25549                           
 25550                           ; BSR set to: 0
 25551  0110FC  818B               	bsf	___fladd@b& (0+255),0,b
 25552                           
 25553                           ; BSR set to: 0
 25554                           
 25555                           ; BSR set to: 0
 25556  0110FE  A19E               	btfss	___fladd@grs& (0+255),0,b
 25557  011100  D002               	goto	l2782
 25558                           
 25559                           ; BSR set to: 0
 25560  011102  80D8               	bsf	status,0,c
 25561  011104  D001               	goto	L14
 25562  011106                     l2782:
 25563                           
 25564                           ; BSR set to: 0
 25565                           
 25566                           ; BSR set to: 0
 25567  011106  90D8               	bcf	status,0,c
 25568  011108                     L14:
 25569  011108  379E               	rlcf	___fladd@grs& (0+255),f,b
 25570                           
 25571                           ; BSR set to: 0
 25572                           
 25573                           ; BSR set to: 0
 25574  01110A  519D               	movf	___fladd@bexp& (0+255),w,b
 25575  01110C  A4D8               	btfss	status,2,c
 25576                           
 25577                           ; BSR set to: 0
 25578  01110E  079D               	decf	___fladd@bexp& (0+255),f,b
 25579  011110                     l2784:
 25580                           
 25581                           ; BSR set to: 0
 25582                           
 25583                           ; BSR set to: 0
 25584                           
 25585                           ; BSR set to: 0
 25586  011110  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 25587  011112  D7EE               	goto	l2780
 25588  011114                     u9940:
 25589                           
 25590                           ; BSR set to: 0
 25591                           
 25592                           ; BSR set to: 0
 25593                           
 25594                           ; BSR set to: 0
 25595  011114  0E00               	movlw	0
 25596  011116  6F9C               	movwf	___fladd@aexp& (0+255),b
 25597                           
 25598                           ; BSR set to: 0
 25599  011118  AF9E               	btfss	___fladd@grs& (0+255),7,b
 25600  01111A  D00A               	goto	l2789
 25601                           
 25602                           ; BSR set to: 0
 25603  01111C  C09E  F093         	movff	___fladd@grs,??___fladd
 25604  011120  0E7F               	movlw	127
 25605  011122  1793               	andwf	??___fladd& (0+255),f,b
 25606  011124  A4D8               	btfss	status,2,c
 25607  011126  D002               	goto	u9970
 25608                           
 25609                           ; BSR set to: 0
 25610                           
 25611                           ; BSR set to: 0
 25612  011128  A18B               	btfss	___fladd@b& (0+255),0,b
 25613  01112A  D002               	goto	l2789
 25614  01112C                     u9970:
 25615                           
 25616                           ; BSR set to: 0
 25617  01112C  0E01               	movlw	1
 25618  01112E  6F9C               	movwf	___fladd@aexp& (0+255),b
 25619  011130                     l2789:
 25620                           
 25621                           ; BSR set to: 0
 25622                           
 25623                           ; BSR set to: 0
 25624                           
 25625                           ; BSR set to: 0
 25626  011130  519C               	movf	___fladd@aexp& (0+255),w,b
 25627  011132  B4D8               	btfsc	status,2,c
 25628  011134  D020               	goto	l2792
 25629                           
 25630                           ; BSR set to: 0
 25631  011136  0E01               	movlw	1
 25632  011138  278B               	addwf	___fladd@b& (0+255),f,b
 25633  01113A  0E00               	movlw	0
 25634  01113C  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25635  01113E  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25636  011140  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25637                           
 25638                           ; BSR set to: 0
 25639  011142  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25640  011144  D018               	goto	l2792
 25641                           
 25642                           ; BSR set to: 0
 25643  011146  C08B  F093         	movff	___fladd@b,??___fladd
 25644  01114A  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25645  01114E  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25646  011152  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25647  011156  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 25648  011158  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 25649  01115A  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 25650  01115C  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 25651  01115E  3393               	rrcf	??___fladd& (0+255),f,b
 25652  011160  C093  F08B         	movff	??___fladd,___fladd@b
 25653  011164  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 25654  011168  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 25655  01116C  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 25656  011170  299D               	incf	___fladd@bexp& (0+255),w,b
 25657  011172  A4D8               	btfss	status,2,c
 25658                           
 25659                           ; BSR set to: 0
 25660  011174  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25661  011176                     l2792:
 25662                           
 25663                           ; BSR set to: 0
 25664                           
 25665                           ; BSR set to: 0
 25666                           
 25667                           ; BSR set to: 0
 25668                           
 25669                           ; BSR set to: 0
 25670  011176  299D               	incf	___fladd@bexp& (0+255),w,b
 25671  011178  B4D8               	btfsc	status,2,c
 25672  01117A  D003               	goto	u10020
 25673                           
 25674                           ; BSR set to: 0
 25675  01117C  519D               	movf	___fladd@bexp& (0+255),w,b
 25676  01117E  A4D8               	btfss	status,2,c
 25677  011180  D00D               	goto	l2796
 25678  011182                     u10020:
 25679                           
 25680                           ; BSR set to: 0
 25681                           
 25682                           ; BSR set to: 0
 25683  011182  0E00               	movlw	0
 25684  011184  6F8B               	movwf	___fladd@b& (0+255),b
 25685  011186  0E00               	movlw	0
 25686  011188  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25687  01118A  0E00               	movlw	0
 25688  01118C  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25689  01118E  0E00               	movlw	0
 25690  011190  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25691  011192  519D               	movf	___fladd@bexp& (0+255),w,b
 25692  011194  A4D8               	btfss	status,2,c
 25693  011196  D002               	goto	l2796
 25694                           
 25695                           ; BSR set to: 0
 25696  011198  0E00               	movlw	0
 25697  01119A  6F9B               	movwf	___fladd@signs& (0+255),b
 25698  01119C                     l2796:
 25699                           
 25700                           ; BSR set to: 0
 25701                           
 25702                           ; BSR set to: 0
 25703                           
 25704                           ; BSR set to: 0
 25705  01119C  A19D               	btfss	___fladd@bexp& (0+255),0,b
 25706  01119E  D002               	goto	l2797
 25707                           
 25708                           ; BSR set to: 0
 25709  0111A0  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25710  0111A2  D001               	goto	l2798
 25711  0111A4                     l2797:
 25712                           
 25713                           ; BSR set to: 0
 25714                           
 25715                           ; BSR set to: 0
 25716  0111A4  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 25717  0111A6                     l2798:
 25718                           
 25719                           ; BSR set to: 0
 25720                           
 25721                           ; BSR set to: 0
 25722  0111A6  90D8               	bcf	status,0,c
 25723  0111A8  319D               	rrcf	___fladd@bexp& (0+255),w,b
 25724  0111AA  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25725                           
 25726                           ; BSR set to: 0
 25727  0111AC  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 25728                           
 25729                           ; BSR set to: 0
 25730  0111AE  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 25731                           
 25732                           ; BSR set to: 0
 25733                           
 25734                           ; BSR set to: 0
 25735  0111B0  C08B  F08B         	movff	___fladd@b,?___fladd
 25736  0111B4  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 25737  0111B8  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 25738  0111BC  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 25739  0111C0  0012               	return	
 25740  0111C2                     __end_of___fladd:
 25741                           	opt stack 0
 25742                           tosu	equ	0xFFF
 25743                           tosh	equ	0xFFE
 25744                           tosl	equ	0xFFD
 25745                           pclath	equ	0xFFA
 25746                           tblptru	equ	0xFF8
 25747                           tblptrh	equ	0xFF7
 25748                           tblptrl	equ	0xFF6
 25749                           tablat	equ	0xFF5
 25750                           prodh	equ	0xFF4
 25751                           prodl	equ	0xFF3
 25752                           intcon	equ	0xFF2
 25753                           indf0	equ	0xFEF
 25754                           postinc0	equ	0xFEE
 25755                           fsr0h	equ	0xFEA
 25756                           fsr0l	equ	0xFE9
 25757                           wreg	equ	0xFE8
 25758                           indf1	equ	0xFE7
 25759                           postdec1	equ	0xFE5
 25760                           fsr1h	equ	0xFE2
 25761                           fsr1l	equ	0xFE1
 25762                           indf2	equ	0xFDF
 25763                           postinc2	equ	0xFDE
 25764                           postdec2	equ	0xFDD
 25765                           plusw2	equ	0xFDB
 25766                           fsr2h	equ	0xFDA
 25767                           fsr2l	equ	0xFD9
 25768                           status	equ	0xFD8
 25769                           
 25770 ;; *************** function ___flneg *****************
 25771 ;; Defined at:
 25772 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 25773 ;; Parameters:    Size  Location     Type
 25774 ;;  f1              4   39[BANK0 ] unsigned char 
 25775 ;; Auto vars:     Size  Location     Type
 25776 ;;		None
 25777 ;; Return value:  Size  Location     Type
 25778 ;;                  4   39[BANK0 ] unsigned char 
 25779 ;; Registers used:
 25780 ;;		wreg, status,2, status,0
 25781 ;; Tracked objects:
 25782 ;;		On entry : 0/0
 25783 ;;		On exit  : 0/0
 25784 ;;		Unchanged: 0/0
 25785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25786 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25789 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25790 ;;Total ram usage:        4 bytes
 25791 ;; Hardware stack levels used:    1
 25792 ;; Hardware stack levels required when called:    7
 25793 ;; This function calls:
 25794 ;;		Nothing
 25795 ;; This function is called by:
 25796 ;;		_ADCAverage
 25797 ;;		_pow
 25798 ;;		_exp
 25799 ;; This function uses a non-reentrant model
 25800 ;;
 25801                           
 25802                           	psect	text136
 25803  015B54                     __ptext136:
 25804                           	opt stack 0
 25805  015B54                     ___flneg:
 25806                           	opt stack 19
 25807                           
 25808                           ; BSR set to: 0
 25809                           ;incstack = 0
 25810  015B54  0100               	movlb	0	; () banked
 25811  015B56  5187               	movf	___flneg@f1& (0+255),w,b
 25812  015B58  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 25813  015B5A  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 25814  015B5C  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 25815  015B5E  B4D8               	btfsc	status,2,c
 25816  015B60  D008               	goto	l2512
 25817                           
 25818                           ; BSR set to: 0
 25819  015B62  0E00               	movlw	0
 25820  015B64  1B87               	xorwf	___flneg@f1& (0+255),f,b
 25821  015B66  0E00               	movlw	0
 25822  015B68  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 25823  015B6A  0E00               	movlw	0
 25824  015B6C  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 25825  015B6E  0E80               	movlw	128
 25826  015B70  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 25827  015B72                     l2512:
 25828                           
 25829                           ; BSR set to: 0
 25830                           
 25831                           ; BSR set to: 0
 25832  015B72  C087  F087         	movff	___flneg@f1,?___flneg
 25833  015B76  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 25834  015B7A  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 25835  015B7E  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 25836  015B82  0012               	return	
 25837  015B84                     __end_of___flneg:
 25838                           	opt stack 0
 25839                           tosu	equ	0xFFF
 25840                           tosh	equ	0xFFE
 25841                           tosl	equ	0xFFD
 25842                           pclath	equ	0xFFA
 25843                           tblptru	equ	0xFF8
 25844                           tblptrh	equ	0xFF7
 25845                           tblptrl	equ	0xFF6
 25846                           tablat	equ	0xFF5
 25847                           prodh	equ	0xFF4
 25848                           prodl	equ	0xFF3
 25849                           intcon	equ	0xFF2
 25850                           indf0	equ	0xFEF
 25851                           postinc0	equ	0xFEE
 25852                           fsr0h	equ	0xFEA
 25853                           fsr0l	equ	0xFE9
 25854                           wreg	equ	0xFE8
 25855                           indf1	equ	0xFE7
 25856                           postdec1	equ	0xFE5
 25857                           fsr1h	equ	0xFE2
 25858                           fsr1l	equ	0xFE1
 25859                           indf2	equ	0xFDF
 25860                           postinc2	equ	0xFDE
 25861                           postdec2	equ	0xFDD
 25862                           plusw2	equ	0xFDB
 25863                           fsr2h	equ	0xFDA
 25864                           fsr2l	equ	0xFD9
 25865                           status	equ	0xFD8
 25866                           
 25867 ;; *************** function ___fldiv *****************
 25868 ;; Defined at:
 25869 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 25870 ;; Parameters:    Size  Location     Type
 25871 ;;  b               4    0[BANK0 ] unsigned char 
 25872 ;;  a               4    4[BANK0 ] unsigned char 
 25873 ;; Auto vars:     Size  Location     Type
 25874 ;;  grs             4   19[BANK0 ] unsigned long 
 25875 ;;  rem             4   13[BANK0 ] unsigned long 
 25876 ;;  new_exp         2   17[BANK0 ] int 
 25877 ;;  aexp            1   24[BANK0 ] unsigned char 
 25878 ;;  bexp            1   23[BANK0 ] unsigned char 
 25879 ;;  sign            1   12[BANK0 ] unsigned char 
 25880 ;; Return value:  Size  Location     Type
 25881 ;;                  4    0[BANK0 ] unsigned char 
 25882 ;; Registers used:
 25883 ;;		wreg, status,2, status,0
 25884 ;; Tracked objects:
 25885 ;;		On entry : 0/0
 25886 ;;		On exit  : 0/0
 25887 ;;		Unchanged: 0/0
 25888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25889 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25890 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25891 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25892 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25893 ;;Total ram usage:       25 bytes
 25894 ;; Hardware stack levels used:    1
 25895 ;; Hardware stack levels required when called:    7
 25896 ;; This function calls:
 25897 ;;		Nothing
 25898 ;; This function is called by:
 25899 ;;		_exp
 25900 ;;		_ADC_Voltage
 25901 ;; This function uses a non-reentrant model
 25902 ;;
 25903                           
 25904                           	psect	text137
 25905  0114D0                     __ptext137:
 25906                           	opt stack 0
 25907  0114D0                     ___fldiv:
 25908                           	opt stack 19
 25909                           
 25910                           ; BSR set to: 0
 25911                           ;incstack = 0
 25912  0114D0  0100               	movlb	0	; () banked
 25913  0114D2  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25914  0114D4  0B80               	andlw	128
 25915  0114D6  6F6C               	movwf	___fldiv@sign& (0+255),b
 25916  0114D8  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25917  0114DA  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 25918  0114DC  6F77               	movwf	___fldiv@bexp& (0+255),b
 25919                           
 25920                           ; BSR set to: 0
 25921  0114DE  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 25922                           
 25923                           ; BSR set to: 0
 25924  0114E0  8177               	bsf	___fldiv@bexp& (0+255),0,b
 25925                           
 25926                           ; BSR set to: 0
 25927                           
 25928                           ; BSR set to: 0
 25929  0114E2  5177               	movf	___fldiv@bexp& (0+255),w,b
 25930  0114E4  B4D8               	btfsc	status,2,c
 25931  0114E6  D00D               	goto	l2806
 25932                           
 25933                           ; BSR set to: 0
 25934  0114E8  2977               	incf	___fldiv@bexp& (0+255),w,b
 25935  0114EA  A4D8               	btfss	status,2,c
 25936  0114EC  D008               	goto	l2807
 25937                           
 25938                           ; BSR set to: 0
 25939  0114EE  0E00               	movlw	0
 25940  0114F0  6F60               	movwf	___fldiv@b& (0+255),b
 25941  0114F2  0E00               	movlw	0
 25942  0114F4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 25943  0114F6  0E00               	movlw	0
 25944  0114F8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 25945  0114FA  0E00               	movlw	0
 25946  0114FC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 25947  0114FE                     l2807:
 25948                           
 25949                           ; BSR set to: 0
 25950                           
 25951                           ; BSR set to: 0
 25952  0114FE  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 25953  011500  D006               	goto	L15
 25954  011502                     l2806:
 25955                           
 25956                           ; BSR set to: 0
 25957                           
 25958                           ; BSR set to: 0
 25959  011502  0E00               	movlw	0
 25960  011504  6F60               	movwf	___fldiv@b& (0+255),b
 25961  011506  0E00               	movlw	0
 25962  011508  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 25963  01150A  0E00               	movlw	0
 25964  01150C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 25965  01150E                     L15:
 25966  01150E  0E00               	movlw	0
 25967  011510  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 25968                           
 25969                           ; BSR set to: 0
 25970                           
 25971                           ; BSR set to: 0
 25972  011512  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 25973  011514  0B80               	andlw	128
 25974  011516  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 25975                           
 25976                           ; BSR set to: 0
 25977  011518  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 25978  01151A  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 25979  01151C  6F78               	movwf	___fldiv@aexp& (0+255),b
 25980                           
 25981                           ; BSR set to: 0
 25982  01151E  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 25983                           
 25984                           ; BSR set to: 0
 25985  011520  8178               	bsf	___fldiv@aexp& (0+255),0,b
 25986                           
 25987                           ; BSR set to: 0
 25988                           
 25989                           ; BSR set to: 0
 25990  011522  5178               	movf	___fldiv@aexp& (0+255),w,b
 25991  011524  B4D8               	btfsc	status,2,c
 25992  011526  D00D               	goto	l2810
 25993                           
 25994                           ; BSR set to: 0
 25995  011528  2978               	incf	___fldiv@aexp& (0+255),w,b
 25996  01152A  A4D8               	btfss	status,2,c
 25997  01152C  D008               	goto	l2811
 25998                           
 25999                           ; BSR set to: 0
 26000  01152E  0E00               	movlw	0
 26001  011530  6F64               	movwf	___fldiv@a& (0+255),b
 26002  011532  0E00               	movlw	0
 26003  011534  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26004  011536  0E00               	movlw	0
 26005  011538  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26006  01153A  0E00               	movlw	0
 26007  01153C  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26008  01153E                     l2811:
 26009                           
 26010                           ; BSR set to: 0
 26011                           
 26012                           ; BSR set to: 0
 26013  01153E  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 26014  011540  D006               	goto	L16
 26015  011542                     l2810:
 26016                           
 26017                           ; BSR set to: 0
 26018                           
 26019                           ; BSR set to: 0
 26020  011542  0E00               	movlw	0
 26021  011544  6F64               	movwf	___fldiv@a& (0+255),b
 26022  011546  0E00               	movlw	0
 26023  011548  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26024  01154A  0E00               	movlw	0
 26025  01154C  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26026  01154E                     L16:
 26027  01154E  0E00               	movlw	0
 26028  011550  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26029                           
 26030                           ; BSR set to: 0
 26031                           
 26032                           ; BSR set to: 0
 26033  011552  5164               	movf	___fldiv@a& (0+255),w,b
 26034  011554  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 26035  011556  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 26036  011558  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 26037  01155A  A4D8               	btfss	status,2,c
 26038  01155C  D015               	goto	l2813
 26039                           
 26040                           ; BSR set to: 0
 26041  01155E  0E00               	movlw	0
 26042  011560  6F60               	movwf	___fldiv@b& (0+255),b
 26043  011562  0E00               	movlw	0
 26044  011564  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26045  011566  0E00               	movlw	0
 26046  011568  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26047  01156A  0E00               	movlw	0
 26048  01156C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26049                           
 26050                           ; BSR set to: 0
 26051  01156E  0E80               	movlw	128
 26052  011570  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 26053  011572  0E7F               	movlw	127
 26054  011574  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26055                           
 26056                           ; BSR set to: 0
 26057  011576  C060  F060         	movff	___fldiv@b,?___fldiv
 26058  01157A  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26059  01157E  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26060  011582  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26061                           
 26062                           ; BSR set to: 0
 26063  011586  0012               	return	
 26064  011588                     l2813:
 26065                           
 26066                           ; BSR set to: 0
 26067                           
 26068                           ; BSR set to: 0
 26069  011588  5177               	movf	___fldiv@bexp& (0+255),w,b
 26070  01158A  A4D8               	btfss	status,2,c
 26071  01158C  D011               	goto	l2815
 26072                           
 26073                           ; BSR set to: 0
 26074  01158E  0E00               	movlw	0
 26075  011590  6F60               	movwf	___fldiv@b& (0+255),b
 26076  011592  0E00               	movlw	0
 26077  011594  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26078  011596  0E00               	movlw	0
 26079  011598  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26080  01159A  0E00               	movlw	0
 26081  01159C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26082                           
 26083                           ; BSR set to: 0
 26084  01159E  C060  F060         	movff	___fldiv@b,?___fldiv
 26085  0115A2  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26086  0115A6  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26087  0115AA  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26088                           
 26089                           ; BSR set to: 0
 26090  0115AE  0012               	return	
 26091  0115B0                     l2815:
 26092                           
 26093                           ; BSR set to: 0
 26094                           
 26095                           ; BSR set to: 0
 26096  0115B0  5178               	movf	___fldiv@aexp& (0+255),w,b
 26097  0115B2  6F68               	movwf	??___fldiv& (0+255),b
 26098  0115B4  6B69               	clrf	(??___fldiv+1)& (0+255),b
 26099  0115B6  1F68               	comf	??___fldiv& (0+255),f,b
 26100  0115B8  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 26101  0115BA  4B68               	infsnz	??___fldiv& (0+255),f,b
 26102  0115BC  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 26103  0115BE  5177               	movf	___fldiv@bexp& (0+255),w,b
 26104  0115C0  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26105  0115C2  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 26106  0115C4  5168               	movf	??___fldiv& (0+255),w,b
 26107  0115C6  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 26108  0115C8  5169               	movf	(??___fldiv+1)& (0+255),w,b
 26109  0115CA  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 26110  0115CC  0E7F               	movlw	127
 26111  0115CE  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 26112  0115D0  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26113  0115D2  0E00               	movlw	0
 26114  0115D4  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 26115  0115D6  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26116                           
 26117                           ; BSR set to: 0
 26118  0115D8  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 26119  0115DC  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 26120  0115E0  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 26121  0115E4  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 26122                           
 26123                           ; BSR set to: 0
 26124  0115E8  0E00               	movlw	0
 26125  0115EA  6F60               	movwf	___fldiv@b& (0+255),b
 26126  0115EC  0E00               	movlw	0
 26127  0115EE  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26128  0115F0  0E00               	movlw	0
 26129  0115F2  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26130  0115F4  0E00               	movlw	0
 26131  0115F6  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26132                           
 26133                           ; BSR set to: 0
 26134  0115F8  0E00               	movlw	0
 26135  0115FA  6F73               	movwf	___fldiv@grs& (0+255),b
 26136  0115FC  0E00               	movlw	0
 26137  0115FE  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 26138  011600  0E00               	movlw	0
 26139  011602  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 26140  011604  0E00               	movlw	0
 26141  011606  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 26142                           
 26143                           ; BSR set to: 0
 26144  011608  0E00               	movlw	0
 26145  01160A  6F78               	movwf	___fldiv@aexp& (0+255),b
 26146  01160C  D028               	goto	l2816
 26147  01160E                     
 26148                           ; BSR set to: 0
 26149                           
 26150                           ; BSR set to: 0
 26151  01160E  5178               	movf	___fldiv@aexp& (0+255),w,b
 26152  011610  B4D8               	btfsc	status,2,c
 26153  011612  D011               	goto	l2818
 26154                           
 26155                           ; BSR set to: 0
 26156  011614  90D8               	bcf	status,0,c
 26157  011616  376D               	rlcf	___fldiv@rem& (0+255),f,b
 26158  011618  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 26159  01161A  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 26160  01161C  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 26161  01161E  90D8               	bcf	status,0,c
 26162  011620  3760               	rlcf	___fldiv@b& (0+255),f,b
 26163  011622  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26164  011624  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26165  011626  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26166                           
 26167                           ; BSR set to: 0
 26168  011628  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26169                           
 26170                           ; BSR set to: 0
 26171  01162A  8160               	bsf	___fldiv@b& (0+255),0,b
 26172                           
 26173                           ; BSR set to: 0
 26174  01162C  90D8               	bcf	status,0,c
 26175  01162E  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26176  011630  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26177  011632  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26178  011634  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26179  011636                     l2818:
 26180                           
 26181                           ; BSR set to: 0
 26182                           
 26183                           ; BSR set to: 0
 26184  011636  5164               	movf	___fldiv@a& (0+255),w,b
 26185  011638  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 26186  01163A  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26187  01163C  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 26188  01163E  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26189  011640  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 26190  011642  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26191  011644  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 26192  011646  A0D8               	btfss	status,0,c
 26193  011648  D009               	goto	l2820
 26194                           
 26195                           ; BSR set to: 0
 26196  01164A  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 26197                           
 26198                           ; BSR set to: 0
 26199  01164C  5164               	movf	___fldiv@a& (0+255),w,b
 26200  01164E  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 26201  011650  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26202  011652  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 26203  011654  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26204  011656  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 26205  011658  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26206  01165A  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 26207  01165C                     l2820:
 26208                           
 26209                           ; BSR set to: 0
 26210                           
 26211                           ; BSR set to: 0
 26212  01165C  2B78               	incf	___fldiv@aexp& (0+255),f,b
 26213  01165E                     l2816:
 26214                           
 26215                           ; BSR set to: 0
 26216  01165E  0E19               	movlw	25
 26217  011660  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 26218  011662  D7D5               	goto	l2817
 26219                           
 26220                           ; BSR set to: 0
 26221                           
 26222                           ; BSR set to: 0
 26223  011664  516D               	movf	___fldiv@rem& (0+255),w,b
 26224  011666  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 26225  011668  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 26226  01166A  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 26227  01166C  B4D8               	btfsc	status,2,c
 26228  01166E  D011               	goto	l2823
 26229                           
 26230                           ; BSR set to: 0
 26231  011670  8173               	bsf	___fldiv@grs& (0+255),0,b
 26232                           
 26233                           ; BSR set to: 0
 26234  011672  D00F               	goto	l2823
 26235  011674                     
 26236                           ; BSR set to: 0
 26237                           
 26238                           ; BSR set to: 0
 26239  011674  90D8               	bcf	status,0,c
 26240  011676  3760               	rlcf	___fldiv@b& (0+255),f,b
 26241  011678  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26242  01167A  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26243  01167C  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26244                           
 26245                           ; BSR set to: 0
 26246  01167E  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26247                           
 26248                           ; BSR set to: 0
 26249  011680  8160               	bsf	___fldiv@b& (0+255),0,b
 26250                           
 26251                           ; BSR set to: 0
 26252  011682  90D8               	bcf	status,0,c
 26253  011684  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26254  011686  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26255  011688  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26256  01168A  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26257  01168C  0771               	decf	___fldiv@new_exp& (0+255),f,b
 26258  01168E  A0D8               	btfss	status,0,c
 26259  011690  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 26260  011692                     l2823:
 26261                           
 26262                           ; BSR set to: 0
 26263                           
 26264                           ; BSR set to: 0
 26265  011692  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 26266  011694  D7EF               	goto	l2824
 26267                           
 26268                           ; BSR set to: 0
 26269                           
 26270                           ; BSR set to: 0
 26271  011696  0E00               	movlw	0
 26272  011698  6F78               	movwf	___fldiv@aexp& (0+255),b
 26273                           
 26274                           ; BSR set to: 0
 26275  01169A  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 26276  01169C  D016               	goto	l2830
 26277                           
 26278                           ; BSR set to: 0
 26279  01169E  0EFF               	movlw	255
 26280  0116A0  1573               	andwf	___fldiv@grs& (0+255),w,b
 26281  0116A2  6F68               	movwf	??___fldiv& (0+255),b
 26282  0116A4  0EFF               	movlw	255
 26283  0116A6  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 26284  0116A8  6F69               	movwf	(??___fldiv+1)& (0+255),b
 26285  0116AA  0EFF               	movlw	255
 26286  0116AC  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 26287  0116AE  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26288  0116B0  0E7F               	movlw	127
 26289  0116B2  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 26290  0116B4  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 26291  0116B6  5168               	movf	??___fldiv& (0+255),w,b
 26292  0116B8  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 26293  0116BA  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 26294  0116BC  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 26295  0116BE  A4D8               	btfss	status,2,c
 26296  0116C0  D002               	goto	u10900
 26297                           
 26298                           ; BSR set to: 0
 26299                           
 26300                           ; BSR set to: 0
 26301  0116C2  A160               	btfss	___fldiv@b& (0+255),0,b
 26302  0116C4  D002               	goto	l2830
 26303  0116C6                     u10900:
 26304                           
 26305                           ; BSR set to: 0
 26306  0116C6  0E01               	movlw	1
 26307  0116C8  6F78               	movwf	___fldiv@aexp& (0+255),b
 26308  0116CA                     l2830:
 26309                           
 26310                           ; BSR set to: 0
 26311                           
 26312                           ; BSR set to: 0
 26313                           
 26314                           ; BSR set to: 0
 26315  0116CA  5178               	movf	___fldiv@aexp& (0+255),w,b
 26316  0116CC  B4D8               	btfsc	status,2,c
 26317  0116CE  D01F               	goto	l2832
 26318                           
 26319                           ; BSR set to: 0
 26320  0116D0  0E01               	movlw	1
 26321  0116D2  2760               	addwf	___fldiv@b& (0+255),f,b
 26322  0116D4  0E00               	movlw	0
 26323  0116D6  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 26324  0116D8  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 26325  0116DA  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 26326                           
 26327                           ; BSR set to: 0
 26328  0116DC  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 26329  0116DE  D017               	goto	l2832
 26330                           
 26331                           ; BSR set to: 0
 26332  0116E0  C060  F068         	movff	___fldiv@b,??___fldiv
 26333  0116E4  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 26334  0116E8  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 26335  0116EC  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 26336  0116F0  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 26337  0116F2  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 26338  0116F4  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 26339  0116F6  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 26340  0116F8  3368               	rrcf	??___fldiv& (0+255),f,b
 26341  0116FA  C068  F060         	movff	??___fldiv,___fldiv@b
 26342  0116FE  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 26343  011702  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 26344  011706  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 26345                           
 26346                           ; BSR set to: 0
 26347  01170A  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 26348  01170C  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 26349  01170E                     l2832:
 26350                           
 26351                           ; BSR set to: 0
 26352                           
 26353                           ; BSR set to: 0
 26354                           
 26355                           ; BSR set to: 0
 26356  01170E  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26357  011710  D010               	goto	l2833
 26358  011712  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26359  011714  E103               	bnz	u10930
 26360  011716  2971               	incf	___fldiv@new_exp& (0+255),w,b
 26361  011718  A0D8               	btfss	status,0,c
 26362  01171A  D00B               	goto	l2833
 26363  01171C                     u10930:
 26364                           
 26365                           ; BSR set to: 0
 26366  01171C  0E00               	movlw	0
 26367  01171E  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26368  011720  6971               	setf	___fldiv@new_exp& (0+255),b
 26369  011722  0E00               	movlw	0
 26370  011724  6F60               	movwf	___fldiv@b& (0+255),b
 26371  011726  0E00               	movlw	0
 26372  011728  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26373  01172A  0E00               	movlw	0
 26374  01172C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26375  01172E  0E00               	movlw	0
 26376  011730  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26377  011732                     l2833:
 26378                           
 26379                           ; BSR set to: 0
 26380                           
 26381                           ; BSR set to: 0
 26382  011732  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26383  011734  D005               	goto	u10940
 26384  011736  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26385  011738  E111               	bnz	l13646
 26386  01173A  0571               	decf	___fldiv@new_exp& (0+255),w,b
 26387  01173C  B0D8               	btfsc	status,0,c
 26388  01173E  D00E               	goto	l2834
 26389  011740                     u10940:
 26390                           
 26391                           ; BSR set to: 0
 26392  011740  0E00               	movlw	0
 26393  011742  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26394  011744  0E00               	movlw	0
 26395  011746  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26396  011748  0E00               	movlw	0
 26397  01174A  6F60               	movwf	___fldiv@b& (0+255),b
 26398  01174C  0E00               	movlw	0
 26399  01174E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26400  011750  0E00               	movlw	0
 26401  011752  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26402  011754  0E00               	movlw	0
 26403  011756  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26404  011758  0E00               	movlw	0
 26405  01175A  6F6C               	movwf	___fldiv@sign& (0+255),b
 26406  01175C                     l2834:
 26407  01175C                     l13646:
 26408                           
 26409                           ; BSR set to: 0
 26410  01175C  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 26411                           
 26412                           ; BSR set to: 0
 26413  011760  A177               	btfss	___fldiv@bexp& (0+255),0,b
 26414  011762  D002               	goto	l2835
 26415                           
 26416                           ; BSR set to: 0
 26417  011764  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26418  011766  D001               	goto	l2836
 26419  011768                     l2835:
 26420                           
 26421                           ; BSR set to: 0
 26422                           
 26423                           ; BSR set to: 0
 26424  011768  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 26425  01176A                     l2836:
 26426                           
 26427                           ; BSR set to: 0
 26428                           
 26429                           ; BSR set to: 0
 26430  01176A  90D8               	bcf	status,0,c
 26431  01176C  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 26432  01176E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26433                           
 26434                           ; BSR set to: 0
 26435  011770  516C               	movf	___fldiv@sign& (0+255),w,b
 26436  011772  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26437                           
 26438                           ; BSR set to: 0
 26439  011774  C060  F060         	movff	___fldiv@b,?___fldiv
 26440  011778  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26441  01177C  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26442  011780  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26443  011784  0012               	return	
 26444  011786                     __end_of___fldiv:
 26445                           	opt stack 0
 26446                           tosu	equ	0xFFF
 26447                           tosh	equ	0xFFE
 26448                           tosl	equ	0xFFD
 26449                           pclath	equ	0xFFA
 26450                           tblptru	equ	0xFF8
 26451                           tblptrh	equ	0xFF7
 26452                           tblptrl	equ	0xFF6
 26453                           tablat	equ	0xFF5
 26454                           prodh	equ	0xFF4
 26455                           prodl	equ	0xFF3
 26456                           intcon	equ	0xFF2
 26457                           indf0	equ	0xFEF
 26458                           postinc0	equ	0xFEE
 26459                           fsr0h	equ	0xFEA
 26460                           fsr0l	equ	0xFE9
 26461                           wreg	equ	0xFE8
 26462                           indf1	equ	0xFE7
 26463                           postdec1	equ	0xFE5
 26464                           fsr1h	equ	0xFE2
 26465                           fsr1l	equ	0xFE1
 26466                           indf2	equ	0xFDF
 26467                           postinc2	equ	0xFDE
 26468                           postdec2	equ	0xFDD
 26469                           plusw2	equ	0xFDB
 26470                           fsr2h	equ	0xFDA
 26471                           fsr2l	equ	0xFD9
 26472                           status	equ	0xFD8
 26473                           
 26474 ;; *************** function ___wmul *****************
 26475 ;; Defined at:
 26476 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 26477 ;; Parameters:    Size  Location     Type
 26478 ;;  multiplier      2    0[BANK0 ] unsigned int 
 26479 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 26480 ;; Auto vars:     Size  Location     Type
 26481 ;;  product         2    4[BANK0 ] unsigned int 
 26482 ;; Return value:  Size  Location     Type
 26483 ;;                  2    0[BANK0 ] unsigned int 
 26484 ;; Registers used:
 26485 ;;		wreg, status,2, status,0, prodl, prodh
 26486 ;; Tracked objects:
 26487 ;;		On entry : 0/0
 26488 ;;		On exit  : 0/0
 26489 ;;		Unchanged: 0/0
 26490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26491 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26494 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26495 ;;Total ram usage:        6 bytes
 26496 ;; Hardware stack levels used:    1
 26497 ;; Hardware stack levels required when called:    7
 26498 ;; This function calls:
 26499 ;;		Nothing
 26500 ;; This function is called by:
 26501 ;;		_LCD_DrawField
 26502 ;;		_ADCAverage
 26503 ;; This function uses a non-reentrant model
 26504 ;;
 26505                           
 26506                           	psect	text138
 26507  015C62                     __ptext138:
 26508                           	opt stack 0
 26509  015C62                     ___wmul:
 26510                           	opt stack 20
 26511                           
 26512                           ; BSR set to: 0
 26513                           ;incstack = 0
 26514  015C62  0100               	movlb	0	; () banked
 26515  015C64  5160               	movf	___wmul@multiplier& (0+255),w,b
 26516  015C66  0362               	mulwf	___wmul@multiplicand& (0+255),b
 26517  015C68  CFF3 F064          	movff	prodl,___wmul@product
 26518  015C6C  CFF4 F065          	movff	prodh,___wmul@product+1
 26519  015C70  5160               	movf	___wmul@multiplier& (0+255),w,b
 26520  015C72  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 26521  015C74  50F3               	movf	prodl,w,c
 26522  015C76  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 26523  015C78  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 26524  015C7A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 26525  015C7C  50F3               	movf	prodl,w,c
 26526  015C7E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 26527                           
 26528                           ; BSR set to: 0
 26529  015C80  C064  F060         	movff	___wmul@product,?___wmul
 26530  015C84  C065  F061         	movff	___wmul@product+1,?___wmul+1
 26531  015C88  0012               	return	
 26532  015C8A                     __end_of___wmul:
 26533                           	opt stack 0
 26534                           tosu	equ	0xFFF
 26535                           tosh	equ	0xFFE
 26536                           tosl	equ	0xFFD
 26537                           pclath	equ	0xFFA
 26538                           tblptru	equ	0xFF8
 26539                           tblptrh	equ	0xFF7
 26540                           tblptrl	equ	0xFF6
 26541                           tablat	equ	0xFF5
 26542                           prodh	equ	0xFF4
 26543                           prodl	equ	0xFF3
 26544                           intcon	equ	0xFF2
 26545                           indf0	equ	0xFEF
 26546                           postinc0	equ	0xFEE
 26547                           fsr0h	equ	0xFEA
 26548                           fsr0l	equ	0xFE9
 26549                           wreg	equ	0xFE8
 26550                           indf1	equ	0xFE7
 26551                           postdec1	equ	0xFE5
 26552                           fsr1h	equ	0xFE2
 26553                           fsr1l	equ	0xFE1
 26554                           indf2	equ	0xFDF
 26555                           postinc2	equ	0xFDE
 26556                           postdec2	equ	0xFDD
 26557                           plusw2	equ	0xFDB
 26558                           fsr2h	equ	0xFDA
 26559                           fsr2l	equ	0xFD9
 26560                           status	equ	0xFD8
 26561                           
 26562 ;; *************** function ___awdiv *****************
 26563 ;; Defined at:
 26564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 26565 ;; Parameters:    Size  Location     Type
 26566 ;;  dividend        2    0[BANK0 ] int 
 26567 ;;  divisor         2    2[BANK0 ] int 
 26568 ;; Auto vars:     Size  Location     Type
 26569 ;;  quotient        2    6[BANK0 ] int 
 26570 ;;  sign            1    5[BANK0 ] unsigned char 
 26571 ;;  counter         1    4[BANK0 ] unsigned char 
 26572 ;; Return value:  Size  Location     Type
 26573 ;;                  2    0[BANK0 ] int 
 26574 ;; Registers used:
 26575 ;;		wreg, status,2, status,0
 26576 ;; Tracked objects:
 26577 ;;		On entry : 0/0
 26578 ;;		On exit  : 0/0
 26579 ;;		Unchanged: 0/0
 26580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26581 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26582 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26584 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26585 ;;Total ram usage:        8 bytes
 26586 ;; Hardware stack levels used:    1
 26587 ;; Hardware stack levels required when called:    7
 26588 ;; This function calls:
 26589 ;;		Nothing
 26590 ;; This function is called by:
 26591 ;;		_Console_Tab
 26592 ;;		_ADCAverage
 26593 ;; This function uses a non-reentrant model
 26594 ;;
 26595                           
 26596                           	psect	text139
 26597  014886                     __ptext139:
 26598                           	opt stack 0
 26599  014886                     ___awdiv:
 26600                           	opt stack 19
 26601                           
 26602                           ; BSR set to: 0
 26603                           ;incstack = 0
 26604  014886  0E00               	movlw	0
 26605  014888  0100               	movlb	0	; () banked
 26606  01488A  6F65               	movwf	___awdiv@sign& (0+255),b
 26607                           
 26608                           ; BSR set to: 0
 26609  01488C  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26610  01488E  D006               	goto	l2473
 26611                           
 26612                           ; BSR set to: 0
 26613  014890  6D62               	negf	___awdiv@divisor& (0+255),b
 26614  014892  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 26615  014894  B0D8               	btfsc	status,0,c
 26616  014896  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 26617                           
 26618                           ; BSR set to: 0
 26619  014898  0E01               	movlw	1
 26620  01489A  6F65               	movwf	___awdiv@sign& (0+255),b
 26621  01489C                     l2473:
 26622                           
 26623                           ; BSR set to: 0
 26624                           
 26625                           ; BSR set to: 0
 26626  01489C  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 26627  01489E  D006               	goto	l2474
 26628                           
 26629                           ; BSR set to: 0
 26630  0148A0  6D60               	negf	___awdiv@dividend& (0+255),b
 26631  0148A2  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 26632  0148A4  B0D8               	btfsc	status,0,c
 26633  0148A6  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 26634                           
 26635                           ; BSR set to: 0
 26636  0148A8  0E01               	movlw	1
 26637  0148AA  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 26638  0148AC                     l2474:
 26639                           
 26640                           ; BSR set to: 0
 26641                           
 26642                           ; BSR set to: 0
 26643  0148AC  0E00               	movlw	0
 26644  0148AE  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 26645  0148B0  0E00               	movlw	0
 26646  0148B2  6F66               	movwf	___awdiv@quotient& (0+255),b
 26647                           
 26648                           ; BSR set to: 0
 26649  0148B4  5162               	movf	___awdiv@divisor& (0+255),w,b
 26650  0148B6  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 26651  0148B8  B4D8               	btfsc	status,2,c
 26652  0148BA  D01C               	goto	l2481
 26653                           
 26654                           ; BSR set to: 0
 26655  0148BC  0E01               	movlw	1
 26656  0148BE  6F64               	movwf	___awdiv@counter& (0+255),b
 26657  0148C0  D004               	goto	l2476
 26658  0148C2                     
 26659                           ; BSR set to: 0
 26660                           
 26661                           ; BSR set to: 0
 26662  0148C2  90D8               	bcf	status,0,c
 26663  0148C4  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 26664  0148C6  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 26665  0148C8  2B64               	incf	___awdiv@counter& (0+255),f,b
 26666  0148CA                     l2476:
 26667                           
 26668                           ; BSR set to: 0
 26669                           
 26670                           ; BSR set to: 0
 26671  0148CA  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26672  0148CC  D7FA               	goto	l2477
 26673  0148CE                     u10280:
 26674                           
 26675                           ; BSR set to: 0
 26676                           
 26677                           ; BSR set to: 0
 26678                           
 26679                           ; BSR set to: 0
 26680  0148CE  90D8               	bcf	status,0,c
 26681  0148D0  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 26682  0148D2  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 26683                           
 26684                           ; BSR set to: 0
 26685  0148D4  5162               	movf	___awdiv@divisor& (0+255),w,b
 26686  0148D6  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 26687  0148D8  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26688  0148DA  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 26689  0148DC  A0D8               	btfss	status,0,c
 26690  0148DE  D005               	goto	l2480
 26691                           
 26692                           ; BSR set to: 0
 26693  0148E0  5162               	movf	___awdiv@divisor& (0+255),w,b
 26694  0148E2  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 26695  0148E4  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26696  0148E6  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 26697                           
 26698                           ; BSR set to: 0
 26699  0148E8  8166               	bsf	___awdiv@quotient& (0+255),0,b
 26700  0148EA                     l2480:
 26701                           
 26702                           ; BSR set to: 0
 26703                           
 26704                           ; BSR set to: 0
 26705  0148EA  90D8               	bcf	status,0,c
 26706  0148EC  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 26707  0148EE  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 26708                           
 26709                           ; BSR set to: 0
 26710  0148F0  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 26711  0148F2  D7ED               	goto	u10280
 26712  0148F4                     l2481:
 26713                           
 26714                           ; BSR set to: 0
 26715                           
 26716                           ; BSR set to: 0
 26717                           
 26718                           ; BSR set to: 0
 26719  0148F4  5165               	movf	___awdiv@sign& (0+255),w,b
 26720  0148F6  B4D8               	btfsc	status,2,c
 26721  0148F8  D004               	goto	l2482
 26722                           
 26723                           ; BSR set to: 0
 26724  0148FA  6D66               	negf	___awdiv@quotient& (0+255),b
 26725  0148FC  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 26726  0148FE  B0D8               	btfsc	status,0,c
 26727  014900  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 26728  014902                     l2482:
 26729                           
 26730                           ; BSR set to: 0
 26731                           
 26732                           ; BSR set to: 0
 26733  014902  C066  F060         	movff	___awdiv@quotient,?___awdiv
 26734  014906  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 26735  01490A  0012               	return	
 26736  01490C                     __end_of___awdiv:
 26737                           	opt stack 0
 26738                           tosu	equ	0xFFF
 26739                           tosh	equ	0xFFE
 26740                           tosl	equ	0xFFD
 26741                           pclath	equ	0xFFA
 26742                           tblptru	equ	0xFF8
 26743                           tblptrh	equ	0xFF7
 26744                           tblptrl	equ	0xFF6
 26745                           tablat	equ	0xFF5
 26746                           prodh	equ	0xFF4
 26747                           prodl	equ	0xFF3
 26748                           intcon	equ	0xFF2
 26749                           indf0	equ	0xFEF
 26750                           postinc0	equ	0xFEE
 26751                           fsr0h	equ	0xFEA
 26752                           fsr0l	equ	0xFE9
 26753                           wreg	equ	0xFE8
 26754                           indf1	equ	0xFE7
 26755                           postdec1	equ	0xFE5
 26756                           fsr1h	equ	0xFE2
 26757                           fsr1l	equ	0xFE1
 26758                           indf2	equ	0xFDF
 26759                           postinc2	equ	0xFDE
 26760                           postdec2	equ	0xFDD
 26761                           plusw2	equ	0xFDB
 26762                           fsr2h	equ	0xFDA
 26763                           fsr2l	equ	0xFD9
 26764                           status	equ	0xFD8
 26765                           
 26766 ;; *************** function _HMI_SetNumber *****************
 26767 ;; Defined at:
 26768 ;;		line 221 in file "HMI.c"
 26769 ;; Parameters:    Size  Location     Type
 26770 ;;  pInput          2   22[BANK0 ] int 
 26771 ;; Auto vars:     Size  Location     Type
 26772 ;;		None
 26773 ;; Return value:  Size  Location     Type
 26774 ;;                  1    wreg      void 
 26775 ;; Registers used:
 26776 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26777 ;; Tracked objects:
 26778 ;;		On entry : 0/0
 26779 ;;		On exit  : 0/0
 26780 ;;		Unchanged: 0/0
 26781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26782 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26785 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26786 ;;Total ram usage:        2 bytes
 26787 ;; Hardware stack levels used:    1
 26788 ;; Hardware stack levels required when called:    9
 26789 ;; This function calls:
 26790 ;;		_HMI_SetSegments
 26791 ;;		_itos
 26792 ;; This function is called by:
 26793 ;;		_Event_TestButton
 26794 ;;		_ADCAverage
 26795 ;;		_main
 26796 ;;		_Event_HMI_UpButton
 26797 ;;		_Event_HMI_DownButton
 26798 ;; This function uses a non-reentrant model
 26799 ;;
 26800                           
 26801                           	psect	text140
 26802  015D00                     __ptext140:
 26803                           	opt stack 0
 26804  015D00                     _HMI_SetNumber:
 26805                           	opt stack 19
 26806                           
 26807                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26808                           
 26809                           ; BSR set to: 0
 26810                           ;incstack = 0
 26811  015D00  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26812  015D04  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26813  015D08  0E48               	movlw	low _HMIBoard
 26814  015D0A  0100               	movlb	0	; () banked
 26815  015D0C  6F6E               	movwf	itos@destination& (0+255),b
 26816  015D0E  0E01               	movlw	high _HMIBoard
 26817  015D10  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26818  015D12  EC5E  F09F         	call	_itos	;wreg free
 26819                           
 26820                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26821  015D16  0E48               	movlw	low _HMIBoard
 26822  015D18  0100               	movlb	0	; () banked
 26823  015D1A  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26824  015D1C  0E01               	movlw	high _HMIBoard
 26825  015D1E  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26826  015D20  ECBB  F0A1         	call	_HMI_SetSegments	;wreg free
 26827  015D24  0012               	return		;funcret
 26828  015D26                     __end_of_HMI_SetNumber:
 26829                           	opt stack 0
 26830                           tosu	equ	0xFFF
 26831                           tosh	equ	0xFFE
 26832                           tosl	equ	0xFFD
 26833                           pclath	equ	0xFFA
 26834                           tblptru	equ	0xFF8
 26835                           tblptrh	equ	0xFF7
 26836                           tblptrl	equ	0xFF6
 26837                           tablat	equ	0xFF5
 26838                           prodh	equ	0xFF4
 26839                           prodl	equ	0xFF3
 26840                           intcon	equ	0xFF2
 26841                           indf0	equ	0xFEF
 26842                           postinc0	equ	0xFEE
 26843                           fsr0h	equ	0xFEA
 26844                           fsr0l	equ	0xFE9
 26845                           wreg	equ	0xFE8
 26846                           indf1	equ	0xFE7
 26847                           postdec1	equ	0xFE5
 26848                           fsr1h	equ	0xFE2
 26849                           fsr1l	equ	0xFE1
 26850                           indf2	equ	0xFDF
 26851                           postinc2	equ	0xFDE
 26852                           postdec2	equ	0xFDD
 26853                           plusw2	equ	0xFDB
 26854                           fsr2h	equ	0xFDA
 26855                           fsr2l	equ	0xFD9
 26856                           status	equ	0xFD8
 26857                           
 26858 ;; *************** function _itos *****************
 26859 ;; Defined at:
 26860 ;;		line 369 in file "Library/Types.c"
 26861 ;; Parameters:    Size  Location     Type
 26862 ;;  input           2   12[BANK0 ] unsigned short 
 26863 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26864 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26865 ;; Auto vars:     Size  Location     Type
 26866 ;;  Out             2   20[BANK0 ] unsigned short 
 26867 ;;  Length          2   18[BANK0 ] unsigned short 
 26868 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26869 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26870 ;; Return value:  Size  Location     Type
 26871 ;;                  1    wreg      void 
 26872 ;; Registers used:
 26873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26874 ;; Tracked objects:
 26875 ;;		On entry : 0/0
 26876 ;;		On exit  : 0/0
 26877 ;;		Unchanged: 0/0
 26878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26879 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26880 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26882 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26883 ;;Total ram usage:       10 bytes
 26884 ;; Hardware stack levels used:    1
 26885 ;; Hardware stack levels required when called:    8
 26886 ;; This function calls:
 26887 ;;		___lwdiv
 26888 ;;		___lwmod
 26889 ;;		_reverse
 26890 ;; This function is called by:
 26891 ;;		_HMI_SetNumber
 26892 ;; This function uses a non-reentrant model
 26893 ;;
 26894                           
 26895                           	psect	text141
 26896  013EBC                     __ptext141:
 26897                           	opt stack 0
 26898  013EBC                     _itos:
 26899                           	opt stack 19
 26900                           
 26901                           ;Types.c: 371: UINT16 Out = input;
 26902                           
 26903                           ;incstack = 0
 26904  013EBC  C06C  F074         	movff	itos@input,itos@Out
 26905  013EC0  C06D  F075         	movff	itos@input+1,itos@Out+1
 26906                           
 26907                           ;Types.c: 372: UINT16 Length = 0;
 26908  013EC4  0E00               	movlw	0
 26909  013EC6  0100               	movlb	0	; () banked
 26910  013EC8  6F73               	movwf	(itos@Length+1)& (0+255),b
 26911  013ECA  0E00               	movlw	0
 26912  013ECC  6F72               	movwf	itos@Length& (0+255),b
 26913                           
 26914                           ; BSR set to: 0
 26915                           ;Types.c: 373: char *Data = destination;
 26916  013ECE  C06E  F070         	movff	itos@destination,itos@Data
 26917  013ED2  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26918                           
 26919                           ; BSR set to: 0
 26920                           ;Types.c: 374: if(Out == 0)
 26921  013ED6  5174               	movf	itos@Out& (0+255),w,b
 26922  013ED8  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26923  013EDA  A4D8               	btfss	status,2,c
 26924  013EDC  D030               	goto	l929
 26925                           
 26926                           ; BSR set to: 0
 26927                           ;Types.c: 375: {
 26928                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26929  013EDE  C070  FFD9         	movff	itos@Data,fsr2l
 26930  013EE2  C071  FFDA         	movff	itos@Data+1,fsr2h
 26931  013EE6  0E30               	movlw	48
 26932  013EE8  6EDF               	movwf	indf2,c
 26933                           
 26934                           ; BSR set to: 0
 26935                           ;Types.c: 377: Length = 1;
 26936  013EEA  0E00               	movlw	0
 26937  013EEC  6F73               	movwf	(itos@Length+1)& (0+255),b
 26938  013EEE  0E01               	movlw	1
 26939  013EF0  6F72               	movwf	itos@Length& (0+255),b
 26940                           
 26941                           ;Types.c: 378: }
 26942  013EF2  D039               	goto	l928
 26943  013EF4                     
 26944                           ; BSR set to: 0
 26945                           ;Types.c: 382: {
 26946                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26947                           
 26948                           ; BSR set to: 0
 26949  013EF4  C074  F067         	movff	itos@Out,___lwmod@dividend
 26950  013EF8  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 26951  013EFC  0E00               	movlw	0
 26952  013EFE  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 26953  013F00  0E0A               	movlw	10
 26954  013F02  6F69               	movwf	___lwmod@divisor& (0+255),b
 26955  013F04  EC8D  F0AB         	call	___lwmod	;wreg free
 26956  013F08  0100               	movlb	0	; () banked
 26957  013F0A  5167               	movf	?___lwmod& (0+255),w,b
 26958  013F0C  0F30               	addlw	48
 26959  013F0E  C070  FFD9         	movff	itos@Data,fsr2l
 26960  013F12  C071  FFDA         	movff	itos@Data+1,fsr2h
 26961  013F16  6EDF               	movwf	indf2,c
 26962                           
 26963                           ; BSR set to: 0
 26964                           ;Types.c: 384: Out /= 10;
 26965  013F18  C074  F060         	movff	itos@Out,___lwdiv@dividend
 26966  013F1C  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 26967  013F20  0E00               	movlw	0
 26968  013F22  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26969  013F24  0E0A               	movlw	10
 26970  013F26  6F62               	movwf	___lwdiv@divisor& (0+255),b
 26971  013F28  EC77  F0A9         	call	___lwdiv	;wreg free
 26972  013F2C  C060  F074         	movff	?___lwdiv,itos@Out
 26973  013F30  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 26974                           
 26975                           ;Types.c: 385: Length ++;
 26976  013F34  0100               	movlb	0	; () banked
 26977  013F36  4B72               	infsnz	itos@Length& (0+255),f,b
 26978  013F38  2B73               	incf	(itos@Length+1)& (0+255),f,b
 26979                           
 26980                           ; BSR set to: 0
 26981                           ;Types.c: 386: Data++;
 26982  013F3A  4B70               	infsnz	itos@Data& (0+255),f,b
 26983  013F3C  2B71               	incf	(itos@Data+1)& (0+255),f,b
 26984  013F3E                     l929:
 26985                           
 26986                           ; BSR set to: 0
 26987                           
 26988                           ; BSR set to: 0
 26989  013F3E  5174               	movf	itos@Out& (0+255),w,b
 26990  013F40  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26991  013F42  B4D8               	btfsc	status,2,c
 26992  013F44  D006               	goto	u10650
 26993                           
 26994                           ; BSR set to: 0
 26995  013F46  5173               	movf	(itos@Length+1)& (0+255),w,b
 26996  013F48  E104               	bnz	l13460
 26997  013F4A  0E06               	movlw	6
 26998  013F4C  5D72               	subwf	itos@Length& (0+255),w,b
 26999  013F4E  A0D8               	btfss	status,0,c
 27000  013F50  D7D1               	goto	l930
 27001  013F52                     u10650:
 27002  013F52                     l13460:
 27003                           
 27004                           ; BSR set to: 0
 27005                           ;Types.c: 387: }
 27006                           ;Types.c: 388: reverse(destination, Length);
 27007  013F52  C06E  F060         	movff	itos@destination,reverse@input
 27008  013F56  C06F  F061         	movff	itos@destination+1,reverse@input+1
 27009  013F5A  C072  F062         	movff	itos@Length,reverse@length
 27010  013F5E  C073  F063         	movff	itos@Length+1,reverse@length+1
 27011  013F62  EC4D  F0A9         	call	_reverse	;wreg free
 27012  013F66                     l928:
 27013                           
 27014                           ;Types.c: 389: }
 27015                           ;Types.c: 390: destination[Length] = '\0';
 27016  013F66  0100               	movlb	0	; () banked
 27017  013F68  5172               	movf	itos@Length& (0+255),w,b
 27018  013F6A  256E               	addwf	itos@destination& (0+255),w,b
 27019  013F6C  6ED9               	movwf	fsr2l,c
 27020  013F6E  5173               	movf	(itos@Length+1)& (0+255),w,b
 27021  013F70  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 27022  013F72  6EDA               	movwf	fsr2h,c
 27023  013F74  0E00               	movlw	0
 27024  013F76  6EDF               	movwf	indf2,c
 27025                           
 27026                           ; BSR set to: 0
 27027  013F78  0012               	return		;funcret
 27028  013F7A                     __end_of_itos:
 27029                           	opt stack 0
 27030                           tosu	equ	0xFFF
 27031                           tosh	equ	0xFFE
 27032                           tosl	equ	0xFFD
 27033                           pclath	equ	0xFFA
 27034                           tblptru	equ	0xFF8
 27035                           tblptrh	equ	0xFF7
 27036                           tblptrl	equ	0xFF6
 27037                           tablat	equ	0xFF5
 27038                           prodh	equ	0xFF4
 27039                           prodl	equ	0xFF3
 27040                           intcon	equ	0xFF2
 27041                           indf0	equ	0xFEF
 27042                           postinc0	equ	0xFEE
 27043                           fsr0h	equ	0xFEA
 27044                           fsr0l	equ	0xFE9
 27045                           wreg	equ	0xFE8
 27046                           indf1	equ	0xFE7
 27047                           postdec1	equ	0xFE5
 27048                           fsr1h	equ	0xFE2
 27049                           fsr1l	equ	0xFE1
 27050                           indf2	equ	0xFDF
 27051                           postinc2	equ	0xFDE
 27052                           postdec2	equ	0xFDD
 27053                           plusw2	equ	0xFDB
 27054                           fsr2h	equ	0xFDA
 27055                           fsr2l	equ	0xFD9
 27056                           status	equ	0xFD8
 27057                           
 27058 ;; *************** function _reverse *****************
 27059 ;; Defined at:
 27060 ;;		line 357 in file "Library/Types.c"
 27061 ;; Parameters:    Size  Location     Type
 27062 ;;  input           2    0[BANK0 ] PTR unsigned char 
 27063 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27064 ;;  length          2    2[BANK0 ] unsigned short 
 27065 ;; Auto vars:     Size  Location     Type
 27066 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 27067 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27068 ;;  tempVar         1    4[BANK0 ] unsigned char 
 27069 ;; Return value:  Size  Location     Type
 27070 ;;                  1    wreg      void 
 27071 ;; Registers used:
 27072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27073 ;; Tracked objects:
 27074 ;;		On entry : 0/0
 27075 ;;		On exit  : 0/0
 27076 ;;		Unchanged: 0/0
 27077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27079 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27081 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27082 ;;Total ram usage:        7 bytes
 27083 ;; Hardware stack levels used:    1
 27084 ;; Hardware stack levels required when called:    7
 27085 ;; This function calls:
 27086 ;;		Nothing
 27087 ;; This function is called by:
 27088 ;;		_itos
 27089 ;; This function uses a non-reentrant model
 27090 ;;
 27091                           
 27092                           	psect	text142
 27093  01529A                     __ptext142:
 27094                           	opt stack 0
 27095  01529A                     _reverse:
 27096                           	opt stack 19
 27097                           
 27098                           ;Types.c: 359: char tempVar,
 27099                           ;Types.c: 360: *iterator = input + length;
 27100                           
 27101                           ; BSR set to: 0
 27102                           ;incstack = 0
 27103  01529A  0100               	movlb	0	; () banked
 27104  01529C  5162               	movf	reverse@length& (0+255),w,b
 27105  01529E  2560               	addwf	reverse@input& (0+255),w,b
 27106  0152A0  6F65               	movwf	reverse@iterator& (0+255),b
 27107  0152A2  5163               	movf	(reverse@length+1)& (0+255),w,b
 27108  0152A4  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 27109  0152A6  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 27110                           
 27111                           ;Types.c: 362: while ( --iterator > input )
 27112  0152A8  D018               	goto	l921
 27113  0152AA                     
 27114                           ; BSR set to: 0
 27115                           ;Types.c: 363: {
 27116                           ;Types.c: 364: tempVar = *input;
 27117                           
 27118                           ; BSR set to: 0
 27119  0152AA  C060  FFD9         	movff	reverse@input,fsr2l
 27120  0152AE  C061  FFDA         	movff	reverse@input+1,fsr2h
 27121  0152B2  50DF               	movf	indf2,w,c
 27122  0152B4  6F64               	movwf	reverse@tempVar& (0+255),b
 27123                           
 27124                           ; BSR set to: 0
 27125                           ;Types.c: 365: *input++=*iterator;
 27126  0152B6  C065  FFD9         	movff	reverse@iterator,fsr2l
 27127  0152BA  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27128  0152BE  C060  FFE1         	movff	reverse@input,fsr1l
 27129  0152C2  C061  FFE2         	movff	reverse@input+1,fsr1h
 27130  0152C6  CFDF FFE7          	movff	indf2,indf1
 27131                           
 27132                           ; BSR set to: 0
 27133  0152CA  4B60               	infsnz	reverse@input& (0+255),f,b
 27134  0152CC  2B61               	incf	(reverse@input+1)& (0+255),f,b
 27135                           
 27136                           ; BSR set to: 0
 27137                           ;Types.c: 366: *iterator=tempVar;
 27138  0152CE  C065  FFD9         	movff	reverse@iterator,fsr2l
 27139  0152D2  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27140  0152D6  C064  FFDF         	movff	reverse@tempVar,indf2
 27141  0152DA                     l921:
 27142                           
 27143                           ; BSR set to: 0
 27144                           
 27145                           ; BSR set to: 0
 27146  0152DA  0765               	decf	reverse@iterator& (0+255),f,b
 27147  0152DC  A0D8               	btfss	status,0,c
 27148  0152DE  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 27149  0152E0  5165               	movf	reverse@iterator& (0+255),w,b
 27150  0152E2  5D60               	subwf	reverse@input& (0+255),w,b
 27151  0152E4  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 27152  0152E6  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 27153  0152E8  B0D8               	btfsc	status,0,c
 27154  0152EA  0012               	return	
 27155  0152EC  D7DE               	goto	l922
 27156  0152EE                     __end_of_reverse:
 27157                           	opt stack 0
 27158                           tosu	equ	0xFFF
 27159                           tosh	equ	0xFFE
 27160                           tosl	equ	0xFFD
 27161                           pclath	equ	0xFFA
 27162                           tblptru	equ	0xFF8
 27163                           tblptrh	equ	0xFF7
 27164                           tblptrl	equ	0xFF6
 27165                           tablat	equ	0xFF5
 27166                           prodh	equ	0xFF4
 27167                           prodl	equ	0xFF3
 27168                           intcon	equ	0xFF2
 27169                           indf0	equ	0xFEF
 27170                           postinc0	equ	0xFEE
 27171                           fsr0h	equ	0xFEA
 27172                           fsr0l	equ	0xFE9
 27173                           wreg	equ	0xFE8
 27174                           indf1	equ	0xFE7
 27175                           postdec1	equ	0xFE5
 27176                           fsr1h	equ	0xFE2
 27177                           fsr1l	equ	0xFE1
 27178                           indf2	equ	0xFDF
 27179                           postinc2	equ	0xFDE
 27180                           postdec2	equ	0xFDD
 27181                           plusw2	equ	0xFDB
 27182                           fsr2h	equ	0xFDA
 27183                           fsr2l	equ	0xFD9
 27184                           status	equ	0xFD8
 27185                           
 27186 ;; *************** function ___lwmod *****************
 27187 ;; Defined at:
 27188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 27189 ;; Parameters:    Size  Location     Type
 27190 ;;  dividend        2    7[BANK0 ] unsigned int 
 27191 ;;  divisor         2    9[BANK0 ] unsigned int 
 27192 ;; Auto vars:     Size  Location     Type
 27193 ;;  counter         1   11[BANK0 ] unsigned char 
 27194 ;; Return value:  Size  Location     Type
 27195 ;;                  2    7[BANK0 ] unsigned int 
 27196 ;; Registers used:
 27197 ;;		wreg, status,2, status,0
 27198 ;; Tracked objects:
 27199 ;;		On entry : 0/0
 27200 ;;		On exit  : 0/0
 27201 ;;		Unchanged: 0/0
 27202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27203 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27206 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27207 ;;Total ram usage:        5 bytes
 27208 ;; Hardware stack levels used:    1
 27209 ;; Hardware stack levels required when called:    7
 27210 ;; This function calls:
 27211 ;;		Nothing
 27212 ;; This function is called by:
 27213 ;;		_itos
 27214 ;;		_printf
 27215 ;; This function uses a non-reentrant model
 27216 ;;
 27217                           
 27218                           	psect	text143
 27219  01571A                     __ptext143:
 27220                           	opt stack 0
 27221  01571A                     ___lwmod:
 27222                           	opt stack 22
 27223                           
 27224                           ; BSR set to: 0
 27225                           ;incstack = 0
 27226  01571A  0100               	movlb	0	; () banked
 27227  01571C  5169               	movf	___lwmod@divisor& (0+255),w,b
 27228  01571E  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27229  015720  B4D8               	btfsc	status,2,c
 27230  015722  D018               	goto	l2724
 27231                           
 27232                           ; BSR set to: 0
 27233  015724  0E01               	movlw	1
 27234  015726  6F6B               	movwf	___lwmod@counter& (0+255),b
 27235  015728  D004               	goto	l2719
 27236  01572A                     
 27237                           ; BSR set to: 0
 27238                           
 27239                           ; BSR set to: 0
 27240  01572A  90D8               	bcf	status,0,c
 27241  01572C  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 27242  01572E  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27243  015730  2B6B               	incf	___lwmod@counter& (0+255),f,b
 27244  015732                     l2719:
 27245                           
 27246                           ; BSR set to: 0
 27247                           
 27248                           ; BSR set to: 0
 27249  015732  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27250  015734  D7FA               	goto	l2720
 27251  015736                     u10470:
 27252                           
 27253                           ; BSR set to: 0
 27254                           
 27255                           ; BSR set to: 0
 27256                           
 27257                           ; BSR set to: 0
 27258  015736  5169               	movf	___lwmod@divisor& (0+255),w,b
 27259  015738  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 27260  01573A  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27261  01573C  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27262  01573E  A0D8               	btfss	status,0,c
 27263  015740  D004               	goto	l2723
 27264                           
 27265                           ; BSR set to: 0
 27266  015742  5169               	movf	___lwmod@divisor& (0+255),w,b
 27267  015744  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 27268  015746  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27269  015748  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27270  01574A                     l2723:
 27271                           
 27272                           ; BSR set to: 0
 27273                           
 27274                           ; BSR set to: 0
 27275  01574A  90D8               	bcf	status,0,c
 27276  01574C  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27277  01574E  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 27278                           
 27279                           ; BSR set to: 0
 27280  015750  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 27281  015752  D7F1               	goto	u10470
 27282  015754                     l2724:
 27283                           
 27284                           ; BSR set to: 0
 27285                           
 27286                           ; BSR set to: 0
 27287  015754  C067  F067         	movff	___lwmod@dividend,?___lwmod
 27288  015758  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 27289                           
 27290                           ; BSR set to: 0
 27291  01575C  0012               	return		;funcret
 27292  01575E                     __end_of___lwmod:
 27293                           	opt stack 0
 27294                           tosu	equ	0xFFF
 27295                           tosh	equ	0xFFE
 27296                           tosl	equ	0xFFD
 27297                           pclath	equ	0xFFA
 27298                           tblptru	equ	0xFF8
 27299                           tblptrh	equ	0xFF7
 27300                           tblptrl	equ	0xFF6
 27301                           tablat	equ	0xFF5
 27302                           prodh	equ	0xFF4
 27303                           prodl	equ	0xFF3
 27304                           intcon	equ	0xFF2
 27305                           indf0	equ	0xFEF
 27306                           postinc0	equ	0xFEE
 27307                           fsr0h	equ	0xFEA
 27308                           fsr0l	equ	0xFE9
 27309                           wreg	equ	0xFE8
 27310                           indf1	equ	0xFE7
 27311                           postdec1	equ	0xFE5
 27312                           fsr1h	equ	0xFE2
 27313                           fsr1l	equ	0xFE1
 27314                           indf2	equ	0xFDF
 27315                           postinc2	equ	0xFDE
 27316                           postdec2	equ	0xFDD
 27317                           plusw2	equ	0xFDB
 27318                           fsr2h	equ	0xFDA
 27319                           fsr2l	equ	0xFD9
 27320                           status	equ	0xFD8
 27321                           
 27322 ;; *************** function ___lwdiv *****************
 27323 ;; Defined at:
 27324 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 27325 ;; Parameters:    Size  Location     Type
 27326 ;;  dividend        2    0[BANK0 ] unsigned int 
 27327 ;;  divisor         2    2[BANK0 ] unsigned int 
 27328 ;; Auto vars:     Size  Location     Type
 27329 ;;  quotient        2    5[BANK0 ] unsigned int 
 27330 ;;  counter         1    4[BANK0 ] unsigned char 
 27331 ;; Return value:  Size  Location     Type
 27332 ;;                  2    0[BANK0 ] unsigned int 
 27333 ;; Registers used:
 27334 ;;		wreg, status,2, status,0
 27335 ;; Tracked objects:
 27336 ;;		On entry : 0/0
 27337 ;;		On exit  : 0/0
 27338 ;;		Unchanged: 0/0
 27339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27340 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27343 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27344 ;;Total ram usage:        7 bytes
 27345 ;; Hardware stack levels used:    1
 27346 ;; Hardware stack levels required when called:    7
 27347 ;; This function calls:
 27348 ;;		Nothing
 27349 ;; This function is called by:
 27350 ;;		_itos
 27351 ;;		_printf
 27352 ;; This function uses a non-reentrant model
 27353 ;;
 27354                           
 27355                           	psect	text144
 27356  0152EE                     __ptext144:
 27357                           	opt stack 0
 27358  0152EE                     ___lwdiv:
 27359                           	opt stack 22
 27360                           
 27361                           ; BSR set to: 0
 27362                           ;incstack = 0
 27363  0152EE  0E00               	movlw	0
 27364  0152F0  0100               	movlb	0	; () banked
 27365  0152F2  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27366  0152F4  0E00               	movlw	0
 27367  0152F6  6F65               	movwf	___lwdiv@quotient& (0+255),b
 27368                           
 27369                           ; BSR set to: 0
 27370  0152F8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27371  0152FA  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27372  0152FC  B4D8               	btfsc	status,2,c
 27373  0152FE  D01C               	goto	l2714
 27374                           
 27375                           ; BSR set to: 0
 27376  015300  0E01               	movlw	1
 27377  015302  6F64               	movwf	___lwdiv@counter& (0+255),b
 27378  015304  D004               	goto	l2709
 27379  015306                     
 27380                           ; BSR set to: 0
 27381                           
 27382                           ; BSR set to: 0
 27383  015306  90D8               	bcf	status,0,c
 27384  015308  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 27385  01530A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27386  01530C  2B64               	incf	___lwdiv@counter& (0+255),f,b
 27387  01530E                     l2709:
 27388                           
 27389                           ; BSR set to: 0
 27390                           
 27391                           ; BSR set to: 0
 27392  01530E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27393  015310  D7FA               	goto	l2710
 27394  015312                     u10440:
 27395                           
 27396                           ; BSR set to: 0
 27397                           
 27398                           ; BSR set to: 0
 27399                           
 27400                           ; BSR set to: 0
 27401  015312  90D8               	bcf	status,0,c
 27402  015314  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 27403  015316  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27404                           
 27405                           ; BSR set to: 0
 27406  015318  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27407  01531A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 27408  01531C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27409  01531E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27410  015320  A0D8               	btfss	status,0,c
 27411  015322  D005               	goto	l2713
 27412                           
 27413                           ; BSR set to: 0
 27414  015324  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27415  015326  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 27416  015328  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27417  01532A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27418                           
 27419                           ; BSR set to: 0
 27420  01532C  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 27421  01532E                     l2713:
 27422                           
 27423                           ; BSR set to: 0
 27424                           
 27425                           ; BSR set to: 0
 27426  01532E  90D8               	bcf	status,0,c
 27427  015330  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27428  015332  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 27429                           
 27430                           ; BSR set to: 0
 27431  015334  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 27432  015336  D7ED               	goto	u10440
 27433  015338                     l2714:
 27434                           
 27435                           ; BSR set to: 0
 27436                           
 27437                           ; BSR set to: 0
 27438  015338  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 27439  01533C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27440                           
 27441                           ; BSR set to: 0
 27442  015340  0012               	return		;funcret
 27443  015342                     __end_of___lwdiv:
 27444                           	opt stack 0
 27445                           tosu	equ	0xFFF
 27446                           tosh	equ	0xFFE
 27447                           tosl	equ	0xFFD
 27448                           pclath	equ	0xFFA
 27449                           tblptru	equ	0xFF8
 27450                           tblptrh	equ	0xFF7
 27451                           tblptrl	equ	0xFF6
 27452                           tablat	equ	0xFF5
 27453                           prodh	equ	0xFF4
 27454                           prodl	equ	0xFF3
 27455                           intcon	equ	0xFF2
 27456                           indf0	equ	0xFEF
 27457                           postinc0	equ	0xFEE
 27458                           fsr0h	equ	0xFEA
 27459                           fsr0l	equ	0xFE9
 27460                           wreg	equ	0xFE8
 27461                           indf1	equ	0xFE7
 27462                           postdec1	equ	0xFE5
 27463                           fsr1h	equ	0xFE2
 27464                           fsr1l	equ	0xFE1
 27465                           indf2	equ	0xFDF
 27466                           postinc2	equ	0xFDE
 27467                           postdec2	equ	0xFDD
 27468                           plusw2	equ	0xFDB
 27469                           fsr2h	equ	0xFDA
 27470                           fsr2l	equ	0xFD9
 27471                           status	equ	0xFD8
 27472                           
 27473 ;; *************** function _HMI_SetSegments *****************
 27474 ;; Defined at:
 27475 ;;		line 226 in file "HMI.c"
 27476 ;; Parameters:    Size  Location     Type
 27477 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27478 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27479 ;; Auto vars:     Size  Location     Type
 27480 ;;  in              2    4[BANK0 ] unsigned short 
 27481 ;; Return value:  Size  Location     Type
 27482 ;;                  1    wreg      void 
 27483 ;; Registers used:
 27484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27485 ;; Tracked objects:
 27486 ;;		On entry : 0/0
 27487 ;;		On exit  : 0/0
 27488 ;;		Unchanged: 0/0
 27489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27490 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27491 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27492 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27493 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27494 ;;Total ram usage:        5 bytes
 27495 ;; Hardware stack levels used:    1
 27496 ;; Hardware stack levels required when called:    8
 27497 ;; This function calls:
 27498 ;;		_ToSegment
 27499 ;; This function is called by:
 27500 ;;		_HMI_SetNumber
 27501 ;; This function uses a non-reentrant model
 27502 ;;
 27503                           
 27504                           	psect	text145
 27505  014376                     __ptext145:
 27506                           	opt stack 0
 27507  014376                     _HMI_SetSegments:
 27508                           	opt stack 19
 27509                           
 27510                           ;HMI.c: 228: UINT16 in=0;
 27511                           
 27512                           ; BSR set to: 0
 27513                           ;incstack = 0
 27514  014376  0E00               	movlw	0
 27515  014378  0100               	movlb	0	; () banked
 27516  01437A  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27517  01437C  0E00               	movlw	0
 27518  01437E  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27519                           
 27520                           ;HMI.c: 229: while(*pString)
 27521  014380  D02E               	goto	l1202
 27522  014382                     
 27523                           ; BSR set to: 0
 27524                           ;HMI.c: 230: {
 27525                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27526                           
 27527                           ; BSR set to: 0
 27528  014382  0E48               	movlw	low _HMIBoard
 27529  014384  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27530  014386  6ED9               	movwf	fsr2l,c
 27531  014388  0E01               	movlw	high _HMIBoard
 27532  01438A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27533  01438C  6EDA               	movwf	fsr2h,c
 27534  01438E  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27535  014392  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27536  014396  50E7               	movf	indf1,w,c
 27537  014398  EC18  F08D         	call	_ToSegment
 27538  01439C  6EDF               	movwf	indf2,c
 27539                           
 27540                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27541  01439E  0E48               	movlw	low _HMIBoard
 27542  0143A0  0100               	movlb	0	; () banked
 27543  0143A2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27544  0143A4  6ED9               	movwf	fsr2l,c
 27545  0143A6  0E01               	movlw	high _HMIBoard
 27546  0143A8  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27547  0143AA  6EDA               	movwf	fsr2h,c
 27548  0143AC  0E80               	movlw	128
 27549  0143AE  18DE               	xorwf	postinc2,w,c
 27550  0143B0  A4D8               	btfss	status,2,c
 27551  0143B2  D00B               	goto	l1201
 27552                           
 27553                           ; BSR set to: 0
 27554                           ;HMI.c: 234: {
 27555                           ;HMI.c: 235: in--;
 27556  0143B4  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27557  0143B6  A0D8               	btfss	status,0,c
 27558  0143B8  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27559                           
 27560                           ; BSR set to: 0
 27561                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27562  0143BA  0E48               	movlw	low _HMIBoard
 27563  0143BC  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27564  0143BE  6ED9               	movwf	fsr2l,c
 27565  0143C0  0E01               	movlw	high _HMIBoard
 27566  0143C2  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27567  0143C4  6EDA               	movwf	fsr2h,c
 27568  0143C6  0E00               	movlw	0
 27569  0143C8  8EDB               	bsf	plusw2,7,c
 27570  0143CA                     l1201:
 27571                           
 27572                           ; BSR set to: 0
 27573                           ;HMI.c: 237: }
 27574                           ;HMI.c: 239: pString++;
 27575                           
 27576                           ; BSR set to: 0
 27577  0143CA  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27578  0143CC  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27579                           
 27580                           ; BSR set to: 0
 27581                           ;HMI.c: 240: in++;
 27582  0143CE  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27583  0143D0  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27584                           
 27585                           ; BSR set to: 0
 27586                           ;HMI.c: 241: if (in>=6)
 27587  0143D2  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27588  0143D4  E116               	bnz	l13522
 27589  0143D6  0E06               	movlw	6
 27590  0143D8  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27591  0143DA  B0D8               	btfsc	status,0,c
 27592  0143DC  D012               	goto	l1204
 27593  0143DE                     l1202:
 27594                           
 27595                           ; BSR set to: 0
 27596                           
 27597                           ; BSR set to: 0
 27598                           
 27599                           ; BSR set to: 0
 27600  0143DE  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27601  0143E2  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27602  0143E6  50DF               	movf	indf2,w,c
 27603  0143E8  B4D8               	btfsc	status,2,c
 27604  0143EA  D00B               	goto	l1204
 27605  0143EC  D7CA               	goto	l1200
 27606  0143EE                     
 27607                           ; BSR set to: 0
 27608                           ;HMI.c: 245: {
 27609                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27610                           
 27611                           ; BSR set to: 0
 27612  0143EE  0E48               	movlw	low _HMIBoard
 27613  0143F0  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27614  0143F2  6ED9               	movwf	fsr2l,c
 27615  0143F4  0E01               	movlw	high _HMIBoard
 27616  0143F6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27617  0143F8  6EDA               	movwf	fsr2h,c
 27618  0143FA  0E00               	movlw	0
 27619  0143FC  6EDF               	movwf	indf2,c
 27620                           
 27621                           ; BSR set to: 0
 27622                           ;HMI.c: 247: in++;
 27623  0143FE  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27624  014400  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27625  014402                     l1204:
 27626  014402                     l13522:
 27627                           
 27628                           ; BSR set to: 0
 27629  014402  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27630  014404  E105               	bnz	l1207
 27631  014406  0E06               	movlw	6
 27632  014408  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27633  01440A  B0D8               	btfsc	status,0,c
 27634  01440C  0012               	return	
 27635  01440E  D7EF               	goto	l1205
 27636  014410                     l1207:
 27637                           
 27638                           ; BSR set to: 0
 27639  014410  0012               	return		;funcret
 27640  014412                     __end_of_HMI_SetSegments:
 27641                           	opt stack 0
 27642                           tosu	equ	0xFFF
 27643                           tosh	equ	0xFFE
 27644                           tosl	equ	0xFFD
 27645                           pclath	equ	0xFFA
 27646                           tblptru	equ	0xFF8
 27647                           tblptrh	equ	0xFF7
 27648                           tblptrl	equ	0xFF6
 27649                           tablat	equ	0xFF5
 27650                           prodh	equ	0xFF4
 27651                           prodl	equ	0xFF3
 27652                           intcon	equ	0xFF2
 27653                           indf0	equ	0xFEF
 27654                           postinc0	equ	0xFEE
 27655                           fsr0h	equ	0xFEA
 27656                           fsr0l	equ	0xFE9
 27657                           wreg	equ	0xFE8
 27658                           indf1	equ	0xFE7
 27659                           postdec1	equ	0xFE5
 27660                           fsr1h	equ	0xFE2
 27661                           fsr1l	equ	0xFE1
 27662                           indf2	equ	0xFDF
 27663                           postinc2	equ	0xFDE
 27664                           postdec2	equ	0xFDD
 27665                           plusw2	equ	0xFDB
 27666                           fsr2h	equ	0xFDA
 27667                           fsr2l	equ	0xFD9
 27668                           status	equ	0xFD8
 27669                           
 27670 ;; *************** function _ToSegment *****************
 27671 ;; Defined at:
 27672 ;;		line 284 in file "Library/Types.c"
 27673 ;; Parameters:    Size  Location     Type
 27674 ;;  pCHR            1    wreg     unsigned char 
 27675 ;; Auto vars:     Size  Location     Type
 27676 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27677 ;; Return value:  Size  Location     Type
 27678 ;;                  1    wreg      unsigned char 
 27679 ;; Registers used:
 27680 ;;		wreg, status,2, status,0
 27681 ;; Tracked objects:
 27682 ;;		On entry : 0/0
 27683 ;;		On exit  : 0/0
 27684 ;;		Unchanged: 0/0
 27685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27690 ;;Total ram usage:        1 bytes
 27691 ;; Hardware stack levels used:    1
 27692 ;; Hardware stack levels required when called:    7
 27693 ;; This function calls:
 27694 ;;		Nothing
 27695 ;; This function is called by:
 27696 ;;		_HMI_SetSegments
 27697 ;; This function uses a non-reentrant model
 27698 ;;
 27699                           
 27700                           	psect	text146
 27701  011A30                     __ptext146:
 27702                           	opt stack 0
 27703  011A30                     _ToSegment:
 27704                           	opt stack 19
 27705                           
 27706                           ; BSR set to: 0
 27707                           ;incstack = 0
 27708                           ;ToSegment@pCHR stored from wreg
 27709  011A30  0100               	movlb	0	; () banked
 27710  011A32  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27711                           
 27712                           ;Types.c: 286: switch(pCHR)
 27713  011A34  D07E               	goto	l853
 27714  011A36  0E3F               	movlw	63
 27715  011A38  0012               	return	
 27716  011A3A  0E06               	movlw	6
 27717  011A3C  0012               	return	
 27718  011A3E  0E5B               	movlw	91
 27719  011A40  0012               	return	
 27720  011A42  0E4F               	movlw	79
 27721  011A44  0012               	return	
 27722  011A46  0E66               	movlw	102
 27723  011A48  0012               	return	
 27724  011A4A  0E6D               	movlw	109
 27725  011A4C  0012               	return	
 27726  011A4E  0E7D               	movlw	125
 27727  011A50  0012               	return	
 27728  011A52  0E07               	movlw	7
 27729  011A54  0012               	return	
 27730  011A56  0E7F               	movlw	127
 27731  011A58  0012               	return	
 27732  011A5A  0E6F               	movlw	111
 27733  011A5C  0012               	return	
 27734  011A5E  0E5F               	movlw	95
 27735  011A60  0012               	return	
 27736  011A62  0E7C               	movlw	124
 27737  011A64  0012               	return	
 27738  011A66  0E58               	movlw	88
 27739  011A68  0012               	return	
 27740  011A6A  0E5E               	movlw	94
 27741  011A6C  0012               	return	
 27742  011A6E  0E7B               	movlw	123
 27743  011A70  0012               	return	
 27744  011A72  0E71               	movlw	113
 27745  011A74  0012               	return	
 27746  011A76  0E6F               	movlw	111
 27747  011A78  0012               	return	
 27748  011A7A  0E74               	movlw	116
 27749  011A7C  0012               	return	
 27750  011A7E  0E04               	movlw	4
 27751  011A80  0012               	return	
 27752  011A82  0E0E               	movlw	14
 27753  011A84  0012               	return	
 27754  011A86  0E7A               	movlw	122
 27755  011A88  0012               	return	
 27756  011A8A  0E06               	movlw	6
 27757  011A8C  0012               	return	
 27758  011A8E  0E14               	movlw	20
 27759  011A90  0012               	return	
 27760  011A92  0E54               	movlw	84
 27761  011A94  0012               	return	
 27762  011A96  0E5C               	movlw	92
 27763  011A98  0012               	return	
 27764  011A9A  0E73               	movlw	115
 27765  011A9C  0012               	return	
 27766  011A9E  0E67               	movlw	103
 27767  011AA0  0012               	return	
 27768  011AA2  0E50               	movlw	80
 27769  011AA4  0012               	return	
 27770  011AA6  0E6D               	movlw	109
 27771  011AA8  0012               	return	
 27772  011AAA  0E78               	movlw	120
 27773  011AAC  0012               	return	
 27774  011AAE  0E1C               	movlw	28
 27775  011AB0  0012               	return	
 27776  011AB2  0E62               	movlw	98
 27777  011AB4  0012               	return	
 27778  011AB6  0E2A               	movlw	42
 27779  011AB8  0012               	return	
 27780  011ABA  0E64               	movlw	100
 27781  011ABC  0012               	return	
 27782  011ABE  0E6E               	movlw	110
 27783  011AC0  0012               	return	
 27784  011AC2  0E5B               	movlw	91
 27785  011AC4  0012               	return	
 27786  011AC6  0E77               	movlw	119
 27787  011AC8  0012               	return	
 27788  011ACA  0E7F               	movlw	127
 27789  011ACC  0012               	return	
 27790  011ACE  0E39               	movlw	57
 27791  011AD0  0012               	return	
 27792  011AD2  0E3F               	movlw	63
 27793  011AD4  0012               	return	
 27794  011AD6  0E79               	movlw	121
 27795  011AD8  0012               	return	
 27796  011ADA  0E71               	movlw	113
 27797  011ADC  0012               	return	
 27798  011ADE  0E3D               	movlw	61
 27799  011AE0  0012               	return	
 27800  011AE2  0E76               	movlw	118
 27801  011AE4  0012               	return	
 27802  011AE6  0E06               	movlw	6
 27803  011AE8  0012               	return	
 27804  011AEA  0E1E               	movlw	30
 27805  011AEC  0012               	return	
 27806  011AEE  0E57               	movlw	87
 27807  011AF0  0012               	return	
 27808  011AF2  0E38               	movlw	56
 27809  011AF4  0012               	return	
 27810  011AF6  0E76               	movlw	118
 27811  011AF8  0012               	return	
 27812  011AFA  0E76               	movlw	118
 27813  011AFC  0012               	return	
 27814  011AFE  0E3F               	movlw	63
 27815  011B00  0012               	return	
 27816  011B02  0E73               	movlw	115
 27817  011B04  0012               	return	
 27818  011B06  0E3F               	movlw	63
 27819  011B08  0012               	return	
 27820  011B0A  0E77               	movlw	119
 27821  011B0C  0012               	return	
 27822  011B0E  0E6D               	movlw	109
 27823  011B10  0012               	return	
 27824  011B12  0E31               	movlw	49
 27825  011B14  0012               	return	
 27826  011B16  0E3E               	movlw	62
 27827  011B18  0012               	return	
 27828  011B1A  0E3E               	movlw	62
 27829  011B1C  0012               	return	
 27830  011B1E  0E7E               	movlw	126
 27831  011B20  0012               	return	
 27832  011B22  0E76               	movlw	118
 27833  011B24  0012               	return	
 27834  011B26  0E66               	movlw	102
 27835  011B28  0012               	return	
 27836  011B2A  0E5B               	movlw	91
 27837  011B2C  0012               	return	
 27838  011B2E  0E80               	movlw	128
 27839  011B30  0012               	return	
 27840  011B32                     l853:
 27841  011B32  0100               	movlb	0	; () banked
 27842  011B34  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27843                           
 27844                           ; Switch size 1, requested type "space"
 27845                           ; Number of cases is 63, Range of values is 46 to 122
 27846                           ; switch strategies available:
 27847                           ; Name         Instructions Cycles
 27848                           ; simple_byte          190    96 (average)
 27849                           ;	Chosen strategy is simple_byte
 27850  011B36  0A2E               	xorlw	46	; case 46
 27851  011B38  B4D8               	btfsc	status,2,c
 27852  011B3A  D7F9               	goto	l917
 27853  011B3C  0A1E               	xorlw	30	; case 48
 27854  011B3E  B4D8               	btfsc	status,2,c
 27855  011B40  D77A               	goto	l854
 27856  011B42  0A01               	xorlw	1	; case 49
 27857  011B44  B4D8               	btfsc	status,2,c
 27858  011B46  D779               	goto	l856
 27859  011B48  0A03               	xorlw	3	; case 50
 27860  011B4A  B4D8               	btfsc	status,2,c
 27861  011B4C  D778               	goto	l857
 27862  011B4E  0A01               	xorlw	1	; case 51
 27863  011B50  B4D8               	btfsc	status,2,c
 27864  011B52  D777               	goto	l858
 27865  011B54  0A07               	xorlw	7	; case 52
 27866  011B56  B4D8               	btfsc	status,2,c
 27867  011B58  D776               	goto	l859
 27868  011B5A  0A01               	xorlw	1	; case 53
 27869  011B5C  B4D8               	btfsc	status,2,c
 27870  011B5E  D775               	goto	l860
 27871  011B60  0A03               	xorlw	3	; case 54
 27872  011B62  B4D8               	btfsc	status,2,c
 27873  011B64  D774               	goto	l861
 27874  011B66  0A01               	xorlw	1	; case 55
 27875  011B68  B4D8               	btfsc	status,2,c
 27876  011B6A  D773               	goto	l862
 27877  011B6C  0A0F               	xorlw	15	; case 56
 27878  011B6E  B4D8               	btfsc	status,2,c
 27879  011B70  D772               	goto	l863
 27880  011B72  0A01               	xorlw	1	; case 57
 27881  011B74  B4D8               	btfsc	status,2,c
 27882  011B76  D771               	goto	l864
 27883  011B78  0A78               	xorlw	120	; case 65
 27884  011B7A  B4D8               	btfsc	status,2,c
 27885  011B7C  D7A4               	goto	l891
 27886  011B7E  0A03               	xorlw	3	; case 66
 27887  011B80  B4D8               	btfsc	status,2,c
 27888  011B82  D7A3               	goto	l892
 27889  011B84  0A01               	xorlw	1	; case 67
 27890  011B86  B4D8               	btfsc	status,2,c
 27891  011B88  D7A2               	goto	l893
 27892  011B8A  0A07               	xorlw	7	; case 68
 27893  011B8C  B4D8               	btfsc	status,2,c
 27894  011B8E  D7A1               	goto	l894
 27895  011B90  0A01               	xorlw	1	; case 69
 27896  011B92  B4D8               	btfsc	status,2,c
 27897  011B94  D7A0               	goto	l895
 27898  011B96  0A03               	xorlw	3	; case 70
 27899  011B98  B4D8               	btfsc	status,2,c
 27900  011B9A  D79F               	goto	l896
 27901  011B9C  0A01               	xorlw	1	; case 71
 27902  011B9E  B4D8               	btfsc	status,2,c
 27903  011BA0  D79E               	goto	l897
 27904  011BA2  0A0F               	xorlw	15	; case 72
 27905  011BA4  B4D8               	btfsc	status,2,c
 27906  011BA6  D79D               	goto	l898
 27907  011BA8  0A01               	xorlw	1	; case 73
 27908  011BAA  B4D8               	btfsc	status,2,c
 27909  011BAC  D79C               	goto	l899
 27910  011BAE  0A03               	xorlw	3	; case 74
 27911  011BB0  B4D8               	btfsc	status,2,c
 27912  011BB2  D79B               	goto	l900
 27913  011BB4  0A01               	xorlw	1	; case 75
 27914  011BB6  B4D8               	btfsc	status,2,c
 27915  011BB8  D79A               	goto	l901
 27916  011BBA  0A07               	xorlw	7	; case 76
 27917  011BBC  B4D8               	btfsc	status,2,c
 27918  011BBE  D799               	goto	l902
 27919  011BC0  0A01               	xorlw	1	; case 77
 27920  011BC2  B4D8               	btfsc	status,2,c
 27921  011BC4  D798               	goto	l903
 27922  011BC6  0A03               	xorlw	3	; case 78
 27923  011BC8  B4D8               	btfsc	status,2,c
 27924  011BCA  D797               	goto	l904
 27925  011BCC  0A01               	xorlw	1	; case 79
 27926  011BCE  B4D8               	btfsc	status,2,c
 27927  011BD0  D796               	goto	l905
 27928  011BD2  0A1F               	xorlw	31	; case 80
 27929  011BD4  B4D8               	btfsc	status,2,c
 27930  011BD6  D795               	goto	l906
 27931  011BD8  0A01               	xorlw	1	; case 81
 27932  011BDA  B4D8               	btfsc	status,2,c
 27933  011BDC  D794               	goto	l907
 27934  011BDE  0A03               	xorlw	3	; case 82
 27935  011BE0  B4D8               	btfsc	status,2,c
 27936  011BE2  D793               	goto	l908
 27937  011BE4  0A01               	xorlw	1	; case 83
 27938  011BE6  B4D8               	btfsc	status,2,c
 27939  011BE8  D792               	goto	l909
 27940  011BEA  0A07               	xorlw	7	; case 84
 27941  011BEC  B4D8               	btfsc	status,2,c
 27942  011BEE  D791               	goto	l910
 27943  011BF0  0A01               	xorlw	1	; case 85
 27944  011BF2  B4D8               	btfsc	status,2,c
 27945  011BF4  D790               	goto	l911
 27946  011BF6  0A03               	xorlw	3	; case 86
 27947  011BF8  B4D8               	btfsc	status,2,c
 27948  011BFA  D78F               	goto	l912
 27949  011BFC  0A01               	xorlw	1	; case 87
 27950  011BFE  B4D8               	btfsc	status,2,c
 27951  011C00  D78E               	goto	l913
 27952  011C02  0A0F               	xorlw	15	; case 88
 27953  011C04  B4D8               	btfsc	status,2,c
 27954  011C06  D78D               	goto	l914
 27955  011C08  0A01               	xorlw	1	; case 89
 27956  011C0A  B4D8               	btfsc	status,2,c
 27957  011C0C  D78C               	goto	l915
 27958  011C0E  0A03               	xorlw	3	; case 90
 27959  011C10  B4D8               	btfsc	status,2,c
 27960  011C12  D78B               	goto	l916
 27961  011C14  0A3B               	xorlw	59	; case 97
 27962  011C16  B4D8               	btfsc	status,2,c
 27963  011C18  D722               	goto	l865
 27964  011C1A  0A03               	xorlw	3	; case 98
 27965  011C1C  B4D8               	btfsc	status,2,c
 27966  011C1E  D721               	goto	l866
 27967  011C20  0A01               	xorlw	1	; case 99
 27968  011C22  B4D8               	btfsc	status,2,c
 27969  011C24  D720               	goto	l867
 27970  011C26  0A07               	xorlw	7	; case 100
 27971  011C28  B4D8               	btfsc	status,2,c
 27972  011C2A  D71F               	goto	l868
 27973  011C2C  0A01               	xorlw	1	; case 101
 27974  011C2E  B4D8               	btfsc	status,2,c
 27975  011C30  D71E               	goto	l869
 27976  011C32  0A03               	xorlw	3	; case 102
 27977  011C34  B4D8               	btfsc	status,2,c
 27978  011C36  D71D               	goto	l870
 27979  011C38  0A01               	xorlw	1	; case 103
 27980  011C3A  B4D8               	btfsc	status,2,c
 27981  011C3C  D71C               	goto	l871
 27982  011C3E  0A0F               	xorlw	15	; case 104
 27983  011C40  B4D8               	btfsc	status,2,c
 27984  011C42  D71B               	goto	l872
 27985  011C44  0A01               	xorlw	1	; case 105
 27986  011C46  B4D8               	btfsc	status,2,c
 27987  011C48  D71A               	goto	l873
 27988  011C4A  0A03               	xorlw	3	; case 106
 27989  011C4C  B4D8               	btfsc	status,2,c
 27990  011C4E  D719               	goto	l874
 27991  011C50  0A01               	xorlw	1	; case 107
 27992  011C52  B4D8               	btfsc	status,2,c
 27993  011C54  D718               	goto	l875
 27994  011C56  0A07               	xorlw	7	; case 108
 27995  011C58  B4D8               	btfsc	status,2,c
 27996  011C5A  D717               	goto	l876
 27997  011C5C  0A01               	xorlw	1	; case 109
 27998  011C5E  B4D8               	btfsc	status,2,c
 27999  011C60  D716               	goto	l877
 28000  011C62  0A03               	xorlw	3	; case 110
 28001  011C64  B4D8               	btfsc	status,2,c
 28002  011C66  D715               	goto	l878
 28003  011C68  0A01               	xorlw	1	; case 111
 28004  011C6A  B4D8               	btfsc	status,2,c
 28005  011C6C  D714               	goto	l879
 28006  011C6E  0A1F               	xorlw	31	; case 112
 28007  011C70  B4D8               	btfsc	status,2,c
 28008  011C72  D713               	goto	l880
 28009  011C74  0A01               	xorlw	1	; case 113
 28010  011C76  B4D8               	btfsc	status,2,c
 28011  011C78  D712               	goto	l881
 28012  011C7A  0A03               	xorlw	3	; case 114
 28013  011C7C  B4D8               	btfsc	status,2,c
 28014  011C7E  D711               	goto	l882
 28015  011C80  0A01               	xorlw	1	; case 115
 28016  011C82  B4D8               	btfsc	status,2,c
 28017  011C84  D710               	goto	l883
 28018  011C86  0A07               	xorlw	7	; case 116
 28019  011C88  B4D8               	btfsc	status,2,c
 28020  011C8A  D70F               	goto	l884
 28021  011C8C  0A01               	xorlw	1	; case 117
 28022  011C8E  B4D8               	btfsc	status,2,c
 28023  011C90  D70E               	goto	l885
 28024  011C92  0A03               	xorlw	3	; case 118
 28025  011C94  B4D8               	btfsc	status,2,c
 28026  011C96  D70D               	goto	l886
 28027  011C98  0A01               	xorlw	1	; case 119
 28028  011C9A  B4D8               	btfsc	status,2,c
 28029  011C9C  D70C               	goto	l887
 28030  011C9E  0A0F               	xorlw	15	; case 120
 28031  011CA0  B4D8               	btfsc	status,2,c
 28032  011CA2  D70B               	goto	l888
 28033  011CA4  0A01               	xorlw	1	; case 121
 28034  011CA6  B4D8               	btfsc	status,2,c
 28035  011CA8  D70A               	goto	l889
 28036  011CAA  0A03               	xorlw	3	; case 122
 28037  011CAC  B4D8               	btfsc	status,2,c
 28038  011CAE  D709               	goto	l890
 28039                           
 28040                           ;Types.c: 354: return 0;
 28041                           
 28042                           ; BSR set to: 0
 28043  011CB0  0E00               	movlw	0
 28044  011CB2  0012               	return	
 28045  011CB4                     __end_of_ToSegment:
 28046                           	opt stack 0
 28047                           tosu	equ	0xFFF
 28048                           tosh	equ	0xFFE
 28049                           tosl	equ	0xFFD
 28050                           pclath	equ	0xFFA
 28051                           tblptru	equ	0xFF8
 28052                           tblptrh	equ	0xFF7
 28053                           tblptrl	equ	0xFF6
 28054                           tablat	equ	0xFF5
 28055                           prodh	equ	0xFF4
 28056                           prodl	equ	0xFF3
 28057                           intcon	equ	0xFF2
 28058                           indf0	equ	0xFEF
 28059                           postinc0	equ	0xFEE
 28060                           fsr0h	equ	0xFEA
 28061                           fsr0l	equ	0xFE9
 28062                           wreg	equ	0xFE8
 28063                           indf1	equ	0xFE7
 28064                           postdec1	equ	0xFE5
 28065                           fsr1h	equ	0xFE2
 28066                           fsr1l	equ	0xFE1
 28067                           indf2	equ	0xFDF
 28068                           postinc2	equ	0xFDE
 28069                           postdec2	equ	0xFDD
 28070                           plusw2	equ	0xFDB
 28071                           fsr2h	equ	0xFDA
 28072                           fsr2l	equ	0xFD9
 28073                           status	equ	0xFD8
 28074                           
 28075 ;; *************** function _HMI_Render *****************
 28076 ;; Defined at:
 28077 ;;		line 138 in file "HMI.c"
 28078 ;; Parameters:    Size  Location     Type
 28079 ;;		None
 28080 ;; Auto vars:     Size  Location     Type
 28081 ;;  a               2    8[BANK0 ] unsigned short 
 28082 ;; Return value:  Size  Location     Type
 28083 ;;                  1    wreg      void 
 28084 ;; Registers used:
 28085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28086 ;; Tracked objects:
 28087 ;;		On entry : 0/0
 28088 ;;		On exit  : 0/0
 28089 ;;		Unchanged: 0/0
 28090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28092 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28094 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28095 ;;Total ram usage:        2 bytes
 28096 ;; Hardware stack levels used:    1
 28097 ;; Hardware stack levels required when called:    9
 28098 ;; This function calls:
 28099 ;;		_OutSeg
 28100 ;; This function is called by:
 28101 ;;		_ADCAverage
 28102 ;;		_main
 28103 ;; This function uses a non-reentrant model
 28104 ;;
 28105                           
 28106                           	psect	text147
 28107  0159BC                     __ptext147:
 28108                           	opt stack 0
 28109  0159BC                     _HMI_Render:
 28110                           	opt stack 19
 28111                           
 28112                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 28113                           
 28114                           ;incstack = 0
 28115  0159BC  0E00               	movlw	0
 28116  0159BE  0100               	movlb	0	; () banked
 28117  0159C0  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 28118  0159C2  0E00               	movlw	0
 28119  0159C4  6F68               	movwf	HMI_Render@a& (0+255),b
 28120  0159C6                     l14496:
 28121                           
 28122                           ; BSR set to: 0
 28123  0159C6  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 28124  0159C8  E113               	bnz	l1158
 28125  0159CA  0E08               	movlw	8
 28126  0159CC  5D68               	subwf	HMI_Render@a& (0+255),w,b
 28127  0159CE  B0D8               	btfsc	status,0,c
 28128  0159D0  0012               	return	
 28129                           
 28130                           ; BSR set to: 0
 28131                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 28132                           
 28133                           ; BSR set to: 0
 28134                           
 28135                           ; BSR set to: 0
 28136  0159D2  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 28137  0159D6  0E48               	movlw	low _HMIBoard
 28138  0159D8  2568               	addwf	HMI_Render@a& (0+255),w,b
 28139  0159DA  6ED9               	movwf	fsr2l,c
 28140  0159DC  0E01               	movlw	high _HMIBoard
 28141  0159DE  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 28142  0159E0  6EDA               	movwf	fsr2h,c
 28143  0159E2  50DF               	movf	indf2,w,c
 28144  0159E4  EC72  F0A6         	call	_OutSeg
 28145  0159E8  0100               	movlb	0	; () banked
 28146  0159EA  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 28147  0159EC  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 28148  0159EE  D7EB               	goto	l14496
 28149  0159F0                     l1158:
 28150                           
 28151                           ; BSR set to: 0
 28152  0159F0  0012               	return		;funcret
 28153  0159F2                     __end_of_HMI_Render:
 28154                           	opt stack 0
 28155                           tosu	equ	0xFFF
 28156                           tosh	equ	0xFFE
 28157                           tosl	equ	0xFFD
 28158                           pclath	equ	0xFFA
 28159                           tblptru	equ	0xFF8
 28160                           tblptrh	equ	0xFF7
 28161                           tblptrl	equ	0xFF6
 28162                           tablat	equ	0xFF5
 28163                           prodh	equ	0xFF4
 28164                           prodl	equ	0xFF3
 28165                           intcon	equ	0xFF2
 28166                           indf0	equ	0xFEF
 28167                           postinc0	equ	0xFEE
 28168                           fsr0h	equ	0xFEA
 28169                           fsr0l	equ	0xFE9
 28170                           wreg	equ	0xFE8
 28171                           indf1	equ	0xFE7
 28172                           postdec1	equ	0xFE5
 28173                           fsr1h	equ	0xFE2
 28174                           fsr1l	equ	0xFE1
 28175                           indf2	equ	0xFDF
 28176                           postinc2	equ	0xFDE
 28177                           postdec2	equ	0xFDD
 28178                           plusw2	equ	0xFDB
 28179                           fsr2h	equ	0xFDA
 28180                           fsr2l	equ	0xFD9
 28181                           status	equ	0xFD8
 28182                           
 28183 ;; *************** function _OutSeg *****************
 28184 ;; Defined at:
 28185 ;;		line 54 in file "HMI.c"
 28186 ;; Parameters:    Size  Location     Type
 28187 ;;  pInput          1    wreg     unsigned char 
 28188 ;;  pSegment        1    3[BANK0 ] unsigned char 
 28189 ;; Auto vars:     Size  Location     Type
 28190 ;;  pInput          1    6[BANK0 ] unsigned char 
 28191 ;;  out             1    7[BANK0 ] volatile unsigned char 
 28192 ;; Return value:  Size  Location     Type
 28193 ;;                  1    wreg      void 
 28194 ;; Registers used:
 28195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28196 ;; Tracked objects:
 28197 ;;		On entry : 0/0
 28198 ;;		On exit  : 0/0
 28199 ;;		Unchanged: 0/0
 28200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28201 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28203 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28204 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28205 ;;Total ram usage:        5 bytes
 28206 ;; Hardware stack levels used:    1
 28207 ;; Hardware stack levels required when called:    8
 28208 ;; This function calls:
 28209 ;;		_SPI_Send
 28210 ;; This function is called by:
 28211 ;;		_HMI_Render
 28212 ;;		_HMI_GRender
 28213 ;; This function uses a non-reentrant model
 28214 ;;
 28215                           
 28216                           	psect	text148
 28217  014CE4                     __ptext148:
 28218                           	opt stack 0
 28219  014CE4                     _OutSeg:
 28220                           	opt stack 19
 28221                           
 28222                           ; BSR set to: 0
 28223                           ;incstack = 0
 28224                           ;OutSeg@pInput stored from wreg
 28225  014CE4  0100               	movlb	0	; () banked
 28226  014CE6  6F66               	movwf	OutSeg@pInput& (0+255),b
 28227                           
 28228                           ;HMI.c: 58: static UINT8 cur;
 28229                           ;HMI.c: 59: volatile UINT8 out;
 28230                           ;HMI.c: 60: static UINT8 segset;
 28231                           ;HMI.c: 61: static UINT8 a;
 28232                           ;HMI.c: 83: if (pSegment <= 8)
 28233  014CE8  0E09               	movlw	9
 28234  014CEA  0100               	movlb	0	; () banked
 28235  014CEC  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 28236  014CEE  0012               	return	
 28237                           
 28238                           ; BSR set to: 0
 28239                           ;HMI.c: 84: {
 28240                           ;HMI.c: 85: cur = pInput;
 28241  014CF0  C066  F03F         	movff	OutSeg@pInput,OutSeg@cur
 28242                           
 28243                           ; BSR set to: 0
 28244                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 28245  014CF4  0E00               	movlw	0
 28246  014CF6  6E3D               	movwf	OutSeg@a,c
 28247  014CF8                     l14014:
 28248                           
 28249                           ; BSR set to: 0
 28250  014CF8  0E07               	movlw	7
 28251  014CFA  643D               	cpfsgt	OutSeg@a,c
 28252  014CFC  D001               	goto	l1146
 28253  014CFE  D01F               	goto	u11350
 28254  014D00                     l1146:
 28255                           
 28256                           ;HMI.c: 87: {
 28257                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 28258                           
 28259                           ; BSR set to: 0
 28260  014D00  C03F  F064         	movff	OutSeg@cur,??_OutSeg
 28261  014D04  0E01               	movlw	1
 28262  014D06  0100               	movlb	0	; () banked
 28263  014D08  1764               	andwf	??_OutSeg& (0+255),f,b
 28264  014D0A  0E06               	movlw	6
 28265  014D0C  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 28266  014D0E                     u11345:
 28267  014D0E  90D8               	bcf	status,0,c
 28268  014D10  3764               	rlcf	??_OutSeg& (0+255),f,b
 28269  014D12  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 28270  014D14  D7FC               	goto	u11345
 28271  014D16  5164               	movf	??_OutSeg& (0+255),w,b
 28272  014D18  6E3E               	movwf	OutSeg@segset,c
 28273                           
 28274                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 28275  014D1A  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 28276  014D1C  42E8               	rrncf	wreg,f,c
 28277  014D1E  0BF8               	andlw	248
 28278  014D20  103D               	iorwf	OutSeg@a,w,c
 28279  014D22  103E               	iorwf	OutSeg@segset,w,c
 28280  014D24  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 28281                           
 28282                           ;HMI.c: 90: cur >>= 1;
 28283  014D26  90D8               	bcf	status,0,c
 28284  014D28  323F               	rrcf	OutSeg@cur,f,c
 28285                           
 28286                           ; BSR set to: 0
 28287                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 28288  014D2A  0EC8               	movlw	low _SPI1
 28289  014D2C  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28290  014D2E  0E02               	movlw	high _SPI1
 28291  014D30  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28292  014D32  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 28293  014D36  ECDF  F0A6         	call	_SPI_Send	;wreg free
 28294  014D3A  2A3D               	incf	OutSeg@a,f,c
 28295  014D3C  D7DD               	goto	l14014
 28296  014D3E                     u11350:
 28297                           
 28298                           ;HMI.c: 96: }
 28299                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 28300  014D3E  0EC8               	movlw	low _SPI1
 28301  014D40  0100               	movlb	0	; () banked
 28302  014D42  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28303  014D44  0E02               	movlw	high _SPI1
 28304  014D46  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28305  014D48  0E00               	movlw	0
 28306  014D4A  6F62               	movwf	SPI_Send@pData& (0+255),b
 28307  014D4C  ECDF  F0A6         	call	_SPI_Send	;wreg free
 28308  014D50  0012               	return	
 28309  014D52                     __end_of_OutSeg:
 28310                           	opt stack 0
 28311                           tosu	equ	0xFFF
 28312                           tosh	equ	0xFFE
 28313                           tosl	equ	0xFFD
 28314                           pclath	equ	0xFFA
 28315                           tblptru	equ	0xFF8
 28316                           tblptrh	equ	0xFF7
 28317                           tblptrl	equ	0xFF6
 28318                           tablat	equ	0xFF5
 28319                           prodh	equ	0xFF4
 28320                           prodl	equ	0xFF3
 28321                           intcon	equ	0xFF2
 28322                           indf0	equ	0xFEF
 28323                           postinc0	equ	0xFEE
 28324                           fsr0h	equ	0xFEA
 28325                           fsr0l	equ	0xFE9
 28326                           wreg	equ	0xFE8
 28327                           indf1	equ	0xFE7
 28328                           postdec1	equ	0xFE5
 28329                           fsr1h	equ	0xFE2
 28330                           fsr1l	equ	0xFE1
 28331                           indf2	equ	0xFDF
 28332                           postinc2	equ	0xFDE
 28333                           postdec2	equ	0xFDD
 28334                           plusw2	equ	0xFDB
 28335                           fsr2h	equ	0xFDA
 28336                           fsr2l	equ	0xFD9
 28337                           status	equ	0xFD8
 28338                           
 28339 ;; *************** function _SPI_Send *****************
 28340 ;; Defined at:
 28341 ;;		line 226 in file "Library/SPI.c"
 28342 ;; Parameters:    Size  Location     Type
 28343 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 28344 ;;		 -> SPI1(11), SPI2(11), 
 28345 ;;  pData           1    2[BANK0 ] unsigned char 
 28346 ;; Auto vars:     Size  Location     Type
 28347 ;;		None
 28348 ;; Return value:  Size  Location     Type
 28349 ;;                  1    wreg      unsigned char 
 28350 ;; Registers used:
 28351 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28352 ;; Tracked objects:
 28353 ;;		On entry : 0/0
 28354 ;;		On exit  : 0/0
 28355 ;;		Unchanged: 0/0
 28356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28357 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28360 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28361 ;;Total ram usage:        3 bytes
 28362 ;; Hardware stack levels used:    1
 28363 ;; Hardware stack levels required when called:    7
 28364 ;; This function calls:
 28365 ;;		Nothing
 28366 ;; This function is called by:
 28367 ;;		_LCD_Write
 28368 ;;		_OutSeg
 28369 ;; This function uses a non-reentrant model
 28370 ;;
 28371                           
 28372                           	psect	text149
 28373  014DBE                     __ptext149:
 28374                           	opt stack 0
 28375  014DBE                     _SPI_Send:
 28376                           	opt stack 18
 28377                           
 28378                           ;SPI.c: 253: switch (pInput->mChannel)
 28379                           
 28380                           ;incstack = 0
 28381  014DBE  D026               	goto	l678
 28382  014DC0                     
 28383                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 28384  014DC0  C1AF  FFD9         	movff	_PortC+4,fsr2l
 28385  014DC4  C1B0  FFDA         	movff	_PortC+5,fsr2h
 28386  014DC8  0101               	movlb	1	; () banked
 28387  014DCA  94DF               	bcf	indf2,2,c
 28388                           
 28389                           ; BSR set to: 1
 28390                           ;SPI.c: 257: SSP1BUF = pData;
 28391  014DCC  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 28392  014DD0                     
 28393                           ; BSR set to: 1
 28394  014DD0  A0C7               	btfss	4039,0,c	;volatile
 28395  014DD2  D7FE               	goto	l681
 28396                           
 28397                           ;SPI.c: 259: pData = SSP1BUF;
 28398  014DD4  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 28399                           
 28400                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 28401  014DD8  C1AF  FFD9         	movff	_PortC+4,fsr2l
 28402  014DDC  C1B0  FFDA         	movff	_PortC+5,fsr2h
 28403  014DE0  0101               	movlb	1	; () banked
 28404  014DE2  84DF               	bsf	indf2,2,c
 28405                           
 28406                           ; BSR set to: 1
 28407                           ;SPI.c: 261: return pData;
 28408                           ;	Return value of _SPI_Send is never used
 28409  014DE4  0012               	return	
 28410  014DE6                     
 28411                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 28412                           
 28413                           ; BSR set to: 1
 28414  014DE6  C19B  FFD9         	movff	_PortD+4,fsr2l
 28415  014DEA  C19C  FFDA         	movff	_PortD+5,fsr2h
 28416  014DEE  0101               	movlb	1	; () banked
 28417  014DF0  9EDF               	bcf	indf2,7,c
 28418                           
 28419                           ; BSR set to: 1
 28420                           ;SPI.c: 264: SSP2BUF = pData;
 28421  014DF2  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 28422  014DF6                     
 28423                           ; BSR set to: 1
 28424  014DF6  A06D               	btfss	3949,0,c	;volatile
 28425  014DF8  D7FE               	goto	l686
 28426                           
 28427                           ;SPI.c: 266: pData = SSP2BUF;
 28428  014DFA  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 28429                           
 28430                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 28431  014DFE  C19B  FFD9         	movff	_PortD+4,fsr2l
 28432  014E02  C19C  FFDA         	movff	_PortD+5,fsr2h
 28433  014E06  0101               	movlb	1	; () banked
 28434  014E08  8EDF               	bsf	indf2,7,c
 28435                           
 28436                           ; BSR set to: 1
 28437                           ;SPI.c: 269: };
 28438                           
 28439                           ; BSR set to: 1
 28440                           ;SPI.c: 268: return pData;
 28441                           ;	Return value of _SPI_Send is never used
 28442  014E0A  0012               	return	
 28443  014E0C                     l678:
 28444                           
 28445                           ; BSR set to: 1
 28446  014E0C  0100               	movlb	0	; () banked
 28447  014E0E  EE20 F002          	lfsr	2,2
 28448  014E12  5160               	movf	SPI_Send@pInput& (0+255),w,b
 28449  014E14  26D9               	addwf	fsr2l,f,c
 28450  014E16  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 28451  014E18  22DA               	addwfc	fsr2h,f,c
 28452  014E1A  50DF               	movf	indf2,w,c
 28453                           
 28454                           ; Switch size 1, requested type "space"
 28455                           ; Number of cases is 2, Range of values is 0 to 1
 28456                           ; switch strategies available:
 28457                           ; Name         Instructions Cycles
 28458                           ; simple_byte            7     4 (average)
 28459                           ;	Chosen strategy is simple_byte
 28460  014E1C  0A00               	xorlw	0	; case 0
 28461  014E1E  B4D8               	btfsc	status,2,c
 28462  014E20  D7CF               	goto	l679
 28463  014E22  0A01               	xorlw	1	; case 1
 28464  014E24  A4D8               	btfss	status,2,c
 28465  014E26  0012               	return	
 28466  014E28  D7DE               	goto	l684
 28467  014E2A                     __end_of_SPI_Send:
 28468                           	opt stack 0
 28469                           tosu	equ	0xFFF
 28470                           tosh	equ	0xFFE
 28471                           tosl	equ	0xFFD
 28472                           pclath	equ	0xFFA
 28473                           tblptru	equ	0xFF8
 28474                           tblptrh	equ	0xFF7
 28475                           tblptrl	equ	0xFF6
 28476                           tablat	equ	0xFF5
 28477                           prodh	equ	0xFF4
 28478                           prodl	equ	0xFF3
 28479                           intcon	equ	0xFF2
 28480                           indf0	equ	0xFEF
 28481                           postinc0	equ	0xFEE
 28482                           fsr0h	equ	0xFEA
 28483                           fsr0l	equ	0xFE9
 28484                           wreg	equ	0xFE8
 28485                           indf1	equ	0xFE7
 28486                           postdec1	equ	0xFE5
 28487                           fsr1h	equ	0xFE2
 28488                           fsr1l	equ	0xFE1
 28489                           indf2	equ	0xFDF
 28490                           postinc2	equ	0xFDE
 28491                           postdec2	equ	0xFDD
 28492                           plusw2	equ	0xFDB
 28493                           fsr2h	equ	0xFDA
 28494                           fsr2l	equ	0xFD9
 28495                           status	equ	0xFD8
 28496                           
 28497 ;; *************** function _FunctReadADC *****************
 28498 ;; Defined at:
 28499 ;;		line 94 in file "main.c"
 28500 ;; Parameters:    Size  Location     Type
 28501 ;;  channel         2    0[BANK0 ] int 
 28502 ;; Auto vars:     Size  Location     Type
 28503 ;;		None
 28504 ;; Return value:  Size  Location     Type
 28505 ;;                  2    0[BANK0 ] int 
 28506 ;; Registers used:
 28507 ;;		wreg, status,2, status,0
 28508 ;; Tracked objects:
 28509 ;;		On entry : 0/0
 28510 ;;		On exit  : 0/0
 28511 ;;		Unchanged: 0/0
 28512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28513 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28516 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28517 ;;Total ram usage:        2 bytes
 28518 ;; Hardware stack levels used:    1
 28519 ;; Hardware stack levels required when called:    7
 28520 ;; This function calls:
 28521 ;;		Nothing
 28522 ;; This function is called by:
 28523 ;;		_ADCAverage
 28524 ;; This function uses a non-reentrant model
 28525 ;;
 28526                           
 28527                           	psect	text150
 28528  01589A                     __ptext150:
 28529                           	opt stack 0
 28530  01589A                     _FunctReadADC:
 28531                           	opt stack 21
 28532                           
 28533                           ;main.c: 96: if (channel > 4) return 0;
 28534                           
 28535                           ;incstack = 0
 28536  01589A  0100               	movlb	0	; () banked
 28537  01589C  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 28538  01589E  D00B               	goto	l2124
 28539  0158A0  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 28540  0158A2  E104               	bnz	u11750
 28541  0158A4  0E05               	movlw	5
 28542  0158A6  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 28543  0158A8  A0D8               	btfss	status,0,c
 28544  0158AA  D005               	goto	l2124
 28545  0158AC                     u11750:
 28546                           
 28547                           ; BSR set to: 0
 28548  0158AC  0E00               	movlw	0
 28549  0158AE  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 28550  0158B0  0E00               	movlw	0
 28551  0158B2  6F60               	movwf	?_FunctReadADC& (0+255),b
 28552                           
 28553                           ; BSR set to: 0
 28554  0158B4  0012               	return	
 28555  0158B6                     l2124:
 28556                           
 28557                           ; BSR set to: 0
 28558                           ;main.c: 97: ADCON0 = 0x00;
 28559                           
 28560                           ; BSR set to: 0
 28561  0158B6  0E00               	movlw	0
 28562  0158B8  6EC2               	movwf	4034,c	;volatile
 28563                           
 28564                           ; BSR set to: 0
 28565                           ;main.c: 98: ADCON0 = (channel << 2);
 28566  0158BA  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 28567  0158BC  46E8               	rlncf	wreg,f,c
 28568  0158BE  0BFC               	andlw	252
 28569  0158C0  6EC2               	movwf	4034,c	;volatile
 28570                           
 28571                           ; BSR set to: 0
 28572                           ;main.c: 99: ADON = 1;
 28573  0158C2  80C2               	bsf	4034,0,c	;volatile
 28574                           
 28575                           ; BSR set to: 0
 28576                           ;main.c: 100: GODONE = 1;
 28577  0158C4  82C2               	bsf	4034,1,c	;volatile
 28578  0158C6                     
 28579                           ; BSR set to: 0
 28580  0158C6  B2C2               	btfsc	4034,1,c	;volatile
 28581  0158C8  D7FE               	goto	l2127
 28582                           
 28583                           ;main.c: 102: ADON = 0;
 28584  0158CA  90C2               	bcf	4034,0,c	;volatile
 28585                           
 28586                           ;main.c: 103: return ADRES;
 28587  0158CC  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 28588  0158D0  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 28589  0158D4  0012               	return		;funcret
 28590  0158D6                     __end_of_FunctReadADC:
 28591                           	opt stack 0
 28592                           tosu	equ	0xFFF
 28593                           tosh	equ	0xFFE
 28594                           tosl	equ	0xFFD
 28595                           pclath	equ	0xFFA
 28596                           tblptru	equ	0xFF8
 28597                           tblptrh	equ	0xFF7
 28598                           tblptrl	equ	0xFF6
 28599                           tablat	equ	0xFF5
 28600                           prodh	equ	0xFF4
 28601                           prodl	equ	0xFF3
 28602                           intcon	equ	0xFF2
 28603                           indf0	equ	0xFEF
 28604                           postinc0	equ	0xFEE
 28605                           fsr0h	equ	0xFEA
 28606                           fsr0l	equ	0xFE9
 28607                           wreg	equ	0xFE8
 28608                           indf1	equ	0xFE7
 28609                           postdec1	equ	0xFE5
 28610                           fsr1h	equ	0xFE2
 28611                           fsr1l	equ	0xFE1
 28612                           indf2	equ	0xFDF
 28613                           postinc2	equ	0xFDE
 28614                           postdec2	equ	0xFDD
 28615                           plusw2	equ	0xFDB
 28616                           fsr2h	equ	0xFDA
 28617                           fsr2l	equ	0xFD9
 28618                           status	equ	0xFD8
 28619                           
 28620 ;; *************** function _BangBang *****************
 28621 ;; Defined at:
 28622 ;;		line 217 in file "main.c"
 28623 ;; Parameters:    Size  Location     Type
 28624 ;;  RSpeedH         2    1[BANK0 ] int 
 28625 ;;  RSpeedL         2    3[BANK0 ] int 
 28626 ;;  LSpeedH         2    5[BANK0 ] int 
 28627 ;;  LSpeedL         2    7[BANK0 ] int 
 28628 ;; Auto vars:     Size  Location     Type
 28629 ;;		None
 28630 ;; Return value:  Size  Location     Type
 28631 ;;                  1    wreg      void 
 28632 ;; Registers used:
 28633 ;;		wreg, status,2, cstack
 28634 ;; Tracked objects:
 28635 ;;		On entry : 0/0
 28636 ;;		On exit  : 0/0
 28637 ;;		Unchanged: 0/0
 28638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28639 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28642 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28643 ;;Total ram usage:        8 bytes
 28644 ;; Hardware stack levels used:    1
 28645 ;; Hardware stack levels required when called:    8
 28646 ;; This function calls:
 28647 ;;		_eusartSend
 28648 ;; This function is called by:
 28649 ;;		_main
 28650 ;; This function uses a non-reentrant model
 28651 ;;
 28652                           
 28653                           	psect	text151
 28654  015C8A                     __ptext151:
 28655                           	opt stack 0
 28656  015C8A                     _BangBang:
 28657                           	opt stack 22
 28658                           
 28659                           ;main.c: 219: eusartSend(145);
 28660                           
 28661                           ;incstack = 0
 28662  015C8A  0E91               	movlw	145
 28663  015C8C  EC09  F0B0         	call	_eusartSend
 28664                           
 28665                           ;main.c: 220: eusartSend((((RSpeedH)>>8) & 255));
 28666  015C90  0100               	movlb	0	; () banked
 28667  015C92  5162               	movf	(BangBang@RSpeedH+1)& (0+255),w,b
 28668  015C94  EC09  F0B0         	call	_eusartSend
 28669                           
 28670                           ;main.c: 221: eusartSend(((RSpeedL) & 255));
 28671  015C98  0100               	movlb	0	; () banked
 28672  015C9A  5163               	movf	BangBang@RSpeedL& (0+255),w,b
 28673  015C9C  EC09  F0B0         	call	_eusartSend
 28674                           
 28675                           ;main.c: 222: eusartSend((((LSpeedH)>>8) & 255));
 28676  015CA0  0100               	movlb	0	; () banked
 28677  015CA2  5166               	movf	(BangBang@LSpeedH+1)& (0+255),w,b
 28678  015CA4  EC09  F0B0         	call	_eusartSend
 28679                           
 28680                           ;main.c: 223: eusartSend(((LSpeedL) & 255));
 28681  015CA8  0100               	movlb	0	; () banked
 28682  015CAA  5167               	movf	BangBang@LSpeedL& (0+255),w,b
 28683  015CAC  EC09  F0B0         	call	_eusartSend
 28684  015CB0  0012               	return		;funcret
 28685  015CB2                     __end_of_BangBang:
 28686                           	opt stack 0
 28687                           tosu	equ	0xFFF
 28688                           tosh	equ	0xFFE
 28689                           tosl	equ	0xFFD
 28690                           pclath	equ	0xFFA
 28691                           tblptru	equ	0xFF8
 28692                           tblptrh	equ	0xFF7
 28693                           tblptrl	equ	0xFF6
 28694                           tablat	equ	0xFF5
 28695                           prodh	equ	0xFF4
 28696                           prodl	equ	0xFF3
 28697                           intcon	equ	0xFF2
 28698                           indf0	equ	0xFEF
 28699                           postinc0	equ	0xFEE
 28700                           fsr0h	equ	0xFEA
 28701                           fsr0l	equ	0xFE9
 28702                           wreg	equ	0xFE8
 28703                           indf1	equ	0xFE7
 28704                           postdec1	equ	0xFE5
 28705                           fsr1h	equ	0xFE2
 28706                           fsr1l	equ	0xFE1
 28707                           indf2	equ	0xFDF
 28708                           postinc2	equ	0xFDE
 28709                           postdec2	equ	0xFDD
 28710                           plusw2	equ	0xFDB
 28711                           fsr2h	equ	0xFDA
 28712                           fsr2l	equ	0xFD9
 28713                           status	equ	0xFD8
 28714                           
 28715 ;; *************** function _eusartSend *****************
 28716 ;; Defined at:
 28717 ;;		line 147 in file "main.c"
 28718 ;; Parameters:    Size  Location     Type
 28719 ;;  sendChar        1    wreg     unsigned char 
 28720 ;; Auto vars:     Size  Location     Type
 28721 ;;  sendChar        1    0[BANK0 ] unsigned char 
 28722 ;; Return value:  Size  Location     Type
 28723 ;;                  1    wreg      void 
 28724 ;; Registers used:
 28725 ;;		wreg
 28726 ;; Tracked objects:
 28727 ;;		On entry : 0/0
 28728 ;;		On exit  : 0/0
 28729 ;;		Unchanged: 0/0
 28730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28735 ;;Total ram usage:        1 bytes
 28736 ;; Hardware stack levels used:    1
 28737 ;; Hardware stack levels required when called:    7
 28738 ;; This function calls:
 28739 ;;		Nothing
 28740 ;; This function is called by:
 28741 ;;		_Robot_Stop
 28742 ;;		_Get_Sensor_State
 28743 ;;		_UpdateDistance
 28744 ;;		_Drive
 28745 ;;		_Turn
 28746 ;;		_BangBang
 28747 ;;		_Robot_Init
 28748 ;;		_LEDOn
 28749 ;;		_LEDOff
 28750 ;;		_Get_VirtualWall_State
 28751 ;; This function uses a non-reentrant model
 28752 ;;
 28753                           
 28754                           	psect	text152
 28755  016012                     __ptext152:
 28756                           	opt stack 0
 28757  016012                     _eusartSend:
 28758                           	opt stack 22
 28759                           
 28760                           ;incstack = 0
 28761                           ;eusartSend@sendChar stored from wreg
 28762  016012  0100               	movlb	0	; () banked
 28763  016014  6F60               	movwf	eusartSend@sendChar& (0+255),b
 28764  016016                     
 28765                           ;main.c: 148: while (!TXSTA1bits.TRMT) {}
 28766  016016  A2AD               	btfss	4013,1,c	;volatile
 28767  016018  D7FE               	goto	l14632
 28768                           
 28769                           ;main.c: 149: TXREG1 = sendChar;
 28770  01601A  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 28771  01601E  0012               	return		;funcret
 28772  016020                     __end_of_eusartSend:
 28773                           	opt stack 0
 28774                           tosu	equ	0xFFF
 28775                           tosh	equ	0xFFE
 28776                           tosl	equ	0xFFD
 28777                           pclath	equ	0xFFA
 28778                           tblptru	equ	0xFF8
 28779                           tblptrh	equ	0xFF7
 28780                           tblptrl	equ	0xFF6
 28781                           tablat	equ	0xFF5
 28782                           prodh	equ	0xFF4
 28783                           prodl	equ	0xFF3
 28784                           intcon	equ	0xFF2
 28785                           indf0	equ	0xFEF
 28786                           postinc0	equ	0xFEE
 28787                           fsr0h	equ	0xFEA
 28788                           fsr0l	equ	0xFE9
 28789                           wreg	equ	0xFE8
 28790                           indf1	equ	0xFE7
 28791                           postdec1	equ	0xFE5
 28792                           fsr1h	equ	0xFE2
 28793                           fsr1l	equ	0xFE1
 28794                           indf2	equ	0xFDF
 28795                           postinc2	equ	0xFDE
 28796                           postdec2	equ	0xFDD
 28797                           plusw2	equ	0xFDB
 28798                           fsr2h	equ	0xFDA
 28799                           fsr2l	equ	0xFD9
 28800                           status	equ	0xFD8
 28801                           
 28802 ;; *************** function _ISR_Function *****************
 28803 ;; Defined at:
 28804 ;;		line 38 in file "Library/ISR.c"
 28805 ;; Parameters:    Size  Location     Type
 28806 ;;		None
 28807 ;; Auto vars:     Size  Location     Type
 28808 ;;		None
 28809 ;; Return value:  Size  Location     Type
 28810 ;;                  1    wreg      void 
 28811 ;; Registers used:
 28812 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28813 ;; Tracked objects:
 28814 ;;		On entry : 0/0
 28815 ;;		On exit  : 0/0
 28816 ;;		Unchanged: 0/0
 28817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28820 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28821 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28822 ;;Total ram usage:       18 bytes
 28823 ;; Hardware stack levels used:    1
 28824 ;; Hardware stack levels required when called:    6
 28825 ;; This function calls:
 28826 ;;		_Timer0_ISR
 28827 ;; This function is called by:
 28828 ;;		Interrupt level 2
 28829 ;; This function uses a non-reentrant model
 28830 ;;
 28831                           
 28832                           	psect	intcode
 28833  001408                     __pintcode:
 28834                           	opt stack 0
 28835  001408                     _ISR_Function:
 28836                           	opt stack 14
 28837                           
 28838                           ;incstack = 0
 28839  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28840  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 28841  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 28842  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 28843  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 28844  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 28845  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 28846  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 28847  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 28848  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 28849  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 28850  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 28851  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 28852  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 28853  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 28854  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 28855  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 28856  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 28857  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 28858                           
 28859                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 28860  001452  92F2               	bcf	intcon,1,c	;volatile
 28861                           
 28862                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 28863  001454  B4F2               	btfsc	intcon,2,c	;volatile
 28864  001456  AAF2               	btfss	intcon,5,c	;volatile
 28865  001458  D002               	goto	i2l1590
 28866                           
 28867                           ;ISR.c: 68: Timer0_ISR();
 28868  00145A  EC59  F0AE         	call	_Timer0_ISR	;wreg free
 28869  00145E                     i2l1590:
 28870  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 28871  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 28872  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 28873  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 28874  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 28875  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 28876  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 28877  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 28878  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 28879  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 28880  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 28881  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 28882  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 28883  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 28884  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 28885  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 28886  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 28887  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 28888  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28889  0014A8  0011               	retfie		f
 28890  0014AA                     __end_of_ISR_Function:
 28891                           	opt stack 0
 28892                           tosu	equ	0xFFF
 28893                           tosh	equ	0xFFE
 28894                           tosl	equ	0xFFD
 28895                           pclatu	equ	0xFFB
 28896                           pclath	equ	0xFFA
 28897                           tblptru	equ	0xFF8
 28898                           tblptrh	equ	0xFF7
 28899                           tblptrl	equ	0xFF6
 28900                           tablat	equ	0xFF5
 28901                           prodh	equ	0xFF4
 28902                           prodl	equ	0xFF3
 28903                           intcon	equ	0xFF2
 28904                           indf0	equ	0xFEF
 28905                           postinc0	equ	0xFEE
 28906                           fsr0h	equ	0xFEA
 28907                           fsr0l	equ	0xFE9
 28908                           wreg	equ	0xFE8
 28909                           indf1	equ	0xFE7
 28910                           postdec1	equ	0xFE5
 28911                           fsr1h	equ	0xFE2
 28912                           fsr1l	equ	0xFE1
 28913                           indf2	equ	0xFDF
 28914                           postinc2	equ	0xFDE
 28915                           postdec2	equ	0xFDD
 28916                           plusw2	equ	0xFDB
 28917                           fsr2h	equ	0xFDA
 28918                           fsr2l	equ	0xFD9
 28919                           status	equ	0xFD8
 28920                           
 28921 ;; *************** function _Timer0_ISR *****************
 28922 ;; Defined at:
 28923 ;;		line 94 in file "Library/Timer0.c"
 28924 ;; Parameters:    Size  Location     Type
 28925 ;;		None
 28926 ;; Auto vars:     Size  Location     Type
 28927 ;;		None
 28928 ;; Return value:  Size  Location     Type
 28929 ;;                  1    wreg      void 
 28930 ;; Registers used:
 28931 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28932 ;; Tracked objects:
 28933 ;;		On entry : 0/0
 28934 ;;		On exit  : 0/0
 28935 ;;		Unchanged: 0/0
 28936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28941 ;;Total ram usage:        0 bytes
 28942 ;; Hardware stack levels used:    1
 28943 ;; Hardware stack levels required when called:    5
 28944 ;; This function calls:
 28945 ;;		Absolute function
 28946 ;;		i2_Motor_Step
 28947 ;;		i2_Timer0_Stop
 28948 ;; This function is called by:
 28949 ;;		_ISR_Function
 28950 ;; This function uses a non-reentrant model
 28951 ;;
 28952                           
 28953                           	psect	text154
 28954  015CB2                     __ptext154:
 28955                           	opt stack 0
 28956  015CB2                     _Timer0_ISR:
 28957                           	opt stack 14
 28958                           
 28959                           ;Timer0.c: 96: Timer0_Stop();
 28960                           
 28961                           ;incstack = 0
 28962  015CB2  EC54  F0B0         	call	i2_Timer0_Stop	;wreg free
 28963                           
 28964                           ;Timer0.c: 99: if (gISR != 0)
 28965  015CB6  0101               	movlb	1	; () banked
 28966  015CB8  5108               	movf	_gISR& (0+255),w,b
 28967  015CBA  1109               	iorwf	(_gISR+1)& (0+255),w,b
 28968  015CBC  110A               	iorwf	(_gISR+2)& (0+255),w,b
 28969  015CBE  B4D8               	btfsc	status,2,c
 28970  015CC0  0012               	return	
 28971                           
 28972                           ; BSR set to: 1
 28973                           ;Timer0.c: 100: gISR();
 28974  015CC2  D801               	call	i2u1414_48
 28975  015CC4  0012               	return	
 28976  015CC6                     i2u1414_48:
 28977  015CC6  0005               	push	
 28978  015CC8  6EFA               	movwf	pclath,c
 28979  015CCA  5108               	movf	_gISR& (0+255),w,b
 28980  015CCC  6EFD               	movwf	tosl,c
 28981  015CCE  5109               	movf	(_gISR+1)& (0+255),w,b
 28982  015CD0  6EFE               	movwf	tosh,c
 28983  015CD2  510A               	movf	(_gISR+2)& (0+255),w,b
 28984  015CD4  6EFF               	movwf	tosu,c
 28985  015CD6  50FA               	movf	pclath,w,c
 28986  015CD8  0012               	return		;indir
 28987  015CDA                     __end_of_Timer0_ISR:
 28988                           	opt stack 0
 28989                           tosu	equ	0xFFF
 28990                           tosh	equ	0xFFE
 28991                           tosl	equ	0xFFD
 28992                           pclatu	equ	0xFFB
 28993                           pclath	equ	0xFFA
 28994                           tblptru	equ	0xFF8
 28995                           tblptrh	equ	0xFF7
 28996                           tblptrl	equ	0xFF6
 28997                           tablat	equ	0xFF5
 28998                           prodh	equ	0xFF4
 28999                           prodl	equ	0xFF3
 29000                           intcon	equ	0xFF2
 29001                           indf0	equ	0xFEF
 29002                           postinc0	equ	0xFEE
 29003                           fsr0h	equ	0xFEA
 29004                           fsr0l	equ	0xFE9
 29005                           wreg	equ	0xFE8
 29006                           indf1	equ	0xFE7
 29007                           postdec1	equ	0xFE5
 29008                           fsr1h	equ	0xFE2
 29009                           fsr1l	equ	0xFE1
 29010                           indf2	equ	0xFDF
 29011                           postinc2	equ	0xFDE
 29012                           postdec2	equ	0xFDD
 29013                           plusw2	equ	0xFDB
 29014                           fsr2h	equ	0xFDA
 29015                           fsr2l	equ	0xFD9
 29016                           status	equ	0xFD8
 29017                           
 29018 ;; *************** function i2_Motor_Step *****************
 29019 ;; Defined at:
 29020 ;;		line 75 in file "Library/Motor.c"
 29021 ;; Parameters:    Size  Location     Type
 29022 ;;		None
 29023 ;; Auto vars:     Size  Location     Type
 29024 ;;		None
 29025 ;; Return value:  Size  Location     Type
 29026 ;;                  1    wreg      void 
 29027 ;; Registers used:
 29028 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29029 ;; Tracked objects:
 29030 ;;		On entry : 0/0
 29031 ;;		On exit  : 0/0
 29032 ;;		Unchanged: 0/0
 29033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29036 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29037 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29038 ;;Total ram usage:        2 bytes
 29039 ;; Hardware stack levels used:    1
 29040 ;; Hardware stack levels required when called:    4
 29041 ;; This function calls:
 29042 ;;		i2_MXK_Queue
 29043 ;;		i2_MXK_Release
 29044 ;;		i2_MXK_SwitchTo
 29045 ;;		i2_Port_SetPin
 29046 ;;		i2_Timer0_Restart
 29047 ;;		i2_Timer0_Stop
 29048 ;; This function is called by:
 29049 ;; This function uses a non-reentrant model
 29050 ;;
 29051                           
 29052                           	psect	text155
 29053  013BFA                     __ptext155:
 29054                           	opt stack 0
 29055  013BFA                     i2_Motor_Step:
 29056                           	opt stack 14
 29057                           
 29058                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29059                           
 29060                           ;incstack = 0
 29061  013BFA  0100               	movlb	0	; () banked
 29062  013BFC  EE20 F004          	lfsr	2,4
 29063  013C00  51ED               	movf	_lMotor& (0+255),w,b
 29064  013C02  26D9               	addwf	fsr2l,f,c
 29065  013C04  51EE               	movf	(_lMotor+1)& (0+255),w,b
 29066  013C06  22DA               	addwfc	fsr2h,f,c
 29067  013C08  50DF               	movf	indf2,w,c
 29068  013C0A  ECF9  F0AC         	call	i2_MXK_SwitchTo
 29069  013C0E  0900               	iorlw	0
 29070  013C10  B4D8               	btfsc	status,2,c
 29071  013C12  D06A               	goto	i2l1627
 29072                           
 29073                           ;Motor.c: 78: {
 29074                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29075  013C14  C0ED  FFD9         	movff	_lMotor,fsr2l
 29076  013C18  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29077  013C1C  50DE               	movf	postinc2,w,c
 29078  013C1E  10DE               	iorwf	postinc2,w,c
 29079  013C20  B4D8               	btfsc	status,2,c
 29080  013C22  D05D               	goto	i2l1628
 29081                           
 29082                           ;Motor.c: 80: {
 29083                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29084  013C24  C0ED  FFD9         	movff	_lMotor,fsr2l
 29085  013C28  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29086  013C2C  0E01               	movlw	1
 29087  013C2E  BEDB               	btfsc	plusw2,7,c
 29088  013C30  D022               	goto	i2l1629
 29089  013C32  0E01               	movlw	1
 29090  013C34  50DB               	movf	plusw2,w,c
 29091  013C36  E103               	bnz	i2u782_40
 29092  013C38  04DE               	decf	postinc2,w,c
 29093  013C3A  A0D8               	btfss	status,0,c
 29094  013C3C  D01C               	goto	i2l1629
 29095  013C3E                     i2u782_40:
 29096                           
 29097                           ;Motor.c: 83: {
 29098                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29099  013C3E  C0ED  FFD9         	movff	_lMotor,fsr2l
 29100  013C42  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29101  013C46  28DE               	incf	postinc2,w,c
 29102  013C48  E104               	bnz	i2u783_40
 29103  013C4A  0E7F               	movlw	127
 29104  013C4C  18DE               	xorwf	postinc2,w,c
 29105  013C4E  B4D8               	btfsc	status,2,c
 29106  013C50  D007               	goto	i2l1630
 29107  013C52                     i2u783_40:
 29108                           
 29109                           ;Motor.c: 85: lMotor->mDelta --;
 29110  013C52  C0ED  FFD9         	movff	_lMotor,fsr2l
 29111  013C56  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29112  013C5A  06DE               	decf	postinc2,f,c
 29113  013C5C  0E00               	movlw	0
 29114  013C5E  5ADD               	subwfb	postdec2,f,c
 29115  013C60                     i2l1630:
 29116                           
 29117                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29118  013C60  0E8D               	movlw	low _PortE
 29119  013C62  6E10               	movwf	i2Port_SetPin@pInput,c
 29120  013C64  0E01               	movlw	high _PortE
 29121  013C66  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29122  013C68  0E00               	movlw	0
 29123  013C6A  6E12               	movwf	i2Port_SetPin@pPin,c
 29124  013C6C  0E01               	movlw	1
 29125  013C6E  6E13               	movwf	i2Port_SetPin@pValue,c
 29126  013C70  ECC4  F0A0         	call	i2_Port_SetPin	;wreg free
 29127                           
 29128                           ;Motor.c: 88: }
 29129  013C74  D01B               	goto	i2l1631
 29130  013C76                     i2l1629:
 29131                           
 29132                           ;Motor.c: 89: else
 29133                           ;Motor.c: 90: {
 29134                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29135  013C76  C0ED  FFD9         	movff	_lMotor,fsr2l
 29136  013C7A  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29137  013C7E  04DE               	decf	postinc2,w,c
 29138  013C80  E104               	bnz	i2u784_40
 29139  013C82  0E80               	movlw	128
 29140  013C84  18DE               	xorwf	postinc2,w,c
 29141  013C86  B4D8               	btfsc	status,2,c
 29142  013C88  D007               	goto	i2l1632
 29143  013C8A                     i2u784_40:
 29144                           
 29145                           ;Motor.c: 92: lMotor->mDelta ++;
 29146  013C8A  C0ED  FFD9         	movff	_lMotor,fsr2l
 29147  013C8E  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29148  013C92  2ADE               	incf	postinc2,f,c
 29149  013C94  0E00               	movlw	0
 29150  013C96  22DD               	addwfc	postdec2,f,c
 29151  013C98                     i2l1632:
 29152                           
 29153                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29154  013C98  0E8D               	movlw	low _PortE
 29155  013C9A  6E10               	movwf	i2Port_SetPin@pInput,c
 29156  013C9C  0E01               	movlw	high _PortE
 29157  013C9E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29158  013CA0  0E00               	movlw	0
 29159  013CA2  6E12               	movwf	i2Port_SetPin@pPin,c
 29160  013CA4  0E00               	movlw	0
 29161  013CA6  6E13               	movwf	i2Port_SetPin@pValue,c
 29162  013CA8  ECC4  F0A0         	call	i2_Port_SetPin	;wreg free
 29163  013CAC                     i2l1631:
 29164                           
 29165                           ;Motor.c: 95: }
 29166                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29167  013CAC  0E8D               	movlw	low _PortE
 29168  013CAE  6E10               	movwf	i2Port_SetPin@pInput,c
 29169  013CB0  0E01               	movlw	high _PortE
 29170  013CB2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29171  013CB4  0E01               	movlw	1
 29172  013CB6  6E12               	movwf	i2Port_SetPin@pPin,c
 29173  013CB8  0E01               	movlw	1
 29174  013CBA  6E13               	movwf	i2Port_SetPin@pValue,c
 29175  013CBC  ECC4  F0A0         	call	i2_Port_SetPin	;wreg free
 29176                           
 29177                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29178  013CC0  0E8D               	movlw	low _PortE
 29179  013CC2  6E10               	movwf	i2Port_SetPin@pInput,c
 29180  013CC4  0E01               	movlw	high _PortE
 29181  013CC6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29182  013CC8  0E01               	movlw	1
 29183  013CCA  6E12               	movwf	i2Port_SetPin@pPin,c
 29184  013CCC  0E00               	movlw	0
 29185  013CCE  6E13               	movwf	i2Port_SetPin@pValue,c
 29186  013CD0  ECC4  F0A0         	call	i2_Port_SetPin	;wreg free
 29187                           
 29188                           ;Motor.c: 101: MXK_Release();
 29189  013CD4  EC57  F0B0         	call	i2_MXK_Release	;wreg free
 29190                           
 29191                           ;Motor.c: 102: Timer0_Restart();
 29192  013CD8  EC1D  F0B0         	call	i2_Timer0_Restart	;wreg free
 29193                           
 29194                           ;Motor.c: 103: return;
 29195  013CDC  0012               	return	
 29196  013CDE                     i2l1628:
 29197                           
 29198                           ;Motor.c: 104: }
 29199                           ;Motor.c: 105: MXK_Release();
 29200  013CDE  EC57  F0B0         	call	i2_MXK_Release	;wreg free
 29201                           
 29202                           ;Motor.c: 106: Timer0_Stop();
 29203  013CE2  EC54  F0B0         	call	i2_Timer0_Stop	;wreg free
 29204                           
 29205                           ;Motor.c: 107: return;
 29206  013CE6  0012               	return	
 29207  013CE8                     i2l1627:
 29208                           
 29209                           ;Motor.c: 108: }
 29210                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29211  013CE8  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29212  013CEC  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29213  013CF0  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29214  013CF4  EC10  F0B0         	call	i2_MXK_Queue	;wreg free
 29215  013CF8  0012               	return		;funcret
 29216  013CFA                     __end_ofi2_Motor_Step:
 29217                           	opt stack 0
 29218                           tosu	equ	0xFFF
 29219                           tosh	equ	0xFFE
 29220                           tosl	equ	0xFFD
 29221                           pclatu	equ	0xFFB
 29222                           pclath	equ	0xFFA
 29223                           tblptru	equ	0xFF8
 29224                           tblptrh	equ	0xFF7
 29225                           tblptrl	equ	0xFF6
 29226                           tablat	equ	0xFF5
 29227                           prodh	equ	0xFF4
 29228                           prodl	equ	0xFF3
 29229                           intcon	equ	0xFF2
 29230                           indf0	equ	0xFEF
 29231                           postinc0	equ	0xFEE
 29232                           fsr0h	equ	0xFEA
 29233                           fsr0l	equ	0xFE9
 29234                           wreg	equ	0xFE8
 29235                           indf1	equ	0xFE7
 29236                           postdec1	equ	0xFE5
 29237                           fsr1h	equ	0xFE2
 29238                           fsr1l	equ	0xFE1
 29239                           indf2	equ	0xFDF
 29240                           postinc2	equ	0xFDE
 29241                           postdec2	equ	0xFDD
 29242                           plusw2	equ	0xFDB
 29243                           fsr2h	equ	0xFDA
 29244                           fsr2l	equ	0xFD9
 29245                           status	equ	0xFD8
 29246                           
 29247 ;; *************** function i2_Timer0_Stop *****************
 29248 ;; Defined at:
 29249 ;;		line 89 in file "Library/Timer0.c"
 29250 ;; Parameters:    Size  Location     Type
 29251 ;;		None
 29252 ;; Auto vars:     Size  Location     Type
 29253 ;;		None
 29254 ;; Return value:  Size  Location     Type
 29255 ;;                  1    wreg      void 
 29256 ;; Registers used:
 29257 ;;		None
 29258 ;; Tracked objects:
 29259 ;;		On entry : 0/0
 29260 ;;		On exit  : 0/0
 29261 ;;		Unchanged: 0/0
 29262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29267 ;;Total ram usage:        0 bytes
 29268 ;; Hardware stack levels used:    1
 29269 ;; This function calls:
 29270 ;;		Nothing
 29271 ;; This function is called by:
 29272 ;;		_Timer0_ISR
 29273 ;;		i2_Motor_Step
 29274 ;; This function uses a non-reentrant model
 29275 ;;
 29276                           
 29277                           	psect	text156
 29278  0160A8                     __ptext156:
 29279                           	opt stack 0
 29280  0160A8                     i2_Timer0_Stop:
 29281                           	opt stack 18
 29282                           
 29283                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29284                           
 29285                           ;incstack = 0
 29286  0160A8  9AF2               	bcf	intcon,5,c	;volatile
 29287                           
 29288                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29289  0160AA  94F2               	bcf	intcon,2,c	;volatile
 29290  0160AC  0012               	return		;funcret
 29291  0160AE                     __end_ofi2_Timer0_Stop:
 29292                           	opt stack 0
 29293                           tosu	equ	0xFFF
 29294                           tosh	equ	0xFFE
 29295                           tosl	equ	0xFFD
 29296                           pclatu	equ	0xFFB
 29297                           pclath	equ	0xFFA
 29298                           tblptru	equ	0xFF8
 29299                           tblptrh	equ	0xFF7
 29300                           tblptrl	equ	0xFF6
 29301                           tablat	equ	0xFF5
 29302                           prodh	equ	0xFF4
 29303                           prodl	equ	0xFF3
 29304                           intcon	equ	0xFF2
 29305                           indf0	equ	0xFEF
 29306                           postinc0	equ	0xFEE
 29307                           fsr0h	equ	0xFEA
 29308                           fsr0l	equ	0xFE9
 29309                           wreg	equ	0xFE8
 29310                           indf1	equ	0xFE7
 29311                           postdec1	equ	0xFE5
 29312                           fsr1h	equ	0xFE2
 29313                           fsr1l	equ	0xFE1
 29314                           indf2	equ	0xFDF
 29315                           postinc2	equ	0xFDE
 29316                           postdec2	equ	0xFDD
 29317                           plusw2	equ	0xFDB
 29318                           fsr2h	equ	0xFDA
 29319                           fsr2l	equ	0xFD9
 29320                           status	equ	0xFD8
 29321                           
 29322 ;; *************** function i2_Timer0_Restart *****************
 29323 ;; Defined at:
 29324 ;;		line 83 in file "Library/Timer0.c"
 29325 ;; Parameters:    Size  Location     Type
 29326 ;;		None
 29327 ;; Auto vars:     Size  Location     Type
 29328 ;;		None
 29329 ;; Return value:  Size  Location     Type
 29330 ;;                  1    wreg      void 
 29331 ;; Registers used:
 29332 ;;		None
 29333 ;; Tracked objects:
 29334 ;;		On entry : 0/0
 29335 ;;		On exit  : 0/0
 29336 ;;		Unchanged: 0/0
 29337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29342 ;;Total ram usage:        0 bytes
 29343 ;; Hardware stack levels used:    1
 29344 ;; This function calls:
 29345 ;;		Nothing
 29346 ;; This function is called by:
 29347 ;;		i2_Motor_Step
 29348 ;; This function uses a non-reentrant model
 29349 ;;
 29350                           
 29351                           	psect	text157
 29352  01603A                     __ptext157:
 29353                           	opt stack 0
 29354  01603A                     i2_Timer0_Restart:
 29355                           	opt stack 17
 29356                           
 29357                           ;Timer0.c: 85: TMR0 = COUNTER;
 29358                           
 29359                           ;incstack = 0
 29360  01603A  C033  FFD6         	movff	_COUNTER,4054	;volatile
 29361  01603E  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
 29362                           
 29363                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29364  016042  8AF2               	bsf	intcon,5,c	;volatile
 29365  016044  0012               	return		;funcret
 29366  016046                     __end_ofi2_Timer0_Restart:
 29367                           	opt stack 0
 29368                           tosu	equ	0xFFF
 29369                           tosh	equ	0xFFE
 29370                           tosl	equ	0xFFD
 29371                           pclatu	equ	0xFFB
 29372                           pclath	equ	0xFFA
 29373                           tblptru	equ	0xFF8
 29374                           tblptrh	equ	0xFF7
 29375                           tblptrl	equ	0xFF6
 29376                           tablat	equ	0xFF5
 29377                           prodh	equ	0xFF4
 29378                           prodl	equ	0xFF3
 29379                           intcon	equ	0xFF2
 29380                           indf0	equ	0xFEF
 29381                           postinc0	equ	0xFEE
 29382                           fsr0h	equ	0xFEA
 29383                           fsr0l	equ	0xFE9
 29384                           wreg	equ	0xFE8
 29385                           indf1	equ	0xFE7
 29386                           postdec1	equ	0xFE5
 29387                           fsr1h	equ	0xFE2
 29388                           fsr1l	equ	0xFE1
 29389                           indf2	equ	0xFDF
 29390                           postinc2	equ	0xFDE
 29391                           postdec2	equ	0xFDD
 29392                           plusw2	equ	0xFDB
 29393                           fsr2h	equ	0xFDA
 29394                           fsr2l	equ	0xFD9
 29395                           status	equ	0xFD8
 29396                           
 29397 ;; *************** function i2_Port_SetPin *****************
 29398 ;; Defined at:
 29399 ;;		line 247 in file "Library/Port.c"
 29400 ;; Parameters:    Size  Location     Type
 29401 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29402 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29403 ;;  pPin            1   17[COMRAM] enum E6750
 29404 ;;  pValue          1   18[COMRAM] unsigned char 
 29405 ;; Auto vars:     Size  Location     Type
 29406 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29407 ;; Return value:  Size  Location     Type
 29408 ;;                  1    wreg      void 
 29409 ;; Registers used:
 29410 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29411 ;; Tracked objects:
 29412 ;;		On entry : 0/0
 29413 ;;		On exit  : 0/0
 29414 ;;		Unchanged: 0/0
 29415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29419 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29420 ;;Total ram usage:        5 bytes
 29421 ;; Hardware stack levels used:    1
 29422 ;; Hardware stack levels required when called:    3
 29423 ;; This function calls:
 29424 ;;		i2_Byte_SetBit
 29425 ;;		i2_Word_GetPair
 29426 ;; This function is called by:
 29427 ;;		i2_Motor_Step
 29428 ;; This function uses a non-reentrant model
 29429 ;;
 29430                           
 29431                           	psect	text158
 29432  014188                     __ptext158:
 29433                           	opt stack 0
 29434  014188                     i2_Port_SetPin:
 29435                           	opt stack 14
 29436                           
 29437                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29438                           
 29439                           ;incstack = 0
 29440  014188  0E08               	movlw	8
 29441  01418A  2410               	addwf	i2Port_SetPin@pInput,w,c
 29442  01418C  6E0D               	movwf	i2Word_GetPair@pInput,c
 29443  01418E  0E00               	movlw	0
 29444  014190  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29445  014192  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29446  014194  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29447  014198  ECC2  F0AD         	call	i2_Word_GetPair	;wreg free
 29448  01419C  6E14               	movwf	i2Port_SetPin@Type,c
 29449                           
 29450                           ;Port.c: 250: switch (Type)
 29451  01419E  D03B               	goto	i2l427
 29452  0141A0                     
 29453                           ;Port.c: 256: pValue &= 1;
 29454  0141A0  0E01               	movlw	1
 29455  0141A2  1613               	andwf	i2Port_SetPin@pValue,f,c
 29456                           
 29457                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29458  0141A4  EE20 F002          	lfsr	2,2
 29459  0141A8  5010               	movf	i2Port_SetPin@pInput,w,c
 29460  0141AA  26D9               	addwf	fsr2l,f,c
 29461  0141AC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29462  0141AE  22DA               	addwfc	fsr2h,f,c
 29463  0141B0  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29464  0141B4  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29465  0141B8  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29466  0141BC  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29467  0141C0  EC8E  F0AA         	call	i2_Byte_SetBit	;wreg free
 29468                           
 29469                           ;Port.c: 258: break;
 29470  0141C4  0012               	return	
 29471  0141C6                     
 29472                           ;Port.c: 261: pValue &= 1;
 29473  0141C6  0E01               	movlw	1
 29474  0141C8  1613               	andwf	i2Port_SetPin@pValue,f,c
 29475                           
 29476                           ;Port.c: 262: pValue ^= 1;
 29477  0141CA  0E01               	movlw	1
 29478  0141CC  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29479                           
 29480                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29481  0141CE  EE20 F002          	lfsr	2,2
 29482  0141D2  5010               	movf	i2Port_SetPin@pInput,w,c
 29483  0141D4  26D9               	addwf	fsr2l,f,c
 29484  0141D6  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29485  0141D8  22DA               	addwfc	fsr2h,f,c
 29486  0141DA  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29487  0141DE  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29488  0141E2  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29489  0141E6  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29490  0141EA  EC8E  F0AA         	call	i2_Byte_SetBit	;wreg free
 29491                           
 29492                           ;Port.c: 264: break;
 29493  0141EE  0012               	return	
 29494  0141F0                     
 29495                           ;Port.c: 266: pValue &= 1;
 29496  0141F0  0E01               	movlw	1
 29497  0141F2  1613               	andwf	i2Port_SetPin@pValue,f,c
 29498                           
 29499                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29500  0141F4  EE20 F004          	lfsr	2,4
 29501  0141F8  5010               	movf	i2Port_SetPin@pInput,w,c
 29502  0141FA  26D9               	addwf	fsr2l,f,c
 29503  0141FC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29504  0141FE  22DA               	addwfc	fsr2h,f,c
 29505  014200  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29506  014204  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29507  014208  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29508  01420C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29509  014210  EC8E  F0AA         	call	i2_Byte_SetBit	;wreg free
 29510                           
 29511                           ;Port.c: 269: }
 29512                           
 29513                           ;Port.c: 268: break;
 29514  014214  0012               	return	
 29515  014216                     i2l427:
 29516  014216  5014               	movf	i2Port_SetPin@Type,w,c
 29517                           
 29518                           ; Switch size 1, requested type "space"
 29519                           ; Number of cases is 4, Range of values is 0 to 3
 29520                           ; switch strategies available:
 29521                           ; Name         Instructions Cycles
 29522                           ; simple_byte           13     7 (average)
 29523                           ;	Chosen strategy is simple_byte
 29524  014218  0A00               	xorlw	0	; case 0
 29525  01421A  B4D8               	btfsc	status,2,c
 29526  01421C  0012               	return	
 29527  01421E  0A01               	xorlw	1	; case 1
 29528  014220  B4D8               	btfsc	status,2,c
 29529  014222  D7BE               	goto	i2l430
 29530  014224  0A03               	xorlw	3	; case 2
 29531  014226  B4D8               	btfsc	status,2,c
 29532  014228  D7CE               	goto	i2l432
 29533  01422A  0A01               	xorlw	1	; case 3
 29534  01422C  A4D8               	btfss	status,2,c
 29535  01422E  0012               	return	
 29536  014230  D7DF               	goto	i2l433
 29537  014232                     __end_ofi2_Port_SetPin:
 29538                           	opt stack 0
 29539                           tosu	equ	0xFFF
 29540                           tosh	equ	0xFFE
 29541                           tosl	equ	0xFFD
 29542                           pclatu	equ	0xFFB
 29543                           pclath	equ	0xFFA
 29544                           tblptru	equ	0xFF8
 29545                           tblptrh	equ	0xFF7
 29546                           tblptrl	equ	0xFF6
 29547                           tablat	equ	0xFF5
 29548                           prodh	equ	0xFF4
 29549                           prodl	equ	0xFF3
 29550                           intcon	equ	0xFF2
 29551                           indf0	equ	0xFEF
 29552                           postinc0	equ	0xFEE
 29553                           fsr0h	equ	0xFEA
 29554                           fsr0l	equ	0xFE9
 29555                           wreg	equ	0xFE8
 29556                           indf1	equ	0xFE7
 29557                           postdec1	equ	0xFE5
 29558                           fsr1h	equ	0xFE2
 29559                           fsr1l	equ	0xFE1
 29560                           indf2	equ	0xFDF
 29561                           postinc2	equ	0xFDE
 29562                           postdec2	equ	0xFDD
 29563                           plusw2	equ	0xFDB
 29564                           fsr2h	equ	0xFDA
 29565                           fsr2l	equ	0xFD9
 29566                           status	equ	0xFD8
 29567                           
 29568 ;; *************** function i2_Word_GetPair *****************
 29569 ;; Defined at:
 29570 ;;		line 156 in file "Library/Types.c"
 29571 ;; Parameters:    Size  Location     Type
 29572 ;;  pInput          2   12[COMRAM] PTR struct Word
 29573 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29574 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29575 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29576 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29577 ;;  pPair           1   14[COMRAM] unsigned char 
 29578 ;; Auto vars:     Size  Location     Type
 29579 ;;		None
 29580 ;; Return value:  Size  Location     Type
 29581 ;;                  1    wreg      unsigned char 
 29582 ;; Registers used:
 29583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29584 ;; Tracked objects:
 29585 ;;		On entry : 0/0
 29586 ;;		On exit  : 0/0
 29587 ;;		Unchanged: 0/0
 29588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29589 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29592 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29593 ;;Total ram usage:        3 bytes
 29594 ;; Hardware stack levels used:    1
 29595 ;; Hardware stack levels required when called:    2
 29596 ;; This function calls:
 29597 ;;		i2_Byte_GetPair
 29598 ;; This function is called by:
 29599 ;;		i2_Port_SetPin
 29600 ;; This function uses a non-reentrant model
 29601 ;;
 29602                           
 29603                           	psect	text159
 29604  015B84                     __ptext159:
 29605                           	opt stack 0
 29606  015B84                     i2_Word_GetPair:
 29607                           	opt stack 14
 29608                           
 29609                           ;Types.c: 158: if (pPair >= 4)
 29610                           
 29611                           ;incstack = 0
 29612  015B84  0E03               	movlw	3
 29613  015B86  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29614  015B88  D00C               	goto	i2l781
 29615                           
 29616                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29617  015B8A  0E01               	movlw	1
 29618  015B8C  240D               	addwf	i2Word_GetPair@pInput,w,c
 29619  015B8E  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29620  015B90  0E00               	movlw	0
 29621  015B92  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29622  015B94  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29623  015B96  500F               	movf	i2Word_GetPair@pPair,w,c
 29624  015B98  0FFC               	addlw	252
 29625  015B9A  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29626  015B9C  EC25  F0AF         	call	i2_Byte_GetPair	;wreg free
 29627  015BA0  0012               	return	
 29628  015BA2                     i2l781:
 29629                           
 29630                           ;Types.c: 160: else
 29631                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29632  015BA2  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29633  015BA6  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29634  015BAA  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29635  015BAE  EC25  F0AF         	call	i2_Byte_GetPair	;wreg free
 29636  015BB2  0012               	return	
 29637  015BB4                     __end_ofi2_Word_GetPair:
 29638                           	opt stack 0
 29639                           tosu	equ	0xFFF
 29640                           tosh	equ	0xFFE
 29641                           tosl	equ	0xFFD
 29642                           pclatu	equ	0xFFB
 29643                           pclath	equ	0xFFA
 29644                           tblptru	equ	0xFF8
 29645                           tblptrh	equ	0xFF7
 29646                           tblptrl	equ	0xFF6
 29647                           tablat	equ	0xFF5
 29648                           prodh	equ	0xFF4
 29649                           prodl	equ	0xFF3
 29650                           intcon	equ	0xFF2
 29651                           indf0	equ	0xFEF
 29652                           postinc0	equ	0xFEE
 29653                           fsr0h	equ	0xFEA
 29654                           fsr0l	equ	0xFE9
 29655                           wreg	equ	0xFE8
 29656                           indf1	equ	0xFE7
 29657                           postdec1	equ	0xFE5
 29658                           fsr1h	equ	0xFE2
 29659                           fsr1l	equ	0xFE1
 29660                           indf2	equ	0xFDF
 29661                           postinc2	equ	0xFDE
 29662                           postdec2	equ	0xFDD
 29663                           plusw2	equ	0xFDB
 29664                           fsr2h	equ	0xFDA
 29665                           fsr2l	equ	0xFD9
 29666                           status	equ	0xFD8
 29667                           
 29668 ;; *************** function i2_Byte_GetPair *****************
 29669 ;; Defined at:
 29670 ;;		line 87 in file "Library/Types.c"
 29671 ;; Parameters:    Size  Location     Type
 29672 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29673 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29674 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29675 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29676 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29677 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29678 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29679 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29680 ;;		 -> NULL(0), 
 29681 ;;  pPair           1   11[COMRAM] unsigned char 
 29682 ;; Auto vars:     Size  Location     Type
 29683 ;;		None
 29684 ;; Return value:  Size  Location     Type
 29685 ;;                  1    wreg      unsigned char 
 29686 ;; Registers used:
 29687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29688 ;; Tracked objects:
 29689 ;;		On entry : 0/0
 29690 ;;		On exit  : 0/0
 29691 ;;		Unchanged: 0/0
 29692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29693 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29696 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29697 ;;Total ram usage:        3 bytes
 29698 ;; Hardware stack levels used:    1
 29699 ;; Hardware stack levels required when called:    1
 29700 ;; This function calls:
 29701 ;;		i2_Byte_GetZone
 29702 ;; This function is called by:
 29703 ;;		i2_Word_GetPair
 29704 ;; This function uses a non-reentrant model
 29705 ;;
 29706                           
 29707                           	psect	text160
 29708  015E4A                     __ptext160:
 29709                           	opt stack 0
 29710  015E4A                     i2_Byte_GetPair:
 29711                           	opt stack 14
 29712                           
 29713                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29714                           
 29715                           ;incstack = 0
 29716  015E4A  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29717  015E4E  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29718  015E52  0E04               	movlw	4
 29719  015E54  6E03               	movwf	i2Byte_GetZone@pMax,c
 29720  015E56  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29721  015E5A  0E02               	movlw	2
 29722  015E5C  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29723  015E5E  EC37  F0A6         	call	i2_Byte_GetZone	;wreg free
 29724  015E62  0012               	return	
 29725  015E64                     __end_ofi2_Byte_GetPair:
 29726                           	opt stack 0
 29727                           tosu	equ	0xFFF
 29728                           tosh	equ	0xFFE
 29729                           tosl	equ	0xFFD
 29730                           pclatu	equ	0xFFB
 29731                           pclath	equ	0xFFA
 29732                           tblptru	equ	0xFF8
 29733                           tblptrh	equ	0xFF7
 29734                           tblptrl	equ	0xFF6
 29735                           tablat	equ	0xFF5
 29736                           prodh	equ	0xFF4
 29737                           prodl	equ	0xFF3
 29738                           intcon	equ	0xFF2
 29739                           indf0	equ	0xFEF
 29740                           postinc0	equ	0xFEE
 29741                           fsr0h	equ	0xFEA
 29742                           fsr0l	equ	0xFE9
 29743                           wreg	equ	0xFE8
 29744                           indf1	equ	0xFE7
 29745                           postdec1	equ	0xFE5
 29746                           fsr1h	equ	0xFE2
 29747                           fsr1l	equ	0xFE1
 29748                           indf2	equ	0xFDF
 29749                           postinc2	equ	0xFDE
 29750                           postdec2	equ	0xFDD
 29751                           plusw2	equ	0xFDB
 29752                           fsr2h	equ	0xFDA
 29753                           fsr2l	equ	0xFD9
 29754                           status	equ	0xFD8
 29755                           
 29756 ;; *************** function i2_Byte_GetZone *****************
 29757 ;; Defined at:
 29758 ;;		line 64 in file "Library/Types.c"
 29759 ;; Parameters:    Size  Location     Type
 29760 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29761 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29762 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29763 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29764 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29765 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29766 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29767 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29768 ;;		 -> NULL(0), 
 29769 ;;  pMax            1    2[COMRAM] unsigned char 
 29770 ;;  pChunk          1    3[COMRAM] unsigned char 
 29771 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29772 ;; Auto vars:     Size  Location     Type
 29773 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29774 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29775 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29776 ;; Return value:  Size  Location     Type
 29777 ;;                  1    wreg      unsigned char 
 29778 ;; Registers used:
 29779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29780 ;; Tracked objects:
 29781 ;;		On entry : 0/0
 29782 ;;		On exit  : 0/0
 29783 ;;		Unchanged: 0/0
 29784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29785 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29786 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29788 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29789 ;;Total ram usage:        9 bytes
 29790 ;; Hardware stack levels used:    1
 29791 ;; This function calls:
 29792 ;;		Nothing
 29793 ;; This function is called by:
 29794 ;;		i2_Byte_GetPair
 29795 ;; This function uses a non-reentrant model
 29796 ;;
 29797                           
 29798                           	psect	text161
 29799  014C6E                     __ptext161:
 29800                           	opt stack 0
 29801  014C6E                     i2_Byte_GetZone:
 29802                           	opt stack 14
 29803                           
 29804                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29805                           
 29806                           ;incstack = 0
 29807  014C6E  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 29808  014C72  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 29809  014C76  0E00               	movlw	low (__mediumconst shr (0+16))
 29810  014C78  6EF8               	movwf	tblptru,c
 29811  014C7A  0E0F               	movlw	(high __ramtop+-1)
 29812  014C7C  64F7               	cpfsgt	tblptrh,c
 29813  014C7E  D003               	bra	i2u595_47
 29814  014C80  0008               	tblrd		*
 29815  014C82  50F5               	movf	tablat,w,c
 29816  014C84  D005               	bra	i2u595_40
 29817  014C86                     i2u595_47:
 29818  014C86  CFF6 FFE9          	movff	tblptrl,fsr0l
 29819  014C8A  CFF7 FFEA          	movff	tblptrh,fsr0h
 29820  014C8E  50EF               	movf	indf0,w,c
 29821  014C90                     i2u595_40:
 29822  014C90  6E09               	movwf	i2Byte_GetZone@Output,c
 29823                           
 29824                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29825  014C92  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29826  014C94  0D01               	mullw	1
 29827  014C96  0E33               	movlw	low _MASKS
 29828  014C98  24F3               	addwf	prodl,w,c
 29829  014C9A  6EF6               	movwf	tblptrl,c
 29830  014C9C  0EFC               	movlw	high _MASKS
 29831  014C9E  20F4               	addwfc	prodh,w,c
 29832  014CA0  6EF7               	movwf	tblptrh,c
 29833  014CA2                     	if	1	;There are 3 active tblptr bytes
 29834  014CA2  6AF8               	clrf	tblptru,c
 29835  014CA4  0E00               	movlw	low (__mediumconst shr (0+16))
 29836  014CA6  22F8               	addwfc	tblptru,f,c
 29837  014CA8                     	endif
 29838  014CA8  0008               	tblrd		*
 29839  014CAA  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 29840                           
 29841                           ;Types.c: 68: UINT8 Offset = 0;
 29842  014CAE  0E00               	movlw	0
 29843  014CB0  6E08               	movwf	i2Byte_GetZone@Offset,c
 29844                           
 29845                           ;Types.c: 70: while (pChunk >= pMax)
 29846  014CB2  D003               	goto	i2l732
 29847  014CB4                     
 29848                           ;Types.c: 71: {
 29849                           ;Types.c: 72: pChunk -= pMax;
 29850  014CB4  5003               	movf	i2Byte_GetZone@pMax,w,c
 29851  014CB6  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 29852                           
 29853                           ;Types.c: 73: Offset += 1;
 29854  014CB8  2A08               	incf	i2Byte_GetZone@Offset,f,c
 29855  014CBA                     i2l732:
 29856  014CBA  5003               	movf	i2Byte_GetZone@pMax,w,c
 29857  014CBC  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 29858  014CBE  B0D8               	btfsc	status,0,c
 29859  014CC0  D7F9               	goto	i2l733
 29860                           
 29861                           ;Types.c: 74: }
 29862                           ;Types.c: 75: pChunk *= pChunkSize;
 29863  014CC2  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29864  014CC4  0204               	mulwf	i2Byte_GetZone@pChunk,c
 29865  014CC6  50F3               	movf	prodl,w,c
 29866  014CC8  6E04               	movwf	i2Byte_GetZone@pChunk,c
 29867                           
 29868                           ;Types.c: 76: pChunk += Offset;
 29869  014CCA  5008               	movf	i2Byte_GetZone@Offset,w,c
 29870  014CCC  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 29871                           
 29872                           ;Types.c: 78: Output >>= pChunk;
 29873  014CCE  2804               	incf	i2Byte_GetZone@pChunk,w,c
 29874  014CD0  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 29875  014CD2  D002               	goto	i2u597_40
 29876  014CD4                     i2u597_45:
 29877  014CD4  90D8               	bcf	status,0,c
 29878  014CD6  3209               	rrcf	i2Byte_GetZone@Output,f,c
 29879  014CD8                     i2u597_40:
 29880  014CD8  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 29881  014CDA  D7FC               	goto	i2u597_45
 29882                           
 29883                           ;Types.c: 79: Output &= MASK;
 29884  014CDC  5007               	movf	i2Byte_GetZone@MASK,w,c
 29885  014CDE  1609               	andwf	i2Byte_GetZone@Output,f,c
 29886                           
 29887                           ;Types.c: 80: return Output;
 29888  014CE0  5009               	movf	i2Byte_GetZone@Output,w,c
 29889  014CE2  0012               	return	
 29890  014CE4                     __end_ofi2_Byte_GetZone:
 29891                           	opt stack 0
 29892                           tosu	equ	0xFFF
 29893                           tosh	equ	0xFFE
 29894                           tosl	equ	0xFFD
 29895                           pclatu	equ	0xFFB
 29896                           pclath	equ	0xFFA
 29897                           tblptru	equ	0xFF8
 29898                           tblptrh	equ	0xFF7
 29899                           tblptrl	equ	0xFF6
 29900                           tablat	equ	0xFF5
 29901                           prodh	equ	0xFF4
 29902                           prodl	equ	0xFF3
 29903                           intcon	equ	0xFF2
 29904                           indf0	equ	0xFEF
 29905                           postinc0	equ	0xFEE
 29906                           fsr0h	equ	0xFEA
 29907                           fsr0l	equ	0xFE9
 29908                           wreg	equ	0xFE8
 29909                           indf1	equ	0xFE7
 29910                           postdec1	equ	0xFE5
 29911                           fsr1h	equ	0xFE2
 29912                           fsr1l	equ	0xFE1
 29913                           indf2	equ	0xFDF
 29914                           postinc2	equ	0xFDE
 29915                           postdec2	equ	0xFDD
 29916                           plusw2	equ	0xFDB
 29917                           fsr2h	equ	0xFDA
 29918                           fsr2l	equ	0xFD9
 29919                           status	equ	0xFD8
 29920                           
 29921 ;; *************** function i2_Byte_SetBit *****************
 29922 ;; Defined at:
 29923 ;;		line 32 in file "Library/Types.c"
 29924 ;; Parameters:    Size  Location     Type
 29925 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29926 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29927 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29928 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29929 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29930 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29931 ;;		 -> NULL(0), 
 29932 ;;  pBit            1    2[COMRAM] unsigned char 
 29933 ;;  pValue          1    3[COMRAM] unsigned char 
 29934 ;; Auto vars:     Size  Location     Type
 29935 ;;		None
 29936 ;; Return value:  Size  Location     Type
 29937 ;;                  1    wreg      void 
 29938 ;; Registers used:
 29939 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29940 ;; Tracked objects:
 29941 ;;		On entry : 0/0
 29942 ;;		On exit  : 0/0
 29943 ;;		Unchanged: 0/0
 29944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29947 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29948 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29949 ;;Total ram usage:        7 bytes
 29950 ;; Hardware stack levels used:    1
 29951 ;; This function calls:
 29952 ;;		Nothing
 29953 ;; This function is called by:
 29954 ;;		i2_Port_SetPin
 29955 ;; This function uses a non-reentrant model
 29956 ;;
 29957                           
 29958                           	psect	text162
 29959  01551C                     __ptext162:
 29960                           	opt stack 0
 29961  01551C                     i2_Byte_SetBit:
 29962                           	opt stack 16
 29963                           
 29964                           ;Types.c: 34: pValue &= 1;
 29965                           
 29966                           ;incstack = 0
 29967  01551C  0E01               	movlw	1
 29968  01551E  1604               	andwf	i2Byte_SetBit@pValue,f,c
 29969                           
 29970                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29971  015520  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29972  015524  0E01               	movlw	1
 29973  015526  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 29974  015528  2A05               	incf	??i2_Byte_SetBit,f,c
 29975  01552A  D002               	goto	i2u684_44
 29976  01552C                     i2u684_45:
 29977  01552C  90D8               	bcf	status,0,c
 29978  01552E  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29979  015530                     i2u684_44:
 29980  015530  2E05               	decfsz	??i2_Byte_SetBit,f,c
 29981  015532  D7FC               	goto	i2u684_45
 29982  015534  5006               	movf	??i2_Byte_SetBit+1,w,c
 29983  015536  0AFF               	xorlw	255
 29984  015538  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 29985  01553A  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 29986  01553E  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 29987  015542  5007               	movf	??i2_Byte_SetBit+2,w,c
 29988  015544  16DF               	andwf	indf2,f,c
 29989                           
 29990                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29991  015546  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29992  01554A  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 29993  01554E  2A05               	incf	??i2_Byte_SetBit,f,c
 29994  015550  D002               	goto	i2u685_44
 29995  015552                     i2u685_45:
 29996  015552  90D8               	bcf	status,0,c
 29997  015554  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29998  015556                     i2u685_44:
 29999  015556  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30000  015558  D7FC               	goto	i2u685_45
 30001  01555A  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30002  01555E  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30003  015562  5006               	movf	??i2_Byte_SetBit+1,w,c
 30004  015564  12DF               	iorwf	indf2,f,c
 30005  015566  0012               	return		;funcret
 30006  015568                     __end_ofi2_Byte_SetBit:
 30007                           	opt stack 0
 30008                           tosu	equ	0xFFF
 30009                           tosh	equ	0xFFE
 30010                           tosl	equ	0xFFD
 30011                           pclatu	equ	0xFFB
 30012                           pclath	equ	0xFFA
 30013                           tblptru	equ	0xFF8
 30014                           tblptrh	equ	0xFF7
 30015                           tblptrl	equ	0xFF6
 30016                           tablat	equ	0xFF5
 30017                           prodh	equ	0xFF4
 30018                           prodl	equ	0xFF3
 30019                           intcon	equ	0xFF2
 30020                           indf0	equ	0xFEF
 30021                           postinc0	equ	0xFEE
 30022                           fsr0h	equ	0xFEA
 30023                           fsr0l	equ	0xFE9
 30024                           wreg	equ	0xFE8
 30025                           indf1	equ	0xFE7
 30026                           postdec1	equ	0xFE5
 30027                           fsr1h	equ	0xFE2
 30028                           fsr1l	equ	0xFE1
 30029                           indf2	equ	0xFDF
 30030                           postinc2	equ	0xFDE
 30031                           postdec2	equ	0xFDD
 30032                           plusw2	equ	0xFDB
 30033                           fsr2h	equ	0xFDA
 30034                           fsr2l	equ	0xFD9
 30035                           status	equ	0xFD8
 30036                           
 30037 ;; *************** function i2_MXK_SwitchTo *****************
 30038 ;; Defined at:
 30039 ;;		line 105 in file "Library/MXK.c"
 30040 ;; Parameters:    Size  Location     Type
 30041 ;;  pModule         1    wreg     enum E6927
 30042 ;; Auto vars:     Size  Location     Type
 30043 ;;  pModule         1    7[COMRAM] enum E6927
 30044 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30045 ;; Return value:  Size  Location     Type
 30046 ;;                  1    wreg      unsigned char 
 30047 ;; Registers used:
 30048 ;;		wreg, status,2, status,0, cstack
 30049 ;; Tracked objects:
 30050 ;;		On entry : 0/0
 30051 ;;		On exit  : 0/0
 30052 ;;		Unchanged: 0/0
 30053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30058 ;;Total ram usage:        2 bytes
 30059 ;; Hardware stack levels used:    1
 30060 ;; Hardware stack levels required when called:    1
 30061 ;; This function calls:
 30062 ;;		i2_delay_us
 30063 ;; This function is called by:
 30064 ;;		i2_Motor_Step
 30065 ;; This function uses a non-reentrant model
 30066 ;;
 30067                           
 30068                           	psect	text163
 30069  0159F2                     __ptext163:
 30070                           	opt stack 0
 30071  0159F2                     i2_MXK_SwitchTo:
 30072                           	opt stack 16
 30073                           
 30074                           ;incstack = 0
 30075                           ;i2MXK_SwitchTo@pModule stored from wreg
 30076  0159F2  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30077                           
 30078                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30079  0159F4  5086               	movf	3974,w,c	;volatile
 30080  0159F6  0B0F               	andlw	15
 30081  0159F8  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30082                           
 30083                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30084  0159FA  504C               	movf	_Bus_State,w,c
 30085  0159FC  A4D8               	btfss	status,2,c
 30086  0159FE  D002               	goto	i2l1730
 30087                           
 30088                           ;MXK.c: 110: return 0;
 30089  015A00  0E00               	movlw	0
 30090  015A02  0012               	return	
 30091  015A04                     i2l1730:
 30092                           
 30093                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30094  015A04  0E00               	movlw	0
 30095  015A06  6E4C               	movwf	_Bus_State,c
 30096                           
 30097                           ;MXK.c: 114: if (CUR != pModule)
 30098  015A08  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30099  015A0A  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30100  015A0C  B4D8               	btfsc	status,2,c
 30101  015A0E  D00A               	goto	i2l1732
 30102                           
 30103                           ;MXK.c: 115: {
 30104                           ;MXK.c: 116: PORTG &= ~(0xF);
 30105  015A10  0EF0               	movlw	240
 30106  015A12  1686               	andwf	3974,f,c	;volatile
 30107                           
 30108                           ;MXK.c: 117: PORTG |= pModule;
 30109  015A14  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30110  015A16  1286               	iorwf	3974,f,c	;volatile
 30111                           
 30112                           ;MXK.c: 120: delay_us(10);
 30113  015A18  0E00               	movlw	0
 30114  015A1A  6E02               	movwf	i2delay_us@us+1,c
 30115  015A1C  0E0A               	movlw	10
 30116  015A1E  6E01               	movwf	i2delay_us@us,c
 30117  015A20  ECEF  F0AB         	call	i2_delay_us	;wreg free
 30118  015A24                     i2l1732:
 30119                           
 30120                           ;MXK.c: 121: }
 30121                           ;MXK.c: 122: return 1;
 30122  015A24  0E01               	movlw	1
 30123  015A26  0012               	return	
 30124  015A28                     __end_ofi2_MXK_SwitchTo:
 30125                           	opt stack 0
 30126                           tosu	equ	0xFFF
 30127                           tosh	equ	0xFFE
 30128                           tosl	equ	0xFFD
 30129                           pclatu	equ	0xFFB
 30130                           pclath	equ	0xFFA
 30131                           tblptru	equ	0xFF8
 30132                           tblptrh	equ	0xFF7
 30133                           tblptrl	equ	0xFF6
 30134                           tablat	equ	0xFF5
 30135                           prodh	equ	0xFF4
 30136                           prodl	equ	0xFF3
 30137                           intcon	equ	0xFF2
 30138                           indf0	equ	0xFEF
 30139                           postinc0	equ	0xFEE
 30140                           fsr0h	equ	0xFEA
 30141                           fsr0l	equ	0xFE9
 30142                           wreg	equ	0xFE8
 30143                           indf1	equ	0xFE7
 30144                           postdec1	equ	0xFE5
 30145                           fsr1h	equ	0xFE2
 30146                           fsr1l	equ	0xFE1
 30147                           indf2	equ	0xFDF
 30148                           postinc2	equ	0xFDE
 30149                           postdec2	equ	0xFDD
 30150                           plusw2	equ	0xFDB
 30151                           fsr2h	equ	0xFDA
 30152                           fsr2l	equ	0xFD9
 30153                           status	equ	0xFD8
 30154                           
 30155 ;; *************** function i2_delay_us *****************
 30156 ;; Defined at:
 30157 ;;		line 255 in file "Library/Types.c"
 30158 ;; Parameters:    Size  Location     Type
 30159 ;;  us              2    0[COMRAM] unsigned short 
 30160 ;; Auto vars:     Size  Location     Type
 30161 ;;  delay_us        4    2[COMRAM] unsigned long 
 30162 ;; Return value:  Size  Location     Type
 30163 ;;                  1    wreg      void 
 30164 ;; Registers used:
 30165 ;;		wreg, status,2, status,0
 30166 ;; Tracked objects:
 30167 ;;		On entry : 0/0
 30168 ;;		On exit  : 0/0
 30169 ;;		Unchanged: 0/0
 30170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30171 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30172 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30174 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30175 ;;Total ram usage:        6 bytes
 30176 ;; Hardware stack levels used:    1
 30177 ;; This function calls:
 30178 ;;		Nothing
 30179 ;; This function is called by:
 30180 ;;		i2_MXK_SwitchTo
 30181 ;; This function uses a non-reentrant model
 30182 ;;
 30183                           
 30184                           	psect	text164
 30185  0157DE                     __ptext164:
 30186                           	opt stack 0
 30187  0157DE                     i2_delay_us:
 30188                           	opt stack 16
 30189                           
 30190                           ;Types.c: 256: unsigned long u;
 30191                           ;Types.c: 257: while (us--) {
 30192                           
 30193                           ;incstack = 0
 30194  0157DE  D016               	goto	i2u688_40
 30195  0157E0                     i2l9614:
 30196                           
 30197                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30198  0157E0  0E00               	movlw	0
 30199  0157E2  6E03               	movwf	i2delay_us@u,c
 30200  0157E4  0E00               	movlw	0
 30201  0157E6  6E04               	movwf	i2delay_us@u+1,c
 30202  0157E8  0E00               	movlw	0
 30203  0157EA  6E05               	movwf	i2delay_us@u+2,c
 30204  0157EC  0E00               	movlw	0
 30205  0157EE  6E06               	movwf	i2delay_us@u+3,c
 30206  0157F0                     i2l9616:
 30207  0157F0  5003               	movf	i2delay_us@u,w,c
 30208  0157F2  1004               	iorwf	i2delay_us@u+1,w,c
 30209  0157F4  1005               	iorwf	i2delay_us@u+2,w,c
 30210  0157F6  1006               	iorwf	i2delay_us@u+3,w,c
 30211  0157F8  A4D8               	btfss	status,2,c
 30212  0157FA  D008               	goto	i2u688_40
 30213  0157FC  F000               	nop		; ;# 
 30214  0157FE  0E01               	movlw	1
 30215  015800  2603               	addwf	i2delay_us@u,f,c
 30216  015802  0E00               	movlw	0
 30217  015804  2204               	addwfc	i2delay_us@u+1,f,c
 30218  015806  2205               	addwfc	i2delay_us@u+2,f,c
 30219  015808  2206               	addwfc	i2delay_us@u+3,f,c
 30220  01580A  D7F2               	goto	i2l9616
 30221  01580C                     i2u688_40:
 30222  01580C  0601               	decf	i2delay_us@us,f,c
 30223  01580E  A0D8               	btfss	status,0,c
 30224  015810  0602               	decf	i2delay_us@us+1,f,c
 30225  015812  2801               	incf	i2delay_us@us,w,c
 30226  015814  E1E5               	bnz	i2l9614
 30227  015816  2802               	incf	i2delay_us@us+1,w,c
 30228  015818  B4D8               	btfsc	status,2,c
 30229  01581A  0012               	return	
 30230  01581C  D7E1               	goto	i2l832
 30231  01581E                     __end_ofi2_delay_us:
 30232                           	opt stack 0
 30233                           tosu	equ	0xFFF
 30234                           tosh	equ	0xFFE
 30235                           tosl	equ	0xFFD
 30236                           pclatu	equ	0xFFB
 30237                           pclath	equ	0xFFA
 30238                           tblptru	equ	0xFF8
 30239                           tblptrh	equ	0xFF7
 30240                           tblptrl	equ	0xFF6
 30241                           tablat	equ	0xFF5
 30242                           prodh	equ	0xFF4
 30243                           prodl	equ	0xFF3
 30244                           intcon	equ	0xFF2
 30245                           indf0	equ	0xFEF
 30246                           postinc0	equ	0xFEE
 30247                           fsr0h	equ	0xFEA
 30248                           fsr0l	equ	0xFE9
 30249                           wreg	equ	0xFE8
 30250                           indf1	equ	0xFE7
 30251                           postdec1	equ	0xFE5
 30252                           fsr1h	equ	0xFE2
 30253                           fsr1l	equ	0xFE1
 30254                           indf2	equ	0xFDF
 30255                           postinc2	equ	0xFDE
 30256                           postdec2	equ	0xFDD
 30257                           plusw2	equ	0xFDB
 30258                           fsr2h	equ	0xFDA
 30259                           fsr2l	equ	0xFD9
 30260                           status	equ	0xFD8
 30261                           
 30262 ;; *************** function i2_MXK_Release *****************
 30263 ;; Defined at:
 30264 ;;		line 130 in file "Library/MXK.c"
 30265 ;; Parameters:    Size  Location     Type
 30266 ;;		None
 30267 ;; Auto vars:     Size  Location     Type
 30268 ;;		None
 30269 ;; Return value:  Size  Location     Type
 30270 ;;                  1    wreg      unsigned char 
 30271 ;; Registers used:
 30272 ;;		wreg, status,2, status,0
 30273 ;; Tracked objects:
 30274 ;;		On entry : 0/0
 30275 ;;		On exit  : 0/0
 30276 ;;		Unchanged: 0/0
 30277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30282 ;;Total ram usage:        0 bytes
 30283 ;; Hardware stack levels used:    1
 30284 ;; This function calls:
 30285 ;;		Nothing
 30286 ;; This function is called by:
 30287 ;;		i2_Motor_Step
 30288 ;; This function uses a non-reentrant model
 30289 ;;
 30290                           
 30291                           	psect	text165
 30292  0160AE                     __ptext165:
 30293                           	opt stack 0
 30294  0160AE                     i2_MXK_Release:
 30295                           	opt stack 17
 30296                           
 30297                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30298                           
 30299                           ;incstack = 0
 30300  0160AE  0E01               	movlw	1
 30301  0160B0  6E4C               	movwf	_Bus_State,c
 30302                           
 30303                           ;MXK.c: 135: return 1;
 30304                           ;	Return value of i2_MXK_Release is never used
 30305  0160B2  0012               	return	
 30306  0160B4                     __end_ofi2_MXK_Release:
 30307                           	opt stack 0
 30308                           tosu	equ	0xFFF
 30309                           tosh	equ	0xFFE
 30310                           tosl	equ	0xFFD
 30311                           pclatu	equ	0xFFB
 30312                           pclath	equ	0xFFA
 30313                           tblptru	equ	0xFF8
 30314                           tblptrh	equ	0xFF7
 30315                           tblptrl	equ	0xFF6
 30316                           tablat	equ	0xFF5
 30317                           prodh	equ	0xFF4
 30318                           prodl	equ	0xFF3
 30319                           intcon	equ	0xFF2
 30320                           indf0	equ	0xFEF
 30321                           postinc0	equ	0xFEE
 30322                           fsr0h	equ	0xFEA
 30323                           fsr0l	equ	0xFE9
 30324                           wreg	equ	0xFE8
 30325                           indf1	equ	0xFE7
 30326                           postdec1	equ	0xFE5
 30327                           fsr1h	equ	0xFE2
 30328                           fsr1l	equ	0xFE1
 30329                           indf2	equ	0xFDF
 30330                           postinc2	equ	0xFDE
 30331                           postdec2	equ	0xFDD
 30332                           plusw2	equ	0xFDB
 30333                           fsr2h	equ	0xFDA
 30334                           fsr2l	equ	0xFD9
 30335                           status	equ	0xFD8
 30336                           
 30337 ;; *************** function i2_MXK_Queue *****************
 30338 ;; Defined at:
 30339 ;;		line 144 in file "Library/MXK.c"
 30340 ;; Parameters:    Size  Location     Type
 30341 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30342 ;;		 -> Absolute function(1), Motor_Step(1), 
 30343 ;; Auto vars:     Size  Location     Type
 30344 ;;		None
 30345 ;; Return value:  Size  Location     Type
 30346 ;;                  1    wreg      void 
 30347 ;; Registers used:
 30348 ;;		wreg, status,2, status,0
 30349 ;; Tracked objects:
 30350 ;;		On entry : 0/0
 30351 ;;		On exit  : 0/0
 30352 ;;		Unchanged: 0/0
 30353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30354 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30357 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30358 ;;Total ram usage:        3 bytes
 30359 ;; Hardware stack levels used:    1
 30360 ;; This function calls:
 30361 ;;		Nothing
 30362 ;; This function is called by:
 30363 ;;		i2_Motor_Step
 30364 ;; This function uses a non-reentrant model
 30365 ;;
 30366                           
 30367                           	psect	text166
 30368  016020                     __ptext166:
 30369                           	opt stack 0
 30370  016020                     i2_MXK_Queue:
 30371                           	opt stack 17
 30372                           
 30373                           ;MXK.c: 146: lQueue = pCallback;
 30374                           
 30375                           ;incstack = 0
 30376  016020  C001  F0E6         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30377  016024  C002  F0E7         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30378  016028  C003  F0E8         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30379  01602C  0012               	return		;funcret
 30380  01602E                     __end_ofi2_MXK_Queue:
 30381                           	opt stack 0
 30382                           tosu	equ	0xFFF
 30383                           tosh	equ	0xFFE
 30384                           tosl	equ	0xFFD
 30385                           pclatu	equ	0xFFB
 30386                           pclath	equ	0xFFA
 30387                           tblptru	equ	0xFF8
 30388                           tblptrh	equ	0xFF7
 30389                           tblptrl	equ	0xFF6
 30390                           tablat	equ	0xFF5
 30391                           prodh	equ	0xFF4
 30392                           prodl	equ	0xFF3
 30393                           intcon	equ	0xFF2
 30394                           indf0	equ	0xFEF
 30395                           postinc0	equ	0xFEE
 30396                           fsr0h	equ	0xFEA
 30397                           fsr0l	equ	0xFE9
 30398                           wreg	equ	0xFE8
 30399                           indf1	equ	0xFE7
 30400                           postdec1	equ	0xFE5
 30401                           fsr1h	equ	0xFE2
 30402                           fsr1l	equ	0xFE1
 30403                           indf2	equ	0xFDF
 30404                           postinc2	equ	0xFDE
 30405                           postdec2	equ	0xFDD
 30406                           plusw2	equ	0xFDB
 30407                           fsr2h	equ	0xFDA
 30408                           fsr2l	equ	0xFD9
 30409                           status	equ	0xFD8
 30410                           tosu	equ	0xFFF
 30411                           tosh	equ	0xFFE
 30412                           tosl	equ	0xFFD
 30413                           pclatu	equ	0xFFB
 30414                           pclath	equ	0xFFA
 30415                           tblptru	equ	0xFF8
 30416                           tblptrh	equ	0xFF7
 30417                           tblptrl	equ	0xFF6
 30418                           tablat	equ	0xFF5
 30419                           prodh	equ	0xFF4
 30420                           prodl	equ	0xFF3
 30421                           intcon	equ	0xFF2
 30422                           indf0	equ	0xFEF
 30423                           postinc0	equ	0xFEE
 30424                           fsr0h	equ	0xFEA
 30425                           fsr0l	equ	0xFE9
 30426                           wreg	equ	0xFE8
 30427                           indf1	equ	0xFE7
 30428                           postdec1	equ	0xFE5
 30429                           fsr1h	equ	0xFE2
 30430                           fsr1l	equ	0xFE1
 30431                           indf2	equ	0xFDF
 30432                           postinc2	equ	0xFDE
 30433                           postdec2	equ	0xFDD
 30434                           plusw2	equ	0xFDB
 30435                           fsr2h	equ	0xFDA
 30436                           fsr2l	equ	0xFD9
 30437                           status	equ	0xFD8
 30438                           
 30439                           	psect	text167
 30440  000000                     __ptext167:
 30441                           	opt stack 0
 30442                           tosu	equ	0xFFF
 30443                           tosh	equ	0xFFE
 30444                           tosl	equ	0xFFD
 30445                           pclatu	equ	0xFFB
 30446                           pclath	equ	0xFFA
 30447                           tblptru	equ	0xFF8
 30448                           tblptrh	equ	0xFF7
 30449                           tblptrl	equ	0xFF6
 30450                           tablat	equ	0xFF5
 30451                           prodh	equ	0xFF4
 30452                           prodl	equ	0xFF3
 30453                           intcon	equ	0xFF2
 30454                           indf0	equ	0xFEF
 30455                           postinc0	equ	0xFEE
 30456                           fsr0h	equ	0xFEA
 30457                           fsr0l	equ	0xFE9
 30458                           wreg	equ	0xFE8
 30459                           indf1	equ	0xFE7
 30460                           postdec1	equ	0xFE5
 30461                           fsr1h	equ	0xFE2
 30462                           fsr1l	equ	0xFE1
 30463                           indf2	equ	0xFDF
 30464                           postinc2	equ	0xFDE
 30465                           postdec2	equ	0xFDD
 30466                           plusw2	equ	0xFDB
 30467                           fsr2h	equ	0xFDA
 30468                           fsr2l	equ	0xFD9
 30469                           status	equ	0xFD8
 30470                           
 30471                           	psect	rparam
 30472  0000                     tosu	equ	0xFFF
 30473                           tosh	equ	0xFFE
 30474                           tosl	equ	0xFFD
 30475                           pclatu	equ	0xFFB
 30476                           pclath	equ	0xFFA
 30477                           tblptru	equ	0xFF8
 30478                           tblptrh	equ	0xFF7
 30479                           tblptrl	equ	0xFF6
 30480                           tablat	equ	0xFF5
 30481                           prodh	equ	0xFF4
 30482                           prodl	equ	0xFF3
 30483                           intcon	equ	0xFF2
 30484                           indf0	equ	0xFEF
 30485                           postinc0	equ	0xFEE
 30486                           fsr0h	equ	0xFEA
 30487                           fsr0l	equ	0xFE9
 30488                           wreg	equ	0xFE8
 30489                           indf1	equ	0xFE7
 30490                           postdec1	equ	0xFE5
 30491                           fsr1h	equ	0xFE2
 30492                           fsr1l	equ	0xFE1
 30493                           indf2	equ	0xFDF
 30494                           postinc2	equ	0xFDE
 30495                           postdec2	equ	0xFDD
 30496                           plusw2	equ	0xFDB
 30497                           fsr2h	equ	0xFDA
 30498                           fsr2l	equ	0xFD9
 30499                           status	equ	0xFD8
 30500                           
 30501                           	psect	temp
 30502  000051                     btemp:
 30503                           	opt stack 0
 30504  000051                     	ds	1
 30505  0000                     int$flags	set	btemp
 30506  0000                     wtemp6	set	btemp+1
 30507                           tosu	equ	0xFFF
 30508                           tosh	equ	0xFFE
 30509                           tosl	equ	0xFFD
 30510                           pclatu	equ	0xFFB
 30511                           pclath	equ	0xFFA
 30512                           tblptru	equ	0xFF8
 30513                           tblptrh	equ	0xFF7
 30514                           tblptrl	equ	0xFF6
 30515                           tablat	equ	0xFF5
 30516                           prodh	equ	0xFF4
 30517                           prodl	equ	0xFF3
 30518                           intcon	equ	0xFF2
 30519                           indf0	equ	0xFEF
 30520                           postinc0	equ	0xFEE
 30521                           fsr0h	equ	0xFEA
 30522                           fsr0l	equ	0xFE9
 30523                           wreg	equ	0xFE8
 30524                           indf1	equ	0xFE7
 30525                           postdec1	equ	0xFE5
 30526                           fsr1h	equ	0xFE2
 30527                           fsr1l	equ	0xFE1
 30528                           indf2	equ	0xFDF
 30529                           postinc2	equ	0xFDE
 30530                           postdec2	equ	0xFDD
 30531                           plusw2	equ	0xFDB
 30532                           fsr2h	equ	0xFDA
 30533                           fsr2l	equ	0xFD9
 30534                           status	equ	0xFD8


Data Sizes:
    Strings     386
    Constant    806
    Data        33
    BSS         821
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
<<<<<<< HEAD
    BANK0           160     64     160
    BANK1           256     17     244
    BANK2           256      0     240
    BANK3           256      0       0
=======
    BANK0           160    134     150
    BANK1           256      0     247
    BANK2           256      0     251
    BANK3           256     24      24
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
<<<<<<< HEAD
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_35(CODE[5]), STR_34(CODE[3]), STR_33(CODE[39]), STR_32(CODE[42]), 
		 -> STR_31(CODE[6]), STR_30(CODE[3]), STR_29(CODE[21]), STR_28(CODE[3]), 
		 -> STR_27(CODE[19]), STR_26(CODE[28]), STR_25(CODE[20]), STR_24(CODE[3]), 
		 -> STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[19]), STR_20(CODE[19]), 
		 -> STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), STR_16(CODE[19]), 
		 -> STR_15(CODE[3]), STR_14(CODE[19]), STR_13(CODE[28]), STR_12(CODE[20]), 
		 -> STR_11(CODE[3]), STR_10(CODE[19]), STR_9(CODE[19]), STR_8(CODE[19]), 
		 -> STR_7(CODE[19]), STR_6(CODE[19]), STR_5(CODE[19]), STR_4(CODE[19]), 
		 -> STR_3(CODE[16]), STR_2(CODE[19]), STR_1(CODE[3]), 
=======
		 -> I2C1T(COMRAM[6]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_72(CODE[12]), STR_71(CODE[19]), STR_70(CODE[19]), STR_69(CODE[19]), 
		 -> STR_68(CODE[19]), STR_67(CODE[19]), STR_66(CODE[19]), STR_65(CODE[19]), 
		 -> STR_64(CODE[19]), STR_63(CODE[16]), STR_62(CODE[28]), STR_61(CODE[3]), 
		 -> STR_60(CODE[19]), STR_59(CODE[19]), STR_58(CODE[19]), STR_57(CODE[19]), 
		 -> STR_56(CODE[19]), STR_55(CODE[19]), STR_54(CODE[19]), STR_53(CODE[19]), 
		 -> STR_52(CODE[11]), STR_51(CODE[23]), STR_50(CODE[3]), STR_49(CODE[19]), 
		 -> STR_48(CODE[19]), STR_47(CODE[19]), STR_46(CODE[19]), STR_45(CODE[19]), 
		 -> STR_44(CODE[19]), STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[22]), 
		 -> STR_40(CODE[3]), STR_39(CODE[19]), STR_38(CODE[19]), STR_37(CODE[19]), 
		 -> STR_36(CODE[19]), STR_35(CODE[28]), STR_34(CODE[28]), STR_33(CODE[30]), 
		 -> STR_32(CODE[28]), STR_31(CODE[15]), STR_30(CODE[3]), STR_29(CODE[21]), 
		 -> STR_28(CODE[3]), STR_27(CODE[19]), STR_26(CODE[28]), STR_25(CODE[20]), 
		 -> STR_24(CODE[3]), STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[3]), STR_14(CODE[19]), STR_13(CODE[28]), 
		 -> STR_12(CODE[20]), STR_11(CODE[3]), STR_10(CODE[19]), STR_9(CODE[19]), 
		 -> STR_8(CODE[19]), STR_7(CODE[19]), STR_6(CODE[19]), STR_5(CODE[19]), 
		 -> STR_4(CODE[19]), STR_3(CODE[16]), STR_2(CODE[19]), STR_1(CODE[3]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
=======
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
<<<<<<< HEAD
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
=======
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
<<<<<<< HEAD
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 
=======
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK2[2]), PortG(BANK2[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
<<<<<<< HEAD
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 
=======
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
<<<<<<< HEAD
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 
=======
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
<<<<<<< HEAD
		 -> SPI1(BANK1[11]), 
=======
		 -> SPI1(BANK2[11]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
<<<<<<< HEAD
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 
=======
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
<<<<<<< HEAD
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 
=======
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
=======
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
=======
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 
=======
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 
=======
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortC(BANK0[10]), 
=======
		 -> PortC(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 
=======
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
=======
		 -> PortG(BANK2[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
=======
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 
=======
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
<<<<<<< HEAD
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 
=======
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK2[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
<<<<<<< HEAD
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 
=======
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
<<<<<<< HEAD
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 
=======
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

<<<<<<< HEAD
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _Robot_Init->_eusartSend
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_SetType
=======
    _main->_Sensor_Observe
    _main->_Sensor_Observe2
    _Turn->_eusartSend
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Robot_Init->_UpdateDistance
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
<<<<<<< HEAD
=======
    _LEDOn->_eusartSend
    _LEDOff->_eusartSend
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
<<<<<<< HEAD
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
=======
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
<<<<<<< HEAD
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
=======
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
<<<<<<< HEAD
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
=======
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _Get_Sensor_State->_eusartSend
    _FunctInitButton->_Button_Init
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
<<<<<<< HEAD
=======
    _Drive->_eusartSend
    _Closest_Object2->_ADCAverage
    _SteppingCW->_delay_ms
    _Closest_Object->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _SteppingCCW->_delay_ms
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
<<<<<<< HEAD
=======
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _BangBang->_eusartSend
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

<<<<<<< HEAD
    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init
    _FunctInitButton->_Button_Init
=======
    None.
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

<<<<<<< HEAD
    None.
=======
    _main->_ADCAverage
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Closest_Object2->_ADCAverage
    _Closest_Object->_ADCAverage
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (0) _main                                                 4     4      0 1244320
                                             13 BANK1      4     4      0
                       _Console_Init
                     _Console_Render
                    _FunctInitButton
=======
 (0) _main                                                11    11      0 2030877
                                            123 BANK0     11    11      0
                         _ADCAverage
                           _BangBang
                     _Closest_Object
                    _Closest_Object2
                       _Console_Init
                     _Console_Render
                              _Drive
                    _FunctInitButton
                   _Get_Sensor_State
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
<<<<<<< HEAD
                           _LED_Init
=======
                          _LEDToggle
                           _LED_Init
                            _LED_Set
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
<<<<<<< HEAD
                         _Robot_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    9916
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
=======
                    _Reset_variables
                         _Robot_Init
                         _Robot_Stop
                     _Sensor_Observe
                    _Sensor_Observe2
                               _Turn
                     _UpdateDistance
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Turn                                                 6     2      4     493
                                              1 BANK0      6     2      4
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe2                                      2     2      0  158592
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe                                       2     2      0  158592
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _UpdateDistance                                       0     0      0      31
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (3) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  363376
=======
 (1) _UpdateDistance                                       2     0      2      31
                                              1 BANK0      2     0      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Reset_variables                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  364440
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
<<<<<<< HEAD
                                              0 BANK1      6     3      3
=======
                                             64 BANK0      6     3      3
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _LED_Init                                             1     1      0   85371
=======
 (2) _LED_Init                                             1     1      0   86131
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (3) _LED_Set                                              2     1      1   30528
=======
 (3) _LED_Set                                              2     1      1   31288
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _LCD_Init                                             4     4      0  292948
=======
 (1) _LEDToggle                                            0     0      0      62
                             _LEDOff
                              _LEDOn
 ---------------------------------------------------------------------------------
 (2) _LEDOn                                                0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _LEDOff                                               0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  293556
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _Configure_GPIOs                                      0     0      0  262877
=======
 (2) _Configure_GPIOs                                      0     0      0  263181
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (3) _LCD_Reset                                            0     0      0   95501
=======
 (3) _LCD_Reset                                            0     0      0   95805
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _delay_ms                                             6     4      2    2382
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
=======
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84709
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84709
=======
 (1) _HMI_Poll                                             0     0      0   84861
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84861
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (3) _Event_TestButton                                     1     1      0   37341
=======
 (3) _Event_TestButton                                     1     1      0   37493
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _HMI_SetNumber                                        2     0      2    4246
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (2) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
=======
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
<<<<<<< HEAD
                                             59 BANK0      2     2      0
=======
                                             72 BANK0      2     2      0
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
=======
 (1) _Get_Sensor_State                                     0     0      0      31
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
<<<<<<< HEAD
                                              0 BANK1     13     0     13
=======
                                             59 BANK0     13     0     13
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (1) _Console_Render                                      11    11      0   35631
=======
 (1) _Drive                                                4     2      2     462
                                              1 BANK0      4     2      2
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Closest_Object2                                      0     0      0  158592
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SteppingCW                                           0     0      0    2686
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _Closest_Object                                       0     0      0  158592
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4   15540
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SteppingCCW                                          0     0      0    2686
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    2686
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _STP4                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP3                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP2                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP1                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (4) _Coil_Setup                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35631
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _LCD_FillRectangle                                   14     4     10   16865
=======
 (3) _LCD_FillRectangle                                   14     4     10   16865
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (2) _LCD_DrawField                                       17     7     10   16824
=======
 (3) _LCD_DrawField                                       17     7     10   16824
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (3) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
=======
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
<<<<<<< HEAD
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
=======
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  104735
                                            119 BANK0      2     2      0
                                              0 BANK3     24    24      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   81724
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26512
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43838
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   11207
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    1692
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4     945
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   12261
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    5457
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6271
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    5638
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4398
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _BangBang                                             8     0      8    3195
                                              1 BANK0      8     0      8
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
<<<<<<< HEAD
=======
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___wmul
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _BangBang
     _eusartSend
   _Closest_Object
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Closest_Object2
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
<<<<<<< HEAD
=======
   _Drive
     _eusartSend
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
<<<<<<< HEAD
=======
   _Get_Sensor_State
     _eusartRec
     _eusartSend
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
<<<<<<< HEAD
=======
   _LEDToggle *
     _LEDOff
       _eusartSend
     _LEDOn
       _eusartSend
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
<<<<<<< HEAD
=======
   _LED_Set *
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
<<<<<<< HEAD
=======
   _Reset_variables *
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
<<<<<<< HEAD
=======
   _Robot_Stop *
     _eusartSend
   _Sensor_Observe *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Sensor_Observe2 *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Turn *
     _Robot_Stop
       _eusartSend
     _eusartRec
     _eusartSend
   _UpdateDistance *
     _eusartRec
     _eusartSend
   _delay_ms *
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
<<<<<<< HEAD
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F0       9       93.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     11      F4       7       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      A0       5      100.0%
=======
BANK3              100     18      18      11        9.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      FB       9       98.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      F7       7       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      96       5       93.8%
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
<<<<<<< HEAD
ABS                  0      0     2D4      12        0.0%
DATA                 0      0     400       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed May 16 11:15:57 2018

                   i2_Timer0_Stop 3B3C                  SPI_Init@pChannel 00E4  
      __size_of_MXK_BlockSwitchTo 0038                      i2_Motor_Step 1D04  
                               _A 004C                                 l8 1FAE  
                               _a 004D                                 _i 0034  
                               _j 008B                                 _l 004F  
                               _u 008A                                 _w 0050  
                               _x 012A                                 _y 0128  
                              l11 1B3A                                l12 1B28  
                              l90 16C0                                l87 163A  
                              l89 169A                  ??_UpdateDistance 00B4  
                    ___awdiv@sign 00B8               ___wmul@multiplicand 00B5  
                   _HMI_DIPSwitch 39F6                LCD_DrawField@pSize 00CB  
              LCD_DrawField@count 00D1                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 3AFA                               l120 2420  
                             l121 2436                               l122 244C  
                             l220 2F74                               l117 2462  
                             l221 2F44                               l118 240C  
                             l230 323A                               l222 2F84  
                             l223 2F5C                       ?_LED_Toggle 0001  
                             l234 33E8                               l235 33C0  
                             l227 3252                               l403 1142  
                             l412 0FCE                               l228 3222  
                             l340 25A8                               l404 10E2  
                             l421 0F6A                               l413 0E80  
                             l237 33D4                               l341 25B2  
                             l405 1172                     ??_Console_Tab 00BB  
                             l414 0FEA                               l430 1EDE  
                             l350 2676                               l342 25BC  
                             l510 0AEC                               l406 10FA  
                             l183 281A                               l415 0EA2  
                             l351 2624                               l343 25C6  
                             l511 0BE2                               l407 1112  
                             l184 27FA                               l600 000C  
                             l432 1F04                               l344 25D0  
                             l512 0B0C                               l408 112A  
                             l417 0F06                               l601 015E  
                             l433 1F30                               l353 2630  
                             l337 25EE                               l345 25DA  
                             l610 01D6                               l602 0038  
                             l354 263A                               l346 25E4  
                             l338 259C                               l370 2548  
                             l611 021C                               l603 016E  
                             l427 1F58                               l355 2644  
                             l363 2566                               l371 2552  
                             l531 05EC                       ?_HMI_GetBar 0001  
                             l612 0262                               l604 00C8  
                             l356 264E                               l372 255C  
                             l364 2514                               l532 060E  
                             l516 0B4C                               l357 2658  
                             l509 0BC8                               l614 0334  
                             l358 2662                               l366 2520  
                             l526 062E                               l615 032C  
                             l607 02A8                               l359 266C  
                             l367 252A                               l519 0B8C  
                             l616 0346                               l608 0190  
                             l368 2534                               l528 064C  
                             l393 31CC                               l617 0330  
                             l609 02C6                               l369 253E  
                             l529 05CE                               l483 0982  
                             l732 2972                               l476 0A4A  
                             l900 0708                               l733 296C  
                             l389 2E2C                               l477 08DA  
                             l901 070C                               l397 33B6  
                             l726 24AA                               l478 0A66  
                             l486 09E6                               l654 3754  
                             l910 0730                               l902 0710  
                             l727 24A4                               l479 091E  
                             l655 374C                               l911 0734  
                             l903 0714                               l912 0738  
                             l904 0718                               l824 2E90  
                             l832 32AE                               l681 2B76  
                             l673 3712                               l657 3750  
                             l913 073C                               l905 071C  
                             l921 2FD2                               l914 0740  
                             l906 0720                               l922 2FA2  
                             l930 1E3C                               l819 2D6C  
                             l915 0744                               l907 0724  
                             l684 2B8C                               l916 0748  
                             l908 0728                               l860 0668  
                             l781 3652                               l597 0016  
                             l853 0750                               l917 074C  
                             l909 072C                               l861 066C  
                             l678 2BB0                               l686 2B9A  
                             l598 0002                               l870 0690  
                             l862 0670                               l854 0654  
                             l679 2B66                               l599 0026  
                             l871 0694                               l863 0674  
                             l776 3510                               l880 06B8  
                             l872 0698                               l864 0678  
                             l856 0658                               l928 1EAE  
                             l881 06BC                               l873 069C  
                             l865 067C                               l857 065C  
                             l929 1E86                               l890 06E0  
                             l882 06C0                               l874 06A0  
                             l866 0680                               l858 0660  
                             l891 06E4                               l883 06C4  
                             l875 06A4                               l867 0684  
                             l859 0664                               l892 06E8  
                             l884 06C8                               l876 06A8  
                             l868 0688                               l893 06EC  
                             l885 06CC                               l877 06AC  
                             l869 068C                               l894 06F0  
                             l886 06D0                               l878 06B0  
                             l990 2B0E                               l895 06F4  
                             l887 06D4                               l879 06B4  
                             l983 288A                               l976 2BE4  
                             l896 06F8                               l888 06D8  
                             l992 2B1A                               l984 2830  
                             l897 06FC                               l889 06DC  
                             l985 2888                               l978 2BF0  
                             l898 0700                               l899 0704  
                             l997 30F4                               l999 3112  
                             _RA2 007C02                               _RA3 007C03  
                             _RD5 007C1D                               _RD7 007C1F  
                             _PR2 000FCB                               _mod 0120  
                             _val 0079                               _top 0049  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 00CC  
                    _Word_GetPair 3632                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 00BA  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 00C3                Console_MakeField@y 00C4  
                      _TXSTA1bits 000FAD                      Console_Tab@c 00C2  
                    Console_Tab@i 00C1               LCD_DrawField@pField 00C5  
                    Console_Tab@t 00C0                        i2_delay_us 33FA  
            Port_Set@TypeRequired 00D5                 Console_FormFeed@x 00B5  
               Console_FormFeed@y 00B6               LCD_DrawField@pPoint 00C7  
                  ?_LCD_DrawField 00C5             Port_SetPinType@Output 00DD  
                 Port_SetPin@Type 00C6                   Port_SetPin@pPin 00C4  
                   ?_Byte_GetPair 00BC                   __end_of_LED_Set 3264  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 20D4  
                    _Word_SetPair 34EC                              l1000 312A  
                            l1010 239C                              l1004 2F14  
                   ?_Byte_GetZone 00B3                              l1005 2F3A  
                            l1200 2230                              l1040 147C  
                            l1201 2278                              l1009 23A8  
                            l1041 1482                              l1202 228C  
                            l1042 1488                              l1043 148E  
                            l1204 22B0                              l1036 158A  
                            l1044 1494                              l1205 229C  
                            l1045 149A                              l1037 1476  
                            l1062 0E02                              l1063 0E30  
                            l1207 22BE                              l1047 1518  
                            l1056 0CD8                              l1057 0E50  
                            l1153 1306                              l1082 21D8  
                            l1058 0CDE                              l1146 2AA6  
                            l1059 0D02                              l1084 21E0  
                            l2124 3320                              l1077 21AC  
                            l2125 3302                              l1158 3592  
                            l2310 1314                              l1079 21B8  
                            l2311 1324                              l2320 13A4  
                            l2312 1348                              l2242 19D2  
                            l2500 26EA                              l2324 13EC  
                            l2244 1A66                              l2501 26E2  
                            l2325 1446                              l2317 137A  
                            l1630 1C62                              l2326 13F2  
                            l2318 132C                              l2246 1AB4  
                            l1631 1CB2                              l2319 1340  
                            l1632 1C9C                              l2504 270A  
                            l2505 2714                              l1730 348E  
                            l2506 2722                              l1627 1CF2  
                            l1724 3532                              l1732 34AE  
                            l1628 1CE8                              l1629 1C7A  
                            l1726 355A                              l1735 3950  
                            l1827 176C                              l1828 1788  
                            l2733 3006                              l2734 2FFE  
                            l2743 334E                              l2680 275C  
                            l2744 3346                              l2681 2750  
                            l2737 3026                              l1873 362A  
                            l2497 26BC                              l2738 3030  
                            l2498 26CC                              l2747 3366  
                            l2684 2790                              l2748 3370  
                            l2685 279E                    ??_Console_Init 00B3  
                            _ADON 007E10             Port_SetPinType@pInput 00D9  
                            STR_1 FFFB                              STR_2 FFA7  
                            STR_3 FFE0                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 0018  
                            _LATG 000F8F               __end_of_GetPortPORT 26A6  
                            u8000 3352                              u8100 2F10  
                            u8110 2F32                              u9000 2AE4  
                            u8025 3A7C                              _PIR1 000F9E  
                            u8026 3A7E                              _PIR2 000FA1  
                            _PIR3 000FA4                              u9100 16CC  
                            u8230 2760                              u9030 1C40  
                            u9040 1C54               __end_of_GetPortTRIS 2596  
                            u8090 1E9A                              u8410 32DE  
                            u9050 1C8E                              u8350 346A  
                            u8190 26EE                              u9320 2C34  
                            u8505 03C6                              u8290 2EC6  
                            u8355 3466                              u8515 03D8  
                            u8380 17CE                              u8365 1728  
                            u8525 03EA                              u7750 2946  
                            u8535 0402                              u7824 30A4  
                            u8464 28FC                              u9600 1450  
                            u7825 30A0                              u8465 28F8  
                            u8545 04FC                              u7770 2990  
                            u7834 30CC                              u7835 30C8  
                            u8555 0550                              u7940 2B4A  
                            u7757 293C                              u8565 057E  
                            u8590 373C                              u9390 0E3E  
                            u7854 24D2                              u7790 2D1A  
                            u8830 32A8                              u8910 1178  
                            u7950 2B4E                              u7855 24CE  
                            u7775 298C                              u8575 05AC  
                            u7864 24FA                              u7880 34DE  
                            u8808 1BE0                              u7865 24F6  
                            u7970 300A                              u8595 3738  
                            _SPI1 0166                              u8748 2012  
                            u9580 13DA                              _SPI2 0171  
                            u7885 34DA                              u8950 2212  
                            u8870 308A                              u8758 1ADA  
                            u8759 1AEE                              u8960 221A  
                            _TMR0 000FD6                              u8995 2AB4  
                            _gISR 0060                Event_DIPSwitch@Bar 00CD  
                   ??_Byte_GetBit 00B6                SPI_MaxSpeed@pInput 00C2  
                   ?_Byte_SetByte 00B3                     ?_Byte_SetPair 00BE  
                 __end_of_SPI_DCS 371E                              _main 198C  
                            _mode 0075                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00BE                              _itos 1E04  
                            _test 0116                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 00B3                              btemp 0051  
                            _zero 004E                     ??_Byte_SetBit 00B7  
              __size_of_LCD_Reset 0050                              prodh 000FF4  
                            prodl 000FF3                              start 14AA  
              __size_of_LCD_Write 0020                     __CFG_IESO$OFF 000000  
                 ?_SPI_DisableISR 00B3               HMI_SetButton@pValue 00B9  
                      _Cliff_Left 0083                     Console_Init@x 00B5  
                   Console_Init@y 00B6                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FEB7                   __end_of_InitADC 3336  
            Set_Rotation@rotation 00B9                     ??_Init_Timer0 00B3  
          __size_of_HMI_SetButton 007A            __size_of_HMI_SetNumber 0026  
                     ?_ISR_Enable 0001      __size_of_Console_ClearCursor 0030  
                __end_of_LCD_Fill 32AC                  __end_of_LCD_Init 1708  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 2F92                      _BAUDCON1bits 000F7E  
                   ??_Button_Init 00EE           GetPortProperties@pInput 00B5  
                   ??_Button_Poll 00D1                  __end_of_HMI_Init 1308  
                           l12044 176C                             l13102 2BE8  
                           l13130 0CFA                             l12082 32AE  
                           l12084 32C0                             l13172 12E4  
                           l13412 13A8                             l11806 1E9A  
                           l13096 2BDC                             l13184 3568  
                           l12712 3290                             l11674 2B12  
                           l11668 2B06                             l12736 3072  
                           l12592 3AA0                             l12834 21B0  
                           l11858 22B0                             l12828 21A4  
                           l11980 2EA2                             l12940 163A  
                           l12950 16CC                             l12864 2A9E  
                           l12792 10DA                             l11978 2E90  
                           l11986 2EC6                  __end_of_HMI_Poll 2DD0  
                           _I2C1T 003C                             _I2C2T 01B8  
                           ?_main 0001                   __end_of___awdiv 272C  
                           _ADRES 000FC3                             ?_itos 00BF  
                           STR_12 FF93                             STR_13 FF62  
                           STR_30 FFFB                             STR_14 FFCD  
                           STR_31 FFF0                             STR_32 FF11  
                           STR_17 FFBA                             STR_33 FF3B  
                           STR_35 FFF6                             STR_29 FF7E  
                 _Event_DIPSwitch 37C2                   __end_of___lldiv 27B0  
         __size_of_HMI_LeftSwitch 0014                   ___awdiv@divisor 00B5  
                           u10518 35DA                             u10519 35EE  
                           u10568 19DE                             u10569 19F2  
                           u10578 19FE                             u10579 1A12  
                           u10588 1A1E                             u10589 1A32  
                           u10598 1A3E                             u10599 1A52  
                           _INDEX 0036                   __end_of___lwdiv 303A  
                           _MASKS FCC7                   __end_of___lwmod 337A  
                           i2l430 20EC                             i2l432 2112  
                           i2l433 213C                             i2l427 2162  
                           i2l732 2A60                             i2l733 2A5A  
                           i2l832 33FC                             i2l781 36B2  
                 ___awdiv@counter 00B7                             _PORTA 000F80  
=======
ABS                  0      0     2F0      12        0.0%
DATA                 0      0     41C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 14 12:31:25 2018

                   i2_Timer0_Stop 60A8                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 0038                      i2_Motor_Step 3BFA  
                               _A 01F5                                 l8 4066  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 01F6                                 _i 0146  
                               _j 0145                                 _l 004F  
                               _u 0144                                 _w 0050  
                               _x 0120                      ___fldiv@sign 006C  
               ??_Reset_variables 0060                                l11 34DE  
                              l12 34CC                                l90 31A2  
                              l87 311C               __size_of_ADCAverage 030E  
                              l89 317C                  ??_UpdateDistance 0063  
                    ___awdiv@sign 0065               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 5F4C                LCD_DrawField@pSize 0078  
              LCD_DrawField@count 007E                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 603A                               l120 4572  
                             l121 4588                               l122 459E  
                             l220 51D4                               l117 45B4  
                             l221 51A4                               l118 455E  
                             l230 561A                               l222 51E4  
                             l223 51BC                       ?_LED_Toggle 0001  
                             l234 57CC                               l235 57A4  
                             l227 5632                               l403 2ADA  
                             l412 27FA                               l228 5602  
                             l340 4788                               l404 2A7A  
                             l421 2796                               l413 26AC  
                             l237 57B8                               l341 4792  
                             l405 2B0A                     ??_Console_Tab 0068  
                             l414 2816                               l430 3F96  
                             l350 4856                               l342 479C  
                             l510 2318                               l406 2A92  
                             l183 49FA                               l415 26CE  
                             l351 4804                               l343 47A6  
                             l511 240E                               l407 2AAA  
                             l184 49DA                               l600 079A  
                             l432 3FBC                               l344 47B0  
                             l512 2338                               l408 2AC2  
                             l417 2732                               l601 08EC  
                             l433 3FE8                               l353 4810  
                             l337 47CE                               l345 47BA  
                             l610 0964                               l602 07C6  
                             l354 481A                               l346 47C4  
                             l338 477C                               l370 4728  
                             l611 09AA                               l603 08FC  
                             l427 4010                               l355 4824  
                             l363 4746                               l371 4732  
                             l531 19CE                       ?_HMI_GetBar 0001  
                             l612 09F0                               l604 0856  
                             l356 482E                               l372 473C  
                             l364 46F4                               l532 19F0  
                             l516 2378                               l357 4838  
                             l509 23F4                               l614 0AC2  
                             l358 4842                               l366 4700  
                             l526 1A10                               l615 0ABA  
                             l607 0A36                               l359 484C  
                             l367 470A                               l519 23B8  
                             l616 0AD4                               l608 091E  
                             l368 4714                               l528 1A2E  
                             l393 5430                               l617 0ABE  
                             l609 0A54                               l369 471E  
                             l529 19B0                               l483 1FD8  
                             l900 1AEA                               l732 4B52  
                             l476 20A0                               l901 1AEE  
                             l733 4B4C                               l389 5088  
                             l477 1F30                               l397 579A  
                             l910 1B12                               l902 1AF2  
                             l726 468A                               l478 20BC  
                             l486 203C                               l654 5C44  
                             l911 1B16                               l903 1AF6  
                             l727 4684                               l479 1F74  
                             l655 5C3C                               l912 1B1A  
                             l904 1AFA                               l824 50EC  
                             l832 56D6                               l681 4DD0  
                             l913 1B1E                               l905 1AFE  
                             l921 52DA                               l673 5B16  
                             l657 5C40                               l914 1B22  
                             l906 1B02                               l922 52AA  
                             l930 3EF4                               l915 1B26  
                             l907 1B06                               l819 4FC8  
                             l684 4DE6                               l916 1B2A  
                             l908 1B0A                               l860 1A4A  
                             l853 1B32                               l917 1B2E  
                             l909 1B0E                               l861 1A4E  
                             l781 5AB0                               l597 07A4  
                             l678 4E0C                               l686 4DF6  
                             l870 1A72                               l862 1A52  
                             l854 1A36                               l598 0790  
                             l679 4DC0                               l871 1A76  
                             l863 1A56                               l599 07B4  
                             l880 1A9A                               l872 1A7A  
                             l864 1A5A                               l856 1A3A  
                             l928 3F66                               l776 596E  
                             l881 1A9E                               l873 1A7E  
                             l865 1A5E                               l857 1A3E  
                             l929 3F3E                               l890 1AC2  
                             l882 1AA2                               l874 1A82  
                             l866 1A62                               l858 1A42  
                             l891 1AC6                               l883 1AA6  
                             l875 1A86                               l867 1A66  
                             l859 1A46                               l892 1ACA  
                             l884 1AAA                               l876 1A8A  
                             l868 1A6A                               l893 1ACE  
                             l885 1AAE                               l877 1A8E  
                             l869 1A6E                               l894 1AD2  
                             l886 1AB2                               l878 1A92  
                             l990 4D68                               l895 1AD6  
                             l887 1AB6                               l879 1A96  
                             l983 4A6A                               l896 1ADA  
                             l888 1ABA                               l992 4D74  
                             l984 4A10                               l976 4E40  
                             l897 1ADE                               l889 1ABE  
                             l985 4A68                               l898 1AE2  
                             l978 4E4C                               l899 1AE6  
                             l997 5448                               l999 5466  
                             _RA2 007C02                               _RA3 007C03  
                             _RD5 007C1D                               _RD7 007C1F  
                             _PR2 000FCB                               _exp 1CB4  
                             _log 2B22                               _mod 0132  
                             _val 0138                               _pow 213A  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 0079  
                    _Word_GetPair 5A90                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 0067  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                      _TXSTA1bits 000FAD                      Console_Tab@c 006F  
                    Console_Tab@i 006E               LCD_DrawField@pField 0072  
                    Console_Tab@t 006D                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 57DE  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 5644           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 4188                      ___fltol@exp1 00A8  
                    _Word_SetPair 594A                              l1000 547E  
                            l1010 44EE                              l1004 521C  
                   ?_Byte_GetZone 0060                              l1005 5242  
                            l1200 4382                              l1040 2F5E  
                            l1201 43CA                              l1009 44FA  
                            l1041 2F64                              l1202 43DE  
                            l1042 2F6A                              l1043 2F70  
                            l1204 4402                              l1036 306C  
                            l1044 2F76                              l1205 43EE  
                            l1045 2F7C                              l1037 2F58  
                            l1062 262E                              l1207 4410  
                            l1063 265C                              l1047 2FFA  
                            l1056 2504                              l1057 267C  
                            l1153 29AC                              l1146 4D00  
                            l1082 428C                              l1058 250A  
                            l2131 127C                              l1059 252E  
                            l2124 58B6                              l1084 4294  
                            l2300 2D7A                              l2220 3AB4  
                            l1077 4260                              l2301 2DD4  
                            l2221 3A82                              l1158 59F0  
                            l2302 2D80                              l2214 4BE4  
                            l2118 5500                              l2222 3AB0  
                            l2127 58C6                              l1079 426C  
                            l2215 4B80                              l2119 54E0  
                            l2207 3788                              l2208 3756  
                            l2209 3784                              l2241 00F0  
                            l2242 00FE                              l2227 4174  
                            l2251 02EE                              l2243 010C  
                            l2228 4134                              l2260 047E  
                            l2244 011A                              l2261 05BE  
                            l2253 043A                              l1630 3954  
                            l2270 076A                              l2254 0414  
                            l2246 01DC                              l2183 585A  
                            l1631 39A4                              l2239 0046  
                            l2512 5B72                              l1632 398E  
                            l2264 0604                              l2248 02C0  
                            l2505 35D0                              l2257 077A  
                            l2265 0656                              l2506 3604  
                            l1730 58EC                              l2266 069C  
                            l2507 3642                              l1627 39E4  
                            l2267 06EE                              l2508 3680  
                            l1724 5990                              l1732 590C  
                            l1628 39DA                              l2268 0718  
                            l2293 2D08                              l1629 396C  
                            l2710 5306                              l2294 2CBA  
                            l2286 2CA2                              l1726 59B8  
                            l2543 3E8E                              l2535 3DFE  
                            l2295 2CCE                              l2287 2CB2  
                            l1735 5E78                              l2720 572A  
                            l2480 48EA                              l2544 3E82  
                            l2296 2D32                              l2288 2CD6  
                            l2713 532E                              l2481 48F4  
                            l2473 489C                              l2537 3E6A  
                            l2714 5338                              l2482 4902  
                            l2474 48AC                              l2810 1542  
                            l2546 3EAA                              l2538 3E5A  
                            l2723 574A                              l2811 153E  
                            l1827 324E                              l2724 5754  
                            l2476 48CA                              l2820 165C  
                            l2740 2180                              l2660 4970  
                            l1828 326A                              l2709 530E  
                            l2477 48C2                              l2813 1588  
                            l2901 1D1C                              l2661 497E  
                            l2830 16CA                              l2806 1502  
                            l2750 0EB2                              l2910 381E  
                            l2902 1D64                              l2742 21B2  
                            l2719 5732                              l2823 1692  
                            l2815 15B0                              l2807 14FE  
                            l2911 380C                              l2903 1D9A  
                            l2743 2254                              l2832 170E  
                            l2824 1674                              l2816 165E  
                            l2840 0B64                              l2904 1F16  
                            l2744 222A                              l2656 493C  
                            l2833 1732                              l2817 160E  
                            l2761 0FD6                              l2841 0B60  
                            l2913 383C                              l2905 1EE0  
                            l2745 22FE                              l2657 4930  
                            l1873 5A88                              l2834 175C  
                            l2818 1636                              l2762 0FB4  
                            l2754 0EFE                              l2842 0B74  
                            l2914 38D6                              l2835 1768  
                            l2771 101E                              l2763 0FC2  
                            l2755 0EFA                              l2851 0D92  
                            l2923 3D1A                              l2739 2194  
                            l2836 176A                              l2780 10F0  
                            l2772 1022                              l2764 0FC6  
                            l2860 0E0E                              l2852 0D74  
                            l2844 0BA4                              l2757 0F5A  
                            l2749 0EB6                              l2861 0E2C  
                            l2845 0BA0                              l2925 3D68  
                            l2941 2B46                              l2782 1106  
                            l2758 0F1E                              l2846 0BB4  
                            l2950 3B46                              l2870 2E6E  
                            l2775 10BC                              l2767 1034  
                            l2863 0E50                              l2847 0BD2  
                            l2919 4308                              l2927 3DA2  
                            l2943 2B70                              l2792 1176  
                            l2784 1110                              l2768 0FFA  
                            l2864 0E6E                              l2872 2E80  
                            l2928 3D92                              l2777 10CC  
                            l2873 2E74                              l2858 0DCA  
                            l2883 2F0E                              l2875 2EBE  
                            l2796 119C                              l2884 2F40  
                            l2876 2EA6                              l2868 2E40  
                            l2797 11A4                              l2789 1130  
                            l2949 3BDE                              l2869 2E50  
                            l2798 11A6                              l2878 2EF0  
                            l2879 2EE4                              l2899 1CD4  
                            ?_exp 00B7                              ?_log 00AF  
                  ??_Console_Init 0060                              _ADON 007E10  
           Port_SetPinType@pInput 0086                              ?_pow 00C2  
                            STR_1 FFFC                              STR_2 FF7D  
                            STR_3 FFB6                              STR_4 FF7D  
                            STR_5 FF7D                              STR_6 FF7D  
                            STR_7 FF7D                              STR_8 FF7D  
                            STR_9 FF7D                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 0018  
                            _LATG 000F8F               __end_of_GetPortPORT 4886  
                            _PIR1 000F9E                              _PIR2 000FA1  
                            _PIR3 000FA4               __end_of_GetPortTRIS 4776  
                            u9410 4B26                              u9430 4B70  
                            u9417 4B1C                              u9514 46B2  
                            u9450 4F76                              u9515 46AE  
                            u9435 4B6C                              u9524 46DA  
                            u9525 46D6                              u9630 593C  
                            u9810 0FDE                              u9570 4DA4  
                            u9650 5218                              u9635 5938  
                            _SPI1 02C8                              u9580 4DA8  
                            u9660 523A                              u9484 5358  
                            _SPI2 0182                              u9485 5354  
                            u9494 5380                              u9495 537C  
                            u9760 0F8A                              u9770 0F9A  
                            u9595 5FE4                              u9940 1114  
                            u9780 0F9C                              u9596 5FE6  
                            _TMR0 000FD6                              u9970 112C  
                            _STP1 608E                              _STP2 6086  
                            _STP3 607E                              _STP4 6076  
                            _gISR 0108                Event_DIPSwitch@Bar 007A  
                   ??_Byte_GetBit 0063                              _Turn 5146  
              SPI_MaxSpeed@pInput 006F                     ?_Byte_SetByte 0060  
                   ?_Byte_SetPair 006B                   __end_of_SPI_DCS 5B24  
                            _main 0000                              _mode 0031  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 3EBC                              _test 011C  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     ?_Byte_SetZone 0060  
                            btemp 0051                              _zero 004E  
                            exp@x 00B7                              log@x 00AF  
                   ??_Byte_SetBit 0064                              pow@x 00C2  
                            pow@y 00C6                __size_of_LCD_Reset 0050  
                            prodh 000FF4                              prodl 000FF3  
                            start 14AA                __size_of_LCD_Write 0020  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
                 ?_SPI_DisableISR 0060                __size_of_LEDToggle 003E  
             HMI_SetButton@pValue 0066                        _Cliff_Left 013E  
                   Console_Init@x 0062                     Console_Init@y 0063  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FE23  
                 __end_of_InitADC 551C              Set_Rotation@rotation 0066  
       __size_of_Get_Sensor_State 0018                     ??_Init_Timer0 0060  
          __size_of_HMI_SetButton 007A            __size_of_HMI_SetNumber 0026  
                     ?_ISR_Enable 0001                             ??_exp 00BB  
                           ??_log 00B3                             ??_pow 00CA  
    __size_of_Console_ClearCursor 0030                  __end_of_LCD_Fill 568C  
                __end_of_LCD_Init 31EA                             ?_STP1 0001  
                           ?_STP2 0001                             ?_STP3 0001  
                           ?_STP4 0001                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 51F2  
                    _BAUDCON1bits 000F7E                        _Coil_Setup 5FC4  
                   ??_Button_Init 00A8           GetPortProperties@pInput 0062  
                   ??_Button_Poll 007E                  __end_of_HMI_Init 29AE  
                           l14014 4CF8                             l12362 36B8  
                           l14122 1EE0                             l14220 527E  
                           l15020 2D36                             l12470 4D60  
                           l13522 4402                             l13460 3F52  
                           l12476 4D6C                             l15060 311C  
                           l15222 4E44                             l15070 31AE  
                           ?_Turn 0061                             l15216 4E38  
                           l14442 4258                             l13810 50EC  
                           l13812 50FE                             l15244 298A  
                           l13646 175C                             l13902 324E  
                           l14632 6016                             l14448 4264  
                           l14800 2A72                             l13818 5122  
                           l15436 583A                  __end_of_HMI_Poll 502C  
                           l13950 56D6                             l14496 59C6  
                           l13952 56E8                             l14842 2526  
                           l14762 5670                             _I2C1T 0040  
                           _I2C2T 01BF                     ___fltol@sign1 00A7  
                 __end_of___fladd 11C2                             ?_main 0001  
                 __end_of___fldiv 1786                   __end_of___awdiv 490C  
                 __end_of___flneg 5B84                             _ADRES 000FC3  
                           ?_itos 006C                             STR_10 FF7D  
                           STR_11 FFFC                             STR_20 FF7D  
                           STR_12 FF69                             STR_21 FF7D  
                           STR_13 FF0B                             STR_22 FF7D  
                           STR_30 FFFC                             STR_14 FFA3  
                           STR_23 FF7D                             STR_15 FFFC  
                           STR_31 FFD6                             STR_16 FF7D  
                           STR_40 FFFC                             STR_24 FFFC  
                           STR_32 FEB7                             STR_25 FF69  
                           STR_17 FF90                             STR_41 FF3E  
                           STR_33 FE7D                             STR_42 FF7D  
                           STR_18 FF7D                             STR_50 FFFC  
                           STR_26 FF0B                             STR_34 FE9B  
                           STR_43 FF7D                             STR_19 FF7D  
                           STR_27 FFA3                             STR_51 FF27  
                           STR_35 FEEF                             STR_60 FF7D  
                           STR_44 FF7D                             STR_36 FF7D  
                           STR_28 FFFC                             STR_52 FFF1  
                           STR_53 FF7D                             STR_45 FF7D  
                           STR_37 FF7D                             STR_61 FFFC  
                           STR_29 FF54                             STR_70 FF7D  
                           STR_54 FF7D                             STR_46 FF7D  
                           STR_38 FF7D                             STR_62 FED3  
                           STR_71 FF7D                             STR_55 FF7D  
                           STR_47 FF7D                             STR_39 FF7D  
                           STR_63 FFC6                             STR_64 FF7D  
                           STR_56 FF7D                             STR_48 FF7D  
                           STR_72 FFE5                             STR_65 FF7D  
                           STR_57 FF7D                             STR_49 FF7D  
                           STR_66 FF7D                             STR_58 FF7D  
                           STR_67 FF7D                             STR_59 FF7D  
                           STR_68 FF7D                             STR_69 FF7D  
                 __end_of___flmul 0E84                   __end_of___flsub 56D4  
                 __end_of___fltol 3EBC                   _Event_DIPSwitch 5CDA  
                 __end_of___lldiv 4990                             u10020 1182  
                           u10130 0BC0                             u10220 0E1C  
                           u10140 0D36                             u11020 382A  
                           u10230 0E3A                             u11200 588C  
                           u10145 0D2C                             u10410 3E94  
                           u11060 3D3A                             u11140 5122  
                           u12020 2B10                             u11205 5888  
                           u10190 0DC6                             u11230 32B0  
                           u11215 320A                             u10440 5312  
                           u10280 48CE                             u10600 4330  
                           u10370 3E1C                             u11250 5C2C  
                           u12210 2D68                             u12130 3932  
                           u11068 3D3E                             u11420 1D6C  
         __size_of_HMI_LeftSwitch 0014                             u12140 3946  
                 ___awdiv@divisor 0062                             u11350 4D3E  
                           u10470 5736                             u10550 2EFA  
                           u11430 1D6E                             u12230 2DDE  
                           u11270 5706                             u12150 3980  
                           u10375 3E12                             u11255 5C28  
                           u10608 4334                             u12080 266A  
                           u11345 4D0E                             u10650 3F52  
                           u10900 16C6                             u11364 4ADC  
                           u11365 4AD8                             u11605 1932  
                           u12510 4E90                             u11615 1960  
                           u11625 198E                             u10930 171C  
                           u11810 220C                             u11490 5296  
                           u12290 31AE                             u11555 17A8  
                           u10940 1740                             u11565 17BA  
                           u11750 58AC                             u11670 42C6  
                           u11575 17CC                             u11680 42CE  
                           u14400 059A                             u11585 17E4  
                           u14218 006A                             u11595 18DE  
                           u14219 007E                             u11908 40CA  
                           u10980 4940                             u14500 0772  
                           u14228 008A                             u14229 009E  
                           u11918 347E                             u14238 00AA  
                           u11919 3492                             u14239 00BE  
                           u14168 5A38                             u14248 00CA  
                           u14169 5A4C                             u14249 00DE  
                           u14380 0474                             u11990 5688  
                           u11968 3584                             u14468 0720  
                           u14469 0734                             u14488 0742  
                           u14489 0756                             _INDEX 003B  
                 __end_of___lwdiv 5342                             _LEDOn 5DFC  
                           _MASKS FC33                   __end_of___lwmod 575E  
                           i2l430 41A0                             i2l432 41C6  
                           i2l433 41F0                             i2l427 4216  
                           i2l732 4CBA                             i2l733 4CB4  
                           i2l832 57E0                             i2l781 5BA2  
                 ___awdiv@counter 0064                             _PORTA 000F80  
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0014                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
<<<<<<< HEAD
                           _T_VAR 0124                  ??i2_Byte_GetPair 000D  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 00C9  
                  __CFG_FCMEN$OFF 000000                             _PortA 01A4  
                           _PortB 019A                             _PortC 00A5  
                           _PortD 009B                             _PortE 0091  
                           _PortF 01AE                             _PortG 0190  
         __end_of_Port_SetPinType 1006                   _ADC_Initialised 0038  
                  ??_Byte_GetPair 00BF                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00C8                   __end_of_dpowers FCC7  
                  ??_Byte_GetZone 00B8                             _count 011A  
                  Button_Poll@Pin 00D6                             _errno 0114  
        __size_of_Set_Addr_Window 009A               __end_of_Console_Tab 23EE  
                __end_of_MXK_Init 198C                             _stack 0264  
            i2Byte_GetPair@pInput 000A                             _putch 3A8E  
                           _total 002B                  __end_of_SPI_Init 03A4  
                __end_of_SPI_Send 2BCE                        _BumpSensor 0087  
           __end_ofi2_MXK_Release 3B48                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 2FE6  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00B6  
                  ??_Byte_SetPair 00C2                    ??_Byte_SetQuad 00C2  
                           plusw2 000FDB                    ??_Byte_SetZone 00B9  
                           status 000FD8                             wtemp6 0052  
                 _Configure_GPIOs 2E30              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 3908  
                     _Cliff_FLeft 0085               __size_of_LED_Toggle 0040  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 0060  
                     _Cliff_Right 0084               __size_of_HMI_SetBar 000A  
                 __initialization 2026               __size_of_HMI_Render 0036  
             __end_of_Byte_GetBit 374A                     _Current_Dist1 0088  
                   _Current_Dist2 0033                      __end_of_main 1AC8  
                    __end_of_itos 1EC2              HMI_SetButton@reindex 00B5  
                    SPI_Send9@dat 0081               __end_of_Byte_SetBit 30E0  
                __end_of_InitList FC9D       __size_of_Port_CheckQuadType 0050  
                __end_of_Mode_Set 3A80       __size_of_Port_CheckPortType 0040  
                     HMI_Render@a 00BB                            ??_main 00F3  
                          ??_itos 00C3               __end_of_Init_Timer0 399C  
        __size_of_FunctInitButton 0076           _Console_MakeField$10974 00C1  
                   __activetblptr 000003                 Port_SetPin@pInput 00C2  
               __end_of_LCD_Reset 3180                 Port_SetPin@pValue 00C5  
                       ??_LED_Set 00C8                 _MXK_InitDIPSwitch 399C  
               GetPortPORT@pInput 00B5            Port_CheckPairType@Pin1 00DD  
          Port_CheckPairType@Pin2 00DE                 __end_of_LCD_Write 38B2  
                     _GetPortPORT 261E                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 250E                   ??_LCD_DrawField 00CF  
      __end_of_PortProperty_Valid 2D70                  __end_of_Port_Set 064E  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0054  
             __end_of_Button_Init 2026               __end_of_Button_Poll 1BF6  
               Word_GetPair@pPair 00C1           LCD_FillRectangle@pPoint 00BE  
              ?_MXK_InitDIPSwitch 0001                     _HMI_SetButton 28AA  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                       ??_SPI_DCS 00B5                        _Low_Sensor 00F7  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                   _HMI_SetNumber 37E8            Port_SetQuadType@Output 00ED  
                          _ANCON0 000FC1                  ___awdiv@dividend 00B3  
                          ?_putch 0001                  ??_Console_Render 00D6  
                   ToSegment@pCHR 00B3                            _GODONE 007E11  
                _Console_FormFeed 2AF8            Port_SetQuadType@pInput 00E9  
                          i2l1630 1D6A                            i2l1631 1DB6  
                          i2l1632 1DA2                            i2l1730 35A6  
                          i2l1627 1DF2                            i2l1732 35C6  
                          i2l1628 1DE8                            i2l1629 1D80  
                          i2l1590 145E                    __CFG_WDTEN$OFF 000000  
             __size_of_ISR_Enable 000A                            i2l7806 33FC  
                          i2l7808 340C                            _RCREG1 000FAF  
                          _RCSTA1 000FAC            __end_of_LCD_Word_Write 3922  
                  _Timer0_Restart 3AEE                            _SPBRG1 000FB0  
             ??_MXK_InitDIPSwitch 00EE                            _TRISA2 007C92  
                          _TRISA3 007C93                            _TRISD5 007CAD  
                          _TRISD7 007CAF                            _TXREG1 000FAE  
                       ??_InitADC 00B3                    i2_MXK_SwitchTo 3594  
                          _TXSTA1 000FAD                   Byte_GetBit@pBit 00B5  
                      _Reset_High 396C                Console_Render@temp 00D8  
                  ??_HMI_UpSwitch 00B9                    OutSeg@pSegment 00B6  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00CA  
                __end_of_delay_ms 2EEA                      LED_Init@pLED 00E0  
                __end_of_delay_us 32F2                     ??_Timer2_Init 00C4  
                   ??_Timer0_Stop 00B3                        _Timer0_ISR 379A  
        __size_of_Console_NewLine 007C                 Timer2_Init@DIVIDE 00CD  
                  __CFG_XINST$OFF 000000                            _OutSeg 2A8A  
        __size_of_HMI_InitButtons 0006                        _Motor_Step 1BF6  
         __end_of_Event_DIPSwitch 37E8                            ___wmul 3772  
                 ??_HMI_DIPSwitch 00B9                         ??___awdiv 00B7  
                  __CFG_STVREN$ON 000000                        _Robot_Init 39CC  
                          _change 00FF                            _lMotor 007B  
                       ??___lldiv 00BB                            _lQueue 0063  
                      _TestButton 0186                        _Robot_Stop 3832  
                       ??___lwdiv 00B7                __size_of_ToSegment 0284  
                       ??___lwmod 00BE          __end_of_Port_SetQuadType 0AE4  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0031  
            __end_of_Console_Init 2C38                 GetPortTRIS@pInput 00B5  
              __size_of_Reset_Low 0018                            clear_0 208E  
                          clear_1 20A0                            clear_2 20AC  
                          clear_3 20B8                            clear_4 20C4  
                ___awdiv@quotient 00B9                        Port_Init@i 01DC  
                          _x_grid 00FB                 __end_of_MXK_Queue 3AC6  
                          _y_grid 00F9        __end_ofHMI_SetButton@F7213 FCD4  
                          _printf 1308         __end_of_MXK_InitDIPSwitch 39B4  
                          main@up 01E5                    HMI_SetButton@v 00BA  
          HMI_SetSegments@pString 00B4                       _Console_Tab 235A  
             LCD_Word_Write@value 00B8                      __pdataCOMRAM 0043  
              __size_of_Port_Init 0186                     ??_Port_GetPin 00B6  
        Port_CheckPortType@Output 00EC                   ??i2_Port_SetPin 0014  
                    __mediumconst FBEA       __end_ofTimer2_Init@PRESCALE FCD7  
        Port_CheckPortType@pDrive 00EB                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 00E9                     ??_Port_SetPin 00C6  
                       ??_reverse 00B7             Console_MakeField@Fill 02AA  
                ?_Port_SetPinType 00D9                            putch@c 00C7  
                  ?_HMI_SetNumber 00C9                    i2_Word_GetPair 3694  
         __end_of_Configure_GPIOs 2E8E                  ??_MXK_TestButton 00B9  
          __end_of_Timer0_Restart 3AFA                     Set_Rotation@m 00B8  
                    ?_MXK_Release 0001                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 35CA                  __end_ofexp@coeff FEDF  
                    i2delay_us@us 0001                  __end_oflog@coeff FF03  
                 ?_LCD_Word_Write 00B8                        __accesstop 0060  
         __end_of__initialization 20CA                         ?_LCD_Fill 00BC  
                       ?_LCD_Init 0001                      _Cliff_FRight 0086  
                   SPI_Init@pMode 00E5                       _Byte_GetBit 371E  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 3B06  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00BB  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
                     _Byte_SetBit 308E                     __end_of_MASKS FCD0  
                  _PortA_Property FF0F                       ?_Event_NULL 0001  
                       LCD_Fill@i 00BE                         LCD_Fill@j 00BF  
                       LCD_Init@i 00EA                    __pcstackCOMRAM 0001  
                  _PortB_Property FF0D               __size_ofi2_delay_us 0040  
                    __pidataBANK0 3AD4                      __pidataBANK1 3AE1  
                     _Init_Timer0 3984               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 3908                   Console_Render@x 00DD  
                 Console_Render@y 00DE               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FC9D  
            __end_of_Byte_GetZone 299E                    _PortC_Property FF0B  
                   __end_of_putch 3A9C                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 184E               __end_of_Timer0_Stop 3B30  
                       ?_SPI_Init 00E0                         ?_SPI_Send 00B3  
                     _Button_Init 1F76                 Port_SetType@pType 00EF  
                     _Button_Poll 1AC8              __end_of_Byte_SetByte 3AB8  
            __end_of_Byte_SetPair 3872                    _HMI_LeftSwitch 3A46  
                  _PortD_Property FF09              __end_of_Byte_SetQuad 3892  
                    ??_LED_Toggle 00CB                      ??_HMI_GetBar 00B3  
            __end_of_Byte_SetZone 250E                    _HMI_DownSwitch 3A0A  
                   SPI_Send@pData 00B5             __end_of_MXK_DIPSwitch 39F6  
                    ??_HMI_SetBar 00B3                      ??_HMI_Render 00BB  
                  _PortE_Property FF07          __size_of_HMI_SetSegments 009C  
          __end_ofi2_Word_GetPair 36C4                    _PortF_Property FF05  
         Port_CheckQuadType@Pair1 00E6           Port_CheckQuadType@Pair2 00E7  
        MXK_BlockSwitchTo@pModule 00BA                 ??_FunctInitButton 00EE  
               _Console_Backspace 30E0                   ?_Timer0_Restart 0001  
                         ??_putch 00C7          __size_of_HMI_RightSwitch 0014  
             _Console_ClearCursor 3664                 __end_of_ToSegment 08D2  
                  _PortG_Property FF03                        __pbssBANK0 0060  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 34EC           Port_CheckQuadType@pQuad 00E4  
                 reverse@iterator 00B8                  ??_SPI_DisableISR 00B5  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 396C         __size_of_Event_TestButton 0034  
         __size_of_Port_TogglePin 002E                        ??_LCD_Fill 00BE  
                      ??_LCD_Init 00E8               __end_of_Port_SetPin 1F76  
          __end_of_PortA_Property FF11                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00B3                        ??_LED_Init 00E0  
              Byte_SetByte@pValue 00B5                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                        ??_HMI_Init 00EE  
                      ??_HMI_Poll 00D7                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 00E0            __end_of_PortB_Property FF0F  
              __size_of_eusartRec 0008                 __end_of_Port_Init 118C  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 00DB  
              __end_of_LED_Toggle 33FA                __end_of_HMI_GetBar 3B36  
        LCD_FillRectangle@pColour 00BC               ??_Console_Backspace 00B5  
               Set_Addr_Window@xe 00B9                 Set_Addr_Window@ye 00BA  
               Set_Addr_Window@xs 00BB                 Set_Addr_Window@ys 00B8  
                         ?_OutSeg 00B6                Byte_SetPair@pInput 00BE  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00C1  
              __end_of_HMI_SetBar 3B1A            __end_of_PortC_Property FF0D  
              Word_GetPair@pInput 00BF                __end_of_HMI_Render 3594  
                  ??_Set_Rotation 00B8                         ?_Port_Set 00C2  
                         ?___wmul 00B3                       ?_Robot_Init 0001  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 00B8  
                    ??_ISR_Enable 00B3                       ?_Robot_Stop 0001  
    __size_of_Console_ResetCursor 001C              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 3A5A            __end_of_PortD_Property FF0B  
                         _ADC_AN0 01CE                           _ADC_AN1 01C9  
                         _ADC_AN2 01C4                           _ADC_AN3 01BF  
                      ??_MXK_Init 00F3                 Port_GetPin@pInput 00B3  
               _Console_MakeField 217E                 ??_Console_NewLine 00B3  
          __end_of_HMI_DownSwitch 3A1E                        ??_SPI_Init 00E6  
          Event_TestButton@pState 00CC                        ??_SPI_Send 00B6  
                         ?_printf 00C8                 ??_HMI_InitButtons 00B3  
      __size_of_MXK_InitDIPSwitch 0018            __end_of_PortE_Property FF09  
             Console_Render@F6956 01E8                ?_Console_MakeField 00B8  
                         _COUNTER 002F                   ??_HMI_SetButton 00B3  
            __end_of_HMI_UpSwitch 3A32                           _LED_Set 321C  
         _Console_IncrementCursor 2EEA            __end_of_PortF_Property FF07  
                     _gBackcolour 007F                   ??_HMI_SetNumber 00CB  
                       _I2C1_Done 0111                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 010E                         _I2C1_More 010B  
                       _I2C2_More 0108                         ?_delay_ms 00B3  
       __end_of_Console_Backspace 3130                         ?_delay_us 00B3  
             __size_of_Event_NULL 0002        __end_of_MXK_InitTestButton 39CC  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FF05  
             ??_Console_MakeField 00BA                           _SPI_DCS 36F2  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
        ?_InitSerialCommunication 0001                eusartSend@sendChar 00B3  
            i2Byte_GetZone@Offset 0008                __end_of_ISR_Enable 3B10  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
               Event_TestButton@j 0089                        ??_Mode_Set 00B3  
                  ??_Timer2_Clear 00B3                           _Font5x7 FCD7  
            i2Byte_GetZone@pChunk 0004                           _InitADC 32F2  
            i2Byte_GetZone@pInput 0001              SPI_DisableISR@pInput 00B3  
                   ?_Port_GetQuad 00B3                   Byte_SetBit@pBit 00B5  
            Port_TogglePin@pInput 00C7             __end_ofi2_Byte_SetBit 321C  
                         __Hparam 0000                 Port_GetQuad@pQuad 00B5  
                     _Timer2_Init 1708                           __Lparam 0000  
                     _Timer0_Stop 3B2A             __size_of_Console_Init 006A  
                         OutSeg@a 0039   __end_ofPortProperty_Valid@F6830 FCBD  
                   LCD_Write@mode 00B6                   __size_of_OutSeg 006E  
                     _Motor_Count 0073                        ??_Port_Set 00C5  
       __end_of_Console_MakeField 2224                 _Console_PrintChar 1470  
                   ?_Port_SetType 00ED                           _gCursor 0043  
                         ___awdiv 26A6             ??_Console_ClearCursor 00B3  
                         _lBuffer 02F0                           ___lldiv 272C  
                 __size_of___wmul 0028                           ___lwdiv 2FE6  
                         ___lwmod 3336                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 2B64                ?_Console_PrintChar 0001  
                         __pcinit 2026                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                         _CCW_Count 006F  
                         __ptext0 198C                           __ptext1 1308  
                         __ptext2 3A8E                           __ptext3 1470  
                         __ptext4 235A                           __ptext5 26A6  
                         __ptext6 2EEA                           __ptext7 282E  
                         __ptext8 2AF8                           __ptext9 38D0  
                      _eusartSend 3A9C                   __size_of_printf 0168  
                         _average 0029                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _countOn 00F5  
                         _dpowers FCBD                         _T2CONbits 000FCA  
                   LED_Set@pValue 00C7               __size_of_Reset_High 0018  
           Event_DIPSwitch@pState 00CC                      ?_GetPortPORT 00B3  
                    ?_GetPortTRIS 00B3               ??_Console_PrintChar 00C3  
               __end_of_eusartRec 3B22                       _Port_GetPin 34B2  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 00AF  
             LCD_DrawRectangle@p4 01D3                      ??i2_delay_us 0003  
                      ??_delay_ms 00B5                        ??_delay_us 00B5  
                         _reverse 2F92                         _DIPSwitch 017C  
             __size_of_Timer0_ISR 0028                       _Port_SetPin 1EC2  
         __size_of_UpdateDistance 0024                    LCD_DrawField@i 00D5  
                       _LCD_Reset 3130               __size_of_Motor_Step 010E  
                       _LCD_Write 3892              __size_of_MXK_Dequeue 0034  
                      delay_ms@ms 00B3              end_of_initialization 20CA  
             __size_of_Robot_Init 0016                        delay_us@us 00B3  
             __size_of_Robot_Stop 0020                 ??_HMI_SetSegments 00B6  
         Console_PrintChar@pInput 00C6                      _Console_Init 2BCE  
            __size_of_MXK_Release 0018        __end_of_Port_CheckPairType 2E30  
                         itos@Out 00C7                    ??_Port_GetQuad 00B6  
              _PortProperty_Valid 2D08                         i2u1049_48 37AE  
              Byte_SetQuad@pInput 00BE                SPI_MinSpeed@pInput 00C2  
              Byte_SetQuad@pValue 00C1             __size_of_Byte_GetPair 001C  
                 ___lldiv@divisor 00B7             __size_of_Byte_GetZone 007A  
               ??_HMI_RightSwitch 00B9                   ___lldiv@counter 00BF  
       __end_of_Console_PrintChar 15C0                    ??_Port_SetType 00F0  
      __end_of_Port_CheckQuadType 31D0                           printf@c 00D3  
                         printf@f 00C8                    Port_Init@pPort 01D9  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0020  
          Console_MakeField@Index 00BC                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00C2  
           __size_of_Byte_SetQuad 0020        __end_of_Port_CheckPortType 33BA  
           __size_of_Byte_SetZone 008E                __end_ofi2_delay_us 343A  
              Button_Init@pInitIO 01DB                 ?_Port_SetQuadType 00E9  
                     _gForecolour 00FD         ??_Console_IncrementCursor 00B7  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
                      _timercount 0069                ??_Port_SetQuadType 00ED  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00B9  
           Console_Render@lCursor 00D9   __end_of_InitSerialCommunication 38D0  
                       _MXK_Queue 3AB8                  __CFG_CPUDIV$OSC1 000000  
                Byte_GetZone@pMax 00B5        __size_of_Console_Backspace 0050  
                       _TRISCbits 000F94                       _Square_Dist 0122  
                 _Set_Addr_Window 22C0                    SPI_Init@pClock 00E0  
                ??_LCD_Word_Write 00BA             __end_of_LCD_DrawField 282E  
                  Port_Set@pInput 00C2                    SPI_Init@pInput 00E6  
            ??_PortProperty_Valid 00C6                    Port_Set@pValue 00C4  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 2480  
                      ?_LCD_Write 00B6                      _Byte_GetPair 38EC  
              HMI_SetButton@F7213 FCD0                      _Byte_GetZone 2924  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 00D3  
               LCD_DrawField@ymax 00D4                    _Port_TogglePin 36C4  
                _Event_TestButton 35FE              Port_SetPinType@Props 00DE  
                    ?_Byte_GetBit 00B3           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 3AAA                      _Byte_SetPair 3852  
                    _Byte_SetQuad 3872           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 2480              Port_SetPinType@pType 00DC  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00B3  
                   ?_SPI_MaxSpeed 00C2                 __size_of_LCD_Fill 0048  
                    ??_Event_NULL 00B3                 __size_of_LCD_Init 0148  
               __size_of_LED_Init 0054                     ?_SPI_MinSpeed 00C2  
           __end_ofi2_Timer0_Stop 3B42                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 017C                 __size_of_HMI_Poll 0060  
                   ?i2_Motor_Step 0001                      ?_Init_Timer0 0001  
      __size_of_Console_MakeField 00A6                    __end_of_OutSeg 2AF8  
           __size_of_HMI_UpSwitch 0014                         _Close_Pos 0071  
                  __end_of___wmul 379A             __end_of_HMI_DIPSwitch 3A0A  
                   __pidataCOMRAM 3A80                      ?_Button_Init 01D7  
                 _FunctInitButton 299E                      ?_Button_Poll 00CE  
                     ?_eusartSend 0001                         _Bus_State 004B  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 14AA  
               __size_of_MXK_Init 013E                         _BumpState 011E  
            __end_of_Timer2_Clear 3B2A                    __end_of_printf 1470  
               __size_of_SPI_Init 03A4                 __size_of_SPI_Send 006A  
                   ?_Word_GetPair 00BF                  ??_Timer0_Restart 00B3  
              Port_SetType@Output 00F2               start_initialization 2026  
                      ?_MXK_Queue 00B3          PortProperty_Valid@Errors 00C8  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 303A  
              Port_SetType@pInput 00ED                      _Current_Dist 0126  
                     _ADC_Reading 011C                        HMI_Init@in 00EE  
             HMI_SetNumber@pInput 00C9             __end_ofi2_Port_SetPin 217E  
              __end_of_Event_NULL 1406            __end_of_Port_TogglePin 36F2  
                   ?_Word_SetPair 00C2                 Byte_SetBit@pInput 00B3  
                  ??_MXK_SwitchTo 00B9                 Byte_SetBit@pValue 00B6  
              ?_LCD_FillRectangle 00BC               _Console_ResetCursor 38D0  
     PortProperty_Valid@pPinDrive 00C4              MXK_BlockSwitchTo@CUR 00B9  
        PortProperty_Valid@pInput 00C2                     i2_MXK_Release 3B42  
          LCD_FillRectangle@pSize 00C2                    SPI_Send@pInput 00B3  
                    ??_Reset_High 00C7          __size_of_Port_SetPinType 019E  
                  ??_SPI_MaxSpeed 00C4             Port_SetQuadType@pQuad 00EB  
                       _ToSegment 064E               ??_LCD_FillRectangle 00C6  
           Port_SetQuadType@pType 00EC                   _Console_NewLine 282E  
                  ??_SPI_MinSpeed 00C4                      _HMI_UpSwitch 3A1E  
                       _Reset_Low 3954                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 3B36                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 0150                         _gCharSize 01F0  
                Timer2_Init@INDEX 008D                         OutSeg@cur 003B  
                  ??i2_Motor_Step 0015                          ??_OutSeg 00B7  
                       OutSeg@out 00BA           __size_of_Console_Render 01B6  
                    ??_Motor_Step 00C7                Byte_SetZone@Offset 00BC  
                    ??_Robot_Init 00B4                          ??___wmul 00B7  
                    ??_Robot_Stop 00B4              ?_Console_ResetCursor 0001  
                       _Port_Init 1006                       __pdataBANK0 00F3  
                     __pdataBANK1 01E8                 __size_of_Port_Set 02AA  
              Byte_SetZone@pChunk 00B6                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00B3                Byte_SetZone@pValue 00B8  
                   Mode_Set@pMode 00B3                          ??_printf 00CC  
         __end_of_Set_Addr_Window 235A          Port_CheckQuadType@Output 00E8  
                       _gLineSize 01EC          Port_CheckQuadType@pDrive 00E5  
                  ??_Word_GetPair 00C2          Port_CheckQuadType@pInput 00E2  
            __end_of_Port_GetQuad 3478         __end_of_LCD_FillRectangle 308E  
                     __pbssBIGRAM 02F0                          ?_LED_Set 00C7  
                     __pbssCOMRAM 0029                __end_of_Reset_High 3984  
                   __pcstackBANK0 00B3                     __pcstackBANK1 01D7  
                  _UpdateDistance 380E                        itos@Length 00C5  
                  ??_Word_SetPair 00C6                __end_of_Timer0_ISR 37C2  
            __size_of_GetPortPORT 0088                       ??_LCD_Reset 00CC  
            __size_of_GetPortTRIS 0088              __end_of_Port_SetType 0CB2  
                        ?_SPI_DCS 00B3                   ?_Port_TogglePin 00C7  
                     ??_LCD_Write 00B7                 __size_of_delay_ms 005C  
               __size_of_delay_us 0046               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Step 1D04             Timer2_Init@pFrequency 00C0  
                  ?i2_MXK_Release 0001                __end_of_Robot_Init 39E2  
              __end_of_Robot_Stop 3852                          ?_InitADC 0001  
        Port_CheckPairType@Output 00DF               __size_of_eusartSend 000E  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 00DC  
        Port_CheckPairType@pInput 00D9                    reverse@tempVar 00B7  
              _MXK_InitTestButton 39B4                        ?_Reset_Low 0001  
          __size_of_MXK_DIPSwitch 0014                      ?_Timer2_Init 00C0  
                ??_HMI_LeftSwitch 00B9                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00B3                     _lStepFunction 0066  
         __size_of_MXK_TestButton 0014                 Byte_SetPair@pPair 00C0  
         __end_of_FunctInitButton 2A14                  ??_HMI_DownSwitch 00B9  
__size_of_InitSerialCommunication 001E                         __pintcode 1408  
                   __pmediumconst FBEA             ??_Console_ResetCursor 00B3  
                        ?___awdiv 00B3                         __ptext100 3632  
                       __ptext101 38EC                         __ptext110 3908  
                       __ptext102 2924                         __ptext111 3892  
                       __ptext103 3872                         __ptext120 3B3C  
                       __ptext112 2B64                         __ptext104 2480  
                       __ptext121 3AFA                         __ptext113 3A6E  
                       __ptext105 0CB2                         __ptext130 3AC6  
                       __ptext122 20D4                         __ptext114 217E  
                       __ptext106 303A                         __ptext131 0000  
                       __ptext123 3694                         __ptext115 371E  
                       __ptext107 27B0                         __ptext124 3922  
                       __ptext116 2BCE                         __ptext108 3772  
                       __ptext125 2A14                         __ptext109 22C0  
                       __ptext126 31D0                         __ptext118 379A  
                       __ptext127 3594                         __ptext119 1D04  
                       __ptext128 33FA                         __ptext129 3B42  
                       _pShiftVal 0077                          ?___lldiv 00B3  
                      ?_Port_Init 01D7                          ?___lwdiv 00B3  
                        ?___lwmod 00BA               ?_MXK_InitTestButton 0001  
               ?_Console_FormFeed 0001                 _GetPortProperties 2596  
     __end_ofTimer0_Init@PRESCALE FCAD                ??_Console_FormFeed 00B3  
                 _HMI_SetSegments 2224                ?_GetPortProperties 00B3  
                Event_NULL@pState 0001            __end_of_UpdateDistance 3832  
        __size_of_Event_DIPSwitch 0026             __size_of_Set_Rotation 0092  
                   ??i2_MXK_Queue 0004                       ??_MXK_Queue 00B6  
                    ?_Port_GetPin 00B3             __end_of_HMI_SetButton 2924  
            __size_of_Console_Tab 0094                          ?_reverse 00B3  
                    ?_Port_SetPin 00C2                         _readIndex 002D  
           __end_of_HMI_SetNumber 380E                  ___lwdiv@quotient 00B8  
                 _HMI_RightSwitch 3A32               ??_GetPortProperties 00B5  
         __end_of_Console_NewLine 28AA                         _eusartRec 3B1A  
            ??_MXK_InitTestButton 00E0                Byte_GetPair@pInput 00BC  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 3B3C  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 3922                          _LCD_Fill 3264  
                        _LCD_Init 15C0                    ___wmul@product 00B7  
                        _HMIBoard 012C                    i2_Byte_GetZone 2A14  
                        _LED_Init 2F3E                         delay_ms@u 00B5  
              Button_Poll@pButton 00CE                         delay_us@u 00B5  
                        _HMI_Init 118C                          _HMI_Poll 2D70  
              MXK_Queue@pCallback 00B3                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 3694  
        __size_of_Configure_GPIOs 005E              __size_of_Byte_GetBit 002C  
               Byte_SetQuad@pQuad 00C0                          i2u401_44 31E4  
                        i2u401_45 31E0                          i2u402_44 320A  
                        i2u402_45 3206                          i2u405_40 3428  
                        i2u353_40 2A36                          _PIR1bits 000F9E  
                        i2u353_47 2A2C                          i2u355_40 2A7E  
                        i2u355_45 2A7A                          _PIR3bits 000FA4  
                        _CW_Count 006D                          i2u494_40 1D48  
                        i2u495_40 1D5C                          i2u496_40 1D94  
            __size_of_Byte_SetBit 0052                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                _Sensor_Observe_Fin 0118  
                __CFG_WDTPS$32768 000000                  HMI_SetBar@pValue 00B3  
               Button_Init@pInput 01D7           __size_of_SPI_DisableISR 0028  
                        _SSP1CON1 000FC6                 ??_Port_SetPinType 00DD  
                        _SSP1CON2 000FC5                          _SSP2CON1 000F6C  
                        _SSP2CON2 000F6B             __size_of_ISR_Function 00A2  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 261E  
                        _SSP2STAT 000F6D                      _Set_Rotation 23EE  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 34B2  
              _Port_CheckPairType 2DD0                          _MXK_Init 184E  
            __size_of_Init_Timer0 0018                   MXK_SwitchTo@CUR 00B9  
                        _SPI_Init 0000          __end_of_Event_TestButton 3632  
                        _SPI_Send 2B64                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                  ?_Set_Addr_Window 00B8  
               ___wmul@multiplier 00B3                 Byte_GetBit@Output 00B7  
                      printf@flag 00CD              Timer2_Init@pCPUClock 00C9  
      __size_of_LCD_FillRectangle 0054              __size_of_Button_Init 00B0  
                 ?_UpdateDistance 0001              __end_of_SPI_MaxSpeed 2CA0  
                      printf@prec 00CE                 Byte_GetBit@pInput 00B3  
             Port_SetPinType@pPin 00DB              __size_of_Button_Poll 012E  
              _Port_CheckQuadType 3180                     _MXK_DIPSwitch 39E2  
             ?_Port_CheckPairType 00D9                         main@right 01E4  
            __end_of_SPI_MinSpeed 2D08                     ??_MXK_Dequeue 00C9  
                __size_of_LED_Set 0048            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 337A             Button_Poll@pIncrement 00D0  
         PortProperty_Valid@F6830 FCAD              __end_ofi2_Motor_Step 1E04  
                 ??i2_MXK_Release 0001                         copy_data0 203A  
                       copy_data1 205A                         copy_data2 207A  
                   ??_MXK_Release 00B3                        ?_eusartRec 0001  
          __end_ofi2_Byte_GetPair 393C         __size_of_Port_SetQuadType 0212  
                __size_of_SPI_DCS 002C               ?_Port_CheckQuadType 00E2  
          __end_ofi2_Byte_GetZone 2A8A               __end_ofi2_MXK_Queue 3AD4  
             ?_Port_CheckPortType 00E9                   itos@destination 00C1  
                        _InitList FBEB              _Motor_Step$intlevel0 1BFC  
                        _Mode_Set 3A6E                Port_GetQuad@Output 00B8  
                     ??_ToSegment 00B3                      _ISR_Function 1408  
              Port_GetQuad@pInput 00B3                      _Timer2_Clear 3B22  
                __size_of_InitADC 0044              __end_of_Word_GetPair 3664  
                        _lCBuffer 028C              ??_Port_CheckPairType 00DD  
                     ??_Reset_Low 00C7                          __Hrparam 0000  
                    OutSeg@pInput 00B9                    _Console_Render 0CB2  
                        __Lrparam 0000                   Timer2_Init@RDIV 00C5  
                ?_FunctInitButton 0001                    LCD_Write@value 00B7  
                        _Port_Set 03A4                      OutSeg@segset 003A  
                       rand@screw 0037              __end_of_Word_SetPair 3526  
                     ??_Port_Init 01DA           __end_of_HMI_SetSegments 22C0  
            ??_Port_CheckQuadType 00E6             __size_of_Port_GetQuad 003E  
                __size_of___awdiv 0086                  __size_of___lldiv 0084  
               _MXK_BlockSwitchTo 3526                  __size_of___lwdiv 0054  
            ??_Port_CheckPortType 00EC                  __size_of___lwmod 0044  
                        _lBufferX 008F                          _lBufferY 008E  
             Timer2_Init@PRESCALE FCD4                      ??_eusartSend 00B3  
                 LCD_Fill@pColour 00BC                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 007D  
         __end_of_HMI_RightSwitch 3A46            Byte_GetZone@pChunkSize 00B7  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 00B7  
           __size_of_Port_SetType 01CE                     reverse@length 00B5  
                       itos@input 00BF             i2MXK_SwitchTo@pModule 0008  
                        _delay_ms 2E8E                          _delay_us 32AC  
                        _clearall 0090                   ___lwdiv@divisor 00B5  
                 ___lwdiv@counter 00B7                   Port_GetPin@pPin 00B5  
                        __ptext10 30E0                          __ptext11 3664  
                        __ptext20 337A                          __ptext12 39CC  
                        __ptext21 03A4                          __ptext13 380E  
                        __ptext30 3B2A                          __ptext22 3AAA  
                        __ptext14 3B1A                          __ptext31 3AEE  
                        __ptext23 250E                          __ptext15 3832  
                        __ptext40 2E30                          __ptext32 3478  
                        __ptext24 2596                          __ptext16 3A9C  
                        __ptext41 2C38                          __ptext33 393C  
                        __ptext25 261E                          __ptext17 184E  
                        __ptext50 355E                          __ptext42 3130  
                        __ptext34 3AB8                          __ptext26 2F3E  
                        __ptext18 1006                          __ptext51 2A8A  
                        __ptext43 2E8E                          __ptext35 3526  
                        __ptext27 321C                          __ptext19 0AE4  
                        __ptext60 3A5A                          __ptext52 2D70  
                        __ptext44 3954                          __ptext36 32AC  
                        __ptext28 35CA                          __ptext61 343A  
                        __ptext53 1AC8                          __ptext45 396C  
                        __ptext37 15C0                          __ptext29 1BF6  
                        __ptext70 2224                          __ptext62 37C2  
                        __ptext54 39E2                          __ptext46 3984  
                        __ptext38 23EE                          __ptext71 064E  
                        __ptext63 1404                          __ptext55 39F6  
                        __ptext47 38B2                          __ptext39 3264  
             ??_MXK_BlockSwitchTo 00B9                          __ptext80 2CA0  
                        __ptext72 28AA                          __ptext64 35FE  
                        __ptext56 3A0A                          __ptext48 32F2  
                        __ptext81 0000                          __ptext73 33BA  
                        __ptext65 37E8                          __ptext57 3A1E  
                        __ptext49 3B06                          __ptext90 3B36  
                        __ptext82 1708                          __ptext74 36C4  
                        __ptext66 1E04                          __ptext58 3A32  
                        __ptext91 39B4                          __ptext83 272C  
                        __ptext75 1EC2                          __ptext67 2F92  
                        __ptext59 3A46                          __ptext92 0E68  
                        __ptext84 3B22                          __ptext76 34B2  
                        __ptext68 3336                          __ptext93 308E  
                        __ptext85 374A                          __ptext77 3B10  
                        __ptext69 2FE6                          __ptext94 08D2  
                        __ptext86 36F2                          __ptext78 3B30  
                        __ptext95 34EC                          __ptext87 299E  
                        __ptext79 118C                          __ptext96 3852  
                        __ptext88 1F76                          __ptext97 3180  
                        __ptext89 399C                          __ptext98 2DD0  
                        __ptext99 2D08                      _SSP1CON1bits 000FC6  
                __size_of_reverse 0054                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 0068                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 00CC                   ?i2_Byte_GetZone 0001  
                        _countOff 00F3                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001               __end_of_MXK_Dequeue 35FE  
               HMI_SetSegments@in 00B7             Button_Init@pThreshold 01D9  
                   __size_of_main 013C                     __size_of_itos 00BE  
               Byte_GetPair@pPair 00BE                          _readings 0200  
          __end_of_Console_Render 0E68               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                __end_of_eusartSend 3AAA  
                    _Port_GetQuad 343A               __end_of_MXK_Release 3954  
                  _MXK_TestButton 3A5A           _InitSerialCommunication 38B2  
                   i2_Byte_SetBit 31D0               i2Word_GetPair@pPair 000F  
       __end_of_MXK_BlockSwitchTo 355E          ?_Console_IncrementCursor 0001  
            __size_of_Timer2_Init 0146                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 0AE4  
                    Port_Set@Type 00D9        __size_of_GetPortProperties 0088  
          __size_of_LCD_DrawField 007E                 ??_Configure_GPIOs 00E8  
                       printf@val 00D1                      _SSP1STATbits 000FC7  
                        main@left 01E6                          main@down 01E7  
                  Timer0_Init@DIV 0104                    Timer0_Init@PRE 0035  
                    _SSP2STATbits 000F6D                          exp@coeff FEB7  
                      _LED_Toggle 33BA                          log@coeff FEDF  
                      _HMI_GetBar 3B30              Button_Init@pGetState 01DE  
          PortProperty_Valid@Pair 00D8                  ??_Port_TogglePin 00CA  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 00C5                        _HMI_SetBar 3B10  
                      _HMI_Render 355E                  Byte_SetZone@MASK 00BD  
                     i2_MXK_Queue 3AC6                    Timer2_Init@DIV 0100  
                  Timer2_Init@PRE 008C                  Byte_SetZone@pMax 00B5  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 003A  
            Button_Init@pFunction 01E1                          itos@Data 00C3  
                     ??_eusartRec 00B3                LCD_FillRectangle@i 00C8  
              LCD_FillRectangle@j 00C9              __size_of_Port_SetPin 00B4  
                        intlevel2 0000                      reverse@input 00B3  
                     _numReadings 0047            __size_of_HMI_DIPSwitch 0014  
                ___lwmod@dividend 00BA                  ___lldiv@dividend 00B3  
          __end_of_MXK_TestButton 3A6E                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001A                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 003A                    _SPI_DisableISR 374A  
                 Port_Init@pInput 01D7                          printf@ap 00CF  
                     _thisReading 006B            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 3B06                  ?_HMI_SetSegments 00B4  
         Console_MakeField@Column 00BF             __size_of_SPI_MaxSpeed 0068  
                   SPI_DCS@pInput 00B3             __size_of_SPI_MinSpeed 0068  
                 ??_MXK_DIPSwitch 00B9             __size_ofi2_Motor_Step 0100  
         Console_MakeField@pInput 00BE                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 00BB                     ??_GetPortPORT 00B5  
                 ___lwmod@divisor 00BC                     ??_GetPortTRIS 00B5  
              Word_SetPair@pInput 00C2                   ___lwmod@counter 00BE  
              Word_SetPair@pValue 00C5                       _MXK_Dequeue 35CA  
                  LED_Toggle@pLED 00CB                     _LCD_DrawField 27B0  
                _Port_SetQuadType 08D2                       _MXK_Release 393C  
       __size_of_Console_FormFeed 006C                      _MXK_SwitchTo 3478  
           __size_of_Word_GetPair 0032                Byte_GetZone@Offset 00BA  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00C4  
                 _Port_SetPinType 0E68           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00BB         ??_InitSerialCommunication 00B3  
              Byte_GetZone@pChunk 00B6                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 38EC                Byte_GetZone@pInput 00B3  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 2F3E  
           __size_of_Word_SetPair 003A            __end_of_SPI_DisableISR 3772  
                    _SPI_MaxSpeed 2C38                      _SPI_MinSpeed 2CA0  
              Port_Set@TypeActual 00D7  
=======
                           _T_VAR 002F                  ??i2_Byte_GetPair 000D  
                           _Drive 5AC2                     ?_FunctReadADC 0060  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 0076  
         __size_of_Sensor_Observe 0104                    __CFG_FCMEN$OFF 000000  
                           _PortA 02F1                             _PortB 01A1  
                           _PortC 01AB                             _PortD 0197  
                           _PortE 018D                             _PortF 01B5  
                           _PortG 02E7           __end_of_Port_SetPinType 2832  
                 _ADC_Initialised 0147                    ??_Byte_GetPair 006C  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 0075  
                 __end_of_dpowers FC33                    ??_Byte_GetZone 0065  
                           _count 012C                             _floor 37D2  
                           _ldexp 3CFA                    Button_Poll@Pin 0083  
                           _frexp 42D8                             _errno 011A  
        __size_of_Set_Addr_Window 009A               __end_of_Console_Tab 4540  
                __end_of_MXK_Init 346C              i2Byte_GetPair@pInput 000A  
                           _putch 6004                             _total 0122  
                __end_of_SPI_Init 0B32                  __end_of_SPI_Send 4E2A  
                      _BumpSensor 00F1                  __end_of_BangBang 5CB2  
           __end_ofi2_MXK_Release 60B4                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 52EE  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 0063  
                  ??_Byte_SetPair 006F                             pow@yi 00D3  
                  ??_Byte_SetQuad 006F                             plusw2 000FDB  
                  ??_Byte_SetZone 0066                             status 000FD8  
                           wtemp6 0052                   _Configure_GPIOs 508C  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 5E30                       _Cliff_FLeft 0140  
             __size_of_LED_Toggle 0040               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001                       exp@exponent 00BF  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 0060  
                     ldexp@newexp 00B3                      __end_of_STP1 6096  
                    __end_of_STP2 608E                      __end_of_STP3 6086  
                    __end_of_STP4 607E                       _Cliff_Right 013F  
             __size_of_HMI_SetBar 000A                   __initialization 45D2  
             __size_of_HMI_Render 0036                       log@exponent 00B3  
             __end_of_Byte_GetBit 5C3A                     _Current_Dist1 0143  
                   _Current_Dist2 0037                      __end_of_Turn 519E  
                    __end_of_main 078E                _Vitual_Wall_Sensor 0142  
                    __end_of_itos 3F7A              HMI_SetButton@reindex 0062  
                    SPI_Send9@dat 013C               __end_of_Byte_SetBit 5394  
                __end_of_InitList FC09       __size_of_Port_CheckQuadType 0050  
                          ??_STP1 0060                            ??_STP2 0060  
                          ??_STP3 0060                            ??_STP4 0060  
                __end_of_Mode_Set 5FE8       __size_of_Port_CheckPortType 0040  
                          ??_Turn 0065                       HMI_Render@a 0068  
                          ??_main 00DB                            ??_itos 0070  
             __end_of_Init_Timer0 5EC4          __size_of_FunctInitButton 0076  
         _Console_MakeField$10974 006E                     __activetblptr 000003  
                          ?_LEDOn 0001                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 53E4                 Port_SetPin@pValue 0072  
                       ??_LED_Set 0075                 _MXK_InitDIPSwitch 5EDC  
                  ??_FunctReadADC 0062                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 5DA6                       _GetPortPORT 47FE  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 46EE  
                 ??_LCD_DrawField 007C                            ?_Drive 0061  
      __end_of_PortProperty_Valid 4FCC                  __end_of_Port_Set 1A30  
               __end_of_LEDToggle 585C                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0054               __end_of_Button_Init 40DE  
             __end_of_Button_Poll 359A                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 4A8A                            _ADCON0 000FC2  
                          _ADCON1 000FC1                      ??_ADCAverage 00D7  
                       ??_SPI_DCS 0062                            ?_floor 00A9  
                          ?_ldexp 00AF                            ?_frexp 0060  
                      _Low_Sensor 004A                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 5D00  
          Port_SetQuadType@Output 009A                            _ANCON0 000FC1  
                ___awdiv@dividend 0060                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
                          _GODONE 007E11                  _Console_FormFeed 4D52  
          Port_SetQuadType@pInput 0096                            _LEDOff 5E16  
                          i2l1630 3C60                            i2l1631 3CAC  
                          i2l1632 3C98                            i2l1730 5A04  
                          i2l1627 3CE8                            i2l1732 5A24  
                          i2l1628 3CDE                            i2l1629 3C76  
                          i2l1590 145E                    __CFG_WDTEN$OFF 000000  
             __size_of_ISR_Enable 000A                            i2l9614 57E0  
                          i2l9616 57F0                            _RCREG1 000FAF  
                          _RCSTA1 000FAC            __end_of_LCD_Word_Write 5E4A  
                  _Timer0_Restart 602E                            _SPBRG1 000FB0  
             ??_MXK_InitDIPSwitch 009B                            _TRISA2 007C92  
                          _TRISA3 007C93                            _TRISD5 007CAD  
                          _TRISD7 007CAF                            _TXREG1 000FAE  
                __end_of___xxtofl 2F52                         ??_InitADC 0060  
                  i2_MXK_SwitchTo 59F2                            _TXSTA1 000FAD  
                 Byte_GetBit@pBit 0062                        _Reset_High 5E94  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077                  __end_of_delay_ms 5146  
                    LED_Init@pLED 008D                  __end_of_delay_us 571A  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
        __size_of_Sensor_Observe2 0116                        _Timer0_ISR 5CB2  
        __size_of_Console_NewLine 007C                 Timer2_Init@DIVIDE 007A  
                  __CFG_XINST$OFF 000000                            _OutSeg 4CE4  
        __size_of_HMI_InitButtons 0006                            ___flge 359A  
                      _Motor_Step 38E8                   _Closest_Object2 4B7E  
         __end_of_Event_DIPSwitch 5D00                         ??___fladd 0093  
                          ___wmul 5C62                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 0064  
                       ??___flneg 008B                    __CFG_STVREN$ON 000000  
                      _Robot_Init 5F22                            _change 004D  
                       ??___flmul 0076                            _lMotor 00ED  
                       ??___flsub 00A7                         ??___fltol 00A3  
                       ??___lldiv 0068                            _lQueue 00E6  
                      _TestButton 02DD                        _Robot_Stop 5D26  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 213A  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 013A  
            __end_of_Console_Init 4E94                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 0018                            clear_0 461A  
                          clear_1 462C                            clear_2 4638  
                          clear_3 4644                            clear_4 4650  
                     ?_Coil_Setup 0001                __end_of_ADCAverage 14D0  
                ___awdiv@quotient 0066                        Port_Init@i 00A5  
               __end_of_MXK_Queue 6004        __end_ofHMI_SetButton@F7213 FC40  
                          _printf 2C96         __end_of_MXK_InitDIPSwitch 5EF4  
                          main@up 00E3                    HMI_SetButton@v 0067  
                          floor@i 00AD                            floor@x 00A9  
          HMI_SetSegments@pString 0061                       _Console_Tab 44AC  
             LCD_Word_Write@value 0065                      __pdataCOMRAM 0046  
              __size_of_Port_Init 0174                     ??_Port_GetPin 0063  
        Port_CheckPortType@Output 0099                   ??i2_Port_SetPin 0014  
                    __mediumconst FB56       __end_ofTimer2_Init@PRESCALE FC43  
        Port_CheckPortType@pDrive 0098                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 0096                     ??_Port_SetPin 0073  
                       ??_reverse 0064             Console_MakeField@Fill 0282  
                ?_Port_SetPinType 0086                            putch@c 0074  
                  ?_HMI_SetNumber 0076                    i2_Word_GetPair 5B84  
         __end_of_Configure_GPIOs 50EA                  ??_MXK_TestButton 0066  
          __end_of_Timer0_Restart 603A                     Set_Rotation@m 0065  
                    ?_MXK_Release 0001                        ___flge@ff1 0060  
                      ___flge@ff2 0064                        _SteppingCW 5568  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 5A28  
                    ___xxtofl@arg 006A                  __end_ofexp@coeff FE4B  
                    i2delay_us@us 0001                      ___xxtofl@exp 0069  
                    ___xxtofl@val 0060                  __end_oflog@coeff FE6F  
                 ?_LCD_Word_Write 0065                        __accesstop 0060  
         __end_of__initialization 4656                         ?_LCD_Fill 0069  
                       ?_LCD_Init 0001                      _Cliff_FRight 0141  
                   SPI_Init@pMode 0092                        ___flneg@f1 0087  
                 _Reset_variables 5484                       _Byte_GetBit 5C0E  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 6046  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 0068  
                       ?_HMI_Poll 0001                      eval_poly@res 00AB  
                   ___rparam_used 000001                        ___fltol@f1 009F  
                     _Byte_SetBit 5342                     __end_of_LEDOn 5E16  
                   __end_of_MASKS FC3C                    _PortA_Property FE7B  
                     ?_Event_NULL 0001                         LCD_Fill@i 006B  
                       LCD_Fill@j 006C                         LCD_Init@i 0097  
                   __end_of_Drive 5AF4                    __pcstackCOMRAM 0001  
                _Get_Sensor_State 5EC4                    _PortB_Property FE79  
             __size_ofi2_delay_us 0040                      __pidataBANK1 5F0C  
                     _Init_Timer0 5EAC               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 5DE0                   Console_Render@x 008A  
                 Console_Render@y 008B               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FC09  
            __end_of_Byte_GetZone 4B7E                     __end_of_floor 38E8  
                   __end_of_ldexp 3DDE                     __end_of_frexp 4376  
             FunctReadADC@channel 0060                    _PortC_Property FE77  
                   __end_of_putch 6012                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 3330               __end_of_Timer0_Stop 609C  
                       ?_SPI_Init 008D                         ?_SPI_Send 0060  
                     _Button_Init 402E                         ?_BangBang 0061  
               Port_SetType@pType 009C                       _Button_Poll 346C  
            __end_of_Byte_SetByte 5FF6              __end_of_Byte_SetPair 5D66  
                  _HMI_LeftSwitch 5F9C                    _PortD_Property FE75  
            __end_of_Byte_SetQuad 5D86                      ??_LED_Toggle 0078  
                    ??_HMI_GetBar 0060              __end_of_Byte_SetZone 46EE  
                         ??_LEDOn 0061                    _HMI_DownSwitch 5F60  
                   SPI_Send@pData 0062                     ??_SteppingCCW 0066  
           __end_of_MXK_DIPSwitch 5F4C                      ??_HMI_SetBar 0060  
                    ??_HMI_Render 0068                    _PortE_Property FE73  
                  _Sensor_Observe 39F6          __size_of_HMI_SetSegments 009C  
          __end_ofi2_Word_GetPair 5BB4                           ??_Drive 0063  
                  _PortF_Property FE71           Port_CheckQuadType@Pair1 0093  
         Port_CheckQuadType@Pair2 0094          MXK_BlockSwitchTo@pModule 0067  
                         ??_floor 00AD                           ??_ldexp 00B5  
                         ??_frexp 0066                 ??_FunctInitButton 00A8  
               _Console_Backspace 5434                   ?_Timer0_Restart 0001  
                         ??_putch 0074          __size_of_HMI_RightSwitch 0014  
             _Console_ClearCursor 5B24                 __end_of_ToSegment 1CB4  
                  _PortG_Property FE6F                        __pbssBANK0 00E6  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 594A           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                           ?_LEDOff 0001  
              __size_of_eval_poly 0100                  ??_SPI_DisableISR 0062  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 5E94         __size_of_Event_TestButton 0034  
         __size_of_Port_TogglePin 002E                        ??_LCD_Fill 006B  
                      ??_LCD_Init 0095               __end_of_Port_SetPin 402E  
             __size_of_Coil_Setup 0012            __end_of_PortA_Property FE7D  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 0060  
                      ??_LED_Init 008D                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
         __end_of_Closest_Object2 4BF8                        ??_HMI_Init 00A8  
                      ??_HMI_Poll 0084                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 008D            __end_of_PortB_Property FE7B  
              __size_of_eusartRec 0008                 __end_of_Port_Init 2B22  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 0088  
              __end_of_LED_Toggle 57DE                __end_of_HMI_GetBar 60A2  
        LCD_FillRectangle@pColour 0069              __end_of_FunctReadADC 58D6  
             ??_Console_Backspace 0062                 Set_Addr_Window@xe 0066  
               Set_Addr_Window@ye 0067                 Set_Addr_Window@xs 0068  
               Set_Addr_Window@ys 0065                           ?_OutSeg 0063  
              Byte_SetPair@pInput 006B                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 006E                           ?___flge 0060  
              __end_of_HMI_SetBar 6066            __end_of_PortC_Property FE79  
              Word_GetPair@pInput 006C                __end_of_HMI_Render 59F2  
                  ??_Set_Rotation 0065                         ?_Port_Set 006F  
                         ?___wmul 0060                       ?_Robot_Init 0001  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 0065  
                    ??_ISR_Enable 0060                       ?_Robot_Stop 0001  
    __size_of_Console_ResetCursor 001C              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 5FB0            __end_of_PortD_Property FE77  
                         _ADC_AN0 01D4                           _ADC_AN1 01CF  
                         _ADC_AN2 01CA                           _ADC_AN3 01C5  
                      ??_MXK_Init 00A6                 Port_GetPin@pInput 0060  
               _Console_MakeField 4232                 ??_Sensor_Observe2 00D9  
               ??_Console_NewLine 0060            __end_of_HMI_DownSwitch 5F74  
                      ??_SPI_Init 0093            Event_TestButton@pState 0079  
                      ??_SPI_Send 0063                        ??_BangBang 0069  
                         ?_printf 0075                 ??_HMI_InitButtons 0060  
      __size_of_MXK_InitDIPSwitch 0018            __end_of_PortE_Property FE75  
             Console_Render@F6956 01E1            __end_of_Sensor_Observe 3AFA  
              ?_Console_MakeField 0065                           _COUNTER 0033  
                 ??_HMI_SetButton 0060              __end_of_HMI_UpSwitch 5F88  
                         _LED_Set 55FC           _Console_IncrementCursor 51F2  
                       ?___xxtofl 0060            __end_of_PortF_Property FE73  
                     _gBackcolour 0035                   ??_HMI_SetNumber 0078  
                       _I2C1_Done 0117                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0114                         _I2C1_More 0111  
                       _I2C2_More 010E                         ?_delay_ms 0060  
       __end_of_Console_Backspace 5484                         ?_delay_us 0060  
             __size_of_Event_NULL 0002        __end_of_MXK_InitTestButton 5F0C  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F           __end_of_Reset_variables 54D0  
          __end_of_PortG_Property FE71               ??_Console_MakeField 0067  
                         _SPI_DCS 5AF4              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001          ?_InitSerialCommunication 0001  
             __end_of_SteppingCCW 55FC                eusartSend@sendChar 0060  
            i2Byte_GetZone@Offset 0008                       ?_SteppingCW 0001  
                 __size_of_LEDOff 001A                __end_of_ISR_Enable 605C  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
               Event_TestButton@j 0038                        ??_Mode_Set 0060  
                  ??_Timer2_Clear 0060                           _Font5x7 FC43  
            i2Byte_GetZone@pChunk 0004                           _InitADC 54D0  
            i2Byte_GetZone@pInput 0001              SPI_DisableISR@pInput 0060  
                   ?_Port_GetQuad 0060                   Byte_SetBit@pBit 0062  
            Port_TogglePin@pInput 0074             __end_ofi2_Byte_SetBit 5568  
                         __Hparam 0000                 Port_GetQuad@pQuad 0062  
                     _Timer2_Init 31EA                           __Lparam 0000  
                     _Timer0_Stop 6096             __size_of_Console_Init 006A  
                         OutSeg@a 003D   __end_ofPortProperty_Valid@F6830 FC29  
                   LCD_Write@mode 0063                   __size_of_OutSeg 006E  
                     _Motor_Count 002D                        ??_Port_Set 0072  
                 __size_of___flge 0122         __end_of_Console_MakeField 42D8  
               _Console_PrintChar 2F52           __size_of_Closest_Object 00AA  
                         ___fladd 0E84                     ?_Port_SetType 009A  
                         _gCursor 0046                           ___fldiv 14D0  
                         ___awdiv 4886                           ___flneg 5B54  
           ??_Console_ClearCursor 0060                           ___flmul 0B32  
                         ___flsub 568C                           ___fltol 3DDE  
                         _lBuffer 0318                           ___lldiv 490C  
                 __size_of___wmul 0028                           ___lwdiv 52EE  
                         ___lwmod 571A                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 4DBE                ?_Console_PrintChar 0001  
                         __pcinit 45D2                 __end_of_eval_poly 3BFA  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                       _CCW_Count 012A                           __ptext0 0000  
                         __ptext1 5146                           __ptext2 36BC  
                         __ptext3 39F6                           __ptext4 5F22  
                         __ptext5 5BE2                           __ptext6 5D26  
                         __ptext7 5484                           __ptext8 3330  
                         __ptext9 29AE                        _eusartSend 6012  
                 __size_of_printf 0168                           _average 00E9  
                       _T0CONbits 000FD5                   ?_Sensor_Observe 0001  
               i2MXK_SwitchTo@CUR 0007                           _countOn 01EF  
                         _dpowers FC29                         _T2CONbits 000FCA  
                   LED_Set@pValue 0074                      __size_of_exp 0274  
                    __size_of_log 0174               __size_of_Reset_High 0018  
           Event_DIPSwitch@pState 0079                      __size_of_pow 01D6  
                      ??___xxtofl 0064                      ?_GetPortPORT 0060  
                    ?_GetPortTRIS 0060               ??_Console_PrintChar 0070  
               __end_of_eusartRec 6076                       _Port_GetPin 5910  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 01DD  
             LCD_DrawRectangle@p4 01D9                      ??i2_delay_us 0003  
                      ??_delay_ms 0062                        ??_delay_us 0062  
                         _reverse 529A                         _DIPSwitch 02D3  
             __size_of_Timer0_ISR 0028                       _Port_SetPin 3F7A  
         __size_of_UpdateDistance 002C                    LCD_DrawField@i 0082  
                       _LCD_Reset 5394               __size_of_Motor_Step 010E  
                       _LCD_Write 5D86              __size_of_MXK_Dequeue 0034  
                      delay_ms@ms 0060              end_of_initialization 4656  
                       _LEDToggle 581E               __size_of_Robot_Init 0016  
                         exp@sign 00C1                        delay_us@us 0060  
             __size_of_Robot_Stop 0020                 ??_HMI_SetSegments 0063  
         Console_PrintChar@pInput 0073                      _Console_Init 4E2A  
                 BangBang@LSpeedH 0065                   BangBang@LSpeedL 0067  
            __size_of_MXK_Release 0018        __end_of_Port_CheckPairType 508C  
                         itos@Out 0074                    ??_Port_GetQuad 0063  
              _PortProperty_Valid 4F64                  ?_Closest_Object2 0001  
                       i2u1414_48 5CC6                Byte_SetQuad@pInput 006B  
                 BangBang@RSpeedH 0061                   BangBang@RSpeedL 0063  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
           __size_of_Byte_GetPair 001C                   ___lldiv@divisor 0064  
           __size_of_Byte_GetZone 007A                 ??_HMI_RightSwitch 0066  
                         pow@sign 00D2                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 30A2                    ??_Port_SetType 009D  
      __end_of_Port_CheckQuadType 5434                           printf@c 0080  
                         printf@f 0075                    Port_Init@pPort 00A2  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0020  
          Console_MakeField@Index 0069                  _ADCAverage$15663 0300  
                _ADCAverage$15664 0304                  _ADCAverage$15665 0308  
                _ADCAverage$15666 030C                  _ADCAverage$15667 0310  
                _ADCAverage$15668 0314                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 006F  
           __size_of_Byte_SetQuad 0020        __end_of_Port_CheckPortType 579E  
           __size_of_Byte_SetZone 008E                __end_ofi2_delay_us 581E  
              Button_Init@pInitIO 009F                 ?_Port_SetQuadType 0096  
                    ??_Coil_Setup 0060                       _gForecolour 01F3  
       ??_Console_IncrementCursor 0064            __size_ofi2_MXK_Release 0006  
             __size_of_SteppingCW 004A                         _PORTFbits 000F85  
                      _timercount 011E                ??_Port_SetQuadType 009A  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 0066  
                     ___fladd@grs 009E             Console_Render@lCursor 0086  
                     _SteppingCCW 55B2   __end_of_InitSerialCommunication 5DC4  
                       _MXK_Queue 5FF6                  __CFG_CPUDIV$OSC1 000000  
                   ___xxtofl@sign 0068                  Byte_GetZone@pMax 0062  
      __size_of_Console_Backspace 0050                         _TRISCbits 000F94  
                     _Square_Dist 0134                   _Set_Addr_Window 4412  
                  SPI_Init@pClock 008D                  ??_LCD_Word_Write 0067  
        __end_of_Get_Sensor_State 5EDC                       ___fldiv@grs 0073  
                     ___fldiv@rem 006D             __end_of_LCD_DrawField 4A0E  
                  Port_Set@pInput 006F                    SPI_Init@pInput 0093  
            ??_PortProperty_Valid 0073                  ?_Reset_variables 0001  
                  Port_Set@pValue 0071                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 45D2                        ?_LCD_Write 0063  
                    _Byte_GetPair 5DC4                HMI_SetButton@F7213 FC3C  
                    _Byte_GetZone 4B04                        ?_LEDToggle 0001  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 0080  
               LCD_DrawField@ymax 0081                    _Port_TogglePin 5BB4  
                _Event_TestButton 5A5C                       ___flmul@grs 007C  
           __size_of_FunctReadADC 003C              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060                    __end_of_LEDOff 5E30  
         __size_ofi2_Byte_GetPair 001A                      _Byte_SetByte 5FE8  
                    _Byte_SetPair 5D46                      _Byte_SetQuad 5D66  
         __size_ofi2_Byte_GetZone 0076                __end_of_Coil_Setup 5FD6  
                    _Byte_SetZone 4660              Port_SetPinType@pType 0089  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 0060  
                   ?_SPI_MaxSpeed 006F                 __size_of_LCD_Fill 0048  
                    ??_Event_NULL 0060                 __size_of_LCD_Init 0148  
               __size_of_LED_Init 0054                     ?_SPI_MinSpeed 006F  
           __end_ofi2_Timer0_Stop 60AE                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 017C                 __size_of_HMI_Poll 0060  
                   ?i2_Motor_Step 0001                      ?_Init_Timer0 0001  
      __size_of_Console_MakeField 00A6                    __end_of_OutSeg 4D52  
                  __end_of___flge 36BC             __size_of_HMI_UpSwitch 0014  
                       _Close_Pos 002B                    __end_of___wmul 5C8A  
           __end_of_HMI_DIPSwitch 5F60                     __pidataCOMRAM 6046  
                    ?_Button_Init 009B                   _FunctInitButton 4BF8  
                    ?_Button_Poll 007B                       ?_eusartSend 0001  
                       _Bus_State 004C               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA                 __size_of_MXK_Init 013C  
                       _BumpState 0130                       Turn@C_Angle 0065  
                      floor@expon 00B1              __end_of_Timer2_Clear 606E  
                  __end_of_printf 2DFE                 __size_of_SPI_Init 03A4  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 006C  
               __size_of_BangBang 0028                  ??_Timer0_Restart 0060  
              Port_SetType@Output 009F               start_initialization 45D2  
                      ?_MXK_Queue 0060                        eval_poly@d 00A3  
                      eval_poly@n 00A5                        eval_poly@x 009F  
                      ldexp@value 00AF                      _FunctReadADC 589A  
        PortProperty_Valid@Errors 0075                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 5246                Port_SetType@pInput 009A  
                    _Current_Dist 0136                       __end_of_exp 1F28  
                     __end_of_log 2C96                       _ADC_Reading 012E  
                     __end_of_pow 2310                        HMI_Init@in 00A8  
             HMI_SetNumber@pInput 0076             __end_ofi2_Port_SetPin 4232  
              __end_of_Event_NULL 1406            __end_of_Port_TogglePin 5BE2  
                   ?_Word_SetPair 006F                 Byte_SetBit@pInput 0060  
                  ??_MXK_SwitchTo 0066                 Byte_SetBit@pValue 0063  
              ?_LCD_FillRectangle 0069               _Console_ResetCursor 5DE0  
     PortProperty_Valid@pPinDrive 0071              MXK_BlockSwitchTo@CUR 0066  
        PortProperty_Valid@pInput 006F                          ??_LEDOff 0061  
                   i2_MXK_Release 60AE                        frexp@value 0060  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 019E  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1A30               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Sensor_Observe2 36BC  
                 _Console_NewLine 4A0E                    ??_SPI_MinSpeed 0071  
                    _HMI_UpSwitch 5F74                         _Reset_Low 5E7C  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 60A2  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 0150  
                       _gCharSize 01E9                  Timer2_Init@INDEX 00F2  
                       OutSeg@cur 003F                    ??i2_Motor_Step 0015  
                        ??_OutSeg 0064                         OutSeg@out 0067  
         __size_of_Console_Render 01B6                      ??_Motor_Step 0074  
                  _Closest_Object 40DE                          ??___flge 0068  
              Byte_SetZone@Offset 0069                      ??_Robot_Init 0063  
                        ??___wmul 0064                      ??_Robot_Stop 0061  
            ?_Console_ResetCursor 0001                         _Port_Init 29AE  
                     __pdataBANK1 01E1                 __size_of_Port_Set 02AA  
              Byte_SetZone@pChunk 0063                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 0060                Byte_SetZone@pValue 0065  
                   Mode_Set@pMode 0060                          ??_printf 0079  
         __end_of_Set_Addr_Window 44AC          Port_CheckQuadType@Output 0095  
                       _gLineSize 01E5          Port_CheckQuadType@pDrive 0092  
                       ___fladd@a 008F                         ___fladd@b 008B  
                  ??_Word_GetPair 006F          Port_CheckQuadType@pInput 008F  
            __end_of_Port_GetQuad 589A                         ___fldiv@a 0064  
                       ___fldiv@b 0060         __end_of_LCD_FillRectangle 529A  
                     __pbssBIGRAM 0318                          ?_LED_Set 0074  
                       ___flmul@a 0072                         ___flmul@b 006E  
                     __pbssCOMRAM 0029                         ___flsub@a 00A3  
                       ___flsub@b 009F                __end_of_Reset_High 5EAC  
                   __pcstackBANK0 0060                     __pcstackBANK3 0300  
                  _UpdateDistance 5BE2                        itos@Length 0072  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 0154  
              __end_of_Timer0_ISR 5CDA              __size_of_GetPortPORT 0088  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 0088  
            __end_of_Port_SetType 24DE                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 005C                 __size_of_delay_us 0046  
                       Turn@Angle 0061               __CFG_CCP2MX$DEFAULT 000000  
                     ??_LEDToggle 0061                __end_of_Motor_Step 39F6  
           Timer2_Init@pFrequency 006D                      ??_SteppingCW 0066  
                  ?i2_MXK_Release 0001                         Turn@Speed 0063  
              __end_of_Robot_Init 5F38                __end_of_Robot_Stop 5D46  
                       _exp$15671 00BB                          ?_InitADC 0001  
        Port_CheckPairType@Output 008C               __size_of_eusartSend 000E  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 0089  
        Port_CheckPairType@pInput 0086                    reverse@tempVar 0064  
          __end_of_Closest_Object 4188                _MXK_InitTestButton 5EF4  
                      ?_Reset_Low 0001            __size_of_MXK_DIPSwitch 0014  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 010B           __size_of_MXK_TestButton 0014  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 4C6E  
                ??_HMI_DownSwitch 0066  __size_of_InitSerialCommunication 001E  
                       __pintcode 1408                     __pmediumconst FB56  
           ??_Console_ResetCursor 0060                          ?___fladd 008B  
                        ?___fldiv 0060                          ?___awdiv 0060  
                       __ptext100 51F2                         __ptext101 4A0E  
                       __ptext110 6086                         __ptext102 4D52  
                        ?___flneg 0087                         __ptext111 608E  
                       __ptext103 5DE0                         __ptext120 4232  
                       __ptext112 5FC4                         __ptext104 5434  
                       __ptext121 5C0E                         __ptext113 24DE  
                       __ptext105 5B24                         __ptext130 3DDE  
                       __ptext122 11C2                         __ptext114 5246  
                       __ptext106 55B2                         __ptext131 359A  
                       __ptext123 213A                         __ptext115 4990  
                       __ptext107 50EA                         __ptext140 5D00  
                       __ptext132 3AFA                         __ptext124 2B22  
                       __ptext116 4412                         __ptext108 6076  
                       __ptext141 3EBC                         __ptext133 0B32  
                       __ptext125 1CB4                         __ptext117 5E30  
                       __ptext109 607E                         __ptext150 589A  
                       __ptext142 529A                         __ptext134 568C  
                       __ptext126 3CFA                         __ptext118 5D86  
                       __ptext151 5C8A                         __ptext143 571A  
                       __ptext135 0E84                         __ptext127 37D2  
                       __ptext119 5FD6                         __ptext160 5E4A  
                       __ptext152 6012                         __ptext144 52EE  
                       __ptext136 5B54                         __ptext128 42D8  
                       __ptext161 4C6E                         __ptext145 4376  
                       __ptext137 14D0                         __ptext129 2DFE  
                       __ptext162 551C                         __ptext154 5CB2  
                       __ptext146 1A30                         __ptext138 5C62  
                       __ptext163 59F2                         __ptext155 3BFA  
                       __ptext147 59BC                         __ptext139 4886  
                       __ptext164 57DE                         __ptext156 60A8  
                       __ptext148 4CE4                         __ptext165 60AE  
                       __ptext157 603A                         __ptext149 4DBE  
                       __ptext166 6020                         __ptext158 4188  
                       _pShiftVal 00EB                         __ptext167 0000  
                       __ptext159 5B84                          ?___flmul 006E  
                ??_Sensor_Observe 00D9                          ?___flsub 009F  
                        ?___fltol 009F                          ?___lldiv 0060  
                      ?_Port_Init 00A0                          ?___lwdiv 0060  
                        ?___lwmod 0067               ?_MXK_InitTestButton 0001  
               ?_Console_FormFeed 0001                 _GetPortProperties 4776  
                       _pow$15670 00CE                         _pow$15669 00CA  
              __end_of_SteppingCW 55B2       __end_ofTimer0_Init@PRESCALE FC19  
              ??_Console_FormFeed 0060                    __size_of_LEDOn 001A  
                 _HMI_SetSegments 4376                ?_GetPortProperties 0060  
                Event_NULL@pState 0001            __end_of_UpdateDistance 5C0E  
        __size_of_Event_DIPSwitch 0026             __size_of_Set_Rotation 0092  
                   ??i2_MXK_Queue 0004                         _eval_poly 3AFA  
                     ??_MXK_Queue 0063                      ?_Port_GetPin 0060  
                  __size_of_Drive 0032             __end_of_HMI_SetButton 4B04  
            __size_of_Console_Tab 0094                          ?_reverse 0060  
                    ?_Port_SetPin 006F                         _readIndex 0029  
           __end_of_HMI_SetNumber 5D26                  ___lwdiv@quotient 0065  
                 _HMI_RightSwitch 5F88                    __size_of_floor 0116  
                  __size_of_ldexp 00E4                    __size_of_frexp 009E  
             ??_GetPortProperties 0062           __end_of_Sensor_Observe2 37D2  
         __end_of_Console_NewLine 4A8A                         _eusartRec 606E  
            ??_MXK_InitTestButton 008D                Byte_GetPair@pInput 0069  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 60A8  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 5E4A                          _LCD_Fill 5644  
                        _LCD_Init 30A2                    ___wmul@product 0064  
                        _HMIBoard 0148                    i2_Byte_GetZone 4C6E  
                        _LED_Init 519E                         delay_ms@u 0062  
              Button_Poll@pButton 007B                         delay_us@u 0062  
                        _HMI_Init 2832                          _HMI_Poll 4FCC  
              MXK_Queue@pCallback 0060                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 5B54  
        __size_of_Configure_GPIOs 005E              __size_of_Byte_GetBit 002C  
                 ?_Closest_Object 0001                 Byte_SetQuad@pQuad 006D  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                        _CW_Count 0128                          i2u595_40 4C90  
                        i2u595_47 4C86                          i2u684_44 5530  
                        i2u684_45 552C                          i2u597_40 4CD8  
                        i2u685_44 5556                          i2u685_45 5552  
                        i2u597_45 4CD4                          i2u782_40 3C3E  
                        i2u783_40 3C52                          i2u688_40 580C  
                        i2u784_40 3C8A              __size_of_Byte_SetBit 0052  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
              _Sensor_Observe_Fin 0126                  __CFG_WDTPS$32768 000000  
                HMI_SetBar@pValue 0060                 Button_Init@pInput 009B  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 008A                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 47FE                          _SSP2STAT 000F6D  
                    _Set_Rotation 4540             __size_of_Timer2_Clear 0008  
            __end_of_MXK_SwitchTo 5910                _Port_CheckPairType 502C  
                        _MXK_Init 3330              __size_of_Init_Timer0 0018  
                 MXK_SwitchTo@CUR 0066                          Drive@Rad 0063  
                        _SPI_Init 078E          __end_of_Event_TestButton 5A90  
                        _SPI_Send 4DBE                          _BangBang 5C8A  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 0065                 ___wmul@multiplier 0060  
               Byte_GetBit@Output 0064                        printf@flag 007A  
            Timer2_Init@pCPUClock 0076        __size_of_LCD_FillRectangle 0054  
                    ?_SteppingCCW 0001              __size_of_Button_Init 00B0  
                 ?_UpdateDistance 0061              __end_of_SPI_MaxSpeed 4EFC  
                      printf@prec 007B                 Byte_GetBit@pInput 0060  
             Port_SetPinType@pPin 0088              __size_of_Button_Poll 012E  
                      ?_eval_poly 009F                _Port_CheckQuadType 53E4  
                   _MXK_DIPSwitch 5F38               ?_Port_CheckPairType 0086  
                       main@right 00E1              __end_of_SPI_MinSpeed 4F64  
                   ??_MXK_Dequeue 0076                  __size_of_LED_Set 0048  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 575E  
           Button_Poll@pIncrement 007D           PortProperty_Valid@F6830 FC19  
            __end_ofi2_Motor_Step 3CFA                   ??i2_MXK_Release 0001  
               ?_Get_Sensor_State 0001                        _ADCAverage 11C2  
                       copy_data0 45E6                         copy_data1 4606  
                   ??_MXK_Release 0060                        ?_eusartRec 0001  
          __end_ofi2_Byte_GetPair 5E64         __size_of_Port_SetQuadType 0212  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 4CE4               __end_ofi2_MXK_Queue 602E  
              ??_Get_Sensor_State 0061               ?_Port_CheckPortType 0096  
                 itos@destination 006E                          _InitList FB57  
            _Motor_Step$intlevel0 38EE                          _Mode_Set 5FD6  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
              Port_GetQuad@pInput 0060                      _Timer2_Clear 6066  
                __size_of_InitADC 004C              __end_of_Word_GetPair 5AC2  
                        _lCBuffer 0264              ??_Port_CheckPairType 008A  
                     ??_Reset_Low 0074                          __Hrparam 0000  
                    OutSeg@pInput 0066                    _Console_Render 24DE  
                        __Lrparam 0000                   Timer2_Init@RDIV 0072  
                ?_FunctInitButton 0001                    LCD_Write@value 0064  
                        _Port_Set 1786                      OutSeg@segset 003E  
                       rand@screw 003C              __end_of_Word_SetPair 5984  
                     ??_Port_Init 00A3           __end_of_HMI_SetSegments 4412  
            ??_Port_CheckQuadType 0093          __size_of_Closest_Object2 007A  
                __size_of___fladd 033E                  __size_of___fldiv 02B6  
           __size_of_Port_GetQuad 003E                  __size_of___awdiv 0086  
                __size_of___flneg 0030                  __size_of___flmul 0352  
                __size_of___flsub 0048                  __size_of___fltol 00DE  
                __size_of___lldiv 0084                 _MXK_BlockSwitchTo 5984  
                __size_of___lwdiv 0054              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0044                          _lBufferX 00F4  
                        _lBufferY 00F3               Timer2_Init@PRESCALE FC40  
                    ??_eusartSend 0060                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00EF           __end_of_HMI_RightSwitch 5F9C  
          Byte_GetZone@pChunkSize 0064                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 0064             __size_of_Port_SetType 01CE  
                   reverse@length 0062                         itos@input 006C  
           i2MXK_SwitchTo@pModule 0008                          ___xxtofl 2DFE  
                        _delay_ms 50EA                          _delay_us 56D4  
                        _clearall 00F5                   ___lwdiv@divisor 0062  
                 ___lwdiv@counter 0064                   Port_GetPin@pPin 0062  
                        __ptext10 2310                          __ptext11 575E  
                        __ptext20 38E8                          __ptext12 1786  
                        __ptext21 6096                          __ptext13 5FE8  
                        __ptext30 5E16                          __ptext22 602E  
                        __ptext14 46EE                          __ptext31 30A2  
                        __ptext23 58D6                          __ptext15 4776  
                        __ptext40 5DA6                          __ptext32 4540  
                        __ptext24 5E64                          __ptext16 47FE  
                        __ptext41 54D0                          __ptext33 5644  
                        __ptext25 5FF6                          __ptext17 519E  
                        __ptext50 5F9C                          __ptext42 6052  
                        __ptext34 508C                          __ptext26 5984  
                        __ptext18 55FC                          __ptext51 5FB0  
                        __ptext43 4FCC                          __ptext35 4E94  
                        __ptext27 56D4                          __ptext19 5A28  
                        __ptext60 5910                          __ptext52 585C  
                        __ptext44 346C                          __ptext36 5394  
                        __ptext28 581E                          __ptext61 605C  
                        __ptext53 5CDA                          __ptext45 5F38  
                        __ptext37 5E7C                          __ptext29 5DFC  
                        __ptext70 5AF4                          __ptext62 609C  
                        __ptext54 1404                          __ptext46 5F4C  
                        __ptext38 5E94                          __ptext71 5EC4  
                        __ptext63 2832                          __ptext55 5A5C  
                        __ptext47 5F60                          __ptext39 5EAC  
             ??_MXK_BlockSwitchTo 0066                          __ptext80 1F28  
                        __ptext72 606E                          __ptext64 4EFC  
                        __ptext56 4A8A                          __ptext48 5F74  
                        __ptext81 594A                          __ptext73 4BF8  
                        __ptext65 078E                          __ptext57 579E  
                        __ptext49 5F88                          __ptext90 4660  
                        __ptext82 5D46                          __ptext74 402E  
                        __ptext66 31EA                          __ptext58 5BB4  
                        __ptext91 5AC2                          __ptext83 53E4  
                        __ptext75 5EDC                          __ptext67 490C  
                        __ptext59 3F7A                          __ptext92 4E2A  
                        __ptext84 502C                          __ptext76 60A2  
                        __ptext68 6066                          __ptext93 4B7E  
                        __ptext85 4F64                          __ptext77 5EF4  
                        __ptext69 5C3A                          __ptext94 5568  
                        __ptext86 5A90                          __ptext78 2694  
                        __ptext95 40DE                          __ptext87 5DC4  
                        __ptext79 5342                          __ptext96 2C96  
                        __ptext88 4B04                          __ptext97 6004  
                        __ptext89 5D66                          __ptext98 2F52  
                        __ptext99 44AC                      _SSP1CON1bits 000FC6  
                __size_of_reverse 0054                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 0068                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                ?_Sensor_Observe2 0001                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 0079  
                 ?i2_Byte_GetZone 0001                          _countOff 01ED  
                   __size_of_STP1 0008                     __size_of_STP2 0008  
                   __size_of_STP3 0008                     __size_of_STP4 0008  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 5A5C                 HMI_SetSegments@in 0064  
           Button_Init@pThreshold 009D                     __size_of_Turn 0058  
                   __size_of_main 078E                     __size_of_itos 00BE  
               Byte_GetPair@pPair 006B                          _readings 0200  
          __end_of_Console_Render 2694          __size_of_Reset_variables 004C  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
              __end_of_eusartSend 6020                      _Port_GetQuad 585C  
             __end_of_MXK_Release 5E7C                    _MXK_TestButton 5FB0  
         _InitSerialCommunication 5DA6                     i2_Byte_SetBit 551C  
             i2Word_GetPair@pPair 000F         __end_of_MXK_BlockSwitchTo 59BC  
        ?_Console_IncrementCursor 0001              __size_of_Timer2_Init 0146  
                        int$flags 0051              __size_of_Timer0_Stop 0006  
                    _Port_SetType 2310                      Port_Set@Type 0086  
      __size_of_GetPortProperties 0088            __size_of_LCD_DrawField 007E  
               ??_Configure_GPIOs 0095                         printf@val 007E  
                    _SSP1STATbits 000FC7                          main@left 00E2  
                        main@down 00E0                    Timer0_Init@DIV 0104  
                  Timer0_Init@PRE 003A                      _SSP2STATbits 000F6D  
                        exp@coeff FE23                        _LED_Toggle 579E  
                        log@coeff FE4B                        _HMI_GetBar 609C  
            Button_Init@pGetState 00A2            PortProperty_Valid@Pair 0085  
                ??_Port_TogglePin 0077                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2            PortProperty_Valid@pPin 0072  
                     ??_eval_poly 00A7                        _HMI_SetBar 605C  
                      _HMI_Render 59BC                  Byte_SetZone@MASK 006A  
                     i2_MXK_Queue 6020                    Timer2_Init@DIV 0100  
                  Timer2_Init@PRE 0039                  Byte_SetZone@pMax 0062  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 003A  
                     ?_ADCAverage 0001              Button_Init@pFunction 00A5  
                        itos@Data 0070                       ??_eusartRec 0060  
              LCD_FillRectangle@i 0075                LCD_FillRectangle@j 0076  
            __size_of_Port_SetPin 00B4                          intlevel2 0000  
                    reverse@input 0060                       _numReadings 01F1  
          __size_of_HMI_DIPSwitch 0014                  ___lwmod@dividend 0067  
                ___lldiv@dividend 0060            __end_of_MXK_TestButton 5FC4  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001A  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 003A  
                  _SPI_DisableISR 5C3A                   Port_Init@pInput 00A0  
                        printf@ap 007C                       _thisReading 0124  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 6052  
                ?_HMI_SetSegments 0061           Console_MakeField@Column 006C  
             main@Target_Distance 00E4             __size_of_SPI_MaxSpeed 0068  
                   SPI_DCS@pInput 0060             __size_of_SPI_MinSpeed 0068  
                 ??_MXK_DIPSwitch 0066             __size_ofi2_Motor_Step 0100  
         Console_MakeField@pInput 006B                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 0068                     ??_GetPortPORT 0062  
                 ___lwmod@divisor 0069                     ??_GetPortTRIS 0062  
               ??_Closest_Object2 00D9                Word_SetPair@pInput 006F  
                 ___lwmod@counter 006B                Word_SetPair@pValue 0072  
                     _MXK_Dequeue 5A28              __size_of_SteppingCCW 004A  
                  LED_Toggle@pLED 0078                     ___fladd@signs 009B  
                   _LCD_DrawField 4990                  _Port_SetQuadType 1F28  
                     _MXK_Release 5E64         __size_of_Console_FormFeed 006C  
                    _MXK_SwitchTo 58D6             __size_of_Word_GetPair 0032  
              Byte_GetZone@Offset 0067                     ?_Console_Init 0001  
               Word_SetPair@pPair 0071                  ??_Closest_Object 00D9  
                 _Port_SetPinType 2694                      ___fladd@aexp 009C  
                    ___fladd@bexp 009D           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 0068         ??_InitSerialCommunication 0060  
              Byte_GetZone@pChunk 0063                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 5DFC                Byte_GetZone@pInput 0060  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 5246  
           __size_of_Word_SetPair 003A            __end_of_SPI_DisableISR 5C62  
                    _SPI_MaxSpeed 4E94                      _SPI_MinSpeed 4EFC  
              Port_Set@TypeActual 0084                        Drive@Speed 0061  
>>>>>>> fc987f5a21ac58e0a84d8ea0a5f91bc3b9e3a42b
