

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed May 16 13:57:44 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,inline
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1,group=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1,group=1
   144                           	psect	text125,global,reloc=2,class=CODE,delta=1,group=1
   145                           	psect	text126,global,reloc=2,class=CODE,delta=1,group=1
   146                           	psect	text127,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   148                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   150                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   151                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text138,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text139,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text140,global,reloc=2,class=CODE,delta=1
   160                           	psect	text141,global,reloc=2,class=CODE,delta=1
   161                           	psect	text142,global,reloc=2,class=CODE,delta=1
   162                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text145,global,reloc=2,class=CODE,delta=1
   165                           	psect	text146,global,reloc=2,class=CODE,delta=1
   166                           	psect	text147,global,reloc=2,class=CODE,delta=1
   167                           	psect	text148,global,reloc=2,class=CODE,delta=1
   168                           	psect	text149,global,reloc=2,class=CODE,delta=1
   169                           	psect	text150,global,reloc=2,class=CODE,delta=1
   170                           	psect	text151,global,reloc=2,class=CODE,delta=1
   171                           	psect	text152,global,reloc=2,class=CODE,delta=1
   172                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   173                           	psect	text154,global,reloc=2,class=CODE,delta=1
   174                           	psect	text155,global,reloc=2,class=CODE,delta=1
   175                           	psect	text156,global,reloc=2,class=CODE,delta=1
   176                           	psect	text157,global,reloc=2,class=CODE,delta=1
   177                           	psect	text158,global,reloc=2,class=CODE,delta=1
   178                           	psect	text159,global,reloc=2,class=CODE,delta=1
   179                           	psect	text160,global,reloc=2,class=CODE,delta=1
   180                           	psect	text161,global,reloc=2,class=CODE,delta=1,inline
   181                           	psect	text162,global,reloc=2,class=CODE,delta=1
   182                           	psect	text163,global,reloc=2,class=CODE,delta=1
   183                           	psect	text164,global,reloc=2,class=CODE,delta=1
   184                           	psect	text165,global,reloc=2,class=CODE,delta=1
   185                           	psect	text166,global,reloc=2,class=CODE,delta=1
   186                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   187                           	psect	text167,global,reloc=2,class=CODE,delta=1
   188                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   189                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   190  0000                     
   191                           ; Version 1.45
   192                           ; Generated 16/11/2017 GMT
   193                           ; 
   194                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   195                           ; All rights reserved.
   196                           ; 
   197                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   198                           ; 
   199                           ; Redistribution and use in source and binary forms, with or without modification, are
   200                           ; permitted provided that the following conditions are met:
   201                           ; 
   202                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   203                           ;        conditions and the following disclaimer.
   204                           ; 
   205                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   206                           ;        of conditions and the following disclaimer in the documentation and/or other
   207                           ;        materials provided with the distribution.
   208                           ; 
   209                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   210                           ;        software without specific prior written permission.
   211                           ; 
   212                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   213                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   214                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   215                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   216                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   217                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   218                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   219                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   220                           ; 
   221                           ; 
   222                           ; Code-generator required, PIC18F67J50 Definitions
   223                           ; 
   224                           ; SFR Addresses
   225  0000                     
   226                           	psect	idataCOMRAM
   227  01607A                     __pidataCOMRAM:
   228                           	opt stack 0
   229                           
   230                           ;initializer for _gCursor
   231  01607A  0006               	dw	6
   232  01607C  0006               	dw	6
   233                           
   234                           ;initializer for _Low_Sensor
   235  01607E  2710               	dw	10000
   236                           
   237                           ;initializer for _Bus_State
   238  016080  01                 	db	1
   239                           
   240                           ;initializer for _change
   241  016081  01                 	db	1
   242                           
   243                           ;initializer for _l
   244  016082  80                 	db	128
   245                           
   246                           ;initializer for _w
   247  016083  80                 	db	128
   248                           
   249                           	psect	idataBANK1
   250  015F3E                     __pidataBANK1:
   251                           	opt stack 0
   252                           
   253                           ;initializer for Console_Render@F6956
   254  015F3E  0006               	dw	6
   255  015F40  0006               	dw	6
   256                           
   257                           ;initializer for _gLineSize
   258  015F42  0080               	dw	128
   259  015F44  0007               	dw	7
   260                           
   261                           ;initializer for _gCharSize
   262  015F46  0005               	dw	5
   263  015F48  0007               	dw	7
   264                           
   265                           ;initializer for _countOff
   266  015F4A  00F8               	dw	248
   267                           
   268                           ;initializer for _countOn
   269  015F4C  007C               	dw	124
   270                           
   271                           ;initializer for _numReadings
   272  015F4E  0032               	dw	50
   273                           
   274                           ;initializer for _gForecolour
   275  015F50  FFFF               	dw	65535
   276                           
   277                           ;initializer for _A
   278  015F52  41                 	db	65
   279                           
   280                           ;initializer for _a
   281  015F53  61                 	db	97
   282                           
   283                           ;initializer for _zero
   284  015F54  30                 	db	48
   285                           
   286                           	psect	mediumconst
   287  00FB56                     __pmediumconst:
   288                           	opt stack 0
   289  00FB56  00                 	db	0
   290  00FB57                     _InitList:
   291                           	opt stack 0
   292  00FB57  1100               	dw	4352
   293  00FB59  0080               	dw	128
   294  00FB5B  012C               	dw	300
   295  00FB5D  B100               	dw	45312
   296  00FB5F  0002               	dw	2
   297  00FB61  0035               	dw	53
   298  00FB63  0036               	dw	54
   299  00FB65  B200               	dw	45568
   300  00FB67  0002               	dw	2
   301  00FB69  0035               	dw	53
   302  00FB6B  0036               	dw	54
   303  00FB6D  B300               	dw	45824
   304  00FB6F  0002               	dw	2
   305  00FB71  0035               	dw	53
   306  00FB73  0036               	dw	54
   307  00FB75  0002               	dw	2
   308  00FB77  0035               	dw	53
   309  00FB79  0036               	dw	54
   310  00FB7B  B400               	dw	46080
   311  00FB7D  0000               	dw	0
   312  00FB7F  C000               	dw	49152
   313  00FB81  00A2               	dw	162
   314  00FB83  0002               	dw	2
   315  00FB85  0084               	dw	132
   316  00FB87  C100               	dw	49408
   317  00FB89  00C5               	dw	197
   318  00FB8B  C200               	dw	49664
   319  00FB8D  000D               	dw	13
   320  00FB8F  0000               	dw	0
   321  00FB91  C300               	dw	49920
   322  00FB93  008D               	dw	141
   323  00FB95  002A               	dw	42
   324  00FB97  C400               	dw	50176
   325  00FB99  008D               	dw	141
   326  00FB9B  00EE               	dw	238
   327  00FB9D  C500               	dw	50432
   328  00FB9F  000A               	dw	10
   329  00FBA1  3600               	dw	13824
   330  00FBA3  00C8               	dw	200
   331  00FBA5  E000               	dw	57344
   332  00FBA7  0012               	dw	18
   333  00FBA9  001C               	dw	28
   334  00FBAB  0010               	dw	16
   335  00FBAD  0018               	dw	24
   336  00FBAF  0033               	dw	51
   337  00FBB1  002C               	dw	44
   338  00FBB3  0025               	dw	37
   339  00FBB5  0028               	dw	40
   340  00FBB7  0028               	dw	40
   341  00FBB9  0027               	dw	39
   342  00FBBB  002F               	dw	47
   343  00FBBD  003C               	dw	60
   344  00FBBF  0000               	dw	0
   345  00FBC1  0003               	dw	3
   346  00FBC3  0003               	dw	3
   347  00FBC5  0010               	dw	16
   348  00FBC7  0080               	dw	128
   349  00FBC9  0078               	dw	120
   350  00FBCB  E100               	dw	57600
   351  00FBCD  0012               	dw	18
   352  00FBCF  001C               	dw	28
   353  00FBD1  0010               	dw	16
   354  00FBD3  0018               	dw	24
   355  00FBD5  002D               	dw	45
   356  00FBD7  0028               	dw	40
   357  00FBD9  0023               	dw	35
   358  00FBDB  0028               	dw	40
   359  00FBDD  0028               	dw	40
   360  00FBDF  0026               	dw	38
   361  00FBE1  002F               	dw	47
   362  00FBE3  003B               	dw	59
   363  00FBE5  0000               	dw	0
   364  00FBE7  0003               	dw	3
   365  00FBE9  0003               	dw	3
   366  00FBEB  0010               	dw	16
   367  00FBED  3A00               	dw	14848
   368  00FBEF  0005               	dw	5
   369  00FBF1  2A00               	dw	10752
   370  00FBF3  0000               	dw	0
   371  00FBF5  0002               	dw	2
   372  00FBF7  0000               	dw	0
   373  00FBF9  0081               	dw	129
   374  00FBFB  2B00               	dw	11008
   375  00FBFD  0000               	dw	0
   376  00FBFF  0003               	dw	3
   377  00FC01  0000               	dw	0
   378  00FC03  00A2               	dw	162
   379  00FC05  2900               	dw	10496
   380  00FC07  2C00               	dw	11264
   381  00FC09                     __end_of_InitList:
   382                           	opt stack 0
   383  00FC09                     Timer0_Init@PRESCALE:
   384                           	opt stack 0
   385  00FC09  0002               	dw	2
   386  00FC0B  0004               	dw	4
   387  00FC0D  0008               	dw	8
   388  00FC0F  0010               	dw	16
   389  00FC11  0020               	dw	32
   390  00FC13  0040               	dw	64
   391  00FC15  0080               	dw	128
   392  00FC17  0100               	dw	256
   393  00FC19                     __end_ofTimer0_Init@PRESCALE:
   394                           	opt stack 0
   395  00FC19                     PortProperty_Valid@F6830:
   396                           	opt stack 0
   397  00FC19  00                 	db	0
   398  00FC1A  01                 	db	1
   399  00FC1B  02                 	db	2
   400  00FC1C  00                 	db	0
   401  00FC1D  01                 	db	1
   402  00FC1E  00                 	db	0
   403  00FC1F  01                 	db	1
   404  00FC20  00                 	db	0
   405  00FC21  02                 	db	2
   406  00FC22  02                 	db	2
   407  00FC23  00                 	db	0
   408  00FC24  00                 	db	0
   409  00FC25  03                 	db	3
   410  00FC26  03                 	db	3
   411  00FC27  03                 	db	3
   412  00FC28  00                 	db	0
   413  00FC29                     __end_ofPortProperty_Valid@F6830:
   414                           	opt stack 0
   415  00FC29                     _dpowers:
   416                           	opt stack 0
   417  00FC29  0001               	dw	1
   418  00FC2B  000A               	dw	10
   419  00FC2D  0064               	dw	100
   420  00FC2F  03E8               	dw	1000
   421  00FC31  2710               	dw	10000
   422  00FC33                     __end_of_dpowers:
   423                           	opt stack 0
   424  00FC33                     _MASKS:
   425                           	opt stack 0
   426  00FC33  00                 	db	0
   427  00FC34  01                 	db	1
   428  00FC35  03                 	db	3
   429  00FC36  07                 	db	7
   430  00FC37  0F                 	db	15
   431  00FC38  1F                 	db	31
   432  00FC39  3F                 	db	63
   433  00FC3A  7F                 	db	127
   434  00FC3B  FF                 	db	255
   435  00FC3C                     __end_of_MASKS:
   436                           	opt stack 0
   437  00FC3C                     HMI_SetButton@F7213:
   438                           	opt stack 0
   439  00FC3C  00                 	db	0
   440  00FC3D  02                 	db	2
   441  00FC3E  01                 	db	1
   442  00FC3F  03                 	db	3
   443  00FC40                     __end_ofHMI_SetButton@F7213:
   444                           	opt stack 0
   445  00FC40                     Timer2_Init@PRESCALE:
   446                           	opt stack 0
   447  00FC40  01                 	db	1
   448  00FC41  04                 	db	4
   449  00FC42  10                 	db	16
   450  00FC43                     __end_ofTimer2_Init@PRESCALE:
   451                           	opt stack 0
   452  00FC43                     _Font5x7:
   453                           	opt stack 0
   454  00FC43  00                 	db	0
   455  00FC44  00                 	db	0
   456  00FC45  00                 	db	0
   457  00FC46  00                 	db	0
   458  00FC47  00                 	db	0
   459  00FC48  00                 	db	0
   460  00FC49  00                 	db	0
   461  00FC4A  5F                 	db	95
   462  00FC4B  00                 	db	0
   463  00FC4C  00                 	db	0
   464  00FC4D  00                 	db	0
   465  00FC4E  07                 	db	7
   466  00FC4F  00                 	db	0
   467  00FC50  07                 	db	7
   468  00FC51  00                 	db	0
   469  00FC52  14                 	db	20
   470  00FC53  7F                 	db	127
   471  00FC54  14                 	db	20
   472  00FC55  7F                 	db	127
   473  00FC56  14                 	db	20
   474  00FC57  24                 	db	36
   475  00FC58  2A                 	db	42
   476  00FC59  7F                 	db	127
   477  00FC5A  2A                 	db	42
   478  00FC5B  12                 	db	18
   479  00FC5C  23                 	db	35
   480  00FC5D  13                 	db	19
   481  00FC5E  08                 	db	8
   482  00FC5F  64                 	db	100
   483  00FC60  62                 	db	98
   484  00FC61  36                 	db	54
   485  00FC62  49                 	db	73
   486  00FC63  55                 	db	85
   487  00FC64  22                 	db	34
   488  00FC65  50                 	db	80
   489  00FC66  00                 	db	0
   490  00FC67  05                 	db	5
   491  00FC68  03                 	db	3
   492  00FC69  00                 	db	0
   493  00FC6A  00                 	db	0
   494  00FC6B  00                 	db	0
   495  00FC6C  1C                 	db	28
   496  00FC6D  22                 	db	34
   497  00FC6E  41                 	db	65
   498  00FC6F  00                 	db	0
   499  00FC70  00                 	db	0
   500  00FC71  41                 	db	65
   501  00FC72  22                 	db	34
   502  00FC73  1C                 	db	28
   503  00FC74  00                 	db	0
   504  00FC75  08                 	db	8
   505  00FC76  2A                 	db	42
   506  00FC77  1C                 	db	28
   507  00FC78  2A                 	db	42
   508  00FC79  08                 	db	8
   509  00FC7A  08                 	db	8
   510  00FC7B  08                 	db	8
   511  00FC7C  3E                 	db	62
   512  00FC7D  08                 	db	8
   513  00FC7E  08                 	db	8
   514  00FC7F  00                 	db	0
   515  00FC80  50                 	db	80
   516  00FC81  30                 	db	48
   517  00FC82  00                 	db	0
   518  00FC83  00                 	db	0
   519  00FC84  08                 	db	8
   520  00FC85  08                 	db	8
   521  00FC86  08                 	db	8
   522  00FC87  08                 	db	8
   523  00FC88  08                 	db	8
   524  00FC89  00                 	db	0
   525  00FC8A  60                 	db	96
   526  00FC8B  60                 	db	96
   527  00FC8C  00                 	db	0
   528  00FC8D  00                 	db	0
   529  00FC8E  20                 	db	32
   530  00FC8F  10                 	db	16
   531  00FC90  08                 	db	8
   532  00FC91  04                 	db	4
   533  00FC92  02                 	db	2
   534  00FC93  3E                 	db	62
   535  00FC94  51                 	db	81
   536  00FC95  49                 	db	73
   537  00FC96  45                 	db	69
   538  00FC97  3E                 	db	62
   539  00FC98  00                 	db	0
   540  00FC99  42                 	db	66
   541  00FC9A  7F                 	db	127
   542  00FC9B  40                 	db	64
   543  00FC9C  00                 	db	0
   544  00FC9D  42                 	db	66
   545  00FC9E  61                 	db	97
   546  00FC9F  51                 	db	81
   547  00FCA0  49                 	db	73
   548  00FCA1  46                 	db	70
   549  00FCA2  21                 	db	33
   550  00FCA3  41                 	db	65
   551  00FCA4  45                 	db	69
   552  00FCA5  4B                 	db	75
   553  00FCA6  31                 	db	49
   554  00FCA7  18                 	db	24
   555  00FCA8  14                 	db	20
   556  00FCA9  12                 	db	18
   557  00FCAA  7F                 	db	127
   558  00FCAB  10                 	db	16
   559  00FCAC  27                 	db	39
   560  00FCAD  45                 	db	69
   561  00FCAE  45                 	db	69
   562  00FCAF  45                 	db	69
   563  00FCB0  39                 	db	57
   564  00FCB1  3C                 	db	60
   565  00FCB2  4A                 	db	74
   566  00FCB3  49                 	db	73
   567  00FCB4  49                 	db	73
   568  00FCB5  30                 	db	48
   569  00FCB6  01                 	db	1
   570  00FCB7  71                 	db	113
   571  00FCB8  09                 	db	9
   572  00FCB9  05                 	db	5
   573  00FCBA  03                 	db	3
   574  00FCBB  36                 	db	54
   575  00FCBC  49                 	db	73
   576  00FCBD  49                 	db	73
   577  00FCBE  49                 	db	73
   578  00FCBF  36                 	db	54
   579  00FCC0  06                 	db	6
   580  00FCC1  49                 	db	73
   581  00FCC2  49                 	db	73
   582  00FCC3  29                 	db	41
   583  00FCC4  1E                 	db	30
   584  00FCC5  00                 	db	0
   585  00FCC6  36                 	db	54
   586  00FCC7  36                 	db	54
   587  00FCC8  00                 	db	0
   588  00FCC9  00                 	db	0
   589  00FCCA  00                 	db	0
   590  00FCCB  56                 	db	86
   591  00FCCC  36                 	db	54
   592  00FCCD  00                 	db	0
   593  00FCCE  00                 	db	0
   594  00FCCF  00                 	db	0
   595  00FCD0  08                 	db	8
   596  00FCD1  14                 	db	20
   597  00FCD2  22                 	db	34
   598  00FCD3  41                 	db	65
   599  00FCD4  14                 	db	20
   600  00FCD5  14                 	db	20
   601  00FCD6  14                 	db	20
   602  00FCD7  14                 	db	20
   603  00FCD8  14                 	db	20
   604  00FCD9  41                 	db	65
   605  00FCDA  22                 	db	34
   606  00FCDB  14                 	db	20
   607  00FCDC  08                 	db	8
   608  00FCDD  00                 	db	0
   609  00FCDE  02                 	db	2
   610  00FCDF  01                 	db	1
   611  00FCE0  51                 	db	81
   612  00FCE1  09                 	db	9
   613  00FCE2  06                 	db	6
   614  00FCE3  32                 	db	50
   615  00FCE4  49                 	db	73
   616  00FCE5  79                 	db	121
   617  00FCE6  41                 	db	65
   618  00FCE7  3E                 	db	62
   619  00FCE8  7E                 	db	126
   620  00FCE9  11                 	db	17
   621  00FCEA  11                 	db	17
   622  00FCEB  11                 	db	17
   623  00FCEC  7E                 	db	126
   624  00FCED  7F                 	db	127
   625  00FCEE  49                 	db	73
   626  00FCEF  49                 	db	73
   627  00FCF0  49                 	db	73
   628  00FCF1  36                 	db	54
   629  00FCF2  3E                 	db	62
   630  00FCF3  41                 	db	65
   631  00FCF4  41                 	db	65
   632  00FCF5  41                 	db	65
   633  00FCF6  22                 	db	34
   634  00FCF7  7F                 	db	127
   635  00FCF8  41                 	db	65
   636  00FCF9  41                 	db	65
   637  00FCFA  22                 	db	34
   638  00FCFB  1C                 	db	28
   639  00FCFC  7F                 	db	127
   640  00FCFD  49                 	db	73
   641  00FCFE  49                 	db	73
   642  00FCFF  49                 	db	73
   643  00FD00  41                 	db	65
   644  00FD01  7F                 	db	127
   645  00FD02  09                 	db	9
   646  00FD03  09                 	db	9
   647  00FD04  01                 	db	1
   648  00FD05  01                 	db	1
   649  00FD06  3E                 	db	62
   650  00FD07  41                 	db	65
   651  00FD08  41                 	db	65
   652  00FD09  51                 	db	81
   653  00FD0A  32                 	db	50
   654  00FD0B  7F                 	db	127
   655  00FD0C  08                 	db	8
   656  00FD0D  08                 	db	8
   657  00FD0E  08                 	db	8
   658  00FD0F  7F                 	db	127
   659  00FD10  00                 	db	0
   660  00FD11  41                 	db	65
   661  00FD12  7F                 	db	127
   662  00FD13  41                 	db	65
   663  00FD14  00                 	db	0
   664  00FD15  20                 	db	32
   665  00FD16  40                 	db	64
   666  00FD17  41                 	db	65
   667  00FD18  3F                 	db	63
   668  00FD19  01                 	db	1
   669  00FD1A  7F                 	db	127
   670  00FD1B  08                 	db	8
   671  00FD1C  14                 	db	20
   672  00FD1D  22                 	db	34
   673  00FD1E  41                 	db	65
   674  00FD1F  7F                 	db	127
   675  00FD20  40                 	db	64
   676  00FD21  40                 	db	64
   677  00FD22  40                 	db	64
   678  00FD23  40                 	db	64
   679  00FD24  7F                 	db	127
   680  00FD25  02                 	db	2
   681  00FD26  04                 	db	4
   682  00FD27  02                 	db	2
   683  00FD28  7F                 	db	127
   684  00FD29  7F                 	db	127
   685  00FD2A  04                 	db	4
   686  00FD2B  08                 	db	8
   687  00FD2C  10                 	db	16
   688  00FD2D  7F                 	db	127
   689  00FD2E  3E                 	db	62
   690  00FD2F  41                 	db	65
   691  00FD30  41                 	db	65
   692  00FD31  41                 	db	65
   693  00FD32  3E                 	db	62
   694  00FD33  7F                 	db	127
   695  00FD34  09                 	db	9
   696  00FD35  09                 	db	9
   697  00FD36  09                 	db	9
   698  00FD37  06                 	db	6
   699  00FD38  3E                 	db	62
   700  00FD39  41                 	db	65
   701  00FD3A  51                 	db	81
   702  00FD3B  21                 	db	33
   703  00FD3C  5E                 	db	94
   704  00FD3D  7F                 	db	127
   705  00FD3E  09                 	db	9
   706  00FD3F  19                 	db	25
   707  00FD40  29                 	db	41
   708  00FD41  46                 	db	70
   709  00FD42  46                 	db	70
   710  00FD43  49                 	db	73
   711  00FD44  49                 	db	73
   712  00FD45  49                 	db	73
   713  00FD46  31                 	db	49
   714  00FD47  01                 	db	1
   715  00FD48  01                 	db	1
   716  00FD49  7F                 	db	127
   717  00FD4A  01                 	db	1
   718  00FD4B  01                 	db	1
   719  00FD4C  3F                 	db	63
   720  00FD4D  40                 	db	64
   721  00FD4E  40                 	db	64
   722  00FD4F  40                 	db	64
   723  00FD50  3F                 	db	63
   724  00FD51  1F                 	db	31
   725  00FD52  20                 	db	32
   726  00FD53  40                 	db	64
   727  00FD54  20                 	db	32
   728  00FD55  1F                 	db	31
   729  00FD56  7F                 	db	127
   730  00FD57  20                 	db	32
   731  00FD58  18                 	db	24
   732  00FD59  20                 	db	32
   733  00FD5A  7F                 	db	127
   734  00FD5B  63                 	db	99
   735  00FD5C  14                 	db	20
   736  00FD5D  08                 	db	8
   737  00FD5E  14                 	db	20
   738  00FD5F  63                 	db	99
   739  00FD60  03                 	db	3
   740  00FD61  04                 	db	4
   741  00FD62  78                 	db	120
   742  00FD63  04                 	db	4
   743  00FD64  03                 	db	3
   744  00FD65  61                 	db	97
   745  00FD66  51                 	db	81
   746  00FD67  49                 	db	73
   747  00FD68  45                 	db	69
   748  00FD69  43                 	db	67
   749  00FD6A  00                 	db	0
   750  00FD6B  00                 	db	0
   751  00FD6C  7F                 	db	127
   752  00FD6D  41                 	db	65
   753  00FD6E  41                 	db	65
   754  00FD6F  02                 	db	2
   755  00FD70  04                 	db	4
   756  00FD71  08                 	db	8
   757  00FD72  10                 	db	16
   758  00FD73  20                 	db	32
   759  00FD74  41                 	db	65
   760  00FD75  41                 	db	65
   761  00FD76  7F                 	db	127
   762  00FD77  00                 	db	0
   763  00FD78  00                 	db	0
   764  00FD79  04                 	db	4
   765  00FD7A  02                 	db	2
   766  00FD7B  01                 	db	1
   767  00FD7C  02                 	db	2
   768  00FD7D  04                 	db	4
   769  00FD7E  40                 	db	64
   770  00FD7F  40                 	db	64
   771  00FD80  40                 	db	64
   772  00FD81  40                 	db	64
   773  00FD82  40                 	db	64
   774  00FD83  00                 	db	0
   775  00FD84  01                 	db	1
   776  00FD85  02                 	db	2
   777  00FD86  04                 	db	4
   778  00FD87  00                 	db	0
   779  00FD88  20                 	db	32
   780  00FD89  54                 	db	84
   781  00FD8A  54                 	db	84
   782  00FD8B  54                 	db	84
   783  00FD8C  78                 	db	120
   784  00FD8D  7F                 	db	127
   785  00FD8E  48                 	db	72
   786  00FD8F  44                 	db	68
   787  00FD90  44                 	db	68
   788  00FD91  38                 	db	56
   789  00FD92  38                 	db	56
   790  00FD93  44                 	db	68
   791  00FD94  44                 	db	68
   792  00FD95  44                 	db	68
   793  00FD96  20                 	db	32
   794  00FD97  38                 	db	56
   795  00FD98  44                 	db	68
   796  00FD99  44                 	db	68
   797  00FD9A  48                 	db	72
   798  00FD9B  7F                 	db	127
   799  00FD9C  38                 	db	56
   800  00FD9D  54                 	db	84
   801  00FD9E  54                 	db	84
   802  00FD9F  54                 	db	84
   803  00FDA0  18                 	db	24
   804  00FDA1  08                 	db	8
   805  00FDA2  7E                 	db	126
   806  00FDA3  09                 	db	9
   807  00FDA4  01                 	db	1
   808  00FDA5  02                 	db	2
   809  00FDA6  08                 	db	8
   810  00FDA7  14                 	db	20
   811  00FDA8  54                 	db	84
   812  00FDA9  54                 	db	84
   813  00FDAA  3C                 	db	60
   814  00FDAB  7F                 	db	127
   815  00FDAC  08                 	db	8
   816  00FDAD  04                 	db	4
   817  00FDAE  04                 	db	4
   818  00FDAF  78                 	db	120
   819  00FDB0  00                 	db	0
   820  00FDB1  44                 	db	68
   821  00FDB2  7D                 	db	125
   822  00FDB3  40                 	db	64
   823  00FDB4  00                 	db	0
   824  00FDB5  20                 	db	32
   825  00FDB6  40                 	db	64
   826  00FDB7  44                 	db	68
   827  00FDB8  3D                 	db	61
   828  00FDB9  00                 	db	0
   829  00FDBA  00                 	db	0
   830  00FDBB  7F                 	db	127
   831  00FDBC  10                 	db	16
   832  00FDBD  28                 	db	40
   833  00FDBE  44                 	db	68
   834  00FDBF  00                 	db	0
   835  00FDC0  41                 	db	65
   836  00FDC1  7F                 	db	127
   837  00FDC2  40                 	db	64
   838  00FDC3  00                 	db	0
   839  00FDC4  7C                 	db	124
   840  00FDC5  04                 	db	4
   841  00FDC6  18                 	db	24
   842  00FDC7  04                 	db	4
   843  00FDC8  78                 	db	120
   844  00FDC9  7C                 	db	124
   845  00FDCA  08                 	db	8
   846  00FDCB  04                 	db	4
   847  00FDCC  04                 	db	4
   848  00FDCD  78                 	db	120
   849  00FDCE  38                 	db	56
   850  00FDCF  44                 	db	68
   851  00FDD0  44                 	db	68
   852  00FDD1  44                 	db	68
   853  00FDD2  38                 	db	56
   854  00FDD3  7C                 	db	124
   855  00FDD4  14                 	db	20
   856  00FDD5  14                 	db	20
   857  00FDD6  14                 	db	20
   858  00FDD7  08                 	db	8
   859  00FDD8  08                 	db	8
   860  00FDD9  14                 	db	20
   861  00FDDA  14                 	db	20
   862  00FDDB  18                 	db	24
   863  00FDDC  7C                 	db	124
   864  00FDDD  7C                 	db	124
   865  00FDDE  08                 	db	8
   866  00FDDF  04                 	db	4
   867  00FDE0  04                 	db	4
   868  00FDE1  08                 	db	8
   869  00FDE2  48                 	db	72
   870  00FDE3  54                 	db	84
   871  00FDE4  54                 	db	84
   872  00FDE5  54                 	db	84
   873  00FDE6  20                 	db	32
   874  00FDE7  04                 	db	4
   875  00FDE8  3F                 	db	63
   876  00FDE9  44                 	db	68
   877  00FDEA  40                 	db	64
   878  00FDEB  20                 	db	32
   879  00FDEC  3C                 	db	60
   880  00FDED  40                 	db	64
   881  00FDEE  40                 	db	64
   882  00FDEF  20                 	db	32
   883  00FDF0  7C                 	db	124
   884  00FDF1  1C                 	db	28
   885  00FDF2  20                 	db	32
   886  00FDF3  40                 	db	64
   887  00FDF4  20                 	db	32
   888  00FDF5  1C                 	db	28
   889  00FDF6  3C                 	db	60
   890  00FDF7  40                 	db	64
   891  00FDF8  30                 	db	48
   892  00FDF9  40                 	db	64
   893  00FDFA  3C                 	db	60
   894  00FDFB  44                 	db	68
   895  00FDFC  28                 	db	40
   896  00FDFD  10                 	db	16
   897  00FDFE  28                 	db	40
   898  00FDFF  44                 	db	68
   899  00FE00  0C                 	db	12
   900  00FE01  50                 	db	80
   901  00FE02  50                 	db	80
   902  00FE03  50                 	db	80
   903  00FE04  3C                 	db	60
   904  00FE05  44                 	db	68
   905  00FE06  64                 	db	100
   906  00FE07  54                 	db	84
   907  00FE08  4C                 	db	76
   908  00FE09  44                 	db	68
   909  00FE0A  00                 	db	0
   910  00FE0B  08                 	db	8
   911  00FE0C  36                 	db	54
   912  00FE0D  41                 	db	65
   913  00FE0E  00                 	db	0
   914  00FE0F  00                 	db	0
   915  00FE10  00                 	db	0
   916  00FE11  7F                 	db	127
   917  00FE12  00                 	db	0
   918  00FE13  00                 	db	0
   919  00FE14  00                 	db	0
   920  00FE15  41                 	db	65
   921  00FE16  36                 	db	54
   922  00FE17  08                 	db	8
   923  00FE18  00                 	db	0
   924  00FE19  08                 	db	8
   925  00FE1A  08                 	db	8
   926  00FE1B  2A                 	db	42
   927  00FE1C  1C                 	db	28
   928  00FE1D  08                 	db	8
   929  00FE1E  08                 	db	8
   930  00FE1F  1C                 	db	28
   931  00FE20  2A                 	db	42
   932  00FE21  08                 	db	8
   933  00FE22  08                 	db	8
   934  00FE23                     __end_of_Font5x7:
   935                           	opt stack 0
   936  00FE23                     exp@coeff:
   937                           	opt stack 0
   938  00FE23  0000               	dw	0
   939  00FE25  3F80               	dw	16256
   940  00FE27  7218               	dw	29208
   941  00FE29  3F31               	dw	16177
   942  00FE2B  FDF0               	dw	65008
   943  00FE2D  3E75               	dw	15989
   944  00FE2F  5847               	dw	22599
   945  00FE31  3D63               	dw	15715
   946  00FE33  9558               	dw	38232
   947  00FE35  3C1D               	dw	15389
   948  00FE37  C482               	dw	50306
   949  00FE39  3AAE               	dw	15022
   950  00FE3B  78A8               	dw	30888
   951  00FE3D  3921               	dw	14625
   952  00FE3F  93EF               	dw	37871
   953  00FE41  3780               	dw	14208
   954  00FE43  92A0               	dw	37536
   955  00FE45  35A7               	dw	13735
   956  00FE47  5646               	dw	22086
   957  00FE49  3415               	dw	13333
   958  00FE4B                     __end_ofexp@coeff:
   959                           	opt stack 0
   960  00FE4B                     log@coeff:
   961                           	opt stack 0
   962  00FE4B  0000               	dw	0
   963  00FE4D  0000               	dw	0
   964  00FE4F  FFC4               	dw	65476
   965  00FE51  3F7F               	dw	16255
   966  00FE53  EF80               	dw	61312
   967  00FE55  BEFF               	dw	48895
   968  00FE57  E190               	dw	57744
   969  00FE59  3EA9               	dw	16041
   970  00FE5B  82EC               	dw	33516
   971  00FE5D  BE76               	dw	48758
   972  00FE5F  AD82               	dw	44418
   973  00FE61  3E2B               	dw	15915
   974  00FE63  3C0E               	dw	15374
   975  00FE65  BDC3               	dw	48579
   976  00FE67  D187               	dw	53639
   977  00FE69  3D13               	dw	15635
   978  00FE6B  7841               	dw	30785
   979  00FE6D  BBD3               	dw	48083
   980  00FE6F                     __end_oflog@coeff:
   981                           	opt stack 0
   982  00FE6F                     _PortG_Property:
   983                           	opt stack 0
   984  00FE6F  FC00               	dw	64512
   985  00FE71                     __end_of_PortG_Property:
   986                           	opt stack 0
   987  00FE71                     _PortF_Property:
   988                           	opt stack 0
   989  00FE71  0FFF               	dw	4095
   990  00FE73                     __end_of_PortF_Property:
   991                           	opt stack 0
   992  00FE73                     _PortE_Property:
   993                           	opt stack 0
   994  00FE73  0000               	dw	0
   995  00FE75                     __end_of_PortE_Property:
   996                           	opt stack 0
   997  00FE75                     _PortD_Property:
   998                           	opt stack 0
   999  00FE75  FFFF               	dw	65535
  1000  00FE77                     __end_of_PortD_Property:
  1001                           	opt stack 0
  1002  00FE77                     _PortC_Property:
  1003                           	opt stack 0
  1004  00FE77  FFF0               	dw	65520
  1005  00FE79                     __end_of_PortC_Property:
  1006                           	opt stack 0
  1007  00FE79                     _PortB_Property:
  1008                           	opt stack 0
  1009  00FE79  FF00               	dw	65280
  1010  00FE7B                     __end_of_PortB_Property:
  1011                           	opt stack 0
  1012  00FE7B                     _PortA_Property:
  1013                           	opt stack 0
  1014  00FE7B  00FF               	dw	255
  1015  00FE7D                     __end_of_PortA_Property:
  1016                           	opt stack 0
  1017  0000                     _ADRES	set	4035
  1018  0000                     _TMR0	set	4054
  1019  0000                     _RCREG1	set	4015
  1020  0000                     _TXREG1	set	4014
  1021  0000                     _SPBRG1	set	4016
  1022  0000                     _TXSTA1bits	set	4013
  1023  0000                     _BAUDCON1bits	set	3966
  1024  0000                     _RCSTA1	set	4012
  1025  0000                     _TXSTA1	set	4013
  1026  0000                     _TRISCbits	set	3988
  1027  0000                     _ADCON0	set	4034
  1028  0000                     _ADCON1	set	4033
  1029  0000                     _PR2	set	4043
  1030  0000                     _T2CONbits	set	4042
  1031  0000                     _T0CONbits	set	4053
  1032  0000                     _RCONbits	set	4048
  1033  0000                     _OSCTUNEbits	set	3995
  1034  0000                     _PIR3	set	4004
  1035  0000                     _PIR2	set	4001
  1036  0000                     _PIR1	set	3998
  1037  0000                     _INTCONbits	set	4082
  1038  0000                     _SSP2CON2bits	set	3947
  1039  0000                     _SSP1CON2bits	set	4037
  1040  0000                     _SSP1ADD	set	4040
  1041  0000                     _ANCON0	set	4033
  1042  0000                     _ADRESL	set	4035
  1043  0000                     _ADRESH	set	4036
  1044  0000                     _ADCON1bits	set	4033
  1045  0000                     _ADCON0bits	set	4034
  1046  0000                     _SSP2CON1bits	set	3948
  1047  0000                     _SSP1CON1bits	set	4038
  1048  0000                     _SSP2STATbits	set	3949
  1049  0000                     _SSP1STATbits	set	4039
  1050  0000                     _PIE3bits	set	4003
  1051  0000                     _PIE1bits	set	3997
  1052  0000                     _PIR3bits	set	4004
  1053  0000                     _PIR1bits	set	3998
  1054  0000                     _IPR3bits	set	4005
  1055  0000                     _IPR1bits	set	3999
  1056  0000                     _PORTFbits	set	3973
  1057  0000                     _SSP2CON2	set	3947
  1058  0000                     _SSP1CON2	set	4037
  1059  0000                     _SSP2BUF	set	3951
  1060  0000                     _SSP2CON1	set	3948
  1061  0000                     _SSP2STAT	set	3949
  1062  0000                     _SSP1BUF	set	4041
  1063  0000                     _SSP1CON1	set	4038
  1064  0000                     _SSP1STAT	set	4039
  1065  0000                     _LATG	set	3983
  1066  0000                     _LATF	set	3982
  1067  0000                     _LATE	set	3981
  1068  0000                     _LATD	set	3980
  1069  0000                     _LATC	set	3979
  1070  0000                     _LATB	set	3978
  1071  0000                     _LATA	set	3977
  1072  0000                     _TRISG	set	3992
  1073  0000                     _TRISF	set	3991
  1074  0000                     _TRISE	set	3990
  1075  0000                     _TRISD	set	3989
  1076  0000                     _TRISC	set	3988
  1077  0000                     _TRISB	set	3987
  1078  0000                     _TRISA	set	3986
  1079  0000                     _PORTG	set	3974
  1080  0000                     _PORTF	set	3973
  1081  0000                     _PORTE	set	3972
  1082  0000                     _PORTD	set	3971
  1083  0000                     _PORTC	set	3970
  1084  0000                     _PORTB	set	3969
  1085  0000                     _PORTA	set	3968
  1086  0000                     _RA3	set	31747
  1087  0000                     _RA2	set	31746
  1088  0000                     _RD7	set	31775
  1089  0000                     _RD5	set	31773
  1090  0000                     _TRISD7	set	31919
  1091  0000                     _TRISD5	set	31917
  1092  0000                     _TRISA3	set	31891
  1093  0000                     _TRISA2	set	31890
  1094  0000                     _GODONE	set	32273
  1095  0000                     _ADON	set	32272
  1096  00FE7D                     STR_33:
  1097  00FE7D  50                 	db	80	;'P'
  1098  00FE7E  72                 	db	114	;'r'
  1099  00FE7F  65                 	db	101	;'e'
  1100  00FE80  73                 	db	115	;'s'
  1101  00FE81  73                 	db	115	;'s'
  1102  00FE82  20                 	db	32
  1103  00FE83  64                 	db	100	;'d'
  1104  00FE84  6F                 	db	111	;'o'
  1105  00FE85  77                 	db	119	;'w'
  1106  00FE86  6E                 	db	110	;'n'
  1107  00FE87  20                 	db	32
  1108  00FE88  66                 	db	102	;'f'
  1109  00FE89  6F                 	db	111	;'o'
  1110  00FE8A  72                 	db	114	;'r'
  1111  00FE8B  0A                 	db	10
  1112  00FE8C  73                 	db	115	;'s'
  1113  00FE8D  71                 	db	113	;'q'
  1114  00FE8E  75                 	db	117	;'u'
  1115  00FE8F  61                 	db	97	;'a'
  1116  00FE90  72                 	db	114	;'r'
  1117  00FE91  65                 	db	101	;'e'
  1118  00FE92  20                 	db	32
  1119  00FE93  64                 	db	100	;'d'
  1120  00FE94  72                 	db	114	;'r'
  1121  00FE95  69                 	db	105	;'i'
  1122  00FE96  76                 	db	118	;'v'
  1123  00FE97  65                 	db	101	;'e'
  1124  00FE98  2C                 	db	44
  1125  00FE99  0A                 	db	10
  1126  00FE9A  00                 	db	0
  1127  00FE9B                     STR_34:
  1128  00FE9B  50                 	db	80	;'P'
  1129  00FE9C  72                 	db	114	;'r'
  1130  00FE9D  65                 	db	101	;'e'
  1131  00FE9E  73                 	db	115	;'s'
  1132  00FE9F  73                 	db	115	;'s'
  1133  00FEA0  20                 	db	32
  1134  00FEA1  75                 	db	117	;'u'
  1135  00FEA2  70                 	db	112	;'p'
  1136  00FEA3  20                 	db	32
  1137  00FEA4  66                 	db	102	;'f'
  1138  00FEA5  6F                 	db	111	;'o'
  1139  00FEA6  72                 	db	114	;'r'
  1140  00FEA7  20                 	db	32
  1141  00FEA8  49                 	db	73	;'I'
  1142  00FEA9  52                 	db	82	;'R'
  1143  00FEAA  20                 	db	32
  1144  00FEAB  73                 	db	115	;'s'
  1145  00FEAC  63                 	db	99	;'c'
  1146  00FEAD  61                 	db	97	;'a'
  1147  00FEAE  6E                 	db	110	;'n'
  1148  00FEAF  20                 	db	32
  1149  00FEB0  6D                 	db	109	;'m'
  1150  00FEB1  6F                 	db	111	;'o'
  1151  00FEB2  64                 	db	100	;'d'
  1152  00FEB3  65                 	db	101	;'e'
  1153  00FEB4  2C                 	db	44
  1154  00FEB5  0A                 	db	10
  1155  00FEB6  00                 	db	0
  1156  00FEB7                     STR_32:
  1157  00FEB7  50                 	db	80	;'P'
  1158  00FEB8  72                 	db	114	;'r'
  1159  00FEB9  65                 	db	101	;'e'
  1160  00FEBA  73                 	db	115	;'s'
  1161  00FEBB  73                 	db	115	;'s'
  1162  00FEBC  20                 	db	32
  1163  00FEBD  72                 	db	114	;'r'
  1164  00FEBE  69                 	db	105	;'i'
  1165  00FEBF  67                 	db	103	;'g'
  1166  00FEC0  68                 	db	104	;'h'
  1167  00FEC1  74                 	db	116	;'t'
  1168  00FEC2  20                 	db	32
  1169  00FEC3  66                 	db	102	;'f'
  1170  00FEC4  6F                 	db	111	;'o'
  1171  00FEC5  72                 	db	114	;'r'
  1172  00FEC6  20                 	db	32
  1173  00FEC7  35                 	db	53	;'5'
  1174  00FEC8  6D                 	db	109	;'m'
  1175  00FEC9  0A                 	db	10
  1176  00FECA  20                 	db	32
  1177  00FECB  64                 	db	100	;'d'
  1178  00FECC  72                 	db	114	;'r'
  1179  00FECD  69                 	db	105	;'i'
  1180  00FECE  76                 	db	118	;'v'
  1181  00FECF  65                 	db	101	;'e'
  1182  00FED0  2C                 	db	44
  1183  00FED1  0A                 	db	10
  1184  00FED2  00                 	db	0
  1185  00FED3                     STR_62:
  1186  00FED3  54                 	db	84	;'T'
  1187  00FED4  68                 	db	104	;'h'
  1188  00FED5  65                 	db	101	;'e'
  1189  00FED6  20                 	db	32
  1190  00FED7  74                 	db	116	;'t'
  1191  00FED8  61                 	db	97	;'a'
  1192  00FED9  72                 	db	114	;'r'
  1193  00FEDA  67                 	db	103	;'g'
  1194  00FEDB  65                 	db	101	;'e'
  1195  00FEDC  74                 	db	116	;'t'
  1196  00FEDD  20                 	db	32
  1197  00FEDE  64                 	db	100	;'d'
  1198  00FEDF  69                 	db	105	;'i'
  1199  00FEE0  73                 	db	115	;'s'
  1200  00FEE1  74                 	db	116	;'t'
  1201  00FEE2  61                 	db	97	;'a'
  1202  00FEE3  6E                 	db	110	;'n'
  1203  00FEE4  63                 	db	99	;'c'
  1204  00FEE5  65                 	db	101	;'e'
  1205  00FEE6  20                 	db	32
  1206  00FEE7  69                 	db	105	;'i'
  1207  00FEE8  73                 	db	115	;'s'
  1208  00FEE9  3A                 	db	58	;':'
  1209  00FEEA  20                 	db	32
  1210  00FEEB  25                 	db	37
  1211  00FEEC  64                 	db	100	;'d'
  1212  00FEED  0A                 	db	10
  1213  00FEEE  00                 	db	0
  1214  00FEEF                     STR_35:
  1215  00FEEF  50                 	db	80	;'P'
  1216  00FEF0  72                 	db	114	;'r'
  1217  00FEF1  65                 	db	101	;'e'
  1218  00FEF2  73                 	db	115	;'s'
  1219  00FEF3  73                 	db	115	;'s'
  1220  00FEF4  20                 	db	32
  1221  00FEF5  6C                 	db	108	;'l'
  1222  00FEF6  65                 	db	101	;'e'
  1223  00FEF7  66                 	db	102	;'f'
  1224  00FEF8  74                 	db	116	;'t'
  1225  00FEF9  20                 	db	32
  1226  00FEFA  66                 	db	102	;'f'
  1227  00FEFB  6F                 	db	111	;'o'
  1228  00FEFC  72                 	db	114	;'r'
  1229  00FEFD  20                 	db	32
  1230  00FEFE  77                 	db	119	;'w'
  1231  00FEFF  61                 	db	97	;'a'
  1232  00FF00  6C                 	db	108	;'l'
  1233  00FF01  6C                 	db	108	;'l'
  1234  00FF02  20                 	db	32
  1235  00FF03  66                 	db	102	;'f'
  1236  00FF04  6F                 	db	111	;'o'
  1237  00FF05  6C                 	db	108	;'l'
  1238  00FF06  6C                 	db	108	;'l'
  1239  00FF07  6F                 	db	111	;'o'
  1240  00FF08  77                 	db	119	;'w'
  1241  00FF09  0A                 	db	10
  1242  00FF0A  00                 	db	0
  1243  00FF0B                     STR_13:
  1244  00FF0B  0A                 	db	10
  1245  00FF0C  54                 	db	84	;'T'
  1246  00FF0D  68                 	db	104	;'h'
  1247  00FF0E  65                 	db	101	;'e'
  1248  00FF0F  20                 	db	32
  1249  00FF10  43                 	db	67	;'C'
  1250  00FF11  6C                 	db	108	;'l'
  1251  00FF12  6F                 	db	111	;'o'
  1252  00FF13  73                 	db	115	;'s'
  1253  00FF14  65                 	db	101	;'e'
  1254  00FF15  73                 	db	115	;'s'
  1255  00FF16  20                 	db	32
  1256  00FF17  6F                 	db	111	;'o'
  1257  00FF18  62                 	db	98	;'b'
  1258  00FF19  6A                 	db	106	;'j'
  1259  00FF1A  65                 	db	101	;'e'
  1260  00FF1B  63                 	db	99	;'c'
  1261  00FF1C  74                 	db	116	;'t'
  1262  00FF1D  20                 	db	32
  1263  00FF1E  28                 	db	40
  1264  00FF1F  6D                 	db	109	;'m'
  1265  00FF20  6D                 	db	109	;'m'
  1266  00FF21  29                 	db	41
  1267  00FF22  3A                 	db	58	;':'
  1268  00FF23  20                 	db	32
  1269  00FF24  25                 	db	37
  1270  00FF25  64                 	db	100	;'d'
  1271  00FF26  00                 	db	0
  1272  00FF27                     STR_51:
  1273  00FF27  53                 	db	83	;'S'
  1274  00FF28  51                 	db	81	;'Q'
  1275  00FF29  55                 	db	85	;'U'
  1276  00FF2A  41                 	db	65	;'A'
  1277  00FF2B  52                 	db	82	;'R'
  1278  00FF2C  45                 	db	69	;'E'
  1279  00FF2D  20                 	db	32
  1280  00FF2E  44                 	db	68	;'D'
  1281  00FF2F  52                 	db	82	;'R'
  1282  00FF30  49                 	db	73	;'I'
  1283  00FF31  56                 	db	86	;'V'
  1284  00FF32  45                 	db	69	;'E'
  1285  00FF33  20                 	db	32
  1286  00FF34  4D                 	db	77	;'M'
  1287  00FF35  4F                 	db	79	;'O'
  1288  00FF36  44                 	db	68	;'D'
  1289  00FF37  45                 	db	69	;'E'
  1290  00FF38  20                 	db	32
  1291  00FF39  33                 	db	51	;'3'
  1292  00FF3A  21                 	db	33
  1293  00FF3B  20                 	db	32
  1294  00FF3C  0A                 	db	10
  1295  00FF3D  00                 	db	0
  1296  00FF3E                     STR_41:
  1297  00FF3E  54                 	db	84	;'T'
  1298  00FF3F  72                 	db	114	;'r'
  1299  00FF40  61                 	db	97	;'a'
  1300  00FF41  76                 	db	118	;'v'
  1301  00FF42  65                 	db	101	;'e'
  1302  00FF43  6C                 	db	108	;'l'
  1303  00FF44  65                 	db	101	;'e'
  1304  00FF45  64                 	db	100	;'d'
  1305  00FF46  20                 	db	32
  1306  00FF47  44                 	db	68	;'D'
  1307  00FF48  69                 	db	105	;'i'
  1308  00FF49  73                 	db	115	;'s'
  1309  00FF4A  74                 	db	116	;'t'
  1310  00FF4B  61                 	db	97	;'a'
  1311  00FF4C  6E                 	db	110	;'n'
  1312  00FF4D  63                 	db	99	;'c'
  1313  00FF4E  65                 	db	101	;'e'
  1314  00FF4F  3A                 	db	58	;':'
  1315  00FF50  0A                 	db	10
  1316  00FF51  25                 	db	37
  1317  00FF52  64                 	db	100	;'d'
  1318  00FF53  00                 	db	0
  1319  00FF54                     STR_29:
  1320  00FF54  0A                 	db	10
  1321  00FF55  53                 	db	83	;'S'
  1322  00FF56  74                 	db	116	;'t'
  1323  00FF57  65                 	db	101	;'e'
  1324  00FF58  70                 	db	112	;'p'
  1325  00FF59  73                 	db	115	;'s'
  1326  00FF5A  20                 	db	32
  1327  00FF5B  54                 	db	84	;'T'
  1328  00FF5C  72                 	db	114	;'r'
  1329  00FF5D  61                 	db	97	;'a'
  1330  00FF5E  76                 	db	118	;'v'
  1331  00FF5F  65                 	db	101	;'e'
  1332  00FF60  6C                 	db	108	;'l'
  1333  00FF61  6C                 	db	108	;'l'
  1334  00FF62  65                 	db	101	;'e'
  1335  00FF63  64                 	db	100	;'d'
  1336  00FF64  3A                 	db	58	;':'
  1337  00FF65  20                 	db	32
  1338  00FF66  25                 	db	37
  1339  00FF67  64                 	db	100	;'d'
  1340  00FF68  00                 	db	0
  1341  00FF69                     STR_12:
  1342  00FF69  53                 	db	83	;'S'
  1343  00FF6A  74                 	db	116	;'t'
  1344  00FF6B  65                 	db	101	;'e'
  1345  00FF6C  70                 	db	112	;'p'
  1346  00FF6D  70                 	db	112	;'p'
  1347  00FF6E  65                 	db	101	;'e'
  1348  00FF6F  64                 	db	100	;'d'
  1349  00FF70  20                 	db	32
  1350  00FF71  33                 	db	51	;'3'
  1351  00FF72  36                 	db	54	;'6'
  1352  00FF73  30                 	db	48	;'0'
  1353  00FF74  20                 	db	32
  1354  00FF75  64                 	db	100	;'d'
  1355  00FF76  65                 	db	101	;'e'
  1356  00FF77  67                 	db	103	;'g'
  1357  00FF78  72                 	db	114	;'r'
  1358  00FF79  65                 	db	101	;'e'
  1359  00FF7A  65                 	db	101	;'e'
  1360  00FF7B  73                 	db	115	;'s'
  1361  00FF7C  00                 	db	0
  1362  00FF7D                     STR_2:
  1363  00FF7D  20                 	db	32
  1364  00FF7E  20                 	db	32
  1365  00FF7F  20                 	db	32
  1366  00FF80  20                 	db	32
  1367  00FF81  20                 	db	32
  1368  00FF82  20                 	db	32
  1369  00FF83  20                 	db	32
  1370  00FF84  20                 	db	32
  1371  00FF85  20                 	db	32
  1372  00FF86  20                 	db	32
  1373  00FF87  20                 	db	32
  1374  00FF88  20                 	db	32
  1375  00FF89  20                 	db	32
  1376  00FF8A  20                 	db	32
  1377  00FF8B  20                 	db	32
  1378  00FF8C  20                 	db	32
  1379  00FF8D  20                 	db	32
  1380  00FF8E  0A                 	db	10
  1381  00FF8F  00                 	db	0
  1382  00FF90                     STR_17:
  1383  00FF90  53                 	db	83	;'S'
  1384  00FF91  65                 	db	101	;'e'
  1385  00FF92  6E                 	db	110	;'n'
  1386  00FF93  73                 	db	115	;'s'
  1387  00FF94  6F                 	db	111	;'o'
  1388  00FF95  72                 	db	114	;'r'
  1389  00FF96  20                 	db	32
  1390  00FF97  4D                 	db	77	;'M'
  1391  00FF98  6F                 	db	111	;'o'
  1392  00FF99  76                 	db	118	;'v'
  1393  00FF9A  69                 	db	105	;'i'
  1394  00FF9B  6E                 	db	110	;'n'
  1395  00FF9C  67                 	db	103	;'g'
  1396  00FF9D  21                 	db	33
  1397  00FF9E  20                 	db	32
  1398  00FF9F  20                 	db	32
  1399  00FFA0  20                 	db	32
  1400  00FFA1  0A                 	db	10
  1401  00FFA2  00                 	db	0
  1402  00FFA3                     STR_14:
  1403  00FFA3  0A                 	db	10
  1404  00FFA4  47                 	db	71	;'G'
  1405  00FFA5  6F                 	db	111	;'o'
  1406  00FFA6  69                 	db	105	;'i'
  1407  00FFA7  6E                 	db	110	;'n'
  1408  00FFA8  67                 	db	103	;'g'
  1409  00FFA9  20                 	db	32
  1410  00FFAA  62                 	db	98	;'b'
  1411  00FFAB  61                 	db	97	;'a'
  1412  00FFAC  63                 	db	99	;'c'
  1413  00FFAD  6B                 	db	107	;'k'
  1414  00FFAE  20                 	db	32
  1415  00FFAF  74                 	db	116	;'t'
  1416  00FFB0  6F                 	db	111	;'o'
  1417  00FFB1  3A                 	db	58	;':'
  1418  00FFB2  20                 	db	32
  1419  00FFB3  25                 	db	37
  1420  00FFB4  64                 	db	100	;'d'
  1421  00FFB5  00                 	db	0
  1422  00FFB6                     STR_3:
  1423  00FFB6  53                 	db	83	;'S'
  1424  00FFB7  65                 	db	101	;'e'
  1425  00FFB8  6E                 	db	110	;'n'
  1426  00FFB9  73                 	db	115	;'s'
  1427  00FFBA  6F                 	db	111	;'o'
  1428  00FFBB  72                 	db	114	;'r'
  1429  00FFBC  20                 	db	32
  1430  00FFBD  4D                 	db	77	;'M'
  1431  00FFBE  6F                 	db	111	;'o'
  1432  00FFBF  76                 	db	118	;'v'
  1433  00FFC0  69                 	db	105	;'i'
  1434  00FFC1  6E                 	db	110	;'n'
  1435  00FFC2  67                 	db	103	;'g'
  1436  00FFC3  21                 	db	33
  1437  00FFC4  0A                 	db	10
  1438  00FFC5  00                 	db	0
  1439  00FFC6                     STR_63:
  1440  00FFC6  41                 	db	65	;'A'
  1441  00FFC7  44                 	db	68	;'D'
  1442  00FFC8  43                 	db	67	;'C'
  1443  00FFC9  20                 	db	32
  1444  00FFCA  41                 	db	65	;'A'
  1445  00FFCB  56                 	db	86	;'V'
  1446  00FFCC  45                 	db	69	;'E'
  1447  00FFCD  52                 	db	82	;'R'
  1448  00FFCE  41                 	db	65	;'A'
  1449  00FFCF  47                 	db	71	;'G'
  1450  00FFD0  45                 	db	69	;'E'
  1451  00FFD1  20                 	db	32
  1452  00FFD2  25                 	db	37
  1453  00FFD3  64                 	db	100	;'d'
  1454  00FFD4  0A                 	db	10
  1455  00FFD5  00                 	db	0
  1456  00FFD6                     STR_31:
  1457  00FFD6  52                 	db	82	;'R'
  1458  00FFD7  6F                 	db	111	;'o'
  1459  00FFD8  62                 	db	98	;'b'
  1460  00FFD9  6F                 	db	111	;'o'
  1461  00FFDA  74                 	db	116	;'t'
  1462  00FFDB  20                 	db	32
  1463  00FFDC  52                 	db	82	;'R'
  1464  00FFDD  65                 	db	101	;'e'
  1465  00FFDE  61                 	db	97	;'a'
  1466  00FFDF  64                 	db	100	;'d'
  1467  00FFE0  79                 	db	121	;'y'
  1468  00FFE1  21                 	db	33
  1469  00FFE2  20                 	db	32
  1470  00FFE3  0A                 	db	10
  1471  00FFE4  00                 	db	0
  1472  00FFE5                     STR_72:
  1473  00FFE5  42                 	db	66	;'B'
  1474  00FFE6  65                 	db	101	;'e'
  1475  00FFE7  73                 	db	115	;'s'
  1476  00FFE8  6E                 	db	110	;'n'
  1477  00FFE9  65                 	db	101	;'e'
  1478  00FFEA  6F                 	db	111	;'o'
  1479  00FFEB  72                 	db	114	;'r'
  1480  00FFEC  3A                 	db	58	;':'
  1481  00FFED  20                 	db	32
  1482  00FFEE  25                 	db	37
  1483  00FFEF  64                 	db	100	;'d'
  1484  00FFF0  00                 	db	0
  1485  00FFF1                     STR_52:
  1486  00FFF1  54                 	db	84	;'T'
  1487  00FFF2  6F                 	db	111	;'o'
  1488  00FFF3  74                 	db	116	;'t'
  1489  00FFF4  61                 	db	97	;'a'
  1490  00FFF5  6C                 	db	108	;'l'
  1491  00FFF6  3A                 	db	58	;':'
  1492  00FFF7  20                 	db	32
  1493  00FFF8  25                 	db	37
  1494  00FFF9  64                 	db	100	;'d'
  1495  00FFFA  0A                 	db	10
  1496  00FFFB  00                 	db	0
  1497  00FFFC                     STR_1:
  1498  00FFFC  25                 	db	37
  1499  00FFFD  63                 	db	99	;'c'
  1500  00FFFE  00                 	db	0
  1501  0000                     
  1502                           ; #config settings
  1503  00FFFF  00                 	db	0	; dummy byte at the end
  1504  0000                     
  1505                           	psect	cinit
  1506  0145DA                     __pcinit:
  1507                           	opt stack 0
  1508  0145DA                     start_initialization:
  1509                           	opt stack 0
  1510  0145DA                     __initialization:
  1511                           	opt stack 0
  1512                           
  1513                           ; Initialize objects allocated to BANK1 (23 bytes)
  1514                           ; load TBLPTR registers with __pidataBANK1
  1515  0145DA  0E3E               	movlw	low __pidataBANK1
  1516  0145DC  6EF6               	movwf	tblptrl,c
  1517  0145DE  0E5F               	movlw	high __pidataBANK1
  1518  0145E0  6EF7               	movwf	tblptrh,c
  1519  0145E2  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1520  0145E4  6EF8               	movwf	tblptru,c
  1521  0145E6  EE01  F0E9         	lfsr	0,__pdataBANK1
  1522  0145EA  EE10 F017          	lfsr	1,23
  1523  0145EE                     copy_data0:
  1524  0145EE  0009               	tblrd		*+
  1525  0145F0  CFF5 FFEE          	movff	tablat,postinc0
  1526  0145F4  50E5               	movf	postdec1,w,c
  1527  0145F6  50E1               	movf	fsr1l,w,c
  1528  0145F8  E1FA               	bnz	copy_data0
  1529                           
  1530                           ; Initialize objects allocated to COMRAM (10 bytes)
  1531                           ; load TBLPTR registers with __pidataCOMRAM
  1532  0145FA  0E7A               	movlw	low __pidataCOMRAM
  1533  0145FC  6EF6               	movwf	tblptrl,c
  1534  0145FE  0E60               	movlw	high __pidataCOMRAM
  1535  014600  6EF7               	movwf	tblptrh,c
  1536  014602  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1537  014604  6EF8               	movwf	tblptru,c
  1538  014606  EE00  F047         	lfsr	0,__pdataCOMRAM
  1539  01460A  EE10 F00A          	lfsr	1,10
  1540  01460E                     copy_data1:
  1541  01460E  0009               	tblrd		*+
  1542  014610  CFF5 FFEE          	movff	tablat,postinc0
  1543  014614  50E5               	movf	postdec1,w,c
  1544  014616  50E1               	movf	fsr1l,w,c
  1545  014618  E1FA               	bnz	copy_data1
  1546                           
  1547                           ; Clear objects allocated to BIGRAM (300 bytes)
  1548  01461A  EE03  F018         	lfsr	0,__pbssBIGRAM
  1549  01461E  EE11 F02C          	lfsr	1,300
  1550  014622                     clear_0:
  1551  014622  6AEE               	clrf	postinc0,c
  1552  014624  50E5               	movf	postdec1,w,c
  1553  014626  50E1               	movf	fsr1l,w,c
  1554  014628  E1FC               	bnz	clear_0
  1555  01462A  50E2               	movf	fsr1h,w,c
  1556  01462C  E1FA               	bnz	clear_0
  1557                           
  1558                           ; Clear objects allocated to BANK2 (241 bytes)
  1559  01462E  EE02  F000         	lfsr	0,__pbssBANK2
  1560  014632  0EF1               	movlw	241
  1561  014634                     clear_1:
  1562  014634  6AEE               	clrf	postinc0,c
  1563  014636  06E8               	decf	wreg,f,c
  1564  014638  E1FD               	bnz	clear_1
  1565                           
  1566                           ; Clear objects allocated to BANK1 (233 bytes)
  1567  01463A  EE01  F000         	lfsr	0,__pbssBANK1
  1568  01463E  0EE9               	movlw	233
  1569  014640                     clear_2:
  1570  014640  6AEE               	clrf	postinc0,c
  1571  014642  06E8               	decf	wreg,f,c
  1572  014644  E1FD               	bnz	clear_2
  1573                           
  1574                           ; Clear objects allocated to BANK0 (16 bytes)
  1575  014646  EE00  F0E6         	lfsr	0,__pbssBANK0
  1576  01464A  0E10               	movlw	16
  1577  01464C                     clear_3:
  1578  01464C  6AEE               	clrf	postinc0,c
  1579  01464E  06E8               	decf	wreg,f,c
  1580  014650  E1FD               	bnz	clear_3
  1581                           
  1582                           ; Clear objects allocated to COMRAM (30 bytes)
  1583  014652  EE00  F029         	lfsr	0,__pbssCOMRAM
  1584  014656  0E1E               	movlw	30
  1585  014658                     clear_4:
  1586  014658  6AEE               	clrf	postinc0,c
  1587  01465A  06E8               	decf	wreg,f,c
  1588  01465C  E1FD               	bnz	clear_4
  1589  01465E                     end_of_initialization:
  1590                           	opt stack 0
  1591  01465E                     __end_of__initialization:
  1592                           	opt stack 0
  1593  01465E  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1594  014660  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1595  014662  0100               	movlb	0
  1596  014664  EF00  F080         	goto	_main	;jump to C main() function
  1597                           tblptru	equ	0xFF8
  1598                           tblptrh	equ	0xFF7
  1599                           tblptrl	equ	0xFF6
  1600                           tablat	equ	0xFF5
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           postdec1	equ	0xFE5
  1604                           fsr1h	equ	0xFE2
  1605                           fsr1l	equ	0xFE1
  1606                           
  1607                           	psect	bssCOMRAM
  1608  000029                     __pbssCOMRAM:
  1609                           	opt stack 0
  1610  000029                     _readIndex:
  1611                           	opt stack 0
  1612  000029                     	ds	2
  1613  00002B                     _Close_Pos:
  1614                           	opt stack 0
  1615  00002B                     	ds	2
  1616  00002D                     _Motor_Count:
  1617                           	opt stack 0
  1618  00002D                     	ds	2
  1619  00002F                     _T_VAR:
  1620                           	opt stack 0
  1621  00002F                     	ds	2
  1622  000031                     _mode:
  1623                           	opt stack 0
  1624  000031                     	ds	2
  1625  000033                     _COUNTER:
  1626                           	opt stack 0
  1627  000033                     	ds	2
  1628  000035                     _gBackcolour:
  1629                           	opt stack 0
  1630  000035                     	ds	2
  1631  000037                     _Current_Dist2:
  1632                           	opt stack 0
  1633  000037                     	ds	1
  1634  000038                     _Current_Dist:
  1635                           	opt stack 0
  1636  000038                     	ds	1
  1637  000039                     Event_TestButton@j:
  1638                           	opt stack 0
  1639  000039                     	ds	1
  1640  00003A                     Timer2_Init@PRE:
  1641                           	opt stack 0
  1642  00003A                     	ds	1
  1643  00003B                     Timer0_Init@PRE:
  1644                           	opt stack 0
  1645  00003B                     	ds	1
  1646  00003C                     _INDEX:
  1647                           	opt stack 0
  1648  00003C                     	ds	1
  1649  00003D                     rand@screw:
  1650                           	opt stack 0
  1651  00003D                     	ds	1
  1652  00003E                     OutSeg@a:
  1653                           	opt stack 0
  1654  00003E                     	ds	1
  1655  00003F                     OutSeg@segset:
  1656                           	opt stack 0
  1657  00003F                     	ds	1
  1658  000040                     OutSeg@cur:
  1659                           	opt stack 0
  1660  000040                     	ds	1
  1661  000041                     _I2C1T:
  1662                           	opt stack 0
  1663  000041                     	ds	6
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postdec1	equ	0xFE5
  1671                           fsr1h	equ	0xFE2
  1672                           fsr1l	equ	0xFE1
  1673                           
  1674                           	psect	dataCOMRAM
  1675  000047                     __pdataCOMRAM:
  1676                           	opt stack 0
  1677  000047                     _gCursor:
  1678                           	opt stack 0
  1679  000047                     	ds	4
  1680  00004B                     _Low_Sensor:
  1681                           	opt stack 0
  1682  00004B                     	ds	2
  1683  00004D                     _Bus_State:
  1684                           	opt stack 0
  1685  00004D                     	ds	1
  1686  00004E                     _change:
  1687                           	opt stack 0
  1688  00004E                     	ds	1
  1689  00004F                     _l:
  1690                           	opt stack 0
  1691  00004F                     	ds	1
  1692  000050                     _w:
  1693                           	opt stack 0
  1694  000050                     	ds	1
  1695                           tblptru	equ	0xFF8
  1696                           tblptrh	equ	0xFF7
  1697                           tblptrl	equ	0xFF6
  1698                           tablat	equ	0xFF5
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           postdec1	equ	0xFE5
  1702                           fsr1h	equ	0xFE2
  1703                           fsr1l	equ	0xFE1
  1704                           
  1705                           	psect	bssBANK0
  1706  0000E6                     __pbssBANK0:
  1707                           	opt stack 0
  1708  0000E6                     _lQueue:
  1709                           	opt stack 0
  1710  0000E6                     	ds	3
  1711  0000E9                     _average:
  1712                           	opt stack 0
  1713  0000E9                     	ds	2
  1714  0000EB                     _pShiftVal:
  1715                           	opt stack 0
  1716  0000EB                     	ds	2
  1717  0000ED                     _lMotor:
  1718                           	opt stack 0
  1719  0000ED                     	ds	2
  1720  0000EF                     _lCurrent:
  1721                           	opt stack 0
  1722  0000EF                     	ds	2
  1723  0000F1                     _BumpSensor:
  1724                           	opt stack 0
  1725  0000F1                     	ds	1
  1726  0000F2                     Timer2_Init@INDEX:
  1727                           	opt stack 0
  1728  0000F2                     	ds	1
  1729  0000F3                     _lBufferY:
  1730                           	opt stack 0
  1731  0000F3                     	ds	1
  1732  0000F4                     _lBufferX:
  1733                           	opt stack 0
  1734  0000F4                     	ds	1
  1735  0000F5                     _clearall:
  1736                           	opt stack 0
  1737  0000F5                     	ds	1
  1738                           tblptru	equ	0xFF8
  1739                           tblptrh	equ	0xFF7
  1740                           tblptrl	equ	0xFF6
  1741                           tablat	equ	0xFF5
  1742                           postinc0	equ	0xFEE
  1743                           wreg	equ	0xFE8
  1744                           postdec1	equ	0xFE5
  1745                           fsr1h	equ	0xFE2
  1746                           fsr1l	equ	0xFE1
  1747                           
  1748                           	psect	bssBANK1
  1749  000100                     __pbssBANK1:
  1750                           	opt stack 0
  1751  000100                     Timer2_Init@DIV:
  1752                           	opt stack 0
  1753  000100                     	ds	4
  1754  000104                     Timer0_Init@DIV:
  1755                           	opt stack 0
  1756  000104                     	ds	4
  1757  000108                     _gISR:
  1758                           	opt stack 0
  1759  000108                     	ds	3
  1760  00010B                     _lStepFunction:
  1761                           	opt stack 0
  1762  00010B                     	ds	3
  1763  00010E                     _I2C2_More:
  1764                           	opt stack 0
  1765  00010E                     	ds	3
  1766  000111                     _I2C1_More:
  1767                           	opt stack 0
  1768  000111                     	ds	3
  1769  000114                     _I2C2_Done:
  1770                           	opt stack 0
  1771  000114                     	ds	3
  1772  000117                     _I2C1_Done:
  1773                           	opt stack 0
  1774  000117                     	ds	3
  1775  00011A                     _errno:
  1776                           	opt stack 0
  1777  00011A                     	ds	2
  1778  00011C                     _test:
  1779                           	opt stack 0
  1780  00011C                     	ds	2
  1781  00011E                     _timercount:
  1782                           	opt stack 0
  1783  00011E                     	ds	2
  1784  000120                     _x:
  1785                           	opt stack 0
  1786  000120                     	ds	2
  1787  000122                     _total:
  1788                           	opt stack 0
  1789  000122                     	ds	2
  1790  000124                     _thisReading:
  1791                           	opt stack 0
  1792  000124                     	ds	2
  1793  000126                     _Sensor_Observe_Fin:
  1794                           	opt stack 0
  1795  000126                     	ds	2
  1796  000128                     _CW_Count:
  1797                           	opt stack 0
  1798  000128                     	ds	2
  1799  00012A                     _CCW_Count:
  1800                           	opt stack 0
  1801  00012A                     	ds	2
  1802  00012C                     _count:
  1803                           	opt stack 0
  1804  00012C                     	ds	2
  1805  00012E                     _ADC_Reading:
  1806                           	opt stack 0
  1807  00012E                     	ds	2
  1808  000130                     _BumpState:
  1809                           	opt stack 0
  1810  000130                     	ds	2
  1811  000132                     _mod:
  1812                           	opt stack 0
  1813  000132                     	ds	2
  1814  000134                     _Square_Dist:
  1815                           	opt stack 0
  1816  000134                     	ds	2
  1817  000136                     _val:
  1818                           	opt stack 0
  1819  000136                     	ds	2
  1820  000138                     HMI_GRender@a:
  1821                           	opt stack 0
  1822  000138                     	ds	2
  1823  00013A                     SPI_Send9@dat:
  1824                           	opt stack 0
  1825  00013A                     	ds	2
  1826  00013C                     _Cliff_Left:
  1827                           	opt stack 0
  1828  00013C                     	ds	1
  1829  00013D                     _Cliff_Right:
  1830                           	opt stack 0
  1831  00013D                     	ds	1
  1832  00013E                     _Cliff_FLeft:
  1833                           	opt stack 0
  1834  00013E                     	ds	1
  1835  00013F                     _Cliff_FRight:
  1836                           	opt stack 0
  1837  00013F                     	ds	1
  1838  000140                     _Vitual_Wall_Sensor:
  1839                           	opt stack 0
  1840  000140                     	ds	1
  1841  000141                     _Current_Dist1:
  1842                           	opt stack 0
  1843  000141                     	ds	1
  1844  000142                     _u:
  1845                           	opt stack 0
  1846  000142                     	ds	1
  1847  000143                     _j:
  1848                           	opt stack 0
  1849  000143                     	ds	1
  1850  000144                     _i:
  1851                           	opt stack 0
  1852  000144                     	ds	1
  1853  000145                     _ADC_Initialised:
  1854                           	opt stack 0
  1855  000145                     	ds	1
  1856  000146                     _HMIBoard:
  1857                           	opt stack 0
  1858  000146                     	ds	58
  1859  000180                     _SPI2:
  1860                           	opt stack 0
  1861  000180                     	ds	11
  1862  00018B                     _PortG:
  1863                           	opt stack 0
  1864  00018B                     	ds	10
  1865  000195                     _PortE:
  1866                           	opt stack 0
  1867  000195                     	ds	10
  1868  00019F                     _PortD:
  1869                           	opt stack 0
  1870  00019F                     	ds	10
  1871  0001A9                     _PortB:
  1872                           	opt stack 0
  1873  0001A9                     	ds	10
  1874  0001B3                     _PortC:
  1875                           	opt stack 0
  1876  0001B3                     	ds	10
  1877  0001BD                     _PortF:
  1878                           	opt stack 0
  1879  0001BD                     	ds	10
  1880  0001C7                     _I2C2T:
  1881                           	opt stack 0
  1882  0001C7                     	ds	6
  1883  0001CD                     _ADC_AN3:
  1884                           	opt stack 0
  1885  0001CD                     	ds	5
  1886  0001D2                     _ADC_AN2:
  1887                           	opt stack 0
  1888  0001D2                     	ds	5
  1889  0001D7                     _ADC_AN1:
  1890                           	opt stack 0
  1891  0001D7                     	ds	5
  1892  0001DC                     _ADC_AN0:
  1893                           	opt stack 0
  1894  0001DC                     	ds	5
  1895  0001E1                     LCD_DrawRectangle@p4:
  1896                           	opt stack 0
  1897  0001E1                     	ds	4
  1898  0001E5                     LCD_DrawRectangle@p2:
  1899                           	opt stack 0
  1900  0001E5                     	ds	4
  1901                           tblptru	equ	0xFF8
  1902                           tblptrh	equ	0xFF7
  1903                           tblptrl	equ	0xFF6
  1904                           tablat	equ	0xFF5
  1905                           postinc0	equ	0xFEE
  1906                           wreg	equ	0xFE8
  1907                           postdec1	equ	0xFE5
  1908                           fsr1h	equ	0xFE2
  1909                           fsr1l	equ	0xFE1
  1910                           
  1911                           	psect	dataBANK1
  1912  0001E9                     __pdataBANK1:
  1913                           	opt stack 0
  1914  0001E9                     Console_Render@F6956:
  1915                           	opt stack 0
  1916  0001E9                     	ds	4
  1917  0001ED                     _gLineSize:
  1918                           	opt stack 0
  1919  0001ED                     	ds	4
  1920  0001F1                     _gCharSize:
  1921                           	opt stack 0
  1922  0001F1                     	ds	4
  1923  0001F5                     _countOff:
  1924                           	opt stack 0
  1925  0001F5                     	ds	2
  1926  0001F7                     _countOn:
  1927                           	opt stack 0
  1928  0001F7                     	ds	2
  1929  0001F9                     _numReadings:
  1930                           	opt stack 0
  1931  0001F9                     	ds	2
  1932  0001FB                     _gForecolour:
  1933                           	opt stack 0
  1934  0001FB                     	ds	2
  1935  0001FD                     	ds	1
  1936  0001FE                     	ds	1
  1937  0001FF                     	ds	1
  1938                           tblptru	equ	0xFF8
  1939                           tblptrh	equ	0xFF7
  1940                           tblptrl	equ	0xFF6
  1941                           tablat	equ	0xFF5
  1942                           postinc0	equ	0xFEE
  1943                           wreg	equ	0xFE8
  1944                           postdec1	equ	0xFE5
  1945                           fsr1h	equ	0xFE2
  1946                           fsr1l	equ	0xFE1
  1947                           
  1948                           	psect	bssBANK2
  1949  000200                     __pbssBANK2:
  1950                           	opt stack 0
  1951  000200                     _readings:
  1952                           	opt stack 0
  1953  000200                     	ds	100
  1954  000264                     _lCBuffer:
  1955                           	opt stack 0
  1956  000264                     	ds	30
  1957  000282                     Console_MakeField@Fill:
  1958                           	opt stack 0
  1959  000282                     	ds	70
  1960  0002C8                     _SPI1:
  1961                           	opt stack 0
  1962  0002C8                     	ds	11
  1963  0002D3                     _DIPSwitch:
  1964                           	opt stack 0
  1965  0002D3                     	ds	10
  1966  0002DD                     _TestButton:
  1967                           	opt stack 0
  1968  0002DD                     	ds	10
  1969  0002E7                     _PortA:
  1970                           	opt stack 0
  1971  0002E7                     	ds	10
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1h	equ	0xFE2
  1980                           fsr1l	equ	0xFE1
  1981                           
  1982                           	psect	bssBIGRAM
  1983  000318                     __pbssBIGRAM:
  1984                           	opt stack 0
  1985  000318                     _lBuffer:
  1986                           	opt stack 0
  1987  000318                     	ds	300
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           fsr1h	equ	0xFE2
  1996                           fsr1l	equ	0xFE1
  1997                           
  1998                           	psect	cstackBANK3
  1999  000300                     __pcstackBANK3:
  2000                           	opt stack 0
  2001  000300                     _ADCAverage$15665:
  2002                           	opt stack 0
  2003                           
  2004                           ; 4 bytes @ 0x0
  2005  000300                     	ds	4
  2006  000304                     _ADCAverage$15666:
  2007                           	opt stack 0
  2008                           
  2009                           ; 4 bytes @ 0x4
  2010  000304                     	ds	4
  2011  000308                     _ADCAverage$15667:
  2012                           	opt stack 0
  2013                           
  2014                           ; 4 bytes @ 0x8
  2015  000308                     	ds	4
  2016  00030C                     _ADCAverage$15668:
  2017                           	opt stack 0
  2018                           
  2019                           ; 4 bytes @ 0xC
  2020  00030C                     	ds	4
  2021  000310                     _ADCAverage$15669:
  2022                           	opt stack 0
  2023                           
  2024                           ; 4 bytes @ 0x10
  2025  000310                     	ds	4
  2026  000314                     _ADCAverage$15670:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x14
  2030  000314                     	ds	4
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           postinc0	equ	0xFEE
  2036                           wreg	equ	0xFE8
  2037                           postdec1	equ	0xFE5
  2038                           fsr1h	equ	0xFE2
  2039                           fsr1l	equ	0xFE1
  2040                           
  2041                           	psect	cstackBANK0
  2042  000060                     __pcstackBANK0:
  2043                           	opt stack 0
  2044  000060                     ??_Console_ClearCursor:
  2045  000060                     ??_Console_Init:
  2046  000060                     ??_Console_NewLine:
  2047  000060                     ??_Console_FormFeed:
  2048  000060                     ??_HMI_SetButton:
  2049  000060                     ??_InitADC:
  2050  000060                     ?_GetPortProperties:
  2051                           	opt stack 0
  2052  000060                     ?_GetPortPORT:
  2053                           	opt stack 0
  2054  000060                     ?_GetPortTRIS:
  2055                           	opt stack 0
  2056  000060                     ?_FunctReadADC:
  2057                           	opt stack 0
  2058  000060                     ?___wmul:
  2059                           	opt stack 0
  2060  000060                     ?___awdiv:
  2061                           	opt stack 0
  2062  000060                     ?___lwdiv:
  2063                           	opt stack 0
  2064  000060                     ?___fldiv:
  2065                           	opt stack 0
  2066  000060                     ?_frexp:
  2067                           	opt stack 0
  2068  000060                     ?___lldiv:
  2069                           	opt stack 0
  2070  000060                     ?___xxtofl:
  2071                           	opt stack 0
  2072  000060                     Mode_Set@pMode:
  2073                           	opt stack 0
  2074  000060                     ToSegment@pCHR:
  2075                           	opt stack 0
  2076  000060                     HMI_SetBar@pValue:
  2077                           	opt stack 0
  2078  000060                     eusartSend@sendChar:
  2079                           	opt stack 0
  2080  000060                     Port_GetPin@pInput:
  2081                           	opt stack 0
  2082  000060                     Port_GetQuad@pInput:
  2083                           	opt stack 0
  2084  000060                     SPI_DisableISR@pInput:
  2085                           	opt stack 0
  2086  000060                     SPI_DCS@pInput:
  2087                           	opt stack 0
  2088  000060                     SPI_Send@pInput:
  2089                           	opt stack 0
  2090  000060                     Byte_SetBit@pInput:
  2091                           	opt stack 0
  2092  000060                     Byte_GetBit@pInput:
  2093                           	opt stack 0
  2094  000060                     Byte_SetZone@pInput:
  2095                           	opt stack 0
  2096  000060                     Byte_GetZone@pInput:
  2097                           	opt stack 0
  2098  000060                     Byte_SetByte@pInput:
  2099                           	opt stack 0
  2100  000060                     delay_ms@ms:
  2101                           	opt stack 0
  2102  000060                     delay_us@us:
  2103                           	opt stack 0
  2104  000060                     reverse@input:
  2105                           	opt stack 0
  2106  000060                     FunctReadADC@channel:
  2107                           	opt stack 0
  2108  000060                     ___wmul@multiplier:
  2109                           	opt stack 0
  2110  000060                     ___awdiv@dividend:
  2111                           	opt stack 0
  2112  000060                     ___lwdiv@dividend:
  2113                           	opt stack 0
  2114  000060                     MXK_Queue@pCallback:
  2115                           	opt stack 0
  2116  000060                     ___flge@ff1:
  2117                           	opt stack 0
  2118  000060                     ___lldiv@dividend:
  2119                           	opt stack 0
  2120  000060                     ___fldiv@b:
  2121                           	opt stack 0
  2122  000060                     ___xxtofl@val:
  2123                           	opt stack 0
  2124  000060                     frexp@value:
  2125                           	opt stack 0
  2126                           
  2127                           ; 4 bytes @ 0x0
  2128  000060                     	ds	1
  2129  000061                     ?_UpdateDistance:
  2130                           	opt stack 0
  2131  000061                     HMI_SetSegments@pString:
  2132                           	opt stack 0
  2133  000061                     Drive@Speed:
  2134                           	opt stack 0
  2135  000061                     Turn@Angle:
  2136                           	opt stack 0
  2137  000061                     BangBang@RSpeedH:
  2138                           	opt stack 0
  2139                           
  2140                           ; 2 bytes @ 0x1
  2141  000061                     	ds	1
  2142  000062                     GetPortProperties@pInput:
  2143                           	opt stack 0
  2144  000062                     GetPortPORT@pInput:
  2145                           	opt stack 0
  2146  000062                     GetPortTRIS@pInput:
  2147                           	opt stack 0
  2148  000062                     Port_GetPin@pPin:
  2149                           	opt stack 0
  2150  000062                     Port_GetQuad@pQuad:
  2151                           	opt stack 0
  2152  000062                     SPI_Send@pData:
  2153                           	opt stack 0
  2154  000062                     Byte_SetBit@pBit:
  2155                           	opt stack 0
  2156  000062                     Byte_GetBit@pBit:
  2157                           	opt stack 0
  2158  000062                     Byte_SetZone@pMax:
  2159                           	opt stack 0
  2160  000062                     Byte_GetZone@pMax:
  2161                           	opt stack 0
  2162  000062                     Byte_SetByte@pValue:
  2163                           	opt stack 0
  2164  000062                     Console_Init@x:
  2165                           	opt stack 0
  2166  000062                     Console_FormFeed@x:
  2167                           	opt stack 0
  2168  000062                     reverse@length:
  2169                           	opt stack 0
  2170  000062                     ___wmul@multiplicand:
  2171                           	opt stack 0
  2172  000062                     ___awdiv@divisor:
  2173                           	opt stack 0
  2174  000062                     ___lwdiv@divisor:
  2175                           	opt stack 0
  2176  000062                     delay_ms@u:
  2177                           	opt stack 0
  2178  000062                     delay_us@u:
  2179                           	opt stack 0
  2180  000062                     HMI_SetButton@reindex:
  2181                           	opt stack 0
  2182                           
  2183                           ; 4 bytes @ 0x2
  2184  000062                     	ds	1
  2185  000063                     ??_Port_GetPin:
  2186  000063                     ??_Port_GetQuad:
  2187  000063                     ??_Byte_GetBit:
  2188  000063                     LCD_Write@mode:
  2189                           	opt stack 0
  2190  000063                     Byte_SetBit@pValue:
  2191                           	opt stack 0
  2192  000063                     Byte_SetZone@pChunk:
  2193                           	opt stack 0
  2194  000063                     Byte_GetZone@pChunk:
  2195                           	opt stack 0
  2196  000063                     Console_Init@y:
  2197                           	opt stack 0
  2198  000063                     Console_FormFeed@y:
  2199                           	opt stack 0
  2200  000063                     OutSeg@pSegment:
  2201                           	opt stack 0
  2202  000063                     Drive@Rad:
  2203                           	opt stack 0
  2204  000063                     Turn@Speed:
  2205                           	opt stack 0
  2206  000063                     BangBang@RSpeedL:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x3
  2210  000063                     	ds	1
  2211  000064                     ??_Byte_SetBit:
  2212  000064                     ??_Console_IncrementCursor:
  2213  000064                     ??_OutSeg:
  2214  000064                     ??___xxtofl:
  2215  000064                     LCD_Write@value:
  2216                           	opt stack 0
  2217  000064                     Byte_GetBit@Output:
  2218                           	opt stack 0
  2219  000064                     Byte_SetZone@pChunkSize:
  2220                           	opt stack 0
  2221  000064                     Byte_GetZone@pChunkSize:
  2222                           	opt stack 0
  2223  000064                     reverse@tempVar:
  2224                           	opt stack 0
  2225  000064                     ___awdiv@counter:
  2226                           	opt stack 0
  2227  000064                     ___lwdiv@counter:
  2228                           	opt stack 0
  2229  000064                     HMI_SetSegments@in:
  2230                           	opt stack 0
  2231  000064                     ___wmul@product:
  2232                           	opt stack 0
  2233  000064                     frexp@eptr:
  2234                           	opt stack 0
  2235  000064                     ___flge@ff2:
  2236                           	opt stack 0
  2237  000064                     ___lldiv@divisor:
  2238                           	opt stack 0
  2239  000064                     ___fldiv@a:
  2240                           	opt stack 0
  2241                           
  2242                           ; 4 bytes @ 0x4
  2243  000064                     	ds	1
  2244  000065                     ??_Byte_GetZone:
  2245  000065                     ?_Console_MakeField:
  2246                           	opt stack 0
  2247  000065                     Set_Addr_Window@ys:
  2248                           	opt stack 0
  2249  000065                     Set_Rotation@m:
  2250                           	opt stack 0
  2251  000065                     Port_GetPin@Output:
  2252                           	opt stack 0
  2253  000065                     Port_GetQuad@Output:
  2254                           	opt stack 0
  2255  000065                     Byte_SetZone@pValue:
  2256                           	opt stack 0
  2257  000065                     ___awdiv@sign:
  2258                           	opt stack 0
  2259  000065                     LCD_Word_Write@value:
  2260                           	opt stack 0
  2261  000065                     reverse@iterator:
  2262                           	opt stack 0
  2263  000065                     Turn@Dir:
  2264                           	opt stack 0
  2265  000065                     BangBang@LSpeedH:
  2266                           	opt stack 0
  2267  000065                     ___lwdiv@quotient:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x5
  2271  000065                     	ds	1
  2272  000066                     ??_frexp:
  2273  000066                     ??_Byte_SetZone:
  2274  000066                     Set_Addr_Window@xe:
  2275                           	opt stack 0
  2276  000066                     Set_Rotation@rotation:
  2277                           	opt stack 0
  2278  000066                     Byte_GetZone@MASK:
  2279                           	opt stack 0
  2280  000066                     OutSeg@pInput:
  2281                           	opt stack 0
  2282  000066                     HMI_SetButton@pValue:
  2283                           	opt stack 0
  2284  000066                     MXK_BlockSwitchTo@CUR:
  2285                           	opt stack 0
  2286  000066                     MXK_SwitchTo@CUR:
  2287                           	opt stack 0
  2288  000066                     ___awdiv@quotient:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x6
  2292  000066                     	ds	1
  2293  000067                     ??_Console_MakeField:
  2294  000067                     ?___lwmod:
  2295                           	opt stack 0
  2296  000067                     Set_Addr_Window@ye:
  2297                           	opt stack 0
  2298  000067                     Byte_GetZone@Offset:
  2299                           	opt stack 0
  2300  000067                     OutSeg@out:
  2301                           	opt stack 0
  2302  000067                     HMI_SetButton@v:
  2303                           	opt stack 0
  2304  000067                     MXK_BlockSwitchTo@pModule:
  2305                           	opt stack 0
  2306  000067                     MXK_SwitchTo@pModule:
  2307                           	opt stack 0
  2308  000067                     Turn@C_Angle:
  2309                           	opt stack 0
  2310  000067                     BangBang@LSpeedL:
  2311                           	opt stack 0
  2312  000067                     ___lwmod@dividend:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0x7
  2316  000067                     	ds	1
  2317  000068                     ??___fldiv:
  2318  000068                     ??_Console_Tab:
  2319  000068                     ??___flge:
  2320  000068                     Set_Addr_Window@xs:
  2321                           	opt stack 0
  2322  000068                     Byte_GetZone@Output:
  2323                           	opt stack 0
  2324  000068                     ___xxtofl@sign:
  2325                           	opt stack 0
  2326  000068                     HMI_Render@a:
  2327                           	opt stack 0
  2328  000068                     ___lldiv@quotient:
  2329                           	opt stack 0
  2330                           
  2331                           ; 4 bytes @ 0x8
  2332  000068                     	ds	1
  2333  000069                     Byte_SetZone@Offset:
  2334                           	opt stack 0
  2335  000069                     ___xxtofl@exp:
  2336                           	opt stack 0
  2337  000069                     LCD_Fill@pColour:
  2338                           	opt stack 0
  2339  000069                     LCD_FillRectangle@pColour:
  2340                           	opt stack 0
  2341  000069                     Byte_GetPair@pInput:
  2342                           	opt stack 0
  2343  000069                     Console_MakeField@Index:
  2344                           	opt stack 0
  2345  000069                     Turn@Rad:
  2346                           	opt stack 0
  2347  000069                     ___lwmod@divisor:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x9
  2351  000069                     	ds	1
  2352  00006A                     Byte_SetZone@MASK:
  2353                           	opt stack 0
  2354  00006A                     ___xxtofl@arg:
  2355                           	opt stack 0
  2356                           
  2357                           ; 4 bytes @ 0xA
  2358  00006A                     	ds	1
  2359  00006B                     LCD_Fill@i:
  2360                           	opt stack 0
  2361  00006B                     Byte_GetPair@pPair:
  2362                           	opt stack 0
  2363  00006B                     Console_MakeField@pInput:
  2364                           	opt stack 0
  2365  00006B                     ___lwmod@counter:
  2366                           	opt stack 0
  2367  00006B                     Byte_SetPair@pInput:
  2368                           	opt stack 0
  2369  00006B                     Byte_SetQuad@pInput:
  2370                           	opt stack 0
  2371  00006B                     LCD_FillRectangle@pPoint:
  2372                           	opt stack 0
  2373                           
  2374                           ; 4 bytes @ 0xB
  2375  00006B                     	ds	1
  2376  00006C                     LCD_Fill@j:
  2377                           	opt stack 0
  2378  00006C                     ___lldiv@counter:
  2379                           	opt stack 0
  2380  00006C                     ___fldiv@sign:
  2381                           	opt stack 0
  2382  00006C                     Word_GetPair@pInput:
  2383                           	opt stack 0
  2384  00006C                     itos@input:
  2385                           	opt stack 0
  2386  00006C                     Console_MakeField@Column:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0xC
  2390  00006C                     	ds	1
  2391  00006D                     Byte_SetPair@pPair:
  2392                           	opt stack 0
  2393  00006D                     Byte_SetQuad@pQuad:
  2394                           	opt stack 0
  2395  00006D                     Console_Tab@t:
  2396                           	opt stack 0
  2397  00006D                     Timer2_Init@pFrequency:
  2398                           	opt stack 0
  2399  00006D                     ___fldiv@rem:
  2400                           	opt stack 0
  2401                           
  2402                           ; 4 bytes @ 0xD
  2403  00006D                     	ds	1
  2404  00006E                     ?___flmul:
  2405                           	opt stack 0
  2406  00006E                     Byte_SetPair@pValue:
  2407                           	opt stack 0
  2408  00006E                     Byte_SetQuad@pValue:
  2409                           	opt stack 0
  2410  00006E                     Word_GetPair@pPair:
  2411                           	opt stack 0
  2412  00006E                     Console_Tab@i:
  2413                           	opt stack 0
  2414  00006E                     itos@destination:
  2415                           	opt stack 0
  2416  00006E                     _Console_MakeField$10974:
  2417                           	opt stack 0
  2418  00006E                     ___flmul@b:
  2419                           	opt stack 0
  2420                           
  2421                           ; 4 bytes @ 0xE
  2422  00006E                     	ds	1
  2423  00006F                     Console_Tab@c:
  2424                           	opt stack 0
  2425  00006F                     Port_SetPin@pInput:
  2426                           	opt stack 0
  2427  00006F                     Port_Set@pInput:
  2428                           	opt stack 0
  2429  00006F                     SPI_MinSpeed@pInput:
  2430                           	opt stack 0
  2431  00006F                     SPI_MaxSpeed@pInput:
  2432                           	opt stack 0
  2433  00006F                     Word_SetPair@pInput:
  2434                           	opt stack 0
  2435  00006F                     PortProperty_Valid@pInput:
  2436                           	opt stack 0
  2437  00006F                     LCD_FillRectangle@pSize:
  2438                           	opt stack 0
  2439                           
  2440                           ; 4 bytes @ 0xF
  2441  00006F                     	ds	1
  2442  000070                     ??_Console_PrintChar:
  2443  000070                     Console_MakeField@x:
  2444                           	opt stack 0
  2445  000070                     itos@Data:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x10
  2449  000070                     	ds	1
  2450  000071                     ??_Timer2_Init:
  2451  000071                     Port_SetPin@pPin:
  2452                           	opt stack 0
  2453  000071                     Port_Set@pValue:
  2454                           	opt stack 0
  2455  000071                     Word_SetPair@pPair:
  2456                           	opt stack 0
  2457  000071                     PortProperty_Valid@pPinDrive:
  2458                           	opt stack 0
  2459  000071                     Console_MakeField@y:
  2460                           	opt stack 0
  2461  000071                     ___fldiv@new_exp:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x11
  2465  000071                     	ds	1
  2466  000072                     ??_Port_Set:
  2467  000072                     Port_SetPin@pValue:
  2468                           	opt stack 0
  2469  000072                     Word_SetPair@pValue:
  2470                           	opt stack 0
  2471  000072                     PortProperty_Valid@pPin:
  2472                           	opt stack 0
  2473  000072                     LCD_DrawField@pField:
  2474                           	opt stack 0
  2475  000072                     itos@Length:
  2476                           	opt stack 0
  2477  000072                     Timer2_Init@RDIV:
  2478                           	opt stack 0
  2479  000072                     ___flmul@a:
  2480                           	opt stack 0
  2481                           
  2482                           ; 4 bytes @ 0x12
  2483  000072                     	ds	1
  2484  000073                     ??_PortProperty_Valid:
  2485  000073                     ??_LCD_FillRectangle:
  2486  000073                     Port_SetPin@Type:
  2487                           	opt stack 0
  2488  000073                     Console_PrintChar@pInput:
  2489                           	opt stack 0
  2490  000073                     ___fldiv@grs:
  2491                           	opt stack 0
  2492                           
  2493                           ; 4 bytes @ 0x13
  2494  000073                     	ds	1
  2495  000074                     LED_Set@pValue:
  2496                           	opt stack 0
  2497  000074                     putch@c:
  2498                           	opt stack 0
  2499  000074                     Port_TogglePin@pInput:
  2500                           	opt stack 0
  2501  000074                     itos@Out:
  2502                           	opt stack 0
  2503  000074                     LCD_DrawField@pPoint:
  2504                           	opt stack 0
  2505                           
  2506                           ; 4 bytes @ 0x14
  2507  000074                     	ds	1
  2508  000075                     ?_printf:
  2509                           	opt stack 0
  2510  000075                     LCD_FillRectangle@i:
  2511                           	opt stack 0
  2512  000075                     LED_Set@pLED:
  2513                           	opt stack 0
  2514  000075                     printf@f:
  2515                           	opt stack 0
  2516  000075                     PortProperty_Valid@Errors:
  2517                           	opt stack 0
  2518                           
  2519                           ; 16 bytes @ 0x15
  2520  000075                     	ds	1
  2521  000076                     ??___flmul:
  2522  000076                     LCD_FillRectangle@j:
  2523                           	opt stack 0
  2524  000076                     Port_TogglePin@pPin:
  2525                           	opt stack 0
  2526  000076                     HMI_SetNumber@pInput:
  2527                           	opt stack 0
  2528  000076                     Timer2_Init@pCPUClock:
  2529                           	opt stack 0
  2530                           
  2531                           ; 4 bytes @ 0x16
  2532  000076                     	ds	1
  2533  000077                     Port_TogglePin@Value:
  2534                           	opt stack 0
  2535  000077                     ___fldiv@bexp:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x17
  2539  000077                     	ds	1
  2540  000078                     LED_Toggle@pLED:
  2541                           	opt stack 0
  2542  000078                     ___fldiv@aexp:
  2543                           	opt stack 0
  2544  000078                     LCD_DrawField@pSize:
  2545                           	opt stack 0
  2546                           
  2547                           ; 4 bytes @ 0x18
  2548  000078                     	ds	1
  2549  000079                     ??_printf:
  2550  000079                     Event_DIPSwitch@pState:
  2551                           	opt stack 0
  2552  000079                     Event_TestButton@pState:
  2553                           	opt stack 0
  2554                           
  2555                           ; 1 bytes @ 0x19
  2556  000079                     	ds	1
  2557  00007A                     Event_DIPSwitch@Bar:
  2558                           	opt stack 0
  2559  00007A                     printf@flag:
  2560                           	opt stack 0
  2561  00007A                     ___flmul@sign:
  2562                           	opt stack 0
  2563  00007A                     Timer2_Init@DIVIDE:
  2564                           	opt stack 0
  2565                           
  2566                           ; 4 bytes @ 0x1A
  2567  00007A                     	ds	1
  2568  00007B                     printf@prec:
  2569                           	opt stack 0
  2570  00007B                     ___flmul@aexp:
  2571                           	opt stack 0
  2572  00007B                     Button_Poll@pButton:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x1B
  2576  00007B                     	ds	1
  2577  00007C                     ??_LCD_DrawField:
  2578  00007C                     printf@ap:
  2579                           	opt stack 0
  2580  00007C                     ___flmul@grs:
  2581                           	opt stack 0
  2582                           
  2583                           ; 4 bytes @ 0x1C
  2584  00007C                     	ds	1
  2585  00007D                     Button_Poll@pIncrement:
  2586                           	opt stack 0
  2587                           
  2588                           ; 1 bytes @ 0x1D
  2589  00007D                     	ds	1
  2590  00007E                     ??_Button_Poll:
  2591  00007E                     LCD_DrawField@count:
  2592                           	opt stack 0
  2593  00007E                     printf@val:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x1E
  2597  00007E                     	ds	2
  2598  000080                     LCD_DrawField@xmax:
  2599                           	opt stack 0
  2600  000080                     printf@c:
  2601                           	opt stack 0
  2602  000080                     ___flmul@bexp:
  2603                           	opt stack 0
  2604                           
  2605                           ; 1 bytes @ 0x20
  2606  000080                     	ds	1
  2607  000081                     LCD_DrawField@ymax:
  2608                           	opt stack 0
  2609  000081                     ___flmul@prod:
  2610                           	opt stack 0
  2611                           
  2612                           ; 4 bytes @ 0x21
  2613  000081                     	ds	1
  2614  000082                     LCD_DrawField@i:
  2615                           	opt stack 0
  2616  000082                     Port_Set@TypeRequired:
  2617                           	opt stack 0
  2618                           
  2619                           ; 2 bytes @ 0x22
  2620  000082                     	ds	1
  2621  000083                     ??_Console_Render:
  2622  000083                     Button_Poll@Pin:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x23
  2626  000083                     	ds	1
  2627  000084                     Port_Set@TypeActual:
  2628                           	opt stack 0
  2629                           
  2630                           ; 2 bytes @ 0x24
  2631  000084                     	ds	1
  2632  000085                     PortProperty_Valid@Pair:
  2633                           	opt stack 0
  2634  000085                     Console_Render@temp:
  2635                           	opt stack 0
  2636  000085                     ___flmul@temp:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x25
  2640  000085                     	ds	1
  2641  000086                     Port_Set@Type:
  2642                           	opt stack 0
  2643  000086                     Port_CheckPairType@pInput:
  2644                           	opt stack 0
  2645  000086                     Port_SetPinType@pInput:
  2646                           	opt stack 0
  2647  000086                     Console_Render@lCursor:
  2648                           	opt stack 0
  2649                           
  2650                           ; 4 bytes @ 0x26
  2651  000086                     	ds	1
  2652  000087                     ?___flneg:
  2653                           	opt stack 0
  2654  000087                     ___flneg@f1:
  2655                           	opt stack 0
  2656                           
  2657                           ; 4 bytes @ 0x27
  2658  000087                     	ds	1
  2659  000088                     Port_CheckPairType@pPair:
  2660                           	opt stack 0
  2661  000088                     Port_SetPinType@pPin:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x28
  2665  000088                     	ds	1
  2666  000089                     Port_CheckPairType@pDrive:
  2667                           	opt stack 0
  2668  000089                     Port_SetPinType@pType:
  2669                           	opt stack 0
  2670                           
  2671                           ; 1 bytes @ 0x29
  2672  000089                     	ds	1
  2673  00008A                     Port_CheckPairType@Pin1:
  2674                           	opt stack 0
  2675  00008A                     Port_SetPinType@Output:
  2676                           	opt stack 0
  2677  00008A                     Console_Render@x:
  2678                           	opt stack 0
  2679                           
  2680                           ; 1 bytes @ 0x2A
  2681  00008A                     	ds	1
  2682  00008B                     ?___fladd:
  2683                           	opt stack 0
  2684  00008B                     Port_CheckPairType@Pin2:
  2685                           	opt stack 0
  2686  00008B                     Console_Render@y:
  2687                           	opt stack 0
  2688  00008B                     Port_SetPinType@Props:
  2689                           	opt stack 0
  2690  00008B                     ___fladd@b:
  2691                           	opt stack 0
  2692                           
  2693                           ; 4 bytes @ 0x2B
  2694  00008B                     	ds	1
  2695  00008C                     Port_CheckPairType@Output:
  2696                           	opt stack 0
  2697                           
  2698                           ; 1 bytes @ 0x2C
  2699  00008C                     	ds	1
  2700  00008D                     LED_Init@pLED:
  2701                           	opt stack 0
  2702  00008D                     Port_CheckPairType@Props:
  2703                           	opt stack 0
  2704  00008D                     SPI_Init@pClock:
  2705                           	opt stack 0
  2706                           
  2707                           ; 4 bytes @ 0x2D
  2708  00008D                     	ds	2
  2709  00008F                     Port_CheckQuadType@pInput:
  2710                           	opt stack 0
  2711  00008F                     ___fladd@a:
  2712                           	opt stack 0
  2713                           
  2714                           ; 4 bytes @ 0x2F
  2715  00008F                     	ds	2
  2716  000091                     Port_CheckQuadType@pQuad:
  2717                           	opt stack 0
  2718  000091                     SPI_Init@pChannel:
  2719                           	opt stack 0
  2720                           
  2721                           ; 1 bytes @ 0x31
  2722  000091                     	ds	1
  2723  000092                     Port_CheckQuadType@pDrive:
  2724                           	opt stack 0
  2725  000092                     SPI_Init@pMode:
  2726                           	opt stack 0
  2727                           
  2728                           ; 1 bytes @ 0x32
  2729  000092                     	ds	1
  2730  000093                     ??___fladd:
  2731  000093                     Port_CheckQuadType@Pair1:
  2732                           	opt stack 0
  2733  000093                     SPI_Init@pInput:
  2734                           	opt stack 0
  2735                           
  2736                           ; 2 bytes @ 0x33
  2737  000093                     	ds	1
  2738  000094                     Port_CheckQuadType@Pair2:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x34
  2742  000094                     	ds	1
  2743  000095                     ??_LCD_Init:
  2744  000095                     Port_CheckQuadType@Output:
  2745                           	opt stack 0
  2746                           
  2747                           ; 1 bytes @ 0x35
  2748  000095                     	ds	1
  2749  000096                     Port_CheckPortType@pInput:
  2750                           	opt stack 0
  2751  000096                     Port_SetQuadType@pInput:
  2752                           	opt stack 0
  2753                           
  2754                           ; 2 bytes @ 0x36
  2755  000096                     	ds	1
  2756  000097                     LCD_Init@i:
  2757                           	opt stack 0
  2758                           
  2759                           ; 2 bytes @ 0x37
  2760  000097                     	ds	1
  2761  000098                     Port_CheckPortType@pDrive:
  2762                           	opt stack 0
  2763  000098                     Port_SetQuadType@pQuad:
  2764                           	opt stack 0
  2765                           
  2766                           ; 1 bytes @ 0x38
  2767  000098                     	ds	1
  2768  000099                     Port_CheckPortType@Output:
  2769                           	opt stack 0
  2770  000099                     Port_SetQuadType@pType:
  2771                           	opt stack 0
  2772                           
  2773                           ; 1 bytes @ 0x39
  2774  000099                     	ds	1
  2775  00009A                     Port_SetQuadType@Output:
  2776                           	opt stack 0
  2777  00009A                     Port_SetType@pInput:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x3A
  2781  00009A                     	ds	1
  2782  00009B                     ___fladd@signs:
  2783                           	opt stack 0
  2784  00009B                     Button_Init@pInput:
  2785                           	opt stack 0
  2786                           
  2787                           ; 2 bytes @ 0x3B
  2788  00009B                     	ds	1
  2789  00009C                     Port_SetType@pType:
  2790                           	opt stack 0
  2791  00009C                     ___fladd@aexp:
  2792                           	opt stack 0
  2793                           
  2794                           ; 1 bytes @ 0x3C
  2795  00009C                     	ds	1
  2796  00009D                     ??_Port_SetType:
  2797  00009D                     ___fladd@bexp:
  2798                           	opt stack 0
  2799  00009D                     Button_Init@pThreshold:
  2800                           	opt stack 0
  2801                           
  2802                           ; 2 bytes @ 0x3D
  2803  00009D                     	ds	1
  2804  00009E                     ___fladd@grs:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x3E
  2808  00009E                     	ds	1
  2809  00009F                     ?___flsub:
  2810                           	opt stack 0
  2811  00009F                     ?_eval_poly:
  2812                           	opt stack 0
  2813  00009F                     ?___fltol:
  2814                           	opt stack 0
  2815  00009F                     Port_SetType@Output:
  2816                           	opt stack 0
  2817  00009F                     Button_Init@pInitIO:
  2818                           	opt stack 0
  2819  00009F                     ___fltol@f1:
  2820                           	opt stack 0
  2821  00009F                     ___flsub@b:
  2822                           	opt stack 0
  2823  00009F                     eval_poly@x:
  2824                           	opt stack 0
  2825                           
  2826                           ; 4 bytes @ 0x3F
  2827  00009F                     	ds	1
  2828  0000A0                     Port_Init@pInput:
  2829                           	opt stack 0
  2830                           
  2831                           ; 2 bytes @ 0x40
  2832  0000A0                     	ds	2
  2833  0000A2                     Port_Init@pPort:
  2834                           	opt stack 0
  2835  0000A2                     Button_Init@pGetState:
  2836                           	opt stack 0
  2837                           
  2838                           ; 3 bytes @ 0x42
  2839  0000A2                     	ds	1
  2840  0000A3                     ??_Port_Init:
  2841  0000A3                     ??___fltol:
  2842  0000A3                     eval_poly@d:
  2843                           	opt stack 0
  2844  0000A3                     ___flsub@a:
  2845                           	opt stack 0
  2846                           
  2847                           ; 4 bytes @ 0x43
  2848  0000A3                     	ds	2
  2849  0000A5                     Port_Init@i:
  2850                           	opt stack 0
  2851  0000A5                     eval_poly@n:
  2852                           	opt stack 0
  2853  0000A5                     Button_Init@pFunction:
  2854                           	opt stack 0
  2855                           
  2856                           ; 3 bytes @ 0x45
  2857  0000A5                     	ds	1
  2858  0000A6                     
  2859                           ; 1 bytes @ 0x46
  2860  0000A6                     	ds	1
  2861  0000A7                     ??_eval_poly:
  2862  0000A7                     ___fltol@sign1:
  2863                           	opt stack 0
  2864                           
  2865                           ; 1 bytes @ 0x47
  2866  0000A7                     	ds	1
  2867  0000A8                     ___fltol@exp1:
  2868                           	opt stack 0
  2869  0000A8                     HMI_Init@in:
  2870                           	opt stack 0
  2871                           
  2872                           ; 2 bytes @ 0x48
  2873  0000A8                     	ds	1
  2874  0000A9                     ?_floor:
  2875                           	opt stack 0
  2876  0000A9                     floor@x:
  2877                           	opt stack 0
  2878                           
  2879                           ; 4 bytes @ 0x49
  2880  0000A9                     	ds	2
  2881  0000AB                     eval_poly@res:
  2882                           	opt stack 0
  2883                           
  2884                           ; 4 bytes @ 0x4B
  2885  0000AB                     	ds	2
  2886  0000AD                     floor@i:
  2887                           	opt stack 0
  2888                           
  2889                           ; 4 bytes @ 0x4D
  2890  0000AD                     	ds	2
  2891  0000AF                     ?_log:
  2892                           	opt stack 0
  2893  0000AF                     ?_ldexp:
  2894                           	opt stack 0
  2895  0000AF                     ldexp@value:
  2896                           	opt stack 0
  2897  0000AF                     log@x:
  2898                           	opt stack 0
  2899                           
  2900                           ; 4 bytes @ 0x4F
  2901  0000AF                     	ds	2
  2902  0000B1                     floor@expon:
  2903                           	opt stack 0
  2904                           
  2905                           ; 2 bytes @ 0x51
  2906  0000B1                     	ds	2
  2907  0000B3                     ldexp@newexp:
  2908                           	opt stack 0
  2909  0000B3                     log@exponent:
  2910                           	opt stack 0
  2911                           
  2912                           ; 2 bytes @ 0x53
  2913  0000B3                     	ds	2
  2914  0000B5                     ??_ldexp:
  2915                           
  2916                           ; 1 bytes @ 0x55
  2917  0000B5                     	ds	2
  2918  0000B7                     ?_exp:
  2919                           	opt stack 0
  2920  0000B7                     exp@x:
  2921                           	opt stack 0
  2922                           
  2923                           ; 4 bytes @ 0x57
  2924  0000B7                     	ds	4
  2925  0000BB                     _exp$15673:
  2926                           	opt stack 0
  2927                           
  2928                           ; 4 bytes @ 0x5B
  2929  0000BB                     	ds	4
  2930  0000BF                     exp@exponent:
  2931                           	opt stack 0
  2932                           
  2933                           ; 2 bytes @ 0x5F
  2934  0000BF                     	ds	2
  2935  0000C1                     exp@sign:
  2936                           	opt stack 0
  2937                           
  2938                           ; 1 bytes @ 0x61
  2939  0000C1                     	ds	1
  2940  0000C2                     ?_pow:
  2941                           	opt stack 0
  2942  0000C2                     pow@x:
  2943                           	opt stack 0
  2944                           
  2945                           ; 4 bytes @ 0x62
  2946  0000C2                     	ds	4
  2947  0000C6                     pow@y:
  2948                           	opt stack 0
  2949                           
  2950                           ; 4 bytes @ 0x66
  2951  0000C6                     	ds	4
  2952  0000CA                     _pow$15671:
  2953                           	opt stack 0
  2954                           
  2955                           ; 4 bytes @ 0x6A
  2956  0000CA                     	ds	4
  2957  0000CE                     _pow$15672:
  2958                           	opt stack 0
  2959                           
  2960                           ; 4 bytes @ 0x6E
  2961  0000CE                     	ds	4
  2962  0000D2                     pow@sign:
  2963                           	opt stack 0
  2964                           
  2965                           ; 1 bytes @ 0x72
  2966  0000D2                     	ds	1
  2967  0000D3                     pow@yi:
  2968                           	opt stack 0
  2969                           
  2970                           ; 4 bytes @ 0x73
  2971  0000D3                     	ds	4
  2972  0000D7                     ??_ADCAverage:
  2973                           
  2974                           ; 1 bytes @ 0x77
  2975  0000D7                     	ds	2
  2976  0000D9                     ??_Sensor_Observe2:
  2977  0000D9                     ??_Sensor_Observe:
  2978  0000D9                     
  2979                           ; 1 bytes @ 0x79
  2980  0000D9                     	ds	2
  2981  0000DB                     ??_main:
  2982                           
  2983                           ; 1 bytes @ 0x7B
  2984  0000DB                     	ds	5
  2985  0000E0                     main@down:
  2986                           	opt stack 0
  2987                           
  2988                           ; 1 bytes @ 0x80
  2989  0000E0                     	ds	1
  2990  0000E1                     main@right:
  2991                           	opt stack 0
  2992                           
  2993                           ; 1 bytes @ 0x81
  2994  0000E1                     	ds	1
  2995  0000E2                     main@left:
  2996                           	opt stack 0
  2997                           
  2998                           ; 1 bytes @ 0x82
  2999  0000E2                     	ds	1
  3000  0000E3                     main@up:
  3001                           	opt stack 0
  3002                           
  3003                           ; 1 bytes @ 0x83
  3004  0000E3                     	ds	1
  3005  0000E4                     main@Target_Distance:
  3006                           	opt stack 0
  3007                           
  3008                           ; 2 bytes @ 0x84
  3009  0000E4                     	ds	2
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           postdec1	equ	0xFE5
  3017                           fsr1h	equ	0xFE2
  3018                           fsr1l	equ	0xFE1
  3019                           
  3020                           	psect	cstackCOMRAM
  3021  000001                     __pcstackCOMRAM:
  3022                           	opt stack 0
  3023  000001                     i2Byte_SetBit@pInput:
  3024                           	opt stack 0
  3025  000001                     i2Byte_GetZone@pInput:
  3026                           	opt stack 0
  3027  000001                     i2delay_us@us:
  3028                           	opt stack 0
  3029  000001                     i2MXK_Queue@pCallback:
  3030                           	opt stack 0
  3031                           
  3032                           ; 3 bytes @ 0x0
  3033  000001                     	ds	2
  3034  000003                     i2Byte_SetBit@pBit:
  3035                           	opt stack 0
  3036  000003                     i2Byte_GetZone@pMax:
  3037                           	opt stack 0
  3038  000003                     i2delay_us@u:
  3039                           	opt stack 0
  3040                           
  3041                           ; 4 bytes @ 0x2
  3042  000003                     	ds	1
  3043  000004                     i2Byte_SetBit@pValue:
  3044                           	opt stack 0
  3045  000004                     i2Byte_GetZone@pChunk:
  3046                           	opt stack 0
  3047                           
  3048                           ; 1 bytes @ 0x3
  3049  000004                     	ds	1
  3050  000005                     ??i2_Byte_SetBit:
  3051  000005                     i2Byte_GetZone@pChunkSize:
  3052                           	opt stack 0
  3053                           
  3054                           ; 1 bytes @ 0x4
  3055  000005                     	ds	1
  3056  000006                     ??i2_Byte_GetZone:
  3057                           
  3058                           ; 1 bytes @ 0x5
  3059  000006                     	ds	1
  3060  000007                     i2Byte_GetZone@MASK:
  3061                           	opt stack 0
  3062  000007                     i2MXK_SwitchTo@CUR:
  3063                           	opt stack 0
  3064                           
  3065                           ; 1 bytes @ 0x6
  3066  000007                     	ds	1
  3067  000008                     i2Byte_GetZone@Offset:
  3068                           	opt stack 0
  3069  000008                     i2MXK_SwitchTo@pModule:
  3070                           	opt stack 0
  3071                           
  3072                           ; 1 bytes @ 0x7
  3073  000008                     	ds	1
  3074  000009                     i2Byte_GetZone@Output:
  3075                           	opt stack 0
  3076                           
  3077                           ; 1 bytes @ 0x8
  3078  000009                     	ds	1
  3079  00000A                     i2Byte_GetPair@pInput:
  3080                           	opt stack 0
  3081                           
  3082                           ; 2 bytes @ 0x9
  3083  00000A                     	ds	2
  3084  00000C                     i2Byte_GetPair@pPair:
  3085                           	opt stack 0
  3086                           
  3087                           ; 1 bytes @ 0xB
  3088  00000C                     	ds	1
  3089  00000D                     i2Word_GetPair@pInput:
  3090                           	opt stack 0
  3091                           
  3092                           ; 2 bytes @ 0xC
  3093  00000D                     	ds	2
  3094  00000F                     i2Word_GetPair@pPair:
  3095                           	opt stack 0
  3096                           
  3097                           ; 1 bytes @ 0xE
  3098  00000F                     	ds	1
  3099  000010                     i2Port_SetPin@pInput:
  3100                           	opt stack 0
  3101                           
  3102                           ; 2 bytes @ 0xF
  3103  000010                     	ds	2
  3104  000012                     i2Port_SetPin@pPin:
  3105                           	opt stack 0
  3106                           
  3107                           ; 1 bytes @ 0x11
  3108  000012                     	ds	1
  3109  000013                     i2Port_SetPin@pValue:
  3110                           	opt stack 0
  3111                           
  3112                           ; 1 bytes @ 0x12
  3113  000013                     	ds	1
  3114  000014                     i2Port_SetPin@Type:
  3115                           	opt stack 0
  3116                           
  3117                           ; 1 bytes @ 0x13
  3118  000014                     	ds	1
  3119  000015                     
  3120                           ; 1 bytes @ 0x14
  3121  000015                     	ds	2
  3122  000017                     ??_ISR_Function:
  3123                           
  3124                           ; 1 bytes @ 0x16
  3125  000017                     	ds	18
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           postdec1	equ	0xFE5
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           
  3136 ;;
  3137 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  3138 ;;
  3139 ;; *************** function _main *****************
  3140 ;; Defined at:
  3141 ;;		line 440 in file "main.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;		None
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  Target_Dista    2  132[BANK0 ] int 
  3146 ;;  up              1  131[BANK0 ] unsigned char 
  3147 ;;  left            1  130[BANK0 ] unsigned char 
  3148 ;;  right           1  129[BANK0 ] unsigned char 
  3149 ;;  down            1  128[BANK0 ] unsigned char 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;Total ram usage:       11 bytes
  3164 ;; Hardware stack levels required when called:   17
  3165 ;; This function calls:
  3166 ;;		_ADCAverage
  3167 ;;		_BangBang
  3168 ;;		_Closest_Object
  3169 ;;		_Closest_Object2
  3170 ;;		_Console_Init
  3171 ;;		_Console_Render
  3172 ;;		_Drive
  3173 ;;		_FunctInitButton
  3174 ;;		_Get_Sensor_State
  3175 ;;		_HMI_DIPSwitch
  3176 ;;		_HMI_DownSwitch
  3177 ;;		_HMI_Init
  3178 ;;		_HMI_LeftSwitch
  3179 ;;		_HMI_Poll
  3180 ;;		_HMI_Render
  3181 ;;		_HMI_RightSwitch
  3182 ;;		_HMI_SetNumber
  3183 ;;		_HMI_UpSwitch
  3184 ;;		_ISR_Enable
  3185 ;;		_InitADC
  3186 ;;		_InitSerialCommunication
  3187 ;;		_Init_Timer0
  3188 ;;		_LCD_Init
  3189 ;;		_LEDToggle
  3190 ;;		_LED_Init
  3191 ;;		_LED_Set
  3192 ;;		_MXK_BlockSwitchTo
  3193 ;;		_MXK_DIPSwitch
  3194 ;;		_MXK_Dequeue
  3195 ;;		_MXK_Init
  3196 ;;		_MXK_Release
  3197 ;;		_MXK_TestButton
  3198 ;;		_Reset_variables
  3199 ;;		_Robot_Init
  3200 ;;		_Robot_Stop
  3201 ;;		_Sensor_Observe
  3202 ;;		_Sensor_Observe2
  3203 ;;		_Turn
  3204 ;;		_UpdateDistance
  3205 ;;		_delay_ms
  3206 ;;		_printf
  3207 ;; This function is called by:
  3208 ;;		Startup code after reset
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text0
  3213  010000                     __ptext0:
  3214                           	opt stack 0
  3215  010000                     _main:
  3216                           	opt stack 14
  3217                           
  3218                           ;main.c: 442: MXK_Init();
  3219                           
  3220                           ;incstack = 0
  3221  010000  EC9C  F099         	call	_MXK_Init	;wreg free
  3222                           
  3223                           ;main.c: 443: Init_Timer0();
  3224  010004  EC6F  F0AF         	call	_Init_Timer0	;wreg free
  3225                           
  3226                           ;main.c: 444: InitSerialCommunication();
  3227  010008  ECEC  F0AE         	call	_InitSerialCommunication	;wreg free
  3228                           
  3229                           ;main.c: 445: Robot_Init();
  3230  01000C  ECAB  F0AF         	call	_Robot_Init	;wreg free
  3231                           
  3232                           ;main.c: 446: ISR_Enable();
  3233  010010  EC42  F0B0         	call	_ISR_Enable	;wreg free
  3234                           
  3235                           ;main.c: 447: FunctInitButton();
  3236  010014  EC3B  F0A6         	call	_FunctInitButton	;wreg free
  3237                           
  3238                           ;main.c: 448: InitADC();
  3239  010018  EC7B  F0AA         	call	_InitADC	;wreg free
  3240                           
  3241                           ;main.c: 449: LED_Init(eLED2);
  3242  01001C  0E01               	movlw	1
  3243  01001E  ECE2  F0A8         	call	_LED_Init
  3244                           
  3245                           ;main.c: 451: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3246  010022  0E01               	movlw	1
  3247  010024  ECF6  F0AC         	call	_MXK_BlockSwitchTo
  3248  010028  0900               	iorlw	0
  3249  01002A  B4D8               	btfsc	status,2,c
  3250  01002C  D00C               	goto	l2241
  3251                           
  3252                           ;main.c: 452: HMI_Init();
  3253  01002E  EC1D  F094         	call	_HMI_Init	;wreg free
  3254                           
  3255                           ;main.c: 453: LCD_Init();
  3256  010032  EC55  F098         	call	_LCD_Init	;wreg free
  3257                           
  3258                           ;main.c: 454: Console_Init();
  3259  010036  EC54  F0A7         	call	_Console_Init	;wreg free
  3260                           
  3261                           ;main.c: 455: if (MXK_Release())
  3262  01003A  EC4B  F0AF         	call	_MXK_Release	;wreg free
  3263  01003E  0900               	iorlw	0
  3264  010040  A4D8               	btfss	status,2,c
  3265                           
  3266                           ;main.c: 456: MXK_Dequeue();
  3267  010042  EC48  F0AD         	call	_MXK_Dequeue	;wreg free
  3268  010046                     l2241:
  3269                           
  3270                           ;main.c: 461: LEDToggle();
  3271                           
  3272                           ;main.c: 457: }
  3273                           ;main.c: 459: for(;;) {
  3274  010046  EC43  F0AC         	call	_LEDToggle	;wreg free
  3275                           
  3276                           ;main.c: 462: ADCAverage();
  3277  01004A  ECE5  F088         	call	_ADCAverage	;wreg free
  3278                           
  3279                           ;main.c: 464: HMI_SetNumber(average);
  3280  01004E  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  3281  010052  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  3282  010056  EC99  F0AE         	call	_HMI_SetNumber	;wreg free
  3283                           
  3284                           ;main.c: 465: HMI_Render();
  3285  01005A  EC12  F0AD         	call	_HMI_Render	;wreg free
  3286                           
  3287                           ;main.c: 466: HMI_Poll();
  3288  01005E  EC25  F0A8         	call	_HMI_Poll	;wreg free
  3289                           
  3290                           ;main.c: 468: bool down = HMIBoard.mDown.mGetState();
  3291  010062  EE21  F073         	lfsr	2,_HMIBoard+45
  3292  010066  D801               	call	u14278
  3293  010068  D00A               	goto	u14279
  3294  01006A                     u14278:
  3295  01006A  0005               	push	
  3296  01006C  6EFA               	movwf	pclath,c
  3297  01006E  50DE               	movf	postinc2,w,c
  3298  010070  6EFD               	movwf	tosl,c
  3299  010072  50DE               	movf	postinc2,w,c
  3300  010074  6EFE               	movwf	tosh,c
  3301  010076  50DE               	movf	postinc2,w,c
  3302  010078  6EFF               	movwf	tosu,c
  3303  01007A  50FA               	movf	pclath,w,c
  3304  01007C  0012               	return		;indir
  3305  01007E                     u14279:
  3306  01007E  0100               	movlb	0	; () banked
  3307  010080  6FE0               	movwf	main@down& (0+255),b
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 469: bool right = HMIBoard.mRight.mGetState();
  3311  010082  EE21  F055         	lfsr	2,_HMIBoard+15
  3312  010086  D801               	call	u14288
  3313  010088  D00A               	goto	u14289
  3314  01008A                     u14288:
  3315  01008A  0005               	push	
  3316  01008C  6EFA               	movwf	pclath,c
  3317  01008E  50DE               	movf	postinc2,w,c
  3318  010090  6EFD               	movwf	tosl,c
  3319  010092  50DE               	movf	postinc2,w,c
  3320  010094  6EFE               	movwf	tosh,c
  3321  010096  50DE               	movf	postinc2,w,c
  3322  010098  6EFF               	movwf	tosu,c
  3323  01009A  50FA               	movf	pclath,w,c
  3324  01009C  0012               	return		;indir
  3325  01009E                     u14289:
  3326  01009E  0100               	movlb	0	; () banked
  3327  0100A0  6FE1               	movwf	main@right& (0+255),b
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 470: bool up = HMIBoard.mUp.mGetState();
  3331  0100A2  EE21  F069         	lfsr	2,_HMIBoard+35
  3332  0100A6  D801               	call	u14298
  3333  0100A8  D00A               	goto	u14299
  3334  0100AA                     u14298:
  3335  0100AA  0005               	push	
  3336  0100AC  6EFA               	movwf	pclath,c
  3337  0100AE  50DE               	movf	postinc2,w,c
  3338  0100B0  6EFD               	movwf	tosl,c
  3339  0100B2  50DE               	movf	postinc2,w,c
  3340  0100B4  6EFE               	movwf	tosh,c
  3341  0100B6  50DE               	movf	postinc2,w,c
  3342  0100B8  6EFF               	movwf	tosu,c
  3343  0100BA  50FA               	movf	pclath,w,c
  3344  0100BC  0012               	return		;indir
  3345  0100BE                     u14299:
  3346  0100BE  0100               	movlb	0	; () banked
  3347  0100C0  6FE3               	movwf	main@up& (0+255),b
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;main.c: 471: bool left = HMIBoard.mLeft.mGetState();
  3351  0100C2  EE21  F05F         	lfsr	2,_HMIBoard+25
  3352  0100C6  D801               	call	u14308
  3353  0100C8  D00A               	goto	u14309
  3354  0100CA                     u14308:
  3355  0100CA  0005               	push	
  3356  0100CC  6EFA               	movwf	pclath,c
  3357  0100CE  50DE               	movf	postinc2,w,c
  3358  0100D0  6EFD               	movwf	tosl,c
  3359  0100D2  50DE               	movf	postinc2,w,c
  3360  0100D4  6EFE               	movwf	tosh,c
  3361  0100D6  50DE               	movf	postinc2,w,c
  3362  0100D8  6EFF               	movwf	tosu,c
  3363  0100DA  50FA               	movf	pclath,w,c
  3364  0100DC  0012               	return		;indir
  3365  0100DE                     u14309:
  3366  0100DE  0100               	movlb	0	; () banked
  3367  0100E0  6FE2               	movwf	main@left& (0+255),b
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 473: if (down) {
  3371  0100E2  51E0               	movf	main@down& (0+255),w,b
  3372  0100E4  B4D8               	btfsc	status,2,c
  3373  0100E6  D004               	goto	l2243
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;main.c: 474: mode = 3;
  3377  0100E8  0E00               	movlw	0
  3378  0100EA  6E32               	movwf	_mode+1,c
  3379  0100EC  0E03               	movlw	3
  3380  0100EE  6E31               	movwf	_mode,c
  3381  0100F0                     l2243:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 475: }
  3385                           ;main.c: 476: if (right) {
  3386  0100F0  51E1               	movf	main@right& (0+255),w,b
  3387  0100F2  B4D8               	btfsc	status,2,c
  3388  0100F4  D004               	goto	l2244
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;main.c: 477: mode = 1;
  3392  0100F6  0E00               	movlw	0
  3393  0100F8  6E32               	movwf	_mode+1,c
  3394  0100FA  0E01               	movlw	1
  3395  0100FC  6E31               	movwf	_mode,c
  3396  0100FE                     l2244:
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;main.c: 478: }
  3400                           ;main.c: 479: if (up) {
  3401  0100FE  51E3               	movf	main@up& (0+255),w,b
  3402  010100  B4D8               	btfsc	status,2,c
  3403  010102  D004               	goto	l2245
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;main.c: 480: mode = 2;
  3407  010104  0E00               	movlw	0
  3408  010106  6E32               	movwf	_mode+1,c
  3409  010108  0E02               	movlw	2
  3410  01010A  6E31               	movwf	_mode,c
  3411  01010C                     l2245:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;main.c: 481: }
  3415                           ;main.c: 482: if (left) {
  3416  01010C  51E2               	movf	main@left& (0+255),w,b
  3417  01010E  B4D8               	btfsc	status,2,c
  3418  010110  D004               	goto	l2246
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;main.c: 483: mode = 4;
  3422  010112  0E00               	movlw	0
  3423  010114  6E32               	movwf	_mode+1,c
  3424  010116  0E04               	movlw	4
  3425  010118  6E31               	movwf	_mode,c
  3426  01011A                     l2246:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;main.c: 484: }
  3430                           ;main.c: 489: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3431                           
  3432                           ; BSR set to: 0
  3433  01011A  0E01               	movlw	1
  3434  01011C  ECF6  F0AC         	call	_MXK_BlockSwitchTo
  3435  010120  0900               	iorlw	0
  3436  010122  B4D8               	btfsc	status,2,c
  3437  010124  D790               	goto	l2241
  3438                           
  3439                           ;main.c: 491: if (mode == 0) {
  3440  010126  5031               	movf	_mode,w,c
  3441  010128  1032               	iorwf	_mode+1,w,c
  3442  01012A  A4D8               	btfss	status,2,c
  3443  01012C  D057               	goto	l2248
  3444                           
  3445                           ;main.c: 492: LED_Set(eLED2, 0);
  3446  01012E  0E00               	movlw	0
  3447  010130  0100               	movlb	0	; () banked
  3448  010132  6F74               	movwf	LED_Set@pValue& (0+255),b
  3449  010134  0E01               	movlw	1
  3450  010136  EC11  F0AB         	call	_LED_Set
  3451                           
  3452                           ;main.c: 493: Robot_Stop();
  3453  01013A  ECAC  F0AE         	call	_Robot_Stop	;wreg free
  3454                           
  3455                           ;main.c: 494: Reset_variables();
  3456  01013E  EC55  F0AA         	call	_Reset_variables	;wreg free
  3457                           
  3458                           ;main.c: 496: printf("%c", (char)35);
  3459  010142  0EFC               	movlw	low STR_1
  3460  010144  0100               	movlb	0	; () banked
  3461  010146  6F75               	movwf	printf@f& (0+255),b
  3462  010148  0EFF               	movlw	high STR_1
  3463  01014A  6F76               	movwf	(printf@f+1)& (0+255),b
  3464  01014C  0E00               	movlw	0
  3465  01014E  6F78               	movwf	(?_printf+3)& (0+255),b
  3466  010150  0E23               	movlw	35
  3467  010152  6F77               	movwf	(?_printf+2)& (0+255),b
  3468  010154  EC4F  F096         	call	_printf	;wreg free
  3469                           
  3470                           ;main.c: 497: printf("Robot Ready! \n");
  3471  010158  0ED6               	movlw	low STR_31
  3472  01015A  0100               	movlb	0	; () banked
  3473  01015C  6F75               	movwf	printf@f& (0+255),b
  3474  01015E  0EFF               	movlw	high STR_31
  3475  010160  6F76               	movwf	(printf@f+1)& (0+255),b
  3476  010162  EC4F  F096         	call	_printf	;wreg free
  3477                           
  3478                           ;main.c: 498: printf("Press right for 5m\n drive,\n");
  3479  010166  0EB7               	movlw	low STR_32
  3480  010168  0100               	movlb	0	; () banked
  3481  01016A  6F75               	movwf	printf@f& (0+255),b
  3482  01016C  0EFE               	movlw	high STR_32
  3483  01016E  6F76               	movwf	(printf@f+1)& (0+255),b
  3484  010170  EC4F  F096         	call	_printf	;wreg free
  3485                           
  3486                           ;main.c: 499: printf("Press down for\nsquare drive,\n");
  3487  010174  0E7D               	movlw	low STR_33
  3488  010176  0100               	movlb	0	; () banked
  3489  010178  6F75               	movwf	printf@f& (0+255),b
  3490  01017A  0EFE               	movlw	high STR_33
  3491  01017C  6F76               	movwf	(printf@f+1)& (0+255),b
  3492  01017E  EC4F  F096         	call	_printf	;wreg free
  3493                           
  3494                           ;main.c: 500: printf("Press up for IR scan mode,\n");
  3495  010182  0E9B               	movlw	low STR_34
  3496  010184  0100               	movlb	0	; () banked
  3497  010186  6F75               	movwf	printf@f& (0+255),b
  3498  010188  0EFE               	movlw	high STR_34
  3499  01018A  6F76               	movwf	(printf@f+1)& (0+255),b
  3500  01018C  EC4F  F096         	call	_printf	;wreg free
  3501                           
  3502                           ;main.c: 501: printf("Press left for wall follow\n");
  3503  010190  0EEF               	movlw	low STR_35
  3504  010192  0100               	movlb	0	; () banked
  3505  010194  6F75               	movwf	printf@f& (0+255),b
  3506  010196  0EFE               	movlw	high STR_35
  3507  010198  6F76               	movwf	(printf@f+1)& (0+255),b
  3508  01019A  EC4F  F096         	call	_printf	;wreg free
  3509                           
  3510                           ;main.c: 503: printf("                 \n");
  3511  01019E  0E7D               	movlw	low STR_2
  3512  0101A0  0100               	movlb	0	; () banked
  3513  0101A2  6F75               	movwf	printf@f& (0+255),b
  3514  0101A4  0EFF               	movlw	high STR_2
  3515  0101A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3516  0101A8  EC4F  F096         	call	_printf	;wreg free
  3517                           
  3518                           ;main.c: 504: printf("                 \n");
  3519  0101AC  0E7D               	movlw	low STR_2
  3520  0101AE  0100               	movlb	0	; () banked
  3521  0101B0  6F75               	movwf	printf@f& (0+255),b
  3522  0101B2  0EFF               	movlw	high STR_2
  3523  0101B4  6F76               	movwf	(printf@f+1)& (0+255),b
  3524  0101B6  EC4F  F096         	call	_printf	;wreg free
  3525                           
  3526                           ;main.c: 505: printf("                 \n");
  3527  0101BA  0E7D               	movlw	low STR_2
  3528  0101BC  0100               	movlb	0	; () banked
  3529  0101BE  6F75               	movwf	printf@f& (0+255),b
  3530  0101C0  0EFF               	movlw	high STR_2
  3531  0101C2  6F76               	movwf	(printf@f+1)& (0+255),b
  3532  0101C4  EC4F  F096         	call	_printf	;wreg free
  3533                           
  3534                           ;main.c: 506: printf("                 \n");
  3535  0101C8  0E7D               	movlw	low STR_2
  3536  0101CA  0100               	movlb	0	; () banked
  3537  0101CC  6F75               	movwf	printf@f& (0+255),b
  3538  0101CE  0EFF               	movlw	high STR_2
  3539  0101D0  6F76               	movwf	(printf@f+1)& (0+255),b
  3540  0101D2  EC4F  F096         	call	_printf	;wreg free
  3541                           
  3542                           ;main.c: 507: Console_Render();
  3543  0101D6  EC73  F092         	call	_Console_Render	;wreg free
  3544                           
  3545                           ;main.c: 508: }
  3546  0101DA  D2D3               	goto	l2259
  3547  0101DC                     l2248:
  3548                           
  3549                           ;main.c: 509: else if (mode == 1) {
  3550  0101DC  0431               	decf	_mode,w,c
  3551  0101DE  1032               	iorwf	_mode+1,w,c
  3552  0101E0  A4D8               	btfss	status,2,c
  3553  0101E2  D06E               	goto	l2250
  3554                           
  3555                           ;main.c: 510: LED_Set(eLED2, 1);
  3556  0101E4  0E01               	movlw	1
  3557  0101E6  0100               	movlb	0	; () banked
  3558  0101E8  6F74               	movwf	LED_Set@pValue& (0+255),b
  3559  0101EA  0E01               	movlw	1
  3560  0101EC  EC11  F0AB         	call	_LED_Set
  3561                           
  3562                           ;main.c: 511: Drive(200);
  3563  0101F0  0E00               	movlw	0
  3564  0101F2  0100               	movlb	0	; () banked
  3565  0101F4  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3566  0101F6  0EC8               	movlw	200
  3567  0101F8  6F61               	movwf	Drive@Speed& (0+255),b
  3568  0101FA  ECC2  F0AB         	call	_Drive	;wreg free
  3569                           
  3570                           ;main.c: 512: T_VAR += UpdateDistance();
  3571  0101FE  EC22  F0AE         	call	_UpdateDistance	;wreg free
  3572  010202  0100               	movlb	0	; () banked
  3573  010204  5161               	movf	?_UpdateDistance& (0+255),w,b
  3574  010206  262F               	addwf	_T_VAR,f,c
  3575  010208  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3576  01020A  2230               	addwfc	_T_VAR+1,f,c
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;main.c: 513: printf("%c", (char)35);
  3580  01020C  0EFC               	movlw	low STR_1
  3581  01020E  6F75               	movwf	printf@f& (0+255),b
  3582  010210  0EFF               	movlw	high STR_1
  3583  010212  6F76               	movwf	(printf@f+1)& (0+255),b
  3584  010214  0E00               	movlw	0
  3585  010216  6F78               	movwf	(?_printf+3)& (0+255),b
  3586  010218  0E23               	movlw	35
  3587  01021A  6F77               	movwf	(?_printf+2)& (0+255),b
  3588  01021C  EC4F  F096         	call	_printf	;wreg free
  3589                           
  3590                           ;main.c: 514: printf("Traveled Distance:\n%d", T_VAR);
  3591  010220  0E3E               	movlw	low STR_41
  3592  010222  0100               	movlb	0	; () banked
  3593  010224  6F75               	movwf	printf@f& (0+255),b
  3594  010226  0EFF               	movlw	high STR_41
  3595  010228  6F76               	movwf	(printf@f+1)& (0+255),b
  3596  01022A  C02F  F077         	movff	_T_VAR,?_printf+2
  3597  01022E  C030  F078         	movff	_T_VAR+1,?_printf+3
  3598  010232  EC4F  F096         	call	_printf	;wreg free
  3599                           
  3600                           ;main.c: 515: printf("                 \n");
  3601  010236  0E7D               	movlw	low STR_2
  3602  010238  0100               	movlb	0	; () banked
  3603  01023A  6F75               	movwf	printf@f& (0+255),b
  3604  01023C  0EFF               	movlw	high STR_2
  3605  01023E  6F76               	movwf	(printf@f+1)& (0+255),b
  3606  010240  EC4F  F096         	call	_printf	;wreg free
  3607                           
  3608                           ;main.c: 516: printf("                 \n");
  3609  010244  0E7D               	movlw	low STR_2
  3610  010246  0100               	movlb	0	; () banked
  3611  010248  6F75               	movwf	printf@f& (0+255),b
  3612  01024A  0EFF               	movlw	high STR_2
  3613  01024C  6F76               	movwf	(printf@f+1)& (0+255),b
  3614  01024E  EC4F  F096         	call	_printf	;wreg free
  3615                           
  3616                           ;main.c: 517: printf("                 \n");
  3617  010252  0E7D               	movlw	low STR_2
  3618  010254  0100               	movlb	0	; () banked
  3619  010256  6F75               	movwf	printf@f& (0+255),b
  3620  010258  0EFF               	movlw	high STR_2
  3621  01025A  6F76               	movwf	(printf@f+1)& (0+255),b
  3622  01025C  EC4F  F096         	call	_printf	;wreg free
  3623                           
  3624                           ;main.c: 518: printf("                 \n");
  3625  010260  0E7D               	movlw	low STR_2
  3626  010262  0100               	movlb	0	; () banked
  3627  010264  6F75               	movwf	printf@f& (0+255),b
  3628  010266  0EFF               	movlw	high STR_2
  3629  010268  6F76               	movwf	(printf@f+1)& (0+255),b
  3630  01026A  EC4F  F096         	call	_printf	;wreg free
  3631                           
  3632                           ;main.c: 519: printf("                 \n");
  3633  01026E  0E7D               	movlw	low STR_2
  3634  010270  0100               	movlb	0	; () banked
  3635  010272  6F75               	movwf	printf@f& (0+255),b
  3636  010274  0EFF               	movlw	high STR_2
  3637  010276  6F76               	movwf	(printf@f+1)& (0+255),b
  3638  010278  EC4F  F096         	call	_printf	;wreg free
  3639                           
  3640                           ;main.c: 520: printf("                 \n");
  3641  01027C  0E7D               	movlw	low STR_2
  3642  01027E  0100               	movlb	0	; () banked
  3643  010280  6F75               	movwf	printf@f& (0+255),b
  3644  010282  0EFF               	movlw	high STR_2
  3645  010284  6F76               	movwf	(printf@f+1)& (0+255),b
  3646  010286  EC4F  F096         	call	_printf	;wreg free
  3647                           
  3648                           ;main.c: 521: printf("                 \n");
  3649  01028A  0E7D               	movlw	low STR_2
  3650  01028C  0100               	movlb	0	; () banked
  3651  01028E  6F75               	movwf	printf@f& (0+255),b
  3652  010290  0EFF               	movlw	high STR_2
  3653  010292  6F76               	movwf	(printf@f+1)& (0+255),b
  3654  010294  EC4F  F096         	call	_printf	;wreg free
  3655                           
  3656                           ;main.c: 522: printf("                 \n");
  3657  010298  0E7D               	movlw	low STR_2
  3658  01029A  0100               	movlb	0	; () banked
  3659  01029C  6F75               	movwf	printf@f& (0+255),b
  3660  01029E  0EFF               	movlw	high STR_2
  3661  0102A0  6F76               	movwf	(printf@f+1)& (0+255),b
  3662  0102A2  EC4F  F096         	call	_printf	;wreg free
  3663                           
  3664                           ;main.c: 523: Console_Render();
  3665  0102A6  EC73  F092         	call	_Console_Render	;wreg free
  3666                           
  3667                           ;main.c: 524: if (T_VAR >= 5000) {
  3668  0102AA  BE30               	btfsc	_T_VAR+1,7,c
  3669  0102AC  D26A               	goto	l2259
  3670  0102AE  0E88               	movlw	136
  3671  0102B0  5C2F               	subwf	_T_VAR,w,c
  3672  0102B2  0E13               	movlw	19
  3673  0102B4  5830               	subwfb	_T_VAR+1,w,c
  3674  0102B6  A0D8               	btfss	status,0,c
  3675  0102B8  D264               	goto	l2259
  3676                           
  3677                           ;main.c: 525: Robot_Stop();
  3678  0102BA  ECAC  F0AE         	call	_Robot_Stop	;wreg free
  3679  0102BE  D25D               	goto	u14560
  3680  0102C0                     l2250:
  3681                           
  3682                           ;main.c: 529: else if (mode == 2) {
  3683  0102C0  0E02               	movlw	2
  3684  0102C2  1831               	xorwf	_mode,w,c
  3685  0102C4  1032               	iorwf	_mode+1,w,c
  3686  0102C6  A4D8               	btfss	status,2,c
  3687  0102C8  D012               	goto	l2253
  3688                           
  3689                           ;main.c: 530: LED_Set(eLED2, 1);
  3690  0102CA  0E01               	movlw	1
  3691  0102CC  0100               	movlb	0	; () banked
  3692  0102CE  6F74               	movwf	LED_Set@pValue& (0+255),b
  3693  0102D0  0E01               	movlw	1
  3694  0102D2  EC11  F0AB         	call	_LED_Set
  3695                           
  3696                           ;main.c: 531: Sensor_Observe();
  3697  0102D6  ECFF  F09C         	call	_Sensor_Observe	;wreg free
  3698                           
  3699                           ;main.c: 533: Closest_Object();
  3700  0102DA  EC73  F0A0         	call	_Closest_Object	;wreg free
  3701                           
  3702                           ;main.c: 534: delay_ms(2000);
  3703  0102DE  0E07               	movlw	7
  3704  0102E0  0100               	movlb	0	; () banked
  3705  0102E2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3706  0102E4  0ED0               	movlw	208
  3707  0102E6  6F60               	movwf	delay_ms@ms& (0+255),b
  3708  0102E8  ECB4  F0A8         	call	_delay_ms	;wreg free
  3709  0102EC  D246               	goto	u14560
  3710  0102EE                     l2253:
  3711                           
  3712                           ;main.c: 537: else if (mode == 3) {
  3713  0102EE  0E03               	movlw	3
  3714  0102F0  1831               	xorwf	_mode,w,c
  3715  0102F2  1032               	iorwf	_mode+1,w,c
  3716  0102F4  A4D8               	btfss	status,2,c
  3717  0102F6  D0A5               	goto	l2255
  3718                           
  3719                           ;main.c: 538: Drive(100);
  3720  0102F8  0E00               	movlw	0
  3721  0102FA  0100               	movlb	0	; () banked
  3722  0102FC  6F62               	movwf	(Drive@Speed+1)& (0+255),b
  3723  0102FE  0E64               	movlw	100
  3724  010300  6F61               	movwf	Drive@Speed& (0+255),b
  3725  010302  ECC2  F0AB         	call	_Drive	;wreg free
  3726                           
  3727                           ;main.c: 539: LED_Set(eLED2, 1);
  3728  010306  0E01               	movlw	1
  3729  010308  0100               	movlb	0	; () banked
  3730  01030A  6F74               	movwf	LED_Set@pValue& (0+255),b
  3731  01030C  0E01               	movlw	1
  3732  01030E  EC11  F0AB         	call	_LED_Set
  3733                           
  3734                           ;main.c: 540: T_VAR += UpdateDistance();
  3735  010312  EC22  F0AE         	call	_UpdateDistance	;wreg free
  3736  010316  0100               	movlb	0	; () banked
  3737  010318  5161               	movf	?_UpdateDistance& (0+255),w,b
  3738  01031A  262F               	addwf	_T_VAR,f,c
  3739  01031C  5162               	movf	(?_UpdateDistance+1)& (0+255),w,b
  3740  01031E  2230               	addwfc	_T_VAR+1,f,c
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;main.c: 542: Square_Dist = T_VAR + mod;
  3744  010320  0101               	movlb	1	; () banked
  3745  010322  5132               	movf	_mod& (0+255),w,b
  3746  010324  242F               	addwf	_T_VAR,w,c
  3747  010326  6F34               	movwf	_Square_Dist& (0+255),b
  3748  010328  5133               	movf	(_mod+1)& (0+255),w,b
  3749  01032A  2030               	addwfc	_T_VAR+1,w,c
  3750  01032C  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  3751                           
  3752                           ; BSR set to: 1
  3753                           ;main.c: 543: printf("%c", (char)35);
  3754  01032E  0EFC               	movlw	low STR_1
  3755  010330  0100               	movlb	0	; () banked
  3756  010332  6F75               	movwf	printf@f& (0+255),b
  3757  010334  0EFF               	movlw	high STR_1
  3758  010336  6F76               	movwf	(printf@f+1)& (0+255),b
  3759  010338  0E00               	movlw	0
  3760  01033A  6F78               	movwf	(?_printf+3)& (0+255),b
  3761  01033C  0E23               	movlw	35
  3762  01033E  6F77               	movwf	(?_printf+2)& (0+255),b
  3763  010340  EC4F  F096         	call	_printf	;wreg free
  3764                           
  3765                           ;main.c: 544: printf("SQUARE DRIVE MODE 3! \n");
  3766  010344  0E27               	movlw	low STR_51
  3767  010346  0100               	movlb	0	; () banked
  3768  010348  6F75               	movwf	printf@f& (0+255),b
  3769  01034A  0EFF               	movlw	high STR_51
  3770  01034C  6F76               	movwf	(printf@f+1)& (0+255),b
  3771  01034E  EC4F  F096         	call	_printf	;wreg free
  3772                           
  3773                           ;main.c: 545: printf("Total: %d\n", Square_Dist);
  3774  010352  0EF1               	movlw	low STR_52
  3775  010354  0100               	movlb	0	; () banked
  3776  010356  6F75               	movwf	printf@f& (0+255),b
  3777  010358  0EFF               	movlw	high STR_52
  3778  01035A  6F76               	movwf	(printf@f+1)& (0+255),b
  3779  01035C  C134  F077         	movff	_Square_Dist,?_printf+2
  3780  010360  C135  F078         	movff	_Square_Dist+1,?_printf+3
  3781  010364  EC4F  F096         	call	_printf	;wreg free
  3782                           
  3783                           ;main.c: 546: printf("                 \n");
  3784  010368  0E7D               	movlw	low STR_2
  3785  01036A  0100               	movlb	0	; () banked
  3786  01036C  6F75               	movwf	printf@f& (0+255),b
  3787  01036E  0EFF               	movlw	high STR_2
  3788  010370  6F76               	movwf	(printf@f+1)& (0+255),b
  3789  010372  EC4F  F096         	call	_printf	;wreg free
  3790                           
  3791                           ;main.c: 547: printf("                 \n");
  3792  010376  0E7D               	movlw	low STR_2
  3793  010378  0100               	movlb	0	; () banked
  3794  01037A  6F75               	movwf	printf@f& (0+255),b
  3795  01037C  0EFF               	movlw	high STR_2
  3796  01037E  6F76               	movwf	(printf@f+1)& (0+255),b
  3797  010380  EC4F  F096         	call	_printf	;wreg free
  3798                           
  3799                           ;main.c: 548: printf("                 \n");
  3800  010384  0E7D               	movlw	low STR_2
  3801  010386  0100               	movlb	0	; () banked
  3802  010388  6F75               	movwf	printf@f& (0+255),b
  3803  01038A  0EFF               	movlw	high STR_2
  3804  01038C  6F76               	movwf	(printf@f+1)& (0+255),b
  3805  01038E  EC4F  F096         	call	_printf	;wreg free
  3806                           
  3807                           ;main.c: 549: printf("                 \n");
  3808  010392  0E7D               	movlw	low STR_2
  3809  010394  0100               	movlb	0	; () banked
  3810  010396  6F75               	movwf	printf@f& (0+255),b
  3811  010398  0EFF               	movlw	high STR_2
  3812  01039A  6F76               	movwf	(printf@f+1)& (0+255),b
  3813  01039C  EC4F  F096         	call	_printf	;wreg free
  3814                           
  3815                           ;main.c: 550: printf("                 \n");
  3816  0103A0  0E7D               	movlw	low STR_2
  3817  0103A2  0100               	movlb	0	; () banked
  3818  0103A4  6F75               	movwf	printf@f& (0+255),b
  3819  0103A6  0EFF               	movlw	high STR_2
  3820  0103A8  6F76               	movwf	(printf@f+1)& (0+255),b
  3821  0103AA  EC4F  F096         	call	_printf	;wreg free
  3822                           
  3823                           ;main.c: 551: printf("                 \n");
  3824  0103AE  0E7D               	movlw	low STR_2
  3825  0103B0  0100               	movlb	0	; () banked
  3826  0103B2  6F75               	movwf	printf@f& (0+255),b
  3827  0103B4  0EFF               	movlw	high STR_2
  3828  0103B6  6F76               	movwf	(printf@f+1)& (0+255),b
  3829  0103B8  EC4F  F096         	call	_printf	;wreg free
  3830                           
  3831                           ;main.c: 552: printf("                 \n");
  3832  0103BC  0E7D               	movlw	low STR_2
  3833  0103BE  0100               	movlb	0	; () banked
  3834  0103C0  6F75               	movwf	printf@f& (0+255),b
  3835  0103C2  0EFF               	movlw	high STR_2
  3836  0103C4  6F76               	movwf	(printf@f+1)& (0+255),b
  3837  0103C6  EC4F  F096         	call	_printf	;wreg free
  3838                           
  3839                           ;main.c: 553: printf("                 \n");
  3840  0103CA  0E7D               	movlw	low STR_2
  3841  0103CC  0100               	movlb	0	; () banked
  3842  0103CE  6F75               	movwf	printf@f& (0+255),b
  3843  0103D0  0EFF               	movlw	high STR_2
  3844  0103D2  6F76               	movwf	(printf@f+1)& (0+255),b
  3845  0103D4  EC4F  F096         	call	_printf	;wreg free
  3846                           
  3847                           ;main.c: 554: Console_Render();
  3848  0103D8  EC73  F092         	call	_Console_Render	;wreg free
  3849                           
  3850                           ;main.c: 556: if (T_VAR >= 1000) {
  3851  0103DC  BE30               	btfsc	_T_VAR+1,7,c
  3852  0103DE  D01E               	goto	l2256
  3853  0103E0  0EE8               	movlw	232
  3854  0103E2  5C2F               	subwf	_T_VAR,w,c
  3855  0103E4  0E03               	movlw	3
  3856  0103E6  5830               	subwfb	_T_VAR+1,w,c
  3857  0103E8  A0D8               	btfss	status,0,c
  3858  0103EA  D018               	goto	l2256
  3859                           
  3860                           ;main.c: 557: Turn(82, 100, 0);
  3861  0103EC  0E00               	movlw	0
  3862  0103EE  0100               	movlb	0	; () banked
  3863  0103F0  6F62               	movwf	(Turn@Angle+1)& (0+255),b
  3864  0103F2  0E52               	movlw	82
  3865  0103F4  6F61               	movwf	Turn@Angle& (0+255),b
  3866  0103F6  0E00               	movlw	0
  3867  0103F8  6F64               	movwf	(Turn@Speed+1)& (0+255),b
  3868  0103FA  0E64               	movlw	100
  3869  0103FC  6F63               	movwf	Turn@Speed& (0+255),b
  3870  0103FE  0E00               	movlw	0
  3871  010400  6F66               	movwf	(Turn@Dir+1)& (0+255),b
  3872  010402  0E00               	movlw	0
  3873  010404  6F65               	movwf	Turn@Dir& (0+255),b
  3874  010406  EC00  F0A6         	call	_Turn	;wreg free
  3875                           
  3876                           ;main.c: 558: T_VAR = 0;
  3877  01040A  0E00               	movlw	0
  3878  01040C  6E30               	movwf	_T_VAR+1,c
  3879  01040E  0E00               	movlw	0
  3880  010410  6E2F               	movwf	_T_VAR,c
  3881                           
  3882                           ;main.c: 559: mod += 1000;
  3883  010412  0101               	movlb	1	; () banked
  3884  010414  0EE8               	movlw	232
  3885  010416  2732               	addwf	_mod& (0+255),f,b
  3886  010418  0E03               	movlw	3
  3887  01041A  2333               	addwfc	(_mod+1)& (0+255),f,b
  3888  01041C                     l2256:
  3889                           
  3890                           ;main.c: 560: }
  3891                           ;main.c: 562: if (Square_Dist >= 4000) {
  3892                           
  3893                           ; BSR set to: 1
  3894  01041C  0101               	movlb	1	; () banked
  3895  01041E  BF35               	btfsc	(_Square_Dist+1)& (0+255),7,b
  3896  010420  D1B0               	goto	l2259
  3897  010422  0EA0               	movlw	160
  3898  010424  5D34               	subwf	_Square_Dist& (0+255),w,b
  3899  010426  0E0F               	movlw	15
  3900  010428  5935               	subwfb	(_Square_Dist+1)& (0+255),w,b
  3901  01042A  A0D8               	btfss	status,0,c
  3902  01042C  D1AA               	goto	l2259
  3903                           
  3904                           ; BSR set to: 1
  3905                           ;main.c: 564: Robot_Stop();
  3906  01042E  ECAC  F0AE         	call	_Robot_Stop	;wreg free
  3907                           
  3908                           ;main.c: 565: delay_ms(500);
  3909  010432  0E01               	movlw	1
  3910  010434  0100               	movlb	0	; () banked
  3911  010436  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  3912  010438  0EF4               	movlw	244
  3913  01043A  6F60               	movwf	delay_ms@ms& (0+255),b
  3914  01043C  ECB4  F0A8         	call	_delay_ms	;wreg free
  3915  010440  D19C               	goto	u14560
  3916  010442                     l2255:
  3917  010442  0E04               	movlw	4
  3918  010444  1831               	xorwf	_mode,w,c
  3919  010446  1032               	iorwf	_mode+1,w,c
  3920  010448  A4D8               	btfss	status,2,c
  3921  01044A  D19B               	goto	l2259
  3922                           
  3923                           ;main.c: 570: Sensor_Observe2();
  3924  01044C  EC62  F09B         	call	_Sensor_Observe2	;wreg free
  3925                           
  3926                           ;main.c: 571: Closest_Object2();
  3927  010450  ECC3  F0A5         	call	_Closest_Object2	;wreg free
  3928                           
  3929                           ;main.c: 573: int Target_Distance = Low_Sensor;
  3930  010454  C04B  F0E4         	movff	_Low_Sensor,main@Target_Distance
  3931  010458  C04C  F0E5         	movff	_Low_Sensor+1,main@Target_Distance+1
  3932                           
  3933                           ;main.c: 574: LED_Set(eLED2, 1);
  3934  01045C  0E01               	movlw	1
  3935  01045E  0100               	movlb	0	; () banked
  3936  010460  6F74               	movwf	LED_Set@pValue& (0+255),b
  3937  010462  0E01               	movlw	1
  3938  010464  EC11  F0AB         	call	_LED_Set
  3939                           
  3940                           ;main.c: 575: Get_Sensor_State();
  3941  010468  EC7B  F0AF         	call	_Get_Sensor_State	;wreg free
  3942                           
  3943                           ;main.c: 576: if (test > 0) {
  3944  01046C  0101               	movlb	1	; () banked
  3945  01046E  BF1D               	btfsc	(_test+1)& (0+255),7,b
  3946  010470  D180               	goto	l2272
  3947  010472  511D               	movf	(_test+1)& (0+255),w,b
  3948  010474  E103               	bnz	u14440
  3949  010476  051C               	decf	_test& (0+255),w,b
  3950  010478  A0D8               	btfss	status,0,c
  3951  01047A  D17B               	goto	l2272
  3952  01047C                     u14440:
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;main.c: 577: mode = 0;
  3956  01047C  0E00               	movlw	0
  3957  01047E  6E32               	movwf	_mode+1,c
  3958  010480  0E00               	movlw	0
  3959  010482  6E31               	movwf	_mode,c
  3960                           
  3961                           ; BSR set to: 1
  3962                           ;main.c: 578: }
  3963                           ;main.c: 580: while (BumpSensor == 0) {
  3964  010484  D176               	goto	l2272
  3965  010486                     
  3966                           ;main.c: 581: ADCAverage();
  3967                           
  3968                           ; BSR set to: 1
  3969  010486  ECE5  F088         	call	_ADCAverage	;wreg free
  3970                           
  3971                           ;main.c: 582: printf("%c", (char)35);
  3972  01048A  0EFC               	movlw	low STR_1
  3973  01048C  0100               	movlb	0	; () banked
  3974  01048E  6F75               	movwf	printf@f& (0+255),b
  3975  010490  0EFF               	movlw	high STR_1
  3976  010492  6F76               	movwf	(printf@f+1)& (0+255),b
  3977  010494  0E00               	movlw	0
  3978  010496  6F78               	movwf	(?_printf+3)& (0+255),b
  3979  010498  0E23               	movlw	35
  3980  01049A  6F77               	movwf	(?_printf+2)& (0+255),b
  3981  01049C  EC4F  F096         	call	_printf	;wreg free
  3982                           
  3983                           ;main.c: 583: printf("The target distance is: %d\n", Target_Distance);
  3984  0104A0  0ED3               	movlw	low STR_62
  3985  0104A2  0100               	movlb	0	; () banked
  3986  0104A4  6F75               	movwf	printf@f& (0+255),b
  3987  0104A6  0EFE               	movlw	high STR_62
  3988  0104A8  6F76               	movwf	(printf@f+1)& (0+255),b
  3989  0104AA  C0E4  F077         	movff	main@Target_Distance,?_printf+2
  3990  0104AE  C0E5  F078         	movff	main@Target_Distance+1,?_printf+3
  3991  0104B2  EC4F  F096         	call	_printf	;wreg free
  3992                           
  3993                           ;main.c: 584: printf("ADC AVERAGE %d\n", average);
  3994  0104B6  0EC6               	movlw	low STR_63
  3995  0104B8  0100               	movlb	0	; () banked
  3996  0104BA  6F75               	movwf	printf@f& (0+255),b
  3997  0104BC  0EFF               	movlw	high STR_63
  3998  0104BE  6F76               	movwf	(printf@f+1)& (0+255),b
  3999  0104C0  C0E9  F077         	movff	_average,?_printf+2
  4000  0104C4  C0EA  F078         	movff	_average+1,?_printf+3
  4001  0104C8  EC4F  F096         	call	_printf	;wreg free
  4002                           
  4003                           ;main.c: 585: printf("                 \n");
  4004  0104CC  0E7D               	movlw	low STR_2
  4005  0104CE  0100               	movlb	0	; () banked
  4006  0104D0  6F75               	movwf	printf@f& (0+255),b
  4007  0104D2  0EFF               	movlw	high STR_2
  4008  0104D4  6F76               	movwf	(printf@f+1)& (0+255),b
  4009  0104D6  EC4F  F096         	call	_printf	;wreg free
  4010                           
  4011                           ;main.c: 586: printf("                 \n");
  4012  0104DA  0E7D               	movlw	low STR_2
  4013  0104DC  0100               	movlb	0	; () banked
  4014  0104DE  6F75               	movwf	printf@f& (0+255),b
  4015  0104E0  0EFF               	movlw	high STR_2
  4016  0104E2  6F76               	movwf	(printf@f+1)& (0+255),b
  4017  0104E4  EC4F  F096         	call	_printf	;wreg free
  4018                           
  4019                           ;main.c: 587: printf("                 \n");
  4020  0104E8  0E7D               	movlw	low STR_2
  4021  0104EA  0100               	movlb	0	; () banked
  4022  0104EC  6F75               	movwf	printf@f& (0+255),b
  4023  0104EE  0EFF               	movlw	high STR_2
  4024  0104F0  6F76               	movwf	(printf@f+1)& (0+255),b
  4025  0104F2  EC4F  F096         	call	_printf	;wreg free
  4026                           
  4027                           ;main.c: 588: printf("                 \n");
  4028  0104F6  0E7D               	movlw	low STR_2
  4029  0104F8  0100               	movlb	0	; () banked
  4030  0104FA  6F75               	movwf	printf@f& (0+255),b
  4031  0104FC  0EFF               	movlw	high STR_2
  4032  0104FE  6F76               	movwf	(printf@f+1)& (0+255),b
  4033  010500  EC4F  F096         	call	_printf	;wreg free
  4034                           
  4035                           ;main.c: 589: printf("                 \n");
  4036  010504  0E7D               	movlw	low STR_2
  4037  010506  0100               	movlb	0	; () banked
  4038  010508  6F75               	movwf	printf@f& (0+255),b
  4039  01050A  0EFF               	movlw	high STR_2
  4040  01050C  6F76               	movwf	(printf@f+1)& (0+255),b
  4041  01050E  EC4F  F096         	call	_printf	;wreg free
  4042                           
  4043                           ;main.c: 590: printf("                 \n");
  4044  010512  0E7D               	movlw	low STR_2
  4045  010514  0100               	movlb	0	; () banked
  4046  010516  6F75               	movwf	printf@f& (0+255),b
  4047  010518  0EFF               	movlw	high STR_2
  4048  01051A  6F76               	movwf	(printf@f+1)& (0+255),b
  4049  01051C  EC4F  F096         	call	_printf	;wreg free
  4050                           
  4051                           ;main.c: 591: printf("                 \n");
  4052  010520  0E7D               	movlw	low STR_2
  4053  010522  0100               	movlb	0	; () banked
  4054  010524  6F75               	movwf	printf@f& (0+255),b
  4055  010526  0EFF               	movlw	high STR_2
  4056  010528  6F76               	movwf	(printf@f+1)& (0+255),b
  4057  01052A  EC4F  F096         	call	_printf	;wreg free
  4058                           
  4059                           ;main.c: 592: printf("                 \n");
  4060  01052E  0E7D               	movlw	low STR_2
  4061  010530  0100               	movlb	0	; () banked
  4062  010532  6F75               	movwf	printf@f& (0+255),b
  4063  010534  0EFF               	movlw	high STR_2
  4064  010536  6F76               	movwf	(printf@f+1)& (0+255),b
  4065  010538  EC4F  F096         	call	_printf	;wreg free
  4066                           
  4067                           ;main.c: 593: Console_Render();
  4068  01053C  EC73  F092         	call	_Console_Render	;wreg free
  4069                           
  4070                           ;main.c: 594: HMI_SetNumber(average);
  4071  010540  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
  4072  010544  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
  4073  010548  EC99  F0AE         	call	_HMI_SetNumber	;wreg free
  4074                           
  4075                           ;main.c: 596: HMI_Render();
  4076  01054C  EC12  F0AD         	call	_HMI_Render	;wreg free
  4077                           
  4078                           ;main.c: 598: HMI_Poll();
  4079  010550  EC25  F0A8         	call	_HMI_Poll	;wreg free
  4080                           
  4081                           ;main.c: 599: if (Target_Distance <= average + 2 || Target_Distance >= average - 2) {
  4082  010554  0E02               	movlw	2
  4083  010556  0100               	movlb	0	; () banked
  4084  010558  25E9               	addwf	_average& (0+255),w,b
  4085  01055A  6FDB               	movwf	??_main& (0+255),b
  4086  01055C  0E00               	movlw	0
  4087  01055E  21EA               	addwfc	(_average+1)& (0+255),w,b
  4088  010560  6FDC               	movwf	(??_main+1)& (0+255),b
  4089  010562  51E4               	movf	main@Target_Distance& (0+255),w,b
  4090  010564  5DDB               	subwf	??_main& (0+255),w,b
  4091  010566  51DC               	movf	(??_main+1)& (0+255),w,b
  4092  010568  0A80               	xorlw	128
  4093  01056A  6FDD               	movwf	(??_main+2)& (0+255),b
  4094  01056C  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4095  01056E  0A80               	xorlw	128
  4096  010570  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4097  010572  B0D8               	btfsc	status,0,c
  4098  010574  D016               	goto	u14460
  4099                           
  4100                           ; BSR set to: 0
  4101  010576  0EFE               	movlw	254
  4102  010578  6FDB               	movwf	??_main& (0+255),b
  4103  01057A  0EFF               	movlw	255
  4104  01057C  6FDC               	movwf	(??_main+1)& (0+255),b
  4105  01057E  C0E9  F0DD         	movff	_average,??_main+2
  4106  010582  C0EA  F0DE         	movff	_average+1,??_main+3
  4107  010586  51DB               	movf	??_main& (0+255),w,b
  4108  010588  27DD               	addwf	(??_main+2)& (0+255),f,b
  4109  01058A  51DC               	movf	(??_main+1)& (0+255),w,b
  4110  01058C  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4111  01058E  51DD               	movf	(??_main+2)& (0+255),w,b
  4112  010590  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4113  010592  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4114  010594  0A80               	xorlw	128
  4115  010596  6FDF               	movwf	(??_main+4)& (0+255),b
  4116  010598  51DE               	movf	(??_main+3)& (0+255),w,b
  4117  01059A  0A80               	xorlw	128
  4118  01059C  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4119  01059E  A0D8               	btfss	status,0,c
  4120  0105A0  D012               	goto	l2263
  4121  0105A2                     u14460:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 600: BangBang(50, 50, 50, 50);
  4125                           
  4126                           ; BSR set to: 0
  4127  0105A2  0E00               	movlw	0
  4128  0105A4  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4129  0105A6  0E32               	movlw	50
  4130  0105A8  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4131  0105AA  0E00               	movlw	0
  4132  0105AC  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4133  0105AE  0E32               	movlw	50
  4134  0105B0  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4135  0105B2  0E00               	movlw	0
  4136  0105B4  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4137  0105B6  0E32               	movlw	50
  4138  0105B8  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4139  0105BA  0E00               	movlw	0
  4140  0105BC  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4141  0105BE  0E32               	movlw	50
  4142  0105C0  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4143  0105C2  EC5E  F0AE         	call	_BangBang	;wreg free
  4144  0105C6                     l2263:
  4145                           
  4146                           ;main.c: 601: }
  4147                           ;main.c: 602: if (Target_Distance > average + 2) {
  4148  0105C6  0E02               	movlw	2
  4149  0105C8  0100               	movlb	0	; () banked
  4150  0105CA  25E9               	addwf	_average& (0+255),w,b
  4151  0105CC  6FDB               	movwf	??_main& (0+255),b
  4152  0105CE  0E00               	movlw	0
  4153  0105D0  21EA               	addwfc	(_average+1)& (0+255),w,b
  4154  0105D2  6FDC               	movwf	(??_main+1)& (0+255),b
  4155  0105D4  51E4               	movf	main@Target_Distance& (0+255),w,b
  4156  0105D6  5DDB               	subwf	??_main& (0+255),w,b
  4157  0105D8  51DC               	movf	(??_main+1)& (0+255),w,b
  4158  0105DA  0A80               	xorlw	128
  4159  0105DC  6FDD               	movwf	(??_main+2)& (0+255),b
  4160  0105DE  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4161  0105E0  0A80               	xorlw	128
  4162  0105E2  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4163  0105E4  B0D8               	btfsc	status,0,c
  4164  0105E6  D012               	goto	l2266
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;main.c: 603: BangBang(50, 50, 40, 40);
  4168  0105E8  0E00               	movlw	0
  4169  0105EA  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4170  0105EC  0E32               	movlw	50
  4171  0105EE  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4172  0105F0  0E00               	movlw	0
  4173  0105F2  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4174  0105F4  0E32               	movlw	50
  4175  0105F6  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4176  0105F8  0E00               	movlw	0
  4177  0105FA  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4178  0105FC  0E28               	movlw	40
  4179  0105FE  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4180  010600  0E00               	movlw	0
  4181  010602  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4182  010604  0E28               	movlw	40
  4183  010606  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4184  010608  EC5E  F0AE         	call	_BangBang	;wreg free
  4185  01060C                     l2266:
  4186                           
  4187                           ;main.c: 604: }
  4188                           ;main.c: 606: if (Target_Distance < average - 2) {
  4189  01060C  0EFE               	movlw	254
  4190  01060E  0100               	movlb	0	; () banked
  4191  010610  6FDB               	movwf	??_main& (0+255),b
  4192  010612  0EFF               	movlw	255
  4193  010614  6FDC               	movwf	(??_main+1)& (0+255),b
  4194  010616  C0E9  F0DD         	movff	_average,??_main+2
  4195  01061A  C0EA  F0DE         	movff	_average+1,??_main+3
  4196  01061E  51DB               	movf	??_main& (0+255),w,b
  4197  010620  27DD               	addwf	(??_main+2)& (0+255),f,b
  4198  010622  51DC               	movf	(??_main+1)& (0+255),w,b
  4199  010624  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4200  010626  51DD               	movf	(??_main+2)& (0+255),w,b
  4201  010628  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4202  01062A  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4203  01062C  0A80               	xorlw	128
  4204  01062E  6FDF               	movwf	(??_main+4)& (0+255),b
  4205  010630  51DE               	movf	(??_main+3)& (0+255),w,b
  4206  010632  0A80               	xorlw	128
  4207  010634  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4208  010636  B0D8               	btfsc	status,0,c
  4209  010638  D012               	goto	l2267
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;main.c: 607: BangBang(40, 40, 50, 50);
  4213  01063A  0E00               	movlw	0
  4214  01063C  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4215  01063E  0E28               	movlw	40
  4216  010640  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4217  010642  0E00               	movlw	0
  4218  010644  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4219  010646  0E28               	movlw	40
  4220  010648  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4221  01064A  0E00               	movlw	0
  4222  01064C  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4223  01064E  0E32               	movlw	50
  4224  010650  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4225  010652  0E00               	movlw	0
  4226  010654  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4227  010656  0E32               	movlw	50
  4228  010658  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4229  01065A  EC5E  F0AE         	call	_BangBang	;wreg free
  4230  01065E                     l2267:
  4231                           
  4232                           ;main.c: 608: }
  4233                           ;main.c: 610: if (Target_Distance > average + 5) {
  4234  01065E  0E05               	movlw	5
  4235  010660  0100               	movlb	0	; () banked
  4236  010662  25E9               	addwf	_average& (0+255),w,b
  4237  010664  6FDB               	movwf	??_main& (0+255),b
  4238  010666  0E00               	movlw	0
  4239  010668  21EA               	addwfc	(_average+1)& (0+255),w,b
  4240  01066A  6FDC               	movwf	(??_main+1)& (0+255),b
  4241  01066C  51E4               	movf	main@Target_Distance& (0+255),w,b
  4242  01066E  5DDB               	subwf	??_main& (0+255),w,b
  4243  010670  51DC               	movf	(??_main+1)& (0+255),w,b
  4244  010672  0A80               	xorlw	128
  4245  010674  6FDD               	movwf	(??_main+2)& (0+255),b
  4246  010676  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4247  010678  0A80               	xorlw	128
  4248  01067A  59DD               	subwfb	(??_main+2)& (0+255),w,b
  4249  01067C  B0D8               	btfsc	status,0,c
  4250  01067E  D012               	goto	l2268
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;main.c: 611: BangBang(50, 50, 30, 30);
  4254  010680  0E00               	movlw	0
  4255  010682  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4256  010684  0E32               	movlw	50
  4257  010686  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4258  010688  0E00               	movlw	0
  4259  01068A  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4260  01068C  0E32               	movlw	50
  4261  01068E  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4262  010690  0E00               	movlw	0
  4263  010692  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4264  010694  0E1E               	movlw	30
  4265  010696  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4266  010698  0E00               	movlw	0
  4267  01069A  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4268  01069C  0E1E               	movlw	30
  4269  01069E  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4270  0106A0  EC5E  F0AE         	call	_BangBang	;wreg free
  4271  0106A4                     l2268:
  4272                           
  4273                           ;main.c: 612: }
  4274                           ;main.c: 614: if (Target_Distance < average - 5) {
  4275  0106A4  0EFB               	movlw	251
  4276  0106A6  0100               	movlb	0	; () banked
  4277  0106A8  6FDB               	movwf	??_main& (0+255),b
  4278  0106AA  0EFF               	movlw	255
  4279  0106AC  6FDC               	movwf	(??_main+1)& (0+255),b
  4280  0106AE  C0E9  F0DD         	movff	_average,??_main+2
  4281  0106B2  C0EA  F0DE         	movff	_average+1,??_main+3
  4282  0106B6  51DB               	movf	??_main& (0+255),w,b
  4283  0106B8  27DD               	addwf	(??_main+2)& (0+255),f,b
  4284  0106BA  51DC               	movf	(??_main+1)& (0+255),w,b
  4285  0106BC  23DE               	addwfc	(??_main+3)& (0+255),f,b
  4286  0106BE  51DD               	movf	(??_main+2)& (0+255),w,b
  4287  0106C0  5DE4               	subwf	main@Target_Distance& (0+255),w,b
  4288  0106C2  51E5               	movf	(main@Target_Distance+1)& (0+255),w,b
  4289  0106C4  0A80               	xorlw	128
  4290  0106C6  6FDF               	movwf	(??_main+4)& (0+255),b
  4291  0106C8  51DE               	movf	(??_main+3)& (0+255),w,b
  4292  0106CA  0A80               	xorlw	128
  4293  0106CC  59DF               	subwfb	(??_main+4)& (0+255),w,b
  4294  0106CE  B0D8               	btfsc	status,0,c
  4295  0106D0  D012               	goto	l2269
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;main.c: 615: BangBang(30, 30, 50, 50);
  4299  0106D2  0E00               	movlw	0
  4300  0106D4  6F62               	movwf	(BangBang@RSpeedH+1)& (0+255),b
  4301  0106D6  0E1E               	movlw	30
  4302  0106D8  6F61               	movwf	BangBang@RSpeedH& (0+255),b
  4303  0106DA  0E00               	movlw	0
  4304  0106DC  6F64               	movwf	(BangBang@RSpeedL+1)& (0+255),b
  4305  0106DE  0E1E               	movlw	30
  4306  0106E0  6F63               	movwf	BangBang@RSpeedL& (0+255),b
  4307  0106E2  0E00               	movlw	0
  4308  0106E4  6F66               	movwf	(BangBang@LSpeedH+1)& (0+255),b
  4309  0106E6  0E32               	movlw	50
  4310  0106E8  6F65               	movwf	BangBang@LSpeedH& (0+255),b
  4311  0106EA  0E00               	movlw	0
  4312  0106EC  6F68               	movwf	(BangBang@LSpeedL+1)& (0+255),b
  4313  0106EE  0E32               	movlw	50
  4314  0106F0  6F67               	movwf	BangBang@LSpeedL& (0+255),b
  4315  0106F2  EC5E  F0AE         	call	_BangBang	;wreg free
  4316  0106F6                     l2269:
  4317                           
  4318                           ;main.c: 616: }
  4319                           ;main.c: 618: Get_Sensor_State();
  4320  0106F6  EC7B  F0AF         	call	_Get_Sensor_State	;wreg free
  4321                           
  4322                           ;main.c: 619: printf("Besneor: %d", BumpSensor);
  4323  0106FA  0EE5               	movlw	low STR_72
  4324  0106FC  0100               	movlb	0	; () banked
  4325  0106FE  6F75               	movwf	printf@f& (0+255),b
  4326  010700  0EFF               	movlw	high STR_72
  4327  010702  6F76               	movwf	(printf@f+1)& (0+255),b
  4328  010704  C0F1  F077         	movff	_BumpSensor,?_printf+2
  4329  010708  6B78               	clrf	(?_printf+3)& (0+255),b
  4330  01070A  EC4F  F096         	call	_printf	;wreg free
  4331                           
  4332                           ;main.c: 620: if (BumpSensor > 0) {
  4333  01070E  0100               	movlb	0	; () banked
  4334  010710  51F1               	movf	_BumpSensor& (0+255),w,b
  4335  010712  B4D8               	btfsc	status,2,c
  4336  010714  D005               	goto	l2270
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;main.c: 621: Target_Distance = 0;
  4340  010716  0E00               	movlw	0
  4341  010718  6FE5               	movwf	(main@Target_Distance+1)& (0+255),b
  4342  01071A  0E00               	movlw	0
  4343  01071C  6FE4               	movwf	main@Target_Distance& (0+255),b
  4344                           
  4345                           ;main.c: 622: break;
  4346  01071E  D02D               	goto	u14560
  4347  010720                     l2270:
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;main.c: 623: }
  4351                           ;main.c: 625: if (HMIBoard.mUp.mGetState()) {
  4352                           
  4353                           ; BSR set to: 0
  4354  010720  EE21  F069         	lfsr	2,_HMIBoard+35
  4355  010724  D801               	call	u14528
  4356  010726  D00A               	goto	u14529
  4357  010728                     u14528:
  4358  010728  0005               	push	
  4359  01072A  6EFA               	movwf	pclath,c
  4360  01072C  50DE               	movf	postinc2,w,c
  4361  01072E  6EFD               	movwf	tosl,c
  4362  010730  50DE               	movf	postinc2,w,c
  4363  010732  6EFE               	movwf	tosh,c
  4364  010734  50DE               	movf	postinc2,w,c
  4365  010736  6EFF               	movwf	tosu,c
  4366  010738  50FA               	movf	pclath,w,c
  4367  01073A  0012               	return		;indir
  4368  01073C                     u14529:
  4369  01073C  0900               	iorlw	0
  4370  01073E  B4D8               	btfsc	status,2,c
  4371  010740  D018               	goto	l2272
  4372                           
  4373                           ;main.c: 626: up = HMIBoard.mUp.mGetState();
  4374  010742  EE21  F069         	lfsr	2,_HMIBoard+35
  4375  010746  D801               	call	u14548
  4376  010748  D00A               	goto	u14549
  4377  01074A                     u14548:
  4378  01074A  0005               	push	
  4379  01074C  6EFA               	movwf	pclath,c
  4380  01074E  50DE               	movf	postinc2,w,c
  4381  010750  6EFD               	movwf	tosl,c
  4382  010752  50DE               	movf	postinc2,w,c
  4383  010754  6EFE               	movwf	tosh,c
  4384  010756  50DE               	movf	postinc2,w,c
  4385  010758  6EFF               	movwf	tosu,c
  4386  01075A  50FA               	movf	pclath,w,c
  4387  01075C  0012               	return		;indir
  4388  01075E                     u14549:
  4389  01075E  0100               	movlb	0	; () banked
  4390  010760  6FE3               	movwf	main@up& (0+255),b
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;main.c: 627: if (up) {
  4394  010762  51E3               	movf	main@up& (0+255),w,b
  4395  010764  B4D8               	btfsc	status,2,c
  4396  010766  D009               	goto	u14560
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;main.c: 628: mode = 0;
  4400  010768  0E00               	movlw	0
  4401  01076A  6E32               	movwf	_mode+1,c
  4402  01076C  0E00               	movlw	0
  4403  01076E  6E31               	movwf	_mode,c
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;main.c: 629: }
  4407                           ;main.c: 630: break;
  4408  010770  D004               	goto	u14560
  4409  010772                     l2272:
  4410                           
  4411                           ; BSR set to: 0
  4412                           
  4413                           ; BSR set to: 0
  4414  010772  0100               	movlb	0	; () banked
  4415  010774  51F1               	movf	_BumpSensor& (0+255),w,b
  4416  010776  B4D8               	btfsc	status,2,c
  4417  010778  D686               	goto	l2262
  4418  01077A                     u14560:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;main.c: 631: }
  4422                           ;main.c: 632: }
  4423                           ;main.c: 633: mode = 0;
  4424                           
  4425                           ; BSR set to: 0
  4426  01077A  0E00               	movlw	0
  4427  01077C  6E32               	movwf	_mode+1,c
  4428  01077E  0E00               	movlw	0
  4429  010780  6E31               	movwf	_mode,c
  4430  010782                     l2259:
  4431                           
  4432                           ;main.c: 634: }
  4433                           ;main.c: 635: Console_Render();
  4434                           
  4435                           ; BSR set to: 0
  4436                           
  4437                           ; BSR set to: 0
  4438                           
  4439                           ; BSR set to: 0
  4440                           
  4441                           ; BSR set to: 0
  4442                           
  4443                           ; BSR set to: 0
  4444  010782  EC73  F092         	call	_Console_Render	;wreg free
  4445                           
  4446                           ;main.c: 636: if (MXK_Release())
  4447  010786  EC4B  F0AF         	call	_MXK_Release	;wreg free
  4448  01078A  0900               	iorlw	0
  4449  01078C  B4D8               	btfsc	status,2,c
  4450  01078E  D45B               	goto	l2241
  4451                           
  4452                           ;main.c: 637: MXK_Dequeue();
  4453  010790  EC48  F0AD         	call	_MXK_Dequeue	;wreg free
  4454                           
  4455                           ;main.c: 638: }
  4456                           ;main.c: 639: }
  4457  010794  D458               	goto	l2241
  4458  010796                     __end_of_main:
  4459                           	opt stack 0
  4460                           tosu	equ	0xFFF
  4461                           tosh	equ	0xFFE
  4462                           tosl	equ	0xFFD
  4463                           pclath	equ	0xFFA
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postdec1	equ	0xFE5
  4471                           fsr1h	equ	0xFE2
  4472                           fsr1l	equ	0xFE1
  4473                           postinc2	equ	0xFDE
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _Turn *****************
  4477 ;; Defined at:
  4478 ;;		line 201 in file "main.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  Angle           2    1[BANK0 ] int 
  4481 ;;  Speed           2    3[BANK0 ] int 
  4482 ;;  Dir             2    5[BANK0 ] int 
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  Rad             2    9[BANK0 ] int 
  4485 ;;  C_Angle         2    7[BANK0 ] int 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  2    1[BANK0 ] int 
  4488 ;; Registers used:
  4489 ;;		wreg, status,2, status,0, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:       10 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    9
  4502 ;; This function calls:
  4503 ;;		_Robot_Stop
  4504 ;;		_eusartRec
  4505 ;;		_eusartSend
  4506 ;; This function is called by:
  4507 ;;		_main
  4508 ;; This function uses a non-reentrant model
  4509 ;;
  4510                           
  4511                           	psect	text1
  4512  014C00                     __ptext1:
  4513                           	opt stack 0
  4514  014C00                     _Turn:
  4515                           	opt stack 21
  4516                           
  4517                           ;main.c: 202: int Rad = 1;
  4518                           
  4519                           ;incstack = 0
  4520  014C00  0E00               	movlw	0
  4521  014C02  0100               	movlb	0	; () banked
  4522  014C04  6F6A               	movwf	(Turn@Rad+1)& (0+255),b
  4523  014C06  0E01               	movlw	1
  4524  014C08  6F69               	movwf	Turn@Rad& (0+255),b
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;main.c: 203: if (Dir == 0){
  4528  014C0A  5165               	movf	Turn@Dir& (0+255),w,b
  4529  014C0C  1166               	iorwf	(Turn@Dir+1)& (0+255),w,b
  4530  014C0E  A4D8               	btfss	status,2,c
  4531  014C10  D004               	goto	l2166
  4532                           
  4533                           ; BSR set to: 0
  4534                           ;main.c: 204: Rad = 65535;
  4535  014C12  6969               	setf	Turn@Rad& (0+255),b
  4536  014C14  696A               	setf	(Turn@Rad+1)& (0+255),b
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;main.c: 205: Angle = ~Angle;
  4540  014C16  1F61               	comf	Turn@Angle& (0+255),f,b
  4541  014C18  1F62               	comf	(Turn@Angle+1)& (0+255),f,b
  4542  014C1A                     l2166:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;main.c: 206: }
  4546                           ;main.c: 208: eusartSend(137);
  4547                           
  4548                           ; BSR set to: 0
  4549  014C1A  0E89               	movlw	137
  4550  014C1C  EC23  F0B0         	call	_eusartSend
  4551                           
  4552                           ;main.c: 209: eusartSend((((Speed)>>8) & 255));
  4553  014C20  0100               	movlb	0	; () banked
  4554  014C22  5164               	movf	(Turn@Speed+1)& (0+255),w,b
  4555  014C24  EC23  F0B0         	call	_eusartSend
  4556                           
  4557                           ;main.c: 210: eusartSend(((Speed) & 255));
  4558  014C28  0100               	movlb	0	; () banked
  4559  014C2A  5163               	movf	Turn@Speed& (0+255),w,b
  4560  014C2C  EC23  F0B0         	call	_eusartSend
  4561                           
  4562                           ;main.c: 211: eusartSend((((Rad)>>8) & 255));
  4563  014C30  0100               	movlb	0	; () banked
  4564  014C32  516A               	movf	(Turn@Rad+1)& (0+255),w,b
  4565  014C34  EC23  F0B0         	call	_eusartSend
  4566                           
  4567                           ;main.c: 212: eusartSend(((Rad) & 255));
  4568  014C38  0100               	movlb	0	; () banked
  4569  014C3A  5169               	movf	Turn@Rad& (0+255),w,b
  4570  014C3C  EC23  F0B0         	call	_eusartSend
  4571                           
  4572                           ;main.c: 213: int C_Angle = 0;
  4573  014C40  0E00               	movlw	0
  4574  014C42  0100               	movlb	0	; () banked
  4575  014C44  6F68               	movwf	(Turn@C_Angle+1)& (0+255),b
  4576  014C46  0E00               	movlw	0
  4577  014C48  6F67               	movwf	Turn@C_Angle& (0+255),b
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;main.c: 214: eusartSend(157);
  4581  014C4A  0E9D               	movlw	157
  4582  014C4C  EC23  F0B0         	call	_eusartSend
  4583                           
  4584                           ;main.c: 215: eusartSend((((Angle)>>8) & 255));
  4585  014C50  0100               	movlb	0	; () banked
  4586  014C52  5162               	movf	(Turn@Angle+1)& (0+255),w,b
  4587  014C54  EC23  F0B0         	call	_eusartSend
  4588                           
  4589                           ;main.c: 216: eusartSend(((Angle) & 255));
  4590  014C58  0100               	movlb	0	; () banked
  4591  014C5A  5161               	movf	Turn@Angle& (0+255),w,b
  4592  014C5C  EC23  F0B0         	call	_eusartSend
  4593                           
  4594                           ;main.c: 218: Robot_Stop();
  4595  014C60  ECAC  F0AE         	call	_Robot_Stop	;wreg free
  4596                           
  4597                           ;main.c: 220: eusartSend(142);
  4598  014C64  0E8E               	movlw	142
  4599  014C66  EC23  F0B0         	call	_eusartSend
  4600                           
  4601                           ;main.c: 221: eusartSend(7);
  4602  014C6A  0E07               	movlw	7
  4603  014C6C  EC23  F0B0         	call	_eusartSend
  4604                           
  4605                           ;main.c: 222: eusartRec();
  4606  014C70  EC50  F0B0         	call	_eusartRec	;wreg free
  4607  014C74  0012               	return		;funcret
  4608  014C76                     __end_of_Turn:
  4609                           	opt stack 0
  4610                           tosu	equ	0xFFF
  4611                           tosh	equ	0xFFE
  4612                           tosl	equ	0xFFD
  4613                           pclath	equ	0xFFA
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           postinc0	equ	0xFEE
  4619                           wreg	equ	0xFE8
  4620                           postdec1	equ	0xFE5
  4621                           fsr1h	equ	0xFE2
  4622                           fsr1l	equ	0xFE1
  4623                           postinc2	equ	0xFDE
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _Sensor_Observe2 *****************
  4627 ;; Defined at:
  4628 ;;		line 325 in file "main.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:        2 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:   13
  4649 ;; This function calls:
  4650 ;;		_ADCAverage
  4651 ;;		_Console_Render
  4652 ;;		_SteppingCCW
  4653 ;;		_printf
  4654 ;; This function is called by:
  4655 ;;		_main
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text2
  4660  0136C4                     __ptext2:
  4661                           	opt stack 0
  4662  0136C4                     _Sensor_Observe2:
  4663                           	opt stack 17
  4664                           
  4665                           ;main.c: 326: printf("%c", (char)35);
  4666                           
  4667                           ;incstack = 0
  4668  0136C4  0EFC               	movlw	low STR_1
  4669  0136C6  0100               	movlb	0	; () banked
  4670  0136C8  6F75               	movwf	printf@f& (0+255),b
  4671  0136CA  0EFF               	movlw	high STR_1
  4672  0136CC  6F76               	movwf	(printf@f+1)& (0+255),b
  4673  0136CE  0E00               	movlw	0
  4674  0136D0  6F78               	movwf	(?_printf+3)& (0+255),b
  4675  0136D2  0E23               	movlw	35
  4676  0136D4  6F77               	movwf	(?_printf+2)& (0+255),b
  4677  0136D6  EC4F  F096         	call	_printf	;wreg free
  4678                           
  4679                           ;main.c: 327: printf("                 \n");
  4680  0136DA  0E7D               	movlw	low STR_2
  4681  0136DC  0100               	movlb	0	; () banked
  4682  0136DE  6F75               	movwf	printf@f& (0+255),b
  4683  0136E0  0EFF               	movlw	high STR_2
  4684  0136E2  6F76               	movwf	(printf@f+1)& (0+255),b
  4685  0136E4  EC4F  F096         	call	_printf	;wreg free
  4686                           
  4687                           ;main.c: 328: printf("Sensor Moving!\n");
  4688  0136E8  0EB6               	movlw	low STR_3
  4689  0136EA  0100               	movlb	0	; () banked
  4690  0136EC  6F75               	movwf	printf@f& (0+255),b
  4691  0136EE  0EFF               	movlw	high STR_3
  4692  0136F0  6F76               	movwf	(printf@f+1)& (0+255),b
  4693  0136F2  EC4F  F096         	call	_printf	;wreg free
  4694                           
  4695                           ;main.c: 329: printf("                 \n");
  4696  0136F6  0E7D               	movlw	low STR_2
  4697  0136F8  0100               	movlb	0	; () banked
  4698  0136FA  6F75               	movwf	printf@f& (0+255),b
  4699  0136FC  0EFF               	movlw	high STR_2
  4700  0136FE  6F76               	movwf	(printf@f+1)& (0+255),b
  4701  013700  EC4F  F096         	call	_printf	;wreg free
  4702                           
  4703                           ;main.c: 330: printf("                 \n");
  4704  013704  0E7D               	movlw	low STR_2
  4705  013706  0100               	movlb	0	; () banked
  4706  013708  6F75               	movwf	printf@f& (0+255),b
  4707  01370A  0EFF               	movlw	high STR_2
  4708  01370C  6F76               	movwf	(printf@f+1)& (0+255),b
  4709  01370E  EC4F  F096         	call	_printf	;wreg free
  4710                           
  4711                           ;main.c: 331: printf("                 \n");
  4712  013712  0E7D               	movlw	low STR_2
  4713  013714  0100               	movlb	0	; () banked
  4714  013716  6F75               	movwf	printf@f& (0+255),b
  4715  013718  0EFF               	movlw	high STR_2
  4716  01371A  6F76               	movwf	(printf@f+1)& (0+255),b
  4717  01371C  EC4F  F096         	call	_printf	;wreg free
  4718                           
  4719                           ;main.c: 332: printf("                 \n");
  4720  013720  0E7D               	movlw	low STR_2
  4721  013722  0100               	movlb	0	; () banked
  4722  013724  6F75               	movwf	printf@f& (0+255),b
  4723  013726  0EFF               	movlw	high STR_2
  4724  013728  6F76               	movwf	(printf@f+1)& (0+255),b
  4725  01372A  EC4F  F096         	call	_printf	;wreg free
  4726                           
  4727                           ;main.c: 333: printf("                 \n");
  4728  01372E  0E7D               	movlw	low STR_2
  4729  013730  0100               	movlb	0	; () banked
  4730  013732  6F75               	movwf	printf@f& (0+255),b
  4731  013734  0EFF               	movlw	high STR_2
  4732  013736  6F76               	movwf	(printf@f+1)& (0+255),b
  4733  013738  EC4F  F096         	call	_printf	;wreg free
  4734                           
  4735                           ;main.c: 334: printf("                 \n");
  4736  01373C  0E7D               	movlw	low STR_2
  4737  01373E  0100               	movlb	0	; () banked
  4738  013740  6F75               	movwf	printf@f& (0+255),b
  4739  013742  0EFF               	movlw	high STR_2
  4740  013744  6F76               	movwf	(printf@f+1)& (0+255),b
  4741  013746  EC4F  F096         	call	_printf	;wreg free
  4742                           
  4743                           ;main.c: 335: printf("                 \n");
  4744  01374A  0E7D               	movlw	low STR_2
  4745  01374C  0100               	movlb	0	; () banked
  4746  01374E  6F75               	movwf	printf@f& (0+255),b
  4747  013750  0EFF               	movlw	high STR_2
  4748  013752  6F76               	movwf	(printf@f+1)& (0+255),b
  4749  013754  EC4F  F096         	call	_printf	;wreg free
  4750                           
  4751                           ;main.c: 336: Console_Render();
  4752  013758  EC73  F092         	call	_Console_Render	;wreg free
  4753                           
  4754                           ;main.c: 337: while (Motor_Count <= 512) {
  4755  01375C  D019               	goto	l2209
  4756  01375E                     
  4757                           ;main.c: 338: Motor_Count++;
  4758  01375E  4A2D               	infsnz	_Motor_Count,f,c
  4759  013760  2A2E               	incf	_Motor_Count+1,f,c
  4760                           
  4761                           ;main.c: 339: ADCAverage();
  4762  013762  ECE5  F088         	call	_ADCAverage	;wreg free
  4763                           
  4764                           ;main.c: 340: if (Low_Sensor > average) {
  4765  013766  504B               	movf	_Low_Sensor,w,c
  4766  013768  0100               	movlb	0	; () banked
  4767  01376A  5DE9               	subwf	_average& (0+255),w,b
  4768  01376C  51EA               	movf	(_average+1)& (0+255),w,b
  4769  01376E  0A80               	xorlw	128
  4770  013770  6FD9               	movwf	??_Sensor_Observe2& (0+255),b
  4771  013772  504C               	movf	_Low_Sensor+1,w,c
  4772  013774  0A80               	xorlw	128
  4773  013776  59D9               	subwfb	??_Sensor_Observe2& (0+255),w,b
  4774  013778  B0D8               	btfsc	status,0,c
  4775  01377A  D008               	goto	l2211
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;main.c: 341: Low_Sensor = average;
  4779  01377C  C0E9  F04B         	movff	_average,_Low_Sensor
  4780  013780  C0EA  F04C         	movff	_average+1,_Low_Sensor+1
  4781                           
  4782                           ;main.c: 342: Close_Pos = Motor_Count;
  4783  013784  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  4784  013788  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  4785  01378C                     l2211:
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;main.c: 343: }
  4789                           ;main.c: 344: SteppingCCW();
  4790                           
  4791                           ; BSR set to: 0
  4792  01378C  ECEC  F0AA         	call	_SteppingCCW	;wreg free
  4793  013790                     l2209:
  4794  013790  BE2E               	btfsc	_Motor_Count+1,7,c
  4795  013792  D7E5               	goto	l2210
  4796  013794  042D               	decf	_Motor_Count,w,c
  4797  013796  0E02               	movlw	2
  4798  013798  582E               	subwfb	_Motor_Count+1,w,c
  4799  01379A  A0D8               	btfss	status,0,c
  4800  01379C  D7E0               	goto	l2210
  4801                           
  4802                           ;main.c: 345: }
  4803                           ;main.c: 347: Console_Render();
  4804  01379E  EC73  F092         	call	_Console_Render	;wreg free
  4805                           
  4806                           ;main.c: 348: RD5 = 0;
  4807  0137A2  9A83               	bcf	3971,5,c	;volatile
  4808                           
  4809                           ;main.c: 349: RD7 = 0;
  4810  0137A4  9E83               	bcf	3971,7,c	;volatile
  4811                           
  4812                           ;main.c: 350: RA2 = 0;
  4813  0137A6  9480               	bcf	3968,2,c	;volatile
  4814                           
  4815                           ;main.c: 351: RA3 = 0;
  4816  0137A8  9680               	bcf	3968,3,c	;volatile
  4817                           
  4818                           ;main.c: 352: Sensor_Observe_Fin = 1;
  4819  0137AA  0E00               	movlw	0
  4820  0137AC  0101               	movlb	1	; () banked
  4821  0137AE  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  4822  0137B0  0E01               	movlw	1
  4823  0137B2  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  4824                           
  4825                           ; BSR set to: 1
  4826                           ;main.c: 354: CW_Count = 512 - Close_Pos;
  4827  0137B4  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe2
  4828  0137B8  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe2+1
  4829  0137BC  0100               	movlb	0	; () banked
  4830  0137BE  1FD9               	comf	??_Sensor_Observe2& (0+255),f,b
  4831  0137C0  1FDA               	comf	(??_Sensor_Observe2+1)& (0+255),f,b
  4832  0137C2  4BD9               	infsnz	??_Sensor_Observe2& (0+255),f,b
  4833  0137C4  2BDA               	incf	(??_Sensor_Observe2+1)& (0+255),f,b
  4834  0137C6  0E00               	movlw	0
  4835  0137C8  25D9               	addwf	??_Sensor_Observe2& (0+255),w,b
  4836  0137CA  0101               	movlb	1	; () banked
  4837  0137CC  6F28               	movwf	_CW_Count& (0+255),b
  4838  0137CE  0E02               	movlw	2
  4839  0137D0  0100               	movlb	0	; () banked
  4840  0137D2  21DA               	addwfc	(??_Sensor_Observe2+1)& (0+255),w,b
  4841  0137D4  0101               	movlb	1	; () banked
  4842  0137D6  6F29               	movwf	(_CW_Count+1)& (0+255),b
  4843  0137D8  0012               	return	
  4844  0137DA                     __end_of_Sensor_Observe2:
  4845                           	opt stack 0
  4846                           tosu	equ	0xFFF
  4847                           tosh	equ	0xFFE
  4848                           tosl	equ	0xFFD
  4849                           pclath	equ	0xFFA
  4850                           tblptru	equ	0xFF8
  4851                           tblptrh	equ	0xFF7
  4852                           tblptrl	equ	0xFF6
  4853                           tablat	equ	0xFF5
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           postdec1	equ	0xFE5
  4857                           fsr1h	equ	0xFE2
  4858                           fsr1l	equ	0xFE1
  4859                           postinc2	equ	0xFDE
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _Sensor_Observe *****************
  4863 ;; Defined at:
  4864 ;;		line 376 in file "main.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;		None
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      void 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        2 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:   13
  4885 ;; This function calls:
  4886 ;;		_ADCAverage
  4887 ;;		_Console_Render
  4888 ;;		_SteppingCW
  4889 ;;		_printf
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text3
  4896  0139FE                     __ptext3:
  4897                           	opt stack 0
  4898  0139FE                     _Sensor_Observe:
  4899                           	opt stack 17
  4900                           
  4901                           ;main.c: 377: printf("%c", (char)35);
  4902                           
  4903                           ; BSR set to: 1
  4904                           ;incstack = 0
  4905  0139FE  0EFC               	movlw	low STR_1
  4906  013A00  0100               	movlb	0	; () banked
  4907  013A02  6F75               	movwf	printf@f& (0+255),b
  4908  013A04  0EFF               	movlw	high STR_1
  4909  013A06  6F76               	movwf	(printf@f+1)& (0+255),b
  4910  013A08  0E00               	movlw	0
  4911  013A0A  6F78               	movwf	(?_printf+3)& (0+255),b
  4912  013A0C  0E23               	movlw	35
  4913  013A0E  6F77               	movwf	(?_printf+2)& (0+255),b
  4914  013A10  EC4F  F096         	call	_printf	;wreg free
  4915                           
  4916                           ;main.c: 378: printf("                 \n");
  4917  013A14  0E7D               	movlw	low STR_2
  4918  013A16  0100               	movlb	0	; () banked
  4919  013A18  6F75               	movwf	printf@f& (0+255),b
  4920  013A1A  0EFF               	movlw	high STR_2
  4921  013A1C  6F76               	movwf	(printf@f+1)& (0+255),b
  4922  013A1E  EC4F  F096         	call	_printf	;wreg free
  4923                           
  4924                           ;main.c: 379: printf("Sensor Moving!   \n");
  4925  013A22  0E90               	movlw	low STR_17
  4926  013A24  0100               	movlb	0	; () banked
  4927  013A26  6F75               	movwf	printf@f& (0+255),b
  4928  013A28  0EFF               	movlw	high STR_17
  4929  013A2A  6F76               	movwf	(printf@f+1)& (0+255),b
  4930  013A2C  EC4F  F096         	call	_printf	;wreg free
  4931                           
  4932                           ;main.c: 380: printf("                 \n");
  4933  013A30  0E7D               	movlw	low STR_2
  4934  013A32  0100               	movlb	0	; () banked
  4935  013A34  6F75               	movwf	printf@f& (0+255),b
  4936  013A36  0EFF               	movlw	high STR_2
  4937  013A38  6F76               	movwf	(printf@f+1)& (0+255),b
  4938  013A3A  EC4F  F096         	call	_printf	;wreg free
  4939                           
  4940                           ;main.c: 381: printf("                 \n");
  4941  013A3E  0E7D               	movlw	low STR_2
  4942  013A40  0100               	movlb	0	; () banked
  4943  013A42  6F75               	movwf	printf@f& (0+255),b
  4944  013A44  0EFF               	movlw	high STR_2
  4945  013A46  6F76               	movwf	(printf@f+1)& (0+255),b
  4946  013A48  EC4F  F096         	call	_printf	;wreg free
  4947                           
  4948                           ;main.c: 382: printf("                 \n");
  4949  013A4C  0E7D               	movlw	low STR_2
  4950  013A4E  0100               	movlb	0	; () banked
  4951  013A50  6F75               	movwf	printf@f& (0+255),b
  4952  013A52  0EFF               	movlw	high STR_2
  4953  013A54  6F76               	movwf	(printf@f+1)& (0+255),b
  4954  013A56  EC4F  F096         	call	_printf	;wreg free
  4955                           
  4956                           ;main.c: 383: printf("                 \n");
  4957  013A5A  0E7D               	movlw	low STR_2
  4958  013A5C  0100               	movlb	0	; () banked
  4959  013A5E  6F75               	movwf	printf@f& (0+255),b
  4960  013A60  0EFF               	movlw	high STR_2
  4961  013A62  6F76               	movwf	(printf@f+1)& (0+255),b
  4962  013A64  EC4F  F096         	call	_printf	;wreg free
  4963                           
  4964                           ;main.c: 384: printf("                 \n");
  4965  013A68  0E7D               	movlw	low STR_2
  4966  013A6A  0100               	movlb	0	; () banked
  4967  013A6C  6F75               	movwf	printf@f& (0+255),b
  4968  013A6E  0EFF               	movlw	high STR_2
  4969  013A70  6F76               	movwf	(printf@f+1)& (0+255),b
  4970  013A72  EC4F  F096         	call	_printf	;wreg free
  4971                           
  4972                           ;main.c: 385: printf("                 \n");
  4973  013A76  0E7D               	movlw	low STR_2
  4974  013A78  0100               	movlb	0	; () banked
  4975  013A7A  6F75               	movwf	printf@f& (0+255),b
  4976  013A7C  0EFF               	movlw	high STR_2
  4977  013A7E  6F76               	movwf	(printf@f+1)& (0+255),b
  4978  013A80  EC4F  F096         	call	_printf	;wreg free
  4979                           
  4980                           ;main.c: 386: Console_Render();
  4981  013A84  EC73  F092         	call	_Console_Render	;wreg free
  4982                           
  4983                           ;main.c: 387: while (Motor_Count <= 512) {
  4984  013A88  D019               	goto	l2222
  4985  013A8A                     
  4986                           ;main.c: 388: Motor_Count++;
  4987  013A8A  4A2D               	infsnz	_Motor_Count,f,c
  4988  013A8C  2A2E               	incf	_Motor_Count+1,f,c
  4989                           
  4990                           ;main.c: 389: ADCAverage();
  4991  013A8E  ECE5  F088         	call	_ADCAverage	;wreg free
  4992                           
  4993                           ;main.c: 390: if (Low_Sensor > average) {
  4994  013A92  504B               	movf	_Low_Sensor,w,c
  4995  013A94  0100               	movlb	0	; () banked
  4996  013A96  5DE9               	subwf	_average& (0+255),w,b
  4997  013A98  51EA               	movf	(_average+1)& (0+255),w,b
  4998  013A9A  0A80               	xorlw	128
  4999  013A9C  6FD9               	movwf	??_Sensor_Observe& (0+255),b
  5000  013A9E  504C               	movf	_Low_Sensor+1,w,c
  5001  013AA0  0A80               	xorlw	128
  5002  013AA2  59D9               	subwfb	??_Sensor_Observe& (0+255),w,b
  5003  013AA4  B0D8               	btfsc	status,0,c
  5004  013AA6  D008               	goto	l2224
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;main.c: 391: Low_Sensor = average;
  5008  013AA8  C0E9  F04B         	movff	_average,_Low_Sensor
  5009  013AAC  C0EA  F04C         	movff	_average+1,_Low_Sensor+1
  5010                           
  5011                           ;main.c: 392: Close_Pos = Motor_Count;
  5012  013AB0  C02D  F02B         	movff	_Motor_Count,_Close_Pos
  5013  013AB4  C02E  F02C         	movff	_Motor_Count+1,_Close_Pos+1
  5014  013AB8                     l2224:
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;main.c: 393: }
  5018                           ;main.c: 394: SteppingCW();
  5019                           
  5020                           ; BSR set to: 0
  5021  013AB8  ECC7  F0AA         	call	_SteppingCW	;wreg free
  5022  013ABC                     l2222:
  5023  013ABC  BE2E               	btfsc	_Motor_Count+1,7,c
  5024  013ABE  D7E5               	goto	l2223
  5025  013AC0  042D               	decf	_Motor_Count,w,c
  5026  013AC2  0E02               	movlw	2
  5027  013AC4  582E               	subwfb	_Motor_Count+1,w,c
  5028  013AC6  A0D8               	btfss	status,0,c
  5029  013AC8  D7E0               	goto	l2223
  5030                           
  5031                           ;main.c: 395: }
  5032                           ;main.c: 396: RD5 = 0;
  5033  013ACA  9A83               	bcf	3971,5,c	;volatile
  5034                           
  5035                           ;main.c: 397: RD7 = 0;
  5036  013ACC  9E83               	bcf	3971,7,c	;volatile
  5037                           
  5038                           ;main.c: 398: RA2 = 0;
  5039  013ACE  9480               	bcf	3968,2,c	;volatile
  5040                           
  5041                           ;main.c: 399: RA3 = 0;
  5042  013AD0  9680               	bcf	3968,3,c	;volatile
  5043                           
  5044                           ;main.c: 400: Sensor_Observe_Fin = 1;
  5045  013AD2  0E00               	movlw	0
  5046  013AD4  0101               	movlb	1	; () banked
  5047  013AD6  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5048  013AD8  0E01               	movlw	1
  5049  013ADA  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5050                           
  5051                           ; BSR set to: 1
  5052                           ;main.c: 402: CCW_Count = 512 - Close_Pos;
  5053  013ADC  C02B  F0D9         	movff	_Close_Pos,??_Sensor_Observe
  5054  013AE0  C02C  F0DA         	movff	_Close_Pos+1,??_Sensor_Observe+1
  5055  013AE4  0100               	movlb	0	; () banked
  5056  013AE6  1FD9               	comf	??_Sensor_Observe& (0+255),f,b
  5057  013AE8  1FDA               	comf	(??_Sensor_Observe+1)& (0+255),f,b
  5058  013AEA  4BD9               	infsnz	??_Sensor_Observe& (0+255),f,b
  5059  013AEC  2BDA               	incf	(??_Sensor_Observe+1)& (0+255),f,b
  5060  013AEE  0E00               	movlw	0
  5061  013AF0  25D9               	addwf	??_Sensor_Observe& (0+255),w,b
  5062  013AF2  0101               	movlb	1	; () banked
  5063  013AF4  6F2A               	movwf	_CCW_Count& (0+255),b
  5064  013AF6  0E02               	movlw	2
  5065  013AF8  0100               	movlb	0	; () banked
  5066  013AFA  21DA               	addwfc	(??_Sensor_Observe+1)& (0+255),w,b
  5067  013AFC  0101               	movlb	1	; () banked
  5068  013AFE  6F2B               	movwf	(_CCW_Count+1)& (0+255),b
  5069  013B00  0012               	return	
  5070  013B02                     __end_of_Sensor_Observe:
  5071                           	opt stack 0
  5072                           tosu	equ	0xFFF
  5073                           tosh	equ	0xFFE
  5074                           tosl	equ	0xFFD
  5075                           pclath	equ	0xFFA
  5076                           tblptru	equ	0xFF8
  5077                           tblptrh	equ	0xFF7
  5078                           tblptrl	equ	0xFF6
  5079                           tablat	equ	0xFF5
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           postdec1	equ	0xFE5
  5083                           fsr1h	equ	0xFE2
  5084                           fsr1l	equ	0xFE1
  5085                           postinc2	equ	0xFDE
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _Robot_Init *****************
  5089 ;; Defined at:
  5090 ;;		line 235 in file "main.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, status,2, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:        0 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    9
  5111 ;; This function calls:
  5112 ;;		_Robot_Stop
  5113 ;;		_UpdateDistance
  5114 ;;		_eusartSend
  5115 ;; This function is called by:
  5116 ;;		_main
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text4
  5121  015F56                     __ptext4:
  5122                           	opt stack 0
  5123  015F56                     _Robot_Init:
  5124                           	opt stack 21
  5125                           
  5126                           ;main.c: 236: eusartSend(128);
  5127                           
  5128                           ; BSR set to: 1
  5129                           ;incstack = 0
  5130  015F56  0E80               	movlw	128
  5131  015F58  EC23  F0B0         	call	_eusartSend
  5132                           
  5133                           ;main.c: 237: eusartSend(132);
  5134  015F5C  0E84               	movlw	132
  5135  015F5E  EC23  F0B0         	call	_eusartSend
  5136                           
  5137                           ;main.c: 238: Robot_Stop();
  5138  015F62  ECAC  F0AE         	call	_Robot_Stop	;wreg free
  5139                           
  5140                           ;main.c: 239: UpdateDistance();
  5141  015F66  EC22  F0AE         	call	_UpdateDistance	;wreg free
  5142  015F6A  0012               	return		;funcret
  5143  015F6C                     __end_of_Robot_Init:
  5144                           	opt stack 0
  5145                           tosu	equ	0xFFF
  5146                           tosh	equ	0xFFE
  5147                           tosl	equ	0xFFD
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           postinc0	equ	0xFEE
  5154                           wreg	equ	0xFE8
  5155                           postdec1	equ	0xFE5
  5156                           fsr1h	equ	0xFE2
  5157                           fsr1l	equ	0xFE1
  5158                           postinc2	equ	0xFDE
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _UpdateDistance *****************
  5162 ;; Defined at:
  5163 ;;		line 176 in file "main.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;		None
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;                  2    1[BANK0 ] int 
  5170 ;; Registers used:
  5171 ;;		wreg, status,2, cstack
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;Total ram usage:        2 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    8
  5184 ;; This function calls:
  5185 ;;		_eusartRec
  5186 ;;		_eusartSend
  5187 ;; This function is called by:
  5188 ;;		_Robot_Init
  5189 ;;		_main
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text5
  5194  015C44                     __ptext5:
  5195                           	opt stack 0
  5196  015C44                     _UpdateDistance:
  5197                           	opt stack 22
  5198                           
  5199                           ;main.c: 177: eusartSend(142);
  5200                           
  5201                           ;incstack = 0
  5202  015C44  0E8E               	movlw	142
  5203  015C46  EC23  F0B0         	call	_eusartSend
  5204                           
  5205                           ;main.c: 178: eusartSend(19);
  5206  015C4A  0E13               	movlw	19
  5207  015C4C  EC23  F0B0         	call	_eusartSend
  5208                           
  5209                           ;main.c: 179: Current_Dist1 = eusartRec();
  5210  015C50  EC50  F0B0         	call	_eusartRec	;wreg free
  5211  015C54  0101               	movlb	1	; () banked
  5212  015C56  6F41               	movwf	_Current_Dist1& (0+255),b
  5213                           
  5214                           ; BSR set to: 1
  5215                           ;main.c: 180: Current_Dist2 = eusartRec();
  5216  015C58  EC50  F0B0         	call	_eusartRec	;wreg free
  5217  015C5C  6E37               	movwf	_Current_Dist2,c
  5218                           
  5219                           ;main.c: 182: Current_Dist = Current_Dist2;
  5220  015C5E  C037  F038         	movff	_Current_Dist2,_Current_Dist
  5221                           
  5222                           ;main.c: 184: return Current_Dist;
  5223  015C62  C038  F061         	movff	_Current_Dist,?_UpdateDistance
  5224  015C66  0100               	movlb	0	; () banked
  5225  015C68  6B62               	clrf	(?_UpdateDistance+1)& (0+255),b
  5226  015C6A  0012               	return	
  5227  015C6C                     __end_of_UpdateDistance:
  5228                           	opt stack 0
  5229                           tosu	equ	0xFFF
  5230                           tosh	equ	0xFFE
  5231                           tosl	equ	0xFFD
  5232                           pclath	equ	0xFFA
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           postinc0	equ	0xFEE
  5238                           wreg	equ	0xFE8
  5239                           postdec1	equ	0xFE5
  5240                           fsr1h	equ	0xFE2
  5241                           fsr1l	equ	0xFE1
  5242                           postinc2	equ	0xFDE
  5243                           status	equ	0xFD8
  5244                           
  5245 ;; *************** function _Robot_Stop *****************
  5246 ;; Defined at:
  5247 ;;		line 157 in file "main.c"
  5248 ;; Parameters:    Size  Location     Type
  5249 ;;		None
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5265 ;;Total ram usage:        0 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    8
  5268 ;; This function calls:
  5269 ;;		_eusartSend
  5270 ;; This function is called by:
  5271 ;;		_Turn
  5272 ;;		_Robot_Init
  5273 ;;		_main
  5274 ;; This function uses a non-reentrant model
  5275 ;;
  5276                           
  5277                           	psect	text6
  5278  015D58                     __ptext6:
  5279                           	opt stack 0
  5280  015D58                     _Robot_Stop:
  5281                           	opt stack 21
  5282                           
  5283                           ;main.c: 158: eusartSend(137);
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;incstack = 0
  5287  015D58  0E89               	movlw	137
  5288  015D5A  EC23  F0B0         	call	_eusartSend
  5289                           
  5290                           ;main.c: 159: eusartSend(0);
  5291  015D5E  0E00               	movlw	0
  5292  015D60  EC23  F0B0         	call	_eusartSend
  5293                           
  5294                           ;main.c: 160: eusartSend(0);
  5295  015D64  0E00               	movlw	0
  5296  015D66  EC23  F0B0         	call	_eusartSend
  5297                           
  5298                           ;main.c: 161: eusartSend(0);
  5299  015D6A  0E00               	movlw	0
  5300  015D6C  EC23  F0B0         	call	_eusartSend
  5301                           
  5302                           ;main.c: 162: eusartSend(0);
  5303  015D70  0E00               	movlw	0
  5304  015D72  EC23  F0B0         	call	_eusartSend
  5305  015D76  0012               	return		;funcret
  5306  015D78                     __end_of_Robot_Stop:
  5307                           	opt stack 0
  5308                           tosu	equ	0xFFF
  5309                           tosh	equ	0xFFE
  5310                           tosl	equ	0xFFD
  5311                           pclath	equ	0xFFA
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           postinc0	equ	0xFEE
  5317                           wreg	equ	0xFE8
  5318                           postdec1	equ	0xFE5
  5319                           fsr1h	equ	0xFE2
  5320                           fsr1l	equ	0xFE1
  5321                           postinc2	equ	0xFDE
  5322                           status	equ	0xFD8
  5323                           
  5324 ;; *************** function _Reset_variables *****************
  5325 ;; Defined at:
  5326 ;;		line 426 in file "main.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;		None
  5329 ;; Auto vars:     Size  Location     Type
  5330 ;;		None
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, status,2
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5344 ;;Total ram usage:        0 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    7
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_main
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text7
  5355  0154AA                     __ptext7:
  5356                           	opt stack 0
  5357  0154AA                     _Reset_variables:
  5358                           	opt stack 23
  5359                           
  5360                           ;main.c: 427: Square_Dist = 0;
  5361                           
  5362                           ;incstack = 0
  5363  0154AA  0E00               	movlw	0
  5364  0154AC  0101               	movlb	1	; () banked
  5365  0154AE  6F35               	movwf	(_Square_Dist+1)& (0+255),b
  5366  0154B0  0E00               	movlw	0
  5367  0154B2  6F34               	movwf	_Square_Dist& (0+255),b
  5368                           
  5369                           ;main.c: 428: Sensor_Observe_Fin = 0;
  5370  0154B4  0E00               	movlw	0
  5371  0154B6  6F27               	movwf	(_Sensor_Observe_Fin+1)& (0+255),b
  5372  0154B8  0E00               	movlw	0
  5373  0154BA  6F26               	movwf	_Sensor_Observe_Fin& (0+255),b
  5374                           
  5375                           ;main.c: 429: Motor_Count = 0;
  5376  0154BC  0E00               	movlw	0
  5377  0154BE  6E2E               	movwf	_Motor_Count+1,c
  5378  0154C0  0E00               	movlw	0
  5379  0154C2  6E2D               	movwf	_Motor_Count,c
  5380                           
  5381                           ;main.c: 430: Low_Sensor = 10000;
  5382  0154C4  0E27               	movlw	39
  5383  0154C6  6E4C               	movwf	_Low_Sensor+1,c
  5384  0154C8  0E10               	movlw	16
  5385  0154CA  6E4B               	movwf	_Low_Sensor,c
  5386                           
  5387                           ;main.c: 431: ADC_Reading = 0;
  5388  0154CC  0E00               	movlw	0
  5389  0154CE  6F2F               	movwf	(_ADC_Reading+1)& (0+255),b
  5390  0154D0  0E00               	movlw	0
  5391  0154D2  6F2E               	movwf	_ADC_Reading& (0+255),b
  5392                           
  5393                           ;main.c: 432: Close_Pos = 0;
  5394  0154D4  0E00               	movlw	0
  5395  0154D6  6E2C               	movwf	_Close_Pos+1,c
  5396  0154D8  0E00               	movlw	0
  5397  0154DA  6E2B               	movwf	_Close_Pos,c
  5398                           
  5399                           ;main.c: 433: count = 0;
  5400  0154DC  0E00               	movlw	0
  5401  0154DE  6F2D               	movwf	(_count+1)& (0+255),b
  5402  0154E0  0E00               	movlw	0
  5403  0154E2  6F2C               	movwf	_count& (0+255),b
  5404                           
  5405                           ;main.c: 434: T_VAR = 0;
  5406  0154E4  0E00               	movlw	0
  5407  0154E6  6E30               	movwf	_T_VAR+1,c
  5408  0154E8  0E00               	movlw	0
  5409  0154EA  6E2F               	movwf	_T_VAR,c
  5410                           
  5411                           ;main.c: 435: mod = 0;
  5412  0154EC  0E00               	movlw	0
  5413  0154EE  6F33               	movwf	(_mod+1)& (0+255),b
  5414  0154F0  0E00               	movlw	0
  5415  0154F2  6F32               	movwf	_mod& (0+255),b
  5416  0154F4  0012               	return	
  5417  0154F6                     __end_of_Reset_variables:
  5418                           	opt stack 0
  5419                           tosu	equ	0xFFF
  5420                           tosh	equ	0xFFE
  5421                           tosl	equ	0xFFD
  5422                           pclath	equ	0xFFA
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           postinc0	equ	0xFEE
  5428                           wreg	equ	0xFE8
  5429                           postdec1	equ	0xFE5
  5430                           fsr1h	equ	0xFE2
  5431                           fsr1l	equ	0xFE1
  5432                           postinc2	equ	0xFDE
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function _MXK_Init *****************
  5436 ;; Defined at:
  5437 ;;		line 33 in file "Library/MXK.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;		None
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      void 
  5444 ;; Registers used:
  5445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;Total ram usage:        0 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:   16
  5458 ;; This function calls:
  5459 ;;		_LED_Init
  5460 ;;		_Port_Init
  5461 ;;		_Port_SetPin
  5462 ;;		_Port_SetPinType
  5463 ;;		_Port_SetQuadType
  5464 ;;		_Port_SetType
  5465 ;;		_delay_ms
  5466 ;; This function is called by:
  5467 ;;		_main
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text8
  5472  013338                     __ptext8:
  5473                           	opt stack 0
  5474  013338                     _MXK_Init:
  5475                           	opt stack 14
  5476                           
  5477                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  5478                           
  5479                           ; BSR set to: 1
  5480                           ;incstack = 0
  5481  013338  0E01               	movlw	1
  5482  01333A  6E4D               	movwf	_Bus_State,c
  5483                           
  5484                           ;MXK.c: 36: lQueue = (Function)0;
  5485  01333C  0E00               	movlw	0
  5486  01333E  0100               	movlb	0	; () banked
  5487  013340  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  5488  013342  0E00               	movlw	0
  5489  013344  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  5490  013346  0E00               	movlw	0
  5491  013348  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  5492                           
  5493                           ; BSR set to: 0
  5494                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  5495  01334A  0EE7               	movlw	low _PortA
  5496  01334C  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5497  01334E  0E02               	movlw	high _PortA
  5498  013350  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5499  013352  0E00               	movlw	0
  5500  013354  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5501  013356  ECDB  F094         	call	_Port_Init	;wreg free
  5502                           
  5503                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  5504  01335A  0EA9               	movlw	low _PortB
  5505  01335C  0100               	movlb	0	; () banked
  5506  01335E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5507  013360  0E01               	movlw	high _PortB
  5508  013362  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5509  013364  0E01               	movlw	1
  5510  013366  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5511  013368  ECDB  F094         	call	_Port_Init	;wreg free
  5512                           
  5513                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  5514  01336C  0EB3               	movlw	low _PortC
  5515  01336E  0100               	movlb	0	; () banked
  5516  013370  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5517  013372  0E01               	movlw	high _PortC
  5518  013374  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5519  013376  0E02               	movlw	2
  5520  013378  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5521  01337A  ECDB  F094         	call	_Port_Init	;wreg free
  5522                           
  5523                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  5524  01337E  0E9F               	movlw	low _PortD
  5525  013380  0100               	movlb	0	; () banked
  5526  013382  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5527  013384  0E01               	movlw	high _PortD
  5528  013386  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5529  013388  0E03               	movlw	3
  5530  01338A  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5531  01338C  ECDB  F094         	call	_Port_Init	;wreg free
  5532                           
  5533                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  5534  013390  0E95               	movlw	low _PortE
  5535  013392  0100               	movlb	0	; () banked
  5536  013394  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5537  013396  0E01               	movlw	high _PortE
  5538  013398  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5539  01339A  0E04               	movlw	4
  5540  01339C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5541  01339E  ECDB  F094         	call	_Port_Init	;wreg free
  5542                           
  5543                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  5544  0133A2  0EBD               	movlw	low _PortF
  5545  0133A4  0100               	movlb	0	; () banked
  5546  0133A6  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5547  0133A8  0E01               	movlw	high _PortF
  5548  0133AA  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5549  0133AC  0E05               	movlw	5
  5550  0133AE  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5551  0133B0  ECDB  F094         	call	_Port_Init	;wreg free
  5552                           
  5553                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  5554  0133B4  0E8B               	movlw	low _PortG
  5555  0133B6  0100               	movlb	0	; () banked
  5556  0133B8  6FA0               	movwf	Port_Init@pInput& (0+255),b
  5557  0133BA  0E01               	movlw	high _PortG
  5558  0133BC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  5559  0133BE  0E06               	movlw	6
  5560  0133C0  6FA2               	movwf	Port_Init@pPort& (0+255),b
  5561  0133C2  ECDB  F094         	call	_Port_Init	;wreg free
  5562                           
  5563                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  5564  0133C6  0EBD               	movlw	low _PortF
  5565  0133C8  0100               	movlb	0	; () banked
  5566  0133CA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5567  0133CC  0E01               	movlw	high _PortF
  5568  0133CE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5569  0133D0  0E05               	movlw	5
  5570  0133D2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5571  0133D4  0E00               	movlw	0
  5572  0133D6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5573  0133D8  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5574                           
  5575                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  5576  0133DC  0EA9               	movlw	low _PortB
  5577  0133DE  0100               	movlb	0	; () banked
  5578  0133E0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  5579  0133E2  0E01               	movlw	high _PortB
  5580  0133E4  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  5581  0133E6  0E00               	movlw	0
  5582  0133E8  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  5583  0133EA  0E00               	movlw	0
  5584  0133EC  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  5585  0133EE  EC98  F08F         	call	_Port_SetQuadType	;wreg free
  5586                           
  5587                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  5588  0133F2  0EBD               	movlw	low _PortF
  5589  0133F4  0100               	movlb	0	; () banked
  5590  0133F6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  5591  0133F8  0E01               	movlw	high _PortF
  5592  0133FA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  5593  0133FC  0E06               	movlw	6
  5594  0133FE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  5595  013400  0E03               	movlw	3
  5596  013402  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5597  013404  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5598                           
  5599                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  5600  013408  0E8B               	movlw	low _PortG
  5601  01340A  0100               	movlb	0	; () banked
  5602  01340C  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  5603  01340E  0E01               	movlw	high _PortG
  5604  013410  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  5605  013412  0E03               	movlw	3
  5606  013414  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5607  013416  EC8C  F091         	call	_Port_SetType	;wreg free
  5608                           
  5609                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  5610  01341A  0E8B               	movlw	low _PortG
  5611  01341C  0100               	movlb	0	; () banked
  5612  01341E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5613  013420  0E01               	movlw	high _PortG
  5614  013422  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5615  013424  0E04               	movlw	4
  5616  013426  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5617  013428  0E00               	movlw	0
  5618  01342A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5619  01342C  ECC1  F09F         	call	_Port_SetPin	;wreg free
  5620                           
  5621                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  5622  013430  0EBD               	movlw	low _PortF
  5623  013432  0100               	movlb	0	; () banked
  5624  013434  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  5625  013436  0E01               	movlw	high _PortF
  5626  013438  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  5627  01343A  0E06               	movlw	6
  5628  01343C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  5629  01343E  0E01               	movlw	1
  5630  013440  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  5631  013442  ECC1  F09F         	call	_Port_SetPin	;wreg free
  5632                           
  5633                           ;MXK.c: 55: LED_Init(eLED1);
  5634  013446  0E00               	movlw	0
  5635  013448  ECE2  F0A8         	call	_LED_Init
  5636                           
  5637                           ;MXK.c: 56: LED_Init(eLED2);
  5638  01344C  0E01               	movlw	1
  5639  01344E  ECE2  F0A8         	call	_LED_Init
  5640                           
  5641                           ;MXK.c: 58: PIR1 = 0;
  5642  013452  0E00               	movlw	0
  5643  013454  6E9E               	movwf	3998,c	;volatile
  5644                           
  5645                           ;MXK.c: 59: PIR2 = 0;
  5646  013456  0E00               	movlw	0
  5647  013458  6EA1               	movwf	4001,c	;volatile
  5648                           
  5649                           ;MXK.c: 60: PIR3 = 0;
  5650  01345A  0E00               	movlw	0
  5651  01345C  6EA4               	movwf	4004,c	;volatile
  5652                           
  5653                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  5654  01345E  8E9B               	bsf	3995,7,c	;volatile
  5655                           
  5656                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  5657  013460  8C9B               	bsf	3995,6,c	;volatile
  5658                           
  5659                           ;MXK.c: 66: delay_ms(100);
  5660  013462  0E00               	movlw	0
  5661  013464  0100               	movlb	0	; () banked
  5662  013466  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  5663  013468  0E64               	movlw	100
  5664  01346A  6F60               	movwf	delay_ms@ms& (0+255),b
  5665  01346C  ECB4  F0A8         	call	_delay_ms	;wreg free
  5666                           
  5667                           ;MXK.c: 68: RCONbits.IPEN = 1;
  5668  013470  8ED0               	bsf	4048,7,c	;volatile
  5669  013472  0012               	return		;funcret
  5670  013474                     __end_of_MXK_Init:
  5671                           	opt stack 0
  5672                           tosu	equ	0xFFF
  5673                           tosh	equ	0xFFE
  5674                           tosl	equ	0xFFD
  5675                           pclath	equ	0xFFA
  5676                           tblptru	equ	0xFF8
  5677                           tblptrh	equ	0xFF7
  5678                           tblptrl	equ	0xFF6
  5679                           tablat	equ	0xFF5
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           postdec1	equ	0xFE5
  5683                           fsr1h	equ	0xFE2
  5684                           fsr1l	equ	0xFE1
  5685                           postinc2	equ	0xFDE
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function _Port_Init *****************
  5689 ;; Defined at:
  5690 ;;		line 150 in file "Library/Port.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  5693 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5694 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5695 ;;  pPort           1   66[BANK0 ] enum E6786
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  i               1   69[BANK0 ] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      void 
  5700 ;; Registers used:
  5701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5707 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;Total ram usage:        6 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:   15
  5714 ;; This function calls:
  5715 ;;		_GetPortPORT
  5716 ;;		_GetPortProperties
  5717 ;;		_GetPortTRIS
  5718 ;;		_Port_Set
  5719 ;;		_Port_SetPinType
  5720 ;;		_Port_SetType
  5721 ;;		_Word_GetPair
  5722 ;; This function is called by:
  5723 ;;		_MXK_Init
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text9
  5728  0129B6                     __ptext9:
  5729                           	opt stack 0
  5730  0129B6                     _Port_Init:
  5731                           	opt stack 14
  5732                           
  5733                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  5734                           
  5735                           ;incstack = 0
  5736  0129B6  0100               	movlb	0	; () banked
  5737  0129B8  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5738  0129BA  ECBF  F0A3         	call	_GetPortProperties
  5739  0129BE  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5740  0129C2  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5741  0129C6  0100               	movlb	0	; () banked
  5742  0129C8  C060  FFDE         	movff	?_GetPortProperties,postinc2
  5743  0129CC  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  5744                           
  5745                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  5746  0129D0  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5747  0129D2  EC03  F0A4         	call	_GetPortPORT
  5748  0129D6  0100               	movlb	0	; () banked
  5749  0129D8  EE20 F006          	lfsr	2,6
  5750  0129DC  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5751  0129DE  26D9               	addwf	fsr2l,f,c
  5752  0129E0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5753  0129E2  22DA               	addwfc	fsr2h,f,c
  5754  0129E4  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5755  0129E8  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5756                           
  5757                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  5758  0129EC  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5759  0129EE  EC03  F0A4         	call	_GetPortPORT
  5760  0129F2  0100               	movlb	0	; () banked
  5761  0129F4  EE20 F004          	lfsr	2,4
  5762  0129F8  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5763  0129FA  26D9               	addwf	fsr2l,f,c
  5764  0129FC  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5765  0129FE  22DA               	addwfc	fsr2h,f,c
  5766  012A00  C060  FFDE         	movff	?_GetPortPORT,postinc2
  5767  012A04  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  5768                           
  5769                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  5770  012A08  51A2               	movf	Port_Init@pPort& (0+255),w,b
  5771  012A0A  EC7B  F0A3         	call	_GetPortTRIS
  5772  012A0E  0100               	movlb	0	; () banked
  5773  012A10  EE20 F002          	lfsr	2,2
  5774  012A14  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5775  012A16  26D9               	addwf	fsr2l,f,c
  5776  012A18  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5777  012A1A  22DA               	addwfc	fsr2h,f,c
  5778  012A1C  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  5779  012A20  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  5783  012A24  EE20 F004          	lfsr	2,4
  5784  012A28  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5785  012A2A  26D9               	addwf	fsr2l,f,c
  5786  012A2C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5787  012A2E  22DA               	addwfc	fsr2h,f,c
  5788  012A30  CFDE F0A3          	movff	postinc2,??_Port_Init
  5789  012A34  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5790  012A38  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5791  012A3C  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5792  012A40  0E00               	movlw	0
  5793  012A42  6EDF               	movwf	indf2,c
  5794                           
  5795                           ; BSR set to: 0
  5796                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  5797  012A44  EE20 F002          	lfsr	2,2
  5798  012A48  51A0               	movf	Port_Init@pInput& (0+255),w,b
  5799  012A4A  26D9               	addwf	fsr2l,f,c
  5800  012A4C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  5801  012A4E  22DA               	addwfc	fsr2h,f,c
  5802  012A50  CFDE F0A3          	movff	postinc2,??_Port_Init
  5803  012A54  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  5804  012A58  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  5805  012A5C  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  5806  012A60  0EFF               	movlw	255
  5807  012A62  6EDF               	movwf	indf2,c
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  5811  012A64  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  5812  012A68  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  5813  012A6C  0E00               	movlw	0
  5814  012A6E  6F9C               	movwf	Port_SetType@pType& (0+255),b
  5815  012A70  EC8C  F091         	call	_Port_SetType	;wreg free
  5816                           
  5817                           ;Port.c: 166: UINT8 i;
  5818                           ;Port.c: 167: for (i=0; i<8; i++)
  5819  012A74  0E00               	movlw	0
  5820  012A76  0100               	movlb	0	; () banked
  5821  012A78  6FA5               	movwf	Port_Init@i& (0+255),b
  5822  012A7A                     l14834:
  5823                           
  5824                           ; BSR set to: 0
  5825  012A7A  0E07               	movlw	7
  5826  012A7C  65A5               	cpfsgt	Port_Init@i& (0+255),b
  5827  012A7E  D031               	goto	l403
  5828  012A80  D04B               	goto	u12060
  5829  012A82                     
  5830                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  5831                           
  5832                           ; BSR set to: 0
  5833  012A82  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5834  012A86  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5835  012A8A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5836  012A8E  0E03               	movlw	3
  5837  012A90  0100               	movlb	0	; () banked
  5838  012A92  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5839  012A94  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5840                           
  5841                           ;Port.c: 173: break;
  5842  012A98  D03C               	goto	l405
  5843  012A9A                     
  5844                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  5845  012A9A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5846  012A9E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5847  012AA2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5848  012AA6  0E02               	movlw	2
  5849  012AA8  0100               	movlb	0	; () banked
  5850  012AAA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5851  012AAC  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5852                           
  5853                           ;Port.c: 176: break;
  5854  012AB0  D030               	goto	l405
  5855  012AB2                     
  5856                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  5857  012AB2  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5858  012AB6  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5859  012ABA  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5860  012ABE  0E01               	movlw	1
  5861  012AC0  0100               	movlb	0	; () banked
  5862  012AC2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5863  012AC4  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5864                           
  5865                           ;Port.c: 179: break;
  5866  012AC8  D024               	goto	l405
  5867  012ACA                     
  5868                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  5869  012ACA  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  5870  012ACE  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  5871  012AD2  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  5872  012AD6  0E00               	movlw	0
  5873  012AD8  0100               	movlb	0	; () banked
  5874  012ADA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  5875  012ADC  EC4E  F093         	call	_Port_SetPinType	;wreg free
  5876                           
  5877                           ;Port.c: 183: }
  5878                           
  5879                           ;Port.c: 182: break;
  5880  012AE0  D018               	goto	l405
  5881  012AE2                     l403:
  5882  012AE2  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  5883  012AE6  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  5884  012AEA  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  5885  012AEE  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  5886  012AF2  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  5887  012AF6  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  5888                           
  5889                           ; Switch size 1, requested type "space"
  5890                           ; Number of cases is 4, Range of values is 0 to 3
  5891                           ; switch strategies available:
  5892                           ; Name         Instructions Cycles
  5893                           ; simple_byte           13     7 (average)
  5894                           ;	Chosen strategy is simple_byte
  5895  012AFA  0A00               	xorlw	0	; case 0
  5896  012AFC  B4D8               	btfsc	status,2,c
  5897  012AFE  D7C1               	goto	l404
  5898  012B00  0A01               	xorlw	1	; case 1
  5899  012B02  B4D8               	btfsc	status,2,c
  5900  012B04  D7D6               	goto	l407
  5901  012B06  0A03               	xorlw	3	; case 2
  5902  012B08  B4D8               	btfsc	status,2,c
  5903  012B0A  D7C7               	goto	l406
  5904  012B0C  0A01               	xorlw	1	; case 3
  5905  012B0E  B4D8               	btfsc	status,2,c
  5906  012B10  D7DC               	goto	l408
  5907  012B12                     l405:
  5908  012B12  0100               	movlb	0	; () banked
  5909  012B14  2BA5               	incf	Port_Init@i& (0+255),f,b
  5910  012B16  D7B1               	goto	l14834
  5911  012B18                     u12060:
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;Port.c: 184: }
  5915                           ;Port.c: 185: Port_Set(pInput, 0x00);
  5916                           
  5917                           ; BSR set to: 0
  5918  012B18  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  5919  012B1C  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  5920  012B20  0E00               	movlw	0
  5921  012B22  6F71               	movwf	Port_Set@pValue& (0+255),b
  5922  012B24  ECC7  F08B         	call	_Port_Set	;wreg free
  5923  012B28  0012               	return		;funcret
  5924  012B2A                     __end_of_Port_Init:
  5925                           	opt stack 0
  5926                           tosu	equ	0xFFF
  5927                           tosh	equ	0xFFE
  5928                           tosl	equ	0xFFD
  5929                           pclath	equ	0xFFA
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1h	equ	0xFE2
  5938                           fsr1l	equ	0xFE1
  5939                           indf2	equ	0xFDF
  5940                           postinc2	equ	0xFDE
  5941                           postdec2	equ	0xFDD
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _Port_SetType *****************
  5947 ;; Defined at:
  5948 ;;		line 513 in file "Library/Port.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  5951 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  5952 ;;		 -> PortD(10), PortC(10), PortF(10), 
  5953 ;;  pType           1   60[BANK0 ] enum E6795
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  Output          1   63[BANK0 ] enum E6475
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      enum E6475
  5958 ;; Registers used:
  5959 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5965 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;Total ram usage:        6 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:   14
  5972 ;; This function calls:
  5973 ;;		_Port_CheckPortType
  5974 ;;		_Word_SetPair
  5975 ;; This function is called by:
  5976 ;;		_Port_Init
  5977 ;;		_MXK_Init
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text10
  5982  012318                     __ptext10:
  5983                           	opt stack 0
  5984  012318                     _Port_SetType:
  5985                           	opt stack 15
  5986                           
  5987                           ;Port.c: 515: ePinError Output = ePinErrorState;
  5988                           
  5989                           ;incstack = 0
  5990  012318  0E05               	movlw	5
  5991  01231A  0100               	movlb	0	; () banked
  5992  01231C  6F9F               	movwf	Port_SetType@Output& (0+255),b
  5993                           
  5994                           ;Port.c: 517: switch (pType)
  5995  01231E  D06E               	goto	l509
  5996  012320                     
  5997                           ; BSR set to: 0
  5998                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  5999                           
  6000                           ; BSR set to: 0
  6001  012320  EE20 F002          	lfsr	2,2
  6002  012324  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6003  012326  26D9               	addwf	fsr2l,f,c
  6004  012328  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6005  01232A  22DA               	addwfc	fsr2h,f,c
  6006  01232C  CFDE F09D          	movff	postinc2,??_Port_SetType
  6007  012330  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6008  012334  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6009  012338  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6010  01233C  0EFF               	movlw	255
  6011  01233E  D05C               	goto	L3
  6012  012340                     
  6013                           ; BSR set to: 0
  6014                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  6015                           
  6016                           ; BSR set to: 0
  6017  012340  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6018  012344  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6019  012348  0E01               	movlw	1
  6020  01234A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6021  01234C  ECE3  F0AB         	call	_Port_CheckPortType	;wreg free
  6022  012350  0100               	movlb	0	; () banked
  6023  012352  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6024  012354  519F               	movf	Port_SetType@Output& (0+255),w,b
  6025  012356  A4D8               	btfss	status,2,c
  6026  012358  0012               	return	
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;Port.c: 527: {
  6030                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  6031  01235A  EE20 F002          	lfsr	2,2
  6032  01235E  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6033  012360  26D9               	addwf	fsr2l,f,c
  6034  012362  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6035  012364  22DA               	addwfc	fsr2h,f,c
  6036  012366  CFDE F09D          	movff	postinc2,??_Port_SetType
  6037  01236A  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6038  01236E  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6039  012372  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6040  012376  0E00               	movlw	0
  6041  012378  6EDF               	movwf	indf2,c
  6042                           
  6043                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  6044  01237A  EE20 F004          	lfsr	2,4
  6045  01237E  D02F               	goto	L17
  6046  012380                     
  6047                           ; BSR set to: 0
  6048                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  6049                           
  6050                           ; BSR set to: 0
  6051  012380  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6052  012384  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6053  012388  0E02               	movlw	2
  6054  01238A  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6055  01238C  ECE3  F0AB         	call	_Port_CheckPortType	;wreg free
  6056  012390  0100               	movlb	0	; () banked
  6057  012392  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6058  012394  519F               	movf	Port_SetType@Output& (0+255),w,b
  6059  012396  A4D8               	btfss	status,2,c
  6060  012398  0012               	return	
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;Port.c: 538: {
  6064                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  6065  01239A  EE20 F002          	lfsr	2,2
  6066  01239E  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6067  0123A0  26D9               	addwf	fsr2l,f,c
  6068  0123A2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6069  0123A4  22DA               	addwfc	fsr2h,f,c
  6070  0123A6  CFDE F09D          	movff	postinc2,??_Port_SetType
  6071  0123AA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6072  0123AE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6073  0123B2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6074  0123B6  0EFF               	movlw	255
  6075  0123B8  6EDF               	movwf	indf2,c
  6076                           
  6077                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  6078  0123BA  EE20 F004          	lfsr	2,4
  6079  0123BE  D7B2               	goto	L4
  6080  0123C0                     
  6081                           ; BSR set to: 0
  6082                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  6083                           
  6084                           ; BSR set to: 0
  6085  0123C0  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  6086  0123C4  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  6087  0123C8  0E00               	movlw	0
  6088  0123CA  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  6089  0123CC  ECE3  F0AB         	call	_Port_CheckPortType	;wreg free
  6090  0123D0  0100               	movlb	0	; () banked
  6091  0123D2  6F9F               	movwf	Port_SetType@Output& (0+255),b
  6092  0123D4  519F               	movf	Port_SetType@Output& (0+255),w,b
  6093  0123D6  A4D8               	btfss	status,2,c
  6094  0123D8  0012               	return	
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;Port.c: 549: {
  6098                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  6099  0123DA  EE20 F002          	lfsr	2,2
  6100  0123DE                     L17:
  6101  0123DE  519A               	movf	Port_SetType@pInput& (0+255),w,b
  6102  0123E0  26D9               	addwf	fsr2l,f,c
  6103  0123E2  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  6104  0123E4  22DA               	addwfc	fsr2h,f,c
  6105  0123E6  CFDE F09D          	movff	postinc2,??_Port_SetType
  6106  0123EA  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  6107  0123EE  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  6108  0123F2  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  6109  0123F6  0E00               	movlw	0
  6110  0123F8                     L3:
  6111  0123F8  6EDF               	movwf	indf2,c
  6112                           
  6113                           ;Port.c: 552: }
  6114  0123FA  D00D               	goto	l511
  6115  0123FC                     l509:
  6116                           
  6117                           ; BSR set to: 0
  6118                           
  6119                           ; BSR set to: 0
  6120  0123FC  519C               	movf	Port_SetType@pType& (0+255),w,b
  6121                           
  6122                           ; Switch size 1, requested type "space"
  6123                           ; Number of cases is 4, Range of values is 0 to 3
  6124                           ; switch strategies available:
  6125                           ; Name         Instructions Cycles
  6126                           ; simple_byte           13     7 (average)
  6127                           ;	Chosen strategy is simple_byte
  6128  0123FE  0A00               	xorlw	0	; case 0
  6129  012400  B4D8               	btfsc	status,2,c
  6130  012402  D78E               	goto	l510
  6131  012404  0A01               	xorlw	1	; case 1
  6132  012406  B4D8               	btfsc	status,2,c
  6133  012408  D79B               	goto	l512
  6134  01240A  0A03               	xorlw	3	; case 2
  6135  01240C  B4D8               	btfsc	status,2,c
  6136  01240E  D7B8               	goto	l516
  6137  012410  0A01               	xorlw	1	; case 3
  6138  012412  B4D8               	btfsc	status,2,c
  6139  012414  D7D5               	goto	l519
  6140  012416                     l511:
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  6144                           
  6145                           ; BSR set to: 0
  6146  012416  0E08               	movlw	8
  6147  012418  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6148  01241A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6149  01241C  0E00               	movlw	0
  6150  01241E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6151  012420  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6152  012422  0E00               	movlw	0
  6153  012424  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6154  012426  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6155  01242A  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6156                           
  6157                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  6158  01242E  0E08               	movlw	8
  6159  012430  0100               	movlb	0	; () banked
  6160  012432  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6161  012434  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6162  012436  0E00               	movlw	0
  6163  012438  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6164  01243A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6165  01243C  0E01               	movlw	1
  6166  01243E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6167  012440  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6168  012444  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6169                           
  6170                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  6171  012448  0E08               	movlw	8
  6172  01244A  0100               	movlb	0	; () banked
  6173  01244C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6174  01244E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6175  012450  0E00               	movlw	0
  6176  012452  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6177  012454  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6178  012456  0E02               	movlw	2
  6179  012458  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6180  01245A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6181  01245E  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6182                           
  6183                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  6184  012462  0E08               	movlw	8
  6185  012464  0100               	movlb	0	; () banked
  6186  012466  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6187  012468  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6188  01246A  0E00               	movlw	0
  6189  01246C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6190  01246E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6191  012470  0E03               	movlw	3
  6192  012472  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6193  012474  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6194  012478  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6195                           
  6196                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  6197  01247C  0E08               	movlw	8
  6198  01247E  0100               	movlb	0	; () banked
  6199  012480  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6200  012482  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6201  012484  0E00               	movlw	0
  6202  012486  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6203  012488  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6204  01248A  0E04               	movlw	4
  6205  01248C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6206  01248E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6207  012492  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6208                           
  6209                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  6210  012496  0E08               	movlw	8
  6211  012498  0100               	movlb	0	; () banked
  6212  01249A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6213  01249C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6214  01249E  0E00               	movlw	0
  6215  0124A0  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6216  0124A2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6217  0124A4  0E05               	movlw	5
  6218  0124A6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6219  0124A8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6220  0124AC  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6221                           
  6222                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  6223  0124B0  0E08               	movlw	8
  6224  0124B2  0100               	movlb	0	; () banked
  6225  0124B4  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6226  0124B6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6227  0124B8  0E00               	movlw	0
  6228  0124BA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6229  0124BC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6230  0124BE  0E06               	movlw	6
  6231  0124C0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6232  0124C2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6233  0124C6  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6234                           
  6235                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  6236  0124CA  0E08               	movlw	8
  6237  0124CC  0100               	movlb	0	; () banked
  6238  0124CE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  6239  0124D0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  6240  0124D2  0E00               	movlw	0
  6241  0124D4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  6242  0124D6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  6243  0124D8  0E07               	movlw	7
  6244  0124DA  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  6245  0124DC  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  6246  0124E0  ECD9  F0AC         	call	_Word_SetPair	;wreg free
  6247  0124E4  0012               	return	
  6248  0124E6                     __end_of_Port_SetType:
  6249                           	opt stack 0
  6250                           tosu	equ	0xFFF
  6251                           tosh	equ	0xFFE
  6252                           tosl	equ	0xFFD
  6253                           pclath	equ	0xFFA
  6254                           tblptru	equ	0xFF8
  6255                           tblptrh	equ	0xFF7
  6256                           tblptrl	equ	0xFF6
  6257                           tablat	equ	0xFF5
  6258                           postinc0	equ	0xFEE
  6259                           wreg	equ	0xFE8
  6260                           postdec1	equ	0xFE5
  6261                           fsr1h	equ	0xFE2
  6262                           fsr1l	equ	0xFE1
  6263                           indf2	equ	0xFDF
  6264                           postinc2	equ	0xFDE
  6265                           postdec2	equ	0xFDD
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function _Port_CheckPortType *****************
  6271 ;; Defined at:
  6272 ;;		line 138 in file "Library/Port.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  6275 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6276 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6277 ;;  pDrive          1   56[BANK0 ] enum E6469
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  Output          1   57[BANK0 ] enum E6475
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      enum E6475
  6282 ;; Registers used:
  6283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6289 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;Total ram usage:        4 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:   13
  6296 ;; This function calls:
  6297 ;;		_Port_CheckQuadType
  6298 ;; This function is called by:
  6299 ;;		_Port_SetType
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           	psect	text11
  6304  0157C6                     __ptext11:
  6305                           	opt stack 0
  6306  0157C6                     _Port_CheckPortType:
  6307                           	opt stack 15
  6308                           
  6309                           ;Port.c: 140: ePinError Output = ePinErrorState;
  6310                           
  6311                           ;incstack = 0
  6312  0157C6  0E05               	movlw	5
  6313  0157C8  0100               	movlb	0	; () banked
  6314  0157CA  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  6318  0157CC  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6319  0157D0  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6320  0157D4  0E00               	movlw	0
  6321  0157D6  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6322  0157D8  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6323  0157DC  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
  6324  0157E0  0100               	movlb	0	; () banked
  6325  0157E2  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6326  0157E4  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6327  0157E6  A4D8               	btfss	status,2,c
  6328  0157E8  D00C               	goto	l397
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  6332  0157EA  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  6333  0157EE  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  6334  0157F2  0E01               	movlw	1
  6335  0157F4  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  6336  0157F6  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  6337  0157FA  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
  6338  0157FE  0100               	movlb	0	; () banked
  6339  015800  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  6340  015802                     l397:
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;Port.c: 146: return Output;
  6344                           
  6345                           ; BSR set to: 0
  6346  015802  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  6347  015804  0012               	return	
  6348  015806                     __end_of_Port_CheckPortType:
  6349                           	opt stack 0
  6350                           tosu	equ	0xFFF
  6351                           tosh	equ	0xFFE
  6352                           tosl	equ	0xFFD
  6353                           pclath	equ	0xFFA
  6354                           tblptru	equ	0xFF8
  6355                           tblptrh	equ	0xFF7
  6356                           tblptrl	equ	0xFF6
  6357                           tablat	equ	0xFF5
  6358                           postinc0	equ	0xFEE
  6359                           wreg	equ	0xFE8
  6360                           postdec1	equ	0xFE5
  6361                           fsr1h	equ	0xFE2
  6362                           fsr1l	equ	0xFE1
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           fsr2h	equ	0xFDA
  6367                           fsr2l	equ	0xFD9
  6368                           status	equ	0xFD8
  6369                           
  6370 ;; *************** function _Port_Set *****************
  6371 ;; Defined at:
  6372 ;;		line 570 in file "Library/Port.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  6375 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  6376 ;;		 -> PortD(10), PortC(10), PortF(10), 
  6377 ;;  pValue          1   17[BANK0 ] unsigned char 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  6380 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  6381 ;;  Type            1   38[BANK0 ] enum E6795
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  1    wreg      void 
  6384 ;; Registers used:
  6385 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;Total ram usage:       24 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:   10
  6398 ;; This function calls:
  6399 ;;		_Byte_SetByte
  6400 ;;		_Word_GetPair
  6401 ;; This function is called by:
  6402 ;;		_Port_Init
  6403 ;;		_Port_Toggle
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text12
  6408  01178E                     __ptext12:
  6409                           	opt stack 0
  6410  01178E                     _Port_Set:
  6411                           	opt stack 18
  6412                           
  6413                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;incstack = 0
  6417  01178E  0E08               	movlw	8
  6418  011790  0100               	movlb	0	; () banked
  6419  011792  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6420  011794  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6421  011796  0E00               	movlw	0
  6422  011798  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6423  01179A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6424  01179C  0E00               	movlw	0
  6425  01179E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6426  0117A0  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6427  0117A4  0100               	movlb	0	; () banked
  6428  0117A6  6F86               	movwf	Port_Set@Type& (0+255),b
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  6432  0117A8  5186               	movf	Port_Set@Type& (0+255),w,b
  6433  0117AA  6F72               	movwf	??_Port_Set& (0+255),b
  6434  0117AC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6435  0117AE  0E0E               	movlw	14
  6436  0117B0                     u11595:
  6437  0117B0  90D8               	bcf	status,0,c
  6438  0117B2  3772               	rlcf	??_Port_Set& (0+255),f,b
  6439  0117B4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6440  0117B6  2EE8               	decfsz	wreg,f,c
  6441  0117B8  D7FB               	goto	u11595
  6442  0117BA  5186               	movf	Port_Set@Type& (0+255),w,b
  6443  0117BC  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6444  0117BE  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  6445  0117C0  0E0C               	movlw	12
  6446  0117C2                     u11605:
  6447  0117C2  90D8               	bcf	status,0,c
  6448  0117C4  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  6449  0117C6  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  6450  0117C8  2EE8               	decfsz	wreg,f,c
  6451  0117CA  D7FB               	goto	u11605
  6452  0117CC  5186               	movf	Port_Set@Type& (0+255),w,b
  6453  0117CE  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  6454  0117D0  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  6455  0117D2  0E0A               	movlw	10
  6456  0117D4                     u11615:
  6457  0117D4  90D8               	bcf	status,0,c
  6458  0117D6  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  6459  0117D8  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  6460  0117DA  2EE8               	decfsz	wreg,f,c
  6461  0117DC  D7FB               	goto	u11615
  6462  0117DE  5186               	movf	Port_Set@Type& (0+255),w,b
  6463  0117E0  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  6464  0117E2  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  6465  0117E4  5186               	movf	Port_Set@Type& (0+255),w,b
  6466  0117E6  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  6467  0117E8  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  6468  0117EA  0E06               	movlw	6
  6469  0117EC                     u11625:
  6470  0117EC  90D8               	bcf	status,0,c
  6471  0117EE  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  6472  0117F0  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  6473  0117F2  2EE8               	decfsz	wreg,f,c
  6474  0117F4  D7FB               	goto	u11625
  6475  0117F6  5186               	movf	Port_Set@Type& (0+255),w,b
  6476  0117F8  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  6477  0117FA  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  6478  0117FC  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  6479  0117FE  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  6480  011800  0EF0               	movlw	240
  6481  011802  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  6482  011804  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6483  011806  0B0F               	andlw	15
  6484  011808  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  6485  01180A  0EF0               	movlw	240
  6486  01180C  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  6487  01180E  5186               	movf	Port_Set@Type& (0+255),w,b
  6488  011810  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  6489  011812  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  6490  011814  90D8               	bcf	status,0,c
  6491  011816  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6492  011818  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6493  01181A  90D8               	bcf	status,0,c
  6494  01181C  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  6495  01181E  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  6496  011820  5186               	movf	Port_Set@Type& (0+255),w,b
  6497  011822  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  6498  011824  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  6499  011826  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  6500  011828  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6501  01182A  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  6502  01182C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6503  01182E  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  6504  011830  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6505  011832  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  6506  011834  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6507  011836  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  6508  011838  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6509  01183A  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  6510  01183C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6511  01183E  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  6512  011840  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6513  011842  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  6514  011844  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6515  011846  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  6516  011848  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6517  01184A  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  6518  01184C  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6519  01184E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6520  011850  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  6521  011852  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  6522  011854  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  6523  011856  5172               	movf	??_Port_Set& (0+255),w,b
  6524  011858  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  6525  01185A  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  6526  01185C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6527  01185E  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  6528  011860  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;Port.c: 574: UINT16 TypeActual = Type;
  6532  011862  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  6533  011866  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  6537  011868  0E08               	movlw	8
  6538  01186A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6539  01186C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6540  01186E  0E00               	movlw	0
  6541  011870  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6542  011872  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6543  011874  0E01               	movlw	1
  6544  011876  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6545  011878  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6546  01187C  0100               	movlb	0	; () banked
  6547  01187E  6F72               	movwf	??_Port_Set& (0+255),b
  6548  011880  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6549  011882  90D8               	bcf	status,0,c
  6550  011884  3772               	rlcf	??_Port_Set& (0+255),f,b
  6551  011886  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6552  011888  90D8               	bcf	status,0,c
  6553  01188A  3772               	rlcf	??_Port_Set& (0+255),f,b
  6554  01188C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6555  01188E  5172               	movf	??_Port_Set& (0+255),w,b
  6556  011890  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6557  011892  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6558  011894  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6559                           
  6560                           ; BSR set to: 0
  6561                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  6562  011896  0E08               	movlw	8
  6563  011898  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6564  01189A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6565  01189C  0E00               	movlw	0
  6566  01189E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6567  0118A0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6568  0118A2  0E02               	movlw	2
  6569  0118A4  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6570  0118A6  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6571  0118AA  0100               	movlb	0	; () banked
  6572  0118AC  6F72               	movwf	??_Port_Set& (0+255),b
  6573  0118AE  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6574  0118B0  3B72               	swapf	??_Port_Set& (0+255),f,b
  6575  0118B2  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  6576  0118B4  0EF0               	movlw	240
  6577  0118B6  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  6578  0118B8  5172               	movf	??_Port_Set& (0+255),w,b
  6579  0118BA  0B0F               	andlw	15
  6580  0118BC  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  6581  0118BE  0EF0               	movlw	240
  6582  0118C0  1772               	andwf	??_Port_Set& (0+255),f,b
  6583  0118C2  5172               	movf	??_Port_Set& (0+255),w,b
  6584  0118C4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6585  0118C6  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6586  0118C8  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  6590  0118CA  0E08               	movlw	8
  6591  0118CC  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6592  0118CE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6593  0118D0  0E00               	movlw	0
  6594  0118D2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6595  0118D4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6596  0118D6  0E03               	movlw	3
  6597  0118D8  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6598  0118DA  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6599  0118DE  0100               	movlb	0	; () banked
  6600  0118E0  6F72               	movwf	??_Port_Set& (0+255),b
  6601  0118E2  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6602  0118E4  0E06               	movlw	6
  6603  0118E6                     u11635:
  6604  0118E6  90D8               	bcf	status,0,c
  6605  0118E8  3772               	rlcf	??_Port_Set& (0+255),f,b
  6606  0118EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6607  0118EC  2EE8               	decfsz	wreg,f,c
  6608  0118EE  D7FB               	goto	u11635
  6609  0118F0  5172               	movf	??_Port_Set& (0+255),w,b
  6610  0118F2  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6611  0118F4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6612  0118F6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  6616  0118F8  0E08               	movlw	8
  6617  0118FA  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6618  0118FC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6619  0118FE  0E00               	movlw	0
  6620  011900  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6621  011902  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6622  011904  0E04               	movlw	4
  6623  011906  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6624  011908  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6625  01190C  0100               	movlb	0	; () banked
  6626  01190E  6F72               	movwf	??_Port_Set& (0+255),b
  6627  011910  5172               	movf	??_Port_Set& (0+255),w,b
  6628  011912  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  6629  011914  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6630  011916  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6631  011918  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6632  01191A  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  6633  01191C  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  6637  01191E  0E08               	movlw	8
  6638  011920  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6639  011922  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6640  011924  0E00               	movlw	0
  6641  011926  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6642  011928  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6643  01192A  0E05               	movlw	5
  6644  01192C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6645  01192E  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6646  011932  0100               	movlb	0	; () banked
  6647  011934  6F72               	movwf	??_Port_Set& (0+255),b
  6648  011936  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6649  011938  0E0A               	movlw	10
  6650  01193A                     u11645:
  6651  01193A  90D8               	bcf	status,0,c
  6652  01193C  3772               	rlcf	??_Port_Set& (0+255),f,b
  6653  01193E  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6654  011940  2EE8               	decfsz	wreg,f,c
  6655  011942  D7FB               	goto	u11645
  6656  011944  5172               	movf	??_Port_Set& (0+255),w,b
  6657  011946  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6658  011948  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6659  01194A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  6663  01194C  0E08               	movlw	8
  6664  01194E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6665  011950  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6666  011952  0E00               	movlw	0
  6667  011954  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6668  011956  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6669  011958  0E06               	movlw	6
  6670  01195A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6671  01195C  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6672  011960  0100               	movlb	0	; () banked
  6673  011962  6F72               	movwf	??_Port_Set& (0+255),b
  6674  011964  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6675  011966  0E0C               	movlw	12
  6676  011968                     u11655:
  6677  011968  90D8               	bcf	status,0,c
  6678  01196A  3772               	rlcf	??_Port_Set& (0+255),f,b
  6679  01196C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6680  01196E  2EE8               	decfsz	wreg,f,c
  6681  011970  D7FB               	goto	u11655
  6682  011972  5172               	movf	??_Port_Set& (0+255),w,b
  6683  011974  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6684  011976  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6685  011978  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  6689  01197A  0E08               	movlw	8
  6690  01197C  256F               	addwf	Port_Set@pInput& (0+255),w,b
  6691  01197E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  6692  011980  0E00               	movlw	0
  6693  011982  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  6694  011984  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  6695  011986  0E07               	movlw	7
  6696  011988  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  6697  01198A  EC7C  F0AD         	call	_Word_GetPair	;wreg free
  6698  01198E  0100               	movlb	0	; () banked
  6699  011990  6F72               	movwf	??_Port_Set& (0+255),b
  6700  011992  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  6701  011994  0E0E               	movlw	14
  6702  011996                     u11665:
  6703  011996  90D8               	bcf	status,0,c
  6704  011998  3772               	rlcf	??_Port_Set& (0+255),f,b
  6705  01199A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  6706  01199C  2EE8               	decfsz	wreg,f,c
  6707  01199E  D7FB               	goto	u11665
  6708  0119A0  5172               	movf	??_Port_Set& (0+255),w,b
  6709  0119A2  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  6710  0119A4  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  6711  0119A6  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  6712                           
  6713                           ;Port.c: 584: if (TypeRequired == TypeActual)
  6714  0119A8  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  6715  0119AA  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  6716  0119AC  E144               	bnz	l528
  6717  0119AE  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  6718  0119B0  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  6719  0119B2  A4D8               	btfss	status,2,c
  6720  0119B4  0012               	return	
  6721  0119B6  D030               	goto	l526
  6722  0119B8                     
  6723                           ; BSR set to: 0
  6724                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  6725                           
  6726                           ; BSR set to: 0
  6727  0119B8  EE20 F002          	lfsr	2,2
  6728  0119BC  516F               	movf	Port_Set@pInput& (0+255),w,b
  6729  0119BE  26D9               	addwf	fsr2l,f,c
  6730  0119C0  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6731  0119C2  22DA               	addwfc	fsr2h,f,c
  6732  0119C4  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6733  0119C8  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6734  0119CC  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6735  0119D0  EC0E  F0B0         	call	_Byte_SetByte	;wreg free
  6736                           
  6737                           ;Port.c: 594: break;
  6738  0119D4  0012               	return	
  6739  0119D6                     
  6740                           ;Port.c: 597: pValue = ~pValue;
  6741  0119D6  0100               	movlb	0	; () banked
  6742  0119D8  1F71               	comf	Port_Set@pValue& (0+255),f,b
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  6746  0119DA  EE20 F002          	lfsr	2,2
  6747  0119DE  516F               	movf	Port_Set@pInput& (0+255),w,b
  6748  0119E0  26D9               	addwf	fsr2l,f,c
  6749  0119E2  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6750  0119E4  22DA               	addwfc	fsr2h,f,c
  6751  0119E6  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6752  0119EA  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6753  0119EE  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6754  0119F2  EC0E  F0B0         	call	_Byte_SetByte	;wreg free
  6755                           
  6756                           ;Port.c: 599: break;
  6757  0119F6  0012               	return	
  6758  0119F8                     
  6759                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  6760  0119F8  0100               	movlb	0	; () banked
  6761  0119FA  EE20 F004          	lfsr	2,4
  6762  0119FE  516F               	movf	Port_Set@pInput& (0+255),w,b
  6763  011A00  26D9               	addwf	fsr2l,f,c
  6764  011A02  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  6765  011A04  22DA               	addwfc	fsr2h,f,c
  6766  011A06  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  6767  011A0A  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  6768  011A0E  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  6769  011A12  EC0E  F0B0         	call	_Byte_SetByte	;wreg free
  6770                           
  6771                           ;Port.c: 606: }
  6772                           
  6773                           ;Port.c: 605: break;
  6774                           
  6775                           ;Port.c: 604: default:
  6776                           
  6777                           ;Port.c: 603: break;
  6778  011A16  0012               	return	
  6779  011A18                     l526:
  6780  011A18  0100               	movlb	0	; () banked
  6781  011A1A  5186               	movf	Port_Set@Type& (0+255),w,b
  6782                           
  6783                           ; Switch size 1, requested type "space"
  6784                           ; Number of cases is 4, Range of values is 0 to 3
  6785                           ; switch strategies available:
  6786                           ; Name         Instructions Cycles
  6787                           ; simple_byte           13     7 (average)
  6788                           ;	Chosen strategy is simple_byte
  6789  011A1C  0A00               	xorlw	0	; case 0
  6790  011A1E  B4D8               	btfsc	status,2,c
  6791  011A20  0012               	return	
  6792  011A22  0A01               	xorlw	1	; case 1
  6793  011A24  B4D8               	btfsc	status,2,c
  6794  011A26  D7C8               	goto	l529
  6795  011A28  0A03               	xorlw	3	; case 2
  6796  011A2A  B4D8               	btfsc	status,2,c
  6797  011A2C  D7D4               	goto	l531
  6798  011A2E  0A01               	xorlw	1	; case 3
  6799  011A30  A4D8               	btfss	status,2,c
  6800                           
  6801                           ; BSR set to: 0
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;Port.c: 607: }
  6805  011A32  0012               	return	
  6806  011A34  D7E1               	goto	l532
  6807  011A36                     l528:
  6808  011A36  0012               	return		;funcret
  6809  011A38                     __end_of_Port_Set:
  6810                           	opt stack 0
  6811                           tosu	equ	0xFFF
  6812                           tosh	equ	0xFFE
  6813                           tosl	equ	0xFFD
  6814                           pclath	equ	0xFFA
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           postinc0	equ	0xFEE
  6820                           wreg	equ	0xFE8
  6821                           postdec1	equ	0xFE5
  6822                           fsr1h	equ	0xFE2
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           postdec2	equ	0xFDD
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function _Byte_SetByte *****************
  6832 ;; Defined at:
  6833 ;;		line 110 in file "Library/Types.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  6836 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  6837 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  6838 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  6839 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  6840 ;;		 -> NULL(0), 
  6841 ;;  pValue          1    2[BANK0 ] unsigned char 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;		None
  6844 ;; Return value:  Size  Location     Type
  6845 ;;                  1    wreg      void 
  6846 ;; Registers used:
  6847 ;;		fsr2l, fsr2h
  6848 ;; Tracked objects:
  6849 ;;		On entry : 0/0
  6850 ;;		On exit  : 0/0
  6851 ;;		Unchanged: 0/0
  6852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6853 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;Total ram usage:        3 bytes
  6858 ;; Hardware stack levels used:    1
  6859 ;; Hardware stack levels required when called:    7
  6860 ;; This function calls:
  6861 ;;		Nothing
  6862 ;; This function is called by:
  6863 ;;		_Port_Set
  6864 ;;		_I2C_Init
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           	psect	text13
  6869  01601C                     __ptext13:
  6870                           	opt stack 0
  6871  01601C                     _Byte_SetByte:
  6872                           	opt stack 20
  6873                           
  6874                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  6875                           
  6876                           ;incstack = 0
  6877  01601C  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  6878  016020  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  6879  016024  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  6880  016028  0012               	return		;funcret
  6881  01602A                     __end_of_Byte_SetByte:
  6882                           	opt stack 0
  6883                           tosu	equ	0xFFF
  6884                           tosh	equ	0xFFE
  6885                           tosl	equ	0xFFD
  6886                           pclath	equ	0xFFA
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           postinc0	equ	0xFEE
  6892                           wreg	equ	0xFE8
  6893                           postdec1	equ	0xFE5
  6894                           fsr1h	equ	0xFE2
  6895                           fsr1l	equ	0xFE1
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function _GetPortTRIS *****************
  6904 ;; Defined at:
  6905 ;;		line 67 in file "Library/Port.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  pInput          1    wreg     enum E6786
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  pInput          1    2[BANK0 ] enum E6786
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  2    0[BANK0 ] PTR struct Byte
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6919 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6922 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;Total ram usage:        3 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    7
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_Port_Init
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text14
  6934  0146F6                     __ptext14:
  6935                           	opt stack 0
  6936  0146F6                     _GetPortTRIS:
  6937                           	opt stack 21
  6938                           
  6939                           ;incstack = 0
  6940                           ;GetPortTRIS@pInput stored from wreg
  6941  0146F6  0100               	movlb	0	; () banked
  6942  0146F8  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  6943                           
  6944                           ;Port.c: 69: switch (pInput)
  6945  0146FA  D029               	goto	l363
  6946  0146FC                     
  6947                           ;Port.c: 72: return (BytePtr)&TRISA;
  6948  0146FC  0E92               	movlw	146
  6949  0146FE  0100               	movlb	0	; () banked
  6950  014700  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6951  014702  0E0F               	movlw	15
  6952  014704  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6953                           
  6954                           ; BSR set to: 0
  6955  014706  0012               	return	
  6956  014708                     
  6957                           ; BSR set to: 0
  6958                           ;Port.c: 74: return (BytePtr)&TRISB;
  6959                           
  6960                           ; BSR set to: 0
  6961  014708  0E93               	movlw	147
  6962  01470A  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6963  01470C  0E0F               	movlw	15
  6964  01470E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6965                           
  6966                           ; BSR set to: 0
  6967  014710  0012               	return	
  6968  014712                     
  6969                           ; BSR set to: 0
  6970                           ;Port.c: 76: return (BytePtr)&TRISC;
  6971                           
  6972                           ; BSR set to: 0
  6973  014712  0E94               	movlw	148
  6974  014714  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6975  014716  0E0F               	movlw	15
  6976  014718  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6977                           
  6978                           ; BSR set to: 0
  6979  01471A  0012               	return	
  6980  01471C                     
  6981                           ; BSR set to: 0
  6982                           ;Port.c: 78: return (BytePtr)&TRISD;
  6983                           
  6984                           ; BSR set to: 0
  6985  01471C  0E95               	movlw	149
  6986  01471E  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6987  014720  0E0F               	movlw	15
  6988  014722  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  6989                           
  6990                           ; BSR set to: 0
  6991  014724  0012               	return	
  6992  014726                     
  6993                           ; BSR set to: 0
  6994                           ;Port.c: 80: return (BytePtr)&TRISE;
  6995                           
  6996                           ; BSR set to: 0
  6997  014726  0E96               	movlw	150
  6998  014728  6F60               	movwf	?_GetPortTRIS& (0+255),b
  6999  01472A  0E0F               	movlw	15
  7000  01472C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7001                           
  7002                           ; BSR set to: 0
  7003  01472E  0012               	return	
  7004  014730                     
  7005                           ; BSR set to: 0
  7006                           ;Port.c: 82: return (BytePtr)&TRISF;
  7007                           
  7008                           ; BSR set to: 0
  7009  014730  0E97               	movlw	151
  7010  014732  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7011  014734  0E0F               	movlw	15
  7012  014736  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7013                           
  7014                           ; BSR set to: 0
  7015  014738  0012               	return	
  7016  01473A                     
  7017                           ; BSR set to: 0
  7018                           ;Port.c: 84: return (BytePtr)&TRISG;
  7019                           
  7020                           ; BSR set to: 0
  7021  01473A  0E98               	movlw	152
  7022  01473C  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7023  01473E  0E0F               	movlw	15
  7024  014740  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7025                           
  7026                           ; BSR set to: 0
  7027  014742  0012               	return	
  7028  014744                     
  7029                           ; BSR set to: 0
  7030                           ;Port.c: 86: return (void*)0;
  7031                           
  7032                           ; BSR set to: 0
  7033  014744  0E00               	movlw	0
  7034  014746  6F60               	movwf	?_GetPortTRIS& (0+255),b
  7035  014748  0E00               	movlw	0
  7036  01474A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;Port.c: 87: }
  7040                           
  7041                           ; BSR set to: 0
  7042  01474C  0012               	return	
  7043  01474E                     l363:
  7044                           
  7045                           ; BSR set to: 0
  7046  01474E  0100               	movlb	0	; () banked
  7047  014750  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  7048                           
  7049                           ; Switch size 1, requested type "space"
  7050                           ; Number of cases is 7, Range of values is 0 to 6
  7051                           ; switch strategies available:
  7052                           ; Name         Instructions Cycles
  7053                           ; simple_byte           22    12 (average)
  7054                           ;	Chosen strategy is simple_byte
  7055  014752  0A00               	xorlw	0	; case 0
  7056  014754  B4D8               	btfsc	status,2,c
  7057  014756  D7D2               	goto	l364
  7058  014758  0A01               	xorlw	1	; case 1
  7059  01475A  B4D8               	btfsc	status,2,c
  7060  01475C  D7D5               	goto	l366
  7061  01475E  0A03               	xorlw	3	; case 2
  7062  014760  B4D8               	btfsc	status,2,c
  7063  014762  D7D7               	goto	l367
  7064  014764  0A01               	xorlw	1	; case 3
  7065  014766  B4D8               	btfsc	status,2,c
  7066  014768  D7D9               	goto	l368
  7067  01476A  0A07               	xorlw	7	; case 4
  7068  01476C  B4D8               	btfsc	status,2,c
  7069  01476E  D7DB               	goto	l369
  7070  014770  0A01               	xorlw	1	; case 5
  7071  014772  B4D8               	btfsc	status,2,c
  7072  014774  D7DD               	goto	l370
  7073  014776  0A03               	xorlw	3	; case 6
  7074  014778  B4D8               	btfsc	status,2,c
  7075  01477A  D7DF               	goto	l371
  7076  01477C  D7E3               	goto	l372
  7077  01477E                     __end_of_GetPortTRIS:
  7078                           	opt stack 0
  7079                           tosu	equ	0xFFF
  7080                           tosh	equ	0xFFE
  7081                           tosl	equ	0xFFD
  7082                           pclath	equ	0xFFA
  7083                           tblptru	equ	0xFF8
  7084                           tblptrh	equ	0xFF7
  7085                           tblptrl	equ	0xFF6
  7086                           tablat	equ	0xFF5
  7087                           postinc0	equ	0xFEE
  7088                           wreg	equ	0xFE8
  7089                           postdec1	equ	0xFE5
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _GetPortProperties *****************
  7100 ;; Defined at:
  7101 ;;		line 21 in file "Library/Port.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  pInput          1    wreg     enum E6786
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  pInput          1    2[BANK0 ] enum E6786
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  2    0[BANK0 ] PTR struct PortProperty
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7115 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;Total ram usage:        3 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    7
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_Port_Init
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text15
  7130  01477E                     __ptext15:
  7131                           	opt stack 0
  7132  01477E                     _GetPortProperties:
  7133                           	opt stack 21
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;incstack = 0
  7137                           ;GetPortProperties@pInput stored from wreg
  7138  01477E  0100               	movlb	0	; () banked
  7139  014780  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  7140                           
  7141                           ;Port.c: 23: switch (pInput)
  7142  014782  D029               	goto	l337
  7143  014784                     
  7144                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  7145  014784  0E7B               	movlw	low _PortA_Property
  7146  014786  0100               	movlb	0	; () banked
  7147  014788  6F60               	movwf	?_GetPortProperties& (0+255),b
  7148  01478A  0EFE               	movlw	high _PortA_Property
  7149  01478C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7150                           
  7151                           ; BSR set to: 0
  7152  01478E  0012               	return	
  7153  014790                     
  7154                           ; BSR set to: 0
  7155                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  7156                           
  7157                           ; BSR set to: 0
  7158  014790  0E79               	movlw	low _PortB_Property
  7159  014792  6F60               	movwf	?_GetPortProperties& (0+255),b
  7160  014794  0EFE               	movlw	high _PortB_Property
  7161  014796  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7162                           
  7163                           ; BSR set to: 0
  7164  014798  0012               	return	
  7165  01479A                     
  7166                           ; BSR set to: 0
  7167                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  7168                           
  7169                           ; BSR set to: 0
  7170  01479A  0E77               	movlw	low _PortC_Property
  7171  01479C  6F60               	movwf	?_GetPortProperties& (0+255),b
  7172  01479E  0EFE               	movlw	high _PortC_Property
  7173  0147A0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7174                           
  7175                           ; BSR set to: 0
  7176  0147A2  0012               	return	
  7177  0147A4                     
  7178                           ; BSR set to: 0
  7179                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  7180                           
  7181                           ; BSR set to: 0
  7182  0147A4  0E75               	movlw	low _PortD_Property
  7183  0147A6  6F60               	movwf	?_GetPortProperties& (0+255),b
  7184  0147A8  0EFE               	movlw	high _PortD_Property
  7185  0147AA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7186                           
  7187                           ; BSR set to: 0
  7188  0147AC  0012               	return	
  7189  0147AE                     
  7190                           ; BSR set to: 0
  7191                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  7192                           
  7193                           ; BSR set to: 0
  7194  0147AE  0E73               	movlw	low _PortE_Property
  7195  0147B0  6F60               	movwf	?_GetPortProperties& (0+255),b
  7196  0147B2  0EFE               	movlw	high _PortE_Property
  7197  0147B4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7198                           
  7199                           ; BSR set to: 0
  7200  0147B6  0012               	return	
  7201  0147B8                     
  7202                           ; BSR set to: 0
  7203                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  7204                           
  7205                           ; BSR set to: 0
  7206  0147B8  0E71               	movlw	low _PortF_Property
  7207  0147BA  6F60               	movwf	?_GetPortProperties& (0+255),b
  7208  0147BC  0EFE               	movlw	high _PortF_Property
  7209  0147BE  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7210                           
  7211                           ; BSR set to: 0
  7212  0147C0  0012               	return	
  7213  0147C2                     
  7214                           ; BSR set to: 0
  7215                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  7216                           
  7217                           ; BSR set to: 0
  7218  0147C2  0E6F               	movlw	low _PortG_Property
  7219  0147C4  6F60               	movwf	?_GetPortProperties& (0+255),b
  7220  0147C6  0EFE               	movlw	high _PortG_Property
  7221  0147C8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7222                           
  7223                           ; BSR set to: 0
  7224  0147CA  0012               	return	
  7225  0147CC                     
  7226                           ; BSR set to: 0
  7227                           ;Port.c: 40: return (void*)0;
  7228                           
  7229                           ; BSR set to: 0
  7230  0147CC  0E00               	movlw	0
  7231  0147CE  6F60               	movwf	?_GetPortProperties& (0+255),b
  7232  0147D0  0E00               	movlw	0
  7233  0147D2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;Port.c: 41: }
  7237                           
  7238                           ; BSR set to: 0
  7239  0147D4  0012               	return	
  7240  0147D6                     l337:
  7241                           
  7242                           ; BSR set to: 0
  7243  0147D6  0100               	movlb	0	; () banked
  7244  0147D8  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  7245                           
  7246                           ; Switch size 1, requested type "space"
  7247                           ; Number of cases is 7, Range of values is 0 to 6
  7248                           ; switch strategies available:
  7249                           ; Name         Instructions Cycles
  7250                           ; simple_byte           22    12 (average)
  7251                           ;	Chosen strategy is simple_byte
  7252  0147DA  0A00               	xorlw	0	; case 0
  7253  0147DC  B4D8               	btfsc	status,2,c
  7254  0147DE  D7D2               	goto	l338
  7255  0147E0  0A01               	xorlw	1	; case 1
  7256  0147E2  B4D8               	btfsc	status,2,c
  7257  0147E4  D7D5               	goto	l340
  7258  0147E6  0A03               	xorlw	3	; case 2
  7259  0147E8  B4D8               	btfsc	status,2,c
  7260  0147EA  D7D7               	goto	l341
  7261  0147EC  0A01               	xorlw	1	; case 3
  7262  0147EE  B4D8               	btfsc	status,2,c
  7263  0147F0  D7D9               	goto	l342
  7264  0147F2  0A07               	xorlw	7	; case 4
  7265  0147F4  B4D8               	btfsc	status,2,c
  7266  0147F6  D7DB               	goto	l343
  7267  0147F8  0A01               	xorlw	1	; case 5
  7268  0147FA  B4D8               	btfsc	status,2,c
  7269  0147FC  D7DD               	goto	l344
  7270  0147FE  0A03               	xorlw	3	; case 6
  7271  014800  B4D8               	btfsc	status,2,c
  7272  014802  D7DF               	goto	l345
  7273  014804  D7E3               	goto	l346
  7274  014806                     __end_of_GetPortProperties:
  7275                           	opt stack 0
  7276                           tosu	equ	0xFFF
  7277                           tosh	equ	0xFFE
  7278                           tosl	equ	0xFFD
  7279                           pclath	equ	0xFFA
  7280                           tblptru	equ	0xFF8
  7281                           tblptrh	equ	0xFF7
  7282                           tblptrl	equ	0xFF6
  7283                           tablat	equ	0xFF5
  7284                           postinc0	equ	0xFEE
  7285                           wreg	equ	0xFE8
  7286                           postdec1	equ	0xFE5
  7287                           fsr1h	equ	0xFE2
  7288                           fsr1l	equ	0xFE1
  7289                           indf2	equ	0xFDF
  7290                           postinc2	equ	0xFDE
  7291                           postdec2	equ	0xFDD
  7292                           fsr2h	equ	0xFDA
  7293                           fsr2l	equ	0xFD9
  7294                           status	equ	0xFD8
  7295                           
  7296 ;; *************** function _GetPortPORT *****************
  7297 ;; Defined at:
  7298 ;;		line 44 in file "Library/Port.c"
  7299 ;; Parameters:    Size  Location     Type
  7300 ;;  pInput          1    wreg     enum E6786
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;  pInput          1    2[BANK0 ] enum E6786
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  2    0[BANK0 ] PTR struct Byte
  7305 ;; Registers used:
  7306 ;;		wreg, status,2, status,0
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;Total ram usage:        3 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; Hardware stack levels required when called:    7
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_Port_Init
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           	psect	text16
  7327  014806                     __ptext16:
  7328                           	opt stack 0
  7329  014806                     _GetPortPORT:
  7330                           	opt stack 21
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;incstack = 0
  7334                           ;GetPortPORT@pInput stored from wreg
  7335  014806  0100               	movlb	0	; () banked
  7336  014808  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  7337                           
  7338                           ;Port.c: 46: switch (pInput)
  7339  01480A  D029               	goto	l350
  7340  01480C                     
  7341                           ;Port.c: 49: return (BytePtr)&PORTA;
  7342  01480C  0E80               	movlw	128
  7343  01480E  0100               	movlb	0	; () banked
  7344  014810  6F60               	movwf	?_GetPortPORT& (0+255),b
  7345  014812  0E0F               	movlw	15
  7346  014814  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7347                           
  7348                           ; BSR set to: 0
  7349  014816  0012               	return	
  7350  014818                     
  7351                           ; BSR set to: 0
  7352                           ;Port.c: 51: return (BytePtr)&PORTB;
  7353                           
  7354                           ; BSR set to: 0
  7355  014818  0E81               	movlw	129
  7356  01481A  6F60               	movwf	?_GetPortPORT& (0+255),b
  7357  01481C  0E0F               	movlw	15
  7358  01481E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7359                           
  7360                           ; BSR set to: 0
  7361  014820  0012               	return	
  7362  014822                     
  7363                           ; BSR set to: 0
  7364                           ;Port.c: 53: return (BytePtr)&PORTC;
  7365                           
  7366                           ; BSR set to: 0
  7367  014822  0E82               	movlw	130
  7368  014824  6F60               	movwf	?_GetPortPORT& (0+255),b
  7369  014826  0E0F               	movlw	15
  7370  014828  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7371                           
  7372                           ; BSR set to: 0
  7373  01482A  0012               	return	
  7374  01482C                     
  7375                           ; BSR set to: 0
  7376                           ;Port.c: 55: return (BytePtr)&PORTD;
  7377                           
  7378                           ; BSR set to: 0
  7379  01482C  0E83               	movlw	131
  7380  01482E  6F60               	movwf	?_GetPortPORT& (0+255),b
  7381  014830  0E0F               	movlw	15
  7382  014832  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7383                           
  7384                           ; BSR set to: 0
  7385  014834  0012               	return	
  7386  014836                     
  7387                           ; BSR set to: 0
  7388                           ;Port.c: 57: return (BytePtr)&PORTE;
  7389                           
  7390                           ; BSR set to: 0
  7391  014836  0E84               	movlw	132
  7392  014838  6F60               	movwf	?_GetPortPORT& (0+255),b
  7393  01483A  0E0F               	movlw	15
  7394  01483C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7395                           
  7396                           ; BSR set to: 0
  7397  01483E  0012               	return	
  7398  014840                     
  7399                           ; BSR set to: 0
  7400                           ;Port.c: 59: return (BytePtr)&PORTF;
  7401                           
  7402                           ; BSR set to: 0
  7403  014840  0E85               	movlw	133
  7404  014842  6F60               	movwf	?_GetPortPORT& (0+255),b
  7405  014844  0E0F               	movlw	15
  7406  014846  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7407                           
  7408                           ; BSR set to: 0
  7409  014848  0012               	return	
  7410  01484A                     
  7411                           ; BSR set to: 0
  7412                           ;Port.c: 61: return (BytePtr)&PORTG;
  7413                           
  7414                           ; BSR set to: 0
  7415  01484A  0E86               	movlw	134
  7416  01484C  6F60               	movwf	?_GetPortPORT& (0+255),b
  7417  01484E  0E0F               	movlw	15
  7418  014850  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7419                           
  7420                           ; BSR set to: 0
  7421  014852  0012               	return	
  7422  014854                     
  7423                           ; BSR set to: 0
  7424                           ;Port.c: 63: return (void*)0;
  7425                           
  7426                           ; BSR set to: 0
  7427  014854  0E00               	movlw	0
  7428  014856  6F60               	movwf	?_GetPortPORT& (0+255),b
  7429  014858  0E00               	movlw	0
  7430  01485A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;Port.c: 64: }
  7434                           
  7435                           ; BSR set to: 0
  7436  01485C  0012               	return	
  7437  01485E                     l350:
  7438                           
  7439                           ; BSR set to: 0
  7440  01485E  0100               	movlb	0	; () banked
  7441  014860  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  7442                           
  7443                           ; Switch size 1, requested type "space"
  7444                           ; Number of cases is 7, Range of values is 0 to 6
  7445                           ; switch strategies available:
  7446                           ; Name         Instructions Cycles
  7447                           ; simple_byte           22    12 (average)
  7448                           ;	Chosen strategy is simple_byte
  7449  014862  0A00               	xorlw	0	; case 0
  7450  014864  B4D8               	btfsc	status,2,c
  7451  014866  D7D2               	goto	l351
  7452  014868  0A01               	xorlw	1	; case 1
  7453  01486A  B4D8               	btfsc	status,2,c
  7454  01486C  D7D5               	goto	l353
  7455  01486E  0A03               	xorlw	3	; case 2
  7456  014870  B4D8               	btfsc	status,2,c
  7457  014872  D7D7               	goto	l354
  7458  014874  0A01               	xorlw	1	; case 3
  7459  014876  B4D8               	btfsc	status,2,c
  7460  014878  D7D9               	goto	l355
  7461  01487A  0A07               	xorlw	7	; case 4
  7462  01487C  B4D8               	btfsc	status,2,c
  7463  01487E  D7DB               	goto	l356
  7464  014880  0A01               	xorlw	1	; case 5
  7465  014882  B4D8               	btfsc	status,2,c
  7466  014884  D7DD               	goto	l357
  7467  014886  0A03               	xorlw	3	; case 6
  7468  014888  B4D8               	btfsc	status,2,c
  7469  01488A  D7DF               	goto	l358
  7470  01488C  D7E3               	goto	l359
  7471  01488E                     __end_of_GetPortPORT:
  7472                           	opt stack 0
  7473                           tosu	equ	0xFFF
  7474                           tosh	equ	0xFFE
  7475                           tosl	equ	0xFFD
  7476                           pclath	equ	0xFFA
  7477                           tblptru	equ	0xFF8
  7478                           tblptrh	equ	0xFF7
  7479                           tblptrl	equ	0xFF6
  7480                           tablat	equ	0xFF5
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           postdec1	equ	0xFE5
  7484                           fsr1h	equ	0xFE2
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function _LED_Init *****************
  7494 ;; Defined at:
  7495 ;;		line 15 in file "Library/LED.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  pLED            1    wreg     enum E6739
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;  pLED            1   45[BANK0 ] enum E6739
  7500 ;; Return value:  Size  Location     Type
  7501 ;;                  1    wreg      void 
  7502 ;; Registers used:
  7503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7504 ;; Tracked objects:
  7505 ;;		On entry : 0/0
  7506 ;;		On exit  : 0/0
  7507 ;;		Unchanged: 0/0
  7508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;Total ram usage:        1 bytes
  7514 ;; Hardware stack levels used:    1
  7515 ;; Hardware stack levels required when called:   12
  7516 ;; This function calls:
  7517 ;;		_LED_Set
  7518 ;;		_Port_SetPinType
  7519 ;; This function is called by:
  7520 ;;		_MXK_Init
  7521 ;;		_main
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           	psect	text17
  7526  0151C4                     __ptext17:
  7527                           	opt stack 0
  7528  0151C4                     _LED_Init:
  7529                           	opt stack 17
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;incstack = 0
  7533                           ;LED_Init@pLED stored from wreg
  7534  0151C4  0100               	movlb	0	; () banked
  7535  0151C6  6F8D               	movwf	LED_Init@pLED& (0+255),b
  7536                           
  7537                           ;LED.c: 17: switch (pLED)
  7538  0151C8  D018               	goto	l220
  7539  0151CA                     
  7540                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  7541  0151CA  0EB3               	movlw	low _PortC
  7542  0151CC  0100               	movlb	0	; () banked
  7543  0151CE  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7544  0151D0  0E01               	movlw	high _PortC
  7545  0151D2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7546  0151D4  0E00               	movlw	0
  7547  0151D6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7548  0151D8  0E03               	movlw	3
  7549  0151DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7550  0151DC  EC4E  F093         	call	_Port_SetPinType	;wreg free
  7551                           
  7552                           ;LED.c: 21: break;
  7553  0151E0  D014               	goto	l222
  7554  0151E2                     
  7555                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  7556  0151E2  0EB3               	movlw	low _PortC
  7557  0151E4  0100               	movlb	0	; () banked
  7558  0151E6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7559  0151E8  0E01               	movlw	high _PortC
  7560  0151EA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7561  0151EC  0E01               	movlw	1
  7562  0151EE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7563  0151F0  0E03               	movlw	3
  7564  0151F2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7565  0151F4  EC4E  F093         	call	_Port_SetPinType	;wreg free
  7566                           
  7567                           ;LED.c: 25: }
  7568                           
  7569                           ;LED.c: 24: break;
  7570  0151F8  D008               	goto	l222
  7571  0151FA                     l220:
  7572  0151FA  0100               	movlb	0	; () banked
  7573  0151FC  518D               	movf	LED_Init@pLED& (0+255),w,b
  7574                           
  7575                           ; Switch size 1, requested type "space"
  7576                           ; Number of cases is 2, Range of values is 0 to 1
  7577                           ; switch strategies available:
  7578                           ; Name         Instructions Cycles
  7579                           ; simple_byte            7     4 (average)
  7580                           ;	Chosen strategy is simple_byte
  7581  0151FE  0A00               	xorlw	0	; case 0
  7582  015200  B4D8               	btfsc	status,2,c
  7583  015202  D7E3               	goto	l221
  7584  015204  0A01               	xorlw	1	; case 1
  7585  015206  B4D8               	btfsc	status,2,c
  7586  015208  D7EC               	goto	l223
  7587  01520A                     l222:
  7588                           
  7589                           ;LED.c: 26: LED_Set(pLED, 0);
  7590                           
  7591                           ; BSR set to: 0
  7592  01520A  0E00               	movlw	0
  7593  01520C  0100               	movlb	0	; () banked
  7594  01520E  6F74               	movwf	LED_Set@pValue& (0+255),b
  7595  015210  518D               	movf	LED_Init@pLED& (0+255),w,b
  7596  015212  EC11  F0AB         	call	_LED_Set
  7597  015216  0012               	return		;funcret
  7598  015218                     __end_of_LED_Init:
  7599                           	opt stack 0
  7600                           tosu	equ	0xFFF
  7601                           tosh	equ	0xFFE
  7602                           tosl	equ	0xFFD
  7603                           pclath	equ	0xFFA
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           postinc0	equ	0xFEE
  7609                           wreg	equ	0xFE8
  7610                           postdec1	equ	0xFE5
  7611                           fsr1h	equ	0xFE2
  7612                           fsr1l	equ	0xFE1
  7613                           indf2	equ	0xFDF
  7614                           postinc2	equ	0xFDE
  7615                           postdec2	equ	0xFDD
  7616                           fsr2h	equ	0xFDA
  7617                           fsr2l	equ	0xFD9
  7618                           status	equ	0xFD8
  7619                           
  7620 ;; *************** function _LED_Set *****************
  7621 ;; Defined at:
  7622 ;;		line 33 in file "Library/LED.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;  pLED            1    wreg     enum E6739
  7625 ;;  pValue          1   20[BANK0 ] unsigned char 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  pLED            1   21[BANK0 ] enum E6739
  7628 ;; Return value:  Size  Location     Type
  7629 ;;                  1    wreg      void 
  7630 ;; Registers used:
  7631 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7637 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;Total ram usage:        2 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:   11
  7644 ;; This function calls:
  7645 ;;		_Port_SetPin
  7646 ;; This function is called by:
  7647 ;;		_LED_Init
  7648 ;;		_main
  7649 ;;		_SYSTEM_Initialize
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           	psect	text18
  7654  015622                     __ptext18:
  7655                           	opt stack 0
  7656  015622                     _LED_Set:
  7657                           	opt stack 17
  7658                           
  7659                           ;incstack = 0
  7660                           ;LED_Set@pLED stored from wreg
  7661  015622  0100               	movlb	0	; () banked
  7662  015624  6F75               	movwf	LED_Set@pLED& (0+255),b
  7663                           
  7664                           ;LED.c: 35: switch (pLED)
  7665  015626  D018               	goto	l227
  7666  015628                     
  7667                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  7668  015628  0EB3               	movlw	low _PortC
  7669  01562A  0100               	movlb	0	; () banked
  7670  01562C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7671  01562E  0E01               	movlw	high _PortC
  7672  015630  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7673  015632  0E00               	movlw	0
  7674  015634  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7675  015636  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7676  01563A  ECC1  F09F         	call	_Port_SetPin	;wreg free
  7677                           
  7678                           ;LED.c: 39: break;
  7679  01563E  0012               	return	
  7680  015640                     
  7681                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  7682  015640  0EB3               	movlw	low _PortC
  7683  015642  0100               	movlb	0	; () banked
  7684  015644  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7685  015646  0E01               	movlw	high _PortC
  7686  015648  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7687  01564A  0E01               	movlw	1
  7688  01564C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7689  01564E  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  7690  015652  ECC1  F09F         	call	_Port_SetPin	;wreg free
  7691                           
  7692                           ;LED.c: 43: }
  7693                           
  7694                           ;LED.c: 42: break;
  7695  015656  0012               	return	
  7696  015658                     l227:
  7697  015658  0100               	movlb	0	; () banked
  7698  01565A  5175               	movf	LED_Set@pLED& (0+255),w,b
  7699                           
  7700                           ; Switch size 1, requested type "space"
  7701                           ; Number of cases is 2, Range of values is 0 to 1
  7702                           ; switch strategies available:
  7703                           ; Name         Instructions Cycles
  7704                           ; simple_byte            7     4 (average)
  7705                           ;	Chosen strategy is simple_byte
  7706  01565C  0A00               	xorlw	0	; case 0
  7707  01565E  B4D8               	btfsc	status,2,c
  7708  015660  D7E3               	goto	l228
  7709  015662  0A01               	xorlw	1	; case 1
  7710  015664  A4D8               	btfss	status,2,c
  7711  015666  0012               	return	
  7712  015668  D7EB               	goto	l230
  7713  01566A                     __end_of_LED_Set:
  7714                           	opt stack 0
  7715                           tosu	equ	0xFFF
  7716                           tosh	equ	0xFFE
  7717                           tosl	equ	0xFFD
  7718                           pclath	equ	0xFFA
  7719                           tblptru	equ	0xFF8
  7720                           tblptrh	equ	0xFF7
  7721                           tblptrl	equ	0xFF6
  7722                           tablat	equ	0xFF5
  7723                           postinc0	equ	0xFEE
  7724                           wreg	equ	0xFE8
  7725                           postdec1	equ	0xFE5
  7726                           fsr1h	equ	0xFE2
  7727                           fsr1l	equ	0xFE1
  7728                           indf2	equ	0xFDF
  7729                           postinc2	equ	0xFDE
  7730                           postdec2	equ	0xFDD
  7731                           fsr2h	equ	0xFDA
  7732                           fsr2l	equ	0xFD9
  7733                           status	equ	0xFD8
  7734                           
  7735 ;; *************** function _MXK_Dequeue *****************
  7736 ;; Defined at:
  7737 ;;		line 153 in file "Library/MXK.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;		None
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;		None
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  1    wreg      void 
  7744 ;; Registers used:
  7745 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;Total ram usage:        0 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:   12
  7758 ;; This function calls:
  7759 ;;		Absolute function
  7760 ;;		_Motor_Step
  7761 ;; This function is called by:
  7762 ;;		_main
  7763 ;; This function uses a non-reentrant model
  7764 ;;
  7765                           
  7766                           	psect	text19
  7767  015A90                     __ptext19:
  7768                           	opt stack 0
  7769  015A90                     _MXK_Dequeue:
  7770                           	opt stack 18
  7771                           
  7772                           ;MXK.c: 155: if (lQueue)
  7773                           
  7774                           ;incstack = 0
  7775  015A90  0100               	movlb	0	; () banked
  7776  015A92  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7777  015A94  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  7778  015A96  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  7779  015A98  B4D8               	btfsc	status,2,c
  7780  015A9A  D00C               	goto	u14229
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;MXK.c: 156: lQueue();
  7784  015A9C  D801               	call	u14228
  7785  015A9E  D00A               	goto	u14229
  7786  015AA0                     u14228:
  7787  015AA0  0005               	push	
  7788  015AA2  6EFA               	movwf	pclath,c
  7789  015AA4  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  7790  015AA6  6EFD               	movwf	tosl,c
  7791  015AA8  51E7               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  7792  015AAA  6EFE               	movwf	tosh,c
  7793  015AAC  51E8               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  7794  015AAE  6EFF               	movwf	tosu,c
  7795  015AB0  50FA               	movf	pclath,w,c
  7796  015AB2  0012               	return		;indir
  7797  015AB4                     u14229:
  7798                           
  7799                           ;MXK.c: 157: lQueue = 0;
  7800  015AB4  0E00               	movlw	0
  7801  015AB6  0100               	movlb	0	; () banked
  7802  015AB8  6FE6               	movwf	_lQueue& (0+255),b	;volatile
  7803  015ABA  0E00               	movlw	0
  7804  015ABC  6FE7               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7805  015ABE  0E00               	movlw	0
  7806  015AC0  6FE8               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7807                           
  7808                           ; BSR set to: 0
  7809  015AC2  0012               	return		;funcret
  7810  015AC4                     __end_of_MXK_Dequeue:
  7811                           	opt stack 0
  7812                           tosu	equ	0xFFF
  7813                           tosh	equ	0xFFE
  7814                           tosl	equ	0xFFD
  7815                           pclath	equ	0xFFA
  7816                           tblptru	equ	0xFF8
  7817                           tblptrh	equ	0xFF7
  7818                           tblptrl	equ	0xFF6
  7819                           tablat	equ	0xFF5
  7820                           postinc0	equ	0xFEE
  7821                           wreg	equ	0xFE8
  7822                           postdec1	equ	0xFE5
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _Motor_Step *****************
  7833 ;; Defined at:
  7834 ;;		line 75 in file "Library/Motor.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;		None
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;                  1    wreg      void 
  7841 ;; Registers used:
  7842 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        2 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:   11
  7855 ;; This function calls:
  7856 ;;		_MXK_Queue
  7857 ;;		_MXK_Release
  7858 ;;		_MXK_SwitchTo
  7859 ;;		_Port_SetPin
  7860 ;;		_Timer0_Restart
  7861 ;;		_Timer0_Stop
  7862 ;; This function is called by:
  7863 ;;		_Motor_Init
  7864 ;;		_Timer0_ISR
  7865 ;;		_MXK_Dequeue
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           	psect	text20
  7870  0138F0                     __ptext20:
  7871                           	opt stack 0
  7872  0138F0                     _Motor_Step:
  7873                           	opt stack 0
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;Skip over the trampoline to the duplicate function for level 2
  7877  0138F0  B251               	btfsc	btemp,1,c
  7878  0138F2  EF01  F09E         	goto	i2_Motor_Step
  7879  0138F6                     _Motor_Step$intlevel0:
  7880                           	opt stack 18
  7881                           
  7882                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
  7883                           
  7884                           ;incstack = 0
  7885  0138F6  0100               	movlb	0	; () banked
  7886  0138F8  EE20 F004          	lfsr	2,4
  7887  0138FC  51ED               	movf	_lMotor& (0+255),w,b
  7888  0138FE  26D9               	addwf	fsr2l,f,c
  7889  013900  51EE               	movf	(_lMotor+1)& (0+255),w,b
  7890  013902  22DA               	addwfc	fsr2h,f,c
  7891  013904  50DF               	movf	indf2,w,c
  7892  013906  EC9F  F0AC         	call	_MXK_SwitchTo
  7893  01390A  0900               	iorlw	0
  7894  01390C  B4D8               	btfsc	status,2,c
  7895  01390E  D06E               	goto	l1627
  7896                           
  7897                           ;Motor.c: 78: {
  7898                           ;Motor.c: 79: if (lMotor->mDelta != 0)
  7899  013910  C0ED  FFD9         	movff	_lMotor,fsr2l
  7900  013914  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7901  013918  50DE               	movf	postinc2,w,c
  7902  01391A  10DE               	iorwf	postinc2,w,c
  7903  01391C  B4D8               	btfsc	status,2,c
  7904  01391E  D061               	goto	l1628
  7905                           
  7906                           ;Motor.c: 80: {
  7907                           ;Motor.c: 82: if (lMotor->mDelta > 0)
  7908  013920  C0ED  FFD9         	movff	_lMotor,fsr2l
  7909  013924  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7910  013928  0E01               	movlw	1
  7911  01392A  BEDB               	btfsc	plusw2,7,c
  7912  01392C  D023               	goto	l1629
  7913  01392E  0E01               	movlw	1
  7914  013930  50DB               	movf	plusw2,w,c
  7915  013932  E103               	bnz	u12170
  7916  013934  04DE               	decf	postinc2,w,c
  7917  013936  A0D8               	btfss	status,0,c
  7918  013938  D01D               	goto	l1629
  7919  01393A                     u12170:
  7920                           
  7921                           ;Motor.c: 83: {
  7922                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
  7923  01393A  C0ED  FFD9         	movff	_lMotor,fsr2l
  7924  01393E  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7925  013942  28DE               	incf	postinc2,w,c
  7926  013944  E104               	bnz	u12180
  7927  013946  0E7F               	movlw	127
  7928  013948  18DE               	xorwf	postinc2,w,c
  7929  01394A  B4D8               	btfsc	status,2,c
  7930  01394C  D007               	goto	l1630
  7931  01394E                     u12180:
  7932                           
  7933                           ;Motor.c: 85: lMotor->mDelta --;
  7934  01394E  C0ED  FFD9         	movff	_lMotor,fsr2l
  7935  013952  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7936  013956  06DE               	decf	postinc2,f,c
  7937  013958  0E00               	movlw	0
  7938  01395A  5ADD               	subwfb	postdec2,f,c
  7939  01395C                     l1630:
  7940                           
  7941                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
  7942  01395C  0E95               	movlw	low _PortE
  7943  01395E  0100               	movlb	0	; () banked
  7944  013960  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7945  013962  0E01               	movlw	high _PortE
  7946  013964  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7947  013966  0E00               	movlw	0
  7948  013968  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7949  01396A  0E01               	movlw	1
  7950  01396C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7951  01396E  ECC1  F09F         	call	_Port_SetPin	;wreg free
  7952                           
  7953                           ;Motor.c: 88: }
  7954  013972  D01C               	goto	l1631
  7955  013974                     l1629:
  7956                           
  7957                           ;Motor.c: 89: else
  7958                           ;Motor.c: 90: {
  7959                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
  7960  013974  C0ED  FFD9         	movff	_lMotor,fsr2l
  7961  013978  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7962  01397C  04DE               	decf	postinc2,w,c
  7963  01397E  E104               	bnz	u12190
  7964  013980  0E80               	movlw	128
  7965  013982  18DE               	xorwf	postinc2,w,c
  7966  013984  B4D8               	btfsc	status,2,c
  7967  013986  D007               	goto	l1632
  7968  013988                     u12190:
  7969                           
  7970                           ;Motor.c: 92: lMotor->mDelta ++;
  7971  013988  C0ED  FFD9         	movff	_lMotor,fsr2l
  7972  01398C  C0EE  FFDA         	movff	_lMotor+1,fsr2h
  7973  013990  2ADE               	incf	postinc2,f,c
  7974  013992  0E00               	movlw	0
  7975  013994  22DD               	addwfc	postdec2,f,c
  7976  013996                     l1632:
  7977                           
  7978                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
  7979  013996  0E95               	movlw	low _PortE
  7980  013998  0100               	movlb	0	; () banked
  7981  01399A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7982  01399C  0E01               	movlw	high _PortE
  7983  01399E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7984  0139A0  0E00               	movlw	0
  7985  0139A2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7986  0139A4  0E00               	movlw	0
  7987  0139A6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7988  0139A8  ECC1  F09F         	call	_Port_SetPin	;wreg free
  7989  0139AC                     l1631:
  7990                           
  7991                           ;Motor.c: 95: }
  7992                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
  7993  0139AC  0E95               	movlw	low _PortE
  7994  0139AE  0100               	movlb	0	; () banked
  7995  0139B0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7996  0139B2  0E01               	movlw	high _PortE
  7997  0139B4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7998  0139B6  0E01               	movlw	1
  7999  0139B8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8000  0139BA  0E01               	movlw	1
  8001  0139BC  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8002  0139BE  ECC1  F09F         	call	_Port_SetPin	;wreg free
  8003                           
  8004                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
  8005  0139C2  0E95               	movlw	low _PortE
  8006  0139C4  0100               	movlb	0	; () banked
  8007  0139C6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  8008  0139C8  0E01               	movlw	high _PortE
  8009  0139CA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  8010  0139CC  0E01               	movlw	1
  8011  0139CE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  8012  0139D0  0E00               	movlw	0
  8013  0139D2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  8014  0139D4  ECC1  F09F         	call	_Port_SetPin	;wreg free
  8015                           
  8016                           ;Motor.c: 101: MXK_Release();
  8017  0139D8  EC4B  F0AF         	call	_MXK_Release	;wreg free
  8018                           
  8019                           ;Motor.c: 102: Timer0_Restart();
  8020  0139DC  EC31  F0B0         	call	_Timer0_Restart	;wreg free
  8021                           
  8022                           ;Motor.c: 103: return;
  8023  0139E0  0012               	return	
  8024  0139E2                     l1628:
  8025                           
  8026                           ;Motor.c: 104: }
  8027                           ;Motor.c: 105: MXK_Release();
  8028  0139E2  EC4B  F0AF         	call	_MXK_Release	;wreg free
  8029                           
  8030                           ;Motor.c: 106: Timer0_Stop();
  8031  0139E6  EC64  F0B0         	call	_Timer0_Stop	;wreg free
  8032                           
  8033                           ;Motor.c: 107: return;
  8034  0139EA  0012               	return	
  8035  0139EC                     l1627:
  8036                           
  8037                           ;Motor.c: 108: }
  8038                           ;Motor.c: 111: MXK_Queue(lStepFunction);
  8039  0139EC  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
  8040  0139F0  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
  8041  0139F4  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
  8042  0139F8  EC15  F0B0         	call	_MXK_Queue	;wreg free
  8043  0139FC  0012               	return		;funcret
  8044  0139FE                     __end_of_Motor_Step:
  8045                           	opt stack 0
  8046                           tosu	equ	0xFFF
  8047                           tosh	equ	0xFFE
  8048                           tosl	equ	0xFFD
  8049                           pclath	equ	0xFFA
  8050                           tblptru	equ	0xFF8
  8051                           tblptrh	equ	0xFF7
  8052                           tblptrl	equ	0xFF6
  8053                           tablat	equ	0xFF5
  8054                           postinc0	equ	0xFEE
  8055                           wreg	equ	0xFE8
  8056                           postdec1	equ	0xFE5
  8057                           fsr1h	equ	0xFE2
  8058                           fsr1l	equ	0xFE1
  8059                           indf2	equ	0xFDF
  8060                           postinc2	equ	0xFDE
  8061                           postdec2	equ	0xFDD
  8062                           plusw2	equ	0xFDB
  8063                           fsr2h	equ	0xFDA
  8064                           fsr2l	equ	0xFD9
  8065                           status	equ	0xFD8
  8066                           
  8067 ;; *************** function _Timer0_Stop *****************
  8068 ;; Defined at:
  8069 ;;		line 89 in file "Library/Timer0.c"
  8070 ;; Parameters:    Size  Location     Type
  8071 ;;		None
  8072 ;; Auto vars:     Size  Location     Type
  8073 ;;		None
  8074 ;; Return value:  Size  Location     Type
  8075 ;;                  1    wreg      void 
  8076 ;; Registers used:
  8077 ;;		None
  8078 ;; Tracked objects:
  8079 ;;		On entry : 0/0
  8080 ;;		On exit  : 0/0
  8081 ;;		Unchanged: 0/0
  8082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;Total ram usage:        0 bytes
  8088 ;; Hardware stack levels used:    1
  8089 ;; Hardware stack levels required when called:    7
  8090 ;; This function calls:
  8091 ;;		Nothing
  8092 ;; This function is called by:
  8093 ;;		_Motor_Step
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           	psect	text21
  8098  0160C8                     __ptext21:
  8099                           	opt stack 0
  8100  0160C8                     _Timer0_Stop:
  8101                           	opt stack 21
  8102                           
  8103                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
  8104                           
  8105                           ;incstack = 0
  8106  0160C8  9AF2               	bcf	intcon,5,c	;volatile
  8107                           
  8108                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
  8109  0160CA  94F2               	bcf	intcon,2,c	;volatile
  8110  0160CC  0012               	return		;funcret
  8111  0160CE                     __end_of_Timer0_Stop:
  8112                           	opt stack 0
  8113                           tosu	equ	0xFFF
  8114                           tosh	equ	0xFFE
  8115                           tosl	equ	0xFFD
  8116                           pclath	equ	0xFFA
  8117                           tblptru	equ	0xFF8
  8118                           tblptrh	equ	0xFF7
  8119                           tblptrl	equ	0xFF6
  8120                           tablat	equ	0xFF5
  8121                           intcon	equ	0xFF2
  8122                           postinc0	equ	0xFEE
  8123                           wreg	equ	0xFE8
  8124                           postdec1	equ	0xFE5
  8125                           fsr1h	equ	0xFE2
  8126                           fsr1l	equ	0xFE1
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           plusw2	equ	0xFDB
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           
  8135 ;; *************** function _Timer0_Restart *****************
  8136 ;; Defined at:
  8137 ;;		line 83 in file "Library/Timer0.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;		None
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;		None
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  1    wreg      void 
  8144 ;; Registers used:
  8145 ;;		None
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;Total ram usage:        0 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    7
  8158 ;; This function calls:
  8159 ;;		Nothing
  8160 ;; This function is called by:
  8161 ;;		_Motor_Step
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	text22
  8166  016062                     __ptext22:
  8167                           	opt stack 0
  8168  016062                     _Timer0_Restart:
  8169                           	opt stack 21
  8170                           
  8171                           ;Timer0.c: 85: TMR0 = COUNTER;
  8172                           
  8173                           ;incstack = 0
  8174  016062  C033  FFD6         	movff	_COUNTER,4054	;volatile
  8175  016066  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
  8176                           
  8177                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
  8178  01606A  8AF2               	bsf	intcon,5,c	;volatile
  8179  01606C  0012               	return		;funcret
  8180  01606E                     __end_of_Timer0_Restart:
  8181                           	opt stack 0
  8182                           tosu	equ	0xFFF
  8183                           tosh	equ	0xFFE
  8184                           tosl	equ	0xFFD
  8185                           pclath	equ	0xFFA
  8186                           tblptru	equ	0xFF8
  8187                           tblptrh	equ	0xFF7
  8188                           tblptrl	equ	0xFF6
  8189                           tablat	equ	0xFF5
  8190                           intcon	equ	0xFF2
  8191                           postinc0	equ	0xFEE
  8192                           wreg	equ	0xFE8
  8193                           postdec1	equ	0xFE5
  8194                           fsr1h	equ	0xFE2
  8195                           fsr1l	equ	0xFE1
  8196                           indf2	equ	0xFDF
  8197                           postinc2	equ	0xFDE
  8198                           postdec2	equ	0xFDD
  8199                           plusw2	equ	0xFDB
  8200                           fsr2h	equ	0xFDA
  8201                           fsr2l	equ	0xFD9
  8202                           status	equ	0xFD8
  8203                           
  8204 ;; *************** function _MXK_SwitchTo *****************
  8205 ;; Defined at:
  8206 ;;		line 105 in file "Library/MXK.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  pModule         1    wreg     enum E6927
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;  pModule         1    7[BANK0 ] enum E6927
  8211 ;;  CUR             1    6[BANK0 ] unsigned char 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      unsigned char 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2, status,0, cstack
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8224 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;Total ram usage:        2 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    8
  8228 ;; This function calls:
  8229 ;;		_delay_us
  8230 ;; This function is called by:
  8231 ;;		_Motor_Step
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text23
  8236  01593E                     __ptext23:
  8237                           	opt stack 0
  8238  01593E                     _MXK_SwitchTo:
  8239                           	opt stack 20
  8240                           
  8241                           ;incstack = 0
  8242                           ;MXK_SwitchTo@pModule stored from wreg
  8243  01593E  0100               	movlb	0	; () banked
  8244  015940  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
  8245                           
  8246                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
  8247  015942  5086               	movf	3974,w,c	;volatile
  8248  015944  0B0F               	andlw	15
  8249  015946  0100               	movlb	0	; () banked
  8250  015948  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
  8254  01594A  504D               	movf	_Bus_State,w,c
  8255  01594C  A4D8               	btfss	status,2,c
  8256  01594E  D002               	goto	l1730
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;MXK.c: 110: return 0;
  8260  015950  0E00               	movlw	0
  8261                           
  8262                           ; BSR set to: 0
  8263  015952  0012               	return	
  8264  015954                     l1730:
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;MXK.c: 112: Bus_State = eMXK_Busy;
  8268                           
  8269                           ; BSR set to: 0
  8270  015954  0E00               	movlw	0
  8271  015956  6E4D               	movwf	_Bus_State,c
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;MXK.c: 114: if (CUR != pModule)
  8275  015958  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8276  01595A  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
  8277  01595C  B4D8               	btfsc	status,2,c
  8278  01595E  D00A               	goto	l1732
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;MXK.c: 115: {
  8282                           ;MXK.c: 116: PORTG &= ~(0xF);
  8283  015960  0EF0               	movlw	240
  8284  015962  1686               	andwf	3974,f,c	;volatile
  8285                           
  8286                           ;MXK.c: 117: PORTG |= pModule;
  8287  015964  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
  8288  015966  1286               	iorwf	3974,f,c	;volatile
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;MXK.c: 120: delay_us(10);
  8292  015968  0E00               	movlw	0
  8293  01596A  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8294  01596C  0E0A               	movlw	10
  8295  01596E  6F60               	movwf	delay_us@us& (0+255),b
  8296  015970  EC7D  F0AB         	call	_delay_us	;wreg free
  8297  015974                     l1732:
  8298                           
  8299                           ;MXK.c: 121: }
  8300                           ;MXK.c: 122: return 1;
  8301  015974  0E01               	movlw	1
  8302  015976  0012               	return	
  8303  015978                     __end_of_MXK_SwitchTo:
  8304                           	opt stack 0
  8305                           tosu	equ	0xFFF
  8306                           tosh	equ	0xFFE
  8307                           tosl	equ	0xFFD
  8308                           pclath	equ	0xFFA
  8309                           tblptru	equ	0xFF8
  8310                           tblptrh	equ	0xFF7
  8311                           tblptrl	equ	0xFF6
  8312                           tablat	equ	0xFF5
  8313                           intcon	equ	0xFF2
  8314                           postinc0	equ	0xFEE
  8315                           wreg	equ	0xFE8
  8316                           postdec1	equ	0xFE5
  8317                           fsr1h	equ	0xFE2
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           postdec2	equ	0xFDD
  8322                           plusw2	equ	0xFDB
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _MXK_Release *****************
  8328 ;; Defined at:
  8329 ;;		line 130 in file "Library/MXK.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;		None
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;		None
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      unsigned char 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;Total ram usage:        0 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    7
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_Motor_Step
  8354 ;;		_main
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text24
  8359  015E96                     __ptext24:
  8360                           	opt stack 0
  8361  015E96                     _MXK_Release:
  8362                           	opt stack 23
  8363                           
  8364                           ;MXK.c: 132: Bus_State = eMXK_Idle;
  8365                           
  8366                           ;incstack = 0
  8367  015E96  0E01               	movlw	1
  8368  015E98  6E4D               	movwf	_Bus_State,c
  8369                           
  8370                           ;MXK.c: 134: if (lQueue != 0)
  8371  015E9A  0100               	movlb	0	; () banked
  8372  015E9C  51E6               	movf	_lQueue& (0+255),w,b	;volatile
  8373  015E9E  11E7               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  8374  015EA0  11E8               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  8375  015EA2  B4D8               	btfsc	status,2,c
  8376  015EA4  D002               	goto	l1735
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;MXK.c: 135: return 1;
  8380  015EA6  0E01               	movlw	1
  8381                           
  8382                           ; BSR set to: 0
  8383  015EA8  0012               	return	
  8384  015EAA                     l1735:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;MXK.c: 137: return 0;
  8388                           
  8389                           ; BSR set to: 0
  8390  015EAA  0E00               	movlw	0
  8391  015EAC  0012               	return	
  8392  015EAE                     __end_of_MXK_Release:
  8393                           	opt stack 0
  8394                           tosu	equ	0xFFF
  8395                           tosh	equ	0xFFE
  8396                           tosl	equ	0xFFD
  8397                           pclath	equ	0xFFA
  8398                           tblptru	equ	0xFF8
  8399                           tblptrh	equ	0xFF7
  8400                           tblptrl	equ	0xFF6
  8401                           tablat	equ	0xFF5
  8402                           intcon	equ	0xFF2
  8403                           postinc0	equ	0xFEE
  8404                           wreg	equ	0xFE8
  8405                           postdec1	equ	0xFE5
  8406                           fsr1h	equ	0xFE2
  8407                           fsr1l	equ	0xFE1
  8408                           indf2	equ	0xFDF
  8409                           postinc2	equ	0xFDE
  8410                           postdec2	equ	0xFDD
  8411                           plusw2	equ	0xFDB
  8412                           fsr2h	equ	0xFDA
  8413                           fsr2l	equ	0xFD9
  8414                           status	equ	0xFD8
  8415                           
  8416 ;; *************** function _MXK_Queue *****************
  8417 ;; Defined at:
  8418 ;;		line 144 in file "Library/MXK.c"
  8419 ;; Parameters:    Size  Location     Type
  8420 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
  8421 ;;		 -> Absolute function(1), Motor_Step(1), 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8433 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;Total ram usage:        3 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    7
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_Motor_Step
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text25
  8448  01602A                     __ptext25:
  8449                           	opt stack 0
  8450  01602A                     _MXK_Queue:
  8451                           	opt stack 21
  8452                           
  8453                           ;MXK.c: 146: lQueue = pCallback;
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;incstack = 0
  8457  01602A  C060  F0E6         	movff	MXK_Queue@pCallback,_lQueue	;volatile
  8458  01602E  C061  F0E7         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
  8459  016032  C062  F0E8         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
  8460  016036  0012               	return		;funcret
  8461  016038                     __end_of_MXK_Queue:
  8462                           	opt stack 0
  8463                           tosu	equ	0xFFF
  8464                           tosh	equ	0xFFE
  8465                           tosl	equ	0xFFD
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           intcon	equ	0xFF2
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           postdec1	equ	0xFE5
  8475                           fsr1h	equ	0xFE2
  8476                           fsr1l	equ	0xFE1
  8477                           indf2	equ	0xFDF
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           plusw2	equ	0xFDB
  8481                           fsr2h	equ	0xFDA
  8482                           fsr2l	equ	0xFD9
  8483                           status	equ	0xFD8
  8484                           
  8485 ;; *************** function _MXK_BlockSwitchTo *****************
  8486 ;; Defined at:
  8487 ;;		line 82 in file "Library/MXK.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  pModule         1    wreg     enum E6927
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  pModule         1    7[BANK0 ] enum E6927
  8492 ;;  CUR             1    6[BANK0 ] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  1    wreg      unsigned char 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;Total ram usage:        2 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    8
  8509 ;; This function calls:
  8510 ;;		_delay_us
  8511 ;; This function is called by:
  8512 ;;		_main
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text26
  8517  0159EC                     __ptext26:
  8518                           	opt stack 0
  8519  0159EC                     _MXK_BlockSwitchTo:
  8520                           	opt stack 22
  8521                           
  8522                           ;incstack = 0
  8523                           ;MXK_BlockSwitchTo@pModule stored from wreg
  8524  0159EC  0100               	movlb	0	; () banked
  8525  0159EE  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
  8526                           
  8527                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
  8528  0159F0  5086               	movf	3974,w,c	;volatile
  8529  0159F2  0B0F               	andlw	15
  8530  0159F4  0100               	movlb	0	; () banked
  8531  0159F6  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
  8532  0159F8                     
  8533                           ; BSR set to: 0
  8534                           
  8535                           ; BSR set to: 0
  8536  0159F8  504D               	movf	_Bus_State,w,c
  8537  0159FA  B4D8               	btfsc	status,2,c
  8538  0159FC  D7FD               	goto	l1724
  8539                           
  8540                           ;MXK.c: 88: Bus_State = eMXK_Busy;
  8541  0159FE  0E00               	movlw	0
  8542  015A00  6E4D               	movwf	_Bus_State,c
  8543                           
  8544                           ;MXK.c: 90: if (CUR != pModule)
  8545  015A02  0100               	movlb	0	; () banked
  8546  015A04  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8547  015A06  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
  8548  015A08  B4D8               	btfsc	status,2,c
  8549  015A0A  D00A               	goto	l1726
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;MXK.c: 91: {
  8553                           ;MXK.c: 92: PORTG &= ~(0xF);
  8554  015A0C  0EF0               	movlw	240
  8555  015A0E  1686               	andwf	3974,f,c	;volatile
  8556                           
  8557                           ;MXK.c: 93: PORTG |= pModule;
  8558  015A10  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
  8559  015A12  1286               	iorwf	3974,f,c	;volatile
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;MXK.c: 96: delay_us(10);
  8563  015A14  0E00               	movlw	0
  8564  015A16  6F61               	movwf	(delay_us@us+1)& (0+255),b
  8565  015A18  0E0A               	movlw	10
  8566  015A1A  6F60               	movwf	delay_us@us& (0+255),b
  8567  015A1C  EC7D  F0AB         	call	_delay_us	;wreg free
  8568  015A20                     l1726:
  8569                           
  8570                           ;MXK.c: 97: }
  8571                           ;MXK.c: 98: return 1;
  8572  015A20  0E01               	movlw	1
  8573  015A22  0012               	return	
  8574  015A24                     __end_of_MXK_BlockSwitchTo:
  8575                           	opt stack 0
  8576                           tosu	equ	0xFFF
  8577                           tosh	equ	0xFFE
  8578                           tosl	equ	0xFFD
  8579                           pclath	equ	0xFFA
  8580                           tblptru	equ	0xFF8
  8581                           tblptrh	equ	0xFF7
  8582                           tblptrl	equ	0xFF6
  8583                           tablat	equ	0xFF5
  8584                           intcon	equ	0xFF2
  8585                           postinc0	equ	0xFEE
  8586                           wreg	equ	0xFE8
  8587                           postdec1	equ	0xFE5
  8588                           fsr1h	equ	0xFE2
  8589                           fsr1l	equ	0xFE1
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           postdec2	equ	0xFDD
  8593                           plusw2	equ	0xFDB
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function _delay_us *****************
  8599 ;; Defined at:
  8600 ;;		line 255 in file "Library/Types.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  us              2    0[BANK0 ] unsigned short 
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  u               4    2[BANK0 ] unsigned long 
  8605 ;; Return value:  Size  Location     Type
  8606 ;;                  1    wreg      void 
  8607 ;; Registers used:
  8608 ;;		wreg, status,2, status,0
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8614 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8615 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;Total ram usage:        6 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    7
  8621 ;; This function calls:
  8622 ;;		Nothing
  8623 ;; This function is called by:
  8624 ;;		_MXK_BlockSwitchTo
  8625 ;;		_MXK_SwitchTo
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           	psect	text27
  8630  0156FA                     __ptext27:
  8631                           	opt stack 0
  8632  0156FA                     _delay_us:
  8633                           	opt stack 20
  8634                           
  8635                           ;Types.c: 256: unsigned long u;
  8636                           ;Types.c: 257: while (us--) {
  8637                           
  8638                           ;incstack = 0
  8639  0156FA  D018               	goto	u11310
  8640  0156FC                     l13984:
  8641                           
  8642                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
  8643  0156FC  0E00               	movlw	0
  8644  0156FE  0100               	movlb	0	; () banked
  8645  015700  6F62               	movwf	delay_us@u& (0+255),b
  8646  015702  0E00               	movlw	0
  8647  015704  6F63               	movwf	(delay_us@u+1)& (0+255),b
  8648  015706  0E00               	movlw	0
  8649  015708  6F64               	movwf	(delay_us@u+2)& (0+255),b
  8650  01570A  0E00               	movlw	0
  8651  01570C  6F65               	movwf	(delay_us@u+3)& (0+255),b
  8652  01570E                     l13986:
  8653                           
  8654                           ; BSR set to: 0
  8655  01570E  5162               	movf	delay_us@u& (0+255),w,b
  8656  015710  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
  8657  015712  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
  8658  015714  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
  8659  015716  A4D8               	btfss	status,2,c
  8660  015718  D009               	goto	u11310
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665  01571A  F000               	nop		; ;# 
  8666  01571C  0E01               	movlw	1
  8667  01571E  0100               	movlb	0	; () banked
  8668  015720  2762               	addwf	delay_us@u& (0+255),f,b
  8669  015722  0E00               	movlw	0
  8670  015724  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
  8671  015726  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
  8672  015728  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
  8673  01572A  D7F1               	goto	l13986
  8674  01572C                     u11310:
  8675                           
  8676                           ; BSR set to: 0
  8677                           
  8678                           ; BSR set to: 0
  8679  01572C  0100               	movlb	0	; () banked
  8680  01572E  0760               	decf	delay_us@us& (0+255),f,b
  8681  015730  A0D8               	btfss	status,0,c
  8682  015732  0761               	decf	(delay_us@us+1)& (0+255),f,b
  8683  015734  2960               	incf	delay_us@us& (0+255),w,b
  8684  015736  E1E2               	bnz	l13984
  8685  015738  2961               	incf	(delay_us@us+1)& (0+255),w,b
  8686  01573A  B4D8               	btfsc	status,2,c
  8687  01573C  0012               	return	
  8688  01573E  D7DE               	goto	l832
  8689  015740                     __end_of_delay_us:
  8690                           	opt stack 0
  8691                           tosu	equ	0xFFF
  8692                           tosh	equ	0xFFE
  8693                           tosl	equ	0xFFD
  8694                           pclath	equ	0xFFA
  8695                           tblptru	equ	0xFF8
  8696                           tblptrh	equ	0xFF7
  8697                           tblptrl	equ	0xFF6
  8698                           tablat	equ	0xFF5
  8699                           intcon	equ	0xFF2
  8700                           postinc0	equ	0xFEE
  8701                           wreg	equ	0xFE8
  8702                           postdec1	equ	0xFE5
  8703                           fsr1h	equ	0xFE2
  8704                           fsr1l	equ	0xFE1
  8705                           indf2	equ	0xFDF
  8706                           postinc2	equ	0xFDE
  8707                           postdec2	equ	0xFDD
  8708                           plusw2	equ	0xFDB
  8709                           fsr2h	equ	0xFDA
  8710                           fsr2l	equ	0xFD9
  8711                           status	equ	0xFD8
  8712                           
  8713 ;; *************** function _LEDToggle *****************
  8714 ;; Defined at:
  8715 ;;		line 256 in file "main.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;		None
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  1    wreg      void 
  8722 ;; Registers used:
  8723 ;;		wreg, status,2, status,0, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;Total ram usage:        0 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    9
  8736 ;; This function calls:
  8737 ;;		_LEDOff
  8738 ;;		_LEDOn
  8739 ;; This function is called by:
  8740 ;;		_main
  8741 ;; This function uses a non-reentrant model
  8742 ;;
  8743                           
  8744                           	psect	text28
  8745  015886                     __ptext28:
  8746                           	opt stack 0
  8747  015886                     _LEDToggle:
  8748                           	opt stack 21
  8749                           
  8750                           ;main.c: 258: if (INTCONbits.TMR0IF == 1) {
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;incstack = 0
  8754  015886  A4F2               	btfss	intcon,2,c	;volatile
  8755  015888  0012               	return	
  8756                           
  8757                           ;main.c: 259: INTCONbits.TMR0IF = 0;
  8758  01588A  94F2               	bcf	intcon,2,c	;volatile
  8759                           
  8760                           ;main.c: 260: timercount++;
  8761  01588C  0101               	movlb	1	; () banked
  8762  01588E  4B1E               	infsnz	_timercount& (0+255),f,b
  8763  015890  2B1F               	incf	(_timercount+1)& (0+255),f,b
  8764                           
  8765                           ; BSR set to: 1
  8766                           ;main.c: 261: if (timercount == countOn) {
  8767  015892  51F7               	movf	_countOn& (0+255),w,b
  8768  015894  191E               	xorwf	_timercount& (0+255),w,b
  8769  015896  E105               	bnz	l15486
  8770  015898  51F8               	movf	(_countOn+1)& (0+255),w,b
  8771  01589A  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8772  01589C  B4D8               	btfsc	status,2,c
  8773                           
  8774                           ; BSR set to: 1
  8775                           ;main.c: 262: LEDOn();
  8776  01589E  EC17  F0AF         	call	_LEDOn	;wreg free
  8777  0158A2                     l15486:
  8778                           
  8779                           ;main.c: 263: }
  8780                           ;main.c: 264: if (timercount == countOff) {
  8781  0158A2  0101               	movlb	1	; () banked
  8782  0158A4  51F5               	movf	_countOff& (0+255),w,b
  8783  0158A6  191E               	xorwf	_timercount& (0+255),w,b
  8784  0158A8  E10C               	bnz	l2185
  8785  0158AA  51F6               	movf	(_countOff+1)& (0+255),w,b
  8786  0158AC  191F               	xorwf	(_timercount+1)& (0+255),w,b
  8787  0158AE  A4D8               	btfss	status,2,c
  8788  0158B0  0012               	return	
  8789                           
  8790                           ; BSR set to: 1
  8791                           ;main.c: 265: LEDOff();
  8792  0158B2  EC24  F0AF         	call	_LEDOff	;wreg free
  8793                           
  8794                           ;main.c: 266: timercount = 0;
  8795  0158B6  0E00               	movlw	0
  8796  0158B8  0101               	movlb	1	; () banked
  8797  0158BA  6F1F               	movwf	(_timercount+1)& (0+255),b
  8798  0158BC  0E00               	movlw	0
  8799  0158BE  6F1E               	movwf	_timercount& (0+255),b
  8800                           
  8801                           ; BSR set to: 1
  8802  0158C0  0012               	return	
  8803  0158C2                     l2185:
  8804  0158C2  0012               	return		;funcret
  8805  0158C4                     __end_of_LEDToggle:
  8806                           	opt stack 0
  8807                           tosu	equ	0xFFF
  8808                           tosh	equ	0xFFE
  8809                           tosl	equ	0xFFD
  8810                           pclath	equ	0xFFA
  8811                           tblptru	equ	0xFF8
  8812                           tblptrh	equ	0xFF7
  8813                           tblptrl	equ	0xFF6
  8814                           tablat	equ	0xFF5
  8815                           intcon	equ	0xFF2
  8816                           postinc0	equ	0xFEE
  8817                           wreg	equ	0xFE8
  8818                           postdec1	equ	0xFE5
  8819                           fsr1h	equ	0xFE2
  8820                           fsr1l	equ	0xFE1
  8821                           indf2	equ	0xFDF
  8822                           postinc2	equ	0xFDE
  8823                           postdec2	equ	0xFDD
  8824                           plusw2	equ	0xFDB
  8825                           fsr2h	equ	0xFDA
  8826                           fsr2l	equ	0xFD9
  8827                           status	equ	0xFD8
  8828                           
  8829 ;; *************** function _LEDOn *****************
  8830 ;; Defined at:
  8831 ;;		line 242 in file "main.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;		None
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;		None
  8836 ;; Return value:  Size  Location     Type
  8837 ;;                  1    wreg      void 
  8838 ;; Registers used:
  8839 ;;		wreg, cstack
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 0/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;Total ram usage:        0 bytes
  8850 ;; Hardware stack levels used:    1
  8851 ;; Hardware stack levels required when called:    8
  8852 ;; This function calls:
  8853 ;;		_eusartSend
  8854 ;; This function is called by:
  8855 ;;		_LEDToggle
  8856 ;; This function uses a non-reentrant model
  8857 ;;
  8858                           
  8859                           	psect	text29
  8860  015E2E                     __ptext29:
  8861                           	opt stack 0
  8862  015E2E                     _LEDOn:
  8863                           	opt stack 21
  8864                           
  8865                           ;main.c: 243: eusartSend(139);
  8866                           
  8867                           ;incstack = 0
  8868  015E2E  0E8B               	movlw	139
  8869  015E30  EC23  F0B0         	call	_eusartSend
  8870                           
  8871                           ;main.c: 244: eusartSend(10);
  8872  015E34  0E0A               	movlw	10
  8873  015E36  EC23  F0B0         	call	_eusartSend
  8874                           
  8875                           ;main.c: 245: eusartSend(255);
  8876  015E3A  0EFF               	movlw	255
  8877  015E3C  EC23  F0B0         	call	_eusartSend
  8878                           
  8879                           ;main.c: 246: eusartSend(255);
  8880  015E40  0EFF               	movlw	255
  8881  015E42  EC23  F0B0         	call	_eusartSend
  8882  015E46  0012               	return		;funcret
  8883  015E48                     __end_of_LEDOn:
  8884                           	opt stack 0
  8885                           tosu	equ	0xFFF
  8886                           tosh	equ	0xFFE
  8887                           tosl	equ	0xFFD
  8888                           pclath	equ	0xFFA
  8889                           tblptru	equ	0xFF8
  8890                           tblptrh	equ	0xFF7
  8891                           tblptrl	equ	0xFF6
  8892                           tablat	equ	0xFF5
  8893                           intcon	equ	0xFF2
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           postdec1	equ	0xFE5
  8897                           fsr1h	equ	0xFE2
  8898                           fsr1l	equ	0xFE1
  8899                           indf2	equ	0xFDF
  8900                           postinc2	equ	0xFDE
  8901                           postdec2	equ	0xFDD
  8902                           plusw2	equ	0xFDB
  8903                           fsr2h	equ	0xFDA
  8904                           fsr2l	equ	0xFD9
  8905                           status	equ	0xFD8
  8906                           
  8907 ;; *************** function _LEDOff *****************
  8908 ;; Defined at:
  8909 ;;		line 249 in file "main.c"
  8910 ;; Parameters:    Size  Location     Type
  8911 ;;		None
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;		None
  8914 ;; Return value:  Size  Location     Type
  8915 ;;                  1    wreg      void 
  8916 ;; Registers used:
  8917 ;;		wreg, cstack
  8918 ;; Tracked objects:
  8919 ;;		On entry : 0/0
  8920 ;;		On exit  : 0/0
  8921 ;;		Unchanged: 0/0
  8922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;Total ram usage:        0 bytes
  8928 ;; Hardware stack levels used:    1
  8929 ;; Hardware stack levels required when called:    8
  8930 ;; This function calls:
  8931 ;;		_eusartSend
  8932 ;; This function is called by:
  8933 ;;		_LEDToggle
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           	psect	text30
  8938  015E48                     __ptext30:
  8939                           	opt stack 0
  8940  015E48                     _LEDOff:
  8941                           	opt stack 21
  8942                           
  8943                           ;main.c: 250: eusartSend(139);
  8944                           
  8945                           ;incstack = 0
  8946  015E48  0E8B               	movlw	139
  8947  015E4A  EC23  F0B0         	call	_eusartSend
  8948                           
  8949                           ;main.c: 251: eusartSend(10);
  8950  015E4E  0E0A               	movlw	10
  8951  015E50  EC23  F0B0         	call	_eusartSend
  8952                           
  8953                           ;main.c: 252: eusartSend(0);
  8954  015E54  0E00               	movlw	0
  8955  015E56  EC23  F0B0         	call	_eusartSend
  8956                           
  8957                           ;main.c: 253: eusartSend(0);
  8958  015E5A  0E00               	movlw	0
  8959  015E5C  EC23  F0B0         	call	_eusartSend
  8960  015E60  0012               	return		;funcret
  8961  015E62                     __end_of_LEDOff:
  8962                           	opt stack 0
  8963                           tosu	equ	0xFFF
  8964                           tosh	equ	0xFFE
  8965                           tosl	equ	0xFFD
  8966                           pclath	equ	0xFFA
  8967                           tblptru	equ	0xFF8
  8968                           tblptrh	equ	0xFF7
  8969                           tblptrl	equ	0xFF6
  8970                           tablat	equ	0xFF5
  8971                           intcon	equ	0xFF2
  8972                           postinc0	equ	0xFEE
  8973                           wreg	equ	0xFE8
  8974                           postdec1	equ	0xFE5
  8975                           fsr1h	equ	0xFE2
  8976                           fsr1l	equ	0xFE1
  8977                           indf2	equ	0xFDF
  8978                           postinc2	equ	0xFDE
  8979                           postdec2	equ	0xFDD
  8980                           plusw2	equ	0xFDB
  8981                           fsr2h	equ	0xFDA
  8982                           fsr2l	equ	0xFD9
  8983                           status	equ	0xFD8
  8984                           
  8985 ;; *************** function _LCD_Init *****************
  8986 ;; Defined at:
  8987 ;;		line 172 in file "Library/LCD.c"
  8988 ;; Parameters:    Size  Location     Type
  8989 ;;		None
  8990 ;; Auto vars:     Size  Location     Type
  8991 ;;  i               2   55[BANK0 ] unsigned short 
  8992 ;; Return value:  Size  Location     Type
  8993 ;;                  1    wreg      void 
  8994 ;; Registers used:
  8995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8996 ;; Tracked objects:
  8997 ;;		On entry : 0/0
  8998 ;;		On exit  : 0/0
  8999 ;;		Unchanged: 0/0
  9000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9004 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9005 ;;Total ram usage:        4 bytes
  9006 ;; Hardware stack levels used:    1
  9007 ;; Hardware stack levels required when called:   15
  9008 ;; This function calls:
  9009 ;;		_Configure_GPIOs
  9010 ;;		_LCD_Fill
  9011 ;;		_LCD_Write
  9012 ;;		_Set_Rotation
  9013 ;;		_delay_ms
  9014 ;; This function is called by:
  9015 ;;		_main
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           	psect	text31
  9020  0130AA                     __ptext31:
  9021                           	opt stack 0
  9022  0130AA                     _LCD_Init:
  9023                           	opt stack 15
  9024                           
  9025                           ;LCD.c: 174: UINT16 i;
  9026                           ;LCD.c: 175: Configure_GPIOs();
  9027                           
  9028                           ;incstack = 0
  9029  0130AA  EC85  F0A8         	call	_Configure_GPIOs	;wreg free
  9030                           
  9031                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
  9032  0130AE  0E00               	movlw	0
  9033  0130B0  0100               	movlb	0	; () banked
  9034  0130B2  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
  9035  0130B4  0E00               	movlw	0
  9036  0130B6  6F97               	movwf	LCD_Init@i& (0+255),b
  9037                           
  9038                           ; BSR set to: 0
  9039  0130B8  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9040  0130BA  E17D               	bnz	u12330
  9041  0130BC  0E59               	movlw	89
  9042  0130BE  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9043  0130C0  B0D8               	btfsc	status,0,c
  9044  0130C2  D079               	goto	u12330
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;LCD.c: 178: {
  9048                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
  9049                           
  9050                           ; BSR set to: 0
  9051                           
  9052                           ; BSR set to: 0
  9053  0130C4  90D8               	bcf	status,0,c
  9054  0130C6  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9055  0130C8  6EF6               	movwf	tblptrl,c
  9056  0130CA  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9057  0130CC  6EF7               	movwf	tblptrh,c
  9058  0130CE  0E57               	movlw	low _InitList
  9059  0130D0  26F6               	addwf	tblptrl,f,c
  9060  0130D2  0EFB               	movlw	high _InitList
  9061  0130D4  22F7               	addwfc	tblptrh,f,c
  9062  0130D6                     	if	1	;There are 3 active tblptr bytes
  9063  0130D6  6AF8               	clrf	tblptru,c
  9064  0130D8  0E00               	movlw	low (__mediumconst shr (0+16))
  9065  0130DA  22F8               	addwfc	tblptru,f,c
  9066  0130DC                     	endif
  9067  0130DC  0009               	tblrd		*+
  9068  0130DE  0E80               	movlw	128
  9069  0130E0  18F5               	xorwf	tablat,w,c
  9070  0130E2  0009               	tblrd		*+
  9071  0130E4  10F5               	iorwf	tablat,w,c
  9072  0130E6  A4D8               	btfss	status,2,c
  9073  0130E8  D01D               	goto	l87
  9074                           
  9075                           ; BSR set to: 0
  9076  0130EA  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9077  0130EC  E11B               	bnz	l15094
  9078  0130EE  0E58               	movlw	88
  9079  0130F0  5D97               	subwf	LCD_Init@i& (0+255),w,b
  9080  0130F2  B0D8               	btfsc	status,0,c
  9081  0130F4  D017               	goto	l87
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;LCD.c: 180: delay_ms(InitList[++i]);
  9085  0130F6  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9086  0130F8  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9087  0130FA  90D8               	bcf	status,0,c
  9088  0130FC  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9089  0130FE  6EF6               	movwf	tblptrl,c
  9090  013100  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9091  013102  6EF7               	movwf	tblptrh,c
  9092  013104  0E57               	movlw	low _InitList
  9093  013106  26F6               	addwf	tblptrl,f,c
  9094  013108  0EFB               	movlw	high _InitList
  9095  01310A  22F7               	addwfc	tblptrh,f,c
  9096  01310C                     	if	1	;There are 3 active tblptr bytes
  9097  01310C  6AF8               	clrf	tblptru,c
  9098  01310E  0E00               	movlw	low (__mediumconst shr (0+16))
  9099  013110  22F8               	addwfc	tblptru,f,c
  9100  013112                     	endif
  9101  013112  0009               	tblrd		*+
  9102  013114  CFF5 F060          	movff	tablat,delay_ms@ms
  9103  013118  000A               	tblrd		*-
  9104  01311A  CFF5 F061          	movff	tablat,delay_ms@ms+1
  9105  01311E  ECB4  F0A8         	call	_delay_ms	;wreg free
  9106  013122  D043               	goto	l90
  9107  013124                     l87:
  9108  013124                     l15094:
  9109                           
  9110                           ;LCD.c: 181: else
  9111                           ;LCD.c: 182: {
  9112                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
  9113  013124  90D8               	bcf	status,0,c
  9114  013126  0100               	movlb	0	; () banked
  9115  013128  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9116  01312A  6EF6               	movwf	tblptrl,c
  9117  01312C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9118  01312E  6EF7               	movwf	tblptrh,c
  9119  013130  0E57               	movlw	low _InitList
  9120  013132  26F6               	addwf	tblptrl,f,c
  9121  013134  0EFB               	movlw	high _InitList
  9122  013136  22F7               	addwfc	tblptrh,f,c
  9123  013138                     	if	1	;There are 3 active tblptr bytes
  9124  013138  6AF8               	clrf	tblptru,c
  9125  01313A  0E00               	movlw	low (__mediumconst shr (0+16))
  9126  01313C  22F8               	addwfc	tblptru,f,c
  9127  01313E                     	endif
  9128  01313E  0009               	tblrd		*+
  9129  013140  0E00               	movlw	0
  9130  013142  5EF5               	subwf	tablat,f,c
  9131  013144  0009               	tblrd		*+
  9132  013146  0E01               	movlw	1
  9133  013148  5AF5               	subwfb	tablat,f,c
  9134  01314A  A0D8               	btfss	status,0,c
  9135  01314C  D01B               	goto	l89
  9136                           
  9137                           ; BSR set to: 0
  9138  01314E  0E00               	movlw	0
  9139  013150  6F63               	movwf	LCD_Write@mode& (0+255),b
  9140  013152  90D8               	bcf	status,0,c
  9141  013154  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9142  013156  6EF6               	movwf	tblptrl,c
  9143  013158  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9144  01315A  6EF7               	movwf	tblptrh,c
  9145  01315C  0E57               	movlw	low _InitList
  9146  01315E  26F6               	addwf	tblptrl,f,c
  9147  013160  0EFB               	movlw	high _InitList
  9148  013162  22F7               	addwfc	tblptrh,f,c
  9149  013164                     	if	1	;There are 3 active tblptr bytes
  9150  013164  6AF8               	clrf	tblptru,c
  9151  013166  0E00               	movlw	low (__mediumconst shr (0+16))
  9152  013168  22F8               	addwfc	tblptru,f,c
  9153  01316A                     	endif
  9154  01316A  0009               	tblrd		*+
  9155  01316C  CFF5 F095          	movff	tablat,??_LCD_Init
  9156  013170  0009               	tblrd		*+
  9157  013172  CFF5 F096          	movff	tablat,??_LCD_Init+1
  9158  013176  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
  9159  01317A  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
  9160  01317C  5195               	movf	??_LCD_Init& (0+255),w,b
  9161  01317E  ECDC  F0AE         	call	_LCD_Write
  9162  013182  D013               	goto	l90
  9163  013184                     l89:
  9164                           
  9165                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
  9166  013184  0E01               	movlw	1
  9167  013186  0100               	movlb	0	; () banked
  9168  013188  6F63               	movwf	LCD_Write@mode& (0+255),b
  9169  01318A  90D8               	bcf	status,0,c
  9170  01318C  3597               	rlcf	LCD_Init@i& (0+255),w,b
  9171  01318E  6EF6               	movwf	tblptrl,c
  9172  013190  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
  9173  013192  6EF7               	movwf	tblptrh,c
  9174  013194  0E57               	movlw	low _InitList
  9175  013196  26F6               	addwf	tblptrl,f,c
  9176  013198  0EFB               	movlw	high _InitList
  9177  01319A  22F7               	addwfc	tblptrh,f,c
  9178  01319C                     	if	1	;There are 3 active tblptr bytes
  9179  01319C  6AF8               	clrf	tblptru,c
  9180  01319E  0E00               	movlw	low (__mediumconst shr (0+16))
  9181  0131A0  22F8               	addwfc	tblptru,f,c
  9182  0131A2                     	endif
  9183  0131A2  0008               	tblrd		*
  9184  0131A4  50F5               	movf	tablat,w,c
  9185  0131A6  ECDC  F0AE         	call	_LCD_Write
  9186  0131AA                     l90:
  9187  0131AA  0100               	movlb	0	; () banked
  9188  0131AC  4B97               	infsnz	LCD_Init@i& (0+255),f,b
  9189  0131AE  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
  9190                           
  9191                           ; BSR set to: 0
  9192  0131B0  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
  9193  0131B2  E101               	bnz	l15104
  9194  0131B4  D783               	goto	L5
  9195  0131B6                     u12330:
  9196  0131B6                     l15104:
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;LCD.c: 185: }
  9200                           ;LCD.c: 186: }
  9201                           ;LCD.c: 187: delay_ms(100);
  9202  0131B6  0E00               	movlw	0
  9203  0131B8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9204  0131BA  0E64               	movlw	100
  9205  0131BC  6F60               	movwf	delay_ms@ms& (0+255),b
  9206  0131BE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9207                           
  9208                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
  9209  0131C2  0E00               	movlw	0
  9210  0131C4  0100               	movlb	0	; () banked
  9211  0131C6  6F63               	movwf	LCD_Write@mode& (0+255),b
  9212  0131C8  0E29               	movlw	41
  9213  0131CA  ECDC  F0AE         	call	_LCD_Write
  9214                           
  9215                           ;LCD.c: 189: Set_Rotation(1);
  9216  0131CE  0E01               	movlw	1
  9217  0131D0  ECA4  F0A2         	call	_Set_Rotation
  9218                           
  9219                           ;LCD.c: 191: delay_ms(100);
  9220  0131D4  0E00               	movlw	0
  9221  0131D6  0100               	movlb	0	; () banked
  9222  0131D8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9223  0131DA  0E64               	movlw	100
  9224  0131DC  6F60               	movwf	delay_ms@ms& (0+255),b
  9225  0131DE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9226                           
  9227                           ;LCD.c: 192: LCD_Fill(0x0000);
  9228  0131E2  0E00               	movlw	0
  9229  0131E4  0100               	movlb	0	; () banked
  9230  0131E6  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
  9231  0131E8  0E00               	movlw	0
  9232  0131EA  6F69               	movwf	LCD_Fill@pColour& (0+255),b
  9233  0131EC  EC35  F0AB         	call	_LCD_Fill	;wreg free
  9234  0131F0  0012               	return		;funcret
  9235  0131F2                     __end_of_LCD_Init:
  9236                           	opt stack 0
  9237                           tosu	equ	0xFFF
  9238                           tosh	equ	0xFFE
  9239                           tosl	equ	0xFFD
  9240                           pclath	equ	0xFFA
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           intcon	equ	0xFF2
  9246                           postinc0	equ	0xFEE
  9247                           wreg	equ	0xFE8
  9248                           postdec1	equ	0xFE5
  9249                           fsr1h	equ	0xFE2
  9250                           fsr1l	equ	0xFE1
  9251                           indf2	equ	0xFDF
  9252                           postinc2	equ	0xFDE
  9253                           postdec2	equ	0xFDD
  9254                           plusw2	equ	0xFDB
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function _Set_Rotation *****************
  9260 ;; Defined at:
  9261 ;;		line 248 in file "Library/LCD.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;  m               1    wreg     unsigned char 
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  m               1    5[BANK0 ] unsigned char 
  9266 ;;  rotation        1    6[BANK0 ] unsigned char 
  9267 ;; Return value:  Size  Location     Type
  9268 ;;                  1    wreg      void 
  9269 ;; Registers used:
  9270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;Total ram usage:        2 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    9
  9283 ;; This function calls:
  9284 ;;		_LCD_Write
  9285 ;; This function is called by:
  9286 ;;		_LCD_Init
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text32
  9291  014548                     __ptext32:
  9292                           	opt stack 0
  9293  014548                     _Set_Rotation:
  9294                           	opt stack 20
  9295                           
  9296                           ;incstack = 0
  9297                           ;Set_Rotation@m stored from wreg
  9298  014548  0100               	movlb	0	; () banked
  9299  01454A  6F65               	movwf	Set_Rotation@m& (0+255),b
  9300                           
  9301                           ;LCD.c: 250: UINT8 rotation = 0x00;
  9302  01454C  0E00               	movlw	0
  9303  01454E  0100               	movlb	0	; () banked
  9304  014550  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
  9308  014552  0E00               	movlw	0
  9309  014554  6F63               	movwf	LCD_Write@mode& (0+255),b
  9310  014556  0E36               	movlw	54
  9311  014558  ECDC  F0AE         	call	_LCD_Write
  9312                           
  9313                           ;LCD.c: 253: rotation = (m % 4);
  9314  01455C  0100               	movlb	0	; () banked
  9315  01455E  5165               	movf	Set_Rotation@m& (0+255),w,b
  9316  014560  0B03               	andlw	3
  9317  014562  6F66               	movwf	Set_Rotation@rotation& (0+255),b
  9318                           
  9319                           ;LCD.c: 255: switch(rotation)
  9320  014564  D02B               	goto	l117
  9321  014566                     
  9322                           ; BSR set to: 0
  9323                           ;LCD.c: 258: {
  9324                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
  9325                           
  9326                           ; BSR set to: 0
  9327  014566  0E01               	movlw	1
  9328  014568  6F63               	movwf	LCD_Write@mode& (0+255),b
  9329  01456A  0EC8               	movlw	200
  9330  01456C  ECDC  F0AE         	call	_LCD_Write
  9331                           
  9332                           ;LCD.c: 260: w = 128;
  9333  014570  0E80               	movlw	128
  9334  014572  6E50               	movwf	_w,c
  9335                           
  9336                           ;LCD.c: 261: l = 128;
  9337  014574  0E80               	movlw	128
  9338  014576  6E4F               	movwf	_l,c
  9339                           
  9340                           ;LCD.c: 262: break;
  9341  014578  0012               	return	
  9342  01457A                     
  9343                           ;LCD.c: 265: {
  9344                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
  9345  01457A  0E01               	movlw	1
  9346  01457C  0100               	movlb	0	; () banked
  9347  01457E  6F63               	movwf	LCD_Write@mode& (0+255),b
  9348  014580  0EA8               	movlw	168
  9349  014582  ECDC  F0AE         	call	_LCD_Write
  9350                           
  9351                           ;LCD.c: 267: w = 128;
  9352  014586  0E80               	movlw	128
  9353  014588  6E50               	movwf	_w,c
  9354                           
  9355                           ;LCD.c: 268: l = 128;
  9356  01458A  0E80               	movlw	128
  9357  01458C  6E4F               	movwf	_l,c
  9358                           
  9359                           ;LCD.c: 269: break;
  9360  01458E  0012               	return	
  9361  014590                     
  9362                           ;LCD.c: 272: {
  9363                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
  9364  014590  0E01               	movlw	1
  9365  014592  0100               	movlb	0	; () banked
  9366  014594  6F63               	movwf	LCD_Write@mode& (0+255),b
  9367  014596  0E08               	movlw	8
  9368  014598  ECDC  F0AE         	call	_LCD_Write
  9369                           
  9370                           ;LCD.c: 274: w = 128;
  9371  01459C  0E80               	movlw	128
  9372  01459E  6E50               	movwf	_w,c
  9373                           
  9374                           ;LCD.c: 275: l = 128;
  9375  0145A0  0E80               	movlw	128
  9376  0145A2  6E4F               	movwf	_l,c
  9377                           
  9378                           ;LCD.c: 276: break;
  9379  0145A4  0012               	return	
  9380  0145A6                     
  9381                           ;LCD.c: 279: {
  9382                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
  9383  0145A6  0E01               	movlw	1
  9384  0145A8  0100               	movlb	0	; () banked
  9385  0145AA  6F63               	movwf	LCD_Write@mode& (0+255),b
  9386  0145AC  0E68               	movlw	104
  9387  0145AE  ECDC  F0AE         	call	_LCD_Write
  9388                           
  9389                           ;LCD.c: 281: w = 128;
  9390  0145B2  0E80               	movlw	128
  9391  0145B4  6E50               	movwf	_w,c
  9392                           
  9393                           ;LCD.c: 282: l = 128;
  9394  0145B6  0E80               	movlw	128
  9395  0145B8  6E4F               	movwf	_l,c
  9396                           
  9397                           ;LCD.c: 284: }
  9398                           ;LCD.c: 285: }
  9399                           
  9400                           ;LCD.c: 283: break;
  9401  0145BA  0012               	return	
  9402  0145BC                     l117:
  9403  0145BC  0100               	movlb	0	; () banked
  9404  0145BE  5166               	movf	Set_Rotation@rotation& (0+255),w,b
  9405                           
  9406                           ; Switch size 1, requested type "space"
  9407                           ; Number of cases is 4, Range of values is 0 to 3
  9408                           ; switch strategies available:
  9409                           ; Name         Instructions Cycles
  9410                           ; simple_byte           13     7 (average)
  9411                           ;	Chosen strategy is simple_byte
  9412  0145C0  0A00               	xorlw	0	; case 0
  9413  0145C2  B4D8               	btfsc	status,2,c
  9414  0145C4  D7D0               	goto	l118
  9415  0145C6  0A01               	xorlw	1	; case 1
  9416  0145C8  B4D8               	btfsc	status,2,c
  9417  0145CA  D7D7               	goto	l120
  9418  0145CC  0A03               	xorlw	3	; case 2
  9419  0145CE  B4D8               	btfsc	status,2,c
  9420  0145D0  D7DF               	goto	l121
  9421  0145D2  0A01               	xorlw	1	; case 3
  9422  0145D4  A4D8               	btfss	status,2,c
  9423  0145D6  0012               	return	
  9424  0145D8  D7E6               	goto	l122
  9425  0145DA                     __end_of_Set_Rotation:
  9426                           	opt stack 0
  9427                           tosu	equ	0xFFF
  9428                           tosh	equ	0xFFE
  9429                           tosl	equ	0xFFD
  9430                           pclath	equ	0xFFA
  9431                           tblptru	equ	0xFF8
  9432                           tblptrh	equ	0xFF7
  9433                           tblptrl	equ	0xFF6
  9434                           tablat	equ	0xFF5
  9435                           intcon	equ	0xFF2
  9436                           postinc0	equ	0xFEE
  9437                           wreg	equ	0xFE8
  9438                           postdec1	equ	0xFE5
  9439                           fsr1h	equ	0xFE2
  9440                           fsr1l	equ	0xFE1
  9441                           indf2	equ	0xFDF
  9442                           postinc2	equ	0xFDE
  9443                           postdec2	equ	0xFDD
  9444                           plusw2	equ	0xFDB
  9445                           fsr2h	equ	0xFDA
  9446                           fsr2l	equ	0xFD9
  9447                           status	equ	0xFD8
  9448                           
  9449 ;; *************** function _LCD_Fill *****************
  9450 ;; Defined at:
  9451 ;;		line 287 in file "Library/LCD.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;  pColour         2    9[BANK0 ] unsigned short 
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;  j               1   12[BANK0 ] unsigned char 
  9456 ;;  i               1   11[BANK0 ] unsigned char 
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  1    wreg      void 
  9459 ;; Registers used:
  9460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;Total ram usage:        4 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:   10
  9473 ;; This function calls:
  9474 ;;		_LCD_Word_Write
  9475 ;;		_Set_Addr_Window
  9476 ;; This function is called by:
  9477 ;;		_LCD_Init
  9478 ;; This function uses a non-reentrant model
  9479 ;;
  9480                           
  9481                           	psect	text33
  9482  01566A                     __ptext33:
  9483                           	opt stack 0
  9484  01566A                     _LCD_Fill:
  9485                           	opt stack 19
  9486                           
  9487                           ;LCD.c: 296: UINT8 i = 0x00;
  9488                           
  9489                           ;incstack = 0
  9490  01566A  0E00               	movlw	0
  9491  01566C  0100               	movlb	0	; () banked
  9492  01566E  6F6B               	movwf	LCD_Fill@i& (0+255),b
  9493                           
  9494                           ;LCD.c: 297: UINT8 j = 0x00;
  9495  015670  0E00               	movlw	0
  9496  015672  6F6C               	movwf	LCD_Fill@j& (0+255),b
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
  9500  015674  0E00               	movlw	0
  9501  015676  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
  9502  015678  0450               	decf	_w,w,c
  9503  01567A  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
  9504  01567C  044F               	decf	_l,w,c
  9505  01567E  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
  9506  015680  0E00               	movlw	0
  9507  015682  EC0D  F0A2         	call	_Set_Addr_Window
  9508                           
  9509                           ;LCD.c: 299: for (j = l; j > 0; j--)
  9510  015686  C04F  F06C         	movff	_l,LCD_Fill@j
  9511  01568A  0100               	movlb	0	; () banked
  9512  01568C  516C               	movf	LCD_Fill@j& (0+255),w,b
  9513  01568E  B4D8               	btfsc	status,2,c
  9514  015690  0012               	return	
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;LCD.c: 300: for (i = w; i > 0; i--)
  9518                           
  9519                           ; BSR set to: 0
  9520  015692  C050  F06B         	movff	_w,LCD_Fill@i
  9521  015696                     l14796:
  9522                           
  9523                           ; BSR set to: 0
  9524  015696  516B               	movf	LCD_Fill@i& (0+255),w,b
  9525  015698  B4D8               	btfsc	status,2,c
  9526  01569A  D009               	goto	u12030
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;LCD.c: 301: LCD_Word_Write(pColour);
  9530                           
  9531                           ; BSR set to: 0
  9532                           
  9533                           ; BSR set to: 0
  9534  01569C  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
  9535  0156A0  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
  9536  0156A4  EC31  F0AF         	call	_LCD_Word_Write	;wreg free
  9537  0156A8  0100               	movlb	0	; () banked
  9538  0156AA  076B               	decf	LCD_Fill@i& (0+255),f,b
  9539  0156AC  D7F4               	goto	l14796
  9540  0156AE                     u12030:
  9541                           
  9542                           ; BSR set to: 0
  9543                           
  9544                           ; BSR set to: 0
  9545  0156AE  076C               	decf	LCD_Fill@j& (0+255),f,b
  9546  0156B0  D7ED               	goto	L6
  9547  0156B2                     __end_of_LCD_Fill:
  9548                           	opt stack 0
  9549                           tosu	equ	0xFFF
  9550                           tosh	equ	0xFFE
  9551                           tosl	equ	0xFFD
  9552                           pclath	equ	0xFFA
  9553                           tblptru	equ	0xFF8
  9554                           tblptrh	equ	0xFF7
  9555                           tblptrl	equ	0xFF6
  9556                           tablat	equ	0xFF5
  9557                           intcon	equ	0xFF2
  9558                           postinc0	equ	0xFEE
  9559                           wreg	equ	0xFE8
  9560                           postdec1	equ	0xFE5
  9561                           fsr1h	equ	0xFE2
  9562                           fsr1l	equ	0xFE1
  9563                           indf2	equ	0xFDF
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           plusw2	equ	0xFDB
  9567                           fsr2h	equ	0xFDA
  9568                           fsr2l	equ	0xFD9
  9569                           status	equ	0xFD8
  9570                           
  9571 ;; *************** function _Configure_GPIOs *****************
  9572 ;; Defined at:
  9573 ;;		line 46 in file "Library/LCD.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;		None
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;		None
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  1    wreg      void 
  9580 ;; Registers used:
  9581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9591 ;;Total ram usage:        0 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:   14
  9594 ;; This function calls:
  9595 ;;		_LCD_Reset
  9596 ;;		_Port_SetPinType
  9597 ;;		_SPI_Init
  9598 ;;		_SPI_MaxSpeed
  9599 ;; This function is called by:
  9600 ;;		_LCD_Init
  9601 ;; This function uses a non-reentrant model
  9602 ;;
  9603                           
  9604                           	psect	text34
  9605  01510A                     __ptext34:
  9606                           	opt stack 0
  9607  01510A                     _Configure_GPIOs:
  9608                           	opt stack 15
  9609                           
  9610                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;incstack = 0
  9614  01510A  0EBD               	movlw	low _PortF
  9615  01510C  0100               	movlb	0	; () banked
  9616  01510E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9617  015110  0E01               	movlw	high _PortF
  9618  015112  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9619  015114  0E07               	movlw	7
  9620  015116  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9621  015118  0E03               	movlw	3
  9622  01511A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9623  01511C  EC4E  F093         	call	_Port_SetPinType	;wreg free
  9624                           
  9625                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
  9626  015120  0EBD               	movlw	low _PortF
  9627  015122  0100               	movlb	0	; () banked
  9628  015124  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9629  015126  0E01               	movlw	high _PortF
  9630  015128  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9631  01512A  0E06               	movlw	6
  9632  01512C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9633  01512E  0E03               	movlw	3
  9634  015130  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9635  015132  EC4E  F093         	call	_Port_SetPinType	;wreg free
  9636                           
  9637                           ;LCD.c: 55: LCD_Reset();
  9638  015136  ECDD  F0A9         	call	_LCD_Reset	;wreg free
  9639                           
  9640                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
  9641  01513A  0EC0               	movlw	192
  9642  01513C  0100               	movlb	0	; () banked
  9643  01513E  6F8D               	movwf	SPI_Init@pClock& (0+255),b
  9644  015140  0EC6               	movlw	198
  9645  015142  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
  9646  015144  0E2D               	movlw	45
  9647  015146  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
  9648  015148  0E00               	movlw	0
  9649  01514A  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
  9650  01514C  0E01               	movlw	1
  9651  01514E  6F91               	movwf	SPI_Init@pChannel& (0+255),b
  9652  015150  0E01               	movlw	1
  9653  015152  6F92               	movwf	SPI_Init@pMode& (0+255),b
  9654  015154  ECCB  F083         	call	_SPI_Init	;wreg free
  9655                           
  9656                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
  9657  015158  0E80               	movlw	low _SPI2
  9658  01515A  0100               	movlb	0	; () banked
  9659  01515C  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
  9660  01515E  0E01               	movlw	high _SPI2
  9661  015160  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
  9662  015162  EC89  F0A7         	call	_SPI_MaxSpeed	;wreg free
  9663  015166  0012               	return		;funcret
  9664  015168                     __end_of_Configure_GPIOs:
  9665                           	opt stack 0
  9666                           tosu	equ	0xFFF
  9667                           tosh	equ	0xFFE
  9668                           tosl	equ	0xFFD
  9669                           pclath	equ	0xFFA
  9670                           tblptru	equ	0xFF8
  9671                           tblptrh	equ	0xFF7
  9672                           tblptrl	equ	0xFF6
  9673                           tablat	equ	0xFF5
  9674                           intcon	equ	0xFF2
  9675                           postinc0	equ	0xFEE
  9676                           wreg	equ	0xFE8
  9677                           postdec1	equ	0xFE5
  9678                           fsr1h	equ	0xFE2
  9679                           fsr1l	equ	0xFE1
  9680                           indf2	equ	0xFDF
  9681                           postinc2	equ	0xFDE
  9682                           postdec2	equ	0xFDD
  9683                           plusw2	equ	0xFDB
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _SPI_MaxSpeed *****************
  9689 ;; Defined at:
  9690 ;;		line 201 in file "Library/SPI.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  pInput          2   15[BANK0 ] PTR struct SPI
  9693 ;;		 -> SPI2(11), 
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  1    wreg      void 
  9698 ;; Registers used:
  9699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9705 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;Total ram usage:        2 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    9
  9712 ;; This function calls:
  9713 ;;		_Byte_SetBit
  9714 ;;		_Byte_SetQuad
  9715 ;; This function is called by:
  9716 ;;		_Configure_GPIOs
  9717 ;; This function uses a non-reentrant model
  9718 ;;
  9719                           
  9720                           	psect	text35
  9721  014F12                     __ptext35:
  9722                           	opt stack 0
  9723  014F12                     _SPI_MaxSpeed:
  9724                           	opt stack 19
  9725                           
  9726                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
  9727                           
  9728                           ;incstack = 0
  9729  014F12  0100               	movlb	0	; () banked
  9730  014F14  EE20 F006          	lfsr	2,6
  9731  014F18  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9732  014F1A  26D9               	addwf	fsr2l,f,c
  9733  014F1C  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9734  014F1E  22DA               	addwfc	fsr2h,f,c
  9735  014F20  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9736  014F24  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9737  014F28  0E05               	movlw	5
  9738  014F2A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9739  014F2C  0E00               	movlw	0
  9740  014F2E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9741  014F30  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
  9742                           
  9743                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
  9744  014F34  0100               	movlb	0	; () banked
  9745  014F36  EE20 F006          	lfsr	2,6
  9746  014F3A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9747  014F3C  26D9               	addwf	fsr2l,f,c
  9748  014F3E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9749  014F40  22DA               	addwfc	fsr2h,f,c
  9750  014F42  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
  9751  014F46  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
  9752  014F4A  0E00               	movlw	0
  9753  014F4C  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
  9754  014F4E  0E00               	movlw	0
  9755  014F50  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
  9756  014F52  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
  9757                           
  9758                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
  9759  014F56  0100               	movlb	0	; () banked
  9760  014F58  EE20 F006          	lfsr	2,6
  9761  014F5C  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
  9762  014F5E  26D9               	addwf	fsr2l,f,c
  9763  014F60  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
  9764  014F62  22DA               	addwfc	fsr2h,f,c
  9765  014F64  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
  9766  014F68  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
  9767  014F6C  0E05               	movlw	5
  9768  014F6E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
  9769  014F70  0E01               	movlw	1
  9770  014F72  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
  9771  014F74  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
  9772  014F78  0012               	return		;funcret
  9773  014F7A                     __end_of_SPI_MaxSpeed:
  9774                           	opt stack 0
  9775                           tosu	equ	0xFFF
  9776                           tosh	equ	0xFFE
  9777                           tosl	equ	0xFFD
  9778                           pclath	equ	0xFFA
  9779                           tblptru	equ	0xFF8
  9780                           tblptrh	equ	0xFF7
  9781                           tblptrl	equ	0xFF6
  9782                           tablat	equ	0xFF5
  9783                           intcon	equ	0xFF2
  9784                           postinc0	equ	0xFEE
  9785                           wreg	equ	0xFE8
  9786                           postdec1	equ	0xFE5
  9787                           fsr1h	equ	0xFE2
  9788                           fsr1l	equ	0xFE1
  9789                           indf2	equ	0xFDF
  9790                           postinc2	equ	0xFDE
  9791                           postdec2	equ	0xFDD
  9792                           plusw2	equ	0xFDB
  9793                           fsr2h	equ	0xFDA
  9794                           fsr2l	equ	0xFD9
  9795                           status	equ	0xFD8
  9796                           
  9797 ;; *************** function _LCD_Reset *****************
  9798 ;; Defined at:
  9799 ;;		line 95 in file "Library/LCD.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;		None
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;		None
  9804 ;; Return value:  Size  Location     Type
  9805 ;;                  1    wreg      void 
  9806 ;; Registers used:
  9807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9817 ;;Total ram usage:        0 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:   13
  9820 ;; This function calls:
  9821 ;;		_LED_Toggle
  9822 ;;		_Reset_High
  9823 ;;		_Reset_Low
  9824 ;;		_delay_ms
  9825 ;; This function is called by:
  9826 ;;		_Configure_GPIOs
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           	psect	text36
  9831  0153BA                     __ptext36:
  9832                           	opt stack 0
  9833  0153BA                     _LCD_Reset:
  9834                           	opt stack 15
  9835                           
  9836                           ;LCD.c: 97: Reset_High();
  9837                           
  9838                           ;incstack = 0
  9839  0153BA  EC63  F0AF         	call	_Reset_High	;wreg free
  9840                           
  9841                           ;LCD.c: 98: LED_Toggle(eLED2);
  9842  0153BE  0E01               	movlw	1
  9843  0153C0  EC03  F0AC         	call	_LED_Toggle
  9844                           
  9845                           ;LCD.c: 99: delay_ms(0x80);
  9846  0153C4  0E00               	movlw	0
  9847  0153C6  0100               	movlb	0	; () banked
  9848  0153C8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9849  0153CA  0E80               	movlw	128
  9850  0153CC  6F60               	movwf	delay_ms@ms& (0+255),b
  9851  0153CE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9852                           
  9853                           ;LCD.c: 100: LED_Toggle(eLED2);
  9854  0153D2  0E01               	movlw	1
  9855  0153D4  EC03  F0AC         	call	_LED_Toggle
  9856                           
  9857                           ;LCD.c: 101: Reset_Low();
  9858  0153D8  EC57  F0AF         	call	_Reset_Low	;wreg free
  9859                           
  9860                           ;LCD.c: 102: delay_ms(0x80);
  9861  0153DC  0E00               	movlw	0
  9862  0153DE  0100               	movlb	0	; () banked
  9863  0153E0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9864  0153E2  0E80               	movlw	128
  9865  0153E4  6F60               	movwf	delay_ms@ms& (0+255),b
  9866  0153E6  ECB4  F0A8         	call	_delay_ms	;wreg free
  9867                           
  9868                           ;LCD.c: 103: LED_Toggle(eLED2);
  9869  0153EA  0E01               	movlw	1
  9870  0153EC  EC03  F0AC         	call	_LED_Toggle
  9871                           
  9872                           ;LCD.c: 104: Reset_High();
  9873  0153F0  EC63  F0AF         	call	_Reset_High	;wreg free
  9874                           
  9875                           ;LCD.c: 105: delay_ms(0x80);
  9876  0153F4  0E00               	movlw	0
  9877  0153F6  0100               	movlb	0	; () banked
  9878  0153F8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  9879  0153FA  0E80               	movlw	128
  9880  0153FC  6F60               	movwf	delay_ms@ms& (0+255),b
  9881  0153FE  ECB4  F0A8         	call	_delay_ms	;wreg free
  9882                           
  9883                           ;LCD.c: 106: LED_Toggle(eLED2);
  9884  015402  0E01               	movlw	1
  9885  015404  EC03  F0AC         	call	_LED_Toggle
  9886  015408  0012               	return		;funcret
  9887  01540A                     __end_of_LCD_Reset:
  9888                           	opt stack 0
  9889                           tosu	equ	0xFFF
  9890                           tosh	equ	0xFFE
  9891                           tosl	equ	0xFFD
  9892                           pclath	equ	0xFFA
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           intcon	equ	0xFF2
  9898                           postinc0	equ	0xFEE
  9899                           wreg	equ	0xFE8
  9900                           postdec1	equ	0xFE5
  9901                           fsr1h	equ	0xFE2
  9902                           fsr1l	equ	0xFE1
  9903                           indf2	equ	0xFDF
  9904                           postinc2	equ	0xFDE
  9905                           postdec2	equ	0xFDD
  9906                           plusw2	equ	0xFDB
  9907                           fsr2h	equ	0xFDA
  9908                           fsr2l	equ	0xFD9
  9909                           status	equ	0xFD8
  9910                           
  9911 ;; *************** function _Reset_Low *****************
  9912 ;; Defined at:
  9913 ;;		line 32 in file "Library/LCD.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;		None
  9916 ;; Auto vars:     Size  Location     Type
  9917 ;;		None
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  1    wreg      void 
  9920 ;; Registers used:
  9921 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9922 ;; Tracked objects:
  9923 ;;		On entry : 0/0
  9924 ;;		On exit  : 0/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;Total ram usage:        0 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:   11
  9934 ;; This function calls:
  9935 ;;		_Port_SetPin
  9936 ;; This function is called by:
  9937 ;;		_LCD_Reset
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text37
  9942  015EAE                     __ptext37:
  9943                           	opt stack 0
  9944  015EAE                     _Reset_Low:
  9945                           	opt stack 16
  9946                           
  9947                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
  9948                           
  9949                           ;incstack = 0
  9950  015EAE  0EBD               	movlw	low _PortF
  9951  015EB0  0100               	movlb	0	; () banked
  9952  015EB2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9953  015EB4  0E01               	movlw	high _PortF
  9954  015EB6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9955  015EB8  0E06               	movlw	6
  9956  015EBA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9957  015EBC  0E01               	movlw	1
  9958  015EBE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9959  015EC0  ECC1  F09F         	call	_Port_SetPin	;wreg free
  9960  015EC4  0012               	return		;funcret
  9961  015EC6                     __end_of_Reset_Low:
  9962                           	opt stack 0
  9963                           tosu	equ	0xFFF
  9964                           tosh	equ	0xFFE
  9965                           tosl	equ	0xFFD
  9966                           pclath	equ	0xFFA
  9967                           tblptru	equ	0xFF8
  9968                           tblptrh	equ	0xFF7
  9969                           tblptrl	equ	0xFF6
  9970                           tablat	equ	0xFF5
  9971                           intcon	equ	0xFF2
  9972                           postinc0	equ	0xFEE
  9973                           wreg	equ	0xFE8
  9974                           postdec1	equ	0xFE5
  9975                           fsr1h	equ	0xFE2
  9976                           fsr1l	equ	0xFE1
  9977                           indf2	equ	0xFDF
  9978                           postinc2	equ	0xFDE
  9979                           postdec2	equ	0xFDD
  9980                           plusw2	equ	0xFDB
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _Reset_High *****************
  9986 ;; Defined at:
  9987 ;;		line 36 in file "Library/LCD.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;		None
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;		None
  9992 ;; Return value:  Size  Location     Type
  9993 ;;                  1    wreg      void 
  9994 ;; Registers used:
  9995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/0
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;Total ram usage:        0 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:   11
 10008 ;; This function calls:
 10009 ;;		_Port_SetPin
 10010 ;; This function is called by:
 10011 ;;		_LCD_Reset
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text38
 10016  015EC6                     __ptext38:
 10017                           	opt stack 0
 10018  015EC6                     _Reset_High:
 10019                           	opt stack 16
 10020                           
 10021                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 10022                           
 10023                           ;incstack = 0
 10024  015EC6  0EBD               	movlw	low _PortF
 10025  015EC8  0100               	movlb	0	; () banked
 10026  015ECA  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10027  015ECC  0E01               	movlw	high _PortF
 10028  015ECE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10029  015ED0  0E06               	movlw	6
 10030  015ED2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10031  015ED4  0E00               	movlw	0
 10032  015ED6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10033  015ED8  ECC1  F09F         	call	_Port_SetPin	;wreg free
 10034  015EDC  0012               	return		;funcret
 10035  015EDE                     __end_of_Reset_High:
 10036                           	opt stack 0
 10037                           tosu	equ	0xFFF
 10038                           tosh	equ	0xFFE
 10039                           tosl	equ	0xFFD
 10040                           pclath	equ	0xFFA
 10041                           tblptru	equ	0xFF8
 10042                           tblptrh	equ	0xFF7
 10043                           tblptrl	equ	0xFF6
 10044                           tablat	equ	0xFF5
 10045                           intcon	equ	0xFF2
 10046                           postinc0	equ	0xFEE
 10047                           wreg	equ	0xFE8
 10048                           postdec1	equ	0xFE5
 10049                           fsr1h	equ	0xFE2
 10050                           fsr1l	equ	0xFE1
 10051                           indf2	equ	0xFDF
 10052                           postinc2	equ	0xFDE
 10053                           postdec2	equ	0xFDD
 10054                           plusw2	equ	0xFDB
 10055                           fsr2h	equ	0xFDA
 10056                           fsr2l	equ	0xFD9
 10057                           status	equ	0xFD8
 10058                           
 10059 ;; *************** function _Init_Timer0 *****************
 10060 ;; Defined at:
 10061 ;;		line 72 in file "main.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;		None
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;		None
 10066 ;; Return value:  Size  Location     Type
 10067 ;;                  2  2114[None  ] int 
 10068 ;; Registers used:
 10069 ;;		None
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10079 ;;Total ram usage:        0 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; Hardware stack levels required when called:    7
 10082 ;; This function calls:
 10083 ;;		Nothing
 10084 ;; This function is called by:
 10085 ;;		_main
 10086 ;; This function uses a non-reentrant model
 10087 ;;
 10088                           
 10089                           	psect	text39
 10090  015EDE                     __ptext39:
 10091                           	opt stack 0
 10092  015EDE                     _Init_Timer0:
 10093                           	opt stack 23
 10094                           
 10095                           ;main.c: 73: T0CONbits.TMR0ON = 1;
 10096                           
 10097                           ;incstack = 0
 10098  015EDE  8ED5               	bsf	4053,7,c	;volatile
 10099                           
 10100                           ;main.c: 74: T0CONbits.T08BIT = 1;
 10101  015EE0  8CD5               	bsf	4053,6,c	;volatile
 10102                           
 10103                           ;main.c: 75: T0CONbits.T0CS = 0;
 10104  015EE2  9AD5               	bcf	4053,5,c	;volatile
 10105                           
 10106                           ;main.c: 76: T0CONbits.T0SE = 0;
 10107  015EE4  98D5               	bcf	4053,4,c	;volatile
 10108                           
 10109                           ;main.c: 77: T0CONbits.PSA = 0;
 10110  015EE6  96D5               	bcf	4053,3,c	;volatile
 10111                           
 10112                           ;main.c: 78: T0CONbits.T0PS2 = 1;
 10113  015EE8  84D5               	bsf	4053,2,c	;volatile
 10114                           
 10115                           ;main.c: 79: T0CONbits.T0PS1 = 1;
 10116  015EEA  82D5               	bsf	4053,1,c	;volatile
 10117                           
 10118                           ;main.c: 80: T0CONbits.T0PS0 = 1;
 10119  015EEC  80D5               	bsf	4053,0,c	;volatile
 10120                           
 10121                           ;main.c: 81: INTCONbits.TMR0IE = 1;
 10122  015EEE  8AF2               	bsf	intcon,5,c	;volatile
 10123                           
 10124                           ;main.c: 82: INTCONbits.PEIE = 1;
 10125  015EF0  8CF2               	bsf	intcon,6,c	;volatile
 10126                           
 10127                           ;main.c: 83: INTCONbits.GIE = 1;
 10128  015EF2  8EF2               	bsf	intcon,7,c	;volatile
 10129  015EF4  0012               	return		;funcret
 10130  015EF6                     __end_of_Init_Timer0:
 10131                           	opt stack 0
 10132                           tosu	equ	0xFFF
 10133                           tosh	equ	0xFFE
 10134                           tosl	equ	0xFFD
 10135                           pclath	equ	0xFFA
 10136                           tblptru	equ	0xFF8
 10137                           tblptrh	equ	0xFF7
 10138                           tblptrl	equ	0xFF6
 10139                           tablat	equ	0xFF5
 10140                           intcon	equ	0xFF2
 10141                           postinc0	equ	0xFEE
 10142                           wreg	equ	0xFE8
 10143                           postdec1	equ	0xFE5
 10144                           fsr1h	equ	0xFE2
 10145                           fsr1l	equ	0xFE1
 10146                           indf2	equ	0xFDF
 10147                           postinc2	equ	0xFDE
 10148                           postdec2	equ	0xFDD
 10149                           plusw2	equ	0xFDB
 10150                           fsr2h	equ	0xFDA
 10151                           fsr2l	equ	0xFD9
 10152                           status	equ	0xFD8
 10153                           
 10154 ;; *************** function _InitSerialCommunication *****************
 10155 ;; Defined at:
 10156 ;;		line 131 in file "main.c"
 10157 ;; Parameters:    Size  Location     Type
 10158 ;;		None
 10159 ;; Auto vars:     Size  Location     Type
 10160 ;;		None
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  1    wreg      void 
 10163 ;; Registers used:
 10164 ;;		wreg, status,2
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10174 ;;Total ram usage:        0 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:    7
 10177 ;; This function calls:
 10178 ;;		Nothing
 10179 ;; This function is called by:
 10180 ;;		_main
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           	psect	text40
 10185  015DD8                     __ptext40:
 10186                           	opt stack 0
 10187  015DD8                     _InitSerialCommunication:
 10188                           	opt stack 23
 10189                           
 10190                           ;main.c: 133: TRISCbits.TRISC6 = 0;
 10191                           
 10192                           ;incstack = 0
 10193  015DD8  9C94               	bcf	3988,6,c	;volatile
 10194                           
 10195                           ;main.c: 134: TRISCbits.TRISC7 = 1;
 10196  015DDA  8E94               	bsf	3988,7,c	;volatile
 10197                           
 10198                           ;main.c: 135: TXSTA1 = 0b00100100;
 10199  015DDC  0E24               	movlw	36
 10200  015DDE  6EAD               	movwf	4013,c	;volatile
 10201                           
 10202                           ;main.c: 136: RCSTA1 = 0b10010000;
 10203  015DE0  0E90               	movlw	144
 10204  015DE2  6EAC               	movwf	4012,c	;volatile
 10205                           
 10206                           ;main.c: 137: BAUDCON1bits.DTRXP = 0;
 10207  015DE4  9A7E               	bcf	3966,5,c	;volatile
 10208                           
 10209                           ;main.c: 138: BAUDCON1bits.SCKP = 0;
 10210  015DE6  987E               	bcf	3966,4,c	;volatile
 10211                           
 10212                           ;main.c: 139: BAUDCON1bits.WUE = 0;
 10213  015DE8  927E               	bcf	3966,1,c	;volatile
 10214                           
 10215                           ;main.c: 140: BAUDCON1bits.ABDEN = 0;
 10216  015DEA  907E               	bcf	3966,0,c	;volatile
 10217                           
 10218                           ;main.c: 142: TXSTA1bits.BRGH = 1;
 10219  015DEC  84AD               	bsf	4013,2,c	;volatile
 10220                           
 10221                           ;main.c: 143: BAUDCON1bits.BRG16 = 0;
 10222  015DEE  967E               	bcf	3966,3,c	;volatile
 10223                           
 10224                           ;main.c: 144: SPBRG1 = 51;
 10225  015DF0  0E33               	movlw	51
 10226  015DF2  6EB0               	movwf	4016,c	;volatile
 10227  015DF4  0012               	return		;funcret
 10228  015DF6                     __end_of_InitSerialCommunication:
 10229                           	opt stack 0
 10230                           tosu	equ	0xFFF
 10231                           tosh	equ	0xFFE
 10232                           tosl	equ	0xFFD
 10233                           pclath	equ	0xFFA
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           intcon	equ	0xFF2
 10239                           postinc0	equ	0xFEE
 10240                           wreg	equ	0xFE8
 10241                           postdec1	equ	0xFE5
 10242                           fsr1h	equ	0xFE2
 10243                           fsr1l	equ	0xFE1
 10244                           indf2	equ	0xFDF
 10245                           postinc2	equ	0xFDE
 10246                           postdec2	equ	0xFDD
 10247                           plusw2	equ	0xFDB
 10248                           fsr2h	equ	0xFDA
 10249                           fsr2l	equ	0xFD9
 10250                           status	equ	0xFD8
 10251                           
 10252 ;; *************** function _InitADC *****************
 10253 ;; Defined at:
 10254 ;;		line 86 in file "main.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;		None
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;                  1    wreg      void 
 10261 ;; Registers used:
 10262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;Total ram usage:        1 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    7
 10275 ;; This function calls:
 10276 ;;		Nothing
 10277 ;; This function is called by:
 10278 ;;		_main
 10279 ;; This function uses a non-reentrant model
 10280 ;;
 10281                           
 10282                           	psect	text41
 10283  0154F6                     __ptext41:
 10284                           	opt stack 0
 10285  0154F6                     _InitADC:
 10286                           	opt stack 23
 10287                           
 10288                           ;main.c: 88: ADCON1 = 0b10101101;
 10289                           
 10290                           ;incstack = 0
 10291  0154F6  0EAD               	movlw	173
 10292  0154F8  6EC1               	movwf	4033,c	;volatile
 10293                           
 10294                           ;main.c: 89: for (thisReading = 0; thisReading < numReadings; thisReading++) {
 10295  0154FA  0E00               	movlw	0
 10296  0154FC  0101               	movlb	1	; () banked
 10297  0154FE  6F25               	movwf	(_thisReading+1)& (0+255),b
 10298  015500  0E00               	movlw	0
 10299  015502  6F24               	movwf	_thisReading& (0+255),b
 10300  015504  D010               	goto	l2118
 10301  015506                     
 10302                           ;main.c: 90: readings[thisReading] = 0;
 10303                           
 10304                           ; BSR set to: 1
 10305  015506  90D8               	bcf	status,0,c
 10306  015508  0101               	movlb	1	; () banked
 10307  01550A  3524               	rlcf	_thisReading& (0+255),w,b
 10308  01550C  6ED9               	movwf	fsr2l,c
 10309  01550E  3525               	rlcf	(_thisReading+1)& (0+255),w,b
 10310  015510  6EDA               	movwf	fsr2h,c
 10311  015512  0E00               	movlw	low _readings
 10312  015514  26D9               	addwf	fsr2l,f,c
 10313  015516  0E02               	movlw	high _readings
 10314  015518  22DA               	addwfc	fsr2h,f,c
 10315  01551A  0E00               	movlw	0
 10316  01551C  6EDE               	movwf	postinc2,c
 10317  01551E  0E00               	movlw	0
 10318  015520  6EDD               	movwf	postdec2,c
 10319                           
 10320                           ; BSR set to: 1
 10321  015522  4B24               	infsnz	_thisReading& (0+255),f,b
 10322  015524  2B25               	incf	(_thisReading+1)& (0+255),f,b
 10323  015526                     l2118:
 10324                           
 10325                           ; BSR set to: 1
 10326                           
 10327                           ; BSR set to: 1
 10328  015526  51F9               	movf	_numReadings& (0+255),w,b
 10329  015528  5D24               	subwf	_thisReading& (0+255),w,b
 10330  01552A  5125               	movf	(_thisReading+1)& (0+255),w,b
 10331  01552C  0A80               	xorlw	128
 10332  01552E  0100               	movlb	0	; () banked
 10333  015530  6F60               	movwf	??_InitADC& (0+255),b
 10334  015532  0101               	movlb	1	; () banked
 10335  015534  51FA               	movf	(_numReadings+1)& (0+255),w,b
 10336  015536  0A80               	xorlw	128
 10337  015538  0100               	movlb	0	; () banked
 10338  01553A  5960               	subwfb	??_InitADC& (0+255),w,b
 10339  01553C  B0D8               	btfsc	status,0,c
 10340  01553E  0012               	return	
 10341  015540  D7E2               	goto	l2119
 10342  015542                     __end_of_InitADC:
 10343                           	opt stack 0
 10344                           tosu	equ	0xFFF
 10345                           tosh	equ	0xFFE
 10346                           tosl	equ	0xFFD
 10347                           pclath	equ	0xFFA
 10348                           tblptru	equ	0xFF8
 10349                           tblptrh	equ	0xFF7
 10350                           tblptrl	equ	0xFF6
 10351                           tablat	equ	0xFF5
 10352                           intcon	equ	0xFF2
 10353                           postinc0	equ	0xFEE
 10354                           wreg	equ	0xFE8
 10355                           postdec1	equ	0xFE5
 10356                           fsr1h	equ	0xFE2
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           postdec2	equ	0xFDD
 10361                           plusw2	equ	0xFDB
 10362                           fsr2h	equ	0xFDA
 10363                           fsr2l	equ	0xFD9
 10364                           status	equ	0xFD8
 10365                           
 10366 ;; *************** function _ISR_Enable *****************
 10367 ;; Defined at:
 10368 ;;		line 27 in file "Library/ISR.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;		None
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;		None
 10373 ;; Return value:  Size  Location     Type
 10374 ;;                  1    wreg      void 
 10375 ;; Registers used:
 10376 ;;		None
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;Total ram usage:        0 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    7
 10389 ;; This function calls:
 10390 ;;		Nothing
 10391 ;; This function is called by:
 10392 ;;		_main
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text42
 10397  016084                     __ptext42:
 10398                           	opt stack 0
 10399  016084                     _ISR_Enable:
 10400                           	opt stack 23
 10401                           
 10402                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 10403                           
 10404                           ; BSR set to: 0
 10405                           ;incstack = 0
 10406  016084  8CF2               	bsf	intcon,6,c	;volatile
 10407                           
 10408                           ;ISR.c: 30: INTCONbits.GIE = 1;
 10409  016086  8EF2               	bsf	intcon,7,c	;volatile
 10410                           
 10411                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 10412  016088  88F2               	bsf	intcon,4,c	;volatile
 10413                           
 10414                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 10415  01608A  92F2               	bcf	intcon,1,c	;volatile
 10416  01608C  0012               	return		;funcret
 10417  01608E                     __end_of_ISR_Enable:
 10418                           	opt stack 0
 10419                           tosu	equ	0xFFF
 10420                           tosh	equ	0xFFE
 10421                           tosl	equ	0xFFD
 10422                           pclath	equ	0xFFA
 10423                           tblptru	equ	0xFF8
 10424                           tblptrh	equ	0xFF7
 10425                           tblptrl	equ	0xFF6
 10426                           tablat	equ	0xFF5
 10427                           intcon	equ	0xFF2
 10428                           postinc0	equ	0xFEE
 10429                           wreg	equ	0xFE8
 10430                           postdec1	equ	0xFE5
 10431                           fsr1h	equ	0xFE2
 10432                           fsr1l	equ	0xFE1
 10433                           indf2	equ	0xFDF
 10434                           postinc2	equ	0xFDE
 10435                           postdec2	equ	0xFDD
 10436                           plusw2	equ	0xFDB
 10437                           fsr2h	equ	0xFDA
 10438                           fsr2l	equ	0xFD9
 10439                           status	equ	0xFD8
 10440                           
 10441 ;; *************** function _HMI_Poll *****************
 10442 ;; Defined at:
 10443 ;;		line 252 in file "HMI.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;		None
 10446 ;; Auto vars:     Size  Location     Type
 10447 ;;		None
 10448 ;; Return value:  Size  Location     Type
 10449 ;;                  1    wreg      void 
 10450 ;; Registers used:
 10451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10452 ;; Tracked objects:
 10453 ;;		On entry : 0/0
 10454 ;;		On exit  : 0/0
 10455 ;;		Unchanged: 0/0
 10456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10461 ;;Total ram usage:        0 bytes
 10462 ;; Hardware stack levels used:    1
 10463 ;; Hardware stack levels required when called:   15
 10464 ;; This function calls:
 10465 ;;		_Button_Poll
 10466 ;; This function is called by:
 10467 ;;		_main
 10468 ;; This function uses a non-reentrant model
 10469 ;;
 10470                           
 10471                           	psect	text43
 10472  01504A                     __ptext43:
 10473                           	opt stack 0
 10474  01504A                     _HMI_Poll:
 10475                           	opt stack 15
 10476                           
 10477                           ;HMI.c: 254: TRISE = 0xFC;
 10478                           
 10479                           ;incstack = 0
 10480  01504A  0EFC               	movlw	252
 10481  01504C  6E96               	movwf	3990,c	;volatile
 10482                           
 10483                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 10484  01504E  0E76               	movlw	low (_HMIBoard+48)
 10485  015050  0100               	movlb	0	; () banked
 10486  015052  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10487  015054  0E01               	movlw	high (_HMIBoard+48)
 10488  015056  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10489  015058  0E01               	movlw	1
 10490  01505A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10491  01505C  EC3A  F09A         	call	_Button_Poll	;wreg free
 10492                           
 10493                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 10494  015060  0E58               	movlw	low (_HMIBoard+18)
 10495  015062  0100               	movlb	0	; () banked
 10496  015064  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10497  015066  0E01               	movlw	high (_HMIBoard+18)
 10498  015068  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10499  01506A  0E01               	movlw	1
 10500  01506C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10501  01506E  EC3A  F09A         	call	_Button_Poll	;wreg free
 10502                           
 10503                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 10504  015072  0E4E               	movlw	low (_HMIBoard+8)
 10505  015074  0100               	movlb	0	; () banked
 10506  015076  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10507  015078  0E01               	movlw	high (_HMIBoard+8)
 10508  01507A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10509  01507C  0E01               	movlw	1
 10510  01507E  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10511  015080  EC3A  F09A         	call	_Button_Poll	;wreg free
 10512                           
 10513                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 10514  015084  0E62               	movlw	low (_HMIBoard+28)
 10515  015086  0100               	movlb	0	; () banked
 10516  015088  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10517  01508A  0E01               	movlw	high (_HMIBoard+28)
 10518  01508C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10519  01508E  0E01               	movlw	1
 10520  015090  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10521  015092  EC3A  F09A         	call	_Button_Poll	;wreg free
 10522                           
 10523                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 10524  015096  0E6C               	movlw	low (_HMIBoard+38)
 10525  015098  0100               	movlb	0	; () banked
 10526  01509A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 10527  01509C  0E01               	movlw	high (_HMIBoard+38)
 10528  01509E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 10529  0150A0  0E01               	movlw	1
 10530  0150A2  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 10531  0150A4  EC3A  F09A         	call	_Button_Poll	;wreg free
 10532  0150A8  0012               	return		;funcret
 10533  0150AA                     __end_of_HMI_Poll:
 10534                           	opt stack 0
 10535                           tosu	equ	0xFFF
 10536                           tosh	equ	0xFFE
 10537                           tosl	equ	0xFFD
 10538                           pclath	equ	0xFFA
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           intcon	equ	0xFF2
 10544                           postinc0	equ	0xFEE
 10545                           wreg	equ	0xFE8
 10546                           postdec1	equ	0xFE5
 10547                           fsr1h	equ	0xFE2
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           postdec2	equ	0xFDD
 10552                           plusw2	equ	0xFDB
 10553                           fsr2h	equ	0xFDA
 10554                           fsr2l	equ	0xFD9
 10555                           status	equ	0xFD8
 10556                           
 10557 ;; *************** function _Button_Poll *****************
 10558 ;; Defined at:
 10559 ;;		line 57 in file "Library/Button.c"
 10560 ;; Parameters:    Size  Location     Type
 10561 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 10562 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 10563 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  Pin             1   35[BANK0 ] unsigned char 
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      unsigned char 
 10568 ;; Registers used:
 10569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10575 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;Total ram usage:        9 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:   14
 10582 ;; This function calls:
 10583 ;;		_Event_DIPSwitch
 10584 ;;		_Event_NULL
 10585 ;;		_Event_TestButton
 10586 ;;		_HMI_DIPSwitch
 10587 ;;		_HMI_DownSwitch
 10588 ;;		_HMI_LeftSwitch
 10589 ;;		_HMI_RightSwitch
 10590 ;;		_HMI_UpSwitch
 10591 ;;		_MXK_DIPSwitch
 10592 ;;		_MXK_TestButton
 10593 ;; This function is called by:
 10594 ;;		_HMI_Poll
 10595 ;;		_MXK_Poll
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text44
 10600  013474                     __ptext44:
 10601                           	opt stack 0
 10602  013474                     _Button_Poll:
 10603                           	opt stack 15
 10604                           
 10605                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 10606                           
 10607                           ;incstack = 0
 10608  013474  0100               	movlb	0	; () banked
 10609  013476  EE20 F007          	lfsr	2,7
 10610  01347A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10611  01347C  26D9               	addwf	fsr2l,f,c
 10612  01347E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10613  013480  22DA               	addwfc	fsr2h,f,c
 10614  013482  D801               	call	u11958
 10615  013484  D00A               	goto	u11959
 10616  013486                     u11958:
 10617  013486  0005               	push	
 10618  013488  6EFA               	movwf	pclath,c
 10619  01348A  50DE               	movf	postinc2,w,c
 10620  01348C  6EFD               	movwf	tosl,c
 10621  01348E  50DE               	movf	postinc2,w,c
 10622  013490  6EFE               	movwf	tosh,c
 10623  013492  50DE               	movf	postinc2,w,c
 10624  013494  6EFF               	movwf	tosu,c
 10625  013496  50FA               	movf	pclath,w,c
 10626  013498  0012               	return		;indir
 10627  01349A                     u11959:
 10628  01349A  0100               	movlb	0	; () banked
 10629  01349C  6F83               	movwf	Button_Poll@Pin& (0+255),b
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;Button.c: 61: if (pButton->mState == Pin)
 10633  01349E  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10634  0134A2  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10635  0134A6  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10636  0134A8  18DE               	xorwf	postinc2,w,c
 10637  0134AA  A4D8               	btfss	status,2,c
 10638  0134AC  D01C               	goto	l11
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;Button.c: 62: {
 10642                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 10643  0134AE  EE20 F001          	lfsr	2,1
 10644  0134B2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10645  0134B4  26D9               	addwf	fsr2l,f,c
 10646  0134B6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10647  0134B8  22DA               	addwfc	fsr2h,f,c
 10648  0134BA  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10649  0134BC  5CDE               	subwf	postinc2,w,c
 10650  0134BE  B0D8               	btfsc	status,0,c
 10651  0134C0  D009               	goto	l12
 10652                           
 10653                           ; BSR set to: 0
 10654                           ;Button.c: 66: pButton->mCount = 0;
 10655  0134C2  EE20 F001          	lfsr	2,1
 10656  0134C6  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10657  0134C8  26D9               	addwf	fsr2l,f,c
 10658  0134CA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10659  0134CC  22DA               	addwfc	fsr2h,f,c
 10660  0134CE  0E00               	movlw	0
 10661  0134D0  6EDF               	movwf	indf2,c
 10662  0134D2  0012               	return	
 10663  0134D4                     l12:
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;Button.c: 67: else
 10667                           ;Button.c: 68: pButton->mCount -= pIncrement;
 10668                           
 10669                           ; BSR set to: 0
 10670  0134D4  EE20 F001          	lfsr	2,1
 10671  0134D8  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10672  0134DA  26D9               	addwf	fsr2l,f,c
 10673  0134DC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10674  0134DE  22DA               	addwfc	fsr2h,f,c
 10675  0134E0  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10676  0134E2  5EDF               	subwf	indf2,f,c
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;Button.c: 69: }
 10680  0134E4  0012               	return	
 10681  0134E6                     l11:
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 10685                           
 10686                           ; BSR set to: 0
 10687  0134E6  EE20 F001          	lfsr	2,1
 10688  0134EA  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10689  0134EC  26D9               	addwf	fsr2l,f,c
 10690  0134EE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10691  0134F0  22DA               	addwfc	fsr2h,f,c
 10692  0134F2  50DF               	movf	indf2,w,c
 10693  0134F4  6F7E               	movwf	??_Button_Poll& (0+255),b
 10694  0134F6  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 10695  0134F8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10696  0134FA  277E               	addwf	??_Button_Poll& (0+255),f,b
 10697  0134FC  0E00               	movlw	0
 10698  0134FE  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 10699  013500  EE20 F001          	lfsr	2,1
 10700  013504  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10701  013506  26D9               	addwf	fsr2l,f,c
 10702  013508  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10703  01350A  22DA               	addwfc	fsr2h,f,c
 10704  01350C  50DF               	movf	indf2,w,c
 10705  01350E  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10706  013510  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10707  013512  517E               	movf	??_Button_Poll& (0+255),w,b
 10708  013514  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10709  013516  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 10710  013518  0A80               	xorlw	128
 10711  01351A  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 10712  01351C  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 10713  01351E  0A80               	xorlw	128
 10714  013520  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 10715  013522  B0D8               	btfsc	status,0,c
 10716  013524  0012               	return	
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;Button.c: 73: {
 10720                           ;Button.c: 75: pButton->mCount += pIncrement;
 10721  013526  EE20 F001          	lfsr	2,1
 10722  01352A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10723  01352C  26D9               	addwf	fsr2l,f,c
 10724  01352E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10725  013530  22DA               	addwfc	fsr2h,f,c
 10726  013532  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 10727  013534  26DF               	addwf	indf2,f,c
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 10731  013536  EE20 F002          	lfsr	2,2
 10732  01353A  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10733  01353C  26D9               	addwf	fsr2l,f,c
 10734  01353E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10735  013540  22DA               	addwfc	fsr2h,f,c
 10736  013542  EE10 F001          	lfsr	1,1
 10737  013546  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10738  013548  26E1               	addwf	fsr1l,f,c
 10739  01354A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10740  01354C  22E2               	addwfc	fsr1h,f,c
 10741  01354E  50E7               	movf	indf1,w,c
 10742  013550  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 10743  013552  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 10744  013554  50DE               	movf	postinc2,w,c
 10745  013556  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 10746  013558  50DE               	movf	postinc2,w,c
 10747  01355A  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 10748  01355C  A0D8               	btfss	status,0,c
 10749  01355E  0012               	return	
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;Button.c: 77: {
 10753                           ;Button.c: 79: pButton->mState = Pin;
 10754  013560  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 10755  013564  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 10756  013568  C083  FFDF         	movff	Button_Poll@Pin,indf2
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;Button.c: 80: pButton->mCount = 0;
 10760  01356C  EE20 F001          	lfsr	2,1
 10761  013570  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10762  013572  26D9               	addwf	fsr2l,f,c
 10763  013574  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10764  013576  22DA               	addwfc	fsr2h,f,c
 10765  013578  0E00               	movlw	0
 10766  01357A  6EDF               	movwf	indf2,c
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;Button.c: 83: pButton->mFunction(Pin);
 10770  01357C  EE20 F004          	lfsr	2,4
 10771  013580  517B               	movf	Button_Poll@pButton& (0+255),w,b
 10772  013582  26D9               	addwf	fsr2l,f,c
 10773  013584  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 10774  013586  22DA               	addwfc	fsr2h,f,c
 10775  013588  D801               	call	u12008
 10776  01358A  0012               	return	
 10777  01358C                     u12008:
 10778  01358C  0005               	push	
 10779  01358E  6EFA               	movwf	pclath,c
 10780  013590  50DE               	movf	postinc2,w,c
 10781  013592  6EFD               	movwf	tosl,c
 10782  013594  50DE               	movf	postinc2,w,c
 10783  013596  6EFE               	movwf	tosh,c
 10784  013598  50DE               	movf	postinc2,w,c
 10785  01359A  6EFF               	movwf	tosu,c
 10786  01359C  50FA               	movf	pclath,w,c
 10787  01359E  5183               	movf	Button_Poll@Pin& (0+255),w,b
 10788  0135A0  0012               	return		;indir
 10789  0135A2                     __end_of_Button_Poll:
 10790                           	opt stack 0
 10791                           tosu	equ	0xFFF
 10792                           tosh	equ	0xFFE
 10793                           tosl	equ	0xFFD
 10794                           pclath	equ	0xFFA
 10795                           tblptru	equ	0xFF8
 10796                           tblptrh	equ	0xFF7
 10797                           tblptrl	equ	0xFF6
 10798                           tablat	equ	0xFF5
 10799                           intcon	equ	0xFF2
 10800                           postinc0	equ	0xFEE
 10801                           wreg	equ	0xFE8
 10802                           indf1	equ	0xFE7
 10803                           postdec1	equ	0xFE5
 10804                           fsr1h	equ	0xFE2
 10805                           fsr1l	equ	0xFE1
 10806                           indf2	equ	0xFDF
 10807                           postinc2	equ	0xFDE
 10808                           postdec2	equ	0xFDD
 10809                           plusw2	equ	0xFDB
 10810                           fsr2h	equ	0xFDA
 10811                           fsr2l	equ	0xFD9
 10812                           status	equ	0xFD8
 10813                           
 10814 ;; *************** function _MXK_DIPSwitch *****************
 10815 ;; Defined at:
 10816 ;;		line 24 in file "Library/MXK.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;		None
 10819 ;; Auto vars:     Size  Location     Type
 10820 ;;		None
 10821 ;; Return value:  Size  Location     Type
 10822 ;;                  1    wreg      unsigned char 
 10823 ;; Registers used:
 10824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10825 ;; Tracked objects:
 10826 ;;		On entry : 0/0
 10827 ;;		On exit  : 0/0
 10828 ;;		Unchanged: 0/0
 10829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;Total ram usage:        0 bytes
 10835 ;; Hardware stack levels used:    1
 10836 ;; Hardware stack levels required when called:    8
 10837 ;; This function calls:
 10838 ;;		_Port_GetQuad
 10839 ;; This function is called by:
 10840 ;;		_FunctInitButton
 10841 ;;		_Button_Poll
 10842 ;;		_main
 10843 ;; This function uses a non-reentrant model
 10844 ;;
 10845                           
 10846                           	psect	text45
 10847  015F6C                     __ptext45:
 10848                           	opt stack 0
 10849  015F6C                     _MXK_DIPSwitch:
 10850                           	opt stack 22
 10851                           
 10852                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 10853                           
 10854                           ;incstack = 0
 10855  015F6C  0E9F               	movlw	low _PortD
 10856  015F6E  0100               	movlb	0	; () banked
 10857  015F70  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10858  015F72  0E01               	movlw	high _PortD
 10859  015F74  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10860  015F76  0E00               	movlw	0
 10861  015F78  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10862  015F7A  EC62  F0AC         	call	_Port_GetQuad
 10863  015F7E  0012               	return	
 10864  015F80                     __end_of_MXK_DIPSwitch:
 10865                           	opt stack 0
 10866                           tosu	equ	0xFFF
 10867                           tosh	equ	0xFFE
 10868                           tosl	equ	0xFFD
 10869                           pclath	equ	0xFFA
 10870                           tblptru	equ	0xFF8
 10871                           tblptrh	equ	0xFF7
 10872                           tblptrl	equ	0xFF6
 10873                           tablat	equ	0xFF5
 10874                           intcon	equ	0xFF2
 10875                           postinc0	equ	0xFEE
 10876                           wreg	equ	0xFE8
 10877                           indf1	equ	0xFE7
 10878                           postdec1	equ	0xFE5
 10879                           fsr1h	equ	0xFE2
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           plusw2	equ	0xFDB
 10885                           fsr2h	equ	0xFDA
 10886                           fsr2l	equ	0xFD9
 10887                           status	equ	0xFD8
 10888                           
 10889 ;; *************** function _HMI_DIPSwitch *****************
 10890 ;; Defined at:
 10891 ;;		line 47 in file "HMI.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;		None
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;		None
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  1    wreg      unsigned char 
 10898 ;; Registers used:
 10899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;Total ram usage:        0 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:    8
 10912 ;; This function calls:
 10913 ;;		_Port_GetQuad
 10914 ;; This function is called by:
 10915 ;;		_HMI_Init
 10916 ;;		_Button_Poll
 10917 ;;		_main
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text46
 10922  015F80                     __ptext46:
 10923                           	opt stack 0
 10924  015F80                     _HMI_DIPSwitch:
 10925                           	opt stack 20
 10926                           
 10927                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 10928                           
 10929                           ;incstack = 0
 10930  015F80  0E95               	movlw	low _PortE
 10931  015F82  0100               	movlb	0	; () banked
 10932  015F84  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 10933  015F86  0E01               	movlw	high _PortE
 10934  015F88  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 10935  015F8A  0E00               	movlw	0
 10936  015F8C  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 10937  015F8E  EC62  F0AC         	call	_Port_GetQuad	;wreg free
 10938  015F92  0012               	return	
 10939  015F94                     __end_of_HMI_DIPSwitch:
 10940                           	opt stack 0
 10941                           tosu	equ	0xFFF
 10942                           tosh	equ	0xFFE
 10943                           tosl	equ	0xFFD
 10944                           pclath	equ	0xFFA
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           intcon	equ	0xFF2
 10950                           postinc0	equ	0xFEE
 10951                           wreg	equ	0xFE8
 10952                           indf1	equ	0xFE7
 10953                           postdec1	equ	0xFE5
 10954                           fsr1h	equ	0xFE2
 10955                           fsr1l	equ	0xFE1
 10956                           indf2	equ	0xFDF
 10957                           postinc2	equ	0xFDE
 10958                           postdec2	equ	0xFDD
 10959                           plusw2	equ	0xFDB
 10960                           fsr2h	equ	0xFDA
 10961                           fsr2l	equ	0xFD9
 10962                           status	equ	0xFD8
 10963                           
 10964 ;; *************** function _HMI_DownSwitch *****************
 10965 ;; Defined at:
 10966 ;;		line 42 in file "HMI.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;		None
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;		None
 10971 ;; Return value:  Size  Location     Type
 10972 ;;                  1    wreg      unsigned char 
 10973 ;; Registers used:
 10974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10984 ;;Total ram usage:        0 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    8
 10987 ;; This function calls:
 10988 ;;		_Port_GetPin
 10989 ;; This function is called by:
 10990 ;;		_HMI_Init
 10991 ;;		_Button_Poll
 10992 ;;		_main
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           	psect	text47
 10997  015F94                     __ptext47:
 10998                           	opt stack 0
 10999  015F94                     _HMI_DownSwitch:
 11000                           	opt stack 20
 11001                           
 11002                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 11003                           
 11004                           ;incstack = 0
 11005  015F94  0E95               	movlw	low _PortE
 11006  015F96  0100               	movlb	0	; () banked
 11007  015F98  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11008  015F9A  0E01               	movlw	high _PortE
 11009  015F9C  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11010  015F9E  0E06               	movlw	6
 11011  015FA0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11012  015FA2  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11013  015FA6  0012               	return	
 11014  015FA8                     __end_of_HMI_DownSwitch:
 11015                           	opt stack 0
 11016                           tosu	equ	0xFFF
 11017                           tosh	equ	0xFFE
 11018                           tosl	equ	0xFFD
 11019                           pclath	equ	0xFFA
 11020                           tblptru	equ	0xFF8
 11021                           tblptrh	equ	0xFF7
 11022                           tblptrl	equ	0xFF6
 11023                           tablat	equ	0xFF5
 11024                           intcon	equ	0xFF2
 11025                           postinc0	equ	0xFEE
 11026                           wreg	equ	0xFE8
 11027                           indf1	equ	0xFE7
 11028                           postdec1	equ	0xFE5
 11029                           fsr1h	equ	0xFE2
 11030                           fsr1l	equ	0xFE1
 11031                           indf2	equ	0xFDF
 11032                           postinc2	equ	0xFDE
 11033                           postdec2	equ	0xFDD
 11034                           plusw2	equ	0xFDB
 11035                           fsr2h	equ	0xFDA
 11036                           fsr2l	equ	0xFD9
 11037                           status	equ	0xFD8
 11038                           
 11039 ;; *************** function _HMI_UpSwitch *****************
 11040 ;; Defined at:
 11041 ;;		line 37 in file "HMI.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;		None
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;		None
 11046 ;; Return value:  Size  Location     Type
 11047 ;;                  1    wreg      unsigned char 
 11048 ;; Registers used:
 11049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11059 ;;Total ram usage:        0 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:    8
 11062 ;; This function calls:
 11063 ;;		_Port_GetPin
 11064 ;; This function is called by:
 11065 ;;		_HMI_Init
 11066 ;;		_Button_Poll
 11067 ;;		_main
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           	psect	text48
 11072  015FA8                     __ptext48:
 11073                           	opt stack 0
 11074  015FA8                     _HMI_UpSwitch:
 11075                           	opt stack 22
 11076                           
 11077                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 11078                           
 11079                           ;incstack = 0
 11080  015FA8  0E95               	movlw	low _PortE
 11081  015FAA  0100               	movlb	0	; () banked
 11082  015FAC  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11083  015FAE  0E01               	movlw	high _PortE
 11084  015FB0  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11085  015FB2  0E07               	movlw	7
 11086  015FB4  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11087  015FB6  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11088  015FBA  0012               	return	
 11089  015FBC                     __end_of_HMI_UpSwitch:
 11090                           	opt stack 0
 11091                           tosu	equ	0xFFF
 11092                           tosh	equ	0xFFE
 11093                           tosl	equ	0xFFD
 11094                           pclath	equ	0xFFA
 11095                           tblptru	equ	0xFF8
 11096                           tblptrh	equ	0xFF7
 11097                           tblptrl	equ	0xFF6
 11098                           tablat	equ	0xFF5
 11099                           intcon	equ	0xFF2
 11100                           postinc0	equ	0xFEE
 11101                           wreg	equ	0xFE8
 11102                           indf1	equ	0xFE7
 11103                           postdec1	equ	0xFE5
 11104                           fsr1h	equ	0xFE2
 11105                           fsr1l	equ	0xFE1
 11106                           indf2	equ	0xFDF
 11107                           postinc2	equ	0xFDE
 11108                           postdec2	equ	0xFDD
 11109                           plusw2	equ	0xFDB
 11110                           fsr2h	equ	0xFDA
 11111                           fsr2l	equ	0xFD9
 11112                           status	equ	0xFD8
 11113                           
 11114 ;; *************** function _HMI_RightSwitch *****************
 11115 ;; Defined at:
 11116 ;;		line 32 in file "HMI.c"
 11117 ;; Parameters:    Size  Location     Type
 11118 ;;		None
 11119 ;; Auto vars:     Size  Location     Type
 11120 ;;		None
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  1    wreg      unsigned char 
 11123 ;; Registers used:
 11124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;Total ram usage:        0 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; Hardware stack levels required when called:    8
 11137 ;; This function calls:
 11138 ;;		_Port_GetPin
 11139 ;; This function is called by:
 11140 ;;		_HMI_Init
 11141 ;;		_Button_Poll
 11142 ;;		_main
 11143 ;; This function uses a non-reentrant model
 11144 ;;
 11145                           
 11146                           	psect	text49
 11147  015FBC                     __ptext49:
 11148                           	opt stack 0
 11149  015FBC                     _HMI_RightSwitch:
 11150                           	opt stack 22
 11151                           
 11152                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 11153                           
 11154                           ;incstack = 0
 11155  015FBC  0E95               	movlw	low _PortE
 11156  015FBE  0100               	movlb	0	; () banked
 11157  015FC0  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11158  015FC2  0E01               	movlw	high _PortE
 11159  015FC4  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11160  015FC6  0E04               	movlw	4
 11161  015FC8  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11162  015FCA  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11163  015FCE  0012               	return	
 11164  015FD0                     __end_of_HMI_RightSwitch:
 11165                           	opt stack 0
 11166                           tosu	equ	0xFFF
 11167                           tosh	equ	0xFFE
 11168                           tosl	equ	0xFFD
 11169                           pclath	equ	0xFFA
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           intcon	equ	0xFF2
 11175                           postinc0	equ	0xFEE
 11176                           wreg	equ	0xFE8
 11177                           indf1	equ	0xFE7
 11178                           postdec1	equ	0xFE5
 11179                           fsr1h	equ	0xFE2
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           plusw2	equ	0xFDB
 11185                           fsr2h	equ	0xFDA
 11186                           fsr2l	equ	0xFD9
 11187                           status	equ	0xFD8
 11188                           
 11189 ;; *************** function _HMI_LeftSwitch *****************
 11190 ;; Defined at:
 11191 ;;		line 27 in file "HMI.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;		None
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;		None
 11196 ;; Return value:  Size  Location     Type
 11197 ;;                  1    wreg      unsigned char 
 11198 ;; Registers used:
 11199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11200 ;; Tracked objects:
 11201 ;;		On entry : 0/0
 11202 ;;		On exit  : 0/0
 11203 ;;		Unchanged: 0/0
 11204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11209 ;;Total ram usage:        0 bytes
 11210 ;; Hardware stack levels used:    1
 11211 ;; Hardware stack levels required when called:    8
 11212 ;; This function calls:
 11213 ;;		_Port_GetPin
 11214 ;; This function is called by:
 11215 ;;		_HMI_Init
 11216 ;;		_Button_Poll
 11217 ;;		_main
 11218 ;; This function uses a non-reentrant model
 11219 ;;
 11220                           
 11221                           	psect	text50
 11222  015FD0                     __ptext50:
 11223                           	opt stack 0
 11224  015FD0                     _HMI_LeftSwitch:
 11225                           	opt stack 20
 11226                           
 11227                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 11228                           
 11229                           ;incstack = 0
 11230  015FD0  0E95               	movlw	low _PortE
 11231  015FD2  0100               	movlb	0	; () banked
 11232  015FD4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11233  015FD6  0E01               	movlw	high _PortE
 11234  015FD8  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11235  015FDA  0E05               	movlw	5
 11236  015FDC  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11237  015FDE  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11238  015FE2  0012               	return	
 11239  015FE4                     __end_of_HMI_LeftSwitch:
 11240                           	opt stack 0
 11241                           tosu	equ	0xFFF
 11242                           tosh	equ	0xFFE
 11243                           tosl	equ	0xFFD
 11244                           pclath	equ	0xFFA
 11245                           tblptru	equ	0xFF8
 11246                           tblptrh	equ	0xFF7
 11247                           tblptrl	equ	0xFF6
 11248                           tablat	equ	0xFF5
 11249                           intcon	equ	0xFF2
 11250                           postinc0	equ	0xFEE
 11251                           wreg	equ	0xFE8
 11252                           indf1	equ	0xFE7
 11253                           postdec1	equ	0xFE5
 11254                           fsr1h	equ	0xFE2
 11255                           fsr1l	equ	0xFE1
 11256                           indf2	equ	0xFDF
 11257                           postinc2	equ	0xFDE
 11258                           postdec2	equ	0xFDD
 11259                           plusw2	equ	0xFDB
 11260                           fsr2h	equ	0xFDA
 11261                           fsr2l	equ	0xFD9
 11262                           status	equ	0xFD8
 11263                           
 11264 ;; *************** function _MXK_TestButton *****************
 11265 ;; Defined at:
 11266 ;;		line 14 in file "Library/MXK.c"
 11267 ;; Parameters:    Size  Location     Type
 11268 ;;		None
 11269 ;; Auto vars:     Size  Location     Type
 11270 ;;		None
 11271 ;; Return value:  Size  Location     Type
 11272 ;;                  1    wreg      unsigned char 
 11273 ;; Registers used:
 11274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11275 ;; Tracked objects:
 11276 ;;		On entry : 0/0
 11277 ;;		On exit  : 0/0
 11278 ;;		Unchanged: 0/0
 11279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11284 ;;Total ram usage:        0 bytes
 11285 ;; Hardware stack levels used:    1
 11286 ;; Hardware stack levels required when called:    8
 11287 ;; This function calls:
 11288 ;;		_Port_GetPin
 11289 ;; This function is called by:
 11290 ;;		_FunctInitButton
 11291 ;;		_Button_Poll
 11292 ;;		_main
 11293 ;; This function uses a non-reentrant model
 11294 ;;
 11295                           
 11296                           	psect	text51
 11297  015FE4                     __ptext51:
 11298                           	opt stack 0
 11299  015FE4                     _MXK_TestButton:
 11300                           	opt stack 22
 11301                           
 11302                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 11303                           
 11304                           ;incstack = 0
 11305  015FE4  0EA9               	movlw	low _PortB
 11306  015FE6  0100               	movlb	0	; () banked
 11307  015FE8  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 11308  015FEA  0E01               	movlw	high _PortB
 11309  015FEC  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 11310  015FEE  0E04               	movlw	4
 11311  015FF0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 11312  015FF2  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 11313  015FF6  0012               	return	
 11314  015FF8                     __end_of_MXK_TestButton:
 11315                           	opt stack 0
 11316                           tosu	equ	0xFFF
 11317                           tosh	equ	0xFFE
 11318                           tosl	equ	0xFFD
 11319                           pclath	equ	0xFFA
 11320                           tblptru	equ	0xFF8
 11321                           tblptrh	equ	0xFF7
 11322                           tblptrl	equ	0xFF6
 11323                           tablat	equ	0xFF5
 11324                           intcon	equ	0xFF2
 11325                           postinc0	equ	0xFEE
 11326                           wreg	equ	0xFE8
 11327                           indf1	equ	0xFE7
 11328                           postdec1	equ	0xFE5
 11329                           fsr1h	equ	0xFE2
 11330                           fsr1l	equ	0xFE1
 11331                           indf2	equ	0xFDF
 11332                           postinc2	equ	0xFDE
 11333                           postdec2	equ	0xFDD
 11334                           plusw2	equ	0xFDB
 11335                           fsr2h	equ	0xFDA
 11336                           fsr2l	equ	0xFD9
 11337                           status	equ	0xFD8
 11338                           
 11339 ;; *************** function _Port_GetQuad *****************
 11340 ;; Defined at:
 11341 ;;		line 498 in file "Library/Port.c"
 11342 ;; Parameters:    Size  Location     Type
 11343 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 11344 ;;		 -> PortE(10), PortD(10), 
 11345 ;;  pQuad           1    2[BANK0 ] enum E6776
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;  Output          1    5[BANK0 ] unsigned char 
 11348 ;; Return value:  Size  Location     Type
 11349 ;;                  1    wreg      unsigned char 
 11350 ;; Registers used:
 11351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/0
 11354 ;;		On exit  : 0/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11357 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11360 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11361 ;;Total ram usage:        6 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:    7
 11364 ;; This function calls:
 11365 ;;		Nothing
 11366 ;; This function is called by:
 11367 ;;		_HMI_DIPSwitch
 11368 ;;		_MXK_DIPSwitch
 11369 ;;		_Port_ToggleQuad
 11370 ;; This function uses a non-reentrant model
 11371 ;;
 11372                           
 11373                           	psect	text52
 11374  0158C4                     __ptext52:
 11375                           	opt stack 0
 11376  0158C4                     _Port_GetQuad:
 11377                           	opt stack 22
 11378                           
 11379                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 11380                           
 11381                           ;incstack = 0
 11382  0158C4  0100               	movlb	0	; () banked
 11383  0158C6  EE20 F006          	lfsr	2,6
 11384  0158CA  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 11385  0158CC  26D9               	addwf	fsr2l,f,c
 11386  0158CE  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 11387  0158D0  22DA               	addwfc	fsr2h,f,c
 11388  0158D2  CFDE F063          	movff	postinc2,??_Port_GetQuad
 11389  0158D6  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 11390  0158DA  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 11391  0158DE  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 11392  0158E2  50DF               	movf	indf2,w,c
 11393  0158E4  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 11397  0158E6  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 11398  0158E8  0D04               	mullw	4
 11399  0158EA  28F3               	incf	prodl,w,c
 11400  0158EC  6F63               	movwf	??_Port_GetQuad& (0+255),b
 11401  0158EE  D002               	goto	u11240
 11402  0158F0                     u11245:
 11403  0158F0  90D8               	bcf	status,0,c
 11404  0158F2  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 11405  0158F4                     u11240:
 11406  0158F4  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 11407  0158F6  D7FC               	goto	u11245
 11408                           
 11409                           ;Port.c: 502: Output &= 0xF;
 11410  0158F8  0E0F               	movlw	15
 11411  0158FA  0100               	movlb	0	; () banked
 11412  0158FC  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;Port.c: 503: return Output;
 11416  0158FE  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 11417  015900  0012               	return	
 11418  015902                     __end_of_Port_GetQuad:
 11419                           	opt stack 0
 11420                           tosu	equ	0xFFF
 11421                           tosh	equ	0xFFE
 11422                           tosl	equ	0xFFD
 11423                           pclath	equ	0xFFA
 11424                           tblptru	equ	0xFF8
 11425                           tblptrh	equ	0xFF7
 11426                           tblptrl	equ	0xFF6
 11427                           tablat	equ	0xFF5
 11428                           prodl	equ	0xFF3
 11429                           intcon	equ	0xFF2
 11430                           postinc0	equ	0xFEE
 11431                           wreg	equ	0xFE8
 11432                           indf1	equ	0xFE7
 11433                           postdec1	equ	0xFE5
 11434                           fsr1h	equ	0xFE2
 11435                           fsr1l	equ	0xFE1
 11436                           indf2	equ	0xFDF
 11437                           postinc2	equ	0xFDE
 11438                           postdec2	equ	0xFDD
 11439                           plusw2	equ	0xFDB
 11440                           fsr2h	equ	0xFDA
 11441                           fsr2l	equ	0xFD9
 11442                           status	equ	0xFD8
 11443                           
 11444 ;; *************** function _Event_DIPSwitch *****************
 11445 ;; Defined at:
 11446 ;;		line 22 in file "Events.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;  pState          1    wreg     unsigned char 
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;  pState          1   25[BANK0 ] unsigned char 
 11451 ;;  Bar             1   26[BANK0 ] unsigned char 
 11452 ;; Return value:  Size  Location     Type
 11453 ;;                  1    wreg      void 
 11454 ;; Registers used:
 11455 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11456 ;; Tracked objects:
 11457 ;;		On entry : 0/0
 11458 ;;		On exit  : 0/0
 11459 ;;		Unchanged: 0/0
 11460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11464 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11465 ;;Total ram usage:        2 bytes
 11466 ;; Hardware stack levels used:    1
 11467 ;; Hardware stack levels required when called:   13
 11468 ;; This function calls:
 11469 ;;		_HMI_GetBar
 11470 ;;		_HMI_SetBar
 11471 ;;		_LED_Toggle
 11472 ;; This function is called by:
 11473 ;;		_FunctInitButton
 11474 ;;		_Button_Poll
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           	psect	text53
 11479  015D0C                     __ptext53:
 11480                           	opt stack 0
 11481  015D0C                     _Event_DIPSwitch:
 11482                           	opt stack 15
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;incstack = 0
 11486                           ;Event_DIPSwitch@pState stored from wreg
 11487  015D0C  0100               	movlb	0	; () banked
 11488  015D0E  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 11489                           
 11490                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 11491  015D10  EC67  F0B0         	call	_HMI_GetBar	;wreg free
 11492  015D14  0100               	movlb	0	; () banked
 11493  015D16  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;Events.c: 25: Bar &= 0x0F;
 11497  015D18  0E0F               	movlw	15
 11498  015D1A  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;Events.c: 26: pState <<= 4;
 11502  015D1C  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 11503  015D1E  0EF0               	movlw	240
 11504  015D20  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 11508  015D22  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 11509  015D24  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 11510  015D26  EC47  F0B0         	call	_HMI_SetBar
 11511                           
 11512                           ;Events.c: 32: LED_Toggle(eLED1);
 11513  015D2A  0E00               	movlw	0
 11514  015D2C  EC03  F0AC         	call	_LED_Toggle
 11515  015D30  0012               	return		;funcret
 11516  015D32                     __end_of_Event_DIPSwitch:
 11517                           	opt stack 0
 11518                           tosu	equ	0xFFF
 11519                           tosh	equ	0xFFE
 11520                           tosl	equ	0xFFD
 11521                           pclath	equ	0xFFA
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodl	equ	0xFF3
 11527                           intcon	equ	0xFF2
 11528                           postinc0	equ	0xFEE
 11529                           wreg	equ	0xFE8
 11530                           indf1	equ	0xFE7
 11531                           postdec1	equ	0xFE5
 11532                           fsr1h	equ	0xFE2
 11533                           fsr1l	equ	0xFE1
 11534                           indf2	equ	0xFDF
 11535                           postinc2	equ	0xFDE
 11536                           postdec2	equ	0xFDD
 11537                           plusw2	equ	0xFDB
 11538                           fsr2h	equ	0xFDA
 11539                           fsr2l	equ	0xFD9
 11540                           status	equ	0xFD8
 11541                           
 11542 ;; *************** function _Event_NULL *****************
 11543 ;; Defined at:
 11544 ;;		line 9 in file "Events.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;  pState          1    wreg     unsigned char 
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  pState          1    0[COMRAM] unsigned char 
 11549 ;; Return value:  Size  Location     Type
 11550 ;;                  1    wreg      void 
 11551 ;; Registers used:
 11552 ;;		wreg
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11562 ;;Total ram usage:        0 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    7
 11565 ;; This function calls:
 11566 ;;		Nothing
 11567 ;; This function is called by:
 11568 ;;		_HMI_Init
 11569 ;;		_Button_Poll
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text54
 11574  001404                     __ptext54:
 11575                           	opt stack 0
 11576  001404                     _Event_NULL:
 11577                           	opt stack 21
 11578                           
 11579                           ;incstack = 0
 11580  001404  0012               	return		;funcret
 11581  001406                     __end_of_Event_NULL:
 11582                           	opt stack 0
 11583                           tosu	equ	0xFFF
 11584                           tosh	equ	0xFFE
 11585                           tosl	equ	0xFFD
 11586                           pclath	equ	0xFFA
 11587                           tblptru	equ	0xFF8
 11588                           tblptrh	equ	0xFF7
 11589                           tblptrl	equ	0xFF6
 11590                           tablat	equ	0xFF5
 11591                           prodl	equ	0xFF3
 11592                           intcon	equ	0xFF2
 11593                           postinc0	equ	0xFEE
 11594                           wreg	equ	0xFE8
 11595                           indf1	equ	0xFE7
 11596                           postdec1	equ	0xFE5
 11597                           fsr1h	equ	0xFE2
 11598                           fsr1l	equ	0xFE1
 11599                           indf2	equ	0xFDF
 11600                           postinc2	equ	0xFDE
 11601                           postdec2	equ	0xFDD
 11602                           plusw2	equ	0xFDB
 11603                           fsr2h	equ	0xFDA
 11604                           fsr2l	equ	0xFD9
 11605                           status	equ	0xFD8
 11606                           
 11607 ;; *************** function _Event_TestButton *****************
 11608 ;; Defined at:
 11609 ;;		line 52 in file "Events.c"
 11610 ;; Parameters:    Size  Location     Type
 11611 ;;  pState          1    wreg     unsigned char 
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  pState          1   25[BANK0 ] unsigned char 
 11614 ;; Return value:  Size  Location     Type
 11615 ;;                  1    wreg      void 
 11616 ;; Registers used:
 11617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11618 ;; Tracked objects:
 11619 ;;		On entry : 0/0
 11620 ;;		On exit  : 0/0
 11621 ;;		Unchanged: 0/0
 11622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11626 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11627 ;;Total ram usage:        1 bytes
 11628 ;; Hardware stack levels used:    1
 11629 ;; Hardware stack levels required when called:   13
 11630 ;; This function calls:
 11631 ;;		_HMI_SetButton
 11632 ;;		_HMI_SetNumber
 11633 ;;		_LED_Toggle
 11634 ;; This function is called by:
 11635 ;;		_FunctInitButton
 11636 ;;		_Button_Poll
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           	psect	text55
 11641  015AC4                     __ptext55:
 11642                           	opt stack 0
 11643  015AC4                     _Event_TestButton:
 11644                           	opt stack 15
 11645                           
 11646                           ;incstack = 0
 11647                           ;Event_TestButton@pState stored from wreg
 11648  015AC4  0100               	movlb	0	; () banked
 11649  015AC6  6F79               	movwf	Event_TestButton@pState& (0+255),b
 11650                           
 11651                           ;Events.c: 56: static UINT8 j = 0;
 11652                           ;Events.c: 60: if (pState == 0)
 11653  015AC8  0100               	movlb	0	; () banked
 11654  015ACA  5179               	movf	Event_TestButton@pState& (0+255),w,b
 11655  015ACC  A4D8               	btfss	status,2,c
 11656  015ACE  D010               	goto	l1873
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;Events.c: 61: {
 11660                           ;Events.c: 62: j++;
 11661  015AD0  2A39               	incf	Event_TestButton@j,f,c
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;Events.c: 63: val += j;
 11665  015AD2  5039               	movf	Event_TestButton@j,w,c
 11666  015AD4  0101               	movlb	1	; () banked
 11667  015AD6  2736               	addwf	_val& (0+255),f,b
 11668  015AD8  0E00               	movlw	0
 11669  015ADA  2337               	addwfc	(_val+1)& (0+255),f,b
 11670                           
 11671                           ; BSR set to: 1
 11672                           ;Events.c: 64: HMI_SetNumber( val );
 11673  015ADC  C136  F076         	movff	_val,HMI_SetNumber@pInput
 11674  015AE0  C137  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 11675  015AE4  EC99  F0AE         	call	_HMI_SetNumber	;wreg free
 11676                           
 11677                           ;Events.c: 67: HMI_SetButton( j & 3 );
 11678  015AE8  5039               	movf	Event_TestButton@j,w,c
 11679  015AEA  0B03               	andlw	3
 11680  015AEC  EC49  F0A5         	call	_HMI_SetButton
 11681  015AF0                     l1873:
 11682                           
 11683                           ;Events.c: 68: }
 11684                           ;Events.c: 72: LED_Toggle(eLED1);
 11685  015AF0  0E00               	movlw	0
 11686  015AF2  EC03  F0AC         	call	_LED_Toggle
 11687  015AF6  0012               	return		;funcret
 11688  015AF8                     __end_of_Event_TestButton:
 11689                           	opt stack 0
 11690                           tosu	equ	0xFFF
 11691                           tosh	equ	0xFFE
 11692                           tosl	equ	0xFFD
 11693                           pclath	equ	0xFFA
 11694                           tblptru	equ	0xFF8
 11695                           tblptrh	equ	0xFF7
 11696                           tblptrl	equ	0xFF6
 11697                           tablat	equ	0xFF5
 11698                           prodl	equ	0xFF3
 11699                           intcon	equ	0xFF2
 11700                           postinc0	equ	0xFEE
 11701                           wreg	equ	0xFE8
 11702                           indf1	equ	0xFE7
 11703                           postdec1	equ	0xFE5
 11704                           fsr1h	equ	0xFE2
 11705                           fsr1l	equ	0xFE1
 11706                           indf2	equ	0xFDF
 11707                           postinc2	equ	0xFDE
 11708                           postdec2	equ	0xFDD
 11709                           plusw2	equ	0xFDB
 11710                           fsr2h	equ	0xFDA
 11711                           fsr2l	equ	0xFD9
 11712                           status	equ	0xFD8
 11713                           
 11714 ;; *************** function _HMI_SetButton *****************
 11715 ;; Defined at:
 11716 ;;		line 186 in file "HMI.c"
 11717 ;; Parameters:    Size  Location     Type
 11718 ;;  pValue          1    wreg     unsigned char 
 11719 ;; Auto vars:     Size  Location     Type
 11720 ;;  pValue          1    6[BANK0 ] unsigned char 
 11721 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 11722 ;;  v               1    7[BANK0 ] unsigned char 
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  1    wreg      void 
 11725 ;; Registers used:
 11726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11735 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11736 ;;Total ram usage:        8 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    7
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		_Event_TestButton
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           	psect	text56
 11747  014A92                     __ptext56:
 11748                           	opt stack 0
 11749  014A92                     _HMI_SetButton:
 11750                           	opt stack 20
 11751                           
 11752                           ;incstack = 0
 11753                           ;HMI_SetButton@pValue stored from wreg
 11754  014A92  0100               	movlb	0	; () banked
 11755  014A94  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 11756                           
 11757                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 11758  014A96  0E3C               	movlw	low HMI_SetButton@F7213
 11759  014A98  6EF6               	movwf	tblptrl,c
 11760  014A9A                     	if	1	;There is more than 1 active tblptr byte
 11761  014A9A  0EFC               	movlw	high HMI_SetButton@F7213
 11762  014A9C  6EF7               	movwf	tblptrh,c
 11763  014A9E                     	endif
 11764  014A9E                     	if	1	;There are 3 active tblptr bytes
 11765  014A9E  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 11766  014AA0  6EF8               	movwf	tblptru,c
 11767  014AA2                     	endif
 11768  014AA2  0009               	tblrd		*+
 11769  014AA4  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 11770  014AA8  0009               	tblrd		*+
 11771  014AAA  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 11772  014AAE  0009               	tblrd		*+
 11773  014AB0  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 11774  014AB4  000A               	tblrd		*-
 11775  014AB6  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 11776                           
 11777                           ;HMI.c: 189: UINT8 v = 0b00010001;
 11778  014ABA  0E11               	movlw	17
 11779  014ABC  0100               	movlb	0	; () banked
 11780  014ABE  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11781                           
 11782                           ; BSR set to: 0
 11783                           ;HMI.c: 190: pValue &= 3;
 11784  014AC0  0E03               	movlw	3
 11785  014AC2  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;HMI.c: 191: v = v << reindex[pValue];
 11789  014AC4  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 11790  014AC6  0D01               	mullw	1
 11791  014AC8  0E62               	movlw	low HMI_SetButton@reindex
 11792  014ACA  24F3               	addwf	prodl,w,c
 11793  014ACC  6ED9               	movwf	fsr2l,c
 11794  014ACE  0E00               	movlw	high HMI_SetButton@reindex
 11795  014AD0  20F4               	addwfc	prodh,w,c
 11796  014AD2  6EDA               	movwf	fsr2h,c
 11797  014AD4  50DF               	movf	indf2,w,c
 11798  014AD6  6F60               	movwf	??_HMI_SetButton& (0+255),b
 11799  014AD8  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 11800  014ADC  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 11801  014ADE  D002               	goto	u11404
 11802  014AE0                     u11405:
 11803  014AE0  90D8               	bcf	status,0,c
 11804  014AE2  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 11805  014AE4                     u11404:
 11806  014AE4  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 11807  014AE6  D7FC               	goto	u11405
 11808  014AE8  0100               	movlb	0	; () banked
 11809  014AEA  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 11810  014AEC  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;HMI.c: 192: v = v >> 4;
 11814  014AEE  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 11815  014AF0  0B0F               	andlw	15
 11816  014AF2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;HMI.c: 193: v = v & 0x0F;
 11820  014AF4  5167               	movf	HMI_SetButton@v& (0+255),w,b
 11821  014AF6  0B0F               	andlw	15
 11822  014AF8  6F67               	movwf	HMI_SetButton@v& (0+255),b
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;HMI.c: 194: HMIBoard.pButton = v;
 11826  014AFA  0101               	movlb	1	; () banked
 11827  014AFC  514C               	movf	(_HMIBoard+6)& (0+255),w,b
 11828  014AFE  0100               	movlb	0	; () banked
 11829  014B00  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11830  014B02  0BF0               	andlw	-16
 11831  014B04  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 11832  014B06  0101               	movlb	1	; () banked
 11833  014B08  6F4C               	movwf	(_HMIBoard+6)& (0+255),b
 11834                           
 11835                           ; BSR set to: 1
 11836  014B0A  0012               	return		;funcret
 11837  014B0C                     __end_of_HMI_SetButton:
 11838                           	opt stack 0
 11839                           tosu	equ	0xFFF
 11840                           tosh	equ	0xFFE
 11841                           tosl	equ	0xFFD
 11842                           pclath	equ	0xFFA
 11843                           tblptru	equ	0xFF8
 11844                           tblptrh	equ	0xFF7
 11845                           tblptrl	equ	0xFF6
 11846                           tablat	equ	0xFF5
 11847                           prodh	equ	0xFF4
 11848                           prodl	equ	0xFF3
 11849                           intcon	equ	0xFF2
 11850                           postinc0	equ	0xFEE
 11851                           wreg	equ	0xFE8
 11852                           indf1	equ	0xFE7
 11853                           postdec1	equ	0xFE5
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           postdec2	equ	0xFDD
 11859                           plusw2	equ	0xFDB
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _LED_Toggle *****************
 11865 ;; Defined at:
 11866 ;;		line 50 in file "Library/LED.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;  pLED            1    wreg     enum E6739
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  pLED            1   24[BANK0 ] enum E6739
 11871 ;; Return value:  Size  Location     Type
 11872 ;;                  1    wreg      void 
 11873 ;; Registers used:
 11874 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;Total ram usage:        1 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:   12
 11887 ;; This function calls:
 11888 ;;		_Port_TogglePin
 11889 ;; This function is called by:
 11890 ;;		_LCD_Reset
 11891 ;;		_Event_DIPSwitch
 11892 ;;		_Event_TestButton
 11893 ;;		_Event_ADCSequenceComplete
 11894 ;;		_Event_HMI_DIPSwitch
 11895 ;;		_Event_HMI_LeftButton
 11896 ;;		_Event_HMI_RightButton
 11897 ;;		_Event_HMI_UpButton
 11898 ;;		_Event_HMI_DownButton
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           	psect	text57
 11903  015806                     __ptext57:
 11904                           	opt stack 0
 11905  015806                     _LED_Toggle:
 11906                           	opt stack 15
 11907                           
 11908                           ; BSR set to: 1
 11909                           ;incstack = 0
 11910                           ;LED_Toggle@pLED stored from wreg
 11911  015806  0100               	movlb	0	; () banked
 11912  015808  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 11913                           
 11914                           ;LED.c: 52: switch (pLED)
 11915  01580A  D014               	goto	l234
 11916  01580C                     
 11917                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 11918  01580C  0EB3               	movlw	low _PortC
 11919  01580E  0100               	movlb	0	; () banked
 11920  015810  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11921  015812  0E01               	movlw	high _PortC
 11922  015814  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11923  015816  0E00               	movlw	0
 11924  015818  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11925  01581A  ECF5  F0AD         	call	_Port_TogglePin	;wreg free
 11926                           
 11927                           ;LED.c: 56: break;
 11928  01581E  0012               	return	
 11929  015820                     
 11930                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 11931  015820  0EB3               	movlw	low _PortC
 11932  015822  0100               	movlb	0	; () banked
 11933  015824  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 11934  015826  0E01               	movlw	high _PortC
 11935  015828  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 11936  01582A  0E01               	movlw	1
 11937  01582C  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 11938  01582E  ECF5  F0AD         	call	_Port_TogglePin	;wreg free
 11939                           
 11940                           ;LED.c: 60: }
 11941                           
 11942                           ;LED.c: 59: break;
 11943  015832  0012               	return	
 11944  015834                     l234:
 11945  015834  0100               	movlb	0	; () banked
 11946  015836  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 11947                           
 11948                           ; Switch size 1, requested type "space"
 11949                           ; Number of cases is 2, Range of values is 0 to 1
 11950                           ; switch strategies available:
 11951                           ; Name         Instructions Cycles
 11952                           ; simple_byte            7     4 (average)
 11953                           ;	Chosen strategy is simple_byte
 11954  015838  0A00               	xorlw	0	; case 0
 11955  01583A  B4D8               	btfsc	status,2,c
 11956  01583C  D7E7               	goto	l235
 11957  01583E  0A01               	xorlw	1	; case 1
 11958  015840  A4D8               	btfss	status,2,c
 11959  015842  0012               	return	
 11960  015844  D7ED               	goto	l237
 11961  015846                     __end_of_LED_Toggle:
 11962                           	opt stack 0
 11963                           tosu	equ	0xFFF
 11964                           tosh	equ	0xFFE
 11965                           tosl	equ	0xFFD
 11966                           pclath	equ	0xFFA
 11967                           tblptru	equ	0xFF8
 11968                           tblptrh	equ	0xFF7
 11969                           tblptrl	equ	0xFF6
 11970                           tablat	equ	0xFF5
 11971                           prodh	equ	0xFF4
 11972                           prodl	equ	0xFF3
 11973                           intcon	equ	0xFF2
 11974                           postinc0	equ	0xFEE
 11975                           wreg	equ	0xFE8
 11976                           indf1	equ	0xFE7
 11977                           postdec1	equ	0xFE5
 11978                           fsr1h	equ	0xFE2
 11979                           fsr1l	equ	0xFE1
 11980                           indf2	equ	0xFDF
 11981                           postinc2	equ	0xFDE
 11982                           postdec2	equ	0xFDD
 11983                           plusw2	equ	0xFDB
 11984                           fsr2h	equ	0xFDA
 11985                           fsr2l	equ	0xFD9
 11986                           status	equ	0xFD8
 11987                           
 11988 ;; *************** function _Port_TogglePin *****************
 11989 ;; Defined at:
 11990 ;;		line 278 in file "Library/Port.c"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 11993 ;;		 -> PortC(10), 
 11994 ;;  pPin            1   22[BANK0 ] enum E6750
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;  Value           1   23[BANK0 ] unsigned char 
 11997 ;; Return value:  Size  Location     Type
 11998 ;;                  1    wreg      void 
 11999 ;; Registers used:
 12000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12006 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12009 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12010 ;;Total ram usage:        4 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:   11
 12013 ;; This function calls:
 12014 ;;		_Port_GetPin
 12015 ;;		_Port_SetPin
 12016 ;; This function is called by:
 12017 ;;		_LED_Toggle
 12018 ;; This function uses a non-reentrant model
 12019 ;;
 12020                           
 12021                           	psect	text58
 12022  015BEA                     __ptext58:
 12023                           	opt stack 0
 12024  015BEA                     _Port_TogglePin:
 12025                           	opt stack 15
 12026                           
 12027                           ;Port.c: 280: UINT8 Value;
 12028                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 12029                           
 12030                           ;incstack = 0
 12031  015BEA  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 12032  015BEE  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 12033  015BF2  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 12034  015BF6  ECBC  F0AC         	call	_Port_GetPin	;wreg free
 12035  015BFA  0100               	movlb	0	; () banked
 12036  015BFC  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;Port.c: 282: Value ^= 0x01;
 12040  015BFE  0E01               	movlw	1
 12041  015C00  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 12045  015C02  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 12046  015C06  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 12047  015C0A  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 12048  015C0E  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 12049  015C12  ECC1  F09F         	call	_Port_SetPin	;wreg free
 12050  015C16  0012               	return		;funcret
 12051  015C18                     __end_of_Port_TogglePin:
 12052                           	opt stack 0
 12053                           tosu	equ	0xFFF
 12054                           tosh	equ	0xFFE
 12055                           tosl	equ	0xFFD
 12056                           pclath	equ	0xFFA
 12057                           tblptru	equ	0xFF8
 12058                           tblptrh	equ	0xFF7
 12059                           tblptrl	equ	0xFF6
 12060                           tablat	equ	0xFF5
 12061                           prodh	equ	0xFF4
 12062                           prodl	equ	0xFF3
 12063                           intcon	equ	0xFF2
 12064                           postinc0	equ	0xFEE
 12065                           wreg	equ	0xFE8
 12066                           indf1	equ	0xFE7
 12067                           postdec1	equ	0xFE5
 12068                           fsr1h	equ	0xFE2
 12069                           fsr1l	equ	0xFE1
 12070                           indf2	equ	0xFDF
 12071                           postinc2	equ	0xFDE
 12072                           postdec2	equ	0xFDD
 12073                           plusw2	equ	0xFDB
 12074                           fsr2h	equ	0xFDA
 12075                           fsr2l	equ	0xFD9
 12076                           status	equ	0xFD8
 12077                           
 12078 ;; *************** function _Port_SetPin *****************
 12079 ;; Defined at:
 12080 ;;		line 247 in file "Library/Port.c"
 12081 ;; Parameters:    Size  Location     Type
 12082 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 12083 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 12084 ;;  pPin            1   17[BANK0 ] enum E6750
 12085 ;;  pValue          1   18[BANK0 ] unsigned char 
 12086 ;; Auto vars:     Size  Location     Type
 12087 ;;  Type            1   19[BANK0 ] enum E6795
 12088 ;; Return value:  Size  Location     Type
 12089 ;;                  1    wreg      void 
 12090 ;; Registers used:
 12091 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12092 ;; Tracked objects:
 12093 ;;		On entry : 0/0
 12094 ;;		On exit  : 0/0
 12095 ;;		Unchanged: 0/0
 12096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12097 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;Total ram usage:        5 bytes
 12102 ;; Hardware stack levels used:    1
 12103 ;; Hardware stack levels required when called:   10
 12104 ;; This function calls:
 12105 ;;		_Byte_SetBit
 12106 ;;		_Word_GetPair
 12107 ;; This function is called by:
 12108 ;;		_Reset_Low
 12109 ;;		_Reset_High
 12110 ;;		_LED_Set
 12111 ;;		_Port_TogglePin
 12112 ;;		_Motor_Step
 12113 ;;		_MXK_Init
 12114 ;;		_Motor_Init
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           	psect	text59
 12119  013F82                     __ptext59:
 12120                           	opt stack 0
 12121  013F82                     _Port_SetPin:
 12122                           	opt stack 19
 12123                           
 12124                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 12125                           
 12126                           ;incstack = 0
 12127  013F82  0E08               	movlw	8
 12128  013F84  0100               	movlb	0	; () banked
 12129  013F86  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 12130  013F88  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12131  013F8A  0E00               	movlw	0
 12132  013F8C  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 12133  013F8E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12134  013F90  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 12135  013F94  EC7C  F0AD         	call	_Word_GetPair	;wreg free
 12136  013F98  0100               	movlb	0	; () banked
 12137  013F9A  6F73               	movwf	Port_SetPin@Type& (0+255),b
 12138                           
 12139                           ;Port.c: 250: switch (Type)
 12140  013F9C  D03D               	goto	l427
 12141  013F9E                     
 12142                           ; BSR set to: 0
 12143                           ;Port.c: 256: pValue &= 1;
 12144                           
 12145                           ; BSR set to: 0
 12146  013F9E  0E01               	movlw	1
 12147  013FA0  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12151  013FA2  EE20 F002          	lfsr	2,2
 12152  013FA6  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12153  013FA8  26D9               	addwf	fsr2l,f,c
 12154  013FAA  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12155  013FAC  22DA               	addwfc	fsr2h,f,c
 12156  013FAE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12157  013FB2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12158  013FB6  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12159  013FBA  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12160  013FBE  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12161                           
 12162                           ;Port.c: 258: break;
 12163  013FC2  0012               	return	
 12164  013FC4                     
 12165                           ;Port.c: 261: pValue &= 1;
 12166  013FC4  0E01               	movlw	1
 12167  013FC6  0100               	movlb	0	; () banked
 12168  013FC8  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12169                           
 12170                           ;Port.c: 262: pValue ^= 1;
 12171  013FCA  0E01               	movlw	1
 12172  013FCC  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12176  013FCE  EE20 F002          	lfsr	2,2
 12177  013FD2  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12178  013FD4  26D9               	addwf	fsr2l,f,c
 12179  013FD6  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12180  013FD8  22DA               	addwfc	fsr2h,f,c
 12181  013FDA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12182  013FDE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12183  013FE2  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12184  013FE6  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12185  013FEA  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12186                           
 12187                           ;Port.c: 264: break;
 12188  013FEE  0012               	return	
 12189  013FF0                     
 12190                           ;Port.c: 266: pValue &= 1;
 12191  013FF0  0E01               	movlw	1
 12192  013FF2  0100               	movlb	0	; () banked
 12193  013FF4  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 12197  013FF6  EE20 F004          	lfsr	2,4
 12198  013FFA  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12199  013FFC  26D9               	addwf	fsr2l,f,c
 12200  013FFE  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12201  014000  22DA               	addwfc	fsr2h,f,c
 12202  014002  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12203  014006  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12204  01400A  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12205  01400E  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12206  014012  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12207                           
 12208                           ;Port.c: 269: }
 12209                           
 12210                           ;Port.c: 268: break;
 12211  014016  0012               	return	
 12212  014018                     l427:
 12213  014018  0100               	movlb	0	; () banked
 12214  01401A  5173               	movf	Port_SetPin@Type& (0+255),w,b
 12215                           
 12216                           ; Switch size 1, requested type "space"
 12217                           ; Number of cases is 4, Range of values is 0 to 3
 12218                           ; switch strategies available:
 12219                           ; Name         Instructions Cycles
 12220                           ; simple_byte           13     7 (average)
 12221                           ;	Chosen strategy is simple_byte
 12222  01401C  0A00               	xorlw	0	; case 0
 12223  01401E  B4D8               	btfsc	status,2,c
 12224  014020  0012               	return	
 12225  014022  0A01               	xorlw	1	; case 1
 12226  014024  B4D8               	btfsc	status,2,c
 12227  014026  D7BB               	goto	l430
 12228  014028  0A03               	xorlw	3	; case 2
 12229  01402A  B4D8               	btfsc	status,2,c
 12230  01402C  D7CB               	goto	l432
 12231  01402E  0A01               	xorlw	1	; case 3
 12232  014030  A4D8               	btfss	status,2,c
 12233  014032  0012               	return	
 12234  014034  D7DD               	goto	l433
 12235  014036                     __end_of_Port_SetPin:
 12236                           	opt stack 0
 12237                           tosu	equ	0xFFF
 12238                           tosh	equ	0xFFE
 12239                           tosl	equ	0xFFD
 12240                           pclath	equ	0xFFA
 12241                           tblptru	equ	0xFF8
 12242                           tblptrh	equ	0xFF7
 12243                           tblptrl	equ	0xFF6
 12244                           tablat	equ	0xFF5
 12245                           prodh	equ	0xFF4
 12246                           prodl	equ	0xFF3
 12247                           intcon	equ	0xFF2
 12248                           postinc0	equ	0xFEE
 12249                           wreg	equ	0xFE8
 12250                           indf1	equ	0xFE7
 12251                           postdec1	equ	0xFE5
 12252                           fsr1h	equ	0xFE2
 12253                           fsr1l	equ	0xFE1
 12254                           indf2	equ	0xFDF
 12255                           postinc2	equ	0xFDE
 12256                           postdec2	equ	0xFDD
 12257                           plusw2	equ	0xFDB
 12258                           fsr2h	equ	0xFDA
 12259                           fsr2l	equ	0xFD9
 12260                           status	equ	0xFD8
 12261                           
 12262 ;; *************** function _Port_GetPin *****************
 12263 ;; Defined at:
 12264 ;;		line 271 in file "Library/Port.c"
 12265 ;; Parameters:    Size  Location     Type
 12266 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 12267 ;;		 -> PortB(10), PortE(10), PortC(10), 
 12268 ;;  pPin            1    2[BANK0 ] enum E6750
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;  Output          1    5[BANK0 ] unsigned char 
 12271 ;; Return value:  Size  Location     Type
 12272 ;;                  1    wreg      unsigned char 
 12273 ;; Registers used:
 12274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12275 ;; Tracked objects:
 12276 ;;		On entry : 0/0
 12277 ;;		On exit  : 0/0
 12278 ;;		Unchanged: 0/0
 12279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12280 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12283 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12284 ;;Total ram usage:        6 bytes
 12285 ;; Hardware stack levels used:    1
 12286 ;; Hardware stack levels required when called:    7
 12287 ;; This function calls:
 12288 ;;		Nothing
 12289 ;; This function is called by:
 12290 ;;		_Port_TogglePin
 12291 ;;		_HMI_LeftSwitch
 12292 ;;		_HMI_RightSwitch
 12293 ;;		_HMI_UpSwitch
 12294 ;;		_HMI_DownSwitch
 12295 ;;		_MXK_TestButton
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           	psect	text60
 12300  015978                     __ptext60:
 12301                           	opt stack 0
 12302  015978                     _Port_GetPin:
 12303                           	opt stack 22
 12304                           
 12305                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 12306                           
 12307                           ;incstack = 0
 12308  015978  0100               	movlb	0	; () banked
 12309  01597A  EE20 F006          	lfsr	2,6
 12310  01597E  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 12311  015980  26D9               	addwf	fsr2l,f,c
 12312  015982  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 12313  015984  22DA               	addwfc	fsr2h,f,c
 12314  015986  CFDE F063          	movff	postinc2,??_Port_GetPin
 12315  01598A  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 12316  01598E  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 12317  015992  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 12318  015996  50DF               	movf	indf2,w,c
 12319  015998  6F65               	movwf	Port_GetPin@Output& (0+255),b
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;Port.c: 274: Output >>= (UINT8)pPin;
 12323  01599A  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 12324  01599C  6F63               	movwf	??_Port_GetPin& (0+255),b
 12325  01599E  D002               	goto	u9670
 12326  0159A0                     u9675:
 12327  0159A0  90D8               	bcf	status,0,c
 12328  0159A2  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 12329  0159A4                     u9670:
 12330  0159A4  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 12331  0159A6  D7FC               	goto	u9675
 12332                           
 12333                           ;Port.c: 275: Output &= 1;
 12334  0159A8  0E01               	movlw	1
 12335  0159AA  0100               	movlb	0	; () banked
 12336  0159AC  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 12337                           
 12338                           ; BSR set to: 0
 12339                           ;Port.c: 276: return Output;
 12340  0159AE  5165               	movf	Port_GetPin@Output& (0+255),w,b
 12341  0159B0  0012               	return	
 12342  0159B2                     __end_of_Port_GetPin:
 12343                           	opt stack 0
 12344                           tosu	equ	0xFFF
 12345                           tosh	equ	0xFFE
 12346                           tosl	equ	0xFFD
 12347                           pclath	equ	0xFFA
 12348                           tblptru	equ	0xFF8
 12349                           tblptrh	equ	0xFF7
 12350                           tblptrl	equ	0xFF6
 12351                           tablat	equ	0xFF5
 12352                           prodh	equ	0xFF4
 12353                           prodl	equ	0xFF3
 12354                           intcon	equ	0xFF2
 12355                           postinc0	equ	0xFEE
 12356                           wreg	equ	0xFE8
 12357                           indf1	equ	0xFE7
 12358                           postdec1	equ	0xFE5
 12359                           fsr1h	equ	0xFE2
 12360                           fsr1l	equ	0xFE1
 12361                           indf2	equ	0xFDF
 12362                           postinc2	equ	0xFDE
 12363                           postdec2	equ	0xFDD
 12364                           plusw2	equ	0xFDB
 12365                           fsr2h	equ	0xFDA
 12366                           fsr2l	equ	0xFD9
 12367                           status	equ	0xFD8
 12368                           
 12369 ;; *************** function _HMI_SetBar *****************
 12370 ;; Defined at:
 12371 ;;		line 205 in file "HMI.c"
 12372 ;; Parameters:    Size  Location     Type
 12373 ;;  pValue          1    wreg     unsigned char 
 12374 ;; Auto vars:     Size  Location     Type
 12375 ;;  pValue          1    0[BANK0 ] unsigned char 
 12376 ;; Return value:  Size  Location     Type
 12377 ;;                  1    wreg      void 
 12378 ;; Registers used:
 12379 ;;		wreg
 12380 ;; Tracked objects:
 12381 ;;		On entry : 0/0
 12382 ;;		On exit  : 0/0
 12383 ;;		Unchanged: 0/0
 12384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12386 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12389 ;;Total ram usage:        1 bytes
 12390 ;; Hardware stack levels used:    1
 12391 ;; Hardware stack levels required when called:    7
 12392 ;; This function calls:
 12393 ;;		Nothing
 12394 ;; This function is called by:
 12395 ;;		_Event_DIPSwitch
 12396 ;;		_Event_HMI_DIPSwitch
 12397 ;;		_Event_HMI_LeftButton
 12398 ;;		_Event_HMI_RightButton
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           	psect	text61
 12403  01608E                     __ptext61:
 12404                           	opt stack 0
 12405  01608E                     _HMI_SetBar:
 12406                           	opt stack 20
 12407                           
 12408                           ; BSR set to: 0
 12409                           ;incstack = 0
 12410                           ;HMI_SetBar@pValue stored from wreg
 12411  01608E  0100               	movlb	0	; () banked
 12412  016090  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 12413                           
 12414                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 12415  016092  C060  F14D         	movff	HMI_SetBar@pValue,_HMIBoard+7
 12416  016096  0012               	return		;funcret
 12417  016098                     __end_of_HMI_SetBar:
 12418                           	opt stack 0
 12419                           tosu	equ	0xFFF
 12420                           tosh	equ	0xFFE
 12421                           tosl	equ	0xFFD
 12422                           pclath	equ	0xFFA
 12423                           tblptru	equ	0xFF8
 12424                           tblptrh	equ	0xFF7
 12425                           tblptrl	equ	0xFF6
 12426                           tablat	equ	0xFF5
 12427                           prodh	equ	0xFF4
 12428                           prodl	equ	0xFF3
 12429                           intcon	equ	0xFF2
 12430                           postinc0	equ	0xFEE
 12431                           wreg	equ	0xFE8
 12432                           indf1	equ	0xFE7
 12433                           postdec1	equ	0xFE5
 12434                           fsr1h	equ	0xFE2
 12435                           fsr1l	equ	0xFE1
 12436                           indf2	equ	0xFDF
 12437                           postinc2	equ	0xFDE
 12438                           postdec2	equ	0xFDD
 12439                           plusw2	equ	0xFDB
 12440                           fsr2h	equ	0xFDA
 12441                           fsr2l	equ	0xFD9
 12442                           status	equ	0xFD8
 12443                           
 12444 ;; *************** function _HMI_GetBar *****************
 12445 ;; Defined at:
 12446 ;;		line 209 in file "HMI.c"
 12447 ;; Parameters:    Size  Location     Type
 12448 ;;		None
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;		None
 12451 ;; Return value:  Size  Location     Type
 12452 ;;                  1    wreg      unsigned char 
 12453 ;; Registers used:
 12454 ;;		wreg, status,2
 12455 ;; Tracked objects:
 12456 ;;		On entry : 0/0
 12457 ;;		On exit  : 0/0
 12458 ;;		Unchanged: 0/0
 12459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12464 ;;Total ram usage:        0 bytes
 12465 ;; Hardware stack levels used:    1
 12466 ;; Hardware stack levels required when called:    7
 12467 ;; This function calls:
 12468 ;;		Nothing
 12469 ;; This function is called by:
 12470 ;;		_Event_DIPSwitch
 12471 ;;		_Event_HMI_DIPSwitch
 12472 ;; This function uses a non-reentrant model
 12473 ;;
 12474                           
 12475                           	psect	text62
 12476  0160CE                     __ptext62:
 12477                           	opt stack 0
 12478  0160CE                     _HMI_GetBar:
 12479                           	opt stack 20
 12480                           
 12481                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 12482                           
 12483                           ;incstack = 0
 12484  0160CE  0101               	movlb	1	; () banked
 12485  0160D0  514D               	movf	(_HMIBoard+7)& (0+255),w,b
 12486  0160D2  0012               	return	
 12487  0160D4                     __end_of_HMI_GetBar:
 12488                           	opt stack 0
 12489                           tosu	equ	0xFFF
 12490                           tosh	equ	0xFFE
 12491                           tosl	equ	0xFFD
 12492                           pclath	equ	0xFFA
 12493                           tblptru	equ	0xFF8
 12494                           tblptrh	equ	0xFF7
 12495                           tblptrl	equ	0xFF6
 12496                           tablat	equ	0xFF5
 12497                           prodh	equ	0xFF4
 12498                           prodl	equ	0xFF3
 12499                           intcon	equ	0xFF2
 12500                           postinc0	equ	0xFEE
 12501                           wreg	equ	0xFE8
 12502                           indf1	equ	0xFE7
 12503                           postdec1	equ	0xFE5
 12504                           fsr1h	equ	0xFE2
 12505                           fsr1l	equ	0xFE1
 12506                           indf2	equ	0xFDF
 12507                           postinc2	equ	0xFDE
 12508                           postdec2	equ	0xFDD
 12509                           plusw2	equ	0xFDB
 12510                           fsr2h	equ	0xFDA
 12511                           fsr2l	equ	0xFD9
 12512                           status	equ	0xFD8
 12513                           
 12514 ;; *************** function _HMI_Init *****************
 12515 ;; Defined at:
 12516 ;;		line 104 in file "HMI.c"
 12517 ;; Parameters:    Size  Location     Type
 12518 ;;		None
 12519 ;; Auto vars:     Size  Location     Type
 12520 ;;  in              2   72[BANK0 ] unsigned short 
 12521 ;; Return value:  Size  Location     Type
 12522 ;;                  1    wreg      void 
 12523 ;; Registers used:
 12524 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12525 ;; Tracked objects:
 12526 ;;		On entry : 0/0
 12527 ;;		On exit  : 0/0
 12528 ;;		Unchanged: 0/0
 12529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12531 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;Total ram usage:        2 bytes
 12535 ;; Hardware stack levels used:    1
 12536 ;; Hardware stack levels required when called:   16
 12537 ;; This function calls:
 12538 ;;		_Button_Init
 12539 ;;		_SPI_Init
 12540 ;;		_SPI_MinSpeed
 12541 ;; This function is called by:
 12542 ;;		_main
 12543 ;; This function uses a non-reentrant model
 12544 ;;
 12545                           
 12546                           	psect	text63
 12547  01283A                     __ptext63:
 12548                           	opt stack 0
 12549  01283A                     _HMI_Init:
 12550                           	opt stack 14
 12551                           
 12552                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 12553                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 12554                           
 12555                           ; BSR set to: 1
 12556                           ;incstack = 0
 12557  01283A  0E76               	movlw	low (_HMIBoard+48)
 12558  01283C  0100               	movlb	0	; () banked
 12559  01283E  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12560  012840  0E01               	movlw	high (_HMIBoard+48)
 12561  012842  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12562  012844  0E00               	movlw	0
 12563  012846  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12564  012848  0E02               	movlw	2
 12565  01284A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12566  01284C  0ED4               	movlw	low _HMI_InitButtons
 12567  01284E  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12568  012850  0E60               	movlw	high _HMI_InitButtons
 12569  012852  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12570  012854  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12571  012856  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12572  012858  0E80               	movlw	low _HMI_DIPSwitch
 12573  01285A  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12574  01285C  0E5F               	movlw	high _HMI_DIPSwitch
 12575  01285E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12576  012860  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 12577  012862  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12578  012864  0E04               	movlw	low _Event_NULL
 12579  012866  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12580  012868  0E14               	movlw	high _Event_NULL
 12581  01286A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12582  01286C  0E00               	movlw	low (_Event_NULL shr (0+16))
 12583  01286E  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12584  012870  EC1B  F0A0         	call	_Button_Init	;wreg free
 12585                           
 12586                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 12587                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 12588  012874  0E58               	movlw	low (_HMIBoard+18)
 12589  012876  0100               	movlb	0	; () banked
 12590  012878  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12591  01287A  0E01               	movlw	high (_HMIBoard+18)
 12592  01287C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12593  01287E  0E00               	movlw	0
 12594  012880  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12595  012882  0E02               	movlw	2
 12596  012884  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12597  012886  0ED4               	movlw	low _HMI_InitButtons
 12598  012888  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12599  01288A  0E60               	movlw	high _HMI_InitButtons
 12600  01288C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12601  01288E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12602  012890  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12603  012892  0ED0               	movlw	low _HMI_LeftSwitch
 12604  012894  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12605  012896  0E5F               	movlw	high _HMI_LeftSwitch
 12606  012898  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12607  01289A  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 12608  01289C  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12609  01289E  0E04               	movlw	low _Event_NULL
 12610  0128A0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12611  0128A2  0E14               	movlw	high _Event_NULL
 12612  0128A4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12613  0128A6  0E00               	movlw	low (_Event_NULL shr (0+16))
 12614  0128A8  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12615  0128AA  EC1B  F0A0         	call	_Button_Init	;wreg free
 12616                           
 12617                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 12618                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 12619  0128AE  0E4E               	movlw	low (_HMIBoard+8)
 12620  0128B0  0100               	movlb	0	; () banked
 12621  0128B2  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12622  0128B4  0E01               	movlw	high (_HMIBoard+8)
 12623  0128B6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12624  0128B8  0E00               	movlw	0
 12625  0128BA  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12626  0128BC  0E02               	movlw	2
 12627  0128BE  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12628  0128C0  0ED4               	movlw	low _HMI_InitButtons
 12629  0128C2  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12630  0128C4  0E60               	movlw	high _HMI_InitButtons
 12631  0128C6  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12632  0128C8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12633  0128CA  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12634  0128CC  0EBC               	movlw	low _HMI_RightSwitch
 12635  0128CE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12636  0128D0  0E5F               	movlw	high _HMI_RightSwitch
 12637  0128D2  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12638  0128D4  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 12639  0128D6  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12640  0128D8  0E04               	movlw	low _Event_NULL
 12641  0128DA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12642  0128DC  0E14               	movlw	high _Event_NULL
 12643  0128DE  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12644  0128E0  0E00               	movlw	low (_Event_NULL shr (0+16))
 12645  0128E2  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12646  0128E4  EC1B  F0A0         	call	_Button_Init	;wreg free
 12647                           
 12648                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 12649                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 12650  0128E8  0E62               	movlw	low (_HMIBoard+28)
 12651  0128EA  0100               	movlb	0	; () banked
 12652  0128EC  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12653  0128EE  0E01               	movlw	high (_HMIBoard+28)
 12654  0128F0  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12655  0128F2  0E00               	movlw	0
 12656  0128F4  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12657  0128F6  0E02               	movlw	2
 12658  0128F8  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12659  0128FA  0ED4               	movlw	low _HMI_InitButtons
 12660  0128FC  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12661  0128FE  0E60               	movlw	high _HMI_InitButtons
 12662  012900  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12663  012902  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12664  012904  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12665  012906  0EA8               	movlw	low _HMI_UpSwitch
 12666  012908  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12667  01290A  0E5F               	movlw	high _HMI_UpSwitch
 12668  01290C  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12669  01290E  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 12670  012910  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12671  012912  0E04               	movlw	low _Event_NULL
 12672  012914  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12673  012916  0E14               	movlw	high _Event_NULL
 12674  012918  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12675  01291A  0E00               	movlw	low (_Event_NULL shr (0+16))
 12676  01291C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12677  01291E  EC1B  F0A0         	call	_Button_Init	;wreg free
 12678                           
 12679                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 12680                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 12681  012922  0E6C               	movlw	low (_HMIBoard+38)
 12682  012924  0100               	movlb	0	; () banked
 12683  012926  6F9B               	movwf	Button_Init@pInput& (0+255),b
 12684  012928  0E01               	movlw	high (_HMIBoard+38)
 12685  01292A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 12686  01292C  0E00               	movlw	0
 12687  01292E  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12688  012930  0E02               	movlw	2
 12689  012932  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 12690  012934  0ED4               	movlw	low _HMI_InitButtons
 12691  012936  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 12692  012938  0E60               	movlw	high _HMI_InitButtons
 12693  01293A  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12694  01293C  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12695  01293E  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12696  012940  0E94               	movlw	low _HMI_DownSwitch
 12697  012942  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 12698  012944  0E5F               	movlw	high _HMI_DownSwitch
 12699  012946  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12700  012948  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 12701  01294A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12702  01294C  0E04               	movlw	low _Event_NULL
 12703  01294E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 12704  012950  0E14               	movlw	high _Event_NULL
 12705  012952  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12706  012954  0E00               	movlw	low (_Event_NULL shr (0+16))
 12707  012956  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12708  012958  EC1B  F0A0         	call	_Button_Init	;wreg free
 12709                           
 12710                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 12711  01295C  0EA0               	movlw	160
 12712  01295E  0100               	movlb	0	; () banked
 12713  012960  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 12714  012962  0E86               	movlw	134
 12715  012964  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 12716  012966  0E01               	movlw	1
 12717  012968  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 12718  01296A  0E00               	movlw	0
 12719  01296C  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 12720  01296E  0E00               	movlw	0
 12721  012970  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 12722  012972  0E02               	movlw	2
 12723  012974  6F92               	movwf	SPI_Init@pMode& (0+255),b
 12724  012976  ECCB  F083         	call	_SPI_Init	;wreg free
 12725                           
 12726                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 12727  01297A  0EC8               	movlw	low _SPI1
 12728  01297C  0100               	movlb	0	; () banked
 12729  01297E  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 12730  012980  0E02               	movlw	high _SPI1
 12731  012982  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 12732  012984  ECBD  F0A7         	call	_SPI_MinSpeed	;wreg free
 12733                           
 12734                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 12735  012988  0E00               	movlw	0
 12736  01298A  0100               	movlb	0	; () banked
 12737  01298C  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 12738  01298E  0E00               	movlw	0
 12739  012990  6FA8               	movwf	HMI_Init@in& (0+255),b
 12740  012992                     l15278:
 12741                           
 12742                           ; BSR set to: 0
 12743  012992  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 12744  012994  E10F               	bnz	l1153
 12745  012996  0E08               	movlw	8
 12746  012998  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 12747  01299A  B0D8               	btfsc	status,0,c
 12748  01299C  0012               	return	
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 12752                           
 12753                           ; BSR set to: 0
 12754                           
 12755                           ; BSR set to: 0
 12756  01299E  0E46               	movlw	low _HMIBoard
 12757  0129A0  25A8               	addwf	HMI_Init@in& (0+255),w,b
 12758  0129A2  6ED9               	movwf	fsr2l,c
 12759  0129A4  0E01               	movlw	high _HMIBoard
 12760  0129A6  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 12761  0129A8  6EDA               	movwf	fsr2h,c
 12762  0129AA  0E00               	movlw	0
 12763  0129AC  6EDF               	movwf	indf2,c
 12764                           
 12765                           ; BSR set to: 0
 12766  0129AE  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 12767  0129B0  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 12768  0129B2  D7EF               	goto	l15278
 12769  0129B4                     l1153:
 12770                           
 12771                           ; BSR set to: 0
 12772  0129B4  0012               	return		;funcret
 12773  0129B6                     __end_of_HMI_Init:
 12774                           	opt stack 0
 12775                           tosu	equ	0xFFF
 12776                           tosh	equ	0xFFE
 12777                           tosl	equ	0xFFD
 12778                           pclath	equ	0xFFA
 12779                           tblptru	equ	0xFF8
 12780                           tblptrh	equ	0xFF7
 12781                           tblptrl	equ	0xFF6
 12782                           tablat	equ	0xFF5
 12783                           prodh	equ	0xFF4
 12784                           prodl	equ	0xFF3
 12785                           intcon	equ	0xFF2
 12786                           postinc0	equ	0xFEE
 12787                           wreg	equ	0xFE8
 12788                           indf1	equ	0xFE7
 12789                           postdec1	equ	0xFE5
 12790                           fsr1h	equ	0xFE2
 12791                           fsr1l	equ	0xFE1
 12792                           indf2	equ	0xFDF
 12793                           postinc2	equ	0xFDE
 12794                           postdec2	equ	0xFDD
 12795                           plusw2	equ	0xFDB
 12796                           fsr2h	equ	0xFDA
 12797                           fsr2l	equ	0xFD9
 12798                           status	equ	0xFD8
 12799                           
 12800 ;; *************** function _SPI_MinSpeed *****************
 12801 ;; Defined at:
 12802 ;;		line 190 in file "Library/SPI.c"
 12803 ;; Parameters:    Size  Location     Type
 12804 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 12805 ;;		 -> SPI1(11), 
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;		None
 12808 ;; Return value:  Size  Location     Type
 12809 ;;                  1    wreg      void 
 12810 ;; Registers used:
 12811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12817 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12821 ;;Total ram usage:        2 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    9
 12824 ;; This function calls:
 12825 ;;		_Byte_SetBit
 12826 ;;		_Byte_SetQuad
 12827 ;; This function is called by:
 12828 ;;		_HMI_Init
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           	psect	text64
 12833  014F7A                     __ptext64:
 12834                           	opt stack 0
 12835  014F7A                     _SPI_MinSpeed:
 12836                           	opt stack 20
 12837                           
 12838                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;incstack = 0
 12842  014F7A  0100               	movlb	0	; () banked
 12843  014F7C  EE20 F006          	lfsr	2,6
 12844  014F80  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12845  014F82  26D9               	addwf	fsr2l,f,c
 12846  014F84  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12847  014F86  22DA               	addwfc	fsr2h,f,c
 12848  014F88  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12849  014F8C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12850  014F90  0E05               	movlw	5
 12851  014F92  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12852  014F94  0E00               	movlw	0
 12853  014F96  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12854  014F98  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12855                           
 12856                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 12857  014F9C  0100               	movlb	0	; () banked
 12858  014F9E  EE20 F006          	lfsr	2,6
 12859  014FA2  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12860  014FA4  26D9               	addwf	fsr2l,f,c
 12861  014FA6  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12862  014FA8  22DA               	addwfc	fsr2h,f,c
 12863  014FAA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 12864  014FAE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 12865  014FB2  0E00               	movlw	0
 12866  014FB4  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 12867  014FB6  0E02               	movlw	2
 12868  014FB8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 12869  014FBA  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 12870                           
 12871                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 12872  014FBE  0100               	movlb	0	; () banked
 12873  014FC0  EE20 F006          	lfsr	2,6
 12874  014FC4  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 12875  014FC6  26D9               	addwf	fsr2l,f,c
 12876  014FC8  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 12877  014FCA  22DA               	addwfc	fsr2h,f,c
 12878  014FCC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12879  014FD0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12880  014FD4  0E05               	movlw	5
 12881  014FD6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 12882  014FD8  0E01               	movlw	1
 12883  014FDA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 12884  014FDC  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 12885  014FE0  0012               	return		;funcret
 12886  014FE2                     __end_of_SPI_MinSpeed:
 12887                           	opt stack 0
 12888                           tosu	equ	0xFFF
 12889                           tosh	equ	0xFFE
 12890                           tosl	equ	0xFFD
 12891                           pclath	equ	0xFFA
 12892                           tblptru	equ	0xFF8
 12893                           tblptrh	equ	0xFF7
 12894                           tblptrl	equ	0xFF6
 12895                           tablat	equ	0xFF5
 12896                           prodh	equ	0xFF4
 12897                           prodl	equ	0xFF3
 12898                           intcon	equ	0xFF2
 12899                           postinc0	equ	0xFEE
 12900                           wreg	equ	0xFE8
 12901                           indf1	equ	0xFE7
 12902                           postdec1	equ	0xFE5
 12903                           fsr1h	equ	0xFE2
 12904                           fsr1l	equ	0xFE1
 12905                           indf2	equ	0xFDF
 12906                           postinc2	equ	0xFDE
 12907                           postdec2	equ	0xFDD
 12908                           plusw2	equ	0xFDB
 12909                           fsr2h	equ	0xFDA
 12910                           fsr2l	equ	0xFD9
 12911                           status	equ	0xFD8
 12912                           
 12913 ;; *************** function _SPI_Init *****************
 12914 ;; Defined at:
 12915 ;;		line 12 in file "Library/SPI.c"
 12916 ;; Parameters:    Size  Location     Type
 12917 ;;  pClock          4   45[BANK0 ] unsigned long 
 12918 ;;  pChannel        1   49[BANK0 ] enum E6744
 12919 ;;  pMode           1   50[BANK0 ] enum E6748
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 12922 ;;		 -> SPI1(11), SPI2(11), 
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  1    wreg      void 
 12925 ;; Registers used:
 12926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12932 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12935 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12936 ;;Total ram usage:        8 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:   12
 12939 ;; This function calls:
 12940 ;;		_Byte_SetBit
 12941 ;;		_Byte_SetQuad
 12942 ;;		_Port_SetPinType
 12943 ;;		_SPI_DCS
 12944 ;;		_SPI_DisableISR
 12945 ;;		_Timer2_Init
 12946 ;; This function is called by:
 12947 ;;		_Configure_GPIOs
 12948 ;;		_HMI_Init
 12949 ;; This function uses a non-reentrant model
 12950 ;;
 12951                           
 12952                           	psect	text65
 12953  010796                     __ptext65:
 12954                           	opt stack 0
 12955  010796                     _SPI_Init:
 12956                           	opt stack 16
 12957                           
 12958                           ;SPI.c: 14: SPIPtr pInput;
 12959                           ;SPI.c: 16: switch (pChannel)
 12960                           
 12961                           ;incstack = 0
 12962  010796  D00A               	goto	l597
 12963  010798                     
 12964                           ;SPI.c: 19: pInput = &SPI1;
 12965  010798  0EC8               	movlw	low _SPI1
 12966  01079A  0100               	movlb	0	; () banked
 12967  01079C  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12968  01079E  0E02               	movlw	high _SPI1
 12969  0107A0  D003               	goto	L7
 12970  0107A2                     
 12971                           ; BSR set to: 0
 12972                           ;SPI.c: 22: pInput = &SPI2;
 12973                           
 12974                           ; BSR set to: 0
 12975  0107A2  0E80               	movlw	low _SPI2
 12976  0107A4  6F93               	movwf	SPI_Init@pInput& (0+255),b
 12977  0107A6  0E01               	movlw	high _SPI2
 12978  0107A8                     L7:
 12979  0107A8  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;SPI.c: 24: };
 12983                           
 12984                           ;SPI.c: 23: break;
 12985  0107AA  D008               	goto	l599
 12986  0107AC                     l597:
 12987                           
 12988                           ; BSR set to: 0
 12989  0107AC  0100               	movlb	0	; () banked
 12990  0107AE  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 12991                           
 12992                           ; Switch size 1, requested type "space"
 12993                           ; Number of cases is 2, Range of values is 0 to 1
 12994                           ; switch strategies available:
 12995                           ; Name         Instructions Cycles
 12996                           ; simple_byte            7     4 (average)
 12997                           ;	Chosen strategy is simple_byte
 12998  0107B0  0A00               	xorlw	0	; case 0
 12999  0107B2  B4D8               	btfsc	status,2,c
 13000  0107B4  D7F1               	goto	l598
 13001  0107B6  0A01               	xorlw	1	; case 1
 13002  0107B8  B4D8               	btfsc	status,2,c
 13003  0107BA  D7F3               	goto	l600
 13004  0107BC                     l599:
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;SPI.c: 26: pInput->mChannel = pChannel;
 13008                           
 13009                           ; BSR set to: 0
 13010  0107BC  EE20 F002          	lfsr	2,2
 13011  0107C0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13012  0107C2  26D9               	addwf	fsr2l,f,c
 13013  0107C4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13014  0107C6  22DA               	addwfc	fsr2h,f,c
 13015  0107C8  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 13016                           
 13017                           ;SPI.c: 35: switch (pChannel)
 13018  0107CC  D093               	goto	l601
 13019  0107CE                     
 13020                           ; BSR set to: 0
 13021                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 13022                           
 13023                           ; BSR set to: 0
 13024  0107CE  0EB3               	movlw	low _PortC
 13025  0107D0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13026  0107D2  0E01               	movlw	high _PortC
 13027  0107D4  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13028  0107D6  0E02               	movlw	2
 13029  0107D8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13030  0107DA  0E03               	movlw	3
 13031  0107DC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13032  0107DE  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13033                           
 13034                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 13035  0107E2  0EB3               	movlw	low _PortC
 13036  0107E4  0100               	movlb	0	; () banked
 13037  0107E6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13038  0107E8  0E01               	movlw	high _PortC
 13039  0107EA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13040  0107EC  0E03               	movlw	3
 13041  0107EE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13042  0107F0  0E03               	movlw	3
 13043  0107F2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13044  0107F4  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13045                           
 13046                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 13047  0107F8  0EB3               	movlw	low _PortC
 13048  0107FA  0100               	movlb	0	; () banked
 13049  0107FC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13050  0107FE  0E01               	movlw	high _PortC
 13051  010800  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13052  010802  0E05               	movlw	5
 13053  010804  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13054  010806  0E03               	movlw	3
 13055  010808  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13056  01080A  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13057                           
 13058                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 13059  01080E  0EB3               	movlw	low _PortC
 13060  010810  0100               	movlb	0	; () banked
 13061  010812  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13062  010814  0E01               	movlw	high _PortC
 13063  010816  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13064  010818  0E04               	movlw	4
 13065  01081A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13066  01081C  0E00               	movlw	0
 13067  01081E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13068  010820  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13069                           
 13070                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 13071  010824  0100               	movlb	0	; () banked
 13072  010826  EE20 F003          	lfsr	2,3
 13073  01082A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13074  01082C  26D9               	addwf	fsr2l,f,c
 13075  01082E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13076  010830  22DA               	addwfc	fsr2h,f,c
 13077  010832  0EC7               	movlw	199
 13078  010834  6EDE               	movwf	postinc2,c
 13079  010836  0E0F               	movlw	15
 13080  010838  6EDD               	movwf	postdec2,c
 13081                           
 13082                           ; BSR set to: 0
 13083                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 13084  01083A  EE20 F006          	lfsr	2,6
 13085  01083E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13086  010840  26D9               	addwf	fsr2l,f,c
 13087  010842  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13088  010844  22DA               	addwfc	fsr2h,f,c
 13089  010846  0EC6               	movlw	198
 13090  010848  6EDE               	movwf	postinc2,c
 13091  01084A  0E0F               	movlw	15
 13092  01084C  6EDD               	movwf	postdec2,c
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 13096  01084E  EE20 F009          	lfsr	2,9
 13097  010852  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13098  010854  26D9               	addwf	fsr2l,f,c
 13099  010856  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13100  010858  22DA               	addwfc	fsr2h,f,c
 13101  01085A  0EC9               	movlw	201
 13102  01085C  D047               	goto	L8
 13103  01085E                     
 13104                           ; BSR set to: 0
 13105                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 13106                           
 13107                           ; BSR set to: 0
 13108  01085E  0E9F               	movlw	low _PortD
 13109  010860  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13110  010862  0E01               	movlw	high _PortD
 13111  010864  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13112  010866  0E07               	movlw	7
 13113  010868  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13114  01086A  0E03               	movlw	3
 13115  01086C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13116  01086E  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13117                           
 13118                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 13119  010872  0E9F               	movlw	low _PortD
 13120  010874  0100               	movlb	0	; () banked
 13121  010876  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13122  010878  0E01               	movlw	high _PortD
 13123  01087A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13124  01087C  0E06               	movlw	6
 13125  01087E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13126  010880  0E03               	movlw	3
 13127  010882  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13128  010884  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13129                           
 13130                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 13131  010888  0E9F               	movlw	low _PortD
 13132  01088A  0100               	movlb	0	; () banked
 13133  01088C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13134  01088E  0E01               	movlw	high _PortD
 13135  010890  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13136  010892  0E04               	movlw	4
 13137  010894  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13138  010896  0E03               	movlw	3
 13139  010898  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13140  01089A  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13141                           
 13142                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 13143  01089E  0E9F               	movlw	low _PortD
 13144  0108A0  0100               	movlb	0	; () banked
 13145  0108A2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13146  0108A4  0E01               	movlw	high _PortD
 13147  0108A6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13148  0108A8  0E05               	movlw	5
 13149  0108AA  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13150  0108AC  0E00               	movlw	0
 13151  0108AE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13152  0108B0  EC4E  F093         	call	_Port_SetPinType	;wreg free
 13153                           
 13154                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 13155  0108B4  0100               	movlb	0	; () banked
 13156  0108B6  EE20 F003          	lfsr	2,3
 13157  0108BA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13158  0108BC  26D9               	addwf	fsr2l,f,c
 13159  0108BE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13160  0108C0  22DA               	addwfc	fsr2h,f,c
 13161  0108C2  0E6D               	movlw	109
 13162  0108C4  6EDE               	movwf	postinc2,c
 13163  0108C6  0E0F               	movlw	15
 13164  0108C8  6EDD               	movwf	postdec2,c
 13165                           
 13166                           ; BSR set to: 0
 13167                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 13168  0108CA  EE20 F006          	lfsr	2,6
 13169  0108CE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13170  0108D0  26D9               	addwf	fsr2l,f,c
 13171  0108D2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13172  0108D4  22DA               	addwfc	fsr2h,f,c
 13173  0108D6  0E6C               	movlw	108
 13174  0108D8  6EDE               	movwf	postinc2,c
 13175  0108DA  0E0F               	movlw	15
 13176  0108DC  6EDD               	movwf	postdec2,c
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 13180  0108DE  EE20 F009          	lfsr	2,9
 13181  0108E2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13182  0108E4  26D9               	addwf	fsr2l,f,c
 13183  0108E6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13184  0108E8  22DA               	addwfc	fsr2h,f,c
 13185  0108EA  0E6F               	movlw	111
 13186  0108EC                     L8:
 13187  0108EC  6EDE               	movwf	postinc2,c
 13188  0108EE  0E0F               	movlw	15
 13189  0108F0  6EDD               	movwf	postdec2,c
 13190                           
 13191                           ;SPI.c: 68: break;
 13192  0108F2  D008               	goto	l603
 13193  0108F4                     l601:
 13194                           
 13195                           ; BSR set to: 0
 13196                           
 13197                           ; BSR set to: 0
 13198  0108F4  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13199                           
 13200                           ; Switch size 1, requested type "space"
 13201                           ; Number of cases is 2, Range of values is 0 to 1
 13202                           ; switch strategies available:
 13203                           ; Name         Instructions Cycles
 13204                           ; simple_byte            7     4 (average)
 13205                           ;	Chosen strategy is simple_byte
 13206  0108F6  0A00               	xorlw	0	; case 0
 13207  0108F8  B4D8               	btfsc	status,2,c
 13208  0108FA  D769               	goto	l602
 13209  0108FC  0A01               	xorlw	1	; case 1
 13210  0108FE  A4D8               	btfss	status,2,c
 13211  010900  0012               	return	
 13212  010902  D7AD               	goto	l604
 13213  010904                     l603:
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13217                           
 13218                           ; BSR set to: 0
 13219  010904  EE20 F006          	lfsr	2,6
 13220  010908  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13221  01090A  26D9               	addwf	fsr2l,f,c
 13222  01090C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13223  01090E  22DA               	addwfc	fsr2h,f,c
 13224  010910  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13225  010914  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13226  010918  0E05               	movlw	5
 13227  01091A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13228  01091C  0E00               	movlw	0
 13229  01091E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13230  010920  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13231                           
 13232                           ;SPI.c: 77: switch(pMode)
 13233  010924  D08C               	goto	l607
 13234  010926                     
 13235                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13236  010926  0100               	movlb	0	; () banked
 13237  010928  EE20 F006          	lfsr	2,6
 13238  01092C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13239  01092E  26D9               	addwf	fsr2l,f,c
 13240  010930  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13241  010932  22DA               	addwfc	fsr2h,f,c
 13242  010934  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13243  010938  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13244  01093C  0E04               	movlw	4
 13245  01093E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13246  010940  0E00               	movlw	0
 13247  010942  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13248  010944  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13249                           
 13250                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13251  010948  0100               	movlb	0	; () banked
 13252  01094A  EE20 F003          	lfsr	2,3
 13253  01094E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13254  010950  26D9               	addwf	fsr2l,f,c
 13255  010952  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13256  010954  22DA               	addwfc	fsr2h,f,c
 13257  010956  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13258  01095A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13259  01095E  0E06               	movlw	6
 13260  010960  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13261  010962  0E00               	movlw	0
 13262  010964  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13263  010966  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13264                           
 13265                           ;SPI.c: 82: break;
 13266  01096A  D078               	goto	l609
 13267  01096C                     
 13268                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13269  01096C  0100               	movlb	0	; () banked
 13270  01096E  EE20 F006          	lfsr	2,6
 13271  010972  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13272  010974  26D9               	addwf	fsr2l,f,c
 13273  010976  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13274  010978  22DA               	addwfc	fsr2h,f,c
 13275  01097A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13276  01097E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13277  010982  0E04               	movlw	4
 13278  010984  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13279  010986  0E00               	movlw	0
 13280  010988  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13281  01098A  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13282                           
 13283                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13284  01098E  0100               	movlb	0	; () banked
 13285  010990  EE20 F003          	lfsr	2,3
 13286  010994  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13287  010996  26D9               	addwf	fsr2l,f,c
 13288  010998  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13289  01099A  22DA               	addwfc	fsr2h,f,c
 13290  01099C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13291  0109A0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13292  0109A4  0E06               	movlw	6
 13293  0109A6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13294  0109A8  0E01               	movlw	1
 13295  0109AA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13296  0109AC  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13297                           
 13298                           ;SPI.c: 86: break;
 13299  0109B0  D055               	goto	l609
 13300  0109B2                     
 13301                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13302  0109B2  0100               	movlb	0	; () banked
 13303  0109B4  EE20 F006          	lfsr	2,6
 13304  0109B8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13305  0109BA  26D9               	addwf	fsr2l,f,c
 13306  0109BC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13307  0109BE  22DA               	addwfc	fsr2h,f,c
 13308  0109C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13309  0109C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13310  0109C8  0E04               	movlw	4
 13311  0109CA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13312  0109CC  0E01               	movlw	1
 13313  0109CE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13314  0109D0  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13315                           
 13316                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13317  0109D4  0100               	movlb	0	; () banked
 13318  0109D6  EE20 F003          	lfsr	2,3
 13319  0109DA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13320  0109DC  26D9               	addwf	fsr2l,f,c
 13321  0109DE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13322  0109E0  22DA               	addwfc	fsr2h,f,c
 13323  0109E2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13324  0109E6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13325  0109EA  0E06               	movlw	6
 13326  0109EC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13327  0109EE  0E00               	movlw	0
 13328  0109F0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13329  0109F2  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13330                           
 13331                           ;SPI.c: 90: break;
 13332  0109F6  D032               	goto	l609
 13333  0109F8                     
 13334                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13335  0109F8  0100               	movlb	0	; () banked
 13336  0109FA  EE20 F006          	lfsr	2,6
 13337  0109FE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13338  010A00  26D9               	addwf	fsr2l,f,c
 13339  010A02  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13340  010A04  22DA               	addwfc	fsr2h,f,c
 13341  010A06  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13342  010A0A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13343  010A0E  0E04               	movlw	4
 13344  010A10  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13345  010A12  0E01               	movlw	1
 13346  010A14  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13347  010A16  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13348                           
 13349                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13350  010A1A  0100               	movlb	0	; () banked
 13351  010A1C  EE20 F003          	lfsr	2,3
 13352  010A20  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13353  010A22  26D9               	addwf	fsr2l,f,c
 13354  010A24  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13355  010A26  22DA               	addwfc	fsr2h,f,c
 13356  010A28  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13357  010A2C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13358  010A30  0E06               	movlw	6
 13359  010A32  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13360  010A34  0E01               	movlw	1
 13361  010A36  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13362  010A38  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13363                           
 13364                           ;SPI.c: 94: break;
 13365  010A3C  D00F               	goto	l609
 13366  010A3E                     l607:
 13367  010A3E  0100               	movlb	0	; () banked
 13368  010A40  5192               	movf	SPI_Init@pMode& (0+255),w,b
 13369                           
 13370                           ; Switch size 1, requested type "space"
 13371                           ; Number of cases is 4, Range of values is 0 to 3
 13372                           ; switch strategies available:
 13373                           ; Name         Instructions Cycles
 13374                           ; simple_byte           13     7 (average)
 13375                           ;	Chosen strategy is simple_byte
 13376  010A42  0A00               	xorlw	0	; case 0
 13377  010A44  B4D8               	btfsc	status,2,c
 13378  010A46  D76F               	goto	l608
 13379  010A48  0A01               	xorlw	1	; case 1
 13380  010A4A  B4D8               	btfsc	status,2,c
 13381  010A4C  D78F               	goto	l610
 13382  010A4E  0A03               	xorlw	3	; case 2
 13383  010A50  B4D8               	btfsc	status,2,c
 13384  010A52  D7AF               	goto	l611
 13385  010A54  0A01               	xorlw	1	; case 3
 13386  010A56  A4D8               	btfss	status,2,c
 13387  010A58  0012               	return	
 13388  010A5A  D7CE               	goto	l612
 13389  010A5C                     l609:
 13390                           
 13391                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 13392                           
 13393                           ; BSR set to: 0
 13394  010A5C  0100               	movlb	0	; () banked
 13395  010A5E  EE20 F006          	lfsr	2,6
 13396  010A62  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13397  010A64  26D9               	addwf	fsr2l,f,c
 13398  010A66  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13399  010A68  22DA               	addwfc	fsr2h,f,c
 13400  010A6A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13401  010A6E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13402  010A72  0E07               	movlw	7
 13403  010A74  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13404  010A76  0E00               	movlw	0
 13405  010A78  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13406  010A7A  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13407                           
 13408                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 13409  010A7E  0100               	movlb	0	; () banked
 13410  010A80  EE20 F006          	lfsr	2,6
 13411  010A84  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13412  010A86  26D9               	addwf	fsr2l,f,c
 13413  010A88  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13414  010A8A  22DA               	addwfc	fsr2h,f,c
 13415  010A8C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13416  010A90  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13417  010A94  0E06               	movlw	6
 13418  010A96  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13419  010A98  0E00               	movlw	0
 13420  010A9A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13421  010A9C  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13422                           
 13423                           ;SPI.c: 106: Timer2_Init(pClock);
 13424  010AA0  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 13425  010AA4  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 13426  010AA8  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 13427  010AAC  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 13428  010AB0  ECF9  F098         	call	_Timer2_Init	;wreg free
 13429                           
 13430                           ;SPI.c: 112: SPI_DisableISR(pInput);
 13431  010AB4  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 13432  010AB8  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 13433  010ABC  EC36  F0AE         	call	_SPI_DisableISR	;wreg free
 13434                           
 13435                           ;SPI.c: 116: switch (pChannel)
 13436  010AC0  D004               	goto	l614
 13437  010AC2                     l615:
 13438                           
 13439                           ; BSR set to: 0
 13440  010AC2  869F               	bsf	3999,3,c	;volatile
 13441  010AC4  D00B               	goto	l616
 13442  010AC6                     l617:
 13443                           
 13444                           ; BSR set to: 0
 13445  010AC6  8EA5               	bsf	4005,7,c	;volatile
 13446  010AC8  D009               	goto	l616
 13447  010ACA                     l614:
 13448                           
 13449                           ; BSR set to: 0
 13450  010ACA  0100               	movlb	0	; () banked
 13451  010ACC  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13452                           
 13453                           ; Switch size 1, requested type "space"
 13454                           ; Number of cases is 2, Range of values is 0 to 1
 13455                           ; switch strategies available:
 13456                           ; Name         Instructions Cycles
 13457                           ; simple_byte            7     4 (average)
 13458                           ;	Chosen strategy is simple_byte
 13459  010ACE  0A00               	xorlw	0	; case 0
 13460  010AD0  B4D8               	btfsc	status,2,c
 13461  010AD2  D7F7               	goto	l615
 13462  010AD4  0A01               	xorlw	1	; case 1
 13463  010AD6  A4D8               	btfss	status,2,c
 13464  010AD8  0012               	return	
 13465  010ADA  D7F5               	goto	l617
 13466  010ADC                     l616:
 13467                           
 13468                           ; BSR set to: 0
 13469                           ;SPI.c: 124: SPI_DCS(pInput);
 13470                           
 13471                           ; BSR set to: 0
 13472  010ADC  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 13473  010AE0  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 13474  010AE4  EC95  F0AD         	call	_SPI_DCS	;wreg free
 13475                           
 13476                           ;SPI.c: 126: pInput->mBusy = 0;
 13477  010AE8  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 13478  010AEC  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 13479  010AF0  0E00               	movlw	0
 13480  010AF2  6EDF               	movwf	indf2,c
 13481                           
 13482                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 13483  010AF4  0100               	movlb	0	; () banked
 13484  010AF6  EE20 F006          	lfsr	2,6
 13485  010AFA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13486  010AFC  26D9               	addwf	fsr2l,f,c
 13487  010AFE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13488  010B00  22DA               	addwfc	fsr2h,f,c
 13489  010B02  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 13490  010B06  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 13491  010B0A  0E00               	movlw	0
 13492  010B0C  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13493  010B0E  0E03               	movlw	3
 13494  010B10  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 13495  010B12  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 13496                           
 13497                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13498  010B16  0100               	movlb	0	; () banked
 13499  010B18  EE20 F006          	lfsr	2,6
 13500  010B1C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13501  010B1E  26D9               	addwf	fsr2l,f,c
 13502  010B20  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13503  010B22  22DA               	addwfc	fsr2h,f,c
 13504  010B24  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13505  010B28  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13506  010B2C  0E05               	movlw	5
 13507  010B2E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13508  010B30  0E01               	movlw	1
 13509  010B32  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13510  010B34  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 13511  010B38  0012               	return		;funcret
 13512  010B3A                     __end_of_SPI_Init:
 13513                           	opt stack 0
 13514                           tosu	equ	0xFFF
 13515                           tosh	equ	0xFFE
 13516                           tosl	equ	0xFFD
 13517                           pclath	equ	0xFFA
 13518                           tblptru	equ	0xFF8
 13519                           tblptrh	equ	0xFF7
 13520                           tblptrl	equ	0xFF6
 13521                           tablat	equ	0xFF5
 13522                           prodh	equ	0xFF4
 13523                           prodl	equ	0xFF3
 13524                           intcon	equ	0xFF2
 13525                           postinc0	equ	0xFEE
 13526                           wreg	equ	0xFE8
 13527                           indf1	equ	0xFE7
 13528                           postdec1	equ	0xFE5
 13529                           fsr1h	equ	0xFE2
 13530                           fsr1l	equ	0xFE1
 13531                           indf2	equ	0xFDF
 13532                           postinc2	equ	0xFDE
 13533                           postdec2	equ	0xFDD
 13534                           plusw2	equ	0xFDB
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _Timer2_Init *****************
 13540 ;; Defined at:
 13541 ;;		line 10 in file "Library/Timer2.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 13546 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 13547 ;;  RDIV            4   18[BANK0 ] unsigned long 
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  1    wreg      void 
 13550 ;; Registers used:
 13551 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13557 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13558 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13560 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13561 ;;Total ram usage:       17 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    8
 13564 ;; This function calls:
 13565 ;;		_Timer2_Clear
 13566 ;;		___lldiv
 13567 ;; This function is called by:
 13568 ;;		_SPI_Init
 13569 ;; This function uses a non-reentrant model
 13570 ;;
 13571                           
 13572                           	psect	text66
 13573  0131F2                     __ptext66:
 13574                           	opt stack 0
 13575  0131F2                     _Timer2_Init:
 13576                           	opt stack 19
 13577                           
 13578                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 13579                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 13580                           ;Timer2.c: 14: static UINT8 PRE = 0;
 13581                           ;Timer2.c: 15: static UINT32 DIV = 0;
 13582                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 13583                           
 13584                           ;incstack = 0
 13585  0131F2  0E00               	movlw	0
 13586  0131F4  0100               	movlb	0	; () banked
 13587  0131F6  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 13588  0131F8  0E6C               	movlw	108
 13589  0131FA  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 13590  0131FC  0EDC               	movlw	220
 13591  0131FE  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 13592  013200  0E02               	movlw	2
 13593  013202  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 13594                           
 13595                           ; BSR set to: 0
 13596                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 13597                           ;Timer2.c: 20: pFrequency *= 2;
 13598  013204  90D8               	bcf	status,0,c
 13599  013206  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 13600  013208  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 13601  01320A  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 13602  01320C  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 13603                           
 13604                           ; BSR set to: 0
 13605                           ;Timer2.c: 23: pCPUClock /= 4;
 13606  01320E  0E02               	movlw	2
 13607  013210  6F71               	movwf	??_Timer2_Init& (0+255),b
 13608  013212                     u11255:
 13609  013212  90D8               	bcf	status,0,c
 13610  013214  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 13611  013216  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 13612  013218  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 13613  01321A  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 13614  01321C  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 13615  01321E  D7F9               	goto	u11255
 13616                           
 13617                           ; BSR set to: 0
 13618                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 13619  013220  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 13620  013224  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 13621  013228  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 13622  01322C  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 13623  013230  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 13624  013234  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 13625  013238  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 13626  01323C  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 13627  013240  EC8A  F0A4         	call	___lldiv	;wreg free
 13628  013244  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 13629  013248  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 13630  01324C  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 13631  013250  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 13632                           
 13633                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 13634  013254  D00E               	goto	l1828
 13635  013256                     l13936:
 13636                           
 13637                           ;Timer2.c: 28: {
 13638                           ;Timer2.c: 29: RDIV = 0;
 13639  013256  0E00               	movlw	0
 13640  013258  0100               	movlb	0	; () banked
 13641  01325A  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 13642  01325C  0E00               	movlw	0
 13643  01325E  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 13644  013260  0E00               	movlw	0
 13645  013262  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 13646  013264  0E00               	movlw	0
 13647  013266  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;Timer2.c: 30: INDEX ++;
 13651  013268  2BF2               	incf	Timer2_Init@INDEX& (0+255),f,b
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;Timer2.c: 31: if (INDEX >= 3)
 13655  01326A  0E02               	movlw	2
 13656  01326C  65F2               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 13657  01326E  D001               	goto	l1828
 13658  013270  D023               	goto	u11270
 13659  013272                     l1828:
 13660                           
 13661                           ; BSR set to: 0
 13662                           
 13663                           ; BSR set to: 0
 13664  013272  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 13665  013276  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 13666  01327A  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 13667  01327E  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 13668  013282  0100               	movlb	0	; () banked
 13669  013284  51F2               	movf	Timer2_Init@INDEX& (0+255),w,b
 13670  013286  0D01               	mullw	1
 13671  013288  0E40               	movlw	low Timer2_Init@PRESCALE
 13672  01328A  24F3               	addwf	prodl,w,c
 13673  01328C  6EF6               	movwf	tblptrl,c
 13674  01328E  0EFC               	movlw	high Timer2_Init@PRESCALE
 13675  013290  20F4               	addwfc	prodh,w,c
 13676  013292  6EF7               	movwf	tblptrh,c
 13677  013294                     	if	1	;There are 3 active tblptr bytes
 13678  013294  6AF8               	clrf	tblptru,c
 13679  013296  0E00               	movlw	low (__mediumconst shr (0+16))
 13680  013298  22F8               	addwfc	tblptru,f,c
 13681  01329A                     	endif
 13682  01329A  0008               	tblrd		*
 13683  01329C  50F5               	movf	tablat,w,c
 13684  01329E  6F64               	movwf	___lldiv@divisor& (0+255),b
 13685  0132A0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13686  0132A2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13687  0132A4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13688  0132A6  EC8A  F0A4         	call	___lldiv	;wreg free
 13689  0132AA  0100               	movlb	0	; () banked
 13690  0132AC  5163               	movf	(?___lldiv+3)& (0+255),w,b
 13691  0132AE  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 13692  0132B0  E1D2               	bnz	l13936
 13693  0132B2  0561               	decf	(?___lldiv+1)& (0+255),w,b
 13694  0132B4  B0D8               	btfsc	status,0,c
 13695  0132B6  D7CF               	goto	l1827
 13696  0132B8                     u11270:
 13697                           
 13698                           ; BSR set to: 0
 13699                           ;Timer2.c: 33: }
 13700                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 13701                           
 13702                           ; BSR set to: 0
 13703  0132B8  50CA               	movf	4042,w,c	;volatile
 13704  0132BA  19F2               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13705  0132BC  0BFC               	andlw	-4
 13706  0132BE  19F2               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 13707  0132C0  6ECA               	movwf	4042,c	;volatile
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 13711  0132C2  84CA               	bsf	4042,2,c	;volatile
 13712                           
 13713                           ; BSR set to: 0
 13714                           ;Timer2.c: 44: Timer2_Clear();
 13715  0132C4  EC4C  F0B0         	call	_Timer2_Clear	;wreg free
 13716                           
 13717                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 13718  0132C8  0100               	movlb	0	; () banked
 13719  0132CA  51F2               	movf	Timer2_Init@INDEX& (0+255),w,b
 13720  0132CC  0D01               	mullw	1
 13721  0132CE  0E40               	movlw	low Timer2_Init@PRESCALE
 13722  0132D0  24F3               	addwf	prodl,w,c
 13723  0132D2  6EF6               	movwf	tblptrl,c
 13724  0132D4  0EFC               	movlw	high Timer2_Init@PRESCALE
 13725  0132D6  20F4               	addwfc	prodh,w,c
 13726  0132D8  6EF7               	movwf	tblptrh,c
 13727  0132DA                     	if	1	;There are 3 active tblptr bytes
 13728  0132DA  6AF8               	clrf	tblptru,c
 13729  0132DC  0E00               	movlw	low (__mediumconst shr (0+16))
 13730  0132DE  22F8               	addwfc	tblptru,f,c
 13731  0132E0                     	endif
 13732  0132E0  0008               	tblrd		*
 13733  0132E2  CFF5 F03A          	movff	tablat,Timer2_Init@PRE
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 13737  0132E6  0EFF               	movlw	255
 13738  0132E8  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 13739  0132EA  0101               	movlb	1	; () banked
 13740  0132EC  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 13741  0132EE  0EFF               	movlw	255
 13742  0132F0  0100               	movlb	0	; () banked
 13743  0132F2  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 13744  0132F4  0101               	movlb	1	; () banked
 13745  0132F6  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 13746  0132F8  0EFF               	movlw	255
 13747  0132FA  0100               	movlb	0	; () banked
 13748  0132FC  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 13749  0132FE  0101               	movlb	1	; () banked
 13750  013300  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 13751  013302  0EFF               	movlw	255
 13752  013304  0100               	movlb	0	; () banked
 13753  013306  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 13754  013308  0101               	movlb	1	; () banked
 13755  01330A  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 13756                           
 13757                           ; BSR set to: 1
 13758                           ;Timer2.c: 48: INDEX = DIV/PRE;
 13759  01330C  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 13760  013310  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 13761  013314  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 13762  013318  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 13763  01331C  503A               	movf	Timer2_Init@PRE,w,c
 13764  01331E  0100               	movlb	0	; () banked
 13765  013320  6F64               	movwf	___lldiv@divisor& (0+255),b
 13766  013322  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 13767  013324  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 13768  013326  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 13769  013328  EC8A  F0A4         	call	___lldiv	;wreg free
 13770  01332C  0100               	movlb	0	; () banked
 13771  01332E  5160               	movf	?___lldiv& (0+255),w,b
 13772  013330  6FF2               	movwf	Timer2_Init@INDEX& (0+255),b
 13773                           
 13774                           ; BSR set to: 0
 13775                           ;Timer2.c: 49: PR2 = INDEX;
 13776  013332  C0F2  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 13777                           
 13778                           ; BSR set to: 0
 13779  013336  0012               	return		;funcret
 13780  013338                     __end_of_Timer2_Init:
 13781                           	opt stack 0
 13782                           tosu	equ	0xFFF
 13783                           tosh	equ	0xFFE
 13784                           tosl	equ	0xFFD
 13785                           pclath	equ	0xFFA
 13786                           tblptru	equ	0xFF8
 13787                           tblptrh	equ	0xFF7
 13788                           tblptrl	equ	0xFF6
 13789                           tablat	equ	0xFF5
 13790                           prodh	equ	0xFF4
 13791                           prodl	equ	0xFF3
 13792                           intcon	equ	0xFF2
 13793                           postinc0	equ	0xFEE
 13794                           wreg	equ	0xFE8
 13795                           indf1	equ	0xFE7
 13796                           postdec1	equ	0xFE5
 13797                           fsr1h	equ	0xFE2
 13798                           fsr1l	equ	0xFE1
 13799                           indf2	equ	0xFDF
 13800                           postinc2	equ	0xFDE
 13801                           postdec2	equ	0xFDD
 13802                           plusw2	equ	0xFDB
 13803                           fsr2h	equ	0xFDA
 13804                           fsr2l	equ	0xFD9
 13805                           status	equ	0xFD8
 13806                           
 13807 ;; *************** function ___lldiv *****************
 13808 ;; Defined at:
 13809 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 13810 ;; Parameters:    Size  Location     Type
 13811 ;;  dividend        4    0[BANK0 ] unsigned long 
 13812 ;;  divisor         4    4[BANK0 ] unsigned long 
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;  quotient        4    8[BANK0 ] unsigned long 
 13815 ;;  counter         1   12[BANK0 ] unsigned char 
 13816 ;; Return value:  Size  Location     Type
 13817 ;;                  4    0[BANK0 ] unsigned long 
 13818 ;; Registers used:
 13819 ;;		wreg, status,2, status,0
 13820 ;; Tracked objects:
 13821 ;;		On entry : 0/0
 13822 ;;		On exit  : 0/0
 13823 ;;		Unchanged: 0/0
 13824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13825 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13826 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13828 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13829 ;;Total ram usage:       13 bytes
 13830 ;; Hardware stack levels used:    1
 13831 ;; Hardware stack levels required when called:    7
 13832 ;; This function calls:
 13833 ;;		Nothing
 13834 ;; This function is called by:
 13835 ;;		_Timer2_Init
 13836 ;;		_rand_between
 13837 ;;		_I2C_Init
 13838 ;;		_Timer0_Init
 13839 ;; This function uses a non-reentrant model
 13840 ;;
 13841                           
 13842                           	psect	text67
 13843  014914                     __ptext67:
 13844                           	opt stack 0
 13845  014914                     ___lldiv:
 13846                           	opt stack 19
 13847                           
 13848                           ; BSR set to: 0
 13849                           ;incstack = 0
 13850  014914  0E00               	movlw	0
 13851  014916  0100               	movlb	0	; () banked
 13852  014918  6F68               	movwf	___lldiv@quotient& (0+255),b
 13853  01491A  0E00               	movlw	0
 13854  01491C  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 13855  01491E  0E00               	movlw	0
 13856  014920  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 13857  014922  0E00               	movlw	0
 13858  014924  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 13859                           
 13860                           ; BSR set to: 0
 13861  014926  5164               	movf	___lldiv@divisor& (0+255),w,b
 13862  014928  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 13863  01492A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 13864  01492C  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 13865  01492E  B4D8               	btfsc	status,2,c
 13866  014930  D02A               	goto	l2663
 13867                           
 13868                           ; BSR set to: 0
 13869  014932  0E01               	movlw	1
 13870  014934  6F6C               	movwf	___lldiv@counter& (0+255),b
 13871  014936  D006               	goto	l2658
 13872  014938                     
 13873                           ; BSR set to: 0
 13874                           
 13875                           ; BSR set to: 0
 13876  014938  90D8               	bcf	status,0,c
 13877  01493A  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 13878  01493C  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 13879  01493E  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 13880  014940  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 13881  014942  2B6C               	incf	___lldiv@counter& (0+255),f,b
 13882  014944                     l2658:
 13883                           
 13884                           ; BSR set to: 0
 13885                           
 13886                           ; BSR set to: 0
 13887  014944  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 13888  014946  D7F8               	goto	l2659
 13889  014948                     u11020:
 13890                           
 13891                           ; BSR set to: 0
 13892                           
 13893                           ; BSR set to: 0
 13894                           
 13895                           ; BSR set to: 0
 13896  014948  90D8               	bcf	status,0,c
 13897  01494A  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 13898  01494C  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 13899  01494E  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 13900  014950  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 13901                           
 13902                           ; BSR set to: 0
 13903  014952  5164               	movf	___lldiv@divisor& (0+255),w,b
 13904  014954  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 13905  014956  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13906  014958  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 13907  01495A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13908  01495C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 13909  01495E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13910  014960  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 13911  014962  A0D8               	btfss	status,0,c
 13912  014964  D009               	goto	l2662
 13913                           
 13914                           ; BSR set to: 0
 13915  014966  5164               	movf	___lldiv@divisor& (0+255),w,b
 13916  014968  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 13917  01496A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 13918  01496C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 13919  01496E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 13920  014970  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 13921  014972  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 13922  014974  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 13923                           
 13924                           ; BSR set to: 0
 13925  014976  8168               	bsf	___lldiv@quotient& (0+255),0,b
 13926  014978                     l2662:
 13927                           
 13928                           ; BSR set to: 0
 13929                           
 13930                           ; BSR set to: 0
 13931  014978  90D8               	bcf	status,0,c
 13932  01497A  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 13933  01497C  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 13934  01497E  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 13935  014980  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 13936                           
 13937                           ; BSR set to: 0
 13938  014982  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 13939  014984  D7E1               	goto	u11020
 13940  014986                     l2663:
 13941                           
 13942                           ; BSR set to: 0
 13943                           
 13944                           ; BSR set to: 0
 13945  014986  C068  F060         	movff	___lldiv@quotient,?___lldiv
 13946  01498A  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 13947  01498E  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 13948  014992  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 13949                           
 13950                           ; BSR set to: 0
 13951  014996  0012               	return		;funcret
 13952  014998                     __end_of___lldiv:
 13953                           	opt stack 0
 13954                           tosu	equ	0xFFF
 13955                           tosh	equ	0xFFE
 13956                           tosl	equ	0xFFD
 13957                           pclath	equ	0xFFA
 13958                           tblptru	equ	0xFF8
 13959                           tblptrh	equ	0xFF7
 13960                           tblptrl	equ	0xFF6
 13961                           tablat	equ	0xFF5
 13962                           prodh	equ	0xFF4
 13963                           prodl	equ	0xFF3
 13964                           intcon	equ	0xFF2
 13965                           postinc0	equ	0xFEE
 13966                           wreg	equ	0xFE8
 13967                           indf1	equ	0xFE7
 13968                           postdec1	equ	0xFE5
 13969                           fsr1h	equ	0xFE2
 13970                           fsr1l	equ	0xFE1
 13971                           indf2	equ	0xFDF
 13972                           postinc2	equ	0xFDE
 13973                           postdec2	equ	0xFDD
 13974                           plusw2	equ	0xFDB
 13975                           fsr2h	equ	0xFDA
 13976                           fsr2l	equ	0xFD9
 13977                           status	equ	0xFD8
 13978                           
 13979 ;; *************** function _Timer2_Clear *****************
 13980 ;; Defined at:
 13981 ;;		line 3 in file "Library/Timer2.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;		None
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;		None
 13986 ;; Return value:  Size  Location     Type
 13987 ;;                  1    wreg      void 
 13988 ;; Registers used:
 13989 ;;		None
 13990 ;; Tracked objects:
 13991 ;;		On entry : 0/0
 13992 ;;		On exit  : 0/0
 13993 ;;		Unchanged: 0/0
 13994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13999 ;;Total ram usage:        0 bytes
 14000 ;; Hardware stack levels used:    1
 14001 ;; Hardware stack levels required when called:    7
 14002 ;; This function calls:
 14003 ;;		Nothing
 14004 ;; This function is called by:
 14005 ;;		_Timer2_Init
 14006 ;; This function uses a non-reentrant model
 14007 ;;
 14008                           
 14009                           	psect	text68
 14010  016098                     __ptext68:
 14011                           	opt stack 0
 14012  016098                     _Timer2_Clear:
 14013                           	opt stack 19
 14014                           
 14015                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;incstack = 0
 14019  016098  929E               	bcf	3998,1,c	;volatile
 14020                           
 14021                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 14022  01609A  929D               	bcf	3997,1,c	;volatile
 14023                           
 14024                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 14025  01609C  929F               	bcf	3999,1,c	;volatile
 14026  01609E  0012               	return		;funcret
 14027  0160A0                     __end_of_Timer2_Clear:
 14028                           	opt stack 0
 14029                           tosu	equ	0xFFF
 14030                           tosh	equ	0xFFE
 14031                           tosl	equ	0xFFD
 14032                           pclath	equ	0xFFA
 14033                           tblptru	equ	0xFF8
 14034                           tblptrh	equ	0xFF7
 14035                           tblptrl	equ	0xFF6
 14036                           tablat	equ	0xFF5
 14037                           prodh	equ	0xFF4
 14038                           prodl	equ	0xFF3
 14039                           intcon	equ	0xFF2
 14040                           postinc0	equ	0xFEE
 14041                           wreg	equ	0xFE8
 14042                           indf1	equ	0xFE7
 14043                           postdec1	equ	0xFE5
 14044                           fsr1h	equ	0xFE2
 14045                           fsr1l	equ	0xFE1
 14046                           indf2	equ	0xFDF
 14047                           postinc2	equ	0xFDE
 14048                           postdec2	equ	0xFDD
 14049                           plusw2	equ	0xFDB
 14050                           fsr2h	equ	0xFDA
 14051                           fsr2l	equ	0xFD9
 14052                           status	equ	0xFD8
 14053                           
 14054 ;; *************** function _SPI_DisableISR *****************
 14055 ;; Defined at:
 14056 ;;		line 181 in file "Library/SPI.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14059 ;;		 -> SPI1(11), SPI2(11), 
 14060 ;; Auto vars:     Size  Location     Type
 14061 ;;		None
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      void 
 14064 ;; Registers used:
 14065 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 0/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14071 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14075 ;;Total ram usage:        2 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    7
 14078 ;; This function calls:
 14079 ;;		Nothing
 14080 ;; This function is called by:
 14081 ;;		_SPI_Init
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           	psect	text69
 14086  015C6C                     __ptext69:
 14087                           	opt stack 0
 14088  015C6C                     _SPI_DisableISR:
 14089                           	opt stack 20
 14090                           
 14091                           ;SPI.c: 183: switch (pInput->mChannel)
 14092                           
 14093                           ;incstack = 0
 14094  015C6C  D004               	goto	l654
 14095  015C6E                     l655:
 14096                           
 14097                           ; BSR set to: 0
 14098  015C6E  969D               	bcf	3997,3,c	;volatile
 14099  015C70  0012               	return	
 14100  015C72                     l657:
 14101                           
 14102                           ; BSR set to: 0
 14103  015C72  9EA3               	bcf	4003,7,c	;volatile
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;SPI.c: 188: };
 14107                           
 14108                           ; BSR set to: 0
 14109                           
 14110                           ;SPI.c: 187: default: return;
 14111  015C74  0012               	return	
 14112  015C76                     l654:
 14113                           
 14114                           ; BSR set to: 0
 14115  015C76  0100               	movlb	0	; () banked
 14116  015C78  EE20 F002          	lfsr	2,2
 14117  015C7C  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 14118  015C7E  26D9               	addwf	fsr2l,f,c
 14119  015C80  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 14120  015C82  22DA               	addwfc	fsr2h,f,c
 14121  015C84  50DF               	movf	indf2,w,c
 14122                           
 14123                           ; Switch size 1, requested type "space"
 14124                           ; Number of cases is 2, Range of values is 0 to 1
 14125                           ; switch strategies available:
 14126                           ; Name         Instructions Cycles
 14127                           ; simple_byte            7     4 (average)
 14128                           ;	Chosen strategy is simple_byte
 14129  015C86  0A00               	xorlw	0	; case 0
 14130  015C88  B4D8               	btfsc	status,2,c
 14131  015C8A  D7F1               	goto	l655
 14132  015C8C  0A01               	xorlw	1	; case 1
 14133  015C8E  A4D8               	btfss	status,2,c
 14134  015C90  0012               	return	
 14135  015C92  D7EF               	goto	l657
 14136  015C94                     __end_of_SPI_DisableISR:
 14137                           	opt stack 0
 14138                           tosu	equ	0xFFF
 14139                           tosh	equ	0xFFE
 14140                           tosl	equ	0xFFD
 14141                           pclath	equ	0xFFA
 14142                           tblptru	equ	0xFF8
 14143                           tblptrh	equ	0xFF7
 14144                           tblptrl	equ	0xFF6
 14145                           tablat	equ	0xFF5
 14146                           prodh	equ	0xFF4
 14147                           prodl	equ	0xFF3
 14148                           intcon	equ	0xFF2
 14149                           postinc0	equ	0xFEE
 14150                           wreg	equ	0xFE8
 14151                           indf1	equ	0xFE7
 14152                           postdec1	equ	0xFE5
 14153                           fsr1h	equ	0xFE2
 14154                           fsr1l	equ	0xFE1
 14155                           indf2	equ	0xFDF
 14156                           postinc2	equ	0xFDE
 14157                           postdec2	equ	0xFDD
 14158                           plusw2	equ	0xFDB
 14159                           fsr2h	equ	0xFDA
 14160                           fsr2l	equ	0xFD9
 14161                           status	equ	0xFD8
 14162                           
 14163 ;; *************** function _SPI_DCS *****************
 14164 ;; Defined at:
 14165 ;;		line 219 in file "Library/SPI.c"
 14166 ;; Parameters:    Size  Location     Type
 14167 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14168 ;;		 -> SPI1(11), SPI2(11), 
 14169 ;; Auto vars:     Size  Location     Type
 14170 ;;		None
 14171 ;; Return value:  Size  Location     Type
 14172 ;;                  1    wreg      void 
 14173 ;; Registers used:
 14174 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14175 ;; Tracked objects:
 14176 ;;		On entry : 0/0
 14177 ;;		On exit  : 0/0
 14178 ;;		Unchanged: 0/0
 14179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14180 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14184 ;;Total ram usage:        2 bytes
 14185 ;; Hardware stack levels used:    1
 14186 ;; Hardware stack levels required when called:    7
 14187 ;; This function calls:
 14188 ;;		Nothing
 14189 ;; This function is called by:
 14190 ;;		_SPI_Init
 14191 ;; This function uses a non-reentrant model
 14192 ;;
 14193                           
 14194                           	psect	text70
 14195  015B2A                     __ptext70:
 14196                           	opt stack 0
 14197  015B2A                     _SPI_DCS:
 14198                           	opt stack 20
 14199                           
 14200                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;incstack = 0
 14204  015B2A  0100               	movlb	0	; () banked
 14205  015B2C  EE20 F002          	lfsr	2,2
 14206  015B30  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 14207  015B32  26D9               	addwf	fsr2l,f,c
 14208  015B34  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 14209  015B36  22DA               	addwfc	fsr2h,f,c
 14210  015B38  50DF               	movf	indf2,w,c
 14211  015B3A  A4D8               	btfss	status,2,c
 14212  015B3C  D007               	goto	l673
 14213                           
 14214                           ; BSR set to: 0
 14215                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 14216  015B3E  C1B7  FFD9         	movff	_PortC+4,fsr2l
 14217  015B42  C1B8  FFDA         	movff	_PortC+5,fsr2h
 14218  015B46  0101               	movlb	1	; () banked
 14219  015B48  84DF               	bsf	indf2,2,c
 14220  015B4A  0012               	return	
 14221  015B4C                     l673:
 14222                           
 14223                           ;SPI.c: 223: else
 14224                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 14225                           
 14226                           ; BSR set to: 1
 14227  015B4C  C1A3  FFD9         	movff	_PortD+4,fsr2l
 14228  015B50  C1A4  FFDA         	movff	_PortD+5,fsr2h
 14229  015B54  0101               	movlb	1	; () banked
 14230  015B56  8EDF               	bsf	indf2,7,c
 14231  015B58  0012               	return	
 14232  015B5A                     __end_of_SPI_DCS:
 14233                           	opt stack 0
 14234                           tosu	equ	0xFFF
 14235                           tosh	equ	0xFFE
 14236                           tosl	equ	0xFFD
 14237                           pclath	equ	0xFFA
 14238                           tblptru	equ	0xFF8
 14239                           tblptrh	equ	0xFF7
 14240                           tblptrl	equ	0xFF6
 14241                           tablat	equ	0xFF5
 14242                           prodh	equ	0xFF4
 14243                           prodl	equ	0xFF3
 14244                           intcon	equ	0xFF2
 14245                           postinc0	equ	0xFEE
 14246                           wreg	equ	0xFE8
 14247                           indf1	equ	0xFE7
 14248                           postdec1	equ	0xFE5
 14249                           fsr1h	equ	0xFE2
 14250                           fsr1l	equ	0xFE1
 14251                           indf2	equ	0xFDF
 14252                           postinc2	equ	0xFDE
 14253                           postdec2	equ	0xFDD
 14254                           plusw2	equ	0xFDB
 14255                           fsr2h	equ	0xFDA
 14256                           fsr2l	equ	0xFD9
 14257                           status	equ	0xFD8
 14258                           
 14259 ;; *************** function _Get_Sensor_State *****************
 14260 ;; Defined at:
 14261 ;;		line 164 in file "main.c"
 14262 ;; Parameters:    Size  Location     Type
 14263 ;;		None
 14264 ;; Auto vars:     Size  Location     Type
 14265 ;;		None
 14266 ;; Return value:  Size  Location     Type
 14267 ;;                  1    wreg      void 
 14268 ;; Registers used:
 14269 ;;		wreg, status,2, status,0, cstack
 14270 ;; Tracked objects:
 14271 ;;		On entry : 0/0
 14272 ;;		On exit  : 0/0
 14273 ;;		Unchanged: 0/0
 14274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14279 ;;Total ram usage:        0 bytes
 14280 ;; Hardware stack levels used:    1
 14281 ;; Hardware stack levels required when called:    8
 14282 ;; This function calls:
 14283 ;;		_eusartRec
 14284 ;;		_eusartSend
 14285 ;; This function is called by:
 14286 ;;		_main
 14287 ;; This function uses a non-reentrant model
 14288 ;;
 14289                           
 14290                           	psect	text71
 14291  015EF6                     __ptext71:
 14292                           	opt stack 0
 14293  015EF6                     _Get_Sensor_State:
 14294                           	opt stack 22
 14295                           
 14296                           ;main.c: 165: eusartSend(142);
 14297                           
 14298                           ; BSR set to: 1
 14299                           ;incstack = 0
 14300  015EF6  0E8E               	movlw	142
 14301  015EF8  EC23  F0B0         	call	_eusartSend
 14302                           
 14303                           ;main.c: 166: eusartSend(7);
 14304  015EFC  0E07               	movlw	7
 14305  015EFE  EC23  F0B0         	call	_eusartSend
 14306                           
 14307                           ;main.c: 167: BumpSensor = (eusartRec() & 0b00000011);
 14308  015F02  EC50  F0B0         	call	_eusartRec	;wreg free
 14309  015F06  0B03               	andlw	3
 14310  015F08  0100               	movlb	0	; () banked
 14311  015F0A  6FF1               	movwf	_BumpSensor& (0+255),b
 14312                           
 14313                           ; BSR set to: 0
 14314  015F0C  0012               	return		;funcret
 14315  015F0E                     __end_of_Get_Sensor_State:
 14316                           	opt stack 0
 14317                           tosu	equ	0xFFF
 14318                           tosh	equ	0xFFE
 14319                           tosl	equ	0xFFD
 14320                           pclath	equ	0xFFA
 14321                           tblptru	equ	0xFF8
 14322                           tblptrh	equ	0xFF7
 14323                           tblptrl	equ	0xFF6
 14324                           tablat	equ	0xFF5
 14325                           prodh	equ	0xFF4
 14326                           prodl	equ	0xFF3
 14327                           intcon	equ	0xFF2
 14328                           postinc0	equ	0xFEE
 14329                           wreg	equ	0xFE8
 14330                           indf1	equ	0xFE7
 14331                           postdec1	equ	0xFE5
 14332                           fsr1h	equ	0xFE2
 14333                           fsr1l	equ	0xFE1
 14334                           indf2	equ	0xFDF
 14335                           postinc2	equ	0xFDE
 14336                           postdec2	equ	0xFDD
 14337                           plusw2	equ	0xFDB
 14338                           fsr2h	equ	0xFDA
 14339                           fsr2l	equ	0xFD9
 14340                           status	equ	0xFD8
 14341                           
 14342 ;; *************** function _eusartRec *****************
 14343 ;; Defined at:
 14344 ;;		line 152 in file "main.c"
 14345 ;; Parameters:    Size  Location     Type
 14346 ;;		None
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;		None
 14349 ;; Return value:  Size  Location     Type
 14350 ;;                  1    wreg      unsigned char 
 14351 ;; Registers used:
 14352 ;;		wreg, status,2
 14353 ;; Tracked objects:
 14354 ;;		On entry : 0/0
 14355 ;;		On exit  : 0/0
 14356 ;;		Unchanged: 0/0
 14357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14362 ;;Total ram usage:        0 bytes
 14363 ;; Hardware stack levels used:    1
 14364 ;; Hardware stack levels required when called:    7
 14365 ;; This function calls:
 14366 ;;		Nothing
 14367 ;; This function is called by:
 14368 ;;		_Get_Sensor_State
 14369 ;;		_UpdateDistance
 14370 ;;		_Turn
 14371 ;;		_Get_VirtualWall_State
 14372 ;; This function uses a non-reentrant model
 14373 ;;
 14374                           
 14375                           	psect	text72
 14376  0160A0                     __ptext72:
 14377                           	opt stack 0
 14378  0160A0                     _eusartRec:
 14379                           	opt stack 22
 14380                           
 14381                           ;main.c: 153: while (!PIR1bits.RC1IF) {}
 14382                           
 14383                           ; BSR set to: 0
 14384                           ;incstack = 0
 14385  0160A0  AA9E               	btfss	3998,5,c	;volatile
 14386  0160A2  D7FE               	goto	_eusartRec
 14387                           
 14388                           ;main.c: 154: return RCREG1;
 14389  0160A4  50AF               	movf	4015,w,c	;volatile
 14390  0160A6  0012               	return	
 14391  0160A8                     __end_of_eusartRec:
 14392                           	opt stack 0
 14393                           tosu	equ	0xFFF
 14394                           tosh	equ	0xFFE
 14395                           tosl	equ	0xFFD
 14396                           pclath	equ	0xFFA
 14397                           tblptru	equ	0xFF8
 14398                           tblptrh	equ	0xFF7
 14399                           tblptrl	equ	0xFF6
 14400                           tablat	equ	0xFF5
 14401                           prodh	equ	0xFF4
 14402                           prodl	equ	0xFF3
 14403                           intcon	equ	0xFF2
 14404                           postinc0	equ	0xFEE
 14405                           wreg	equ	0xFE8
 14406                           indf1	equ	0xFE7
 14407                           postdec1	equ	0xFE5
 14408                           fsr1h	equ	0xFE2
 14409                           fsr1l	equ	0xFE1
 14410                           indf2	equ	0xFDF
 14411                           postinc2	equ	0xFDE
 14412                           postdec2	equ	0xFDD
 14413                           plusw2	equ	0xFDB
 14414                           fsr2h	equ	0xFDA
 14415                           fsr2l	equ	0xFD9
 14416                           status	equ	0xFD8
 14417                           
 14418 ;; *************** function _FunctInitButton *****************
 14419 ;; Defined at:
 14420 ;;		line 16 in file "Functions.c"
 14421 ;; Parameters:    Size  Location     Type
 14422 ;;		None
 14423 ;; Auto vars:     Size  Location     Type
 14424 ;;		None
 14425 ;; Return value:  Size  Location     Type
 14426 ;;                  1    wreg      void 
 14427 ;; Registers used:
 14428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14429 ;; Tracked objects:
 14430 ;;		On entry : 0/0
 14431 ;;		On exit  : 0/0
 14432 ;;		Unchanged: 0/0
 14433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14438 ;;Total ram usage:        0 bytes
 14439 ;; Hardware stack levels used:    1
 14440 ;; Hardware stack levels required when called:   16
 14441 ;; This function calls:
 14442 ;;		_Button_Init
 14443 ;; This function is called by:
 14444 ;;		_main
 14445 ;; This function uses a non-reentrant model
 14446 ;;
 14447                           
 14448                           	psect	text73
 14449  014C76                     __ptext73:
 14450                           	opt stack 0
 14451  014C76                     _FunctInitButton:
 14452                           	opt stack 14
 14453                           
 14454                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 14455                           
 14456                           ;incstack = 0
 14457  014C76  0EDD               	movlw	low _TestButton
 14458  014C78  0100               	movlb	0	; () banked
 14459  014C7A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14460  014C7C  0E02               	movlw	high _TestButton
 14461  014C7E  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14462  014C80  0E00               	movlw	0
 14463  014C82  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14464  014C84  0E02               	movlw	2
 14465  014C86  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14466  014C88  0E26               	movlw	low _MXK_InitTestButton
 14467  014C8A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14468  014C8C  0E5F               	movlw	high _MXK_InitTestButton
 14469  014C8E  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14470  014C90  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 14471  014C92  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14472  014C94  0EE4               	movlw	low _MXK_TestButton
 14473  014C96  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14474  014C98  0E5F               	movlw	high _MXK_TestButton
 14475  014C9A  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14476  014C9C  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 14477  014C9E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14478  014CA0  0EC4               	movlw	low _Event_TestButton
 14479  014CA2  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14480  014CA4  0E5A               	movlw	high _Event_TestButton
 14481  014CA6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14482  014CA8  0E01               	movlw	low (_Event_TestButton shr (0+16))
 14483  014CAA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14484  014CAC  EC1B  F0A0         	call	_Button_Init	;wreg free
 14485                           
 14486                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 14487  014CB0  0ED3               	movlw	low _DIPSwitch
 14488  014CB2  0100               	movlb	0	; () banked
 14489  014CB4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14490  014CB6  0E02               	movlw	high _DIPSwitch
 14491  014CB8  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14492  014CBA  0E00               	movlw	0
 14493  014CBC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14494  014CBE  0E02               	movlw	2
 14495  014CC0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14496  014CC2  0E0E               	movlw	low _MXK_InitDIPSwitch
 14497  014CC4  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14498  014CC6  0E5F               	movlw	high _MXK_InitDIPSwitch
 14499  014CC8  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14500  014CCA  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 14501  014CCC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14502  014CCE  0E6C               	movlw	low _MXK_DIPSwitch
 14503  014CD0  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14504  014CD2  0E5F               	movlw	high _MXK_DIPSwitch
 14505  014CD4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14506  014CD6  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 14507  014CD8  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14508  014CDA  0E0C               	movlw	low _Event_DIPSwitch
 14509  014CDC  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14510  014CDE  0E5D               	movlw	high _Event_DIPSwitch
 14511  014CE0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14512  014CE2  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 14513  014CE4  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14514  014CE6  EC1B  F0A0         	call	_Button_Init	;wreg free
 14515  014CEA  0012               	return		;funcret
 14516  014CEC                     __end_of_FunctInitButton:
 14517                           	opt stack 0
 14518                           tosu	equ	0xFFF
 14519                           tosh	equ	0xFFE
 14520                           tosl	equ	0xFFD
 14521                           pclath	equ	0xFFA
 14522                           tblptru	equ	0xFF8
 14523                           tblptrh	equ	0xFF7
 14524                           tblptrl	equ	0xFF6
 14525                           tablat	equ	0xFF5
 14526                           prodh	equ	0xFF4
 14527                           prodl	equ	0xFF3
 14528                           intcon	equ	0xFF2
 14529                           postinc0	equ	0xFEE
 14530                           wreg	equ	0xFE8
 14531                           indf1	equ	0xFE7
 14532                           postdec1	equ	0xFE5
 14533                           fsr1h	equ	0xFE2
 14534                           fsr1l	equ	0xFE1
 14535                           indf2	equ	0xFDF
 14536                           postinc2	equ	0xFDE
 14537                           postdec2	equ	0xFDD
 14538                           plusw2	equ	0xFDB
 14539                           fsr2h	equ	0xFDA
 14540                           fsr2l	equ	0xFD9
 14541                           status	equ	0xFD8
 14542                           
 14543 ;; *************** function _Button_Init *****************
 14544 ;; Defined at:
 14545 ;;		line 18 in file "Library/Button.c"
 14546 ;; Parameters:    Size  Location     Type
 14547 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 14548 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 14549 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 14550 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 14551 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 14552 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 14553 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 14554 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 14555 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 14556 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 14557 ;; Auto vars:     Size  Location     Type
 14558 ;;		None
 14559 ;; Return value:  Size  Location     Type
 14560 ;;                  1    wreg      void 
 14561 ;; Registers used:
 14562 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14563 ;; Tracked objects:
 14564 ;;		On entry : 0/0
 14565 ;;		On exit  : 0/0
 14566 ;;		Unchanged: 0/0
 14567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14568 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14571 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14572 ;;Total ram usage:       13 bytes
 14573 ;; Hardware stack levels used:    1
 14574 ;; Hardware stack levels required when called:   15
 14575 ;; This function calls:
 14576 ;;		_HMI_InitButtons
 14577 ;;		_MXK_InitDIPSwitch
 14578 ;;		_MXK_InitTestButton
 14579 ;; This function is called by:
 14580 ;;		_HMI_Init
 14581 ;;		_FunctInitButton
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           	psect	text74
 14586  014036                     __ptext74:
 14587                           	opt stack 0
 14588  014036                     _Button_Init:
 14589                           	opt stack 14
 14590                           
 14591                           ;Button.c: 21: if(pInput==(void*)0)
 14592                           
 14593                           ;incstack = 0
 14594  014036  0100               	movlb	0	; () banked
 14595  014038  519B               	movf	Button_Init@pInput& (0+255),w,b
 14596  01403A  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 14597  01403C  B4D8               	btfsc	status,2,c
 14598  01403E  0012               	return	
 14599                           
 14600                           ; BSR set to: 0
 14601                           ;Button.c: 23: if(pInitIO==(void*)0)
 14602                           
 14603                           ; BSR set to: 0
 14604                           
 14605                           ; BSR set to: 0
 14606                           ;Button.c: 22: return;
 14607  014040  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14608  014042  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 14609  014044  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 14610  014046  B4D8               	btfsc	status,2,c
 14611  014048  0012               	return	
 14612                           
 14613                           ; BSR set to: 0
 14614                           ;Button.c: 25: if(pGetState==(void*)0)
 14615                           
 14616                           ; BSR set to: 0
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;Button.c: 24: return;
 14620  01404A  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 14621  01404C  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 14622  01404E  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 14623  014050  B4D8               	btfsc	status,2,c
 14624  014052  0012               	return	
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;Button.c: 27: if(pFunction==(void*)0)
 14628                           
 14629                           ; BSR set to: 0
 14630                           
 14631                           ; BSR set to: 0
 14632                           ;Button.c: 26: return;
 14633  014054  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 14634  014056  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 14635  014058  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 14636  01405A  B4D8               	btfsc	status,2,c
 14637  01405C  0012               	return	
 14638                           
 14639                           ; BSR set to: 0
 14640                           ;Button.c: 30: if(pThreshold == 0)
 14641                           
 14642                           ; BSR set to: 0
 14643                           
 14644                           ; BSR set to: 0
 14645                           ;Button.c: 28: return;
 14646  01405E  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 14647  014060  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 14648  014062  A4D8               	btfss	status,2,c
 14649  014064  D004               	goto	l8
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;Button.c: 31: pThreshold = 1;
 14653  014066  0E00               	movlw	0
 14654  014068  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14655  01406A  0E01               	movlw	1
 14656  01406C  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14657  01406E                     l8:
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;Button.c: 34: pInput->mState = 0;
 14661                           
 14662                           ; BSR set to: 0
 14663  01406E  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 14664  014072  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 14665  014076  0E00               	movlw	0
 14666  014078  6EDF               	movwf	indf2,c
 14667                           
 14668                           ; BSR set to: 0
 14669                           ;Button.c: 35: pInput->mCount = 0;
 14670  01407A  EE20 F001          	lfsr	2,1
 14671  01407E  519B               	movf	Button_Init@pInput& (0+255),w,b
 14672  014080  26D9               	addwf	fsr2l,f,c
 14673  014082  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14674  014084  22DA               	addwfc	fsr2h,f,c
 14675  014086  0E00               	movlw	0
 14676  014088  6EDF               	movwf	indf2,c
 14677                           
 14678                           ; BSR set to: 0
 14679                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 14680  01408A  EE20 F002          	lfsr	2,2
 14681  01408E  519B               	movf	Button_Init@pInput& (0+255),w,b
 14682  014090  26D9               	addwf	fsr2l,f,c
 14683  014092  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14684  014094  22DA               	addwfc	fsr2h,f,c
 14685  014096  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 14686  01409A  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 14687                           
 14688                           ; BSR set to: 0
 14689                           ;Button.c: 37: pInput->mFunction = pFunction;
 14690  01409E  EE20 F004          	lfsr	2,4
 14691  0140A2  519B               	movf	Button_Init@pInput& (0+255),w,b
 14692  0140A4  26D9               	addwf	fsr2l,f,c
 14693  0140A6  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14694  0140A8  22DA               	addwfc	fsr2h,f,c
 14695  0140AA  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 14696  0140AE  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 14697  0140B2  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;Button.c: 38: pInput->mGetState = pGetState;
 14701  0140B6  EE20 F007          	lfsr	2,7
 14702  0140BA  519B               	movf	Button_Init@pInput& (0+255),w,b
 14703  0140BC  26D9               	addwf	fsr2l,f,c
 14704  0140BE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14705  0140C0  22DA               	addwfc	fsr2h,f,c
 14706  0140C2  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 14707  0140C6  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 14708  0140CA  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;Button.c: 41: pInitIO();
 14712  0140CE  D801               	call	u11948
 14713  0140D0  0012               	return	
 14714  0140D2                     u11948:
 14715  0140D2  0005               	push	
 14716  0140D4  6EFA               	movwf	pclath,c
 14717  0140D6  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14718  0140D8  6EFD               	movwf	tosl,c
 14719  0140DA  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 14720  0140DC  6EFE               	movwf	tosh,c
 14721  0140DE  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 14722  0140E0  6EFF               	movwf	tosu,c
 14723  0140E2  50FA               	movf	pclath,w,c
 14724  0140E4  0012               	return		;indir
 14725  0140E6                     __end_of_Button_Init:
 14726                           	opt stack 0
 14727                           tosu	equ	0xFFF
 14728                           tosh	equ	0xFFE
 14729                           tosl	equ	0xFFD
 14730                           pclath	equ	0xFFA
 14731                           tblptru	equ	0xFF8
 14732                           tblptrh	equ	0xFF7
 14733                           tblptrl	equ	0xFF6
 14734                           tablat	equ	0xFF5
 14735                           prodh	equ	0xFF4
 14736                           prodl	equ	0xFF3
 14737                           intcon	equ	0xFF2
 14738                           postinc0	equ	0xFEE
 14739                           wreg	equ	0xFE8
 14740                           indf1	equ	0xFE7
 14741                           postdec1	equ	0xFE5
 14742                           fsr1h	equ	0xFE2
 14743                           fsr1l	equ	0xFE1
 14744                           indf2	equ	0xFDF
 14745                           postinc2	equ	0xFDE
 14746                           postdec2	equ	0xFDD
 14747                           plusw2	equ	0xFDB
 14748                           fsr2h	equ	0xFDA
 14749                           fsr2l	equ	0xFD9
 14750                           status	equ	0xFD8
 14751                           
 14752 ;; *************** function _MXK_InitDIPSwitch *****************
 14753 ;; Defined at:
 14754 ;;		line 20 in file "Library/MXK.c"
 14755 ;; Parameters:    Size  Location     Type
 14756 ;;		None
 14757 ;; Auto vars:     Size  Location     Type
 14758 ;;		None
 14759 ;; Return value:  Size  Location     Type
 14760 ;;                  1    wreg      void 
 14761 ;; Registers used:
 14762 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14763 ;; Tracked objects:
 14764 ;;		On entry : 0/0
 14765 ;;		On exit  : 0/0
 14766 ;;		Unchanged: 0/0
 14767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14772 ;;Total ram usage:        0 bytes
 14773 ;; Hardware stack levels used:    1
 14774 ;; Hardware stack levels required when called:   14
 14775 ;; This function calls:
 14776 ;;		_Port_SetQuadType
 14777 ;; This function is called by:
 14778 ;;		_FunctInitButton
 14779 ;;		_Button_Init
 14780 ;; This function uses a non-reentrant model
 14781 ;;
 14782                           
 14783                           	psect	text75
 14784  015F0E                     __ptext75:
 14785                           	opt stack 0
 14786  015F0E                     _MXK_InitDIPSwitch:
 14787                           	opt stack 14
 14788                           
 14789                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 14790                           
 14791                           ;incstack = 0
 14792  015F0E  0E9F               	movlw	low _PortD
 14793  015F10  0100               	movlb	0	; () banked
 14794  015F12  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 14795  015F14  0E01               	movlw	high _PortD
 14796  015F16  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14797  015F18  0E00               	movlw	0
 14798  015F1A  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14799  015F1C  0E00               	movlw	0
 14800  015F1E  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 14801  015F20  EC98  F08F         	call	_Port_SetQuadType	;wreg free
 14802  015F24  0012               	return		;funcret
 14803  015F26                     __end_of_MXK_InitDIPSwitch:
 14804                           	opt stack 0
 14805                           tosu	equ	0xFFF
 14806                           tosh	equ	0xFFE
 14807                           tosl	equ	0xFFD
 14808                           pclath	equ	0xFFA
 14809                           tblptru	equ	0xFF8
 14810                           tblptrh	equ	0xFF7
 14811                           tblptrl	equ	0xFF6
 14812                           tablat	equ	0xFF5
 14813                           prodh	equ	0xFF4
 14814                           prodl	equ	0xFF3
 14815                           intcon	equ	0xFF2
 14816                           postinc0	equ	0xFEE
 14817                           wreg	equ	0xFE8
 14818                           indf1	equ	0xFE7
 14819                           postdec1	equ	0xFE5
 14820                           fsr1h	equ	0xFE2
 14821                           fsr1l	equ	0xFE1
 14822                           indf2	equ	0xFDF
 14823                           postinc2	equ	0xFDE
 14824                           postdec2	equ	0xFDD
 14825                           plusw2	equ	0xFDB
 14826                           fsr2h	equ	0xFDA
 14827                           fsr2l	equ	0xFD9
 14828                           status	equ	0xFD8
 14829                           
 14830 ;; *************** function _HMI_InitButtons *****************
 14831 ;; Defined at:
 14832 ;;		line 21 in file "HMI.c"
 14833 ;; Parameters:    Size  Location     Type
 14834 ;;		None
 14835 ;; Auto vars:     Size  Location     Type
 14836 ;;		None
 14837 ;; Return value:  Size  Location     Type
 14838 ;;                  1    wreg      void 
 14839 ;; Registers used:
 14840 ;;		wreg, status,2
 14841 ;; Tracked objects:
 14842 ;;		On entry : 0/0
 14843 ;;		On exit  : 0/0
 14844 ;;		Unchanged: 0/0
 14845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14850 ;;Total ram usage:        0 bytes
 14851 ;; Hardware stack levels used:    1
 14852 ;; Hardware stack levels required when called:    7
 14853 ;; This function calls:
 14854 ;;		Nothing
 14855 ;; This function is called by:
 14856 ;;		_HMI_Init
 14857 ;;		_Button_Init
 14858 ;; This function uses a non-reentrant model
 14859 ;;
 14860                           
 14861                           	psect	text76
 14862  0160D4                     __ptext76:
 14863                           	opt stack 0
 14864  0160D4                     _HMI_InitButtons:
 14865                           	opt stack 21
 14866                           
 14867                           ;HMI.c: 23: TRISE = 0xFC;
 14868                           
 14869                           ;incstack = 0
 14870  0160D4  0EFC               	movlw	252
 14871  0160D6  6E96               	movwf	3990,c	;volatile
 14872  0160D8  0012               	return		;funcret
 14873  0160DA                     __end_of_HMI_InitButtons:
 14874                           	opt stack 0
 14875                           tosu	equ	0xFFF
 14876                           tosh	equ	0xFFE
 14877                           tosl	equ	0xFFD
 14878                           pclath	equ	0xFFA
 14879                           tblptru	equ	0xFF8
 14880                           tblptrh	equ	0xFF7
 14881                           tblptrl	equ	0xFF6
 14882                           tablat	equ	0xFF5
 14883                           prodh	equ	0xFF4
 14884                           prodl	equ	0xFF3
 14885                           intcon	equ	0xFF2
 14886                           postinc0	equ	0xFEE
 14887                           wreg	equ	0xFE8
 14888                           indf1	equ	0xFE7
 14889                           postdec1	equ	0xFE5
 14890                           fsr1h	equ	0xFE2
 14891                           fsr1l	equ	0xFE1
 14892                           indf2	equ	0xFDF
 14893                           postinc2	equ	0xFDE
 14894                           postdec2	equ	0xFDD
 14895                           plusw2	equ	0xFDB
 14896                           fsr2h	equ	0xFDA
 14897                           fsr2l	equ	0xFD9
 14898                           status	equ	0xFD8
 14899                           
 14900 ;; *************** function _MXK_InitTestButton *****************
 14901 ;; Defined at:
 14902 ;;		line 10 in file "Library/MXK.c"
 14903 ;; Parameters:    Size  Location     Type
 14904 ;;		None
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;		None
 14907 ;; Return value:  Size  Location     Type
 14908 ;;                  1    wreg      void 
 14909 ;; Registers used:
 14910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14920 ;;Total ram usage:        0 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:   12
 14923 ;; This function calls:
 14924 ;;		_Port_SetPinType
 14925 ;; This function is called by:
 14926 ;;		_FunctInitButton
 14927 ;;		_Button_Init
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           	psect	text77
 14932  015F26                     __ptext77:
 14933                           	opt stack 0
 14934  015F26                     _MXK_InitTestButton:
 14935                           	opt stack 16
 14936                           
 14937                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 14938                           
 14939                           ;incstack = 0
 14940  015F26  0EA9               	movlw	low _PortB
 14941  015F28  0100               	movlb	0	; () banked
 14942  015F2A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14943  015F2C  0E01               	movlw	high _PortB
 14944  015F2E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14945  015F30  0E04               	movlw	4
 14946  015F32  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14947  015F34  0E00               	movlw	0
 14948  015F36  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14949  015F38  EC4E  F093         	call	_Port_SetPinType	;wreg free
 14950  015F3C  0012               	return		;funcret
 14951  015F3E                     __end_of_MXK_InitTestButton:
 14952                           	opt stack 0
 14953                           tosu	equ	0xFFF
 14954                           tosh	equ	0xFFE
 14955                           tosl	equ	0xFFD
 14956                           pclath	equ	0xFFA
 14957                           tblptru	equ	0xFF8
 14958                           tblptrh	equ	0xFF7
 14959                           tblptrl	equ	0xFF6
 14960                           tablat	equ	0xFF5
 14961                           prodh	equ	0xFF4
 14962                           prodl	equ	0xFF3
 14963                           intcon	equ	0xFF2
 14964                           postinc0	equ	0xFEE
 14965                           wreg	equ	0xFE8
 14966                           indf1	equ	0xFE7
 14967                           postdec1	equ	0xFE5
 14968                           fsr1h	equ	0xFE2
 14969                           fsr1l	equ	0xFE1
 14970                           indf2	equ	0xFDF
 14971                           postinc2	equ	0xFDE
 14972                           postdec2	equ	0xFDD
 14973                           plusw2	equ	0xFDB
 14974                           fsr2h	equ	0xFDA
 14975                           fsr2l	equ	0xFD9
 14976                           status	equ	0xFD8
 14977                           
 14978 ;; *************** function _Port_SetPinType *****************
 14979 ;; Defined at:
 14980 ;;		line 189 in file "Library/Port.c"
 14981 ;; Parameters:    Size  Location     Type
 14982 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 14983 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14984 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14985 ;;  pPin            1   40[BANK0 ] enum E6750
 14986 ;;  pType           1   41[BANK0 ] enum E6795
 14987 ;; Auto vars:     Size  Location     Type
 14988 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 14989 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 14990 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 14991 ;;  Output          1   42[BANK0 ] enum E6475
 14992 ;; Return value:  Size  Location     Type
 14993 ;;                  1    wreg      enum E6475
 14994 ;; Registers used:
 14995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;Total ram usage:        7 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; Hardware stack levels required when called:   11
 15008 ;; This function calls:
 15009 ;;		_Byte_SetBit
 15010 ;;		_PortProperty_Valid
 15011 ;;		_Word_SetPair
 15012 ;; This function is called by:
 15013 ;;		_Configure_GPIOs
 15014 ;;		_LED_Init
 15015 ;;		_Port_Init
 15016 ;;		_SPI_Init
 15017 ;;		_MXK_InitTestButton
 15018 ;;		_MXK_Init
 15019 ;;		_I2C_Init
 15020 ;;		_Motor_Init
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024                           	psect	text78
 15025  01269C                     __ptext78:
 15026                           	opt stack 0
 15027  01269C                     _Port_SetPinType:
 15028                           	opt stack 18
 15029                           
 15030                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 15031                           
 15032                           ;incstack = 0
 15033  01269C  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 15034  0126A0  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 15035  0126A4  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 15036  0126A8  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 15037                           
 15038                           ;Port.c: 192: ePinError Output = ePinErrorState;
 15039  0126AC  0E05               	movlw	5
 15040  0126AE  0100               	movlb	0	; () banked
 15041  0126B0  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15042                           
 15043                           ;Port.c: 193: switch (pType)
 15044  0126B2  D0A7               	goto	l412
 15045  0126B4                     
 15046                           ; BSR set to: 0
 15047                           ;Port.c: 197: {
 15048                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15049                           
 15050                           ; BSR set to: 0
 15051  0126B4  EE20 F002          	lfsr	2,2
 15052  0126B8  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15053  0126BA  26D9               	addwf	fsr2l,f,c
 15054  0126BC  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15055  0126BE  22DA               	addwfc	fsr2h,f,c
 15056  0126C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15057  0126C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15058  0126C8  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15059  0126CC  0E01               	movlw	1
 15060  0126CE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15061  0126D0  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15062                           
 15063                           ;Port.c: 203: break;
 15064  0126D4  D0A4               	goto	l414
 15065  0126D6                     
 15066                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 15067  0126D6  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15068  0126DA  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15069  0126DE  0E01               	movlw	1
 15070  0126E0  0100               	movlb	0	; () banked
 15071  0126E2  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15072  0126E4  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15073  0126E8  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 15074  0126EC  0100               	movlb	0	; () banked
 15075  0126EE  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15076  0126F0  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15077  0126F2  A4D8               	btfss	status,2,c
 15078  0126F4  0012               	return	
 15079                           
 15080                           ; BSR set to: 0
 15081                           ;Port.c: 208: {
 15082                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15083  0126F6  EE20 F002          	lfsr	2,2
 15084  0126FA  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15085  0126FC  26D9               	addwf	fsr2l,f,c
 15086  0126FE  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15087  012700  22DA               	addwfc	fsr2h,f,c
 15088  012702  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15089  012706  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15090  01270A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15091  01270E  0E00               	movlw	0
 15092  012710  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15093  012712  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15094                           
 15095                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15096  012716  0100               	movlb	0	; () banked
 15097  012718  EE20 F004          	lfsr	2,4
 15098  01271C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15099  01271E  26D9               	addwf	fsr2l,f,c
 15100  012720  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15101  012722  22DA               	addwfc	fsr2h,f,c
 15102  012724  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15103  012728  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15104  01272C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15105  012730  0E00               	movlw	0
 15106  012732  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15107  012734  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15108                           
 15109                           ;Port.c: 214: break;
 15110  012738  D072               	goto	l414
 15111  01273A                     
 15112                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 15113                           
 15114                           ;Port.c: 218: case eTypeOutputOpenSource:
 15115  01273A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15116  01273E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15117  012742  0E02               	movlw	2
 15118  012744  0100               	movlb	0	; () banked
 15119  012746  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15120  012748  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15121  01274C  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 15122  012750  0100               	movlb	0	; () banked
 15123  012752  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15124  012754  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15125  012756  A4D8               	btfss	status,2,c
 15126  012758  0012               	return	
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;Port.c: 220: {
 15130                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15131  01275A  EE20 F002          	lfsr	2,2
 15132  01275E  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15133  012760  26D9               	addwf	fsr2l,f,c
 15134  012762  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15135  012764  22DA               	addwfc	fsr2h,f,c
 15136  012766  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15137  01276A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15138  01276E  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15139  012772  0E01               	movlw	1
 15140  012774  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15141  012776  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15142                           
 15143                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 15144  01277A  0100               	movlb	0	; () banked
 15145  01277C  EE20 F004          	lfsr	2,4
 15146  012780  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15147  012782  26D9               	addwf	fsr2l,f,c
 15148  012784  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15149  012786  22DA               	addwfc	fsr2h,f,c
 15150  012788  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15151  01278C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15152  012790  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15153  012794  0E01               	movlw	1
 15154  012796  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15155  012798  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15156                           
 15157                           ;Port.c: 226: break;
 15158  01279C  D040               	goto	l414
 15159  01279E                     
 15160                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 15161                           
 15162                           ;Port.c: 230: case eTypeOutputPushPull:
 15163  01279E  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15164  0127A2  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15165  0127A6  0E00               	movlw	0
 15166  0127A8  0100               	movlb	0	; () banked
 15167  0127AA  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15168  0127AC  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15169  0127B0  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 15170  0127B4  0100               	movlb	0	; () banked
 15171  0127B6  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15172  0127B8  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15173  0127BA  A4D8               	btfss	status,2,c
 15174  0127BC  0012               	return	
 15175                           
 15176                           ; BSR set to: 0
 15177                           ;Port.c: 232: {
 15178                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15179  0127BE  EE20 F002          	lfsr	2,2
 15180  0127C2  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15181  0127C4  26D9               	addwf	fsr2l,f,c
 15182  0127C6  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15183  0127C8  22DA               	addwfc	fsr2h,f,c
 15184  0127CA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15185  0127CE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15186  0127D2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15187  0127D6  0E00               	movlw	0
 15188  0127D8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15189  0127DA  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15190                           
 15191                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15192  0127DE  0100               	movlb	0	; () banked
 15193  0127E0  EE20 F004          	lfsr	2,4
 15194  0127E4  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15195  0127E6  26D9               	addwf	fsr2l,f,c
 15196  0127E8  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15197  0127EA  22DA               	addwfc	fsr2h,f,c
 15198  0127EC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15199  0127F0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15200  0127F4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15201  0127F8  0E00               	movlw	0
 15202  0127FA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15203  0127FC  ECB4  F0A9         	call	_Byte_SetBit	;wreg free
 15204                           
 15205                           ;Port.c: 239: }
 15206                           
 15207                           ;Port.c: 238: break;
 15208  012800  D00E               	goto	l414
 15209  012802                     l412:
 15210  012802  0100               	movlb	0	; () banked
 15211  012804  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 15212                           
 15213                           ; Switch size 1, requested type "space"
 15214                           ; Number of cases is 4, Range of values is 0 to 3
 15215                           ; switch strategies available:
 15216                           ; Name         Instructions Cycles
 15217                           ; simple_byte           13     7 (average)
 15218                           ;	Chosen strategy is simple_byte
 15219  012806  0A00               	xorlw	0	; case 0
 15220  012808  B4D8               	btfsc	status,2,c
 15221  01280A  D754               	goto	l413
 15222  01280C  0A01               	xorlw	1	; case 1
 15223  01280E  B4D8               	btfsc	status,2,c
 15224  012810  D762               	goto	l415
 15225  012812  0A03               	xorlw	3	; case 2
 15226  012814  B4D8               	btfsc	status,2,c
 15227  012816  D791               	goto	l417
 15228  012818  0A01               	xorlw	1	; case 3
 15229  01281A  B4D8               	btfsc	status,2,c
 15230  01281C  D7C0               	goto	l421
 15231  01281E                     l414:
 15232                           
 15233                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 15234                           
 15235                           ; BSR set to: 0
 15236  01281E  0E08               	movlw	8
 15237  012820  0100               	movlb	0	; () banked
 15238  012822  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 15239  012824  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15240  012826  0E00               	movlw	0
 15241  012828  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 15242  01282A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15243  01282C  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 15244  012830  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 15245  012834  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15246  012838  0012               	return	
 15247  01283A                     __end_of_Port_SetPinType:
 15248                           	opt stack 0
 15249                           tosu	equ	0xFFF
 15250                           tosh	equ	0xFFE
 15251                           tosl	equ	0xFFD
 15252                           pclath	equ	0xFFA
 15253                           tblptru	equ	0xFF8
 15254                           tblptrh	equ	0xFF7
 15255                           tblptrl	equ	0xFF6
 15256                           tablat	equ	0xFF5
 15257                           prodh	equ	0xFF4
 15258                           prodl	equ	0xFF3
 15259                           intcon	equ	0xFF2
 15260                           postinc0	equ	0xFEE
 15261                           wreg	equ	0xFE8
 15262                           indf1	equ	0xFE7
 15263                           postdec1	equ	0xFE5
 15264                           fsr1h	equ	0xFE2
 15265                           fsr1l	equ	0xFE1
 15266                           indf2	equ	0xFDF
 15267                           postinc2	equ	0xFDE
 15268                           postdec2	equ	0xFDD
 15269                           plusw2	equ	0xFDB
 15270                           fsr2h	equ	0xFDA
 15271                           fsr2l	equ	0xFD9
 15272                           status	equ	0xFD8
 15273                           
 15274 ;; *************** function _Byte_SetBit *****************
 15275 ;; Defined at:
 15276 ;;		line 32 in file "Library/Types.c"
 15277 ;; Parameters:    Size  Location     Type
 15278 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15279 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 15280 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 15281 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15282 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15283 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15284 ;;		 -> NULL(0), 
 15285 ;;  pBit            1    2[BANK0 ] unsigned char 
 15286 ;;  pValue          1    3[BANK0 ] unsigned char 
 15287 ;; Auto vars:     Size  Location     Type
 15288 ;;		None
 15289 ;; Return value:  Size  Location     Type
 15290 ;;                  1    wreg      void 
 15291 ;; Registers used:
 15292 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15293 ;; Tracked objects:
 15294 ;;		On entry : 0/0
 15295 ;;		On exit  : 0/0
 15296 ;;		Unchanged: 0/0
 15297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15298 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15300 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15301 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15302 ;;Total ram usage:        7 bytes
 15303 ;; Hardware stack levels used:    1
 15304 ;; Hardware stack levels required when called:    7
 15305 ;; This function calls:
 15306 ;;		Nothing
 15307 ;; This function is called by:
 15308 ;;		_Port_SetPinType
 15309 ;;		_Port_SetPin
 15310 ;;		_SPI_Init
 15311 ;;		_SPI_MinSpeed
 15312 ;;		_SPI_MaxSpeed
 15313 ;;		_Word_SetBit
 15314 ;;		_I2C_Init
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           	psect	text79
 15319  015368                     __ptext79:
 15320                           	opt stack 0
 15321  015368                     _Byte_SetBit:
 15322                           	opt stack 21
 15323                           
 15324                           ;Types.c: 34: pValue &= 1;
 15325                           
 15326                           ;incstack = 0
 15327  015368  0E01               	movlw	1
 15328  01536A  0100               	movlb	0	; () banked
 15329  01536C  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 15330                           
 15331                           ; BSR set to: 0
 15332                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 15333  01536E  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15334  015372  0E01               	movlw	1
 15335  015374  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 15336  015376  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15337  015378  D002               	goto	u9524
 15338  01537A                     u9525:
 15339  01537A  90D8               	bcf	status,0,c
 15340  01537C  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15341  01537E                     u9524:
 15342  01537E  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15343  015380  D7FC               	goto	u9525
 15344  015382  0100               	movlb	0	; () banked
 15345  015384  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15346  015386  0AFF               	xorlw	255
 15347  015388  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 15348  01538A  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15349  01538E  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15350  015392  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 15351  015394  16DF               	andwf	indf2,f,c
 15352                           
 15353                           ; BSR set to: 0
 15354                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 15355  015396  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15356  01539A  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 15357  01539E  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15358  0153A0  D002               	goto	u9534
 15359  0153A2                     u9535:
 15360  0153A2  90D8               	bcf	status,0,c
 15361  0153A4  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15362  0153A6                     u9534:
 15363  0153A6  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15364  0153A8  D7FC               	goto	u9535
 15365  0153AA  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15366  0153AE  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15367  0153B2  0100               	movlb	0	; () banked
 15368  0153B4  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15369  0153B6  12DF               	iorwf	indf2,f,c
 15370                           
 15371                           ; BSR set to: 0
 15372  0153B8  0012               	return		;funcret
 15373  0153BA                     __end_of_Byte_SetBit:
 15374                           	opt stack 0
 15375                           tosu	equ	0xFFF
 15376                           tosh	equ	0xFFE
 15377                           tosl	equ	0xFFD
 15378                           pclath	equ	0xFFA
 15379                           tblptru	equ	0xFF8
 15380                           tblptrh	equ	0xFF7
 15381                           tblptrl	equ	0xFF6
 15382                           tablat	equ	0xFF5
 15383                           prodh	equ	0xFF4
 15384                           prodl	equ	0xFF3
 15385                           intcon	equ	0xFF2
 15386                           postinc0	equ	0xFEE
 15387                           wreg	equ	0xFE8
 15388                           indf1	equ	0xFE7
 15389                           postdec1	equ	0xFE5
 15390                           fsr1h	equ	0xFE2
 15391                           fsr1l	equ	0xFE1
 15392                           indf2	equ	0xFDF
 15393                           postinc2	equ	0xFDE
 15394                           postdec2	equ	0xFDD
 15395                           plusw2	equ	0xFDB
 15396                           fsr2h	equ	0xFDA
 15397                           fsr2l	equ	0xFD9
 15398                           status	equ	0xFD8
 15399                           
 15400 ;; *************** function _Port_SetQuadType *****************
 15401 ;; Defined at:
 15402 ;;		line 399 in file "Library/Port.c"
 15403 ;; Parameters:    Size  Location     Type
 15404 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15405 ;;		 -> PortB(10), PortD(10), 
 15406 ;;  pQuad           1   56[BANK0 ] enum E6776
 15407 ;;  pType           1   57[BANK0 ] enum E6795
 15408 ;; Auto vars:     Size  Location     Type
 15409 ;;  Output          1   58[BANK0 ] enum E6475
 15410 ;; Return value:  Size  Location     Type
 15411 ;;                  1    wreg      enum E6475
 15412 ;; Registers used:
 15413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15414 ;; Tracked objects:
 15415 ;;		On entry : 0/0
 15416 ;;		On exit  : 0/0
 15417 ;;		Unchanged: 0/0
 15418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15419 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15423 ;;Total ram usage:        5 bytes
 15424 ;; Hardware stack levels used:    1
 15425 ;; Hardware stack levels required when called:   13
 15426 ;; This function calls:
 15427 ;;		_Byte_SetQuad
 15428 ;;		_Port_CheckQuadType
 15429 ;;		_Word_SetPair
 15430 ;; This function is called by:
 15431 ;;		_MXK_InitDIPSwitch
 15432 ;;		_MXK_Init
 15433 ;; This function uses a non-reentrant model
 15434 ;;
 15435                           
 15436                           	psect	text80
 15437  011F30                     __ptext80:
 15438                           	opt stack 0
 15439  011F30                     _Port_SetQuadType:
 15440                           	opt stack 16
 15441                           
 15442                           ;Port.c: 401: ePinError Output = ePinErrorState;
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;incstack = 0
 15446  011F30  0E05               	movlw	5
 15447  011F32  0100               	movlb	0	; () banked
 15448  011F34  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15449                           
 15450                           ;Port.c: 403: switch (pType)
 15451  011F36  D0B8               	goto	l476
 15452  011F38                     
 15453                           ; BSR set to: 0
 15454                           ;Port.c: 407: {
 15455                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15456                           
 15457                           ; BSR set to: 0
 15458  011F38  EE20 F002          	lfsr	2,2
 15459  011F3C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15460  011F3E  26D9               	addwf	fsr2l,f,c
 15461  011F40  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15462  011F42  22DA               	addwfc	fsr2h,f,c
 15463  011F44  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15464  011F48  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15465  011F4C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15466  011F50  0E0F               	movlw	15
 15467  011F52  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15468  011F54  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15469                           
 15470                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15471  011F58  0100               	movlb	0	; () banked
 15472  011F5A  EE20 F004          	lfsr	2,4
 15473  011F5E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15474  011F60  26D9               	addwf	fsr2l,f,c
 15475  011F62  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15476  011F64  22DA               	addwfc	fsr2h,f,c
 15477  011F66  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15478  011F6A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15479  011F6E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15480  011F72  0E00               	movlw	0
 15481  011F74  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15482  011F76  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15483                           
 15484                           ;Port.c: 413: }
 15485                           ;Port.c: 415: break;
 15486  011F7A  D0A4               	goto	l478
 15487  011F7C                     
 15488                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15489  011F7C  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15490  011F80  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15491  011F84  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15492  011F88  0E03               	movlw	3
 15493  011F8A  0100               	movlb	0	; () banked
 15494  011F8C  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15495  011F8E  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
 15496  011F92  0100               	movlb	0	; () banked
 15497  011F94  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15498  011F96  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15499  011F98  A4D8               	btfss	status,2,c
 15500  011F9A  0012               	return	
 15501                           
 15502                           ; BSR set to: 0
 15503                           ;Port.c: 418: {
 15504                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15505  011F9C  EE20 F002          	lfsr	2,2
 15506  011FA0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15507  011FA2  26D9               	addwf	fsr2l,f,c
 15508  011FA4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15509  011FA6  22DA               	addwfc	fsr2h,f,c
 15510  011FA8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15511  011FAC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15512  011FB0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15513  011FB4  0E00               	movlw	0
 15514  011FB6  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15515  011FB8  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15516                           
 15517                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15518  011FBC  0100               	movlb	0	; () banked
 15519  011FBE  EE20 F004          	lfsr	2,4
 15520  011FC2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15521  011FC4  26D9               	addwf	fsr2l,f,c
 15522  011FC6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15523  011FC8  22DA               	addwfc	fsr2h,f,c
 15524  011FCA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15525  011FCE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15526  011FD2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15527  011FD6  0E00               	movlw	0
 15528  011FD8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15529  011FDA  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15530                           
 15531                           ;Port.c: 424: }
 15532  011FDE  D072               	goto	l478
 15533  011FE0                     
 15534                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15535  011FE0  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15536  011FE4  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15537  011FE8  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15538  011FEC  0E03               	movlw	3
 15539  011FEE  0100               	movlb	0	; () banked
 15540  011FF0  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15541  011FF2  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
 15542  011FF6  0100               	movlb	0	; () banked
 15543  011FF8  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15544  011FFA  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15545  011FFC  A4D8               	btfss	status,2,c
 15546  011FFE  0012               	return	
 15547                           
 15548                           ; BSR set to: 0
 15549                           ;Port.c: 429: {
 15550                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15551  012000  EE20 F002          	lfsr	2,2
 15552  012004  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15553  012006  26D9               	addwf	fsr2l,f,c
 15554  012008  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15555  01200A  22DA               	addwfc	fsr2h,f,c
 15556  01200C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15557  012010  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15558  012014  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15559  012018  0E0F               	movlw	15
 15560  01201A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15561  01201C  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15562                           
 15563                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 15564  012020  0100               	movlb	0	; () banked
 15565  012022  EE20 F004          	lfsr	2,4
 15566  012026  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15567  012028  26D9               	addwf	fsr2l,f,c
 15568  01202A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15569  01202C  22DA               	addwfc	fsr2h,f,c
 15570  01202E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15571  012032  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15572  012036  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15573  01203A  0E0F               	movlw	15
 15574  01203C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15575  01203E  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15576                           
 15577                           ;Port.c: 435: }
 15578  012042  D040               	goto	l478
 15579  012044                     
 15580                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15581  012044  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15582  012048  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15583  01204C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15584  012050  0E03               	movlw	3
 15585  012052  0100               	movlb	0	; () banked
 15586  012054  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15587  012056  EC05  F0AA         	call	_Port_CheckQuadType	;wreg free
 15588  01205A  0100               	movlb	0	; () banked
 15589  01205C  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15590  01205E  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15591  012060  A4D8               	btfss	status,2,c
 15592  012062  0012               	return	
 15593                           
 15594                           ; BSR set to: 0
 15595                           ;Port.c: 440: {
 15596                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15597  012064  EE20 F002          	lfsr	2,2
 15598  012068  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15599  01206A  26D9               	addwf	fsr2l,f,c
 15600  01206C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15601  01206E  22DA               	addwfc	fsr2h,f,c
 15602  012070  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15603  012074  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15604  012078  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15605  01207C  0E00               	movlw	0
 15606  01207E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15607  012080  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15608                           
 15609                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15610  012084  0100               	movlb	0	; () banked
 15611  012086  EE20 F004          	lfsr	2,4
 15612  01208A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15613  01208C  26D9               	addwf	fsr2l,f,c
 15614  01208E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15615  012090  22DA               	addwfc	fsr2h,f,c
 15616  012092  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15617  012096  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15618  01209A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15619  01209E  0E00               	movlw	0
 15620  0120A0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15621  0120A2  ECCC  F0AE         	call	_Byte_SetQuad	;wreg free
 15622                           
 15623                           ;Port.c: 446: }
 15624  0120A6  D00E               	goto	l478
 15625  0120A8                     l476:
 15626  0120A8  0100               	movlb	0	; () banked
 15627  0120AA  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 15628                           
 15629                           ; Switch size 1, requested type "space"
 15630                           ; Number of cases is 4, Range of values is 0 to 3
 15631                           ; switch strategies available:
 15632                           ; Name         Instructions Cycles
 15633                           ; simple_byte           13     7 (average)
 15634                           ;	Chosen strategy is simple_byte
 15635  0120AC  0A00               	xorlw	0	; case 0
 15636  0120AE  B4D8               	btfsc	status,2,c
 15637  0120B0  D743               	goto	l477
 15638  0120B2  0A01               	xorlw	1	; case 1
 15639  0120B4  B4D8               	btfsc	status,2,c
 15640  0120B6  D762               	goto	l479
 15641  0120B8  0A03               	xorlw	3	; case 2
 15642  0120BA  B4D8               	btfsc	status,2,c
 15643  0120BC  D791               	goto	l483
 15644  0120BE  0A01               	xorlw	1	; case 3
 15645  0120C0  B4D8               	btfsc	status,2,c
 15646  0120C2  D7C0               	goto	l486
 15647  0120C4                     l478:
 15648                           
 15649                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 15650                           
 15651                           ; BSR set to: 0
 15652  0120C4  0E08               	movlw	8
 15653  0120C6  0100               	movlb	0	; () banked
 15654  0120C8  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15655  0120CA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15656  0120CC  0E00               	movlw	0
 15657  0120CE  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15658  0120D0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15659  0120D2  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15660  0120D4  0D04               	mullw	4
 15661  0120D6  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 15662  0120DA  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15663  0120DE  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15664                           
 15665                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 15666  0120E2  0E08               	movlw	8
 15667  0120E4  0100               	movlb	0	; () banked
 15668  0120E6  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15669  0120E8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15670  0120EA  0E00               	movlw	0
 15671  0120EC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15672  0120EE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15673  0120F0  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15674  0120F2  0D04               	mullw	4
 15675  0120F4  28F3               	incf	prodl,w,c
 15676  0120F6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15677  0120F8  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15678  0120FC  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15679                           
 15680                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 15681  012100  0E08               	movlw	8
 15682  012102  0100               	movlb	0	; () banked
 15683  012104  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15684  012106  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15685  012108  0E00               	movlw	0
 15686  01210A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15687  01210C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15688  01210E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15689  012110  0D04               	mullw	4
 15690  012112  50F3               	movf	prodl,w,c
 15691  012114  0F02               	addlw	2
 15692  012116  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15693  012118  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15694  01211C  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15695                           
 15696                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 15697  012120  0E08               	movlw	8
 15698  012122  0100               	movlb	0	; () banked
 15699  012124  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15700  012126  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15701  012128  0E00               	movlw	0
 15702  01212A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15703  01212C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15704  01212E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15705  012130  0D04               	mullw	4
 15706  012132  50F3               	movf	prodl,w,c
 15707  012134  0F03               	addlw	3
 15708  012136  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 15709  012138  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15710  01213C  ECD9  F0AC         	call	_Word_SetPair	;wreg free
 15711  012140  0012               	return	
 15712  012142                     __end_of_Port_SetQuadType:
 15713                           	opt stack 0
 15714                           tosu	equ	0xFFF
 15715                           tosh	equ	0xFFE
 15716                           tosl	equ	0xFFD
 15717                           pclath	equ	0xFFA
 15718                           tblptru	equ	0xFF8
 15719                           tblptrh	equ	0xFF7
 15720                           tblptrl	equ	0xFF6
 15721                           tablat	equ	0xFF5
 15722                           prodh	equ	0xFF4
 15723                           prodl	equ	0xFF3
 15724                           intcon	equ	0xFF2
 15725                           postinc0	equ	0xFEE
 15726                           wreg	equ	0xFE8
 15727                           indf1	equ	0xFE7
 15728                           postdec1	equ	0xFE5
 15729                           fsr1h	equ	0xFE2
 15730                           fsr1l	equ	0xFE1
 15731                           indf2	equ	0xFDF
 15732                           postinc2	equ	0xFDE
 15733                           postdec2	equ	0xFDD
 15734                           plusw2	equ	0xFDB
 15735                           fsr2h	equ	0xFDA
 15736                           fsr2l	equ	0xFD9
 15737                           status	equ	0xFD8
 15738                           
 15739 ;; *************** function _Word_SetPair *****************
 15740 ;; Defined at:
 15741 ;;		line 149 in file "Library/Types.c"
 15742 ;; Parameters:    Size  Location     Type
 15743 ;;  pInput          2   15[BANK0 ] PTR struct Word
 15744 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15745 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15746 ;;  pPair           1   17[BANK0 ] unsigned char 
 15747 ;;  pValue          1   18[BANK0 ] unsigned char 
 15748 ;; Auto vars:     Size  Location     Type
 15749 ;;		None
 15750 ;; Return value:  Size  Location     Type
 15751 ;;                  1    wreg      void 
 15752 ;; Registers used:
 15753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15754 ;; Tracked objects:
 15755 ;;		On entry : 0/0
 15756 ;;		On exit  : 0/0
 15757 ;;		Unchanged: 0/0
 15758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15759 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15762 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15763 ;;Total ram usage:        4 bytes
 15764 ;; Hardware stack levels used:    1
 15765 ;; Hardware stack levels required when called:    9
 15766 ;; This function calls:
 15767 ;;		_Byte_SetPair
 15768 ;; This function is called by:
 15769 ;;		_Port_SetPinType
 15770 ;;		_Port_SetQuadType
 15771 ;;		_Port_SetType
 15772 ;;		_Port_SetPairType
 15773 ;;		_PortProperty_Init
 15774 ;; This function uses a non-reentrant model
 15775 ;;
 15776                           
 15777                           	psect	text81
 15778  0159B2                     __ptext81:
 15779                           	opt stack 0
 15780  0159B2                     _Word_SetPair:
 15781                           	opt stack 19
 15782                           
 15783                           ;Types.c: 151: if (pPair >= 4)
 15784                           
 15785                           ;incstack = 0
 15786  0159B2  0E03               	movlw	3
 15787  0159B4  0100               	movlb	0	; () banked
 15788  0159B6  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 15789  0159B8  D00E               	goto	l776
 15790                           
 15791                           ; BSR set to: 0
 15792                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 15793  0159BA  0E01               	movlw	1
 15794  0159BC  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 15795  0159BE  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 15796  0159C0  0E00               	movlw	0
 15797  0159C2  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 15798  0159C4  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 15799  0159C6  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 15800  0159C8  0FFC               	addlw	252
 15801  0159CA  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 15802  0159CC  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15803  0159D0  ECBC  F0AE         	call	_Byte_SetPair	;wreg free
 15804  0159D4  0012               	return	
 15805  0159D6                     l776:
 15806                           
 15807                           ;Types.c: 153: else
 15808                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 15809  0159D6  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 15810  0159DA  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 15811  0159DE  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 15812  0159E2  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 15813  0159E6  ECBC  F0AE         	call	_Byte_SetPair	;wreg free
 15814  0159EA  0012               	return	
 15815  0159EC                     __end_of_Word_SetPair:
 15816                           	opt stack 0
 15817                           tosu	equ	0xFFF
 15818                           tosh	equ	0xFFE
 15819                           tosl	equ	0xFFD
 15820                           pclath	equ	0xFFA
 15821                           tblptru	equ	0xFF8
 15822                           tblptrh	equ	0xFF7
 15823                           tblptrl	equ	0xFF6
 15824                           tablat	equ	0xFF5
 15825                           prodh	equ	0xFF4
 15826                           prodl	equ	0xFF3
 15827                           intcon	equ	0xFF2
 15828                           postinc0	equ	0xFEE
 15829                           wreg	equ	0xFE8
 15830                           indf1	equ	0xFE7
 15831                           postdec1	equ	0xFE5
 15832                           fsr1h	equ	0xFE2
 15833                           fsr1l	equ	0xFE1
 15834                           indf2	equ	0xFDF
 15835                           postinc2	equ	0xFDE
 15836                           postdec2	equ	0xFDD
 15837                           plusw2	equ	0xFDB
 15838                           fsr2h	equ	0xFDA
 15839                           fsr2l	equ	0xFD9
 15840                           status	equ	0xFD8
 15841                           
 15842 ;; *************** function _Byte_SetPair *****************
 15843 ;; Defined at:
 15844 ;;		line 83 in file "Library/Types.c"
 15845 ;; Parameters:    Size  Location     Type
 15846 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 15847 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 15848 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 15849 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 15850 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 15851 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 15852 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 15853 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 15854 ;;		 -> NULL(0), 
 15855 ;;  pPair           1   13[BANK0 ] unsigned char 
 15856 ;;  pValue          1   14[BANK0 ] unsigned char 
 15857 ;; Auto vars:     Size  Location     Type
 15858 ;;		None
 15859 ;; Return value:  Size  Location     Type
 15860 ;;                  1    wreg      void 
 15861 ;; Registers used:
 15862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15863 ;; Tracked objects:
 15864 ;;		On entry : 0/0
 15865 ;;		On exit  : 0/0
 15866 ;;		Unchanged: 0/0
 15867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15868 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15871 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15872 ;;Total ram usage:        4 bytes
 15873 ;; Hardware stack levels used:    1
 15874 ;; Hardware stack levels required when called:    8
 15875 ;; This function calls:
 15876 ;;		_Byte_SetZone
 15877 ;; This function is called by:
 15878 ;;		_Word_SetPair
 15879 ;;		_Port_SetPairType
 15880 ;;		_Port_SetPair
 15881 ;; This function uses a non-reentrant model
 15882 ;;
 15883                           
 15884                           	psect	text82
 15885  015D78                     __ptext82:
 15886                           	opt stack 0
 15887  015D78                     _Byte_SetPair:
 15888                           	opt stack 19
 15889                           
 15890                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 15891                           
 15892                           ;incstack = 0
 15893  015D78  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 15894  015D7C  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 15895  015D80  0E04               	movlw	4
 15896  015D82  0100               	movlb	0	; () banked
 15897  015D84  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 15898  015D86  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 15899  015D8A  0E02               	movlw	2
 15900  015D8C  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 15901  015D8E  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 15902  015D92  EC34  F0A3         	call	_Byte_SetZone	;wreg free
 15903  015D96  0012               	return		;funcret
 15904  015D98                     __end_of_Byte_SetPair:
 15905                           	opt stack 0
 15906                           tosu	equ	0xFFF
 15907                           tosh	equ	0xFFE
 15908                           tosl	equ	0xFFD
 15909                           pclath	equ	0xFFA
 15910                           tblptru	equ	0xFF8
 15911                           tblptrh	equ	0xFF7
 15912                           tblptrl	equ	0xFF6
 15913                           tablat	equ	0xFF5
 15914                           prodh	equ	0xFF4
 15915                           prodl	equ	0xFF3
 15916                           intcon	equ	0xFF2
 15917                           postinc0	equ	0xFEE
 15918                           wreg	equ	0xFE8
 15919                           indf1	equ	0xFE7
 15920                           postdec1	equ	0xFE5
 15921                           fsr1h	equ	0xFE2
 15922                           fsr1l	equ	0xFE1
 15923                           indf2	equ	0xFDF
 15924                           postinc2	equ	0xFDE
 15925                           postdec2	equ	0xFDD
 15926                           plusw2	equ	0xFDB
 15927                           fsr2h	equ	0xFDA
 15928                           fsr2l	equ	0xFD9
 15929                           status	equ	0xFD8
 15930                           
 15931 ;; *************** function _Port_CheckQuadType *****************
 15932 ;; Defined at:
 15933 ;;		line 126 in file "Library/Port.c"
 15934 ;; Parameters:    Size  Location     Type
 15935 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 15936 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15937 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15938 ;;  pQuad           1   49[BANK0 ] enum E6776
 15939 ;;  pDrive          1   50[BANK0 ] enum E6469
 15940 ;; Auto vars:     Size  Location     Type
 15941 ;;  Output          1   53[BANK0 ] enum E6475
 15942 ;;  Pair2           1   52[BANK0 ] enum E6760
 15943 ;;  Pair1           1   51[BANK0 ] enum E6760
 15944 ;; Return value:  Size  Location     Type
 15945 ;;                  1    wreg      enum E6475
 15946 ;; Registers used:
 15947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15948 ;; Tracked objects:
 15949 ;;		On entry : 0/0
 15950 ;;		On exit  : 0/0
 15951 ;;		Unchanged: 0/0
 15952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15953 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15954 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15956 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15957 ;;Total ram usage:        7 bytes
 15958 ;; Hardware stack levels used:    1
 15959 ;; Hardware stack levels required when called:   12
 15960 ;; This function calls:
 15961 ;;		_Port_CheckPairType
 15962 ;; This function is called by:
 15963 ;;		_Port_CheckPortType
 15964 ;;		_Port_SetQuadType
 15965 ;; This function uses a non-reentrant model
 15966 ;;
 15967                           
 15968                           	psect	text83
 15969  01540A                     __ptext83:
 15970                           	opt stack 0
 15971  01540A                     _Port_CheckQuadType:
 15972                           	opt stack 15
 15973                           
 15974                           ;Port.c: 128: ePinError Output = ePinErrorState;
 15975                           
 15976                           ;incstack = 0
 15977  01540A  0E05               	movlw	5
 15978  01540C  0100               	movlb	0	; () banked
 15979  01540E  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 15980                           
 15981                           ; BSR set to: 0
 15982                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 15983  015410  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 15984  015412  0D02               	mullw	2
 15985  015414  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 15989  015418  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 15990  01541A  0D02               	mullw	2
 15991  01541C  28F3               	incf	prodl,w,c
 15992  01541E  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 15996  015420  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 15997  015424  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 15998  015428  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 15999  01542C  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16000  015430  EC55  F0A8         	call	_Port_CheckPairType	;wreg free
 16001  015434  0100               	movlb	0	; () banked
 16002  015436  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 16003  015438  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16004  01543A  A4D8               	btfss	status,2,c
 16005  01543C  D00C               	goto	l393
 16006                           
 16007                           ; BSR set to: 0
 16008                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 16009  01543E  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 16010  015442  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 16011  015446  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 16012  01544A  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16013  01544E  EC55  F0A8         	call	_Port_CheckPairType	;wreg free
 16014  015452  0100               	movlb	0	; () banked
 16015  015454  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 16016  015456                     l393:
 16017                           
 16018                           ; BSR set to: 0
 16019                           ;Port.c: 136: return Output;
 16020                           
 16021                           ; BSR set to: 0
 16022  015456  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16023  015458  0012               	return	
 16024  01545A                     __end_of_Port_CheckQuadType:
 16025                           	opt stack 0
 16026                           tosu	equ	0xFFF
 16027                           tosh	equ	0xFFE
 16028                           tosl	equ	0xFFD
 16029                           pclath	equ	0xFFA
 16030                           tblptru	equ	0xFF8
 16031                           tblptrh	equ	0xFF7
 16032                           tblptrl	equ	0xFF6
 16033                           tablat	equ	0xFF5
 16034                           prodh	equ	0xFF4
 16035                           prodl	equ	0xFF3
 16036                           intcon	equ	0xFF2
 16037                           postinc0	equ	0xFEE
 16038                           wreg	equ	0xFE8
 16039                           indf1	equ	0xFE7
 16040                           postdec1	equ	0xFE5
 16041                           fsr1h	equ	0xFE2
 16042                           fsr1l	equ	0xFE1
 16043                           indf2	equ	0xFDF
 16044                           postinc2	equ	0xFDE
 16045                           postdec2	equ	0xFDD
 16046                           plusw2	equ	0xFDB
 16047                           fsr2h	equ	0xFDA
 16048                           fsr2l	equ	0xFD9
 16049                           status	equ	0xFD8
 16050                           
 16051 ;; *************** function _Port_CheckPairType *****************
 16052 ;; Defined at:
 16053 ;;		line 112 in file "Library/Port.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16056 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16057 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16058 ;;  pPair           1   40[BANK0 ] enum E6760
 16059 ;;  pDrive          1   41[BANK0 ] enum E6469
 16060 ;; Auto vars:     Size  Location     Type
 16061 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 16062 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16063 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16064 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16065 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16066 ;;  Output          1   44[BANK0 ] enum E6475
 16067 ;;  Pin2            1   43[BANK0 ] enum E6750
 16068 ;;  Pin1            1   42[BANK0 ] enum E6750
 16069 ;; Return value:  Size  Location     Type
 16070 ;;                  1    wreg      enum E6475
 16071 ;; Registers used:
 16072 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16073 ;; Tracked objects:
 16074 ;;		On entry : 0/0
 16075 ;;		On exit  : 0/0
 16076 ;;		Unchanged: 0/0
 16077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16079 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16081 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16082 ;;Total ram usage:        9 bytes
 16083 ;; Hardware stack levels used:    1
 16084 ;; Hardware stack levels required when called:   11
 16085 ;; This function calls:
 16086 ;;		_PortProperty_Valid
 16087 ;; This function is called by:
 16088 ;;		_Port_CheckQuadType
 16089 ;;		_Port_SetPairType
 16090 ;; This function uses a non-reentrant model
 16091 ;;
 16092                           
 16093                           	psect	text84
 16094  0150AA                     __ptext84:
 16095                           	opt stack 0
 16096  0150AA                     _Port_CheckPairType:
 16097                           	opt stack 15
 16098                           
 16099                           ;Port.c: 114: ePinError Output = ePinErrorState;
 16100                           
 16101                           ; BSR set to: 0
 16102                           ;incstack = 0
 16103  0150AA  0E05               	movlw	5
 16104  0150AC  0100               	movlb	0	; () banked
 16105  0150AE  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16106                           
 16107                           ; BSR set to: 0
 16108                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 16109  0150B0  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 16110  0150B4  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 16111  0150B8  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 16112  0150BC  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 16113                           
 16114                           ; BSR set to: 0
 16115                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 16116  0150C0  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16117  0150C2  0D02               	mullw	2
 16118  0150C4  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 16119                           
 16120                           ; BSR set to: 0
 16121                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 16122  0150C8  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16123  0150CA  0D02               	mullw	2
 16124  0150CC  28F3               	incf	prodl,w,c
 16125  0150CE  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 16126                           
 16127                           ; BSR set to: 0
 16128                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 16129  0150D0  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16130  0150D4  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16131  0150D8  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16132  0150DC  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 16133  0150E0  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 16134  0150E4  0100               	movlb	0	; () banked
 16135  0150E6  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16136  0150E8  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16137  0150EA  A4D8               	btfss	status,2,c
 16138  0150EC  D00C               	goto	l389
 16139                           
 16140                           ; BSR set to: 0
 16141                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 16142  0150EE  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16143  0150F2  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16144  0150F6  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16145  0150FA  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 16146  0150FE  ECF1  F0A7         	call	_PortProperty_Valid	;wreg free
 16147  015102  0100               	movlb	0	; () banked
 16148  015104  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16149  015106                     l389:
 16150                           
 16151                           ; BSR set to: 0
 16152                           ;Port.c: 124: return Output;
 16153                           
 16154                           ; BSR set to: 0
 16155  015106  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16156  015108  0012               	return	
 16157  01510A                     __end_of_Port_CheckPairType:
 16158                           	opt stack 0
 16159                           tosu	equ	0xFFF
 16160                           tosh	equ	0xFFE
 16161                           tosl	equ	0xFFD
 16162                           pclath	equ	0xFFA
 16163                           tblptru	equ	0xFF8
 16164                           tblptrh	equ	0xFF7
 16165                           tblptrl	equ	0xFF6
 16166                           tablat	equ	0xFF5
 16167                           prodh	equ	0xFF4
 16168                           prodl	equ	0xFF3
 16169                           intcon	equ	0xFF2
 16170                           postinc0	equ	0xFEE
 16171                           wreg	equ	0xFE8
 16172                           indf1	equ	0xFE7
 16173                           postdec1	equ	0xFE5
 16174                           fsr1h	equ	0xFE2
 16175                           fsr1l	equ	0xFE1
 16176                           indf2	equ	0xFDF
 16177                           postinc2	equ	0xFDE
 16178                           postdec2	equ	0xFDD
 16179                           plusw2	equ	0xFDB
 16180                           fsr2h	equ	0xFDA
 16181                           fsr2l	equ	0xFD9
 16182                           status	equ	0xFD8
 16183                           
 16184 ;; *************** function _PortProperty_Valid *****************
 16185 ;; Defined at:
 16186 ;;		line 220 in file "Library/Types.c"
 16187 ;; Parameters:    Size  Location     Type
 16188 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 16189 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16190 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16191 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16192 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16193 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 16194 ;;  pPin            1   18[BANK0 ] unsigned char 
 16195 ;; Auto vars:     Size  Location     Type
 16196 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 16197 ;;  Pair            1   37[BANK0 ] enum E6469
 16198 ;; Return value:  Size  Location     Type
 16199 ;;                  1    wreg      enum E6475
 16200 ;; Registers used:
 16201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16202 ;; Tracked objects:
 16203 ;;		On entry : 0/0
 16204 ;;		On exit  : 0/0
 16205 ;;		Unchanged: 0/0
 16206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16207 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16208 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16210 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16211 ;;Total ram usage:       23 bytes
 16212 ;; Hardware stack levels used:    1
 16213 ;; Hardware stack levels required when called:   10
 16214 ;; This function calls:
 16215 ;;		_Word_GetPair
 16216 ;; This function is called by:
 16217 ;;		_Port_CheckPairType
 16218 ;;		_Port_SetPinType
 16219 ;; This function uses a non-reentrant model
 16220 ;;
 16221                           
 16222                           	psect	text85
 16223  014FE2                     __ptext85:
 16224                           	opt stack 0
 16225  014FE2                     _PortProperty_Valid:
 16226                           	opt stack 15
 16227                           
 16228                           ;Types.c: 222: ePinDrive Pair;
 16229                           ;Types.c: 223: const ePinError Errors[4][4] =
 16230                           ;Types.c: 224: {
 16231                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 16232                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 16233                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 16234                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 16235                           ;Types.c: 230: };
 16236                           
 16237                           ; BSR set to: 0
 16238                           ;incstack = 0
 16239  014FE2  0E19               	movlw	low PortProperty_Valid@F6830
 16240  014FE4  6EF6               	movwf	tblptrl,c
 16241  014FE6                     	if	1	;There is more than 1 active tblptr byte
 16242  014FE6  0EFC               	movlw	high PortProperty_Valid@F6830
 16243  014FE8  6EF7               	movwf	tblptrh,c
 16244  014FEA                     	endif
 16245  014FEA                     	if	1	;There are 3 active tblptr bytes
 16246  014FEA  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 16247  014FEC  6EF8               	movwf	tblptru,c
 16248  014FEE                     	endif
 16249  014FEE  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 16250  014FF2  0E0F               	movlw	15
 16251  014FF4                     u9490:
 16252  014FF4  0009               	tblrd		*+
 16253  014FF6  CFF5 FFDE          	movff	tablat,postinc2
 16254  014FFA  06E8               	decf	wreg,f,c
 16255  014FFC  E2FB               	bc	u9490
 16256                           
 16257                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 16258  014FFE  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 16259  015002  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 16260  015006  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 16261  01500A  EC7C  F0AD         	call	_Word_GetPair	;wreg free
 16262  01500E  0100               	movlb	0	; () banked
 16263  015010  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 16264                           
 16265                           ; BSR set to: 0
 16266                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 16267  015012  0E04               	movlw	4
 16268  015014  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 16269  015016  D017               	goto	l819
 16270                           
 16271                           ; BSR set to: 0
 16272  015018  0E04               	movlw	4
 16273  01501A  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 16274  01501C  D014               	goto	l819
 16275                           
 16276                           ; BSR set to: 0
 16277                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 16278  01501E  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 16279  015020  0D04               	mullw	4
 16280  015022  0E75               	movlw	low PortProperty_Valid@Errors
 16281  015024  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 16282  015026  0E00               	movlw	high PortProperty_Valid@Errors
 16283  015028  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 16284  01502A  50F3               	movf	prodl,w,c
 16285  01502C  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 16286  01502E  50F4               	movf	prodh,w,c
 16287  015030  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 16288  015032  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 16289  015034  0D01               	mullw	1
 16290  015036  50F3               	movf	prodl,w,c
 16291  015038  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 16292  01503A  6ED9               	movwf	fsr2l,c
 16293  01503C  50F4               	movf	prodh,w,c
 16294  01503E  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 16295  015040  6EDA               	movwf	fsr2h,c
 16296  015042  50DF               	movf	indf2,w,c
 16297                           
 16298                           ; BSR set to: 0
 16299  015044  0012               	return	
 16300  015046                     l819:
 16301                           
 16302                           ; BSR set to: 0
 16303                           ;Types.c: 237: return ePinErrorState;
 16304                           
 16305                           ; BSR set to: 0
 16306  015046  0E05               	movlw	5
 16307  015048  0012               	return	
 16308  01504A                     __end_of_PortProperty_Valid:
 16309                           	opt stack 0
 16310                           tosu	equ	0xFFF
 16311                           tosh	equ	0xFFE
 16312                           tosl	equ	0xFFD
 16313                           pclath	equ	0xFFA
 16314                           tblptru	equ	0xFF8
 16315                           tblptrh	equ	0xFF7
 16316                           tblptrl	equ	0xFF6
 16317                           tablat	equ	0xFF5
 16318                           prodh	equ	0xFF4
 16319                           prodl	equ	0xFF3
 16320                           intcon	equ	0xFF2
 16321                           postinc0	equ	0xFEE
 16322                           wreg	equ	0xFE8
 16323                           indf1	equ	0xFE7
 16324                           postdec1	equ	0xFE5
 16325                           fsr1h	equ	0xFE2
 16326                           fsr1l	equ	0xFE1
 16327                           indf2	equ	0xFDF
 16328                           postinc2	equ	0xFDE
 16329                           postdec2	equ	0xFDD
 16330                           plusw2	equ	0xFDB
 16331                           fsr2h	equ	0xFDA
 16332                           fsr2l	equ	0xFD9
 16333                           status	equ	0xFD8
 16334                           
 16335 ;; *************** function _Word_GetPair *****************
 16336 ;; Defined at:
 16337 ;;		line 156 in file "Library/Types.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;  pInput          2   12[BANK0 ] PTR struct Word
 16340 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16341 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16342 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16343 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16344 ;;  pPair           1   14[BANK0 ] unsigned char 
 16345 ;; Auto vars:     Size  Location     Type
 16346 ;;		None
 16347 ;; Return value:  Size  Location     Type
 16348 ;;                  1    wreg      unsigned char 
 16349 ;; Registers used:
 16350 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16351 ;; Tracked objects:
 16352 ;;		On entry : 0/0
 16353 ;;		On exit  : 0/0
 16354 ;;		Unchanged: 0/0
 16355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16356 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16359 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16360 ;;Total ram usage:        3 bytes
 16361 ;; Hardware stack levels used:    1
 16362 ;; Hardware stack levels required when called:    9
 16363 ;; This function calls:
 16364 ;;		_Byte_GetPair
 16365 ;; This function is called by:
 16366 ;;		_Port_Init
 16367 ;;		_Port_SetPin
 16368 ;;		_Port_Set
 16369 ;;		_PortProperty_Valid
 16370 ;;		_Port_SetPair
 16371 ;;		_Port_SetQuad
 16372 ;; This function uses a non-reentrant model
 16373 ;;
 16374                           
 16375                           	psect	text86
 16376  015AF8                     __ptext86:
 16377                           	opt stack 0
 16378  015AF8                     _Word_GetPair:
 16379                           	opt stack 15
 16380                           
 16381                           ;Types.c: 158: if (pPair >= 4)
 16382                           
 16383                           ; BSR set to: 0
 16384                           ;incstack = 0
 16385  015AF8  0E03               	movlw	3
 16386  015AFA  0100               	movlb	0	; () banked
 16387  015AFC  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 16388  015AFE  D00C               	goto	l781
 16389                           
 16390                           ; BSR set to: 0
 16391                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16392  015B00  0E01               	movlw	1
 16393  015B02  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 16394  015B04  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 16395  015B06  0E00               	movlw	0
 16396  015B08  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 16397  015B0A  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 16398  015B0C  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 16399  015B0E  0FFC               	addlw	252
 16400  015B10  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 16401  015B12  ECFB  F0AE         	call	_Byte_GetPair	;wreg free
 16402  015B16  0012               	return	
 16403  015B18                     l781:
 16404                           
 16405                           ;Types.c: 160: else
 16406                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16407  015B18  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 16408  015B1C  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 16409  015B20  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 16410  015B24  ECFB  F0AE         	call	_Byte_GetPair	;wreg free
 16411  015B28  0012               	return	
 16412  015B2A                     __end_of_Word_GetPair:
 16413                           	opt stack 0
 16414                           tosu	equ	0xFFF
 16415                           tosh	equ	0xFFE
 16416                           tosl	equ	0xFFD
 16417                           pclath	equ	0xFFA
 16418                           tblptru	equ	0xFF8
 16419                           tblptrh	equ	0xFF7
 16420                           tblptrl	equ	0xFF6
 16421                           tablat	equ	0xFF5
 16422                           prodh	equ	0xFF4
 16423                           prodl	equ	0xFF3
 16424                           intcon	equ	0xFF2
 16425                           postinc0	equ	0xFEE
 16426                           wreg	equ	0xFE8
 16427                           indf1	equ	0xFE7
 16428                           postdec1	equ	0xFE5
 16429                           fsr1h	equ	0xFE2
 16430                           fsr1l	equ	0xFE1
 16431                           indf2	equ	0xFDF
 16432                           postinc2	equ	0xFDE
 16433                           postdec2	equ	0xFDD
 16434                           plusw2	equ	0xFDB
 16435                           fsr2h	equ	0xFDA
 16436                           fsr2l	equ	0xFD9
 16437                           status	equ	0xFD8
 16438                           
 16439 ;; *************** function _Byte_GetPair *****************
 16440 ;; Defined at:
 16441 ;;		line 87 in file "Library/Types.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 16444 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16445 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16446 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16447 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16448 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16449 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16450 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16451 ;;		 -> NULL(0), 
 16452 ;;  pPair           1   11[BANK0 ] unsigned char 
 16453 ;; Auto vars:     Size  Location     Type
 16454 ;;		None
 16455 ;; Return value:  Size  Location     Type
 16456 ;;                  1    wreg      unsigned char 
 16457 ;; Registers used:
 16458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16459 ;; Tracked objects:
 16460 ;;		On entry : 0/0
 16461 ;;		On exit  : 0/0
 16462 ;;		Unchanged: 0/0
 16463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16464 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16467 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16468 ;;Total ram usage:        3 bytes
 16469 ;; Hardware stack levels used:    1
 16470 ;; Hardware stack levels required when called:    8
 16471 ;; This function calls:
 16472 ;;		_Byte_GetZone
 16473 ;; This function is called by:
 16474 ;;		_Word_GetPair
 16475 ;; This function uses a non-reentrant model
 16476 ;;
 16477                           
 16478                           	psect	text87
 16479  015DF6                     __ptext87:
 16480                           	opt stack 0
 16481  015DF6                     _Byte_GetPair:
 16482                           	opt stack 15
 16483                           
 16484                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16485                           
 16486                           ;incstack = 0
 16487  015DF6  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 16488  015DFA  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 16489  015DFE  0E04               	movlw	4
 16490  015E00  0100               	movlb	0	; () banked
 16491  015E02  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 16492  015E04  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 16493  015E08  0E02               	movlw	2
 16494  015E0A  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 16495  015E0C  EC86  F0A5         	call	_Byte_GetZone	;wreg free
 16496  015E10  0012               	return	
 16497  015E12                     __end_of_Byte_GetPair:
 16498                           	opt stack 0
 16499                           tosu	equ	0xFFF
 16500                           tosh	equ	0xFFE
 16501                           tosl	equ	0xFFD
 16502                           pclath	equ	0xFFA
 16503                           tblptru	equ	0xFF8
 16504                           tblptrh	equ	0xFF7
 16505                           tblptrl	equ	0xFF6
 16506                           tablat	equ	0xFF5
 16507                           prodh	equ	0xFF4
 16508                           prodl	equ	0xFF3
 16509                           intcon	equ	0xFF2
 16510                           postinc0	equ	0xFEE
 16511                           wreg	equ	0xFE8
 16512                           indf1	equ	0xFE7
 16513                           postdec1	equ	0xFE5
 16514                           fsr1h	equ	0xFE2
 16515                           fsr1l	equ	0xFE1
 16516                           indf2	equ	0xFDF
 16517                           postinc2	equ	0xFDE
 16518                           postdec2	equ	0xFDD
 16519                           plusw2	equ	0xFDB
 16520                           fsr2h	equ	0xFDA
 16521                           fsr2l	equ	0xFD9
 16522                           status	equ	0xFD8
 16523                           
 16524 ;; *************** function _Byte_GetZone *****************
 16525 ;; Defined at:
 16526 ;;		line 64 in file "Library/Types.c"
 16527 ;; Parameters:    Size  Location     Type
 16528 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16529 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16530 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16531 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16532 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16533 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16534 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16535 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16536 ;;		 -> NULL(0), 
 16537 ;;  pMax            1    2[BANK0 ] unsigned char 
 16538 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16539 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16540 ;; Auto vars:     Size  Location     Type
 16541 ;;  Output          1    8[BANK0 ] unsigned char 
 16542 ;;  Offset          1    7[BANK0 ] unsigned char 
 16543 ;;  MASK            1    6[BANK0 ] unsigned char 
 16544 ;; Return value:  Size  Location     Type
 16545 ;;                  1    wreg      unsigned char 
 16546 ;; Registers used:
 16547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16553 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16554 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16556 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16557 ;;Total ram usage:        9 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; Hardware stack levels required when called:    7
 16560 ;; This function calls:
 16561 ;;		Nothing
 16562 ;; This function is called by:
 16563 ;;		_Byte_GetPair
 16564 ;;		_Byte_GetTriple
 16565 ;;		_Byte_GetQuad
 16566 ;; This function uses a non-reentrant model
 16567 ;;
 16568                           
 16569                           	psect	text88
 16570  014B0C                     __ptext88:
 16571                           	opt stack 0
 16572  014B0C                     _Byte_GetZone:
 16573                           	opt stack 15
 16574                           
 16575                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 16576                           
 16577                           ;incstack = 0
 16578  014B0C  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 16579  014B10  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 16580  014B14  0E00               	movlw	low (__mediumconst shr (0+16))
 16581  014B16  6EF8               	movwf	tblptru,c
 16582  014B18  0E0F               	movlw	(high __ramtop+-1)
 16583  014B1A  64F7               	cpfsgt	tblptrh,c
 16584  014B1C  D003               	bra	u9457
 16585  014B1E  0008               	tblrd		*
 16586  014B20  50F5               	movf	tablat,w,c
 16587  014B22  D005               	bra	u9450
 16588  014B24                     u9457:
 16589  014B24  CFF6 FFE9          	movff	tblptrl,fsr0l
 16590  014B28  CFF7 FFEA          	movff	tblptrh,fsr0h
 16591  014B2C  50EF               	movf	indf0,w,c
 16592  014B2E                     u9450:
 16593  014B2E  0100               	movlb	0	; () banked
 16594  014B30  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 16595                           
 16596                           ; BSR set to: 0
 16597                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 16598  014B32  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16599  014B34  0D01               	mullw	1
 16600  014B36  0E33               	movlw	low _MASKS
 16601  014B38  24F3               	addwf	prodl,w,c
 16602  014B3A  6EF6               	movwf	tblptrl,c
 16603  014B3C  0EFC               	movlw	high _MASKS
 16604  014B3E  20F4               	addwfc	prodh,w,c
 16605  014B40  6EF7               	movwf	tblptrh,c
 16606  014B42                     	if	1	;There are 3 active tblptr bytes
 16607  014B42  6AF8               	clrf	tblptru,c
 16608  014B44  0E00               	movlw	low (__mediumconst shr (0+16))
 16609  014B46  22F8               	addwfc	tblptru,f,c
 16610  014B48                     	endif
 16611  014B48  0008               	tblrd		*
 16612  014B4A  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 16613                           
 16614                           ; BSR set to: 0
 16615                           ;Types.c: 68: UINT8 Offset = 0;
 16616  014B4E  0E00               	movlw	0
 16617  014B50  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 16618                           
 16619                           ;Types.c: 70: while (pChunk >= pMax)
 16620  014B52  D003               	goto	l732
 16621  014B54                     
 16622                           ; BSR set to: 0
 16623                           ;Types.c: 71: {
 16624                           ;Types.c: 72: pChunk -= pMax;
 16625                           
 16626                           ; BSR set to: 0
 16627  014B54  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16628  014B56  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 16629                           
 16630                           ; BSR set to: 0
 16631                           ;Types.c: 73: Offset += 1;
 16632  014B58  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 16633  014B5A                     l732:
 16634                           
 16635                           ; BSR set to: 0
 16636                           
 16637                           ; BSR set to: 0
 16638  014B5A  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 16639  014B5C  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 16640  014B5E  B0D8               	btfsc	status,0,c
 16641  014B60  D7F9               	goto	l733
 16642                           
 16643                           ; BSR set to: 0
 16644                           ;Types.c: 74: }
 16645                           ;Types.c: 75: pChunk *= pChunkSize;
 16646                           
 16647                           ; BSR set to: 0
 16648  014B62  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16649  014B64  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 16650  014B66  50F3               	movf	prodl,w,c
 16651  014B68  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;Types.c: 76: pChunk += Offset;
 16655  014B6A  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 16656  014B6C  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 16657                           
 16658                           ; BSR set to: 0
 16659                           ;Types.c: 78: Output >>= pChunk;
 16660  014B6E  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 16661  014B70  6F65               	movwf	??_Byte_GetZone& (0+255),b
 16662  014B72  D002               	goto	u9470
 16663  014B74                     u9475:
 16664  014B74  90D8               	bcf	status,0,c
 16665  014B76  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 16666  014B78                     u9470:
 16667  014B78  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 16668  014B7A  D7FC               	goto	u9475
 16669                           
 16670                           ;Types.c: 79: Output &= MASK;
 16671  014B7C  0100               	movlb	0	; () banked
 16672  014B7E  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 16673  014B80  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 16674                           
 16675                           ; BSR set to: 0
 16676                           ;Types.c: 80: return Output;
 16677  014B82  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 16678  014B84  0012               	return	
 16679  014B86                     __end_of_Byte_GetZone:
 16680                           	opt stack 0
 16681                           tosu	equ	0xFFF
 16682                           tosh	equ	0xFFE
 16683                           tosl	equ	0xFFD
 16684                           pclath	equ	0xFFA
 16685                           tblptru	equ	0xFF8
 16686                           tblptrh	equ	0xFF7
 16687                           tblptrl	equ	0xFF6
 16688                           tablat	equ	0xFF5
 16689                           prodh	equ	0xFF4
 16690                           prodl	equ	0xFF3
 16691                           intcon	equ	0xFF2
 16692                           indf0	equ	0xFEF
 16693                           postinc0	equ	0xFEE
 16694                           fsr0h	equ	0xFEA
 16695                           fsr0l	equ	0xFE9
 16696                           wreg	equ	0xFE8
 16697                           indf1	equ	0xFE7
 16698                           postdec1	equ	0xFE5
 16699                           fsr1h	equ	0xFE2
 16700                           fsr1l	equ	0xFE1
 16701                           indf2	equ	0xFDF
 16702                           postinc2	equ	0xFDE
 16703                           postdec2	equ	0xFDD
 16704                           plusw2	equ	0xFDB
 16705                           fsr2h	equ	0xFDA
 16706                           fsr2l	equ	0xFD9
 16707                           status	equ	0xFD8
 16708                           
 16709 ;; *************** function _Byte_SetQuad *****************
 16710 ;; Defined at:
 16711 ;;		line 101 in file "Library/Types.c"
 16712 ;; Parameters:    Size  Location     Type
 16713 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 16714 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 16715 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16716 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16717 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16718 ;;		 -> NULL(0), 
 16719 ;;  pQuad           1   13[BANK0 ] unsigned char 
 16720 ;;  pValue          1   14[BANK0 ] unsigned char 
 16721 ;; Auto vars:     Size  Location     Type
 16722 ;;		None
 16723 ;; Return value:  Size  Location     Type
 16724 ;;                  1    wreg      void 
 16725 ;; Registers used:
 16726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16727 ;; Tracked objects:
 16728 ;;		On entry : 0/0
 16729 ;;		On exit  : 0/0
 16730 ;;		Unchanged: 0/0
 16731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16732 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16735 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16736 ;;Total ram usage:        4 bytes
 16737 ;; Hardware stack levels used:    1
 16738 ;; Hardware stack levels required when called:    8
 16739 ;; This function calls:
 16740 ;;		_Byte_SetZone
 16741 ;; This function is called by:
 16742 ;;		_Port_SetQuadType
 16743 ;;		_SPI_Init
 16744 ;;		_SPI_MinSpeed
 16745 ;;		_SPI_MaxSpeed
 16746 ;;		_Port_SetQuad
 16747 ;;		_Word_SetQuad
 16748 ;;		_I2C_Init
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           	psect	text89
 16753  015D98                     __ptext89:
 16754                           	opt stack 0
 16755  015D98                     _Byte_SetQuad:
 16756                           	opt stack 20
 16757                           
 16758                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;incstack = 0
 16762  015D98  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 16763  015D9C  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 16764  015DA0  0E02               	movlw	2
 16765  015DA2  0100               	movlb	0	; () banked
 16766  015DA4  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 16767  015DA6  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 16768  015DAA  0E04               	movlw	4
 16769  015DAC  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 16770  015DAE  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 16771  015DB2  EC34  F0A3         	call	_Byte_SetZone	;wreg free
 16772  015DB6  0012               	return		;funcret
 16773  015DB8                     __end_of_Byte_SetQuad:
 16774                           	opt stack 0
 16775                           tosu	equ	0xFFF
 16776                           tosh	equ	0xFFE
 16777                           tosl	equ	0xFFD
 16778                           pclath	equ	0xFFA
 16779                           tblptru	equ	0xFF8
 16780                           tblptrh	equ	0xFF7
 16781                           tblptrl	equ	0xFF6
 16782                           tablat	equ	0xFF5
 16783                           prodh	equ	0xFF4
 16784                           prodl	equ	0xFF3
 16785                           intcon	equ	0xFF2
 16786                           indf0	equ	0xFEF
 16787                           postinc0	equ	0xFEE
 16788                           fsr0h	equ	0xFEA
 16789                           fsr0l	equ	0xFE9
 16790                           wreg	equ	0xFE8
 16791                           indf1	equ	0xFE7
 16792                           postdec1	equ	0xFE5
 16793                           fsr1h	equ	0xFE2
 16794                           fsr1l	equ	0xFE1
 16795                           indf2	equ	0xFDF
 16796                           postinc2	equ	0xFDE
 16797                           postdec2	equ	0xFDD
 16798                           plusw2	equ	0xFDB
 16799                           fsr2h	equ	0xFDA
 16800                           fsr2l	equ	0xFD9
 16801                           status	equ	0xFD8
 16802                           
 16803 ;; *************** function _Byte_SetZone *****************
 16804 ;; Defined at:
 16805 ;;		line 47 in file "Library/Types.c"
 16806 ;; Parameters:    Size  Location     Type
 16807 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16808 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 16809 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 16810 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 16811 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 16812 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16813 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16814 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16815 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16816 ;;  pMax            1    2[BANK0 ] unsigned char 
 16817 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16818 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16819 ;;  pValue          1    5[BANK0 ] unsigned char 
 16820 ;; Auto vars:     Size  Location     Type
 16821 ;;  MASK            1   10[BANK0 ] unsigned char 
 16822 ;;  Offset          1    9[BANK0 ] unsigned char 
 16823 ;; Return value:  Size  Location     Type
 16824 ;;                  1    wreg      void 
 16825 ;; Registers used:
 16826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16827 ;; Tracked objects:
 16828 ;;		On entry : 0/0
 16829 ;;		On exit  : 0/0
 16830 ;;		Unchanged: 0/0
 16831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16832 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16833 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16834 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16835 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16836 ;;Total ram usage:       11 bytes
 16837 ;; Hardware stack levels used:    1
 16838 ;; Hardware stack levels required when called:    7
 16839 ;; This function calls:
 16840 ;;		Nothing
 16841 ;; This function is called by:
 16842 ;;		_Byte_SetPair
 16843 ;;		_Byte_SetQuad
 16844 ;;		_Byte_SetTriple
 16845 ;; This function uses a non-reentrant model
 16846 ;;
 16847                           
 16848                           	psect	text90
 16849  014668                     __ptext90:
 16850                           	opt stack 0
 16851  014668                     _Byte_SetZone:
 16852                           	opt stack 19
 16853                           
 16854                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 16855                           
 16856                           ;incstack = 0
 16857  014668  0100               	movlb	0	; () banked
 16858  01466A  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16859  01466C  0D01               	mullw	1
 16860  01466E  0E33               	movlw	low _MASKS
 16861  014670  24F3               	addwf	prodl,w,c
 16862  014672  6EF6               	movwf	tblptrl,c
 16863  014674  0EFC               	movlw	high _MASKS
 16864  014676  20F4               	addwfc	prodh,w,c
 16865  014678  6EF7               	movwf	tblptrh,c
 16866  01467A                     	if	1	;There are 3 active tblptr bytes
 16867  01467A  6AF8               	clrf	tblptru,c
 16868  01467C  0E00               	movlw	low (__mediumconst shr (0+16))
 16869  01467E  22F8               	addwfc	tblptru,f,c
 16870  014680                     	endif
 16871  014680  0008               	tblrd		*
 16872  014682  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;Types.c: 50: UINT8 Offset = 0;
 16876  014686  0E00               	movlw	0
 16877  014688  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 16878                           
 16879                           ;Types.c: 52: while (pChunk >= pMax)
 16880  01468A  D003               	goto	l726
 16881  01468C                     
 16882                           ; BSR set to: 0
 16883                           ;Types.c: 53: {
 16884                           ;Types.c: 54: pChunk -= pMax;
 16885                           
 16886                           ; BSR set to: 0
 16887  01468C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16888  01468E  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;Types.c: 55: Offset += 1;
 16892  014690  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 16893  014692                     l726:
 16894                           
 16895                           ; BSR set to: 0
 16896                           
 16897                           ; BSR set to: 0
 16898  014692  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 16899  014694  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 16900  014696  B0D8               	btfsc	status,0,c
 16901  014698  D7F9               	goto	l727
 16902                           
 16903                           ; BSR set to: 0
 16904                           ;Types.c: 56: }
 16905                           ;Types.c: 57: pChunk *= pChunkSize;
 16906                           
 16907                           ; BSR set to: 0
 16908  01469A  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 16909  01469C  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 16910  01469E  50F3               	movf	prodl,w,c
 16911  0146A0  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 16912                           
 16913                           ; BSR set to: 0
 16914                           ;Types.c: 58: pChunk += Offset;
 16915  0146A2  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 16916  0146A4  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 16917                           
 16918                           ; BSR set to: 0
 16919                           ;Types.c: 60: pValue &= MASK;
 16920  0146A6  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 16921  0146A8  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 16922                           
 16923                           ; BSR set to: 0
 16924                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 16925  0146AA  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16926  0146AE  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 16927  0146B2  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16928  0146B4  D002               	goto	u9554
 16929  0146B6                     u9555:
 16930  0146B6  90D8               	bcf	status,0,c
 16931  0146B8  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16932  0146BA                     u9554:
 16933  0146BA  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16934  0146BC  D7FC               	goto	u9555
 16935  0146BE  0100               	movlb	0	; () banked
 16936  0146C0  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16937  0146C2  0AFF               	xorlw	255
 16938  0146C4  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 16939  0146C6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16940  0146CA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16941  0146CE  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 16942  0146D0  16DF               	andwf	indf2,f,c
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 16946  0146D2  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 16947  0146D6  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 16948  0146DA  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 16949  0146DC  D002               	goto	u9564
 16950  0146DE                     u9565:
 16951  0146DE  90D8               	bcf	status,0,c
 16952  0146E0  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 16953  0146E2                     u9564:
 16954  0146E2  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 16955  0146E4  D7FC               	goto	u9565
 16956  0146E6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 16957  0146EA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 16958  0146EE  0100               	movlb	0	; () banked
 16959  0146F0  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 16960  0146F2  12DF               	iorwf	indf2,f,c
 16961                           
 16962                           ; BSR set to: 0
 16963  0146F4  0012               	return		;funcret
 16964  0146F6                     __end_of_Byte_SetZone:
 16965                           	opt stack 0
 16966                           tosu	equ	0xFFF
 16967                           tosh	equ	0xFFE
 16968                           tosl	equ	0xFFD
 16969                           pclath	equ	0xFFA
 16970                           tblptru	equ	0xFF8
 16971                           tblptrh	equ	0xFF7
 16972                           tblptrl	equ	0xFF6
 16973                           tablat	equ	0xFF5
 16974                           prodh	equ	0xFF4
 16975                           prodl	equ	0xFF3
 16976                           intcon	equ	0xFF2
 16977                           indf0	equ	0xFEF
 16978                           postinc0	equ	0xFEE
 16979                           fsr0h	equ	0xFEA
 16980                           fsr0l	equ	0xFE9
 16981                           wreg	equ	0xFE8
 16982                           indf1	equ	0xFE7
 16983                           postdec1	equ	0xFE5
 16984                           fsr1h	equ	0xFE2
 16985                           fsr1l	equ	0xFE1
 16986                           indf2	equ	0xFDF
 16987                           postinc2	equ	0xFDE
 16988                           postdec2	equ	0xFDD
 16989                           plusw2	equ	0xFDB
 16990                           fsr2h	equ	0xFDA
 16991                           fsr2l	equ	0xFD9
 16992                           status	equ	0xFD8
 16993                           
 16994 ;; *************** function _Drive *****************
 16995 ;; Defined at:
 16996 ;;		line 188 in file "main.c"
 16997 ;; Parameters:    Size  Location     Type
 16998 ;;  Speed           2    1[BANK0 ] int 
 16999 ;; Auto vars:     Size  Location     Type
 17000 ;;  Rad             2    3[BANK0 ] int 
 17001 ;; Return value:  Size  Location     Type
 17002 ;;                  1    wreg      void 
 17003 ;; Registers used:
 17004 ;;		wreg, status,2, status,0, cstack
 17005 ;; Tracked objects:
 17006 ;;		On entry : 0/0
 17007 ;;		On exit  : 0/0
 17008 ;;		Unchanged: 0/0
 17009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17010 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17011 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17013 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17014 ;;Total ram usage:        4 bytes
 17015 ;; Hardware stack levels used:    1
 17016 ;; Hardware stack levels required when called:    8
 17017 ;; This function calls:
 17018 ;;		_eusartSend
 17019 ;; This function is called by:
 17020 ;;		_main
 17021 ;; This function uses a non-reentrant model
 17022 ;;
 17023                           
 17024                           	psect	text91
 17025  015784                     __ptext91:
 17026                           	opt stack 0
 17027  015784                     _Drive:
 17028                           	opt stack 22
 17029                           
 17030                           ;main.c: 189: if (Speed < 0){
 17031                           
 17032                           ; BSR set to: 0
 17033                           ;incstack = 0
 17034  015784  0100               	movlb	0	; () banked
 17035  015786  AF62               	btfss	(Drive@Speed+1)& (0+255),7,b
 17036  015788  D006               	goto	l2162
 17037                           
 17038                           ; BSR set to: 0
 17039                           ;main.c: 190: Speed = -1*Speed;
 17040  01578A  6D61               	negf	Drive@Speed& (0+255),b
 17041  01578C  1F62               	comf	(Drive@Speed+1)& (0+255),f,b
 17042  01578E  B0D8               	btfsc	status,0,c
 17043  015790  2B62               	incf	(Drive@Speed+1)& (0+255),f,b
 17044                           
 17045                           ;main.c: 191: Speed = ~Speed;
 17046  015792  1F61               	comf	Drive@Speed& (0+255),f,b
 17047  015794  1F62               	comf	(Drive@Speed+1)& (0+255),f,b
 17048  015796                     l2162:
 17049                           
 17050                           ; BSR set to: 0
 17051                           ;main.c: 192: }
 17052                           ;main.c: 193: int Rad = 32768;
 17053                           
 17054                           ; BSR set to: 0
 17055  015796  0E80               	movlw	128
 17056  015798  6F64               	movwf	(Drive@Rad+1)& (0+255),b
 17057  01579A  0E00               	movlw	0
 17058  01579C  6F63               	movwf	Drive@Rad& (0+255),b
 17059                           
 17060                           ; BSR set to: 0
 17061                           ;main.c: 194: eusartSend(137);
 17062  01579E  0E89               	movlw	137
 17063  0157A0  EC23  F0B0         	call	_eusartSend
 17064                           
 17065                           ;main.c: 195: eusartSend((((Speed)>>8) & 255));
 17066  0157A4  0100               	movlb	0	; () banked
 17067  0157A6  5162               	movf	(Drive@Speed+1)& (0+255),w,b
 17068  0157A8  EC23  F0B0         	call	_eusartSend
 17069                           
 17070                           ;main.c: 196: eusartSend(((Speed) & 255));
 17071  0157AC  0100               	movlb	0	; () banked
 17072  0157AE  5161               	movf	Drive@Speed& (0+255),w,b
 17073  0157B0  EC23  F0B0         	call	_eusartSend
 17074                           
 17075                           ;main.c: 197: eusartSend((((Rad)>>8) & 255));
 17076  0157B4  0100               	movlb	0	; () banked
 17077  0157B6  5164               	movf	(Drive@Rad+1)& (0+255),w,b
 17078  0157B8  EC23  F0B0         	call	_eusartSend
 17079                           
 17080                           ;main.c: 198: eusartSend(((Rad) & 255));
 17081  0157BC  0100               	movlb	0	; () banked
 17082  0157BE  5163               	movf	Drive@Rad& (0+255),w,b
 17083  0157C0  EC23  F0B0         	call	_eusartSend
 17084  0157C4  0012               	return		;funcret
 17085  0157C6                     __end_of_Drive:
 17086                           	opt stack 0
 17087                           tosu	equ	0xFFF
 17088                           tosh	equ	0xFFE
 17089                           tosl	equ	0xFFD
 17090                           pclath	equ	0xFFA
 17091                           tblptru	equ	0xFF8
 17092                           tblptrh	equ	0xFF7
 17093                           tblptrl	equ	0xFF6
 17094                           tablat	equ	0xFF5
 17095                           prodh	equ	0xFF4
 17096                           prodl	equ	0xFF3
 17097                           intcon	equ	0xFF2
 17098                           indf0	equ	0xFEF
 17099                           postinc0	equ	0xFEE
 17100                           fsr0h	equ	0xFEA
 17101                           fsr0l	equ	0xFE9
 17102                           wreg	equ	0xFE8
 17103                           indf1	equ	0xFE7
 17104                           postdec1	equ	0xFE5
 17105                           fsr1h	equ	0xFE2
 17106                           fsr1l	equ	0xFE1
 17107                           indf2	equ	0xFDF
 17108                           postinc2	equ	0xFDE
 17109                           postdec2	equ	0xFDD
 17110                           plusw2	equ	0xFDB
 17111                           fsr2h	equ	0xFDA
 17112                           fsr2l	equ	0xFD9
 17113                           status	equ	0xFD8
 17114                           
 17115 ;; *************** function _Console_Init *****************
 17116 ;; Defined at:
 17117 ;;		line 157 in file "Library/Console.c"
 17118 ;; Parameters:    Size  Location     Type
 17119 ;;		None
 17120 ;; Auto vars:     Size  Location     Type
 17121 ;;  y               1    3[BANK0 ] unsigned char 
 17122 ;;  x               1    2[BANK0 ] unsigned char 
 17123 ;; Return value:  Size  Location     Type
 17124 ;;                  1    wreg      void 
 17125 ;; Registers used:
 17126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17127 ;; Tracked objects:
 17128 ;;		On entry : 0/0
 17129 ;;		On exit  : 0/0
 17130 ;;		Unchanged: 0/0
 17131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17135 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17136 ;;Total ram usage:        4 bytes
 17137 ;; Hardware stack levels used:    1
 17138 ;; Hardware stack levels required when called:    7
 17139 ;; This function calls:
 17140 ;;		Nothing
 17141 ;; This function is called by:
 17142 ;;		_main
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           	psect	text92
 17147  014EA8                     __ptext92:
 17148                           	opt stack 0
 17149  014EA8                     _Console_Init:
 17150                           	opt stack 23
 17151                           
 17152                           ;Console.c: 160: lBufferX = 0;
 17153                           
 17154                           ;incstack = 0
 17155  014EA8  0E00               	movlw	0
 17156  014EAA  0100               	movlb	0	; () banked
 17157  014EAC  6FF4               	movwf	_lBufferX& (0+255),b
 17158                           
 17159                           ;Console.c: 161: lBufferY = 0;
 17160  014EAE  0E00               	movlw	0
 17161  014EB0  6FF3               	movwf	_lBufferY& (0+255),b
 17162                           
 17163                           ;Console.c: 163: UINT8 x, y;
 17164                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 17165  014EB2  0E00               	movlw	0
 17166  014EB4  6F62               	movwf	Console_Init@x& (0+255),b
 17167  014EB6                     l15250:
 17168                           
 17169                           ; BSR set to: 0
 17170  014EB6  0E13               	movlw	19
 17171  014EB8  6562               	cpfsgt	Console_Init@x& (0+255),b
 17172  014EBA  D001               	goto	l976
 17173  014EBC  0012               	return	
 17174  014EBE                     l976:
 17175                           
 17176                           ; BSR set to: 0
 17177                           ;Console.c: 165: {
 17178                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 17179                           
 17180                           ; BSR set to: 0
 17181  014EBE  0E00               	movlw	0
 17182  014EC0  6F63               	movwf	Console_Init@y& (0+255),b
 17183  014EC2                     l15256:
 17184                           
 17185                           ; BSR set to: 0
 17186  014EC2  0E0E               	movlw	14
 17187  014EC4  6563               	cpfsgt	Console_Init@y& (0+255),b
 17188  014EC6  D001               	goto	l978
 17189  014EC8  D022               	goto	u12550
 17190  014ECA                     l978:
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;Console.c: 167: {
 17194                           ;Console.c: 168: lBuffer[y][x] = '\0';
 17195                           
 17196                           ; BSR set to: 0
 17197  014ECA  5163               	movf	Console_Init@y& (0+255),w,b
 17198  014ECC  0D14               	mullw	20
 17199  014ECE  0E18               	movlw	low _lBuffer
 17200  014ED0  6F60               	movwf	??_Console_Init& (0+255),b
 17201  014ED2  0E03               	movlw	high _lBuffer
 17202  014ED4  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 17203  014ED6  50F3               	movf	prodl,w,c
 17204  014ED8  2760               	addwf	??_Console_Init& (0+255),f,b
 17205  014EDA  50F4               	movf	prodh,w,c
 17206  014EDC  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 17207  014EDE  5162               	movf	Console_Init@x& (0+255),w,b
 17208  014EE0  0D01               	mullw	1
 17209  014EE2  50F3               	movf	prodl,w,c
 17210  014EE4  2560               	addwf	??_Console_Init& (0+255),w,b
 17211  014EE6  6ED9               	movwf	fsr2l,c
 17212  014EE8  50F4               	movf	prodh,w,c
 17213  014EEA  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 17214  014EEC  6EDA               	movwf	fsr2h,c
 17215  014EEE  0E00               	movlw	0
 17216  014EF0  6EDF               	movwf	indf2,c
 17217                           
 17218                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 17219  014EF2  5163               	movf	Console_Init@y& (0+255),w,b
 17220  014EF4  0D02               	mullw	2
 17221  014EF6  0E64               	movlw	low _lCBuffer
 17222  014EF8  24F3               	addwf	prodl,w,c
 17223  014EFA  6ED9               	movwf	fsr2l,c
 17224  014EFC  0E02               	movlw	high _lCBuffer
 17225  014EFE  20F4               	addwfc	prodh,w,c
 17226  014F00  6EDA               	movwf	fsr2h,c
 17227  014F02  0EFF               	movlw	255
 17228  014F04  6EDE               	movwf	postinc2,c
 17229  014F06  0EFF               	movlw	255
 17230  014F08  6EDD               	movwf	postdec2,c
 17231                           
 17232                           ; BSR set to: 0
 17233  014F0A  2B63               	incf	Console_Init@y& (0+255),f,b
 17234  014F0C  D7DA               	goto	l15256
 17235  014F0E                     u12550:
 17236                           
 17237                           ; BSR set to: 0
 17238                           
 17239                           ; BSR set to: 0
 17240  014F0E  2B62               	incf	Console_Init@x& (0+255),f,b
 17241  014F10  D7D2               	goto	l15250
 17242  014F12                     __end_of_Console_Init:
 17243                           	opt stack 0
 17244                           tosu	equ	0xFFF
 17245                           tosh	equ	0xFFE
 17246                           tosl	equ	0xFFD
 17247                           pclath	equ	0xFFA
 17248                           tblptru	equ	0xFF8
 17249                           tblptrh	equ	0xFF7
 17250                           tblptrl	equ	0xFF6
 17251                           tablat	equ	0xFF5
 17252                           prodh	equ	0xFF4
 17253                           prodl	equ	0xFF3
 17254                           intcon	equ	0xFF2
 17255                           indf0	equ	0xFEF
 17256                           postinc0	equ	0xFEE
 17257                           fsr0h	equ	0xFEA
 17258                           fsr0l	equ	0xFE9
 17259                           wreg	equ	0xFE8
 17260                           indf1	equ	0xFE7
 17261                           postdec1	equ	0xFE5
 17262                           fsr1h	equ	0xFE2
 17263                           fsr1l	equ	0xFE1
 17264                           indf2	equ	0xFDF
 17265                           postinc2	equ	0xFDE
 17266                           postdec2	equ	0xFDD
 17267                           plusw2	equ	0xFDB
 17268                           fsr2h	equ	0xFDA
 17269                           fsr2l	equ	0xFD9
 17270                           status	equ	0xFD8
 17271                           
 17272 ;; *************** function _Closest_Object2 *****************
 17273 ;; Defined at:
 17274 ;;		line 358 in file "main.c"
 17275 ;; Parameters:    Size  Location     Type
 17276 ;;		None
 17277 ;; Auto vars:     Size  Location     Type
 17278 ;;		None
 17279 ;; Return value:  Size  Location     Type
 17280 ;;                  1    wreg      void 
 17281 ;; Registers used:
 17282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17283 ;; Tracked objects:
 17284 ;;		On entry : 0/0
 17285 ;;		On exit  : 0/0
 17286 ;;		Unchanged: 0/0
 17287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17292 ;;Total ram usage:        0 bytes
 17293 ;; Hardware stack levels used:    1
 17294 ;; Hardware stack levels required when called:   13
 17295 ;; This function calls:
 17296 ;;		_ADCAverage
 17297 ;;		_Console_Render
 17298 ;;		_SteppingCW
 17299 ;;		_printf
 17300 ;; This function is called by:
 17301 ;;		_main
 17302 ;; This function uses a non-reentrant model
 17303 ;;
 17304                           
 17305                           	psect	text93
 17306  014B86                     __ptext93:
 17307                           	opt stack 0
 17308  014B86                     _Closest_Object2:
 17309                           	opt stack 17
 17310                           
 17311                           ;main.c: 359: while (!CW_Count <= 0) {
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;incstack = 0
 17315  014B86  D032               	goto	l2216
 17316  014B88                     
 17317                           ;main.c: 360: CW_Count--;
 17318  014B88  0101               	movlb	1	; () banked
 17319  014B8A  0728               	decf	_CW_Count& (0+255),f,b
 17320  014B8C  A0D8               	btfss	status,0,c
 17321  014B8E  0729               	decf	(_CW_Count+1)& (0+255),f,b
 17322                           
 17323                           ; BSR set to: 1
 17324                           ;main.c: 361: printf("%c", (char)35);
 17325  014B90  0EFC               	movlw	low STR_1
 17326  014B92  0100               	movlb	0	; () banked
 17327  014B94  6F75               	movwf	printf@f& (0+255),b
 17328  014B96  0EFF               	movlw	high STR_1
 17329  014B98  6F76               	movwf	(printf@f+1)& (0+255),b
 17330  014B9A  0E00               	movlw	0
 17331  014B9C  6F78               	movwf	(?_printf+3)& (0+255),b
 17332  014B9E  0E23               	movlw	35
 17333  014BA0  6F77               	movwf	(?_printf+2)& (0+255),b
 17334  014BA2  EC4F  F096         	call	_printf	;wreg free
 17335                           
 17336                           ;main.c: 362: printf("Stepped 360 degrees");
 17337  014BA6  0E69               	movlw	low STR_12
 17338  014BA8  0100               	movlb	0	; () banked
 17339  014BAA  6F75               	movwf	printf@f& (0+255),b
 17340  014BAC  0EFF               	movlw	high STR_12
 17341  014BAE  6F76               	movwf	(printf@f+1)& (0+255),b
 17342  014BB0  EC4F  F096         	call	_printf	;wreg free
 17343                           
 17344                           ;main.c: 363: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17345  014BB4  0E0B               	movlw	low STR_13
 17346  014BB6  0100               	movlb	0	; () banked
 17347  014BB8  6F75               	movwf	printf@f& (0+255),b
 17348  014BBA  0EFF               	movlw	high STR_13
 17349  014BBC  6F76               	movwf	(printf@f+1)& (0+255),b
 17350  014BBE  C04B  F077         	movff	_Low_Sensor,?_printf+2
 17351  014BC2  C04C  F078         	movff	_Low_Sensor+1,?_printf+3
 17352  014BC6  EC4F  F096         	call	_printf	;wreg free
 17353                           
 17354                           ;main.c: 364: printf("\nGoing back to: %d", Close_Pos);
 17355  014BCA  0EA3               	movlw	low STR_14
 17356  014BCC  0100               	movlb	0	; () banked
 17357  014BCE  6F75               	movwf	printf@f& (0+255),b
 17358  014BD0  0EFF               	movlw	high STR_14
 17359  014BD2  6F76               	movwf	(printf@f+1)& (0+255),b
 17360  014BD4  C02B  F077         	movff	_Close_Pos,?_printf+2
 17361  014BD8  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17362  014BDC  EC4F  F096         	call	_printf	;wreg free
 17363                           
 17364                           ;main.c: 365: Console_Render();
 17365  014BE0  EC73  F092         	call	_Console_Render	;wreg free
 17366                           
 17367                           ;main.c: 366: ADCAverage();
 17368  014BE4  ECE5  F088         	call	_ADCAverage	;wreg free
 17369                           
 17370                           ;main.c: 367: SteppingCW();
 17371  014BE8  ECC7  F0AA         	call	_SteppingCW	;wreg free
 17372  014BEC                     l2216:
 17373  014BEC  0101               	movlb	1	; () banked
 17374  014BEE  5128               	movf	_CW_Count& (0+255),w,b
 17375  014BF0  1129               	iorwf	(_CW_Count+1)& (0+255),w,b
 17376  014BF2  A4D8               	btfss	status,2,c
 17377  014BF4  D7C9               	goto	l2217
 17378                           
 17379                           ; BSR set to: 1
 17380                           ;main.c: 368: }
 17381                           ;main.c: 369: RD5 = 0;
 17382  014BF6  9A83               	bcf	3971,5,c	;volatile
 17383                           
 17384                           ;main.c: 370: RD7 = 0;
 17385  014BF8  9E83               	bcf	3971,7,c	;volatile
 17386                           
 17387                           ;main.c: 371: RA2 = 0;
 17388  014BFA  9480               	bcf	3968,2,c	;volatile
 17389                           
 17390                           ;main.c: 372: RA3 = 0;
 17391  014BFC  9680               	bcf	3968,3,c	;volatile
 17392                           
 17393                           ; BSR set to: 1
 17394                           
 17395                           ;main.c: 373: return;
 17396  014BFE  0012               	return		;funcret
 17397  014C00                     __end_of_Closest_Object2:
 17398                           	opt stack 0
 17399                           tosu	equ	0xFFF
 17400                           tosh	equ	0xFFE
 17401                           tosl	equ	0xFFD
 17402                           pclath	equ	0xFFA
 17403                           tblptru	equ	0xFF8
 17404                           tblptrh	equ	0xFF7
 17405                           tblptrl	equ	0xFF6
 17406                           tablat	equ	0xFF5
 17407                           prodh	equ	0xFF4
 17408                           prodl	equ	0xFF3
 17409                           intcon	equ	0xFF2
 17410                           indf0	equ	0xFEF
 17411                           postinc0	equ	0xFEE
 17412                           fsr0h	equ	0xFEA
 17413                           fsr0l	equ	0xFE9
 17414                           wreg	equ	0xFE8
 17415                           indf1	equ	0xFE7
 17416                           postdec1	equ	0xFE5
 17417                           fsr1h	equ	0xFE2
 17418                           fsr1l	equ	0xFE1
 17419                           indf2	equ	0xFDF
 17420                           postinc2	equ	0xFDE
 17421                           postdec2	equ	0xFDD
 17422                           plusw2	equ	0xFDB
 17423                           fsr2h	equ	0xFDA
 17424                           fsr2l	equ	0xFD9
 17425                           status	equ	0xFD8
 17426                           
 17427 ;; *************** function _SteppingCW *****************
 17428 ;; Defined at:
 17429 ;;		line 293 in file "main.c"
 17430 ;; Parameters:    Size  Location     Type
 17431 ;;		None
 17432 ;; Auto vars:     Size  Location     Type
 17433 ;;		None
 17434 ;; Return value:  Size  Location     Type
 17435 ;;                  2  2193[None  ] int 
 17436 ;; Registers used:
 17437 ;;		wreg, status,2, status,0, cstack
 17438 ;; Tracked objects:
 17439 ;;		On entry : 0/0
 17440 ;;		On exit  : 0/0
 17441 ;;		Unchanged: 0/0
 17442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17447 ;;Total ram usage:        0 bytes
 17448 ;; Hardware stack levels used:    1
 17449 ;; Hardware stack levels required when called:    9
 17450 ;; This function calls:
 17451 ;;		_STP1
 17452 ;;		_STP2
 17453 ;;		_STP3
 17454 ;;		_STP4
 17455 ;;		_delay_ms
 17456 ;; This function is called by:
 17457 ;;		_Closest_Object2
 17458 ;;		_Sensor_Observe
 17459 ;; This function uses a non-reentrant model
 17460 ;;
 17461                           
 17462                           	psect	text94
 17463  01558E                     __ptext94:
 17464                           	opt stack 0
 17465  01558E                     _SteppingCW:
 17466                           	opt stack 20
 17467                           
 17468                           ;main.c: 294: STP1();
 17469                           
 17470                           ; BSR set to: 1
 17471                           ;incstack = 0
 17472  01558E  EC60  F0B0         	call	_STP1	;wreg free
 17473                           
 17474                           ;main.c: 295: delay_ms(2);
 17475  015592  0E00               	movlw	0
 17476  015594  0100               	movlb	0	; () banked
 17477  015596  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17478  015598  0E02               	movlw	2
 17479  01559A  6F60               	movwf	delay_ms@ms& (0+255),b
 17480  01559C  ECB4  F0A8         	call	_delay_ms	;wreg free
 17481                           
 17482                           ;main.c: 296: STP2();
 17483  0155A0  EC5C  F0B0         	call	_STP2	;wreg free
 17484                           
 17485                           ;main.c: 297: delay_ms(2);
 17486  0155A4  0E00               	movlw	0
 17487  0155A6  0100               	movlb	0	; () banked
 17488  0155A8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17489  0155AA  0E02               	movlw	2
 17490  0155AC  6F60               	movwf	delay_ms@ms& (0+255),b
 17491  0155AE  ECB4  F0A8         	call	_delay_ms	;wreg free
 17492                           
 17493                           ;main.c: 298: STP3();
 17494  0155B2  EC58  F0B0         	call	_STP3	;wreg free
 17495                           
 17496                           ;main.c: 299: delay_ms(2);
 17497  0155B6  0E00               	movlw	0
 17498  0155B8  0100               	movlb	0	; () banked
 17499  0155BA  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17500  0155BC  0E02               	movlw	2
 17501  0155BE  6F60               	movwf	delay_ms@ms& (0+255),b
 17502  0155C0  ECB4  F0A8         	call	_delay_ms	;wreg free
 17503                           
 17504                           ;main.c: 300: STP4();
 17505  0155C4  EC54  F0B0         	call	_STP4	;wreg free
 17506                           
 17507                           ;main.c: 301: delay_ms(2);
 17508  0155C8  0E00               	movlw	0
 17509  0155CA  0100               	movlb	0	; () banked
 17510  0155CC  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 17511  0155CE  0E02               	movlw	2
 17512  0155D0  6F60               	movwf	delay_ms@ms& (0+255),b
 17513  0155D2  ECB4  F0A8         	call	_delay_ms	;wreg free
 17514  0155D6  0012               	return		;funcret
 17515  0155D8                     __end_of_SteppingCW:
 17516                           	opt stack 0
 17517                           tosu	equ	0xFFF
 17518                           tosh	equ	0xFFE
 17519                           tosl	equ	0xFFD
 17520                           pclath	equ	0xFFA
 17521                           tblptru	equ	0xFF8
 17522                           tblptrh	equ	0xFF7
 17523                           tblptrl	equ	0xFF6
 17524                           tablat	equ	0xFF5
 17525                           prodh	equ	0xFF4
 17526                           prodl	equ	0xFF3
 17527                           intcon	equ	0xFF2
 17528                           indf0	equ	0xFEF
 17529                           postinc0	equ	0xFEE
 17530                           fsr0h	equ	0xFEA
 17531                           fsr0l	equ	0xFE9
 17532                           wreg	equ	0xFE8
 17533                           indf1	equ	0xFE7
 17534                           postdec1	equ	0xFE5
 17535                           fsr1h	equ	0xFE2
 17536                           fsr1l	equ	0xFE1
 17537                           indf2	equ	0xFDF
 17538                           postinc2	equ	0xFDE
 17539                           postdec2	equ	0xFDD
 17540                           plusw2	equ	0xFDB
 17541                           fsr2h	equ	0xFDA
 17542                           fsr2l	equ	0xFD9
 17543                           status	equ	0xFD8
 17544                           
 17545 ;; *************** function _Closest_Object *****************
 17546 ;; Defined at:
 17547 ;;		line 406 in file "main.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;		None
 17550 ;; Auto vars:     Size  Location     Type
 17551 ;;		None
 17552 ;; Return value:  Size  Location     Type
 17553 ;;                  1    wreg      void 
 17554 ;; Registers used:
 17555 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17556 ;; Tracked objects:
 17557 ;;		On entry : 0/0
 17558 ;;		On exit  : 0/0
 17559 ;;		Unchanged: 0/0
 17560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17565 ;;Total ram usage:        0 bytes
 17566 ;; Hardware stack levels used:    1
 17567 ;; Hardware stack levels required when called:   13
 17568 ;; This function calls:
 17569 ;;		_ADCAverage
 17570 ;;		_Console_Render
 17571 ;;		_SteppingCCW
 17572 ;;		_printf
 17573 ;; This function is called by:
 17574 ;;		_main
 17575 ;; This function uses a non-reentrant model
 17576 ;;
 17577                           
 17578                           	psect	text95
 17579  0140E6                     __ptext95:
 17580                           	opt stack 0
 17581  0140E6                     _Closest_Object:
 17582                           	opt stack 17
 17583                           
 17584                           ;main.c: 407: printf("%c", (char)35);
 17585                           
 17586                           ;incstack = 0
 17587  0140E6  0EFC               	movlw	low STR_1
 17588  0140E8  0100               	movlb	0	; () banked
 17589  0140EA  6F75               	movwf	printf@f& (0+255),b
 17590  0140EC  0EFF               	movlw	high STR_1
 17591  0140EE  6F76               	movwf	(printf@f+1)& (0+255),b
 17592  0140F0  0E00               	movlw	0
 17593  0140F2  6F78               	movwf	(?_printf+3)& (0+255),b
 17594  0140F4  0E23               	movlw	35
 17595  0140F6  6F77               	movwf	(?_printf+2)& (0+255),b
 17596  0140F8  EC4F  F096         	call	_printf	;wreg free
 17597                           
 17598                           ;main.c: 408: printf("Stepped 360 degrees");
 17599  0140FC  0E69               	movlw	low STR_12
 17600  0140FE  0100               	movlb	0	; () banked
 17601  014100  6F75               	movwf	printf@f& (0+255),b
 17602  014102  0EFF               	movlw	high STR_12
 17603  014104  6F76               	movwf	(printf@f+1)& (0+255),b
 17604  014106  EC4F  F096         	call	_printf	;wreg free
 17605                           
 17606                           ;main.c: 409: printf("\nThe Closes object (mm): %d", Low_Sensor);
 17607  01410A  0E0B               	movlw	low STR_13
 17608  01410C  0100               	movlb	0	; () banked
 17609  01410E  6F75               	movwf	printf@f& (0+255),b
 17610  014110  0EFF               	movlw	high STR_13
 17611  014112  6F76               	movwf	(printf@f+1)& (0+255),b
 17612  014114  C04B  F077         	movff	_Low_Sensor,?_printf+2
 17613  014118  C04C  F078         	movff	_Low_Sensor+1,?_printf+3
 17614  01411C  EC4F  F096         	call	_printf	;wreg free
 17615                           
 17616                           ;main.c: 410: printf("\nGoing back to: %d", Close_Pos);
 17617  014120  0EA3               	movlw	low STR_14
 17618  014122  0100               	movlb	0	; () banked
 17619  014124  6F75               	movwf	printf@f& (0+255),b
 17620  014126  0EFF               	movlw	high STR_14
 17621  014128  6F76               	movwf	(printf@f+1)& (0+255),b
 17622  01412A  C02B  F077         	movff	_Close_Pos,?_printf+2
 17623  01412E  C02C  F078         	movff	_Close_Pos+1,?_printf+3
 17624  014132  EC4F  F096         	call	_printf	;wreg free
 17625                           
 17626                           ;main.c: 411: Console_Render();
 17627  014136  EC73  F092         	call	_Console_Render	;wreg free
 17628                           
 17629                           ;main.c: 412: while (!CCW_Count <= 0) {
 17630  01413A  D020               	goto	l2229
 17631  01413C                     
 17632                           ;main.c: 413: CCW_Count--;
 17633  01413C  0101               	movlb	1	; () banked
 17634  01413E  072A               	decf	_CCW_Count& (0+255),f,b
 17635  014140  A0D8               	btfss	status,0,c
 17636  014142  072B               	decf	(_CCW_Count+1)& (0+255),f,b
 17637                           
 17638                           ; BSR set to: 1
 17639                           ;main.c: 414: printf("%c", (char)35);
 17640  014144  0EFC               	movlw	low STR_1
 17641  014146  0100               	movlb	0	; () banked
 17642  014148  6F75               	movwf	printf@f& (0+255),b
 17643  01414A  0EFF               	movlw	high STR_1
 17644  01414C  6F76               	movwf	(printf@f+1)& (0+255),b
 17645  01414E  0E00               	movlw	0
 17646  014150  6F78               	movwf	(?_printf+3)& (0+255),b
 17647  014152  0E23               	movlw	35
 17648  014154  6F77               	movwf	(?_printf+2)& (0+255),b
 17649  014156  EC4F  F096         	call	_printf	;wreg free
 17650                           
 17651                           ;main.c: 415: printf("\nSteps Travelled: %d", CCW_Count);
 17652  01415A  0E54               	movlw	low STR_29
 17653  01415C  0100               	movlb	0	; () banked
 17654  01415E  6F75               	movwf	printf@f& (0+255),b
 17655  014160  0EFF               	movlw	high STR_29
 17656  014162  6F76               	movwf	(printf@f+1)& (0+255),b
 17657  014164  C12A  F077         	movff	_CCW_Count,?_printf+2
 17658  014168  C12B  F078         	movff	_CCW_Count+1,?_printf+3
 17659  01416C  EC4F  F096         	call	_printf	;wreg free
 17660                           
 17661                           ;main.c: 416: Console_Render();
 17662  014170  EC73  F092         	call	_Console_Render	;wreg free
 17663                           
 17664                           ;main.c: 417: ADCAverage();
 17665  014174  ECE5  F088         	call	_ADCAverage	;wreg free
 17666                           
 17667                           ;main.c: 418: SteppingCCW();
 17668  014178  ECEC  F0AA         	call	_SteppingCCW	;wreg free
 17669  01417C                     l2229:
 17670  01417C  0101               	movlb	1	; () banked
 17671  01417E  512A               	movf	_CCW_Count& (0+255),w,b
 17672  014180  112B               	iorwf	(_CCW_Count+1)& (0+255),w,b
 17673  014182  A4D8               	btfss	status,2,c
 17674  014184  D7DB               	goto	l2230
 17675                           
 17676                           ; BSR set to: 1
 17677                           ;main.c: 419: }
 17678                           ;main.c: 420: RD5 = 0;
 17679  014186  9A83               	bcf	3971,5,c	;volatile
 17680                           
 17681                           ;main.c: 421: RD7 = 0;
 17682  014188  9E83               	bcf	3971,7,c	;volatile
 17683                           
 17684                           ;main.c: 422: RA2 = 0;
 17685  01418A  9480               	bcf	3968,2,c	;volatile
 17686                           
 17687                           ;main.c: 423: RA3 = 0;
 17688  01418C  9680               	bcf	3968,3,c	;volatile
 17689                           
 17690                           ; BSR set to: 1
 17691  01418E  0012               	return		;funcret
 17692  014190                     __end_of_Closest_Object:
 17693                           	opt stack 0
 17694                           tosu	equ	0xFFF
 17695                           tosh	equ	0xFFE
 17696                           tosl	equ	0xFFD
 17697                           pclath	equ	0xFFA
 17698                           tblptru	equ	0xFF8
 17699                           tblptrh	equ	0xFF7
 17700                           tblptrl	equ	0xFF6
 17701                           tablat	equ	0xFF5
 17702                           prodh	equ	0xFF4
 17703                           prodl	equ	0xFF3
 17704                           intcon	equ	0xFF2
 17705                           indf0	equ	0xFEF
 17706                           postinc0	equ	0xFEE
 17707                           fsr0h	equ	0xFEA
 17708                           fsr0l	equ	0xFE9
 17709                           wreg	equ	0xFE8
 17710                           indf1	equ	0xFE7
 17711                           postdec1	equ	0xFE5
 17712                           fsr1h	equ	0xFE2
 17713                           fsr1l	equ	0xFE1
 17714                           indf2	equ	0xFDF
 17715                           postinc2	equ	0xFDE
 17716                           postdec2	equ	0xFDD
 17717                           plusw2	equ	0xFDB
 17718                           fsr2h	equ	0xFDA
 17719                           fsr2l	equ	0xFD9
 17720                           status	equ	0xFD8
 17721                           
 17722 ;; *************** function _printf *****************
 17723 ;; Defined at:
 17724 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
 17725 ;; Parameters:    Size  Location     Type
 17726 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 17727 ;;		 -> STR_72(12), STR_71(19), STR_70(19), STR_69(19), 
 17728 ;;		 -> STR_68(19), STR_67(19), STR_66(19), STR_65(19), 
 17729 ;;		 -> STR_64(19), STR_63(16), STR_62(28), STR_61(3), 
 17730 ;;		 -> STR_60(19), STR_59(19), STR_58(19), STR_57(19), 
 17731 ;;		 -> STR_56(19), STR_55(19), STR_54(19), STR_53(19), 
 17732 ;;		 -> STR_52(11), STR_51(23), STR_50(3), STR_49(19), 
 17733 ;;		 -> STR_48(19), STR_47(19), STR_46(19), STR_45(19), 
 17734 ;;		 -> STR_44(19), STR_43(19), STR_42(19), STR_41(22), 
 17735 ;;		 -> STR_40(3), STR_39(19), STR_38(19), STR_37(19), 
 17736 ;;		 -> STR_36(19), STR_35(28), STR_34(28), STR_33(30), 
 17737 ;;		 -> STR_32(28), STR_31(15), STR_30(3), STR_29(21), 
 17738 ;;		 -> STR_28(3), STR_27(19), STR_26(28), STR_25(20), 
 17739 ;;		 -> STR_24(3), STR_23(19), STR_22(19), STR_21(19), 
 17740 ;;		 -> STR_20(19), STR_19(19), STR_18(19), STR_17(19), 
 17741 ;;		 -> STR_16(19), STR_15(3), STR_14(19), STR_13(28), 
 17742 ;;		 -> STR_12(20), STR_11(3), STR_10(19), STR_9(19), 
 17743 ;;		 -> STR_8(19), STR_7(19), STR_6(19), STR_5(19), 
 17744 ;;		 -> STR_4(19), STR_3(16), STR_2(19), STR_1(3), 
 17745 ;; Auto vars:     Size  Location     Type
 17746 ;;  tmpval          4    0        struct .
 17747 ;;  cp              3    0        PTR const unsigned char 
 17748 ;;  val             2   30[BANK0 ] unsigned int 
 17749 ;;  ap              2   28[BANK0 ] PTR void [1]
 17750 ;;		 -> ?_printf(2), 
 17751 ;;  len             2    0        unsigned int 
 17752 ;;  c               1   32[BANK0 ] char 
 17753 ;;  prec            1   27[BANK0 ] char 
 17754 ;;  flag            1   26[BANK0 ] unsigned char 
 17755 ;; Return value:  Size  Location     Type
 17756 ;;                  2   21[BANK0 ] int 
 17757 ;; Registers used:
 17758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17759 ;; Tracked objects:
 17760 ;;		On entry : 0/0
 17761 ;;		On exit  : 0/0
 17762 ;;		Unchanged: 0/0
 17763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17764 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17765 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17766 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17767 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17768 ;;Total ram usage:       12 bytes
 17769 ;; Hardware stack levels used:    1
 17770 ;; Hardware stack levels required when called:   12
 17771 ;; This function calls:
 17772 ;;		___lwdiv
 17773 ;;		___lwmod
 17774 ;;		_putch
 17775 ;; This function is called by:
 17776 ;;		_Sensor_Observe2
 17777 ;;		_Closest_Object2
 17778 ;;		_Sensor_Observe
 17779 ;;		_Closest_Object
 17780 ;;		_main
 17781 ;; This function uses a non-reentrant model
 17782 ;;
 17783                           
 17784                           	psect	text96
 17785  012C9E                     __ptext96:
 17786                           	opt stack 0
 17787  012C9E                     _printf:
 17788                           	opt stack 18
 17789                           
 17790                           ;doprnt.c: 466: va_list ap;
 17791                           ;doprnt.c: 499: signed char c;
 17792                           ;doprnt.c: 506: signed char prec;
 17793                           ;doprnt.c: 508: unsigned char flag;
 17794                           ;doprnt.c: 523: union {
 17795                           ;doprnt.c: 524: unsigned long vd;
 17796                           ;doprnt.c: 525: double integ;
 17797                           ;doprnt.c: 526: } tmpval;
 17798                           ;doprnt.c: 528: unsigned int val;
 17799                           ;doprnt.c: 529: unsigned len;
 17800                           ;doprnt.c: 530: const char * cp;
 17801                           ;doprnt.c: 533: *ap = __va_start();
 17802                           
 17803                           ; BSR set to: 1
 17804                           ;incstack = 0
 17805  012C9E  0E77               	movlw	low (?_printf+2)
 17806  012CA0  0100               	movlb	0	; () banked
 17807  012CA2  6F7C               	movwf	printf@ap& (0+255),b
 17808  012CA4  0E00               	movlw	high (?_printf+2)
 17809  012CA6  6F7D               	movwf	(printf@ap+1)& (0+255),b
 17810                           
 17811                           ;doprnt.c: 536: while(c = *f++) {
 17812  012CA8  D09E               	goto	u12270
 17813  012CAA                     
 17814                           ; BSR set to: 0
 17815                           ;doprnt.c: 538: if(c != '%')
 17816                           
 17817                           ; BSR set to: 0
 17818  012CAA  0E25               	movlw	37
 17819  012CAC  1980               	xorwf	printf@c& (0+255),w,b
 17820  012CAE  B4D8               	btfsc	status,2,c
 17821  012CB0  D004               	goto	l2289
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;doprnt.c: 540: {
 17825                           ;doprnt.c: 541: (putch(c) );
 17826  012CB2  5180               	movf	printf@c& (0+255),w,b
 17827  012CB4  EC1C  F0B0         	call	_putch
 17828                           
 17829                           ;doprnt.c: 542: continue;
 17830  012CB8  D096               	goto	u12270
 17831  012CBA                     l2289:
 17832                           
 17833                           ;doprnt.c: 543: }
 17834                           ;doprnt.c: 548: flag = 0;
 17835  012CBA  0E00               	movlw	0
 17836  012CBC  0100               	movlb	0	; () banked
 17837  012CBE  6F7A               	movwf	printf@flag& (0+255),b
 17838                           
 17839                           ;doprnt.c: 635: switch(c = *f++) {
 17840  012CC0  D00E               	goto	l2290
 17841  012CC2                     
 17842                           ; BSR set to: 0
 17843                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 17844                           
 17845                           ; BSR set to: 0
 17846  012CC2  C07C  FFD9         	movff	printf@ap,fsr2l
 17847  012CC6  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17848  012CCA  50DF               	movf	indf2,w,c
 17849  012CCC  6F80               	movwf	printf@c& (0+255),b
 17850                           
 17851                           ; BSR set to: 0
 17852  012CCE  0E02               	movlw	2
 17853  012CD0  277C               	addwf	printf@ap& (0+255),f,b
 17854  012CD2  0E00               	movlw	0
 17855  012CD4  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17856  012CD6                     
 17857                           ; BSR set to: 0
 17858                           ;doprnt.c: 809: (putch(c) );
 17859                           
 17860                           ; BSR set to: 0
 17861  012CD6  5180               	movf	printf@c& (0+255),w,b
 17862  012CD8  EC1C  F0B0         	call	_putch
 17863                           
 17864                           ;doprnt.c: 810: continue;
 17865  012CDC  D084               	goto	u12270
 17866  012CDE                     l2290:
 17867  012CDE  C075  FFF6         	movff	printf@f,tblptrl
 17868  012CE2  C076  FFF7         	movff	printf@f+1,tblptrh
 17869  012CE6  0100               	movlb	0	; () banked
 17870  012CE8  4B75               	infsnz	printf@f& (0+255),f,b
 17871  012CEA  2B76               	incf	(printf@f+1)& (0+255),f,b
 17872  012CEC                     	if	0	;tblptru may be non-zero
 17873  012CEC                     	endif
 17874  012CEC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 17875  012CEC  0E00               	movlw	low (__mediumconst shr (0+16))
 17876  012CEE  6EF8               	movwf	tblptru,c
 17877  012CF0                     	endif
 17878  012CF0  0008               	tblrd		*
 17879  012CF2  CFF5 F080          	movff	tablat,printf@c
 17880  012CF6  5180               	movf	printf@c& (0+255),w,b
 17881                           
 17882                           ; Switch size 1, requested type "space"
 17883                           ; Number of cases is 4, Range of values is 0 to 105
 17884                           ; switch strategies available:
 17885                           ; Name         Instructions Cycles
 17886                           ; simple_byte           13     7 (average)
 17887                           ;	Chosen strategy is simple_byte
 17888  012CF8  0A00               	xorlw	0	; case 0
 17889  012CFA  B4D8               	btfsc	status,2,c
 17890  012CFC  0012               	return	
 17891  012CFE  0A63               	xorlw	99	; case 99
 17892  012D00  B4D8               	btfsc	status,2,c
 17893  012D02  D7DF               	goto	l2296
 17894  012D04  0A07               	xorlw	7	; case 100
 17895  012D06  B4D8               	btfsc	status,2,c
 17896  012D08  D003               	goto	l2295
 17897  012D0A  0A0D               	xorlw	13	; case 105
 17898  012D0C  A4D8               	btfss	status,2,c
 17899  012D0E  D7E3               	goto	l2297
 17900  012D10                     l2295:
 17901                           
 17902                           ;doprnt.c: 1253: {
 17903                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 17904                           
 17905                           ; BSR set to: 0
 17906  012D10  C07C  FFD9         	movff	printf@ap,fsr2l
 17907  012D14  C07D  FFDA         	movff	printf@ap+1,fsr2h
 17908  012D18  CFDE F07E          	movff	postinc2,printf@val
 17909  012D1C  CFDD F07F          	movff	postdec2,printf@val+1
 17910  012D20  0E02               	movlw	2
 17911  012D22  0100               	movlb	0	; () banked
 17912  012D24  277C               	addwf	printf@ap& (0+255),f,b
 17913  012D26  0E00               	movlw	0
 17914  012D28  237D               	addwfc	(printf@ap+1)& (0+255),f,b
 17915                           
 17916                           ; BSR set to: 0
 17917                           ;doprnt.c: 1261: if((int)val < 0) {
 17918  012D2A  AF7F               	btfss	(printf@val+1)& (0+255),7,b
 17919  012D2C  D006               	goto	l2298
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;doprnt.c: 1262: flag |= 0x03;
 17923  012D2E  0E03               	movlw	3
 17924  012D30  137A               	iorwf	printf@flag& (0+255),f,b
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;doprnt.c: 1263: val = -val;
 17928  012D32  6D7E               	negf	printf@val& (0+255),b
 17929  012D34  1F7F               	comf	(printf@val+1)& (0+255),f,b
 17930  012D36  B0D8               	btfsc	status,0,c
 17931  012D38  2B7F               	incf	(printf@val+1)& (0+255),f,b
 17932  012D3A                     l2298:
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;doprnt.c: 1264: }
 17936                           ;doprnt.c: 1266: }
 17937                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 17938                           
 17939                           ; BSR set to: 0
 17940  012D3A  0E01               	movlw	1
 17941  012D3C  6F80               	movwf	printf@c& (0+255),b
 17942  012D3E                     l15054:
 17943                           
 17944                           ; BSR set to: 0
 17945  012D3E  0E05               	movlw	5
 17946  012D40  1980               	xorwf	printf@c& (0+255),w,b
 17947  012D42  B4D8               	btfsc	status,2,c
 17948  012D44  D015               	goto	u12250
 17949                           
 17950                           ; BSR set to: 0
 17951                           ;doprnt.c: 1306: if(val < dpowers[c])
 17952                           
 17953                           ; BSR set to: 0
 17954                           
 17955                           ; BSR set to: 0
 17956  012D46  5180               	movf	printf@c& (0+255),w,b
 17957  012D48  0D02               	mullw	2
 17958  012D4A  0E29               	movlw	low _dpowers
 17959  012D4C  24F3               	addwf	prodl,w,c
 17960  012D4E  6EF6               	movwf	tblptrl,c
 17961  012D50  0EFC               	movlw	high _dpowers
 17962  012D52  20F4               	addwfc	prodh,w,c
 17963  012D54  6EF7               	movwf	tblptrh,c
 17964  012D56                     	if	1	;There are 3 active tblptr bytes
 17965  012D56  6AF8               	clrf	tblptru,c
 17966  012D58  0E00               	movlw	low (__mediumconst shr (0+16))
 17967  012D5A  22F8               	addwfc	tblptru,f,c
 17968  012D5C                     	endif
 17969  012D5C  0009               	tblrd		*+
 17970  012D5E  50F5               	movf	tablat,w,c
 17971  012D60  5D7E               	subwf	printf@val& (0+255),w,b
 17972  012D62  0009               	tblrd		*+
 17973  012D64  50F5               	movf	tablat,w,c
 17974  012D66  597F               	subwfb	(printf@val+1)& (0+255),w,b
 17975  012D68  A0D8               	btfss	status,0,c
 17976  012D6A  D002               	goto	u12250
 17977                           
 17978                           ; BSR set to: 0
 17979                           
 17980                           ; BSR set to: 0
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;doprnt.c: 1307: break;
 17984  012D6C  2B80               	incf	printf@c& (0+255),f,b
 17985  012D6E  D7E7               	goto	l15054
 17986  012D70                     u12250:
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;doprnt.c: 1422: {
 17990                           ;doprnt.c: 1438: if(flag & 0x03)
 17991                           
 17992                           ; BSR set to: 0
 17993  012D70  C07A  F079         	movff	printf@flag,??_printf
 17994  012D74  0E03               	movlw	3
 17995  012D76  1779               	andwf	??_printf& (0+255),f,b
 17996  012D78  B4D8               	btfsc	status,2,c
 17997  012D7A  D003               	goto	l2302
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;doprnt.c: 1439: (putch('-') );
 18001  012D7C  0E2D               	movlw	45
 18002  012D7E  EC1C  F0B0         	call	_putch
 18003  012D82                     l2302:
 18004                           
 18005                           ;doprnt.c: 1469: }
 18006                           ;doprnt.c: 1472: prec = c;
 18007  012D82  C080  F07B         	movff	printf@c,printf@prec
 18008                           
 18009                           ;doprnt.c: 1474: while(prec--) {
 18010  012D86  D02A               	goto	l2303
 18011  012D88                     
 18012                           ;doprnt.c: 1478: {
 18013                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 18014  012D88  0100               	movlb	0	; () banked
 18015  012D8A  517B               	movf	printf@prec& (0+255),w,b
 18016  012D8C  0D02               	mullw	2
 18017  012D8E  0E29               	movlw	low _dpowers
 18018  012D90  24F3               	addwf	prodl,w,c
 18019  012D92  6EF6               	movwf	tblptrl,c
 18020  012D94  0EFC               	movlw	high _dpowers
 18021  012D96  20F4               	addwfc	prodh,w,c
 18022  012D98  6EF7               	movwf	tblptrh,c
 18023  012D9A                     	if	1	;There are 3 active tblptr bytes
 18024  012D9A  6AF8               	clrf	tblptru,c
 18025  012D9C  0E00               	movlw	low (__mediumconst shr (0+16))
 18026  012D9E  22F8               	addwfc	tblptru,f,c
 18027  012DA0                     	endif
 18028  012DA0  0009               	tblrd		*+
 18029  012DA2  CFF5 F062          	movff	tablat,___lwdiv@divisor
 18030  012DA6  000A               	tblrd		*-
 18031  012DA8  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 18032  012DAC  C07E  F060         	movff	printf@val,___lwdiv@dividend
 18033  012DB0  C07F  F061         	movff	printf@val+1,___lwdiv@dividend+1
 18034  012DB4  EC8A  F0A9         	call	___lwdiv	;wreg free
 18035  012DB8  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 18036  012DBC  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 18037  012DC0  0E00               	movlw	0
 18038  012DC2  0100               	movlb	0	; () banked
 18039  012DC4  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 18040  012DC6  0E0A               	movlw	10
 18041  012DC8  6F69               	movwf	___lwmod@divisor& (0+255),b
 18042  012DCA  ECA0  F0AB         	call	___lwmod	;wreg free
 18043  012DCE  0100               	movlb	0	; () banked
 18044  012DD0  5167               	movf	?___lwmod& (0+255),w,b
 18045  012DD2  0F30               	addlw	48
 18046  012DD4  6F80               	movwf	printf@c& (0+255),b
 18047                           
 18048                           ; BSR set to: 0
 18049                           ;doprnt.c: 1523: }
 18050                           ;doprnt.c: 1524: (putch(c) );
 18051  012DD6  5180               	movf	printf@c& (0+255),w,b
 18052  012DD8  EC1C  F0B0         	call	_putch
 18053  012DDC                     l2303:
 18054  012DDC  0100               	movlb	0	; () banked
 18055  012DDE  077B               	decf	printf@prec& (0+255),f,b
 18056  012DE0  297B               	incf	printf@prec& (0+255),w,b
 18057  012DE2  A4D8               	btfss	status,2,c
 18058  012DE4  D7D1               	goto	l2304
 18059  012DE6                     u12270:
 18060                           
 18061                           ; BSR set to: 0
 18062                           
 18063                           ; BSR set to: 0
 18064  012DE6  C075  FFF6         	movff	printf@f,tblptrl
 18065  012DEA  C076  FFF7         	movff	printf@f+1,tblptrh
 18066  012DEE  0100               	movlb	0	; () banked
 18067  012DF0  4B75               	infsnz	printf@f& (0+255),f,b
 18068  012DF2  2B76               	incf	(printf@f+1)& (0+255),f,b
 18069  012DF4                     	if	0	;tblptru may be non-zero
 18070  012DF4                     	endif
 18071  012DF4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 18072  012DF4  0E00               	movlw	low (__mediumconst shr (0+16))
 18073  012DF6  6EF8               	movwf	tblptru,c
 18074  012DF8                     	endif
 18075  012DF8  0008               	tblrd		*
 18076  012DFA  CFF5 F080          	movff	tablat,printf@c
 18077  012DFE  5180               	movf	printf@c& (0+255),w,b
 18078  012E00  B4D8               	btfsc	status,2,c
 18079  012E02  0012               	return	
 18080  012E04  D752               	goto	l2288
 18081  012E06                     __end_of_printf:
 18082                           	opt stack 0
 18083                           tosu	equ	0xFFF
 18084                           tosh	equ	0xFFE
 18085                           tosl	equ	0xFFD
 18086                           pclath	equ	0xFFA
 18087                           tblptru	equ	0xFF8
 18088                           tblptrh	equ	0xFF7
 18089                           tblptrl	equ	0xFF6
 18090                           tablat	equ	0xFF5
 18091                           prodh	equ	0xFF4
 18092                           prodl	equ	0xFF3
 18093                           intcon	equ	0xFF2
 18094                           indf0	equ	0xFEF
 18095                           postinc0	equ	0xFEE
 18096                           fsr0h	equ	0xFEA
 18097                           fsr0l	equ	0xFE9
 18098                           wreg	equ	0xFE8
 18099                           indf1	equ	0xFE7
 18100                           postdec1	equ	0xFE5
 18101                           fsr1h	equ	0xFE2
 18102                           fsr1l	equ	0xFE1
 18103                           indf2	equ	0xFDF
 18104                           postinc2	equ	0xFDE
 18105                           postdec2	equ	0xFDD
 18106                           plusw2	equ	0xFDB
 18107                           fsr2h	equ	0xFDA
 18108                           fsr2l	equ	0xFD9
 18109                           status	equ	0xFD8
 18110                           
 18111 ;; *************** function _putch *****************
 18112 ;; Defined at:
 18113 ;;		line 454 in file "Library/Console.c"
 18114 ;; Parameters:    Size  Location     Type
 18115 ;;  c               1    wreg     unsigned char 
 18116 ;; Auto vars:     Size  Location     Type
 18117 ;;  c               1   20[BANK0 ] unsigned char 
 18118 ;; Return value:  Size  Location     Type
 18119 ;;                  1    wreg      void 
 18120 ;; Registers used:
 18121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18122 ;; Tracked objects:
 18123 ;;		On entry : 0/0
 18124 ;;		On exit  : 0/0
 18125 ;;		Unchanged: 0/0
 18126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18130 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18131 ;;Total ram usage:        1 bytes
 18132 ;; Hardware stack levels used:    1
 18133 ;; Hardware stack levels required when called:   11
 18134 ;; This function calls:
 18135 ;;		_Console_PrintChar
 18136 ;; This function is called by:
 18137 ;;		_printf
 18138 ;; This function uses a non-reentrant model
 18139 ;;
 18140                           
 18141                           	psect	text97
 18142  016038                     __ptext97:
 18143                           	opt stack 0
 18144  016038                     _putch:
 18145                           	opt stack 18
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;incstack = 0
 18149                           ;putch@c stored from wreg
 18150  016038  0100               	movlb	0	; () banked
 18151  01603A  6F74               	movwf	putch@c& (0+255),b
 18152                           
 18153                           ;Console.c: 456: Console_PrintChar(c);
 18154  01603C  0100               	movlb	0	; () banked
 18155  01603E  5174               	movf	putch@c& (0+255),w,b
 18156  016040  ECAD  F097         	call	_Console_PrintChar
 18157  016044  0012               	return		;funcret
 18158  016046                     __end_of_putch:
 18159                           	opt stack 0
 18160                           tosu	equ	0xFFF
 18161                           tosh	equ	0xFFE
 18162                           tosl	equ	0xFFD
 18163                           pclath	equ	0xFFA
 18164                           tblptru	equ	0xFF8
 18165                           tblptrh	equ	0xFF7
 18166                           tblptrl	equ	0xFF6
 18167                           tablat	equ	0xFF5
 18168                           prodh	equ	0xFF4
 18169                           prodl	equ	0xFF3
 18170                           intcon	equ	0xFF2
 18171                           indf0	equ	0xFEF
 18172                           postinc0	equ	0xFEE
 18173                           fsr0h	equ	0xFEA
 18174                           fsr0l	equ	0xFE9
 18175                           wreg	equ	0xFE8
 18176                           indf1	equ	0xFE7
 18177                           postdec1	equ	0xFE5
 18178                           fsr1h	equ	0xFE2
 18179                           fsr1l	equ	0xFE1
 18180                           indf2	equ	0xFDF
 18181                           postinc2	equ	0xFDE
 18182                           postdec2	equ	0xFDD
 18183                           plusw2	equ	0xFDB
 18184                           fsr2h	equ	0xFDA
 18185                           fsr2l	equ	0xFD9
 18186                           status	equ	0xFD8
 18187                           
 18188 ;; *************** function _Console_PrintChar *****************
 18189 ;; Defined at:
 18190 ;;		line 322 in file "Library/Console.c"
 18191 ;; Parameters:    Size  Location     Type
 18192 ;;  pInput          1    wreg     unsigned char 
 18193 ;; Auto vars:     Size  Location     Type
 18194 ;;  pInput          1   19[BANK0 ] unsigned char 
 18195 ;; Return value:  Size  Location     Type
 18196 ;;                  1    wreg      void 
 18197 ;; Registers used:
 18198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18199 ;; Tracked objects:
 18200 ;;		On entry : 0/0
 18201 ;;		On exit  : 0/0
 18202 ;;		Unchanged: 0/0
 18203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18206 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18207 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18208 ;;Total ram usage:        4 bytes
 18209 ;; Hardware stack levels used:    1
 18210 ;; Hardware stack levels required when called:   10
 18211 ;; This function calls:
 18212 ;;		_Console_Backspace
 18213 ;;		_Console_FormFeed
 18214 ;;		_Console_IncrementCursor
 18215 ;;		_Console_NewLine
 18216 ;;		_Console_ResetCursor
 18217 ;;		_Console_Tab
 18218 ;; This function is called by:
 18219 ;;		_putch
 18220 ;;		_Console_PrintString
 18221 ;; This function uses a non-reentrant model
 18222 ;;
 18223                           
 18224                           	psect	text98
 18225  012F5A                     __ptext98:
 18226                           	opt stack 0
 18227  012F5A                     _Console_PrintChar:
 18228                           	opt stack 18
 18229                           
 18230                           ;incstack = 0
 18231                           ;Console_PrintChar@pInput stored from wreg
 18232  012F5A  0100               	movlb	0	; () banked
 18233  012F5C  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
 18234                           
 18235                           ;Console.c: 324: switch(pInput)
 18236  012F5E  D08A               	goto	l1036
 18237  012F60                     
 18238                           ;Console.c: 327: case '\n':
 18239                           ;Console.c: 328: Console_NewLine();
 18240  012F60  EC0B  F0A5         	call	_Console_NewLine	;wreg free
 18241                           
 18242                           ;Console.c: 329: return;
 18243  012F64  0012               	return	
 18244  012F66                     
 18245                           ;Console.c: 331: Console_Backspace();
 18246  012F66  EC2D  F0AA         	call	_Console_Backspace	;wreg free
 18247                           
 18248                           ;Console.c: 332: return;
 18249  012F6A  0012               	return	
 18250  012F6C                     
 18251                           ;Console.c: 334: Console_FormFeed();
 18252  012F6C  ECE8  F0A6         	call	_Console_FormFeed	;wreg free
 18253                           
 18254                           ;Console.c: 335: return;
 18255  012F70  0012               	return	
 18256  012F72                     
 18257                           ;Console.c: 337: Console_Tab();
 18258  012F72  EC5A  F0A2         	call	_Console_Tab	;wreg free
 18259                           
 18260                           ;Console.c: 338: return;
 18261  012F76  0012               	return	
 18262  012F78                     
 18263                           ;Console.c: 340: Console_IncrementCursor();
 18264  012F78  EC0C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18265                           
 18266                           ;Console.c: 341: return;
 18267  012F7C  0012               	return	
 18268  012F7E                     
 18269                           ;Console.c: 343: Console_ResetCursor();
 18270  012F7E  EC09  F0AF         	call	_Console_ResetCursor	;wreg free
 18271                           
 18272                           ;Console.c: 344: return;
 18273  012F82  0012               	return	
 18274  012F84                     
 18275                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18276                           
 18277                           ;Console.c: 349: default:
 18278  012F84  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18279  012F88  0E7F               	movlw	127
 18280  012F8A  0100               	movlb	0	; () banked
 18281  012F8C  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18282  012F8E  51F3               	movf	_lBufferY& (0+255),w,b
 18283  012F90  0D14               	mullw	20
 18284  012F92  0E18               	movlw	low _lBuffer
 18285  012F94  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18286  012F96  0E03               	movlw	high _lBuffer
 18287  012F98  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18288  012F9A  50F3               	movf	prodl,w,c
 18289  012F9C  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18290  012F9E  50F4               	movf	prodh,w,c
 18291  012FA0  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18292  012FA2  51F4               	movf	_lBufferX& (0+255),w,b
 18293  012FA4  0D01               	mullw	1
 18294  012FA6  50F3               	movf	prodl,w,c
 18295  012FA8  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18296  012FAA  6ED9               	movwf	fsr2l,c
 18297  012FAC  50F4               	movf	prodh,w,c
 18298  012FAE  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18299  012FB0  6EDA               	movwf	fsr2h,c
 18300  012FB2  50DF               	movf	indf2,w,c
 18301  012FB4  0B7F               	andlw	127
 18302  012FB6  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18303  012FB8  B4D8               	btfsc	status,2,c
 18304  012FBA  D023               	goto	l1047
 18305                           
 18306                           ; BSR set to: 0
 18307                           ;Console.c: 351: {
 18308                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18309  012FBC  0E01               	movlw	1
 18310  012FBE  6E4E               	movwf	_change,c
 18311                           
 18312                           ; BSR set to: 0
 18313  012FC0  51F3               	movf	_lBufferY& (0+255),w,b
 18314  012FC2  0D14               	mullw	20
 18315  012FC4  0E18               	movlw	low _lBuffer
 18316  012FC6  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18317  012FC8  0E03               	movlw	high _lBuffer
 18318  012FCA  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18319  012FCC  50F3               	movf	prodl,w,c
 18320  012FCE  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18321  012FD0  50F4               	movf	prodh,w,c
 18322  012FD2  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18323  012FD4  51F4               	movf	_lBufferX& (0+255),w,b
 18324  012FD6  0D01               	mullw	1
 18325  012FD8  50F3               	movf	prodl,w,c
 18326  012FDA  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18327  012FDC  6ED9               	movwf	fsr2l,c
 18328  012FDE  50F4               	movf	prodh,w,c
 18329  012FE0  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18330  012FE2  6EDA               	movwf	fsr2h,c
 18331  012FE4  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18332  012FE6  0980               	iorlw	128
 18333  012FE8  6EDF               	movwf	indf2,c
 18334                           
 18335                           ; BSR set to: 0
 18336                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 18337  012FEA  51F3               	movf	_lBufferY& (0+255),w,b
 18338  012FEC  0D02               	mullw	2
 18339  012FEE  0E64               	movlw	low _lCBuffer
 18340  012FF0  24F3               	addwf	prodl,w,c
 18341  012FF2  6ED9               	movwf	fsr2l,c
 18342  012FF4  0E02               	movlw	high _lCBuffer
 18343  012FF6  20F4               	addwfc	prodh,w,c
 18344  012FF8  6EDA               	movwf	fsr2h,c
 18345  012FFA  C1FB  FFDE         	movff	_gForecolour,postinc2
 18346  012FFE  C1FC  FFDD         	movff	_gForecolour+1,postdec2
 18347  013002                     l1047:
 18348                           
 18349                           ; BSR set to: 0
 18350                           ;Console.c: 354: }
 18351                           ;Console.c: 368: if(Console_IncrementCursor())
 18352                           
 18353                           ; BSR set to: 0
 18354  013002  EC0C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18355  013006  0900               	iorlw	0
 18356  013008  B4D8               	btfsc	status,2,c
 18357  01300A  0012               	return	
 18358                           
 18359                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 18360  01300C  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 18361  013010  0E7F               	movlw	127
 18362  013012  0100               	movlb	0	; () banked
 18363  013014  1770               	andwf	??_Console_PrintChar& (0+255),f,b
 18364  013016  51F3               	movf	_lBufferY& (0+255),w,b
 18365  013018  0D14               	mullw	20
 18366  01301A  0E18               	movlw	low _lBuffer
 18367  01301C  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18368  01301E  0E03               	movlw	high _lBuffer
 18369  013020  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
 18370  013022  50F3               	movf	prodl,w,c
 18371  013024  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 18372  013026  50F4               	movf	prodh,w,c
 18373  013028  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 18374  01302A  51F4               	movf	_lBufferX& (0+255),w,b
 18375  01302C  0D01               	mullw	1
 18376  01302E  50F3               	movf	prodl,w,c
 18377  013030  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 18378  013032  6ED9               	movwf	fsr2l,c
 18379  013034  50F4               	movf	prodh,w,c
 18380  013036  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 18381  013038  6EDA               	movwf	fsr2h,c
 18382  01303A  50DF               	movf	indf2,w,c
 18383  01303C  0B7F               	andlw	127
 18384  01303E  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
 18385  013040  B4D8               	btfsc	status,2,c
 18386  013042  0012               	return	
 18387                           
 18388                           ; BSR set to: 0
 18389                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 18390  013044  0E01               	movlw	1
 18391  013046  6E4E               	movwf	_change,c
 18392                           
 18393                           ; BSR set to: 0
 18394  013048  51F3               	movf	_lBufferY& (0+255),w,b
 18395  01304A  0D14               	mullw	20
 18396  01304C  0E18               	movlw	low _lBuffer
 18397  01304E  6F70               	movwf	??_Console_PrintChar& (0+255),b
 18398  013050  0E03               	movlw	high _lBuffer
 18399  013052  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
 18400  013054  50F3               	movf	prodl,w,c
 18401  013056  2770               	addwf	??_Console_PrintChar& (0+255),f,b
 18402  013058  50F4               	movf	prodh,w,c
 18403  01305A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 18404  01305C  51F4               	movf	_lBufferX& (0+255),w,b
 18405  01305E  0D01               	mullw	1
 18406  013060  50F3               	movf	prodl,w,c
 18407  013062  2570               	addwf	??_Console_PrintChar& (0+255),w,b
 18408  013064  6ED9               	movwf	fsr2l,c
 18409  013066  50F4               	movf	prodh,w,c
 18410  013068  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 18411  01306A  6EDA               	movwf	fsr2h,c
 18412  01306C  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18413  01306E  0980               	iorlw	128
 18414  013070  6EDF               	movwf	indf2,c
 18415                           
 18416                           ; BSR set to: 0
 18417                           ;Console.c: 372: };
 18418                           
 18419                           ; BSR set to: 0
 18420                           ;Console.c: 371: return;
 18421                           
 18422                           ; BSR set to: 0
 18423                           
 18424                           ; BSR set to: 0
 18425  013072  0012               	return	
 18426  013074                     l1036:
 18427                           
 18428                           ; BSR set to: 0
 18429  013074  0100               	movlb	0	; () banked
 18430  013076  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
 18431                           
 18432                           ; Switch size 1, requested type "space"
 18433                           ; Number of cases is 8, Range of values is 7 to 35
 18434                           ; switch strategies available:
 18435                           ; Name         Instructions Cycles
 18436                           ; simple_byte           25    13 (average)
 18437                           ;	Chosen strategy is simple_byte
 18438  013078  0A07               	xorlw	7	; case 7
 18439  01307A  B4D8               	btfsc	status,2,c
 18440  01307C  D77D               	goto	l1043
 18441  01307E  0A0F               	xorlw	15	; case 8
 18442  013080  B4D8               	btfsc	status,2,c
 18443  013082  D771               	goto	l1040
 18444  013084  0A01               	xorlw	1	; case 9
 18445  013086  B4D8               	btfsc	status,2,c
 18446  013088  D774               	goto	l1042
 18447  01308A  0A03               	xorlw	3	; case 10
 18448  01308C  B4D8               	btfsc	status,2,c
 18449  01308E  D768               	goto	l1037
 18450  013090  0A06               	xorlw	6	; case 12
 18451  013092  B4D8               	btfsc	status,2,c
 18452  013094  D76B               	goto	l1041
 18453  013096  0A01               	xorlw	1	; case 13
 18454  013098  B4D8               	btfsc	status,2,c
 18455  01309A  D762               	goto	l1037
 18456  01309C  0A2D               	xorlw	45	; case 32
 18457  01309E  B4D8               	btfsc	status,2,c
 18458  0130A0  D771               	goto	l1045
 18459  0130A2  0A03               	xorlw	3	; case 35
 18460  0130A4  B4D8               	btfsc	status,2,c
 18461  0130A6  D76B               	goto	l1044
 18462  0130A8  D76D               	goto	l1045
 18463  0130AA                     __end_of_Console_PrintChar:
 18464                           	opt stack 0
 18465                           tosu	equ	0xFFF
 18466                           tosh	equ	0xFFE
 18467                           tosl	equ	0xFFD
 18468                           pclath	equ	0xFFA
 18469                           tblptru	equ	0xFF8
 18470                           tblptrh	equ	0xFF7
 18471                           tblptrl	equ	0xFF6
 18472                           tablat	equ	0xFF5
 18473                           prodh	equ	0xFF4
 18474                           prodl	equ	0xFF3
 18475                           intcon	equ	0xFF2
 18476                           indf0	equ	0xFEF
 18477                           postinc0	equ	0xFEE
 18478                           fsr0h	equ	0xFEA
 18479                           fsr0l	equ	0xFE9
 18480                           wreg	equ	0xFE8
 18481                           indf1	equ	0xFE7
 18482                           postdec1	equ	0xFE5
 18483                           fsr1h	equ	0xFE2
 18484                           fsr1l	equ	0xFE1
 18485                           indf2	equ	0xFDF
 18486                           postinc2	equ	0xFDE
 18487                           postdec2	equ	0xFDD
 18488                           plusw2	equ	0xFDB
 18489                           fsr2h	equ	0xFDA
 18490                           fsr2l	equ	0xFD9
 18491                           status	equ	0xFD8
 18492                           
 18493 ;; *************** function _Console_Tab *****************
 18494 ;; Defined at:
 18495 ;;		line 260 in file "Library/Console.c"
 18496 ;; Parameters:    Size  Location     Type
 18497 ;;		None
 18498 ;; Auto vars:     Size  Location     Type
 18499 ;;  c               1   15[BANK0 ] unsigned char 
 18500 ;;  i               1   14[BANK0 ] unsigned char 
 18501 ;;  t               1   13[BANK0 ] unsigned char 
 18502 ;; Return value:  Size  Location     Type
 18503 ;;                  1    wreg      void 
 18504 ;; Registers used:
 18505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18512 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18513 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18514 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18515 ;;Total ram usage:        8 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    9
 18518 ;; This function calls:
 18519 ;;		_Console_ClearCursor
 18520 ;;		_Console_IncrementCursor
 18521 ;;		___awdiv
 18522 ;; This function is called by:
 18523 ;;		_Console_PrintChar
 18524 ;; This function uses a non-reentrant model
 18525 ;;
 18526                           
 18527                           	psect	text99
 18528  0144B4                     __ptext99:
 18529                           	opt stack 0
 18530  0144B4                     _Console_Tab:
 18531                           	opt stack 18
 18532                           
 18533                           ;Console.c: 262: UINT8 i = 0;
 18534                           
 18535                           ;incstack = 0
 18536  0144B4  0E00               	movlw	0
 18537  0144B6  0100               	movlb	0	; () banked
 18538  0144B8  6F6E               	movwf	Console_Tab@i& (0+255),b
 18539                           
 18540                           ; BSR set to: 0
 18541                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 18542  0144BA  0EFA               	movlw	250
 18543  0144BC  2447               	addwf	_gCursor,w,c
 18544  0144BE  6F60               	movwf	___awdiv@dividend& (0+255),b
 18545  0144C0  0EFF               	movlw	255
 18546  0144C2  2048               	addwfc	_gCursor+1,w,c
 18547  0144C4  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
 18548  0144C6  0E00               	movlw	0
 18549  0144C8  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18550  0144CA  0E06               	movlw	6
 18551  0144CC  6F62               	movwf	___awdiv@divisor& (0+255),b
 18552  0144CE  EC47  F0A4         	call	___awdiv	;wreg free
 18553  0144D2  0100               	movlb	0	; () banked
 18554  0144D4  5160               	movf	?___awdiv& (0+255),w,b
 18555  0144D6  6F6F               	movwf	Console_Tab@c& (0+255),b
 18556                           
 18557                           ; BSR set to: 0
 18558                           ;Console.c: 264: UINT8 t = c/4;
 18559  0144D8  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
 18560  0144DC  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
 18561  0144DE  0E00               	movlw	0
 18562  0144E0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
 18563  0144E2  0E04               	movlw	4
 18564  0144E4  6F62               	movwf	___awdiv@divisor& (0+255),b
 18565  0144E6  EC47  F0A4         	call	___awdiv	;wreg free
 18566  0144EA  0100               	movlb	0	; () banked
 18567  0144EC  5160               	movf	?___awdiv& (0+255),w,b
 18568  0144EE  6F6D               	movwf	Console_Tab@t& (0+255),b
 18569                           
 18570                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 18571  0144F0  0E00               	movlw	0
 18572  0144F2  6F6E               	movwf	Console_Tab@i& (0+255),b
 18573  0144F4  D006               	goto	l1009
 18574  0144F6                     
 18575                           ; BSR set to: 0
 18576                           ;Console.c: 266: {
 18577                           ;Console.c: 267: Console_ClearCursor();
 18578                           
 18579                           ; BSR set to: 0
 18580  0144F6  ECAD  F0AD         	call	_Console_ClearCursor	;wreg free
 18581                           
 18582                           ;Console.c: 268: Console_IncrementCursor();
 18583  0144FA  EC0C  F0A9         	call	_Console_IncrementCursor	;wreg free
 18584  0144FE  0100               	movlb	0	; () banked
 18585  014500  2B6E               	incf	Console_Tab@i& (0+255),f,b
 18586  014502                     l1009:
 18587                           
 18588                           ; BSR set to: 0
 18589                           
 18590                           ; BSR set to: 0
 18591  014502  516D               	movf	Console_Tab@t& (0+255),w,b
 18592  014504  0D04               	mullw	4
 18593  014506  1EF3               	comf	prodl,f,c
 18594  014508  1EF4               	comf	prodh,f,c
 18595  01450A  4AF3               	infsnz	prodl,f,c
 18596  01450C  2AF4               	incf	prodh,f,c
 18597  01450E  516F               	movf	Console_Tab@c& (0+255),w,b
 18598  014510  6F68               	movwf	??_Console_Tab& (0+255),b
 18599  014512  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
 18600  014514  50F3               	movf	prodl,w,c
 18601  014516  2768               	addwf	??_Console_Tab& (0+255),f,b
 18602  014518  50F4               	movf	prodh,w,c
 18603  01451A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18604  01451C  1F68               	comf	??_Console_Tab& (0+255),f,b
 18605  01451E  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
 18606  014520  4B68               	infsnz	??_Console_Tab& (0+255),f,b
 18607  014522  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
 18608  014524  0E04               	movlw	4
 18609  014526  2768               	addwf	??_Console_Tab& (0+255),f,b
 18610  014528  0E00               	movlw	0
 18611  01452A  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 18612  01452C  516E               	movf	Console_Tab@i& (0+255),w,b
 18613  01452E  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
 18614  014530  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
 18615  014532  5168               	movf	??_Console_Tab& (0+255),w,b
 18616  014534  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
 18617  014536  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
 18618  014538  0A80               	xorlw	128
 18619  01453A  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
 18620  01453C  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
 18621  01453E  0A80               	xorlw	128
 18622  014540  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 18623  014542  B0D8               	btfsc	status,0,c
 18624  014544  0012               	return	
 18625  014546  D7D7               	goto	l1010
 18626  014548                     __end_of_Console_Tab:
 18627                           	opt stack 0
 18628                           tosu	equ	0xFFF
 18629                           tosh	equ	0xFFE
 18630                           tosl	equ	0xFFD
 18631                           pclath	equ	0xFFA
 18632                           tblptru	equ	0xFF8
 18633                           tblptrh	equ	0xFF7
 18634                           tblptrl	equ	0xFF6
 18635                           tablat	equ	0xFF5
 18636                           prodh	equ	0xFF4
 18637                           prodl	equ	0xFF3
 18638                           intcon	equ	0xFF2
 18639                           indf0	equ	0xFEF
 18640                           postinc0	equ	0xFEE
 18641                           fsr0h	equ	0xFEA
 18642                           fsr0l	equ	0xFE9
 18643                           wreg	equ	0xFE8
 18644                           indf1	equ	0xFE7
 18645                           postdec1	equ	0xFE5
 18646                           fsr1h	equ	0xFE2
 18647                           fsr1l	equ	0xFE1
 18648                           indf2	equ	0xFDF
 18649                           postinc2	equ	0xFDE
 18650                           postdec2	equ	0xFDD
 18651                           plusw2	equ	0xFDB
 18652                           fsr2h	equ	0xFDA
 18653                           fsr2l	equ	0xFD9
 18654                           status	equ	0xFD8
 18655                           
 18656 ;; *************** function _Console_IncrementCursor *****************
 18657 ;; Defined at:
 18658 ;;		line 243 in file "Library/Console.c"
 18659 ;; Parameters:    Size  Location     Type
 18660 ;;		None
 18661 ;; Auto vars:     Size  Location     Type
 18662 ;;		None
 18663 ;; Return value:  Size  Location     Type
 18664 ;;                  1    wreg      unsigned char 
 18665 ;; Registers used:
 18666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18667 ;; Tracked objects:
 18668 ;;		On entry : 0/0
 18669 ;;		On exit  : 0/0
 18670 ;;		Unchanged: 0/0
 18671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18676 ;;Total ram usage:        2 bytes
 18677 ;; Hardware stack levels used:    1
 18678 ;; Hardware stack levels required when called:    8
 18679 ;; This function calls:
 18680 ;;		_Console_FormFeed
 18681 ;;		_Console_NewLine
 18682 ;; This function is called by:
 18683 ;;		_Console_Tab
 18684 ;;		_Console_PrintChar
 18685 ;; This function uses a non-reentrant model
 18686 ;;
 18687                           
 18688                           	psect	text100
 18689  015218                     __ptext100:
 18690                           	opt stack 0
 18691  015218                     _Console_IncrementCursor:
 18692                           	opt stack 18
 18693                           
 18694                           ;Console.c: 246: lBufferX += 1;
 18695                           
 18696                           ; BSR set to: 0
 18697                           ;incstack = 0
 18698  015218  0100               	movlb	0	; () banked
 18699  01521A  2BF4               	incf	_lBufferX& (0+255),f,b
 18700                           
 18701                           ; BSR set to: 0
 18702                           ;Console.c: 248: gCursor.x += 6;
 18703  01521C  0E06               	movlw	6
 18704  01521E  2647               	addwf	_gCursor,f,c
 18705  015220  0E00               	movlw	0
 18706  015222  2248               	addwfc	_gCursor+1,f,c
 18707                           
 18708                           ; BSR set to: 0
 18709                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 18710  015224  0E06               	movlw	6
 18711  015226  2447               	addwf	_gCursor,w,c
 18712  015228  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18713  01522A  0E00               	movlw	0
 18714  01522C  2048               	addwfc	_gCursor+1,w,c
 18715  01522E  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18716  015230  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18717  015232  D007               	goto	l1004
 18718  015234  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18719  015236  E103               	bnz	u9690
 18720  015238  0E80               	movlw	128
 18721  01523A  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18722  01523C  B0D8               	btfsc	status,0,c
 18723  01523E                     u9690:
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;Console.c: 250: Console_NewLine();
 18727  01523E  EC0B  F0A5         	call	_Console_NewLine	;wreg free
 18728  015242                     l1004:
 18729                           
 18730                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 18731  015242  0E08               	movlw	8
 18732  015244  2449               	addwf	_gCursor+2,w,c
 18733  015246  0100               	movlb	0	; () banked
 18734  015248  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 18735  01524A  0E00               	movlw	0
 18736  01524C  204A               	addwfc	_gCursor+3,w,c
 18737  01524E  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 18738  015250  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 18739  015252  D00A               	goto	l1005
 18740  015254  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 18741  015256  E104               	bnz	u9700
 18742  015258  0E80               	movlw	128
 18743  01525A  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 18744  01525C  A0D8               	btfss	status,0,c
 18745  01525E  D004               	goto	l1005
 18746  015260                     u9700:
 18747                           
 18748                           ; BSR set to: 0
 18749                           ;Console.c: 252: {
 18750                           ;Console.c: 253: Console_FormFeed();
 18751  015260  ECE8  F0A6         	call	_Console_FormFeed	;wreg free
 18752                           
 18753                           ;Console.c: 254: return 1;
 18754  015264  0E01               	movlw	1
 18755  015266  0012               	return	
 18756  015268                     l1005:
 18757                           
 18758                           ;Console.c: 255: }
 18759                           ;Console.c: 257: return 0;
 18760  015268  0E00               	movlw	0
 18761  01526A  0012               	return	
 18762  01526C                     __end_of_Console_IncrementCursor:
 18763                           	opt stack 0
 18764                           tosu	equ	0xFFF
 18765                           tosh	equ	0xFFE
 18766                           tosl	equ	0xFFD
 18767                           pclath	equ	0xFFA
 18768                           tblptru	equ	0xFF8
 18769                           tblptrh	equ	0xFF7
 18770                           tblptrl	equ	0xFF6
 18771                           tablat	equ	0xFF5
 18772                           prodh	equ	0xFF4
 18773                           prodl	equ	0xFF3
 18774                           intcon	equ	0xFF2
 18775                           indf0	equ	0xFEF
 18776                           postinc0	equ	0xFEE
 18777                           fsr0h	equ	0xFEA
 18778                           fsr0l	equ	0xFE9
 18779                           wreg	equ	0xFE8
 18780                           indf1	equ	0xFE7
 18781                           postdec1	equ	0xFE5
 18782                           fsr1h	equ	0xFE2
 18783                           fsr1l	equ	0xFE1
 18784                           indf2	equ	0xFDF
 18785                           postinc2	equ	0xFDE
 18786                           postdec2	equ	0xFDD
 18787                           plusw2	equ	0xFDB
 18788                           fsr2h	equ	0xFDA
 18789                           fsr2l	equ	0xFD9
 18790                           status	equ	0xFD8
 18791                           
 18792 ;; *************** function _Console_NewLine *****************
 18793 ;; Defined at:
 18794 ;;		line 175 in file "Library/Console.c"
 18795 ;; Parameters:    Size  Location     Type
 18796 ;;		None
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;		None
 18799 ;; Return value:  Size  Location     Type
 18800 ;;                  1    wreg      void 
 18801 ;; Registers used:
 18802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18812 ;;Total ram usage:        2 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    7
 18815 ;; This function calls:
 18816 ;;		Nothing
 18817 ;; This function is called by:
 18818 ;;		_Console_IncrementCursor
 18819 ;;		_Console_PrintChar
 18820 ;; This function uses a non-reentrant model
 18821 ;;
 18822                           
 18823                           	psect	text101
 18824  014A16                     __ptext101:
 18825                           	opt stack 0
 18826  014A16                     _Console_NewLine:
 18827                           	opt stack 18
 18828                           
 18829                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 18830                           
 18831                           ;incstack = 0
 18832  014A16  D02D               	goto	l983
 18833  014A18                     
 18834                           ;Console.c: 179: {
 18835                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 18836  014A18  0100               	movlb	0	; () banked
 18837  014A1A  51F3               	movf	_lBufferY& (0+255),w,b
 18838  014A1C  0D14               	mullw	20
 18839  014A1E  0E18               	movlw	low _lBuffer
 18840  014A20  6F60               	movwf	??_Console_NewLine& (0+255),b
 18841  014A22  0E03               	movlw	high _lBuffer
 18842  014A24  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18843  014A26  50F3               	movf	prodl,w,c
 18844  014A28  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18845  014A2A  50F4               	movf	prodh,w,c
 18846  014A2C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18847  014A2E  51F4               	movf	_lBufferX& (0+255),w,b
 18848  014A30  0D01               	mullw	1
 18849  014A32  50F3               	movf	prodl,w,c
 18850  014A34  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18851  014A36  6ED9               	movwf	fsr2l,c
 18852  014A38  50F4               	movf	prodh,w,c
 18853  014A3A  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18854  014A3C  6EDA               	movwf	fsr2h,c
 18855  014A3E  50DF               	movf	indf2,w,c
 18856  014A40  B4D8               	btfsc	status,2,c
 18857  014A42  D016               	goto	l985
 18858                           
 18859                           ; BSR set to: 0
 18860                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 18861  014A44  0E01               	movlw	1
 18862  014A46  6E4E               	movwf	_change,c
 18863                           
 18864                           ; BSR set to: 0
 18865  014A48  51F3               	movf	_lBufferY& (0+255),w,b
 18866  014A4A  0D14               	mullw	20
 18867  014A4C  0E18               	movlw	low _lBuffer
 18868  014A4E  6F60               	movwf	??_Console_NewLine& (0+255),b
 18869  014A50  0E03               	movlw	high _lBuffer
 18870  014A52  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 18871  014A54  50F3               	movf	prodl,w,c
 18872  014A56  2760               	addwf	??_Console_NewLine& (0+255),f,b
 18873  014A58  50F4               	movf	prodh,w,c
 18874  014A5A  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 18875  014A5C  51F4               	movf	_lBufferX& (0+255),w,b
 18876  014A5E  0D01               	mullw	1
 18877  014A60  50F3               	movf	prodl,w,c
 18878  014A62  2560               	addwf	??_Console_NewLine& (0+255),w,b
 18879  014A64  6ED9               	movwf	fsr2l,c
 18880  014A66  50F4               	movf	prodh,w,c
 18881  014A68  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 18882  014A6A  6EDA               	movwf	fsr2h,c
 18883  014A6C  0E80               	movlw	128
 18884  014A6E  6EDF               	movwf	indf2,c
 18885  014A70                     l985:
 18886                           
 18887                           ; BSR set to: 0
 18888                           ;Console.c: 182: lBufferX ++;
 18889                           
 18890                           ; BSR set to: 0
 18891  014A70  2BF4               	incf	_lBufferX& (0+255),f,b
 18892  014A72                     l983:
 18893                           
 18894                           ; BSR set to: 0
 18895  014A72  0E13               	movlw	19
 18896  014A74  0100               	movlb	0	; () banked
 18897  014A76  65F4               	cpfsgt	_lBufferX& (0+255),b
 18898  014A78  D7CF               	goto	l984
 18899                           
 18900                           ; BSR set to: 0
 18901                           ;Console.c: 183: }
 18902                           ;Console.c: 185: lBufferX = 0;
 18903                           
 18904                           ; BSR set to: 0
 18905  014A7A  0E00               	movlw	0
 18906  014A7C  6FF4               	movwf	_lBufferX& (0+255),b
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;Console.c: 186: lBufferY ++;
 18910  014A7E  2BF3               	incf	_lBufferY& (0+255),f,b
 18911                           
 18912                           ; BSR set to: 0
 18913                           ;Console.c: 188: gCursor.y += 8;
 18914  014A80  0E08               	movlw	8
 18915  014A82  2649               	addwf	_gCursor+2,f,c
 18916  014A84  0E00               	movlw	0
 18917  014A86  224A               	addwfc	_gCursor+3,f,c
 18918                           
 18919                           ; BSR set to: 0
 18920                           ;Console.c: 189: gCursor.x = 6;
 18921  014A88  0E00               	movlw	0
 18922  014A8A  6E48               	movwf	_gCursor+1,c
 18923  014A8C  0E06               	movlw	6
 18924  014A8E  6E47               	movwf	_gCursor,c
 18925                           
 18926                           ; BSR set to: 0
 18927  014A90  0012               	return		;funcret
 18928  014A92                     __end_of_Console_NewLine:
 18929                           	opt stack 0
 18930                           tosu	equ	0xFFF
 18931                           tosh	equ	0xFFE
 18932                           tosl	equ	0xFFD
 18933                           pclath	equ	0xFFA
 18934                           tblptru	equ	0xFF8
 18935                           tblptrh	equ	0xFF7
 18936                           tblptrl	equ	0xFF6
 18937                           tablat	equ	0xFF5
 18938                           prodh	equ	0xFF4
 18939                           prodl	equ	0xFF3
 18940                           intcon	equ	0xFF2
 18941                           indf0	equ	0xFEF
 18942                           postinc0	equ	0xFEE
 18943                           fsr0h	equ	0xFEA
 18944                           fsr0l	equ	0xFE9
 18945                           wreg	equ	0xFE8
 18946                           indf1	equ	0xFE7
 18947                           postdec1	equ	0xFE5
 18948                           fsr1h	equ	0xFE2
 18949                           fsr1l	equ	0xFE1
 18950                           indf2	equ	0xFDF
 18951                           postinc2	equ	0xFDE
 18952                           postdec2	equ	0xFDD
 18953                           plusw2	equ	0xFDB
 18954                           fsr2h	equ	0xFDA
 18955                           fsr2l	equ	0xFD9
 18956                           status	equ	0xFD8
 18957                           
 18958 ;; *************** function _Console_FormFeed *****************
 18959 ;; Defined at:
 18960 ;;		line 192 in file "Library/Console.c"
 18961 ;; Parameters:    Size  Location     Type
 18962 ;;		None
 18963 ;; Auto vars:     Size  Location     Type
 18964 ;;  y               1    3[BANK0 ] unsigned char 
 18965 ;;  x               1    2[BANK0 ] unsigned char 
 18966 ;; Return value:  Size  Location     Type
 18967 ;;                  1    wreg      void 
 18968 ;; Registers used:
 18969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18970 ;; Tracked objects:
 18971 ;;		On entry : 0/0
 18972 ;;		On exit  : 0/0
 18973 ;;		Unchanged: 0/0
 18974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18976 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18978 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18979 ;;Total ram usage:        4 bytes
 18980 ;; Hardware stack levels used:    1
 18981 ;; Hardware stack levels required when called:    7
 18982 ;; This function calls:
 18983 ;;		Nothing
 18984 ;; This function is called by:
 18985 ;;		_Console_IncrementCursor
 18986 ;;		_Console_PrintChar
 18987 ;; This function uses a non-reentrant model
 18988 ;;
 18989                           
 18990                           	psect	text102
 18991  014DD0                     __ptext102:
 18992                           	opt stack 0
 18993  014DD0                     _Console_FormFeed:
 18994                           	opt stack 18
 18995                           
 18996                           ;Console.c: 195: lBufferX = 0;
 18997                           
 18998                           ; BSR set to: 0
 18999                           ;incstack = 0
 19000  014DD0  0E00               	movlw	0
 19001  014DD2  0100               	movlb	0	; () banked
 19002  014DD4  6FF4               	movwf	_lBufferX& (0+255),b
 19003                           
 19004                           ;Console.c: 196: lBufferY = 0;
 19005  014DD6  0E00               	movlw	0
 19006  014DD8  6FF3               	movwf	_lBufferY& (0+255),b
 19007                           
 19008                           ;Console.c: 197: UINT8 x, y;
 19009                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 19010  014DDA  0E00               	movlw	0
 19011  014DDC  6F63               	movwf	Console_FormFeed@y& (0+255),b
 19012  014DDE                     l12504:
 19013                           
 19014                           ; BSR set to: 0
 19015  014DDE  0E0E               	movlw	14
 19016  014DE0  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 19017  014DE2  D001               	goto	l990
 19018  014DE4  D020               	goto	u9620
 19019  014DE6                     l990:
 19020                           
 19021                           ; BSR set to: 0
 19022                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19023                           
 19024                           ; BSR set to: 0
 19025  014DE6  0E00               	movlw	0
 19026  014DE8  6F62               	movwf	Console_FormFeed@x& (0+255),b
 19027  014DEA                     l12510:
 19028                           
 19029                           ; BSR set to: 0
 19030  014DEA  0E13               	movlw	19
 19031  014DEC  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 19032  014DEE  D001               	goto	l992
 19033  014DF0  D018               	goto	u9610
 19034  014DF2                     l992:
 19035                           
 19036                           ; BSR set to: 0
 19037                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 19038                           
 19039                           ; BSR set to: 0
 19040  014DF2  0E01               	movlw	1
 19041  014DF4  6E4E               	movwf	_change,c
 19042                           
 19043                           ; BSR set to: 0
 19044  014DF6  5163               	movf	Console_FormFeed@y& (0+255),w,b
 19045  014DF8  0D14               	mullw	20
 19046  014DFA  0E18               	movlw	low _lBuffer
 19047  014DFC  6F60               	movwf	??_Console_FormFeed& (0+255),b
 19048  014DFE  0E03               	movlw	high _lBuffer
 19049  014E00  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 19050  014E02  50F3               	movf	prodl,w,c
 19051  014E04  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 19052  014E06  50F4               	movf	prodh,w,c
 19053  014E08  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 19054  014E0A  5162               	movf	Console_FormFeed@x& (0+255),w,b
 19055  014E0C  0D01               	mullw	1
 19056  014E0E  50F3               	movf	prodl,w,c
 19057  014E10  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 19058  014E12  6ED9               	movwf	fsr2l,c
 19059  014E14  50F4               	movf	prodh,w,c
 19060  014E16  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 19061  014E18  6EDA               	movwf	fsr2h,c
 19062  014E1A  0E80               	movlw	128
 19063  014E1C  6EDF               	movwf	indf2,c
 19064                           
 19065                           ; BSR set to: 0
 19066  014E1E  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 19067  014E20  D7E4               	goto	l12510
 19068  014E22                     u9610:
 19069                           
 19070                           ; BSR set to: 0
 19071                           
 19072                           ; BSR set to: 0
 19073  014E22  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 19074  014E24  D7DC               	goto	l12504
 19075  014E26                     u9620:
 19076                           
 19077                           ; BSR set to: 0
 19078                           ;Console.c: 204: clearall = 1;
 19079                           
 19080                           ; BSR set to: 0
 19081  014E26  0E01               	movlw	1
 19082  014E28  6FF5               	movwf	_clearall& (0+255),b
 19083                           
 19084                           ;Console.c: 205: gCursor.x = 6;
 19085  014E2A  0E00               	movlw	0
 19086  014E2C  6E48               	movwf	_gCursor+1,c
 19087  014E2E  0E06               	movlw	6
 19088  014E30  6E47               	movwf	_gCursor,c
 19089                           
 19090                           ;Console.c: 206: gCursor.y = 6;
 19091  014E32  0E00               	movlw	0
 19092  014E34  6E4A               	movwf	_gCursor+3,c
 19093  014E36  0E06               	movlw	6
 19094  014E38  6E49               	movwf	_gCursor+2,c
 19095                           
 19096                           ; BSR set to: 0
 19097  014E3A  0012               	return		;funcret
 19098  014E3C                     __end_of_Console_FormFeed:
 19099                           	opt stack 0
 19100                           tosu	equ	0xFFF
 19101                           tosh	equ	0xFFE
 19102                           tosl	equ	0xFFD
 19103                           pclath	equ	0xFFA
 19104                           tblptru	equ	0xFF8
 19105                           tblptrh	equ	0xFF7
 19106                           tblptrl	equ	0xFF6
 19107                           tablat	equ	0xFF5
 19108                           prodh	equ	0xFF4
 19109                           prodl	equ	0xFF3
 19110                           intcon	equ	0xFF2
 19111                           indf0	equ	0xFEF
 19112                           postinc0	equ	0xFEE
 19113                           fsr0h	equ	0xFEA
 19114                           fsr0l	equ	0xFE9
 19115                           wreg	equ	0xFE8
 19116                           indf1	equ	0xFE7
 19117                           postdec1	equ	0xFE5
 19118                           fsr1h	equ	0xFE2
 19119                           fsr1l	equ	0xFE1
 19120                           indf2	equ	0xFDF
 19121                           postinc2	equ	0xFDE
 19122                           postdec2	equ	0xFDD
 19123                           plusw2	equ	0xFDB
 19124                           fsr2h	equ	0xFDA
 19125                           fsr2l	equ	0xFD9
 19126                           status	equ	0xFD8
 19127                           
 19128 ;; *************** function _Console_ResetCursor *****************
 19129 ;; Defined at:
 19130 ;;		line 297 in file "Library/Console.c"
 19131 ;; Parameters:    Size  Location     Type
 19132 ;;		None
 19133 ;; Auto vars:     Size  Location     Type
 19134 ;;		None
 19135 ;; Return value:  Size  Location     Type
 19136 ;;                  1    wreg      void 
 19137 ;; Registers used:
 19138 ;;		wreg, status,2
 19139 ;; Tracked objects:
 19140 ;;		On entry : 0/0
 19141 ;;		On exit  : 0/0
 19142 ;;		Unchanged: 0/0
 19143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19148 ;;Total ram usage:        0 bytes
 19149 ;; Hardware stack levels used:    1
 19150 ;; Hardware stack levels required when called:    7
 19151 ;; This function calls:
 19152 ;;		Nothing
 19153 ;; This function is called by:
 19154 ;;		_Console_PrintChar
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158                           	psect	text103
 19159  015E12                     __ptext103:
 19160                           	opt stack 0
 19161  015E12                     _Console_ResetCursor:
 19162                           	opt stack 20
 19163                           
 19164                           ;Console.c: 299: gCursor.x = 6;
 19165                           
 19166                           ; BSR set to: 0
 19167                           ;incstack = 0
 19168  015E12  0E00               	movlw	0
 19169  015E14  6E48               	movwf	_gCursor+1,c
 19170  015E16  0E06               	movlw	6
 19171  015E18  6E47               	movwf	_gCursor,c
 19172                           
 19173                           ;Console.c: 300: gCursor.y = 6;
 19174  015E1A  0E00               	movlw	0
 19175  015E1C  6E4A               	movwf	_gCursor+3,c
 19176  015E1E  0E06               	movlw	6
 19177  015E20  6E49               	movwf	_gCursor+2,c
 19178                           
 19179                           ;Console.c: 303: lBufferX = 0;
 19180  015E22  0E00               	movlw	0
 19181  015E24  0100               	movlb	0	; () banked
 19182  015E26  6FF4               	movwf	_lBufferX& (0+255),b
 19183                           
 19184                           ;Console.c: 304: lBufferY = 0;
 19185  015E28  0E00               	movlw	0
 19186  015E2A  6FF3               	movwf	_lBufferY& (0+255),b
 19187                           
 19188                           ; BSR set to: 0
 19189  015E2C  0012               	return		;funcret
 19190  015E2E                     __end_of_Console_ResetCursor:
 19191                           	opt stack 0
 19192                           tosu	equ	0xFFF
 19193                           tosh	equ	0xFFE
 19194                           tosl	equ	0xFFD
 19195                           pclath	equ	0xFFA
 19196                           tblptru	equ	0xFF8
 19197                           tblptrh	equ	0xFF7
 19198                           tblptrl	equ	0xFF6
 19199                           tablat	equ	0xFF5
 19200                           prodh	equ	0xFF4
 19201                           prodl	equ	0xFF3
 19202                           intcon	equ	0xFF2
 19203                           indf0	equ	0xFEF
 19204                           postinc0	equ	0xFEE
 19205                           fsr0h	equ	0xFEA
 19206                           fsr0l	equ	0xFE9
 19207                           wreg	equ	0xFE8
 19208                           indf1	equ	0xFE7
 19209                           postdec1	equ	0xFE5
 19210                           fsr1h	equ	0xFE2
 19211                           fsr1l	equ	0xFE1
 19212                           indf2	equ	0xFDF
 19213                           postinc2	equ	0xFDE
 19214                           postdec2	equ	0xFDD
 19215                           plusw2	equ	0xFDB
 19216                           fsr2h	equ	0xFDA
 19217                           fsr2l	equ	0xFD9
 19218                           status	equ	0xFD8
 19219                           
 19220 ;; *************** function _Console_Backspace *****************
 19221 ;; Defined at:
 19222 ;;		line 209 in file "Library/Console.c"
 19223 ;; Parameters:    Size  Location     Type
 19224 ;;		None
 19225 ;; Auto vars:     Size  Location     Type
 19226 ;;		None
 19227 ;; Return value:  Size  Location     Type
 19228 ;;                  1    wreg      void 
 19229 ;; Registers used:
 19230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19231 ;; Tracked objects:
 19232 ;;		On entry : 0/0
 19233 ;;		On exit  : 0/0
 19234 ;;		Unchanged: 0/0
 19235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19240 ;;Total ram usage:        0 bytes
 19241 ;; Hardware stack levels used:    1
 19242 ;; Hardware stack levels required when called:    8
 19243 ;; This function calls:
 19244 ;;		_Console_ClearCursor
 19245 ;; This function is called by:
 19246 ;;		_Console_PrintChar
 19247 ;; This function uses a non-reentrant model
 19248 ;;
 19249                           
 19250                           	psect	text104
 19251  01545A                     __ptext104:
 19252                           	opt stack 0
 19253  01545A                     _Console_Backspace:
 19254                           	opt stack 19
 19255                           
 19256                           ;Console.c: 211: if (lBufferX > 0)
 19257                           
 19258                           ; BSR set to: 0
 19259                           ;incstack = 0
 19260  01545A  0100               	movlb	0	; () banked
 19261  01545C  51F4               	movf	_lBufferX& (0+255),w,b
 19262  01545E  B4D8               	btfsc	status,2,c
 19263  015460  D006               	goto	l997
 19264                           
 19265                           ; BSR set to: 0
 19266                           ;Console.c: 212: {
 19267                           ;Console.c: 213: gCursor.x -= 6;
 19268  015462  0EFA               	movlw	250
 19269  015464  2647               	addwf	_gCursor,f,c
 19270  015466  0EFF               	movlw	255
 19271  015468  2248               	addwfc	_gCursor+1,f,c
 19272                           
 19273                           ; BSR set to: 0
 19274                           ;Console.c: 216: lBufferX --;
 19275  01546A  07F4               	decf	_lBufferX& (0+255),f,b
 19276                           
 19277                           ;Console.c: 218: }
 19278  01546C  D01B               	goto	l1000
 19279  01546E                     l997:
 19280                           
 19281                           ; BSR set to: 0
 19282                           ;Console.c: 219: else if (lBufferY > 0)
 19283                           
 19284                           ; BSR set to: 0
 19285  01546E  51F3               	movf	_lBufferY& (0+255),w,b
 19286  015470  B4D8               	btfsc	status,2,c
 19287  015472  D00C               	goto	l999
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;Console.c: 220: {
 19291                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 19292  015474  0E00               	movlw	0
 19293  015476  6E48               	movwf	_gCursor+1,c
 19294  015478  0E72               	movlw	114
 19295  01547A  6E47               	movwf	_gCursor,c
 19296                           
 19297                           ; BSR set to: 0
 19298                           ;Console.c: 222: gCursor.y -= 8;
 19299  01547C  0EF8               	movlw	248
 19300  01547E  2649               	addwf	_gCursor+2,f,c
 19301  015480  0EFF               	movlw	255
 19302  015482  224A               	addwfc	_gCursor+3,f,c
 19303                           
 19304                           ; BSR set to: 0
 19305                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 19306  015484  0E13               	movlw	19
 19307  015486  6FF4               	movwf	_lBufferX& (0+255),b
 19308                           
 19309                           ; BSR set to: 0
 19310                           ;Console.c: 226: lBufferY --;
 19311  015488  07F3               	decf	_lBufferY& (0+255),f,b
 19312                           
 19313                           ;Console.c: 228: }
 19314  01548A  D00C               	goto	l1000
 19315  01548C                     l999:
 19316                           
 19317                           ; BSR set to: 0
 19318                           ;Console.c: 229: else
 19319                           ;Console.c: 230: {
 19320                           ;Console.c: 231: gCursor.x = 6;
 19321                           
 19322                           ; BSR set to: 0
 19323  01548C  0E00               	movlw	0
 19324  01548E  6E48               	movwf	_gCursor+1,c
 19325  015490  0E06               	movlw	6
 19326  015492  6E47               	movwf	_gCursor,c
 19327                           
 19328                           ;Console.c: 232: gCursor.y = 6;
 19329  015494  0E00               	movlw	0
 19330  015496  6E4A               	movwf	_gCursor+3,c
 19331  015498  0E06               	movlw	6
 19332  01549A  6E49               	movwf	_gCursor+2,c
 19333                           
 19334                           ;Console.c: 235: lBufferX = 0;
 19335  01549C  0E00               	movlw	0
 19336  01549E  6FF4               	movwf	_lBufferX& (0+255),b
 19337                           
 19338                           ;Console.c: 236: lBufferY = 0;
 19339  0154A0  0E00               	movlw	0
 19340  0154A2  6FF3               	movwf	_lBufferY& (0+255),b
 19341  0154A4                     l1000:
 19342                           
 19343                           ; BSR set to: 0
 19344                           ;Console.c: 238: }
 19345                           ;Console.c: 240: Console_ClearCursor();
 19346                           
 19347                           ; BSR set to: 0
 19348                           
 19349                           ; BSR set to: 0
 19350  0154A4  ECAD  F0AD         	call	_Console_ClearCursor	;wreg free
 19351  0154A8  0012               	return		;funcret
 19352  0154AA                     __end_of_Console_Backspace:
 19353                           	opt stack 0
 19354                           tosu	equ	0xFFF
 19355                           tosh	equ	0xFFE
 19356                           tosl	equ	0xFFD
 19357                           pclath	equ	0xFFA
 19358                           tblptru	equ	0xFF8
 19359                           tblptrh	equ	0xFF7
 19360                           tblptrl	equ	0xFF6
 19361                           tablat	equ	0xFF5
 19362                           prodh	equ	0xFF4
 19363                           prodl	equ	0xFF3
 19364                           intcon	equ	0xFF2
 19365                           indf0	equ	0xFEF
 19366                           postinc0	equ	0xFEE
 19367                           fsr0h	equ	0xFEA
 19368                           fsr0l	equ	0xFE9
 19369                           wreg	equ	0xFE8
 19370                           indf1	equ	0xFE7
 19371                           postdec1	equ	0xFE5
 19372                           fsr1h	equ	0xFE2
 19373                           fsr1l	equ	0xFE1
 19374                           indf2	equ	0xFDF
 19375                           postinc2	equ	0xFDE
 19376                           postdec2	equ	0xFDD
 19377                           plusw2	equ	0xFDB
 19378                           fsr2h	equ	0xFDA
 19379                           fsr2l	equ	0xFD9
 19380                           status	equ	0xFD8
 19381                           
 19382 ;; *************** function _Console_ClearCursor *****************
 19383 ;; Defined at:
 19384 ;;		line 308 in file "Library/Console.c"
 19385 ;; Parameters:    Size  Location     Type
 19386 ;;		None
 19387 ;; Auto vars:     Size  Location     Type
 19388 ;;		None
 19389 ;; Return value:  Size  Location     Type
 19390 ;;                  1    wreg      void 
 19391 ;; Registers used:
 19392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19393 ;; Tracked objects:
 19394 ;;		On entry : 0/0
 19395 ;;		On exit  : 0/0
 19396 ;;		Unchanged: 0/0
 19397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19400 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19402 ;;Total ram usage:        2 bytes
 19403 ;; Hardware stack levels used:    1
 19404 ;; Hardware stack levels required when called:    7
 19405 ;; This function calls:
 19406 ;;		Nothing
 19407 ;; This function is called by:
 19408 ;;		_Console_Backspace
 19409 ;;		_Console_Tab
 19410 ;; This function uses a non-reentrant model
 19411 ;;
 19412                           
 19413                           	psect	text105
 19414  015B5A                     __ptext105:
 19415                           	opt stack 0
 19416  015B5A                     _Console_ClearCursor:
 19417                           	opt stack 19
 19418                           
 19419                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 19420                           
 19421                           ;incstack = 0
 19422  015B5A  0E01               	movlw	1
 19423  015B5C  6E4E               	movwf	_change,c
 19424  015B5E  0100               	movlb	0	; () banked
 19425  015B60  51F3               	movf	_lBufferY& (0+255),w,b
 19426  015B62  0D14               	mullw	20
 19427  015B64  0E18               	movlw	low _lBuffer
 19428  015B66  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 19429  015B68  0E03               	movlw	high _lBuffer
 19430  015B6A  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 19431  015B6C  50F3               	movf	prodl,w,c
 19432  015B6E  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 19433  015B70  50F4               	movf	prodh,w,c
 19434  015B72  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 19435  015B74  51F4               	movf	_lBufferX& (0+255),w,b
 19436  015B76  0D01               	mullw	1
 19437  015B78  50F3               	movf	prodl,w,c
 19438  015B7A  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 19439  015B7C  6ED9               	movwf	fsr2l,c
 19440  015B7E  50F4               	movf	prodh,w,c
 19441  015B80  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 19442  015B82  6EDA               	movwf	fsr2h,c
 19443  015B84  0E80               	movlw	128
 19444  015B86  6EDF               	movwf	indf2,c
 19445                           
 19446                           ; BSR set to: 0
 19447  015B88  0012               	return		;funcret
 19448  015B8A                     __end_of_Console_ClearCursor:
 19449                           	opt stack 0
 19450                           tosu	equ	0xFFF
 19451                           tosh	equ	0xFFE
 19452                           tosl	equ	0xFFD
 19453                           pclath	equ	0xFFA
 19454                           tblptru	equ	0xFF8
 19455                           tblptrh	equ	0xFF7
 19456                           tblptrl	equ	0xFF6
 19457                           tablat	equ	0xFF5
 19458                           prodh	equ	0xFF4
 19459                           prodl	equ	0xFF3
 19460                           intcon	equ	0xFF2
 19461                           indf0	equ	0xFEF
 19462                           postinc0	equ	0xFEE
 19463                           fsr0h	equ	0xFEA
 19464                           fsr0l	equ	0xFE9
 19465                           wreg	equ	0xFE8
 19466                           indf1	equ	0xFE7
 19467                           postdec1	equ	0xFE5
 19468                           fsr1h	equ	0xFE2
 19469                           fsr1l	equ	0xFE1
 19470                           indf2	equ	0xFDF
 19471                           postinc2	equ	0xFDE
 19472                           postdec2	equ	0xFDD
 19473                           plusw2	equ	0xFDB
 19474                           fsr2h	equ	0xFDA
 19475                           fsr2l	equ	0xFD9
 19476                           status	equ	0xFD8
 19477                           
 19478 ;; *************** function _SteppingCCW *****************
 19479 ;; Defined at:
 19480 ;;		line 282 in file "main.c"
 19481 ;; Parameters:    Size  Location     Type
 19482 ;;		None
 19483 ;; Auto vars:     Size  Location     Type
 19484 ;;		None
 19485 ;; Return value:  Size  Location     Type
 19486 ;;                  2  2190[None  ] int 
 19487 ;; Registers used:
 19488 ;;		wreg, status,2, status,0, cstack
 19489 ;; Tracked objects:
 19490 ;;		On entry : 0/0
 19491 ;;		On exit  : 0/0
 19492 ;;		Unchanged: 0/0
 19493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19498 ;;Total ram usage:        0 bytes
 19499 ;; Hardware stack levels used:    1
 19500 ;; Hardware stack levels required when called:    9
 19501 ;; This function calls:
 19502 ;;		_STP1
 19503 ;;		_STP2
 19504 ;;		_STP3
 19505 ;;		_STP4
 19506 ;;		_delay_ms
 19507 ;; This function is called by:
 19508 ;;		_Sensor_Observe2
 19509 ;;		_Closest_Object
 19510 ;; This function uses a non-reentrant model
 19511 ;;
 19512                           
 19513                           	psect	text106
 19514  0155D8                     __ptext106:
 19515                           	opt stack 0
 19516  0155D8                     _SteppingCCW:
 19517                           	opt stack 20
 19518                           
 19519                           ;main.c: 283: STP4();
 19520                           
 19521                           ; BSR set to: 0
 19522                           ;incstack = 0
 19523  0155D8  EC54  F0B0         	call	_STP4	;wreg free
 19524                           
 19525                           ;main.c: 284: delay_ms(2);
 19526  0155DC  0E00               	movlw	0
 19527  0155DE  0100               	movlb	0	; () banked
 19528  0155E0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19529  0155E2  0E02               	movlw	2
 19530  0155E4  6F60               	movwf	delay_ms@ms& (0+255),b
 19531  0155E6  ECB4  F0A8         	call	_delay_ms	;wreg free
 19532                           
 19533                           ;main.c: 285: STP3();
 19534  0155EA  EC58  F0B0         	call	_STP3	;wreg free
 19535                           
 19536                           ;main.c: 286: delay_ms(2);
 19537  0155EE  0E00               	movlw	0
 19538  0155F0  0100               	movlb	0	; () banked
 19539  0155F2  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19540  0155F4  0E02               	movlw	2
 19541  0155F6  6F60               	movwf	delay_ms@ms& (0+255),b
 19542  0155F8  ECB4  F0A8         	call	_delay_ms	;wreg free
 19543                           
 19544                           ;main.c: 287: STP2();
 19545  0155FC  EC5C  F0B0         	call	_STP2	;wreg free
 19546                           
 19547                           ;main.c: 288: delay_ms(2);
 19548  015600  0E00               	movlw	0
 19549  015602  0100               	movlb	0	; () banked
 19550  015604  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19551  015606  0E02               	movlw	2
 19552  015608  6F60               	movwf	delay_ms@ms& (0+255),b
 19553  01560A  ECB4  F0A8         	call	_delay_ms	;wreg free
 19554                           
 19555                           ;main.c: 289: STP1();
 19556  01560E  EC60  F0B0         	call	_STP1	;wreg free
 19557                           
 19558                           ;main.c: 290: delay_ms(2);
 19559  015612  0E00               	movlw	0
 19560  015614  0100               	movlb	0	; () banked
 19561  015616  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 19562  015618  0E02               	movlw	2
 19563  01561A  6F60               	movwf	delay_ms@ms& (0+255),b
 19564  01561C  ECB4  F0A8         	call	_delay_ms	;wreg free
 19565  015620  0012               	return		;funcret
 19566  015622                     __end_of_SteppingCCW:
 19567                           	opt stack 0
 19568                           tosu	equ	0xFFF
 19569                           tosh	equ	0xFFE
 19570                           tosl	equ	0xFFD
 19571                           pclath	equ	0xFFA
 19572                           tblptru	equ	0xFF8
 19573                           tblptrh	equ	0xFF7
 19574                           tblptrl	equ	0xFF6
 19575                           tablat	equ	0xFF5
 19576                           prodh	equ	0xFF4
 19577                           prodl	equ	0xFF3
 19578                           intcon	equ	0xFF2
 19579                           indf0	equ	0xFEF
 19580                           postinc0	equ	0xFEE
 19581                           fsr0h	equ	0xFEA
 19582                           fsr0l	equ	0xFE9
 19583                           wreg	equ	0xFE8
 19584                           indf1	equ	0xFE7
 19585                           postdec1	equ	0xFE5
 19586                           fsr1h	equ	0xFE2
 19587                           fsr1l	equ	0xFE1
 19588                           indf2	equ	0xFDF
 19589                           postinc2	equ	0xFDE
 19590                           postdec2	equ	0xFDD
 19591                           plusw2	equ	0xFDB
 19592                           fsr2h	equ	0xFDA
 19593                           fsr2l	equ	0xFD9
 19594                           status	equ	0xFD8
 19595                           
 19596 ;; *************** function _delay_ms *****************
 19597 ;; Defined at:
 19598 ;;		line 240 in file "Library/Types.c"
 19599 ;; Parameters:    Size  Location     Type
 19600 ;;  ms              2    0[BANK0 ] unsigned short 
 19601 ;; Auto vars:     Size  Location     Type
 19602 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19603 ;; Return value:  Size  Location     Type
 19604 ;;                  1    wreg      void 
 19605 ;; Registers used:
 19606 ;;		wreg, status,2, status,0
 19607 ;; Tracked objects:
 19608 ;;		On entry : 0/0
 19609 ;;		On exit  : 0/0
 19610 ;;		Unchanged: 0/0
 19611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19612 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19613 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19615 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19616 ;;Total ram usage:        6 bytes
 19617 ;; Hardware stack levels used:    1
 19618 ;; Hardware stack levels required when called:    7
 19619 ;; This function calls:
 19620 ;;		Nothing
 19621 ;; This function is called by:
 19622 ;;		_LCD_Reset
 19623 ;;		_LCD_Init
 19624 ;;		_MXK_Init
 19625 ;;		_SteppingCCW
 19626 ;;		_SteppingCW
 19627 ;;		_main
 19628 ;; This function uses a non-reentrant model
 19629 ;;
 19630                           
 19631                           	psect	text107
 19632  015168                     __ptext107:
 19633                           	opt stack 0
 19634  015168                     _delay_ms:
 19635                           	opt stack 23
 19636                           
 19637                           ;Types.c: 242: volatile unsigned long u;
 19638                           ;Types.c: 243: while (ms--)
 19639                           
 19640                           ;incstack = 0
 19641  015168  D01B               	goto	u11180
 19642  01516A                     l13844:
 19643                           
 19644                           ;Types.c: 244: {
 19645                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19646  01516A  0E00               	movlw	0
 19647  01516C  0100               	movlb	0	; () banked
 19648  01516E  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19649  015170  0E00               	movlw	0
 19650  015172  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19651  015174  0E00               	movlw	0
 19652  015176  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19653  015178  0E00               	movlw	0
 19654  01517A  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19655  01517C                     l13846:
 19656                           
 19657                           ; BSR set to: 0
 19658  01517C  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19659  01517E  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19660  015180  E10F               	bnz	l13852
 19661  015182  0EB0               	movlw	176
 19662  015184  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19663  015186  0E04               	movlw	4
 19664  015188  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19665  01518A  B0D8               	btfsc	status,0,c
 19666  01518C  D009               	goto	u11180
 19667                           
 19668                           ; BSR set to: 0
 19669                           
 19670                           ; BSR set to: 0
 19671  01518E  F000               	nop		; ;# 
 19672  015190  0E01               	movlw	1
 19673  015192  0100               	movlb	0	; () banked
 19674  015194  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19675  015196  0E00               	movlw	0
 19676  015198  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19677  01519A  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19678  01519C  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19679  01519E  D7EE               	goto	l13846
 19680  0151A0                     u11180:
 19681  0151A0                     l13852:
 19682  0151A0  0100               	movlb	0	; () banked
 19683  0151A2  0760               	decf	delay_ms@ms& (0+255),f,b
 19684  0151A4  A0D8               	btfss	status,0,c
 19685  0151A6  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 19686  0151A8  2960               	incf	delay_ms@ms& (0+255),w,b
 19687  0151AA  E1DF               	bnz	l13844
 19688  0151AC  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 19689  0151AE  A4D8               	btfss	status,2,c
 19690  0151B0  D7DC               	goto	l824
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;Types.c: 251: }
 19694                           ;Types.c: 252: }
 19695                           ;Types.c: 253: u = 0x8008;
 19696                           
 19697                           ; BSR set to: 0
 19698  0151B2  0E08               	movlw	8
 19699  0151B4  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 19700  0151B6  0E80               	movlw	128
 19701  0151B8  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19702  0151BA  0E00               	movlw	0
 19703  0151BC  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19704  0151BE  0E00               	movlw	0
 19705  0151C0  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19706                           
 19707                           ; BSR set to: 0
 19708  0151C2  0012               	return		;funcret
 19709  0151C4                     __end_of_delay_ms:
 19710                           	opt stack 0
 19711                           tosu	equ	0xFFF
 19712                           tosh	equ	0xFFE
 19713                           tosl	equ	0xFFD
 19714                           pclath	equ	0xFFA
 19715                           tblptru	equ	0xFF8
 19716                           tblptrh	equ	0xFF7
 19717                           tblptrl	equ	0xFF6
 19718                           tablat	equ	0xFF5
 19719                           prodh	equ	0xFF4
 19720                           prodl	equ	0xFF3
 19721                           intcon	equ	0xFF2
 19722                           indf0	equ	0xFEF
 19723                           postinc0	equ	0xFEE
 19724                           fsr0h	equ	0xFEA
 19725                           fsr0l	equ	0xFE9
 19726                           wreg	equ	0xFE8
 19727                           indf1	equ	0xFE7
 19728                           postdec1	equ	0xFE5
 19729                           fsr1h	equ	0xFE2
 19730                           fsr1l	equ	0xFE1
 19731                           indf2	equ	0xFDF
 19732                           postinc2	equ	0xFDE
 19733                           postdec2	equ	0xFDD
 19734                           plusw2	equ	0xFDB
 19735                           fsr2h	equ	0xFDA
 19736                           fsr2l	equ	0xFD9
 19737                           status	equ	0xFD8
 19738                           
 19739 ;; *************** function _STP4 *****************
 19740 ;; Defined at:
 19741 ;;		line 320 in file "main.c"
 19742 ;; Parameters:    Size  Location     Type
 19743 ;;		None
 19744 ;; Auto vars:     Size  Location     Type
 19745 ;;		None
 19746 ;; Return value:  Size  Location     Type
 19747 ;;                  2  2008[None  ] int 
 19748 ;; Registers used:
 19749 ;;		cstack
 19750 ;; Tracked objects:
 19751 ;;		On entry : 0/0
 19752 ;;		On exit  : 0/0
 19753 ;;		Unchanged: 0/0
 19754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19759 ;;Total ram usage:        0 bytes
 19760 ;; Hardware stack levels used:    1
 19761 ;; Hardware stack levels required when called:    8
 19762 ;; This function calls:
 19763 ;;		_Coil_Setup
 19764 ;; This function is called by:
 19765 ;;		_SteppingCCW
 19766 ;;		_SteppingCW
 19767 ;; This function uses a non-reentrant model
 19768 ;;
 19769                           
 19770                           	psect	text108
 19771  0160A8                     __ptext108:
 19772                           	opt stack 0
 19773  0160A8                     _STP4:
 19774                           	opt stack 20
 19775                           
 19776                           ;main.c: 321: Coil_Setup();
 19777                           
 19778                           ; BSR set to: 0
 19779                           ;incstack = 0
 19780  0160A8  ECFC  F0AF         	call	_Coil_Setup	;wreg free
 19781                           
 19782                           ;main.c: 322: RD7 = 1;
 19783  0160AC  8E83               	bsf	3971,7,c	;volatile
 19784  0160AE  0012               	return		;funcret
 19785  0160B0                     __end_of_STP4:
 19786                           	opt stack 0
 19787                           tosu	equ	0xFFF
 19788                           tosh	equ	0xFFE
 19789                           tosl	equ	0xFFD
 19790                           pclath	equ	0xFFA
 19791                           tblptru	equ	0xFF8
 19792                           tblptrh	equ	0xFF7
 19793                           tblptrl	equ	0xFF6
 19794                           tablat	equ	0xFF5
 19795                           prodh	equ	0xFF4
 19796                           prodl	equ	0xFF3
 19797                           intcon	equ	0xFF2
 19798                           indf0	equ	0xFEF
 19799                           postinc0	equ	0xFEE
 19800                           fsr0h	equ	0xFEA
 19801                           fsr0l	equ	0xFE9
 19802                           wreg	equ	0xFE8
 19803                           indf1	equ	0xFE7
 19804                           postdec1	equ	0xFE5
 19805                           fsr1h	equ	0xFE2
 19806                           fsr1l	equ	0xFE1
 19807                           indf2	equ	0xFDF
 19808                           postinc2	equ	0xFDE
 19809                           postdec2	equ	0xFDD
 19810                           plusw2	equ	0xFDB
 19811                           fsr2h	equ	0xFDA
 19812                           fsr2l	equ	0xFD9
 19813                           status	equ	0xFD8
 19814                           
 19815 ;; *************** function _STP3 *****************
 19816 ;; Defined at:
 19817 ;;		line 315 in file "main.c"
 19818 ;; Parameters:    Size  Location     Type
 19819 ;;		None
 19820 ;; Auto vars:     Size  Location     Type
 19821 ;;		None
 19822 ;; Return value:  Size  Location     Type
 19823 ;;                  2  2012[None  ] int 
 19824 ;; Registers used:
 19825 ;;		cstack
 19826 ;; Tracked objects:
 19827 ;;		On entry : 0/0
 19828 ;;		On exit  : 0/0
 19829 ;;		Unchanged: 0/0
 19830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19835 ;;Total ram usage:        0 bytes
 19836 ;; Hardware stack levels used:    1
 19837 ;; Hardware stack levels required when called:    8
 19838 ;; This function calls:
 19839 ;;		_Coil_Setup
 19840 ;; This function is called by:
 19841 ;;		_SteppingCCW
 19842 ;;		_SteppingCW
 19843 ;; This function uses a non-reentrant model
 19844 ;;
 19845                           
 19846                           	psect	text109
 19847  0160B0                     __ptext109:
 19848                           	opt stack 0
 19849  0160B0                     _STP3:
 19850                           	opt stack 20
 19851                           
 19852                           ;main.c: 316: Coil_Setup();
 19853                           
 19854                           ;incstack = 0
 19855  0160B0  ECFC  F0AF         	call	_Coil_Setup	;wreg free
 19856                           
 19857                           ;main.c: 317: RD5 = 1;
 19858  0160B4  8A83               	bsf	3971,5,c	;volatile
 19859  0160B6  0012               	return		;funcret
 19860  0160B8                     __end_of_STP3:
 19861                           	opt stack 0
 19862                           tosu	equ	0xFFF
 19863                           tosh	equ	0xFFE
 19864                           tosl	equ	0xFFD
 19865                           pclath	equ	0xFFA
 19866                           tblptru	equ	0xFF8
 19867                           tblptrh	equ	0xFF7
 19868                           tblptrl	equ	0xFF6
 19869                           tablat	equ	0xFF5
 19870                           prodh	equ	0xFF4
 19871                           prodl	equ	0xFF3
 19872                           intcon	equ	0xFF2
 19873                           indf0	equ	0xFEF
 19874                           postinc0	equ	0xFEE
 19875                           fsr0h	equ	0xFEA
 19876                           fsr0l	equ	0xFE9
 19877                           wreg	equ	0xFE8
 19878                           indf1	equ	0xFE7
 19879                           postdec1	equ	0xFE5
 19880                           fsr1h	equ	0xFE2
 19881                           fsr1l	equ	0xFE1
 19882                           indf2	equ	0xFDF
 19883                           postinc2	equ	0xFDE
 19884                           postdec2	equ	0xFDD
 19885                           plusw2	equ	0xFDB
 19886                           fsr2h	equ	0xFDA
 19887                           fsr2l	equ	0xFD9
 19888                           status	equ	0xFD8
 19889                           
 19890 ;; *************** function _STP2 *****************
 19891 ;; Defined at:
 19892 ;;		line 310 in file "main.c"
 19893 ;; Parameters:    Size  Location     Type
 19894 ;;		None
 19895 ;; Auto vars:     Size  Location     Type
 19896 ;;		None
 19897 ;; Return value:  Size  Location     Type
 19898 ;;                  2  2014[None  ] int 
 19899 ;; Registers used:
 19900 ;;		cstack
 19901 ;; Tracked objects:
 19902 ;;		On entry : 0/0
 19903 ;;		On exit  : 0/0
 19904 ;;		Unchanged: 0/0
 19905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;Total ram usage:        0 bytes
 19911 ;; Hardware stack levels used:    1
 19912 ;; Hardware stack levels required when called:    8
 19913 ;; This function calls:
 19914 ;;		_Coil_Setup
 19915 ;; This function is called by:
 19916 ;;		_SteppingCCW
 19917 ;;		_SteppingCW
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921                           	psect	text110
 19922  0160B8                     __ptext110:
 19923                           	opt stack 0
 19924  0160B8                     _STP2:
 19925                           	opt stack 20
 19926                           
 19927                           ;main.c: 311: Coil_Setup();
 19928                           
 19929                           ;incstack = 0
 19930  0160B8  ECFC  F0AF         	call	_Coil_Setup	;wreg free
 19931                           
 19932                           ;main.c: 312: RA3 = 1;
 19933  0160BC  8680               	bsf	3968,3,c	;volatile
 19934  0160BE  0012               	return		;funcret
 19935  0160C0                     __end_of_STP2:
 19936                           	opt stack 0
 19937                           tosu	equ	0xFFF
 19938                           tosh	equ	0xFFE
 19939                           tosl	equ	0xFFD
 19940                           pclath	equ	0xFFA
 19941                           tblptru	equ	0xFF8
 19942                           tblptrh	equ	0xFF7
 19943                           tblptrl	equ	0xFF6
 19944                           tablat	equ	0xFF5
 19945                           prodh	equ	0xFF4
 19946                           prodl	equ	0xFF3
 19947                           intcon	equ	0xFF2
 19948                           indf0	equ	0xFEF
 19949                           postinc0	equ	0xFEE
 19950                           fsr0h	equ	0xFEA
 19951                           fsr0l	equ	0xFE9
 19952                           wreg	equ	0xFE8
 19953                           indf1	equ	0xFE7
 19954                           postdec1	equ	0xFE5
 19955                           fsr1h	equ	0xFE2
 19956                           fsr1l	equ	0xFE1
 19957                           indf2	equ	0xFDF
 19958                           postinc2	equ	0xFDE
 19959                           postdec2	equ	0xFDD
 19960                           plusw2	equ	0xFDB
 19961                           fsr2h	equ	0xFDA
 19962                           fsr2l	equ	0xFD9
 19963                           status	equ	0xFD8
 19964                           
 19965 ;; *************** function _STP1 *****************
 19966 ;; Defined at:
 19967 ;;		line 305 in file "main.c"
 19968 ;; Parameters:    Size  Location     Type
 19969 ;;		None
 19970 ;; Auto vars:     Size  Location     Type
 19971 ;;		None
 19972 ;; Return value:  Size  Location     Type
 19973 ;;                  2  2016[None  ] int 
 19974 ;; Registers used:
 19975 ;;		cstack
 19976 ;; Tracked objects:
 19977 ;;		On entry : 0/0
 19978 ;;		On exit  : 0/0
 19979 ;;		Unchanged: 0/0
 19980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19985 ;;Total ram usage:        0 bytes
 19986 ;; Hardware stack levels used:    1
 19987 ;; Hardware stack levels required when called:    8
 19988 ;; This function calls:
 19989 ;;		_Coil_Setup
 19990 ;; This function is called by:
 19991 ;;		_SteppingCCW
 19992 ;;		_SteppingCW
 19993 ;; This function uses a non-reentrant model
 19994 ;;
 19995                           
 19996                           	psect	text111
 19997  0160C0                     __ptext111:
 19998                           	opt stack 0
 19999  0160C0                     _STP1:
 20000                           	opt stack 20
 20001                           
 20002                           ;main.c: 306: Coil_Setup();
 20003                           
 20004                           ;incstack = 0
 20005  0160C0  ECFC  F0AF         	call	_Coil_Setup	;wreg free
 20006                           
 20007                           ;main.c: 307: RA2 = 1;
 20008  0160C4  8480               	bsf	3968,2,c	;volatile
 20009  0160C6  0012               	return		;funcret
 20010  0160C8                     __end_of_STP1:
 20011                           	opt stack 0
 20012                           tosu	equ	0xFFF
 20013                           tosh	equ	0xFFE
 20014                           tosl	equ	0xFFD
 20015                           pclath	equ	0xFFA
 20016                           tblptru	equ	0xFF8
 20017                           tblptrh	equ	0xFF7
 20018                           tblptrl	equ	0xFF6
 20019                           tablat	equ	0xFF5
 20020                           prodh	equ	0xFF4
 20021                           prodl	equ	0xFF3
 20022                           intcon	equ	0xFF2
 20023                           indf0	equ	0xFEF
 20024                           postinc0	equ	0xFEE
 20025                           fsr0h	equ	0xFEA
 20026                           fsr0l	equ	0xFE9
 20027                           wreg	equ	0xFE8
 20028                           indf1	equ	0xFE7
 20029                           postdec1	equ	0xFE5
 20030                           fsr1h	equ	0xFE2
 20031                           fsr1l	equ	0xFE1
 20032                           indf2	equ	0xFDF
 20033                           postinc2	equ	0xFDE
 20034                           postdec2	equ	0xFDD
 20035                           plusw2	equ	0xFDB
 20036                           fsr2h	equ	0xFDA
 20037                           fsr2l	equ	0xFD9
 20038                           status	equ	0xFD8
 20039                           
 20040 ;; *************** function _Coil_Setup *****************
 20041 ;; Defined at:
 20042 ;;		line 271 in file "main.c"
 20043 ;; Parameters:    Size  Location     Type
 20044 ;;		None
 20045 ;; Auto vars:     Size  Location     Type
 20046 ;;		None
 20047 ;; Return value:  Size  Location     Type
 20048 ;;                  1    wreg      void 
 20049 ;; Registers used:
 20050 ;;		None
 20051 ;; Tracked objects:
 20052 ;;		On entry : 0/0
 20053 ;;		On exit  : 0/0
 20054 ;;		Unchanged: 0/0
 20055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20060 ;;Total ram usage:        0 bytes
 20061 ;; Hardware stack levels used:    1
 20062 ;; Hardware stack levels required when called:    7
 20063 ;; This function calls:
 20064 ;;		Nothing
 20065 ;; This function is called by:
 20066 ;;		_STP1
 20067 ;;		_STP2
 20068 ;;		_STP3
 20069 ;;		_STP4
 20070 ;; This function uses a non-reentrant model
 20071 ;;
 20072                           
 20073                           	psect	text112
 20074  015FF8                     __ptext112:
 20075                           	opt stack 0
 20076  015FF8                     _Coil_Setup:
 20077                           	opt stack 20
 20078                           
 20079                           ;main.c: 272: TRISA2 = 0;
 20080                           
 20081                           ;incstack = 0
 20082  015FF8  9492               	bcf	3986,2,c	;volatile
 20083                           
 20084                           ;main.c: 273: TRISA3 = 0;
 20085  015FFA  9692               	bcf	3986,3,c	;volatile
 20086                           
 20087                           ;main.c: 274: TRISD5 = 0;
 20088  015FFC  9A95               	bcf	3989,5,c	;volatile
 20089                           
 20090                           ;main.c: 275: TRISD7 = 0;
 20091  015FFE  9E95               	bcf	3989,7,c	;volatile
 20092                           
 20093                           ;main.c: 276: RD5 = 0;
 20094  016000  9A83               	bcf	3971,5,c	;volatile
 20095                           
 20096                           ;main.c: 277: RD7 = 0;
 20097  016002  9E83               	bcf	3971,7,c	;volatile
 20098                           
 20099                           ;main.c: 278: RA2 = 0;
 20100  016004  9480               	bcf	3968,2,c	;volatile
 20101                           
 20102                           ;main.c: 279: RA3 = 0;
 20103  016006  9680               	bcf	3968,3,c	;volatile
 20104  016008  0012               	return		;funcret
 20105  01600A                     __end_of_Coil_Setup:
 20106                           	opt stack 0
 20107                           tosu	equ	0xFFF
 20108                           tosh	equ	0xFFE
 20109                           tosl	equ	0xFFD
 20110                           pclath	equ	0xFFA
 20111                           tblptru	equ	0xFF8
 20112                           tblptrh	equ	0xFF7
 20113                           tblptrl	equ	0xFF6
 20114                           tablat	equ	0xFF5
 20115                           prodh	equ	0xFF4
 20116                           prodl	equ	0xFF3
 20117                           intcon	equ	0xFF2
 20118                           indf0	equ	0xFEF
 20119                           postinc0	equ	0xFEE
 20120                           fsr0h	equ	0xFEA
 20121                           fsr0l	equ	0xFE9
 20122                           wreg	equ	0xFE8
 20123                           indf1	equ	0xFE7
 20124                           postdec1	equ	0xFE5
 20125                           fsr1h	equ	0xFE2
 20126                           fsr1l	equ	0xFE1
 20127                           indf2	equ	0xFDF
 20128                           postinc2	equ	0xFDE
 20129                           postdec2	equ	0xFDD
 20130                           plusw2	equ	0xFDB
 20131                           fsr2h	equ	0xFDA
 20132                           fsr2l	equ	0xFD9
 20133                           status	equ	0xFD8
 20134                           
 20135 ;; *************** function _Console_Render *****************
 20136 ;; Defined at:
 20137 ;;		line 377 in file "Library/Console.c"
 20138 ;; Parameters:    Size  Location     Type
 20139 ;;		None
 20140 ;; Auto vars:     Size  Location     Type
 20141 ;;  lCursor         4   38[BANK0 ] struct Point
 20142 ;;  y               1   43[BANK0 ] unsigned char 
 20143 ;;  x               1   42[BANK0 ] unsigned char 
 20144 ;;  temp            1   37[BANK0 ] unsigned char 
 20145 ;;  Temp            2    0        unsigned short 
 20146 ;; Return value:  Size  Location     Type
 20147 ;;                  1    wreg      void 
 20148 ;; Registers used:
 20149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20150 ;; Tracked objects:
 20151 ;;		On entry : 0/0
 20152 ;;		On exit  : 0/0
 20153 ;;		Unchanged: 0/0
 20154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20156 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20157 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20158 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20159 ;;Total ram usage:        9 bytes
 20160 ;; Hardware stack levels used:    1
 20161 ;; Hardware stack levels required when called:   11
 20162 ;; This function calls:
 20163 ;;		_Console_MakeField
 20164 ;;		_LCD_DrawField
 20165 ;;		_LCD_FillRectangle
 20166 ;; This function is called by:
 20167 ;;		_Sensor_Observe2
 20168 ;;		_Closest_Object2
 20169 ;;		_Sensor_Observe
 20170 ;;		_Closest_Object
 20171 ;;		_main
 20172 ;; This function uses a non-reentrant model
 20173 ;;
 20174                           
 20175                           	psect	text113
 20176  0124E6                     __ptext113:
 20177                           	opt stack 0
 20178  0124E6                     _Console_Render:
 20179                           	opt stack 18
 20180                           
 20181                           ;Console.c: 379: Colour Temp;
 20182                           ;Console.c: 380: if (change)
 20183                           
 20184                           ;incstack = 0
 20185  0124E6  504E               	movf	_change,w,c
 20186  0124E8  B4D8               	btfsc	status,2,c
 20187  0124EA  0012               	return	
 20188                           
 20189                           ;Console.c: 381: {
 20190                           ;Console.c: 382: UINT8 x, y, temp;
 20191                           ;Console.c: 383: Point lCursor = {6,6};
 20192  0124EC  C1E9  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 20193  0124F0  C1EA  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 20194  0124F4  C1EB  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 20195  0124F8  C1EC  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 20196                           
 20197                           ;Console.c: 385: if (clearall)
 20198  0124FC  0100               	movlb	0	; () banked
 20199  0124FE  51F5               	movf	_clearall& (0+255),w,b
 20200  012500  B4D8               	btfsc	status,2,c
 20201  012502  D004               	goto	l1056
 20202                           
 20203                           ; BSR set to: 0
 20204                           ;Console.c: 386: {
 20205                           ;Console.c: 389: temp = lBufferY;
 20206  012504  C0F3  F085         	movff	_lBufferY,Console_Render@temp
 20207                           
 20208                           ; BSR set to: 0
 20209                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 20210  012508  0E0F               	movlw	15
 20211  01250A  6FF3               	movwf	_lBufferY& (0+255),b
 20212  01250C                     l1056:
 20213                           
 20214                           ; BSR set to: 0
 20215                           ;Console.c: 391: }
 20216                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 20217  01250C  0E00               	movlw	0
 20218  01250E  6F8B               	movwf	Console_Render@y& (0+255),b
 20219  012510  D0B9               	goto	l1057
 20220  012512                     
 20221                           ; BSR set to: 0
 20222                           ;Console.c: 394: {
 20223                           ;Console.c: 395: gForecolour = lCBuffer[y];
 20224                           
 20225                           ; BSR set to: 0
 20226  012512  518B               	movf	Console_Render@y& (0+255),w,b
 20227  012514  0D02               	mullw	2
 20228  012516  0E64               	movlw	low _lCBuffer
 20229  012518  24F3               	addwf	prodl,w,c
 20230  01251A  6ED9               	movwf	fsr2l,c
 20231  01251C  0E02               	movlw	high _lCBuffer
 20232  01251E  20F4               	addwfc	prodh,w,c
 20233  012520  6EDA               	movwf	fsr2h,c
 20234  012522  CFDE F1FB          	movff	postinc2,_gForecolour
 20235  012526  CFDD F1FC          	movff	postdec2,_gForecolour+1
 20236                           
 20237                           ; BSR set to: 0
 20238                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 20239  01252A  0E00               	movlw	0
 20240  01252C  6F8A               	movwf	Console_Render@x& (0+255),b
 20241  01252E                     l14876:
 20242                           
 20243                           ; BSR set to: 0
 20244  01252E  0E13               	movlw	19
 20245  012530  658A               	cpfsgt	Console_Render@x& (0+255),b
 20246  012532  D001               	goto	l1059
 20247  012534  D09E               	goto	u12120
 20248  012536                     l1059:
 20249                           
 20250                           ; BSR set to: 0
 20251                           ;Console.c: 397: {
 20252                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 20253                           
 20254                           ; BSR set to: 0
 20255  012536  518B               	movf	Console_Render@y& (0+255),w,b
 20256  012538  0D14               	mullw	20
 20257  01253A  0E18               	movlw	low _lBuffer
 20258  01253C  6F83               	movwf	??_Console_Render& (0+255),b
 20259  01253E  0E03               	movlw	high _lBuffer
 20260  012540  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20261  012542  50F3               	movf	prodl,w,c
 20262  012544  2783               	addwf	??_Console_Render& (0+255),f,b
 20263  012546  50F4               	movf	prodh,w,c
 20264  012548  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20265  01254A  518A               	movf	Console_Render@x& (0+255),w,b
 20266  01254C  0D01               	mullw	1
 20267  01254E  50F3               	movf	prodl,w,c
 20268  012550  2583               	addwf	??_Console_Render& (0+255),w,b
 20269  012552  6ED9               	movwf	fsr2l,c
 20270  012554  50F4               	movf	prodh,w,c
 20271  012556  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20272  012558  6EDA               	movwf	fsr2h,c
 20273  01255A  AEDF               	btfss	indf2,7,c
 20274  01255C  D083               	goto	l1063
 20275                           
 20276                           ; BSR set to: 0
 20277                           ;Console.c: 399: {
 20278                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 20279  01255E  518B               	movf	Console_Render@y& (0+255),w,b
 20280  012560  0D14               	mullw	20
 20281  012562  0E18               	movlw	low _lBuffer
 20282  012564  6F83               	movwf	??_Console_Render& (0+255),b
 20283  012566  0E03               	movlw	high _lBuffer
 20284  012568  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20285  01256A  50F3               	movf	prodl,w,c
 20286  01256C  2783               	addwf	??_Console_Render& (0+255),f,b
 20287  01256E  50F4               	movf	prodh,w,c
 20288  012570  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20289  012572  518A               	movf	Console_Render@x& (0+255),w,b
 20290  012574  0D01               	mullw	1
 20291  012576  50F3               	movf	prodl,w,c
 20292  012578  2583               	addwf	??_Console_Render& (0+255),w,b
 20293  01257A  6ED9               	movwf	fsr2l,c
 20294  01257C  50F4               	movf	prodh,w,c
 20295  01257E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20296  012580  6EDA               	movwf	fsr2h,c
 20297  012582  0E7F               	movlw	127
 20298  012584  16DF               	andwf	indf2,f,c
 20299                           
 20300                           ;Console.c: 401: if (lBuffer[y][x])
 20301  012586  518B               	movf	Console_Render@y& (0+255),w,b
 20302  012588  0D14               	mullw	20
 20303  01258A  0E18               	movlw	low _lBuffer
 20304  01258C  6F83               	movwf	??_Console_Render& (0+255),b
 20305  01258E  0E03               	movlw	high _lBuffer
 20306  012590  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20307  012592  50F3               	movf	prodl,w,c
 20308  012594  2783               	addwf	??_Console_Render& (0+255),f,b
 20309  012596  50F4               	movf	prodh,w,c
 20310  012598  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20311  01259A  518A               	movf	Console_Render@x& (0+255),w,b
 20312  01259C  0D01               	mullw	1
 20313  01259E  50F3               	movf	prodl,w,c
 20314  0125A0  2583               	addwf	??_Console_Render& (0+255),w,b
 20315  0125A2  6ED9               	movwf	fsr2l,c
 20316  0125A4  50F4               	movf	prodh,w,c
 20317  0125A6  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20318  0125A8  6EDA               	movwf	fsr2h,c
 20319  0125AA  50DF               	movf	indf2,w,c
 20320  0125AC  B4D8               	btfsc	status,2,c
 20321  0125AE  D043               	goto	l1062
 20322                           
 20323                           ; BSR set to: 0
 20324                           ;Console.c: 402: {
 20325                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20326  0125B0  C035  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20327  0125B4  C036  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20328  0125B8  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20329  0125BC  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20330  0125C0  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20331  0125C4  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20332  0125C8  C1F1  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20333  0125CC  C1F2  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20334  0125D0  C1F3  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20335  0125D4  C1F4  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20336  0125D8  EC36  F0A9         	call	_LCD_FillRectangle	;wreg free
 20337                           
 20338                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20339  0125DC  0100               	movlb	0	; () banked
 20340  0125DE  518B               	movf	Console_Render@y& (0+255),w,b
 20341  0125E0  0D14               	mullw	20
 20342  0125E2  0E18               	movlw	low _lBuffer
 20343  0125E4  6F83               	movwf	??_Console_Render& (0+255),b
 20344  0125E6  0E03               	movlw	high _lBuffer
 20345  0125E8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 20346  0125EA  50F3               	movf	prodl,w,c
 20347  0125EC  2783               	addwf	??_Console_Render& (0+255),f,b
 20348  0125EE  50F4               	movf	prodh,w,c
 20349  0125F0  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20350  0125F2  518A               	movf	Console_Render@x& (0+255),w,b
 20351  0125F4  0D01               	mullw	1
 20352  0125F6  50F3               	movf	prodl,w,c
 20353  0125F8  2583               	addwf	??_Console_Render& (0+255),w,b
 20354  0125FA  6ED9               	movwf	fsr2l,c
 20355  0125FC  50F4               	movf	prodh,w,c
 20356  0125FE  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20357  012600  6EDA               	movwf	fsr2h,c
 20358  012602  50DF               	movf	indf2,w,c
 20359  012604  EC1D  F0A1         	call	_Console_MakeField
 20360  012608  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 20361  01260C  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20362  012610  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20363  012614  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20364  012618  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20365  01261C  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20366  012620  C1F1  F078         	movff	_gCharSize,LCD_DrawField@pSize
 20367  012624  C1F2  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20368  012628  C1F3  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20369  01262C  C1F4  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20370  012630  ECCC  F0A4         	call	_LCD_DrawField	;wreg free
 20371                           
 20372                           ;Console.c: 405: }
 20373  012634  D017               	goto	l1063
 20374  012636                     l1062:
 20375                           
 20376                           ;Console.c: 406: else
 20377                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20378  012636  0E00               	movlw	0
 20379  012638  0100               	movlb	0	; () banked
 20380  01263A  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20381  01263C  0E00               	movlw	0
 20382  01263E  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20383  012640  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20384  012644  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20385  012648  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20386  01264C  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20387  012650  C1F1  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 20388  012654  C1F2  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20389  012658  C1F3  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20390  01265C  C1F4  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20391  012660  EC36  F0A9         	call	_LCD_FillRectangle	;wreg free
 20392  012664                     l1063:
 20393                           
 20394                           ;Console.c: 408: }
 20395                           ;Console.c: 409: lCursor.x += (5 + 1);
 20396  012664  0E06               	movlw	6
 20397  012666  0100               	movlb	0	; () banked
 20398  012668  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 20399  01266A  0E00               	movlw	0
 20400  01266C  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20401                           
 20402                           ; BSR set to: 0
 20403  01266E  2B8A               	incf	Console_Render@x& (0+255),f,b
 20404  012670  D75E               	goto	l14876
 20405  012672                     u12120:
 20406                           
 20407                           ; BSR set to: 0
 20408                           ;Console.c: 410: }
 20409                           ;Console.c: 411: lCursor.y += (7 + 1);
 20410                           
 20411                           ; BSR set to: 0
 20412  012672  0E08               	movlw	8
 20413  012674  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20414  012676  0E00               	movlw	0
 20415  012678  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;Console.c: 412: lCursor.x = 6;
 20419  01267A  0E00               	movlw	0
 20420  01267C  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20421  01267E  0E06               	movlw	6
 20422  012680  6F86               	movwf	Console_Render@lCursor& (0+255),b
 20423                           
 20424                           ; BSR set to: 0
 20425  012682  2B8B               	incf	Console_Render@y& (0+255),f,b
 20426  012684                     l1057:
 20427                           
 20428                           ; BSR set to: 0
 20429                           
 20430                           ; BSR set to: 0
 20431  012684  518B               	movf	Console_Render@y& (0+255),w,b
 20432  012686  5DF3               	subwf	_lBufferY& (0+255),w,b
 20433  012688  B0D8               	btfsc	status,0,c
 20434  01268A  D743               	goto	l1058
 20435                           
 20436                           ; BSR set to: 0
 20437                           ;Console.c: 413: }
 20438                           ;Console.c: 415: if (clearall)
 20439                           
 20440                           ; BSR set to: 0
 20441  01268C  51F5               	movf	_clearall& (0+255),w,b
 20442  01268E  B4D8               	btfsc	status,2,c
 20443  012690  0012               	return	
 20444                           
 20445                           ; BSR set to: 0
 20446                           ;Console.c: 416: {
 20447                           ;Console.c: 417: clearall = 0;
 20448  012692  0E00               	movlw	0
 20449  012694  6FF5               	movwf	_clearall& (0+255),b
 20450                           
 20451                           ; BSR set to: 0
 20452                           ;Console.c: 418: lBufferY = temp;
 20453  012696  C085  F0F3         	movff	Console_Render@temp,_lBufferY
 20454                           
 20455                           ; BSR set to: 0
 20456  01269A  0012               	return	
 20457  01269C                     __end_of_Console_Render:
 20458                           	opt stack 0
 20459                           tosu	equ	0xFFF
 20460                           tosh	equ	0xFFE
 20461                           tosl	equ	0xFFD
 20462                           pclath	equ	0xFFA
 20463                           tblptru	equ	0xFF8
 20464                           tblptrh	equ	0xFF7
 20465                           tblptrl	equ	0xFF6
 20466                           tablat	equ	0xFF5
 20467                           prodh	equ	0xFF4
 20468                           prodl	equ	0xFF3
 20469                           intcon	equ	0xFF2
 20470                           indf0	equ	0xFEF
 20471                           postinc0	equ	0xFEE
 20472                           fsr0h	equ	0xFEA
 20473                           fsr0l	equ	0xFE9
 20474                           wreg	equ	0xFE8
 20475                           indf1	equ	0xFE7
 20476                           postdec1	equ	0xFE5
 20477                           fsr1h	equ	0xFE2
 20478                           fsr1l	equ	0xFE1
 20479                           indf2	equ	0xFDF
 20480                           postinc2	equ	0xFDE
 20481                           postdec2	equ	0xFDD
 20482                           plusw2	equ	0xFDB
 20483                           fsr2h	equ	0xFDA
 20484                           fsr2l	equ	0xFD9
 20485                           status	equ	0xFD8
 20486                           
 20487 ;; *************** function _LCD_FillRectangle *****************
 20488 ;; Defined at:
 20489 ;;		line 318 in file "Library/LCD.c"
 20490 ;; Parameters:    Size  Location     Type
 20491 ;;  pColour         2    9[BANK0 ] unsigned short 
 20492 ;;  pPoint          4   11[BANK0 ] struct Point
 20493 ;;  pSize           4   15[BANK0 ] struct Point
 20494 ;; Auto vars:     Size  Location     Type
 20495 ;;  j               1   22[BANK0 ] unsigned char 
 20496 ;;  i               1   21[BANK0 ] unsigned char 
 20497 ;; Return value:  Size  Location     Type
 20498 ;;                  1    wreg      void 
 20499 ;; Registers used:
 20500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20501 ;; Tracked objects:
 20502 ;;		On entry : 0/0
 20503 ;;		On exit  : 0/0
 20504 ;;		Unchanged: 0/0
 20505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20506 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20508 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20509 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20510 ;;Total ram usage:       14 bytes
 20511 ;; Hardware stack levels used:    1
 20512 ;; Hardware stack levels required when called:   10
 20513 ;; This function calls:
 20514 ;;		_LCD_Word_Write
 20515 ;;		_Set_Addr_Window
 20516 ;; This function is called by:
 20517 ;;		_Console_Render
 20518 ;;		_Console_ClearLine
 20519 ;; This function uses a non-reentrant model
 20520 ;;
 20521                           
 20522                           	psect	text114
 20523  01526C                     __ptext114:
 20524                           	opt stack 0
 20525  01526C                     _LCD_FillRectangle:
 20526                           	opt stack 18
 20527                           
 20528                           ;LCD.c: 320: UINT8 i = 0x00;
 20529                           
 20530                           ;incstack = 0
 20531  01526C  0E00               	movlw	0
 20532  01526E  0100               	movlb	0	; () banked
 20533  015270  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 20534                           
 20535                           ;LCD.c: 321: UINT8 j = 0x00;
 20536  015272  0E00               	movlw	0
 20537  015274  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 20538                           
 20539                           ; BSR set to: 0
 20540                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20541  015276  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20542  01527A  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20543  01527C  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20544  01527E  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 20545  015280  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 20546  015282  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20547  015284  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 20548  015286  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 20549  015288  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 20550  01528A  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 20551  01528C  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20552  01528E  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20553  015290  EC0D  F0A2         	call	_Set_Addr_Window
 20554                           
 20555                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 20556  015294  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 20557  015298  0100               	movlb	0	; () banked
 20558  01529A  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 20559  01529C  B4D8               	btfsc	status,2,c
 20560  01529E  0012               	return	
 20561                           
 20562                           ; BSR set to: 0
 20563                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 20564                           
 20565                           ; BSR set to: 0
 20566  0152A0  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 20567  0152A4                     l14254:
 20568                           
 20569                           ; BSR set to: 0
 20570  0152A4  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 20571  0152A6  B4D8               	btfsc	status,2,c
 20572  0152A8  D009               	goto	u11530
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;LCD.c: 333: LCD_Word_Write(pColour);
 20576                           
 20577                           ; BSR set to: 0
 20578                           
 20579                           ; BSR set to: 0
 20580  0152AA  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 20581  0152AE  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 20582  0152B2  EC31  F0AF         	call	_LCD_Word_Write	;wreg free
 20583  0152B6  0100               	movlb	0	; () banked
 20584  0152B8  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 20585  0152BA  D7F4               	goto	l14254
 20586  0152BC                     u11530:
 20587                           
 20588                           ; BSR set to: 0
 20589                           
 20590                           ; BSR set to: 0
 20591  0152BC  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 20592  0152BE  D7ED               	goto	L9
 20593  0152C0                     __end_of_LCD_FillRectangle:
 20594                           	opt stack 0
 20595                           tosu	equ	0xFFF
 20596                           tosh	equ	0xFFE
 20597                           tosl	equ	0xFFD
 20598                           pclath	equ	0xFFA
 20599                           tblptru	equ	0xFF8
 20600                           tblptrh	equ	0xFF7
 20601                           tblptrl	equ	0xFF6
 20602                           tablat	equ	0xFF5
 20603                           prodh	equ	0xFF4
 20604                           prodl	equ	0xFF3
 20605                           intcon	equ	0xFF2
 20606                           indf0	equ	0xFEF
 20607                           postinc0	equ	0xFEE
 20608                           fsr0h	equ	0xFEA
 20609                           fsr0l	equ	0xFE9
 20610                           wreg	equ	0xFE8
 20611                           indf1	equ	0xFE7
 20612                           postdec1	equ	0xFE5
 20613                           fsr1h	equ	0xFE2
 20614                           fsr1l	equ	0xFE1
 20615                           indf2	equ	0xFDF
 20616                           postinc2	equ	0xFDE
 20617                           postdec2	equ	0xFDD
 20618                           plusw2	equ	0xFDB
 20619                           fsr2h	equ	0xFDA
 20620                           fsr2l	equ	0xFD9
 20621                           status	equ	0xFD8
 20622                           
 20623 ;; *************** function _LCD_DrawField *****************
 20624 ;; Defined at:
 20625 ;;		line 393 in file "Library/LCD.c"
 20626 ;; Parameters:    Size  Location     Type
 20627 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 20628 ;;		 -> Console_MakeField@Fill(70), 
 20629 ;;  pPoint          4   20[BANK0 ] struct Point
 20630 ;;  pSize           4   24[BANK0 ] struct Point
 20631 ;; Auto vars:     Size  Location     Type
 20632 ;;  count           2   30[BANK0 ] unsigned short 
 20633 ;;  i               1   34[BANK0 ] unsigned char 
 20634 ;;  ymax            1   33[BANK0 ] unsigned char 
 20635 ;;  xmax            1   32[BANK0 ] unsigned char 
 20636 ;; Return value:  Size  Location     Type
 20637 ;;                  1    wreg      void 
 20638 ;; Registers used:
 20639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20640 ;; Tracked objects:
 20641 ;;		On entry : 0/0
 20642 ;;		On exit  : 0/0
 20643 ;;		Unchanged: 0/0
 20644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20645 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20646 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20648 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20649 ;;Total ram usage:       17 bytes
 20650 ;; Hardware stack levels used:    1
 20651 ;; Hardware stack levels required when called:   10
 20652 ;; This function calls:
 20653 ;;		_LCD_Word_Write
 20654 ;;		_Set_Addr_Window
 20655 ;;		___wmul
 20656 ;; This function is called by:
 20657 ;;		_Console_Render
 20658 ;; This function uses a non-reentrant model
 20659 ;;
 20660                           
 20661                           	psect	text115
 20662  014998                     __ptext115:
 20663                           	opt stack 0
 20664  014998                     _LCD_DrawField:
 20665                           	opt stack 18
 20666                           
 20667                           ;LCD.c: 396: UINT8 i = 0x00;
 20668                           
 20669                           ; BSR set to: 0
 20670                           ;incstack = 0
 20671  014998  0E00               	movlw	0
 20672  01499A  0100               	movlb	0	; () banked
 20673  01499C  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20674                           
 20675                           ; BSR set to: 0
 20676                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 20677  01499E  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20678  0149A0  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 20679  0149A2  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 20680                           
 20681                           ; BSR set to: 0
 20682                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 20683  0149A4  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 20684  0149A6  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 20685  0149A8  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 20686                           
 20687                           ; BSR set to: 0
 20688                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 20689  0149AA  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 20690  0149AE  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 20691  0149B2  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 20692  0149B6  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 20693  0149BA  EC4A  F0AE         	call	___wmul	;wreg free
 20694  0149BE  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 20695  0149C2  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 20696                           
 20697                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 20698  0149C6  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 20699  0149CA  0100               	movlb	0	; () banked
 20700  0149CC  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 20701  0149CE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 20702  0149D0  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 20703  0149D2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 20704  0149D4  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 20705  0149D6  EC0D  F0A2         	call	_Set_Addr_Window
 20706                           
 20707                           ;LCD.c: 403: for(i = 0; i < count; i++)
 20708  0149DA  0E00               	movlw	0
 20709  0149DC  0100               	movlb	0	; () banked
 20710  0149DE  6F82               	movwf	LCD_DrawField@i& (0+255),b
 20711  0149E0  D010               	goto	l183
 20712  0149E2                     
 20713                           ; BSR set to: 0
 20714                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 20715                           
 20716                           ; BSR set to: 0
 20717  0149E2  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20718  0149E4  0D02               	mullw	2
 20719  0149E6  50F3               	movf	prodl,w,c
 20720  0149E8  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 20721  0149EA  6ED9               	movwf	fsr2l,c
 20722  0149EC  50F4               	movf	prodh,w,c
 20723  0149EE  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 20724  0149F0  6EDA               	movwf	fsr2h,c
 20725  0149F2  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 20726  0149F6  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 20727  0149FA  EC31  F0AF         	call	_LCD_Word_Write	;wreg free
 20728  0149FE  0100               	movlb	0	; () banked
 20729  014A00  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 20730  014A02                     l183:
 20731                           
 20732                           ; BSR set to: 0
 20733                           
 20734                           ; BSR set to: 0
 20735  014A02  5182               	movf	LCD_DrawField@i& (0+255),w,b
 20736  014A04  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 20737  014A06  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 20738  014A08  517E               	movf	LCD_DrawField@count& (0+255),w,b
 20739  014A0A  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 20740  014A0C  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 20741  014A0E  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 20742  014A10  B0D8               	btfsc	status,0,c
 20743  014A12  0012               	return	
 20744  014A14  D7E6               	goto	l184
 20745  014A16                     __end_of_LCD_DrawField:
 20746                           	opt stack 0
 20747                           tosu	equ	0xFFF
 20748                           tosh	equ	0xFFE
 20749                           tosl	equ	0xFFD
 20750                           pclath	equ	0xFFA
 20751                           tblptru	equ	0xFF8
 20752                           tblptrh	equ	0xFF7
 20753                           tblptrl	equ	0xFF6
 20754                           tablat	equ	0xFF5
 20755                           prodh	equ	0xFF4
 20756                           prodl	equ	0xFF3
 20757                           intcon	equ	0xFF2
 20758                           indf0	equ	0xFEF
 20759                           postinc0	equ	0xFEE
 20760                           fsr0h	equ	0xFEA
 20761                           fsr0l	equ	0xFE9
 20762                           wreg	equ	0xFE8
 20763                           indf1	equ	0xFE7
 20764                           postdec1	equ	0xFE5
 20765                           fsr1h	equ	0xFE2
 20766                           fsr1l	equ	0xFE1
 20767                           indf2	equ	0xFDF
 20768                           postinc2	equ	0xFDE
 20769                           postdec2	equ	0xFDD
 20770                           plusw2	equ	0xFDB
 20771                           fsr2h	equ	0xFDA
 20772                           fsr2l	equ	0xFD9
 20773                           status	equ	0xFD8
 20774                           
 20775 ;; *************** function _Set_Addr_Window *****************
 20776 ;; Defined at:
 20777 ;;		line 214 in file "Library/LCD.c"
 20778 ;; Parameters:    Size  Location     Type
 20779 ;;  xs              1    wreg     unsigned char 
 20780 ;;  ys              1    5[BANK0 ] unsigned char 
 20781 ;;  xe              1    6[BANK0 ] unsigned char 
 20782 ;;  ye              1    7[BANK0 ] unsigned char 
 20783 ;; Auto vars:     Size  Location     Type
 20784 ;;  xs              1    8[BANK0 ] unsigned char 
 20785 ;; Return value:  Size  Location     Type
 20786 ;;                  1    wreg      void 
 20787 ;; Registers used:
 20788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20789 ;; Tracked objects:
 20790 ;;		On entry : 0/0
 20791 ;;		On exit  : 0/0
 20792 ;;		Unchanged: 0/0
 20793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20794 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20797 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20798 ;;Total ram usage:        4 bytes
 20799 ;; Hardware stack levels used:    1
 20800 ;; Hardware stack levels required when called:    9
 20801 ;; This function calls:
 20802 ;;		_LCD_Write
 20803 ;; This function is called by:
 20804 ;;		_LCD_Fill
 20805 ;;		_LCD_FillRectangle
 20806 ;;		_LCD_DrawField
 20807 ;;		_RAM_Address_Set
 20808 ;;		_LCD_DrawPixel
 20809 ;; This function uses a non-reentrant model
 20810 ;;
 20811                           
 20812                           	psect	text116
 20813  01441A                     __ptext116:
 20814                           	opt stack 0
 20815  01441A                     _Set_Addr_Window:
 20816                           	opt stack 18
 20817                           
 20818                           ; BSR set to: 0
 20819                           ;incstack = 0
 20820                           ;Set_Addr_Window@xs stored from wreg
 20821  01441A  0100               	movlb	0	; () banked
 20822  01441C  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 20823                           
 20824                           ;LCD.c: 216: ys+=2;
 20825  01441E  0E02               	movlw	2
 20826  014420  0100               	movlb	0	; () banked
 20827  014422  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 20828                           
 20829                           ;LCD.c: 217: ye+=2;
 20830  014424  0E02               	movlw	2
 20831  014426  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 20832                           
 20833                           ;LCD.c: 218: xs+=3;
 20834  014428  0E03               	movlw	3
 20835  01442A  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 20836                           
 20837                           ;LCD.c: 219: xe+=3;
 20838  01442C  0E03               	movlw	3
 20839  01442E  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 20840                           
 20841                           ; BSR set to: 0
 20842                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 20843  014430  0E00               	movlw	0
 20844  014432  6F63               	movwf	LCD_Write@mode& (0+255),b
 20845  014434  0E2A               	movlw	42
 20846  014436  ECDC  F0AE         	call	_LCD_Write
 20847                           
 20848                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 20849  01443A  0E01               	movlw	1
 20850  01443C  0100               	movlb	0	; () banked
 20851  01443E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20852  014440  0E00               	movlw	0
 20853  014442  ECDC  F0AE         	call	_LCD_Write
 20854                           
 20855                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 20856  014446  0E01               	movlw	1
 20857  014448  0100               	movlb	0	; () banked
 20858  01444A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20859  01444C  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 20860  01444E  ECDC  F0AE         	call	_LCD_Write
 20861                           
 20862                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 20863  014452  0E01               	movlw	1
 20864  014454  0100               	movlb	0	; () banked
 20865  014456  6F63               	movwf	LCD_Write@mode& (0+255),b
 20866  014458  0E00               	movlw	0
 20867  01445A  ECDC  F0AE         	call	_LCD_Write
 20868                           
 20869                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 20870  01445E  0E01               	movlw	1
 20871  014460  0100               	movlb	0	; () banked
 20872  014462  6F63               	movwf	LCD_Write@mode& (0+255),b
 20873  014464  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 20874  014466  ECDC  F0AE         	call	_LCD_Write
 20875                           
 20876                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 20877  01446A  0E00               	movlw	0
 20878  01446C  0100               	movlb	0	; () banked
 20879  01446E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20880  014470  0E2B               	movlw	43
 20881  014472  ECDC  F0AE         	call	_LCD_Write
 20882                           
 20883                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 20884  014476  0E01               	movlw	1
 20885  014478  0100               	movlb	0	; () banked
 20886  01447A  6F63               	movwf	LCD_Write@mode& (0+255),b
 20887  01447C  0E00               	movlw	0
 20888  01447E  ECDC  F0AE         	call	_LCD_Write
 20889                           
 20890                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 20891  014482  0E01               	movlw	1
 20892  014484  0100               	movlb	0	; () banked
 20893  014486  6F63               	movwf	LCD_Write@mode& (0+255),b
 20894  014488  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 20895  01448A  ECDC  F0AE         	call	_LCD_Write
 20896                           
 20897                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 20898  01448E  0E01               	movlw	1
 20899  014490  0100               	movlb	0	; () banked
 20900  014492  6F63               	movwf	LCD_Write@mode& (0+255),b
 20901  014494  0E00               	movlw	0
 20902  014496  ECDC  F0AE         	call	_LCD_Write
 20903                           
 20904                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 20905  01449A  0E01               	movlw	1
 20906  01449C  0100               	movlb	0	; () banked
 20907  01449E  6F63               	movwf	LCD_Write@mode& (0+255),b
 20908  0144A0  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 20909  0144A2  ECDC  F0AE         	call	_LCD_Write
 20910                           
 20911                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 20912  0144A6  0E00               	movlw	0
 20913  0144A8  0100               	movlb	0	; () banked
 20914  0144AA  6F63               	movwf	LCD_Write@mode& (0+255),b
 20915  0144AC  0E2C               	movlw	44
 20916  0144AE  ECDC  F0AE         	call	_LCD_Write
 20917  0144B2  0012               	return		;funcret
 20918  0144B4                     __end_of_Set_Addr_Window:
 20919                           	opt stack 0
 20920                           tosu	equ	0xFFF
 20921                           tosh	equ	0xFFE
 20922                           tosl	equ	0xFFD
 20923                           pclath	equ	0xFFA
 20924                           tblptru	equ	0xFF8
 20925                           tblptrh	equ	0xFF7
 20926                           tblptrl	equ	0xFF6
 20927                           tablat	equ	0xFF5
 20928                           prodh	equ	0xFF4
 20929                           prodl	equ	0xFF3
 20930                           intcon	equ	0xFF2
 20931                           indf0	equ	0xFEF
 20932                           postinc0	equ	0xFEE
 20933                           fsr0h	equ	0xFEA
 20934                           fsr0l	equ	0xFE9
 20935                           wreg	equ	0xFE8
 20936                           indf1	equ	0xFE7
 20937                           postdec1	equ	0xFE5
 20938                           fsr1h	equ	0xFE2
 20939                           fsr1l	equ	0xFE1
 20940                           indf2	equ	0xFDF
 20941                           postinc2	equ	0xFDE
 20942                           postdec2	equ	0xFDD
 20943                           plusw2	equ	0xFDB
 20944                           fsr2h	equ	0xFDA
 20945                           fsr2l	equ	0xFD9
 20946                           status	equ	0xFD8
 20947                           
 20948 ;; *************** function _LCD_Word_Write *****************
 20949 ;; Defined at:
 20950 ;;		line 198 in file "Library/LCD.c"
 20951 ;; Parameters:    Size  Location     Type
 20952 ;;  value           2    5[BANK0 ] unsigned short 
 20953 ;; Auto vars:     Size  Location     Type
 20954 ;;		None
 20955 ;; Return value:  Size  Location     Type
 20956 ;;                  1    wreg      void 
 20957 ;; Registers used:
 20958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20959 ;; Tracked objects:
 20960 ;;		On entry : 0/0
 20961 ;;		On exit  : 0/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20964 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20968 ;;Total ram usage:        2 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; Hardware stack levels required when called:    9
 20971 ;; This function calls:
 20972 ;;		_LCD_Write
 20973 ;; This function is called by:
 20974 ;;		_LCD_Fill
 20975 ;;		_LCD_FillRectangle
 20976 ;;		_LCD_DrawField
 20977 ;;		_LCD_DrawPixel
 20978 ;; This function uses a non-reentrant model
 20979 ;;
 20980                           
 20981                           	psect	text117
 20982  015E62                     __ptext117:
 20983                           	opt stack 0
 20984  015E62                     _LCD_Word_Write:
 20985                           	opt stack 18
 20986                           
 20987                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20988                           
 20989                           ;incstack = 0
 20990  015E62  0E01               	movlw	1
 20991  015E64  0100               	movlb	0	; () banked
 20992  015E66  6F63               	movwf	LCD_Write@mode& (0+255),b
 20993  015E68  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20994  015E6A  ECDC  F0AE         	call	_LCD_Write
 20995                           
 20996                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20997  015E6E  0E01               	movlw	1
 20998  015E70  0100               	movlb	0	; () banked
 20999  015E72  6F63               	movwf	LCD_Write@mode& (0+255),b
 21000  015E74  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 21001  015E76  ECDC  F0AE         	call	_LCD_Write
 21002  015E7A  0012               	return		;funcret
 21003  015E7C                     __end_of_LCD_Word_Write:
 21004                           	opt stack 0
 21005                           tosu	equ	0xFFF
 21006                           tosh	equ	0xFFE
 21007                           tosl	equ	0xFFD
 21008                           pclath	equ	0xFFA
 21009                           tblptru	equ	0xFF8
 21010                           tblptrh	equ	0xFF7
 21011                           tblptrl	equ	0xFF6
 21012                           tablat	equ	0xFF5
 21013                           prodh	equ	0xFF4
 21014                           prodl	equ	0xFF3
 21015                           intcon	equ	0xFF2
 21016                           indf0	equ	0xFEF
 21017                           postinc0	equ	0xFEE
 21018                           fsr0h	equ	0xFEA
 21019                           fsr0l	equ	0xFE9
 21020                           wreg	equ	0xFE8
 21021                           indf1	equ	0xFE7
 21022                           postdec1	equ	0xFE5
 21023                           fsr1h	equ	0xFE2
 21024                           fsr1l	equ	0xFE1
 21025                           indf2	equ	0xFDF
 21026                           postinc2	equ	0xFDE
 21027                           postdec2	equ	0xFDD
 21028                           plusw2	equ	0xFDB
 21029                           fsr2h	equ	0xFDA
 21030                           fsr2l	equ	0xFD9
 21031                           status	equ	0xFD8
 21032                           
 21033 ;; *************** function _LCD_Write *****************
 21034 ;; Defined at:
 21035 ;;		line 67 in file "Library/LCD.c"
 21036 ;; Parameters:    Size  Location     Type
 21037 ;;  value           1    wreg     unsigned char 
 21038 ;;  mode            1    3[BANK0 ] enum E6761
 21039 ;; Auto vars:     Size  Location     Type
 21040 ;;  value           1    4[BANK0 ] unsigned char 
 21041 ;; Return value:  Size  Location     Type
 21042 ;;                  1    wreg      void 
 21043 ;; Registers used:
 21044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21045 ;; Tracked objects:
 21046 ;;		On entry : 0/0
 21047 ;;		On exit  : 0/0
 21048 ;;		Unchanged: 0/0
 21049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21050 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21054 ;;Total ram usage:        2 bytes
 21055 ;; Hardware stack levels used:    1
 21056 ;; Hardware stack levels required when called:    8
 21057 ;; This function calls:
 21058 ;;		_Mode_Set
 21059 ;;		_SPI_Send
 21060 ;; This function is called by:
 21061 ;;		_LCD_Init
 21062 ;;		_LCD_Word_Write
 21063 ;;		_Set_Addr_Window
 21064 ;;		_Set_Rotation
 21065 ;;		_LCD_WriteCMD
 21066 ;;		_LCD_WriteData
 21067 ;;		_LCD_Data_Write
 21068 ;;		_LCD_Data_Write_4k
 21069 ;;		_Invert_Display
 21070 ;; This function uses a non-reentrant model
 21071 ;;
 21072                           
 21073                           	psect	text118
 21074  015DB8                     __ptext118:
 21075                           	opt stack 0
 21076  015DB8                     _LCD_Write:
 21077                           	opt stack 18
 21078                           
 21079                           ;incstack = 0
 21080                           ;LCD_Write@value stored from wreg
 21081  015DB8  0100               	movlb	0	; () banked
 21082  015DBA  6F64               	movwf	LCD_Write@value& (0+255),b
 21083                           
 21084                           ;LCD.c: 89: Mode_Set(mode);
 21085  015DBC  0100               	movlb	0	; () banked
 21086  015DBE  5163               	movf	LCD_Write@mode& (0+255),w,b
 21087  015DC0  EC05  F0B0         	call	_Mode_Set
 21088                           
 21089                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 21090  015DC4  0E80               	movlw	low _SPI2
 21091  015DC6  0100               	movlb	0	; () banked
 21092  015DC8  6F60               	movwf	SPI_Send@pInput& (0+255),b
 21093  015DCA  0E01               	movlw	high _SPI2
 21094  015DCC  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 21095  015DCE  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 21096  015DD2  EC1E  F0A7         	call	_SPI_Send	;wreg free
 21097  015DD6  0012               	return		;funcret
 21098  015DD8                     __end_of_LCD_Write:
 21099                           	opt stack 0
 21100                           tosu	equ	0xFFF
 21101                           tosh	equ	0xFFE
 21102                           tosl	equ	0xFFD
 21103                           pclath	equ	0xFFA
 21104                           tblptru	equ	0xFF8
 21105                           tblptrh	equ	0xFF7
 21106                           tblptrl	equ	0xFF6
 21107                           tablat	equ	0xFF5
 21108                           prodh	equ	0xFF4
 21109                           prodl	equ	0xFF3
 21110                           intcon	equ	0xFF2
 21111                           indf0	equ	0xFEF
 21112                           postinc0	equ	0xFEE
 21113                           fsr0h	equ	0xFEA
 21114                           fsr0l	equ	0xFE9
 21115                           wreg	equ	0xFE8
 21116                           indf1	equ	0xFE7
 21117                           postdec1	equ	0xFE5
 21118                           fsr1h	equ	0xFE2
 21119                           fsr1l	equ	0xFE1
 21120                           indf2	equ	0xFDF
 21121                           postinc2	equ	0xFDE
 21122                           postdec2	equ	0xFDD
 21123                           plusw2	equ	0xFDB
 21124                           fsr2h	equ	0xFDA
 21125                           fsr2l	equ	0xFD9
 21126                           status	equ	0xFD8
 21127                           
 21128 ;; *************** function _Mode_Set *****************
 21129 ;; Defined at:
 21130 ;;		line 40 in file "Library/LCD.c"
 21131 ;; Parameters:    Size  Location     Type
 21132 ;;  pMode           1    wreg     enum E6761
 21133 ;; Auto vars:     Size  Location     Type
 21134 ;;  pMode           1    0[BANK0 ] enum E6761
 21135 ;; Return value:  Size  Location     Type
 21136 ;;                  1    wreg      void 
 21137 ;; Registers used:
 21138 ;;		wreg
 21139 ;; Tracked objects:
 21140 ;;		On entry : 0/0
 21141 ;;		On exit  : 0/0
 21142 ;;		Unchanged: 0/0
 21143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21148 ;;Total ram usage:        1 bytes
 21149 ;; Hardware stack levels used:    1
 21150 ;; Hardware stack levels required when called:    7
 21151 ;; This function calls:
 21152 ;;		Nothing
 21153 ;; This function is called by:
 21154 ;;		_LCD_Write
 21155 ;; This function uses a non-reentrant model
 21156 ;;
 21157                           
 21158                           	psect	text119
 21159  01600A                     __ptext119:
 21160                           	opt stack 0
 21161  01600A                     _Mode_Set:
 21162                           	opt stack 18
 21163                           
 21164                           ;incstack = 0
 21165                           ;Mode_Set@pMode stored from wreg
 21166  01600A  0100               	movlb	0	; () banked
 21167  01600C  6F60               	movwf	Mode_Set@pMode& (0+255),b
 21168                           
 21169                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21170  01600E  0100               	movlb	0	; () banked
 21171  016010  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 21172  016012  D002               	bra	u9635
 21173  016014  9E85               	bcf	3973,7,c	;volatile
 21174  016016  D001               	bra	u9636
 21175  016018                     u9635:
 21176  016018  8E85               	bsf	3973,7,c	;volatile
 21177  01601A                     u9636:
 21178  01601A  0012               	return		;funcret
 21179  01601C                     __end_of_Mode_Set:
 21180                           	opt stack 0
 21181                           tosu	equ	0xFFF
 21182                           tosh	equ	0xFFE
 21183                           tosl	equ	0xFFD
 21184                           pclath	equ	0xFFA
 21185                           tblptru	equ	0xFF8
 21186                           tblptrh	equ	0xFF7
 21187                           tblptrl	equ	0xFF6
 21188                           tablat	equ	0xFF5
 21189                           prodh	equ	0xFF4
 21190                           prodl	equ	0xFF3
 21191                           intcon	equ	0xFF2
 21192                           indf0	equ	0xFEF
 21193                           postinc0	equ	0xFEE
 21194                           fsr0h	equ	0xFEA
 21195                           fsr0l	equ	0xFE9
 21196                           wreg	equ	0xFE8
 21197                           indf1	equ	0xFE7
 21198                           postdec1	equ	0xFE5
 21199                           fsr1h	equ	0xFE2
 21200                           fsr1l	equ	0xFE1
 21201                           indf2	equ	0xFDF
 21202                           postinc2	equ	0xFDE
 21203                           postdec2	equ	0xFDD
 21204                           plusw2	equ	0xFDB
 21205                           fsr2h	equ	0xFDA
 21206                           fsr2l	equ	0xFD9
 21207                           status	equ	0xFD8
 21208                           
 21209 ;; *************** function _Console_MakeField *****************
 21210 ;; Defined at:
 21211 ;;		line 435 in file "Library/Console.c"
 21212 ;; Parameters:    Size  Location     Type
 21213 ;;  pInput          1    wreg     unsigned char 
 21214 ;; Auto vars:     Size  Location     Type
 21215 ;;  pInput          1   11[BANK0 ] unsigned char 
 21216 ;;  y               1   17[BANK0 ] unsigned char 
 21217 ;;  x               1   16[BANK0 ] unsigned char 
 21218 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21219 ;;		 -> Font5x7(480), 
 21220 ;;  Index           2    9[BANK0 ] unsigned short 
 21221 ;; Return value:  Size  Location     Type
 21222 ;;                  2    5[BANK0 ] PTR unsigned short 
 21223 ;; Registers used:
 21224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21225 ;; Tracked objects:
 21226 ;;		On entry : 0/0
 21227 ;;		On exit  : 0/0
 21228 ;;		Unchanged: 0/0
 21229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21230 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21231 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21232 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21233 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21234 ;;Total ram usage:       13 bytes
 21235 ;; Hardware stack levels used:    1
 21236 ;; Hardware stack levels required when called:    8
 21237 ;; This function calls:
 21238 ;;		_Byte_GetBit
 21239 ;; This function is called by:
 21240 ;;		_Console_Render
 21241 ;; This function uses a non-reentrant model
 21242 ;;
 21243                           
 21244                           	psect	text120
 21245  01423A                     __ptext120:
 21246                           	opt stack 0
 21247  01423A                     _Console_MakeField:
 21248                           	opt stack 20
 21249                           
 21250                           ;incstack = 0
 21251                           ;Console_MakeField@pInput stored from wreg
 21252  01423A  0100               	movlb	0	; () banked
 21253  01423C  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 21254                           
 21255                           ;Console.c: 437: static Colour Fill[7][5];
 21256                           ;Console.c: 438: pInput -= 32;
 21257  01423E  0E20               	movlw	32
 21258  014240  0100               	movlb	0	; () banked
 21259  014242  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 21260                           
 21261                           ; BSR set to: 0
 21262                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 21263  014244  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 21264  014246  0D05               	mullw	5
 21265  014248  CFF3 F069          	movff	prodl,Console_MakeField@Index
 21266  01424C  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 21267                           
 21268                           ; BSR set to: 0
 21269                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 21270  014250  0E43               	movlw	low _Font5x7
 21271  014252  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 21272  014254  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 21273  014256  0EFC               	movlw	high _Font5x7
 21274  014258  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 21275  01425A  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 21279  01425C  0E00               	movlw	0
 21280  01425E  6F70               	movwf	Console_MakeField@x& (0+255),b
 21281  014260                     l14476:
 21282                           
 21283                           ; BSR set to: 0
 21284  014260  0E04               	movlw	4
 21285  014262  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 21286  014264  D001               	goto	l1077
 21287  014266  D037               	goto	u11720
 21288  014268                     l1077:
 21289                           
 21290                           ; BSR set to: 0
 21291                           ;Console.c: 444: {
 21292                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 21293                           
 21294                           ; BSR set to: 0
 21295  014268  0E00               	movlw	0
 21296  01426A  6F71               	movwf	Console_MakeField@y& (0+255),b
 21297  01426C                     l14482:
 21298                           
 21299                           ; BSR set to: 0
 21300  01426C  0E06               	movlw	6
 21301  01426E  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 21302  014270  D001               	goto	l1079
 21303  014272  D02D               	goto	u11710
 21304  014274                     l1079:
 21305                           
 21306                           ; BSR set to: 0
 21307                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 21308                           
 21309                           ; BSR set to: 0
 21310  014274  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 21311  014278  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 21312  01427C  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 21313  014280  EC0C  F0AE         	call	_Byte_GetBit	;wreg free
 21314  014284  0900               	iorlw	0
 21315  014286  A4D8               	btfss	status,2,c
 21316  014288  D005               	goto	l1082
 21317  01428A  C035  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 21318  01428E  C036  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 21319  014292  D004               	goto	l1084
 21320  014294                     l1082:
 21321  014294  C1FB  F06E         	movff	_gForecolour,_Console_MakeField$10974
 21322  014298  C1FC  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 21323  01429C                     l1084:
 21324  01429C  0100               	movlb	0	; () banked
 21325  01429E  5171               	movf	Console_MakeField@y& (0+255),w,b
 21326  0142A0  0D0A               	mullw	10
 21327  0142A2  0E82               	movlw	low Console_MakeField@Fill
 21328  0142A4  6F67               	movwf	??_Console_MakeField& (0+255),b
 21329  0142A6  0E02               	movlw	high Console_MakeField@Fill
 21330  0142A8  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 21331  0142AA  50F3               	movf	prodl,w,c
 21332  0142AC  2767               	addwf	??_Console_MakeField& (0+255),f,b
 21333  0142AE  50F4               	movf	prodh,w,c
 21334  0142B0  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 21335  0142B2  5170               	movf	Console_MakeField@x& (0+255),w,b
 21336  0142B4  0D02               	mullw	2
 21337  0142B6  50F3               	movf	prodl,w,c
 21338  0142B8  2567               	addwf	??_Console_MakeField& (0+255),w,b
 21339  0142BA  6ED9               	movwf	fsr2l,c
 21340  0142BC  50F4               	movf	prodh,w,c
 21341  0142BE  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 21342  0142C0  6EDA               	movwf	fsr2h,c
 21343  0142C2  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 21344  0142C6  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 21345                           
 21346                           ; BSR set to: 0
 21347  0142CA  2B71               	incf	Console_MakeField@y& (0+255),f,b
 21348  0142CC  D7CF               	goto	l14482
 21349  0142CE                     u11710:
 21350                           
 21351                           ; BSR set to: 0
 21352                           ;Console.c: 447: Column += 1;
 21353                           
 21354                           ; BSR set to: 0
 21355  0142CE  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 21356  0142D0  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 21357  0142D2  2B70               	incf	Console_MakeField@x& (0+255),f,b
 21358  0142D4  D7C5               	goto	l14476
 21359  0142D6                     u11720:
 21360                           
 21361                           ; BSR set to: 0
 21362                           ;Console.c: 448: }
 21363                           ;Console.c: 449: return (ColourPtr)Fill;
 21364                           
 21365                           ; BSR set to: 0
 21366  0142D6  0E82               	movlw	low Console_MakeField@Fill
 21367  0142D8  6F65               	movwf	?_Console_MakeField& (0+255),b
 21368  0142DA  0E02               	movlw	high Console_MakeField@Fill
 21369  0142DC  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 21370  0142DE  0012               	return	
 21371  0142E0                     __end_of_Console_MakeField:
 21372                           	opt stack 0
 21373                           tosu	equ	0xFFF
 21374                           tosh	equ	0xFFE
 21375                           tosl	equ	0xFFD
 21376                           pclath	equ	0xFFA
 21377                           tblptru	equ	0xFF8
 21378                           tblptrh	equ	0xFF7
 21379                           tblptrl	equ	0xFF6
 21380                           tablat	equ	0xFF5
 21381                           prodh	equ	0xFF4
 21382                           prodl	equ	0xFF3
 21383                           intcon	equ	0xFF2
 21384                           indf0	equ	0xFEF
 21385                           postinc0	equ	0xFEE
 21386                           fsr0h	equ	0xFEA
 21387                           fsr0l	equ	0xFE9
 21388                           wreg	equ	0xFE8
 21389                           indf1	equ	0xFE7
 21390                           postdec1	equ	0xFE5
 21391                           fsr1h	equ	0xFE2
 21392                           fsr1l	equ	0xFE1
 21393                           indf2	equ	0xFDF
 21394                           postinc2	equ	0xFDE
 21395                           postdec2	equ	0xFDD
 21396                           plusw2	equ	0xFDB
 21397                           fsr2h	equ	0xFDA
 21398                           fsr2l	equ	0xFD9
 21399                           status	equ	0xFD8
 21400                           
 21401 ;; *************** function _Byte_GetBit *****************
 21402 ;; Defined at:
 21403 ;;		line 38 in file "Library/Types.c"
 21404 ;; Parameters:    Size  Location     Type
 21405 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21406 ;;		 -> Font5x7(480), 
 21407 ;;  pBit            1    2[BANK0 ] unsigned char 
 21408 ;; Auto vars:     Size  Location     Type
 21409 ;;  Output          1    4[BANK0 ] unsigned char 
 21410 ;; Return value:  Size  Location     Type
 21411 ;;                  1    wreg      unsigned char 
 21412 ;; Registers used:
 21413 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 21414 ;; Tracked objects:
 21415 ;;		On entry : 0/0
 21416 ;;		On exit  : 0/0
 21417 ;;		Unchanged: 0/0
 21418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21419 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21422 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21423 ;;Total ram usage:        5 bytes
 21424 ;; Hardware stack levels used:    1
 21425 ;; Hardware stack levels required when called:    7
 21426 ;; This function calls:
 21427 ;;		Nothing
 21428 ;; This function is called by:
 21429 ;;		_Console_MakeField
 21430 ;;		_Word_GetBit
 21431 ;; This function uses a non-reentrant model
 21432 ;;
 21433                           
 21434                           	psect	text121
 21435  015C18                     __ptext121:
 21436                           	opt stack 0
 21437  015C18                     _Byte_GetBit:
 21438                           	opt stack 20
 21439                           
 21440                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 21441                           
 21442                           ; BSR set to: 0
 21443                           ;incstack = 0
 21444  015C18  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 21445  015C1C  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 21446  015C20                     	if	0	;tblptru may be non-zero
 21447  015C20                     	endif
 21448  015C20                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21449  015C20  0E00               	movlw	low (__mediumconst shr (0+16))
 21450  015C22  6EF8               	movwf	tblptru,c
 21451  015C24                     	endif
 21452  015C24  0008               	tblrd		*
 21453  015C26  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 21454                           
 21455                           ;Types.c: 42: Output >>= pBit;
 21456  015C2A  0100               	movlb	0	; () banked
 21457  015C2C  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 21458  015C2E  6F63               	movwf	??_Byte_GetBit& (0+255),b
 21459  015C30  D002               	goto	u11290
 21460  015C32                     u11295:
 21461  015C32  90D8               	bcf	status,0,c
 21462  015C34  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 21463  015C36                     u11290:
 21464  015C36  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 21465  015C38  D7FC               	goto	u11295
 21466                           
 21467                           ;Types.c: 43: Output &= 1;
 21468  015C3A  0E01               	movlw	1
 21469  015C3C  0100               	movlb	0	; () banked
 21470  015C3E  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 21471                           
 21472                           ; BSR set to: 0
 21473                           ;Types.c: 44: return Output;
 21474  015C40  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 21475  015C42  0012               	return	
 21476  015C44                     __end_of_Byte_GetBit:
 21477                           	opt stack 0
 21478                           tosu	equ	0xFFF
 21479                           tosh	equ	0xFFE
 21480                           tosl	equ	0xFFD
 21481                           pclath	equ	0xFFA
 21482                           tblptru	equ	0xFF8
 21483                           tblptrh	equ	0xFF7
 21484                           tblptrl	equ	0xFF6
 21485                           tablat	equ	0xFF5
 21486                           prodh	equ	0xFF4
 21487                           prodl	equ	0xFF3
 21488                           intcon	equ	0xFF2
 21489                           indf0	equ	0xFEF
 21490                           postinc0	equ	0xFEE
 21491                           fsr0h	equ	0xFEA
 21492                           fsr0l	equ	0xFE9
 21493                           wreg	equ	0xFE8
 21494                           indf1	equ	0xFE7
 21495                           postdec1	equ	0xFE5
 21496                           fsr1h	equ	0xFE2
 21497                           fsr1l	equ	0xFE1
 21498                           indf2	equ	0xFDF
 21499                           postinc2	equ	0xFDE
 21500                           postdec2	equ	0xFDD
 21501                           plusw2	equ	0xFDB
 21502                           fsr2h	equ	0xFDA
 21503                           fsr2l	equ	0xFD9
 21504                           status	equ	0xFD8
 21505                           
 21506 ;; *************** function _ADCAverage *****************
 21507 ;; Defined at:
 21508 ;;		line 106 in file "main.c"
 21509 ;; Parameters:    Size  Location     Type
 21510 ;;		None
 21511 ;; Auto vars:     Size  Location     Type
 21512 ;;		None
 21513 ;; Return value:  Size  Location     Type
 21514 ;;                  2  2130[None  ] int 
 21515 ;; Registers used:
 21516 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21517 ;; Tracked objects:
 21518 ;;		On entry : 0/0
 21519 ;;		On exit  : 0/0
 21520 ;;		Unchanged: 0/0
 21521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21523 ;;      Locals:         0       0       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21525 ;;      Totals:         0       2       0       0      24       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21526 ;;Total ram usage:       26 bytes
 21527 ;; Hardware stack levels used:    1
 21528 ;; Hardware stack levels required when called:   11
 21529 ;; This function calls:
 21530 ;;		_FunctReadADC
 21531 ;;		_HMI_Render
 21532 ;;		_HMI_SetNumber
 21533 ;;		___awdiv
 21534 ;;		___fladd
 21535 ;;		___flmul
 21536 ;;		___flneg
 21537 ;;		___fltol
 21538 ;;		___wmul
 21539 ;;		___xxtofl
 21540 ;;		_pow
 21541 ;; This function is called by:
 21542 ;;		_Sensor_Observe2
 21543 ;;		_Closest_Object2
 21544 ;;		_Sensor_Observe
 21545 ;;		_Closest_Object
 21546 ;;		_main
 21547 ;; This function uses a non-reentrant model
 21548 ;;
 21549                           
 21550                           	psect	text122
 21551  0111CA                     __ptext122:
 21552                           	opt stack 0
 21553  0111CA                     _ADCAverage:
 21554                           	opt stack 18
 21555                           
 21556                           ;main.c: 108: total = total - readings[readIndex];
 21557                           
 21558                           ; BSR set to: 0
 21559                           ;incstack = 0
 21560  0111CA  90D8               	bcf	status,0,c
 21561  0111CC  3429               	rlcf	_readIndex,w,c
 21562  0111CE  6ED9               	movwf	fsr2l,c
 21563  0111D0  342A               	rlcf	_readIndex+1,w,c
 21564  0111D2  6EDA               	movwf	fsr2h,c
 21565  0111D4  0E00               	movlw	low _readings
 21566  0111D6  26D9               	addwf	fsr2l,f,c
 21567  0111D8  0E02               	movlw	high _readings
 21568  0111DA  22DA               	addwfc	fsr2h,f,c
 21569  0111DC  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21570  0111E0  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21571  0111E4  0100               	movlb	0	; () banked
 21572  0111E6  1FD7               	comf	??_ADCAverage& (0+255),f,b
 21573  0111E8  1FD8               	comf	(??_ADCAverage+1)& (0+255),f,b
 21574  0111EA  4BD7               	infsnz	??_ADCAverage& (0+255),f,b
 21575  0111EC  2BD8               	incf	(??_ADCAverage+1)& (0+255),f,b
 21576  0111EE  0101               	movlb	1	; () banked
 21577  0111F0  5122               	movf	_total& (0+255),w,b
 21578  0111F2  0100               	movlb	0	; () banked
 21579  0111F4  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21580  0111F6  0101               	movlb	1	; () banked
 21581  0111F8  6F22               	movwf	_total& (0+255),b
 21582  0111FA  5123               	movf	(_total+1)& (0+255),w,b
 21583  0111FC  0100               	movlb	0	; () banked
 21584  0111FE  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21585  011200  0101               	movlb	1	; () banked
 21586  011202  6F23               	movwf	(_total+1)& (0+255),b
 21587                           
 21588                           ; BSR set to: 1
 21589                           ;main.c: 110: readings[readIndex] = (FunctReadADC(0));
 21590  011204  0E00               	movlw	0
 21591  011206  0100               	movlb	0	; () banked
 21592  011208  6F61               	movwf	(FunctReadADC@channel+1)& (0+255),b
 21593  01120A  0E00               	movlw	0
 21594  01120C  6F60               	movwf	FunctReadADC@channel& (0+255),b
 21595  01120E  EC81  F0AC         	call	_FunctReadADC	;wreg free
 21596  011212  90D8               	bcf	status,0,c
 21597  011214  3429               	rlcf	_readIndex,w,c
 21598  011216  6ED9               	movwf	fsr2l,c
 21599  011218  342A               	rlcf	_readIndex+1,w,c
 21600  01121A  6EDA               	movwf	fsr2h,c
 21601  01121C  0E00               	movlw	low _readings
 21602  01121E  26D9               	addwf	fsr2l,f,c
 21603  011220  0E02               	movlw	high _readings
 21604  011222  22DA               	addwfc	fsr2h,f,c
 21605  011224  0100               	movlb	0	; () banked
 21606  011226  C060  FFDE         	movff	?_FunctReadADC,postinc2
 21607  01122A  C061  FFDD         	movff	?_FunctReadADC+1,postdec2
 21608                           
 21609                           ; BSR set to: 0
 21610                           ;main.c: 112: total = total + readings[readIndex];
 21611  01122E  90D8               	bcf	status,0,c
 21612  011230  3429               	rlcf	_readIndex,w,c
 21613  011232  6ED9               	movwf	fsr2l,c
 21614  011234  342A               	rlcf	_readIndex+1,w,c
 21615  011236  6EDA               	movwf	fsr2h,c
 21616  011238  0E00               	movlw	low _readings
 21617  01123A  26D9               	addwf	fsr2l,f,c
 21618  01123C  0E02               	movlw	high _readings
 21619  01123E  22DA               	addwfc	fsr2h,f,c
 21620  011240  CFDE F0D7          	movff	postinc2,??_ADCAverage
 21621  011244  CFDD F0D8          	movff	postdec2,??_ADCAverage+1
 21622  011248  0101               	movlb	1	; () banked
 21623  01124A  5122               	movf	_total& (0+255),w,b
 21624  01124C  0100               	movlb	0	; () banked
 21625  01124E  25D7               	addwf	??_ADCAverage& (0+255),w,b
 21626  011250  0101               	movlb	1	; () banked
 21627  011252  6F22               	movwf	_total& (0+255),b
 21628  011254  5123               	movf	(_total+1)& (0+255),w,b
 21629  011256  0100               	movlb	0	; () banked
 21630  011258  21D8               	addwfc	(??_ADCAverage+1)& (0+255),w,b
 21631  01125A  0101               	movlb	1	; () banked
 21632  01125C  6F23               	movwf	(_total+1)& (0+255),b
 21633                           
 21634                           ; BSR set to: 1
 21635                           ;main.c: 114: readIndex++;
 21636  01125E  4A29               	infsnz	_readIndex,f,c
 21637  011260  2A2A               	incf	_readIndex+1,f,c
 21638                           
 21639                           ; BSR set to: 1
 21640                           ;main.c: 116: if (readIndex >= numReadings) {
 21641  011262  51F9               	movf	_numReadings& (0+255),w,b
 21642  011264  5C29               	subwf	_readIndex,w,c
 21643  011266  502A               	movf	_readIndex+1,w,c
 21644  011268  0A80               	xorlw	128
 21645  01126A  0100               	movlb	0	; () banked
 21646  01126C  6FD7               	movwf	??_ADCAverage& (0+255),b
 21647  01126E  0101               	movlb	1	; () banked
 21648  011270  51FA               	movf	(_numReadings+1)& (0+255),w,b
 21649  011272  0A80               	xorlw	128
 21650  011274  0100               	movlb	0	; () banked
 21651  011276  59D7               	subwfb	??_ADCAverage& (0+255),w,b
 21652  011278  A0D8               	btfss	status,0,c
 21653  01127A  D004               	goto	l2131
 21654                           
 21655                           ; BSR set to: 0
 21656                           ;main.c: 118: readIndex = 0;
 21657  01127C  0E00               	movlw	0
 21658  01127E  6E2A               	movwf	_readIndex+1,c
 21659  011280  0E00               	movlw	0
 21660  011282  6E29               	movwf	_readIndex,c
 21661  011284                     l2131:
 21662                           
 21663                           ; BSR set to: 0
 21664                           ;main.c: 119: }
 21665                           ;main.c: 121: average = total / numReadings;
 21666                           
 21667                           ; BSR set to: 0
 21668  011284  C122  F060         	movff	_total,___awdiv@dividend
 21669  011288  C123  F061         	movff	_total+1,___awdiv@dividend+1
 21670  01128C  C1F9  F062         	movff	_numReadings,___awdiv@divisor
 21671  011290  C1FA  F063         	movff	_numReadings+1,___awdiv@divisor+1
 21672  011294  EC47  F0A4         	call	___awdiv	;wreg free
 21673  011298  C060  F0E9         	movff	?___awdiv,_average
 21674  01129C  C061  F0EA         	movff	?___awdiv+1,_average+1
 21675                           
 21676                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21677  0112A0  C0E9  F060         	movff	_average,___xxtofl@val
 21678  0112A4  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21679  0112A8  0100               	movlb	0	; () banked
 21680  0112AA  0E00               	movlw	0
 21681  0112AC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21682  0112AE  0EFF               	movlw	-1
 21683  0112B0  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21684  0112B2  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21685  0112B4  0E01               	movlw	1
 21686  0112B6  EC03  F097         	call	___xxtofl
 21687  0112BA  C060  F300         	movff	?___xxtofl,_ADCAverage$15665
 21688  0112BE  C061  F301         	movff	?___xxtofl+1,_ADCAverage$15665+1
 21689  0112C2  C062  F302         	movff	?___xxtofl+2,_ADCAverage$15665+2
 21690  0112C6  C063  F303         	movff	?___xxtofl+3,_ADCAverage$15665+3
 21691                           
 21692                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21693  0112CA  0E00               	movlw	0
 21694  0112CC  0100               	movlb	0	; () banked
 21695  0112CE  6FC6               	movwf	pow@y& (0+255),b
 21696  0112D0  0E00               	movlw	0
 21697  0112D2  6FC7               	movwf	(pow@y+1)& (0+255),b
 21698  0112D4  0E00               	movlw	0
 21699  0112D6  6FC8               	movwf	(pow@y+2)& (0+255),b
 21700  0112D8  0E40               	movlw	64
 21701  0112DA  6FC9               	movwf	(pow@y+3)& (0+255),b
 21702  0112DC  C300  F0C2         	movff	_ADCAverage$15665,pow@x
 21703  0112E0  C301  F0C3         	movff	_ADCAverage$15665+1,pow@x+1
 21704  0112E4  C302  F0C4         	movff	_ADCAverage$15665+2,pow@x+2
 21705  0112E8  C303  F0C5         	movff	_ADCAverage$15665+3,pow@x+3
 21706  0112EC  ECA1  F090         	call	_pow	;wreg free
 21707  0112F0  C0C2  F304         	movff	?_pow,_ADCAverage$15666
 21708  0112F4  C0C3  F305         	movff	?_pow+1,_ADCAverage$15666+1
 21709  0112F8  C0C4  F306         	movff	?_pow+2,_ADCAverage$15666+2
 21710  0112FC  C0C5  F307         	movff	?_pow+3,_ADCAverage$15666+3
 21711                           
 21712                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21713  011300  C0E9  F060         	movff	_average,___xxtofl@val
 21714  011304  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21715  011308  0100               	movlb	0	; () banked
 21716  01130A  0E00               	movlw	0
 21717  01130C  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21718  01130E  0EFF               	movlw	-1
 21719  011310  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21720  011312  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21721  011314  0E01               	movlw	1
 21722  011316  EC03  F097         	call	___xxtofl
 21723  01131A  C060  F308         	movff	?___xxtofl,_ADCAverage$15667
 21724  01131E  C061  F309         	movff	?___xxtofl+1,_ADCAverage$15667+1
 21725  011322  C062  F30A         	movff	?___xxtofl+2,_ADCAverage$15667+2
 21726  011326  C063  F30B         	movff	?___xxtofl+3,_ADCAverage$15667+3
 21727                           
 21728                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21729  01132A  0E00               	movlw	0
 21730  01132C  0100               	movlb	0	; () banked
 21731  01132E  6FC6               	movwf	pow@y& (0+255),b
 21732  011330  0E00               	movlw	0
 21733  011332  6FC7               	movwf	(pow@y+1)& (0+255),b
 21734  011334  0E40               	movlw	64
 21735  011336  6FC8               	movwf	(pow@y+2)& (0+255),b
 21736  011338  0E40               	movlw	64
 21737  01133A  6FC9               	movwf	(pow@y+3)& (0+255),b
 21738  01133C  C308  F0C2         	movff	_ADCAverage$15667,pow@x
 21739  011340  C309  F0C3         	movff	_ADCAverage$15667+1,pow@x+1
 21740  011344  C30A  F0C4         	movff	_ADCAverage$15667+2,pow@x+2
 21741  011348  C30B  F0C5         	movff	_ADCAverage$15667+3,pow@x+3
 21742  01134C  ECA1  F090         	call	_pow	;wreg free
 21743  011350  C0C2  F30C         	movff	?_pow,_ADCAverage$15668
 21744  011354  C0C3  F30D         	movff	?_pow+1,_ADCAverage$15668+1
 21745  011358  C0C4  F30E         	movff	?_pow+2,_ADCAverage$15668+2
 21746  01135C  C0C5  F30F         	movff	?_pow+3,_ADCAverage$15668+3
 21747                           
 21748                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21749  011360  0EA6               	movlw	166
 21750  011362  0100               	movlb	0	; () banked
 21751  011364  6F72               	movwf	___flmul@a& (0+255),b
 21752  011366  0E9B               	movlw	155
 21753  011368  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21754  01136A  0EC4               	movlw	196
 21755  01136C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21756  01136E  0E3A               	movlw	58
 21757  011370  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21758  011372  C304  F06E         	movff	_ADCAverage$15666,___flmul@b
 21759  011376  C305  F06F         	movff	_ADCAverage$15666+1,___flmul@b+1
 21760  01137A  C306  F070         	movff	_ADCAverage$15666+2,___flmul@b+2
 21761  01137E  C307  F071         	movff	_ADCAverage$15666+3,___flmul@b+3
 21762  011382  EC9D  F085         	call	___flmul	;wreg free
 21763  011386  C06E  F08F         	movff	?___flmul,___fladd@a
 21764  01138A  C06F  F090         	movff	?___flmul+1,___fladd@a+1
 21765  01138E  C070  F091         	movff	?___flmul+2,___fladd@a+2
 21766  011392  C071  F092         	movff	?___flmul+3,___fladd@a+3
 21767  011396  0E87               	movlw	135
 21768  011398  0100               	movlb	0	; () banked
 21769  01139A  6F72               	movwf	___flmul@a& (0+255),b
 21770  01139C  0E97               	movlw	151
 21771  01139E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21772  0113A0  0E71               	movlw	113
 21773  0113A2  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21774  0113A4  0EB5               	movlw	181
 21775  0113A6  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21776  0113A8  C30C  F06E         	movff	_ADCAverage$15668,___flmul@b
 21777  0113AC  C30D  F06F         	movff	_ADCAverage$15668+1,___flmul@b+1
 21778  0113B0  C30E  F070         	movff	_ADCAverage$15668+2,___flmul@b+2
 21779  0113B4  C30F  F071         	movff	_ADCAverage$15668+3,___flmul@b+3
 21780  0113B8  EC9D  F085         	call	___flmul	;wreg free
 21781  0113BC  C06E  F08B         	movff	?___flmul,___fladd@b
 21782  0113C0  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 21783  0113C4  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 21784  0113C8  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 21785  0113CC  EC46  F087         	call	___fladd	;wreg free
 21786  0113D0  C08B  F310         	movff	?___fladd,_ADCAverage$15669
 21787  0113D4  C08C  F311         	movff	?___fladd+1,_ADCAverage$15669+1
 21788  0113D8  C08D  F312         	movff	?___fladd+2,_ADCAverage$15669+2
 21789  0113DC  C08E  F313         	movff	?___fladd+3,_ADCAverage$15669+3
 21790                           
 21791                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21792  0113E0  0E8C               	movlw	140
 21793  0113E2  0100               	movlb	0	; () banked
 21794  0113E4  6F72               	movwf	___flmul@a& (0+255),b
 21795  0113E6  0EB9               	movlw	185
 21796  0113E8  6F73               	movwf	(___flmul@a+1)& (0+255),b
 21797  0113EA  0E6B               	movlw	107
 21798  0113EC  6F74               	movwf	(___flmul@a+2)& (0+255),b
 21799  0113EE  0E3F               	movlw	63
 21800  0113F0  6F75               	movwf	(___flmul@a+3)& (0+255),b
 21801  0113F2  C0E9  F060         	movff	_average,___xxtofl@val
 21802  0113F6  C0EA  F061         	movff	_average+1,___xxtofl@val+1
 21803  0113FA  0E00               	movlw	0
 21804  0113FC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 21805  0113FE  0EFF               	movlw	-1
 21806  011400  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 21807  011402  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 21808  011404  0E01               	movlw	1
 21809  011406  EC03  F097         	call	___xxtofl
 21810  01140A  C060  F06E         	movff	?___xxtofl,___flmul@b
 21811  01140E  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 21812  011412  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 21813  011416  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 21814  01141A  EC9D  F085         	call	___flmul	;wreg free
 21815  01141E  C06E  F087         	movff	?___flmul,___flneg@f1
 21816  011422  C06F  F088         	movff	?___flmul+1,___flneg@f1+1
 21817  011426  C070  F089         	movff	?___flmul+2,___flneg@f1+2
 21818  01142A  C071  F08A         	movff	?___flmul+3,___flneg@f1+3
 21819  01142E  ECC5  F0AD         	call	___flneg	;wreg free
 21820  011432  C087  F08F         	movff	?___flneg,___fladd@a
 21821  011436  C088  F090         	movff	?___flneg+1,___fladd@a+1
 21822  01143A  C089  F091         	movff	?___flneg+2,___fladd@a+2
 21823  01143E  C08A  F092         	movff	?___flneg+3,___fladd@a+3
 21824  011442  C310  F08B         	movff	_ADCAverage$15669,___fladd@b
 21825  011446  C311  F08C         	movff	_ADCAverage$15669+1,___fladd@b+1
 21826  01144A  C312  F08D         	movff	_ADCAverage$15669+2,___fladd@b+2
 21827  01144E  C313  F08E         	movff	_ADCAverage$15669+3,___fladd@b+3
 21828  011452  EC46  F087         	call	___fladd	;wreg free
 21829  011456  C08B  F314         	movff	?___fladd,_ADCAverage$15670
 21830  01145A  C08C  F315         	movff	?___fladd+1,_ADCAverage$15670+1
 21831  01145E  C08D  F316         	movff	?___fladd+2,_ADCAverage$15670+2
 21832  011462  C08E  F317         	movff	?___fladd+3,_ADCAverage$15670+3
 21833                           
 21834                           ;main.c: 122: average = -0.0000009 * pow(average, 3) + 0.0015 * pow(average, 2) - 0.9208
      +                           * average + 227.33;
 21835  011466  0E7B               	movlw	123
 21836  011468  0100               	movlb	0	; () banked
 21837  01146A  6F8F               	movwf	___fladd@a& (0+255),b
 21838  01146C  0E54               	movlw	84
 21839  01146E  6F90               	movwf	(___fladd@a+1)& (0+255),b
 21840  011470  0E63               	movlw	99
 21841  011472  6F91               	movwf	(___fladd@a+2)& (0+255),b
 21842  011474  0E43               	movlw	67
 21843  011476  6F92               	movwf	(___fladd@a+3)& (0+255),b
 21844  011478  C314  F08B         	movff	_ADCAverage$15670,___fladd@b
 21845  01147C  C315  F08C         	movff	_ADCAverage$15670+1,___fladd@b+1
 21846  011480  C316  F08D         	movff	_ADCAverage$15670+2,___fladd@b+2
 21847  011484  C317  F08E         	movff	_ADCAverage$15670+3,___fladd@b+3
 21848  011488  EC46  F087         	call	___fladd	;wreg free
 21849  01148C  C08B  F09F         	movff	?___fladd,___fltol@f1
 21850  011490  C08C  F0A0         	movff	?___fladd+1,___fltol@f1+1
 21851  011494  C08D  F0A1         	movff	?___fladd+2,___fltol@f1+2
 21852  011498  C08E  F0A2         	movff	?___fladd+3,___fltol@f1+3
 21853  01149C  ECF3  F09E         	call	___fltol	;wreg free
 21854  0114A0  C09F  F0E9         	movff	?___fltol,_average
 21855  0114A4  C0A0  F0EA         	movff	?___fltol+1,_average+1
 21856                           
 21857                           ;main.c: 124: average *= 10;
 21858  0114A8  C0E9  F060         	movff	_average,___wmul@multiplier
 21859  0114AC  C0EA  F061         	movff	_average+1,___wmul@multiplier+1
 21860  0114B0  0E00               	movlw	0
 21861  0114B2  0100               	movlb	0	; () banked
 21862  0114B4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 21863  0114B6  0E0A               	movlw	10
 21864  0114B8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 21865  0114BA  EC4A  F0AE         	call	___wmul	;wreg free
 21866  0114BE  C060  F0E9         	movff	?___wmul,_average
 21867  0114C2  C061  F0EA         	movff	?___wmul+1,_average+1
 21868                           
 21869                           ;main.c: 126: HMI_SetNumber(average);
 21870  0114C6  C0E9  F076         	movff	_average,HMI_SetNumber@pInput
 21871  0114CA  C0EA  F077         	movff	_average+1,HMI_SetNumber@pInput+1
 21872  0114CE  EC99  F0AE         	call	_HMI_SetNumber	;wreg free
 21873                           
 21874                           ;main.c: 127: HMI_Render();
 21875  0114D2  EC12  F0AD         	call	_HMI_Render	;wreg free
 21876  0114D6  0012               	return	
 21877  0114D8                     __end_of_ADCAverage:
 21878                           	opt stack 0
 21879                           tosu	equ	0xFFF
 21880                           tosh	equ	0xFFE
 21881                           tosl	equ	0xFFD
 21882                           pclath	equ	0xFFA
 21883                           tblptru	equ	0xFF8
 21884                           tblptrh	equ	0xFF7
 21885                           tblptrl	equ	0xFF6
 21886                           tablat	equ	0xFF5
 21887                           prodh	equ	0xFF4
 21888                           prodl	equ	0xFF3
 21889                           intcon	equ	0xFF2
 21890                           indf0	equ	0xFEF
 21891                           postinc0	equ	0xFEE
 21892                           fsr0h	equ	0xFEA
 21893                           fsr0l	equ	0xFE9
 21894                           wreg	equ	0xFE8
 21895                           indf1	equ	0xFE7
 21896                           postdec1	equ	0xFE5
 21897                           fsr1h	equ	0xFE2
 21898                           fsr1l	equ	0xFE1
 21899                           indf2	equ	0xFDF
 21900                           postinc2	equ	0xFDE
 21901                           postdec2	equ	0xFDD
 21902                           plusw2	equ	0xFDB
 21903                           fsr2h	equ	0xFDA
 21904                           fsr2l	equ	0xFD9
 21905                           status	equ	0xFD8
 21906                           
 21907 ;; *************** function _pow *****************
 21908 ;; Defined at:
 21909 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 21910 ;; Parameters:    Size  Location     Type
 21911 ;;  x               4   98[BANK0 ] int 
 21912 ;;  y               4  102[BANK0 ] int 
 21913 ;; Auto vars:     Size  Location     Type
 21914 ;;  yi              4  115[BANK0 ] unsigned long 
 21915 ;;  sign            1  114[BANK0 ] unsigned char 
 21916 ;; Return value:  Size  Location     Type
 21917 ;;                  4   98[BANK0 ] unsigned char 
 21918 ;; Registers used:
 21919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21920 ;; Tracked objects:
 21921 ;;		On entry : 0/0
 21922 ;;		On exit  : 0/0
 21923 ;;		Unchanged: 0/0
 21924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21925 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21926 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21928 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21929 ;;Total ram usage:       21 bytes
 21930 ;; Hardware stack levels used:    1
 21931 ;; Hardware stack levels required when called:   10
 21932 ;; This function calls:
 21933 ;;		___flge
 21934 ;;		___flmul
 21935 ;;		___flneg
 21936 ;;		___fltol
 21937 ;;		___xxtofl
 21938 ;;		_exp
 21939 ;;		_log
 21940 ;; This function is called by:
 21941 ;;		_ADCAverage
 21942 ;; This function uses a non-reentrant model
 21943 ;;
 21944                           
 21945                           	psect	text123
 21946  012142                     __ptext123:
 21947                           	opt stack 0
 21948  012142                     _pow:
 21949                           	opt stack 18
 21950                           
 21951                           ;incstack = 0
 21952  012142  0E00               	movlw	0
 21953  012144  0100               	movlb	0	; () banked
 21954  012146  6FD2               	movwf	pow@sign& (0+255),b
 21955                           
 21956                           ; BSR set to: 0
 21957  012148  51C2               	movf	pow@x& (0+255),w,b
 21958  01214A  11C3               	iorwf	(pow@x+1)& (0+255),w,b
 21959  01214C  11C4               	iorwf	(pow@x+2)& (0+255),w,b
 21960  01214E  11C5               	iorwf	(pow@x+3)& (0+255),w,b
 21961  012150  A4D8               	btfss	status,2,c
 21962  012152  D024               	goto	l2741
 21963                           
 21964                           ; BSR set to: 0
 21965  012154  0E00               	movlw	0
 21966  012156  6F60               	movwf	___flge@ff1& (0+255),b
 21967  012158  0E00               	movlw	0
 21968  01215A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 21969  01215C  0E00               	movlw	0
 21970  01215E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 21971  012160  0E00               	movlw	0
 21972  012162  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 21973  012164  C0C6  F064         	movff	pow@y,___flge@ff2
 21974  012168  C0C7  F065         	movff	pow@y+1,___flge@ff2+1
 21975  01216C  C0C8  F066         	movff	pow@y+2,___flge@ff2+2
 21976  012170  C0C9  F067         	movff	pow@y+3,___flge@ff2+3
 21977  012174  ECD1  F09A         	call	___flge	;wreg free
 21978  012178  0100               	movlb	0	; () banked
 21979  01217A  A0D8               	btfss	status,0,c
 21980  01217C  D005               	goto	l2742
 21981                           
 21982                           ; BSR set to: 0
 21983  01217E  0E00               	movlw	0
 21984  012180  0101               	movlb	1	; () banked
 21985  012182  6F1B               	movwf	(_errno+1)& (0+255),b
 21986  012184  0E21               	movlw	33
 21987  012186  6F1A               	movwf	_errno& (0+255),b
 21988  012188                     l2742:
 21989  012188  0E00               	movlw	0
 21990  01218A  0100               	movlb	0	; () banked
 21991  01218C  6FC2               	movwf	?_pow& (0+255),b
 21992  01218E  0E00               	movlw	0
 21993  012190  6FC3               	movwf	(?_pow+1)& (0+255),b
 21994  012192  0E00               	movlw	0
 21995  012194  6FC4               	movwf	(?_pow+2)& (0+255),b
 21996  012196  0E00               	movlw	0
 21997  012198  6FC5               	movwf	(?_pow+3)& (0+255),b
 21998                           
 21999                           ; BSR set to: 0
 22000  01219A  0012               	return	
 22001  01219C                     l2741:
 22002                           
 22003                           ; BSR set to: 0
 22004                           
 22005                           ; BSR set to: 0
 22006  01219C  51C6               	movf	pow@y& (0+255),w,b
 22007  01219E  11C7               	iorwf	(pow@y+1)& (0+255),w,b
 22008  0121A0  11C8               	iorwf	(pow@y+2)& (0+255),w,b
 22009  0121A2  11C9               	iorwf	(pow@y+3)& (0+255),w,b
 22010  0121A4  A4D8               	btfss	status,2,c
 22011  0121A6  D009               	goto	l2744
 22012                           
 22013                           ; BSR set to: 0
 22014  0121A8  0E00               	movlw	0
 22015  0121AA  6FC2               	movwf	?_pow& (0+255),b
 22016  0121AC  0E00               	movlw	0
 22017  0121AE  6FC3               	movwf	(?_pow+1)& (0+255),b
 22018  0121B0  0E80               	movlw	128
 22019  0121B2  6FC4               	movwf	(?_pow+2)& (0+255),b
 22020  0121B4  0E3F               	movlw	63
 22021  0121B6  6FC5               	movwf	(?_pow+3)& (0+255),b
 22022                           
 22023                           ; BSR set to: 0
 22024  0121B8  0012               	return	
 22025  0121BA                     l2744:
 22026                           
 22027                           ; BSR set to: 0
 22028                           
 22029                           ; BSR set to: 0
 22030  0121BA  AFC5               	btfss	(pow@x+3)& (0+255),7,b
 22031  0121BC  D04F               	goto	l2745
 22032                           
 22033                           ; BSR set to: 0
 22034  0121BE  C0C6  F09F         	movff	pow@y,___fltol@f1
 22035  0121C2  C0C7  F0A0         	movff	pow@y+1,___fltol@f1+1
 22036  0121C6  C0C8  F0A1         	movff	pow@y+2,___fltol@f1+2
 22037  0121CA  C0C9  F0A2         	movff	pow@y+3,___fltol@f1+3
 22038  0121CE  ECF3  F09E         	call	___fltol	;wreg free
 22039  0121D2  C09F  F0D3         	movff	?___fltol,pow@yi
 22040  0121D6  C0A0  F0D4         	movff	?___fltol+1,pow@yi+1
 22041  0121DA  C0A1  F0D5         	movff	?___fltol+2,pow@yi+2
 22042  0121DE  C0A2  F0D6         	movff	?___fltol+3,pow@yi+3
 22043  0121E2  C0D3  F060         	movff	pow@yi,___xxtofl@val
 22044  0121E6  C0D4  F061         	movff	pow@yi+1,___xxtofl@val+1
 22045  0121EA  C0D5  F062         	movff	pow@yi+2,___xxtofl@val+2
 22046  0121EE  C0D6  F063         	movff	pow@yi+3,___xxtofl@val+3
 22047  0121F2  0E00               	movlw	0
 22048  0121F4  EC03  F097         	call	___xxtofl
 22049  0121F8  0100               	movlb	0	; () banked
 22050  0121FA  51C6               	movf	pow@y& (0+255),w,b
 22051  0121FC  1960               	xorwf	?___xxtofl& (0+255),w,b
 22052  0121FE  E10A               	bnz	u11850
 22053  012200  51C7               	movf	(pow@y+1)& (0+255),w,b
 22054  012202  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 22055  012204  E107               	bnz	u11850
 22056  012206  51C8               	movf	(pow@y+2)& (0+255),w,b
 22057  012208  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 22058  01220A  E104               	bnz	u11850
 22059  01220C  51C9               	movf	(pow@y+3)& (0+255),w,b
 22060  01220E  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 22061  012210  B4D8               	btfsc	status,2,c
 22062  012212  D00F               	goto	l2746
 22063  012214                     u11850:
 22064                           
 22065                           ; BSR set to: 0
 22066  012214  0E00               	movlw	0
 22067  012216  0101               	movlb	1	; () banked
 22068  012218  6F1B               	movwf	(_errno+1)& (0+255),b
 22069  01221A  0E21               	movlw	33
 22070  01221C  6F1A               	movwf	_errno& (0+255),b
 22071  01221E  0E00               	movlw	0
 22072  012220  0100               	movlb	0	; () banked
 22073  012222  6FC2               	movwf	?_pow& (0+255),b
 22074  012224  0E00               	movlw	0
 22075  012226  6FC3               	movwf	(?_pow+1)& (0+255),b
 22076  012228  0E00               	movlw	0
 22077  01222A  6FC4               	movwf	(?_pow+2)& (0+255),b
 22078  01222C  0E00               	movlw	0
 22079  01222E  6FC5               	movwf	(?_pow+3)& (0+255),b
 22080                           
 22081                           ; BSR set to: 0
 22082  012230  0012               	return	
 22083  012232                     l2746:
 22084                           
 22085                           ; BSR set to: 0
 22086                           
 22087                           ; BSR set to: 0
 22088  012232  51D3               	movf	pow@yi& (0+255),w,b
 22089  012234  0B01               	andlw	1
 22090  012236  6FD2               	movwf	pow@sign& (0+255),b
 22091                           
 22092                           ; BSR set to: 0
 22093  012238  C0C2  F087         	movff	pow@x,___flneg@f1
 22094  01223C  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22095  012240  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22096  012244  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22097  012248  ECC5  F0AD         	call	___flneg	;wreg free
 22098  01224C  C087  F0C2         	movff	?___flneg,pow@x
 22099  012250  C088  F0C3         	movff	?___flneg+1,pow@x+1
 22100  012254  C089  F0C4         	movff	?___flneg+2,pow@x+2
 22101  012258  C08A  F0C5         	movff	?___flneg+3,pow@x+3
 22102  01225C                     l2745:
 22103  01225C  C0C2  F0AF         	movff	pow@x,log@x
 22104  012260  C0C3  F0B0         	movff	pow@x+1,log@x+1
 22105  012264  C0C4  F0B1         	movff	pow@x+2,log@x+2
 22106  012268  C0C5  F0B2         	movff	pow@x+3,log@x+3
 22107  01226C  EC95  F095         	call	_log	;wreg free
 22108  012270  C0AF  F0CA         	movff	?_log,_pow$15671
 22109  012274  C0B0  F0CB         	movff	?_log+1,_pow$15671+1
 22110  012278  C0B1  F0CC         	movff	?_log+2,_pow$15671+2
 22111  01227C  C0B2  F0CD         	movff	?_log+3,_pow$15671+3
 22112  012280  C0CA  F06E         	movff	_pow$15671,___flmul@b
 22113  012284  C0CB  F06F         	movff	_pow$15671+1,___flmul@b+1
 22114  012288  C0CC  F070         	movff	_pow$15671+2,___flmul@b+2
 22115  01228C  C0CD  F071         	movff	_pow$15671+3,___flmul@b+3
 22116  012290  C0C6  F072         	movff	pow@y,___flmul@a
 22117  012294  C0C7  F073         	movff	pow@y+1,___flmul@a+1
 22118  012298  C0C8  F074         	movff	pow@y+2,___flmul@a+2
 22119  01229C  C0C9  F075         	movff	pow@y+3,___flmul@a+3
 22120  0122A0  EC9D  F085         	call	___flmul	;wreg free
 22121  0122A4  C06E  F0CE         	movff	?___flmul,_pow$15672
 22122  0122A8  C06F  F0CF         	movff	?___flmul+1,_pow$15672+1
 22123  0122AC  C070  F0D0         	movff	?___flmul+2,_pow$15672+2
 22124  0122B0  C071  F0D1         	movff	?___flmul+3,_pow$15672+3
 22125  0122B4  C0CE  F0B7         	movff	_pow$15672,exp@x
 22126  0122B8  C0CF  F0B8         	movff	_pow$15672+1,exp@x+1
 22127  0122BC  C0D0  F0B9         	movff	_pow$15672+2,exp@x+2
 22128  0122C0  C0D1  F0BA         	movff	_pow$15672+3,exp@x+3
 22129  0122C4  EC5E  F08E         	call	_exp	;wreg free
 22130  0122C8  C0B7  F0C2         	movff	?_exp,pow@x
 22131  0122CC  C0B8  F0C3         	movff	?_exp+1,pow@x+1
 22132  0122D0  C0B9  F0C4         	movff	?_exp+2,pow@x+2
 22133  0122D4  C0BA  F0C5         	movff	?_exp+3,pow@x+3
 22134  0122D8  0100               	movlb	0	; () banked
 22135  0122DA  51D2               	movf	pow@sign& (0+255),w,b
 22136  0122DC  B4D8               	btfsc	status,2,c
 22137  0122DE  D013               	goto	l2747
 22138                           
 22139                           ; BSR set to: 0
 22140  0122E0  C0C2  F087         	movff	pow@x,___flneg@f1
 22141  0122E4  C0C3  F088         	movff	pow@x+1,___flneg@f1+1
 22142  0122E8  C0C4  F089         	movff	pow@x+2,___flneg@f1+2
 22143  0122EC  C0C5  F08A         	movff	pow@x+3,___flneg@f1+3
 22144  0122F0  ECC5  F0AD         	call	___flneg	;wreg free
 22145  0122F4  C087  F0C2         	movff	?___flneg,?_pow
 22146  0122F8  C088  F0C3         	movff	?___flneg+1,?_pow+1
 22147  0122FC  C089  F0C4         	movff	?___flneg+2,?_pow+2
 22148  012300  C08A  F0C5         	movff	?___flneg+3,?_pow+3
 22149  012304  0012               	return	
 22150  012306                     l2747:
 22151                           
 22152                           ; BSR set to: 0
 22153  012306  C0C2  F0C2         	movff	pow@x,?_pow
 22154  01230A  C0C3  F0C3         	movff	pow@x+1,?_pow+1
 22155  01230E  C0C4  F0C4         	movff	pow@x+2,?_pow+2
 22156  012312  C0C5  F0C5         	movff	pow@x+3,?_pow+3
 22157  012316  0012               	return		;funcret
 22158  012318                     __end_of_pow:
 22159                           	opt stack 0
 22160                           tosu	equ	0xFFF
 22161                           tosh	equ	0xFFE
 22162                           tosl	equ	0xFFD
 22163                           pclath	equ	0xFFA
 22164                           tblptru	equ	0xFF8
 22165                           tblptrh	equ	0xFF7
 22166                           tblptrl	equ	0xFF6
 22167                           tablat	equ	0xFF5
 22168                           prodh	equ	0xFF4
 22169                           prodl	equ	0xFF3
 22170                           intcon	equ	0xFF2
 22171                           indf0	equ	0xFEF
 22172                           postinc0	equ	0xFEE
 22173                           fsr0h	equ	0xFEA
 22174                           fsr0l	equ	0xFE9
 22175                           wreg	equ	0xFE8
 22176                           indf1	equ	0xFE7
 22177                           postdec1	equ	0xFE5
 22178                           fsr1h	equ	0xFE2
 22179                           fsr1l	equ	0xFE1
 22180                           indf2	equ	0xFDF
 22181                           postinc2	equ	0xFDE
 22182                           postdec2	equ	0xFDD
 22183                           plusw2	equ	0xFDB
 22184                           fsr2h	equ	0xFDA
 22185                           fsr2l	equ	0xFD9
 22186                           status	equ	0xFD8
 22187                           
 22188 ;; *************** function _log *****************
 22189 ;; Defined at:
 22190 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 22191 ;; Parameters:    Size  Location     Type
 22192 ;;  x               4   79[BANK0 ] unsigned char 
 22193 ;; Auto vars:     Size  Location     Type
 22194 ;;  exponent        2   83[BANK0 ] int 
 22195 ;; Return value:  Size  Location     Type
 22196 ;;                  4   79[BANK0 ] int 
 22197 ;; Registers used:
 22198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22199 ;; Tracked objects:
 22200 ;;		On entry : 0/0
 22201 ;;		On exit  : 0/0
 22202 ;;		Unchanged: 0/0
 22203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22204 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22205 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22207 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22208 ;;Total ram usage:        6 bytes
 22209 ;; Hardware stack levels used:    1
 22210 ;; Hardware stack levels required when called:    9
 22211 ;; This function calls:
 22212 ;;		___fladd
 22213 ;;		___flmul
 22214 ;;		___xxtofl
 22215 ;;		_eval_poly
 22216 ;;		_frexp
 22217 ;; This function is called by:
 22218 ;;		_pow
 22219 ;; This function uses a non-reentrant model
 22220 ;;
 22221                           
 22222                           	psect	text124
 22223  012B2A                     __ptext124:
 22224                           	opt stack 0
 22225  012B2A                     _log:
 22226                           	opt stack 18
 22227                           
 22228                           ;incstack = 0
 22229  012B2A  0100               	movlb	0	; () banked
 22230  012B2C  AFB2               	btfss	(log@x+3)& (0+255),7,b
 22231  012B2E  D00F               	goto	l2943
 22232                           
 22233                           ; BSR set to: 0
 22234  012B30  0E00               	movlw	0
 22235  012B32  0101               	movlb	1	; () banked
 22236  012B34  6F1B               	movwf	(_errno+1)& (0+255),b
 22237  012B36  0E21               	movlw	33
 22238  012B38  6F1A               	movwf	_errno& (0+255),b
 22239  012B3A  0E00               	movlw	0
 22240  012B3C  0100               	movlb	0	; () banked
 22241  012B3E  6FAF               	movwf	?_log& (0+255),b
 22242  012B40  0E00               	movlw	0
 22243  012B42  6FB0               	movwf	(?_log+1)& (0+255),b
 22244  012B44  0E00               	movlw	0
 22245  012B46  6FB1               	movwf	(?_log+2)& (0+255),b
 22246  012B48  0E00               	movlw	0
 22247  012B4A  6FB2               	movwf	(?_log+3)& (0+255),b
 22248                           
 22249                           ; BSR set to: 0
 22250  012B4C  0012               	return	
 22251  012B4E                     l2943:
 22252                           
 22253                           ; BSR set to: 0
 22254                           
 22255                           ; BSR set to: 0
 22256  012B4E  51AF               	movf	log@x& (0+255),w,b
 22257  012B50  11B0               	iorwf	(log@x+1)& (0+255),w,b
 22258  012B52  11B1               	iorwf	(log@x+2)& (0+255),w,b
 22259  012B54  11B2               	iorwf	(log@x+3)& (0+255),w,b
 22260  012B56  A4D8               	btfss	status,2,c
 22261  012B58  D00F               	goto	l2945
 22262                           
 22263                           ; BSR set to: 0
 22264  012B5A  0E00               	movlw	0
 22265  012B5C  0101               	movlb	1	; () banked
 22266  012B5E  6F1B               	movwf	(_errno+1)& (0+255),b
 22267  012B60  0E22               	movlw	34
 22268  012B62  6F1A               	movwf	_errno& (0+255),b
 22269  012B64  0E00               	movlw	0
 22270  012B66  0100               	movlb	0	; () banked
 22271  012B68  6FAF               	movwf	?_log& (0+255),b
 22272  012B6A  0E00               	movlw	0
 22273  012B6C  6FB0               	movwf	(?_log+1)& (0+255),b
 22274  012B6E  0E00               	movlw	0
 22275  012B70  6FB1               	movwf	(?_log+2)& (0+255),b
 22276  012B72  0E00               	movlw	0
 22277  012B74  6FB2               	movwf	(?_log+3)& (0+255),b
 22278                           
 22279                           ; BSR set to: 0
 22280  012B76  0012               	return	
 22281  012B78                     l2945:
 22282                           
 22283                           ; BSR set to: 0
 22284                           
 22285                           ; BSR set to: 0
 22286  012B78  0E00               	movlw	0
 22287  012B7A  6F72               	movwf	___flmul@a& (0+255),b
 22288  012B7C  0E00               	movlw	0
 22289  012B7E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22290  012B80  0E00               	movlw	0
 22291  012B82  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22292  012B84  0E40               	movlw	64
 22293  012B86  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22294  012B88  0EB3               	movlw	low log@exponent
 22295  012B8A  6F64               	movwf	frexp@eptr& (0+255),b
 22296  012B8C  0E00               	movlw	high log@exponent
 22297  012B8E  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 22298  012B90  C0AF  F060         	movff	log@x,frexp@value
 22299  012B94  C0B0  F061         	movff	log@x+1,frexp@value+1
 22300  012B98  C0B1  F062         	movff	log@x+2,frexp@value+2
 22301  012B9C  C0B2  F063         	movff	log@x+3,frexp@value+3
 22302  012BA0  EC70  F0A1         	call	_frexp	;wreg free
 22303  012BA4  C060  F06E         	movff	?_frexp,___flmul@b
 22304  012BA8  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 22305  012BAC  C062  F070         	movff	?_frexp+2,___flmul@b+2
 22306  012BB0  C063  F071         	movff	?_frexp+3,___flmul@b+3
 22307  012BB4  EC9D  F085         	call	___flmul	;wreg free
 22308  012BB8  C06E  F08B         	movff	?___flmul,___fladd@b
 22309  012BBC  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22310  012BC0  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22311  012BC4  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22312  012BC8  0E00               	movlw	0
 22313  012BCA  0100               	movlb	0	; () banked
 22314  012BCC  6F8F               	movwf	___fladd@a& (0+255),b
 22315  012BCE  0E00               	movlw	0
 22316  012BD0  6F90               	movwf	(___fladd@a+1)& (0+255),b
 22317  012BD2  0E80               	movlw	128
 22318  012BD4  6F91               	movwf	(___fladd@a+2)& (0+255),b
 22319  012BD6  0EBF               	movlw	191
 22320  012BD8  6F92               	movwf	(___fladd@a+3)& (0+255),b
 22321  012BDA  EC46  F087         	call	___fladd	;wreg free
 22322  012BDE  C08B  F0AF         	movff	?___fladd,log@x
 22323  012BE2  C08C  F0B0         	movff	?___fladd+1,log@x+1
 22324  012BE6  C08D  F0B1         	movff	?___fladd+2,log@x+2
 22325  012BEA  C08E  F0B2         	movff	?___fladd+3,log@x+3
 22326  012BEE  0100               	movlb	0	; () banked
 22327  012BF0  07B3               	decf	log@exponent& (0+255),f,b
 22328  012BF2  A0D8               	btfss	status,0,c
 22329  012BF4  07B4               	decf	(log@exponent+1)& (0+255),f,b
 22330                           
 22331                           ; BSR set to: 0
 22332  012BF6  C0AF  F09F         	movff	log@x,eval_poly@x
 22333  012BFA  C0B0  F0A0         	movff	log@x+1,eval_poly@x+1
 22334  012BFE  C0B1  F0A1         	movff	log@x+2,eval_poly@x+2
 22335  012C02  C0B2  F0A2         	movff	log@x+3,eval_poly@x+3
 22336  012C06  0E4B               	movlw	low log@coeff
 22337  012C08  6FA3               	movwf	eval_poly@d& (0+255),b
 22338  012C0A  0EFE               	movlw	high log@coeff
 22339  012C0C  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22340  012C0E  0E00               	movlw	0
 22341  012C10  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22342  012C12  0E08               	movlw	8
 22343  012C14  6FA5               	movwf	eval_poly@n& (0+255),b
 22344  012C16  EC81  F09D         	call	_eval_poly	;wreg free
 22345  012C1A  C09F  F0AF         	movff	?_eval_poly,log@x
 22346  012C1E  C0A0  F0B0         	movff	?_eval_poly+1,log@x+1
 22347  012C22  C0A1  F0B1         	movff	?_eval_poly+2,log@x+2
 22348  012C26  C0A2  F0B2         	movff	?_eval_poly+3,log@x+3
 22349  012C2A  0E18               	movlw	24
 22350  012C2C  0100               	movlb	0	; () banked
 22351  012C2E  6F72               	movwf	___flmul@a& (0+255),b
 22352  012C30  0E72               	movlw	114
 22353  012C32  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22354  012C34  0E31               	movlw	49
 22355  012C36  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22356  012C38  0E3F               	movlw	63
 22357  012C3A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22358  012C3C  C0B3  F060         	movff	log@exponent,___xxtofl@val
 22359  012C40  C0B4  F061         	movff	log@exponent+1,___xxtofl@val+1
 22360  012C44  0E00               	movlw	0
 22361  012C46  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22362  012C48  0EFF               	movlw	-1
 22363  012C4A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22364  012C4C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22365  012C4E  0E01               	movlw	1
 22366  012C50  EC03  F097         	call	___xxtofl
 22367  012C54  C060  F06E         	movff	?___xxtofl,___flmul@b
 22368  012C58  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 22369  012C5C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 22370  012C60  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 22371  012C64  EC9D  F085         	call	___flmul	;wreg free
 22372  012C68  C06E  F08B         	movff	?___flmul,___fladd@b
 22373  012C6C  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 22374  012C70  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 22375  012C74  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 22376  012C78  C0AF  F08F         	movff	log@x,___fladd@a
 22377  012C7C  C0B0  F090         	movff	log@x+1,___fladd@a+1
 22378  012C80  C0B1  F091         	movff	log@x+2,___fladd@a+2
 22379  012C84  C0B2  F092         	movff	log@x+3,___fladd@a+3
 22380  012C88  EC46  F087         	call	___fladd	;wreg free
 22381  012C8C  C08B  F0AF         	movff	?___fladd,?_log
 22382  012C90  C08C  F0B0         	movff	?___fladd+1,?_log+1
 22383  012C94  C08D  F0B1         	movff	?___fladd+2,?_log+2
 22384  012C98  C08E  F0B2         	movff	?___fladd+3,?_log+3
 22385  012C9C  0012               	return	
 22386  012C9E                     __end_of_log:
 22387                           	opt stack 0
 22388                           tosu	equ	0xFFF
 22389                           tosh	equ	0xFFE
 22390                           tosl	equ	0xFFD
 22391                           pclath	equ	0xFFA
 22392                           tblptru	equ	0xFF8
 22393                           tblptrh	equ	0xFF7
 22394                           tblptrl	equ	0xFF6
 22395                           tablat	equ	0xFF5
 22396                           prodh	equ	0xFF4
 22397                           prodl	equ	0xFF3
 22398                           intcon	equ	0xFF2
 22399                           indf0	equ	0xFEF
 22400                           postinc0	equ	0xFEE
 22401                           fsr0h	equ	0xFEA
 22402                           fsr0l	equ	0xFE9
 22403                           wreg	equ	0xFE8
 22404                           indf1	equ	0xFE7
 22405                           postdec1	equ	0xFE5
 22406                           fsr1h	equ	0xFE2
 22407                           fsr1l	equ	0xFE1
 22408                           indf2	equ	0xFDF
 22409                           postinc2	equ	0xFDE
 22410                           postdec2	equ	0xFDD
 22411                           plusw2	equ	0xFDB
 22412                           fsr2h	equ	0xFDA
 22413                           fsr2l	equ	0xFD9
 22414                           status	equ	0xFD8
 22415                           
 22416 ;; *************** function _exp *****************
 22417 ;; Defined at:
 22418 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 22419 ;; Parameters:    Size  Location     Type
 22420 ;;  x               4   87[BANK0 ] int 
 22421 ;; Auto vars:     Size  Location     Type
 22422 ;;  exponent        2   95[BANK0 ] int 
 22423 ;;  sign            1   97[BANK0 ] unsigned char 
 22424 ;; Return value:  Size  Location     Type
 22425 ;;                  4   87[BANK0 ] unsigned char 
 22426 ;; Registers used:
 22427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22428 ;; Tracked objects:
 22429 ;;		On entry : 0/0
 22430 ;;		On exit  : 0/0
 22431 ;;		Unchanged: 0/0
 22432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22434 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22436 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22437 ;;Total ram usage:       11 bytes
 22438 ;; Hardware stack levels used:    1
 22439 ;; Hardware stack levels required when called:    9
 22440 ;; This function calls:
 22441 ;;		___fldiv
 22442 ;;		___flge
 22443 ;;		___flmul
 22444 ;;		___flneg
 22445 ;;		___flsub
 22446 ;;		___fltol
 22447 ;;		___xxtofl
 22448 ;;		_eval_poly
 22449 ;;		_floor
 22450 ;;		_ldexp
 22451 ;; This function is called by:
 22452 ;;		_pow
 22453 ;; This function uses a non-reentrant model
 22454 ;;
 22455                           
 22456                           	psect	text125
 22457  011CBC                     __ptext125:
 22458                           	opt stack 0
 22459  011CBC                     _exp:
 22460                           	opt stack 18
 22461                           
 22462                           ;incstack = 0
 22463  011CBC  0100               	movlb	0	; () banked
 22464  011CBE  51B7               	movf	exp@x& (0+255),w,b
 22465  011CC0  11B8               	iorwf	(exp@x+1)& (0+255),w,b
 22466  011CC2  11B9               	iorwf	(exp@x+2)& (0+255),w,b
 22467  011CC4  11BA               	iorwf	(exp@x+3)& (0+255),w,b
 22468  011CC6  A4D8               	btfss	status,2,c
 22469  011CC8  D009               	goto	l2901
 22470                           
 22471                           ; BSR set to: 0
 22472  011CCA  0E00               	movlw	0
 22473  011CCC  6FB7               	movwf	?_exp& (0+255),b
 22474  011CCE  0E00               	movlw	0
 22475  011CD0  6FB8               	movwf	(?_exp+1)& (0+255),b
 22476  011CD2  0E80               	movlw	128
 22477  011CD4  6FB9               	movwf	(?_exp+2)& (0+255),b
 22478  011CD6  0E3F               	movlw	63
 22479  011CD8  6FBA               	movwf	(?_exp+3)& (0+255),b
 22480                           
 22481                           ; BSR set to: 0
 22482  011CDA  0012               	return	
 22483  011CDC                     l2901:
 22484                           
 22485                           ; BSR set to: 0
 22486                           
 22487                           ; BSR set to: 0
 22488  011CDC  0E18               	movlw	24
 22489  011CDE  6F60               	movwf	___flge@ff1& (0+255),b
 22490  011CE0  0E72               	movlw	114
 22491  011CE2  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 22492  011CE4  0E31               	movlw	49
 22493  011CE6  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 22494  011CE8  0E44               	movlw	68
 22495  011CEA  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 22496  011CEC  C0B7  F064         	movff	exp@x,___flge@ff2
 22497  011CF0  C0B8  F065         	movff	exp@x+1,___flge@ff2+1
 22498  011CF4  C0B9  F066         	movff	exp@x+2,___flge@ff2+2
 22499  011CF8  C0BA  F067         	movff	exp@x+3,___flge@ff2+3
 22500  011CFC  ECD1  F09A         	call	___flge	;wreg free
 22501  011D00  0100               	movlb	0	; () banked
 22502  011D02  B0D8               	btfsc	status,0,c
 22503  011D04  D00F               	goto	l2903
 22504                           
 22505                           ; BSR set to: 0
 22506  011D06  0E00               	movlw	0
 22507  011D08  0101               	movlb	1	; () banked
 22508  011D0A  6F1B               	movwf	(_errno+1)& (0+255),b
 22509  011D0C  0E22               	movlw	34
 22510  011D0E  6F1A               	movwf	_errno& (0+255),b
 22511  011D10  0EFF               	movlw	255
 22512  011D12  0100               	movlb	0	; () banked
 22513  011D14  6FB7               	movwf	?_exp& (0+255),b
 22514  011D16  0EFF               	movlw	255
 22515  011D18  6FB8               	movwf	(?_exp+1)& (0+255),b
 22516  011D1A  0E7F               	movlw	127
 22517  011D1C  6FB9               	movwf	(?_exp+2)& (0+255),b
 22518  011D1E  0E7F               	movlw	127
 22519  011D20  6FBA               	movwf	(?_exp+3)& (0+255),b
 22520                           
 22521                           ; BSR set to: 0
 22522  011D22  0012               	return	
 22523  011D24                     l2903:
 22524                           
 22525                           ; BSR set to: 0
 22526                           
 22527                           ; BSR set to: 0
 22528  011D24  C0B7  F060         	movff	exp@x,___flge@ff1
 22529  011D28  C0B8  F061         	movff	exp@x+1,___flge@ff1+1
 22530  011D2C  C0B9  F062         	movff	exp@x+2,___flge@ff1+2
 22531  011D30  C0BA  F063         	movff	exp@x+3,___flge@ff1+3
 22532  011D34  0E87               	movlw	135
 22533  011D36  6F64               	movwf	___flge@ff2& (0+255),b
 22534  011D38  0E48               	movlw	72
 22535  011D3A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22536  011D3C  0E3A               	movlw	58
 22537  011D3E  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22538  011D40  0EC4               	movlw	196
 22539  011D42  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22540  011D44  ECD1  F09A         	call	___flge	;wreg free
 22541  011D48  0100               	movlb	0	; () banked
 22542  011D4A  B0D8               	btfsc	status,0,c
 22543  011D4C  D00F               	goto	l2904
 22544                           
 22545                           ; BSR set to: 0
 22546  011D4E  0E00               	movlw	0
 22547  011D50  0101               	movlb	1	; () banked
 22548  011D52  6F1B               	movwf	(_errno+1)& (0+255),b
 22549  011D54  0E22               	movlw	34
 22550  011D56  6F1A               	movwf	_errno& (0+255),b
 22551  011D58  0E00               	movlw	0
 22552  011D5A  0100               	movlb	0	; () banked
 22553  011D5C  6FB7               	movwf	?_exp& (0+255),b
 22554  011D5E  0E00               	movlw	0
 22555  011D60  6FB8               	movwf	(?_exp+1)& (0+255),b
 22556  011D62  0E00               	movlw	0
 22557  011D64  6FB9               	movwf	(?_exp+2)& (0+255),b
 22558  011D66  0E00               	movlw	0
 22559  011D68  6FBA               	movwf	(?_exp+3)& (0+255),b
 22560                           
 22561                           ; BSR set to: 0
 22562  011D6A  0012               	return	
 22563  011D6C                     l2904:
 22564                           
 22565                           ; BSR set to: 0
 22566                           
 22567                           ; BSR set to: 0
 22568  011D6C  AFBA               	btfss	(exp@x+3)& (0+255),7,b
 22569  011D6E  D002               	goto	u11460
 22570  011D70  0E01               	movlw	1
 22571  011D72  D001               	goto	u11470
 22572  011D74                     u11460:
 22573  011D74  0E00               	movlw	0
 22574  011D76                     u11470:
 22575  011D76  6FC1               	movwf	exp@sign& (0+255),b
 22576                           
 22577                           ; BSR set to: 0
 22578  011D78  51C1               	movf	exp@sign& (0+255),w,b
 22579  011D7A  B4D8               	btfsc	status,2,c
 22580  011D7C  D012               	goto	l2905
 22581                           
 22582                           ; BSR set to: 0
 22583  011D7E  C0B7  F087         	movff	exp@x,___flneg@f1
 22584  011D82  C0B8  F088         	movff	exp@x+1,___flneg@f1+1
 22585  011D86  C0B9  F089         	movff	exp@x+2,___flneg@f1+2
 22586  011D8A  C0BA  F08A         	movff	exp@x+3,___flneg@f1+3
 22587  011D8E  ECC5  F0AD         	call	___flneg	;wreg free
 22588  011D92  C087  F0B7         	movff	?___flneg,exp@x
 22589  011D96  C088  F0B8         	movff	?___flneg+1,exp@x+1
 22590  011D9A  C089  F0B9         	movff	?___flneg+2,exp@x+2
 22591  011D9E  C08A  F0BA         	movff	?___flneg+3,exp@x+3
 22592  011DA2                     l2905:
 22593  011DA2  C0B7  F06E         	movff	exp@x,___flmul@b
 22594  011DA6  C0B8  F06F         	movff	exp@x+1,___flmul@b+1
 22595  011DAA  C0B9  F070         	movff	exp@x+2,___flmul@b+2
 22596  011DAE  C0BA  F071         	movff	exp@x+3,___flmul@b+3
 22597  011DB2  0E3B               	movlw	59
 22598  011DB4  0100               	movlb	0	; () banked
 22599  011DB6  6F72               	movwf	___flmul@a& (0+255),b
 22600  011DB8  0EAA               	movlw	170
 22601  011DBA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 22602  011DBC  0EB8               	movlw	184
 22603  011DBE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 22604  011DC0  0E3F               	movlw	63
 22605  011DC2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 22606  011DC4  EC9D  F085         	call	___flmul	;wreg free
 22607  011DC8  C06E  F0B7         	movff	?___flmul,exp@x
 22608  011DCC  C06F  F0B8         	movff	?___flmul+1,exp@x+1
 22609  011DD0  C070  F0B9         	movff	?___flmul+2,exp@x+2
 22610  011DD4  C071  F0BA         	movff	?___flmul+3,exp@x+3
 22611  011DD8  C0B7  F0A9         	movff	exp@x,floor@x
 22612  011DDC  C0B8  F0AA         	movff	exp@x+1,floor@x+1
 22613  011DE0  C0B9  F0AB         	movff	exp@x+2,floor@x+2
 22614  011DE4  C0BA  F0AC         	movff	exp@x+3,floor@x+3
 22615  011DE8  ECED  F09B         	call	_floor	;wreg free
 22616  011DEC  C0A9  F0BB         	movff	?_floor,_exp$15673
 22617  011DF0  C0AA  F0BC         	movff	?_floor+1,_exp$15673+1
 22618  011DF4  C0AB  F0BD         	movff	?_floor+2,_exp$15673+2
 22619  011DF8  C0AC  F0BE         	movff	?_floor+3,_exp$15673+3
 22620  011DFC  C0BB  F09F         	movff	_exp$15673,___fltol@f1
 22621  011E00  C0BC  F0A0         	movff	_exp$15673+1,___fltol@f1+1
 22622  011E04  C0BD  F0A1         	movff	_exp$15673+2,___fltol@f1+2
 22623  011E08  C0BE  F0A2         	movff	_exp$15673+3,___fltol@f1+3
 22624  011E0C  ECF3  F09E         	call	___fltol	;wreg free
 22625  011E10  C09F  F0BF         	movff	?___fltol,exp@exponent
 22626  011E14  C0A0  F0C0         	movff	?___fltol+1,exp@exponent+1
 22627  011E18  C0B7  F09F         	movff	exp@x,___flsub@b
 22628  011E1C  C0B8  F0A0         	movff	exp@x+1,___flsub@b+1
 22629  011E20  C0B9  F0A1         	movff	exp@x+2,___flsub@b+2
 22630  011E24  C0BA  F0A2         	movff	exp@x+3,___flsub@b+3
 22631  011E28  C0BF  F060         	movff	exp@exponent,___xxtofl@val
 22632  011E2C  C0C0  F061         	movff	exp@exponent+1,___xxtofl@val+1
 22633  011E30  0100               	movlb	0	; () banked
 22634  011E32  0E00               	movlw	0
 22635  011E34  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22636  011E36  0EFF               	movlw	-1
 22637  011E38  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 22638  011E3A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 22639  011E3C  0E01               	movlw	1
 22640  011E3E  EC03  F097         	call	___xxtofl
 22641  011E42  C060  F0A3         	movff	?___xxtofl,___flsub@a
 22642  011E46  C061  F0A4         	movff	?___xxtofl+1,___flsub@a+1
 22643  011E4A  C062  F0A5         	movff	?___xxtofl+2,___flsub@a+2
 22644  011E4E  C063  F0A6         	movff	?___xxtofl+3,___flsub@a+3
 22645  011E52  EC59  F0AB         	call	___flsub	;wreg free
 22646  011E56  C09F  F0B7         	movff	?___flsub,exp@x
 22647  011E5A  C0A0  F0B8         	movff	?___flsub+1,exp@x+1
 22648  011E5E  C0A1  F0B9         	movff	?___flsub+2,exp@x+2
 22649  011E62  C0A2  F0BA         	movff	?___flsub+3,exp@x+3
 22650  011E66  C0B7  F09F         	movff	exp@x,eval_poly@x
 22651  011E6A  C0B8  F0A0         	movff	exp@x+1,eval_poly@x+1
 22652  011E6E  C0B9  F0A1         	movff	exp@x+2,eval_poly@x+2
 22653  011E72  C0BA  F0A2         	movff	exp@x+3,eval_poly@x+3
 22654  011E76  0E23               	movlw	low exp@coeff
 22655  011E78  0100               	movlb	0	; () banked
 22656  011E7A  6FA3               	movwf	eval_poly@d& (0+255),b
 22657  011E7C  0EFE               	movlw	high exp@coeff
 22658  011E7E  6FA4               	movwf	(eval_poly@d+1)& (0+255),b
 22659  011E80  0E00               	movlw	0
 22660  011E82  6FA6               	movwf	(eval_poly@n+1)& (0+255),b
 22661  011E84  0E09               	movlw	9
 22662  011E86  6FA5               	movwf	eval_poly@n& (0+255),b
 22663  011E88  EC81  F09D         	call	_eval_poly	;wreg free
 22664  011E8C  C09F  F0AF         	movff	?_eval_poly,ldexp@value
 22665  011E90  C0A0  F0B0         	movff	?_eval_poly+1,ldexp@value+1
 22666  011E94  C0A1  F0B1         	movff	?_eval_poly+2,ldexp@value+2
 22667  011E98  C0A2  F0B2         	movff	?_eval_poly+3,ldexp@value+3
 22668  011E9C  C0BF  F0B3         	movff	exp@exponent,ldexp@newexp
 22669  011EA0  C0C0  F0B4         	movff	exp@exponent+1,ldexp@newexp+1
 22670  011EA4  EC81  F09E         	call	_ldexp	;wreg free
 22671  011EA8  C0AF  F0B7         	movff	?_ldexp,exp@x
 22672  011EAC  C0B0  F0B8         	movff	?_ldexp+1,exp@x+1
 22673  011EB0  C0B1  F0B9         	movff	?_ldexp+2,exp@x+2
 22674  011EB4  C0B2  F0BA         	movff	?_ldexp+3,exp@x+3
 22675  011EB8  0100               	movlb	0	; () banked
 22676  011EBA  51C1               	movf	exp@sign& (0+255),w,b
 22677  011EBC  B4D8               	btfsc	status,2,c
 22678  011EBE  D02F               	goto	l2906
 22679                           
 22680                           ; BSR set to: 0
 22681  011EC0  29B7               	incf	exp@x& (0+255),w,b
 22682  011EC2  E112               	bnz	l14156
 22683  011EC4  29B8               	incf	(exp@x+1)& (0+255),w,b
 22684  011EC6  E110               	bnz	l14156
 22685  011EC8  0E7F               	movlw	127
 22686  011ECA  19B9               	xorwf	(exp@x+2)& (0+255),w,b
 22687  011ECC  E10D               	bnz	l14156
 22688  011ECE  0E7F               	movlw	127
 22689  011ED0  19BA               	xorwf	(exp@x+3)& (0+255),w,b
 22690  011ED2  A4D8               	btfss	status,2,c
 22691  011ED4  D009               	goto	l2907
 22692                           
 22693                           ; BSR set to: 0
 22694  011ED6  0E00               	movlw	0
 22695  011ED8  6FB7               	movwf	?_exp& (0+255),b
 22696  011EDA  0E00               	movlw	0
 22697  011EDC  6FB8               	movwf	(?_exp+1)& (0+255),b
 22698  011EDE  0E00               	movlw	0
 22699  011EE0  6FB9               	movwf	(?_exp+2)& (0+255),b
 22700  011EE2  0E00               	movlw	0
 22701  011EE4  6FBA               	movwf	(?_exp+3)& (0+255),b
 22702                           
 22703                           ; BSR set to: 0
 22704  011EE6  0012               	return	
 22705  011EE8                     l2907:
 22706  011EE8                     l14156:
 22707                           
 22708                           ; BSR set to: 0
 22709  011EE8  0E00               	movlw	0
 22710  011EEA  6F60               	movwf	___fldiv@b& (0+255),b
 22711  011EEC  0E00               	movlw	0
 22712  011EEE  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 22713  011EF0  0E80               	movlw	128
 22714  011EF2  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 22715  011EF4  0E3F               	movlw	63
 22716  011EF6  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22717  011EF8  C0B7  F064         	movff	exp@x,___fldiv@a
 22718  011EFC  C0B8  F065         	movff	exp@x+1,___fldiv@a+1
 22719  011F00  C0B9  F066         	movff	exp@x+2,___fldiv@a+2
 22720  011F04  C0BA  F067         	movff	exp@x+3,___fldiv@a+3
 22721  011F08  EC6C  F08A         	call	___fldiv	;wreg free
 22722  011F0C  C060  F0B7         	movff	?___fldiv,?_exp
 22723  011F10  C061  F0B8         	movff	?___fldiv+1,?_exp+1
 22724  011F14  C062  F0B9         	movff	?___fldiv+2,?_exp+2
 22725  011F18  C063  F0BA         	movff	?___fldiv+3,?_exp+3
 22726  011F1C  0012               	return	
 22727  011F1E                     l2906:
 22728                           
 22729                           ; BSR set to: 0
 22730  011F1E  C0B7  F0B7         	movff	exp@x,?_exp
 22731  011F22  C0B8  F0B8         	movff	exp@x+1,?_exp+1
 22732  011F26  C0B9  F0B9         	movff	exp@x+2,?_exp+2
 22733  011F2A  C0BA  F0BA         	movff	exp@x+3,?_exp+3
 22734  011F2E  0012               	return		;funcret
 22735  011F30                     __end_of_exp:
 22736                           	opt stack 0
 22737                           tosu	equ	0xFFF
 22738                           tosh	equ	0xFFE
 22739                           tosl	equ	0xFFD
 22740                           pclath	equ	0xFFA
 22741                           tblptru	equ	0xFF8
 22742                           tblptrh	equ	0xFF7
 22743                           tblptrl	equ	0xFF6
 22744                           tablat	equ	0xFF5
 22745                           prodh	equ	0xFF4
 22746                           prodl	equ	0xFF3
 22747                           intcon	equ	0xFF2
 22748                           indf0	equ	0xFEF
 22749                           postinc0	equ	0xFEE
 22750                           fsr0h	equ	0xFEA
 22751                           fsr0l	equ	0xFE9
 22752                           wreg	equ	0xFE8
 22753                           indf1	equ	0xFE7
 22754                           postdec1	equ	0xFE5
 22755                           fsr1h	equ	0xFE2
 22756                           fsr1l	equ	0xFE1
 22757                           indf2	equ	0xFDF
 22758                           postinc2	equ	0xFDE
 22759                           postdec2	equ	0xFDD
 22760                           plusw2	equ	0xFDB
 22761                           fsr2h	equ	0xFDA
 22762                           fsr2l	equ	0xFD9
 22763                           status	equ	0xFD8
 22764                           
 22765 ;; *************** function _ldexp *****************
 22766 ;; Defined at:
 22767 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 22768 ;; Parameters:    Size  Location     Type
 22769 ;;  value           4   79[BANK0 ] unsigned char 
 22770 ;;  newexp          2   83[BANK0 ] int 
 22771 ;; Auto vars:     Size  Location     Type
 22772 ;;		None
 22773 ;; Return value:  Size  Location     Type
 22774 ;;                  4   79[BANK0 ] int 
 22775 ;; Registers used:
 22776 ;;		wreg, status,2, status,0
 22777 ;; Tracked objects:
 22778 ;;		On entry : 0/0
 22779 ;;		On exit  : 0/0
 22780 ;;		Unchanged: 0/0
 22781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22782 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22785 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22786 ;;Total ram usage:        8 bytes
 22787 ;; Hardware stack levels used:    1
 22788 ;; Hardware stack levels required when called:    7
 22789 ;; This function calls:
 22790 ;;		Nothing
 22791 ;; This function is called by:
 22792 ;;		_exp
 22793 ;; This function uses a non-reentrant model
 22794 ;;
 22795                           
 22796                           	psect	text126
 22797  013D02                     __ptext126:
 22798                           	opt stack 0
 22799  013D02                     _ldexp:
 22800                           	opt stack 19
 22801                           
 22802                           ;incstack = 0
 22803  013D02  0100               	movlb	0	; () banked
 22804  013D04  51AF               	movf	ldexp@value& (0+255),w,b
 22805  013D06  11B0               	iorwf	(ldexp@value+1)& (0+255),w,b
 22806  013D08  11B1               	iorwf	(ldexp@value+2)& (0+255),w,b
 22807  013D0A  11B2               	iorwf	(ldexp@value+3)& (0+255),w,b
 22808  013D0C  A4D8               	btfss	status,2,c
 22809  013D0E  D009               	goto	l2925
 22810                           
 22811                           ; BSR set to: 0
 22812  013D10  0E00               	movlw	0
 22813  013D12  6FAF               	movwf	?_ldexp& (0+255),b
 22814  013D14  0E00               	movlw	0
 22815  013D16  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22816  013D18  0E00               	movlw	0
 22817  013D1A  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22818  013D1C  0E00               	movlw	0
 22819  013D1E  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22820                           
 22821                           ; BSR set to: 0
 22822  013D20  0012               	return	
 22823  013D22                     l2925:
 22824                           
 22825                           ; BSR set to: 0
 22826                           
 22827                           ; BSR set to: 0
 22828  013D22  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22829  013D24  0B7F               	andlw	127
 22830  013D26  6FB5               	movwf	??_ldexp& (0+255),b
 22831  013D28  6BB6               	clrf	(??_ldexp+1)& (0+255),b
 22832  013D2A  90D8               	bcf	status,0,c
 22833  013D2C  37B5               	rlcf	??_ldexp& (0+255),f,b
 22834  013D2E  37B6               	rlcf	(??_ldexp+1)& (0+255),f,b
 22835  013D30  51B5               	movf	??_ldexp& (0+255),w,b
 22836  013D32  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22837  013D34  51B6               	movf	(??_ldexp+1)& (0+255),w,b
 22838  013D36  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22839  013D38  AFB1               	btfss	(ldexp@value+2)& (0+255),7,b
 22840  013D3A  D003               	goto	u11100
 22841  013D3C  6BB5               	clrf	??_ldexp& (0+255),b
 22842  013D3E  2BB5               	incf	??_ldexp& (0+255),f,b
 22843  013D40  D002               	goto	u11108
 22844  013D42                     u11100:
 22845  013D42  0100               	movlb	0	; () banked
 22846  013D44  6BB5               	clrf	??_ldexp& (0+255),b
 22847  013D46                     u11108:
 22848  013D46  51B5               	movf	??_ldexp& (0+255),w,b
 22849  013D48  27B3               	addwf	ldexp@newexp& (0+255),f,b
 22850  013D4A  0E00               	movlw	0
 22851  013D4C  23B4               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 22852  013D4E  AFB4               	btfss	(ldexp@newexp+1)& (0+255),7,b
 22853  013D50  D00F               	goto	l2927
 22854                           
 22855                           ; BSR set to: 0
 22856  013D52  0E00               	movlw	0
 22857  013D54  0101               	movlb	1	; () banked
 22858  013D56  6F1B               	movwf	(_errno+1)& (0+255),b
 22859  013D58  0E22               	movlw	34
 22860  013D5A  6F1A               	movwf	_errno& (0+255),b
 22861  013D5C  0E00               	movlw	0
 22862  013D5E  0100               	movlb	0	; () banked
 22863  013D60  6FAF               	movwf	?_ldexp& (0+255),b
 22864  013D62  0E00               	movlw	0
 22865  013D64  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22866  013D66  0E00               	movlw	0
 22867  013D68  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22868  013D6A  0E00               	movlw	0
 22869  013D6C                     L10:
 22870  013D6C  6FB2               	movwf	(?_ldexp+3)& (0+255),b
 22871                           
 22872                           ; BSR set to: 0
 22873  013D6E  0012               	return	
 22874  013D70                     l2927:
 22875                           
 22876                           ; BSR set to: 0
 22877                           
 22878                           ; BSR set to: 0
 22879  013D70  BFB4               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 22880  013D72  D01B               	goto	l2929
 22881  013D74  05B4               	decf	(ldexp@newexp+1)& (0+255),w,b
 22882  013D76  A0D8               	btfss	status,0,c
 22883  013D78  D018               	goto	l2929
 22884                           
 22885                           ; BSR set to: 0
 22886  013D7A  0E00               	movlw	0
 22887  013D7C  0101               	movlb	1	; () banked
 22888  013D7E  6F1B               	movwf	(_errno+1)& (0+255),b
 22889  013D80  0E22               	movlw	34
 22890  013D82  6F1A               	movwf	_errno& (0+255),b
 22891                           
 22892                           ; BSR set to: 1
 22893  013D84  0100               	movlb	0	; () banked
 22894  013D86  AFB2               	btfss	(ldexp@value+3)& (0+255),7,b
 22895  013D88  D008               	goto	l2930
 22896                           
 22897                           ; BSR set to: 0
 22898  013D8A  0EFF               	movlw	255
 22899  013D8C  6FAF               	movwf	?_ldexp& (0+255),b
 22900  013D8E  0EFF               	movlw	255
 22901  013D90  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22902  013D92  0E7F               	movlw	127
 22903  013D94  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22904  013D96  0EFF               	movlw	255
 22905  013D98  D7E9               	goto	L10
 22906  013D9A                     l2930:
 22907                           
 22908                           ; BSR set to: 0
 22909                           
 22910                           ; BSR set to: 0
 22911  013D9A  0EFF               	movlw	255
 22912  013D9C  6FAF               	movwf	?_ldexp& (0+255),b
 22913  013D9E  0EFF               	movlw	255
 22914  013DA0  6FB0               	movwf	(?_ldexp+1)& (0+255),b
 22915  013DA2  0E7F               	movlw	127
 22916  013DA4  6FB1               	movwf	(?_ldexp+2)& (0+255),b
 22917  013DA6  0E7F               	movlw	127
 22918  013DA8  D7E1               	goto	L10
 22919  013DAA                     l2929:
 22920                           
 22921                           ; BSR set to: 0
 22922                           
 22923                           ; BSR set to: 0
 22924  013DAA  35B4               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 22925  013DAC  31B4               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 22926  013DAE  6FB6               	movwf	(??_ldexp+1)& (0+255),b
 22927  013DB0  31B3               	rrcf	ldexp@newexp& (0+255),w,b
 22928  013DB2  6FB5               	movwf	??_ldexp& (0+255),b
 22929  013DB4  51B2               	movf	(ldexp@value+3)& (0+255),w,b
 22930  013DB6  19B5               	xorwf	??_ldexp& (0+255),w,b
 22931  013DB8  0B80               	andlw	-128
 22932  013DBA  19B5               	xorwf	??_ldexp& (0+255),w,b
 22933  013DBC  6FB2               	movwf	(ldexp@value+3)& (0+255),b
 22934  013DBE  C0B3  F0B5         	movff	ldexp@newexp,??_ldexp
 22935  013DC2  0E01               	movlw	1
 22936  013DC4  17B5               	andwf	??_ldexp& (0+255),f,b
 22937  013DC6  33B5               	rrcf	??_ldexp& (0+255),f,b
 22938  013DC8  33B5               	rrcf	??_ldexp& (0+255),f,b
 22939  013DCA  51B1               	movf	(ldexp@value+2)& (0+255),w,b
 22940  013DCC  19B5               	xorwf	??_ldexp& (0+255),w,b
 22941  013DCE  0B7F               	andlw	-129
 22942  013DD0  19B5               	xorwf	??_ldexp& (0+255),w,b
 22943  013DD2  6FB1               	movwf	(ldexp@value+2)& (0+255),b
 22944                           
 22945                           ; BSR set to: 0
 22946                           
 22947                           ; BSR set to: 0
 22948                           
 22949                           ; BSR set to: 0
 22950  013DD4  C0AF  F0AF         	movff	ldexp@value,?_ldexp
 22951  013DD8  C0B0  F0B0         	movff	ldexp@value+1,?_ldexp+1
 22952  013DDC  C0B1  F0B1         	movff	ldexp@value+2,?_ldexp+2
 22953  013DE0  C0B2  F0B2         	movff	ldexp@value+3,?_ldexp+3
 22954  013DE4  0012               	return	
 22955  013DE6                     __end_of_ldexp:
 22956                           	opt stack 0
 22957                           tosu	equ	0xFFF
 22958                           tosh	equ	0xFFE
 22959                           tosl	equ	0xFFD
 22960                           pclath	equ	0xFFA
 22961                           tblptru	equ	0xFF8
 22962                           tblptrh	equ	0xFF7
 22963                           tblptrl	equ	0xFF6
 22964                           tablat	equ	0xFF5
 22965                           prodh	equ	0xFF4
 22966                           prodl	equ	0xFF3
 22967                           intcon	equ	0xFF2
 22968                           indf0	equ	0xFEF
 22969                           postinc0	equ	0xFEE
 22970                           fsr0h	equ	0xFEA
 22971                           fsr0l	equ	0xFE9
 22972                           wreg	equ	0xFE8
 22973                           indf1	equ	0xFE7
 22974                           postdec1	equ	0xFE5
 22975                           fsr1h	equ	0xFE2
 22976                           fsr1l	equ	0xFE1
 22977                           indf2	equ	0xFDF
 22978                           postinc2	equ	0xFDE
 22979                           postdec2	equ	0xFDD
 22980                           plusw2	equ	0xFDB
 22981                           fsr2h	equ	0xFDA
 22982                           fsr2l	equ	0xFD9
 22983                           status	equ	0xFD8
 22984                           
 22985 ;; *************** function _floor *****************
 22986 ;; Defined at:
 22987 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 22988 ;; Parameters:    Size  Location     Type
 22989 ;;  x               4   73[BANK0 ] int 
 22990 ;; Auto vars:     Size  Location     Type
 22991 ;;  i               4   77[BANK0 ] int 
 22992 ;;  expon           2   81[BANK0 ] int 
 22993 ;; Return value:  Size  Location     Type
 22994 ;;                  4   73[BANK0 ] int 
 22995 ;; Registers used:
 22996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22997 ;; Tracked objects:
 22998 ;;		On entry : 0/0
 22999 ;;		On exit  : 0/0
 23000 ;;		Unchanged: 0/0
 23001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23002 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23003 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23005 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23006 ;;Total ram usage:       10 bytes
 23007 ;; Hardware stack levels used:    1
 23008 ;; Hardware stack levels required when called:    8
 23009 ;; This function calls:
 23010 ;;		___fladd
 23011 ;;		___flge
 23012 ;;		___fltol
 23013 ;;		___xxtofl
 23014 ;;		_frexp
 23015 ;; This function is called by:
 23016 ;;		_exp
 23017 ;; This function uses a non-reentrant model
 23018 ;;
 23019                           
 23020                           	psect	text127
 23021  0137DA                     __ptext127:
 23022                           	opt stack 0
 23023  0137DA                     _floor:
 23024                           	opt stack 18
 23025                           
 23026                           ; BSR set to: 0
 23027                           ;incstack = 0
 23028  0137DA  C0A9  F060         	movff	floor@x,frexp@value
 23029  0137DE  C0AA  F061         	movff	floor@x+1,frexp@value+1
 23030  0137E2  C0AB  F062         	movff	floor@x+2,frexp@value+2
 23031  0137E6  C0AC  F063         	movff	floor@x+3,frexp@value+3
 23032  0137EA  0EB1               	movlw	low floor@expon
 23033  0137EC  0100               	movlb	0	; () banked
 23034  0137EE  6F64               	movwf	frexp@eptr& (0+255),b
 23035  0137F0  0E00               	movlw	high floor@expon
 23036  0137F2  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 23037  0137F4  EC70  F0A1         	call	_frexp	;wreg free
 23038  0137F8  0100               	movlb	0	; () banked
 23039  0137FA  AFB2               	btfss	(floor@expon+1)& (0+255),7,b
 23040  0137FC  D014               	goto	l2912
 23041                           
 23042                           ; BSR set to: 0
 23043  0137FE  AFAC               	btfss	(floor@x+3)& (0+255),7,b
 23044  013800  D009               	goto	l2913
 23045                           
 23046                           ; BSR set to: 0
 23047  013802  0E00               	movlw	0
 23048  013804  6FA9               	movwf	?_floor& (0+255),b
 23049  013806  0E00               	movlw	0
 23050  013808  6FAA               	movwf	(?_floor+1)& (0+255),b
 23051  01380A  0E80               	movlw	128
 23052  01380C  6FAB               	movwf	(?_floor+2)& (0+255),b
 23053  01380E  0EBF               	movlw	191
 23054  013810  6FAC               	movwf	(?_floor+3)& (0+255),b
 23055                           
 23056                           ; BSR set to: 0
 23057  013812  0012               	return	
 23058  013814                     l2913:
 23059                           
 23060                           ; BSR set to: 0
 23061                           
 23062                           ; BSR set to: 0
 23063  013814  0E00               	movlw	0
 23064  013816  6FA9               	movwf	?_floor& (0+255),b
 23065  013818  0E00               	movlw	0
 23066  01381A  6FAA               	movwf	(?_floor+1)& (0+255),b
 23067  01381C  0E00               	movlw	0
 23068  01381E  6FAB               	movwf	(?_floor+2)& (0+255),b
 23069  013820  0E00               	movlw	0
 23070  013822  6FAC               	movwf	(?_floor+3)& (0+255),b
 23071                           
 23072                           ; BSR set to: 0
 23073  013824  0012               	return	
 23074  013826                     l2912:
 23075                           
 23076                           ; BSR set to: 0
 23077                           
 23078                           ; BSR set to: 0
 23079  013826  51B2               	movf	(floor@expon+1)& (0+255),w,b
 23080  013828  E104               	bnz	u11060
 23081  01382A  0E1D               	movlw	29
 23082  01382C  5DB1               	subwf	floor@expon& (0+255),w,b
 23083  01382E  A0D8               	btfss	status,0,c
 23084  013830  D009               	goto	l2915
 23085  013832                     u11060:
 23086                           
 23087                           ; BSR set to: 0
 23088  013832  C0A9  F0A9         	movff	floor@x,?_floor
 23089  013836  C0AA  F0AA         	movff	floor@x+1,?_floor+1
 23090  01383A  C0AB  F0AB         	movff	floor@x+2,?_floor+2
 23091  01383E  C0AC  F0AC         	movff	floor@x+3,?_floor+3
 23092  013842  0012               	return	
 23093  013844                     l2915:
 23094                           
 23095                           ; BSR set to: 0
 23096                           
 23097                           ; BSR set to: 0
 23098  013844  C0A9  F09F         	movff	floor@x,___fltol@f1
 23099  013848  C0AA  F0A0         	movff	floor@x+1,___fltol@f1+1
 23100  01384C  C0AB  F0A1         	movff	floor@x+2,___fltol@f1+2
 23101  013850  C0AC  F0A2         	movff	floor@x+3,___fltol@f1+3
 23102  013854  ECF3  F09E         	call	___fltol	;wreg free
 23103  013858  C09F  F060         	movff	?___fltol,___xxtofl@val
 23104  01385C  C0A0  F061         	movff	?___fltol+1,___xxtofl@val+1
 23105  013860  C0A1  F062         	movff	?___fltol+2,___xxtofl@val+2
 23106  013864  C0A2  F063         	movff	?___fltol+3,___xxtofl@val+3
 23107  013868  0E01               	movlw	1
 23108  01386A  EC03  F097         	call	___xxtofl
 23109  01386E  C060  F0AD         	movff	?___xxtofl,floor@i
 23110  013872  C061  F0AE         	movff	?___xxtofl+1,floor@i+1
 23111  013876  C062  F0AF         	movff	?___xxtofl+2,floor@i+2
 23112  01387A  C063  F0B0         	movff	?___xxtofl+3,floor@i+3
 23113  01387E  C0A9  F060         	movff	floor@x,___flge@ff1
 23114  013882  C0AA  F061         	movff	floor@x+1,___flge@ff1+1
 23115  013886  C0AB  F062         	movff	floor@x+2,___flge@ff1+2
 23116  01388A  C0AC  F063         	movff	floor@x+3,___flge@ff1+3
 23117  01388E  C0AD  F064         	movff	floor@i,___flge@ff2
 23118  013892  C0AE  F065         	movff	floor@i+1,___flge@ff2+1
 23119  013896  C0AF  F066         	movff	floor@i+2,___flge@ff2+2
 23120  01389A  C0B0  F067         	movff	floor@i+3,___flge@ff2+3
 23121  01389E  ECD1  F09A         	call	___flge	;wreg free
 23122  0138A2  0100               	movlb	0	; () banked
 23123  0138A4  B0D8               	btfsc	status,0,c
 23124  0138A6  D01B               	goto	l2916
 23125                           
 23126                           ; BSR set to: 0
 23127  0138A8  C0AD  F08B         	movff	floor@i,___fladd@b
 23128  0138AC  C0AE  F08C         	movff	floor@i+1,___fladd@b+1
 23129  0138B0  C0AF  F08D         	movff	floor@i+2,___fladd@b+2
 23130  0138B4  C0B0  F08E         	movff	floor@i+3,___fladd@b+3
 23131  0138B8  0E00               	movlw	0
 23132  0138BA  6F8F               	movwf	___fladd@a& (0+255),b
 23133  0138BC  0E00               	movlw	0
 23134  0138BE  6F90               	movwf	(___fladd@a+1)& (0+255),b
 23135  0138C0  0E80               	movlw	128
 23136  0138C2  6F91               	movwf	(___fladd@a+2)& (0+255),b
 23137  0138C4  0EBF               	movlw	191
 23138  0138C6  6F92               	movwf	(___fladd@a+3)& (0+255),b
 23139  0138C8  EC46  F087         	call	___fladd	;wreg free
 23140  0138CC  C08B  F0A9         	movff	?___fladd,?_floor
 23141  0138D0  C08C  F0AA         	movff	?___fladd+1,?_floor+1
 23142  0138D4  C08D  F0AB         	movff	?___fladd+2,?_floor+2
 23143  0138D8  C08E  F0AC         	movff	?___fladd+3,?_floor+3
 23144  0138DC  0012               	return	
 23145  0138DE                     l2916:
 23146                           
 23147                           ; BSR set to: 0
 23148  0138DE  C0AD  F0A9         	movff	floor@i,?_floor
 23149  0138E2  C0AE  F0AA         	movff	floor@i+1,?_floor+1
 23150  0138E6  C0AF  F0AB         	movff	floor@i+2,?_floor+2
 23151  0138EA  C0B0  F0AC         	movff	floor@i+3,?_floor+3
 23152  0138EE  0012               	return		;funcret
 23153  0138F0                     __end_of_floor:
 23154                           	opt stack 0
 23155                           tosu	equ	0xFFF
 23156                           tosh	equ	0xFFE
 23157                           tosl	equ	0xFFD
 23158                           pclath	equ	0xFFA
 23159                           tblptru	equ	0xFF8
 23160                           tblptrh	equ	0xFF7
 23161                           tblptrl	equ	0xFF6
 23162                           tablat	equ	0xFF5
 23163                           prodh	equ	0xFF4
 23164                           prodl	equ	0xFF3
 23165                           intcon	equ	0xFF2
 23166                           indf0	equ	0xFEF
 23167                           postinc0	equ	0xFEE
 23168                           fsr0h	equ	0xFEA
 23169                           fsr0l	equ	0xFE9
 23170                           wreg	equ	0xFE8
 23171                           indf1	equ	0xFE7
 23172                           postdec1	equ	0xFE5
 23173                           fsr1h	equ	0xFE2
 23174                           fsr1l	equ	0xFE1
 23175                           indf2	equ	0xFDF
 23176                           postinc2	equ	0xFDE
 23177                           postdec2	equ	0xFDD
 23178                           plusw2	equ	0xFDB
 23179                           fsr2h	equ	0xFDA
 23180                           fsr2l	equ	0xFD9
 23181                           status	equ	0xFD8
 23182                           
 23183 ;; *************** function _frexp *****************
 23184 ;; Defined at:
 23185 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 23186 ;; Parameters:    Size  Location     Type
 23187 ;;  value           4    0[BANK0 ] int 
 23188 ;;  eptr            2    4[BANK0 ] PTR int 
 23189 ;;		 -> log@exponent(2), floor@expon(2), 
 23190 ;; Auto vars:     Size  Location     Type
 23191 ;;		None
 23192 ;; Return value:  Size  Location     Type
 23193 ;;                  4    0[BANK0 ] PTR int 
 23194 ;; Registers used:
 23195 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23196 ;; Tracked objects:
 23197 ;;		On entry : 0/0
 23198 ;;		On exit  : 0/0
 23199 ;;		Unchanged: 0/0
 23200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23201 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23203 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23204 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23205 ;;Total ram usage:        8 bytes
 23206 ;; Hardware stack levels used:    1
 23207 ;; Hardware stack levels required when called:    7
 23208 ;; This function calls:
 23209 ;;		Nothing
 23210 ;; This function is called by:
 23211 ;;		_floor
 23212 ;;		_log
 23213 ;; This function uses a non-reentrant model
 23214 ;;
 23215                           
 23216                           	psect	text128
 23217  0142E0                     __ptext128:
 23218                           	opt stack 0
 23219  0142E0                     _frexp:
 23220                           	opt stack 19
 23221                           
 23222                           ;incstack = 0
 23223  0142E0  0100               	movlb	0	; () banked
 23224  0142E2  5160               	movf	frexp@value& (0+255),w,b
 23225  0142E4  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 23226  0142E6  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 23227  0142E8  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 23228  0142EA  A4D8               	btfss	status,2,c
 23229  0142EC  D011               	goto	l2921
 23230                           
 23231                           ; BSR set to: 0
 23232  0142EE  C064  FFD9         	movff	frexp@eptr,fsr2l
 23233  0142F2  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23234  0142F6  0E00               	movlw	0
 23235  0142F8  6EDE               	movwf	postinc2,c
 23236  0142FA  0E00               	movlw	0
 23237  0142FC  6EDD               	movwf	postdec2,c
 23238                           
 23239                           ; BSR set to: 0
 23240  0142FE  0E00               	movlw	0
 23241  014300  6F60               	movwf	?_frexp& (0+255),b
 23242  014302  0E00               	movlw	0
 23243  014304  6F61               	movwf	(?_frexp+1)& (0+255),b
 23244  014306  0E00               	movlw	0
 23245  014308  6F62               	movwf	(?_frexp+2)& (0+255),b
 23246  01430A  0E00               	movlw	0
 23247  01430C  6F63               	movwf	(?_frexp+3)& (0+255),b
 23248                           
 23249                           ; BSR set to: 0
 23250  01430E  0012               	return	
 23251  014310                     l2921:
 23252                           
 23253                           ; BSR set to: 0
 23254                           
 23255                           ; BSR set to: 0
 23256  014310  5163               	movf	(frexp@value+3)& (0+255),w,b
 23257  014312  0B7F               	andlw	127
 23258  014314  6F66               	movwf	??_frexp& (0+255),b
 23259  014316  6B67               	clrf	(??_frexp+1)& (0+255),b
 23260  014318  90D8               	bcf	status,0,c
 23261  01431A  3766               	rlcf	??_frexp& (0+255),f,b
 23262  01431C  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 23263  01431E  C064  FFD9         	movff	frexp@eptr,fsr2l
 23264  014322  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23265  014326  C066  FFDE         	movff	??_frexp,postinc2
 23266  01432A  C067  FFDD         	movff	??_frexp+1,postdec2
 23267  01432E  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 23268  014330  D003               	goto	u10640
 23269  014332  6B66               	clrf	??_frexp& (0+255),b
 23270  014334  2B66               	incf	??_frexp& (0+255),f,b
 23271  014336  D002               	goto	u10648
 23272  014338                     u10640:
 23273  014338  0100               	movlb	0	; () banked
 23274  01433A  6B66               	clrf	??_frexp& (0+255),b
 23275  01433C                     u10648:
 23276  01433C  5166               	movf	??_frexp& (0+255),w,b
 23277  01433E  C064  FFD9         	movff	frexp@eptr,fsr2l
 23278  014342  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23279  014346  12DE               	iorwf	postinc2,f,c
 23280  014348  0E00               	movlw	0
 23281  01434A  12DD               	iorwf	postdec2,f,c
 23282                           
 23283                           ; BSR set to: 0
 23284  01434C  C064  FFD9         	movff	frexp@eptr,fsr2l
 23285  014350  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 23286  014354  0E82               	movlw	130
 23287  014356  26DE               	addwf	postinc2,f,c
 23288  014358  0EFF               	movlw	255
 23289  01435A  22DD               	addwfc	postdec2,f,c
 23290                           
 23291                           ; BSR set to: 0
 23292  01435C  8163               	bsf	(frexp@value+3)& (0+255),0,b
 23293  01435E  8363               	bsf	(frexp@value+3)& (0+255),1,b
 23294  014360  8563               	bsf	(frexp@value+3)& (0+255),2,b
 23295  014362  8763               	bsf	(frexp@value+3)& (0+255),3,b
 23296  014364  8963               	bsf	(frexp@value+3)& (0+255),4,b
 23297  014366  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 23298  014368  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 23299                           
 23300                           ; BSR set to: 0
 23301  01436A  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 23302                           
 23303                           ; BSR set to: 0
 23304  01436C  C060  F060         	movff	frexp@value,?_frexp
 23305  014370  C061  F061         	movff	frexp@value+1,?_frexp+1
 23306  014374  C062  F062         	movff	frexp@value+2,?_frexp+2
 23307  014378  C063  F063         	movff	frexp@value+3,?_frexp+3
 23308  01437C  0012               	return	
 23309  01437E                     __end_of_frexp:
 23310                           	opt stack 0
 23311                           tosu	equ	0xFFF
 23312                           tosh	equ	0xFFE
 23313                           tosl	equ	0xFFD
 23314                           pclath	equ	0xFFA
 23315                           tblptru	equ	0xFF8
 23316                           tblptrh	equ	0xFF7
 23317                           tblptrl	equ	0xFF6
 23318                           tablat	equ	0xFF5
 23319                           prodh	equ	0xFF4
 23320                           prodl	equ	0xFF3
 23321                           intcon	equ	0xFF2
 23322                           indf0	equ	0xFEF
 23323                           postinc0	equ	0xFEE
 23324                           fsr0h	equ	0xFEA
 23325                           fsr0l	equ	0xFE9
 23326                           wreg	equ	0xFE8
 23327                           indf1	equ	0xFE7
 23328                           postdec1	equ	0xFE5
 23329                           fsr1h	equ	0xFE2
 23330                           fsr1l	equ	0xFE1
 23331                           indf2	equ	0xFDF
 23332                           postinc2	equ	0xFDE
 23333                           postdec2	equ	0xFDD
 23334                           plusw2	equ	0xFDB
 23335                           fsr2h	equ	0xFDA
 23336                           fsr2l	equ	0xFD9
 23337                           status	equ	0xFD8
 23338                           
 23339 ;; *************** function ___xxtofl *****************
 23340 ;; Defined at:
 23341 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 23342 ;; Parameters:    Size  Location     Type
 23343 ;;  sign            1    wreg     unsigned char 
 23344 ;;  val             4    0[BANK0 ] long 
 23345 ;; Auto vars:     Size  Location     Type
 23346 ;;  sign            1    8[BANK0 ] unsigned char 
 23347 ;;  arg             4   10[BANK0 ] unsigned long 
 23348 ;;  exp             1    9[BANK0 ] unsigned char 
 23349 ;; Return value:  Size  Location     Type
 23350 ;;                  4    0[BANK0 ] unsigned char 
 23351 ;; Registers used:
 23352 ;;		wreg, status,2, status,0
 23353 ;; Tracked objects:
 23354 ;;		On entry : 0/0
 23355 ;;		On exit  : 0/0
 23356 ;;		Unchanged: 0/0
 23357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23358 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23359 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23360 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23361 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23362 ;;Total ram usage:       14 bytes
 23363 ;; Hardware stack levels used:    1
 23364 ;; Hardware stack levels required when called:    7
 23365 ;; This function calls:
 23366 ;;		Nothing
 23367 ;; This function is called by:
 23368 ;;		_ADCAverage
 23369 ;;		_pow
 23370 ;;		_exp
 23371 ;;		_floor
 23372 ;;		_log
 23373 ;;		_ADC_Voltage
 23374 ;; This function uses a non-reentrant model
 23375 ;;
 23376                           
 23377                           	psect	text129
 23378  012E06                     __ptext129:
 23379                           	opt stack 0
 23380  012E06                     ___xxtofl:
 23381                           	opt stack 19
 23382                           
 23383                           ; BSR set to: 0
 23384                           ;incstack = 0
 23385                           ;___xxtofl@sign stored from wreg
 23386  012E06  0100               	movlb	0	; () banked
 23387  012E08  6F68               	movwf	___xxtofl@sign& (0+255),b
 23388  012E0A  0100               	movlb	0	; () banked
 23389  012E0C  5168               	movf	___xxtofl@sign& (0+255),w,b
 23390  012E0E  A4D8               	btfss	status,2,c
 23391                           
 23392                           ; BSR set to: 0
 23393  012E10  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23394  012E12  D01A               	goto	l2870
 23395                           
 23396                           ; BSR set to: 0
 23397  012E14  C060  F064         	movff	___xxtofl@val,??___xxtofl
 23398  012E18  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 23399  012E1C  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 23400  012E20  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 23401  012E24  1F64               	comf	??___xxtofl& (0+255),f,b
 23402  012E26  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 23403  012E28  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 23404  012E2A  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 23405  012E2C  2B64               	incf	??___xxtofl& (0+255),f,b
 23406  012E2E  0E00               	movlw	0
 23407  012E30  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 23408  012E32  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 23409  012E34  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 23410  012E36  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 23411  012E3A  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 23412  012E3E  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 23413  012E42  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 23414  012E46  D008               	goto	l2871
 23415  012E48                     l2870:
 23416                           
 23417                           ; BSR set to: 0
 23418  012E48  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 23419  012E4C  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 23420  012E50  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 23421  012E54  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 23422  012E58                     l2871:
 23423                           
 23424                           ; BSR set to: 0
 23425                           
 23426                           ; BSR set to: 0
 23427  012E58  5160               	movf	___xxtofl@val& (0+255),w,b
 23428  012E5A  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 23429  012E5C  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 23430  012E5E  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 23431  012E60  A4D8               	btfss	status,2,c
 23432  012E62  D009               	goto	l2872
 23433                           
 23434                           ; BSR set to: 0
 23435  012E64  0E00               	movlw	0
 23436  012E66  6F60               	movwf	?___xxtofl& (0+255),b
 23437  012E68  0E00               	movlw	0
 23438  012E6A  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 23439  012E6C  0E00               	movlw	0
 23440  012E6E  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 23441  012E70  0E00               	movlw	0
 23442  012E72  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 23443                           
 23444                           ; BSR set to: 0
 23445  012E74  0012               	return	
 23446  012E76                     l2872:
 23447                           
 23448                           ; BSR set to: 0
 23449                           
 23450                           ; BSR set to: 0
 23451  012E76  0E96               	movlw	150
 23452  012E78  6F69               	movwf	___xxtofl@exp& (0+255),b
 23453  012E7A  D006               	goto	l2874
 23454  012E7C                     
 23455                           ; BSR set to: 0
 23456                           
 23457                           ; BSR set to: 0
 23458  012E7C  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23459  012E7E  90D8               	bcf	status,0,c
 23460  012E80  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23461  012E82  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23462  012E84  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23463  012E86  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23464  012E88                     l2874:
 23465                           
 23466                           ; BSR set to: 0
 23467                           
 23468                           ; BSR set to: 0
 23469  012E88  0E00               	movlw	0
 23470  012E8A  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23471  012E8C  6F64               	movwf	??___xxtofl& (0+255),b
 23472  012E8E  0E00               	movlw	0
 23473  012E90  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23474  012E92  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23475  012E94  0E00               	movlw	0
 23476  012E96  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23477  012E98  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23478  012E9A  0EFE               	movlw	254
 23479  012E9C  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23480  012E9E  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23481  012EA0  5164               	movf	??___xxtofl& (0+255),w,b
 23482  012EA2  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23483  012EA4  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23484  012EA6  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23485  012EA8  B4D8               	btfsc	status,2,c
 23486  012EAA  D00D               	goto	l2877
 23487  012EAC  D7E7               	goto	l2875
 23488  012EAE                     
 23489                           ; BSR set to: 0
 23490                           
 23491                           ; BSR set to: 0
 23492  012EAE  2B69               	incf	___xxtofl@exp& (0+255),f,b
 23493                           
 23494                           ; BSR set to: 0
 23495  012EB0  0E01               	movlw	1
 23496  012EB2  276A               	addwf	___xxtofl@arg& (0+255),f,b
 23497  012EB4  0E00               	movlw	0
 23498  012EB6  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 23499  012EB8  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 23500  012EBA  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 23501                           
 23502                           ; BSR set to: 0
 23503  012EBC  90D8               	bcf	status,0,c
 23504  012EBE  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23505  012EC0  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23506  012EC2  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23507  012EC4  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 23508  012EC6                     l2877:
 23509                           
 23510                           ; BSR set to: 0
 23511  012EC6  0E00               	movlw	0
 23512  012EC8  156A               	andwf	___xxtofl@arg& (0+255),w,b
 23513  012ECA  6F64               	movwf	??___xxtofl& (0+255),b
 23514  012ECC  0E00               	movlw	0
 23515  012ECE  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23516  012ED0  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 23517  012ED2  0E00               	movlw	0
 23518  012ED4  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23519  012ED6  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 23520  012ED8  0EFF               	movlw	255
 23521  012EDA  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23522  012EDC  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 23523  012EDE  5164               	movf	??___xxtofl& (0+255),w,b
 23524  012EE0  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23525  012EE2  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23526  012EE4  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23527  012EE6  B4D8               	btfsc	status,2,c
 23528  012EE8  D007               	goto	l2880
 23529  012EEA  D7E1               	goto	l2878
 23530  012EEC                     
 23531                           ; BSR set to: 0
 23532                           
 23533                           ; BSR set to: 0
 23534  012EEC  0769               	decf	___xxtofl@exp& (0+255),f,b
 23535  012EEE  90D8               	bcf	status,0,c
 23536  012EF0  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 23537  012EF2  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 23538  012EF4  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 23539  012EF6  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 23540  012EF8                     l2880:
 23541                           
 23542                           ; BSR set to: 0
 23543                           
 23544                           ; BSR set to: 0
 23545  012EF8  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 23546  012EFA  D003               	goto	u10590
 23547                           
 23548                           ; BSR set to: 0
 23549  012EFC  0E02               	movlw	2
 23550  012EFE  6169               	cpfslt	___xxtofl@exp& (0+255),b
 23551  012F00  D7F5               	goto	l2881
 23552  012F02                     u10590:
 23553                           
 23554                           ; BSR set to: 0
 23555                           
 23556                           ; BSR set to: 0
 23557  012F02  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 23558  012F04  D008               	goto	l2885
 23559                           
 23560                           ; BSR set to: 0
 23561  012F06  0EFF               	movlw	255
 23562  012F08  176A               	andwf	___xxtofl@arg& (0+255),f,b
 23563  012F0A  0EFF               	movlw	255
 23564  012F0C  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 23565  012F0E  0E7F               	movlw	127
 23566  012F10  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 23567  012F12  0EFF               	movlw	255
 23568  012F14  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 23569  012F16                     l2885:
 23570                           
 23571                           ; BSR set to: 0
 23572  012F16  90D8               	bcf	status,0,c
 23573  012F18  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 23574  012F1A  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 23575  012F1E  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23576  012F20  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23577  012F22  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 23578  012F24  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 23579  012F28  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 23580  012F2A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 23581  012F2C  6B64               	clrf	??___xxtofl& (0+255),b
 23582  012F2E  5164               	movf	??___xxtofl& (0+255),w,b
 23583  012F30  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 23584  012F32  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 23585  012F34  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 23586  012F36  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 23587  012F38  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 23588  012F3A  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 23589  012F3C  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 23590                           
 23591                           ; BSR set to: 0
 23592  012F3E  5168               	movf	___xxtofl@sign& (0+255),w,b
 23593  012F40  A4D8               	btfss	status,2,c
 23594                           
 23595                           ; BSR set to: 0
 23596  012F42  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23597  012F44  D001               	goto	l2886
 23598                           
 23599                           ; BSR set to: 0
 23600  012F46  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 23601  012F48                     l2886:
 23602                           
 23603                           ; BSR set to: 0
 23604                           
 23605                           ; BSR set to: 0
 23606  012F48  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 23607  012F4C  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 23608  012F50  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 23609  012F54  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 23610  012F58  0012               	return	
 23611  012F5A                     __end_of___xxtofl:
 23612                           	opt stack 0
 23613                           tosu	equ	0xFFF
 23614                           tosh	equ	0xFFE
 23615                           tosl	equ	0xFFD
 23616                           pclath	equ	0xFFA
 23617                           tblptru	equ	0xFF8
 23618                           tblptrh	equ	0xFF7
 23619                           tblptrl	equ	0xFF6
 23620                           tablat	equ	0xFF5
 23621                           prodh	equ	0xFF4
 23622                           prodl	equ	0xFF3
 23623                           intcon	equ	0xFF2
 23624                           indf0	equ	0xFEF
 23625                           postinc0	equ	0xFEE
 23626                           fsr0h	equ	0xFEA
 23627                           fsr0l	equ	0xFE9
 23628                           wreg	equ	0xFE8
 23629                           indf1	equ	0xFE7
 23630                           postdec1	equ	0xFE5
 23631                           fsr1h	equ	0xFE2
 23632                           fsr1l	equ	0xFE1
 23633                           indf2	equ	0xFDF
 23634                           postinc2	equ	0xFDE
 23635                           postdec2	equ	0xFDD
 23636                           plusw2	equ	0xFDB
 23637                           fsr2h	equ	0xFDA
 23638                           fsr2l	equ	0xFD9
 23639                           status	equ	0xFD8
 23640                           
 23641 ;; *************** function ___fltol *****************
 23642 ;; Defined at:
 23643 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 23644 ;; Parameters:    Size  Location     Type
 23645 ;;  f1              4   63[BANK0 ] unsigned char 
 23646 ;; Auto vars:     Size  Location     Type
 23647 ;;  exp1            1   72[BANK0 ] unsigned char 
 23648 ;;  sign1           1   71[BANK0 ] unsigned char 
 23649 ;; Return value:  Size  Location     Type
 23650 ;;                  4   63[BANK0 ] long 
 23651 ;; Registers used:
 23652 ;;		wreg, status,2, status,0
 23653 ;; Tracked objects:
 23654 ;;		On entry : 0/0
 23655 ;;		On exit  : 0/0
 23656 ;;		Unchanged: 0/0
 23657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23658 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23660 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23661 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23662 ;;Total ram usage:       10 bytes
 23663 ;; Hardware stack levels used:    1
 23664 ;; Hardware stack levels required when called:    7
 23665 ;; This function calls:
 23666 ;;		Nothing
 23667 ;; This function is called by:
 23668 ;;		_ADCAverage
 23669 ;;		_pow
 23670 ;;		_exp
 23671 ;;		_floor
 23672 ;; This function uses a non-reentrant model
 23673 ;;
 23674                           
 23675                           	psect	text130
 23676  013DE6                     __ptext130:
 23677                           	opt stack 0
 23678  013DE6                     ___fltol:
 23679                           	opt stack 18
 23680                           
 23681                           ; BSR set to: 0
 23682                           ;incstack = 0
 23683  013DE6  0100               	movlb	0	; () banked
 23684  013DE8  35A1               	rlcf	(___fltol@f1+2)& (0+255),w,b
 23685  013DEA  35A2               	rlcf	(___fltol@f1+3)& (0+255),w,b
 23686  013DEC  6FA8               	movwf	___fltol@exp1& (0+255),b
 23687  013DEE  51A8               	movf	___fltol@exp1& (0+255),w,b
 23688  013DF0  A4D8               	btfss	status,2,c
 23689  013DF2  D009               	goto	l2537
 23690                           
 23691                           ; BSR set to: 0
 23692  013DF4  0E00               	movlw	0
 23693  013DF6  6F9F               	movwf	?___fltol& (0+255),b
 23694  013DF8  0E00               	movlw	0
 23695  013DFA  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23696  013DFC  0E00               	movlw	0
 23697  013DFE  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23698  013E00  0E00               	movlw	0
 23699  013E02  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23700                           
 23701                           ; BSR set to: 0
 23702  013E04  0012               	return	
 23703  013E06                     l2537:
 23704                           
 23705                           ; BSR set to: 0
 23706                           
 23707                           ; BSR set to: 0
 23708  013E06  C09F  F0A3         	movff	___fltol@f1,??___fltol
 23709  013E0A  C0A0  F0A4         	movff	___fltol@f1+1,??___fltol+1
 23710  013E0E  C0A1  F0A5         	movff	___fltol@f1+2,??___fltol+2
 23711  013E12  C0A2  F0A6         	movff	___fltol@f1+3,??___fltol+3
 23712  013E16  0E20               	movlw	32
 23713  013E18  D005               	goto	u10410
 23714  013E1A                     u10415:
 23715  013E1A  90D8               	bcf	status,0,c
 23716  013E1C  33A6               	rrcf	(??___fltol+3)& (0+255),f,b
 23717  013E1E  33A5               	rrcf	(??___fltol+2)& (0+255),f,b
 23718  013E20  33A4               	rrcf	(??___fltol+1)& (0+255),f,b
 23719  013E22  33A3               	rrcf	??___fltol& (0+255),f,b
 23720  013E24                     u10410:
 23721  013E24  2EE8               	decfsz	wreg,f,c
 23722  013E26  D7F9               	goto	u10415
 23723  013E28  51A3               	movf	??___fltol& (0+255),w,b
 23724  013E2A  6FA7               	movwf	___fltol@sign1& (0+255),b
 23725                           
 23726                           ; BSR set to: 0
 23727  013E2C  8FA1               	bsf	(___fltol@f1+2)& (0+255),7,b
 23728                           
 23729                           ; BSR set to: 0
 23730  013E2E  0EFF               	movlw	255
 23731  013E30  179F               	andwf	___fltol@f1& (0+255),f,b
 23732  013E32  0EFF               	movlw	255
 23733  013E34  17A0               	andwf	(___fltol@f1+1)& (0+255),f,b
 23734  013E36  0EFF               	movlw	255
 23735  013E38  17A1               	andwf	(___fltol@f1+2)& (0+255),f,b
 23736  013E3A  0E00               	movlw	0
 23737  013E3C  17A2               	andwf	(___fltol@f1+3)& (0+255),f,b
 23738                           
 23739                           ; BSR set to: 0
 23740  013E3E  0E96               	movlw	150
 23741  013E40  5FA8               	subwf	___fltol@exp1& (0+255),f,b
 23742                           
 23743                           ; BSR set to: 0
 23744  013E42  AFA8               	btfss	___fltol@exp1& (0+255),7,b
 23745  013E44  D016               	goto	l2539
 23746                           
 23747                           ; BSR set to: 0
 23748  013E46  51A8               	movf	___fltol@exp1& (0+255),w,b
 23749  013E48  0A80               	xorlw	128
 23750  013E4A  0F97               	addlw	151
 23751  013E4C  B0D8               	btfsc	status,0,c
 23752  013E4E  D009               	goto	l2540
 23753                           
 23754                           ; BSR set to: 0
 23755  013E50  0E00               	movlw	0
 23756  013E52  6F9F               	movwf	?___fltol& (0+255),b
 23757  013E54  0E00               	movlw	0
 23758  013E56  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23759  013E58  0E00               	movlw	0
 23760  013E5A  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23761  013E5C  0E00               	movlw	0
 23762  013E5E  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23763                           
 23764                           ; BSR set to: 0
 23765  013E60  0012               	return	
 23766  013E62                     l2540:
 23767                           
 23768                           ; BSR set to: 0
 23769                           
 23770                           ; BSR set to: 0
 23771                           
 23772                           ; BSR set to: 0
 23773  013E62  90D8               	bcf	status,0,c
 23774  013E64  33A2               	rrcf	(___fltol@f1+3)& (0+255),f,b
 23775  013E66  33A1               	rrcf	(___fltol@f1+2)& (0+255),f,b
 23776  013E68  33A0               	rrcf	(___fltol@f1+1)& (0+255),f,b
 23777  013E6A  339F               	rrcf	___fltol@f1& (0+255),f,b
 23778                           
 23779                           ; BSR set to: 0
 23780  013E6C  3FA8               	incfsz	___fltol@exp1& (0+255),f,b
 23781  013E6E  D7F9               	goto	l2540
 23782                           
 23783                           ; BSR set to: 0
 23784  013E70  D015               	goto	u10450
 23785  013E72                     l2539:
 23786                           
 23787                           ; BSR set to: 0
 23788                           
 23789                           ; BSR set to: 0
 23790  013E72  0E1F               	movlw	31
 23791  013E74  65A8               	cpfsgt	___fltol@exp1& (0+255),b
 23792  013E76  D00F               	goto	l2545
 23793                           
 23794                           ; BSR set to: 0
 23795  013E78  0E00               	movlw	0
 23796  013E7A  6F9F               	movwf	?___fltol& (0+255),b
 23797  013E7C  0E00               	movlw	0
 23798  013E7E  6FA0               	movwf	(?___fltol+1)& (0+255),b
 23799  013E80  0E00               	movlw	0
 23800  013E82  6FA1               	movwf	(?___fltol+2)& (0+255),b
 23801  013E84  0E00               	movlw	0
 23802  013E86  6FA2               	movwf	(?___fltol+3)& (0+255),b
 23803                           
 23804                           ; BSR set to: 0
 23805  013E88  0012               	return	
 23806  013E8A                     
 23807                           ; BSR set to: 0
 23808                           
 23809                           ; BSR set to: 0
 23810  013E8A  90D8               	bcf	status,0,c
 23811  013E8C  379F               	rlcf	___fltol@f1& (0+255),f,b
 23812  013E8E  37A0               	rlcf	(___fltol@f1+1)& (0+255),f,b
 23813  013E90  37A1               	rlcf	(___fltol@f1+2)& (0+255),f,b
 23814  013E92  37A2               	rlcf	(___fltol@f1+3)& (0+255),f,b
 23815  013E94  07A8               	decf	___fltol@exp1& (0+255),f,b
 23816  013E96                     l2545:
 23817                           
 23818                           ; BSR set to: 0
 23819                           
 23820                           ; BSR set to: 0
 23821  013E96  51A8               	movf	___fltol@exp1& (0+255),w,b
 23822  013E98  A4D8               	btfss	status,2,c
 23823  013E9A  D7F7               	goto	l2546
 23824  013E9C                     u10450:
 23825                           
 23826                           ; BSR set to: 0
 23827                           
 23828                           ; BSR set to: 0
 23829                           
 23830                           ; BSR set to: 0
 23831  013E9C  51A7               	movf	___fltol@sign1& (0+255),w,b
 23832  013E9E  B4D8               	btfsc	status,2,c
 23833  013EA0  D008               	goto	l2548
 23834                           
 23835                           ; BSR set to: 0
 23836  013EA2  1FA2               	comf	(___fltol@f1+3)& (0+255),f,b
 23837  013EA4  1FA1               	comf	(___fltol@f1+2)& (0+255),f,b
 23838  013EA6  1FA0               	comf	(___fltol@f1+1)& (0+255),f,b
 23839  013EA8  6D9F               	negf	___fltol@f1& (0+255),b
 23840  013EAA  0E00               	movlw	0
 23841  013EAC  23A0               	addwfc	(___fltol@f1+1)& (0+255),f,b
 23842  013EAE  23A1               	addwfc	(___fltol@f1+2)& (0+255),f,b
 23843  013EB0  23A2               	addwfc	(___fltol@f1+3)& (0+255),f,b
 23844  013EB2                     l2548:
 23845                           
 23846                           ; BSR set to: 0
 23847                           
 23848                           ; BSR set to: 0
 23849  013EB2  C09F  F09F         	movff	___fltol@f1,?___fltol
 23850  013EB6  C0A0  F0A0         	movff	___fltol@f1+1,?___fltol+1
 23851  013EBA  C0A1  F0A1         	movff	___fltol@f1+2,?___fltol+2
 23852  013EBE  C0A2  F0A2         	movff	___fltol@f1+3,?___fltol+3
 23853  013EC2  0012               	return	
 23854  013EC4                     __end_of___fltol:
 23855                           	opt stack 0
 23856                           tosu	equ	0xFFF
 23857                           tosh	equ	0xFFE
 23858                           tosl	equ	0xFFD
 23859                           pclath	equ	0xFFA
 23860                           tblptru	equ	0xFF8
 23861                           tblptrh	equ	0xFF7
 23862                           tblptrl	equ	0xFF6
 23863                           tablat	equ	0xFF5
 23864                           prodh	equ	0xFF4
 23865                           prodl	equ	0xFF3
 23866                           intcon	equ	0xFF2
 23867                           indf0	equ	0xFEF
 23868                           postinc0	equ	0xFEE
 23869                           fsr0h	equ	0xFEA
 23870                           fsr0l	equ	0xFE9
 23871                           wreg	equ	0xFE8
 23872                           indf1	equ	0xFE7
 23873                           postdec1	equ	0xFE5
 23874                           fsr1h	equ	0xFE2
 23875                           fsr1l	equ	0xFE1
 23876                           indf2	equ	0xFDF
 23877                           postinc2	equ	0xFDE
 23878                           postdec2	equ	0xFDD
 23879                           plusw2	equ	0xFDB
 23880                           fsr2h	equ	0xFDA
 23881                           fsr2l	equ	0xFD9
 23882                           status	equ	0xFD8
 23883                           
 23884 ;; *************** function ___flge *****************
 23885 ;; Defined at:
 23886 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
 23887 ;; Parameters:    Size  Location     Type
 23888 ;;  ff1             4    0[BANK0 ] long 
 23889 ;;  ff2             4    4[BANK0 ] long 
 23890 ;; Auto vars:     Size  Location     Type
 23891 ;;		None
 23892 ;; Return value:  Size  Location     Type
 23893 ;;		None               void
 23894 ;; Registers used:
 23895 ;;		wreg, status,2, status,0
 23896 ;; Tracked objects:
 23897 ;;		On entry : 0/0
 23898 ;;		On exit  : 0/0
 23899 ;;		Unchanged: 0/0
 23900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23901 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23904 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23905 ;;Total ram usage:       12 bytes
 23906 ;; Hardware stack levels used:    1
 23907 ;; Hardware stack levels required when called:    7
 23908 ;; This function calls:
 23909 ;;		Nothing
 23910 ;; This function is called by:
 23911 ;;		_pow
 23912 ;;		_exp
 23913 ;;		_floor
 23914 ;; This function uses a non-reentrant model
 23915 ;;
 23916                           
 23917                           	psect	text131
 23918  0135A2                     __ptext131:
 23919                           	opt stack 0
 23920  0135A2                     ___flge:
 23921                           	opt stack 18
 23922                           
 23923                           ; BSR set to: 0
 23924                           ;incstack = 0
 23925  0135A2  0E00               	movlw	0
 23926  0135A4  0100               	movlb	0	; () banked
 23927  0135A6  1560               	andwf	___flge@ff1& (0+255),w,b
 23928  0135A8  6F68               	movwf	??___flge& (0+255),b
 23929  0135AA  0E00               	movlw	0
 23930  0135AC  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 23931  0135AE  6F69               	movwf	(??___flge+1)& (0+255),b
 23932  0135B0  0E80               	movlw	128
 23933  0135B2  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 23934  0135B4  6F6A               	movwf	(??___flge+2)& (0+255),b
 23935  0135B6  0E7F               	movlw	127
 23936  0135B8  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 23937  0135BA  6F6B               	movwf	(??___flge+3)& (0+255),b
 23938  0135BC  5168               	movf	??___flge& (0+255),w,b
 23939  0135BE  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23940  0135C0  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23941  0135C2  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23942  0135C4  A4D8               	btfss	status,2,c
 23943  0135C6  D008               	goto	l2507
 23944                           
 23945                           ; BSR set to: 0
 23946  0135C8  0E00               	movlw	0
 23947  0135CA  6F60               	movwf	___flge@ff1& (0+255),b
 23948  0135CC  0E00               	movlw	0
 23949  0135CE  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 23950  0135D0  0E00               	movlw	0
 23951  0135D2  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 23952  0135D4  0E00               	movlw	0
 23953  0135D6  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 23954  0135D8                     l2507:
 23955                           
 23956                           ; BSR set to: 0
 23957                           
 23958                           ; BSR set to: 0
 23959  0135D8  0E00               	movlw	0
 23960  0135DA  1564               	andwf	___flge@ff2& (0+255),w,b
 23961  0135DC  6F68               	movwf	??___flge& (0+255),b
 23962  0135DE  0E00               	movlw	0
 23963  0135E0  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 23964  0135E2  6F69               	movwf	(??___flge+1)& (0+255),b
 23965  0135E4  0E80               	movlw	128
 23966  0135E6  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 23967  0135E8  6F6A               	movwf	(??___flge+2)& (0+255),b
 23968  0135EA  0E7F               	movlw	127
 23969  0135EC  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 23970  0135EE  6F6B               	movwf	(??___flge+3)& (0+255),b
 23971  0135F0  5168               	movf	??___flge& (0+255),w,b
 23972  0135F2  1169               	iorwf	(??___flge+1)& (0+255),w,b
 23973  0135F4  116A               	iorwf	(??___flge+2)& (0+255),w,b
 23974  0135F6  116B               	iorwf	(??___flge+3)& (0+255),w,b
 23975  0135F8  A4D8               	btfss	status,2,c
 23976  0135FA  D008               	goto	l2508
 23977                           
 23978                           ; BSR set to: 0
 23979  0135FC  0E00               	movlw	0
 23980  0135FE  6F64               	movwf	___flge@ff2& (0+255),b
 23981  013600  0E00               	movlw	0
 23982  013602  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 23983  013604  0E00               	movlw	0
 23984  013606  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 23985  013608  0E00               	movlw	0
 23986  01360A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 23987  01360C                     l2508:
 23988                           
 23989                           ; BSR set to: 0
 23990                           
 23991                           ; BSR set to: 0
 23992  01360C  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 23993  01360E  D01D               	goto	l2509
 23994                           
 23995                           ; BSR set to: 0
 23996  013610  C060  F068         	movff	___flge@ff1,??___flge
 23997  013614  C061  F069         	movff	___flge@ff1+1,??___flge+1
 23998  013618  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 23999  01361C  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 24000  013620  1F68               	comf	??___flge& (0+255),f,b
 24001  013622  1F69               	comf	(??___flge+1)& (0+255),f,b
 24002  013624  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24003  013626  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24004  013628  2B68               	incf	??___flge& (0+255),f,b
 24005  01362A  0E00               	movlw	0
 24006  01362C  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24007  01362E  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24008  013630  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24009  013632  0E00               	movlw	0
 24010  013634  2568               	addwf	??___flge& (0+255),w,b
 24011  013636  6F60               	movwf	___flge@ff1& (0+255),b
 24012  013638  0E00               	movlw	0
 24013  01363A  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24014  01363C  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 24015  01363E  0E00               	movlw	0
 24016  013640  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24017  013642  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 24018  013644  0E80               	movlw	128
 24019  013646  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24020  013648  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 24021  01364A                     l2509:
 24022                           
 24023                           ; BSR set to: 0
 24024                           
 24025                           ; BSR set to: 0
 24026  01364A  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 24027  01364C  D01D               	goto	l2510
 24028                           
 24029                           ; BSR set to: 0
 24030  01364E  C064  F068         	movff	___flge@ff2,??___flge
 24031  013652  C065  F069         	movff	___flge@ff2+1,??___flge+1
 24032  013656  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 24033  01365A  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 24034  01365E  1F68               	comf	??___flge& (0+255),f,b
 24035  013660  1F69               	comf	(??___flge+1)& (0+255),f,b
 24036  013662  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24037  013664  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24038  013666  2B68               	incf	??___flge& (0+255),f,b
 24039  013668  0E00               	movlw	0
 24040  01366A  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24041  01366C  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24042  01366E  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24043  013670  0E00               	movlw	0
 24044  013672  2568               	addwf	??___flge& (0+255),w,b
 24045  013674  6F64               	movwf	___flge@ff2& (0+255),b
 24046  013676  0E00               	movlw	0
 24047  013678  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24048  01367A  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 24049  01367C  0E00               	movlw	0
 24050  01367E  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24051  013680  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 24052  013682  0E80               	movlw	128
 24053  013684  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24054  013686  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 24055  013688                     l2510:
 24056                           
 24057                           ; BSR set to: 0
 24058  013688  0E00               	movlw	0
 24059  01368A  1B60               	xorwf	___flge@ff1& (0+255),f,b
 24060  01368C  0E00               	movlw	0
 24061  01368E  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 24062  013690  0E00               	movlw	0
 24063  013692  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 24064  013694  0E80               	movlw	128
 24065  013696  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 24066  013698  0E00               	movlw	0
 24067  01369A  1B64               	xorwf	___flge@ff2& (0+255),f,b
 24068  01369C  0E00               	movlw	0
 24069  01369E  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 24070  0136A0  0E00               	movlw	0
 24071  0136A2  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 24072  0136A4  0E80               	movlw	128
 24073  0136A6  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 24074  0136A8  5164               	movf	___flge@ff2& (0+255),w,b
 24075  0136AA  5D60               	subwf	___flge@ff1& (0+255),w,b
 24076  0136AC  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 24077  0136AE  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 24078  0136B0  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 24079  0136B2  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 24080  0136B4  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 24081  0136B6  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 24082  0136B8  B0D8               	btfsc	status,0,c
 24083  0136BA  D002               	goto	l12396
 24084                           
 24085                           ; BSR set to: 0
 24086  0136BC  90D8               	bcf	status,0,c
 24087  0136BE  0012               	return	
 24088  0136C0                     l12396:
 24089                           
 24090                           ; BSR set to: 0
 24091                           
 24092                           ; BSR set to: 0
 24093  0136C0  80D8               	bsf	status,0,c
 24094                           
 24095                           ; BSR set to: 0
 24096  0136C2  0012               	return	
 24097  0136C4                     __end_of___flge:
 24098                           	opt stack 0
 24099                           tosu	equ	0xFFF
 24100                           tosh	equ	0xFFE
 24101                           tosl	equ	0xFFD
 24102                           pclath	equ	0xFFA
 24103                           tblptru	equ	0xFF8
 24104                           tblptrh	equ	0xFF7
 24105                           tblptrl	equ	0xFF6
 24106                           tablat	equ	0xFF5
 24107                           prodh	equ	0xFF4
 24108                           prodl	equ	0xFF3
 24109                           intcon	equ	0xFF2
 24110                           indf0	equ	0xFEF
 24111                           postinc0	equ	0xFEE
 24112                           fsr0h	equ	0xFEA
 24113                           fsr0l	equ	0xFE9
 24114                           wreg	equ	0xFE8
 24115                           indf1	equ	0xFE7
 24116                           postdec1	equ	0xFE5
 24117                           fsr1h	equ	0xFE2
 24118                           fsr1l	equ	0xFE1
 24119                           indf2	equ	0xFDF
 24120                           postinc2	equ	0xFDE
 24121                           postdec2	equ	0xFDD
 24122                           plusw2	equ	0xFDB
 24123                           fsr2h	equ	0xFDA
 24124                           fsr2l	equ	0xFD9
 24125                           status	equ	0xFD8
 24126                           
 24127 ;; *************** function _eval_poly *****************
 24128 ;; Defined at:
 24129 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 24130 ;; Parameters:    Size  Location     Type
 24131 ;;  x               4   63[BANK0 ] long 
 24132 ;;  d               2   67[BANK0 ] PTR const 
 24133 ;;		 -> log@coeff(36), exp@coeff(40), 
 24134 ;;  n               2   69[BANK0 ] int 
 24135 ;; Auto vars:     Size  Location     Type
 24136 ;;  res             4   75[BANK0 ] int 
 24137 ;; Return value:  Size  Location     Type
 24138 ;;                  4   63[BANK0 ] int 
 24139 ;; Registers used:
 24140 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24141 ;; Tracked objects:
 24142 ;;		On entry : 0/0
 24143 ;;		On exit  : 0/0
 24144 ;;		Unchanged: 0/0
 24145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24146 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24147 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24148 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24149 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24150 ;;Total ram usage:       16 bytes
 24151 ;; Hardware stack levels used:    1
 24152 ;; Hardware stack levels required when called:    8
 24153 ;; This function calls:
 24154 ;;		___fladd
 24155 ;;		___flmul
 24156 ;; This function is called by:
 24157 ;;		_exp
 24158 ;;		_log
 24159 ;; This function uses a non-reentrant model
 24160 ;;
 24161                           
 24162                           	psect	text132
 24163  013B02                     __ptext132:
 24164                           	opt stack 0
 24165  013B02                     _eval_poly:
 24166                           	opt stack 18
 24167                           
 24168                           ; BSR set to: 0
 24169                           ;incstack = 0
 24170  013B02  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24171  013B06  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24172  013B0A  0100               	movlb	0	; () banked
 24173  013B0C  90D8               	bcf	status,0,c
 24174  013B0E  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24175  013B10  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24176  013B12  90D8               	bcf	status,0,c
 24177  013B14  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24178  013B16  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24179  013B18  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24180  013B1C  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24181  013B20  51A7               	movf	??_eval_poly& (0+255),w,b
 24182  013B22  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24183  013B24  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24184  013B26  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24185  013B28  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24186  013B2C  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24187  013B30                     	if	0	;tblptru may be non-zero
 24188  013B30                     	endif
 24189  013B30                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24190  013B30  0E00               	movlw	low (__mediumconst shr (0+16))
 24191  013B32  6EF8               	movwf	tblptru,c
 24192  013B34                     	endif
 24193  013B34  0009               	tblrd		*+
 24194  013B36  CFF5 F0AB          	movff	tablat,eval_poly@res
 24195  013B3A  0009               	tblrd		*+
 24196  013B3C  CFF5 F0AC          	movff	tablat,eval_poly@res+1
 24197  013B40  0009               	tblrd		*+
 24198  013B42  CFF5 F0AD          	movff	tablat,eval_poly@res+2
 24199  013B46  000A               	tblrd		*-
 24200  013B48  CFF5 F0AE          	movff	tablat,eval_poly@res+3
 24201  013B4C  D04C               	goto	l2951
 24202  013B4E                     
 24203                           ; BSR set to: 0
 24204                           
 24205                           ; BSR set to: 0
 24206  013B4E  C0AB  F072         	movff	eval_poly@res,___flmul@a
 24207  013B52  C0AC  F073         	movff	eval_poly@res+1,___flmul@a+1
 24208  013B56  C0AD  F074         	movff	eval_poly@res+2,___flmul@a+2
 24209  013B5A  C0AE  F075         	movff	eval_poly@res+3,___flmul@a+3
 24210  013B5E  C09F  F06E         	movff	eval_poly@x,___flmul@b
 24211  013B62  C0A0  F06F         	movff	eval_poly@x+1,___flmul@b+1
 24212  013B66  C0A1  F070         	movff	eval_poly@x+2,___flmul@b+2
 24213  013B6A  C0A2  F071         	movff	eval_poly@x+3,___flmul@b+3
 24214  013B6E  EC9D  F085         	call	___flmul	;wreg free
 24215  013B72  C06E  F08B         	movff	?___flmul,___fladd@b
 24216  013B76  C06F  F08C         	movff	?___flmul+1,___fladd@b+1
 24217  013B7A  C070  F08D         	movff	?___flmul+2,___fladd@b+2
 24218  013B7E  C071  F08E         	movff	?___flmul+3,___fladd@b+3
 24219  013B82  0100               	movlb	0	; () banked
 24220  013B84  07A5               	decf	eval_poly@n& (0+255),f,b
 24221  013B86  A0D8               	btfss	status,0,c
 24222  013B88  07A6               	decf	(eval_poly@n+1)& (0+255),f,b
 24223  013B8A  C0A5  F0A7         	movff	eval_poly@n,??_eval_poly
 24224  013B8E  C0A6  F0A8         	movff	eval_poly@n+1,??_eval_poly+1
 24225  013B92  90D8               	bcf	status,0,c
 24226  013B94  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24227  013B96  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24228  013B98  90D8               	bcf	status,0,c
 24229  013B9A  37A7               	rlcf	??_eval_poly& (0+255),f,b
 24230  013B9C  37A8               	rlcf	(??_eval_poly+1)& (0+255),f,b
 24231  013B9E  C0A3  F0A9         	movff	eval_poly@d,??_eval_poly+2
 24232  013BA2  C0A4  F0AA         	movff	eval_poly@d+1,??_eval_poly+3
 24233  013BA6  51A7               	movf	??_eval_poly& (0+255),w,b
 24234  013BA8  27A9               	addwf	(??_eval_poly+2)& (0+255),f,b
 24235  013BAA  51A8               	movf	(??_eval_poly+1)& (0+255),w,b
 24236  013BAC  23AA               	addwfc	(??_eval_poly+3)& (0+255),f,b
 24237  013BAE  C0A9  FFF6         	movff	??_eval_poly+2,tblptrl
 24238  013BB2  C0AA  FFF7         	movff	??_eval_poly+3,tblptrh
 24239  013BB6                     	if	0	;tblptru may be non-zero
 24240  013BB6                     	endif
 24241  013BB6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 24242  013BB6  0E00               	movlw	low (__mediumconst shr (0+16))
 24243  013BB8  6EF8               	movwf	tblptru,c
 24244  013BBA                     	endif
 24245  013BBA  0009               	tblrd		*+
 24246  013BBC  CFF5 F08F          	movff	tablat,___fladd@a
 24247  013BC0  0009               	tblrd		*+
 24248  013BC2  CFF5 F090          	movff	tablat,___fladd@a+1
 24249  013BC6  0009               	tblrd		*+
 24250  013BC8  CFF5 F091          	movff	tablat,___fladd@a+2
 24251  013BCC  000A               	tblrd		*-
 24252  013BCE  CFF5 F092          	movff	tablat,___fladd@a+3
 24253  013BD2  EC46  F087         	call	___fladd	;wreg free
 24254  013BD6  C08B  F0AB         	movff	?___fladd,eval_poly@res
 24255  013BDA  C08C  F0AC         	movff	?___fladd+1,eval_poly@res+1
 24256  013BDE  C08D  F0AD         	movff	?___fladd+2,eval_poly@res+2
 24257  013BE2  C08E  F0AE         	movff	?___fladd+3,eval_poly@res+3
 24258  013BE6                     l2951:
 24259  013BE6  0100               	movlb	0	; () banked
 24260  013BE8  51A5               	movf	eval_poly@n& (0+255),w,b
 24261  013BEA  11A6               	iorwf	(eval_poly@n+1)& (0+255),w,b
 24262  013BEC  A4D8               	btfss	status,2,c
 24263  013BEE  D7AF               	goto	l2952
 24264                           
 24265                           ; BSR set to: 0
 24266  013BF0  C0AB  F09F         	movff	eval_poly@res,?_eval_poly
 24267  013BF4  C0AC  F0A0         	movff	eval_poly@res+1,?_eval_poly+1
 24268  013BF8  C0AD  F0A1         	movff	eval_poly@res+2,?_eval_poly+2
 24269  013BFC  C0AE  F0A2         	movff	eval_poly@res+3,?_eval_poly+3
 24270                           
 24271                           ; BSR set to: 0
 24272  013C00  0012               	return		;funcret
 24273  013C02                     __end_of_eval_poly:
 24274                           	opt stack 0
 24275                           tosu	equ	0xFFF
 24276                           tosh	equ	0xFFE
 24277                           tosl	equ	0xFFD
 24278                           pclath	equ	0xFFA
 24279                           tblptru	equ	0xFF8
 24280                           tblptrh	equ	0xFF7
 24281                           tblptrl	equ	0xFF6
 24282                           tablat	equ	0xFF5
 24283                           prodh	equ	0xFF4
 24284                           prodl	equ	0xFF3
 24285                           intcon	equ	0xFF2
 24286                           indf0	equ	0xFEF
 24287                           postinc0	equ	0xFEE
 24288                           fsr0h	equ	0xFEA
 24289                           fsr0l	equ	0xFE9
 24290                           wreg	equ	0xFE8
 24291                           indf1	equ	0xFE7
 24292                           postdec1	equ	0xFE5
 24293                           fsr1h	equ	0xFE2
 24294                           fsr1l	equ	0xFE1
 24295                           indf2	equ	0xFDF
 24296                           postinc2	equ	0xFDE
 24297                           postdec2	equ	0xFDD
 24298                           plusw2	equ	0xFDB
 24299                           fsr2h	equ	0xFDA
 24300                           fsr2l	equ	0xFD9
 24301                           status	equ	0xFD8
 24302                           
 24303 ;; *************** function ___flmul *****************
 24304 ;; Defined at:
 24305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 24306 ;; Parameters:    Size  Location     Type
 24307 ;;  b               4   14[BANK0 ] int 
 24308 ;;  a               4   18[BANK0 ] int 
 24309 ;; Auto vars:     Size  Location     Type
 24310 ;;  prod            4   33[BANK0 ] struct .
 24311 ;;  grs             4   28[BANK0 ] unsigned long 
 24312 ;;  temp            2   37[BANK0 ] struct .
 24313 ;;  bexp            1   32[BANK0 ] unsigned char 
 24314 ;;  aexp            1   27[BANK0 ] unsigned char 
 24315 ;;  sign            1   26[BANK0 ] unsigned char 
 24316 ;; Return value:  Size  Location     Type
 24317 ;;                  4   14[BANK0 ] unsigned char 
 24318 ;; Registers used:
 24319 ;;		wreg, status,2, status,0, prodl, prodh
 24320 ;; Tracked objects:
 24321 ;;		On entry : 0/0
 24322 ;;		On exit  : 0/0
 24323 ;;		Unchanged: 0/0
 24324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24325 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24326 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24327 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24328 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24329 ;;Total ram usage:       25 bytes
 24330 ;; Hardware stack levels used:    1
 24331 ;; Hardware stack levels required when called:    7
 24332 ;; This function calls:
 24333 ;;		Nothing
 24334 ;; This function is called by:
 24335 ;;		_ADCAverage
 24336 ;;		_pow
 24337 ;;		_exp
 24338 ;;		_log
 24339 ;;		_eval_poly
 24340 ;;		_ADC_Voltage
 24341 ;; This function uses a non-reentrant model
 24342 ;;
 24343                           
 24344                           	psect	text133
 24345  010B3A                     __ptext133:
 24346                           	opt stack 0
 24347  010B3A                     ___flmul:
 24348                           	opt stack 18
 24349                           
 24350                           ; BSR set to: 0
 24351                           ;incstack = 0
 24352  010B3A  0100               	movlb	0	; () banked
 24353  010B3C  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24354  010B3E  0B80               	andlw	128
 24355  010B40  6F7A               	movwf	___flmul@sign& (0+255),b
 24356  010B42  5171               	movf	(___flmul@b+3)& (0+255),w,b
 24357  010B44  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 24358  010B46  6F80               	movwf	___flmul@bexp& (0+255),b
 24359                           
 24360                           ; BSR set to: 0
 24361  010B48  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 24362                           
 24363                           ; BSR set to: 0
 24364  010B4A  8180               	bsf	___flmul@bexp& (0+255),0,b
 24365                           
 24366                           ; BSR set to: 0
 24367                           
 24368                           ; BSR set to: 0
 24369  010B4C  5180               	movf	___flmul@bexp& (0+255),w,b
 24370  010B4E  B4D8               	btfsc	status,2,c
 24371  010B50  D00D               	goto	l2842
 24372                           
 24373                           ; BSR set to: 0
 24374  010B52  2980               	incf	___flmul@bexp& (0+255),w,b
 24375  010B54  A4D8               	btfss	status,2,c
 24376  010B56  D008               	goto	l2843
 24377                           
 24378                           ; BSR set to: 0
 24379  010B58  0E00               	movlw	0
 24380  010B5A  6F6E               	movwf	___flmul@b& (0+255),b
 24381  010B5C  0E00               	movlw	0
 24382  010B5E  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24383  010B60  0E00               	movlw	0
 24384  010B62  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24385  010B64  0E00               	movlw	0
 24386  010B66  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24387  010B68                     l2843:
 24388                           
 24389                           ; BSR set to: 0
 24390                           
 24391                           ; BSR set to: 0
 24392  010B68  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 24393  010B6A  D008               	goto	l2844
 24394  010B6C                     l2842:
 24395                           
 24396                           ; BSR set to: 0
 24397                           
 24398                           ; BSR set to: 0
 24399  010B6C  0E00               	movlw	0
 24400  010B6E  6F6E               	movwf	___flmul@b& (0+255),b
 24401  010B70  0E00               	movlw	0
 24402  010B72  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 24403  010B74  0E00               	movlw	0
 24404  010B76  6F70               	movwf	(___flmul@b+2)& (0+255),b
 24405  010B78  0E00               	movlw	0
 24406  010B7A  6F71               	movwf	(___flmul@b+3)& (0+255),b
 24407  010B7C                     l2844:
 24408                           
 24409                           ; BSR set to: 0
 24410                           
 24411                           ; BSR set to: 0
 24412  010B7C  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24413  010B7E  0B80               	andlw	128
 24414  010B80  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 24415                           
 24416                           ; BSR set to: 0
 24417  010B82  5175               	movf	(___flmul@a+3)& (0+255),w,b
 24418  010B84  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 24419  010B86  6F7B               	movwf	___flmul@aexp& (0+255),b
 24420                           
 24421                           ; BSR set to: 0
 24422  010B88  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 24423                           
 24424                           ; BSR set to: 0
 24425  010B8A  817B               	bsf	___flmul@aexp& (0+255),0,b
 24426                           
 24427                           ; BSR set to: 0
 24428                           
 24429                           ; BSR set to: 0
 24430  010B8C  517B               	movf	___flmul@aexp& (0+255),w,b
 24431  010B8E  B4D8               	btfsc	status,2,c
 24432  010B90  D00D               	goto	l2846
 24433                           
 24434                           ; BSR set to: 0
 24435  010B92  297B               	incf	___flmul@aexp& (0+255),w,b
 24436  010B94  A4D8               	btfss	status,2,c
 24437  010B96  D008               	goto	l2847
 24438                           
 24439                           ; BSR set to: 0
 24440  010B98  0E00               	movlw	0
 24441  010B9A  6F72               	movwf	___flmul@a& (0+255),b
 24442  010B9C  0E00               	movlw	0
 24443  010B9E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24444  010BA0  0E00               	movlw	0
 24445  010BA2  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24446  010BA4  0E00               	movlw	0
 24447  010BA6  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24448  010BA8                     l2847:
 24449                           
 24450                           ; BSR set to: 0
 24451                           
 24452                           ; BSR set to: 0
 24453  010BA8  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 24454  010BAA  D008               	goto	l2848
 24455  010BAC                     l2846:
 24456                           
 24457                           ; BSR set to: 0
 24458                           
 24459                           ; BSR set to: 0
 24460  010BAC  0E00               	movlw	0
 24461  010BAE  6F72               	movwf	___flmul@a& (0+255),b
 24462  010BB0  0E00               	movlw	0
 24463  010BB2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 24464  010BB4  0E00               	movlw	0
 24465  010BB6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 24466  010BB8  0E00               	movlw	0
 24467  010BBA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 24468  010BBC                     l2848:
 24469                           
 24470                           ; BSR set to: 0
 24471  010BBC  517B               	movf	___flmul@aexp& (0+255),w,b
 24472  010BBE  B4D8               	btfsc	status,2,c
 24473  010BC0  D003               	goto	u10170
 24474                           
 24475                           ; BSR set to: 0
 24476  010BC2  5180               	movf	___flmul@bexp& (0+255),w,b
 24477  010BC4  A4D8               	btfss	status,2,c
 24478  010BC6  D009               	goto	l2849
 24479  010BC8                     u10170:
 24480                           
 24481                           ; BSR set to: 0
 24482                           
 24483                           ; BSR set to: 0
 24484  010BC8  0E00               	movlw	0
 24485  010BCA  6F6E               	movwf	?___flmul& (0+255),b
 24486  010BCC  0E00               	movlw	0
 24487  010BCE  6F6F               	movwf	(?___flmul+1)& (0+255),b
 24488  010BD0  0E00               	movlw	0
 24489  010BD2  6F70               	movwf	(?___flmul+2)& (0+255),b
 24490  010BD4  0E00               	movlw	0
 24491  010BD6  6F71               	movwf	(?___flmul+3)& (0+255),b
 24492                           
 24493                           ; BSR set to: 0
 24494  010BD8  0012               	return	
 24495  010BDA                     l2849:
 24496                           
 24497                           ; BSR set to: 0
 24498                           
 24499                           ; BSR set to: 0
 24500  010BDA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24501  010BDC  036E               	mulwf	___flmul@b& (0+255),b
 24502  010BDE  CFF3 F085          	movff	prodl,___flmul@temp
 24503  010BE2  CFF4 F086          	movff	prodh,___flmul@temp+1
 24504                           
 24505                           ; BSR set to: 0
 24506  010BE6  5185               	movf	___flmul@temp& (0+255),w,b
 24507  010BE8  6F7C               	movwf	___flmul@grs& (0+255),b
 24508  010BEA  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 24509  010BEC  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 24510  010BEE  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 24511                           
 24512                           ; BSR set to: 0
 24513  010BF0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24514  010BF2  6F81               	movwf	___flmul@prod& (0+255),b
 24515  010BF4  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 24516  010BF6  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 24517  010BF8  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 24518  010BFA  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24519  010BFC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24520  010BFE  CFF3 F085          	movff	prodl,___flmul@temp
 24521  010C02  CFF4 F086          	movff	prodh,___flmul@temp+1
 24522                           
 24523                           ; BSR set to: 0
 24524  010C06  5185               	movf	___flmul@temp& (0+255),w,b
 24525  010C08  277C               	addwf	___flmul@grs& (0+255),f,b
 24526  010C0A  0E00               	movlw	0
 24527  010C0C  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24528  010C0E  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24529  010C10  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24530                           
 24531                           ; BSR set to: 0
 24532  010C12  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24533  010C14  2781               	addwf	___flmul@prod& (0+255),f,b
 24534  010C16  0E00               	movlw	0
 24535  010C18  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24536  010C1A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24537  010C1C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24538  010C1E  5172               	movf	___flmul@a& (0+255),w,b
 24539  010C20  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24540  010C22  CFF3 F085          	movff	prodl,___flmul@temp
 24541  010C26  CFF4 F086          	movff	prodh,___flmul@temp+1
 24542                           
 24543                           ; BSR set to: 0
 24544  010C2A  5185               	movf	___flmul@temp& (0+255),w,b
 24545  010C2C  277C               	addwf	___flmul@grs& (0+255),f,b
 24546  010C2E  0E00               	movlw	0
 24547  010C30  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24548  010C32  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24549  010C34  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24550                           
 24551                           ; BSR set to: 0
 24552  010C36  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24553  010C38  2781               	addwf	___flmul@prod& (0+255),f,b
 24554  010C3A  0E00               	movlw	0
 24555  010C3C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24556  010C3E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24557  010C40  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24558                           
 24559                           ; BSR set to: 0
 24560  010C42  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24561  010C46  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24562  010C4A  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24563  010C4E  6B7C               	clrf	___flmul@grs& (0+255),b
 24564                           
 24565                           ; BSR set to: 0
 24566  010C50  5172               	movf	___flmul@a& (0+255),w,b
 24567  010C52  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24568  010C54  CFF3 F085          	movff	prodl,___flmul@temp
 24569  010C58  CFF4 F086          	movff	prodh,___flmul@temp+1
 24570                           
 24571                           ; BSR set to: 0
 24572  010C5C  5185               	movf	___flmul@temp& (0+255),w,b
 24573  010C5E  277C               	addwf	___flmul@grs& (0+255),f,b
 24574  010C60  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24575  010C62  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24576  010C64  0E00               	movlw	0
 24577  010C66  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24578  010C68  0E00               	movlw	0
 24579  010C6A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24580                           
 24581                           ; BSR set to: 0
 24582  010C6C  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24583  010C6E  036E               	mulwf	___flmul@b& (0+255),b
 24584  010C70  CFF3 F085          	movff	prodl,___flmul@temp
 24585  010C74  CFF4 F086          	movff	prodh,___flmul@temp+1
 24586                           
 24587                           ; BSR set to: 0
 24588  010C78  5185               	movf	___flmul@temp& (0+255),w,b
 24589  010C7A  277C               	addwf	___flmul@grs& (0+255),f,b
 24590  010C7C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24591  010C7E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24592  010C80  0E00               	movlw	0
 24593  010C82  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24594  010C84  0E00               	movlw	0
 24595  010C86  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24596                           
 24597                           ; BSR set to: 0
 24598  010C88  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24599  010C8C  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24600  010C90  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24601  010C94  6B7C               	clrf	___flmul@grs& (0+255),b
 24602  010C96  5172               	movf	___flmul@a& (0+255),w,b
 24603  010C98  036E               	mulwf	___flmul@b& (0+255),b
 24604  010C9A  CFF3 F085          	movff	prodl,___flmul@temp
 24605  010C9E  CFF4 F086          	movff	prodh,___flmul@temp+1
 24606                           
 24607                           ; BSR set to: 0
 24608  010CA2  5185               	movf	___flmul@temp& (0+255),w,b
 24609  010CA4  277C               	addwf	___flmul@grs& (0+255),f,b
 24610  010CA6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24611  010CA8  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24612  010CAA  0E00               	movlw	0
 24613  010CAC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24614  010CAE  0E00               	movlw	0
 24615  010CB0  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24616                           
 24617                           ; BSR set to: 0
 24618  010CB2  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24619  010CB4  036F               	mulwf	(___flmul@b+1)& (0+255),b
 24620  010CB6  CFF3 F085          	movff	prodl,___flmul@temp
 24621  010CBA  CFF4 F086          	movff	prodh,___flmul@temp+1
 24622  010CBE  5185               	movf	___flmul@temp& (0+255),w,b
 24623  010CC0  2781               	addwf	___flmul@prod& (0+255),f,b
 24624  010CC2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24625  010CC4  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24626  010CC6  0E00               	movlw	0
 24627  010CC8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24628  010CCA  0E00               	movlw	0
 24629  010CCC  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24630                           
 24631                           ; BSR set to: 0
 24632  010CCE  5173               	movf	(___flmul@a+1)& (0+255),w,b
 24633  010CD0  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24634  010CD2  CFF3 F085          	movff	prodl,___flmul@temp
 24635  010CD6  CFF4 F086          	movff	prodh,___flmul@temp+1
 24636                           
 24637                           ; BSR set to: 0
 24638  010CDA  5185               	movf	___flmul@temp& (0+255),w,b
 24639  010CDC  2781               	addwf	___flmul@prod& (0+255),f,b
 24640  010CDE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24641  010CE0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24642  010CE2  0E00               	movlw	0
 24643  010CE4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24644  010CE6  0E00               	movlw	0
 24645  010CE8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24646  010CEA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 24647  010CEC  0370               	mulwf	(___flmul@b+2)& (0+255),b
 24648  010CEE  CFF3 F085          	movff	prodl,___flmul@temp
 24649  010CF2  CFF4 F086          	movff	prodh,___flmul@temp+1
 24650                           
 24651                           ; BSR set to: 0
 24652  010CF6  5185               	movf	___flmul@temp& (0+255),w,b
 24653  010CF8  6F76               	movwf	??___flmul& (0+255),b
 24654  010CFA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24655  010CFC  6F77               	movwf	(??___flmul+1)& (0+255),b
 24656  010CFE  6B78               	clrf	(??___flmul+2)& (0+255),b
 24657  010D00  6B79               	clrf	(??___flmul+3)& (0+255),b
 24658  010D02  C078  F079         	movff	??___flmul+2,??___flmul+3
 24659  010D06  C077  F078         	movff	??___flmul+1,??___flmul+2
 24660  010D0A  C076  F077         	movff	??___flmul,??___flmul+1
 24661  010D0E  6B76               	clrf	??___flmul& (0+255),b
 24662  010D10  5176               	movf	??___flmul& (0+255),w,b
 24663  010D12  2781               	addwf	___flmul@prod& (0+255),f,b
 24664  010D14  5177               	movf	(??___flmul+1)& (0+255),w,b
 24665  010D16  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24666  010D18  5178               	movf	(??___flmul+2)& (0+255),w,b
 24667  010D1A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24668  010D1C  5179               	movf	(??___flmul+3)& (0+255),w,b
 24669  010D1E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24670                           
 24671                           ; BSR set to: 0
 24672  010D20  C07C  F076         	movff	___flmul@grs,??___flmul
 24673  010D24  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 24674  010D28  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 24675  010D2C  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 24676  010D30  0E19               	movlw	25
 24677  010D32  D005               	goto	u10180
 24678  010D34                     u10185:
 24679  010D34  90D8               	bcf	status,0,c
 24680  010D36  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24681  010D38  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24682  010D3A  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24683  010D3C  3376               	rrcf	??___flmul& (0+255),f,b
 24684  010D3E                     u10180:
 24685  010D3E  2EE8               	decfsz	wreg,f,c
 24686  010D40  D7F9               	goto	u10185
 24687  010D42  5176               	movf	??___flmul& (0+255),w,b
 24688  010D44  2781               	addwf	___flmul@prod& (0+255),f,b
 24689  010D46  5177               	movf	(??___flmul+1)& (0+255),w,b
 24690  010D48  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24691  010D4A  5178               	movf	(??___flmul+2)& (0+255),w,b
 24692  010D4C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24693  010D4E  5179               	movf	(??___flmul+3)& (0+255),w,b
 24694  010D50  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24695                           
 24696                           ; BSR set to: 0
 24697  010D52  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 24698  010D56  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 24699  010D5A  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 24700  010D5E  6B7C               	clrf	___flmul@grs& (0+255),b
 24701                           
 24702                           ; BSR set to: 0
 24703  010D60  517B               	movf	___flmul@aexp& (0+255),w,b
 24704  010D62  C080  F076         	movff	___flmul@bexp,??___flmul
 24705  010D66  6B77               	clrf	(??___flmul+1)& (0+255),b
 24706  010D68  2776               	addwf	??___flmul& (0+255),f,b
 24707  010D6A  0E00               	movlw	0
 24708  010D6C  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 24709  010D6E  0E82               	movlw	130
 24710  010D70  2576               	addwf	??___flmul& (0+255),w,b
 24711  010D72  6F85               	movwf	___flmul@temp& (0+255),b
 24712  010D74  0EFF               	movlw	255
 24713  010D76  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 24714  010D78  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 24715  010D7A  D00F               	goto	l2853
 24716  010D7C                     
 24717                           ; BSR set to: 0
 24718                           
 24719                           ; BSR set to: 0
 24720  010D7C  90D8               	bcf	status,0,c
 24721  010D7E  3781               	rlcf	___flmul@prod& (0+255),f,b
 24722  010D80  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 24723  010D82  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 24724  010D84  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 24725                           
 24726                           ; BSR set to: 0
 24727  010D86  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 24728                           
 24729                           ; BSR set to: 0
 24730  010D88  8181               	bsf	___flmul@prod& (0+255),0,b
 24731                           
 24732                           ; BSR set to: 0
 24733  010D8A  90D8               	bcf	status,0,c
 24734  010D8C  377C               	rlcf	___flmul@grs& (0+255),f,b
 24735  010D8E  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 24736  010D90  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 24737  010D92  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 24738  010D94  0785               	decf	___flmul@temp& (0+255),f,b
 24739  010D96  A0D8               	btfss	status,0,c
 24740  010D98  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 24741  010D9A                     l2853:
 24742                           
 24743                           ; BSR set to: 0
 24744                           
 24745                           ; BSR set to: 0
 24746  010D9A  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 24747  010D9C  D7EF               	goto	l2854
 24748                           
 24749                           ; BSR set to: 0
 24750                           
 24751                           ; BSR set to: 0
 24752  010D9E  0E00               	movlw	0
 24753  010DA0  6F7B               	movwf	___flmul@aexp& (0+255),b
 24754                           
 24755                           ; BSR set to: 0
 24756  010DA2  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 24757  010DA4  D016               	goto	l2860
 24758                           
 24759                           ; BSR set to: 0
 24760  010DA6  0EFF               	movlw	255
 24761  010DA8  157C               	andwf	___flmul@grs& (0+255),w,b
 24762  010DAA  6F76               	movwf	??___flmul& (0+255),b
 24763  010DAC  0EFF               	movlw	255
 24764  010DAE  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 24765  010DB0  6F77               	movwf	(??___flmul+1)& (0+255),b
 24766  010DB2  0EFF               	movlw	255
 24767  010DB4  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 24768  010DB6  6F78               	movwf	(??___flmul+2)& (0+255),b
 24769  010DB8  0E7F               	movlw	127
 24770  010DBA  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 24771  010DBC  6F79               	movwf	(??___flmul+3)& (0+255),b
 24772  010DBE  5176               	movf	??___flmul& (0+255),w,b
 24773  010DC0  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 24774  010DC2  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 24775  010DC4  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 24776  010DC6  A4D8               	btfss	status,2,c
 24777  010DC8  D002               	goto	u10230
 24778                           
 24779                           ; BSR set to: 0
 24780                           
 24781                           ; BSR set to: 0
 24782  010DCA  A181               	btfss	___flmul@prod& (0+255),0,b
 24783  010DCC  D002               	goto	l2860
 24784  010DCE                     u10230:
 24785                           
 24786                           ; BSR set to: 0
 24787  010DCE  0E01               	movlw	1
 24788  010DD0  6F7B               	movwf	___flmul@aexp& (0+255),b
 24789  010DD2                     l2860:
 24790                           
 24791                           ; BSR set to: 0
 24792                           
 24793                           ; BSR set to: 0
 24794                           
 24795                           ; BSR set to: 0
 24796  010DD2  517B               	movf	___flmul@aexp& (0+255),w,b
 24797  010DD4  B4D8               	btfsc	status,2,c
 24798  010DD6  D01F               	goto	l2862
 24799                           
 24800                           ; BSR set to: 0
 24801  010DD8  0E01               	movlw	1
 24802  010DDA  2781               	addwf	___flmul@prod& (0+255),f,b
 24803  010DDC  0E00               	movlw	0
 24804  010DDE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24805  010DE0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24806  010DE2  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24807                           
 24808                           ; BSR set to: 0
 24809  010DE4  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 24810  010DE6  D017               	goto	l2862
 24811                           
 24812                           ; BSR set to: 0
 24813  010DE8  C081  F076         	movff	___flmul@prod,??___flmul
 24814  010DEC  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 24815  010DF0  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 24816  010DF4  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 24817  010DF8  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 24818  010DFA  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 24819  010DFC  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 24820  010DFE  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 24821  010E00  3376               	rrcf	??___flmul& (0+255),f,b
 24822  010E02  C076  F081         	movff	??___flmul,___flmul@prod
 24823  010E06  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 24824  010E0A  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 24825  010E0E  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 24826                           
 24827                           ; BSR set to: 0
 24828  010E12  4B85               	infsnz	___flmul@temp& (0+255),f,b
 24829  010E14  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 24830  010E16                     l2862:
 24831                           
 24832                           ; BSR set to: 0
 24833                           
 24834                           ; BSR set to: 0
 24835                           
 24836                           ; BSR set to: 0
 24837  010E16  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24838  010E18  D00D               	goto	l2863
 24839  010E1A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24840  010E1C  E103               	bnz	u10260
 24841  010E1E  2985               	incf	___flmul@temp& (0+255),w,b
 24842  010E20  A0D8               	btfss	status,0,c
 24843  010E22  D008               	goto	l2863
 24844  010E24                     u10260:
 24845                           
 24846                           ; BSR set to: 0
 24847  010E24  0E00               	movlw	0
 24848  010E26  6F81               	movwf	___flmul@prod& (0+255),b
 24849  010E28  0E00               	movlw	0
 24850  010E2A  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24851  010E2C  0E80               	movlw	128
 24852  010E2E  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24853  010E30  0E7F               	movlw	127
 24854  010E32  D020               	goto	L11
 24855  010E34                     l2863:
 24856                           
 24857                           ; BSR set to: 0
 24858                           
 24859                           ; BSR set to: 0
 24860  010E34  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24861  010E36  D005               	goto	u10270
 24862  010E38  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 24863  010E3A  E10E               	bnz	l2865
 24864  010E3C  0585               	decf	___flmul@temp& (0+255),w,b
 24865  010E3E  B0D8               	btfsc	status,0,c
 24866  010E40  D00B               	goto	l2865
 24867  010E42                     u10270:
 24868                           
 24869                           ; BSR set to: 0
 24870  010E42  0E00               	movlw	0
 24871  010E44  6F81               	movwf	___flmul@prod& (0+255),b
 24872  010E46  0E00               	movlw	0
 24873  010E48  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 24874  010E4A  0E00               	movlw	0
 24875  010E4C  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 24876  010E4E  0E00               	movlw	0
 24877  010E50  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24878  010E52  0E00               	movlw	0
 24879  010E54  6F7A               	movwf	___flmul@sign& (0+255),b
 24880  010E56  D00F               	goto	l2866
 24881  010E58                     l2865:
 24882                           
 24883                           ; BSR set to: 0
 24884  010E58  C085  F080         	movff	___flmul@temp,___flmul@bexp
 24885                           
 24886                           ; BSR set to: 0
 24887  010E5C  0EFF               	movlw	255
 24888  010E5E  1781               	andwf	___flmul@prod& (0+255),f,b
 24889  010E60  0EFF               	movlw	255
 24890  010E62  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 24891  010E64  0E7F               	movlw	127
 24892  010E66  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 24893  010E68  0E00               	movlw	0
 24894  010E6A  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 24895                           
 24896                           ; BSR set to: 0
 24897  010E6C  B180               	btfsc	___flmul@bexp& (0+255),0,b
 24898                           
 24899                           ; BSR set to: 0
 24900  010E6E  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 24901                           
 24902                           ; BSR set to: 0
 24903                           
 24904                           ; BSR set to: 0
 24905  010E70  90D8               	bcf	status,0,c
 24906  010E72  3180               	rrcf	___flmul@bexp& (0+255),w,b
 24907  010E74                     L11:
 24908  010E74  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 24909  010E76                     l2866:
 24910                           
 24911                           ; BSR set to: 0
 24912                           
 24913                           ; BSR set to: 0
 24914                           
 24915                           ; BSR set to: 0
 24916  010E76  517A               	movf	___flmul@sign& (0+255),w,b
 24917  010E78  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 24918                           
 24919                           ; BSR set to: 0
 24920  010E7A  C081  F06E         	movff	___flmul@prod,?___flmul
 24921  010E7E  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 24922  010E82  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 24923  010E86  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 24924  010E8A  0012               	return	
 24925  010E8C                     __end_of___flmul:
 24926                           	opt stack 0
 24927                           tosu	equ	0xFFF
 24928                           tosh	equ	0xFFE
 24929                           tosl	equ	0xFFD
 24930                           pclath	equ	0xFFA
 24931                           tblptru	equ	0xFF8
 24932                           tblptrh	equ	0xFF7
 24933                           tblptrl	equ	0xFF6
 24934                           tablat	equ	0xFF5
 24935                           prodh	equ	0xFF4
 24936                           prodl	equ	0xFF3
 24937                           intcon	equ	0xFF2
 24938                           indf0	equ	0xFEF
 24939                           postinc0	equ	0xFEE
 24940                           fsr0h	equ	0xFEA
 24941                           fsr0l	equ	0xFE9
 24942                           wreg	equ	0xFE8
 24943                           indf1	equ	0xFE7
 24944                           postdec1	equ	0xFE5
 24945                           fsr1h	equ	0xFE2
 24946                           fsr1l	equ	0xFE1
 24947                           indf2	equ	0xFDF
 24948                           postinc2	equ	0xFDE
 24949                           postdec2	equ	0xFDD
 24950                           plusw2	equ	0xFDB
 24951                           fsr2h	equ	0xFDA
 24952                           fsr2l	equ	0xFD9
 24953                           status	equ	0xFD8
 24954                           
 24955 ;; *************** function ___flsub *****************
 24956 ;; Defined at:
 24957 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 24958 ;; Parameters:    Size  Location     Type
 24959 ;;  b               4   63[BANK0 ] unsigned char 
 24960 ;;  a               4   67[BANK0 ] unsigned char 
 24961 ;; Auto vars:     Size  Location     Type
 24962 ;;		None
 24963 ;; Return value:  Size  Location     Type
 24964 ;;                  4   63[BANK0 ] unsigned char 
 24965 ;; Registers used:
 24966 ;;		wreg, status,2, status,0, cstack
 24967 ;; Tracked objects:
 24968 ;;		On entry : 0/0
 24969 ;;		On exit  : 0/0
 24970 ;;		Unchanged: 0/0
 24971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24972 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24975 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24976 ;;Total ram usage:        8 bytes
 24977 ;; Hardware stack levels used:    1
 24978 ;; Hardware stack levels required when called:    8
 24979 ;; This function calls:
 24980 ;;		___fladd
 24981 ;; This function is called by:
 24982 ;;		_exp
 24983 ;; This function uses a non-reentrant model
 24984 ;;
 24985                           
 24986                           	psect	text134
 24987  0156B2                     __ptext134:
 24988                           	opt stack 0
 24989  0156B2                     ___flsub:
 24990                           	opt stack 18
 24991                           
 24992                           ; BSR set to: 0
 24993                           ;incstack = 0
 24994  0156B2  0E00               	movlw	0
 24995  0156B4  0100               	movlb	0	; () banked
 24996  0156B6  1BA3               	xorwf	___flsub@a& (0+255),f,b
 24997  0156B8  0E00               	movlw	0
 24998  0156BA  1BA4               	xorwf	(___flsub@a+1)& (0+255),f,b
 24999  0156BC  0E00               	movlw	0
 25000  0156BE  1BA5               	xorwf	(___flsub@a+2)& (0+255),f,b
 25001  0156C0  0E80               	movlw	128
 25002  0156C2  1BA6               	xorwf	(___flsub@a+3)& (0+255),f,b
 25003                           
 25004                           ; BSR set to: 0
 25005  0156C4  C09F  F08B         	movff	___flsub@b,___fladd@b
 25006  0156C8  C0A0  F08C         	movff	___flsub@b+1,___fladd@b+1
 25007  0156CC  C0A1  F08D         	movff	___flsub@b+2,___fladd@b+2
 25008  0156D0  C0A2  F08E         	movff	___flsub@b+3,___fladd@b+3
 25009  0156D4  C0A3  F08F         	movff	___flsub@a,___fladd@a
 25010  0156D8  C0A4  F090         	movff	___flsub@a+1,___fladd@a+1
 25011  0156DC  C0A5  F091         	movff	___flsub@a+2,___fladd@a+2
 25012  0156E0  C0A6  F092         	movff	___flsub@a+3,___fladd@a+3
 25013  0156E4  EC46  F087         	call	___fladd	;wreg free
 25014  0156E8  C08B  F09F         	movff	?___fladd,?___flsub
 25015  0156EC  C08C  F0A0         	movff	?___fladd+1,?___flsub+1
 25016  0156F0  C08D  F0A1         	movff	?___fladd+2,?___flsub+2
 25017  0156F4  C08E  F0A2         	movff	?___fladd+3,?___flsub+3
 25018  0156F8  0012               	return	
 25019  0156FA                     __end_of___flsub:
 25020                           	opt stack 0
 25021                           tosu	equ	0xFFF
 25022                           tosh	equ	0xFFE
 25023                           tosl	equ	0xFFD
 25024                           pclath	equ	0xFFA
 25025                           tblptru	equ	0xFF8
 25026                           tblptrh	equ	0xFF7
 25027                           tblptrl	equ	0xFF6
 25028                           tablat	equ	0xFF5
 25029                           prodh	equ	0xFF4
 25030                           prodl	equ	0xFF3
 25031                           intcon	equ	0xFF2
 25032                           indf0	equ	0xFEF
 25033                           postinc0	equ	0xFEE
 25034                           fsr0h	equ	0xFEA
 25035                           fsr0l	equ	0xFE9
 25036                           wreg	equ	0xFE8
 25037                           indf1	equ	0xFE7
 25038                           postdec1	equ	0xFE5
 25039                           fsr1h	equ	0xFE2
 25040                           fsr1l	equ	0xFE1
 25041                           indf2	equ	0xFDF
 25042                           postinc2	equ	0xFDE
 25043                           postdec2	equ	0xFDD
 25044                           plusw2	equ	0xFDB
 25045                           fsr2h	equ	0xFDA
 25046                           fsr2l	equ	0xFD9
 25047                           status	equ	0xFD8
 25048                           
 25049 ;; *************** function ___fladd *****************
 25050 ;; Defined at:
 25051 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 25052 ;; Parameters:    Size  Location     Type
 25053 ;;  b               4   43[BANK0 ] unsigned char 
 25054 ;;  a               4   47[BANK0 ] unsigned char 
 25055 ;; Auto vars:     Size  Location     Type
 25056 ;;  grs             1   62[BANK0 ] unsigned char 
 25057 ;;  bexp            1   61[BANK0 ] unsigned char 
 25058 ;;  aexp            1   60[BANK0 ] unsigned char 
 25059 ;;  signs           1   59[BANK0 ] unsigned char 
 25060 ;; Return value:  Size  Location     Type
 25061 ;;                  4   43[BANK0 ] unsigned char 
 25062 ;; Registers used:
 25063 ;;		wreg, status,2, status,0
 25064 ;; Tracked objects:
 25065 ;;		On entry : 0/0
 25066 ;;		On exit  : 0/0
 25067 ;;		Unchanged: 0/0
 25068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25069 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25070 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25071 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25072 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25073 ;;Total ram usage:       20 bytes
 25074 ;; Hardware stack levels used:    1
 25075 ;; Hardware stack levels required when called:    7
 25076 ;; This function calls:
 25077 ;;		Nothing
 25078 ;; This function is called by:
 25079 ;;		_ADCAverage
 25080 ;;		___flsub
 25081 ;;		_floor
 25082 ;;		_log
 25083 ;;		_eval_poly
 25084 ;; This function uses a non-reentrant model
 25085 ;;
 25086                           
 25087                           	psect	text135
 25088  010E8C                     __ptext135:
 25089                           	opt stack 0
 25090  010E8C                     ___fladd:
 25091                           	opt stack 18
 25092                           
 25093                           ;incstack = 0
 25094  010E8C  0100               	movlb	0	; () banked
 25095  010E8E  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25096  010E90  0B80               	andlw	128
 25097  010E92  6F9B               	movwf	___fladd@signs& (0+255),b
 25098  010E94  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25099  010E96  258E               	addwf	(___fladd@b+3)& (0+255),w,b
 25100  010E98  6F9D               	movwf	___fladd@bexp& (0+255),b
 25101                           
 25102                           ; BSR set to: 0
 25103  010E9A  BF8D               	btfsc	(___fladd@b+2)& (0+255),7,b
 25104                           
 25105                           ; BSR set to: 0
 25106  010E9C  819D               	bsf	___fladd@bexp& (0+255),0,b
 25107                           
 25108                           ; BSR set to: 0
 25109                           
 25110                           ; BSR set to: 0
 25111  010E9E  519D               	movf	___fladd@bexp& (0+255),w,b
 25112  010EA0  B4D8               	btfsc	status,2,c
 25113  010EA2  D00D               	goto	l2751
 25114                           
 25115                           ; BSR set to: 0
 25116  010EA4  299D               	incf	___fladd@bexp& (0+255),w,b
 25117  010EA6  A4D8               	btfss	status,2,c
 25118  010EA8  D008               	goto	l2752
 25119                           
 25120                           ; BSR set to: 0
 25121  010EAA  0E00               	movlw	0
 25122  010EAC  6F8B               	movwf	___fladd@b& (0+255),b
 25123  010EAE  0E00               	movlw	0
 25124  010EB0  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25125  010EB2  0E00               	movlw	0
 25126  010EB4  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25127  010EB6  0E00               	movlw	0
 25128  010EB8  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25129  010EBA                     l2752:
 25130                           
 25131                           ; BSR set to: 0
 25132                           
 25133                           ; BSR set to: 0
 25134  010EBA  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25135  010EBC  D006               	goto	L12
 25136  010EBE                     l2751:
 25137                           
 25138                           ; BSR set to: 0
 25139                           
 25140                           ; BSR set to: 0
 25141  010EBE  0E00               	movlw	0
 25142  010EC0  6F8B               	movwf	___fladd@b& (0+255),b
 25143  010EC2  0E00               	movlw	0
 25144  010EC4  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25145  010EC6  0E00               	movlw	0
 25146  010EC8  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25147  010ECA                     L12:
 25148  010ECA  0E00               	movlw	0
 25149  010ECC  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25150                           
 25151                           ; BSR set to: 0
 25152                           
 25153                           ; BSR set to: 0
 25154  010ECE  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25155  010ED0  0B80               	andlw	128
 25156  010ED2  6F9C               	movwf	___fladd@aexp& (0+255),b
 25157                           
 25158                           ; BSR set to: 0
 25159  010ED4  519B               	movf	___fladd@signs& (0+255),w,b
 25160  010ED6  199C               	xorwf	___fladd@aexp& (0+255),w,b
 25161  010ED8  A4D8               	btfss	status,2,c
 25162                           
 25163                           ; BSR set to: 0
 25164  010EDA  8D9B               	bsf	___fladd@signs& (0+255),6,b
 25165                           
 25166                           ; BSR set to: 0
 25167                           
 25168                           ; BSR set to: 0
 25169  010EDC  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25170  010EDE  2592               	addwf	(___fladd@a+3)& (0+255),w,b
 25171  010EE0  6F9C               	movwf	___fladd@aexp& (0+255),b
 25172                           
 25173                           ; BSR set to: 0
 25174  010EE2  BF91               	btfsc	(___fladd@a+2)& (0+255),7,b
 25175                           
 25176                           ; BSR set to: 0
 25177  010EE4  819C               	bsf	___fladd@aexp& (0+255),0,b
 25178                           
 25179                           ; BSR set to: 0
 25180                           
 25181                           ; BSR set to: 0
 25182  010EE6  519C               	movf	___fladd@aexp& (0+255),w,b
 25183  010EE8  B4D8               	btfsc	status,2,c
 25184  010EEA  D00D               	goto	l2756
 25185                           
 25186                           ; BSR set to: 0
 25187  010EEC  299C               	incf	___fladd@aexp& (0+255),w,b
 25188  010EEE  A4D8               	btfss	status,2,c
 25189  010EF0  D008               	goto	l2757
 25190                           
 25191                           ; BSR set to: 0
 25192  010EF2  0E00               	movlw	0
 25193  010EF4  6F8F               	movwf	___fladd@a& (0+255),b
 25194  010EF6  0E00               	movlw	0
 25195  010EF8  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25196  010EFA  0E00               	movlw	0
 25197  010EFC  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25198  010EFE  0E00               	movlw	0
 25199  010F00  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25200  010F02                     l2757:
 25201                           
 25202                           ; BSR set to: 0
 25203                           
 25204                           ; BSR set to: 0
 25205  010F02  8F91               	bsf	(___fladd@a+2)& (0+255),7,b
 25206  010F04  D006               	goto	L13
 25207  010F06                     l2756:
 25208                           
 25209                           ; BSR set to: 0
 25210                           
 25211                           ; BSR set to: 0
 25212  010F06  0E00               	movlw	0
 25213  010F08  6F8F               	movwf	___fladd@a& (0+255),b
 25214  010F0A  0E00               	movlw	0
 25215  010F0C  6F90               	movwf	(___fladd@a+1)& (0+255),b
 25216  010F0E  0E00               	movlw	0
 25217  010F10  6F91               	movwf	(___fladd@a+2)& (0+255),b
 25218  010F12                     L13:
 25219  010F12  0E00               	movlw	0
 25220  010F14  6F92               	movwf	(___fladd@a+3)& (0+255),b
 25221                           
 25222                           ; BSR set to: 0
 25223                           
 25224                           ; BSR set to: 0
 25225  010F16  519D               	movf	___fladd@bexp& (0+255),w,b
 25226  010F18  5D9C               	subwf	___fladd@aexp& (0+255),w,b
 25227  010F1A  B0D8               	btfsc	status,0,c
 25228  010F1C  D022               	goto	l2759
 25229                           
 25230                           ; BSR set to: 0
 25231  010F1E  AD9B               	btfss	___fladd@signs& (0+255),6,b
 25232  010F20  D002               	goto	l2760
 25233                           
 25234                           ; BSR set to: 0
 25235  010F22  0E80               	movlw	128
 25236  010F24  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25237  010F26                     l2760:
 25238                           
 25239                           ; BSR set to: 0
 25240                           
 25241                           ; BSR set to: 0
 25242  010F26  C09D  F09E         	movff	___fladd@bexp,___fladd@grs
 25243                           
 25244                           ; BSR set to: 0
 25245  010F2A  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25246                           
 25247                           ; BSR set to: 0
 25248  010F2E  C09E  F09C         	movff	___fladd@grs,___fladd@aexp
 25249                           
 25250                           ; BSR set to: 0
 25251  010F32  C08B  F09E         	movff	___fladd@b,___fladd@grs
 25252                           
 25253                           ; BSR set to: 0
 25254  010F36  C08F  F08B         	movff	___fladd@a,___fladd@b
 25255                           
 25256                           ; BSR set to: 0
 25257  010F3A  C09E  F08F         	movff	___fladd@grs,___fladd@a
 25258                           
 25259                           ; BSR set to: 0
 25260  010F3E  C08C  F09E         	movff	___fladd@b+1,___fladd@grs
 25261                           
 25262                           ; BSR set to: 0
 25263  010F42  C090  F08C         	movff	___fladd@a+1,___fladd@b+1
 25264                           
 25265                           ; BSR set to: 0
 25266  010F46  C09E  F090         	movff	___fladd@grs,___fladd@a+1
 25267                           
 25268                           ; BSR set to: 0
 25269  010F4A  C08D  F09E         	movff	___fladd@b+2,___fladd@grs
 25270                           
 25271                           ; BSR set to: 0
 25272  010F4E  C091  F08D         	movff	___fladd@a+2,___fladd@b+2
 25273                           
 25274                           ; BSR set to: 0
 25275  010F52  C09E  F091         	movff	___fladd@grs,___fladd@a+2
 25276                           
 25277                           ; BSR set to: 0
 25278  010F56  C08E  F09E         	movff	___fladd@b+3,___fladd@grs
 25279                           
 25280                           ; BSR set to: 0
 25281  010F5A  C092  F08E         	movff	___fladd@a+3,___fladd@b+3
 25282                           
 25283                           ; BSR set to: 0
 25284  010F5E  C09E  F092         	movff	___fladd@grs,___fladd@a+3
 25285  010F62                     l2759:
 25286                           
 25287                           ; BSR set to: 0
 25288                           
 25289                           ; BSR set to: 0
 25290  010F62  0E00               	movlw	0
 25291  010F64  6F9E               	movwf	___fladd@grs& (0+255),b
 25292                           
 25293                           ; BSR set to: 0
 25294  010F66  519D               	movf	___fladd@bexp& (0+255),w,b
 25295  010F68  6F93               	movwf	??___fladd& (0+255),b
 25296  010F6A  6B94               	clrf	(??___fladd+1)& (0+255),b
 25297  010F6C  1F93               	comf	??___fladd& (0+255),f,b
 25298  010F6E  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25299  010F70  4B93               	infsnz	??___fladd& (0+255),f,b
 25300  010F72  2B94               	incf	(??___fladd+1)& (0+255),f,b
 25301  010F74  519C               	movf	___fladd@aexp& (0+255),w,b
 25302  010F76  6F95               	movwf	(??___fladd+2)& (0+255),b
 25303  010F78  6B96               	clrf	(??___fladd+3)& (0+255),b
 25304  010F7A  5193               	movf	??___fladd& (0+255),w,b
 25305  010F7C  2795               	addwf	(??___fladd+2)& (0+255),f,b
 25306  010F7E  5194               	movf	(??___fladd+1)& (0+255),w,b
 25307  010F80  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25308  010F82  BF96               	btfsc	(??___fladd+3)& (0+255),7,b
 25309  010F84  D02C               	goto	l2763
 25310  010F86  5196               	movf	(??___fladd+3)& (0+255),w,b
 25311  010F88  E104               	bnz	u9800
 25312  010F8A  0E1A               	movlw	26
 25313  010F8C  5D95               	subwf	(??___fladd+2)& (0+255),w,b
 25314  010F8E  A0D8               	btfss	status,0,c
 25315  010F90  D026               	goto	l2763
 25316  010F92                     u9800:
 25317                           
 25318                           ; BSR set to: 0
 25319  010F92  518B               	movf	___fladd@b& (0+255),w,b
 25320  010F94  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25321  010F96  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25322  010F98  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25323  010F9A  B4D8               	btfsc	status,2,c
 25324  010F9C  D002               	goto	u9810
 25325  010F9E  0E01               	movlw	1
 25326  010FA0  D001               	goto	u9820
 25327  010FA2                     u9810:
 25328  010FA2  0E00               	movlw	0
 25329  010FA4                     u9820:
 25330  010FA4  6F9E               	movwf	___fladd@grs& (0+255),b
 25331                           
 25332                           ; BSR set to: 0
 25333  010FA6  0E00               	movlw	0
 25334  010FA8  6F8B               	movwf	___fladd@b& (0+255),b
 25335  010FAA  0E00               	movlw	0
 25336  010FAC  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25337  010FAE  0E00               	movlw	0
 25338  010FB0  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25339  010FB2  0E00               	movlw	0
 25340  010FB4  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25341                           
 25342                           ; BSR set to: 0
 25343  010FB6  C09C  F09D         	movff	___fladd@aexp,___fladd@bexp
 25344  010FBA  D015               	goto	u9850
 25345  010FBC                     l2764:
 25346                           
 25347                           ; BSR set to: 0
 25348  010FBC  A19E               	btfss	___fladd@grs& (0+255),0,b
 25349  010FBE  D005               	goto	l2765
 25350                           
 25351                           ; BSR set to: 0
 25352  010FC0  90D8               	bcf	status,0,c
 25353  010FC2  319E               	rrcf	___fladd@grs& (0+255),w,b
 25354  010FC4  0901               	iorlw	1
 25355  010FC6  6F9E               	movwf	___fladd@grs& (0+255),b
 25356  010FC8  D002               	goto	l2766
 25357  010FCA                     l2765:
 25358                           
 25359                           ; BSR set to: 0
 25360                           
 25361                           ; BSR set to: 0
 25362  010FCA  90D8               	bcf	status,0,c
 25363  010FCC  339E               	rrcf	___fladd@grs& (0+255),f,b
 25364  010FCE                     l2766:
 25365                           
 25366                           ; BSR set to: 0
 25367                           
 25368                           ; BSR set to: 0
 25369  010FCE  B18B               	btfsc	___fladd@b& (0+255),0,b
 25370                           
 25371                           ; BSR set to: 0
 25372  010FD0  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25373                           
 25374                           ; BSR set to: 0
 25375                           
 25376                           ; BSR set to: 0
 25377  010FD2  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25378  010FD4  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25379  010FD6  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25380  010FD8  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25381  010FDA  338B               	rrcf	___fladd@b& (0+255),f,b
 25382                           
 25383                           ; BSR set to: 0
 25384  010FDC  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25385  010FDE                     l2763:
 25386                           
 25387                           ; BSR set to: 0
 25388  010FDE  519C               	movf	___fladd@aexp& (0+255),w,b
 25389  010FE0  5D9D               	subwf	___fladd@bexp& (0+255),w,b
 25390  010FE2  A0D8               	btfss	status,0,c
 25391  010FE4  D7EB               	goto	l2764
 25392  010FE6                     u9850:
 25393                           
 25394                           ; BSR set to: 0
 25395                           
 25396                           ; BSR set to: 0
 25397  010FE6  BD9B               	btfsc	___fladd@signs& (0+255),6,b
 25398  010FE8  D029               	goto	l2769
 25399                           
 25400                           ; BSR set to: 0
 25401  010FEA  519D               	movf	___fladd@bexp& (0+255),w,b
 25402  010FEC  A4D8               	btfss	status,2,c
 25403  010FEE  D009               	goto	l2770
 25404                           
 25405                           ; BSR set to: 0
 25406  010FF0  0E00               	movlw	0
 25407  010FF2  6F8B               	movwf	?___fladd& (0+255),b
 25408  010FF4  0E00               	movlw	0
 25409  010FF6  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25410  010FF8  0E00               	movlw	0
 25411  010FFA  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25412  010FFC  0E00               	movlw	0
 25413  010FFE  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25414                           
 25415                           ; BSR set to: 0
 25416  011000  0012               	return	
 25417  011002                     l2770:
 25418                           
 25419                           ; BSR set to: 0
 25420                           
 25421                           ; BSR set to: 0
 25422  011002  518F               	movf	___fladd@a& (0+255),w,b
 25423  011004  278B               	addwf	___fladd@b& (0+255),f,b
 25424  011006  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25425  011008  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25426  01100A  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25427  01100C  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25428  01100E  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25429  011010  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25430                           
 25431                           ; BSR set to: 0
 25432  011012  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25433  011014  D083               	goto	u9980
 25434                           
 25435                           ; BSR set to: 0
 25436  011016  A19E               	btfss	___fladd@grs& (0+255),0,b
 25437  011018  D006               	goto	l2773
 25438                           
 25439                           ; BSR set to: 0
 25440  01101A  90D8               	bcf	status,0,c
 25441  01101C  339E               	rrcf	___fladd@grs& (0+255),f,b
 25442  01101E  519E               	movf	___fladd@grs& (0+255),w,b
 25443  011020  0901               	iorlw	1
 25444  011022  6F9E               	movwf	___fladd@grs& (0+255),b
 25445  011024  D002               	goto	l2774
 25446  011026                     l2773:
 25447                           
 25448                           ; BSR set to: 0
 25449                           
 25450                           ; BSR set to: 0
 25451  011026  90D8               	bcf	status,0,c
 25452  011028  339E               	rrcf	___fladd@grs& (0+255),f,b
 25453  01102A                     l2774:
 25454                           
 25455                           ; BSR set to: 0
 25456                           
 25457                           ; BSR set to: 0
 25458  01102A  B18B               	btfsc	___fladd@b& (0+255),0,b
 25459                           
 25460                           ; BSR set to: 0
 25461  01102C  8F9E               	bsf	___fladd@grs& (0+255),7,b
 25462                           
 25463                           ; BSR set to: 0
 25464                           
 25465                           ; BSR set to: 0
 25466  01102E  358E               	rlcf	(___fladd@b+3)& (0+255),w,b
 25467  011030  338E               	rrcf	(___fladd@b+3)& (0+255),f,b
 25468  011032  338D               	rrcf	(___fladd@b+2)& (0+255),f,b
 25469  011034  338C               	rrcf	(___fladd@b+1)& (0+255),f,b
 25470  011036  338B               	rrcf	___fladd@b& (0+255),f,b
 25471                           
 25472                           ; BSR set to: 0
 25473  011038  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25474                           
 25475                           ; BSR set to: 0
 25476  01103A  D070               	goto	u9980
 25477  01103C                     l2769:
 25478                           
 25479                           ; BSR set to: 0
 25480                           
 25481                           ; BSR set to: 0
 25482  01103C  518F               	movf	___fladd@a& (0+255),w,b
 25483  01103E  5D8B               	subwf	___fladd@b& (0+255),w,b
 25484  011040  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25485  011042  598C               	subwfb	(___fladd@b+1)& (0+255),w,b
 25486  011044  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25487  011046  598D               	subwfb	(___fladd@b+2)& (0+255),w,b
 25488  011048  518E               	movf	(___fladd@b+3)& (0+255),w,b
 25489  01104A  0A80               	xorlw	128
 25490  01104C  6F93               	movwf	??___fladd& (0+255),b
 25491  01104E  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25492  011050  0A80               	xorlw	128
 25493  011052  5993               	subwfb	??___fladd& (0+255),w,b
 25494  011054  B0D8               	btfsc	status,0,c
 25495  011056  D036               	goto	l2777
 25496                           
 25497                           ; BSR set to: 0
 25498  011058  C08B  F093         	movff	___fladd@b,??___fladd
 25499  01105C  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25500  011060  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25501  011064  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25502  011068  1F93               	comf	??___fladd& (0+255),f,b
 25503  01106A  1F94               	comf	(??___fladd+1)& (0+255),f,b
 25504  01106C  1F95               	comf	(??___fladd+2)& (0+255),f,b
 25505  01106E  1F96               	comf	(??___fladd+3)& (0+255),f,b
 25506  011070  2B93               	incf	??___fladd& (0+255),f,b
 25507  011072  0E00               	movlw	0
 25508  011074  2394               	addwfc	(??___fladd+1)& (0+255),f,b
 25509  011076  2395               	addwfc	(??___fladd+2)& (0+255),f,b
 25510  011078  2396               	addwfc	(??___fladd+3)& (0+255),f,b
 25511  01107A  518F               	movf	___fladd@a& (0+255),w,b
 25512  01107C  2593               	addwf	??___fladd& (0+255),w,b
 25513  01107E  6F97               	movwf	(??___fladd+4)& (0+255),b
 25514  011080  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25515  011082  2194               	addwfc	(??___fladd+1)& (0+255),w,b
 25516  011084  6F98               	movwf	(??___fladd+5)& (0+255),b
 25517  011086  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25518  011088  2195               	addwfc	(??___fladd+2)& (0+255),w,b
 25519  01108A  6F99               	movwf	(??___fladd+6)& (0+255),b
 25520  01108C  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25521  01108E  2196               	addwfc	(??___fladd+3)& (0+255),w,b
 25522  011090  6F9A               	movwf	(??___fladd+7)& (0+255),b
 25523  011092  0EFF               	movlw	255
 25524  011094  2597               	addwf	(??___fladd+4)& (0+255),w,b
 25525  011096  6F8B               	movwf	___fladd@b& (0+255),b
 25526  011098  0EFF               	movlw	255
 25527  01109A  2198               	addwfc	(??___fladd+5)& (0+255),w,b
 25528  01109C  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25529  01109E  0EFF               	movlw	255
 25530  0110A0  2199               	addwfc	(??___fladd+6)& (0+255),w,b
 25531  0110A2  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25532  0110A4  0EFF               	movlw	255
 25533  0110A6  219A               	addwfc	(??___fladd+7)& (0+255),w,b
 25534  0110A8  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25535  0110AA  0E80               	movlw	128
 25536  0110AC  1B9B               	xorwf	___fladd@signs& (0+255),f,b
 25537                           
 25538                           ; BSR set to: 0
 25539  0110AE  6D9E               	negf	___fladd@grs& (0+255),b
 25540                           
 25541                           ; BSR set to: 0
 25542  0110B0  519E               	movf	___fladd@grs& (0+255),w,b
 25543  0110B2  A4D8               	btfss	status,2,c
 25544  0110B4  D00F               	goto	l2779
 25545                           
 25546                           ; BSR set to: 0
 25547  0110B6  0E01               	movlw	1
 25548  0110B8  278B               	addwf	___fladd@b& (0+255),f,b
 25549  0110BA  0E00               	movlw	0
 25550  0110BC  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25551  0110BE  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25552  0110C0  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25553                           
 25554                           ; BSR set to: 0
 25555  0110C2  D008               	goto	l2779
 25556  0110C4                     l2777:
 25557                           
 25558                           ; BSR set to: 0
 25559                           
 25560                           ; BSR set to: 0
 25561  0110C4  518F               	movf	___fladd@a& (0+255),w,b
 25562  0110C6  5F8B               	subwf	___fladd@b& (0+255),f,b
 25563  0110C8  5190               	movf	(___fladd@a+1)& (0+255),w,b
 25564  0110CA  5B8C               	subwfb	(___fladd@b+1)& (0+255),f,b
 25565  0110CC  5191               	movf	(___fladd@a+2)& (0+255),w,b
 25566  0110CE  5B8D               	subwfb	(___fladd@b+2)& (0+255),f,b
 25567  0110D0  5192               	movf	(___fladd@a+3)& (0+255),w,b
 25568  0110D2  5B8E               	subwfb	(___fladd@b+3)& (0+255),f,b
 25569  0110D4                     l2779:
 25570                           
 25571                           ; BSR set to: 0
 25572  0110D4  518B               	movf	___fladd@b& (0+255),w,b
 25573  0110D6  118C               	iorwf	(___fladd@b+1)& (0+255),w,b
 25574  0110D8  118D               	iorwf	(___fladd@b+2)& (0+255),w,b
 25575  0110DA  118E               	iorwf	(___fladd@b+3)& (0+255),w,b
 25576  0110DC  A4D8               	btfss	status,2,c
 25577  0110DE  D01C               	goto	l2786
 25578                           
 25579                           ; BSR set to: 0
 25580  0110E0  519E               	movf	___fladd@grs& (0+255),w,b
 25581  0110E2  A4D8               	btfss	status,2,c
 25582  0110E4  D019               	goto	l2786
 25583                           
 25584                           ; BSR set to: 0
 25585  0110E6  0E00               	movlw	0
 25586  0110E8  6F8B               	movwf	?___fladd& (0+255),b
 25587  0110EA  0E00               	movlw	0
 25588  0110EC  6F8C               	movwf	(?___fladd+1)& (0+255),b
 25589  0110EE  0E00               	movlw	0
 25590  0110F0  6F8D               	movwf	(?___fladd+2)& (0+255),b
 25591  0110F2  0E00               	movlw	0
 25592  0110F4  6F8E               	movwf	(?___fladd+3)& (0+255),b
 25593                           
 25594                           ; BSR set to: 0
 25595  0110F6  0012               	return	
 25596  0110F8                     
 25597                           ; BSR set to: 0
 25598                           
 25599                           ; BSR set to: 0
 25600  0110F8  90D8               	bcf	status,0,c
 25601  0110FA  378B               	rlcf	___fladd@b& (0+255),f,b
 25602  0110FC  378C               	rlcf	(___fladd@b+1)& (0+255),f,b
 25603  0110FE  378D               	rlcf	(___fladd@b+2)& (0+255),f,b
 25604  011100  378E               	rlcf	(___fladd@b+3)& (0+255),f,b
 25605                           
 25606                           ; BSR set to: 0
 25607  011102  BF9E               	btfsc	___fladd@grs& (0+255),7,b
 25608                           
 25609                           ; BSR set to: 0
 25610  011104  818B               	bsf	___fladd@b& (0+255),0,b
 25611                           
 25612                           ; BSR set to: 0
 25613                           
 25614                           ; BSR set to: 0
 25615  011106  A19E               	btfss	___fladd@grs& (0+255),0,b
 25616  011108  D002               	goto	l2784
 25617                           
 25618                           ; BSR set to: 0
 25619  01110A  80D8               	bsf	status,0,c
 25620  01110C  D001               	goto	L14
 25621  01110E                     l2784:
 25622                           
 25623                           ; BSR set to: 0
 25624                           
 25625                           ; BSR set to: 0
 25626  01110E  90D8               	bcf	status,0,c
 25627  011110                     L14:
 25628  011110  379E               	rlcf	___fladd@grs& (0+255),f,b
 25629                           
 25630                           ; BSR set to: 0
 25631                           
 25632                           ; BSR set to: 0
 25633  011112  519D               	movf	___fladd@bexp& (0+255),w,b
 25634  011114  A4D8               	btfss	status,2,c
 25635                           
 25636                           ; BSR set to: 0
 25637  011116  079D               	decf	___fladd@bexp& (0+255),f,b
 25638  011118                     l2786:
 25639                           
 25640                           ; BSR set to: 0
 25641                           
 25642                           ; BSR set to: 0
 25643                           
 25644                           ; BSR set to: 0
 25645  011118  AF8D               	btfss	(___fladd@b+2)& (0+255),7,b
 25646  01111A  D7EE               	goto	l2782
 25647  01111C                     u9980:
 25648                           
 25649                           ; BSR set to: 0
 25650                           
 25651                           ; BSR set to: 0
 25652                           
 25653                           ; BSR set to: 0
 25654  01111C  0E00               	movlw	0
 25655  01111E  6F9C               	movwf	___fladd@aexp& (0+255),b
 25656                           
 25657                           ; BSR set to: 0
 25658  011120  AF9E               	btfss	___fladd@grs& (0+255),7,b
 25659  011122  D00A               	goto	l2791
 25660                           
 25661                           ; BSR set to: 0
 25662  011124  C09E  F093         	movff	___fladd@grs,??___fladd
 25663  011128  0E7F               	movlw	127
 25664  01112A  1793               	andwf	??___fladd& (0+255),f,b
 25665  01112C  A4D8               	btfss	status,2,c
 25666  01112E  D002               	goto	u10010
 25667                           
 25668                           ; BSR set to: 0
 25669                           
 25670                           ; BSR set to: 0
 25671  011130  A18B               	btfss	___fladd@b& (0+255),0,b
 25672  011132  D002               	goto	l2791
 25673  011134                     u10010:
 25674                           
 25675                           ; BSR set to: 0
 25676  011134  0E01               	movlw	1
 25677  011136  6F9C               	movwf	___fladd@aexp& (0+255),b
 25678  011138                     l2791:
 25679                           
 25680                           ; BSR set to: 0
 25681                           
 25682                           ; BSR set to: 0
 25683                           
 25684                           ; BSR set to: 0
 25685  011138  519C               	movf	___fladd@aexp& (0+255),w,b
 25686  01113A  B4D8               	btfsc	status,2,c
 25687  01113C  D020               	goto	l2794
 25688                           
 25689                           ; BSR set to: 0
 25690  01113E  0E01               	movlw	1
 25691  011140  278B               	addwf	___fladd@b& (0+255),f,b
 25692  011142  0E00               	movlw	0
 25693  011144  238C               	addwfc	(___fladd@b+1)& (0+255),f,b
 25694  011146  238D               	addwfc	(___fladd@b+2)& (0+255),f,b
 25695  011148  238E               	addwfc	(___fladd@b+3)& (0+255),f,b
 25696                           
 25697                           ; BSR set to: 0
 25698  01114A  A18E               	btfss	(___fladd@b+3)& (0+255),0,b
 25699  01114C  D018               	goto	l2794
 25700                           
 25701                           ; BSR set to: 0
 25702  01114E  C08B  F093         	movff	___fladd@b,??___fladd
 25703  011152  C08C  F094         	movff	___fladd@b+1,??___fladd+1
 25704  011156  C08D  F095         	movff	___fladd@b+2,??___fladd+2
 25705  01115A  C08E  F096         	movff	___fladd@b+3,??___fladd+3
 25706  01115E  3596               	rlcf	(??___fladd+3)& (0+255),w,b
 25707  011160  3396               	rrcf	(??___fladd+3)& (0+255),f,b
 25708  011162  3395               	rrcf	(??___fladd+2)& (0+255),f,b
 25709  011164  3394               	rrcf	(??___fladd+1)& (0+255),f,b
 25710  011166  3393               	rrcf	??___fladd& (0+255),f,b
 25711  011168  C093  F08B         	movff	??___fladd,___fladd@b
 25712  01116C  C094  F08C         	movff	??___fladd+1,___fladd@b+1
 25713  011170  C095  F08D         	movff	??___fladd+2,___fladd@b+2
 25714  011174  C096  F08E         	movff	??___fladd+3,___fladd@b+3
 25715  011178  299D               	incf	___fladd@bexp& (0+255),w,b
 25716  01117A  A4D8               	btfss	status,2,c
 25717                           
 25718                           ; BSR set to: 0
 25719  01117C  2B9D               	incf	___fladd@bexp& (0+255),f,b
 25720  01117E                     l2794:
 25721                           
 25722                           ; BSR set to: 0
 25723                           
 25724                           ; BSR set to: 0
 25725                           
 25726                           ; BSR set to: 0
 25727                           
 25728                           ; BSR set to: 0
 25729  01117E  299D               	incf	___fladd@bexp& (0+255),w,b
 25730  011180  B4D8               	btfsc	status,2,c
 25731  011182  D003               	goto	u10060
 25732                           
 25733                           ; BSR set to: 0
 25734  011184  519D               	movf	___fladd@bexp& (0+255),w,b
 25735  011186  A4D8               	btfss	status,2,c
 25736  011188  D00D               	goto	l2798
 25737  01118A                     u10060:
 25738                           
 25739                           ; BSR set to: 0
 25740                           
 25741                           ; BSR set to: 0
 25742  01118A  0E00               	movlw	0
 25743  01118C  6F8B               	movwf	___fladd@b& (0+255),b
 25744  01118E  0E00               	movlw	0
 25745  011190  6F8C               	movwf	(___fladd@b+1)& (0+255),b
 25746  011192  0E00               	movlw	0
 25747  011194  6F8D               	movwf	(___fladd@b+2)& (0+255),b
 25748  011196  0E00               	movlw	0
 25749  011198  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25750  01119A  519D               	movf	___fladd@bexp& (0+255),w,b
 25751  01119C  A4D8               	btfss	status,2,c
 25752  01119E  D002               	goto	l2798
 25753                           
 25754                           ; BSR set to: 0
 25755  0111A0  0E00               	movlw	0
 25756  0111A2  6F9B               	movwf	___fladd@signs& (0+255),b
 25757  0111A4                     l2798:
 25758                           
 25759                           ; BSR set to: 0
 25760                           
 25761                           ; BSR set to: 0
 25762                           
 25763                           ; BSR set to: 0
 25764  0111A4  A19D               	btfss	___fladd@bexp& (0+255),0,b
 25765  0111A6  D002               	goto	l2799
 25766                           
 25767                           ; BSR set to: 0
 25768  0111A8  8F8D               	bsf	(___fladd@b+2)& (0+255),7,b
 25769  0111AA  D001               	goto	l2800
 25770  0111AC                     l2799:
 25771                           
 25772                           ; BSR set to: 0
 25773                           
 25774                           ; BSR set to: 0
 25775  0111AC  9F8D               	bcf	(___fladd@b+2)& (0+255),7,b
 25776  0111AE                     l2800:
 25777                           
 25778                           ; BSR set to: 0
 25779                           
 25780                           ; BSR set to: 0
 25781  0111AE  90D8               	bcf	status,0,c
 25782  0111B0  319D               	rrcf	___fladd@bexp& (0+255),w,b
 25783  0111B2  6F8E               	movwf	(___fladd@b+3)& (0+255),b
 25784                           
 25785                           ; BSR set to: 0
 25786  0111B4  BF9B               	btfsc	___fladd@signs& (0+255),7,b
 25787                           
 25788                           ; BSR set to: 0
 25789  0111B6  8F8E               	bsf	(___fladd@b+3)& (0+255),7,b
 25790                           
 25791                           ; BSR set to: 0
 25792                           
 25793                           ; BSR set to: 0
 25794  0111B8  C08B  F08B         	movff	___fladd@b,?___fladd
 25795  0111BC  C08C  F08C         	movff	___fladd@b+1,?___fladd+1
 25796  0111C0  C08D  F08D         	movff	___fladd@b+2,?___fladd+2
 25797  0111C4  C08E  F08E         	movff	___fladd@b+3,?___fladd+3
 25798  0111C8  0012               	return	
 25799  0111CA                     __end_of___fladd:
 25800                           	opt stack 0
 25801                           tosu	equ	0xFFF
 25802                           tosh	equ	0xFFE
 25803                           tosl	equ	0xFFD
 25804                           pclath	equ	0xFFA
 25805                           tblptru	equ	0xFF8
 25806                           tblptrh	equ	0xFF7
 25807                           tblptrl	equ	0xFF6
 25808                           tablat	equ	0xFF5
 25809                           prodh	equ	0xFF4
 25810                           prodl	equ	0xFF3
 25811                           intcon	equ	0xFF2
 25812                           indf0	equ	0xFEF
 25813                           postinc0	equ	0xFEE
 25814                           fsr0h	equ	0xFEA
 25815                           fsr0l	equ	0xFE9
 25816                           wreg	equ	0xFE8
 25817                           indf1	equ	0xFE7
 25818                           postdec1	equ	0xFE5
 25819                           fsr1h	equ	0xFE2
 25820                           fsr1l	equ	0xFE1
 25821                           indf2	equ	0xFDF
 25822                           postinc2	equ	0xFDE
 25823                           postdec2	equ	0xFDD
 25824                           plusw2	equ	0xFDB
 25825                           fsr2h	equ	0xFDA
 25826                           fsr2l	equ	0xFD9
 25827                           status	equ	0xFD8
 25828                           
 25829 ;; *************** function ___flneg *****************
 25830 ;; Defined at:
 25831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 25832 ;; Parameters:    Size  Location     Type
 25833 ;;  f1              4   39[BANK0 ] unsigned char 
 25834 ;; Auto vars:     Size  Location     Type
 25835 ;;		None
 25836 ;; Return value:  Size  Location     Type
 25837 ;;                  4   39[BANK0 ] unsigned char 
 25838 ;; Registers used:
 25839 ;;		wreg, status,2, status,0
 25840 ;; Tracked objects:
 25841 ;;		On entry : 0/0
 25842 ;;		On exit  : 0/0
 25843 ;;		Unchanged: 0/0
 25844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25845 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25848 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25849 ;;Total ram usage:        4 bytes
 25850 ;; Hardware stack levels used:    1
 25851 ;; Hardware stack levels required when called:    7
 25852 ;; This function calls:
 25853 ;;		Nothing
 25854 ;; This function is called by:
 25855 ;;		_ADCAverage
 25856 ;;		_pow
 25857 ;;		_exp
 25858 ;; This function uses a non-reentrant model
 25859 ;;
 25860                           
 25861                           	psect	text136
 25862  015B8A                     __ptext136:
 25863                           	opt stack 0
 25864  015B8A                     ___flneg:
 25865                           	opt stack 19
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;incstack = 0
 25869  015B8A  0100               	movlb	0	; () banked
 25870  015B8C  5187               	movf	___flneg@f1& (0+255),w,b
 25871  015B8E  1188               	iorwf	(___flneg@f1+1)& (0+255),w,b
 25872  015B90  1189               	iorwf	(___flneg@f1+2)& (0+255),w,b
 25873  015B92  118A               	iorwf	(___flneg@f1+3)& (0+255),w,b
 25874  015B94  B4D8               	btfsc	status,2,c
 25875  015B96  D008               	goto	l2514
 25876                           
 25877                           ; BSR set to: 0
 25878  015B98  0E00               	movlw	0
 25879  015B9A  1B87               	xorwf	___flneg@f1& (0+255),f,b
 25880  015B9C  0E00               	movlw	0
 25881  015B9E  1B88               	xorwf	(___flneg@f1+1)& (0+255),f,b
 25882  015BA0  0E00               	movlw	0
 25883  015BA2  1B89               	xorwf	(___flneg@f1+2)& (0+255),f,b
 25884  015BA4  0E80               	movlw	128
 25885  015BA6  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 25886  015BA8                     l2514:
 25887                           
 25888                           ; BSR set to: 0
 25889                           
 25890                           ; BSR set to: 0
 25891  015BA8  C087  F087         	movff	___flneg@f1,?___flneg
 25892  015BAC  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 25893  015BB0  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 25894  015BB4  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 25895  015BB8  0012               	return	
 25896  015BBA                     __end_of___flneg:
 25897                           	opt stack 0
 25898                           tosu	equ	0xFFF
 25899                           tosh	equ	0xFFE
 25900                           tosl	equ	0xFFD
 25901                           pclath	equ	0xFFA
 25902                           tblptru	equ	0xFF8
 25903                           tblptrh	equ	0xFF7
 25904                           tblptrl	equ	0xFF6
 25905                           tablat	equ	0xFF5
 25906                           prodh	equ	0xFF4
 25907                           prodl	equ	0xFF3
 25908                           intcon	equ	0xFF2
 25909                           indf0	equ	0xFEF
 25910                           postinc0	equ	0xFEE
 25911                           fsr0h	equ	0xFEA
 25912                           fsr0l	equ	0xFE9
 25913                           wreg	equ	0xFE8
 25914                           indf1	equ	0xFE7
 25915                           postdec1	equ	0xFE5
 25916                           fsr1h	equ	0xFE2
 25917                           fsr1l	equ	0xFE1
 25918                           indf2	equ	0xFDF
 25919                           postinc2	equ	0xFDE
 25920                           postdec2	equ	0xFDD
 25921                           plusw2	equ	0xFDB
 25922                           fsr2h	equ	0xFDA
 25923                           fsr2l	equ	0xFD9
 25924                           status	equ	0xFD8
 25925                           
 25926 ;; *************** function ___fldiv *****************
 25927 ;; Defined at:
 25928 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 25929 ;; Parameters:    Size  Location     Type
 25930 ;;  b               4    0[BANK0 ] unsigned char 
 25931 ;;  a               4    4[BANK0 ] unsigned char 
 25932 ;; Auto vars:     Size  Location     Type
 25933 ;;  grs             4   19[BANK0 ] unsigned long 
 25934 ;;  rem             4   13[BANK0 ] unsigned long 
 25935 ;;  new_exp         2   17[BANK0 ] int 
 25936 ;;  aexp            1   24[BANK0 ] unsigned char 
 25937 ;;  bexp            1   23[BANK0 ] unsigned char 
 25938 ;;  sign            1   12[BANK0 ] unsigned char 
 25939 ;; Return value:  Size  Location     Type
 25940 ;;                  4    0[BANK0 ] unsigned char 
 25941 ;; Registers used:
 25942 ;;		wreg, status,2, status,0
 25943 ;; Tracked objects:
 25944 ;;		On entry : 0/0
 25945 ;;		On exit  : 0/0
 25946 ;;		Unchanged: 0/0
 25947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25948 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25949 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25950 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25951 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25952 ;;Total ram usage:       25 bytes
 25953 ;; Hardware stack levels used:    1
 25954 ;; Hardware stack levels required when called:    7
 25955 ;; This function calls:
 25956 ;;		Nothing
 25957 ;; This function is called by:
 25958 ;;		_exp
 25959 ;;		_ADC_Voltage
 25960 ;; This function uses a non-reentrant model
 25961 ;;
 25962                           
 25963                           	psect	text137
 25964  0114D8                     __ptext137:
 25965                           	opt stack 0
 25966  0114D8                     ___fldiv:
 25967                           	opt stack 19
 25968                           
 25969                           ; BSR set to: 0
 25970                           ;incstack = 0
 25971  0114D8  0100               	movlb	0	; () banked
 25972  0114DA  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25973  0114DC  0B80               	andlw	128
 25974  0114DE  6F6C               	movwf	___fldiv@sign& (0+255),b
 25975  0114E0  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 25976  0114E2  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 25977  0114E4  6F77               	movwf	___fldiv@bexp& (0+255),b
 25978                           
 25979                           ; BSR set to: 0
 25980  0114E6  BF62               	btfsc	(___fldiv@b+2)& (0+255),7,b
 25981                           
 25982                           ; BSR set to: 0
 25983  0114E8  8177               	bsf	___fldiv@bexp& (0+255),0,b
 25984                           
 25985                           ; BSR set to: 0
 25986                           
 25987                           ; BSR set to: 0
 25988  0114EA  5177               	movf	___fldiv@bexp& (0+255),w,b
 25989  0114EC  B4D8               	btfsc	status,2,c
 25990  0114EE  D00D               	goto	l2808
 25991                           
 25992                           ; BSR set to: 0
 25993  0114F0  2977               	incf	___fldiv@bexp& (0+255),w,b
 25994  0114F2  A4D8               	btfss	status,2,c
 25995  0114F4  D008               	goto	l2809
 25996                           
 25997                           ; BSR set to: 0
 25998  0114F6  0E00               	movlw	0
 25999  0114F8  6F60               	movwf	___fldiv@b& (0+255),b
 26000  0114FA  0E00               	movlw	0
 26001  0114FC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26002  0114FE  0E00               	movlw	0
 26003  011500  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26004  011502  0E00               	movlw	0
 26005  011504  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26006  011506                     l2809:
 26007                           
 26008                           ; BSR set to: 0
 26009                           
 26010                           ; BSR set to: 0
 26011  011506  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26012  011508  D006               	goto	L15
 26013  01150A                     l2808:
 26014                           
 26015                           ; BSR set to: 0
 26016                           
 26017                           ; BSR set to: 0
 26018  01150A  0E00               	movlw	0
 26019  01150C  6F60               	movwf	___fldiv@b& (0+255),b
 26020  01150E  0E00               	movlw	0
 26021  011510  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26022  011512  0E00               	movlw	0
 26023  011514  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26024  011516                     L15:
 26025  011516  0E00               	movlw	0
 26026  011518  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26027                           
 26028                           ; BSR set to: 0
 26029                           
 26030                           ; BSR set to: 0
 26031  01151A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26032  01151C  0B80               	andlw	128
 26033  01151E  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 26034                           
 26035                           ; BSR set to: 0
 26036  011520  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26037  011522  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 26038  011524  6F78               	movwf	___fldiv@aexp& (0+255),b
 26039                           
 26040                           ; BSR set to: 0
 26041  011526  BF66               	btfsc	(___fldiv@a+2)& (0+255),7,b
 26042                           
 26043                           ; BSR set to: 0
 26044  011528  8178               	bsf	___fldiv@aexp& (0+255),0,b
 26045                           
 26046                           ; BSR set to: 0
 26047                           
 26048                           ; BSR set to: 0
 26049  01152A  5178               	movf	___fldiv@aexp& (0+255),w,b
 26050  01152C  B4D8               	btfsc	status,2,c
 26051  01152E  D00D               	goto	l2812
 26052                           
 26053                           ; BSR set to: 0
 26054  011530  2978               	incf	___fldiv@aexp& (0+255),w,b
 26055  011532  A4D8               	btfss	status,2,c
 26056  011534  D008               	goto	l2813
 26057                           
 26058                           ; BSR set to: 0
 26059  011536  0E00               	movlw	0
 26060  011538  6F64               	movwf	___fldiv@a& (0+255),b
 26061  01153A  0E00               	movlw	0
 26062  01153C  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26063  01153E  0E00               	movlw	0
 26064  011540  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26065  011542  0E00               	movlw	0
 26066  011544  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26067  011546                     l2813:
 26068                           
 26069                           ; BSR set to: 0
 26070                           
 26071                           ; BSR set to: 0
 26072  011546  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 26073  011548  D006               	goto	L16
 26074  01154A                     l2812:
 26075                           
 26076                           ; BSR set to: 0
 26077                           
 26078                           ; BSR set to: 0
 26079  01154A  0E00               	movlw	0
 26080  01154C  6F64               	movwf	___fldiv@a& (0+255),b
 26081  01154E  0E00               	movlw	0
 26082  011550  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 26083  011552  0E00               	movlw	0
 26084  011554  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 26085  011556                     L16:
 26086  011556  0E00               	movlw	0
 26087  011558  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 26088                           
 26089                           ; BSR set to: 0
 26090                           
 26091                           ; BSR set to: 0
 26092  01155A  5164               	movf	___fldiv@a& (0+255),w,b
 26093  01155C  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 26094  01155E  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 26095  011560  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 26096  011562  A4D8               	btfss	status,2,c
 26097  011564  D015               	goto	l2815
 26098                           
 26099                           ; BSR set to: 0
 26100  011566  0E00               	movlw	0
 26101  011568  6F60               	movwf	___fldiv@b& (0+255),b
 26102  01156A  0E00               	movlw	0
 26103  01156C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26104  01156E  0E00               	movlw	0
 26105  011570  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26106  011572  0E00               	movlw	0
 26107  011574  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26108                           
 26109                           ; BSR set to: 0
 26110  011576  0E80               	movlw	128
 26111  011578  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 26112  01157A  0E7F               	movlw	127
 26113  01157C  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26114                           
 26115                           ; BSR set to: 0
 26116  01157E  C060  F060         	movff	___fldiv@b,?___fldiv
 26117  011582  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26118  011586  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26119  01158A  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26120                           
 26121                           ; BSR set to: 0
 26122  01158E  0012               	return	
 26123  011590                     l2815:
 26124                           
 26125                           ; BSR set to: 0
 26126                           
 26127                           ; BSR set to: 0
 26128  011590  5177               	movf	___fldiv@bexp& (0+255),w,b
 26129  011592  A4D8               	btfss	status,2,c
 26130  011594  D011               	goto	l2817
 26131                           
 26132                           ; BSR set to: 0
 26133  011596  0E00               	movlw	0
 26134  011598  6F60               	movwf	___fldiv@b& (0+255),b
 26135  01159A  0E00               	movlw	0
 26136  01159C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26137  01159E  0E00               	movlw	0
 26138  0115A0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26139  0115A2  0E00               	movlw	0
 26140  0115A4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26141                           
 26142                           ; BSR set to: 0
 26143  0115A6  C060  F060         	movff	___fldiv@b,?___fldiv
 26144  0115AA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26145  0115AE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26146  0115B2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26147                           
 26148                           ; BSR set to: 0
 26149  0115B6  0012               	return	
 26150  0115B8                     l2817:
 26151                           
 26152                           ; BSR set to: 0
 26153                           
 26154                           ; BSR set to: 0
 26155  0115B8  5178               	movf	___fldiv@aexp& (0+255),w,b
 26156  0115BA  6F68               	movwf	??___fldiv& (0+255),b
 26157  0115BC  6B69               	clrf	(??___fldiv+1)& (0+255),b
 26158  0115BE  1F68               	comf	??___fldiv& (0+255),f,b
 26159  0115C0  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 26160  0115C2  4B68               	infsnz	??___fldiv& (0+255),f,b
 26161  0115C4  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 26162  0115C6  5177               	movf	___fldiv@bexp& (0+255),w,b
 26163  0115C8  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26164  0115CA  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 26165  0115CC  5168               	movf	??___fldiv& (0+255),w,b
 26166  0115CE  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 26167  0115D0  5169               	movf	(??___fldiv+1)& (0+255),w,b
 26168  0115D2  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 26169  0115D4  0E7F               	movlw	127
 26170  0115D6  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 26171  0115D8  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26172  0115DA  0E00               	movlw	0
 26173  0115DC  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 26174  0115DE  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26175                           
 26176                           ; BSR set to: 0
 26177  0115E0  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 26178  0115E4  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 26179  0115E8  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 26180  0115EC  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 26181                           
 26182                           ; BSR set to: 0
 26183  0115F0  0E00               	movlw	0
 26184  0115F2  6F60               	movwf	___fldiv@b& (0+255),b
 26185  0115F4  0E00               	movlw	0
 26186  0115F6  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26187  0115F8  0E00               	movlw	0
 26188  0115FA  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26189  0115FC  0E00               	movlw	0
 26190  0115FE  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26191                           
 26192                           ; BSR set to: 0
 26193  011600  0E00               	movlw	0
 26194  011602  6F73               	movwf	___fldiv@grs& (0+255),b
 26195  011604  0E00               	movlw	0
 26196  011606  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 26197  011608  0E00               	movlw	0
 26198  01160A  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 26199  01160C  0E00               	movlw	0
 26200  01160E  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 26201                           
 26202                           ; BSR set to: 0
 26203  011610  0E00               	movlw	0
 26204  011612  6F78               	movwf	___fldiv@aexp& (0+255),b
 26205  011614  D028               	goto	l2818
 26206  011616                     
 26207                           ; BSR set to: 0
 26208                           
 26209                           ; BSR set to: 0
 26210  011616  5178               	movf	___fldiv@aexp& (0+255),w,b
 26211  011618  B4D8               	btfsc	status,2,c
 26212  01161A  D011               	goto	l2820
 26213                           
 26214                           ; BSR set to: 0
 26215  01161C  90D8               	bcf	status,0,c
 26216  01161E  376D               	rlcf	___fldiv@rem& (0+255),f,b
 26217  011620  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 26218  011622  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 26219  011624  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 26220  011626  90D8               	bcf	status,0,c
 26221  011628  3760               	rlcf	___fldiv@b& (0+255),f,b
 26222  01162A  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26223  01162C  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26224  01162E  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26225                           
 26226                           ; BSR set to: 0
 26227  011630  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26228                           
 26229                           ; BSR set to: 0
 26230  011632  8160               	bsf	___fldiv@b& (0+255),0,b
 26231                           
 26232                           ; BSR set to: 0
 26233  011634  90D8               	bcf	status,0,c
 26234  011636  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26235  011638  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26236  01163A  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26237  01163C  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26238  01163E                     l2820:
 26239                           
 26240                           ; BSR set to: 0
 26241                           
 26242                           ; BSR set to: 0
 26243  01163E  5164               	movf	___fldiv@a& (0+255),w,b
 26244  011640  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 26245  011642  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26246  011644  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 26247  011646  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26248  011648  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 26249  01164A  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26250  01164C  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 26251  01164E  A0D8               	btfss	status,0,c
 26252  011650  D009               	goto	l2822
 26253                           
 26254                           ; BSR set to: 0
 26255  011652  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 26256                           
 26257                           ; BSR set to: 0
 26258  011654  5164               	movf	___fldiv@a& (0+255),w,b
 26259  011656  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 26260  011658  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 26261  01165A  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 26262  01165C  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 26263  01165E  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 26264  011660  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 26265  011662  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 26266  011664                     l2822:
 26267                           
 26268                           ; BSR set to: 0
 26269                           
 26270                           ; BSR set to: 0
 26271  011664  2B78               	incf	___fldiv@aexp& (0+255),f,b
 26272  011666                     l2818:
 26273                           
 26274                           ; BSR set to: 0
 26275  011666  0E19               	movlw	25
 26276  011668  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 26277  01166A  D7D5               	goto	l2819
 26278                           
 26279                           ; BSR set to: 0
 26280                           
 26281                           ; BSR set to: 0
 26282  01166C  516D               	movf	___fldiv@rem& (0+255),w,b
 26283  01166E  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 26284  011670  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 26285  011672  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 26286  011674  B4D8               	btfsc	status,2,c
 26287  011676  D011               	goto	l2825
 26288                           
 26289                           ; BSR set to: 0
 26290  011678  8173               	bsf	___fldiv@grs& (0+255),0,b
 26291                           
 26292                           ; BSR set to: 0
 26293  01167A  D00F               	goto	l2825
 26294  01167C                     
 26295                           ; BSR set to: 0
 26296                           
 26297                           ; BSR set to: 0
 26298  01167C  90D8               	bcf	status,0,c
 26299  01167E  3760               	rlcf	___fldiv@b& (0+255),f,b
 26300  011680  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 26301  011682  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 26302  011684  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 26303                           
 26304                           ; BSR set to: 0
 26305  011686  BF76               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 26306                           
 26307                           ; BSR set to: 0
 26308  011688  8160               	bsf	___fldiv@b& (0+255),0,b
 26309                           
 26310                           ; BSR set to: 0
 26311  01168A  90D8               	bcf	status,0,c
 26312  01168C  3773               	rlcf	___fldiv@grs& (0+255),f,b
 26313  01168E  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 26314  011690  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 26315  011692  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 26316  011694  0771               	decf	___fldiv@new_exp& (0+255),f,b
 26317  011696  A0D8               	btfss	status,0,c
 26318  011698  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 26319  01169A                     l2825:
 26320                           
 26321                           ; BSR set to: 0
 26322                           
 26323                           ; BSR set to: 0
 26324  01169A  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 26325  01169C  D7EF               	goto	l2826
 26326                           
 26327                           ; BSR set to: 0
 26328                           
 26329                           ; BSR set to: 0
 26330  01169E  0E00               	movlw	0
 26331  0116A0  6F78               	movwf	___fldiv@aexp& (0+255),b
 26332                           
 26333                           ; BSR set to: 0
 26334  0116A2  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 26335  0116A4  D016               	goto	l2832
 26336                           
 26337                           ; BSR set to: 0
 26338  0116A6  0EFF               	movlw	255
 26339  0116A8  1573               	andwf	___fldiv@grs& (0+255),w,b
 26340  0116AA  6F68               	movwf	??___fldiv& (0+255),b
 26341  0116AC  0EFF               	movlw	255
 26342  0116AE  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 26343  0116B0  6F69               	movwf	(??___fldiv+1)& (0+255),b
 26344  0116B2  0EFF               	movlw	255
 26345  0116B4  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 26346  0116B6  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 26347  0116B8  0E7F               	movlw	127
 26348  0116BA  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 26349  0116BC  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 26350  0116BE  5168               	movf	??___fldiv& (0+255),w,b
 26351  0116C0  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 26352  0116C2  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 26353  0116C4  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 26354  0116C6  A4D8               	btfss	status,2,c
 26355  0116C8  D002               	goto	u10940
 26356                           
 26357                           ; BSR set to: 0
 26358                           
 26359                           ; BSR set to: 0
 26360  0116CA  A160               	btfss	___fldiv@b& (0+255),0,b
 26361  0116CC  D002               	goto	l2832
 26362  0116CE                     u10940:
 26363                           
 26364                           ; BSR set to: 0
 26365  0116CE  0E01               	movlw	1
 26366  0116D0  6F78               	movwf	___fldiv@aexp& (0+255),b
 26367  0116D2                     l2832:
 26368                           
 26369                           ; BSR set to: 0
 26370                           
 26371                           ; BSR set to: 0
 26372                           
 26373                           ; BSR set to: 0
 26374  0116D2  5178               	movf	___fldiv@aexp& (0+255),w,b
 26375  0116D4  B4D8               	btfsc	status,2,c
 26376  0116D6  D01F               	goto	l2834
 26377                           
 26378                           ; BSR set to: 0
 26379  0116D8  0E01               	movlw	1
 26380  0116DA  2760               	addwf	___fldiv@b& (0+255),f,b
 26381  0116DC  0E00               	movlw	0
 26382  0116DE  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 26383  0116E0  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 26384  0116E2  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 26385                           
 26386                           ; BSR set to: 0
 26387  0116E4  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 26388  0116E6  D017               	goto	l2834
 26389                           
 26390                           ; BSR set to: 0
 26391  0116E8  C060  F068         	movff	___fldiv@b,??___fldiv
 26392  0116EC  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 26393  0116F0  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 26394  0116F4  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 26395  0116F8  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 26396  0116FA  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 26397  0116FC  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 26398  0116FE  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 26399  011700  3368               	rrcf	??___fldiv& (0+255),f,b
 26400  011702  C068  F060         	movff	??___fldiv,___fldiv@b
 26401  011706  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 26402  01170A  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 26403  01170E  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 26404                           
 26405                           ; BSR set to: 0
 26406  011712  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 26407  011714  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 26408  011716                     l2834:
 26409                           
 26410                           ; BSR set to: 0
 26411                           
 26412                           ; BSR set to: 0
 26413                           
 26414                           ; BSR set to: 0
 26415  011716  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26416  011718  D010               	goto	l2835
 26417  01171A  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26418  01171C  E103               	bnz	u10970
 26419  01171E  2971               	incf	___fldiv@new_exp& (0+255),w,b
 26420  011720  A0D8               	btfss	status,0,c
 26421  011722  D00B               	goto	l2835
 26422  011724                     u10970:
 26423                           
 26424                           ; BSR set to: 0
 26425  011724  0E00               	movlw	0
 26426  011726  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26427  011728  6971               	setf	___fldiv@new_exp& (0+255),b
 26428  01172A  0E00               	movlw	0
 26429  01172C  6F60               	movwf	___fldiv@b& (0+255),b
 26430  01172E  0E00               	movlw	0
 26431  011730  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26432  011732  0E00               	movlw	0
 26433  011734  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26434  011736  0E00               	movlw	0
 26435  011738  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26436  01173A                     l2835:
 26437                           
 26438                           ; BSR set to: 0
 26439                           
 26440                           ; BSR set to: 0
 26441  01173A  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 26442  01173C  D005               	goto	u10980
 26443  01173E  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 26444  011740  E111               	bnz	l13680
 26445  011742  0571               	decf	___fldiv@new_exp& (0+255),w,b
 26446  011744  B0D8               	btfsc	status,0,c
 26447  011746  D00E               	goto	l2836
 26448  011748                     u10980:
 26449                           
 26450                           ; BSR set to: 0
 26451  011748  0E00               	movlw	0
 26452  01174A  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 26453  01174C  0E00               	movlw	0
 26454  01174E  6F71               	movwf	___fldiv@new_exp& (0+255),b
 26455  011750  0E00               	movlw	0
 26456  011752  6F60               	movwf	___fldiv@b& (0+255),b
 26457  011754  0E00               	movlw	0
 26458  011756  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 26459  011758  0E00               	movlw	0
 26460  01175A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 26461  01175C  0E00               	movlw	0
 26462  01175E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26463  011760  0E00               	movlw	0
 26464  011762  6F6C               	movwf	___fldiv@sign& (0+255),b
 26465  011764                     l2836:
 26466  011764                     l13680:
 26467                           
 26468                           ; BSR set to: 0
 26469  011764  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 26470                           
 26471                           ; BSR set to: 0
 26472  011768  A177               	btfss	___fldiv@bexp& (0+255),0,b
 26473  01176A  D002               	goto	l2837
 26474                           
 26475                           ; BSR set to: 0
 26476  01176C  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 26477  01176E  D001               	goto	l2838
 26478  011770                     l2837:
 26479                           
 26480                           ; BSR set to: 0
 26481                           
 26482                           ; BSR set to: 0
 26483  011770  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 26484  011772                     l2838:
 26485                           
 26486                           ; BSR set to: 0
 26487                           
 26488                           ; BSR set to: 0
 26489  011772  90D8               	bcf	status,0,c
 26490  011774  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 26491  011776  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 26492                           
 26493                           ; BSR set to: 0
 26494  011778  516C               	movf	___fldiv@sign& (0+255),w,b
 26495  01177A  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 26496                           
 26497                           ; BSR set to: 0
 26498  01177C  C060  F060         	movff	___fldiv@b,?___fldiv
 26499  011780  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 26500  011784  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 26501  011788  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 26502  01178C  0012               	return	
 26503  01178E                     __end_of___fldiv:
 26504                           	opt stack 0
 26505                           tosu	equ	0xFFF
 26506                           tosh	equ	0xFFE
 26507                           tosl	equ	0xFFD
 26508                           pclath	equ	0xFFA
 26509                           tblptru	equ	0xFF8
 26510                           tblptrh	equ	0xFF7
 26511                           tblptrl	equ	0xFF6
 26512                           tablat	equ	0xFF5
 26513                           prodh	equ	0xFF4
 26514                           prodl	equ	0xFF3
 26515                           intcon	equ	0xFF2
 26516                           indf0	equ	0xFEF
 26517                           postinc0	equ	0xFEE
 26518                           fsr0h	equ	0xFEA
 26519                           fsr0l	equ	0xFE9
 26520                           wreg	equ	0xFE8
 26521                           indf1	equ	0xFE7
 26522                           postdec1	equ	0xFE5
 26523                           fsr1h	equ	0xFE2
 26524                           fsr1l	equ	0xFE1
 26525                           indf2	equ	0xFDF
 26526                           postinc2	equ	0xFDE
 26527                           postdec2	equ	0xFDD
 26528                           plusw2	equ	0xFDB
 26529                           fsr2h	equ	0xFDA
 26530                           fsr2l	equ	0xFD9
 26531                           status	equ	0xFD8
 26532                           
 26533 ;; *************** function ___wmul *****************
 26534 ;; Defined at:
 26535 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 26536 ;; Parameters:    Size  Location     Type
 26537 ;;  multiplier      2    0[BANK0 ] unsigned int 
 26538 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 26539 ;; Auto vars:     Size  Location     Type
 26540 ;;  product         2    4[BANK0 ] unsigned int 
 26541 ;; Return value:  Size  Location     Type
 26542 ;;                  2    0[BANK0 ] unsigned int 
 26543 ;; Registers used:
 26544 ;;		wreg, status,2, status,0, prodl, prodh
 26545 ;; Tracked objects:
 26546 ;;		On entry : 0/0
 26547 ;;		On exit  : 0/0
 26548 ;;		Unchanged: 0/0
 26549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26550 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26553 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26554 ;;Total ram usage:        6 bytes
 26555 ;; Hardware stack levels used:    1
 26556 ;; Hardware stack levels required when called:    7
 26557 ;; This function calls:
 26558 ;;		Nothing
 26559 ;; This function is called by:
 26560 ;;		_LCD_DrawField
 26561 ;;		_ADCAverage
 26562 ;; This function uses a non-reentrant model
 26563 ;;
 26564                           
 26565                           	psect	text138
 26566  015C94                     __ptext138:
 26567                           	opt stack 0
 26568  015C94                     ___wmul:
 26569                           	opt stack 20
 26570                           
 26571                           ; BSR set to: 0
 26572                           ;incstack = 0
 26573  015C94  0100               	movlb	0	; () banked
 26574  015C96  5160               	movf	___wmul@multiplier& (0+255),w,b
 26575  015C98  0362               	mulwf	___wmul@multiplicand& (0+255),b
 26576  015C9A  CFF3 F064          	movff	prodl,___wmul@product
 26577  015C9E  CFF4 F065          	movff	prodh,___wmul@product+1
 26578  015CA2  5160               	movf	___wmul@multiplier& (0+255),w,b
 26579  015CA4  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 26580  015CA6  50F3               	movf	prodl,w,c
 26581  015CA8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 26582  015CAA  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 26583  015CAC  0362               	mulwf	___wmul@multiplicand& (0+255),b
 26584  015CAE  50F3               	movf	prodl,w,c
 26585  015CB0  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 26586                           
 26587                           ; BSR set to: 0
 26588  015CB2  C064  F060         	movff	___wmul@product,?___wmul
 26589  015CB6  C065  F061         	movff	___wmul@product+1,?___wmul+1
 26590  015CBA  0012               	return	
 26591  015CBC                     __end_of___wmul:
 26592                           	opt stack 0
 26593                           tosu	equ	0xFFF
 26594                           tosh	equ	0xFFE
 26595                           tosl	equ	0xFFD
 26596                           pclath	equ	0xFFA
 26597                           tblptru	equ	0xFF8
 26598                           tblptrh	equ	0xFF7
 26599                           tblptrl	equ	0xFF6
 26600                           tablat	equ	0xFF5
 26601                           prodh	equ	0xFF4
 26602                           prodl	equ	0xFF3
 26603                           intcon	equ	0xFF2
 26604                           indf0	equ	0xFEF
 26605                           postinc0	equ	0xFEE
 26606                           fsr0h	equ	0xFEA
 26607                           fsr0l	equ	0xFE9
 26608                           wreg	equ	0xFE8
 26609                           indf1	equ	0xFE7
 26610                           postdec1	equ	0xFE5
 26611                           fsr1h	equ	0xFE2
 26612                           fsr1l	equ	0xFE1
 26613                           indf2	equ	0xFDF
 26614                           postinc2	equ	0xFDE
 26615                           postdec2	equ	0xFDD
 26616                           plusw2	equ	0xFDB
 26617                           fsr2h	equ	0xFDA
 26618                           fsr2l	equ	0xFD9
 26619                           status	equ	0xFD8
 26620                           
 26621 ;; *************** function ___awdiv *****************
 26622 ;; Defined at:
 26623 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 26624 ;; Parameters:    Size  Location     Type
 26625 ;;  dividend        2    0[BANK0 ] int 
 26626 ;;  divisor         2    2[BANK0 ] int 
 26627 ;; Auto vars:     Size  Location     Type
 26628 ;;  quotient        2    6[BANK0 ] int 
 26629 ;;  sign            1    5[BANK0 ] unsigned char 
 26630 ;;  counter         1    4[BANK0 ] unsigned char 
 26631 ;; Return value:  Size  Location     Type
 26632 ;;                  2    0[BANK0 ] int 
 26633 ;; Registers used:
 26634 ;;		wreg, status,2, status,0
 26635 ;; Tracked objects:
 26636 ;;		On entry : 0/0
 26637 ;;		On exit  : 0/0
 26638 ;;		Unchanged: 0/0
 26639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26640 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26641 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26643 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26644 ;;Total ram usage:        8 bytes
 26645 ;; Hardware stack levels used:    1
 26646 ;; Hardware stack levels required when called:    7
 26647 ;; This function calls:
 26648 ;;		Nothing
 26649 ;; This function is called by:
 26650 ;;		_Console_Tab
 26651 ;;		_ADCAverage
 26652 ;; This function uses a non-reentrant model
 26653 ;;
 26654                           
 26655                           	psect	text139
 26656  01488E                     __ptext139:
 26657                           	opt stack 0
 26658  01488E                     ___awdiv:
 26659                           	opt stack 19
 26660                           
 26661                           ; BSR set to: 0
 26662                           ;incstack = 0
 26663  01488E  0E00               	movlw	0
 26664  014890  0100               	movlb	0	; () banked
 26665  014892  6F65               	movwf	___awdiv@sign& (0+255),b
 26666                           
 26667                           ; BSR set to: 0
 26668  014894  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26669  014896  D006               	goto	l2475
 26670                           
 26671                           ; BSR set to: 0
 26672  014898  6D62               	negf	___awdiv@divisor& (0+255),b
 26673  01489A  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
 26674  01489C  B0D8               	btfsc	status,0,c
 26675  01489E  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
 26676                           
 26677                           ; BSR set to: 0
 26678  0148A0  0E01               	movlw	1
 26679  0148A2  6F65               	movwf	___awdiv@sign& (0+255),b
 26680  0148A4                     l2475:
 26681                           
 26682                           ; BSR set to: 0
 26683                           
 26684                           ; BSR set to: 0
 26685  0148A4  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 26686  0148A6  D006               	goto	l2476
 26687                           
 26688                           ; BSR set to: 0
 26689  0148A8  6D60               	negf	___awdiv@dividend& (0+255),b
 26690  0148AA  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
 26691  0148AC  B0D8               	btfsc	status,0,c
 26692  0148AE  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
 26693                           
 26694                           ; BSR set to: 0
 26695  0148B0  0E01               	movlw	1
 26696  0148B2  1B65               	xorwf	___awdiv@sign& (0+255),f,b
 26697  0148B4                     l2476:
 26698                           
 26699                           ; BSR set to: 0
 26700                           
 26701                           ; BSR set to: 0
 26702  0148B4  0E00               	movlw	0
 26703  0148B6  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
 26704  0148B8  0E00               	movlw	0
 26705  0148BA  6F66               	movwf	___awdiv@quotient& (0+255),b
 26706                           
 26707                           ; BSR set to: 0
 26708  0148BC  5162               	movf	___awdiv@divisor& (0+255),w,b
 26709  0148BE  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 26710  0148C0  B4D8               	btfsc	status,2,c
 26711  0148C2  D01C               	goto	l2483
 26712                           
 26713                           ; BSR set to: 0
 26714  0148C4  0E01               	movlw	1
 26715  0148C6  6F64               	movwf	___awdiv@counter& (0+255),b
 26716  0148C8  D004               	goto	l2478
 26717  0148CA                     
 26718                           ; BSR set to: 0
 26719                           
 26720                           ; BSR set to: 0
 26721  0148CA  90D8               	bcf	status,0,c
 26722  0148CC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
 26723  0148CE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 26724  0148D0  2B64               	incf	___awdiv@counter& (0+255),f,b
 26725  0148D2                     l2478:
 26726                           
 26727                           ; BSR set to: 0
 26728                           
 26729                           ; BSR set to: 0
 26730  0148D2  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26731  0148D4  D7FA               	goto	l2479
 26732  0148D6                     u10320:
 26733                           
 26734                           ; BSR set to: 0
 26735                           
 26736                           ; BSR set to: 0
 26737                           
 26738                           ; BSR set to: 0
 26739  0148D6  90D8               	bcf	status,0,c
 26740  0148D8  3766               	rlcf	___awdiv@quotient& (0+255),f,b
 26741  0148DA  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 26742                           
 26743                           ; BSR set to: 0
 26744  0148DC  5162               	movf	___awdiv@divisor& (0+255),w,b
 26745  0148DE  5D60               	subwf	___awdiv@dividend& (0+255),w,b
 26746  0148E0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26747  0148E2  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 26748  0148E4  A0D8               	btfss	status,0,c
 26749  0148E6  D005               	goto	l2482
 26750                           
 26751                           ; BSR set to: 0
 26752  0148E8  5162               	movf	___awdiv@divisor& (0+255),w,b
 26753  0148EA  5F60               	subwf	___awdiv@dividend& (0+255),f,b
 26754  0148EC  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26755  0148EE  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 26756                           
 26757                           ; BSR set to: 0
 26758  0148F0  8166               	bsf	___awdiv@quotient& (0+255),0,b
 26759  0148F2                     l2482:
 26760                           
 26761                           ; BSR set to: 0
 26762                           
 26763                           ; BSR set to: 0
 26764  0148F2  90D8               	bcf	status,0,c
 26765  0148F4  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 26766  0148F6  3362               	rrcf	___awdiv@divisor& (0+255),f,b
 26767                           
 26768                           ; BSR set to: 0
 26769  0148F8  2F64               	decfsz	___awdiv@counter& (0+255),f,b
 26770  0148FA  D7ED               	goto	u10320
 26771  0148FC                     l2483:
 26772                           
 26773                           ; BSR set to: 0
 26774                           
 26775                           ; BSR set to: 0
 26776                           
 26777                           ; BSR set to: 0
 26778  0148FC  5165               	movf	___awdiv@sign& (0+255),w,b
 26779  0148FE  B4D8               	btfsc	status,2,c
 26780  014900  D004               	goto	l2484
 26781                           
 26782                           ; BSR set to: 0
 26783  014902  6D66               	negf	___awdiv@quotient& (0+255),b
 26784  014904  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
 26785  014906  B0D8               	btfsc	status,0,c
 26786  014908  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
 26787  01490A                     l2484:
 26788                           
 26789                           ; BSR set to: 0
 26790                           
 26791                           ; BSR set to: 0
 26792  01490A  C066  F060         	movff	___awdiv@quotient,?___awdiv
 26793  01490E  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
 26794  014912  0012               	return	
 26795  014914                     __end_of___awdiv:
 26796                           	opt stack 0
 26797                           tosu	equ	0xFFF
 26798                           tosh	equ	0xFFE
 26799                           tosl	equ	0xFFD
 26800                           pclath	equ	0xFFA
 26801                           tblptru	equ	0xFF8
 26802                           tblptrh	equ	0xFF7
 26803                           tblptrl	equ	0xFF6
 26804                           tablat	equ	0xFF5
 26805                           prodh	equ	0xFF4
 26806                           prodl	equ	0xFF3
 26807                           intcon	equ	0xFF2
 26808                           indf0	equ	0xFEF
 26809                           postinc0	equ	0xFEE
 26810                           fsr0h	equ	0xFEA
 26811                           fsr0l	equ	0xFE9
 26812                           wreg	equ	0xFE8
 26813                           indf1	equ	0xFE7
 26814                           postdec1	equ	0xFE5
 26815                           fsr1h	equ	0xFE2
 26816                           fsr1l	equ	0xFE1
 26817                           indf2	equ	0xFDF
 26818                           postinc2	equ	0xFDE
 26819                           postdec2	equ	0xFDD
 26820                           plusw2	equ	0xFDB
 26821                           fsr2h	equ	0xFDA
 26822                           fsr2l	equ	0xFD9
 26823                           status	equ	0xFD8
 26824                           
 26825 ;; *************** function _HMI_SetNumber *****************
 26826 ;; Defined at:
 26827 ;;		line 221 in file "HMI.c"
 26828 ;; Parameters:    Size  Location     Type
 26829 ;;  pInput          2   22[BANK0 ] int 
 26830 ;; Auto vars:     Size  Location     Type
 26831 ;;		None
 26832 ;; Return value:  Size  Location     Type
 26833 ;;                  1    wreg      void 
 26834 ;; Registers used:
 26835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26836 ;; Tracked objects:
 26837 ;;		On entry : 0/0
 26838 ;;		On exit  : 0/0
 26839 ;;		Unchanged: 0/0
 26840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26841 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26845 ;;Total ram usage:        2 bytes
 26846 ;; Hardware stack levels used:    1
 26847 ;; Hardware stack levels required when called:    9
 26848 ;; This function calls:
 26849 ;;		_HMI_SetSegments
 26850 ;;		_itos
 26851 ;; This function is called by:
 26852 ;;		_Event_TestButton
 26853 ;;		_ADCAverage
 26854 ;;		_main
 26855 ;;		_Event_HMI_UpButton
 26856 ;;		_Event_HMI_DownButton
 26857 ;; This function uses a non-reentrant model
 26858 ;;
 26859                           
 26860                           	psect	text140
 26861  015D32                     __ptext140:
 26862                           	opt stack 0
 26863  015D32                     _HMI_SetNumber:
 26864                           	opt stack 19
 26865                           
 26866                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26867                           
 26868                           ; BSR set to: 0
 26869                           ;incstack = 0
 26870  015D32  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 26871  015D36  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26872  015D3A  0E46               	movlw	low _HMIBoard
 26873  015D3C  0100               	movlb	0	; () banked
 26874  015D3E  6F6E               	movwf	itos@destination& (0+255),b
 26875  015D40  0E01               	movlw	high _HMIBoard
 26876  015D42  6F6F               	movwf	(itos@destination+1)& (0+255),b
 26877  015D44  EC62  F09F         	call	_itos	;wreg free
 26878                           
 26879                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26880  015D48  0E46               	movlw	low _HMIBoard
 26881  015D4A  0100               	movlb	0	; () banked
 26882  015D4C  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 26883  015D4E  0E01               	movlw	high _HMIBoard
 26884  015D50  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26885  015D52  ECBF  F0A1         	call	_HMI_SetSegments	;wreg free
 26886  015D56  0012               	return		;funcret
 26887  015D58                     __end_of_HMI_SetNumber:
 26888                           	opt stack 0
 26889                           tosu	equ	0xFFF
 26890                           tosh	equ	0xFFE
 26891                           tosl	equ	0xFFD
 26892                           pclath	equ	0xFFA
 26893                           tblptru	equ	0xFF8
 26894                           tblptrh	equ	0xFF7
 26895                           tblptrl	equ	0xFF6
 26896                           tablat	equ	0xFF5
 26897                           prodh	equ	0xFF4
 26898                           prodl	equ	0xFF3
 26899                           intcon	equ	0xFF2
 26900                           indf0	equ	0xFEF
 26901                           postinc0	equ	0xFEE
 26902                           fsr0h	equ	0xFEA
 26903                           fsr0l	equ	0xFE9
 26904                           wreg	equ	0xFE8
 26905                           indf1	equ	0xFE7
 26906                           postdec1	equ	0xFE5
 26907                           fsr1h	equ	0xFE2
 26908                           fsr1l	equ	0xFE1
 26909                           indf2	equ	0xFDF
 26910                           postinc2	equ	0xFDE
 26911                           postdec2	equ	0xFDD
 26912                           plusw2	equ	0xFDB
 26913                           fsr2h	equ	0xFDA
 26914                           fsr2l	equ	0xFD9
 26915                           status	equ	0xFD8
 26916                           
 26917 ;; *************** function _itos *****************
 26918 ;; Defined at:
 26919 ;;		line 369 in file "Library/Types.c"
 26920 ;; Parameters:    Size  Location     Type
 26921 ;;  input           2   12[BANK0 ] unsigned short 
 26922 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26923 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26924 ;; Auto vars:     Size  Location     Type
 26925 ;;  Out             2   20[BANK0 ] unsigned short 
 26926 ;;  Length          2   18[BANK0 ] unsigned short 
 26927 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26928 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26929 ;; Return value:  Size  Location     Type
 26930 ;;                  1    wreg      void 
 26931 ;; Registers used:
 26932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26933 ;; Tracked objects:
 26934 ;;		On entry : 0/0
 26935 ;;		On exit  : 0/0
 26936 ;;		Unchanged: 0/0
 26937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26939 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26941 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26942 ;;Total ram usage:       10 bytes
 26943 ;; Hardware stack levels used:    1
 26944 ;; Hardware stack levels required when called:    8
 26945 ;; This function calls:
 26946 ;;		___lwdiv
 26947 ;;		___lwmod
 26948 ;;		_reverse
 26949 ;; This function is called by:
 26950 ;;		_HMI_SetNumber
 26951 ;; This function uses a non-reentrant model
 26952 ;;
 26953                           
 26954                           	psect	text141
 26955  013EC4                     __ptext141:
 26956                           	opt stack 0
 26957  013EC4                     _itos:
 26958                           	opt stack 19
 26959                           
 26960                           ;Types.c: 371: UINT16 Out = input;
 26961                           
 26962                           ;incstack = 0
 26963  013EC4  C06C  F074         	movff	itos@input,itos@Out
 26964  013EC8  C06D  F075         	movff	itos@input+1,itos@Out+1
 26965                           
 26966                           ;Types.c: 372: UINT16 Length = 0;
 26967  013ECC  0E00               	movlw	0
 26968  013ECE  0100               	movlb	0	; () banked
 26969  013ED0  6F73               	movwf	(itos@Length+1)& (0+255),b
 26970  013ED2  0E00               	movlw	0
 26971  013ED4  6F72               	movwf	itos@Length& (0+255),b
 26972                           
 26973                           ; BSR set to: 0
 26974                           ;Types.c: 373: char *Data = destination;
 26975  013ED6  C06E  F070         	movff	itos@destination,itos@Data
 26976  013EDA  C06F  F071         	movff	itos@destination+1,itos@Data+1
 26977                           
 26978                           ; BSR set to: 0
 26979                           ;Types.c: 374: if(Out == 0)
 26980  013EDE  5174               	movf	itos@Out& (0+255),w,b
 26981  013EE0  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 26982  013EE2  A4D8               	btfss	status,2,c
 26983  013EE4  D030               	goto	l929
 26984                           
 26985                           ; BSR set to: 0
 26986                           ;Types.c: 375: {
 26987                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26988  013EE6  C070  FFD9         	movff	itos@Data,fsr2l
 26989  013EEA  C071  FFDA         	movff	itos@Data+1,fsr2h
 26990  013EEE  0E30               	movlw	48
 26991  013EF0  6EDF               	movwf	indf2,c
 26992                           
 26993                           ; BSR set to: 0
 26994                           ;Types.c: 377: Length = 1;
 26995  013EF2  0E00               	movlw	0
 26996  013EF4  6F73               	movwf	(itos@Length+1)& (0+255),b
 26997  013EF6  0E01               	movlw	1
 26998  013EF8  6F72               	movwf	itos@Length& (0+255),b
 26999                           
 27000                           ;Types.c: 378: }
 27001  013EFA  D039               	goto	l928
 27002  013EFC                     
 27003                           ; BSR set to: 0
 27004                           ;Types.c: 382: {
 27005                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 27006                           
 27007                           ; BSR set to: 0
 27008  013EFC  C074  F067         	movff	itos@Out,___lwmod@dividend
 27009  013F00  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 27010  013F04  0E00               	movlw	0
 27011  013F06  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 27012  013F08  0E0A               	movlw	10
 27013  013F0A  6F69               	movwf	___lwmod@divisor& (0+255),b
 27014  013F0C  ECA0  F0AB         	call	___lwmod	;wreg free
 27015  013F10  0100               	movlb	0	; () banked
 27016  013F12  5167               	movf	?___lwmod& (0+255),w,b
 27017  013F14  0F30               	addlw	48
 27018  013F16  C070  FFD9         	movff	itos@Data,fsr2l
 27019  013F1A  C071  FFDA         	movff	itos@Data+1,fsr2h
 27020  013F1E  6EDF               	movwf	indf2,c
 27021                           
 27022                           ; BSR set to: 0
 27023                           ;Types.c: 384: Out /= 10;
 27024  013F20  C074  F060         	movff	itos@Out,___lwdiv@dividend
 27025  013F24  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 27026  013F28  0E00               	movlw	0
 27027  013F2A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 27028  013F2C  0E0A               	movlw	10
 27029  013F2E  6F62               	movwf	___lwdiv@divisor& (0+255),b
 27030  013F30  EC8A  F0A9         	call	___lwdiv	;wreg free
 27031  013F34  C060  F074         	movff	?___lwdiv,itos@Out
 27032  013F38  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 27033                           
 27034                           ;Types.c: 385: Length ++;
 27035  013F3C  0100               	movlb	0	; () banked
 27036  013F3E  4B72               	infsnz	itos@Length& (0+255),f,b
 27037  013F40  2B73               	incf	(itos@Length+1)& (0+255),f,b
 27038                           
 27039                           ; BSR set to: 0
 27040                           ;Types.c: 386: Data++;
 27041  013F42  4B70               	infsnz	itos@Data& (0+255),f,b
 27042  013F44  2B71               	incf	(itos@Data+1)& (0+255),f,b
 27043  013F46                     l929:
 27044                           
 27045                           ; BSR set to: 0
 27046                           
 27047                           ; BSR set to: 0
 27048  013F46  5174               	movf	itos@Out& (0+255),w,b
 27049  013F48  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 27050  013F4A  B4D8               	btfsc	status,2,c
 27051  013F4C  D006               	goto	u10690
 27052                           
 27053                           ; BSR set to: 0
 27054  013F4E  5173               	movf	(itos@Length+1)& (0+255),w,b
 27055  013F50  E104               	bnz	l13494
 27056  013F52  0E06               	movlw	6
 27057  013F54  5D72               	subwf	itos@Length& (0+255),w,b
 27058  013F56  A0D8               	btfss	status,0,c
 27059  013F58  D7D1               	goto	l930
 27060  013F5A                     u10690:
 27061  013F5A                     l13494:
 27062                           
 27063                           ; BSR set to: 0
 27064                           ;Types.c: 387: }
 27065                           ;Types.c: 388: reverse(destination, Length);
 27066  013F5A  C06E  F060         	movff	itos@destination,reverse@input
 27067  013F5E  C06F  F061         	movff	itos@destination+1,reverse@input+1
 27068  013F62  C072  F062         	movff	itos@Length,reverse@length
 27069  013F66  C073  F063         	movff	itos@Length+1,reverse@length+1
 27070  013F6A  EC60  F0A9         	call	_reverse	;wreg free
 27071  013F6E                     l928:
 27072                           
 27073                           ;Types.c: 389: }
 27074                           ;Types.c: 390: destination[Length] = '\0';
 27075  013F6E  0100               	movlb	0	; () banked
 27076  013F70  5172               	movf	itos@Length& (0+255),w,b
 27077  013F72  256E               	addwf	itos@destination& (0+255),w,b
 27078  013F74  6ED9               	movwf	fsr2l,c
 27079  013F76  5173               	movf	(itos@Length+1)& (0+255),w,b
 27080  013F78  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 27081  013F7A  6EDA               	movwf	fsr2h,c
 27082  013F7C  0E00               	movlw	0
 27083  013F7E  6EDF               	movwf	indf2,c
 27084                           
 27085                           ; BSR set to: 0
 27086  013F80  0012               	return		;funcret
 27087  013F82                     __end_of_itos:
 27088                           	opt stack 0
 27089                           tosu	equ	0xFFF
 27090                           tosh	equ	0xFFE
 27091                           tosl	equ	0xFFD
 27092                           pclath	equ	0xFFA
 27093                           tblptru	equ	0xFF8
 27094                           tblptrh	equ	0xFF7
 27095                           tblptrl	equ	0xFF6
 27096                           tablat	equ	0xFF5
 27097                           prodh	equ	0xFF4
 27098                           prodl	equ	0xFF3
 27099                           intcon	equ	0xFF2
 27100                           indf0	equ	0xFEF
 27101                           postinc0	equ	0xFEE
 27102                           fsr0h	equ	0xFEA
 27103                           fsr0l	equ	0xFE9
 27104                           wreg	equ	0xFE8
 27105                           indf1	equ	0xFE7
 27106                           postdec1	equ	0xFE5
 27107                           fsr1h	equ	0xFE2
 27108                           fsr1l	equ	0xFE1
 27109                           indf2	equ	0xFDF
 27110                           postinc2	equ	0xFDE
 27111                           postdec2	equ	0xFDD
 27112                           plusw2	equ	0xFDB
 27113                           fsr2h	equ	0xFDA
 27114                           fsr2l	equ	0xFD9
 27115                           status	equ	0xFD8
 27116                           
 27117 ;; *************** function _reverse *****************
 27118 ;; Defined at:
 27119 ;;		line 357 in file "Library/Types.c"
 27120 ;; Parameters:    Size  Location     Type
 27121 ;;  input           2    0[BANK0 ] PTR unsigned char 
 27122 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27123 ;;  length          2    2[BANK0 ] unsigned short 
 27124 ;; Auto vars:     Size  Location     Type
 27125 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 27126 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27127 ;;  tempVar         1    4[BANK0 ] unsigned char 
 27128 ;; Return value:  Size  Location     Type
 27129 ;;                  1    wreg      void 
 27130 ;; Registers used:
 27131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27132 ;; Tracked objects:
 27133 ;;		On entry : 0/0
 27134 ;;		On exit  : 0/0
 27135 ;;		Unchanged: 0/0
 27136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27137 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27138 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27140 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27141 ;;Total ram usage:        7 bytes
 27142 ;; Hardware stack levels used:    1
 27143 ;; Hardware stack levels required when called:    7
 27144 ;; This function calls:
 27145 ;;		Nothing
 27146 ;; This function is called by:
 27147 ;;		_itos
 27148 ;; This function uses a non-reentrant model
 27149 ;;
 27150                           
 27151                           	psect	text142
 27152  0152C0                     __ptext142:
 27153                           	opt stack 0
 27154  0152C0                     _reverse:
 27155                           	opt stack 19
 27156                           
 27157                           ;Types.c: 359: char tempVar,
 27158                           ;Types.c: 360: *iterator = input + length;
 27159                           
 27160                           ; BSR set to: 0
 27161                           ;incstack = 0
 27162  0152C0  0100               	movlb	0	; () banked
 27163  0152C2  5162               	movf	reverse@length& (0+255),w,b
 27164  0152C4  2560               	addwf	reverse@input& (0+255),w,b
 27165  0152C6  6F65               	movwf	reverse@iterator& (0+255),b
 27166  0152C8  5163               	movf	(reverse@length+1)& (0+255),w,b
 27167  0152CA  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 27168  0152CC  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 27169                           
 27170                           ;Types.c: 362: while ( --iterator > input )
 27171  0152CE  D018               	goto	l921
 27172  0152D0                     
 27173                           ; BSR set to: 0
 27174                           ;Types.c: 363: {
 27175                           ;Types.c: 364: tempVar = *input;
 27176                           
 27177                           ; BSR set to: 0
 27178  0152D0  C060  FFD9         	movff	reverse@input,fsr2l
 27179  0152D4  C061  FFDA         	movff	reverse@input+1,fsr2h
 27180  0152D8  50DF               	movf	indf2,w,c
 27181  0152DA  6F64               	movwf	reverse@tempVar& (0+255),b
 27182                           
 27183                           ; BSR set to: 0
 27184                           ;Types.c: 365: *input++=*iterator;
 27185  0152DC  C065  FFD9         	movff	reverse@iterator,fsr2l
 27186  0152E0  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27187  0152E4  C060  FFE1         	movff	reverse@input,fsr1l
 27188  0152E8  C061  FFE2         	movff	reverse@input+1,fsr1h
 27189  0152EC  CFDF FFE7          	movff	indf2,indf1
 27190                           
 27191                           ; BSR set to: 0
 27192  0152F0  4B60               	infsnz	reverse@input& (0+255),f,b
 27193  0152F2  2B61               	incf	(reverse@input+1)& (0+255),f,b
 27194                           
 27195                           ; BSR set to: 0
 27196                           ;Types.c: 366: *iterator=tempVar;
 27197  0152F4  C065  FFD9         	movff	reverse@iterator,fsr2l
 27198  0152F8  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 27199  0152FC  C064  FFDF         	movff	reverse@tempVar,indf2
 27200  015300                     l921:
 27201                           
 27202                           ; BSR set to: 0
 27203                           
 27204                           ; BSR set to: 0
 27205  015300  0765               	decf	reverse@iterator& (0+255),f,b
 27206  015302  A0D8               	btfss	status,0,c
 27207  015304  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 27208  015306  5165               	movf	reverse@iterator& (0+255),w,b
 27209  015308  5D60               	subwf	reverse@input& (0+255),w,b
 27210  01530A  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 27211  01530C  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 27212  01530E  B0D8               	btfsc	status,0,c
 27213  015310  0012               	return	
 27214  015312  D7DE               	goto	l922
 27215  015314                     __end_of_reverse:
 27216                           	opt stack 0
 27217                           tosu	equ	0xFFF
 27218                           tosh	equ	0xFFE
 27219                           tosl	equ	0xFFD
 27220                           pclath	equ	0xFFA
 27221                           tblptru	equ	0xFF8
 27222                           tblptrh	equ	0xFF7
 27223                           tblptrl	equ	0xFF6
 27224                           tablat	equ	0xFF5
 27225                           prodh	equ	0xFF4
 27226                           prodl	equ	0xFF3
 27227                           intcon	equ	0xFF2
 27228                           indf0	equ	0xFEF
 27229                           postinc0	equ	0xFEE
 27230                           fsr0h	equ	0xFEA
 27231                           fsr0l	equ	0xFE9
 27232                           wreg	equ	0xFE8
 27233                           indf1	equ	0xFE7
 27234                           postdec1	equ	0xFE5
 27235                           fsr1h	equ	0xFE2
 27236                           fsr1l	equ	0xFE1
 27237                           indf2	equ	0xFDF
 27238                           postinc2	equ	0xFDE
 27239                           postdec2	equ	0xFDD
 27240                           plusw2	equ	0xFDB
 27241                           fsr2h	equ	0xFDA
 27242                           fsr2l	equ	0xFD9
 27243                           status	equ	0xFD8
 27244                           
 27245 ;; *************** function ___lwmod *****************
 27246 ;; Defined at:
 27247 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 27248 ;; Parameters:    Size  Location     Type
 27249 ;;  dividend        2    7[BANK0 ] unsigned int 
 27250 ;;  divisor         2    9[BANK0 ] unsigned int 
 27251 ;; Auto vars:     Size  Location     Type
 27252 ;;  counter         1   11[BANK0 ] unsigned char 
 27253 ;; Return value:  Size  Location     Type
 27254 ;;                  2    7[BANK0 ] unsigned int 
 27255 ;; Registers used:
 27256 ;;		wreg, status,2, status,0
 27257 ;; Tracked objects:
 27258 ;;		On entry : 0/0
 27259 ;;		On exit  : 0/0
 27260 ;;		Unchanged: 0/0
 27261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27262 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27265 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27266 ;;Total ram usage:        5 bytes
 27267 ;; Hardware stack levels used:    1
 27268 ;; Hardware stack levels required when called:    7
 27269 ;; This function calls:
 27270 ;;		Nothing
 27271 ;; This function is called by:
 27272 ;;		_itos
 27273 ;;		_printf
 27274 ;; This function uses a non-reentrant model
 27275 ;;
 27276                           
 27277                           	psect	text143
 27278  015740                     __ptext143:
 27279                           	opt stack 0
 27280  015740                     ___lwmod:
 27281                           	opt stack 22
 27282                           
 27283                           ; BSR set to: 0
 27284                           ;incstack = 0
 27285  015740  0100               	movlb	0	; () banked
 27286  015742  5169               	movf	___lwmod@divisor& (0+255),w,b
 27287  015744  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27288  015746  B4D8               	btfsc	status,2,c
 27289  015748  D018               	goto	l2726
 27290                           
 27291                           ; BSR set to: 0
 27292  01574A  0E01               	movlw	1
 27293  01574C  6F6B               	movwf	___lwmod@counter& (0+255),b
 27294  01574E  D004               	goto	l2721
 27295  015750                     
 27296                           ; BSR set to: 0
 27297                           
 27298                           ; BSR set to: 0
 27299  015750  90D8               	bcf	status,0,c
 27300  015752  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 27301  015754  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27302  015756  2B6B               	incf	___lwmod@counter& (0+255),f,b
 27303  015758                     l2721:
 27304                           
 27305                           ; BSR set to: 0
 27306                           
 27307                           ; BSR set to: 0
 27308  015758  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27309  01575A  D7FA               	goto	l2722
 27310  01575C                     u10510:
 27311                           
 27312                           ; BSR set to: 0
 27313                           
 27314                           ; BSR set to: 0
 27315                           
 27316                           ; BSR set to: 0
 27317  01575C  5169               	movf	___lwmod@divisor& (0+255),w,b
 27318  01575E  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 27319  015760  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27320  015762  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27321  015764  A0D8               	btfss	status,0,c
 27322  015766  D004               	goto	l2725
 27323                           
 27324                           ; BSR set to: 0
 27325  015768  5169               	movf	___lwmod@divisor& (0+255),w,b
 27326  01576A  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 27327  01576C  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27328  01576E  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27329  015770                     l2725:
 27330                           
 27331                           ; BSR set to: 0
 27332                           
 27333                           ; BSR set to: 0
 27334  015770  90D8               	bcf	status,0,c
 27335  015772  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27336  015774  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 27337                           
 27338                           ; BSR set to: 0
 27339  015776  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 27340  015778  D7F1               	goto	u10510
 27341  01577A                     l2726:
 27342                           
 27343                           ; BSR set to: 0
 27344                           
 27345                           ; BSR set to: 0
 27346  01577A  C067  F067         	movff	___lwmod@dividend,?___lwmod
 27347  01577E  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 27348                           
 27349                           ; BSR set to: 0
 27350  015782  0012               	return		;funcret
 27351  015784                     __end_of___lwmod:
 27352                           	opt stack 0
 27353                           tosu	equ	0xFFF
 27354                           tosh	equ	0xFFE
 27355                           tosl	equ	0xFFD
 27356                           pclath	equ	0xFFA
 27357                           tblptru	equ	0xFF8
 27358                           tblptrh	equ	0xFF7
 27359                           tblptrl	equ	0xFF6
 27360                           tablat	equ	0xFF5
 27361                           prodh	equ	0xFF4
 27362                           prodl	equ	0xFF3
 27363                           intcon	equ	0xFF2
 27364                           indf0	equ	0xFEF
 27365                           postinc0	equ	0xFEE
 27366                           fsr0h	equ	0xFEA
 27367                           fsr0l	equ	0xFE9
 27368                           wreg	equ	0xFE8
 27369                           indf1	equ	0xFE7
 27370                           postdec1	equ	0xFE5
 27371                           fsr1h	equ	0xFE2
 27372                           fsr1l	equ	0xFE1
 27373                           indf2	equ	0xFDF
 27374                           postinc2	equ	0xFDE
 27375                           postdec2	equ	0xFDD
 27376                           plusw2	equ	0xFDB
 27377                           fsr2h	equ	0xFDA
 27378                           fsr2l	equ	0xFD9
 27379                           status	equ	0xFD8
 27380                           
 27381 ;; *************** function ___lwdiv *****************
 27382 ;; Defined at:
 27383 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 27384 ;; Parameters:    Size  Location     Type
 27385 ;;  dividend        2    0[BANK0 ] unsigned int 
 27386 ;;  divisor         2    2[BANK0 ] unsigned int 
 27387 ;; Auto vars:     Size  Location     Type
 27388 ;;  quotient        2    5[BANK0 ] unsigned int 
 27389 ;;  counter         1    4[BANK0 ] unsigned char 
 27390 ;; Return value:  Size  Location     Type
 27391 ;;                  2    0[BANK0 ] unsigned int 
 27392 ;; Registers used:
 27393 ;;		wreg, status,2, status,0
 27394 ;; Tracked objects:
 27395 ;;		On entry : 0/0
 27396 ;;		On exit  : 0/0
 27397 ;;		Unchanged: 0/0
 27398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27400 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27402 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27403 ;;Total ram usage:        7 bytes
 27404 ;; Hardware stack levels used:    1
 27405 ;; Hardware stack levels required when called:    7
 27406 ;; This function calls:
 27407 ;;		Nothing
 27408 ;; This function is called by:
 27409 ;;		_itos
 27410 ;;		_printf
 27411 ;; This function uses a non-reentrant model
 27412 ;;
 27413                           
 27414                           	psect	text144
 27415  015314                     __ptext144:
 27416                           	opt stack 0
 27417  015314                     ___lwdiv:
 27418                           	opt stack 22
 27419                           
 27420                           ; BSR set to: 0
 27421                           ;incstack = 0
 27422  015314  0E00               	movlw	0
 27423  015316  0100               	movlb	0	; () banked
 27424  015318  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27425  01531A  0E00               	movlw	0
 27426  01531C  6F65               	movwf	___lwdiv@quotient& (0+255),b
 27427                           
 27428                           ; BSR set to: 0
 27429  01531E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27430  015320  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27431  015322  B4D8               	btfsc	status,2,c
 27432  015324  D01C               	goto	l2716
 27433                           
 27434                           ; BSR set to: 0
 27435  015326  0E01               	movlw	1
 27436  015328  6F64               	movwf	___lwdiv@counter& (0+255),b
 27437  01532A  D004               	goto	l2711
 27438  01532C                     
 27439                           ; BSR set to: 0
 27440                           
 27441                           ; BSR set to: 0
 27442  01532C  90D8               	bcf	status,0,c
 27443  01532E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 27444  015330  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27445  015332  2B64               	incf	___lwdiv@counter& (0+255),f,b
 27446  015334                     l2711:
 27447                           
 27448                           ; BSR set to: 0
 27449                           
 27450                           ; BSR set to: 0
 27451  015334  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27452  015336  D7FA               	goto	l2712
 27453  015338                     u10480:
 27454                           
 27455                           ; BSR set to: 0
 27456                           
 27457                           ; BSR set to: 0
 27458                           
 27459                           ; BSR set to: 0
 27460  015338  90D8               	bcf	status,0,c
 27461  01533A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 27462  01533C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27463                           
 27464                           ; BSR set to: 0
 27465  01533E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27466  015340  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 27467  015342  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27468  015344  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27469  015346  A0D8               	btfss	status,0,c
 27470  015348  D005               	goto	l2715
 27471                           
 27472                           ; BSR set to: 0
 27473  01534A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27474  01534C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 27475  01534E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27476  015350  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27477                           
 27478                           ; BSR set to: 0
 27479  015352  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 27480  015354                     l2715:
 27481                           
 27482                           ; BSR set to: 0
 27483                           
 27484                           ; BSR set to: 0
 27485  015354  90D8               	bcf	status,0,c
 27486  015356  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27487  015358  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 27488                           
 27489                           ; BSR set to: 0
 27490  01535A  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 27491  01535C  D7ED               	goto	u10480
 27492  01535E                     l2716:
 27493                           
 27494                           ; BSR set to: 0
 27495                           
 27496                           ; BSR set to: 0
 27497  01535E  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 27498  015362  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27499                           
 27500                           ; BSR set to: 0
 27501  015366  0012               	return		;funcret
 27502  015368                     __end_of___lwdiv:
 27503                           	opt stack 0
 27504                           tosu	equ	0xFFF
 27505                           tosh	equ	0xFFE
 27506                           tosl	equ	0xFFD
 27507                           pclath	equ	0xFFA
 27508                           tblptru	equ	0xFF8
 27509                           tblptrh	equ	0xFF7
 27510                           tblptrl	equ	0xFF6
 27511                           tablat	equ	0xFF5
 27512                           prodh	equ	0xFF4
 27513                           prodl	equ	0xFF3
 27514                           intcon	equ	0xFF2
 27515                           indf0	equ	0xFEF
 27516                           postinc0	equ	0xFEE
 27517                           fsr0h	equ	0xFEA
 27518                           fsr0l	equ	0xFE9
 27519                           wreg	equ	0xFE8
 27520                           indf1	equ	0xFE7
 27521                           postdec1	equ	0xFE5
 27522                           fsr1h	equ	0xFE2
 27523                           fsr1l	equ	0xFE1
 27524                           indf2	equ	0xFDF
 27525                           postinc2	equ	0xFDE
 27526                           postdec2	equ	0xFDD
 27527                           plusw2	equ	0xFDB
 27528                           fsr2h	equ	0xFDA
 27529                           fsr2l	equ	0xFD9
 27530                           status	equ	0xFD8
 27531                           
 27532 ;; *************** function _HMI_SetSegments *****************
 27533 ;; Defined at:
 27534 ;;		line 226 in file "HMI.c"
 27535 ;; Parameters:    Size  Location     Type
 27536 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27537 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27538 ;; Auto vars:     Size  Location     Type
 27539 ;;  in              2    4[BANK0 ] unsigned short 
 27540 ;; Return value:  Size  Location     Type
 27541 ;;                  1    wreg      void 
 27542 ;; Registers used:
 27543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27544 ;; Tracked objects:
 27545 ;;		On entry : 0/0
 27546 ;;		On exit  : 0/0
 27547 ;;		Unchanged: 0/0
 27548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27552 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27553 ;;Total ram usage:        5 bytes
 27554 ;; Hardware stack levels used:    1
 27555 ;; Hardware stack levels required when called:    8
 27556 ;; This function calls:
 27557 ;;		_ToSegment
 27558 ;; This function is called by:
 27559 ;;		_HMI_SetNumber
 27560 ;; This function uses a non-reentrant model
 27561 ;;
 27562                           
 27563                           	psect	text145
 27564  01437E                     __ptext145:
 27565                           	opt stack 0
 27566  01437E                     _HMI_SetSegments:
 27567                           	opt stack 19
 27568                           
 27569                           ;HMI.c: 228: UINT16 in=0;
 27570                           
 27571                           ; BSR set to: 0
 27572                           ;incstack = 0
 27573  01437E  0E00               	movlw	0
 27574  014380  0100               	movlb	0	; () banked
 27575  014382  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27576  014384  0E00               	movlw	0
 27577  014386  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 27578                           
 27579                           ;HMI.c: 229: while(*pString)
 27580  014388  D02E               	goto	l1202
 27581  01438A                     
 27582                           ; BSR set to: 0
 27583                           ;HMI.c: 230: {
 27584                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27585                           
 27586                           ; BSR set to: 0
 27587  01438A  0E46               	movlw	low _HMIBoard
 27588  01438C  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27589  01438E  6ED9               	movwf	fsr2l,c
 27590  014390  0E01               	movlw	high _HMIBoard
 27591  014392  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27592  014394  6EDA               	movwf	fsr2h,c
 27593  014396  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27594  01439A  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27595  01439E  50E7               	movf	indf1,w,c
 27596  0143A0  EC1C  F08D         	call	_ToSegment
 27597  0143A4  6EDF               	movwf	indf2,c
 27598                           
 27599                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27600  0143A6  0E46               	movlw	low _HMIBoard
 27601  0143A8  0100               	movlb	0	; () banked
 27602  0143AA  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27603  0143AC  6ED9               	movwf	fsr2l,c
 27604  0143AE  0E01               	movlw	high _HMIBoard
 27605  0143B0  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27606  0143B2  6EDA               	movwf	fsr2h,c
 27607  0143B4  0E80               	movlw	128
 27608  0143B6  18DE               	xorwf	postinc2,w,c
 27609  0143B8  A4D8               	btfss	status,2,c
 27610  0143BA  D00B               	goto	l1201
 27611                           
 27612                           ; BSR set to: 0
 27613                           ;HMI.c: 234: {
 27614                           ;HMI.c: 235: in--;
 27615  0143BC  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 27616  0143BE  A0D8               	btfss	status,0,c
 27617  0143C0  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27618                           
 27619                           ; BSR set to: 0
 27620                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27621  0143C2  0E46               	movlw	low _HMIBoard
 27622  0143C4  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27623  0143C6  6ED9               	movwf	fsr2l,c
 27624  0143C8  0E01               	movlw	high _HMIBoard
 27625  0143CA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27626  0143CC  6EDA               	movwf	fsr2h,c
 27627  0143CE  0E00               	movlw	0
 27628  0143D0  8EDB               	bsf	plusw2,7,c
 27629  0143D2                     l1201:
 27630                           
 27631                           ; BSR set to: 0
 27632                           ;HMI.c: 237: }
 27633                           ;HMI.c: 239: pString++;
 27634                           
 27635                           ; BSR set to: 0
 27636  0143D2  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27637  0143D4  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27638                           
 27639                           ; BSR set to: 0
 27640                           ;HMI.c: 240: in++;
 27641  0143D6  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27642  0143D8  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27643                           
 27644                           ; BSR set to: 0
 27645                           ;HMI.c: 241: if (in>=6)
 27646  0143DA  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27647  0143DC  E116               	bnz	l13556
 27648  0143DE  0E06               	movlw	6
 27649  0143E0  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27650  0143E2  B0D8               	btfsc	status,0,c
 27651  0143E4  D012               	goto	l1204
 27652  0143E6                     l1202:
 27653                           
 27654                           ; BSR set to: 0
 27655                           
 27656                           ; BSR set to: 0
 27657                           
 27658                           ; BSR set to: 0
 27659  0143E6  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27660  0143EA  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27661  0143EE  50DF               	movf	indf2,w,c
 27662  0143F0  B4D8               	btfsc	status,2,c
 27663  0143F2  D00B               	goto	l1204
 27664  0143F4  D7CA               	goto	l1200
 27665  0143F6                     
 27666                           ; BSR set to: 0
 27667                           ;HMI.c: 245: {
 27668                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27669                           
 27670                           ; BSR set to: 0
 27671  0143F6  0E46               	movlw	low _HMIBoard
 27672  0143F8  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 27673  0143FA  6ED9               	movwf	fsr2l,c
 27674  0143FC  0E01               	movlw	high _HMIBoard
 27675  0143FE  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27676  014400  6EDA               	movwf	fsr2h,c
 27677  014402  0E00               	movlw	0
 27678  014404  6EDF               	movwf	indf2,c
 27679                           
 27680                           ; BSR set to: 0
 27681                           ;HMI.c: 247: in++;
 27682  014406  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27683  014408  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27684  01440A                     l1204:
 27685  01440A                     l13556:
 27686                           
 27687                           ; BSR set to: 0
 27688  01440A  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27689  01440C  E105               	bnz	l1207
 27690  01440E  0E06               	movlw	6
 27691  014410  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 27692  014412  B0D8               	btfsc	status,0,c
 27693  014414  0012               	return	
 27694  014416  D7EF               	goto	l1205
 27695  014418                     l1207:
 27696                           
 27697                           ; BSR set to: 0
 27698  014418  0012               	return		;funcret
 27699  01441A                     __end_of_HMI_SetSegments:
 27700                           	opt stack 0
 27701                           tosu	equ	0xFFF
 27702                           tosh	equ	0xFFE
 27703                           tosl	equ	0xFFD
 27704                           pclath	equ	0xFFA
 27705                           tblptru	equ	0xFF8
 27706                           tblptrh	equ	0xFF7
 27707                           tblptrl	equ	0xFF6
 27708                           tablat	equ	0xFF5
 27709                           prodh	equ	0xFF4
 27710                           prodl	equ	0xFF3
 27711                           intcon	equ	0xFF2
 27712                           indf0	equ	0xFEF
 27713                           postinc0	equ	0xFEE
 27714                           fsr0h	equ	0xFEA
 27715                           fsr0l	equ	0xFE9
 27716                           wreg	equ	0xFE8
 27717                           indf1	equ	0xFE7
 27718                           postdec1	equ	0xFE5
 27719                           fsr1h	equ	0xFE2
 27720                           fsr1l	equ	0xFE1
 27721                           indf2	equ	0xFDF
 27722                           postinc2	equ	0xFDE
 27723                           postdec2	equ	0xFDD
 27724                           plusw2	equ	0xFDB
 27725                           fsr2h	equ	0xFDA
 27726                           fsr2l	equ	0xFD9
 27727                           status	equ	0xFD8
 27728                           
 27729 ;; *************** function _ToSegment *****************
 27730 ;; Defined at:
 27731 ;;		line 284 in file "Library/Types.c"
 27732 ;; Parameters:    Size  Location     Type
 27733 ;;  pCHR            1    wreg     unsigned char 
 27734 ;; Auto vars:     Size  Location     Type
 27735 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27736 ;; Return value:  Size  Location     Type
 27737 ;;                  1    wreg      unsigned char 
 27738 ;; Registers used:
 27739 ;;		wreg, status,2, status,0
 27740 ;; Tracked objects:
 27741 ;;		On entry : 0/0
 27742 ;;		On exit  : 0/0
 27743 ;;		Unchanged: 0/0
 27744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27749 ;;Total ram usage:        1 bytes
 27750 ;; Hardware stack levels used:    1
 27751 ;; Hardware stack levels required when called:    7
 27752 ;; This function calls:
 27753 ;;		Nothing
 27754 ;; This function is called by:
 27755 ;;		_HMI_SetSegments
 27756 ;; This function uses a non-reentrant model
 27757 ;;
 27758                           
 27759                           	psect	text146
 27760  011A38                     __ptext146:
 27761                           	opt stack 0
 27762  011A38                     _ToSegment:
 27763                           	opt stack 19
 27764                           
 27765                           ; BSR set to: 0
 27766                           ;incstack = 0
 27767                           ;ToSegment@pCHR stored from wreg
 27768  011A38  0100               	movlb	0	; () banked
 27769  011A3A  6F60               	movwf	ToSegment@pCHR& (0+255),b
 27770                           
 27771                           ;Types.c: 286: switch(pCHR)
 27772  011A3C  D07E               	goto	l853
 27773  011A3E  0E3F               	movlw	63
 27774  011A40  0012               	return	
 27775  011A42  0E06               	movlw	6
 27776  011A44  0012               	return	
 27777  011A46  0E5B               	movlw	91
 27778  011A48  0012               	return	
 27779  011A4A  0E4F               	movlw	79
 27780  011A4C  0012               	return	
 27781  011A4E  0E66               	movlw	102
 27782  011A50  0012               	return	
 27783  011A52  0E6D               	movlw	109
 27784  011A54  0012               	return	
 27785  011A56  0E7D               	movlw	125
 27786  011A58  0012               	return	
 27787  011A5A  0E07               	movlw	7
 27788  011A5C  0012               	return	
 27789  011A5E  0E7F               	movlw	127
 27790  011A60  0012               	return	
 27791  011A62  0E6F               	movlw	111
 27792  011A64  0012               	return	
 27793  011A66  0E5F               	movlw	95
 27794  011A68  0012               	return	
 27795  011A6A  0E7C               	movlw	124
 27796  011A6C  0012               	return	
 27797  011A6E  0E58               	movlw	88
 27798  011A70  0012               	return	
 27799  011A72  0E5E               	movlw	94
 27800  011A74  0012               	return	
 27801  011A76  0E7B               	movlw	123
 27802  011A78  0012               	return	
 27803  011A7A  0E71               	movlw	113
 27804  011A7C  0012               	return	
 27805  011A7E  0E6F               	movlw	111
 27806  011A80  0012               	return	
 27807  011A82  0E74               	movlw	116
 27808  011A84  0012               	return	
 27809  011A86  0E04               	movlw	4
 27810  011A88  0012               	return	
 27811  011A8A  0E0E               	movlw	14
 27812  011A8C  0012               	return	
 27813  011A8E  0E7A               	movlw	122
 27814  011A90  0012               	return	
 27815  011A92  0E06               	movlw	6
 27816  011A94  0012               	return	
 27817  011A96  0E14               	movlw	20
 27818  011A98  0012               	return	
 27819  011A9A  0E54               	movlw	84
 27820  011A9C  0012               	return	
 27821  011A9E  0E5C               	movlw	92
 27822  011AA0  0012               	return	
 27823  011AA2  0E73               	movlw	115
 27824  011AA4  0012               	return	
 27825  011AA6  0E67               	movlw	103
 27826  011AA8  0012               	return	
 27827  011AAA  0E50               	movlw	80
 27828  011AAC  0012               	return	
 27829  011AAE  0E6D               	movlw	109
 27830  011AB0  0012               	return	
 27831  011AB2  0E78               	movlw	120
 27832  011AB4  0012               	return	
 27833  011AB6  0E1C               	movlw	28
 27834  011AB8  0012               	return	
 27835  011ABA  0E62               	movlw	98
 27836  011ABC  0012               	return	
 27837  011ABE  0E2A               	movlw	42
 27838  011AC0  0012               	return	
 27839  011AC2  0E64               	movlw	100
 27840  011AC4  0012               	return	
 27841  011AC6  0E6E               	movlw	110
 27842  011AC8  0012               	return	
 27843  011ACA  0E5B               	movlw	91
 27844  011ACC  0012               	return	
 27845  011ACE  0E77               	movlw	119
 27846  011AD0  0012               	return	
 27847  011AD2  0E7F               	movlw	127
 27848  011AD4  0012               	return	
 27849  011AD6  0E39               	movlw	57
 27850  011AD8  0012               	return	
 27851  011ADA  0E3F               	movlw	63
 27852  011ADC  0012               	return	
 27853  011ADE  0E79               	movlw	121
 27854  011AE0  0012               	return	
 27855  011AE2  0E71               	movlw	113
 27856  011AE4  0012               	return	
 27857  011AE6  0E3D               	movlw	61
 27858  011AE8  0012               	return	
 27859  011AEA  0E76               	movlw	118
 27860  011AEC  0012               	return	
 27861  011AEE  0E06               	movlw	6
 27862  011AF0  0012               	return	
 27863  011AF2  0E1E               	movlw	30
 27864  011AF4  0012               	return	
 27865  011AF6  0E57               	movlw	87
 27866  011AF8  0012               	return	
 27867  011AFA  0E38               	movlw	56
 27868  011AFC  0012               	return	
 27869  011AFE  0E76               	movlw	118
 27870  011B00  0012               	return	
 27871  011B02  0E76               	movlw	118
 27872  011B04  0012               	return	
 27873  011B06  0E3F               	movlw	63
 27874  011B08  0012               	return	
 27875  011B0A  0E73               	movlw	115
 27876  011B0C  0012               	return	
 27877  011B0E  0E3F               	movlw	63
 27878  011B10  0012               	return	
 27879  011B12  0E77               	movlw	119
 27880  011B14  0012               	return	
 27881  011B16  0E6D               	movlw	109
 27882  011B18  0012               	return	
 27883  011B1A  0E31               	movlw	49
 27884  011B1C  0012               	return	
 27885  011B1E  0E3E               	movlw	62
 27886  011B20  0012               	return	
 27887  011B22  0E3E               	movlw	62
 27888  011B24  0012               	return	
 27889  011B26  0E7E               	movlw	126
 27890  011B28  0012               	return	
 27891  011B2A  0E76               	movlw	118
 27892  011B2C  0012               	return	
 27893  011B2E  0E66               	movlw	102
 27894  011B30  0012               	return	
 27895  011B32  0E5B               	movlw	91
 27896  011B34  0012               	return	
 27897  011B36  0E80               	movlw	128
 27898  011B38  0012               	return	
 27899  011B3A                     l853:
 27900  011B3A  0100               	movlb	0	; () banked
 27901  011B3C  5160               	movf	ToSegment@pCHR& (0+255),w,b
 27902                           
 27903                           ; Switch size 1, requested type "space"
 27904                           ; Number of cases is 63, Range of values is 46 to 122
 27905                           ; switch strategies available:
 27906                           ; Name         Instructions Cycles
 27907                           ; simple_byte          190    96 (average)
 27908                           ;	Chosen strategy is simple_byte
 27909  011B3E  0A2E               	xorlw	46	; case 46
 27910  011B40  B4D8               	btfsc	status,2,c
 27911  011B42  D7F9               	goto	l917
 27912  011B44  0A1E               	xorlw	30	; case 48
 27913  011B46  B4D8               	btfsc	status,2,c
 27914  011B48  D77A               	goto	l854
 27915  011B4A  0A01               	xorlw	1	; case 49
 27916  011B4C  B4D8               	btfsc	status,2,c
 27917  011B4E  D779               	goto	l856
 27918  011B50  0A03               	xorlw	3	; case 50
 27919  011B52  B4D8               	btfsc	status,2,c
 27920  011B54  D778               	goto	l857
 27921  011B56  0A01               	xorlw	1	; case 51
 27922  011B58  B4D8               	btfsc	status,2,c
 27923  011B5A  D777               	goto	l858
 27924  011B5C  0A07               	xorlw	7	; case 52
 27925  011B5E  B4D8               	btfsc	status,2,c
 27926  011B60  D776               	goto	l859
 27927  011B62  0A01               	xorlw	1	; case 53
 27928  011B64  B4D8               	btfsc	status,2,c
 27929  011B66  D775               	goto	l860
 27930  011B68  0A03               	xorlw	3	; case 54
 27931  011B6A  B4D8               	btfsc	status,2,c
 27932  011B6C  D774               	goto	l861
 27933  011B6E  0A01               	xorlw	1	; case 55
 27934  011B70  B4D8               	btfsc	status,2,c
 27935  011B72  D773               	goto	l862
 27936  011B74  0A0F               	xorlw	15	; case 56
 27937  011B76  B4D8               	btfsc	status,2,c
 27938  011B78  D772               	goto	l863
 27939  011B7A  0A01               	xorlw	1	; case 57
 27940  011B7C  B4D8               	btfsc	status,2,c
 27941  011B7E  D771               	goto	l864
 27942  011B80  0A78               	xorlw	120	; case 65
 27943  011B82  B4D8               	btfsc	status,2,c
 27944  011B84  D7A4               	goto	l891
 27945  011B86  0A03               	xorlw	3	; case 66
 27946  011B88  B4D8               	btfsc	status,2,c
 27947  011B8A  D7A3               	goto	l892
 27948  011B8C  0A01               	xorlw	1	; case 67
 27949  011B8E  B4D8               	btfsc	status,2,c
 27950  011B90  D7A2               	goto	l893
 27951  011B92  0A07               	xorlw	7	; case 68
 27952  011B94  B4D8               	btfsc	status,2,c
 27953  011B96  D7A1               	goto	l894
 27954  011B98  0A01               	xorlw	1	; case 69
 27955  011B9A  B4D8               	btfsc	status,2,c
 27956  011B9C  D7A0               	goto	l895
 27957  011B9E  0A03               	xorlw	3	; case 70
 27958  011BA0  B4D8               	btfsc	status,2,c
 27959  011BA2  D79F               	goto	l896
 27960  011BA4  0A01               	xorlw	1	; case 71
 27961  011BA6  B4D8               	btfsc	status,2,c
 27962  011BA8  D79E               	goto	l897
 27963  011BAA  0A0F               	xorlw	15	; case 72
 27964  011BAC  B4D8               	btfsc	status,2,c
 27965  011BAE  D79D               	goto	l898
 27966  011BB0  0A01               	xorlw	1	; case 73
 27967  011BB2  B4D8               	btfsc	status,2,c
 27968  011BB4  D79C               	goto	l899
 27969  011BB6  0A03               	xorlw	3	; case 74
 27970  011BB8  B4D8               	btfsc	status,2,c
 27971  011BBA  D79B               	goto	l900
 27972  011BBC  0A01               	xorlw	1	; case 75
 27973  011BBE  B4D8               	btfsc	status,2,c
 27974  011BC0  D79A               	goto	l901
 27975  011BC2  0A07               	xorlw	7	; case 76
 27976  011BC4  B4D8               	btfsc	status,2,c
 27977  011BC6  D799               	goto	l902
 27978  011BC8  0A01               	xorlw	1	; case 77
 27979  011BCA  B4D8               	btfsc	status,2,c
 27980  011BCC  D798               	goto	l903
 27981  011BCE  0A03               	xorlw	3	; case 78
 27982  011BD0  B4D8               	btfsc	status,2,c
 27983  011BD2  D797               	goto	l904
 27984  011BD4  0A01               	xorlw	1	; case 79
 27985  011BD6  B4D8               	btfsc	status,2,c
 27986  011BD8  D796               	goto	l905
 27987  011BDA  0A1F               	xorlw	31	; case 80
 27988  011BDC  B4D8               	btfsc	status,2,c
 27989  011BDE  D795               	goto	l906
 27990  011BE0  0A01               	xorlw	1	; case 81
 27991  011BE2  B4D8               	btfsc	status,2,c
 27992  011BE4  D794               	goto	l907
 27993  011BE6  0A03               	xorlw	3	; case 82
 27994  011BE8  B4D8               	btfsc	status,2,c
 27995  011BEA  D793               	goto	l908
 27996  011BEC  0A01               	xorlw	1	; case 83
 27997  011BEE  B4D8               	btfsc	status,2,c
 27998  011BF0  D792               	goto	l909
 27999  011BF2  0A07               	xorlw	7	; case 84
 28000  011BF4  B4D8               	btfsc	status,2,c
 28001  011BF6  D791               	goto	l910
 28002  011BF8  0A01               	xorlw	1	; case 85
 28003  011BFA  B4D8               	btfsc	status,2,c
 28004  011BFC  D790               	goto	l911
 28005  011BFE  0A03               	xorlw	3	; case 86
 28006  011C00  B4D8               	btfsc	status,2,c
 28007  011C02  D78F               	goto	l912
 28008  011C04  0A01               	xorlw	1	; case 87
 28009  011C06  B4D8               	btfsc	status,2,c
 28010  011C08  D78E               	goto	l913
 28011  011C0A  0A0F               	xorlw	15	; case 88
 28012  011C0C  B4D8               	btfsc	status,2,c
 28013  011C0E  D78D               	goto	l914
 28014  011C10  0A01               	xorlw	1	; case 89
 28015  011C12  B4D8               	btfsc	status,2,c
 28016  011C14  D78C               	goto	l915
 28017  011C16  0A03               	xorlw	3	; case 90
 28018  011C18  B4D8               	btfsc	status,2,c
 28019  011C1A  D78B               	goto	l916
 28020  011C1C  0A3B               	xorlw	59	; case 97
 28021  011C1E  B4D8               	btfsc	status,2,c
 28022  011C20  D722               	goto	l865
 28023  011C22  0A03               	xorlw	3	; case 98
 28024  011C24  B4D8               	btfsc	status,2,c
 28025  011C26  D721               	goto	l866
 28026  011C28  0A01               	xorlw	1	; case 99
 28027  011C2A  B4D8               	btfsc	status,2,c
 28028  011C2C  D720               	goto	l867
 28029  011C2E  0A07               	xorlw	7	; case 100
 28030  011C30  B4D8               	btfsc	status,2,c
 28031  011C32  D71F               	goto	l868
 28032  011C34  0A01               	xorlw	1	; case 101
 28033  011C36  B4D8               	btfsc	status,2,c
 28034  011C38  D71E               	goto	l869
 28035  011C3A  0A03               	xorlw	3	; case 102
 28036  011C3C  B4D8               	btfsc	status,2,c
 28037  011C3E  D71D               	goto	l870
 28038  011C40  0A01               	xorlw	1	; case 103
 28039  011C42  B4D8               	btfsc	status,2,c
 28040  011C44  D71C               	goto	l871
 28041  011C46  0A0F               	xorlw	15	; case 104
 28042  011C48  B4D8               	btfsc	status,2,c
 28043  011C4A  D71B               	goto	l872
 28044  011C4C  0A01               	xorlw	1	; case 105
 28045  011C4E  B4D8               	btfsc	status,2,c
 28046  011C50  D71A               	goto	l873
 28047  011C52  0A03               	xorlw	3	; case 106
 28048  011C54  B4D8               	btfsc	status,2,c
 28049  011C56  D719               	goto	l874
 28050  011C58  0A01               	xorlw	1	; case 107
 28051  011C5A  B4D8               	btfsc	status,2,c
 28052  011C5C  D718               	goto	l875
 28053  011C5E  0A07               	xorlw	7	; case 108
 28054  011C60  B4D8               	btfsc	status,2,c
 28055  011C62  D717               	goto	l876
 28056  011C64  0A01               	xorlw	1	; case 109
 28057  011C66  B4D8               	btfsc	status,2,c
 28058  011C68  D716               	goto	l877
 28059  011C6A  0A03               	xorlw	3	; case 110
 28060  011C6C  B4D8               	btfsc	status,2,c
 28061  011C6E  D715               	goto	l878
 28062  011C70  0A01               	xorlw	1	; case 111
 28063  011C72  B4D8               	btfsc	status,2,c
 28064  011C74  D714               	goto	l879
 28065  011C76  0A1F               	xorlw	31	; case 112
 28066  011C78  B4D8               	btfsc	status,2,c
 28067  011C7A  D713               	goto	l880
 28068  011C7C  0A01               	xorlw	1	; case 113
 28069  011C7E  B4D8               	btfsc	status,2,c
 28070  011C80  D712               	goto	l881
 28071  011C82  0A03               	xorlw	3	; case 114
 28072  011C84  B4D8               	btfsc	status,2,c
 28073  011C86  D711               	goto	l882
 28074  011C88  0A01               	xorlw	1	; case 115
 28075  011C8A  B4D8               	btfsc	status,2,c
 28076  011C8C  D710               	goto	l883
 28077  011C8E  0A07               	xorlw	7	; case 116
 28078  011C90  B4D8               	btfsc	status,2,c
 28079  011C92  D70F               	goto	l884
 28080  011C94  0A01               	xorlw	1	; case 117
 28081  011C96  B4D8               	btfsc	status,2,c
 28082  011C98  D70E               	goto	l885
 28083  011C9A  0A03               	xorlw	3	; case 118
 28084  011C9C  B4D8               	btfsc	status,2,c
 28085  011C9E  D70D               	goto	l886
 28086  011CA0  0A01               	xorlw	1	; case 119
 28087  011CA2  B4D8               	btfsc	status,2,c
 28088  011CA4  D70C               	goto	l887
 28089  011CA6  0A0F               	xorlw	15	; case 120
 28090  011CA8  B4D8               	btfsc	status,2,c
 28091  011CAA  D70B               	goto	l888
 28092  011CAC  0A01               	xorlw	1	; case 121
 28093  011CAE  B4D8               	btfsc	status,2,c
 28094  011CB0  D70A               	goto	l889
 28095  011CB2  0A03               	xorlw	3	; case 122
 28096  011CB4  B4D8               	btfsc	status,2,c
 28097  011CB6  D709               	goto	l890
 28098                           
 28099                           ;Types.c: 354: return 0;
 28100                           
 28101                           ; BSR set to: 0
 28102  011CB8  0E00               	movlw	0
 28103  011CBA  0012               	return	
 28104  011CBC                     __end_of_ToSegment:
 28105                           	opt stack 0
 28106                           tosu	equ	0xFFF
 28107                           tosh	equ	0xFFE
 28108                           tosl	equ	0xFFD
 28109                           pclath	equ	0xFFA
 28110                           tblptru	equ	0xFF8
 28111                           tblptrh	equ	0xFF7
 28112                           tblptrl	equ	0xFF6
 28113                           tablat	equ	0xFF5
 28114                           prodh	equ	0xFF4
 28115                           prodl	equ	0xFF3
 28116                           intcon	equ	0xFF2
 28117                           indf0	equ	0xFEF
 28118                           postinc0	equ	0xFEE
 28119                           fsr0h	equ	0xFEA
 28120                           fsr0l	equ	0xFE9
 28121                           wreg	equ	0xFE8
 28122                           indf1	equ	0xFE7
 28123                           postdec1	equ	0xFE5
 28124                           fsr1h	equ	0xFE2
 28125                           fsr1l	equ	0xFE1
 28126                           indf2	equ	0xFDF
 28127                           postinc2	equ	0xFDE
 28128                           postdec2	equ	0xFDD
 28129                           plusw2	equ	0xFDB
 28130                           fsr2h	equ	0xFDA
 28131                           fsr2l	equ	0xFD9
 28132                           status	equ	0xFD8
 28133                           
 28134 ;; *************** function _HMI_Render *****************
 28135 ;; Defined at:
 28136 ;;		line 138 in file "HMI.c"
 28137 ;; Parameters:    Size  Location     Type
 28138 ;;		None
 28139 ;; Auto vars:     Size  Location     Type
 28140 ;;  a               2    8[BANK0 ] unsigned short 
 28141 ;; Return value:  Size  Location     Type
 28142 ;;                  1    wreg      void 
 28143 ;; Registers used:
 28144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28145 ;; Tracked objects:
 28146 ;;		On entry : 0/0
 28147 ;;		On exit  : 0/0
 28148 ;;		Unchanged: 0/0
 28149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28151 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28154 ;;Total ram usage:        2 bytes
 28155 ;; Hardware stack levels used:    1
 28156 ;; Hardware stack levels required when called:    9
 28157 ;; This function calls:
 28158 ;;		_OutSeg
 28159 ;; This function is called by:
 28160 ;;		_ADCAverage
 28161 ;;		_main
 28162 ;; This function uses a non-reentrant model
 28163 ;;
 28164                           
 28165                           	psect	text147
 28166  015A24                     __ptext147:
 28167                           	opt stack 0
 28168  015A24                     _HMI_Render:
 28169                           	opt stack 19
 28170                           
 28171                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 28172                           
 28173                           ;incstack = 0
 28174  015A24  0E00               	movlw	0
 28175  015A26  0100               	movlb	0	; () banked
 28176  015A28  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 28177  015A2A  0E00               	movlw	0
 28178  015A2C  6F68               	movwf	HMI_Render@a& (0+255),b
 28179  015A2E                     l14530:
 28180                           
 28181                           ; BSR set to: 0
 28182  015A2E  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 28183  015A30  E113               	bnz	l1158
 28184  015A32  0E08               	movlw	8
 28185  015A34  5D68               	subwf	HMI_Render@a& (0+255),w,b
 28186  015A36  B0D8               	btfsc	status,0,c
 28187  015A38  0012               	return	
 28188                           
 28189                           ; BSR set to: 0
 28190                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 28191                           
 28192                           ; BSR set to: 0
 28193                           
 28194                           ; BSR set to: 0
 28195  015A3A  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 28196  015A3E  0E46               	movlw	low _HMIBoard
 28197  015A40  2568               	addwf	HMI_Render@a& (0+255),w,b
 28198  015A42  6ED9               	movwf	fsr2l,c
 28199  015A44  0E01               	movlw	high _HMIBoard
 28200  015A46  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 28201  015A48  6EDA               	movwf	fsr2h,c
 28202  015A4A  50DF               	movf	indf2,w,c
 28203  015A4C  ECB1  F0A6         	call	_OutSeg
 28204  015A50  0100               	movlb	0	; () banked
 28205  015A52  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 28206  015A54  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 28207  015A56  D7EB               	goto	l14530
 28208  015A58                     l1158:
 28209                           
 28210                           ; BSR set to: 0
 28211  015A58  0012               	return		;funcret
 28212  015A5A                     __end_of_HMI_Render:
 28213                           	opt stack 0
 28214                           tosu	equ	0xFFF
 28215                           tosh	equ	0xFFE
 28216                           tosl	equ	0xFFD
 28217                           pclath	equ	0xFFA
 28218                           tblptru	equ	0xFF8
 28219                           tblptrh	equ	0xFF7
 28220                           tblptrl	equ	0xFF6
 28221                           tablat	equ	0xFF5
 28222                           prodh	equ	0xFF4
 28223                           prodl	equ	0xFF3
 28224                           intcon	equ	0xFF2
 28225                           indf0	equ	0xFEF
 28226                           postinc0	equ	0xFEE
 28227                           fsr0h	equ	0xFEA
 28228                           fsr0l	equ	0xFE9
 28229                           wreg	equ	0xFE8
 28230                           indf1	equ	0xFE7
 28231                           postdec1	equ	0xFE5
 28232                           fsr1h	equ	0xFE2
 28233                           fsr1l	equ	0xFE1
 28234                           indf2	equ	0xFDF
 28235                           postinc2	equ	0xFDE
 28236                           postdec2	equ	0xFDD
 28237                           plusw2	equ	0xFDB
 28238                           fsr2h	equ	0xFDA
 28239                           fsr2l	equ	0xFD9
 28240                           status	equ	0xFD8
 28241                           
 28242 ;; *************** function _OutSeg *****************
 28243 ;; Defined at:
 28244 ;;		line 54 in file "HMI.c"
 28245 ;; Parameters:    Size  Location     Type
 28246 ;;  pInput          1    wreg     unsigned char 
 28247 ;;  pSegment        1    3[BANK0 ] unsigned char 
 28248 ;; Auto vars:     Size  Location     Type
 28249 ;;  pInput          1    6[BANK0 ] unsigned char 
 28250 ;;  out             1    7[BANK0 ] volatile unsigned char 
 28251 ;; Return value:  Size  Location     Type
 28252 ;;                  1    wreg      void 
 28253 ;; Registers used:
 28254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28255 ;; Tracked objects:
 28256 ;;		On entry : 0/0
 28257 ;;		On exit  : 0/0
 28258 ;;		Unchanged: 0/0
 28259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28260 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28263 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28264 ;;Total ram usage:        5 bytes
 28265 ;; Hardware stack levels used:    1
 28266 ;; Hardware stack levels required when called:    8
 28267 ;; This function calls:
 28268 ;;		_SPI_Send
 28269 ;; This function is called by:
 28270 ;;		_HMI_Render
 28271 ;;		_HMI_GRender
 28272 ;; This function uses a non-reentrant model
 28273 ;;
 28274                           
 28275                           	psect	text148
 28276  014D62                     __ptext148:
 28277                           	opt stack 0
 28278  014D62                     _OutSeg:
 28279                           	opt stack 19
 28280                           
 28281                           ; BSR set to: 0
 28282                           ;incstack = 0
 28283                           ;OutSeg@pInput stored from wreg
 28284  014D62  0100               	movlb	0	; () banked
 28285  014D64  6F66               	movwf	OutSeg@pInput& (0+255),b
 28286                           
 28287                           ;HMI.c: 58: static UINT8 cur;
 28288                           ;HMI.c: 59: volatile UINT8 out;
 28289                           ;HMI.c: 60: static UINT8 segset;
 28290                           ;HMI.c: 61: static UINT8 a;
 28291                           ;HMI.c: 83: if (pSegment <= 8)
 28292  014D66  0E09               	movlw	9
 28293  014D68  0100               	movlb	0	; () banked
 28294  014D6A  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 28295  014D6C  0012               	return	
 28296                           
 28297                           ; BSR set to: 0
 28298                           ;HMI.c: 84: {
 28299                           ;HMI.c: 85: cur = pInput;
 28300  014D6E  C066  F040         	movff	OutSeg@pInput,OutSeg@cur
 28301                           
 28302                           ; BSR set to: 0
 28303                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 28304  014D72  0E00               	movlw	0
 28305  014D74  6E3E               	movwf	OutSeg@a,c
 28306  014D76                     l14048:
 28307                           
 28308                           ; BSR set to: 0
 28309  014D76  0E07               	movlw	7
 28310  014D78  643E               	cpfsgt	OutSeg@a,c
 28311  014D7A  D001               	goto	l1146
 28312  014D7C  D01F               	goto	u11390
 28313  014D7E                     l1146:
 28314                           
 28315                           ;HMI.c: 87: {
 28316                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 28317                           
 28318                           ; BSR set to: 0
 28319  014D7E  C040  F064         	movff	OutSeg@cur,??_OutSeg
 28320  014D82  0E01               	movlw	1
 28321  014D84  0100               	movlb	0	; () banked
 28322  014D86  1764               	andwf	??_OutSeg& (0+255),f,b
 28323  014D88  0E06               	movlw	6
 28324  014D8A  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 28325  014D8C                     u11385:
 28326  014D8C  90D8               	bcf	status,0,c
 28327  014D8E  3764               	rlcf	??_OutSeg& (0+255),f,b
 28328  014D90  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 28329  014D92  D7FC               	goto	u11385
 28330  014D94  5164               	movf	??_OutSeg& (0+255),w,b
 28331  014D96  6E3F               	movwf	OutSeg@segset,c
 28332                           
 28333                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 28334  014D98  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 28335  014D9A  42E8               	rrncf	wreg,f,c
 28336  014D9C  0BF8               	andlw	248
 28337  014D9E  103E               	iorwf	OutSeg@a,w,c
 28338  014DA0  103F               	iorwf	OutSeg@segset,w,c
 28339  014DA2  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 28340                           
 28341                           ;HMI.c: 90: cur >>= 1;
 28342  014DA4  90D8               	bcf	status,0,c
 28343  014DA6  3240               	rrcf	OutSeg@cur,f,c
 28344                           
 28345                           ; BSR set to: 0
 28346                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 28347  014DA8  0EC8               	movlw	low _SPI1
 28348  014DAA  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28349  014DAC  0E02               	movlw	high _SPI1
 28350  014DAE  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28351  014DB0  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 28352  014DB4  EC1E  F0A7         	call	_SPI_Send	;wreg free
 28353  014DB8  2A3E               	incf	OutSeg@a,f,c
 28354  014DBA  D7DD               	goto	l14048
 28355  014DBC                     u11390:
 28356                           
 28357                           ;HMI.c: 96: }
 28358                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 28359  014DBC  0EC8               	movlw	low _SPI1
 28360  014DBE  0100               	movlb	0	; () banked
 28361  014DC0  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28362  014DC2  0E02               	movlw	high _SPI1
 28363  014DC4  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28364  014DC6  0E00               	movlw	0
 28365  014DC8  6F62               	movwf	SPI_Send@pData& (0+255),b
 28366  014DCA  EC1E  F0A7         	call	_SPI_Send	;wreg free
 28367  014DCE  0012               	return	
 28368  014DD0                     __end_of_OutSeg:
 28369                           	opt stack 0
 28370                           tosu	equ	0xFFF
 28371                           tosh	equ	0xFFE
 28372                           tosl	equ	0xFFD
 28373                           pclath	equ	0xFFA
 28374                           tblptru	equ	0xFF8
 28375                           tblptrh	equ	0xFF7
 28376                           tblptrl	equ	0xFF6
 28377                           tablat	equ	0xFF5
 28378                           prodh	equ	0xFF4
 28379                           prodl	equ	0xFF3
 28380                           intcon	equ	0xFF2
 28381                           indf0	equ	0xFEF
 28382                           postinc0	equ	0xFEE
 28383                           fsr0h	equ	0xFEA
 28384                           fsr0l	equ	0xFE9
 28385                           wreg	equ	0xFE8
 28386                           indf1	equ	0xFE7
 28387                           postdec1	equ	0xFE5
 28388                           fsr1h	equ	0xFE2
 28389                           fsr1l	equ	0xFE1
 28390                           indf2	equ	0xFDF
 28391                           postinc2	equ	0xFDE
 28392                           postdec2	equ	0xFDD
 28393                           plusw2	equ	0xFDB
 28394                           fsr2h	equ	0xFDA
 28395                           fsr2l	equ	0xFD9
 28396                           status	equ	0xFD8
 28397                           
 28398 ;; *************** function _SPI_Send *****************
 28399 ;; Defined at:
 28400 ;;		line 226 in file "Library/SPI.c"
 28401 ;; Parameters:    Size  Location     Type
 28402 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 28403 ;;		 -> SPI1(11), SPI2(11), 
 28404 ;;  pData           1    2[BANK0 ] unsigned char 
 28405 ;; Auto vars:     Size  Location     Type
 28406 ;;		None
 28407 ;; Return value:  Size  Location     Type
 28408 ;;                  1    wreg      unsigned char 
 28409 ;; Registers used:
 28410 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28411 ;; Tracked objects:
 28412 ;;		On entry : 0/0
 28413 ;;		On exit  : 0/0
 28414 ;;		Unchanged: 0/0
 28415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28416 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28419 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28420 ;;Total ram usage:        3 bytes
 28421 ;; Hardware stack levels used:    1
 28422 ;; Hardware stack levels required when called:    7
 28423 ;; This function calls:
 28424 ;;		Nothing
 28425 ;; This function is called by:
 28426 ;;		_LCD_Write
 28427 ;;		_OutSeg
 28428 ;; This function uses a non-reentrant model
 28429 ;;
 28430                           
 28431                           	psect	text149
 28432  014E3C                     __ptext149:
 28433                           	opt stack 0
 28434  014E3C                     _SPI_Send:
 28435                           	opt stack 18
 28436                           
 28437                           ;SPI.c: 253: switch (pInput->mChannel)
 28438                           
 28439                           ;incstack = 0
 28440  014E3C  D026               	goto	l678
 28441  014E3E                     
 28442                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 28443  014E3E  C1B7  FFD9         	movff	_PortC+4,fsr2l
 28444  014E42  C1B8  FFDA         	movff	_PortC+5,fsr2h
 28445  014E46  0101               	movlb	1	; () banked
 28446  014E48  94DF               	bcf	indf2,2,c
 28447                           
 28448                           ; BSR set to: 1
 28449                           ;SPI.c: 257: SSP1BUF = pData;
 28450  014E4A  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 28451  014E4E                     
 28452                           ; BSR set to: 1
 28453  014E4E  A0C7               	btfss	4039,0,c	;volatile
 28454  014E50  D7FE               	goto	l681
 28455                           
 28456                           ;SPI.c: 259: pData = SSP1BUF;
 28457  014E52  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 28458                           
 28459                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 28460  014E56  C1B7  FFD9         	movff	_PortC+4,fsr2l
 28461  014E5A  C1B8  FFDA         	movff	_PortC+5,fsr2h
 28462  014E5E  0101               	movlb	1	; () banked
 28463  014E60  84DF               	bsf	indf2,2,c
 28464                           
 28465                           ; BSR set to: 1
 28466                           ;SPI.c: 261: return pData;
 28467                           ;	Return value of _SPI_Send is never used
 28468  014E62  0012               	return	
 28469  014E64                     
 28470                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 28471                           
 28472                           ; BSR set to: 1
 28473  014E64  C1A3  FFD9         	movff	_PortD+4,fsr2l
 28474  014E68  C1A4  FFDA         	movff	_PortD+5,fsr2h
 28475  014E6C  0101               	movlb	1	; () banked
 28476  014E6E  9EDF               	bcf	indf2,7,c
 28477                           
 28478                           ; BSR set to: 1
 28479                           ;SPI.c: 264: SSP2BUF = pData;
 28480  014E70  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 28481  014E74                     
 28482                           ; BSR set to: 1
 28483  014E74  A06D               	btfss	3949,0,c	;volatile
 28484  014E76  D7FE               	goto	l686
 28485                           
 28486                           ;SPI.c: 266: pData = SSP2BUF;
 28487  014E78  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 28488                           
 28489                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 28490  014E7C  C1A3  FFD9         	movff	_PortD+4,fsr2l
 28491  014E80  C1A4  FFDA         	movff	_PortD+5,fsr2h
 28492  014E84  0101               	movlb	1	; () banked
 28493  014E86  8EDF               	bsf	indf2,7,c
 28494                           
 28495                           ; BSR set to: 1
 28496                           ;SPI.c: 269: };
 28497                           
 28498                           ; BSR set to: 1
 28499                           ;SPI.c: 268: return pData;
 28500                           ;	Return value of _SPI_Send is never used
 28501  014E88  0012               	return	
 28502  014E8A                     l678:
 28503                           
 28504                           ; BSR set to: 1
 28505  014E8A  0100               	movlb	0	; () banked
 28506  014E8C  EE20 F002          	lfsr	2,2
 28507  014E90  5160               	movf	SPI_Send@pInput& (0+255),w,b
 28508  014E92  26D9               	addwf	fsr2l,f,c
 28509  014E94  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 28510  014E96  22DA               	addwfc	fsr2h,f,c
 28511  014E98  50DF               	movf	indf2,w,c
 28512                           
 28513                           ; Switch size 1, requested type "space"
 28514                           ; Number of cases is 2, Range of values is 0 to 1
 28515                           ; switch strategies available:
 28516                           ; Name         Instructions Cycles
 28517                           ; simple_byte            7     4 (average)
 28518                           ;	Chosen strategy is simple_byte
 28519  014E9A  0A00               	xorlw	0	; case 0
 28520  014E9C  B4D8               	btfsc	status,2,c
 28521  014E9E  D7CF               	goto	l679
 28522  014EA0  0A01               	xorlw	1	; case 1
 28523  014EA2  A4D8               	btfss	status,2,c
 28524  014EA4  0012               	return	
 28525  014EA6  D7DE               	goto	l684
 28526  014EA8                     __end_of_SPI_Send:
 28527                           	opt stack 0
 28528                           tosu	equ	0xFFF
 28529                           tosh	equ	0xFFE
 28530                           tosl	equ	0xFFD
 28531                           pclath	equ	0xFFA
 28532                           tblptru	equ	0xFF8
 28533                           tblptrh	equ	0xFF7
 28534                           tblptrl	equ	0xFF6
 28535                           tablat	equ	0xFF5
 28536                           prodh	equ	0xFF4
 28537                           prodl	equ	0xFF3
 28538                           intcon	equ	0xFF2
 28539                           indf0	equ	0xFEF
 28540                           postinc0	equ	0xFEE
 28541                           fsr0h	equ	0xFEA
 28542                           fsr0l	equ	0xFE9
 28543                           wreg	equ	0xFE8
 28544                           indf1	equ	0xFE7
 28545                           postdec1	equ	0xFE5
 28546                           fsr1h	equ	0xFE2
 28547                           fsr1l	equ	0xFE1
 28548                           indf2	equ	0xFDF
 28549                           postinc2	equ	0xFDE
 28550                           postdec2	equ	0xFDD
 28551                           plusw2	equ	0xFDB
 28552                           fsr2h	equ	0xFDA
 28553                           fsr2l	equ	0xFD9
 28554                           status	equ	0xFD8
 28555                           
 28556 ;; *************** function _FunctReadADC *****************
 28557 ;; Defined at:
 28558 ;;		line 94 in file "main.c"
 28559 ;; Parameters:    Size  Location     Type
 28560 ;;  channel         2    0[BANK0 ] int 
 28561 ;; Auto vars:     Size  Location     Type
 28562 ;;		None
 28563 ;; Return value:  Size  Location     Type
 28564 ;;                  2    0[BANK0 ] int 
 28565 ;; Registers used:
 28566 ;;		wreg, status,2, status,0
 28567 ;; Tracked objects:
 28568 ;;		On entry : 0/0
 28569 ;;		On exit  : 0/0
 28570 ;;		Unchanged: 0/0
 28571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28572 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28576 ;;Total ram usage:        2 bytes
 28577 ;; Hardware stack levels used:    1
 28578 ;; Hardware stack levels required when called:    7
 28579 ;; This function calls:
 28580 ;;		Nothing
 28581 ;; This function is called by:
 28582 ;;		_ADCAverage
 28583 ;; This function uses a non-reentrant model
 28584 ;;
 28585                           
 28586                           	psect	text150
 28587  015902                     __ptext150:
 28588                           	opt stack 0
 28589  015902                     _FunctReadADC:
 28590                           	opt stack 21
 28591                           
 28592                           ;main.c: 96: if (channel > 4) return 0;
 28593                           
 28594                           ;incstack = 0
 28595  015902  0100               	movlb	0	; () banked
 28596  015904  BF61               	btfsc	(FunctReadADC@channel+1)& (0+255),7,b
 28597  015906  D00B               	goto	l2124
 28598  015908  5161               	movf	(FunctReadADC@channel+1)& (0+255),w,b
 28599  01590A  E104               	bnz	u11790
 28600  01590C  0E05               	movlw	5
 28601  01590E  5D60               	subwf	FunctReadADC@channel& (0+255),w,b
 28602  015910  A0D8               	btfss	status,0,c
 28603  015912  D005               	goto	l2124
 28604  015914                     u11790:
 28605                           
 28606                           ; BSR set to: 0
 28607  015914  0E00               	movlw	0
 28608  015916  6F61               	movwf	(?_FunctReadADC+1)& (0+255),b
 28609  015918  0E00               	movlw	0
 28610  01591A  6F60               	movwf	?_FunctReadADC& (0+255),b
 28611                           
 28612                           ; BSR set to: 0
 28613  01591C  0012               	return	
 28614  01591E                     l2124:
 28615                           
 28616                           ; BSR set to: 0
 28617                           ;main.c: 97: ADCON0 = 0x00;
 28618                           
 28619                           ; BSR set to: 0
 28620  01591E  0E00               	movlw	0
 28621  015920  6EC2               	movwf	4034,c	;volatile
 28622                           
 28623                           ; BSR set to: 0
 28624                           ;main.c: 98: ADCON0 = (channel << 2);
 28625  015922  4560               	rlncf	FunctReadADC@channel& (0+255),w,b
 28626  015924  46E8               	rlncf	wreg,f,c
 28627  015926  0BFC               	andlw	252
 28628  015928  6EC2               	movwf	4034,c	;volatile
 28629                           
 28630                           ; BSR set to: 0
 28631                           ;main.c: 99: ADON = 1;
 28632  01592A  80C2               	bsf	4034,0,c	;volatile
 28633                           
 28634                           ; BSR set to: 0
 28635                           ;main.c: 100: GODONE = 1;
 28636  01592C  82C2               	bsf	4034,1,c	;volatile
 28637  01592E                     
 28638                           ; BSR set to: 0
 28639  01592E  B2C2               	btfsc	4034,1,c	;volatile
 28640  015930  D7FE               	goto	l2127
 28641                           
 28642                           ;main.c: 102: ADON = 0;
 28643  015932  90C2               	bcf	4034,0,c	;volatile
 28644                           
 28645                           ;main.c: 103: return ADRES;
 28646  015934  CFC3 F060          	movff	4035,?_FunctReadADC	;volatile
 28647  015938  CFC4 F061          	movff	4036,?_FunctReadADC+1	;volatile
 28648  01593C  0012               	return		;funcret
 28649  01593E                     __end_of_FunctReadADC:
 28650                           	opt stack 0
 28651                           tosu	equ	0xFFF
 28652                           tosh	equ	0xFFE
 28653                           tosl	equ	0xFFD
 28654                           pclath	equ	0xFFA
 28655                           tblptru	equ	0xFF8
 28656                           tblptrh	equ	0xFF7
 28657                           tblptrl	equ	0xFF6
 28658                           tablat	equ	0xFF5
 28659                           prodh	equ	0xFF4
 28660                           prodl	equ	0xFF3
 28661                           intcon	equ	0xFF2
 28662                           indf0	equ	0xFEF
 28663                           postinc0	equ	0xFEE
 28664                           fsr0h	equ	0xFEA
 28665                           fsr0l	equ	0xFE9
 28666                           wreg	equ	0xFE8
 28667                           indf1	equ	0xFE7
 28668                           postdec1	equ	0xFE5
 28669                           fsr1h	equ	0xFE2
 28670                           fsr1l	equ	0xFE1
 28671                           indf2	equ	0xFDF
 28672                           postinc2	equ	0xFDE
 28673                           postdec2	equ	0xFDD
 28674                           plusw2	equ	0xFDB
 28675                           fsr2h	equ	0xFDA
 28676                           fsr2l	equ	0xFD9
 28677                           status	equ	0xFD8
 28678                           
 28679 ;; *************** function _BangBang *****************
 28680 ;; Defined at:
 28681 ;;		line 226 in file "main.c"
 28682 ;; Parameters:    Size  Location     Type
 28683 ;;  RSpeedH         2    1[BANK0 ] int 
 28684 ;;  RSpeedL         2    3[BANK0 ] int 
 28685 ;;  LSpeedH         2    5[BANK0 ] int 
 28686 ;;  LSpeedL         2    7[BANK0 ] int 
 28687 ;; Auto vars:     Size  Location     Type
 28688 ;;		None
 28689 ;; Return value:  Size  Location     Type
 28690 ;;                  1    wreg      void 
 28691 ;; Registers used:
 28692 ;;		wreg, status,2, cstack
 28693 ;; Tracked objects:
 28694 ;;		On entry : 0/0
 28695 ;;		On exit  : 0/0
 28696 ;;		Unchanged: 0/0
 28697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28698 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28701 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28702 ;;Total ram usage:        8 bytes
 28703 ;; Hardware stack levels used:    1
 28704 ;; Hardware stack levels required when called:    8
 28705 ;; This function calls:
 28706 ;;		_eusartSend
 28707 ;; This function is called by:
 28708 ;;		_main
 28709 ;; This function uses a non-reentrant model
 28710 ;;
 28711                           
 28712                           	psect	text151
 28713  015CBC                     __ptext151:
 28714                           	opt stack 0
 28715  015CBC                     _BangBang:
 28716                           	opt stack 22
 28717                           
 28718                           ;main.c: 228: eusartSend(145);
 28719                           
 28720                           ;incstack = 0
 28721  015CBC  0E91               	movlw	145
 28722  015CBE  EC23  F0B0         	call	_eusartSend
 28723                           
 28724                           ;main.c: 229: eusartSend((((RSpeedH)>>8) & 255));
 28725  015CC2  0100               	movlb	0	; () banked
 28726  015CC4  5162               	movf	(BangBang@RSpeedH+1)& (0+255),w,b
 28727  015CC6  EC23  F0B0         	call	_eusartSend
 28728                           
 28729                           ;main.c: 230: eusartSend(((RSpeedL) & 255));
 28730  015CCA  0100               	movlb	0	; () banked
 28731  015CCC  5163               	movf	BangBang@RSpeedL& (0+255),w,b
 28732  015CCE  EC23  F0B0         	call	_eusartSend
 28733                           
 28734                           ;main.c: 231: eusartSend((((LSpeedH)>>8) & 255));
 28735  015CD2  0100               	movlb	0	; () banked
 28736  015CD4  5166               	movf	(BangBang@LSpeedH+1)& (0+255),w,b
 28737  015CD6  EC23  F0B0         	call	_eusartSend
 28738                           
 28739                           ;main.c: 232: eusartSend(((LSpeedL) & 255));
 28740  015CDA  0100               	movlb	0	; () banked
 28741  015CDC  5167               	movf	BangBang@LSpeedL& (0+255),w,b
 28742  015CDE  EC23  F0B0         	call	_eusartSend
 28743  015CE2  0012               	return		;funcret
 28744  015CE4                     __end_of_BangBang:
 28745                           	opt stack 0
 28746                           tosu	equ	0xFFF
 28747                           tosh	equ	0xFFE
 28748                           tosl	equ	0xFFD
 28749                           pclath	equ	0xFFA
 28750                           tblptru	equ	0xFF8
 28751                           tblptrh	equ	0xFF7
 28752                           tblptrl	equ	0xFF6
 28753                           tablat	equ	0xFF5
 28754                           prodh	equ	0xFF4
 28755                           prodl	equ	0xFF3
 28756                           intcon	equ	0xFF2
 28757                           indf0	equ	0xFEF
 28758                           postinc0	equ	0xFEE
 28759                           fsr0h	equ	0xFEA
 28760                           fsr0l	equ	0xFE9
 28761                           wreg	equ	0xFE8
 28762                           indf1	equ	0xFE7
 28763                           postdec1	equ	0xFE5
 28764                           fsr1h	equ	0xFE2
 28765                           fsr1l	equ	0xFE1
 28766                           indf2	equ	0xFDF
 28767                           postinc2	equ	0xFDE
 28768                           postdec2	equ	0xFDD
 28769                           plusw2	equ	0xFDB
 28770                           fsr2h	equ	0xFDA
 28771                           fsr2l	equ	0xFD9
 28772                           status	equ	0xFD8
 28773                           
 28774 ;; *************** function _eusartSend *****************
 28775 ;; Defined at:
 28776 ;;		line 147 in file "main.c"
 28777 ;; Parameters:    Size  Location     Type
 28778 ;;  sendChar        1    wreg     unsigned char 
 28779 ;; Auto vars:     Size  Location     Type
 28780 ;;  sendChar        1    0[BANK0 ] unsigned char 
 28781 ;; Return value:  Size  Location     Type
 28782 ;;                  1    wreg      void 
 28783 ;; Registers used:
 28784 ;;		wreg
 28785 ;; Tracked objects:
 28786 ;;		On entry : 0/0
 28787 ;;		On exit  : 0/0
 28788 ;;		Unchanged: 0/0
 28789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28794 ;;Total ram usage:        1 bytes
 28795 ;; Hardware stack levels used:    1
 28796 ;; Hardware stack levels required when called:    7
 28797 ;; This function calls:
 28798 ;;		Nothing
 28799 ;; This function is called by:
 28800 ;;		_Robot_Stop
 28801 ;;		_Get_Sensor_State
 28802 ;;		_UpdateDistance
 28803 ;;		_Drive
 28804 ;;		_Turn
 28805 ;;		_BangBang
 28806 ;;		_Robot_Init
 28807 ;;		_LEDOn
 28808 ;;		_LEDOff
 28809 ;;		_Get_VirtualWall_State
 28810 ;; This function uses a non-reentrant model
 28811 ;;
 28812                           
 28813                           	psect	text152
 28814  016046                     __ptext152:
 28815                           	opt stack 0
 28816  016046                     _eusartSend:
 28817                           	opt stack 22
 28818                           
 28819                           ;incstack = 0
 28820                           ;eusartSend@sendChar stored from wreg
 28821  016046  0100               	movlb	0	; () banked
 28822  016048  6F60               	movwf	eusartSend@sendChar& (0+255),b
 28823  01604A                     
 28824                           ;main.c: 148: while (!TXSTA1bits.TRMT) {}
 28825  01604A  A2AD               	btfss	4013,1,c	;volatile
 28826  01604C  D7FE               	goto	l14666
 28827                           
 28828                           ;main.c: 149: TXREG1 = sendChar;
 28829  01604E  C060  FFAE         	movff	eusartSend@sendChar,4014	;volatile
 28830  016052  0012               	return		;funcret
 28831  016054                     __end_of_eusartSend:
 28832                           	opt stack 0
 28833                           tosu	equ	0xFFF
 28834                           tosh	equ	0xFFE
 28835                           tosl	equ	0xFFD
 28836                           pclath	equ	0xFFA
 28837                           tblptru	equ	0xFF8
 28838                           tblptrh	equ	0xFF7
 28839                           tblptrl	equ	0xFF6
 28840                           tablat	equ	0xFF5
 28841                           prodh	equ	0xFF4
 28842                           prodl	equ	0xFF3
 28843                           intcon	equ	0xFF2
 28844                           indf0	equ	0xFEF
 28845                           postinc0	equ	0xFEE
 28846                           fsr0h	equ	0xFEA
 28847                           fsr0l	equ	0xFE9
 28848                           wreg	equ	0xFE8
 28849                           indf1	equ	0xFE7
 28850                           postdec1	equ	0xFE5
 28851                           fsr1h	equ	0xFE2
 28852                           fsr1l	equ	0xFE1
 28853                           indf2	equ	0xFDF
 28854                           postinc2	equ	0xFDE
 28855                           postdec2	equ	0xFDD
 28856                           plusw2	equ	0xFDB
 28857                           fsr2h	equ	0xFDA
 28858                           fsr2l	equ	0xFD9
 28859                           status	equ	0xFD8
 28860                           
 28861 ;; *************** function _ISR_Function *****************
 28862 ;; Defined at:
 28863 ;;		line 38 in file "Library/ISR.c"
 28864 ;; Parameters:    Size  Location     Type
 28865 ;;		None
 28866 ;; Auto vars:     Size  Location     Type
 28867 ;;		None
 28868 ;; Return value:  Size  Location     Type
 28869 ;;                  1    wreg      void 
 28870 ;; Registers used:
 28871 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28872 ;; Tracked objects:
 28873 ;;		On entry : 0/0
 28874 ;;		On exit  : 0/0
 28875 ;;		Unchanged: 0/0
 28876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28879 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28880 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28881 ;;Total ram usage:       18 bytes
 28882 ;; Hardware stack levels used:    1
 28883 ;; Hardware stack levels required when called:    6
 28884 ;; This function calls:
 28885 ;;		_Timer0_ISR
 28886 ;; This function is called by:
 28887 ;;		Interrupt level 2
 28888 ;; This function uses a non-reentrant model
 28889 ;;
 28890                           
 28891                           	psect	intcode
 28892  001408                     __pintcode:
 28893                           	opt stack 0
 28894  001408                     _ISR_Function:
 28895                           	opt stack 14
 28896                           
 28897                           ;incstack = 0
 28898  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28899  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 28900  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 28901  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 28902  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 28903  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 28904  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 28905  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 28906  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 28907  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 28908  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 28909  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 28910  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 28911  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 28912  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 28913  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 28914  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 28915  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 28916  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 28917                           
 28918                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 28919  001452  92F2               	bcf	intcon,1,c	;volatile
 28920                           
 28921                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 28922  001454  B4F2               	btfsc	intcon,2,c	;volatile
 28923  001456  AAF2               	btfss	intcon,5,c	;volatile
 28924  001458  D002               	goto	i2l1590
 28925                           
 28926                           ;ISR.c: 68: Timer0_ISR();
 28927  00145A  EC72  F0AE         	call	_Timer0_ISR	;wreg free
 28928  00145E                     i2l1590:
 28929  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 28930  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 28931  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 28932  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 28933  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 28934  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 28935  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 28936  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 28937  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 28938  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 28939  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 28940  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 28941  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 28942  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 28943  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 28944  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 28945  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 28946  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 28947  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28948  0014A8  0011               	retfie		f
 28949  0014AA                     __end_of_ISR_Function:
 28950                           	opt stack 0
 28951                           tosu	equ	0xFFF
 28952                           tosh	equ	0xFFE
 28953                           tosl	equ	0xFFD
 28954                           pclatu	equ	0xFFB
 28955                           pclath	equ	0xFFA
 28956                           tblptru	equ	0xFF8
 28957                           tblptrh	equ	0xFF7
 28958                           tblptrl	equ	0xFF6
 28959                           tablat	equ	0xFF5
 28960                           prodh	equ	0xFF4
 28961                           prodl	equ	0xFF3
 28962                           intcon	equ	0xFF2
 28963                           indf0	equ	0xFEF
 28964                           postinc0	equ	0xFEE
 28965                           fsr0h	equ	0xFEA
 28966                           fsr0l	equ	0xFE9
 28967                           wreg	equ	0xFE8
 28968                           indf1	equ	0xFE7
 28969                           postdec1	equ	0xFE5
 28970                           fsr1h	equ	0xFE2
 28971                           fsr1l	equ	0xFE1
 28972                           indf2	equ	0xFDF
 28973                           postinc2	equ	0xFDE
 28974                           postdec2	equ	0xFDD
 28975                           plusw2	equ	0xFDB
 28976                           fsr2h	equ	0xFDA
 28977                           fsr2l	equ	0xFD9
 28978                           status	equ	0xFD8
 28979                           
 28980 ;; *************** function _Timer0_ISR *****************
 28981 ;; Defined at:
 28982 ;;		line 94 in file "Library/Timer0.c"
 28983 ;; Parameters:    Size  Location     Type
 28984 ;;		None
 28985 ;; Auto vars:     Size  Location     Type
 28986 ;;		None
 28987 ;; Return value:  Size  Location     Type
 28988 ;;                  1    wreg      void 
 28989 ;; Registers used:
 28990 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28991 ;; Tracked objects:
 28992 ;;		On entry : 0/0
 28993 ;;		On exit  : 0/0
 28994 ;;		Unchanged: 0/0
 28995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29000 ;;Total ram usage:        0 bytes
 29001 ;; Hardware stack levels used:    1
 29002 ;; Hardware stack levels required when called:    5
 29003 ;; This function calls:
 29004 ;;		Absolute function
 29005 ;;		i2_Motor_Step
 29006 ;;		i2_Timer0_Stop
 29007 ;; This function is called by:
 29008 ;;		_ISR_Function
 29009 ;; This function uses a non-reentrant model
 29010 ;;
 29011                           
 29012                           	psect	text154
 29013  015CE4                     __ptext154:
 29014                           	opt stack 0
 29015  015CE4                     _Timer0_ISR:
 29016                           	opt stack 14
 29017                           
 29018                           ;Timer0.c: 96: Timer0_Stop();
 29019                           
 29020                           ;incstack = 0
 29021  015CE4  EC6D  F0B0         	call	i2_Timer0_Stop	;wreg free
 29022                           
 29023                           ;Timer0.c: 99: if (gISR != 0)
 29024  015CE8  0101               	movlb	1	; () banked
 29025  015CEA  5108               	movf	_gISR& (0+255),w,b
 29026  015CEC  1109               	iorwf	(_gISR+1)& (0+255),w,b
 29027  015CEE  110A               	iorwf	(_gISR+2)& (0+255),w,b
 29028  015CF0  B4D8               	btfsc	status,2,c
 29029  015CF2  0012               	return	
 29030                           
 29031                           ; BSR set to: 1
 29032                           ;Timer0.c: 100: gISR();
 29033  015CF4  D801               	call	i2u1420_48
 29034  015CF6  0012               	return	
 29035  015CF8                     i2u1420_48:
 29036  015CF8  0005               	push	
 29037  015CFA  6EFA               	movwf	pclath,c
 29038  015CFC  5108               	movf	_gISR& (0+255),w,b
 29039  015CFE  6EFD               	movwf	tosl,c
 29040  015D00  5109               	movf	(_gISR+1)& (0+255),w,b
 29041  015D02  6EFE               	movwf	tosh,c
 29042  015D04  510A               	movf	(_gISR+2)& (0+255),w,b
 29043  015D06  6EFF               	movwf	tosu,c
 29044  015D08  50FA               	movf	pclath,w,c
 29045  015D0A  0012               	return		;indir
 29046  015D0C                     __end_of_Timer0_ISR:
 29047                           	opt stack 0
 29048                           tosu	equ	0xFFF
 29049                           tosh	equ	0xFFE
 29050                           tosl	equ	0xFFD
 29051                           pclatu	equ	0xFFB
 29052                           pclath	equ	0xFFA
 29053                           tblptru	equ	0xFF8
 29054                           tblptrh	equ	0xFF7
 29055                           tblptrl	equ	0xFF6
 29056                           tablat	equ	0xFF5
 29057                           prodh	equ	0xFF4
 29058                           prodl	equ	0xFF3
 29059                           intcon	equ	0xFF2
 29060                           indf0	equ	0xFEF
 29061                           postinc0	equ	0xFEE
 29062                           fsr0h	equ	0xFEA
 29063                           fsr0l	equ	0xFE9
 29064                           wreg	equ	0xFE8
 29065                           indf1	equ	0xFE7
 29066                           postdec1	equ	0xFE5
 29067                           fsr1h	equ	0xFE2
 29068                           fsr1l	equ	0xFE1
 29069                           indf2	equ	0xFDF
 29070                           postinc2	equ	0xFDE
 29071                           postdec2	equ	0xFDD
 29072                           plusw2	equ	0xFDB
 29073                           fsr2h	equ	0xFDA
 29074                           fsr2l	equ	0xFD9
 29075                           status	equ	0xFD8
 29076                           
 29077 ;; *************** function i2_Motor_Step *****************
 29078 ;; Defined at:
 29079 ;;		line 75 in file "Library/Motor.c"
 29080 ;; Parameters:    Size  Location     Type
 29081 ;;		None
 29082 ;; Auto vars:     Size  Location     Type
 29083 ;;		None
 29084 ;; Return value:  Size  Location     Type
 29085 ;;                  1    wreg      void 
 29086 ;; Registers used:
 29087 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29088 ;; Tracked objects:
 29089 ;;		On entry : 0/0
 29090 ;;		On exit  : 0/0
 29091 ;;		Unchanged: 0/0
 29092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29095 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29097 ;;Total ram usage:        2 bytes
 29098 ;; Hardware stack levels used:    1
 29099 ;; Hardware stack levels required when called:    4
 29100 ;; This function calls:
 29101 ;;		i2_MXK_Queue
 29102 ;;		i2_MXK_Release
 29103 ;;		i2_MXK_SwitchTo
 29104 ;;		i2_Port_SetPin
 29105 ;;		i2_Timer0_Restart
 29106 ;;		i2_Timer0_Stop
 29107 ;; This function is called by:
 29108 ;; This function uses a non-reentrant model
 29109 ;;
 29110                           
 29111                           	psect	text155
 29112  013C02                     __ptext155:
 29113                           	opt stack 0
 29114  013C02                     i2_Motor_Step:
 29115                           	opt stack 14
 29116                           
 29117                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29118                           
 29119                           ;incstack = 0
 29120  013C02  0100               	movlb	0	; () banked
 29121  013C04  EE20 F004          	lfsr	2,4
 29122  013C08  51ED               	movf	_lMotor& (0+255),w,b
 29123  013C0A  26D9               	addwf	fsr2l,f,c
 29124  013C0C  51EE               	movf	(_lMotor+1)& (0+255),w,b
 29125  013C0E  22DA               	addwfc	fsr2h,f,c
 29126  013C10  50DF               	movf	indf2,w,c
 29127  013C12  EC2D  F0AD         	call	i2_MXK_SwitchTo
 29128  013C16  0900               	iorlw	0
 29129  013C18  B4D8               	btfsc	status,2,c
 29130  013C1A  D06A               	goto	i2l1627
 29131                           
 29132                           ;Motor.c: 78: {
 29133                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29134  013C1C  C0ED  FFD9         	movff	_lMotor,fsr2l
 29135  013C20  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29136  013C24  50DE               	movf	postinc2,w,c
 29137  013C26  10DE               	iorwf	postinc2,w,c
 29138  013C28  B4D8               	btfsc	status,2,c
 29139  013C2A  D05D               	goto	i2l1628
 29140                           
 29141                           ;Motor.c: 80: {
 29142                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29143  013C2C  C0ED  FFD9         	movff	_lMotor,fsr2l
 29144  013C30  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29145  013C34  0E01               	movlw	1
 29146  013C36  BEDB               	btfsc	plusw2,7,c
 29147  013C38  D022               	goto	i2l1629
 29148  013C3A  0E01               	movlw	1
 29149  013C3C  50DB               	movf	plusw2,w,c
 29150  013C3E  E103               	bnz	i2u784_40
 29151  013C40  04DE               	decf	postinc2,w,c
 29152  013C42  A0D8               	btfss	status,0,c
 29153  013C44  D01C               	goto	i2l1629
 29154  013C46                     i2u784_40:
 29155                           
 29156                           ;Motor.c: 83: {
 29157                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29158  013C46  C0ED  FFD9         	movff	_lMotor,fsr2l
 29159  013C4A  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29160  013C4E  28DE               	incf	postinc2,w,c
 29161  013C50  E104               	bnz	i2u785_40
 29162  013C52  0E7F               	movlw	127
 29163  013C54  18DE               	xorwf	postinc2,w,c
 29164  013C56  B4D8               	btfsc	status,2,c
 29165  013C58  D007               	goto	i2l1630
 29166  013C5A                     i2u785_40:
 29167                           
 29168                           ;Motor.c: 85: lMotor->mDelta --;
 29169  013C5A  C0ED  FFD9         	movff	_lMotor,fsr2l
 29170  013C5E  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29171  013C62  06DE               	decf	postinc2,f,c
 29172  013C64  0E00               	movlw	0
 29173  013C66  5ADD               	subwfb	postdec2,f,c
 29174  013C68                     i2l1630:
 29175                           
 29176                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29177  013C68  0E95               	movlw	low _PortE
 29178  013C6A  6E10               	movwf	i2Port_SetPin@pInput,c
 29179  013C6C  0E01               	movlw	high _PortE
 29180  013C6E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29181  013C70  0E00               	movlw	0
 29182  013C72  6E12               	movwf	i2Port_SetPin@pPin,c
 29183  013C74  0E01               	movlw	1
 29184  013C76  6E13               	movwf	i2Port_SetPin@pValue,c
 29185  013C78  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29186                           
 29187                           ;Motor.c: 88: }
 29188  013C7C  D01B               	goto	i2l1631
 29189  013C7E                     i2l1629:
 29190                           
 29191                           ;Motor.c: 89: else
 29192                           ;Motor.c: 90: {
 29193                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29194  013C7E  C0ED  FFD9         	movff	_lMotor,fsr2l
 29195  013C82  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29196  013C86  04DE               	decf	postinc2,w,c
 29197  013C88  E104               	bnz	i2u786_40
 29198  013C8A  0E80               	movlw	128
 29199  013C8C  18DE               	xorwf	postinc2,w,c
 29200  013C8E  B4D8               	btfsc	status,2,c
 29201  013C90  D007               	goto	i2l1632
 29202  013C92                     i2u786_40:
 29203                           
 29204                           ;Motor.c: 92: lMotor->mDelta ++;
 29205  013C92  C0ED  FFD9         	movff	_lMotor,fsr2l
 29206  013C96  C0EE  FFDA         	movff	_lMotor+1,fsr2h
 29207  013C9A  2ADE               	incf	postinc2,f,c
 29208  013C9C  0E00               	movlw	0
 29209  013C9E  22DD               	addwfc	postdec2,f,c
 29210  013CA0                     i2l1632:
 29211                           
 29212                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29213  013CA0  0E95               	movlw	low _PortE
 29214  013CA2  6E10               	movwf	i2Port_SetPin@pInput,c
 29215  013CA4  0E01               	movlw	high _PortE
 29216  013CA6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29217  013CA8  0E00               	movlw	0
 29218  013CAA  6E12               	movwf	i2Port_SetPin@pPin,c
 29219  013CAC  0E00               	movlw	0
 29220  013CAE  6E13               	movwf	i2Port_SetPin@pValue,c
 29221  013CB0  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29222  013CB4                     i2l1631:
 29223                           
 29224                           ;Motor.c: 95: }
 29225                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29226  013CB4  0E95               	movlw	low _PortE
 29227  013CB6  6E10               	movwf	i2Port_SetPin@pInput,c
 29228  013CB8  0E01               	movlw	high _PortE
 29229  013CBA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29230  013CBC  0E01               	movlw	1
 29231  013CBE  6E12               	movwf	i2Port_SetPin@pPin,c
 29232  013CC0  0E01               	movlw	1
 29233  013CC2  6E13               	movwf	i2Port_SetPin@pValue,c
 29234  013CC4  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29235                           
 29236                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29237  013CC8  0E95               	movlw	low _PortE
 29238  013CCA  6E10               	movwf	i2Port_SetPin@pInput,c
 29239  013CCC  0E01               	movlw	high _PortE
 29240  013CCE  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29241  013CD0  0E01               	movlw	1
 29242  013CD2  6E12               	movwf	i2Port_SetPin@pPin,c
 29243  013CD4  0E00               	movlw	0
 29244  013CD6  6E13               	movwf	i2Port_SetPin@pValue,c
 29245  013CD8  ECC8  F0A0         	call	i2_Port_SetPin	;wreg free
 29246                           
 29247                           ;Motor.c: 101: MXK_Release();
 29248  013CDC  EC70  F0B0         	call	i2_MXK_Release	;wreg free
 29249                           
 29250                           ;Motor.c: 102: Timer0_Restart();
 29251  013CE0  EC37  F0B0         	call	i2_Timer0_Restart	;wreg free
 29252                           
 29253                           ;Motor.c: 103: return;
 29254  013CE4  0012               	return	
 29255  013CE6                     i2l1628:
 29256                           
 29257                           ;Motor.c: 104: }
 29258                           ;Motor.c: 105: MXK_Release();
 29259  013CE6  EC70  F0B0         	call	i2_MXK_Release	;wreg free
 29260                           
 29261                           ;Motor.c: 106: Timer0_Stop();
 29262  013CEA  EC6D  F0B0         	call	i2_Timer0_Stop	;wreg free
 29263                           
 29264                           ;Motor.c: 107: return;
 29265  013CEE  0012               	return	
 29266  013CF0                     i2l1627:
 29267                           
 29268                           ;Motor.c: 108: }
 29269                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29270  013CF0  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29271  013CF4  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29272  013CF8  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29273  013CFC  EC2A  F0B0         	call	i2_MXK_Queue	;wreg free
 29274  013D00  0012               	return		;funcret
 29275  013D02                     __end_ofi2_Motor_Step:
 29276                           	opt stack 0
 29277                           tosu	equ	0xFFF
 29278                           tosh	equ	0xFFE
 29279                           tosl	equ	0xFFD
 29280                           pclatu	equ	0xFFB
 29281                           pclath	equ	0xFFA
 29282                           tblptru	equ	0xFF8
 29283                           tblptrh	equ	0xFF7
 29284                           tblptrl	equ	0xFF6
 29285                           tablat	equ	0xFF5
 29286                           prodh	equ	0xFF4
 29287                           prodl	equ	0xFF3
 29288                           intcon	equ	0xFF2
 29289                           indf0	equ	0xFEF
 29290                           postinc0	equ	0xFEE
 29291                           fsr0h	equ	0xFEA
 29292                           fsr0l	equ	0xFE9
 29293                           wreg	equ	0xFE8
 29294                           indf1	equ	0xFE7
 29295                           postdec1	equ	0xFE5
 29296                           fsr1h	equ	0xFE2
 29297                           fsr1l	equ	0xFE1
 29298                           indf2	equ	0xFDF
 29299                           postinc2	equ	0xFDE
 29300                           postdec2	equ	0xFDD
 29301                           plusw2	equ	0xFDB
 29302                           fsr2h	equ	0xFDA
 29303                           fsr2l	equ	0xFD9
 29304                           status	equ	0xFD8
 29305                           
 29306 ;; *************** function i2_Timer0_Stop *****************
 29307 ;; Defined at:
 29308 ;;		line 89 in file "Library/Timer0.c"
 29309 ;; Parameters:    Size  Location     Type
 29310 ;;		None
 29311 ;; Auto vars:     Size  Location     Type
 29312 ;;		None
 29313 ;; Return value:  Size  Location     Type
 29314 ;;                  1    wreg      void 
 29315 ;; Registers used:
 29316 ;;		None
 29317 ;; Tracked objects:
 29318 ;;		On entry : 0/0
 29319 ;;		On exit  : 0/0
 29320 ;;		Unchanged: 0/0
 29321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29326 ;;Total ram usage:        0 bytes
 29327 ;; Hardware stack levels used:    1
 29328 ;; This function calls:
 29329 ;;		Nothing
 29330 ;; This function is called by:
 29331 ;;		_Timer0_ISR
 29332 ;;		i2_Motor_Step
 29333 ;; This function uses a non-reentrant model
 29334 ;;
 29335                           
 29336                           	psect	text156
 29337  0160DA                     __ptext156:
 29338                           	opt stack 0
 29339  0160DA                     i2_Timer0_Stop:
 29340                           	opt stack 18
 29341                           
 29342                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29343                           
 29344                           ;incstack = 0
 29345  0160DA  9AF2               	bcf	intcon,5,c	;volatile
 29346                           
 29347                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29348  0160DC  94F2               	bcf	intcon,2,c	;volatile
 29349  0160DE  0012               	return		;funcret
 29350  0160E0                     __end_ofi2_Timer0_Stop:
 29351                           	opt stack 0
 29352                           tosu	equ	0xFFF
 29353                           tosh	equ	0xFFE
 29354                           tosl	equ	0xFFD
 29355                           pclatu	equ	0xFFB
 29356                           pclath	equ	0xFFA
 29357                           tblptru	equ	0xFF8
 29358                           tblptrh	equ	0xFF7
 29359                           tblptrl	equ	0xFF6
 29360                           tablat	equ	0xFF5
 29361                           prodh	equ	0xFF4
 29362                           prodl	equ	0xFF3
 29363                           intcon	equ	0xFF2
 29364                           indf0	equ	0xFEF
 29365                           postinc0	equ	0xFEE
 29366                           fsr0h	equ	0xFEA
 29367                           fsr0l	equ	0xFE9
 29368                           wreg	equ	0xFE8
 29369                           indf1	equ	0xFE7
 29370                           postdec1	equ	0xFE5
 29371                           fsr1h	equ	0xFE2
 29372                           fsr1l	equ	0xFE1
 29373                           indf2	equ	0xFDF
 29374                           postinc2	equ	0xFDE
 29375                           postdec2	equ	0xFDD
 29376                           plusw2	equ	0xFDB
 29377                           fsr2h	equ	0xFDA
 29378                           fsr2l	equ	0xFD9
 29379                           status	equ	0xFD8
 29380                           
 29381 ;; *************** function i2_Timer0_Restart *****************
 29382 ;; Defined at:
 29383 ;;		line 83 in file "Library/Timer0.c"
 29384 ;; Parameters:    Size  Location     Type
 29385 ;;		None
 29386 ;; Auto vars:     Size  Location     Type
 29387 ;;		None
 29388 ;; Return value:  Size  Location     Type
 29389 ;;                  1    wreg      void 
 29390 ;; Registers used:
 29391 ;;		None
 29392 ;; Tracked objects:
 29393 ;;		On entry : 0/0
 29394 ;;		On exit  : 0/0
 29395 ;;		Unchanged: 0/0
 29396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29401 ;;Total ram usage:        0 bytes
 29402 ;; Hardware stack levels used:    1
 29403 ;; This function calls:
 29404 ;;		Nothing
 29405 ;; This function is called by:
 29406 ;;		i2_Motor_Step
 29407 ;; This function uses a non-reentrant model
 29408 ;;
 29409                           
 29410                           	psect	text157
 29411  01606E                     __ptext157:
 29412                           	opt stack 0
 29413  01606E                     i2_Timer0_Restart:
 29414                           	opt stack 17
 29415                           
 29416                           ;Timer0.c: 85: TMR0 = COUNTER;
 29417                           
 29418                           ;incstack = 0
 29419  01606E  C033  FFD6         	movff	_COUNTER,4054	;volatile
 29420  016072  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
 29421                           
 29422                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29423  016076  8AF2               	bsf	intcon,5,c	;volatile
 29424  016078  0012               	return		;funcret
 29425  01607A                     __end_ofi2_Timer0_Restart:
 29426                           	opt stack 0
 29427                           tosu	equ	0xFFF
 29428                           tosh	equ	0xFFE
 29429                           tosl	equ	0xFFD
 29430                           pclatu	equ	0xFFB
 29431                           pclath	equ	0xFFA
 29432                           tblptru	equ	0xFF8
 29433                           tblptrh	equ	0xFF7
 29434                           tblptrl	equ	0xFF6
 29435                           tablat	equ	0xFF5
 29436                           prodh	equ	0xFF4
 29437                           prodl	equ	0xFF3
 29438                           intcon	equ	0xFF2
 29439                           indf0	equ	0xFEF
 29440                           postinc0	equ	0xFEE
 29441                           fsr0h	equ	0xFEA
 29442                           fsr0l	equ	0xFE9
 29443                           wreg	equ	0xFE8
 29444                           indf1	equ	0xFE7
 29445                           postdec1	equ	0xFE5
 29446                           fsr1h	equ	0xFE2
 29447                           fsr1l	equ	0xFE1
 29448                           indf2	equ	0xFDF
 29449                           postinc2	equ	0xFDE
 29450                           postdec2	equ	0xFDD
 29451                           plusw2	equ	0xFDB
 29452                           fsr2h	equ	0xFDA
 29453                           fsr2l	equ	0xFD9
 29454                           status	equ	0xFD8
 29455                           
 29456 ;; *************** function i2_Port_SetPin *****************
 29457 ;; Defined at:
 29458 ;;		line 247 in file "Library/Port.c"
 29459 ;; Parameters:    Size  Location     Type
 29460 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29461 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29462 ;;  pPin            1   17[COMRAM] enum E6750
 29463 ;;  pValue          1   18[COMRAM] unsigned char 
 29464 ;; Auto vars:     Size  Location     Type
 29465 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29466 ;; Return value:  Size  Location     Type
 29467 ;;                  1    wreg      void 
 29468 ;; Registers used:
 29469 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29470 ;; Tracked objects:
 29471 ;;		On entry : 0/0
 29472 ;;		On exit  : 0/0
 29473 ;;		Unchanged: 0/0
 29474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29478 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29479 ;;Total ram usage:        5 bytes
 29480 ;; Hardware stack levels used:    1
 29481 ;; Hardware stack levels required when called:    3
 29482 ;; This function calls:
 29483 ;;		i2_Byte_SetBit
 29484 ;;		i2_Word_GetPair
 29485 ;; This function is called by:
 29486 ;;		i2_Motor_Step
 29487 ;; This function uses a non-reentrant model
 29488 ;;
 29489                           
 29490                           	psect	text158
 29491  014190                     __ptext158:
 29492                           	opt stack 0
 29493  014190                     i2_Port_SetPin:
 29494                           	opt stack 14
 29495                           
 29496                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29497                           
 29498                           ;incstack = 0
 29499  014190  0E08               	movlw	8
 29500  014192  2410               	addwf	i2Port_SetPin@pInput,w,c
 29501  014194  6E0D               	movwf	i2Word_GetPair@pInput,c
 29502  014196  0E00               	movlw	0
 29503  014198  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29504  01419A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29505  01419C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29506  0141A0  ECDD  F0AD         	call	i2_Word_GetPair	;wreg free
 29507  0141A4  6E14               	movwf	i2Port_SetPin@Type,c
 29508                           
 29509                           ;Port.c: 250: switch (Type)
 29510  0141A6  D03B               	goto	i2l427
 29511  0141A8                     
 29512                           ;Port.c: 256: pValue &= 1;
 29513  0141A8  0E01               	movlw	1
 29514  0141AA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29515                           
 29516                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29517  0141AC  EE20 F002          	lfsr	2,2
 29518  0141B0  5010               	movf	i2Port_SetPin@pInput,w,c
 29519  0141B2  26D9               	addwf	fsr2l,f,c
 29520  0141B4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29521  0141B6  22DA               	addwfc	fsr2h,f,c
 29522  0141B8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29523  0141BC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29524  0141C0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29525  0141C4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29526  0141C8  ECA1  F0AA         	call	i2_Byte_SetBit	;wreg free
 29527                           
 29528                           ;Port.c: 258: break;
 29529  0141CC  0012               	return	
 29530  0141CE                     
 29531                           ;Port.c: 261: pValue &= 1;
 29532  0141CE  0E01               	movlw	1
 29533  0141D0  1613               	andwf	i2Port_SetPin@pValue,f,c
 29534                           
 29535                           ;Port.c: 262: pValue ^= 1;
 29536  0141D2  0E01               	movlw	1
 29537  0141D4  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29538                           
 29539                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29540  0141D6  EE20 F002          	lfsr	2,2
 29541  0141DA  5010               	movf	i2Port_SetPin@pInput,w,c
 29542  0141DC  26D9               	addwf	fsr2l,f,c
 29543  0141DE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29544  0141E0  22DA               	addwfc	fsr2h,f,c
 29545  0141E2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29546  0141E6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29547  0141EA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29548  0141EE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29549  0141F2  ECA1  F0AA         	call	i2_Byte_SetBit	;wreg free
 29550                           
 29551                           ;Port.c: 264: break;
 29552  0141F6  0012               	return	
 29553  0141F8                     
 29554                           ;Port.c: 266: pValue &= 1;
 29555  0141F8  0E01               	movlw	1
 29556  0141FA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29557                           
 29558                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29559  0141FC  EE20 F004          	lfsr	2,4
 29560  014200  5010               	movf	i2Port_SetPin@pInput,w,c
 29561  014202  26D9               	addwf	fsr2l,f,c
 29562  014204  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29563  014206  22DA               	addwfc	fsr2h,f,c
 29564  014208  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29565  01420C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29566  014210  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29567  014214  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29568  014218  ECA1  F0AA         	call	i2_Byte_SetBit	;wreg free
 29569                           
 29570                           ;Port.c: 269: }
 29571                           
 29572                           ;Port.c: 268: break;
 29573  01421C  0012               	return	
 29574  01421E                     i2l427:
 29575  01421E  5014               	movf	i2Port_SetPin@Type,w,c
 29576                           
 29577                           ; Switch size 1, requested type "space"
 29578                           ; Number of cases is 4, Range of values is 0 to 3
 29579                           ; switch strategies available:
 29580                           ; Name         Instructions Cycles
 29581                           ; simple_byte           13     7 (average)
 29582                           ;	Chosen strategy is simple_byte
 29583  014220  0A00               	xorlw	0	; case 0
 29584  014222  B4D8               	btfsc	status,2,c
 29585  014224  0012               	return	
 29586  014226  0A01               	xorlw	1	; case 1
 29587  014228  B4D8               	btfsc	status,2,c
 29588  01422A  D7BE               	goto	i2l430
 29589  01422C  0A03               	xorlw	3	; case 2
 29590  01422E  B4D8               	btfsc	status,2,c
 29591  014230  D7CE               	goto	i2l432
 29592  014232  0A01               	xorlw	1	; case 3
 29593  014234  A4D8               	btfss	status,2,c
 29594  014236  0012               	return	
 29595  014238  D7DF               	goto	i2l433
 29596  01423A                     __end_ofi2_Port_SetPin:
 29597                           	opt stack 0
 29598                           tosu	equ	0xFFF
 29599                           tosh	equ	0xFFE
 29600                           tosl	equ	0xFFD
 29601                           pclatu	equ	0xFFB
 29602                           pclath	equ	0xFFA
 29603                           tblptru	equ	0xFF8
 29604                           tblptrh	equ	0xFF7
 29605                           tblptrl	equ	0xFF6
 29606                           tablat	equ	0xFF5
 29607                           prodh	equ	0xFF4
 29608                           prodl	equ	0xFF3
 29609                           intcon	equ	0xFF2
 29610                           indf0	equ	0xFEF
 29611                           postinc0	equ	0xFEE
 29612                           fsr0h	equ	0xFEA
 29613                           fsr0l	equ	0xFE9
 29614                           wreg	equ	0xFE8
 29615                           indf1	equ	0xFE7
 29616                           postdec1	equ	0xFE5
 29617                           fsr1h	equ	0xFE2
 29618                           fsr1l	equ	0xFE1
 29619                           indf2	equ	0xFDF
 29620                           postinc2	equ	0xFDE
 29621                           postdec2	equ	0xFDD
 29622                           plusw2	equ	0xFDB
 29623                           fsr2h	equ	0xFDA
 29624                           fsr2l	equ	0xFD9
 29625                           status	equ	0xFD8
 29626                           
 29627 ;; *************** function i2_Word_GetPair *****************
 29628 ;; Defined at:
 29629 ;;		line 156 in file "Library/Types.c"
 29630 ;; Parameters:    Size  Location     Type
 29631 ;;  pInput          2   12[COMRAM] PTR struct Word
 29632 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29633 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29634 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29635 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29636 ;;  pPair           1   14[COMRAM] unsigned char 
 29637 ;; Auto vars:     Size  Location     Type
 29638 ;;		None
 29639 ;; Return value:  Size  Location     Type
 29640 ;;                  1    wreg      unsigned char 
 29641 ;; Registers used:
 29642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29643 ;; Tracked objects:
 29644 ;;		On entry : 0/0
 29645 ;;		On exit  : 0/0
 29646 ;;		Unchanged: 0/0
 29647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29648 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29651 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29652 ;;Total ram usage:        3 bytes
 29653 ;; Hardware stack levels used:    1
 29654 ;; Hardware stack levels required when called:    2
 29655 ;; This function calls:
 29656 ;;		i2_Byte_GetPair
 29657 ;; This function is called by:
 29658 ;;		i2_Port_SetPin
 29659 ;; This function uses a non-reentrant model
 29660 ;;
 29661                           
 29662                           	psect	text159
 29663  015BBA                     __ptext159:
 29664                           	opt stack 0
 29665  015BBA                     i2_Word_GetPair:
 29666                           	opt stack 14
 29667                           
 29668                           ;Types.c: 158: if (pPair >= 4)
 29669                           
 29670                           ;incstack = 0
 29671  015BBA  0E03               	movlw	3
 29672  015BBC  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29673  015BBE  D00C               	goto	i2l781
 29674                           
 29675                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29676  015BC0  0E01               	movlw	1
 29677  015BC2  240D               	addwf	i2Word_GetPair@pInput,w,c
 29678  015BC4  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29679  015BC6  0E00               	movlw	0
 29680  015BC8  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29681  015BCA  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29682  015BCC  500F               	movf	i2Word_GetPair@pPair,w,c
 29683  015BCE  0FFC               	addlw	252
 29684  015BD0  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29685  015BD2  EC3E  F0AF         	call	i2_Byte_GetPair	;wreg free
 29686  015BD6  0012               	return	
 29687  015BD8                     i2l781:
 29688                           
 29689                           ;Types.c: 160: else
 29690                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29691  015BD8  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29692  015BDC  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29693  015BE0  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29694  015BE4  EC3E  F0AF         	call	i2_Byte_GetPair	;wreg free
 29695  015BE8  0012               	return	
 29696  015BEA                     __end_ofi2_Word_GetPair:
 29697                           	opt stack 0
 29698                           tosu	equ	0xFFF
 29699                           tosh	equ	0xFFE
 29700                           tosl	equ	0xFFD
 29701                           pclatu	equ	0xFFB
 29702                           pclath	equ	0xFFA
 29703                           tblptru	equ	0xFF8
 29704                           tblptrh	equ	0xFF7
 29705                           tblptrl	equ	0xFF6
 29706                           tablat	equ	0xFF5
 29707                           prodh	equ	0xFF4
 29708                           prodl	equ	0xFF3
 29709                           intcon	equ	0xFF2
 29710                           indf0	equ	0xFEF
 29711                           postinc0	equ	0xFEE
 29712                           fsr0h	equ	0xFEA
 29713                           fsr0l	equ	0xFE9
 29714                           wreg	equ	0xFE8
 29715                           indf1	equ	0xFE7
 29716                           postdec1	equ	0xFE5
 29717                           fsr1h	equ	0xFE2
 29718                           fsr1l	equ	0xFE1
 29719                           indf2	equ	0xFDF
 29720                           postinc2	equ	0xFDE
 29721                           postdec2	equ	0xFDD
 29722                           plusw2	equ	0xFDB
 29723                           fsr2h	equ	0xFDA
 29724                           fsr2l	equ	0xFD9
 29725                           status	equ	0xFD8
 29726                           
 29727 ;; *************** function i2_Byte_GetPair *****************
 29728 ;; Defined at:
 29729 ;;		line 87 in file "Library/Types.c"
 29730 ;; Parameters:    Size  Location     Type
 29731 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29732 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29733 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29734 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29735 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29736 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29737 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29738 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29739 ;;		 -> NULL(0), 
 29740 ;;  pPair           1   11[COMRAM] unsigned char 
 29741 ;; Auto vars:     Size  Location     Type
 29742 ;;		None
 29743 ;; Return value:  Size  Location     Type
 29744 ;;                  1    wreg      unsigned char 
 29745 ;; Registers used:
 29746 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29747 ;; Tracked objects:
 29748 ;;		On entry : 0/0
 29749 ;;		On exit  : 0/0
 29750 ;;		Unchanged: 0/0
 29751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29752 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29755 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29756 ;;Total ram usage:        3 bytes
 29757 ;; Hardware stack levels used:    1
 29758 ;; Hardware stack levels required when called:    1
 29759 ;; This function calls:
 29760 ;;		i2_Byte_GetZone
 29761 ;; This function is called by:
 29762 ;;		i2_Word_GetPair
 29763 ;; This function uses a non-reentrant model
 29764 ;;
 29765                           
 29766                           	psect	text160
 29767  015E7C                     __ptext160:
 29768                           	opt stack 0
 29769  015E7C                     i2_Byte_GetPair:
 29770                           	opt stack 14
 29771                           
 29772                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29773                           
 29774                           ;incstack = 0
 29775  015E7C  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29776  015E80  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29777  015E84  0E04               	movlw	4
 29778  015E86  6E03               	movwf	i2Byte_GetZone@pMax,c
 29779  015E88  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29780  015E8C  0E02               	movlw	2
 29781  015E8E  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29782  015E90  EC76  F0A6         	call	i2_Byte_GetZone	;wreg free
 29783  015E94  0012               	return	
 29784  015E96                     __end_ofi2_Byte_GetPair:
 29785                           	opt stack 0
 29786                           tosu	equ	0xFFF
 29787                           tosh	equ	0xFFE
 29788                           tosl	equ	0xFFD
 29789                           pclatu	equ	0xFFB
 29790                           pclath	equ	0xFFA
 29791                           tblptru	equ	0xFF8
 29792                           tblptrh	equ	0xFF7
 29793                           tblptrl	equ	0xFF6
 29794                           tablat	equ	0xFF5
 29795                           prodh	equ	0xFF4
 29796                           prodl	equ	0xFF3
 29797                           intcon	equ	0xFF2
 29798                           indf0	equ	0xFEF
 29799                           postinc0	equ	0xFEE
 29800                           fsr0h	equ	0xFEA
 29801                           fsr0l	equ	0xFE9
 29802                           wreg	equ	0xFE8
 29803                           indf1	equ	0xFE7
 29804                           postdec1	equ	0xFE5
 29805                           fsr1h	equ	0xFE2
 29806                           fsr1l	equ	0xFE1
 29807                           indf2	equ	0xFDF
 29808                           postinc2	equ	0xFDE
 29809                           postdec2	equ	0xFDD
 29810                           plusw2	equ	0xFDB
 29811                           fsr2h	equ	0xFDA
 29812                           fsr2l	equ	0xFD9
 29813                           status	equ	0xFD8
 29814                           
 29815 ;; *************** function i2_Byte_GetZone *****************
 29816 ;; Defined at:
 29817 ;;		line 64 in file "Library/Types.c"
 29818 ;; Parameters:    Size  Location     Type
 29819 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29820 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29821 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29822 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29823 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29824 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29825 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29826 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29827 ;;		 -> NULL(0), 
 29828 ;;  pMax            1    2[COMRAM] unsigned char 
 29829 ;;  pChunk          1    3[COMRAM] unsigned char 
 29830 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29831 ;; Auto vars:     Size  Location     Type
 29832 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29833 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29834 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29835 ;; Return value:  Size  Location     Type
 29836 ;;                  1    wreg      unsigned char 
 29837 ;; Registers used:
 29838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29839 ;; Tracked objects:
 29840 ;;		On entry : 0/0
 29841 ;;		On exit  : 0/0
 29842 ;;		Unchanged: 0/0
 29843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29844 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29845 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29847 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29848 ;;Total ram usage:        9 bytes
 29849 ;; Hardware stack levels used:    1
 29850 ;; This function calls:
 29851 ;;		Nothing
 29852 ;; This function is called by:
 29853 ;;		i2_Byte_GetPair
 29854 ;; This function uses a non-reentrant model
 29855 ;;
 29856                           
 29857                           	psect	text161
 29858  014CEC                     __ptext161:
 29859                           	opt stack 0
 29860  014CEC                     i2_Byte_GetZone:
 29861                           	opt stack 14
 29862                           
 29863                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29864                           
 29865                           ;incstack = 0
 29866  014CEC  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 29867  014CF0  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 29868  014CF4  0E00               	movlw	low (__mediumconst shr (0+16))
 29869  014CF6  6EF8               	movwf	tblptru,c
 29870  014CF8  0E0F               	movlw	(high __ramtop+-1)
 29871  014CFA  64F7               	cpfsgt	tblptrh,c
 29872  014CFC  D003               	bra	i2u597_47
 29873  014CFE  0008               	tblrd		*
 29874  014D00  50F5               	movf	tablat,w,c
 29875  014D02  D005               	bra	i2u597_40
 29876  014D04                     i2u597_47:
 29877  014D04  CFF6 FFE9          	movff	tblptrl,fsr0l
 29878  014D08  CFF7 FFEA          	movff	tblptrh,fsr0h
 29879  014D0C  50EF               	movf	indf0,w,c
 29880  014D0E                     i2u597_40:
 29881  014D0E  6E09               	movwf	i2Byte_GetZone@Output,c
 29882                           
 29883                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29884  014D10  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29885  014D12  0D01               	mullw	1
 29886  014D14  0E33               	movlw	low _MASKS
 29887  014D16  24F3               	addwf	prodl,w,c
 29888  014D18  6EF6               	movwf	tblptrl,c
 29889  014D1A  0EFC               	movlw	high _MASKS
 29890  014D1C  20F4               	addwfc	prodh,w,c
 29891  014D1E  6EF7               	movwf	tblptrh,c
 29892  014D20                     	if	1	;There are 3 active tblptr bytes
 29893  014D20  6AF8               	clrf	tblptru,c
 29894  014D22  0E00               	movlw	low (__mediumconst shr (0+16))
 29895  014D24  22F8               	addwfc	tblptru,f,c
 29896  014D26                     	endif
 29897  014D26  0008               	tblrd		*
 29898  014D28  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 29899                           
 29900                           ;Types.c: 68: UINT8 Offset = 0;
 29901  014D2C  0E00               	movlw	0
 29902  014D2E  6E08               	movwf	i2Byte_GetZone@Offset,c
 29903                           
 29904                           ;Types.c: 70: while (pChunk >= pMax)
 29905  014D30  D003               	goto	i2l732
 29906  014D32                     
 29907                           ;Types.c: 71: {
 29908                           ;Types.c: 72: pChunk -= pMax;
 29909  014D32  5003               	movf	i2Byte_GetZone@pMax,w,c
 29910  014D34  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 29911                           
 29912                           ;Types.c: 73: Offset += 1;
 29913  014D36  2A08               	incf	i2Byte_GetZone@Offset,f,c
 29914  014D38                     i2l732:
 29915  014D38  5003               	movf	i2Byte_GetZone@pMax,w,c
 29916  014D3A  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 29917  014D3C  B0D8               	btfsc	status,0,c
 29918  014D3E  D7F9               	goto	i2l733
 29919                           
 29920                           ;Types.c: 74: }
 29921                           ;Types.c: 75: pChunk *= pChunkSize;
 29922  014D40  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29923  014D42  0204               	mulwf	i2Byte_GetZone@pChunk,c
 29924  014D44  50F3               	movf	prodl,w,c
 29925  014D46  6E04               	movwf	i2Byte_GetZone@pChunk,c
 29926                           
 29927                           ;Types.c: 76: pChunk += Offset;
 29928  014D48  5008               	movf	i2Byte_GetZone@Offset,w,c
 29929  014D4A  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 29930                           
 29931                           ;Types.c: 78: Output >>= pChunk;
 29932  014D4C  2804               	incf	i2Byte_GetZone@pChunk,w,c
 29933  014D4E  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 29934  014D50  D002               	goto	i2u599_40
 29935  014D52                     i2u599_45:
 29936  014D52  90D8               	bcf	status,0,c
 29937  014D54  3209               	rrcf	i2Byte_GetZone@Output,f,c
 29938  014D56                     i2u599_40:
 29939  014D56  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 29940  014D58  D7FC               	goto	i2u599_45
 29941                           
 29942                           ;Types.c: 79: Output &= MASK;
 29943  014D5A  5007               	movf	i2Byte_GetZone@MASK,w,c
 29944  014D5C  1609               	andwf	i2Byte_GetZone@Output,f,c
 29945                           
 29946                           ;Types.c: 80: return Output;
 29947  014D5E  5009               	movf	i2Byte_GetZone@Output,w,c
 29948  014D60  0012               	return	
 29949  014D62                     __end_ofi2_Byte_GetZone:
 29950                           	opt stack 0
 29951                           tosu	equ	0xFFF
 29952                           tosh	equ	0xFFE
 29953                           tosl	equ	0xFFD
 29954                           pclatu	equ	0xFFB
 29955                           pclath	equ	0xFFA
 29956                           tblptru	equ	0xFF8
 29957                           tblptrh	equ	0xFF7
 29958                           tblptrl	equ	0xFF6
 29959                           tablat	equ	0xFF5
 29960                           prodh	equ	0xFF4
 29961                           prodl	equ	0xFF3
 29962                           intcon	equ	0xFF2
 29963                           indf0	equ	0xFEF
 29964                           postinc0	equ	0xFEE
 29965                           fsr0h	equ	0xFEA
 29966                           fsr0l	equ	0xFE9
 29967                           wreg	equ	0xFE8
 29968                           indf1	equ	0xFE7
 29969                           postdec1	equ	0xFE5
 29970                           fsr1h	equ	0xFE2
 29971                           fsr1l	equ	0xFE1
 29972                           indf2	equ	0xFDF
 29973                           postinc2	equ	0xFDE
 29974                           postdec2	equ	0xFDD
 29975                           plusw2	equ	0xFDB
 29976                           fsr2h	equ	0xFDA
 29977                           fsr2l	equ	0xFD9
 29978                           status	equ	0xFD8
 29979                           
 29980 ;; *************** function i2_Byte_SetBit *****************
 29981 ;; Defined at:
 29982 ;;		line 32 in file "Library/Types.c"
 29983 ;; Parameters:    Size  Location     Type
 29984 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29985 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29986 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29987 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29988 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29989 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29990 ;;		 -> NULL(0), 
 29991 ;;  pBit            1    2[COMRAM] unsigned char 
 29992 ;;  pValue          1    3[COMRAM] unsigned char 
 29993 ;; Auto vars:     Size  Location     Type
 29994 ;;		None
 29995 ;; Return value:  Size  Location     Type
 29996 ;;                  1    wreg      void 
 29997 ;; Registers used:
 29998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29999 ;; Tracked objects:
 30000 ;;		On entry : 0/0
 30001 ;;		On exit  : 0/0
 30002 ;;		Unchanged: 0/0
 30003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30006 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30007 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30008 ;;Total ram usage:        7 bytes
 30009 ;; Hardware stack levels used:    1
 30010 ;; This function calls:
 30011 ;;		Nothing
 30012 ;; This function is called by:
 30013 ;;		i2_Port_SetPin
 30014 ;; This function uses a non-reentrant model
 30015 ;;
 30016                           
 30017                           	psect	text162
 30018  015542                     __ptext162:
 30019                           	opt stack 0
 30020  015542                     i2_Byte_SetBit:
 30021                           	opt stack 16
 30022                           
 30023                           ;Types.c: 34: pValue &= 1;
 30024                           
 30025                           ;incstack = 0
 30026  015542  0E01               	movlw	1
 30027  015544  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30028                           
 30029                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30030  015546  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30031  01554A  0E01               	movlw	1
 30032  01554C  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30033  01554E  2A05               	incf	??i2_Byte_SetBit,f,c
 30034  015550  D002               	goto	i2u686_44
 30035  015552                     i2u686_45:
 30036  015552  90D8               	bcf	status,0,c
 30037  015554  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30038  015556                     i2u686_44:
 30039  015556  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30040  015558  D7FC               	goto	i2u686_45
 30041  01555A  5006               	movf	??i2_Byte_SetBit+1,w,c
 30042  01555C  0AFF               	xorlw	255
 30043  01555E  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30044  015560  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30045  015564  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30046  015568  5007               	movf	??i2_Byte_SetBit+2,w,c
 30047  01556A  16DF               	andwf	indf2,f,c
 30048                           
 30049                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30050  01556C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30051  015570  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30052  015574  2A05               	incf	??i2_Byte_SetBit,f,c
 30053  015576  D002               	goto	i2u687_44
 30054  015578                     i2u687_45:
 30055  015578  90D8               	bcf	status,0,c
 30056  01557A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30057  01557C                     i2u687_44:
 30058  01557C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30059  01557E  D7FC               	goto	i2u687_45
 30060  015580  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30061  015584  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30062  015588  5006               	movf	??i2_Byte_SetBit+1,w,c
 30063  01558A  12DF               	iorwf	indf2,f,c
 30064  01558C  0012               	return		;funcret
 30065  01558E                     __end_ofi2_Byte_SetBit:
 30066                           	opt stack 0
 30067                           tosu	equ	0xFFF
 30068                           tosh	equ	0xFFE
 30069                           tosl	equ	0xFFD
 30070                           pclatu	equ	0xFFB
 30071                           pclath	equ	0xFFA
 30072                           tblptru	equ	0xFF8
 30073                           tblptrh	equ	0xFF7
 30074                           tblptrl	equ	0xFF6
 30075                           tablat	equ	0xFF5
 30076                           prodh	equ	0xFF4
 30077                           prodl	equ	0xFF3
 30078                           intcon	equ	0xFF2
 30079                           indf0	equ	0xFEF
 30080                           postinc0	equ	0xFEE
 30081                           fsr0h	equ	0xFEA
 30082                           fsr0l	equ	0xFE9
 30083                           wreg	equ	0xFE8
 30084                           indf1	equ	0xFE7
 30085                           postdec1	equ	0xFE5
 30086                           fsr1h	equ	0xFE2
 30087                           fsr1l	equ	0xFE1
 30088                           indf2	equ	0xFDF
 30089                           postinc2	equ	0xFDE
 30090                           postdec2	equ	0xFDD
 30091                           plusw2	equ	0xFDB
 30092                           fsr2h	equ	0xFDA
 30093                           fsr2l	equ	0xFD9
 30094                           status	equ	0xFD8
 30095                           
 30096 ;; *************** function i2_MXK_SwitchTo *****************
 30097 ;; Defined at:
 30098 ;;		line 105 in file "Library/MXK.c"
 30099 ;; Parameters:    Size  Location     Type
 30100 ;;  pModule         1    wreg     enum E6927
 30101 ;; Auto vars:     Size  Location     Type
 30102 ;;  pModule         1    7[COMRAM] enum E6927
 30103 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30104 ;; Return value:  Size  Location     Type
 30105 ;;                  1    wreg      unsigned char 
 30106 ;; Registers used:
 30107 ;;		wreg, status,2, status,0, cstack
 30108 ;; Tracked objects:
 30109 ;;		On entry : 0/0
 30110 ;;		On exit  : 0/0
 30111 ;;		Unchanged: 0/0
 30112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30114 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30116 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30117 ;;Total ram usage:        2 bytes
 30118 ;; Hardware stack levels used:    1
 30119 ;; Hardware stack levels required when called:    1
 30120 ;; This function calls:
 30121 ;;		i2_delay_us
 30122 ;; This function is called by:
 30123 ;;		i2_Motor_Step
 30124 ;; This function uses a non-reentrant model
 30125 ;;
 30126                           
 30127                           	psect	text163
 30128  015A5A                     __ptext163:
 30129                           	opt stack 0
 30130  015A5A                     i2_MXK_SwitchTo:
 30131                           	opt stack 16
 30132                           
 30133                           ;incstack = 0
 30134                           ;i2MXK_SwitchTo@pModule stored from wreg
 30135  015A5A  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30136                           
 30137                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30138  015A5C  5086               	movf	3974,w,c	;volatile
 30139  015A5E  0B0F               	andlw	15
 30140  015A60  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30141                           
 30142                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30143  015A62  504D               	movf	_Bus_State,w,c
 30144  015A64  A4D8               	btfss	status,2,c
 30145  015A66  D002               	goto	i2l1730
 30146                           
 30147                           ;MXK.c: 110: return 0;
 30148  015A68  0E00               	movlw	0
 30149  015A6A  0012               	return	
 30150  015A6C                     i2l1730:
 30151                           
 30152                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30153  015A6C  0E00               	movlw	0
 30154  015A6E  6E4D               	movwf	_Bus_State,c
 30155                           
 30156                           ;MXK.c: 114: if (CUR != pModule)
 30157  015A70  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30158  015A72  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30159  015A74  B4D8               	btfsc	status,2,c
 30160  015A76  D00A               	goto	i2l1732
 30161                           
 30162                           ;MXK.c: 115: {
 30163                           ;MXK.c: 116: PORTG &= ~(0xF);
 30164  015A78  0EF0               	movlw	240
 30165  015A7A  1686               	andwf	3974,f,c	;volatile
 30166                           
 30167                           ;MXK.c: 117: PORTG |= pModule;
 30168  015A7C  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30169  015A7E  1286               	iorwf	3974,f,c	;volatile
 30170                           
 30171                           ;MXK.c: 120: delay_us(10);
 30172  015A80  0E00               	movlw	0
 30173  015A82  6E02               	movwf	i2delay_us@us+1,c
 30174  015A84  0E0A               	movlw	10
 30175  015A86  6E01               	movwf	i2delay_us@us,c
 30176  015A88  EC23  F0AC         	call	i2_delay_us	;wreg free
 30177  015A8C                     i2l1732:
 30178                           
 30179                           ;MXK.c: 121: }
 30180                           ;MXK.c: 122: return 1;
 30181  015A8C  0E01               	movlw	1
 30182  015A8E  0012               	return	
 30183  015A90                     __end_ofi2_MXK_SwitchTo:
 30184                           	opt stack 0
 30185                           tosu	equ	0xFFF
 30186                           tosh	equ	0xFFE
 30187                           tosl	equ	0xFFD
 30188                           pclatu	equ	0xFFB
 30189                           pclath	equ	0xFFA
 30190                           tblptru	equ	0xFF8
 30191                           tblptrh	equ	0xFF7
 30192                           tblptrl	equ	0xFF6
 30193                           tablat	equ	0xFF5
 30194                           prodh	equ	0xFF4
 30195                           prodl	equ	0xFF3
 30196                           intcon	equ	0xFF2
 30197                           indf0	equ	0xFEF
 30198                           postinc0	equ	0xFEE
 30199                           fsr0h	equ	0xFEA
 30200                           fsr0l	equ	0xFE9
 30201                           wreg	equ	0xFE8
 30202                           indf1	equ	0xFE7
 30203                           postdec1	equ	0xFE5
 30204                           fsr1h	equ	0xFE2
 30205                           fsr1l	equ	0xFE1
 30206                           indf2	equ	0xFDF
 30207                           postinc2	equ	0xFDE
 30208                           postdec2	equ	0xFDD
 30209                           plusw2	equ	0xFDB
 30210                           fsr2h	equ	0xFDA
 30211                           fsr2l	equ	0xFD9
 30212                           status	equ	0xFD8
 30213                           
 30214 ;; *************** function i2_delay_us *****************
 30215 ;; Defined at:
 30216 ;;		line 255 in file "Library/Types.c"
 30217 ;; Parameters:    Size  Location     Type
 30218 ;;  us              2    0[COMRAM] unsigned short 
 30219 ;; Auto vars:     Size  Location     Type
 30220 ;;  delay_us        4    2[COMRAM] unsigned long 
 30221 ;; Return value:  Size  Location     Type
 30222 ;;                  1    wreg      void 
 30223 ;; Registers used:
 30224 ;;		wreg, status,2, status,0
 30225 ;; Tracked objects:
 30226 ;;		On entry : 0/0
 30227 ;;		On exit  : 0/0
 30228 ;;		Unchanged: 0/0
 30229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30230 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30231 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30233 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30234 ;;Total ram usage:        6 bytes
 30235 ;; Hardware stack levels used:    1
 30236 ;; This function calls:
 30237 ;;		Nothing
 30238 ;; This function is called by:
 30239 ;;		i2_MXK_SwitchTo
 30240 ;; This function uses a non-reentrant model
 30241 ;;
 30242                           
 30243                           	psect	text164
 30244  015846                     __ptext164:
 30245                           	opt stack 0
 30246  015846                     i2_delay_us:
 30247                           	opt stack 16
 30248                           
 30249                           ;Types.c: 256: unsigned long u;
 30250                           ;Types.c: 257: while (us--) {
 30251                           
 30252                           ;incstack = 0
 30253  015846  D016               	goto	i2u690_40
 30254  015848                     i2l9632:
 30255                           
 30256                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30257  015848  0E00               	movlw	0
 30258  01584A  6E03               	movwf	i2delay_us@u,c
 30259  01584C  0E00               	movlw	0
 30260  01584E  6E04               	movwf	i2delay_us@u+1,c
 30261  015850  0E00               	movlw	0
 30262  015852  6E05               	movwf	i2delay_us@u+2,c
 30263  015854  0E00               	movlw	0
 30264  015856  6E06               	movwf	i2delay_us@u+3,c
 30265  015858                     i2l9634:
 30266  015858  5003               	movf	i2delay_us@u,w,c
 30267  01585A  1004               	iorwf	i2delay_us@u+1,w,c
 30268  01585C  1005               	iorwf	i2delay_us@u+2,w,c
 30269  01585E  1006               	iorwf	i2delay_us@u+3,w,c
 30270  015860  A4D8               	btfss	status,2,c
 30271  015862  D008               	goto	i2u690_40
 30272  015864  F000               	nop		; ;# 
 30273  015866  0E01               	movlw	1
 30274  015868  2603               	addwf	i2delay_us@u,f,c
 30275  01586A  0E00               	movlw	0
 30276  01586C  2204               	addwfc	i2delay_us@u+1,f,c
 30277  01586E  2205               	addwfc	i2delay_us@u+2,f,c
 30278  015870  2206               	addwfc	i2delay_us@u+3,f,c
 30279  015872  D7F2               	goto	i2l9634
 30280  015874                     i2u690_40:
 30281  015874  0601               	decf	i2delay_us@us,f,c
 30282  015876  A0D8               	btfss	status,0,c
 30283  015878  0602               	decf	i2delay_us@us+1,f,c
 30284  01587A  2801               	incf	i2delay_us@us,w,c
 30285  01587C  E1E5               	bnz	i2l9632
 30286  01587E  2802               	incf	i2delay_us@us+1,w,c
 30287  015880  B4D8               	btfsc	status,2,c
 30288  015882  0012               	return	
 30289  015884  D7E1               	goto	i2l832
 30290  015886                     __end_ofi2_delay_us:
 30291                           	opt stack 0
 30292                           tosu	equ	0xFFF
 30293                           tosh	equ	0xFFE
 30294                           tosl	equ	0xFFD
 30295                           pclatu	equ	0xFFB
 30296                           pclath	equ	0xFFA
 30297                           tblptru	equ	0xFF8
 30298                           tblptrh	equ	0xFF7
 30299                           tblptrl	equ	0xFF6
 30300                           tablat	equ	0xFF5
 30301                           prodh	equ	0xFF4
 30302                           prodl	equ	0xFF3
 30303                           intcon	equ	0xFF2
 30304                           indf0	equ	0xFEF
 30305                           postinc0	equ	0xFEE
 30306                           fsr0h	equ	0xFEA
 30307                           fsr0l	equ	0xFE9
 30308                           wreg	equ	0xFE8
 30309                           indf1	equ	0xFE7
 30310                           postdec1	equ	0xFE5
 30311                           fsr1h	equ	0xFE2
 30312                           fsr1l	equ	0xFE1
 30313                           indf2	equ	0xFDF
 30314                           postinc2	equ	0xFDE
 30315                           postdec2	equ	0xFDD
 30316                           plusw2	equ	0xFDB
 30317                           fsr2h	equ	0xFDA
 30318                           fsr2l	equ	0xFD9
 30319                           status	equ	0xFD8
 30320                           
 30321 ;; *************** function i2_MXK_Release *****************
 30322 ;; Defined at:
 30323 ;;		line 130 in file "Library/MXK.c"
 30324 ;; Parameters:    Size  Location     Type
 30325 ;;		None
 30326 ;; Auto vars:     Size  Location     Type
 30327 ;;		None
 30328 ;; Return value:  Size  Location     Type
 30329 ;;                  1    wreg      unsigned char 
 30330 ;; Registers used:
 30331 ;;		wreg, status,2, status,0
 30332 ;; Tracked objects:
 30333 ;;		On entry : 0/0
 30334 ;;		On exit  : 0/0
 30335 ;;		Unchanged: 0/0
 30336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30341 ;;Total ram usage:        0 bytes
 30342 ;; Hardware stack levels used:    1
 30343 ;; This function calls:
 30344 ;;		Nothing
 30345 ;; This function is called by:
 30346 ;;		i2_Motor_Step
 30347 ;; This function uses a non-reentrant model
 30348 ;;
 30349                           
 30350                           	psect	text165
 30351  0160E0                     __ptext165:
 30352                           	opt stack 0
 30353  0160E0                     i2_MXK_Release:
 30354                           	opt stack 17
 30355                           
 30356                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30357                           
 30358                           ;incstack = 0
 30359  0160E0  0E01               	movlw	1
 30360  0160E2  6E4D               	movwf	_Bus_State,c
 30361                           
 30362                           ;MXK.c: 135: return 1;
 30363                           ;	Return value of i2_MXK_Release is never used
 30364  0160E4  0012               	return	
 30365  0160E6                     __end_ofi2_MXK_Release:
 30366                           	opt stack 0
 30367                           tosu	equ	0xFFF
 30368                           tosh	equ	0xFFE
 30369                           tosl	equ	0xFFD
 30370                           pclatu	equ	0xFFB
 30371                           pclath	equ	0xFFA
 30372                           tblptru	equ	0xFF8
 30373                           tblptrh	equ	0xFF7
 30374                           tblptrl	equ	0xFF6
 30375                           tablat	equ	0xFF5
 30376                           prodh	equ	0xFF4
 30377                           prodl	equ	0xFF3
 30378                           intcon	equ	0xFF2
 30379                           indf0	equ	0xFEF
 30380                           postinc0	equ	0xFEE
 30381                           fsr0h	equ	0xFEA
 30382                           fsr0l	equ	0xFE9
 30383                           wreg	equ	0xFE8
 30384                           indf1	equ	0xFE7
 30385                           postdec1	equ	0xFE5
 30386                           fsr1h	equ	0xFE2
 30387                           fsr1l	equ	0xFE1
 30388                           indf2	equ	0xFDF
 30389                           postinc2	equ	0xFDE
 30390                           postdec2	equ	0xFDD
 30391                           plusw2	equ	0xFDB
 30392                           fsr2h	equ	0xFDA
 30393                           fsr2l	equ	0xFD9
 30394                           status	equ	0xFD8
 30395                           
 30396 ;; *************** function i2_MXK_Queue *****************
 30397 ;; Defined at:
 30398 ;;		line 144 in file "Library/MXK.c"
 30399 ;; Parameters:    Size  Location     Type
 30400 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30401 ;;		 -> Absolute function(1), Motor_Step(1), 
 30402 ;; Auto vars:     Size  Location     Type
 30403 ;;		None
 30404 ;; Return value:  Size  Location     Type
 30405 ;;                  1    wreg      void 
 30406 ;; Registers used:
 30407 ;;		wreg, status,2, status,0
 30408 ;; Tracked objects:
 30409 ;;		On entry : 0/0
 30410 ;;		On exit  : 0/0
 30411 ;;		Unchanged: 0/0
 30412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30413 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30416 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30417 ;;Total ram usage:        3 bytes
 30418 ;; Hardware stack levels used:    1
 30419 ;; This function calls:
 30420 ;;		Nothing
 30421 ;; This function is called by:
 30422 ;;		i2_Motor_Step
 30423 ;; This function uses a non-reentrant model
 30424 ;;
 30425                           
 30426                           	psect	text166
 30427  016054                     __ptext166:
 30428                           	opt stack 0
 30429  016054                     i2_MXK_Queue:
 30430                           	opt stack 17
 30431                           
 30432                           ;MXK.c: 146: lQueue = pCallback;
 30433                           
 30434                           ;incstack = 0
 30435  016054  C001  F0E6         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30436  016058  C002  F0E7         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30437  01605C  C003  F0E8         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30438  016060  0012               	return		;funcret
 30439  016062                     __end_ofi2_MXK_Queue:
 30440                           	opt stack 0
 30441                           tosu	equ	0xFFF
 30442                           tosh	equ	0xFFE
 30443                           tosl	equ	0xFFD
 30444                           pclatu	equ	0xFFB
 30445                           pclath	equ	0xFFA
 30446                           tblptru	equ	0xFF8
 30447                           tblptrh	equ	0xFF7
 30448                           tblptrl	equ	0xFF6
 30449                           tablat	equ	0xFF5
 30450                           prodh	equ	0xFF4
 30451                           prodl	equ	0xFF3
 30452                           intcon	equ	0xFF2
 30453                           indf0	equ	0xFEF
 30454                           postinc0	equ	0xFEE
 30455                           fsr0h	equ	0xFEA
 30456                           fsr0l	equ	0xFE9
 30457                           wreg	equ	0xFE8
 30458                           indf1	equ	0xFE7
 30459                           postdec1	equ	0xFE5
 30460                           fsr1h	equ	0xFE2
 30461                           fsr1l	equ	0xFE1
 30462                           indf2	equ	0xFDF
 30463                           postinc2	equ	0xFDE
 30464                           postdec2	equ	0xFDD
 30465                           plusw2	equ	0xFDB
 30466                           fsr2h	equ	0xFDA
 30467                           fsr2l	equ	0xFD9
 30468                           status	equ	0xFD8
 30469                           tosu	equ	0xFFF
 30470                           tosh	equ	0xFFE
 30471                           tosl	equ	0xFFD
 30472                           pclatu	equ	0xFFB
 30473                           pclath	equ	0xFFA
 30474                           tblptru	equ	0xFF8
 30475                           tblptrh	equ	0xFF7
 30476                           tblptrl	equ	0xFF6
 30477                           tablat	equ	0xFF5
 30478                           prodh	equ	0xFF4
 30479                           prodl	equ	0xFF3
 30480                           intcon	equ	0xFF2
 30481                           indf0	equ	0xFEF
 30482                           postinc0	equ	0xFEE
 30483                           fsr0h	equ	0xFEA
 30484                           fsr0l	equ	0xFE9
 30485                           wreg	equ	0xFE8
 30486                           indf1	equ	0xFE7
 30487                           postdec1	equ	0xFE5
 30488                           fsr1h	equ	0xFE2
 30489                           fsr1l	equ	0xFE1
 30490                           indf2	equ	0xFDF
 30491                           postinc2	equ	0xFDE
 30492                           postdec2	equ	0xFDD
 30493                           plusw2	equ	0xFDB
 30494                           fsr2h	equ	0xFDA
 30495                           fsr2l	equ	0xFD9
 30496                           status	equ	0xFD8
 30497                           
 30498                           	psect	text167
 30499  000000                     __ptext167:
 30500                           	opt stack 0
 30501                           tosu	equ	0xFFF
 30502                           tosh	equ	0xFFE
 30503                           tosl	equ	0xFFD
 30504                           pclatu	equ	0xFFB
 30505                           pclath	equ	0xFFA
 30506                           tblptru	equ	0xFF8
 30507                           tblptrh	equ	0xFF7
 30508                           tblptrl	equ	0xFF6
 30509                           tablat	equ	0xFF5
 30510                           prodh	equ	0xFF4
 30511                           prodl	equ	0xFF3
 30512                           intcon	equ	0xFF2
 30513                           indf0	equ	0xFEF
 30514                           postinc0	equ	0xFEE
 30515                           fsr0h	equ	0xFEA
 30516                           fsr0l	equ	0xFE9
 30517                           wreg	equ	0xFE8
 30518                           indf1	equ	0xFE7
 30519                           postdec1	equ	0xFE5
 30520                           fsr1h	equ	0xFE2
 30521                           fsr1l	equ	0xFE1
 30522                           indf2	equ	0xFDF
 30523                           postinc2	equ	0xFDE
 30524                           postdec2	equ	0xFDD
 30525                           plusw2	equ	0xFDB
 30526                           fsr2h	equ	0xFDA
 30527                           fsr2l	equ	0xFD9
 30528                           status	equ	0xFD8
 30529                           
 30530                           	psect	rparam
 30531  0000                     tosu	equ	0xFFF
 30532                           tosh	equ	0xFFE
 30533                           tosl	equ	0xFFD
 30534                           pclatu	equ	0xFFB
 30535                           pclath	equ	0xFFA
 30536                           tblptru	equ	0xFF8
 30537                           tblptrh	equ	0xFF7
 30538                           tblptrl	equ	0xFF6
 30539                           tablat	equ	0xFF5
 30540                           prodh	equ	0xFF4
 30541                           prodl	equ	0xFF3
 30542                           intcon	equ	0xFF2
 30543                           indf0	equ	0xFEF
 30544                           postinc0	equ	0xFEE
 30545                           fsr0h	equ	0xFEA
 30546                           fsr0l	equ	0xFE9
 30547                           wreg	equ	0xFE8
 30548                           indf1	equ	0xFE7
 30549                           postdec1	equ	0xFE5
 30550                           fsr1h	equ	0xFE2
 30551                           fsr1l	equ	0xFE1
 30552                           indf2	equ	0xFDF
 30553                           postinc2	equ	0xFDE
 30554                           postdec2	equ	0xFDD
 30555                           plusw2	equ	0xFDB
 30556                           fsr2h	equ	0xFDA
 30557                           fsr2l	equ	0xFD9
 30558                           status	equ	0xFD8
 30559                           
 30560                           	psect	temp
 30561  000051                     btemp:
 30562                           	opt stack 0
 30563  000051                     	ds	1
 30564  0000                     int$flags	set	btemp
 30565  0000                     wtemp6	set	btemp+1
 30566                           tosu	equ	0xFFF
 30567                           tosh	equ	0xFFE
 30568                           tosl	equ	0xFFD
 30569                           pclatu	equ	0xFFB
 30570                           pclath	equ	0xFFA
 30571                           tblptru	equ	0xFF8
 30572                           tblptrh	equ	0xFF7
 30573                           tblptrl	equ	0xFF6
 30574                           tablat	equ	0xFF5
 30575                           prodh	equ	0xFF4
 30576                           prodl	equ	0xFF3
 30577                           intcon	equ	0xFF2
 30578                           indf0	equ	0xFEF
 30579                           postinc0	equ	0xFEE
 30580                           fsr0h	equ	0xFEA
 30581                           fsr0l	equ	0xFE9
 30582                           wreg	equ	0xFE8
 30583                           indf1	equ	0xFE7
 30584                           postdec1	equ	0xFE5
 30585                           fsr1h	equ	0xFE2
 30586                           fsr1l	equ	0xFE1
 30587                           indf2	equ	0xFDF
 30588                           postinc2	equ	0xFDE
 30589                           postdec2	equ	0xFDD
 30590                           plusw2	equ	0xFDB
 30591                           fsr2h	equ	0xFDA
 30592                           fsr2l	equ	0xFD9
 30593                           status	equ	0xFD8


Data Sizes:
    Strings     386
    Constant    806
    Data        33
    BSS         820
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    134     150
    BANK1           256      0     256
    BANK2           256      0     241
    BANK3           256     24      24
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[6]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 30
		 -> STR_72(CODE[12]), STR_71(CODE[19]), STR_70(CODE[19]), STR_69(CODE[19]), 
		 -> STR_68(CODE[19]), STR_67(CODE[19]), STR_66(CODE[19]), STR_65(CODE[19]), 
		 -> STR_64(CODE[19]), STR_63(CODE[16]), STR_62(CODE[28]), STR_61(CODE[3]), 
		 -> STR_60(CODE[19]), STR_59(CODE[19]), STR_58(CODE[19]), STR_57(CODE[19]), 
		 -> STR_56(CODE[19]), STR_55(CODE[19]), STR_54(CODE[19]), STR_53(CODE[19]), 
		 -> STR_52(CODE[11]), STR_51(CODE[23]), STR_50(CODE[3]), STR_49(CODE[19]), 
		 -> STR_48(CODE[19]), STR_47(CODE[19]), STR_46(CODE[19]), STR_45(CODE[19]), 
		 -> STR_44(CODE[19]), STR_43(CODE[19]), STR_42(CODE[19]), STR_41(CODE[22]), 
		 -> STR_40(CODE[3]), STR_39(CODE[19]), STR_38(CODE[19]), STR_37(CODE[19]), 
		 -> STR_36(CODE[19]), STR_35(CODE[28]), STR_34(CODE[28]), STR_33(CODE[30]), 
		 -> STR_32(CODE[28]), STR_31(CODE[15]), STR_30(CODE[3]), STR_29(CODE[21]), 
		 -> STR_28(CODE[3]), STR_27(CODE[19]), STR_26(CODE[28]), STR_25(CODE[20]), 
		 -> STR_24(CODE[3]), STR_23(CODE[19]), STR_22(CODE[19]), STR_21(CODE[19]), 
		 -> STR_20(CODE[19]), STR_19(CODE[19]), STR_18(CODE[19]), STR_17(CODE[19]), 
		 -> STR_16(CODE[19]), STR_15(CODE[3]), STR_14(CODE[19]), STR_13(CODE[28]), 
		 -> STR_12(CODE[20]), STR_11(CODE[3]), STR_10(CODE[19]), STR_9(CODE[19]), 
		 -> STR_8(CODE[19]), STR_7(CODE[19]), STR_6(CODE[19]), STR_5(CODE[19]), 
		 -> STR_4(CODE[19]), STR_3(CODE[16]), STR_2(CODE[19]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK2[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_Sensor_Observe
    _main->_Sensor_Observe2
    _Turn->_eusartSend
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Robot_Init->_UpdateDistance
    _UpdateDistance->_eusartSend
    _Robot_Stop->_eusartSend
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _LEDOn->_eusartSend
    _LEDOff->_eusartSend
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _Get_Sensor_State->_eusartSend
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Drive->_eusartSend
    _Closest_Object2->_ADCAverage
    _SteppingCW->_delay_ms
    _Closest_Object->_ADCAverage
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _SteppingCCW->_delay_ms
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADCAverage->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    ___fltol->___fladd
    _eval_poly->___fladd
    ___flmul->___xxtofl
    ___flsub->___fladd
    ___fladd->___flneg
    ___flneg->___flmul
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _BangBang->_eusartSend

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_ADCAverage
    _Sensor_Observe2->_ADCAverage
    _Sensor_Observe->_ADCAverage
    _Closest_Object2->_ADCAverage
    _Closest_Object->_ADCAverage

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0 2031261
                                            123 BANK0     11    11      0
                         _ADCAverage
                           _BangBang
                     _Closest_Object
                    _Closest_Object2
                       _Console_Init
                     _Console_Render
                              _Drive
                    _FunctInitButton
                   _Get_Sensor_State
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                            _InitADC
            _InitSerialCommunication
                        _Init_Timer0
                           _LCD_Init
                          _LEDToggle
                           _LED_Init
                            _LED_Set
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                    _Reset_variables
                         _Robot_Init
                         _Robot_Stop
                     _Sensor_Observe
                    _Sensor_Observe2
                               _Turn
                     _UpdateDistance
                           _delay_ms
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Turn                                                10     4      6     778
                                              1 BANK0     10     4      6
                         _Robot_Stop
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe2                                      2     2      0  158592
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Sensor_Observe                                       2     2      0  158592
                                            121 BANK0      2     2      0
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _Robot_Init                                           0     0      0      93
                         _Robot_Stop
                     _UpdateDistance
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _UpdateDistance                                       2     0      2      31
                                              1 BANK0      2     0      2
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _Robot_Stop                                           0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Reset_variables                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  364440
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   86131
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   31288
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LEDToggle                                            0     0      0      62
                             _LEDOff
                              _LEDOn
 ---------------------------------------------------------------------------------
 (2) _LEDOn                                                0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _LEDOff                                               0     0      0      31
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  293556
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  263181
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   95805
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _Init_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSerialCommunication                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitADC                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84861
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84861
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37493
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Get_Sensor_State                                     0     0      0      31
                          _eusartRec
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartRec                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Drive                                                4     2      2     561
                                              1 BANK0      4     2      2
                         _eusartSend
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Closest_Object2                                      0     0      0  158592
                         _ADCAverage
                     _Console_Render
                         _SteppingCW
                             _printf
 ---------------------------------------------------------------------------------
 (2) _SteppingCW                                           0     0      0    2686
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _Closest_Object                                       0     0      0  158592
                         _ADCAverage
                     _Console_Render
                        _SteppingCCW
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4   15540
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SteppingCCW                                          0     0      0    2686
                               _STP1
                               _STP2
                               _STP3
                               _STP4
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    2686
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _STP4                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP3                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP2                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (3) _STP1                                                 0     0      0       0
                         _Coil_Setup
 ---------------------------------------------------------------------------------
 (4) _Coil_Setup                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADCAverage                                          26    26      0  104735
                                            119 BANK0      2     2      0
                                              0 BANK3     24    24      0
                       _FunctReadADC
                         _HMI_Render
                      _HMI_SetNumber
                            ___awdiv
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _pow
 ---------------------------------------------------------------------------------
 (3) _pow                                                 21    13      8   81724
                                             98 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (4) _log                                                  6     2      4   26512
                                             79 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _exp                                                 11     7      4   43838
                                             87 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (5) _ldexp                                                8     2      6     663
                                             79 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (5) _floor                                               10     6      4   11207
                                             73 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4    1692
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (6) ___fltol                                             10     6      4     945
                                             63 BANK0     10     6      4
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           16     8      8   12261
                                             63 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (6) ___flmul                                             25    17      8    5457
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    6271
                                             63 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             20    12      8    5638
                                             43 BANK0     20    12      8
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flneg                                              4     0      4     673
                                             39 BANK0      4     0      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _HMI_SetNumber                                        2     0      2    4398
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (4) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (5) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (5) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _FunctReadADC                                         2     0      2     214
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _BangBang                                             8     0      8    3195
                                              1 BANK0      8     0      8
                         _eusartSend
 ---------------------------------------------------------------------------------
 (2) _eusartSend                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCAverage
     _FunctReadADC
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     ___awdiv
     ___fladd
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___wmul
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
   _BangBang
     _eusartSend
   _Closest_Object
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Closest_Object2
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Drive
     _eusartSend
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _Get_Sensor_State
     _eusartRec
     _eusartSend
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _InitADC *
   _InitSerialCommunication *
   _Init_Timer0 *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _LEDToggle *
     _LEDOff
       _eusartSend
     _LEDOn
       _eusartSend
   _LED_Init *
     _LED_Set
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
   _LED_Set *
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Reset_variables *
   _Robot_Init *
     _Robot_Stop
       _eusartSend
     _UpdateDistance
       _eusartRec
       _eusartSend
     _eusartSend
   _Robot_Stop *
     _eusartSend
   _Sensor_Observe *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Sensor_Observe2 *
     _ADCAverage
       _FunctReadADC
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       ___awdiv
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___wmul
       ___xxtofl
       _pow
         ___flge
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _exp
           ___fldiv
           ___flge
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flneg
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___flsub
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _floor
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___fladd
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___flneg (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul
                 ___xxtofl (ARG)
                 _frexp (ARG)
         _log
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl
           _eval_poly
             ___fladd
               ___flmul (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flneg (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul
               ___xxtofl (ARG)
               _frexp (ARG)
           _frexp
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _SteppingCCW
       _STP1
         _Coil_Setup
       _STP2
         _Coil_Setup
       _STP3
         _Coil_Setup
       _STP4
         _Coil_Setup
       _delay_ms
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _Turn *
     _Robot_Stop
       _eusartSend
     _eusartRec
     _eusartSend
   _UpdateDistance *
     _eusartRec
     _eusartSend
   _delay_ms *
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     18      18      11        9.4%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      F1       9       94.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      96       5       93.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2EF      12        0.0%
DATA                 0      0     41B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed May 16 13:57:44 2018

                   i2_Timer0_Stop 60DA                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 0038                      i2_Motor_Step 3C02  
                               _A 01FD                                 l8 406E  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 01FE                                 _i 0144  
                               _j 0143                                 _l 004F  
                               _u 0142                                 _w 0050  
                               _x 0120                      ___fldiv@sign 006C  
               ??_Reset_variables 0060                                l11 34E6  
                              l12 34D4                                l90 31AA  
                              l87 3124               __size_of_ADCAverage 030E  
                              l89 3184                  ??_UpdateDistance 0063  
                    ___awdiv@sign 0065               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 5F80                LCD_DrawField@pSize 0078  
              LCD_DrawField@count 007E                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 606E                               l120 457A  
                             l121 4590                               l122 45A6  
                             l220 51FA                               l117 45BC  
                             l221 51CA                               l118 4566  
                             l230 5640                               l222 520A  
                             l223 51E2                       ?_LED_Toggle 0001  
                             l234 5834                               l235 580C  
                             l227 5658                               l403 2AE2  
                             l412 2802                               l228 5628  
                             l340 4790                               l404 2A82  
                             l421 279E                               l413 26B4  
                             l237 5820                               l341 479A  
                             l405 2B12                     ??_Console_Tab 0068  
                             l414 281E                               l430 3F9E  
                             l350 485E                               l342 47A4  
                             l510 2320                               l406 2A9A  
                             l183 4A02                               l415 26D6  
                             l351 480C                               l343 47AE  
                             l511 2416                               l407 2AB2  
                             l184 49E2                               l600 07A2  
                             l432 3FC4                               l344 47B8  
                             l512 2340                               l408 2ACA  
                             l417 273A                               l601 08F4  
                             l433 3FF0                               l353 4818  
                             l337 47D6                               l345 47C2  
                             l610 096C                               l602 07CE  
                             l354 4822                               l346 47CC  
                             l338 4784                               l370 4730  
                             l611 09B2                               l603 0904  
                             l427 4018                               l355 482C  
                             l363 474E                               l371 473A  
                             l531 19D6                       ?_HMI_GetBar 0001  
                             l612 09F8                               l604 085E  
                             l356 4836                               l372 4744  
                             l364 46FC                               l532 19F8  
                             l516 2380                               l357 4840  
                             l509 23FC                               l614 0ACA  
                             l358 484A                               l366 4708  
                             l526 1A18                               l615 0AC2  
                             l607 0A3E                               l359 4854  
                             l367 4712                               l519 23C0  
                             l616 0ADC                               l608 0926  
                             l368 471C                               l528 1A36  
                             l393 5456                               l617 0AC6  
                             l609 0A5C                               l369 4726  
                             l529 19B8                               l483 1FE0  
                             l900 1AF2                               l732 4B5A  
                             l476 20A8                               l901 1AF6  
                             l733 4B54                               l389 5106  
                             l477 1F38                               l397 5802  
                             l910 1B1A                               l902 1AFA  
                             l726 4692                               l478 20C4  
                             l486 2044                               l654 5C76  
                             l911 1B1E                               l903 1AFE  
                             l727 468C                               l479 1F7C  
                             l655 5C6E                               l912 1B22  
                             l904 1B02                               l824 516A  
                             l832 56FC                               l681 4E4E  
                             l913 1B26                               l905 1B06  
                             l921 5300                               l673 5B4C  
                             l657 5C72                               l914 1B2A  
                             l906 1B0A                               l922 52D0  
                             l930 3EFC                               l915 1B2E  
                             l907 1B0E                               l819 5046  
                             l684 4E64                               l916 1B32  
                             l908 1B12                               l860 1A52  
                             l853 1B3A                               l917 1B36  
                             l909 1B16                               l861 1A56  
                             l781 5B18                               l597 07AC  
                             l678 4E8A                               l686 4E74  
                             l870 1A7A                               l862 1A5A  
                             l854 1A3E                               l598 0798  
                             l679 4E3E                               l871 1A7E  
                             l863 1A5E                               l599 07BC  
                             l880 1AA2                               l872 1A82  
                             l864 1A62                               l856 1A42  
                             l928 3F6E                               l776 59D6  
                             l881 1AA6                               l873 1A86  
                             l865 1A66                               l857 1A46  
                             l929 3F46                               l890 1ACA  
                             l882 1AAA                               l874 1A8A  
                             l866 1A6A                               l858 1A4A  
                             l891 1ACE                               l883 1AAE  
                             l875 1A8E                               l867 1A6E  
                             l859 1A4E                               l892 1AD2  
                             l884 1AB2                               l876 1A92  
                             l868 1A72                               l893 1AD6  
                             l885 1AB6                               l877 1A96  
                             l869 1A76                               l894 1ADA  
                             l886 1ABA                               l878 1A9A  
                             l990 4DE6                               l895 1ADE  
                             l887 1ABE                               l879 1A9E  
                             l983 4A72                               l896 1AE2  
                             l888 1AC2                               l992 4DF2  
                             l984 4A18                               l976 4EBE  
                             l897 1AE6                               l889 1AC6  
                             l985 4A70                               l898 1AEA  
                             l978 4ECA                               l899 1AEE  
                             l997 546E                               l999 548C  
                             _RA2 007C02                               _RA3 007C03  
                             _RD5 007C1D                               _RD7 007C1F  
                             _PR2 000FCB                               _exp 1CBC  
                             _log 2B2A                               _mod 0132  
                             _val 0136                               _pow 2142  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 0079  
                    _Word_GetPair 5AF8                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 0067  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                      _TXSTA1bits 000FAD                      Console_Tab@c 006F  
                    Console_Tab@i 006E               LCD_DrawField@pField 0072  
                    Console_Tab@t 006D                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 5846  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 566A           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 4190                      ___fltol@exp1 00A8  
                    _Word_SetPair 59B2                              l1000 54A4  
                            l1010 44F6                              l1004 5242  
                   ?_Byte_GetZone 0060                              l1005 5268  
                            l1200 438A                              l1040 2F66  
                            l1201 43D2                              l1009 4502  
                            l1041 2F6C                              l1202 43E6  
                            l1042 2F72                              l1043 2F78  
                            l1204 440A                              l1036 3074  
                            l1044 2F7E                              l1205 43F6  
                            l1045 2F84                              l1037 2F60  
                            l1062 2636                              l1207 4418  
                            l1063 2664                              l1047 3002  
                            l1056 250C                              l1057 2684  
                            l1153 29B4                              l1146 4D7E  
                            l1082 4294                              l1058 2512  
                            l2210 375E                              l2131 1284  
                            l1059 2536                              l2211 378C  
                            l2124 591E                              l1084 429C  
                            l1077 4268                              l1158 5A58  
                            l2302 2D82                              l2230 413C  
                            l2118 5526                              l2222 3ABC  
                            l2127 592E                              l1079 4274  
                            l2303 2DDC                              l2119 5506  
                            l2223 3A8A                              l2304 2D88  
                            l2216 4BEC                              l2224 3AB8  
                            l2217 4B88                              l2209 3790  
                            l2241 0046                              l2162 5796  
                            l2250 02C0                              l2243 00F0  
                            l2244 00FE                              l2229 417C  
                            l2253 02EE                              l2245 010C  
                            l2510 3688                              l1630 395C  
                            l2166 4C1A                              l2270 0720  
                            l2262 0486                              l2246 011A  
                            l1631 39AC                              l2263 05C6  
                            l2255 0442                              l1632 3996  
                            l2272 0772                              l2256 041C  
                            l2248 01DC                              l2185 58C2  
                            l2514 5BA8                              l2290 2CDE  
                            l1730 5954                              l2266 060C  
                            l2507 35D8                              l1627 39EC  
                            l2259 0782                              l2267 065E  
                            l2508 360C                              l2540 3E62  
                            l1724 59F8                              l1732 5974  
                            l1628 39E2                              l2268 06A4  
                            l2509 364A                              l1629 3974  
                            l2269 06F6                              l1726 5A20  
                            l2711 5334                              l2295 2D10  
                            l1735 5EAA                              l2712 532C  
                            l2800 11AE                              l2296 2CC2  
                            l2288 2CAA                              l2721 5758  
                            l2545 3E96                              l2537 3E06  
                            l2297 2CD6                              l2289 2CBA  
                            l2722 5750                              l2482 48F2  
                            l2546 3E8A                              l2298 2D3A  
                            l2715 5354                              l2483 48FC  
                            l2475 48A4                              l2539 3E72  
                            l1827 3256                              l2716 535E  
                            l2484 490A                              l2476 48B4  
                            l2820 163E                              l2812 154A  
                            l2548 3EB2                              l1828 3272  
                            l2725 5770                              l2813 1546  
                            l2901 1CDC                              l2741 219C  
                            l2726 577A                              l2478 48D2  
                            l2822 1664                              l2742 2188  
                            l2662 4978                              l2479 48CA  
                            l2815 1590                              l2751 0EBE  
                            l2903 1D24                              l2663 4986  
                            l2832 16D2                              l2808 150A  
                            l2760 0F26                              l2752 0EBA  
                            l2912 3826                              l2904 1D6C  
                            l2744 21BA                              l2825 169A  
                            l2817 15B8                              l2809 1506  
                            l2921 4310                              l2913 3814  
                            l2905 1DA2                              l2745 225C  
                            l1873 5AF0                              l2834 1716  
                            l2826 167C                              l2818 1666  
                            l2770 1002                              l2842 0B6C  
                            l2930 3D9A                              l2906 1F1E  
                            l2746 2232                              l2658 4944  
                            l2835 173A                              l2819 1616  
                            l2763 0FDE                              l2843 0B68  
                            l2915 3844                              l2907 1EE8  
                            l2747 2306                              l2659 4938  
                            l2836 1764                              l2764 0FBC  
                            l2756 0F06                              l2860 0DD2  
                            l2844 0B7C                              l2916 38DE  
                            l2837 1770                              l2773 1026  
                            l2765 0FCA                              l2757 0F02  
                            l2853 0D9A                              l2925 3D22  
                            l2838 1772                              l2782 10F8  
                            l2774 102A                              l2766 0FCE  
                            l2862 0E16                              l2854 0D7C  
                            l2846 0BAC                              l2870 2E48  
                            l2791 1138                              l2759 0F62  
                            l2863 0E34                              l2847 0BA8  
                            l2951 3BE6                              l2871 2E58  
                            l2927 3D70                              l2943 2B4E  
                            l2784 110E                              l2848 0BBC  
                            l2952 3B4E                              l2880 2EF8  
                            l2872 2E76                              l2777 10C4  
                            l2769 103C                              l2865 0E58  
                            l2849 0BDA                              l2881 2EEC  
                            l2929 3DAA                              l2945 2B78  
                            l2794 117E                              l2786 1118  
                            l2866 0E76                              l2874 2E88  
                            l2779 10D4                              l2875 2E7C  
                            l2885 2F16                              l2877 2EC6  
                            l2798 11A4                              l2886 2F48  
                            l2878 2EAE                              l2799 11AC  
                            ?_exp 00B7                              ?_log 00AF  
                  ??_Console_Init 0060                              _ADON 007E10  
           Port_SetPinType@pInput 0086                              ?_pow 00C2  
                            STR_1 FFFC                              STR_2 FF7D  
                            STR_3 FFB6                              STR_4 FF7D  
                            STR_5 FF7D                              STR_6 FF7D  
                            STR_7 FF7D                              STR_8 FF7D  
                            STR_9 FF7D                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 0018  
                            _LATG 000F8F               __end_of_GetPortPORT 488E  
                            _PIR1 000F9E                              _PIR2 000FA1  
                            _PIR3 000FA4               __end_of_GetPortTRIS 477E  
                            u9610 4E22                              u9450 4B2E  
                            u9620 4E26                              u9700 5260  
                            u9524 537E                              u9525 537A  
                            u9470 4B78                              u9534 53A6  
                            u9535 53A2                              u9800 0F92  
                            u9457 4B24                              u9810 0FA2  
                            u9554 46BA                              u9490 4FF4  
                            u9635 6018                              u9555 46B6  
                            u9475 4B74                              _SPI1 02C8  
                            u9820 0FA4                              u9636 601A  
                            u9564 46E2                              _SPI2 0180  
                            u9565 46DE                              u9670 59A4  
                            u9850 0FE6                              u9690 523E  
                            u9675 59A0                              _TMR0 000FD6  
                            u9980 111C                              _STP1 60C0  
                            _STP2 60B8                              _STP3 60B0  
                            _STP4 60A8                              _gISR 0108  
              Event_DIPSwitch@Bar 007A                     ??_Byte_GetBit 0063  
                            _Turn 4C00                SPI_MaxSpeed@pInput 006F  
                   ?_Byte_SetByte 0060                     ?_Byte_SetPair 006B  
                 __end_of_SPI_DCS 5B5A                              _main 0000  
                            _mode 0031                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 006B                              _itos 3EC4  
                            _test 011C                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 0060                              btemp 0051  
                            _zero 01FF                              exp@x 00B7  
                            log@x 00AF                     ??_Byte_SetBit 0064  
                            pow@x 00C2                              pow@y 00C6  
              __size_of_LCD_Reset 0050                              prodh 000FF4  
                            prodl 000FF3                              start 14AA  
              __size_of_LCD_Write 0020                     __CFG_IESO$OFF 000000  
                 ___fldiv@new_exp 0071                   ?_SPI_DisableISR 0060  
              __size_of_LEDToggle 003E               HMI_SetButton@pValue 0066  
                      _Cliff_Left 013C                     Console_Init@x 0062  
                   Console_Init@y 0063                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FE23                   __end_of_InitADC 5542  
            Set_Rotation@rotation 0066         __size_of_Get_Sensor_State 0018  
                   ??_Init_Timer0 0060            __size_of_HMI_SetButton 007A  
          __size_of_HMI_SetNumber 0026                       ?_ISR_Enable 0001  
                           ??_exp 00BB                             ??_log 00B3  
                           ??_pow 00CA      __size_of_Console_ClearCursor 0030  
                __end_of_LCD_Fill 56B2                  __end_of_LCD_Init 31F2  
                           ?_STP1 0001                             ?_STP2 0001  
                           ?_STP3 0001                             ?_STP4 0001  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 5218                      _BAUDCON1bits 000F7E  
                      _Coil_Setup 5FF8                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 29B6                             l12510 4DEA  
                           l12504 4DDE                             l14048 4D76  
                           l15104 31B6                             l12396 36C0  
                           l14156 1EE8                             l14254 52A4  
                           l15054 2D3E                             ?_Turn 0061  
                           l14530 5A2E                             l15250 4EB6  
                           l13556 440A                             l13494 3F5A  
                           l15094 3124                             l13680 1764  
                           l15256 4EC2                             l14482 426C  
                           l14476 4260                             l13844 516A  
                           l13852 51A0                             l13846 517C  
                           l15278 2992                  __end_of_HMI_Poll 50AA  
                           l13936 3256                             l14666 604A  
                           l14834 2A7A                             l15486 58A2  
                           l13984 56FC                             l13986 570E  
                           l14876 252E                             l14796 5696  
                           _I2C1T 0041                             _I2C2T 01C7  
                   ___fltol@sign1 00A7                   __end_of___fladd 11CA  
                           ?_main 0001                   __end_of___fldiv 178E  
                 __end_of___awdiv 4914                   __end_of___flneg 5BBA  
                           _ADRES 000FC3                             ?_itos 006C  
                           STR_10 FF7D                             STR_11 FFFC  
                           STR_20 FF7D                             STR_12 FF69  
                           STR_21 FF7D                             STR_13 FF0B  
                           STR_22 FF7D                             STR_30 FFFC  
                           STR_14 FFA3                             STR_23 FF7D  
                           STR_15 FFFC                             STR_31 FFD6  
                           STR_16 FF7D                             STR_40 FFFC  
                           STR_24 FFFC                             STR_32 FEB7  
                           STR_25 FF69                             STR_17 FF90  
                           STR_41 FF3E                             STR_33 FE7D  
                           STR_42 FF7D                             STR_18 FF7D  
                           STR_50 FFFC                             STR_26 FF0B  
                           STR_34 FE9B                             STR_43 FF7D  
                           STR_19 FF7D                             STR_27 FFA3  
                           STR_51 FF27                             STR_35 FEEF  
                           STR_60 FF7D                             STR_44 FF7D  
                           STR_36 FF7D                             STR_28 FFFC  
                           STR_52 FFF1                             STR_53 FF7D  
                           STR_45 FF7D                             STR_37 FF7D  
                           STR_61 FFFC                             STR_29 FF54  
                           STR_70 FF7D                             STR_54 FF7D  
                           STR_46 FF7D                             STR_38 FF7D  
                           STR_62 FED3                             STR_71 FF7D  
                           STR_55 FF7D                             STR_47 FF7D  
                           STR_39 FF7D                             STR_63 FFC6  
                           STR_64 FF7D                             STR_56 FF7D  
                           STR_48 FF7D                             STR_72 FFE5  
                           STR_65 FF7D                             STR_57 FF7D  
                           STR_49 FF7D                             STR_66 FF7D  
                           STR_58 FF7D                             STR_67 FF7D  
                           STR_59 FF7D                             STR_68 FF7D  
                           STR_69 FF7D                   __end_of___flmul 0E8C  
                 __end_of___flsub 56FA                   __end_of___fltol 3EC4  
                           u10010 1134                   _Event_DIPSwitch 5D0C  
                 __end_of___lldiv 4998                             u10060 118A  
                           u11100 3D42                             u11020 4948  
                           u10230 0DCE                             u10320 48D6  
                           u10170 0BC8                             u10410 3E24  
                           u10260 0E24                             u10180 0D3E  
                           u11060 3832                             u11108 3D46  
                           u10510 575C                             u10270 0E42  
                           u12030 56AE                             u11310 572C  
                           u10415 3E1A                             u12120 2672  
                           u11240 58F4                             u12008 358C  
                           u10185 0D34                             u10450 3E9C  
                           u11180 51A0                             u11404 4AE4  
         __size_of_HMI_LeftSwitch 0014                             u12060 2B18  
                 ___awdiv@divisor 0062                             u11405 4AE0  
                           u11245 58F0                             u11270 32B8  
                           u11255 3212                             u10480 5338  
                           u10640 4338                             u11290 5C36  
                           u11530 52BC                             u12250 2D70  
                           u12330 31B6                             u12170 393A  
                           u11460 1D74                             u12180 394E  
                           u11605 17C2                             u11390 4DBC  
                           u10590 2F02                             u11470 1D76  
                           u11710 42CE                             u12270 2DE6  
                           u12190 3988                             u11295 5C32  
                           u11615 17D4                             u10648 433C  
                           u11720 42D6                             u11385 4D8C  
                           u11625 17EC                             u10690 3F5A  
                           u11635 18E6                             u10940 16CE  
                           u11645 193A                             u12550 4F0E  
                           u11655 1968                             u11665 1996  
                           u10970 1724                             u11850 2214  
                           u11595 17B0                             u10980 1748  
                           u14228 5AA0                             u14308 00CA  
                           u14229 5AB4                             u14309 00DE  
                           u11790 5914                             u14440 047C  
                           u11948 40D2                             u14460 05A2  
                           u11958 3486                             u14278 006A  
                           u11959 349A                             u14279 007E  
                           u14560 077A                             u14528 0728  
                           u14288 008A                             u14529 073C  
                           u14289 009E                             u14298 00AA  
                           u14299 00BE                             u14548 074A  
                           u14549 075E                             _INDEX 003C  
                 __end_of___lwdiv 5368                             _LEDOn 5E2E  
                           _MASKS FC33                   __end_of___lwmod 5784  
                           i2l430 41A8                             i2l432 41CE  
                           i2l433 41F8                             i2l427 421E  
                           i2l732 4D38                             i2l733 4D32  
                           i2l832 5848                             i2l781 5BD8  
                 ___awdiv@counter 0064                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0014                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                           _T_VAR 002F                  ??i2_Byte_GetPair 000D  
                           _Drive 5784                     ?_FunctReadADC 0060  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 0076  
         __size_of_Sensor_Observe 0104                    __CFG_FCMEN$OFF 000000  
                           _PortA 02E7                             _PortB 01A9  
                           _PortC 01B3                             _PortD 019F  
                           _PortE 0195                             _PortF 01BD  
                           _PortG 018B           __end_of_Port_SetPinType 283A  
                 _ADC_Initialised 0145                    ??_Byte_GetPair 006C  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 0075  
                 __end_of_dpowers FC33                    ??_Byte_GetZone 0065  
                           _count 012C                             _floor 37DA  
                           _ldexp 3D02                    Button_Poll@Pin 0083  
                           _frexp 42E0                             _errno 011A  
        __size_of_Set_Addr_Window 009A               __end_of_Console_Tab 4548  
                __end_of_MXK_Init 3474              i2Byte_GetPair@pInput 000A  
                           _putch 6038                             _total 0122  
                __end_of_SPI_Init 0B3A                  __end_of_SPI_Send 4EA8  
                      _BumpSensor 00F1                  __end_of_BangBang 5CE4  
           __end_ofi2_MXK_Release 60E6                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 5314  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 0063  
                  ??_Byte_SetPair 006F                             pow@yi 00D3  
                  ??_Byte_SetQuad 006F                             plusw2 000FDB  
                  ??_Byte_SetZone 0066                             status 000FD8  
                           wtemp6 0052                   _Configure_GPIOs 510A  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 5E62                       _Cliff_FLeft 013E  
             __size_of_LED_Toggle 0040               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001                       exp@exponent 00BF  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 0060  
                     ldexp@newexp 00B3                      __end_of_STP1 60C8  
                    __end_of_STP2 60C0                      __end_of_STP3 60B8  
                    __end_of_STP4 60B0                       _Cliff_Right 013D  
             __size_of_HMI_SetBar 000A                   __initialization 45DA  
             __size_of_HMI_Render 0036                       log@exponent 00B3  
             __end_of_Byte_GetBit 5C44                     _Current_Dist1 0141  
                   _Current_Dist2 0037                      __end_of_Turn 4C76  
                    __end_of_main 0796                _Vitual_Wall_Sensor 0140  
                    __end_of_itos 3F82              HMI_SetButton@reindex 0062  
                    SPI_Send9@dat 013A               __end_of_Byte_SetBit 53BA  
                __end_of_InitList FC09       __size_of_Port_CheckQuadType 0050  
                          ??_STP1 0060                            ??_STP2 0060  
                          ??_STP3 0060                            ??_STP4 0060  
                __end_of_Mode_Set 601C       __size_of_Port_CheckPortType 0040  
                          ??_Turn 0067                       HMI_Render@a 0068  
                          ??_main 00DB                            ??_itos 0070  
             __end_of_Init_Timer0 5EF6          __size_of_FunctInitButton 0076  
         _Console_MakeField$10974 006E                     __activetblptr 000003  
                          ?_LEDOn 0001                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 540A                 Port_SetPin@pValue 0072  
                       ??_LED_Set 0075                 _MXK_InitDIPSwitch 5F0E  
                  ??_FunctReadADC 0062                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 5DD8                       _GetPortPORT 4806  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 46F6  
                 ??_LCD_DrawField 007C                            ?_Drive 0061  
      __end_of_PortProperty_Valid 504A                  __end_of_Port_Set 1A38  
               __end_of_LEDToggle 58C4                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0054               __end_of_Button_Init 40E6  
             __end_of_Button_Poll 35A2                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 4A92                            _ADCON0 000FC2  
                          _ADCON1 000FC1                      ??_ADCAverage 00D7  
                       ??_SPI_DCS 0062                            ?_floor 00A9  
                          ?_ldexp 00AF                            ?_frexp 0060  
                      _Low_Sensor 004B                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 5D32  
          Port_SetQuadType@Output 009A                            _ANCON0 000FC1  
                ___awdiv@dividend 0060                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
                          _GODONE 007E11                  _Console_FormFeed 4DD0  
          Port_SetQuadType@pInput 0096                            _LEDOff 5E48  
                          i2l1630 3C68                            i2l1631 3CB4  
                          i2l1632 3CA0                            i2l1730 5A6C  
                          i2l1627 3CF0                            i2l1732 5A8C  
                          i2l1628 3CE6                            i2l1629 3C7E  
                          i2l1590 145E                    __CFG_WDTEN$OFF 000000  
             __size_of_ISR_Enable 000A                            i2l9632 5848  
                          i2l9634 5858                            _RCREG1 000FAF  
                          _RCSTA1 000FAC            __end_of_LCD_Word_Write 5E7C  
                  _Timer0_Restart 6062                            _SPBRG1 000FB0  
             ??_MXK_InitDIPSwitch 009B                            _TRISA2 007C92  
                          _TRISA3 007C93                            _TRISD5 007CAD  
                          _TRISD7 007CAF                            _TXREG1 000FAE  
                __end_of___xxtofl 2F5A                         ??_InitADC 0060  
                  i2_MXK_SwitchTo 5A5A                            _TXSTA1 000FAD  
                 Byte_GetBit@pBit 0062                        _Reset_High 5EC6  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077                  __end_of_delay_ms 51C4  
                    LED_Init@pLED 008D                  __end_of_delay_us 5740  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
        __size_of_Sensor_Observe2 0116                        _Timer0_ISR 5CE4  
        __size_of_Console_NewLine 007C                 Timer2_Init@DIVIDE 007A  
                  __CFG_XINST$OFF 000000                            _OutSeg 4D62  
        __size_of_HMI_InitButtons 0006                            ___flge 35A2  
                      _Motor_Step 38F0                   _Closest_Object2 4B86  
         __end_of_Event_DIPSwitch 5D32                         ??___fladd 0093  
                          ___wmul 5C94                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 0064  
                       ??___flneg 008B                    __CFG_STVREN$ON 000000  
                      _Robot_Init 5F56                            _change 004E  
                       ??___flmul 0076                            _lMotor 00ED  
                       ??___flsub 00A7                         ??___fltol 00A3  
                       ??___lldiv 0068                            _lQueue 00E6  
                      _TestButton 02DD                        _Robot_Stop 5D58  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 2142  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0138  
            __end_of_Console_Init 4F12                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 0018                            clear_0 4622  
                          clear_1 4634                            clear_2 4640  
                          clear_3 464C                            clear_4 4658  
                     ?_Coil_Setup 0001                __end_of_ADCAverage 14D8  
                ___awdiv@quotient 0066                        Port_Init@i 00A5  
               __end_of_MXK_Queue 6038        __end_ofHMI_SetButton@F7213 FC40  
                          _printf 2C9E         __end_of_MXK_InitDIPSwitch 5F26  
                          main@up 00E3                    HMI_SetButton@v 0067  
                          floor@i 00AD                            floor@x 00A9  
          HMI_SetSegments@pString 0061                       _Console_Tab 44B4  
             LCD_Word_Write@value 0065                      __pdataCOMRAM 0047  
              __size_of_Port_Init 0174                     ??_Port_GetPin 0063  
        Port_CheckPortType@Output 0099                   ??i2_Port_SetPin 0014  
                    __mediumconst FB56       __end_ofTimer2_Init@PRESCALE FC43  
        Port_CheckPortType@pDrive 0098                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 0096                     ??_Port_SetPin 0073  
                       ??_reverse 0064             Console_MakeField@Fill 0282  
                ?_Port_SetPinType 0086                            putch@c 0074  
                  ?_HMI_SetNumber 0076                    i2_Word_GetPair 5BBA  
         __end_of_Configure_GPIOs 5168                  ??_MXK_TestButton 0066  
          __end_of_Timer0_Restart 606E                     Set_Rotation@m 0065  
                    ?_MXK_Release 0001                        ___flge@ff1 0060  
                      ___flge@ff2 0064                        _SteppingCW 558E  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 5A90  
                    ___xxtofl@arg 006A                  __end_ofexp@coeff FE4B  
                    i2delay_us@us 0001                      ___xxtofl@exp 0069  
                    ___xxtofl@val 0060                  __end_oflog@coeff FE6F  
                 ?_LCD_Word_Write 0065                        __accesstop 0060  
         __end_of__initialization 465E                         ?_LCD_Fill 0069  
                       ?_LCD_Init 0001                      _Cliff_FRight 013F  
                   SPI_Init@pMode 0092                        ___flneg@f1 0087  
                 _Reset_variables 54AA                       _Byte_GetBit 5C18  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 607A  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 0068  
                       ?_HMI_Poll 0001                      eval_poly@res 00AB  
                   ___rparam_used 000001                        ___fltol@f1 009F  
                     _Byte_SetBit 5368                     __end_of_LEDOn 5E48  
                   __end_of_MASKS FC3C                    _PortA_Property FE7B  
                     ?_Event_NULL 0001                         LCD_Fill@i 006B  
                       LCD_Fill@j 006C                         LCD_Init@i 0097  
                   __end_of_Drive 57C6                    __pcstackCOMRAM 0001  
                _Get_Sensor_State 5EF6                    _PortB_Property FE79  
             __size_ofi2_delay_us 0040                      __pidataBANK1 5F3E  
                     _Init_Timer0 5EDE               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 5E12                   Console_Render@x 008A  
                 Console_Render@y 008B               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FC09  
            __end_of_Byte_GetZone 4B86                     __end_of_floor 38F0  
                   __end_of_ldexp 3DE6                     __end_of_frexp 437E  
             FunctReadADC@channel 0060                    _PortC_Property FE77  
                   __end_of_putch 6046                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 3338               __end_of_Timer0_Stop 60CE  
                       ?_SPI_Init 008D                         ?_SPI_Send 0060  
                     _Button_Init 4036                         ?_BangBang 0061  
               Port_SetType@pType 009C                       _Button_Poll 3474  
            __end_of_Byte_SetByte 602A              __end_of_Byte_SetPair 5D98  
                  _HMI_LeftSwitch 5FD0                    _PortD_Property FE75  
            __end_of_Byte_SetQuad 5DB8                      ??_LED_Toggle 0078  
                    ??_HMI_GetBar 0060              __end_of_Byte_SetZone 46F6  
                         ??_LEDOn 0061                    _HMI_DownSwitch 5F94  
                   SPI_Send@pData 0062                     ??_SteppingCCW 0066  
           __end_of_MXK_DIPSwitch 5F80                      ??_HMI_SetBar 0060  
                    ??_HMI_Render 0068                    _PortE_Property FE73  
                  _Sensor_Observe 39FE          __size_of_HMI_SetSegments 009C  
          __end_ofi2_Word_GetPair 5BEA                           ??_Drive 0063  
                  _PortF_Property FE71           Port_CheckQuadType@Pair1 0093  
         Port_CheckQuadType@Pair2 0094          MXK_BlockSwitchTo@pModule 0067  
                         ??_floor 00AD                           ??_ldexp 00B5  
                         ??_frexp 0066                 ??_FunctInitButton 00A8  
               _Console_Backspace 545A                   ?_Timer0_Restart 0001  
                         ??_putch 0074          __size_of_HMI_RightSwitch 0014  
             _Console_ClearCursor 5B5A                 __end_of_ToSegment 1CBC  
                  _PortG_Property FE6F                        __pbssBANK0 00E6  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 59B2           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                           ?_LEDOff 0001  
              __size_of_eval_poly 0100                  ??_SPI_DisableISR 0062  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 5EC6         __size_of_Event_TestButton 0034  
         __size_of_Port_TogglePin 002E                        ??_LCD_Fill 006B  
                      ??_LCD_Init 0095               __end_of_Port_SetPin 4036  
             __size_of_Coil_Setup 0012            __end_of_PortA_Property FE7D  
                       ?_Mode_Set 0001                Byte_SetByte@pInput 0060  
                      ??_LED_Init 008D                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
         __end_of_Closest_Object2 4C00                        ??_HMI_Init 00A8  
                      ??_HMI_Poll 0084                     ?_Timer2_Clear 0001  
         Port_CheckPairType@Props 008D            __end_of_PortB_Property FE7B  
              __size_of_eusartRec 0008                 __end_of_Port_Init 2B2A  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 0088  
              __end_of_LED_Toggle 5846                __end_of_HMI_GetBar 60D4  
        LCD_FillRectangle@pColour 0069              __end_of_FunctReadADC 593E  
             ??_Console_Backspace 0062                 Set_Addr_Window@xe 0066  
               Set_Addr_Window@ye 0067                 Set_Addr_Window@xs 0068  
               Set_Addr_Window@ys 0065                           ?_OutSeg 0063  
              Byte_SetPair@pInput 006B                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 006E                           ?___flge 0060  
              __end_of_HMI_SetBar 6098            __end_of_PortC_Property FE79  
              Word_GetPair@pInput 006C                __end_of_HMI_Render 5A5A  
                  ??_Set_Rotation 0065                         ?_Port_Set 006F  
                         ?___wmul 0060                       ?_Robot_Init 0001  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 0065  
                    ??_ISR_Enable 0060                       ?_Robot_Stop 0001  
    __size_of_Console_ResetCursor 001C              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 5FE4            __end_of_PortD_Property FE77  
                         _ADC_AN0 01DC                           _ADC_AN1 01D7  
                         _ADC_AN2 01D2                           _ADC_AN3 01CD  
                      ??_MXK_Init 00A6                 Port_GetPin@pInput 0060  
               _Console_MakeField 423A                 ??_Sensor_Observe2 00D9  
               ??_Console_NewLine 0060            __end_of_HMI_DownSwitch 5FA8  
                      ??_SPI_Init 0093            Event_TestButton@pState 0079  
                      ??_SPI_Send 0063                        ??_BangBang 0069  
                         ?_printf 0075                 ??_HMI_InitButtons 0060  
      __size_of_MXK_InitDIPSwitch 0018            __end_of_PortE_Property FE75  
             Console_Render@F6956 01E9            __end_of_Sensor_Observe 3B02  
              ?_Console_MakeField 0065                           _COUNTER 0033  
                 ??_HMI_SetButton 0060              __end_of_HMI_UpSwitch 5FBC  
                         _LED_Set 5622           _Console_IncrementCursor 5218  
                       ?___xxtofl 0060            __end_of_PortF_Property FE73  
                     _gBackcolour 0035                   ??_HMI_SetNumber 0078  
                       _I2C1_Done 0117                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0114                         _I2C1_More 0111  
                       _I2C2_More 010E                         ?_delay_ms 0060  
       __end_of_Console_Backspace 54AA                         ?_delay_us 0060  
             __size_of_Event_NULL 0002        __end_of_MXK_InitTestButton 5F3E  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F           __end_of_Reset_variables 54F6  
          __end_of_PortG_Property FE71               ??_Console_MakeField 0067  
                         _SPI_DCS 5B2A              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001          ?_InitSerialCommunication 0001  
             __end_of_SteppingCCW 5622                eusartSend@sendChar 0060  
            i2Byte_GetZone@Offset 0008                       ?_SteppingCW 0001  
                 __size_of_LEDOff 001A                __end_of_ISR_Enable 608E  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
               Event_TestButton@j 0039                        ??_Mode_Set 0060  
                  ??_Timer2_Clear 0060                           _Font5x7 FC43  
            i2Byte_GetZone@pChunk 0004                           _InitADC 54F6  
            i2Byte_GetZone@pInput 0001              SPI_DisableISR@pInput 0060  
                   ?_Port_GetQuad 0060                   Byte_SetBit@pBit 0062  
            Port_TogglePin@pInput 0074             __end_ofi2_Byte_SetBit 558E  
                         __Hparam 0000                 Port_GetQuad@pQuad 0062  
                     _Timer2_Init 31F2                           __Lparam 0000  
                     _Timer0_Stop 60C8             __size_of_Console_Init 006A  
                         OutSeg@a 003E   __end_ofPortProperty_Valid@F6830 FC29  
                   LCD_Write@mode 0063                   __size_of_OutSeg 006E  
                     _Motor_Count 002D                        ??_Port_Set 0072  
                 __size_of___flge 0122         __end_of_Console_MakeField 42E0  
               _Console_PrintChar 2F5A           __size_of_Closest_Object 00AA  
                         ___fladd 0E8C                     ?_Port_SetType 009A  
                         _gCursor 0047                           ___fldiv 14D8  
                         ___awdiv 488E                           ___flneg 5B8A  
           ??_Console_ClearCursor 0060                           ___flmul 0B3A  
                         ___flsub 56B2                           ___fltol 3DE6  
                         _lBuffer 0318                           ___lldiv 4914  
                 __size_of___wmul 0028                           ___lwdiv 5314  
                         ___lwmod 5740                           Turn@Dir 0065  
                         Turn@Rad 0069                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 4E3C                ?_Console_PrintChar 0001  
                         __pcinit 45DA                 __end_of_eval_poly 3C02  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                       _CCW_Count 012A                           __ptext0 0000  
                         __ptext1 4C00                           __ptext2 36C4  
                         __ptext3 39FE                           __ptext4 5F56  
                         __ptext5 5C44                           __ptext6 5D58  
                         __ptext7 54AA                           __ptext8 3338  
                         __ptext9 29B6                        _eusartSend 6046  
                 __size_of_printf 0168                           _average 00E9  
                       _T0CONbits 000FD5                   ?_Sensor_Observe 0001  
               i2MXK_SwitchTo@CUR 0007                           _countOn 01F7  
                         _dpowers FC29                         _T2CONbits 000FCA  
                   LED_Set@pValue 0074                      __size_of_exp 0274  
                    __size_of_log 0174               __size_of_Reset_High 0018  
           Event_DIPSwitch@pState 0079                      __size_of_pow 01D6  
                      ??___xxtofl 0064                      ?_GetPortPORT 0060  
                    ?_GetPortTRIS 0060               ??_Console_PrintChar 0070  
               __end_of_eusartRec 60A8                       _Port_GetPin 5978  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 01E5  
             LCD_DrawRectangle@p4 01E1                      ??i2_delay_us 0003  
                      ??_delay_ms 0062                        ??_delay_us 0062  
                         _reverse 52C0                         _DIPSwitch 02D3  
             __size_of_Timer0_ISR 0028                       _Port_SetPin 3F82  
         __size_of_UpdateDistance 0028                    LCD_DrawField@i 0082  
                       _LCD_Reset 53BA               __size_of_Motor_Step 010E  
                       _LCD_Write 5DB8              __size_of_MXK_Dequeue 0034  
                      delay_ms@ms 0060              end_of_initialization 465E  
                       _LEDToggle 5886               __size_of_Robot_Init 0016  
                         exp@sign 00C1                        delay_us@us 0060  
             __size_of_Robot_Stop 0020                 ??_HMI_SetSegments 0063  
         Console_PrintChar@pInput 0073                      _Console_Init 4EA8  
                 BangBang@LSpeedH 0065                   BangBang@LSpeedL 0067  
            __size_of_MXK_Release 0018        __end_of_Port_CheckPairType 510A  
                         itos@Out 0074                    ??_Port_GetQuad 0063  
              _PortProperty_Valid 4FE2                         i2u1420_48 5CF8  
                ?_Closest_Object2 0001                Byte_SetQuad@pInput 006B  
                 BangBang@RSpeedH 0061                   BangBang@RSpeedL 0063  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
           __size_of_Byte_GetPair 001C                   ___lldiv@divisor 0064  
           __size_of_Byte_GetZone 007A                 ??_HMI_RightSwitch 0066  
                         pow@sign 00D2                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 30AA                    ??_Port_SetType 009D  
      __end_of_Port_CheckQuadType 545A                           printf@c 0080  
                         printf@f 0075                    Port_Init@pPort 00A2  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0020  
                _ADCAverage$15670 0314            Console_MakeField@Index 0069  
                _ADCAverage$15665 0300                  _ADCAverage$15666 0304  
                _ADCAverage$15667 0308                  _ADCAverage$15668 030C  
                _ADCAverage$15669 0310                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 006F  
           __size_of_Byte_SetQuad 0020        __end_of_Port_CheckPortType 5806  
           __size_of_Byte_SetZone 008E                __end_ofi2_delay_us 5886  
              Button_Init@pInitIO 009F                 ?_Port_SetQuadType 0096  
                    ??_Coil_Setup 0060                       _gForecolour 01FB  
       ??_Console_IncrementCursor 0064            __size_ofi2_MXK_Release 0006  
             __size_of_SteppingCW 004A                         _PORTFbits 000F85  
                      _timercount 011E                ??_Port_SetQuadType 009A  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 0066  
                     ___fladd@grs 009E             Console_Render@lCursor 0086  
                     _SteppingCCW 55D8   __end_of_InitSerialCommunication 5DF6  
                       _MXK_Queue 602A                  __CFG_CPUDIV$OSC1 000000  
                   ___xxtofl@sign 0068                  Byte_GetZone@pMax 0062  
      __size_of_Console_Backspace 0050                         _TRISCbits 000F94  
                     _Square_Dist 0134                   _Set_Addr_Window 441A  
                  SPI_Init@pClock 008D                  ??_LCD_Word_Write 0067  
        __end_of_Get_Sensor_State 5F0E                       ___fldiv@grs 0073  
                     ___fldiv@rem 006D             __end_of_LCD_DrawField 4A16  
                  Port_Set@pInput 006F                    SPI_Init@pInput 0093  
            ??_PortProperty_Valid 0073                  ?_Reset_variables 0001  
                  Port_Set@pValue 0071                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 45DA                        ?_LCD_Write 0063  
                    _Byte_GetPair 5DF6                HMI_SetButton@F7213 FC3C  
                    _Byte_GetZone 4B0C                        ?_LEDToggle 0001  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 0080  
               LCD_DrawField@ymax 0081                    _Port_TogglePin 5BEA  
                _Event_TestButton 5AC4                       ___flmul@grs 007C  
           __size_of_FunctReadADC 003C              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060                    __end_of_LEDOff 5E62  
         __size_ofi2_Byte_GetPair 001A                      _Byte_SetByte 601C  
                    _Byte_SetPair 5D78                      _Byte_SetQuad 5D98  
         __size_ofi2_Byte_GetZone 0076                __end_of_Coil_Setup 600A  
                    _Byte_SetZone 4668              Port_SetPinType@pType 0089  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 0060  
                   ?_SPI_MaxSpeed 006F                 __size_of_LCD_Fill 0048  
                    ??_Event_NULL 0060                 __size_of_LCD_Init 0148  
               __size_of_LED_Init 0054                     ?_SPI_MinSpeed 006F  
           __end_ofi2_Timer0_Stop 60E0                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 017C                 __size_of_HMI_Poll 0060  
                   ?i2_Motor_Step 0001                      ?_Init_Timer0 0001  
      __size_of_Console_MakeField 00A6                    __end_of_OutSeg 4DD0  
                  __end_of___flge 36C4             __size_of_HMI_UpSwitch 0014  
                       _Close_Pos 002B                    __end_of___wmul 5CBC  
           __end_of_HMI_DIPSwitch 5F94                     __pidataCOMRAM 607A  
                    ?_Button_Init 009B                   _FunctInitButton 4C76  
                    ?_Button_Poll 007B                       ?_eusartSend 0001  
                       _Bus_State 004D               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA                 __size_of_MXK_Init 013C  
                       _BumpState 0130                       Turn@C_Angle 0067  
                      floor@expon 00B1              __end_of_Timer2_Clear 60A0  
                  __end_of_printf 2E06                 __size_of_SPI_Init 03A4  
               __size_of_SPI_Send 006C                     ?_Word_GetPair 006C  
               __size_of_BangBang 0028                  ??_Timer0_Restart 0060  
              Port_SetType@Output 009F               start_initialization 45DA  
                      ?_MXK_Queue 0060                        eval_poly@d 00A3  
                      eval_poly@n 00A5                        eval_poly@x 009F  
                      ldexp@value 00AF                      _FunctReadADC 5902  
        PortProperty_Valid@Errors 0075                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 526C                Port_SetType@pInput 009A  
                    _Current_Dist 0038                       __end_of_exp 1F30  
                     __end_of_log 2C9E                       _ADC_Reading 012E  
                     __end_of_pow 2318                        HMI_Init@in 00A8  
             HMI_SetNumber@pInput 0076             __end_ofi2_Port_SetPin 423A  
              __end_of_Event_NULL 1406            __end_of_Port_TogglePin 5C18  
                   ?_Word_SetPair 006F                 Byte_SetBit@pInput 0060  
                  ??_MXK_SwitchTo 0066                 Byte_SetBit@pValue 0063  
              ?_LCD_FillRectangle 0069               _Console_ResetCursor 5E12  
     PortProperty_Valid@pPinDrive 0071              MXK_BlockSwitchTo@CUR 0066  
        PortProperty_Valid@pInput 006F                          ??_LEDOff 0061  
                   i2_MXK_Release 60E0                        frexp@value 0060  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 019E  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1A38               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Sensor_Observe2 36C4  
                 _Console_NewLine 4A16                    ??_SPI_MinSpeed 0071  
                    _HMI_UpSwitch 5FA8                         _Reset_Low 5EAE  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 60D4  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 0150  
                       _gCharSize 01F1                  Timer2_Init@INDEX 00F2  
                       OutSeg@cur 0040                    ??i2_Motor_Step 0015  
                        ??_OutSeg 0064                         OutSeg@out 0067  
         __size_of_Console_Render 01B6                      ??_Motor_Step 0074  
                  _Closest_Object 40E6                          ??___flge 0068  
              Byte_SetZone@Offset 0069                      ??_Robot_Init 0063  
                        ??___wmul 0064                      ??_Robot_Stop 0061  
            ?_Console_ResetCursor 0001                         _Port_Init 29B6  
                     __pdataBANK1 01E9                 __size_of_Port_Set 02AA  
              Byte_SetZone@pChunk 0063                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 0060                Byte_SetZone@pValue 0065  
                   Mode_Set@pMode 0060                          ??_printf 0079  
         __end_of_Set_Addr_Window 44B4          Port_CheckQuadType@Output 0095  
                       _gLineSize 01ED          Port_CheckQuadType@pDrive 0092  
                       ___fladd@a 008F                         ___fladd@b 008B  
                  ??_Word_GetPair 006F          Port_CheckQuadType@pInput 008F  
            __end_of_Port_GetQuad 5902                         ___fldiv@a 0064  
                       ___fldiv@b 0060         __end_of_LCD_FillRectangle 52C0  
                     __pbssBIGRAM 0318                          ?_LED_Set 0074  
                       ___flmul@a 0072                         ___flmul@b 006E  
                     __pbssCOMRAM 0029                         ___flsub@a 00A3  
                       ___flsub@b 009F                __end_of_Reset_High 5EDE  
                   __pcstackBANK0 0060                     __pcstackBANK3 0300  
                  _UpdateDistance 5C44                        itos@Length 0072  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 0154  
              __end_of_Timer0_ISR 5D0C              __size_of_GetPortPORT 0088  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 0088  
            __end_of_Port_SetType 24E6                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 005C                 __size_of_delay_us 0046  
                       Turn@Angle 0061               __CFG_CCP2MX$DEFAULT 000000  
                     ??_LEDToggle 0061                __end_of_Motor_Step 39FE  
           Timer2_Init@pFrequency 006D                      ??_SteppingCW 0066  
                  ?i2_MXK_Release 0001                         Turn@Speed 0063  
              __end_of_Robot_Init 5F6C                __end_of_Robot_Stop 5D78  
                       _exp$15673 00BB                          ?_InitADC 0001  
        Port_CheckPairType@Output 008C               __size_of_eusartSend 000E  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 0089  
        Port_CheckPairType@pInput 0086                    reverse@tempVar 0064  
          __end_of_Closest_Object 4190                _MXK_InitTestButton 5F26  
                      ?_Reset_Low 0001            __size_of_MXK_DIPSwitch 0014  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 010B           __size_of_MXK_TestButton 0014  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 4CEC  
                ??_HMI_DownSwitch 0066  __size_of_InitSerialCommunication 001E  
                       __pintcode 1408                     __pmediumconst FB56  
           ??_Console_ResetCursor 0060                          ?___fladd 008B  
                        ?___fldiv 0060                          ?___awdiv 0060  
                       __ptext100 5218                         __ptext101 4A16  
                       __ptext110 60B8                         __ptext102 4DD0  
                        ?___flneg 0087                         __ptext111 60C0  
                       __ptext103 5E12                         __ptext120 423A  
                       __ptext112 5FF8                         __ptext104 545A  
                       __ptext121 5C18                         __ptext113 24E6  
                       __ptext105 5B5A                         __ptext130 3DE6  
                       __ptext122 11CA                         __ptext114 526C  
                       __ptext106 55D8                         __ptext131 35A2  
                       __ptext123 2142                         __ptext115 4998  
                       __ptext107 5168                         __ptext140 5D32  
                       __ptext132 3B02                         __ptext124 2B2A  
                       __ptext116 441A                         __ptext108 60A8  
                       __ptext141 3EC4                         __ptext133 0B3A  
                       __ptext125 1CBC                         __ptext117 5E62  
                       __ptext109 60B0                         __ptext150 5902  
                       __ptext142 52C0                         __ptext134 56B2  
                       __ptext126 3D02                         __ptext118 5DB8  
                       __ptext151 5CBC                         __ptext143 5740  
                       __ptext135 0E8C                         __ptext127 37DA  
                       __ptext119 600A                         __ptext160 5E7C  
                       __ptext152 6046                         __ptext144 5314  
                       __ptext136 5B8A                         __ptext128 42E0  
                       __ptext161 4CEC                         __ptext145 437E  
                       __ptext137 14D8                         __ptext129 2E06  
                       __ptext162 5542                         __ptext154 5CE4  
                       __ptext146 1A38                         __ptext138 5C94  
                       __ptext163 5A5A                         __ptext155 3C02  
                       __ptext147 5A24                         __ptext139 488E  
                       __ptext164 5846                         __ptext156 60DA  
                       __ptext148 4D62                         __ptext165 60E0  
                       __ptext157 606E                         __ptext149 4E3C  
                       __ptext166 6054                         __ptext158 4190  
                       _pShiftVal 00EB                         __ptext167 0000  
                       __ptext159 5BBA                          ?___flmul 006E  
                ??_Sensor_Observe 00D9                          ?___flsub 009F  
                        ?___fltol 009F                          ?___lldiv 0060  
                      ?_Port_Init 00A0                          ?___lwdiv 0060  
                        ?___lwmod 0067               ?_MXK_InitTestButton 0001  
               ?_Console_FormFeed 0001                 _GetPortProperties 477E  
                       _pow$15671 00CA                         _pow$15672 00CE  
              __end_of_SteppingCW 55D8       __end_ofTimer0_Init@PRESCALE FC19  
              ??_Console_FormFeed 0060                    __size_of_LEDOn 001A  
                 _HMI_SetSegments 437E                ?_GetPortProperties 0060  
                Event_NULL@pState 0001            __end_of_UpdateDistance 5C6C  
        __size_of_Event_DIPSwitch 0026             __size_of_Set_Rotation 0092  
                   ??i2_MXK_Queue 0004                         _eval_poly 3B02  
                     ??_MXK_Queue 0063                      ?_Port_GetPin 0060  
                  __size_of_Drive 0042             __end_of_HMI_SetButton 4B0C  
            __size_of_Console_Tab 0094                          ?_reverse 0060  
                    ?_Port_SetPin 006F                         _readIndex 0029  
           __end_of_HMI_SetNumber 5D58                  ___lwdiv@quotient 0065  
                 _HMI_RightSwitch 5FBC                    __size_of_floor 0116  
                  __size_of_ldexp 00E4                    __size_of_frexp 009E  
             ??_GetPortProperties 0062           __end_of_Sensor_Observe2 37DA  
         __end_of_Console_NewLine 4A92                         _eusartRec 60A0  
            ??_MXK_InitTestButton 008D                Byte_GetPair@pInput 0069  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 60DA  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 5E7C                          _LCD_Fill 566A  
                        _LCD_Init 30AA                    ___wmul@product 0064  
                        _HMIBoard 0146                    i2_Byte_GetZone 4CEC  
                        _LED_Init 51C4                         delay_ms@u 0062  
              Button_Poll@pButton 007B                         delay_us@u 0062  
                        _HMI_Init 283A                          _HMI_Poll 504A  
              MXK_Queue@pCallback 0060                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 5B8A  
        __size_of_Configure_GPIOs 005E              __size_of_Byte_GetBit 002C  
                 ?_Closest_Object 0001                 Byte_SetQuad@pQuad 006D  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                        _CW_Count 0128                          i2u690_40 5874  
                        i2u597_40 4D0E                          i2u597_47 4D04  
                        i2u686_44 5556                          i2u686_45 5552  
                        i2u599_40 4D56                          i2u687_44 557C  
                        i2u687_45 5578                          i2u599_45 4D52  
                        i2u784_40 3C46                          i2u785_40 3C5A  
            __size_of_Byte_SetBit 0052                          i2u786_40 3C92  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
              _Sensor_Observe_Fin 0126                  __CFG_WDTPS$32768 000000  
                HMI_SetBar@pValue 0060                 Button_Init@pInput 009B  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 008A                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 4806                          _SSP2STAT 000F6D  
                    _Set_Rotation 4548             __size_of_Timer2_Clear 0008  
            __end_of_MXK_SwitchTo 5978                _Port_CheckPairType 50AA  
                        _MXK_Init 3338              __size_of_Init_Timer0 0018  
                 MXK_SwitchTo@CUR 0066                          Drive@Rad 0063  
                        _SPI_Init 0796          __end_of_Event_TestButton 5AF8  
                        _SPI_Send 4E3C                          _BangBang 5CBC  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 0065                 ___wmul@multiplier 0060  
               Byte_GetBit@Output 0064                        printf@flag 007A  
            Timer2_Init@pCPUClock 0076        __size_of_LCD_FillRectangle 0054  
                    ?_SteppingCCW 0001              __size_of_Button_Init 00B0  
                 ?_UpdateDistance 0061              __end_of_SPI_MaxSpeed 4F7A  
                      printf@prec 007B                 Byte_GetBit@pInput 0060  
             Port_SetPinType@pPin 0088              __size_of_Button_Poll 012E  
                      ?_eval_poly 009F                _Port_CheckQuadType 540A  
                   _MXK_DIPSwitch 5F6C               ?_Port_CheckPairType 0086  
                       main@right 00E1              __end_of_SPI_MinSpeed 4FE2  
                   ??_MXK_Dequeue 0076                  __size_of_LED_Set 0048  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 57C6  
           Button_Poll@pIncrement 007D           PortProperty_Valid@F6830 FC19  
            __end_ofi2_Motor_Step 3D02                   ??i2_MXK_Release 0001  
               ?_Get_Sensor_State 0001                        _ADCAverage 11CA  
                       copy_data0 45EE                         copy_data1 460E  
                   ??_MXK_Release 0060                        ?_eusartRec 0001  
          __end_ofi2_Byte_GetPair 5E96         __size_of_Port_SetQuadType 0212  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 4D62               __end_ofi2_MXK_Queue 6062  
              ??_Get_Sensor_State 0061               ?_Port_CheckPortType 0096  
                 itos@destination 006E                          _InitList FB57  
            _Motor_Step$intlevel0 38F6                          _Mode_Set 600A  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
              Port_GetQuad@pInput 0060                      _Timer2_Clear 6098  
                __size_of_InitADC 004C              __end_of_Word_GetPair 5B2A  
                        _lCBuffer 0264              ??_Port_CheckPairType 008A  
                     ??_Reset_Low 0074                          __Hrparam 0000  
                    OutSeg@pInput 0066                    _Console_Render 24E6  
                        __Lrparam 0000                   Timer2_Init@RDIV 0072  
                ?_FunctInitButton 0001                    LCD_Write@value 0064  
                        _Port_Set 178E                      OutSeg@segset 003F  
                       rand@screw 003D              __end_of_Word_SetPair 59EC  
                     ??_Port_Init 00A3           __end_of_HMI_SetSegments 441A  
            ??_Port_CheckQuadType 0093          __size_of_Closest_Object2 007A  
                __size_of___fladd 033E                  __size_of___fldiv 02B6  
           __size_of_Port_GetQuad 003E                  __size_of___awdiv 0086  
                __size_of___flneg 0030                  __size_of___flmul 0352  
                __size_of___flsub 0048                  __size_of___fltol 00DE  
                __size_of___lldiv 0084                 _MXK_BlockSwitchTo 59EC  
                __size_of___lwdiv 0054              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0044                          _lBufferX 00F4  
                        _lBufferY 00F3               Timer2_Init@PRESCALE FC40  
                    ??_eusartSend 0060                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00EF           __end_of_HMI_RightSwitch 5FD0  
          Byte_GetZone@pChunkSize 0064                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 0064             __size_of_Port_SetType 01CE  
                   reverse@length 0062                         itos@input 006C  
           i2MXK_SwitchTo@pModule 0008                          ___xxtofl 2E06  
                        _delay_ms 5168                          _delay_us 56FA  
                        _clearall 00F5                   ___lwdiv@divisor 0062  
                 ___lwdiv@counter 0064                   Port_GetPin@pPin 0062  
                        __ptext10 2318                          __ptext11 57C6  
                        __ptext20 38F0                          __ptext12 178E  
                        __ptext21 60C8                          __ptext13 601C  
                        __ptext30 5E48                          __ptext22 6062  
                        __ptext14 46F6                          __ptext31 30AA  
                        __ptext23 593E                          __ptext15 477E  
                        __ptext40 5DD8                          __ptext32 4548  
                        __ptext24 5E96                          __ptext16 4806  
                        __ptext41 54F6                          __ptext33 566A  
                        __ptext25 602A                          __ptext17 51C4  
                        __ptext50 5FD0                          __ptext42 6084  
                        __ptext34 510A                          __ptext26 59EC  
                        __ptext18 5622                          __ptext51 5FE4  
                        __ptext43 504A                          __ptext35 4F12  
                        __ptext27 56FA                          __ptext19 5A90  
                        __ptext60 5978                          __ptext52 58C4  
                        __ptext44 3474                          __ptext36 53BA  
                        __ptext28 5886                          __ptext61 608E  
                        __ptext53 5D0C                          __ptext45 5F6C  
                        __ptext37 5EAE                          __ptext29 5E2E  
                        __ptext70 5B2A                          __ptext62 60CE  
                        __ptext54 1404                          __ptext46 5F80  
                        __ptext38 5EC6                          __ptext71 5EF6  
                        __ptext63 283A                          __ptext55 5AC4  
                        __ptext47 5F94                          __ptext39 5EDE  
             ??_MXK_BlockSwitchTo 0066                          __ptext80 1F30  
                        __ptext72 60A0                          __ptext64 4F7A  
                        __ptext56 4A92                          __ptext48 5FA8  
                        __ptext81 59B2                          __ptext73 4C76  
                        __ptext65 0796                          __ptext57 5806  
                        __ptext49 5FBC                          __ptext90 4668  
                        __ptext82 5D78                          __ptext74 4036  
                        __ptext66 31F2                          __ptext58 5BEA  
                        __ptext91 5784                          __ptext83 540A  
                        __ptext75 5F0E                          __ptext67 4914  
                        __ptext59 3F82                          __ptext92 4EA8  
                        __ptext84 50AA                          __ptext76 60D4  
                        __ptext68 6098                          __ptext93 4B86  
                        __ptext85 4FE2                          __ptext77 5F26  
                        __ptext69 5C6C                          __ptext94 558E  
                        __ptext86 5AF8                          __ptext78 269C  
                        __ptext95 40E6                          __ptext87 5DF6  
                        __ptext79 5368                          __ptext96 2C9E  
                        __ptext88 4B0C                          __ptext97 6038  
                        __ptext89 5D98                          __ptext98 2F5A  
                        __ptext99 44B4                      _SSP1CON1bits 000FC6  
                __size_of_reverse 0054                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 0068                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                ?_Sensor_Observe2 0001                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 0079  
                 ?i2_Byte_GetZone 0001                          _countOff 01F5  
                   __size_of_STP1 0008                     __size_of_STP2 0008  
                   __size_of_STP3 0008                     __size_of_STP4 0008  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 5AC4                 HMI_SetSegments@in 0064  
           Button_Init@pThreshold 009D                     __size_of_Turn 0076  
                   __size_of_main 0796                     __size_of_itos 00BE  
               Byte_GetPair@pPair 006B                          _readings 0200  
          __end_of_Console_Render 269C          __size_of_Reset_variables 004C  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
              __end_of_eusartSend 6054                      _Port_GetQuad 58C4  
             __end_of_MXK_Release 5EAE                    _MXK_TestButton 5FE4  
         _InitSerialCommunication 5DD8                     i2_Byte_SetBit 5542  
             i2Word_GetPair@pPair 000F         __end_of_MXK_BlockSwitchTo 5A24  
        ?_Console_IncrementCursor 0001              __size_of_Timer2_Init 0146  
                        int$flags 0051              __size_of_Timer0_Stop 0006  
                    _Port_SetType 2318                      Port_Set@Type 0086  
      __size_of_GetPortProperties 0088            __size_of_LCD_DrawField 007E  
               ??_Configure_GPIOs 0095                         printf@val 007E  
                    _SSP1STATbits 000FC7                          main@left 00E2  
                        main@down 00E0                    Timer0_Init@DIV 0104  
                  Timer0_Init@PRE 003B                      _SSP2STATbits 000F6D  
                        exp@coeff FE23                        _LED_Toggle 5806  
                        log@coeff FE4B                        _HMI_GetBar 60CE  
            Button_Init@pGetState 00A2            PortProperty_Valid@Pair 0085  
                ??_Port_TogglePin 0077                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2            PortProperty_Valid@pPin 0072  
                     ??_eval_poly 00A7                        _HMI_SetBar 608E  
                      _HMI_Render 5A24                  Byte_SetZone@MASK 006A  
                     i2_MXK_Queue 6054                    Timer2_Init@DIV 0100  
                  Timer2_Init@PRE 003A                  Byte_SetZone@pMax 0062  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 003A  
                     ?_ADCAverage 0001              Button_Init@pFunction 00A5  
                        itos@Data 0070                       ??_eusartRec 0060  
              LCD_FillRectangle@i 0075                LCD_FillRectangle@j 0076  
            __size_of_Port_SetPin 00B4                          intlevel2 0000  
                    reverse@input 0060                       _numReadings 01F9  
          __size_of_HMI_DIPSwitch 0014                  ___lwmod@dividend 0067  
                ___lldiv@dividend 0060            __end_of_MXK_TestButton 5FF8  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001A  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 003A  
                  _SPI_DisableISR 5C6C                   Port_Init@pInput 00A0  
                        printf@ap 007C                       _thisReading 0124  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 6084  
                ?_HMI_SetSegments 0061           Console_MakeField@Column 006C  
             main@Target_Distance 00E4             __size_of_SPI_MaxSpeed 0068  
                   SPI_DCS@pInput 0060             __size_of_SPI_MinSpeed 0068  
                 ??_MXK_DIPSwitch 0066             __size_ofi2_Motor_Step 0100  
         Console_MakeField@pInput 006B                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 0068                     ??_GetPortPORT 0062  
                 ___lwmod@divisor 0069                     ??_GetPortTRIS 0062  
               ??_Closest_Object2 00D9                Word_SetPair@pInput 006F  
                 ___lwmod@counter 006B                Word_SetPair@pValue 0072  
                     _MXK_Dequeue 5A90              __size_of_SteppingCCW 004A  
                  LED_Toggle@pLED 0078                     ___fladd@signs 009B  
                   _LCD_DrawField 4998                  _Port_SetQuadType 1F30  
                     _MXK_Release 5E96         __size_of_Console_FormFeed 006C  
                    _MXK_SwitchTo 593E             __size_of_Word_GetPair 0032  
              Byte_GetZone@Offset 0067                     ?_Console_Init 0001  
               Word_SetPair@pPair 0071                  ??_Closest_Object 00D9  
                 _Port_SetPinType 269C                      ___fladd@aexp 009C  
                    ___fladd@bexp 009D           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 0068         ??_InitSerialCommunication 0060  
              Byte_GetZone@pChunk 0063                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 5E2E                Byte_GetZone@pInput 0060  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 526C  
           __size_of_Word_SetPair 003A            __end_of_SPI_DisableISR 5C94  
                    _SPI_MaxSpeed 4F12                      _SPI_MinSpeed 4F7A  
              Port_Set@TypeActual 0084                        Drive@Speed 0061  
